{"_default": {"1": {"minorhacks": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4504", "title": "Bazel does not put `py_binary` targets with `default_python_version = \"PY3\"` under `bazel-bin`", "body": "### Description of the problem / feature request:\r\n\r\nBazel 0.9.0 does not put `py_binary` targets with `default_python_version = \"PY3\"` under `bazel-bin`. Instead, built targets appear under `bazel-out/` in a python3-specific bin directory rather than the same bin directory used by other targets (the one that `bazel-bin` remains symlinked to)\r\n\r\nI realize that Python 3 support is experimental, but is this expected behavior? I thought it was expected that any target built with `bazel build` should have its artifacts appear in `bazel-bin`.\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\n`some_py_proj/foo.py`:\r\n```\r\nif __name__ == \"__main__\":\r\n    print(\"Hello, world!\")\r\n```\r\n\r\n`some_py_proj/BUILD`:\r\n```\r\npy_binary(\r\n    name = \"foo\",\r\n    srcs = [\"foo.py\"],\r\n)\r\n```\r\n\r\n`bazel build some_py_proj:foo` prints:\r\n\r\n>Target //some_py_proj:foo up-to-date:\r\n>  **bazel-bin/some_py_proj/foo**\r\n\r\nModify `some_py_proj/BUILD`:\r\n```\r\npy_binary(\r\n    name = \"foo\",\r\n    srcs = [\"foo.py\"],\r\n    default_python_version = \"PY3\",\r\n)\r\n```\r\n\r\n`bazel build some_py_proj:foo` now prints:\r\n\r\n>Target //some_py_proj:foo up-to-date:\r\n>  **bazel-out/k8-py3-fastbuild/bin/some_py_proj/foo**\r\n\r\nand `bazel-bin` is symlinked to effectively `bazel-out/k8-fastbuild/bin`\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nUbuntu 16.04\r\n\r\n### What's the output of `bazel info release`?\r\n\r\n```\r\nrelease 0.9.0\r\n```\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nNothing in release notes about the Python3 binary output directory changing since 0.6.1, which we are migrating from (this version did put the built python3 artifact under `bazel-bin`). Nothing relevant by searching issues for `default_python_version` or by searching the web for `bazel-bin default_python_version`.\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "laszlocsomor": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4503", "title": "windows,testing: bazel_bootstrap_distfile_test is slow", "body": "### Description of the problem / feature request:\r\n\r\n`//src/test/shell/bazel:bazel_bootstrap_distfile_test` is very slow on Windows.\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\nI added logging between most operations in the test, after it took 48 minutes to run.\r\n\r\nWith the logging, it took 53 min, but I kept using the machine the whole time so some variance is to be expected. Still, these numbers are noteworthy:\r\n\r\n- startup until running the test method: 54s\r\n- [`unzip`](https://github.com/bazelbuild/bazel/blob/28c20f79e3d265f897e8c644a4c31bd2b3d6ac67/src/test/shell/bazel/bazel_bootstrap_distfile_test.sh#L40): 1m 51s\r\n- [`find` and `chmod`](https://github.com/bazelbuild/bazel/blob/28c20f79e3d265f897e8c644a4c31bd2b3d6ac67/src/test/shell/bazel/bazel_bootstrap_distfile_test.sh#L41): 20m 31s\r\n- [bootstrap & bazel version & bazel shutdown](https://github.com/bazelbuild/bazel/blob/28c20f79e3d265f897e8c644a4c31bd2b3d6ac67/src/test/shell/bazel/bazel_bootstrap_distfile_test.sh#L42-L45): 29m 25s\r\n- [`rm -rf` in `trap`](https://github.com/bazelbuild/bazel/blob/28c20f79e3d265f897e8c644a4c31bd2b3d6ac67/src/test/shell/bazel/bazel_bootstrap_distfile_test.sh#L37): ? (I messed up the logging here)\r\n\r\nLog:\r\n```\r\nINFO: Found 1 test target...\r\nDEBUG[Mon Jan 22 18:02:46 WEST 2018]  10 Test start\r\n(...)\r\nDEBUG[Mon Jan 22 18:03:39 WEST 2018]  20 setup complete\r\nDEBUG[Mon Jan 22 18:03:39 WEST 2018]  30 run suite\r\n(...)\r\n\r\n** test_bootstrap **************************************************************\r\nDEBUG[Mon Jan 22 18:03:40 WEST 2018]  40 start test\r\nDEBUG[Mon Jan 22 18:03:40 WEST 2018]  50 start unzip\r\nDEBUG[Mon Jan 22 18:05:31 WEST 2018]  60 start find\r\nDEBUG[Mon Jan 22 18:26:02 WEST 2018]  70 start compile.sh\r\n(...)\r\nDEBUG[Mon Jan 22 18:55:27 WEST 2018]  80 done test\r\n(...)\r\nDEBUG[Mon Jan 22 18:03:40 WEST 2018] 90 done rm\r\nPASSED: test_bootstrap\r\n```\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nWindows 10.\r\n\r\n### What's the output of `bazel info release`?\r\n\r\n0.10.0 rc4", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4473", "title": "windows,launcher: use the Unicode Windows API", "body": "### Description of the problem / feature request:\r\n\r\nThe native launcher for {sh,java,py}_binary rules should use the Unicode Window API, e.g. CreateProcessW instead of CreateProcessA here: https://github.com/bazelbuild/bazel/blob/adecfb2101a1bb19c53ab6c0361cd59073f8b723/src/tools/launcher/launcher.cc#L170\r\n\r\n### Feature requests: what underlying problem are you trying to solve with this feature?\r\n\r\nTo support non-ASCII characters in the path.\r\n\r\nThough Bazel doesn't support non-ASCII characters in paths, the user may copy/deploy the built binaries to non-ASCII paths and I think they could reasonably expect that the binaries run.\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nWindows 10.\r\n\r\n### What's the output of `bazel info release`?\r\n\r\n0.9.0\r\n\r\n---\r\n/cc @meteorcloudy ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4469", "title": "bazel,version: non-release versions display bogus \"build time\"", "body": "### Description of the problem / feature request:\r\n\r\n\"bazel version\" for non-release builds gives bogus \"build time\" entry.\r\n\r\nUPDATE(2018-01-17 12:26 CET): the problem seems to only affect release candidates and nightlies. From-source builds reset the timestamp to 0.\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\nRelease version's timestamps have millisecond precision.\r\nNon-release verion's timestamps have microsecond precision.\r\n\r\nDecoding the latter yields dates in the year 50010 AD.\r\n\r\n```\r\nC:\\(...)>c:\\work\\bazel-releases\\0.9.0\\bazel.exe --batch version\r\nExtracting Bazel installation...\r\nBuild label: 0.9.0\r\nBuild target: bazel-out/x64_windows-opt/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\r\nBuild time: Tue Dec 19 09:32:04 2017 (1513675924)\r\nBuild timestamp: 1513675924\r\nBuild timestamp as int: 1513675924\r\n\r\nC:\\(...)>c:\\work\\bazel-releases\\0.10.0\\rc2\\bazel.exe --batch version\r\nExtracting Bazel installation...\r\nBuild label: 0.10.0rc2\r\nBuild target: bazel-out/x64_windows-opt/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\r\nBuild time: Thu Jul 1 04:57:50 +50010 (1516011656270)\r\nBuild timestamp: 1516011656270\r\nBuild timestamp as int: 1516011656270\r\n```\r\n\r\nDemo (on Linux):\r\n```\r\n  $ date -d @1513675924 ; date -d  @1513675924 +%Y\r\nTue Dec 19 10:32:04 CET 2017\r\n2017\r\n\r\n  $ date -d @1516011656270 ; date -d @1516011656270 +%Y\r\nThu Jul  1 06:57:50 CEST 50010\r\n50010\r\n```\r\n\r\nDeleting the last 3 digits helps:\r\n\r\n```\r\n  $ date -d @1516011656 ; date -d @1516011656 +%Y\r\nMon Jan 15 11:20:56 CET 2018\r\n2018\r\n```\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nWindows 10 and Linux (Debian testing).\r\n\r\n---\r\n/cc @dslomov @philwo ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4460", "title": "runfiles: provide language-specific runfiles libraries", "body": "### Feature requests: what underlying problem are you trying to solve with this feature?\r\n\r\nFR: provide language-specific runfiles libraries, with implementations of platform-independent `rlocation`, for the main languages: Bash, Java, C++, Python.\r\n\r\nMotivation:\r\n- easier for users: they don't need to worry about runfiles semantics, just include a library and use runfiles the same way on every platform\r\n- easier for Bazel developers: we can change runfiles semantics if we need to, and only need to change the libraries and release Bazel for people to get the new semantics", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4388", "title": "bazel query: query for effective values of attributes", "body": "### Description of the problem / feature request:\r\n\r\nFeature request: bazel query operating on the effective values of attributes, e.g. querying the visibility of a target if it uses the package-default visibility.\r\n\r\nExample -- the query should return fg1 and fg2, but it only returns fg1:\r\n\r\n```\r\nC:\\tmp\\bzl>type a\\BUILD\r\npackage(default_visibility = [\"//visibility:public\"])\r\n\r\nfilegroup(\r\n    name = 'fg1',\r\n    srcs = ['BUILD'],\r\n    visibility=['//visibility:public'],\r\n)\r\n\r\nfilegroup(\r\n    name = 'fg2',\r\n    srcs = ['BUILD'],\r\n)\r\n\r\nfilegroup(\r\n    name = 'fg3',\r\n    srcs = ['BUILD'],\r\n    visibility=['//visibility:private'],\r\n)\r\n\r\nC:\\tmp\\bzl>bazel --output_user_root=c:\\tmp4 query --output=build //a:*\r\n# C:/tmp/bzl/a/BUILD:14:1\r\nfilegroup(\r\n  name = \"fg3\",\r\n  visibility = [\"//visibility:private\"],\r\n  srcs = [\"//a:BUILD\"],\r\n)\r\n\r\n# C:/tmp/bzl/a/BUILD:9:1\r\nfilegroup(\r\n  name = \"fg2\",\r\n  srcs = [\"//a:BUILD\"],\r\n)\r\n\r\n# C:/tmp/bzl/a/BUILD:3:1\r\nfilegroup(\r\n  name = \"fg1\",\r\n  visibility = [\"//visibility:public\"],\r\n  srcs = [\"//a:BUILD\"],\r\n)\r\n\r\nC:\\tmp\\bzl>bazel --output_user_root=c:\\tmp4 query attr(visibility, \"//visibility:public\", //a:*)\r\n//a:fg1\r\n```\r\n\r\n### Feature requests: what underlying problem are you trying to solve with this feature?\r\n\r\nhttps://stackoverflow.com/questions/48025329\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nWindows 10\r\n\r\n### What's the output of `bazel info release`?\r\n\r\n0.9.0\r\n\r\n### What's the output of `git remote get-url origin ; git rev-parse master ; git rev-parse HEAD` ?\r\n\r\nNot a git repo.\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nNo open GitHub issues AFAICT.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4335", "title": "\"bazel build\" supporting a query expression in place of target patterns", "body": "## Problem\r\n\r\nIt's a common scenario for CI systems to query for some tests, then call \"bazel test\" on them. The query results are often longer than the command line length limit, particularly on Windows. Test logs are also very hard to read when the build/test command lists a gazillion targets.\r\n\r\n## Feature Request\r\n\r\n\"bazel build\" and \"bazel query\" could support specifying a query expression, rather than a target pattern. Bazel would first evaluate the query, then build/test the results.\r\n\r\nFor simplicity's sake, we could introduce a new flag, `--target_query=<query-expr>`, and prohibit specifying target patterns if this flag is already present.\r\n\r\n## Justification\r\n\r\nThe query results are often longer than what fits on the command line, especially on Windows.\r\nPassing the query instead of its results would:\r\n- avoid having to run the bazel client twice\r\n- avoid the need to use recursive test_suites like `//src:all_windows_tests` (whose sole purpose is to work around the command line length limit)\r\n- avoid the need for Bazel supporting flagfiles (https://github.com/bazelbuild/bazel/issues/3750)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4335/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4334", "title": "runfiles library: support enumerating runfiles under a directory [blocking: #3865]", "body": "Feature request: some function that allows enumerating all runfiles under a directory.\r\n\r\nIdea: support maybe a glob-like syntax?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4327", "title": "Windows, runfiles: support paths with spaces", "body": "Fix this TODO:\r\nhttps://github.com/bazelbuild/bazel/blob/7b423ccd9506c6fb500b5c4998e1f26aebf28912/src/main/java/com/google/devtools/build/lib/windows/runfiles/WindowsRunfiles.java#L54-L55", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4319", "title": "Windows: break the dependency on Bash", "body": "Bazel should not require the presence of Bash, nor the presence of the `BAZEL_SH` envvar.\r\n\r\nBash should be just another tool(chain) like Python.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4319/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4292", "title": "Windows, testing: make all tests work on Windows", "body": "As of today, there are 282 tests that Bazel doesn't run on Windows.\r\n\r\nEDIT(2017-12-13 15:52 +0100): we need to consider tests that check the current platform too, e.g. in Java do things like `OS.getCurrent() == OS.WINDOWS`.\r\n\r\n```\r\nC:\\work\\bazel>bazel --output_user_root=c:\\tmp2 query \"tests(//...)-tests(//src:all_windows_tests)\"\r\n//tools/test:LcovMergerTest\r\n//tools/jdk:proguard_whitelister_test\r\n//tools/build_defs/pkg:path_test\r\n//tools/build_defs/pkg:make_rpm_test\r\n//tools/build_defs/pkg:build_test\r\n//tools/build_defs/pkg:archive_test\r\n//tools/build_defs/docker:rewrite_json_test\r\n//tools/build_defs/docker:create_image_config_test\r\n//tools/android:stubify_manifest_test\r\n//tools/android:strip_resources_test\r\n//tools/android:resource_extractor_test\r\n//tools/android:merge_manifests_test\r\n//tools/android:junction_test\r\n//tools/android:incremental_install_test\r\n//tools/android:build_split_manifest_test\r\n//tools/android:build_incremental_dexmanifest_test\r\n//tools/android:aar_resources_extractor_test\r\n//tools/android:aar_native_libs_zip_creator_test\r\n//tools/android:aar_embedded_jars_extractor_test\r\n//third_party/protobuf/3.4.0:win32_test\r\n//third_party/protobuf/3.4.0:py_wire_format_test\r\n//third_party/protobuf/3.4.0:py_unknown_fields_test\r\n//third_party/protobuf/3.4.0:py_text_format_test\r\n//third_party/protobuf/3.4.0:py_text_encoding_test\r\n//third_party/protobuf/3.4.0:py_symbol_database_test\r\n//third_party/protobuf/3.4.0:py_service_reflection_test\r\n//third_party/protobuf/3.4.0:py_reflection_test\r\n//third_party/protobuf/3.4.0:py_proto_builder_test\r\n//third_party/protobuf/3.4.0:py_message_test\r\n//third_party/protobuf/3.4.0:py_message_factory_test\r\n//third_party/protobuf/3.4.0:py_json_format_test\r\n//third_party/protobuf/3.4.0:py_generator_test\r\n//third_party/protobuf/3.4.0:py_descriptor_test\r\n//third_party/protobuf/3.4.0:py_descriptor_pool_test\r\n//third_party/protobuf/3.4.0:py_descriptor_database_test\r\n//third_party/protobuf/3.4.0:protobuf_test\r\n//third_party/ijar/test:zip_test\r\n//third_party/ijar/test:ijar_test\r\n//third_party/ijar/test:IjarTests\r\n//src/tools/skylark/javatests/com/google/devtools/skylark/skylint:SkylintTests\r\n//src/tools/singlejar:zlib_interface_test\r\n//src/tools/singlejar:zip_headers_test\r\n//src/tools/singlejar:zip64_test\r\n//src/tools/singlejar:transient_bytes_test\r\n//src/tools/singlejar:token_stream_test\r\n//src/tools/singlejar:output_jar_simple_test\r\n//src/tools/singlejar:output_jar_bash_test\r\n//src/tools/singlejar:options_test\r\n//src/tools/singlejar:input_jar_scan_ziptool_test\r\n//src/tools/singlejar:input_jar_scan_jartool_test\r\n//src/tools/singlejar:input_jar_preambled_test\r\n//src/tools/singlejar:input_jar_empty_jar_test\r\n//src/tools/singlejar:input_jar_bad_jar_test\r\n//src/tools/singlejar:combiners_test\r\n//src/test/skylark/skylint:skylint_test\r\n//src/test/skylark:skylark_test_testdata/string_test_characters_sky\r\n//src/test/skylark:skylark_test_testdata/string_splitlines_sky\r\n//src/test/skylark:skylark_test_testdata/string_split_sky\r\n//src/test/skylark:skylark_test_testdata/string_partition_sky\r\n//src/test/skylark:skylark_test_testdata/string_format_sky\r\n//src/test/skylark:skylark_test_testdata/min_max_sky\r\n//src/test/skylark:skylark_test_testdata/list_slices_sky\r\n//src/test/skylark:skylark_test_testdata/int_sky\r\n//src/test/skylark:skylark_test_testdata/int_constructor_sky\r\n//src/test/skylark:skylark_test_testdata/equality_sky\r\n//src/test/skylark:skylark_test_testdata/and_or_not_sky\r\n//src/test/skylark:skylark_test_testdata/all_any_sky\r\n//src/test/skylark:question_regexp_1\r\n//src/test/skylark:question_regexp\r\n//src/test/skylark:question_content\r\n//src/test/skylark:assert_tone_below_1\r\n//src/test/shell/integration:ui_test\r\n//src/test/shell/integration:test_test\r\n//src/test/shell/integration:stub_finds_runfiles_test\r\n//src/test/shell/integration:startup_options_test\r\n//src/test/shell/integration:stamping_test\r\n//src/test/shell/integration:skylark_flag_test\r\n//src/test/shell/integration:runfiles_test\r\n//src/test/shell/integration:run_test\r\n//src/test/shell/integration:rc_options_test\r\n//src/test/shell/integration:python_test\r\n//src/test/shell/integration:progress_reporting_test\r\n//src/test/shell/integration:process_wrapper_test\r\n//src/test/shell/integration:outputs_test\r\n//src/test/shell/integration:output_filter_test\r\n//src/test/shell/integration:logging_test\r\n//src/test/shell/integration:loading_phase_tests\r\n//src/test/shell/integration:linux_sandbox_test\r\n//src/test/shell/integration:linux_sandbox_network_test\r\n//src/test/shell/integration:java_integration_test\r\n//src/test/shell/integration:incompatible_changes_conflict_test\r\n//src/test/shell/integration:force_delete_output_test\r\n//src/test/shell/integration:experimental_ui_test\r\n//src/test/shell/integration:execution_phase_tests\r\n//src/test/shell/integration:discard_graph_edges_test\r\n//src/test/shell/integration:discard_analysis_cache_test\r\n//src/test/shell/integration:cpp_test\r\n//src/test/shell/integration:configured_query_test\r\n//src/test/shell/integration:client_sigint_test\r\n//src/test/shell/integration:build_event_stream_test\r\n//src/test/shell/integration:bazel_worker_test\r\n//src/test/shell/integration:bazel_testjobs_test\r\n//src/test/shell/integration:bazel_sandboxed_worker_test\r\n//src/test/shell/integration:bazel_query_test\r\n//src/test/shell/integration:bazel_javabase_test\r\n//src/test/shell/integration:bazel_command_log_test\r\n//src/test/shell/integration:action_env_test\r\n//src/test/shell/bazel/apple:bazel_objc_test\r\n//src/test/shell/bazel/apple:bazel_apple_test\r\n//src/test/shell/bazel/android:proguard_integration_test\r\n//src/test/shell/bazel/android:desugarer_integration_test\r\n//src/test/shell/bazel/android:android_sdk_integration_test\r\n//src/test/shell/bazel/android:android_ndk_integration_test\r\n//src/test/shell/bazel/android:android_integration_test\r\n//src/test/shell/bazel/android:aidl_integration_test\r\n//src/test/shell/bazel/android:aar_integration_test\r\n//src/test/shell/bazel:workspace_test\r\n//src/test/shell/bazel:toolchain_test\r\n//src/test/shell/bazel:srcs_test\r\n//src/test/shell/bazel:skylark_repository_test\r\n//src/test/shell/bazel:skylark_git_repository_test\r\n//src/test/shell/bazel:runfiles_test\r\n//src/test/shell/bazel:rule_test_test\r\n//src/test/shell/bazel:remote_execution_test\r\n//src/test/shell/bazel:remote_execution_sandboxing_test\r\n//src/test/shell/bazel:remote_execution_rest_test\r\n//src/test/shell/bazel:persistent_test_runner_test\r\n//src/test/shell/bazel:maven_test\r\n//src/test/shell/bazel:maven_skylark_test\r\n//src/test/shell/bazel:location_test\r\n//src/test/shell/bazel:local_repository_test_jdk8\r\n//src/test/shell/bazel:local_repository_test\r\n//src/test/shell/bazel:local_action_cache_test\r\n//src/test/shell/bazel:java_launcher_test\r\n//src/test/shell/bazel:help_test\r\n//src/test/shell/bazel:git_repository_test\r\n//src/test/shell/bazel:external_skylark_load_test\r\n//src/test/shell/bazel:external_integration_test\r\n//src/test/shell/bazel:external_correctness_test\r\n//src/test/shell/bazel:execroot_test\r\n//src/test/shell/bazel:empty_package_test\r\n//src/test/shell/bazel:embedded_tools_deps_test\r\n//src/test/shell/bazel:cross_repository_test\r\n//src/test/shell/bazel:cpp_darwin_integration_test\r\n//src/test/shell/bazel:client_test\r\n//src/test/shell/bazel:cc_static_binary_test\r\n//src/test/shell/bazel:cc_integration_test\r\n//src/test/shell/bazel:build_files_test\r\n//src/test/shell/bazel:bound_targets_test\r\n//src/test/shell/bazel:bazel_workspace_status_test\r\n//src/test/shell/bazel:bazel_with_jdk_test\r\n//src/test/shell/bazel:bazel_tools_test\r\n//src/test/shell/bazel:bazel_toolchain_test\r\n//src/test/shell/bazel:bazel_test_test\r\n//src/test/shell/bazel:bazel_sandboxing_test\r\n//src/test/shell/bazel:bazel_sandboxing_cpp_test\r\n//src/test/shell/bazel:bazel_rules_test\r\n//src/test/shell/bazel:bazel_repository_cache_test\r\n//src/test/shell/bazel:bazel_random_characters_test\r\n//src/test/shell/bazel:bazel_localtest_test\r\n//src/test/shell/bazel:bazel_java_test\r\n//src/test/shell/bazel:bazel_experimental_ui_test\r\n//src/test/shell/bazel:bazel_execute_testlog\r\n//src/test/shell/bazel:bazel_example_test\r\n//src/test/shell/bazel:bazel_docgen_test\r\n//src/test/shell/bazel:bazel_determinism_test\r\n//src/test/shell/bazel:bazel_coverage_test\r\n//src/test/shell/bazel:bazel_build_event_stream_test\r\n//src/test/shell:shell_utils_test\r\n//src/test/shell:bashunit_test\r\n//src/test/java/com/google/devtools/build/lib/rules/objc:ObjcRulesTests\r\n//src/test/java/com/google/devtools/build/lib/rules/cpp:cpp-rules-tests\r\n//src/test/java/com/google/devtools/build/lib/rules/android:AndroidInstrumentationTestTest\r\n//src/test/java/com/google/devtools/build/lib/profiler/memory:AllocationTrackerTest\r\n//src/test/java/com/google/devtools/build/lib/profiler/callcounts:CallcountsTest\r\n//src/test/java/com/google/devtools/build/lib/bazel/repository/downloader:DownloaderTestSuite\r\n//src/test/java/com/google/devtools/build/lib/bazel/repository:RepositoryTests\r\n//src/test/java/com/google/devtools/build/lib:standalone-tests\r\n//src/test/java/com/google/devtools/build/lib:shell_test\r\n//src/test/java/com/google/devtools/build/lib:server_test\r\n//src/test/java/com/google/devtools/build/lib:sandbox-tests\r\n//src/test/java/com/google/devtools/build/lib:foundations_test\r\n//src/test/java/com/google/devtools/build/lib:analysis_test\r\n//src/test/java/com/google/devtools/build/android/desugar/runtime:ThrowableExtensionTestWithReuseDesugaringStrategy\r\n//src/test/java/com/google/devtools/build/android/desugar/runtime:ThrowableExtensionTestWithNullDesugaringStrategy\r\n//src/test/java/com/google/devtools/build/android/desugar/runtime:ThrowableExtensionTestWithMimicDesugaringStrategy\r\n//src/test/java/com/google/devtools/build/android/desugar:testdata_sanity_test\r\n//src/test/java/com/google/devtools/build/android/desugar:testdata_desugared_twice_jar_test\r\n//src/test/java/com/google/devtools/build/android/desugar:testdata_desugared_java8_jar_test\r\n//src/test/java/com/google/devtools/build/android/desugar:testdata_desugared_jar_test\r\n//src/test/java/com/google/devtools/build/android/desugar:testdata_desugared_for_try_with_resources_test_twice\r\n//src/test/java/com/google/devtools/build/android/desugar:testdata_desugared_for_try_with_resources_test\r\n//src/test/java/com/google/devtools/build/android/desugar:testdata_desugared_for_disabling_try_with_resources_with_large_minsdkversion_test\r\n//src/test/java/com/google/devtools/build/android/desugar:testdata_desugared_core_library_jar_test\r\n//src/test/java/com/google/devtools/build/android/desugar:stateless_lambda_has_no_factory_method_test\r\n//src/test/java/com/google/devtools/build/android/desugar:simple_method_reference_has_no_factory_method_test\r\n//src/test/java/com/google/devtools/build/android/desugar:no_stubs_for_lambdas_in_implemented_interface\r\n//src/test/java/com/google/devtools/build/android/desugar:jacoco_legacy_default_method_regression_test\r\n//src/test/java/com/google/devtools/build/android/desugar:interface_has_method_bodies_removed\r\n//src/test/java/com/google/devtools/build/android/desugar:initializer_of_functional_interface_should_not_execute\r\n//src/test/java/com/google/devtools/build/android/desugar:inherited_abstract_method_gets_no_default_method_stub\r\n//src/test/java/com/google/devtools/build/android/desugar:desugar_testdata_by_disabling_lambda_desugaring_test\r\n//src/test/java/com/google/devtools/build/android/desugar:desugar_idempotency_test\r\n//src/test/java/com/google/devtools/build/android/desugar:capture_lambda_has_no_factory_method_test\r\n//src/test/java/com/google/devtools/build/android/desugar:TryWithResourcesRewriterUnitTestWithReuseStrategy\r\n//src/test/java/com/google/devtools/build/android/desugar:TryWithResourcesRewriterUnitTestWithNullStrategy\r\n//src/test/java/com/google/devtools/build/android/desugar:TryWithResourcesRewriterUnitTestWithMimicStrategy\r\n//src/test/java/com/google/devtools/build/android/desugar:StackMapBugTest\r\n//src/test/java/com/google/devtools/build/android/desugar:DesugarTryWithResourcesFunctionalTestWithReuseStrategyTwice\r\n//src/test/java/com/google/devtools/build/android/desugar:DesugarTryWithResourcesFunctionalTestWithReuseStrategy\r\n//src/test/java/com/google/devtools/build/android/desugar:DesugarTryWithResourcesFunctionalTestWithNullStrategyTwice\r\n//src/test/java/com/google/devtools/build/android/desugar:DesugarTryWithResourcesFunctionalTestWithNullStrategy\r\n//src/test/java/com/google/devtools/build/android/desugar:DesugarTryWithResourcesFunctionalTestWithMimicStrategyTwice\r\n//src/test/java/com/google/devtools/build/android/desugar:DesugarTryWithResourcesFunctionalTestWithMimicStrategy\r\n//src/test/java/com/google/devtools/build/android/desugar:DesugarObjectsRequireNonNullTestForAndroidLintMode\r\n//src/test/java/com/google/devtools/build/android/desugar:DesugarObjectsRequireNonNullTest\r\n//src/test/java/com/google/devtools/build/android/desugar:DesugarMainClassTestLambdaDirectoryIncorrectlySet\r\n//src/test/java/com/google/devtools/build/android/desugar:DesugarMainClassTestLambdaDirectoryCorrectlySet\r\n//src/test/java/com/google/devtools/build/android/desugar:DesugarLongCompareTest\r\n//src/test/java/com/google/devtools/build/android/desugar:DesugarLikeAndroidStudioFunctionalTest\r\n//src/test/java/com/google/devtools/build/android/desugar:DesugarJava8LikeAndroidStudioFunctionalTest\r\n//src/test/java/com/google/devtools/build/android/desugar:DesugarJava8FunctionalTest\r\n//src/test/java/com/google/devtools/build/android/desugar:DesugarIdempotencyFunctionalTest\r\n//src/test/java/com/google/devtools/build/android/desugar:DesugarFunctionalTestWithMultipleInputs\r\n//src/test/java/com/google/devtools/build/android/desugar:DesugarFunctionalTestWithClasspathDirectory\r\n//src/test/java/com/google/devtools/build/android/desugar:DesugarFunctionalTestFromDirectoryToJar\r\n//src/test/java/com/google/devtools/build/android/desugar:DesugarFunctionalTestFromDirectoryToDirectory\r\n//src/test/java/com/google/devtools/build/android/desugar:DesugarFunctionalTestForSyntheticMethodsWithLambdaNames\r\n//src/test/java/com/google/devtools/build/android/desugar:DesugarFunctionalTestForConstantArgumentsInLambdas\r\n//src/test/java/com/google/devtools/build/android/desugar:DesugarFunctionalTest\r\n//src/test/java/com/google/devtools/build/android/desugar:DesugarDefaultMethodsIdempotencyFunctionalTest\r\n//src/test/java/com/google/devtools/build/android/desugar:DesugarDefaultMethodsFunctionalTest\r\n//src/test/java/com/google/devtools/build/android/desugar:DesugarCoreLibraryFunctionalTest\r\n//src/test/java/com/google/devtools/build/android/desugar:DefaultMethodClassFixerTest\r\n//src/test/java/com/google/devtools/build/android/desugar:BytecodeTypeInferenceTest\r\n//src/test/docker:test_cc_configure-ubuntu-16.04-opt\r\n//src/test/docker:test_cc_configure-ubuntu-16.04-fastbuild\r\n//src/test/docker:test_cc_configure-ubuntu-16.04-dbg\r\n//src/test/docker:test_cc_configure-ubuntu-15.04-opt\r\n//src/test/docker:test_cc_configure-ubuntu-15.04-fastbuild\r\n//src/test/docker:test_cc_configure-ubuntu-15.04-dbg\r\n//src/test/docker:test_cc_configure-fedora23-opt\r\n//src/test/docker:test_cc_configure-fedora23-fastbuild\r\n//src/test/docker:test_cc_configure-fedora23-dbg\r\n//src/test/docker:test_cc_configure-debian-stretch-opt\r\n//src/test/docker:test_cc_configure-debian-stretch-fastbuild\r\n//src/test/docker:test_cc_configure-debian-stretch-dbg\r\n//src/test/docker:test_cc_configure-centos6.7-opt\r\n//src/test/docker:test_cc_configure-centos6.7-fastbuild\r\n//src/test/docker:test_cc_configure-centos6.7-dbg\r\n//src/java_tools/singlejar/javatests/com/google/devtools/build/zip:ZipTests\r\n//src/java_tools/singlejar/javatests/com/google/devtools/build/singlejar:SingleJarTests\r\n//src/java_tools/junitrunner/javatests/com/google/testing/junit/runner:utf8_test_log_test\r\n//src/java_tools/junitrunner/javatests/com/google/testing/junit/runner:junit4_testbridge_integration_test\r\n//src/java_tools/junitrunner/javatests/com/google/testing/junit/runner:deploy_jar_integration_test\r\n//src/java_tools/junitrunner/javatests/com/google/testing/junit/runner:antxmlresultwriter_integration_test\r\n//src/java_tools/junitrunner/javatests/com/google/testing/junit/runner:AllTests\r\n//src/java_tools/junitrunner/javatests/com/google/testing/junit/junit4/runner:RegExTestCaseFilterTest\r\n//src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac:TreePrunerTest\r\n//src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac:ProcessorClasspathTest_bootclasspath\r\n//src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac:JavacTurbineTest\r\n//src/java_tools/buildjar/javatests/com/google/devtools/build/java/bazel:BazelJavaCompilerTest\r\n//src/java_tools/buildjar/javatests/com/google/devtools/build/buildjar:VanillaJavaBuilderTest\r\n//scripts/release:relnotes_test\r\n//scripts/release:release_test\r\n//scripts:bash_completion_test\r\n//examples/shell:test\r\n//examples/py_native:test\r\n//examples/py_native:fail\r\n//examples/java-skylark/src/test/java/com/example/myproject:pass\r\n//examples/java-skylark/src/test/java/com/example/myproject:fail\r\n//examples/java-native/src/test/java/com/example/myproject:sleep3\r\n//examples/java-native/src/test/java/com/example/myproject:sleep2\r\n//examples/java-native/src/test/java/com/example/myproject:sleep1\r\n//examples/java-native/src/test/java/com/example/myproject:sleep0\r\n//examples/java-native/src/test/java/com/example/myproject:resource-fail\r\n//examples/java-native/src/test/java/com/example/myproject:hello\r\n//examples/java-native/src/test/java/com/example/myproject:fail\r\n//examples/java-native/src/test/java/com/example/myproject:custom_with_test_class\r\n//examples/java-native/src/test/java/com/example/myproject:custom\r\n//examples/cpp:hello-success_test\r\n//examples/cpp:hello-fail_test\r\n```\r\n\r\nWe need to make them all run on Windows and turn them on on CI, in order to have full test coverage on Windows.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4292/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4291", "title": "query, performance: running the same query twice should be fast", "body": "On Windows 10, with Bazel 0.8.1, I run the following query:\r\n\r\n```\r\nbazel --output_user_root=c:\\tmp2 query \"tests(//...)-tests(//src:all_windows_tests)\"\r\n```\r\n\r\nthen immediately I run it again without anything changing. The second time the query seems to be just as slow as the first time, even though all packages should already be loaded.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4280", "title": "runfiles, Windows: $RUNFILES should point to the actual runfiles directory", "body": "Split from https://github.com/bazelbuild/bazel/issues/4261#issuecomment-350797169:\r\n\r\n> the PWD dir sh_binary executed in should be RUNFILES. Currently\r\n>\r\n> PWD: `/c/cygwin64/tmp/_bazel_wyan/zgiahg30/execroot/__main__/bazel-out/x64_windows-fastbuild/bin/shell_wrapper.exe.runfiles`  # Has '.exe' in last segment of path, Exist in filesystem.\r\n>\r\n> RUNFILES: `C:\\cygwin64\\tmp\\_bazel_wyan\\zgiahg30\\execroot\\__main__\\bazel-out\\x64_windows-fastbuild\\bin\\shell_wrapper.runfiles`  # Not exist in filesystem\r\n\r\nI agree, $RUNFILES should point to the actual runfiles directory (with .exe in the name).", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4279", "title": "docs, Windows, runfiles: document runfiles semantics on Windows", "body": "Split from https://github.com/bazelbuild/bazel/issues/4261#issuecomment-350797169:\r\n\r\n> Document the windows specific behaviour at right place, i.e. https://docs.bazel.build/versions/master/output_directories.html. Bazel on Windows may desire a dedicated page on useage. Currently there is only the installation instruction on Windows.\r\n\r\nPerhaps a side-by-side comparison between Linux/macOS and Windows runfiles semantics would be the best.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4267", "title": "CI, bazel-tests: failed because \"Server crashed during startup.\"", "body": "Ran with Bazel 0.8.1 release at e7707580aa47b1dea03c2c6af2438219ee8d9bd6.\r\nI'll attempt to repro locally.\r\n\r\nhttps://ci.bazel.io/view/Dashboard/job/bazel-tests/1430/consoleFull\r\n```\r\n[node=darwin-x86_64] Running on darwin-x86_64-2 in /Users/ci/workspace/bazel-tests\r\n...\r\n[node=darwin-x86_64] FAIL: //src/test/shell/integration:bazel_command_log_test (shard 1 of 4) (see /private/var/tmp/_bazel_ci/e238dab0092a26635782fe338f37014d/execroot/io_bazel/bazel-out/darwin-fastbuild/testlogs/src/test/shell/integration/bazel_command_log_test/shard_1_of_4/test.log)\r\n[node=darwin-x86_64] INFO: From Testing //src/test/shell/integration:bazel_command_log_test (shard 1 of 4):\r\n[node=darwin-x86_64] ==================== Test output for //src/test/shell/integration:bazel_command_log_test (shard 1 of 4):\r\n[node=darwin-x86_64] INFO[bazel_command_log_test 17:10:53.N (+0000)] bazel binary is at /private/var/tmp/_bazel_ci/e238dab0092a26635782fe338f37014d/bazel-sandbox/5353985051735142676/execroot/io_bazel/bazel-out/darwin-fastbuild/bin/src/test/shell/integration/bazel_command_log_test.runfiles/io_bazel/src/test/shell/bin\r\n[node=darwin-x86_64] INFO[bazel_command_log_test 17:10:53.N (+0000)] setting up client in /private/var/tmp/_bazel_ci/e238dab0092a26635782fe338f37014d/bazel-sandbox/5353985051735142676/execroot/io_bazel/_tmp/f7c220b0f470ad2773ff5e717c672be2/workspace\r\n[node=darwin-x86_64] INFO[bazel_command_log_test 17:11:12.N (+0000)] setting up client in /private/var/tmp/_bazel_ci/e238dab0092a26635782fe338f37014d/bazel-sandbox/5353985051735142676/execroot/io_bazel/_tmp/f7c220b0f470ad2773ff5e717c672be2/workspace\r\n[node=darwin-x86_64] INFO: $TEST_TMPDIR defined: output root default is '/private/var/tmp/_bazel_ci/e238dab0092a26635782fe338f37014d/bazel-sandbox/5353985051735142676/execroot/io_bazel/_tmp/f7c220b0f470ad2773ff5e717c672be2' and max_idle_secs default is '15'.\r\n[node=darwin-x86_64] WARNING: Running Bazel server needs to be killed, because the startup options are different.\r\n[node=darwin-x86_64] \r\n[node=darwin-x86_64] Integration tests of bazel command log.\r\n[node=darwin-x86_64] \r\n[node=darwin-x86_64] ** test_client_server_mode_with_logging_flag ***********************************\r\n[node=darwin-x86_64] -- Test log: -----------------------------------------------------------\r\n[node=darwin-x86_64] INFO: $TEST_TMPDIR defined: output root default is '/private/var/tmp/_bazel_ci/e238dab0092a26635782fe338f37014d/bazel-sandbox/5353985051735142676/execroot/io_bazel/_tmp/f7c220b0f470ad2773ff5e717c672be2' and max_idle_secs default is '15'.\r\n[node=darwin-x86_64] .INFO: Reading 'startup' options from /private/var/tmp/_bazel_ci/e238dab0092a26635782fe338f37014d/bazel-sandbox/5353985051735142676/execroot/io_bazel/_tmp/f7c220b0f470ad2773ff5e717c672be2/bazelrc: --output_user_root=/private/var/tmp/_bazel_ci/e238dab0092a26635782fe338f37014d/bazel-sandbox/5353985051735142676/execroot/io_bazel/_tmp/f7c220b0f470ad2773ff5e717c672be2/root --host_javabase=/private/var/tmp/_bazel_ci/e238dab0092a26635782fe338f37014d/bazel-sandbox/5353985051735142676/execroot/io_bazel/bazel-out/darwin-fastbuild/bin/src/test/shell/integration/bazel_command_log_test.runfiles/local_jdk\r\n[node=darwin-x86_64] \r\n[node=darwin-x86_64] Server crashed during startup. Now printing '/private/var/tmp/_bazel_ci/e238dab0092a26635782fe338f37014d/bazel-sandbox/5353985051735142676/execroot/io_bazel/_tmp/f7c220b0f470ad2773ff5e717c672be2/root/2b3c63579012db7c499e5eb8d5daf689/server/jvm.out':\r\n[node=darwin-x86_64] ------------------------------------------------------------------------\r\n[node=darwin-x86_64] test_client_server_mode_with_logging_flag FAILED: Expected success .\r\n[node=darwin-x86_64] /private/var/tmp/_bazel_ci/e238dab0092a26635782fe338f37014d/bazel-sandbox/5353985051735142676/execroot/io_bazel/bazel-out/darwin-fastbuild/bin/src/test/shell/integration/bazel_command_log_test.runfiles/io_bazel/src/test/shell/integration/bazel_command_log_test:93: in call to test_client_server_mode_with_logging_flag\r\n[node=darwin-x86_64] INFO: $TEST_TMPDIR defined: output root default is '/private/var/tmp/_bazel_ci/e238dab0092a26635782fe338f37014d/bazel-sandbox/5353985051735142676/execroot/io_bazel/_tmp/f7c220b0f470ad2773ff5e717c672be2' and max_idle_secs default is '15'.\r\n[node=darwin-x86_64] ...........\r\n[node=darwin-x86_64] FAILED: test_client_server_mode_with_logging_flag\r\n[node=darwin-x86_64] \r\n[node=darwin-x86_64] ** 0 / 1 tests passed. *********************************************************\r\n[node=darwin-x86_64] ** There were errors. **********************************************************\r\n[node=darwin-x86_64] ================================================================================\r\n```", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4220", "title": "User Manual: document `--workspace_status_command`", "body": "The documentation is missing for this.\r\n\r\nI offer my answer on https://stackoverflow.com/questions/47622645 as source material for this.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4219", "title": "Build Encyclopedia: document `genrule.stamp`", "body": "Even though `genrule.stamp` is supported in Bazel, not just Blaze, it's not documented publicly.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4178", "title": "`--test_output=streamed` disables validation for subsequent `--test_strategy` flag", "body": "### Description of the problem / feature request / question:\r\n\r\nIf I use `--test_output=streamed`, then pass `--test_strategy=X`, Bazel doesn't give a warning about the invalid strategy, nor does it indicate that it'll ignore the flag.\r\n\r\nIf I change `streamed` to `errors`, or remove the `--test_output` flag, then Bazel correctly errors out that `X` is not a valid strategy.\r\n\r\nI guess the reason is [`--test_output=streamed` implies `--test_strategy=exclusive`](), but unless you know this, it can be confusing to expect for example a sandboxed test execution but get an exclusive (non-sandboxed) one, without any warning from Bazel.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\n```\r\n  $ cat BUILD\r\nsh_test(\r\n    name = 'foo_test',\r\n    srcs = ['foo_test.sh'],\r\n)\r\n\r\n\r\n  $ cat foo_test.sh \r\n#!/bin/bash\r\n\r\n\r\n  $ bazel test //:foo_test --test_output=streamed --test_strategy=X\r\nWARNING: Streamed test output requested. All tests will be run locally, without sharding, one at a time\r\nINFO: Analysed target //:foo_test (0 packages loaded).\r\nINFO: Found 1 test target...\r\nTarget //:foo_test up-to-date:\r\n  bazel-bin/foo_test\r\nINFO: Elapsed time: 0.168s, Critical Path: 0.00s\r\nINFO: Build completed successfully, 1 total action\r\n//:foo_test                                                     (cached) PASSED in 0.1s\r\n\r\nExecuted 0 out of 1 test: 1 test passes.\r\nThere were tests whose specified size is too big. Use the --test_verbose_timeout_warnings command line option to see which ones these are.\r\n\r\n\r\n  $ bazel test //:foo_test --test_output=errors --test_strategy=X\r\nERROR: 'X' is an invalid value for test strategy. Valid values are: exclusive, experimental_worker, standalone\r\nINFO: Elapsed time: 0.140s\r\nFAILED: Build did NOT complete successfully (0 packages loaded)\r\nERROR: Couldn't start the build. Unable to run tests\r\n\r\n\r\n  $ bazel test //:foo_test --test_strategy=X\r\nERROR: 'X' is an invalid value for test strategy. Valid values are: exclusive, experimental_worker, standalone\r\nINFO: Elapsed time: 0.135s\r\nFAILED: Build did NOT complete successfully (0 packages loaded)\r\nERROR: Couldn't start the build. Unable to run tests\r\n```\r\n\r\n### Environment info\r\n* Operating System:\r\nUbuntu 14.04\r\n\r\n* Bazel version (output of `bazel info release`):\r\n0.8.0", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4171", "title": "Windows: *_test rule $(location) expansion bad for data-deps", "body": "### Description of the problem / feature request / question:\r\n\r\nSome `*_test` rules support `$(location)` expansion for their prerequisites (`srcs`, `data`, maybe more).\r\nFor `data` dependencies, the expansion should yield the absolute path of the runfile, not the runfiles-root-relative path, because Bazel doesn't create a runfiles tree on Windows.\r\n\r\nThis breaks classpath flags in `java_test.jvm_flags` for example.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\n```\r\nC:\\work\\bazel>type foo\\BUILD\r\njava_binary(\r\n    name = \"foo\",\r\n    srcs = [\"Foo.java\"],\r\n    main_class = \"Foo\",\r\n    jvm_flags = [\"-Dfoo.bar=$(location @bazel_tools//third_party/java/jdk/langtools:javac)\"],\r\n    data = [\"@bazel_tools//third_party/java/jdk/langtools:javac\"],\r\n)\r\n\r\n\r\nC:\\work\\bazel>type foo\\Foo.java\r\npublic class Foo {\r\n  public static void main(String[] args) {\r\n    System.out.println(\"hello\");\r\n    System.out.println(\"foo.bar=\" + System.getProperty(\"foo.bar\"));\r\n  }\r\n}\r\n\r\nC:\\work\\bazel>bazel run //foo\r\nINFO: Found 1 target...\r\nTarget //foo:foo up-to-date:\r\n  C:/users/laszlocsomor/appdata/local/temp/_bazel_laszlocsomor/o6hbs7n0/execroot/io_bazel/bazel-out/msvc_x64-fastbuild/bin/foo/foo.jar\r\n  C:/users/laszlocsomor/appdata/local/temp/_bazel_laszlocsomor/o6hbs7n0/execroot/io_bazel/bazel-out/msvc_x64-fastbuild/bin/foo/foo.exe\r\nINFO: Elapsed time: 0.641s, Critical Path: 0.01s\r\n\r\nINFO: Running command line: C:/users/laszlocsomor/appdata/local/temp/_bazel_laszlocsomor/o6hbs7n0/execroot/io_bazel/bazel-out/msvc_x64-fastbuild/bin/foo/foo.exe\r\nhello\r\nfoo.bar=external/bazel_tools/third_party/java/jdk/langtools/javac-9-dev-r4023-3.jar\r\n```\r\n\r\n### Environment info\r\n* Operating System:\r\nWindows 10\r\n\r\n* Bazel version (output of `bazel info release`):\r\n0.7.0\r\n\r\n###  Have you found anything relevant by searching the web?\r\nRelated to https://github.com/bazelbuild/bazel/issues/4165.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4148", "title": "Windows: build TensorFlow Lite with Bazel on Windows", "body": "This is a tracking bug for building TF Lite on Windows with Bazel.\r\n\r\n- [x] remove -Wno-implicit-fallthrough from `@tensorflow//third_party/flatbuffers/flatbuffers.BUILD`\r\n- [x] remove single quotes from repro command's --cxxflags\r\n- [ ] update README.md: use drive root as --output_user_root (long paths)\r\n- [ ] update README.md: build with \"-c opt\" (long paths)\r\n- [ ] edit WindowsJniLoader to load from bazel_tools, not from `<reponame>/external/bazel_tools` (must test on Android BusyBox)\r\n- [ ] create `src/main/native/windows/BUILD.tools`\r\n- [ ] add `src/main/native/windows/*.{cc,h}` to `//src/main/native/windows:embedded_tools`\r\n- [ ] Java SingleJar doesn't support `--nocompress_suffixes`, and some build rule requires that --> migrate to C++ SingleJar on Windows (#2241)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4096", "title": "Windows, non-fatal Java worker error: \"The filename or extension is too long.\"", "body": "### Description of the problem / feature request / question:\r\n\r\nJava worker fails with \"The filename or extension is too long.\" error, though this doesn't fail the whole build. The path is actually well below 259 characters, so the error message seems to be misguided.\r\n\r\n```\r\nINFO: From Compiling Java headers src/main/java/com/google/devtools/build/lib/libbuild-base-hjar.jar (441 files):\r\nAction failed to execute: java.io.IOException: ERROR: src/main/native/windows/processes-jni.cc(410): nativeCreateProcess(D:\\bazel_build\\execroot\\io_bazel\\external\\local_jdk\\bin\\java.exe): The filename or extension is too long.\r\n```\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\n```\r\nsubst d: c:\\d_drive\r\n\r\nmkdir d:\\os\r\n\r\nd:\r\n\r\ncd d:\\os\r\n\r\ngit clone https://github.com/bazelbuild/bazel.git\r\n\r\ngit checkout 2686e4e301dec8d30b901e8fcdce70dd83cec69c\r\n\r\nc:\\work\\bazel-0.7.0\\bazel.exe --output_base=d:\\bazel_build build --stamp --action_env=USE_DYNAMIC_CRT=1 --action_env=NO_MSVC_WRAPPER=1 --compilation_mode opt --verbose_failures src:bazel.exe\r\n\r\nD:/bazel_build/execroot/io_bazel/bazel-out/msvc_x64-opt/bin/src/bazel.exe --output_base=d:\\bazel_build build --stamp --action_env=USE_DYNAMIC_CRT=1 --action_env=NO_MSVC_WRAPPER=1 --compilation_mode opt --verbose_failures src:bazel.exe\r\n```\r\n\r\n### Environment info\r\n* Operating System: Windows 10\r\n\r\n\r\n* Bazel version (output of `bazel info release`): 0.7.0, then a dev version\r\n\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nFound this while attempting to repro https://github.com/bazelbuild/bazel/issues/4035", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3963", "title": "Android, Windows: update //tools/android/*.py to support long paths on Windows", "body": "Update `//tools/android/*.py` to support long paths on Windows.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3912", "title": "Windows presubmit failure: GetExitCodeProcess(): The handle is invalid.", "body": "We saw this on the internal CI (bug 67878584).\r\n\r\nTwo parts of the build log:\r\n```\r\nCaused by: java.lang.IllegalStateException: GetExitCodeProcess(): The handle is invalid.\r\n\r\n        at com.google.devtools.build.lib.windows.WindowsSubprocess.exitValue(WindowsSubprocess.java:195)\r\n        at com.google.devtools.build.lib.shell.FutureCommandResultImpl.waitForProcess(FutureCommandResultImpl.java:89)\r\n        at com.google.devtools.build.lib.shell.FutureCommandResultImpl.get(FutureCommandResultImpl.java:42)\r\n        at com.google.devtools.build.lib.shell.Command.execute(Command.java:248)\r\n        at com.google.devtools.build.lib.exec.local.LocalSpawnRunner$SubprocessHandler.start(LocalSpawnRunner.java:270)\r\n        at com.google.devtools.build.lib.exec.local.LocalSpawnRunner$SubprocessHandler.run(LocalSpawnRunner.java:153)\r\n```\r\n\r\nIn the same log, further down:\r\n\r\n```\r\nERROR: T:/tmp/tmpg24w5c/third_party/BUILD:370:1: Extracting interface //third_party:guava failed (Exit -1). Note: Remote connection/protocol failed with: execution failed: ijar.exe failed: error executing command \r\n  cd T:/tmp/_bazel_kbuilder/glwgywz0/execroot/io_bazel\r\n  SET PATH=C:\\msys64\\usr\\bin;C:\\msys64\\bin;C:\\msys64\\usr\\bin\\;C:\\python27;C:\\cygwin64\\bin;(...);C:\\Windows\\System32\\WindowsPowerShell\\v1.0\r\n    SET TEMP=T:\\tmp\r\n    SET TMP=T:\\tmp\r\n  external/bazel_tools/tools/jdk/ijar/ijar.exe third_party/error_prone/error_prone_annotations-2.1.1.jar bazel-out/host/genfiles/third_party/_ijar/guava/third_party/error_prone/error_prone_annotations-2.1.1-ijar.jar.\r\nAction failed to execute: java.io.IOException: CreatePipe(stdin): The handle is invalid.\r\n```\r\n\r\n/cc @lberki ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3889", "title": "Windows,Skylark: write rule migration guide", "body": "Write a guide on how to write portable Skylark rules.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3889/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3888", "title": "Windows,Android: Bazel should work with Android Studio on Windows", "body": "Now that Bazel on Windows can build `android_*` rules, let's make it also work with Android Studio on Windows.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3888/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3865", "title": "Windows, native launcher: sh_binary doesn't have `rlocation`", "body": "When using the native launcher, the .exe launcher created from sh_binary rules doesn't define `rlocation` for the shell script.\r\n\r\nNormally `rlocation` is defined for shell tests because they all run https://github.com/bazelbuild/bazel/blob/master/tools/test/test-setup.sh which defines and exports this function.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/aad6304ad938cae6010c1d58f01d92a12a81ac1a", "message": "vfs_test: mark as flaky\n\nBefore commit f47291ee3 [1],\nFileSystemConcurrencyTest was part of\n\"foundations_test\" which was marked as flaky.\n\nAfter the change, this test is part of \"vfs_test\"\nwhich is not marked as flaky.\n\nLooking at the test code [2] it's clearly flaky,\nso the modification is appropriate.\n\n[1]\nhttps://github.com/bazelbuild/bazel/commit/f47291ee35e01ebd58951e81b3e65be3243a5f13\n[2] https://github.com/bazelbuild/bazel/blob/6f502ac12180973f4646c95d95e1516082b3c71c/src/test/java/com/google/devtools/build/lib/vfs/FileSystemConcurrencyTest.java#L46\n\nRELNOTES: none\nPiperOrigin-RevId: 182352485"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/68371172ae9012a1b368d05c4a0d6483812fcd42", "message": "java,runfiles: runfiles library in @bazel_tools\n\nAlso make most targets in `//src/tools/runfiles`\nprivate. The user should depend on\n`@bazel_tools//tools/runfiles:$LANG-runfiles`\ninstead.\n\nSee https://github.com/bazelbuild/bazel/issues/4460\n\nRELNOTES[NEW]: java,runfiles: You can now depend on `@bazel_tools//tools/runfiles:java-runfiles` to get a platform-independent runfiles library for Java. See JavaDoc of https://github.com/bazelbuild/bazel/blob/master/src/tools/runfiles/java/com/google/devtools/build/runfiles/Runfiles.java for usage information.\n\nChange-Id: Iba9113453222ae74ce42a324272711f613104891\nPiperOrigin-RevId: 182022851"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/e042e9e31f8c861d60f932b6eb612b1106886903", "message": "java,runfiles: cut all third-party dependencies\n\nCut all dependencies of the Java runfiles library,\nso we can include its sources in @bazel_tools, and\nany Java project can safely depend on it without\nworrying about pulling in an incompatible version\nof Guava for example.\n\nSee https://github.com/bazelbuild/bazel/issues/4460\n\nChange-Id: I4a9314c56a2c9dc3afdf53669429750d8fb81e3b\nPiperOrigin-RevId: 181968558"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/5bfa5844d0d16d71e88002956e88402bfec88ef7", "message": "actions,temp: respect TMPDIR envvar\n\nFixes https://github.com/bazelbuild/bazel/issues/4376\n\nChange-Id: Id78bb0930044626304e54f07735db4d4b2c84720\nPiperOrigin-RevId: 181959528"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/8d4182275c6c344ae37ff090b4721ac087f7ff75", "message": "windows,tests: enable some tests on Windows\n\nAdd \":windows_tests\" and \":all_windows_tests\"\nrules to these packages, and include them in the\nparent packages.\n\nFixes https://github.com/bazelbuild/bazel/issues/4127\nSee https://github.com/bazelbuild/bazel/issues/4292\n\nChange-Id: I9c454ed21f47feb8e88e1c25b1e4fa216baa38f6\nPiperOrigin-RevId: 181951525"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/f47291ee35e01ebd58951e81b3e65be3243a5f13", "message": "windows,tests: enable some foundation tests\n\nSplit //src/test/j/c/g/d/b/lib:foundations_test\ninto smaller tests, and enable many of them on\nWindows.\n\nSome tests are still tagged as \"no_windows\",\neither because they depend on \":unix\", or because\nwe need to fix them to pass on Windows.\n\nSee https://github.com/bazelbuild/bazel/issues/4292\n\nChange-Id: Ibfab568a9e7b939c40f1301c9cfe06e60302755c\nPiperOrigin-RevId: 181936880"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/e5436745e1732f5e43fc55f0deb5b19e23ce8524", "message": "windows: fix --symlink_prefix=/ throwing exception\n\nFixes https://github.com/bazelbuild/bazel/issues/4421\n\nRELNOTES: none\nPiperOrigin-RevId: 181742216"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/4d6cc0cfcf762e2a644510483942d199ab91d737", "message": "java,runfiles: add Java library to handle runfiles\n\nThis is a prerequisite to port all tests to run on\nWindows. It is also part of the effort to provide\nplatform-independent, language-specific\nrunfiles-handling libraries.\n\nSee:\n- https://github.com/bazelbuild/bazel/issues/4292\n- https://github.com/bazelbuild/bazel/issues/3839\n\nChange-Id: Ic64aadcf3f97885de3151da9f921d6351687dce9\nPiperOrigin-RevId: 181727511"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/6cc2ad8676d1ae0542b351a07a05ddbe5efac165", "message": "sandbox: add env[TMPDIR] instead of `tmpDir`\n\nBazel now adds env[TMPDIR] to the set of\nsandbox-writable paths, instead of adding the\ncaller-defined `tmpDir` as it used to.\n\nSince every caller of getWritableDirs passes the\nLocalEnvProvider-processed environment to\ngetWritableDirs, and because all such callers use\neither PosixLocalEnvProvider or\nXCodeLocalEnvProvider, we can be sure that the\nenvironment has an entry for TMPDIR.\n\nChange-Id: Ia89544a009e56d9cc922ab56823d16d20465545e\nPiperOrigin-RevId: 181595606"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/2e631c99495f75270d2639542cefb531ec262d67", "message": "sandbox: properly add `tmpDir` to `writablePaths`\n\nWhen Bazel creates the sandbox for an action,\nBazel collects a set of paths that the action may\nwrite to.\n\nThe action needs write access to its temp\ndirectory, so Bazel needs to add it to the\nwritable paths.\n\nSee https://github.com/bazelbuild/bazel/issues/4376\n\nChange-Id: Ifd3c482aa67ff8a2070045356abad8b39c808db8\nPiperOrigin-RevId: 181591520"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/17c874af2c46ac80fbb195417c09ae6145729695", "message": "sandbox: allow adding some non-existent paths\n\nWhen Bazel creates the sandbox, it will allow\nmaking non-existent paths writable, as long as the\npath is under the sandbox root.\n\nAs Bazel adds entries to the sandbox's set of\nwritable paths, Bazel needs to make sure that it's\nnot adding symlinks, because doing so would make\nthe symlink writable, not what the link points to.\n\nIf the path is under the sandbox root, then at the\ntime of setting up the sandbox's writable paths\nthe path surely doesn't exist yet, but that's OK,\nbecause at that time Bazel didn't yet create the\nsandbox root.\n\nIf the path is not under the sandbox root, then\nBazel needs to resolve all symlinks on this path,\nwhich is only possible if the path exists,\ntherefore Bazel checks for the path's existence.\n\nChange-Id: Ic7d99a81905e7401455286c0b375d69b85ece1d5\nPiperOrigin-RevId: 181325749"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/294c074fcd42ffb1154101f5156f5e9e121ab615", "message": "actions: don't add the server's TMPDIR to the env\n\nThe BazelConfiguration no longer adds the Bazel\nserver process' TMPDIR/TMP/TEMP environment\nvariables.\n\nI added that code before having implemented always\ncreating a temp directory for actions:\nhttps://github.com/bazelbuild/bazel/commit/cfccdf1f6e93125d894ff40e0ccecaf20cc20ef5\n\nSee https://github.com/bazelbuild/bazel/issues/4376\n\nChange-Id: I8ba63d6120a0aa849997b274fb2d68ad50b2285c\nPiperOrigin-RevId: 181134179"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/6ab93a6048260671206622527c89192b1a86284b", "message": "sandbox runners: always use updated environment\n\nThe sandboxed Spawn runners already used to call\nLocalEnvProvider.rewriteEnvironment in order to\nadd TMPDIR for example, but didn't consistently\nuse this rewritten environment everywhere, and\nused the Spawn's original environment instead.\n\nChange-Id: Ifbede6ac0f14b83c617dcbcd85edfae88718b157\nPiperOrigin-RevId: 181130506"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/39a23a0e3d63c538b8aa9f6f94a3a3916998e973", "message": "sandbox: error out if $TEST_TMPDIR doesn't exist\n\nAs part of setting up a sandbox, Bazel creates the\nlist of writable paths. If the action's\nenvironment defines $TEST_TMPDIR, then it's a test\naction and the sandbox must allow writing to that\npath, therefore Bazel must add $TEST_TMPDIR to the\nwritable paths.\n\nBazel must resolve symlinks in that path though,\nat least on the last path segment, because in case\nthe path points to a symlink, the action would be\nallowed to modify the symlink itself, and not\naccess what the link points to.\n\nHowever the path must exist for Bazel to\nsuccessfully resolve symlinks, therefore this\ncommit adds a check for that.\n\nGiven that the code was there since at least July\n2017, and I'm not aware of bugs caused by it, I\nconclude that this code path either never runs or\nnobody ever triggered it. Either way, adding the\ncheck is the right thing to do.\n\nChange-Id: I87a5d3fc3fe7878a918ed318c71e8d135f10f1b8\nPiperOrigin-RevId: 180931382"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/be27c0a75073d317a31e1a06c8fa574fcce20e11", "message": "action_temp_test: eliminate for-loop\n\nRefactor the test not to use a for-loop to iterate\nover the strategies. This way it's easier to see\nfrom the failure stack trace which strategy it was\nexactly that failed.\n\nThis is preparation for https://github.com/bazelbuild/bazel/issues/4376\n\nChange-Id: I2004b58957c823701c2d68682e7d8b78e80c834a\nPiperOrigin-RevId: 180911370"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/a495baef6d63cedb589024c34108d34559e36a78", "message": "Extract LocalEnvProvider members to classes.\n\nCreate a PosixLocalEnvProvider and\nWindowsLocalEnvProvider class, with singleton\ninstances for now.\n\nThis refactoring should not change functionality,\nit's just a requirement for an upcoming change.\n\nThat upcoming change is for these classes to\nrespect the client environment's TMPDIR or\nTMP/TEMP envvars.\n\nSee https://github.com/bazelbuild/bazel/issues/4376\n\nChange-Id: I032bb6f18adf8af9e43e6bc543c09c58adae3863\nPiperOrigin-RevId: 180799936"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/f1ee36a4f5c892df003750c84d4f69b4c5b54bfa", "message": "Rewrite //src/test/py/bazel:action_temp_test\n\nMerge the test methods into one test method, in\norder to reuse the workspace and the Bazel server.\n\nAdd an input file to the mock build rules and\nupdate it before each build, to ensure that Bazel\nreruns the actions and uses the strategy-specific\ntemp directory.\n\nThis change reduces the test's runtime on Linux\nfrom 20.2s to 14.7s (average of 5 runs each).\n\nChange-Id: Ia2a8d477d13271af59cdf55cdc49f137460a1b96\nPiperOrigin-RevId: 180796797"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/f5280fd00f33321f7634251442ed4384ae6ca31c", "message": "Update GitHub issue template.\n\nChange-Id: Icd1b527798df46d54cb5fd43e37f6211834ad0a6\nPiperOrigin-RevId: 180761791"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/a3fd5e76be71988035388c7e09c3257c8cbb2dd3", "message": "test: use bazel_with_jdk in py integration test\n\nThis change avoids the need to inject the user's\nJAVA_HOME into the test, or to discover the JDK's\nlocation on Windows.\n\nChange-Id: Icec2f23ff61d52406eabe36367130d00535d8764\nPiperOrigin-RevId: 180547577"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/7e8c9460141db26e3a818cba16165ff31e80799e", "message": "Automated rollback of commit 46356dfa59428b665aa280ba4cbca6e449f73c5b.\n\n*** Reason for rollback ***\n\ncauses github #4375 and #4373\n\n*** Original change description ***\n\nUse an annotation preprocessor to validate SkylarkConfigurationField.\n\nRELNOTES: None.\nPiperOrigin-RevId: 180535458"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85981646", "body": "We're not yet ready to open-source the more generic `proto_library` rule. In the meantime you can use `genproto`, see https://github.com/google/bazel/blob/master/src/main/protobuf/BUILD, or write a `genrule`.\nI'll remove the reference from the BE for now.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85981646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85982901", "body": "(sorry, shouldn't have closed this just yet)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85982901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87640939", "body": "Fixed. See effects soon (upon next doc push, ETA within 1-2 days).\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87640939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/19954467", "body": "Not really, other than me having not seen the need for it and not being aware of `std::error_condition` :)\r\nDo you think there's a need for more diverse error ~handling~ reporting here?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/19954467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20016263", "body": "Yeah that makes sense. Filed https://github.com/bazelbuild/bazel/issues/2149", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20016263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20116620", "body": "Awesome, thank you @dpursehouse!", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20116620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21036638", "body": "This breaks Bazel on Windows:\r\n```\r\n$ C:/tmp/Oh5NykPf/execroot/bazel2/bazel-out/local-fastbuild/bin/src/bazel.exe --output_user_root=/c/tmp5 build src:bazel --nobuild\r\nExtracting Bazel installation...\r\nCannot terminate server process with PID 8428\r\n.\r\nERROR: java.io.IOException: Could not read the crosstool configuration file 'CROSSTOOL file C:/tmp5/o6hbs7n0/external/local_config_cc/CROSSTOOL', because of a parser error (134:1: Expected identifier. Found '%').\r\nINFO: Elapsed time: 14.815s\r\n```\r\n\r\nApparently there's a placeholder left in the CROSSTOOL:\r\n```\r\n$ cat C:/tmp5/o6hbs7n0/external/local_config_cc/CROSSTOOL | grep -C3 coverage\r\n  }\r\n  linking_mode_flags { mode: DYNAMIC }\r\n\r\n%{coverage}\r\n}\r\n\r\ntoolchain {\r\n```", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21036638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21036854", "body": "Thanks :) verifying and filing bug as we speak.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21036854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21036856", "body": "https://github.com/bazelbuild/bazel/issues/2582", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21036856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21435938", "body": "Cool, thanks for the info and once again for the PR!\n\n\n\n\n--\nL\u00e1szl\u00f3 Csomor | Software Engineer | laszlocsomor@google.com\n\nGoogle Germany GmbH | Erika-Mann-Str. 33 | 80636 M\u00fcnchen | Germany\nRegistergericht und -nummer: Hamburg, HRB 86891\nSitz der Gesellschaft: Hamburg\nGesch\u00e4ftsf\u00fchrer: Matthew Scott Sucherman, Paul Terence Manicle\n\nOn Wed, Mar 22, 2017 at 11:55 AM, Peter Mounce <notifications@github.com>\nwrote:\n\n> Parse params via a built-in, and lock msys2 version\n>\n> @laszlocsomor - This addresses https://github.com/bazelbuild/\n> bazel/issues/2449#issuecomment-278059161.\n>\n> Note - this is _not_ in the 0.4.5 package, since I was waiting for that\n> release to go out prior to this.\n>\n> Closes #2690.\n>\n> --\n> Reviewed-on: https://github.com/bazelbuild/bazel/pull/2690\n> PiperOrigin-RevId: 150745085\n> MOS_MIGRATED_REVID=150745085\n>\n> --\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub:\n> https://github.com/bazelbuild/bazel/commit/8bd552261833a1887a281401c56d26\n> 9c6594f8ef\n>\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21435938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21713171", "body": "Sorry, wrong bug referenced.\r\nShould be https://github.com/bazelbuild/bazel/issues/2779", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21713171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/22910107", "body": "@jbduncan : I checked out the previous version of these files and I probably forgot to run the formatter.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/22910107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/23219970", "body": "The commit message got corrupted as we exported the change to GitHub. The correct message is:\r\n```\r\nWindows, CROSSTOOL: add subsystem flag feature\r\n(from https://bazel-review.googlesource.com/c/13650)\r\n\r\n1. Add a new \"feature\" for the linker's /SUBSYSTEM\r\n   flag.\r\n2. Declare it before \"legacy_link_flags\", so that\r\n   it's always applied before \"legacy_link_flags\"\r\n   (regardless of the order of the `implies`\r\n   statements). The \"legacy_link_flags\" feature\r\n   applies flags from the BUILD rule, so it allows\r\n   the user to override the /SUBSYSTEM.\r\n3. To use the WINDOWS subsystem, the user must\r\n   declare linkopts=[\"-SUBSYSTEM:WINDOWS\"] in the\r\n   BUILD file. They must use \"-\" instead of \"/\"\r\n   otherwise Bazel believes the linkopts entry\r\n   declares a (invalid) label.\r\n```", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/23219970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/23514409", "body": "As @aj-michael pointed out on the internal code review, we don't have to wait until 2018-02-28, only until the next internal and external Bazel release.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/23514409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25672778", "body": "I don't know if it is. What do you mean with this question?\r\n\r\nDo you have a specific concern about this line?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25672778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25672959", "body": "Thanks for asking! I'll change that in a separate commit.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25672959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25673022", "body": "I already merged this commit, so I can only make adjustments in a new one.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25673022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25681796", "body": "This commit seems to be the cause of #3985 ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25681796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25728982", "body": "Ack, thanks. I think this is fine so I'll leave the code as it is.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25728982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26087667", "body": "I accidentally pushed the parent commit (https://github.com/bazelbuild/bazel/commit/abc932ebaaff86225c96bf3b8daeadfe672720be) of this one to our internal Git mirror (which automatically pushes changes to GitHub), that's why `compile.sh` is modified by this commit. (Originally it wasn't.)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26087667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26087678", "body": "I accidentally pushed this commit to our internal Git mirror (which automatically pushes changes to GitHub), that's why `compile.sh` is modified by its child commit https://github.com/bazelbuild/bazel/commit/2cf560f83922e6df9626ba3ee063c1caf6797548 (originally it wasn't).", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26087678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26186959", "body": "This change is breaking some of our tests: https://github.com/bazelbuild/bazel/issues/4268", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26186959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/86734781", "body": "I think you don't need to match $2 if you're outputting it unaltered.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/86734781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/86762402", "body": "ok\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/86762402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/97517555", "body": "What other instances could `url.openConnection` have returned under normal operation?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/97517555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/106460052", "body": "Do we have to pin to an exact version, or is it enough to pin 20160719.1.x?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/106460052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/106463027", "body": "Ah :) I've seen failures with newer major versions (20170130 specifically), but I also haven't tested with 20160719's other minor/patch versions. The problem was binary incompatibility with msys-2.0.dll between the two major versions, but I believe they should be compatible within the same major one.\r\n\r\nAaand fortunately this will soon not matter because we're close to removing the msys dependency :)  (we'll still need some msys installed in order to have a bash.exe to run, but bazel itself won't be tied to a given version).", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/106463027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/106848256", "body": "No, please don't. As i understand it, both 20160719.1.0 and 20160719.1.1 are good, but versions with a more recent first part (e.g. 20170130.x.y) seem to be bad. So the pin should be [20160719.1.0,20160719.1.1].", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/106848256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/106881983", "body": "Thanks!", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/106881983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/111119358", "body": "This is rendered incorrectly:\r\n\r\n```\r\nPS C:\\Users\\laszlocsomor> echo foo bar baz > a.txt ; type a.txt\r\nfoo\r\nbar\r\nbaz\r\n\r\nPS C:\\Users\\laszlocsomor> $foo = ((get-content \"a.txt\" | out-string) -split \"`n\")\r\nPS C:\\Users\\laszlocsomor> write-host $($foo.GetType())\r\nSystem.String[]\r\nPS C:\\Users\\laszlocsomor> write-host $foo\r\n baz\r\nPS C:\\Users\\laszlocsomor> write-host $foo[0]\r\nfoo\r\nPS C:\\Users\\laszlocsomor> write-host $foo[1]\r\nbar\r\nPS C:\\Users\\laszlocsomor> write-host $foo[2]\r\nbaz\r\n```\r\n\r\nMaybe print the results of get-content (the object array) before converting it to a string array?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/111119358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "drigz": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4502", "title": "Allow putting bazel.rc (and others) in a bazel/ subdir", "body": "### Description of the feature request:\r\n\r\nCheck for `bazel/bazel.rc` in addition to `tools/bazel.rc`. This could also be done for `tools/bazel` and any other special files that can be in `tools/`.\r\n\r\n### Feature requests: what underlying problem are you trying to solve with this feature?\r\n\r\nProjects that support multiple build systems prefer to keep the files separated as far as possible. However, Bazel forces you to add a `tools/` top-level directory to use certain functionality. See [this comment](https://github.com/googlecartographer/cartographer/pull/834#discussion_r162956352) from googlecartographer/cartographer#834 which prompted this issue.\r\n\r\nThe `bazel/` subdirectory is fairly common for builds that support multiple systems, eg [gRPC](https://github.com/grpc/grpc), [glog](https://github.com/google/glog), [Google Cartographer](https://github.com/googlecartographer/cartographer), [Ceres Solver](https://github.com/ceres-solver/ceres-solver). Exceptions (ie projects with no `bazel/` subdir) include [TensorFlow](https://github.com/tensorflow/tensorflow) and [gRPC Java](https://github.com/grpc/grpc-java), although IMHO the latter is good example of where it would help clean things up.\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nUbuntu 14.04\r\n\r\n### What's the output of `bazel info release`?\r\n\r\nrelease 0.9.0\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4463", "title": "Make private headers for cc_library \"just work\" for external and generated files", "body": "Add a way of including private headers (ie, headers included by files in `srcs` that should *not* be available to targets that depend on this `cc_library`) that works the same when the `cc_library` is in an external repo and when the headers are generated files.\r\n\r\n### Feature requests: what underlying problem are you trying to solve with this feature?\r\n\r\nCurrently, the only way I'm aware of including a private header is with `copts = [\"-Ipath/to/hdr/dir\"]`. However, this needs a different path when the target is used from an external repository, resulting in code like this (from [ceres](https://github.com/ceres-solver/ceres-solver/blob/c1075cd313e1e68af21c714d55488255f04dcb69/bazel/ceres.bzl#L173)):\r\n\r\n```\r\n    # The path to internal/ depends on whether Ceres is the main workspace or\r\n    # an external repository.\r\n    if native.repository_name() != '@':\r\n        internal = 'external/%s/internal' % native.repository_name().lstrip('@')\r\n    else:\r\n        internal = 'internal'\r\n    copts = [\"-I\" + internal],\r\n```\r\n\r\nor if the header is generated, like this (from [glog](https://github.com/google/glog/blob/028d37889a1e80e8a07da1b8945ac706259e5fd8/bazel/glog.bzl#L11)):\r\n\r\n```\r\n    if native.repository_name() != '@':\r\n        gendir = '$(GENDIR)/external/' + native.repository_name().lstrip('@')\r\n    else:\r\n        gendir = '$(GENDIR)'\r\n    copts = [\"-I%s/glog_internal\" % gendir],\r\n```\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\n1. Download and extract [private_headers.tar.gz](https://github.com/bazelbuild/bazel/files/1634393/private_headers.tar.gz)\r\n1. `cd private_headers/ws1`\r\n1. `bazel build :lib` (works)\r\n1. `cd ../ws2`\r\n1. `bazel build :exthdr_lib` (fails)\r\n1. `bazel build :genhdr_lib` (also fails)\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nUbuntu 14.04\r\n\r\n### What's the output of `bazel info release`?\r\n\r\nrelease 0.9.0\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nIt is related to #2172, but that is specifically about platform independence.\r\n#1950 concerns the difficulty of using private generated headers, but (a) is closed due to inactivity and (b) doesn't mention the complexity of use from external repos.\r\n#2476 might also have been avoided, since it appears to stem from the use of `includes = [\"$(GENDIR)\"]` ([source](https://github.com/gflags/gflags/blob/v2.2.0/bazel/gflags.bzl#L88)).\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4239", "title": "PATH passed through to genrule despite --experimental_strict_action_env", "body": "If I build a genrule with --experimental_strict_action_env, the genrule is executed with the same PATH as my shell. According to [the docs for --experimental_strict_action_env](https://docs.bazel.build/versions/master/command-line-reference.html#flag--experimental_strict_action_env):\r\n\r\n> If true, Bazel uses an environment with a static value for PATH and does not inherit LD_LIBRARY_PATH or TMPDIR. Use --action_env=ENV_VARIABLE if you want to inherit specific environment variables from the client, but note that doing so can prevent cross-user caching if a shared cache is used.\r\n\r\nAdditionally, the docs for [Predefined \"Make\" Variables](https://docs.bazel.build/versions/master/be/make-variables.html#predefined_variables) say:\r\n\r\n> The build system also provides a consistent PATH environment variable for genrules and tests which need to execute shell commands.\r\n\r\nwhich suggests to me that Bazel is choosing the value of PATH, rather than just passing it through from the calling shell. \r\n\r\n### Expected behaviour\r\n\r\nEither:\r\n- actions get a static PATH when using --experimental_strict_action_env\r\n- the documentation explains when --experimental_strict_action_env does not use a static PATH unless you pass --action_env=PATH=/bin:/usr/bin or similar \r\n\r\n### Repro\r\n\r\n```\r\n> echo > WORKSPACE\r\n> echo > src.msg\r\n> cat BUILD.bazel\r\ngenrule(\r\n    name = \"link\",\r\n    srcs = [\"src.msg\"],\r\n    outs = [\"out/src.msg\"],\r\n    cmd = \"cp $< $@\",\r\n)\r\n```\r\n\r\n```\r\n> bazel build --experimental_strict_action_env :link\r\n...\r\nINFO: Build completed successfully, 2 total actions\r\n> bazel build --experimental_strict_action_env :link\r\n...\r\nINFO: Build completed successfully, 1 total actions   # ie successfully cached\r\n> PATH=/asdfsadf:$PATH bazel build --experimental_strict_action_env :link \r\n...\r\nINFO: Build completed successfully, 2 total actions   # ie not cached\r\n```\r\n\r\nIf I run with -s I can see that the PATH is passed through to the genrule:\r\n\r\n```\r\n> PATH=/asdfadf:$PATH bazel build -s --experimental_strict_action_env :link                                                                                                                         \r\nINFO: Analysed target //:link (0 packages loaded).\r\nINFO: Found 1 target...\r\nSUBCOMMAND: # //:link [action 'Executing genrule //:link']\r\n(cd /usr/local/google/home/rodrigoq/.cache/bazel/_bazel_rodrigoq/7e37c45dd6a3d6ff2f057f9d44fb304b/execroot/__main__ && \\\r\n  exec env - \\\r\n    PATH=/asdfadf:/usr/local/google/home/rodrigoq/google-cloud-sdk/bin:/usr/local/google/home/rodrigoq/.nvm/versions/node/v7.7.4/bin:/usr/local/google/home/rodrigoq/bin:/usr/lib/google-golang/bin:/usr/local/buildtools/java/jdk/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/google/users/joeuser/aswb-sdk/tools:/usr/local/google/users/joeuser/aswb-sdk/platform-tools:/google/data/ro/users/mp/mpn/git-stuff:/usr/local/google/home/rodrigoq/.tmuxifier/bin:/opt/gradle/gradle-3.5/bin \\\r\n  /bin/bash -c 'source external/bazel_tools/tools/genrule/genrule-setup.sh; cp src.msg bazel-out/k8-fastbuild/genfiles/out/src.msg')\r\nTarget //:link up-to-date:\r\n  bazel-genfiles/out/src.msg\r\nINFO: Elapsed time: 0.317s, Critical Path: 0.09s\r\nINFO: Build completed successfully, 2 total actions\r\n```\r\n\r\nI can work around this by commenting out `build --action_env=PATH` in /etc/bazel.bazelrc, or by overriding it with `--action_env=PATH=/bin:/usr/bin` on the command line.\r\n\r\n### Environment info\r\n* Operating System: Ubuntu 14.04\r\n* Bazel version: 0.8.1\r\n\r\n\r\n###  Possible duplicates\r\n#577 - but this predates --experimental_strict_action_env\r\n#3989 - but this is about C++ linking\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4239/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3994", "title": "Non-existent files in default_runfiles", "body": "rules_docker uses `default_runfiles` to get a list of runfiles to put into a docker image. It is running into an issue bazelbuild/rules_docker#207 (repro is there) where `default_runfiles` contains a non-existent \"middleman\" path, leading to:\r\n\r\n`IOError: [Errno 2] No such file or directory: 'bazel-out/local-fastbuild/internal/_middlemen/foo-runfiles'`\r\n\r\nIt's not clear to me if this is a problem with `default_runfiles` or if consumers should filter out these non-existent files (eg [this workaround](https://github.com/drigz/rules_docker/commit/39ced16812f288120fa495d7cc033f2b4bc8f102)).\r\n\r\nIs this expected behaviour for `default_runfiles`? It's hard to tell because of #3015.\r\n\r\n### Environment info\r\n* Operating System: Ubuntu 14.04\r\n* Bazel version: 0.7.0\r\n\r\n###  Relevant info\r\nThis appears to be analogous to to bazelbuild/bazel#2088, which was fixed in [a5294e6a](https://github.com/bazelbuild/bazel/commit/a5294e6a48a0c6ff6ef5eec918489f8564b40824) by replacing `getRunfiles().getArtifacts()` with `getRunfilesArtifactsWithoutMiddlemen()`.\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3925", "title": "`bazel run py_binary` loads incorrect module with same name", "body": "py_binary can end up importing a file from the source tree that it doesn't depend on. It can also get confused by stale .pyc files that Python writes into the source tree (is that expected behaviour?), even once this file has been removed.\r\n\r\nMy example may seem contrived, but I ran into this problem when trying to port the [rosmaster](https://github.com/ros/ros_comm/blob/cd7efd4d44d0ec5845df7d59ccdfc204389060f2/tools/rosmaster/scripts/rosmaster) script to Python - since Bazel rejects Python files without the `.py` extension, I renamed it to `rosmaster.py`. This caused it to import itself and fail. After I renamed it to avoid this, I had to manually delete the .pyc file before `bazel run` would work.\r\n\r\n### Repro\r\n\r\n```\r\n> echo > WORKSPACE \r\n> cat lib/hello.py \r\ndef hello():\r\n  print(\"hello, world!\")\r\n> cat bin/hello2.py \r\nimport hello\r\n\r\nif __name__ == \"__main__\":\r\n  print \"loaded hello from\", hello.__file__\r\n  hello.hello()\r\n> cp bin/hello2.py bin/hello.py  \r\n> cat BUILD.bazel \r\npy_library(\r\n    name = \"hello_lib\",\r\n    srcs = [\"lib/hello.py\"],\r\n    imports = [\"lib\"],\r\n)\r\n\r\npy_binary(\r\n    name = \"hello2\",\r\n    srcs = [\"bin/hello2.py\"],\r\n    deps = [\":hello_lib\"],\r\n)\r\n> bazel run :hello2\r\n[SNIP: build output]\r\nINFO: Running command line: bazel-bin/hello2\r\nloaded hello from /usr/local/google/home/rodrigoq/git/bazeltest/stale_pyc/bin/hello.py\r\nTraceback (most recent call last):\r\n  File \"/usr/local/google/home/rodrigoq/.cache/bazel/_bazel_rodrigoq/64c22e296c4c5490bc13ab2111abf684/execroot/__main__/bazel-out/local-fastbuild/bin/hello2.runfiles/__main__/bin/hello2.py\", line 5, in <module>\r\n    hello.hello()\r\nTypeError: 'module' object is not callable\r\nERROR: Non-zero return code '1' from command: Process exited with status 1\r\n> rm bin/hello.py \r\n> bazel run :hello2\r\n[SNIP: build output]\r\nINFO: Running command line: bazel-bin/hello2\r\nloaded hello from /usr/local/google/home/rodrigoq/git/bazeltest/stale_pyc/bin/hello.pyc\r\nTraceback (most recent call last):\r\n  File \"/usr/local/google/home/rodrigoq/.cache/bazel/_bazel_rodrigoq/64c22e296c4c5490bc13ab2111abf684/execroot/__main__/bazel-out/local-fastbuild/bin/hello2.runfiles/__main__/bin/hello2.py\", line 5, in <module>\r\n    hello.hello()\r\nTypeError: 'module' object is not callable\r\nERROR: Non-zero return code '1' from command: Process exited with status 1\r\n> rm bin/hello.pyc\r\n> bazel run :hello2\r\n[SNIP: build output]\r\nINFO: Running command line: bazel-bin/hello2\r\nloaded hello from /usr/local/google/home/rodrigoq/.cache/bazel/_bazel_rodrigoq/64c22e296c4c5490bc13ab2111abf684/execroot/__main__/bazel-out/local-fastbuild/bin/hello2.runfiles/__main__/lib/hello.pyc\r\nhello, world!\r\n```\r\n\r\n### Environment info\r\n* Operating System: Ubuntu 14.04\r\n* Bazel version: 0.7.0", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/9059d3935ad2cbee8114b2d8273387857d44de60", "message": "Fix copy-paste error in py_test docs\n\nChange-Id: I5fa8412fe0673b71a6e17adb39be0a208ee54f63\nPiperOrigin-RevId: 182048035"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "iirina": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4501", "title": "CI bazel 0.10.0rc4   rules_nodejs  fail to build on Windows", "body": "Error snippet:\r\n```\r\n[93 / 96] SkylarkAction internal/e2e/rollup/bundle.es6.js; 0s local\r\n\r\nERROR: C:/jenkins/workspace/global/rules_nodejs-node=windows-x86_64,toolchain=msys/internal/e2e/rollup/BUILD.bazel:12:1: SkylarkAction internal/e2e/rollup/bundle.es6.js failed (Exit 1): rollup.exe failed: error executing command \r\n\r\n  cd C:/windows/temp/_bazel_system/u5ofeicm/execroot/build_bazel_rules_nodejs\r\n\r\nbazel-out/host/bin/external/build_bazel_rules_nodejs/internal/rollup/rollup.exe --config bazel-out/x64_windows_msys-fastbuild/bin/internal/e2e/rollup/bundle.rollup.conf.js --output.file bazel-out/x64_windows_msys-fastbuild/bin/internal/e2e/rollup/bundle.es6.js --input build_bazel_rules_nodejs/internal/e2e/rollup/foo.js\r\n\r\n[!] Error: Cannot find module 'rollup'\r\n\r\n  looked in:\r\n\r\n   rollup,\r\n\r\n   C:\\windows\\temp\\_bazel_system\\u5ofeicm\\execroot\\build_bazel_rules_nodejs\\bazel-out\\host\\bin\\external\\build_bazel_rules_nodejs\\internal\\rollup\\rollup.exe.runfiles\\rollup,\r\n\r\n   C:\\windows\\temp\\_bazel_system\\u5ofeicm\\execroot\\build_bazel_rules_nodejs\\bazel-out\\host\\bin\\external\\build_bazel_rules_nodejs\\internal\\rollup\\rollup.exe.runfiles\\build_bazel_rules_nodejs\\node_modules\\rollup,\r\n\r\n   C:\\windows\\temp\\_bazel_system\\u5ofeicm\\execroot\\build_bazel_rules_nodejs\\bazel-out\\host\\bin\\external\\build_bazel_rules_nodejs\\internal\\rollup\\rollup.exe.runfiles\\build_bazel_rules_nodejs_rollup_deps\\node_modules\\rollup\r\n\r\nError: Cannot find module 'rollup'\r\n\r\n  looked in:\r\n\r\n   rollup,\r\n\r\n   C:\\windows\\temp\\_bazel_system\\u5ofeicm\\execroot\\build_bazel_rules_nodejs\\bazel-out\\host\\bin\\external\\build_bazel_rules_nodejs\\internal\\rollup\\rollup.exe.runfiles\\rollup,\r\n\r\n   C:\\windows\\temp\\_bazel_system\\u5ofeicm\\execroot\\build_bazel_rules_nodejs\\bazel-out\\host\\bin\\external\\build_bazel_rules_nodejs\\internal\\rollup\\rollup.exe.runfiles\\build_bazel_rules_nodejs\\node_modules\\rollup,\r\n\r\n   C:\\windows\\temp\\_bazel_system\\u5ofeicm\\execroot\\build_bazel_rules_nodejs\\bazel-out\\host\\bin\\external\\build_bazel_rules_nodejs\\internal\\rollup\\rollup.exe.runfiles\\build_bazel_rules_nodejs_rollup_deps\\node_modules\\rollup\r\n\r\n    at Function.module.constructor._resolveFilename (C:\\windows\\temp\\_bazel_system\\u5ofeicm\\execroot\\build_bazel_rules_nodejs\\bazel-out\\host\\bin\\external\\build_bazel_rules_nodejs\\internal\\rollup\\rollup_bin_loader.js:152:15)\r\n\r\n    at Function.Module._load (module.js:466:25)\r\n\r\n    at Module.require (module.js:579:17)\r\n\r\n    at require (internal/module.js:11:18)\r\n\r\n    at Object.<anonymous> (C:\\windows\\temp\\_bazel_system\\u5ofeicm\\execroot\\build_bazel_rules_nodejs\\bazel-out\\x64_windows_msys-fastbuild\\bin\\internal\\e2e\\rollup\\bundle.rollup.conf.js:5:14)\r\n\r\n    at Module._compile (module.js:635:30)\r\n\r\n    at Object.require.extensions..js (C:\\windows\\temp\\_bazel_system\\u5ofeicm\\external\\build_bazel_rules_nodejs_rollup_deps\\node_modules\\rollup\\bin\\rollup:20371:8)\r\n\r\n    at Module.load (module.js:554:32)\r\n\r\n    at tryModuleLoad (module.js:497:12)\r\n\r\n    at Function.Module._load (module.js:489:3)\r\n\r\n\r\n\r\nINFO: Elapsed time: 2.675s, Critical Path: 1.07s\r\n\r\nFAILED: Build did NOT complete successfully\r\n```\r\n\r\nConsole output is [here](https://ci.bazel.build/job/Global/job/rules_nodejs/190/console).\r\n\r\nIt seems to be related to https://github.com/bazelbuild/rules_nodejs/commit/c96acafb9df26e44ecc59268a5b3cc9ebafb1d87.\r\n\r\n@laszlocsomor @gregmagolan Could you take a look?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4498", "title": "CI bazel 0.10.0rc4: baze-tests fail on Darwin", "body": "The following tests are failing on Darwin:\r\n- test_apple_binary_crosstool_ios\r\n- test_apple_binary_crosstool_watchos\r\n- test_build_hello_world_with_remote_embedded_tool_targets\r\n- test_apple_binary_corsstool_ios\r\n- test_apple_binary_crosstool_watchos\r\n\r\nError snippet:\r\n```\r\nError\r\nshould build apple_binary and obtain info via lipo\r\nStacktrace\r\nINFO: $TEST_TMPDIR defined: output root default is '/private/var/tmp/_bazel_ci/14a274db1e6628a41b59a0d9bb823350/bazel-sandbox/7745683856459662554/execroot/io_bazel/_tmp/df7b853cedd56660e4ae5bd0fe427141' and max_idle_secs default is '15'.\r\nINFO: $TEST_TMPDIR defined: output root default is '/private/var/tmp/_bazel_ci/14a274db1e6628a41b59a0d9bb823350/bazel-sandbox/7745683856459662554/execroot/io_bazel/_tmp/df7b853cedd56660e4ae5bd0fe427141' and max_idle_secs default is '15'.\r\nLoading: \r\nLoading: 0 packages loaded\r\nAnalyzing: target //package:lipo_out (8 packages loaded)\r\nAnalyzing: target //package:lipo_out (8 packages loaded)\r\nINFO: Analysed target //package:lipo_out (16 packages loaded).\r\nINFO: Found 1 target...\r\n[0 / 17] [-----] BazelWorkspaceStatusAction stable-status.txt\r\nERROR: /private/var/tmp/_bazel_ci/14a274db1e6628a41b59a0d9bb823350/bazel-sandbox/7745683856459662554/execroot/io_bazel/_tmp/df7b853cedd56660e4ae5bd0fe427141/workspace/package/BUILD:5:1: C++ compilation of rule '//package:lib_b' failed (Exit 126): wrapped_clang failed: error executing command \r\n  (cd /private/var/tmp/_bazel_ci/14a274db1e6628a41b59a0d9bb823350/bazel-sandbox/7745683856459662554/execroot/io_bazel/_tmp/df7b853cedd56660e4ae5bd0fe427141/root/8cd47c870d98851ae8cee52ff6949fc2/execroot/io_bazel && \\\r\n  exec env - \\\r\n    APPLE_SDK_PLATFORM=iPhoneSimulator \\\r\n    APPLE_SDK_VERSION_OVERRIDE=11.2 \\\r\n    PATH=/private/var/tmp/_bazel_ci/14a274db1e6628a41b59a0d9bb823350/bazel-sandbox/7745683856459662554/execroot/io_bazel/bazel-out/darwin-fastbuild/bin/src/test/shell/bazel/apple/bazel_apple_test.runfiles/io_bazel/src/test/shell/bin:.:/Users/ci/node/node-v6.9.1-darwin-x64/bin:/usr/bin:/bin:/usr/sbin:/sbin \\\r\n    XCODE_VERSION_OVERRIDE=9.2.0 \\\r\n  external/local_config_cc/wrapped_clang -arch i386 '-D_FORTIFY_SOURCE=1' -fstack-protector -fcolor-diagnostics -Wall -Wthread-safety -Wself-assign -fno-omit-frame-pointer -O0 -DDEBUG -Wshorten-64-to-32 -Wbool-conversion -Wconstant-conversion -Wduplicate-method-match -Wempty-body -Wenum-conversion -Wint-conversion -Wunreachable-code -Wmismatched-return-types -Wundeclared-selector -Wuninitialized -Wunused-function -Wunused-variable -iquote . -iquote bazel-out/ios-i386-min10.0-applebin_ios-ios_i386-fastbuild/genfiles -iquote external/bazel_tools -iquote bazel-out/ios-i386-min10.0-applebin_ios-ios_i386-fastbuild/genfiles/external/bazel_tools -isystem external/bazel_tools/tools/cpp/gcc3 -MD -MF bazel-out/ios-i386-min10.0-applebin_ios-ios_i386-fastbuild/bin/package/_objs/lib_b/package/b.d -F__BAZEL_XCODE_SDKROOT__/System/Library/Frameworks -F__BAZEL_XCODE_DEVELOPER_DIR__/Platforms/iPhoneSimulator.platform/Developer/Library/Frameworks -DOS_IOS -fno-autolink '-isysroot __BAZEL_XCODE_SDKROOT__' -fobjc-arc '-mios-simulator-version-min=10.0' -fexceptions -fasm-blocks '-fobjc-abi-version=2' -fobjc-legacy-dispatch -O0 '-DDEBUG=1' -c package/b.m -o bazel-out/ios-i386-min10.0-applebin_ios-ios_i386-fastbuild/bin/package/_objs/lib_b/package/b.o)\r\nUse --sandbox_debug to see verbose messages from the sandbox\r\nexternal/local_config_cc/wrapped_clang: /private/var/tmp/_bazel_ci/14a274db1e6628a41b59a0d9bb823350/bazel-sandbox/7745683856459662554/execroot/io_bazel/_tmp/df7b853cedd56660e4ae5bd0fe427141/root/8cd47c870d98851ae8cee52ff6949fc2/bazel-sandbox/3845404307468442701/execroot/io_bazel/external/local_config_cc/xcrunwrapper.sh: /bin/bash: bad interpreter: Permission denied\r\nTarget //package:lipo_out failed to build\r\nINFO: Elapsed time: 5.016s, Critical Path: 0.19s\r\nFAILED: Build did NOT complete successfully\r\n-- Test log: -----------------------------------------------------------\r\n------------------------------------------------------------------------\r\ntest_apple_binary_crosstool_ios FAILED: should build apple_binary and obtain info via lipo .\r\n```\r\n\r\nLog is [here](https://ci.bazel.build/job/Global/job/bazel-tests/453/console)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4497", "title": "CI bazel 0.10.0rc4: bazel-tests fails on Windows", "body": "Error snippet:\r\n```\r\n[node=windows-x86_64,toolchain=msvc] FAIL: //src/test/shell/bazel:bazel_bootstrap_distfile_test (see C:/windows/temp/_bazel_system/yuv-tl0g/execroot/io_bazel/bazel-out/x64_windows-fastbuild/testlogs/src/test/shell/bazel/bazel_bootstrap_distfile_test/test.log)\r\n\r\nStacktrace\r\nFailed to read test report file c:\\jenkins\\workspace\\Global\\bazel-tests-node=windows-x86_64,toolchain=msvc\\tests-node=windows-x86_64-toolchain=msvc\\src\\test\\shell\\bazel\\bazel_bootstrap_distfile_test\\test.xml\r\norg.dom4j.DocumentException: Error on line 24 of document  : An invalid XML character (Unicode: 0x1b) was found in the CDATA section. Nested exception: An invalid XML character (Unicode: 0x1b) was found in the CDATA section.\r\n\tat org.dom4j.io.SAXReader.read(SAXReader.java:482)\r\n\tat org.dom4j.io.SAXReader.read(SAXReader.java:343)\r\n\tat hudson.tasks.junit.SuiteResult.parse(SuiteResult.java:169)\r\n\tat hudson.tasks.junit.TestResult.parse(TestResult.java:348)\r\n\tat hudson.tasks.junit.TestResult.parsePossiblyEmpty(TestResult.java:281)\r\n\tat hudson.tasks.junit.TestResult.parse(TestResult.java:206)\r\n\tat hudson.tasks.junit.TestResult.parse(TestResult.java:178)\r\n\tat hudson.tasks.junit.TestResult.<init>(TestResult.java:143)\r\n\tat hudson.tasks.junit.JUnitParser$ParseResultCallable.invoke(JUnitParser.java:146)\r\n\tat hudson.tasks.junit.JUnitParser$ParseResultCallable.invoke(JUnitParser.java:118)\r\n\tat hudson.FilePath$FileCallableWrapper.call(FilePath.java:2813)\r\n\tat hudson.remoting.UserRequest.perform(UserRequest.java:210)\r\n\tat hudson.remoting.UserRequest.perform(UserRequest.java:53)\r\n\tat hudson.remoting.Request$2.run(Request.java:358)\r\n\tat hudson.remoting.InterceptingExecutorService$1.call(InterceptingExecutorService.java:72)\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat hudson.remoting.Engine$1$1.run(Engine.java:94)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\nCaused by: org.xml.sax.SAXParseException; lineNumber: 24; columnNumber: 2; An invalid XML character (Unicode: 0x1b) was found in the CDATA section.\r\n\tat com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:203)\r\n\tat com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.fatalError(ErrorHandlerWrapper.java:177)\r\n\tat com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:400)\r\n\tat com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:327)\r\n\tat com.sun.org.apache.xerces.internal.impl.XMLScanner.reportFatalError(XMLScanner.java:1472)\r\n\tat com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanCDATASection(XMLDocumentFragmentScannerImpl.java:1690)\r\n\tat com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:3014)\r\n\tat com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:602)\r\n\tat com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.next(XMLNSDocumentScannerImpl.java:112)\r\n\tat com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:505)\r\n\tat com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:841)\r\n\tat com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:770)\r\n\tat com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:141)\r\n\tat com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1213)\r\n\tat com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:643)\r\n\tat org.dom4j.io.SAXReader.read(SAXReader.java:465)\r\n\t... 19 more\r\n```\r\n\r\nFull log is [here](https://ci.bazel.build/job/Global/job/bazel-tests/453/console). Note there are also some test that failed on Darwin in the console log.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4459", "title": "rules_webtesting tests are failing with bazel 0.10.0rc2 on windows", "body": "Error snippet:\r\n```\r\n======================================================================\r\nERROR: testBrowserProvisioningWithCaps (__main__.BrowserTest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/ci/.cache/bazel/_bazel_ci/140d00ad1dcb33975ec7b5cb001f7b9b/bazel-sandbox/6447244412364996219/execroot/io_bazel_rules_webtesting/bazel-out/k8-fastbuild/bin/testing/web/webtest_test_chrome55-win10.runfiles/io_bazel_rules_webtesting/testing/web/webtest_test.py\", line 37, in testBrowserProvisioningWithCaps\r\n    driver = webtest.new_webdriver_session(capabilities)\r\n  File \"/home/ci/.cache/bazel/_bazel_ci/140d00ad1dcb33975ec7b5cb001f7b9b/bazel-sandbox/6447244412364996219/execroot/io_bazel_rules_webtesting/bazel-out/k8-fastbuild/bin/testing/web/webtest_test_chrome55-win10.runfiles/io_bazel_rules_webtesting/testing/web/webtest.py\", line 48, in new_webdriver_session\r\n    return webdriver.WebDriver(address, desired_capabilities=capabilities)\r\n  File \"/home/ci/.cache/bazel/_bazel_ci/140d00ad1dcb33975ec7b5cb001f7b9b/bazel-sandbox/6447244412364996219/execroot/io_bazel_rules_webtesting/bazel-out/k8-fastbuild/bin/testing/web/webtest_test_chrome55-win10.runfiles/org_seleniumhq_py/selenium/webdriver/remote/webdriver.py\", line 151, in __init__\r\n    self.start_session(desired_capabilities, browser_profile)\r\n  File \"/home/ci/.cache/bazel/_bazel_ci/140d00ad1dcb33975ec7b5cb001f7b9b/bazel-sandbox/6447244412364996219/execroot/io_bazel_rules_webtesting/bazel-out/k8-fastbuild/bin/testing/web/webtest_test_chrome55-win10.runfiles/org_seleniumhq_py/selenium/webdriver/remote/webdriver.py\", line 240, in start_session\r\n    response = self.execute(Command.NEW_SESSION, parameters)\r\n  File \"/home/ci/.cache/bazel/_bazel_ci/140d00ad1dcb33975ec7b5cb001f7b9b/bazel-sandbox/6447244412364996219/execroot/io_bazel_rules_webtesting/bazel-out/k8-fastbuild/bin/testing/web/webtest_test_chrome55-win10.runfiles/org_seleniumhq_py/selenium/webdriver/remote/webdriver.py\", line 308, in execute\r\n    self.error_handler.check_response(response)\r\n  File \"/home/ci/.cache/bazel/_bazel_ci/140d00ad1dcb33975ec7b5cb001f7b9b/bazel-sandbox/6447244412364996219/execroot/io_bazel_rules_webtesting/bazel-out/k8-fastbuild/bin/testing/web/webtest_test_chrome55-win10.runfiles/org_seleniumhq_py/selenium/webdriver/remote/errorhandler.py\", line 194, in check_response\r\n    raise exception_class(message, screen, stacktrace)\r\nWebDriverException: Message: [Go WebDriver Client]: invalid character 'S' looking for beginning of value unmarshalling &{Status:<nil> SessionID: Value:<nil> Error: Message: StackTrace:<nil>}\r\n```\r\n\r\nFailed tests are [here](https://ci.bazel.build/blue/organizations/jenkins/Global%2Frules_webtesting/detail/rules_webtesting/14/tests).\r\nFull console output is [here](https://ci.bazel.build/job/Global/job/rules_webtesting/14/console).", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4458", "title": "rules_closure tests are failing with bazel 0.10.0rc2", "body": "Error snippet:\r\n```\r\nFAIL: //closure/testing/test:noto_fonts_render_as_expected (see /private/var/tmp/_bazel_ci/fc16475be128c8b14fa95cbca7da3228/execroot/io_bazel_rules_closure/bazel-out/darwin-fastbuild/testlogs/closure/testing/test/noto_fonts_render_as_expected/test.log)\r\n```\r\n\r\nFull log is [here](https://ci.bazel.build/job/Global/job/rules_closure/358/consoleFull).\r\n\r\n@jart Can you take a look and identify if it's a bazel or rules_closure issue? Thanks!\r\n\r\nCould block #3958.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4453", "title": "bazel-integration-testing  fails with bazel 0.10.0rc2", "body": "The failure is due to ErrorProne [StreamResourceLeak](http://errorprone.info/bugpattern/StreamResourceLeak) check.\r\n\r\nError snippet:\r\n\r\n```\r\nERROR: /home/ci/workspace/Global/bazel-integration-testing-node=ubuntu_16.04-x86_64/javatests/build/bazel/tests/integration/BUILD:3:1: Building javatests/build/bazel/tests/integration/BazelBaseTestCaseTest/bazel0.5.4.jar (1 source file) failed (Exit 1): java failed: error executing command \r\n\r\n  (cd /home/ci/.cache/bazel/_bazel_ci/c835b2c831c4d801240f7a5d3bdbb67e/execroot/build_bazel_integration_testing && \\\r\n\r\n  exec env - \\\r\n\r\n    LC_CTYPE=en_US.UTF-8 \\\r\n\r\n  external/local_jdk/bin/java -Xbootclasspath/p:external/bazel_tools/third_party/java/jdk/langtools/javac-9-dev-r4023-3.jar -jar external/bazel_tools/tools/jdk/JavaBuilder_deploy.jar @bazel-out/k8-fastbuild/bin/javatests/build/bazel/tests/integration/BazelBaseTestCaseTest/bazel0.5.4.jar-2.params)\r\n\r\njavatests/build/bazel/tests/integration/BazelBaseTestCaseTest.java:109: error: [StreamResourceLeak] Streams that encapsulate a closeable resource should be closed using try-with-resources\r\n\r\n      return Files.walk(workspacePath).map(Path::toString).collect(Collectors.toList());\r\n\r\n                       ^\r\n\r\n    (see http://errorprone.info/bugpattern/StreamResourceLeak)\r\n\r\n  Did you mean 'try (Stream<Path> stream = Files.walk(workspacePath)) {'?\r\n\r\nINFO: Elapsed time: 17.040s, Critical Path: 4.98s\r\n\r\nFAILED: Build did NOT complete successfully\r\n```\r\n\r\nShould be easily fixed by using using try-with-resources.\r\n\r\nBlocks #3958.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4431", "title": "CI tf_models_syntaxnet is failing with bazel 0.10.0 RC1", "body": "Reported error:\r\n```\r\n[syntaxnet] Running shell script\r\n\r\n+ /home/ci/.bazel/custom/bazel_release/898/variation_/binary/bazel --bazelrc=/home/ci/workspace/Global/tf_models_syntaxnet-variation=,node=ubuntu_16.04-x86_64/research/syntaxnet/bazel.bazelrc version\r\n\r\nUnexpected error reading .blazerc file '/home/ci/workspace/Global/tf_models_syntaxnet-variation=,node=ubuntu_16.04-x86_64/research/syntaxnet/tensorflow/.tf_configure.bazelrc'\r\n\r\nscript returned exit code 37\r\n```\r\n\r\nFull console log is [here](https://ci.bazel.build/job/Global/job/tf_models_syntaxnet/345/console).\r\nThis is blocking the 0.10.0 release (#3958).", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4428", "title": "CI intellij is failing with bazel 0.10.0 RC1", "body": "The reported error is:\r\n```\r\nFailed actions:\r\n\r\n[action:[stdout:[name:stdout, uri:file:///home/ci/.cache/bazel/_bazel_ci/7196b1d3583813d521818cd6ad8a09c1/execroot/intellij_with_bazel/bazel-out/_tmp/action_outs/stdout-1031], configuration:[id:9990d97fc03e2c323e0d03cd7d8ff30c], label://aspect/testing/tests/src/com/google/idea/blaze/aspect/python/pybinary:simple_fixture, type:IntellijAspectTestFixtureBuilder, commandLine:[bazel-out/host/bin/aspect/testing/rules/IntellijAspectTestFixtureBuilder, @bazel-out/k8-fastbuild/bin/aspect/testing/tests/src/com/google/idea/blaze/aspect/python/pybinary/simple_fixture.intellij-aspect-test-fixture.params]], id:[actionCompleted:[configuration:[id:9990d97fc03e2c323e0d03cd7d8ff30c], label://aspect/testing/tests/src/com/google/idea/blaze/aspect/python/pybinary:simple_fixture, primaryOutput:/home/ci/.cache/bazel/_bazel_ci/7196b1d3583813d521818cd6ad8a09c1/execroot/intellij_with_bazel/bazel-out/k8-fastbuild/bin/aspect/testing/tests/src/com/google/idea/blaze/aspect/python/pybinary/simple_fixture.intellij-aspect-test-fixture]]]\r\n\r\n`bazel test` returned status 1\r\n```\r\n\r\nFull console output is [here](https://ci.bazel.build/job/Global/job/intellij/344/consoleFull).\r\nThis is blocking the 0.10.0 release (#3958).", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4425", "title": "CI projects are failing with bazel 0.10.0 RC1 due to wrongly identifying the current Bazel version", "body": "rules_closure fails to build:\r\n\r\n```\r\nERROR: /Users/ci/workspace/Global/rules_closure-node=darwin-x86_64/WORKSPACE:6:1: Traceback (most recent call last):\r\n\r\n\tFile \"/Users/ci/workspace/Global/rules_closure-node=darwin-x86_64/WORKSPACE\", line 6\r\n\r\n\t\tclosure_repositories()\r\n\r\n\tFile \"/Users/ci/workspace/Global/rules_closure-node=darwin-x86_64/closure/repositories.bzl\", line 69, in closure_repositories\r\n\r\n\t\t_check_bazel_version(\"Closure Rules\", \"0.4.5\")\r\n\r\n\tFile \"/Users/ci/workspace/Global/rules_closure-node=darwin-x86_64/closure/repositories.bzl\", line 172, in _check_bazel_version\r\n\r\n\t\tfail((\"%s requires Bazel >=%s but was...)))\r\n\r\nClosure Rules requires Bazel >=0.4.5 but was 0.10.0rc1\r\n\r\nERROR: Error evaluating WORKSPACE file\r\n\r\nERROR: error loading package 'external': Package 'external' contains errors\r\n\r\nINFO: Elapsed time: 0.522s\r\n\r\nFAILED: Build did NOT complete successfully (0 packages loaded)\r\n```\r\n\r\nThe console output is [here](https://ci.bazel.build/job/Global/job/rules_closure/347/console).\r\n\r\nThis is blocking the 0.10.0 release (#3958).", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/24424674", "body": "That's arriving in a follow up change. I don't want to add multiple\nfunctionalities into one change.\n\nOn Wed, Sep 20, 2017 at 9:05 AM, Ittai Zeidman <notifications@github.com>\nwrote:\n\n> @iirina <https://github.com/iirina>\n> What happened to using deps?\n> IMHO this was one of the wins of your design as it minimized the cognitive\n> load of the user and added encapsulation\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bazelbuild/bazel/commit/655a529db693e0d3c89a68ca81fc4858147b90f0#commitcomment-24424532>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABnAmi7VN3_YAPEaQscOF8osIoxtQKhlks5skLlUgaJpZM4PdbhD>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/24424674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25947359", "body": "Yes it was a typo, sorry about that! It was reverted in 1d1bee504bb22b75cd12c541522482edc8b8fa8c", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25947359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "chenkan1994": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4500", "title": "Toolchain wrapper scripts don't have execution permission", "body": "### Description of the problem / feature request:\r\n\r\nI am using an external repository as toolchain to cross compile my project, and a docker image based on Ubuntu 16.04 to run the builds, but seems my wrapper script of gcc don't have execution permission.\r\n\r\nI'm pretty sure that I've ```chmod +x``` on those files before commit and push them.\r\nAnd seems that I can't make them executable before build as the external project hasn't been downloaded before any build.\r\nThink that bazel should make them executable automatically?\r\n\r\n```\r\nERROR: /root/.cache/bazel/_bazel_root/4734a5a1c2901fe989e5b6a11965b4d1/external/boringssl/BUILD:132:1: C++ compilation of rule '@boringssl//:crypto' failed (Exit 1)\r\nsrc/main/tools/process-wrapper-legacy.cc:58: \"execvp(external/toolchains/tools/arm_compiler/gcc-4.8.5-aarch64/aarch64-unknown-linux-gnu-gcc, ...)\": Permission denied\r\n```\r\n\r\n### Feature requests: what underlying problem are you trying to solve with this feature?\r\n\r\nMake wrapper of gcc etc. executable automatically when using external project as toolchain.\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nUbuntu 16.04, docker image: chenkan1994/bazel-build\r\n\r\n### What's the output of `bazel info release`?\r\nThis is ```bazel version```\r\n\r\n```\r\nBuild label: 0.9.0\r\nBuild target: bazel-out/k8-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\r\nBuild time: Tue Dec 19 09:31:58 2017 (1513675918)\r\nBuild timestamp: 1513675918\r\nBuild timestamp as int: 1513675918\r\n```\r\n\r\n###  Have you found anything relevant by searching the web?\r\nSeems No.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ensonic": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4499", "title": "Generate a download list and design tooling to add mirror entries", "body": "Having failing build because of a network issues is annoying and harms bazels reputation as a reliable build system.\r\nRules will use `ctx.download(url, ...)`. Could bazel track the urls that rules tried to download from and output them together with the rule that triggered the download.\r\n\r\nWhat about some tooling that helps to add mirror urls to improve reliability or generate a list of unmirrored urls + licenses to setup mirroring?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4401", "title": "HOME missing from the action env (despite mentioned in the docs)", "body": "### Description of the problem\r\n\r\nhttps://docs.bazel.build/versions/master/test-encyclopedia.html#initial-conditions\r\nsays HOME is set to $TEST_TMPDIR. When running the sh_test with -s HOME is not printed.\r\n\r\nI have a shell test (that runs node-js web-component-tester) and that relies on HOME being set. I can work-around in the driver script.\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\nBUILD:\r\n```\r\nsh_test(\r\n    name = \"repro\",\r\n    srcs = [\"repro.sh\"],\r\n)\r\n```\r\nrepro.sh:\r\n```shell\r\n#!/bin/bash\r\ntest -z ${HOME+x} && exit 1\r\nexit 0\r\n```\r\n\r\n### What operating system are you running Bazel on?\r\n\r\ndebian testing\r\n\r\n### What's the output of `bazel info release`?\r\n\r\nrelease 0.9.0\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4320", "title": "bazel sandbox failure when using dazel (permission denied due to symlink layout)", "body": "### If possible, provide a minimal example to reproduce the problem:\r\n\r\nThis simple genrule failes when I run this using [dazel](https://github.com/nadirizr/dazel) (thats is bazel in docker to make deps hermetic).\r\n```\r\ngenrule(\r\n    name = \"registration_app\",\r\n    srcs = [\"registration/app.coffee\"],\r\n    outs = [\"app.coffee\"],\r\n    cmd = \"sed -e \\\"s%^url = \\\\\\\"http.*$$%url = \\\\\\\"http://www.$${PRJ_DOMAIN}\\\\\\\"%\\\" $< >$@\",\r\n)\r\n```\r\n```bash\r\n> dazel build -s -j 1 //src/polymer:registration_app\r\n...\r\nSUBCOMMAND: # //src/polymer:registration_app [action 'Executing genrule //src/polymer:registration_app']\r\n(cd /usr/local/google/home/ensonic/.cache/dazel/_dazel_ensonic/fa0b62599a6d69c63d52c0a39b895cb7/execroot/__main__ && \\\r\n  exec env - \\\r\n    PATH=/usr/lib/google-cloud-sdk/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \\\r\n    PRJ_DOMAIN=demo.example.com \\\r\n  /bin/bash -c 'source external/bazel_tools/tools/genrule/genrule-setup.sh; sed -e \"s%^url = \\\"http.*$%url = \\\"http://www.${PRJ_DOMAIN}\\\"%\" src/polymer/registration/app.coffee >bazel-out/local-opt/genfiles/src/polymer/app.coffee')\r\nERROR: /home/projects/demo/src/polymer/BUILD.bazel:57:1: Executing genrule //src/polymer:registration_app failed (Exit 2)\r\nsed: can't read src/polymer/registration/app.coffee: Permission denied\r\nTarget //src/polymer:registration_app failed to build\r\n```\r\n\r\nIf I change the genrule cmd:\r\n```patch\r\n-cmd = \"sed -e \\\"s%^url = \\\\\\\"http.*$$%url = \\\\\\\"http://www.$${ROBCO_DOMAIN}\\\\\\\"%\\\" $< >$@\",\r\n+cmd = \"id; ls -al $<; ls -al $$(readlink $<); touch $@\",\r\n```\r\nwe get this:\r\n```shell\r\nuid=0(root) gid=0(root) groups=0(root)\r\nlrwxrwxrwx 1 root root 145 Dec 15 14:48 src/polymer/registration/app.coffee -> /usr/local/google/home/ensonic/.cache/dazel/_dazel_ensonic/fa0b62599a6d69c63d52c0a39b895cb7/execroot/__main__/src/polymer/registration/app.coffee\r\nls: cannot access /usr/local/google/home/ensonic/.cache/dazel/_dazel_ensonic/fa0b62599a6d69c63d52c0a39b895cb7/execroot/__main__/src/polymer/ registration/app.coffee: Permission denied\r\n```\r\n\r\nAccording to https://blog.bazel.build/2015/09/11/sandboxing.html all the /usr path are visible from the sandbox, but not /usr/local. Anyway the project root must be visible, right? If I set `local=1' in the genrul it build, but I would need to do this all over (is there a global param to disable the sandbox as a workaround for the time being?).\r\n\r\n### Environment info\r\n* Operating System:\r\nlinux (debian testing)\r\n\r\n* Bazel version (output of `dazel info release`):\r\nrelease 0.7.0\r\nrelease 0.8.0\r\nrelease 0.8.1\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4271", "title": "doc improvements for site/docs/skylark/repository_rules.md", "body": "repository_rule() has a bunch of parameters that should be systematically documented. `implementation` and `attrs` are quite clear, but the semantics of `local` and 'environ` are not. For all parameters, it would be nice to know the default values if the are optional.\r\n\r\nRe `local`, does it matter that some examples use `local` in the assigned name too: `local_foo = repository_rule(...)`?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "PatrickLang": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4496", "title": "Bazel failing with VC++ compilers in \"C:\\Program Files\"", "body": "### Description of the problem / feature request:\r\n\r\nThe default install of Visual Studio puts the C++ compiler in a subdirectory under \"Program Files\". When trying to build a project, it fails saying \"c:\\Program\" does not exist:\r\n\r\n```none\r\nERROR: C:/users/patrick/appdata/local/temp/_bazel_patrick/dmhbzmu0/external/go_stdlib_windows_amd64_cgo/BUILD.bazel:4:1: error executing shell command: 'export GOROOT=\"$(pwd)/bazel-out/x64_windows-fastbuild/bin/external/go_stdlib_windows_amd64_cgo\" GOROOT_FINAL=\"GOROOT\" GOOS=\"windows\" GOARCH=\"amd64\" CGO_ENABLED=\"1\" CC=\"C:/Program Files (x86)/Micros...' failed (Exit 2)\r\n# runtime/cgo\r\nexec: \"C:/Program\": file does not exist\r\n```\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\nPrerequisites\r\n\r\n1. [Visual Studio 2017 community edition](https://www.visualstudio.com/vs/community/) - easiest way to get MS C++ compiler and SDK\r\n  - Tick the boxes for at least *desktop development with C++*\r\n2. [Chocolatey](https://chocolatey.org/)\r\n3. [Bazel](https://docs.bazel.build/versions/master/install-windows.html)\r\n\r\nSurprisingly, Go doesn't need to be preinstalled\r\n\r\n## Code used\r\n\r\nhttps://github.com/PatrickLang/iso9660wrap/tree/bazel-manual\r\n\r\nbe sure to use branch `bazel-manual`\r\n\r\n## Build attempt\r\n\r\n`bazel build //...`\r\n\r\nFails\r\n\r\n```\r\nExtracting Bazel installation...\r\n............\r\nDEBUG: C:/users/patrick/appdata/local/temp/_bazel_patrick/dmhbzmu0/external/bazel_tools/tools/cpp/lib_cc_configure.bzl:37:3:\r\nAuto-Configuration Warning: 'BAZEL_VC' is not set, start looking for the latest Visual C++ installed.\r\nDEBUG: C:/users/patrick/appdata/local/temp/_bazel_patrick/dmhbzmu0/external/bazel_tools/tools/cpp/lib_cc_configure.bzl:37:3:\r\nAuto-Configuration Warning: Looking for VS%VERSION%COMNTOOLS environment variables,eg. VS140COMNTOOLS\r\nDEBUG: C:/users/patrick/appdata/local/temp/_bazel_patrick/dmhbzmu0/external/bazel_tools/tools/cpp/lib_cc_configure.bzl:37:3:\r\nAuto-Configuration Warning: Looking for Visual C++ through registry\r\nDEBUG: C:/users/patrick/appdata/local/temp/_bazel_patrick/dmhbzmu0/external/bazel_tools/tools/cpp/lib_cc_configure.bzl:37:3:\r\nAuto-Configuration Warning: Visual C++ build tools found at C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\\\VC\r\nINFO: Analysed 2 targets (167 packages loaded).\r\nINFO: Found 2 targets...\r\nERROR: C:/users/patrick/appdata/local/temp/_bazel_patrick/dmhbzmu0/external/go_stdlib_windows_amd64_cgo/BUILD.bazel:4:1: error executing shell command: 'export GOROOT=\"$(pwd)/bazel-out/x64_windows-fastbuild/bin/external/go_stdlib_windows_amd64_cgo\" GOROOT_FINAL=\"GOROOT\" GOOS=\"windows\" GOARCH=\"amd64\" CGO_ENABLED=\"1\" CC=\"C:/Program Files (x86)/Micros...' failed (Exit 2)\r\n# runtime/cgo\r\nexec: \"C:/Program\": file does not exist\r\nINFO: Elapsed time: 129.897s, Critical Path: 31.18s\r\nFAILED: Build did NOT complete successfully\r\n```\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nWindows 10 1709 (build 16299)\r\n\r\n### What's the output of `bazel info release`?\r\n\r\nrelease 0.9.0\r\n\r\n### What's the output of `git remote get-url origin ; git rev-parse master ; git rev-parse HEAD` ?\r\n\r\nhttps://github.com/PatrickLang/iso9660wrap.git\r\n6129215f4acaa171e394fa3a90c09f71c308c0ac\r\ne580362bc6eec0400f03a15557c42b19c150dc77\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nNo\r\n\r\n### Any other information, logs, or outputs that you want to share?\r\n\r\nEntire build log from stdout/err is above\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "davido": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4495", "title": "Recommended protobuf integration triggers bazel warning: external/com_google_protobuf_java/WORKSPACE (@com_google_protobuf) does not match", "body": "//CC @ejona86 @cgrushko as author of [Protobuf integration recommendation](https://blog.bazel.build/2017/02/27/protocol-buffers.html) and maintainer of https://github.com/cgrushko/proto_library.\r\n\r\nIn https://github.com/bazelbuild/rules_closure/pull/231, https://github.com/bazelbuild/rules_closure/pull/232 `rules_closure` [recently](https://github.com/bazelbuild/rules_closure/commit/d3e0437b6964db0719d71f075833614df3348fa7) moved from depending on protobuf release binaries to depending on the protobuf directly.\r\n\r\nGerrit Code Review updated [recently](https://github.com/GerritCodeReview/gerrit/commit/2b61903d85d182cd941a1db4bf4d890b4c48afe8) to `rules_closure`@HEAD and now Gerrit build started to issue this [warning](https://bugs.chromium.org/p/gerrit/issues/detail?id=8182):\r\n\r\n```\r\nWARNING: /private/var/tmp/_bazel_xxx/4e4bb427cd475349ab3944ff29048468/external/com_google_protobuf_java/WORKSPACE:1: Workspace name in /private/var/tmp/_bazel_xxx/4e4bb427cd475349ab3944ff29048468/external/com_google_protobuf_java/WORKSPACE (@com_google_protobuf)\r\ndoes not match the name given in the repository's definition (@com_google_protobuf_java);\r\nthis will cause a build error in future versions\r\n```\r\n\r\nTo reproduce, [clone](https://gerrit.googlesource.com/gerrit) gerrit code review and issue `bazel build gerrit`.\r\n\r\nI reported [this issue](https://github.com/bazelbuild/rules_closure/issues/248) in `rules_closure` repository, but I was recommended to ask for feedback here.\r\n\r\nThe alternative way to repro is to clone [`rules_closure`](https://github.com/bazelbuild/rules_closure) and run the tests there:\r\n\r\n```\r\ndavido@wizball:~/projects/rules_closure (master=)$ bazel test javatests/...\r\nWARNING: /home/davido/.cache/bazel/_bazel_davido/2a0702ea37a9bc7e0f689212ecb3673c/external/com_google_protobuf_java/WORKSPACE:1: Workspace name in /home/davido/.cache/bazel/_bazel_davido/2a0702ea37a9bc7e0f689212ecb3673c/external/com_google_protobuf_java/WORKSPACE (@com_google_protobuf) does not match the name given in the repository's definition (@com_google_protobuf_java); this will cause a build error in future versions\r\n```\r\n\r\nThe [Protobuf integration recommendation](https://blog.bazel.build/2017/02/27/protocol-buffers.html) is telling us to fetch the same repository multiple times under different names:\r\n\r\n```\r\n# proto_library rules implicitly depend on @com_google_protobuf//:protoc,\r\n# which is the proto-compiler.\r\n# This statement defines the @com_google_protobuf repo.\r\nhttp_archive(\r\n    name = \"com_google_protobuf\",\r\n    urls = [\"https://github.com/google/protobuf/archive/b4b0e304be5a68de3d0ee1af9b286f958750f5e4.zip\"],\r\n)\r\n\r\n# cc_proto_library rules implicitly depend on @com_google_protobuf_cc//:cc_toolchain,\r\n# which is the C++ proto runtime (base classes and common utilities).\r\nhttp_archive(\r\n    name = \"com_google_protobuf_cc\",\r\n    urls = [\"https://github.com/google/protobuf/archive/b4b0e304be5a68de3d0ee1af9b286f958750f5e4.zip\"],\r\n)\r\n\r\n# java_proto_library rules implicitly depend on @com_google_protobuf_java//:java_toolchain,\r\n# which is the Java proto runtime (base classes and common utilities).\r\nhttp_archive(\r\n    name = \"com_google_protobuf_java\",\r\n    urls = [\"https://github.com/google/protobuf/archive/b4b0e304be5a68de3d0ee1af9b286f958750f5e4.zip\"],\r\n)\r\n```\r\n\r\nWhat is the recommended way to avoid the warning? Or should Bazel accept such mismatch:\r\n `external/com_google_protobuf_java/WORKSPACE (@com_google_protobuf) does not match` without warning, not to mention \"cause a build error in future versions\"?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4165", "title": "java_tools tests don't pass on Windows", "body": "On bazel@HEAD:\r\n\r\n```\r\n$ bazel test src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac/JavacTurbineTest -s --verbose_failures\r\nLoading:\r\nLoading: 0 packages loaded\r\nINFO: Analysed target //src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac:JavacTurbineTest (0 packages loaded).\r\nINFO: Found 1 test target...\r\n[0 / 2] BazelWorkspaceStatusAction stable-status.txt\r\nSUBCOMMAND: # //src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac:JavacTurbineTest [action 'Testing //src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac:JavacTurbineTest']\r\ncd C:/msys64/tmp/_bazel_davido/e7lhz0a0/execroot/io_bazel\r\n  SET JAVA_RUNFILES=bazel-out/x64_windows-fastbuild/bin/src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac/JavacTurbineTest.exe.runfiles\r\n    SET PATH=C:\\msys64\\usr\\bin;C:\\msys64\\bin;C:\\Users\\davido\\pgm\\nodejs;C:\\Users\\davido\\AppData\\Roaming\\npm;C:\\Python36;C:\\msys64\\usr\\local\\bin;C:\\msys64\\usr\\bin;C:\\msys64\\usr\\bin;C:\\msys64\\opt\\bin;C:\\Windows\\System32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\msys64\\usr\\bin\\site_perl;C:\\msys64\\usr\\bin\\vendor_perl;C:\\msys64\\usr\\bin\\core_perl\r\n    SET PYTHON_RUNFILES=bazel-out/x64_windows-fastbuild/bin/src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac/JavacTurbineTest.exe.runfiles\r\n    SET RUNFILES_DIR=bazel-out/x64_windows-fastbuild/bin/src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac/JavacTurbineTest.exe.runfiles\r\n    SET RUNFILES_MANIFEST_ONLY=1\r\n    SET RUN_UNDER_RUNFILES=1\r\n    SET TEMP=C:\\Users\\davido\\AppData\\Local\\Temp\r\n    SET TEST_BINARY=src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac/JavacTurbineTest.exe\r\n    SET TEST_INFRASTRUCTURE_FAILURE_FILE=bazel-out/x64_windows-fastbuild/testlogs/src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac/JavacTurbineTest/test.infrastructure_failure\r\n    SET TEST_LOGSPLITTER_OUTPUT_FILE=bazel-out/x64_windows-fastbuild/testlogs/src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac/JavacTurbineTest/test.raw_splitlogs/test.splitlogs\r\n    SET TEST_PREMATURE_EXIT_FILE=bazel-out/x64_windows-fastbuild/testlogs/src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac/JavacTurbineTest/test.exited_prematurely\r\n    SET TEST_SIZE=medium\r\n    SET TEST_SRCDIR=bazel-out/x64_windows-fastbuild/bin/src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac/JavacTurbineTest.exe.runfiles\r\n    SET TEST_TIMEOUT=300\r\n    SET TEST_TMPDIR=_tmp/be0e05b7bca0f645bc898e36ab614213\r\n    SET TEST_UNDECLARED_OUTPUTS_ANNOTATIONS=bazel-out/x64_windows-fastbuild/testlogs/src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac/JavacTurbineTest/test.outputs_manifest/ANNOTATIONS\r\n    SET TEST_UNDECLARED_OUTPUTS_ANNOTATIONS_DIR=bazel-out/x64_windows-fastbuild/testlogs/src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac/JavacTurbineTest/test.outputs_manifest\r\n    SET TEST_UNDECLARED_OUTPUTS_DIR=bazel-out/x64_windows-fastbuild/testlogs/src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac/JavacTurbineTest/test.outputs\r\n    SET TEST_UNDECLARED_OUTPUTS_MANIFEST=bazel-out/x64_windows-fastbuild/testlogs/src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac/JavacTurbineTest/test.outputs_manifest/MANIFEST\r\n    SET TEST_UNDECLARED_OUTPUTS_ZIP=bazel-out/x64_windows-fastbuild/testlogs/src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac/JavacTurbineTest/test.outputs/outputs.zip\r\n    SET TEST_UNUSED_RUNFILES_LOG_FILE=bazel-out/x64_windows-fastbuild/testlogs/src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac/JavacTurbineTest/test.unused_runfiles_log\r\n    SET TEST_WARNINGS_OUTPUT_FILE=bazel-out/x64_windows-fastbuild/testlogs/src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac/JavacTurbineTest/test.warnings\r\n    SET TEST_WORKSPACE=io_bazel\r\n    SET TMP=C:\\Users\\davido\\AppData\\Local\\Temp\r\n    SET TZ=UTC\r\n    SET XML_OUTPUT_FILE=bazel-out/x64_windows-fastbuild/testlogs/src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac/JavacTurbineTest/test.xml\r\n  C:/msys64/usr/bin/bash.exe -c $0 $* external/bazel_tools/tools/test/test-setup.sh src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac/JavacTurbineTest.exe\r\n[1 / 2] 1 / 1 tests, 1 failed; Testing //src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac:JavacTurbineTest; 1s local\r\nFAIL: //src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac:JavacTurbineTest (see C:/msys64/tmp/_bazel_davido/e7lhz0a0/execroot/io_bazel/bazel-out/x64_windows-fastbuild/testlogs/src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac/JavacTurbineTest/test.log)\r\nTarget //src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac:JavacTurbineTest up-to-date:\r\n  C:/msys64/tmp/_bazel_davido/e7lhz0a0/execroot/io_bazel/bazel-out/x64_windows-fastbuild/bin/src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac/JavacTurbineTest.jar\r\n  C:/msys64/tmp/_bazel_davido/e7lhz0a0/execroot/io_bazel/bazel-out/x64_windows-fastbuild/bin/src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac/JavacTurbineTest.exe\r\nINFO: Elapsed time: 2,279s, Critical Path: 1,50s\r\nINFO: Build completed, 1 test FAILED, 2 total actions\r\n//src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac:JavacTurbineTest FAILED in 1,5s\r\n  C:/msys64/tmp/_bazel_davido/e7lhz0a0/execroot/io_bazel/bazel-out/x64_windows-fastbuild/testlogs/src/java_tools/buildjar/javatests/com/google/devtools/build/java/turbine/javac/JavacTurbineTest/test.log\r\n\r\nExecuted 1 out of 1 test: 1 fails locally.\r\n```\r\n\r\nLogs: http://paste.openstack.org/show/627381.\r\n\r\nIt seems, that `jvm_flags` doesn't have the desired effect on Windows, and `-Xbootclasspath/p:<path-to-java9>` option doesn't have effect and that the default javac from Java 8 is used.\r\n\r\n```\r\n    jvm_flags = [\r\n        # Simulates how Bazel invokes turbine\r\n        \"-Xbootclasspath/p:$(location //third_party/java/jdk/langtools:javac_jar)\",\r\n    ],\r\n```\r\n\r\nThe same test is passing on Linux without any issue.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4055", "title": "scripts/generate_bash_completion.sh is failing on Alpine Linux", "body": "I've built the latest Bazel on Alpine Linux, but trying generate the bash completeion is failing with:\r\n\r\n```\r\n/bin/bash -c 'source external/bazel_tools/tools/genrule/genrule-setup.sh; scripts/generate_bash_completion.sh --bazel=bazel-out/host/bin/src/bazel --javabase=external/local_jdk --output=bazel-out/local-fastbuild/bin/scripts/bazel-complete.bash --prepend=scripts/bazel-complete-template.bash'\r\n+ set -e\r\n+ append=\r\n+ bazel=\r\n+ javabase=\r\n+ output=\r\n+ prepend=\r\n+ [ 4 -gt 0 ]\r\n+ get_optarg --bazel=bazel-out/host/bin/src/bazel\r\n+ expr -- --bazel=bazel-out/host/bin/src/bazel : [^=]*=\\(.*\\)\r\nexpr: syntax error\r\n```\r\n\r\nIt seems that `expr` utility on this `musl libc` based system behaives differently.\r\n\r\nThis diff fixed it (remove '--' after `expr`):\r\n\r\n```\r\nsed -i.bak 's/expr --/expr/' scripts/generate_bash_completion.sh\r\n```\r\n\r\nI filed this issue upstream: https://bugs.alpinelinux.org/issues/8121.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4055/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/7ca9e859597d99c899523603fb9a399766401793", "message": "grpc rules: Make Skylark rule forwards compatible\n\nThis fixes:\n\n  [f for dep in ctx.attr.srcs for f in dep.proto.transitive_imports]\n  type 'depset' is not iterable. Use the `to_list()` method to get\n  a list.\n\nChange-Id: I72b8c1c788a5c193af4d4293f0cf81ba4f0da1c6"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/58efcfdbe65ec1d34286a151ceb9854104bcdb8e", "message": "test_rules.bzl: Make Skylark rule forward compatible\n\nThis fixes \"type 'depset' is not iterable. Use the `to_list()` method\nto get a list.\" warning.\n\nChange-Id: I10bd791ce15445469afb9e12b2246be583c77a4b"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Globegitter": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4492", "title": "deb with pre-extracted bazel", "body": "### Description of the problem / feature request:\r\n\r\nI was trying to build a docker image with bazel using `rules_docker`. See https://github.com/bazelbuild/rules_docker/issues/285. Turns out the thing that makes it very inconvenient and the resulting image very unfitting for ci jobs is that bazel has to be extracted on first run in the container.\r\n\r\n### Feature requests: what underlying problem are you trying to solve with this feature?\r\n\r\nI want to be able to build a docker image that includes a bazel that is ready to be used.\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\nCreate a `http_file` dependency on https://github.com/bazelbuild/bazel/releases/download/0.9.0/bazel_0.9.0-linux-x86_64.deb. Create a package bundle in your `WORKSPACE` file that specifies `openjdk-8-jdk-headless` in the same way as specified here: https://github.com/GoogleCloudPlatform/distroless/blob/master/WORKSPACE#L49\r\n\r\nThen create a `container_image` rule as specified in the link to the rule_docker issue above. Also happy to provide an exampel repo if necessary.\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jmillikin-stripe": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4484", "title": "Please add flag `--host_linkopt` for setting linker options on host-build tools", "body": "### Description of the problem / feature request:\r\nBazel has `--host_copt` and `--host_cxxopt` flags that control C++ compiler options when building binaries for the host (e.g. as tool inputs to a genrule). This request is to add a `--host_linkopt` flag, which does the same but for the linker.\r\n\r\n### Feature requests: what underlying problem are you trying to solve with this feature?\r\nSome C++ flags, such as Clang's address sanitizer, require additional linker options to build working binaries.\r\n\r\n### What's the output of `bazel info release`?\r\n```\r\n$ bazel info release\r\nrelease 0.9.0-homebrew\r\n```", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4285", "title": "Use of `@//` in bazelbuild/bazel/... makes it very hard to depend on Bazel from other repos", "body": "I want to build a Docker container that will run the prototype Bazel Remote Worker. This seems like it should be very easy, by creating a `http_archive` repo rule importing Bazel itself, and then making `@io_bazel//src/tools/remote_worker`) a dep of the image rule.\r\n\r\nUnfortunately, the use of `@//` in this repo makes that very difficult. When a rule depends on `@//foo:bar`, Bazel will try to resolve `//foo:bar` as a target in the top-level workspace. Since the Bazel source is an external, that fails.\r\n\r\nLuckily, Bazel's `WORKSPACE` declares `workspace(name = \"io_bazel\")`. This means a global search-and-replace of `@//` with `@io_bazel//` in this repo should allow it to be depended on normally, no further changes needed. I verified this by patching bazel-0.8.1 (https://gist.github.com/jmillikin-stripe/f53e098622bed7fb70a90103c80fc2ee) to use `@io_bazel//`, and was able to successfully build the remote worker as an external dep. This was the same output as building it from `bazelbuild/bazel`, including correctly vendored dependencies.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4044", "title": "Please allow Crosstool features to be defined without redefining all of CROSSTOOL.tpl", "body": "Projects like Envoy want to have a broader range of build modes than just opt/fastbuild/dbg. Currently Envoy has a custom bazelrc defining flag sets as configs:\r\n\r\n```\r\n# Allow --config=asan builds\r\nbuild:asan --define ENVOY_CONFIG_ASAN=1\r\nbuild:asan --copt -fsanitize=address,undefined\r\nbuild:asan --linkopt -fsanitize=address,undefined\r\n# ...\r\n```\r\n\r\nIt would be nice if these additional flags could be represented as Crosstool features -- then they could be enabled per-target, or excluded from certain targets that are known to be problematic for certain flags.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4030", "title": "Bazel should warn if a target depends on `features` that aren't defined.", "body": "Given a BUILD file with a target using the `features` attr:\r\n\r\n```python\r\ncc_binary(\r\n    name = \"hello\",\r\n    srcs = [\"hello.cc\"],\r\n    features = [\"no-such-feature\"],\r\n)\r\n```\r\n\r\nWhen building this, I would expect Bazel to print some warning about `no-such-feature` being undefined. Currently (as of release 0.7.0) no such warning is printed, which makes it difficult to notice that a typo has prevented some desired feature from being applied.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3902", "title": "`attr.string_list_dict` doesn't resolve `select()` calls to values before type checking.", "body": "Given a rule with an attribute defined by `attr.string_list_dict()`, I'd expect the following two stanzas to be equivalent:\r\n\r\n```python\r\nfoo(my_attr = {\"hello\": [\"world\"]})\r\n\r\nfoo(\r\n  my_attr = {\"hello\": select({\r\n    \"//conditions:default\": [\"world\"],\r\n  })},\r\n)\r\n```\r\n\r\nHowever, Bazel rejects the second with a type error:\r\n\r\n```\r\nexpected value of type 'list(string)' for dict value element, but got select({\"//conditions:default\": []}) (select)\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3867", "title": "Please add proto_library attrs to adjust its \"virtual path\"", "body": "When a .proto file contains `import \"foo/bar/baz.proto\"`, that path doesn't actually have to exist as-is on the filesystem. It can be mapped to any arbitrary path by protoc by using an equals sign in `--proto_path`: `protoc --proto_path=foo/bar/baz.proto=some/other/path.proto`.\r\n\r\nPlease add attributes to `proto_library()` to adjust the virtual path used to locate its source proto, similar to how `cc_library()` allows changing the include path. Good attributes would be:\r\n\r\n* `import_prefix` to add a prefix to the virtual path.\r\n* `strip_import_prefix` to remove a prefix from the virtual path.\r\n\r\nThe main use case is cross-repo includes, where we want to use nice short names in the filesystem but URL-prefixed names in the import paths: \r\n\r\n```python\r\n# ./external/base/proto/BUILD\r\nproto_library(\r\n  name = \"build_info\",\r\n  srcs = [\"build_info.proto\"],\r\n  import_prefix = \"github.com/myorg/base\",\r\n)\r\n\r\n# ./proto/BUILD\r\nproto_library(\r\n  name = \"helloworld\",\r\n  srcs = [\"helloworld.proto\"],\r\n  deps = [\"@base//proto:build_info],\r\n)\r\n\r\n# CURRENT ./proto/helloworld.proto\r\nimport \"proto/build_info.proto\";\r\n\r\n# DESIRED ./proto/helloworld.proto\r\nimport \"github.com/myorg/base/proto/build_info.proto\";\r\n```", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/38f815c2c8a4bc4d6cf79d366d200e37fa0935f3", "message": "Always use the JavaIO VFS implementation in the remote worker.\n\nThe JNI implementation doesn't work from a deployable jar.\n\nFixes https://github.com/bazelbuild/bazel/issues/3249\n\ncc @ulfjack\n\nCloses #4438.\n\nPiperOrigin-RevId: 181746081"}], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4449", "title": "Minor changes to vendored protobuf/grpc libraries to match upstreams", "body": "With these changes, Bazel's vendored copy of protobuf can be swapped out with the main protobuf library in a workspace. This is useful when building Bazel or its helper binaries (e.g. remote builder) as part of a larger project.\r\n\r\nTested by building //src:bazel-bin with both the vendored copy, and a `http_archive` of protobuf 3.5.1 (unmodified upstream). I don't have enough deps on my local workstation to run the full Bazel test suite, so I'm hoping the Bazel CI can run the full tests.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4435", "title": "Use @io_bazel to reference Bazel sources from local repositories.", "body": "Fixes https://github.com/bazelbuild/bazel/issues/4285\r\n\r\ncc @dslomov", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "roblg": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4483", "title": "java 1.8.0_162: java.util.MissingResourceException: Can't find bundle for base name com.google.errorprone.errors, locale en_US", "body": "### Description of the problem / feature request:\r\n\r\nOn OSX, with java 1.8.0_162-b12 from Oracle, running bazel 0.9.0 `-without-jdk` installed via self-extractor or homebrew fails with an error. Earlier Java update versions work fine (e.g. u131). Bazel 0.9.0 with bundled JDK also works fine.\r\n\r\nError:\r\n\r\n```\r\n(09:04:29) ERROR: /Volumes/code/redfin/main/redfin.core.enums/BUILD:4:1: Building redfin.core.enums/libredfin.core.enums.jar (533 source files) failed (Exit 1): java failed: error executing command\r\n  (cd /private/var/tmp/_bazel_robert.gay/69746c6b963d631c63554f7e842731c0/execroot/redfin_main && \\\r\n  exec env - \\\r\n    LC_CTYPE=en_US.UTF-8 \\\r\n  external/local_jdk/bin/java -XX:+TieredCompilation '-XX:TieredStopAtLevel=1' -Xbootclasspath/p:external/bazel_tools/third_party/java/jdk/langtools/javac-9-dev-r4023-3.jar -jar external/bazel_tools/tools/jdk/JavaBuilder_deploy.jar @bazel-out/darwin-fastbuild/bin/redfin.core.enums/libredfin.core.enums.jar-2.params)\r\njava.lang.InternalError: Cannot find requested resource bundle for locale en_US\r\n        at com.sun.tools.javac.util.JavacMessages.getBundles(JavacMessages.java:128)\r\n        at com.sun.tools.javac.util.JavacMessages.getLocalizedString(JavacMessages.java:147)\r\n        at com.sun.tools.javac.util.JavacMessages.getLocalizedString(JavacMessages.java:140)\r\n        at com.sun.tools.javac.util.Log.localize(Log.java:788)\r\n        at com.sun.tools.javac.util.Log.printLines(Log.java:586)\r\n        at com.sun.tools.javac.api.JavacTaskImpl.handleExceptions(JavacTaskImpl.java:170)\r\n        at com.sun.tools.javac.api.JavacTaskImpl.doCall(JavacTaskImpl.java:96)\r\n        at com.sun.tools.javac.api.JavacTaskImpl.call(JavacTaskImpl.java:90)\r\n        at com.google.devtools.build.buildjar.javac.BlazeJavacMain.compile(BlazeJavacMain.java:107)\r\n        at com.google.devtools.build.buildjar.SimpleJavaLibraryBuilder$1.invokeJavac(SimpleJavaLibraryBuilder.java:105)\r\n        at com.google.devtools.build.buildjar.ReducedClasspathJavaLibraryBuilder.compileSources(ReducedClasspathJavaLibraryBuilder.java:54)\r\n        at com.google.devtools.build.buildjar.SimpleJavaLibraryBuilder.compileJavaLibrary(SimpleJavaLibraryBuilder.java:108)\r\n        at com.google.devtools.build.buildjar.SimpleJavaLibraryBuilder.run(SimpleJavaLibraryBuilder.java:116)\r\n        at com.google.devtools.build.buildjar.BazelJavaBuilder.processRequest(BazelJavaBuilder.java:105)\r\n        at com.google.devtools.build.buildjar.BazelJavaBuilder.runPersistentWorker(BazelJavaBuilder.java:67)\r\n        at com.google.devtools.build.buildjar.BazelJavaBuilder.main(BazelJavaBuilder.java:45)\r\nCaused by: java.util.MissingResourceException: Can't find bundle for base name com.google.errorprone.errors, locale en_US\r\n        at java.util.ResourceBundle.throwMissingResourceException(ResourceBundle.java:1573)\r\n        at java.util.ResourceBundle.getBundleImpl(ResourceBundle.java:1396)\r\n        at java.util.ResourceBundle.getBundle(ResourceBundle.java:854)\r\n        at com.sun.tools.javac.util.JavacMessages.lambda$add$0(JavacMessages.java:106)\r\n        at com.sun.tools.javac.util.JavacMessages.getBundles(JavacMessages.java:125)\r\n        ... 15 more\r\n```\r\n\r\n* Install bazel 0.9.0-without-jdk, or via homebrew\r\n* Install Java 1.8_162\r\n* Set JAVA_HOME to 1.8_162\r\n* `bazel shutdown` (just to ensure bazel is started w/ Java 1.8_162 in the next step)\r\n* `bazel build <any java_* target>` fails with the above error.\r\n\r\nbazel shutdown + switching JAVA_HOME back to an earlier Java update + bazel build will succeed.\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nOSX Sierra\r\n\r\n### What's the output of `bazel info release`?\r\n\r\n`release 0.9.0`\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nNothing obviously relevant to bazel\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4483/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alexanderlobov": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4480", "title": "`$ORIGIN` in RPATH on macOS", "body": "### Description of the problem / feature request:\r\n\r\nA binary built by bazel has linux-specific `$ORIGIN` variable in RPATH on macOS.\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\n[Minimal example here](https://github.com/alexanderlobov/try-bazel/tree/master/linking-with-dynamic-lib).\r\n\r\nTo build:\r\n\r\n```\r\nalex@osx:~/src/github/try-bazel/linking-with-dynamic-lib$ /usr/local/bin/bazel build app\r\nINFO: Analysed target //app:app (9 packages loaded).\r\nINFO: Found 1 target...\r\nTarget //app:app up-to-date:\r\n  bazel-bin/app/app\r\nINFO: Elapsed time: 1.191s, Critical Path: 0.03s\r\nINFO: Build completed successfully, 1 total action\r\n```\r\n\r\nTo check RPATH\r\n\r\n```\r\nalex@osx:~/src/github/try-bazel/linking-with-dynamic-lib$ otool -l bazel-bin/app/app | grep -A2 RPATH\r\n          cmd LC_RPATH\r\n      cmdsize 64\r\n         path $ORIGIN/../_solib_darwin/_U_S_Slib_Clib___Ulib (offset 12)\r\n```\r\n\r\nAs a result of wrong RPATH the binary can not start:\r\n\r\n```\r\nalex@osx:~/src/github/try-bazel/linking-with-dynamic-lib$ bazel-bin/app/app\r\ndyld: Library not loaded: @rpath/libpython3.6m.dylib\r\n  Referenced from: /Users/alex/src/github/try-bazel/linking-with-dynamic-lib/bazel-bin/app/app\r\n  Reason: image not found\r\nAbort trap: 6\r\n```\r\n\r\nI have tried `cc_import` instead of `cc_library`, but it fails too. To do this, comment the `cc_library` in `lib/BUILD.bazel` and uncomment `cc_import` declaration.\r\n\r\n```\r\nalex@osx:~/src/github/try-bazel/linking-with-dynamic-lib$ /usr/local/bin/bazel build app\r\nERROR: /Users/alex/src/github/try-bazel/linking-with-dynamic-lib/app/BUILD.bazel:4:12: in deps attribute of cc_binary rule //app:app: cc_import rule '//lib:lib' is misplaced here (expected cc_inc_library, cc_library, objc_library or cc_proto_library)\r\nERROR: Analysis of target '//app:app' failed; build aborted: Analysis of target '//app:app' failed; build aborted\r\nINFO: Elapsed time: 0.149s\r\nFAILED: Build did NOT complete successfully (1 packages loaded)\r\n```\r\n\r\nAt the same time, `cc_import` seems to work on Linux.\r\n\r\nI also tried the development version of bazel (from master branch), but it fails to link with libstdc++, see https://github.com/bazelbuild/bazel/issues/4479 for details.\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nmacOS Sierra 10.12.6\r\n\r\n### What's the output of `bazel info release`?\r\n\r\n```\r\nrelease 0.9.0-homebrew\r\n```\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nhttps://github.com/bazelbuild/bazel/issues/3450\r\nhttps://stackoverflow.com/questions/45231066/linking-a-dynamic-lib-using-bazel-on-macos\r\nhttps://github.com/bazelbuild/bazel/issues/4479\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4479", "title": "bazel fails to link with libstdc++", "body": "### Description of the problem / feature request:\r\n\r\nbazel fails to build a project with an error\r\n\r\n```\r\nld: library not found for -l:libstdc++.a\r\n```\r\n\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\nMinimal example: https://github.com/alexanderlobov/try-bazel/tree/master/linking-with-dynamic-lib\r\n\r\nIf I build the project with bazel from brew, it works:\r\n\r\n```\r\nalex@osx:~/src/github/try-bazel/linking-with-dynamic-lib$ /usr/local/bin/bazel build app\r\n..........\r\nINFO: Analysed target //app:app (9 packages loaded).\r\nINFO: Found 1 target...\r\nTarget //app:app up-to-date:\r\n  bazel-bin/app/app\r\nINFO: Elapsed time: 3.815s, Critical Path: 0.47s\r\nINFO: Build completed successfully, 3 total actions\r\n\r\nalex@osx:~/src/github/try-bazel/linking-with-dynamic-lib$ /usr/local/bin/bazel info release\r\nrelease 0.9.0-homebrew\r\n```\r\n\r\nThen I try to build it with bazel from the master branch\r\n\r\n```\r\nalex@osx:~/src/github/try-bazel/linking-with-dynamic-lib$ ~/bin/bazel build app\r\n...............\r\nINFO: Analysed target //app:app (7 packages loaded).\r\nINFO: Found 1 target...\r\nERROR: /Users/alex/src/github/try-bazel/linking-with-dynamic-lib/app/BUILD.bazel:1:1: Linking of rule '//app:app' failed (Exit 1)\r\nld: library not found for -l:libstdc++.a\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nTarget //app:app failed to build\r\nUse --verbose_failures to see the command lines of failed build steps.\r\nINFO: Elapsed time: 4.628s, Critical Path: 0.57s\r\nFAILED: Build did NOT complete successfully\r\n\r\nalex@osx:~/src/github/try-bazel/linking-with-dynamic-lib$ bazel info release\r\ndevelopment version\r\n```\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nmacOS Sierra 10.12.6\r\n\r\n### What's the output of `bazel info release`?\r\n\r\nSee the output above.\r\n\r\n### If `bazel info release` returns \"development version\" or \"(@non-git)\", tell us how you built Bazel.\r\n\r\n```\r\nalex@osx:~/src/bazel$ git remote -v\r\norigin\thttps://github.com/bazelbuild/bazel.git (fetch)\r\norigin\thttps://github.com/bazelbuild/bazel.git (push)\r\n\r\nalex@osx:~/src/bazel$ git status\r\nOn branch master\r\nYour branch is up-to-date with 'origin/master'.\r\n\r\nnothing to commit, working tree clean\r\nalex@osx:~/src/bazel$ gitlog | head -n1\r\n* 3ac310e3c (HEAD -> master, origin/master, origin/HEAD) Minimal support for compiling module-infos\r\n\r\nbazel build //src:bazel\r\ncp bazel-bin/src/bazel ~/bin\r\n```\r\n\r\n\r\n### What's the output of `git remote get-url origin ; git rev-parse master ; git rev-parse HEAD` ?\r\n\r\n```\r\nalex@osx:~/src/bazel$ git remote get-url origin ; git rev-parse master ; git rev-parse HEAD\r\nhttps://github.com/bazelbuild/bazel.git\r\n3ac310e3c870cd70cef26354ee34b3708584db84\r\n3ac310e3c870cd70cef26354ee34b3708584db84\r\n```\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nI have found this bug https://github.com/bazelbuild/bazel/issues/4474\r\nI'm not sure is it actually related to my issue.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "f9rocket": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4477", "title": "Test executable fails only when run under bazel test", "body": "### Description of the problem / feature request:\r\n\r\nI have a unit test that calls certain functions in a DLL. When I run this unit test under `bazel run` or as a standalone executable the unit test passes. When I try to run the unit test through `bazel test` the test fails and only partial test output is produced.\r\n\r\nSample output:\r\n\r\n```\r\n> bazel run //lib/thing:my_test  OR  ..\\bazel-out\\...\\my_test.exe\r\n...\r\nINFO: Running command line: .../my_test.exe\r\n[==========] Running 1 test from 1 test case.\r\n[----------] Global test environment set-up.\r\n[----------] 1 test from MyTest\r\n[ RUN      ] MyTest.Test\r\n[       OK ] MyTest.Test (3053 ms)\r\n[----------] 1 test from MyTest (3054 ms total)\r\n\r\n[----------] Global test environment tear-down\r\n[==========] 1 test from 1 test case ran. (3058 ms total)\r\n[  PASSED  ] 1 test.\r\n```\r\n\r\nBut when I run it using `bazel test`:\r\n\r\n```\r\nINFO: Analysed target //lib/thing:MyTest (0 packages loaded).\r\nINFO: Found 1 test target...\r\nFAIL: //lib/thing:MyTest (see C:/.../my_test/test.log)\r\nINFO: From Testing //lib/thing:my_test\r\n==================== Test output for //lib/thing:my_test:\r\n[==========] Running 1 test from 1 test case.\r\n[----------] Global test environment set-up.\r\n[----------] 1 test from MyTest\r\n[ RUN      ] MyTest.Test\r\n================================================================================\r\n...\r\n//lib/thing:my_test                                            FAILED in 1.8s\r\n  C:/.../my_test/test.log\r\n```\r\n\r\nI suspected gtest was behind this so I removed all gtest code/assertions from the test, but it still fails. As far as I can tell the only difference between `bazel run` and `bazel test` is that run launches an actual subprocess while test uses a bash wrapper.\r\n \r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\nI understand that with the given information this is almost impossible to reproduce, but I am very limited as to sharing code. What I am looking for here is mostly:\r\n\r\n1) Visibility: perhaps someone has had the same or similar issue.\r\n2) Debugging help: any tips/ideas on how to debug `bazel test` or its bash wrapper. \r\n\r\n### What operating system are you running Bazel on?\r\n\r\nWindows\r\n\r\n### What's the output of `bazel info release`?\r\n\r\ndevelopment version\r\n\r\n### If `bazel info release` returns \"development version\" or \"(@non-git)\", tell us how you built Bazel.\r\n\r\nI built it from the branch release-0.10.0.\r\n\r\n### What's the output of `git remote get-url origin ; git rev-parse master ; git rev-parse HEAD` ?\r\n\r\nhttps://github.com/bazelbuild/bazel.git\r\n96c654d43eb2906177325cbc2fc2b1e90dbcc792\r\n22c2f9a7722e8c8b7fdf8f5d30a40f1c4118e993\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nI have not.\r\n\r\n### Any other information, logs, or outputs that you want to share?\r\n\r\nSee above.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dws-uber": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4475", "title": "\"build --action_env=PATH\" in /etc/bazel.bazelrc removes PATH from build actions", "body": "> ATTENTION! Please read and follow:\r\n> - if this is a _question_ about how to build / test / query / deploy using Bazel, ask it on StackOverflow instead: https://stackoverflow.com/questions/tagged/bazel\r\n> - if this is a _discussion starter_, send it to bazel-discuss@googlegroups.com\r\n> - if this is a _bug_ or _feature request_, fill the form below as best as you can.\r\n\r\n### Description of the problem / feature request:\r\n\r\nWhen `/etc/bazel.bazelrc` is present and contains `build --action_env=PATH`, bazel _removes_ `PATH` from the environment, at least when building C++.\r\n\r\n### Feature requests: what underlying problem are you trying to solve with this feature?\r\n\r\nThere is a discrepancy between the docs for --action_env and what it actually does. The docs say that it should _add_ variables to the environment, but it seems that there are cases where it _removes_ variables from the environment.\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\n```\r\n$ cat WORKSPACE\r\n$ cat BUILD\r\ncc_binary(\r\n    name = \"hello\",\r\n    srcs = [\"hello.cc\"]\r\n)\r\n$ cat hello.cc\r\n#include <stdio.h>\r\nint main(void) { printf(\"%s\", \"hello world\\n\"); return 0; }\r\n```\r\n\r\nVerify that you have no `/etc/bazel.bazelrc` file.  Then do `bazel build -s //:hello` and observe that the printed actions include PATH=<path>.\r\n\r\nVerify that you have `/etc/bazel.bazelrc` and that it contains `build --action_env=PATH`.  Then do `bazel build -s //:hello` and observe that the printed actions do NOT include PATH=<path>\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nUbuntu 14.04.5 LTS\r\n\r\n### What's the output of `bazel info release`?\r\n\r\nrelease 0.9.0- (@non-git)\r\n\r\n### If `bazel info release` returns \"development version\" or \"(@non-git)\", tell us how you built Bazel.\r\n\r\n./compile.sh\r\n\r\n### What's the output of `git remote get-url origin ; git rev-parse master ; git rev-parse HEAD` ?\r\n\r\n> Replace this line with your answer.\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\n> Replace these lines with your answer.\r\n>\r\n> Places to look:\r\n> - StackOverflow: http://stackoverflow.com/questions/tagged/bazel\r\n> - GitHub issues: https://github.com/bazelbuild/bazel/issues\r\n> - email threads on https://groups.google.com/forum/#!forum/bazel-discuss\r\n\r\n### Any other information, logs, or outputs that you want to share?\r\n\r\nAn example output with no `/etc/bazel.bazelrc`:\r\n\r\n```\r\n........\r\nLoading:\r\nLoading: 0 packages loaded\r\nAnalyzing: target //:hello (5 packages loaded)\r\nINFO: Analysed target //:hello (8 packages loaded).\r\nINFO: Found 1 target...\r\n[0 / 6] no action\r\nSUBCOMMAND: # //:hello [action 'Compiling hello.cc']\r\n(cd /home/dws/.cache/bazel/_bazel_dws/976b33b611d60f37e083b7bf0feab613/execroot/__main__ && \\\r\n  exec env - \\\r\n    PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games \\\r\n    PWD=/proc/self/cwd \\\r\n  /usr/bin/gcc -U_FORTIFY_SOURCE -fstack-protector -Wall -B/usr/bin -B/usr/bin -Wunused-but-set-parameter -Wno-free-nonheap-object -fno-omit-frame-pointer '-std=c++0x' -MD -MF bazel-out/k8-fastbuild/bin/_objs/hello/hello.pic.d '-frandom-seed=bazel-out/k8-fastbuild/bin/_objs/hello/hello.pic.o' -fPIC -iquote . -iquote bazel-out/k8-fastbuild/genfiles -iquote external/bazel_tools -iquote bazel-out/k8-fastbuild/genfiles/external/bazel_tools -isystem external/bazel_tools/tools/cpp/gcc3 -fno-canonical-system-headers -Wno-builtin-macro-redefined '-D__DATE__=\"redacted\"' '-D__TIMESTAMP__=\"redacted\"' '-D__TIME__=\"redacted\"' -c hello.cc -o bazel-out/k8-fastbuild/bin/_objs/hello/hello.pic.o)\r\nSUBCOMMAND: # //:hello [action 'Creating runfiles tree bazel-out/k8-fastbuild/bin/hello.runfiles']\r\n(cd /home/dws/.cache/bazel/_bazel_dws/976b33b611d60f37e083b7bf0feab613/execroot/__main__ && \\\r\n  exec env - \\\r\n    PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games \\\r\n  _bin/build-runfiles bazel-out/k8-fastbuild/bin/hello.runfiles_manifest bazel-out/k8-fastbuild/bin/hello.runfiles)\r\nSUBCOMMAND: # //:hello [action 'Linking hello']\r\n(cd /home/dws/.cache/bazel/_bazel_dws/976b33b611d60f37e083b7bf0feab613/execroot/__main__ && \\\r\n  exec env - \\\r\n    PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games \\\r\n    PWD=/proc/self/cwd \\\r\n  /usr/bin/gcc -o bazel-out/k8-fastbuild/bin/hello '-fuse-ld=gold' -Wl,-no-as-needed -Wl,-z,relro,-z,now -B/usr/bin -B/usr/bin -pass-exit-codes -Wl,-S -Wl,@bazel-out/k8-fastbuild/bin/hello-2.params)\r\nTarget //:hello up-to-date:\r\n  bazel-bin/hello\r\nINFO: Elapsed time: 1.644s, Critical Path: 0.15s\r\nINFO: Build completed successfully, 6 total actions\r\n```\r\n\r\nAn example output when `/etc/bazel.bazelrc` contains `build --action_env=PATH`:\r\n\r\n```\r\n........\r\nLoading:\r\nLoading: 0 packages loaded\r\nAnalyzing: target //:hello (5 packages loaded)\r\nINFO: Analysed target //:hello (8 packages loaded).\r\nINFO: Found 1 target...\r\n[0 / 6] [-----] Writing file hello-2.params\r\nSUBCOMMAND: # //:hello [action 'Creating runfiles tree bazel-out/k8-fastbuild/bin/hello.runfiles']\r\n(cd /home/dws/.cache/bazel/_bazel_dws/976b33b611d60f37e083b7bf0feab613/execroot/__main__ && \\\r\n  exec env - \\\r\n  _bin/build-runfiles bazel-out/k8-fastbuild/bin/hello.runfiles_manifest bazel-out/k8-fastbuild/bin/hello.runfiles)\r\nSUBCOMMAND: # //:hello [action 'Compiling hello.cc']\r\n(cd /home/dws/.cache/bazel/_bazel_dws/976b33b611d60f37e083b7bf0feab613/execroot/__main__ && \\\r\n  exec env - \\\r\n    PWD=/proc/self/cwd \\\r\n  /usr/bin/gcc -U_FORTIFY_SOURCE -fstack-protector -Wall -B/usr/bin -B/usr/bin -Wunused-but-set-parameter -Wno-free-nonheap-object -fno-omit-frame-pointer '-std=c++0x' -MD -MF bazel-out/k8-fastbuild/bin/_objs/hello/hello.pic.d '-frandom-seed=bazel-out/k8-fastbuild/bin/_objs/hello/hello.pic.o' -fPIC -iquote . -iquote bazel-out/k8-fastbuild/genfiles -iquote external/bazel_tools -iquote bazel-out/k8-fastbuild/genfiles/external/bazel_tools -isystem external/bazel_tools/tools/cpp/gcc3 -fno-canonical-system-headers -Wno-builtin-macro-redefined '-D__DATE__=\"redacted\"' '-D__TIMESTAMP__=\"redacted\"' '-D__TIME__=\"redacted\"' -c hello.cc -o bazel-out/k8-fastbuild/bin/_objs/hello/hello.pic.o)\r\nSUBCOMMAND: # //:hello [action 'Linking hello']\r\n(cd /home/dws/.cache/bazel/_bazel_dws/976b33b611d60f37e083b7bf0feab613/execroot/__main__ && \\\r\n  exec env - \\\r\n    PWD=/proc/self/cwd \\\r\n  /usr/bin/gcc -o bazel-out/k8-fastbuild/bin/hello '-fuse-ld=gold' -Wl,-no-as-needed -Wl,-z,relro,-z,now -B/usr/bin -B/usr/bin -pass-exit-codes -Wl,-S -Wl,@bazel-out/k8-fastbuild/bin/hello-2.params)\r\nTarget //:hello up-to-date:\r\n  bazel-bin/hello\r\nINFO: Elapsed time: 1.682s, Critical Path: 0.16s\r\nINFO: Build completed successfully, 6 total actions\r\n```\r\n\r\nI'll note that I first noticed this problem in the context of a much larger build system using a different compiler toolchain where program links would actually _fail_ if `PATH` was absent.  We knew that this happened on systems where people had installed a bazel package -- but we didn't know why simply installing this bazel package would make all our builds fail. Once I tracked down the source of the problem, I was able to work around it in our build system by invoking its bazel with `--nomaster_bazelrc` in order to avoid being affected by the `/etc/bazel.bazelrc` that comes with the install of a bazel package.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jmhodges": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4468", "title": "nightly debs aren't installable", "body": "If you install from a nightly build's deb ([like this one](https://ci.bazel.build/view/Bazel%20bootstrap%20and%20maintenance/job/bazel/job/nightly/195/artifact/node=linux-x86_64/variation=/bazel_-linux-x86_64.deb)), you'll get this error:\r\n\r\n```\r\ndpkg: error processing archive bazel_195-linux-x86_64.deb (--install):\r\n parsing file '/var/lib/dpkg/tmp.ci/control' near line 2 package 'bazel':\r\n error in 'Version' field string '': version string is empty\r\n```\r\n\r\n(which is a bummer because a blocker I've got was recently fixed)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4303", "title": "0.8.x and 0.9.x release series breaking rules_webtesting Go code in Travis CI", "body": "In Travis CI's linux machines (multiple different versions of them), using a 0.8.x version of bazel causes immediate test failures of any Go code using rules_webtesting's API.\r\n\r\nIt works fine on macOS and, I bet, on non-containerized Linux machines.\r\n\r\nThere is a reproduction repo available at https://github.com/jmhodges/bazel_bugs/tree/webtesting_08 (that's the webtesting_08 branch of my bazel_bugs repo). You can test it by running `bazel test //foo/...` locally vs running it in Travis CI by forking and pushing to a branch. \r\n\r\nThe 0.7.0, 0.6.1, and 0.6.0 verisons of bazel all work correctly.\r\n\r\nMore discussion happened on [rules_webtesting's ticket](https://github.com/bazelbuild/rules_webtesting/issues/191), but it seems probable that it's a bazel issue, proper.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jcayzac": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4467", "title": "[Feature][Android] Support for consumer proguard files in AARs", "body": "Following [this comment](https://github.com/bazelbuild/bazel/issues/348#issuecomment-358003363) I'd like to request support for adding consumer proguard files when creating AARs.\r\n\r\nCurrently there's no obvious way for packaging a consumer proguard file, something that's standard when using gradle and AGP to build a library.\r\n\r\n[Anatomy of an AAR file](https://developer.android.com/studio/projects/android-library.html#aar-contents) shows the `proguard.txt` packaged inside the AAR, to be eventually merged with the proguard configuration of the consuming application.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "spinorx": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4466", "title": "iOS static framework does not build with bazel anymore", "body": "### Description of the problem / feature request:\r\niOS static framework does not build with bazel 0.9.0 (and 0.8.0).  Used to work fine with 0.7.0\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n```\r\n$ git clone git@github.com:spinorx/bazel_ios_test.git\r\n$ cd bazel_ios_test\r\n$ bazel build --config ios_dev ios_s_fx\r\n```\r\nShows:\r\n```\r\n[param@param-mac:~/bazel_ios_test]$ bazel build --config ios_dev ios_s_fx\r\nERROR: /Users/param/bazel_ios_test/BUILD:27:1: in ios_static_framework rule //:ios_s_fx:\r\nTraceback (most recent call last):\r\n\tFile \"/Users/param/bazel_ios_test/BUILD\", line 27\r\n\t\tios_static_framework(name = 'ios_s_fx')\r\n\tFile \"/private/var/tmp/_bazel_param/6e7baaf7d936c10284a3fa8c52020240/external/build_bazel_rules_apple/apple/bundling/ios_rules.bzl\", line 336, in _ios_static_framework_impl\r\n\t\tbundler.run(ctx, \"IosStaticFrameworkArchive\", \"i...\", <7 more arguments>)\r\n\tFile \"/private/var/tmp/_bazel_param/6e7baaf7d936c10284a3fa8c52020240/external/build_bazel_rules_apple/apple/bundling/bundler.bzl\", line 953, in bundler.run\r\n\t\tapple_common.new_objc_provider(**objc_provider_args)\r\nillegal argument in call to new_objc_provider: Argument framework_dir not a recognized key, 'providers', or 'direct_dep_providers'.\r\nERROR: Analysis of target '//:ios_s_fx' failed; build aborted: Analysis of target '//:ios_s_fx' failed; build aborted\r\nINFO: Elapsed time: 0.213s\r\nFAILED: Build did NOT complete successfully (1 packages loaded)\r\n[param@param-mac:~/bazel_ios_test]$\r\n```\r\n\r\n### What operating system are you running Bazel on?\r\nRunning on Mac 10.13 and Xcode 9.2.  More details:\r\n```\r\n[param@param-mac:~/bazel_ios_test]$ system_profiler SPSoftwareDataType\r\nSoftware:\r\n\r\n    System Software Overview:\r\n\r\n      System Version: macOS 10.13.2 (17C88)\r\n      Kernel Version: Darwin 17.3.0\r\n      Boot Volume: Macintosh HD\r\n      Boot Mode: Normal\r\n      Computer Name: param-mac\r\n      User Name: Param Reddy (param)\r\n      Secure Virtual Memory: Enabled\r\n      System Integrity Protection: Enabled\r\n      Time since boot: 37 days 18:16\r\n\r\n[param@param-mac:~/bazel_ios_test]$ /usr/bin/xcodebuild -version\r\nXcode 9.2\r\nBuild version 9C40b\r\n[param@param-mac:~/bazel_ios_test]$\r\n```\r\n\r\n### What's the output of `bazel info release`?\r\n\r\n```\r\n[param@param-mac:~/bazel_ios_test]$ bazel info release\r\nrelease 0.9.0-homebrew\r\n[param@param-mac:~/bazel_ios_test]$\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3924", "title": "Can not build android_library with embedded so file (using ndk)", "body": "### If possible, provide a minimal example to reproduce the problem:\r\nCreated a simple android_library which encloses java and needed so file at:  https://github.com/spinorx/bazel_android_test\r\n\r\ndoing:  bazel build --config android :and_lib -s\r\n\r\nGetting compilation error:\r\n```\r\nERROR: /Users/param/bazel_android_test/BUILD:3:1: C++ compilation of rule '//:liband_cpp.so' failed (Exit 1).\r\nclang: error: unknown argument: '-m<platform_for_version_min>-version-min=11.0'\r\nTarget //:and_lib failed to build\r\n```\r\n\r\nI am trying to get android ndk to build so file using libc++ using bazel.\r\n(Note that I has to push include under libcxx for libc++ because of: \r\nhttps://github.com/bazelbuild/bazel/issues/3923)\r\n\r\n### Environment info\r\n* Operating System:\r\nMac OS  10.12.6\r\n\r\n* Bazel version (output of `bazel info release`):\r\nrelease 0.6.1-homebrew\r\n\r\n###  Have you found anything relevant by searching the web?\r\n(e.g. [StackOverflow answers](http://stackoverflow.com/questions/tagged/bazel),\r\n[GitHub issues](https://github.com/bazelbuild/bazel/issues),\r\nemail threads on the [`bazel-discuss`](https://groups.google.com/forum/#!forum/bazel-discuss) Google group)\r\n\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n(If they are large, please upload as attachment or provide link).", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3923", "title": "Android NDK libc++ include paths incorrect", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\n\r\nI am using bazel with ndk android-ndk-r14b.  The libc++ includes are at cxx-stl/llvm-libc++/include directly:\r\n```\r\n[param@param-mac:~/android-ndk-r14b/sources/cxx-stl]$ ls\r\ngabi++/         gnu-libstdc++/  llvm-libc++/    llvm-libc++abi/ stlport/        system/\r\n[param@param-mac:~/android-ndk-r14b/sources/cxx-stl]$ ls llvm-libc++\r\nAndroid.bp               CREDITS.TXT              README.version           docs/                    lit.site.cfg             src/                     www/\r\nAndroid.mk               LICENSE.TXT              TODO.TXT                 include/                 ndk-test.sh*             test/\r\nApplication.mk           MODULE_LICENSE_BSD_LIKE  buildcmds/               lib/                     repo.prop                test.mk\r\nCMakeLists.txt           NOTICE                   cmake/                   libs/                    run-tests.py             utils/\r\n[param@param-mac:~/android-ndk-r14b/sources/cxx-stl]$ ls llvm-libc++abi/\r\nAndroid.bp               CMakeLists.txt           MODULE_LICENSE_BSD_LIKE  cmake/                   repo.prop                www/\r\nAndroid.mk               CREDITS.TXT              NOTICE                   include/                 src/\r\nApplication.mk           LICENSE.TXT              README.version           lib/                     test/\r\n[param@param-mac:~/android-ndk-r14b/sources/cxx-stl]$\r\n```\r\n\r\nHowever bazel adds extra libcxx (from external/android_ndk/BUILD.bazel):\r\n```\r\n  unfiltered_cxx_flag: \"-isystem\"\r\n  unfiltered_cxx_flag: \"external/android_ndk/ndk/sources/cxx-stl/llvm-libc++/libcxx/include\"\r\n  unfiltered_cxx_flag: \"-isystem\"\r\n  unfiltered_cxx_flag: \"external/android_ndk/ndk/sources/cxx-stl/llvm-libc++abi/libcxxabi/include\"\r\n```\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\n\r\n### Environment info\r\n* Operating System:\r\nMac OSX\r\n\r\n* Bazel version (output of `bazel info release`):\r\n```\r\n[param@param-mac:~/vircorX]$ bazel info release\r\nrelease 0.6.1-homebrew\r\n```\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nSee also:  https://github.com/android-ndk/ndk/issues/252\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n(If they are large, please upload as attachment or provide link).\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jfroy": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4464", "title": "Git hash stamping for an external repository", "body": "### Description of the problem / feature request:\r\n\r\nI need to get the git hash from a git_repository define in a WORKSPACE. Using a workspace_status_command option as described in #216 does not work, since the *top level* workspace ends up providing the git hash, not the external repository.\r\n\r\n### Feature requests: what underlying problem are you trying to solve with this feature?\r\n\r\nI need to incorporate the git hash in the build because it is used as a cache validation key. It must be a github git hash because we need to be inter-operable with caches produced on other machines. The project's normal cmake build system has no problem handling this.\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\nWrite a genrule that consumes bazel-out/volatile-status.txt in Workspace A, import Workspace A in Workspace B using git_repository, run `bazel build --workspace_status_command=` with the example workspace status command (https://github.com/bazelbuild/bazel/blob/master/tools/buildstamp/get_workspace_status). The genrule will see the git hash of Workspace B, not Workspace A, even of the genrule is in Workspace A.\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nNo LSB modules are available.\r\nDistributor ID:\tDebian\r\nDescription:\tDebian GNU/Linux rodete\r\nRelease:\trodete\r\nCodename:\trodete\r\n\r\n### What's the output of `bazel info release`?\r\n\r\nrelease 0.9.0\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nMostly what is in #216, which works OK for a single workspace but not at all when using external workspaces.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aehlig": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4462", "title": "External repo: redo the actual fetching only if predicted hash changed (or is missing)", "body": "### Description of the problem / feature request:\r\n\r\nFeature request: in external repositories, separate the actual network access from local transformations (like patching, #3395). Also, a reaccessing the network is not necessary, if the predicted hash of the fetched artifact has not changed, same if a given commit hash in an external git repo has not changed.\r\nWhile currently mitigated by our http cache, avoiding unnecessary network access seems generally useful.\r\n\r\n### Feature requests: what underlying problem are you trying to solve with this feature?\r\n\r\nUnnecessary network traffic, especially if large repositories have to be fetched.\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4154", "title": "//src/test/shell/integration:progress_reporting_test depends on unsupported side channel", "body": "The test case [`test_failed_actions_with_keep_going`]( https://github.com/bazelbuild/bazel/blob/7f72af113960386006598150e880a79b5f0bc2e1/src/test/shell/integration/progress_reporting_test.sh#L249) of `//src/test/shell/integration:progress_reporting_test` depends on actions being able to (directly) communicate over the file system and not only via declared their declared inputs/outputs. In other words, the test asserts that bazel's default way of executing actions is not as hermetic as the \"fast, correct\" slogan suggests. While it is unlikely that the hermiticity of the default strategy will be improved in the near future, it still seems undesirable to have a test effectively asserting the presence of a bug.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/4c8fa1bab507fa7f0a1cbeac0724751d9b574f89", "message": "External repositories: support plain tar archives\n\nCurrently, we insist on all archives we download being compressed. But\ntechnically, there is no reason compression is needed; handling plain\ntar archives is no more complicated. So add that option as well; at the\nvery least, it makes testing more easy.\n\nChange-Id: I1fddc95d5c80d195eb900ab74bf6403484f61da7\nPiperOrigin-RevId: 182777193"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/76eb2a4ef5747ef881f4a3d2d1e3338e4ef8913f", "message": "Partially revert fca3d391161ae4c92cf289a897db2a1c69a9b334\n\n...as it breaks shell tests\n\nChange-Id: I191ec7c0f36832ff064af0b756a8c8fb41eb2a87\nPiperOrigin-RevId: 182509548"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/34e2193b3cfe32723f950332bd865503173b65b3", "message": "http_archive: test patch files are tracked\n\nAdd a test verifying that changes to the patch file trigger a\na rebuild of the external repository.\n\nEnsures soundness of the fix for Issue #3395.\n\nChange-Id: Ida3823b7cddbe3bb54f0f0e24074e3854055f6e1\nPiperOrigin-RevId: 182226112"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/8b459d77bca8cbff5edd8a4e1715aa6870f88eff", "message": "Demontrate that http_archive can pick up a missing build file\n\nThe http_archive command from @bazel_tools can add a BUILD file to an\nexternal repository. Add a test ensuring that changes to that file, in\nparticular the addition of a previously missing file, are tracked\nproperly.\n\nProvides a workaround for #3637.\n\nChange-Id: Ibd6a3336834686a13eaa1f9ce7d4c6223410b222\nPiperOrigin-RevId: 182221653"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/0350ad30e80d5a5eb33362e304be7e2235d05114", "message": "http_archive: support programmatic patching\n\nSupport applying a sequence of commands to an http_archive,\nafter the patch files are applied. In this way, tasks like\nshebang-fixes can easily be added.\n\nFixes #3395.\n\nChange-Id: Ifdad584a852efd425c436d57ef71a0d681488629\nPiperOrigin-RevId: 182037265"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/7831d8c9be23d419a64dfbc48e09fa175e1f1536", "message": "Support patches in http_archive\n\nSupport applying a sequence of patches for external repositories\nimported via http_archive. (Note that we only support the version\nfrom @bazel_tools, not the deprecated native rules.)\n\nWorks towards #3395.\n\nChange-Id: I96c746acc04790b051eb686856c04a3ff3c90059\nPiperOrigin-RevId: 181975322"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/6e7c208a3c83591e3fd26e7f0a2898d6b81e76b5", "message": "Honor repository when checking for conflicts\n\nWhen checking for conflicts between an input and an output file\nof a rule, honor the repository the label belongs to. It is a\nperfectly valid use case to create one file from an equally named\n(including path) in a different repository.\n\nChange-Id: I3aaa99eaa0c473ec31c5cc77beacf657c41ef56d\nPiperOrigin-RevId: 181761940"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/28221ff520ba753f8ea38dfe14fc90fff0605444", "message": "BuildEventStreamer: ingore noop-flush()s\n\nThe BuildEventStreamer supports a method flush() to report any pending\nstdout/stderr in the BEP; in particular, all internal buffers of for\nthose streams are cleared (and the memory can be reclaimed). If there\nare no pending bytes in those streams, however, there is no need to\ngenerate an additional progress event to get rid of the buffered stream\ncontents. Make flush() a no-op in this case.\n\nChange-Id: Ia8cf8733fdeaf4d1a50488736d2637862e7cb4f5\nPiperOrigin-RevId: 181590982"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/ad0d7e946cd2ad05ec89c78a2f1959ffbbfa12a8", "message": "BEP: make stdout/stderr buffering configurable\n\nFor different applications, different size of buffered stdout/stderr might be\nacceptable; essentially it is a trade off between latency and number of messages\ngenerated. Put this trade off into the control of the user by adding an appropriate\nflag.\n\nChange-Id: I8fb4d19a336205fa28d01340f2f0b2be9b4a24f3\nPiperOrigin-RevId: 181570242"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/cc386e62a2c585f7e0ef87ed5440c9abd757d647", "message": "BEP: add a separate id for visibility errors\n\nA build might fail because of a visibility violation that does\nnot happen at a top-level target. To avoid confusion, add a separate\nnamespace for configured targets that are just mentioned to report\nthe details of an error.\n\nChange-Id: I86587f7489500f1d888bae6ce3d6f4bd79ea1609\nPiperOrigin-RevId: 181448003"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/ac9caeb6011ad6c4d9ddf0db2b9d2bf745799138", "message": "Temporarily disable FreeBSD-12\n\n...until the bugs in the google_compute_engine scripts are fixed\nupstream.\n\nChange-Id: I3fcced5ad82735270c991f5a3595b34da60de544\nPiperOrigin-RevId: 181158629"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93008483", "body": "How is this change related to supporting power? Also, are we sure the case `defined(__linux)` was wrong in the first place and is not needed any more?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93008483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93214920", "body": "Thanks for checking. LGTM.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93214920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/124139318", "body": "`procstat_getpathname` has the same semantics with respect truncation as `strncpy`. In particular, it does not guarantee null-termination of the string. So call it with `PATH_MAX - 1` and manually set the null character.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/124139318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/124211540", "body": "Ah, that is `PATH_MAX` from the system limits. Then it doesn't matter indeed. I was only looking at the general contract of `procstat_getprocs` and the fact that, at least in some cases, it literally builds on `strncpy` (see https://github.com/freebsd/freebsd/blob/master/lib/libprocstat/libprocstat.c#L2240,  called 12 lines below).", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/124211540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "vmax": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4461", "title": "Android: allow java_proto_library as dependency for android_binary", "body": "### Description of the problem / feature request:\r\n\r\nIt's impossible to utilize full protobuf library on Android device if build is done by `bazel`\r\n\r\n### Feature requests: what underlying problem are you trying to solve with this feature?\r\n\r\nI need to include full runtime library together with `protobuf-java-util` unless there's a way to parse `json` in `lite` version of which I don't know.\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\nCreate proto file, add it as `java_proto_library`, add that library as dependency to `android_binary`\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nmacOS 10.13.2\r\n\r\n### What's the output of `bazel info release`?\r\n\r\nrelease 0.9.0-homebrew\r\n\r\n### Any other information, logs, or outputs that you want to share?\r\n\r\nTo allow this, `\"java_proto_library\"` should be added [here](https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/rules/android/AndroidRuleClasses.java#L318). ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4381", "title": "Android: support font in XML", "body": "### Description of the problem / feature request / question:\r\n\r\nBazel does not support newly-added Android feature [Fonts in XML](https://developer.android.com/guide/topics/ui/look-and-feel/fonts-in-xml.html)\r\n\r\n\r\n### Environment info\r\n* Operating System:\r\nmacOS 10.13.2\r\n\r\n* Bazel version (output of `bazel info release`):\r\nrelease 0.9.0-homebrew\r\n\r\n### Log\r\n```\r\n$ bazel build --verbose_failures :android\r\nERROR: app/BUILD:11:22: in resource_files attribute of android_binary rule //app:android: 'app/src/main/res/font/heebo_black.ttf' is not in the expected resource directory structure of <resource directory>/{anim,animator,color,drawable,interpolator,layout,menu,mipmap,raw,transition,values,xml}/<file>\r\nERROR: Analysis of target '//app:android' failed; build aborted: Analysis of target '//app:android' failed; build aborted\r\nINFO: Elapsed time: 0.296s\r\nFAILED: Build did NOT complete successfully (1 packages loaded)\r\n```", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "devnev": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4457", "title": "Can't query packages where ignoring conditions creates cycles.", "body": "### Description of the problem / feature request:\r\n\r\nA vendored dependency has two packages `A` and `B` which use `select()`s in their dependencies. Depending on the target platform, they produce either an A->B dependency or a B->A dependency. Querying for deps breaks on this package.\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\nHopefully description is enough as actually creating platform-dependend builds seems quite complicated...\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nUbuntu 16.04.3\r\n\r\n### What's the output of `bazel info release`?\r\n\r\nrelease 0.9.0\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nIssue #967 is a discussion of the same cause but with a different use-case. \r\n\r\n### Any other information, logs, or outputs that you want to share?\r\n\r\nThe dependency that orignially caused this was https://github.com/shirou/gopsutil, where subpackages \"process\" and \"host\" have the quasi-cycle.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sergiocampama": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4452", "title": "Loading bazel through PATH does not work when having a bazel.bazelrc file next to it", "body": "### Description of the problem / feature request:\r\n\r\nImagine for example that we have the following folder structure:\r\n\r\n```\r\n~/bin/bazel\r\n~/bin/bazel.bazelrc\r\n```\r\n\r\nWe then also have the following configuration for PATH, making it easy to call bazel from any folder.\r\n\r\n```\r\nPATH=\"~/bin:$PATH\"\r\n```\r\n\r\nNow we find ourselves in `~/Dev/SecretProject`. If I call `bazel` from this folder, it will be found because of the `PATH` configuration. But the `bazel.bazelrc` will not be loaded. This is because [this code](https://github.com/bazelbuild/bazel/blob/master/src/main/cpp/workspace_layout.cc#L73) assumes that `bazel` resides in `$CWD`, so it prepends `$CWD` to the invocation name (or `$0` in bash) and appends `basename($0) + \"rc\"`. So it will effectively load `~/Dev/SecretProject/bazel.bazelrc`. \r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\nFrom within the bazel github repository:\r\n\r\n```\r\n$ bazel build //src:bazel\r\n$ mkdir -p ~/bin\r\n$ cp bazel-bin/src/bazel ~/bin/bazel\r\n$ # Add a broken bazel.bazelrc file next to bazel.\r\n$ echo \"build --nonexistantflag\" > ~/bin/bazel.bazelrc \r\n# This command should fail, as bazel should load ~/bin/bazel.bazelrc\r\n$ PATH=\"$HOME/bin:$PATH\" bazel build //src:bazel\r\n# This command does fail, as we're invoking bazel directly through a relative link.\r\n$ ~/bin/bazel build //src:bazel\r\n```\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nmacOS High Sierra 10.13.2\r\n\r\n### What's the output of `bazel info release`?\r\n\r\nThis is at HEAD\r\n\r\n### If `bazel info release` returns \"development version\" or \"(@non-git)\", tell us how you built Bazel.\r\n\r\nBootstrapped with bazel 0.9.0 homebrew\r\n\r\n### What's the output of `git remote get-url origin ; git rev-parse master ; git rev-parse HEAD` ?\r\n\r\n07c4e3648e3b7a521b6706ffc5cbcdeca1ebf4e1\r\n455f005ed742ded601065d8db80e24a1d8d247d8\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nNope\r\n\r\n### Any other information, logs, or outputs that you want to share?\r\n\r\nNope\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4312", "title": "The provided CROSSTOOL does not include proper support for dSYM generation for apple_binary", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\n\r\nWhen invoking `bazel build examples/ios/HelloWorldSwift  --apple_generate_dsym` on the rules_apple repository, the Linking action fails with the following message:\r\n\r\n```\r\nERROR: /Users/kaipi/Development/Github/rules_apple/examples/ios/HelloWorldSwift/BUILD:18:1: output 'examples/ios/HelloWorldSwift/HelloWorldSwift.apple_binary.app.dSYM.temp.zip' was not created\r\nERROR: /Users/kaipi/Development/Github/rules_apple/examples/ios/HelloWorldSwift/BUILD:18:1: not all outputs were created or valid\r\n```\r\n\r\nI traced this to the provided crosstool missing the proper `DSYM_HINT_DSYM_PATH`, `DSYM_HINT_DSYM_BUNDLE_ZIP` and `DSYM_HINT_LINKED_BINARY` configurations for the `generate_dsym_file` feature.\r\n\r\nOriginal issue: https://github.com/bazelbuild/tulsi/issues/38\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\nCheck out the https://github.com/bazelbuild/rules_apple and run the command above.\r\n\r\n### Environment info\r\n* Operating System:\r\n\r\nmacOS 10.13\r\n\r\n* Bazel version (output of `bazel info release`):\r\n\r\nrelease 0.8.1-homebrew\r\n\r\n* If `bazel info release` returns \"development version\" or \"(@non-git)\", please tell us what source tree you compiled Bazel from; git commit hash is appreciated (`git rev-parse HEAD`):\r\n\r\n\r\n###  Have you found anything relevant by searching the web?\r\n(e.g. [StackOverflow answers](http://stackoverflow.com/questions/tagged/bazel),\r\n[GitHub issues](https://github.com/bazelbuild/bazel/issues),\r\nemail threads on the [`bazel-discuss`](https://groups.google.com/forum/#!forum/bazel-discuss) Google group)\r\n\r\nN/A\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n(If they are large, please upload as attachment or provide link).\r\n\r\nN/A", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4451", "title": "Provide a bit more information on the expected location of bazelrc files.", "body": "The docs failed to mention the expected name of the file next to the binary. Also missing was the information that these files do not override each other; they are always loaded if present.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "borisbrodski": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4450", "title": "\"IOException: Illegal seek\" during build v0.9.0 on Android aarch64", "body": "### Description of the problem / feature request:\r\n\r\nCan't compile bazel on Android aarch64 (Samsung Galaxy Note 8) under Termux/ArchLinux.\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug?\r\n\r\nOn an Android device (Note 8) install:\r\n\r\n* Termux App\r\n* Unter Termux install ArchLinux (https://wiki.termux.com/wiki/Arch)\r\n* ArchLinux: Install with pacman -S: wget, jdk8-openjdk, zlib\r\n* Download bazel-0.9.0-dest.zip, extract it\r\n* Add \"-J-Xmx1G\" to the call to the javac in bootstrap to avoid OutOfMemory: heap\r\n* ./compile.sh\r\n* Wait for 2-3 hours\r\n* Scroll way back to find exception attached below\r\n\r\n### What operating system are you running Bazel on?\r\n\r\n    $ uname -a\r\n    Linux localhost 4.4.13-12472670 #1 SMP PREEMPT Thu Nov 30 11:41:23 KST 2017 aarch64 GNU/Linux\r\n\r\n### What's the output of `bazel info release`?\r\n\r\nUnknown, bazel can't be built\r\n\r\n### If `bazel info release` returns \"development version\" or \"(@non-git)\", tell us how you built Bazel.\r\n\r\nI'm trying to compile an official release.\r\n\r\n### What's the output of `git remote get-url origin ; git rev-parse master ; git rev-parse HEAD` ?\r\n\r\nNo git repository being used\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nAbsolutely nothing\r\n\r\n### Any other information, logs, or outputs that you want to share?\r\n\r\nThe relevant part of the log\r\n\r\n```\r\nBuilding deploy jar .../buildjar/JavaBuilder_deploy.jar;\r\n[1,619 / 1,789] 6 actions running\r\nBuilding deploy jar .../singlejar/bazel-singlejar_deploy.jar; 7s local\r\n.../java/com/google/devtools/build/android:android_builder_lib; 0s worker\r\nBuilding deploy jar .../buildjar/JavaBuilder_deploy.jar;ERROR: /root/bazel-0.9.0/src/main/java/com/google/devtools/build/lib/vfs/BUILD:30:1: Building src/main/java/com/google/devtools/build/lib/vfs/libvfs.jar (22 source files) and running annotation processors (OptionProcessor) failed: Worker process did not return a WorkResponse:\r\n-\r\n---8<---8<--- Start of log, file at /tmp/bazel_arrsxVP9/out/bazel-workers/worker-2-Javac.log ---8<---8<---\r\nOpenJDK 64-Bit Zero VM warning: TieredCompilation is disabled in this release.\r\njava.io.IOException: Illegal seek\r\n         at java.io.FileInputStream.available(Native Method)\r\n         at java.io.BufferedInputStream.read(BufferedInputStream.java:353)\r\n         at java.io.FilterInputStream.read(FilterInputStream.java:133)\r\n         at com.google.protobuf.AbstractMessageLite$Builder$LimitedInputStream.read(AbstractMessageLite.java:290)\r\n         at com.google.protobuf.CodedInputStream$StreamDecoder.tryRefillBuffer(CodedInputStream.java:2777)\r\n         at com.google.protobuf.CodedInputStream$StreamDecoder.refillBuffer(CodedInputStream.java:2723)\r\n         at com.google.protobuf.CodedInputStream$StreamDecoder.readRawByte(CodedInputStream.java:2803)\r\n         at com.google.protobuf.CodedInputStream$StreamDecoder.readRawVarint64SlowPath(CodedInputStream.java:2594)\r\n         at com.google.protobuf.CodedInputStream$StreamDecoder.readRawVarint32(CodedInputStream.java:2488)\r\n         at com.google.protobuf.CodedInputStream$StreamDecoder.readStringRequireUtf8(CodedInputStream.java:2268)\r\n         at com.google.devtools.build.lib.worker.WorkerProtocol$Input.<init>(WorkerProtocol.java:105)\r\n         at com.google.devtools.build.lib.worker.WorkerProtocol$Input.<init>(WorkerProtocol.java:62)\r\n         at com.google.devtools.build.lib.worker.WorkerProtocol$Input$1.parsePartialFrom(WorkerProtocol.java:682)\r\n         at com.google.devtools.build.lib.worker.WorkerProtocol$Input$1.parsePartialFrom(WorkerProtocol.java:677)\r\n         at com.google.protobuf.CodedInputStream$StreamDecoder.readMessage(CodedInputStream.java:2362)\r\n         at com.google.devtools.build.lib.worker.WorkerProtocol$WorkRequest.<init>(WorkerProtocol.java:837)\r\n         at com.google.devtools.build.lib.worker.WorkerProtocol$WorkRequest.<init>(WorkerProtocol.java:780)\r\n         at com.google.devtools.build.lib.worker.WorkerProtocol$WorkRequest$1.parsePartialFrom(WorkerProtocol.java:1773)\r\n         com.google.devtools.build.lib.worker.WorkerProtocol$WorkRequest$1.parsePartialFrom(WorkerProtocol.java:1768)\r\n         com.google.protobuf.AbstractParser.parsePartialFrom(AbstractParser.java:221)\r\n         at com.google.protobuf.AbstractParser.parsePartialDelimitedFrom(AbstractParser.java:262)\r\n         at com.google.protobuf.AbstractParser.parseDelimitedFrom(AbstractParser.java:275)\r\n         at com.google.protobuf.AbstractParser.parseDelimitedFrom(AbstractParser.java:280)\r\n         at com.google.protobuf.AbstractParser.parseDelimitedFrom(AbstractParser.java:49)\r\n```", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Utsav2": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4448", "title": "Exception when trying to test in a folder named external", "body": "> ATTENTION! Please read and follow:\r\n> - if this is a _question_ about how to build / test / query / deploy using Bazel, ask it on StackOverflow instead: https://stackoverflow.com/questions/tagged/bazel\r\n> - if this is a _discussion starter_, send it to bazel-discuss@googlegroups.com\r\n> - if this is a _bug_ or _feature request_, fill the form below as best as you can.\r\n\r\n### Description of the problem / feature request:\r\n\r\nException from bazel\r\n\r\n```\r\n(16:22:50) FAILED: Build did NOT complete successfully (0 packages loaded)\r\njava.lang.RuntimeException: Unrecoverable error while evaluating node 'external/...' (requested by nodes '[external/...] DETERMINE_TESTScom.google.devtools.build.lib.pkgcache.TestFilter@e17a1')\r\n    at com.google.devtools.build.skyframe.AbstractParallelEvaluator$Evaluate.run(AbstractParallelEvaluator.java:414)\r\n    at com.google.devtools.build.lib.concurrent.AbstractQueueVisitor$WrappedRunnable.run(AbstractQueueVisitor.java:352)\r\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n    at java.lang.Thread.run(Thread.java:748)\r\nCaused by: java.lang.IllegalArgumentException: No such attribute tags in maven_jar rule //external:antlr_antlr\r\n    at com.google.devtools.build.lib.packages.AbstractAttributeMapper.getIndexWithTypeCheck(AbstractAttributeMapper.java:251)\r\n    at com.google.devtools.build.lib.packages.AbstractAttributeMapper.get(AbstractAttributeMapper.java:58)\r\n    at com.google.devtools.build.lib.packages.NonconfigurableAttributeMapper.get(NonconfigurableAttributeMapper.java:45)\r\n    at com.google.devtools.build.lib.packages.TargetUtils.hasConstraint(TargetUtils.java:201)\r\n    at com.google.devtools.build.lib.packages.TargetUtils.hasManualTag(TargetUtils.java:81)\r\n    at com.google.devtools.build.lib.pkgcache.FilteringPolicies$FilterManual.shouldRetain(FilteringPolicies.java:73)\r\n    at com.google.devtools.build.lib.pkgcache.FilteringPolicies$AndFilteringPolicy.shouldRetain(FilteringPolicies.java:105)\r\n    at com.google.devtools.build.lib.skyframe.RecursivePackageProviderBackedTargetPatternResolver$3.call(RecursivePackageProviderBackedTargetPatternResolver.java:324)\r\n    at com.google.devtools.build.lib.skyframe.RecursivePackageProviderBackedTargetPatternResolver$3.call(RecursivePackageProviderBackedTargetPatternResolver.java:309)\r\n    at com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask.runInterruptibly(TrustedListenableFutureTask.java:124)\r\n    at com.google.common.util.concurrent.InterruptibleTask.run(InterruptibleTask.java:57)\r\n    at com.google.common.util.concurrent.TrustedListenableFutureTask.run(TrustedListenableFutureTask.java:77)\r\n    at com.google.common.util.concurrent.MoreExecutors$DirectExecutorService.execute(MoreExecutors.java:260)\r\n    at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:134)\r\n    at com.google.common.util.concurrent.AbstractListeningExecutorService.submit(AbstractListeningExecutorService.java:66)\r\n    at com.google.devtools.build.lib.skyframe.RecursivePackageProviderBackedTargetPatternResolver.findTargetsBeneathDirectoryAsyncImpl(RecursivePackageProviderBackedTargetPatternResolver.java:308)\r\n    at com.google.devtools.build.lib.skyframe.RecursivePackageProviderBackedTargetPatternResolver.findTargetsBeneathDirectory(RecursivePackageProviderBackedTargetPatternResolver.java:225)\r\n    at com.google.devtools.build.lib.cmdline.TargetPattern$TargetsBelowDirectory.eval(TargetPattern.java:594)\r\n    at com.google.devtools.build.lib.skyframe.TargetPatternFunction.compute(TargetPatternFunction.java:72)\r\n    at com.google.devtools.build.skyframe.AbstractParallelEvaluator$Evaluate.run(AbstractParallelEvaluator.java:340)\r\n    ... 4 more\r\n```\r\n\r\n### Feature requests: what underlying problem are you trying to solve with this feature?\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\nmkdir external\r\nbazel test external/...\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nUbuntu\r\n\r\n### What's the output of `bazel info release`?\r\n\r\ndevelopment\r\n\r\n### If `bazel info release` returns \"development version\" or \"(@non-git)\", tell us how you built Bazel.\r\n\r\nbuilt bazel at c69dbf8ed\r\n\r\n### What's the output of `git remote get-url origin ; git rev-parse master ; git rev-parse HEAD` ?\r\n\r\nhttps://github.com/bazelbuild/bazel.git\r\nc69dbf8ed4893066d0474f87c0a8ddae00e4ee58\r\nc69dbf8ed4893066d0474f87c0a8ddae00e4ee58\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nno\r\n\r\n>\r\n> Places to look:\r\n> - StackOverflow: http://stackoverflow.com/questions/tagged/bazel\r\n> - GitHub issues: https://github.com/bazelbuild/bazel/issues\r\n> - email threads on https://groups.google.com/forum/#!forum/bazel-discuss\r\n\r\n### Any other information, logs, or outputs that you want to share?\r\n\r\n> Replace these lines with your answer.\r\n>\r\n> If the files are large, upload as attachment or provide link.\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4145", "title": "Provide functionality to not retry a test on certain conditions", "body": "In certain conditions, we don't want a test to retry, even if `--flaky_test_attempts` is set. For example, we run go tests in race mode, and if a test fails due to a data race, we don't want the test to retry (and pass). \r\n\r\nIdeally, we would like to mark the test failed, due to the data race.\r\n\r\nThis could be implemented via a magic exit code.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pmuetschard": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4446", "title": "cc_proto_library should support cc_library parameters (like copts, linkopts, etc)", "body": "### Description of the problem / feature request:\r\n\r\nThe cc_proto_library is, in essence a cc_library rule and should thus honor the cc_library parameters, such as copts.\r\n\r\n### Feature requests: what underlying problem are you trying to solve with this feature?\r\n\r\nLarge protos may require the `-Wa,-mbig-obj` copt on Windows, but it is not always possible to use that flag globally (e.g. if also compiling go code).\r\n\r\nThere are other reason why people may want to control the underlaying cc_library rule, of course.\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nLinux, OSX, Windows\r\n\r\n### What's the output of `bazel info release`?\r\n\r\n0.9.0", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4339", "title": "CROSSTOOL is not found if the build file is called BUILD.bazel", "body": "### Description of the problem / feature request / question:\r\n\r\nFollow along with the following tutorial: https://github.com/bazelbuild/bazel/wiki/Yet-Another-CROSSTOOL-Writing-Tutorial\r\n**but** create `BUILD.bazel` files instead of `BUILD` files. \r\n\r\nEven after creating the empty CROSSTOOL file, you will still get the following error:\r\n```\r\nThe crosstool_top you specified was resolved to '//toolchain:emscripten',\r\nwhich does not contain a CROSSTOOL file.\r\n```\r\n\r\n### Environment info\r\n* Operating System:\r\nOnly tried Windows\r\n\r\n* Bazel version (output of `bazel info release`):\r\nOnly tried 0.8.1\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/5e708b99cc40f0f9bc99fd6bb962a2a3fae3bc64", "message": "Add another path to the windows_jni.dll lookup.\n\nThis is to fix building android outside of the bazel repository.\n\nTo reproduce the issue (on a Windows machine, of course):\n  1. Copy the examples/android folder from a bazel checkout to a new folder (keep the same folder structure - i.e. `<new folder>/examples/android`)\n  2. Create a `WORKSPACE` file in `<new folder>` with the `android_sdk_repository` and `android_ndk_repository` rules as described in the example README.\n  3. `bazel build examples/android/java/bazel:hello_world`\n  4. Observe the failure to locate `windows_jni.dll`\n\nCloses #4392.\n\nPiperOrigin-RevId: 181181641"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26772532", "body": "Sorry for the messed up change description. Here's what it's supposed to say:\r\n\r\nAdd the missing JNI cc files to the windows_jni.dll filegroup.\r\nWithout these, building windows_jni.dll (for the Android rules, for example) fails with:\r\n```\r\nERROR: <...>/external/bazel_tools/src/main/native/windows/BUILD:44:1: output 'external/bazel_tools/src/main/native/windows/windows_jni.ifso' was not created\r\nERROR: <...>/external/bazel_tools/src/main/native/windows/BUILD:44:1: not all outputs were created or valid\r\n```", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26772532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "excavador": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4445", "title": "Error while validating output TreeArtifact", "body": "If I use \"declary_directory\" instead of \"declare_file\" I receive following problem with symlink to system python (only under linux, under OSX everything works fine) (just local bazel, not farm)\r\n\r\nIs it expected behavior or another bug in bazel?\r\n```\r\nERROR: /home/jenkins/backend-ci/plato/BUILD.bazel:45:1: Error while validating output TreeArtifact File:[[/home/jenkins/.cache/bazel/_bazel_jenkins/cff2319697c0ff2c301458e924e0bef7/execroot/XXX]bazel-out/k8-dbg/bin]plato/tests.virtualenv : /home/jenkins/.cache/bazel/_bazel_jenkins/cff2319697c0ff2c301458e924e0bef7/execroot/XXX/bazel-out/k8-dbg/bin/plato/tests.virtualenv/lib/python3.6/config-3.6m-x86_64-linux-gnu (Operation not permitted)\r\nERROR: /home/jenkins/backend-ci/plato/BUILD.bazel:45:1: not all outputs were created or valid\r\n\r\n[jenkins@ci-slave-1:Ireland backend-ci]$ ls -al /home/jenkins/.cache/bazel/_bazel_jenkins/cff2319697c0ff2c301458e924e0bef7/execroot/XXX/bazel-out/k8-dbg/bin/plato/tests.virtualenv/lib/python3.6/\r\ntotal 44\r\ndr-xr-xr-x.  5 jenkins jenkins  4096 Jan 12 19:27 .\r\ndr-xr-xr-x.  3 jenkins jenkins    23 Jan 12 19:27 ..\r\nlrwxrwxrwx.  1 jenkins jenkins    27 Jan 12 19:27 abc.py -> /usr/lib64/python3.6/abc.py\r\nlrwxrwxrwx.  1 jenkins jenkins    30 Jan 12 19:27 base64.py -> /usr/lib64/python3.6/base64.py\r\nlrwxrwxrwx.  1 jenkins jenkins    30 Jan 12 19:27 bisect.py -> /usr/lib64/python3.6/bisect.py\r\nlrwxrwxrwx.  1 jenkins jenkins    35 Jan 12 19:27 _bootlocale.py -> /usr/lib64/python3.6/_bootlocale.py\r\nlrwxrwxrwx.  1 jenkins jenkins    30 Jan 12 19:27 codecs.py -> /usr/lib64/python3.6/codecs.py\r\nlrwxrwxrwx.  1 jenkins jenkins    32 Jan 12 19:27 collections -> /usr/lib64/python3.6/collections\r\nlrwxrwxrwx.  1 jenkins jenkins    40 Jan 12 19:27 _collections_abc.py -> /usr/lib64/python3.6/_collections_abc.py\r\nlrwxrwxrwx.  1 jenkins jenkins    49 Jan 12 19:27 config-3.6m-x86_64-linux-gnu -> /usr/lib64/python3.6/config-3.6m-x86_64-linux-gnu\r\nlrwxrwxrwx.  1 jenkins jenkins    28 Jan 12 19:27 copy.py -> /usr/lib64/python3.6/copy.py\r\nlrwxrwxrwx.  1 jenkins jenkins    31 Jan 12 19:27 copyreg.py -> /usr/lib64/python3.6/copyreg.py\r\ndrwxr-xr-x.  3 jenkins jenkins    65 Jan 12 19:27 distutils\r\nlrwxrwxrwx.  1 jenkins jenkins    37 Jan 12 19:27 _dummy_thread.py -> /usr/lib64/python3.6/_dummy_thread.py\r\nlrwxrwxrwx.  1 jenkins jenkins    30 Jan 12 19:27 encodings -> /usr/lib64/python3.6/encodings\r\nlrwxrwxrwx.  1 jenkins jenkins    28 Jan 12 19:27 enum.py -> /usr/lib64/python3.6/enum.py\r\nlrwxrwxrwx.  1 jenkins jenkins    31 Jan 12 19:27 fnmatch.py -> /usr/lib64/python3.6/fnmatch.py\r\nlrwxrwxrwx.  1 jenkins jenkins    33 Jan 12 19:27 functools.py -> /usr/lib64/python3.6/functools.py\r\nlrwxrwxrwx.  1 jenkins jenkins    34 Jan 12 19:27 __future__.py -> /usr/lib64/python3.6/__future__.py\r\nlrwxrwxrwx.  1 jenkins jenkins    35 Jan 12 19:27 genericpath.py -> /usr/lib64/python3.6/genericpath.py\r\nlrwxrwxrwx.  1 jenkins jenkins    31 Jan 12 19:27 hashlib.py -> /usr/lib64/python3.6/hashlib.py\r\nlrwxrwxrwx.  1 jenkins jenkins    29 Jan 12 19:27 heapq.py -> /usr/lib64/python3.6/heapq.py\r\nlrwxrwxrwx.  1 jenkins jenkins    28 Jan 12 19:27 hmac.py -> /usr/lib64/python3.6/hmac.py\r\nlrwxrwxrwx.  1 jenkins jenkins    30 Jan 12 19:27 importlib -> /usr/lib64/python3.6/importlib\r\nlrwxrwxrwx.  1 jenkins jenkins    27 Jan 12 19:27 imp.py -> /usr/lib64/python3.6/imp.py\r\nlrwxrwxrwx.  1 jenkins jenkins    26 Jan 12 19:27 io.py -> /usr/lib64/python3.6/io.py\r\nlrwxrwxrwx.  1 jenkins jenkins    31 Jan 12 19:27 keyword.py -> /usr/lib64/python3.6/keyword.py\r\nlrwxrwxrwx.  1 jenkins jenkins    32 Jan 12 19:27 lib-dynload -> /usr/lib64/python3.6/lib-dynload\r\nlrwxrwxrwx.  1 jenkins jenkins    33 Jan 12 19:27 linecache.py -> /usr/lib64/python3.6/linecache.py\r\nlrwxrwxrwx.  1 jenkins jenkins    30 Jan 12 19:27 locale.py -> /usr/lib64/python3.6/locale.py\r\n-rw-r--r--.  1 jenkins jenkins     0 Jan 12 19:27 no-global-site-packages.txt\r\nlrwxrwxrwx.  1 jenkins jenkins    30 Jan 12 19:27 ntpath.py -> /usr/lib64/python3.6/ntpath.py\r\nlrwxrwxrwx.  1 jenkins jenkins    32 Jan 12 19:27 operator.py -> /usr/lib64/python3.6/operator.py\r\n-rw-r--r--.  1 jenkins jenkins     4 Jan 12 19:27 orig-prefix.txt\r\nlrwxrwxrwx.  1 jenkins jenkins    26 Jan 12 19:27 os.py -> /usr/lib64/python3.6/os.py\r\nlrwxrwxrwx.  1 jenkins jenkins    33 Jan 12 19:27 posixpath.py -> /usr/lib64/python3.6/posixpath.py\r\ndrwxr-xr-x.  2 jenkins jenkins  4096 Jan 12 19:27 __pycache__\r\nlrwxrwxrwx.  1 jenkins jenkins    30 Jan 12 19:27 random.py -> /usr/lib64/python3.6/random.py\r\nlrwxrwxrwx.  1 jenkins jenkins    31 Jan 12 19:27 reprlib.py -> /usr/lib64/python3.6/reprlib.py\r\nlrwxrwxrwx.  1 jenkins jenkins    26 Jan 12 19:27 re.py -> /usr/lib64/python3.6/re.py\r\nlrwxrwxrwx.  1 jenkins jenkins    35 Jan 12 19:27 rlcompleter.py -> /usr/lib64/python3.6/rlcompleter.py\r\nlrwxrwxrwx.  1 jenkins jenkins    30 Jan 12 19:27 shutil.py -> /usr/lib64/python3.6/shutil.py\r\ndrwxr-xr-x. 66 jenkins jenkins  4096 Jan 12 19:27 site-packages\r\n-rw-r--r--.  1 jenkins jenkins 27543 Jan 12 19:27 site.py\r\nlrwxrwxrwx.  1 jenkins jenkins    35 Jan 12 19:27 sre_compile.py -> /usr/lib64/python3.6/sre_compile.py\r\nlrwxrwxrwx.  1 jenkins jenkins    37 Jan 12 19:27 sre_constants.py -> /usr/lib64/python3.6/sre_constants.py\r\nlrwxrwxrwx.  1 jenkins jenkins    33 Jan 12 19:27 sre_parse.py -> /usr/lib64/python3.6/sre_parse.py\r\nlrwxrwxrwx.  1 jenkins jenkins    28 Jan 12 19:27 stat.py -> /usr/lib64/python3.6/stat.py\r\nlrwxrwxrwx.  1 jenkins jenkins    30 Jan 12 19:27 struct.py -> /usr/lib64/python3.6/struct.py\r\nlrwxrwxrwx.  1 jenkins jenkins    31 Jan 12 19:27 tarfile.py -> /usr/lib64/python3.6/tarfile.py\r\nlrwxrwxrwx.  1 jenkins jenkins    32 Jan 12 19:27 tempfile.py -> /usr/lib64/python3.6/tempfile.py\r\nlrwxrwxrwx.  1 jenkins jenkins    32 Jan 12 19:27 tokenize.py -> /usr/lib64/python3.6/tokenize.py\r\nlrwxrwxrwx.  1 jenkins jenkins    29 Jan 12 19:27 token.py -> /usr/lib64/python3.6/token.py\r\nlrwxrwxrwx.  1 jenkins jenkins    29 Jan 12 19:27 types.py -> /usr/lib64/python3.6/types.py\r\nlrwxrwxrwx.  1 jenkins jenkins    32 Jan 12 19:27 warnings.py -> /usr/lib64/python3.6/warnings.py\r\nlrwxrwxrwx.  1 jenkins jenkins    31 Jan 12 19:27 weakref.py -> /usr/lib64/python3.6/weakref.py\r\nlrwxrwxrwx.  1 jenkins jenkins    35 Jan 12 19:27 _weakrefset.py -> /usr/lib64/python3.6/_weakrefset.py\r\n```\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nLinux CentOS 7\r\n\r\n### What's the output of `bazel info release`?\r\n\r\nrelease 0.9.0- (@non-git)\r\n\r\n### If `bazel info release` returns \"development version\" or \"(@non-git)\", tell us how you built Bazel.\r\n\r\nhttps://github.com/vbatts/copr-build-bazel/blob/master/bazel.spec\r\nadopted for 0.9.0\r\n\r\n\r\n### Additional information\r\n\r\nhttps://github.com/bazelbuild/bazel-buildfarm/issues/77", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4062", "title": "document \"build -c <...>\" option: have a short to long list correspondence somewhere", "body": "documentation about \"-c\" option missed:\r\nhttps://docs.bazel.build/versions/master/command-line-reference.html#build\r\n\r\nOption was mentointed here https://github.com/bazelbuild/rules_go/issues/993\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3983", "title": "bazel crash on native.package_name()", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\n\r\nPlease take a look https://github.com/excavador/bazel_native_package_name_crash\r\n\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\nPlease take a look https://github.com/excavador/bazel_native_package_name_crash\r\n\r\n### Environment info\r\nmacOS Sierra 10.12.6\r\n\r\n```\r\n\u279c bazel version\r\nBuild label: 0.7.0-homebrew\r\nBuild target: bazel-out/darwin_x86_64-opt/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\r\nBuild time: Thu Oct 19 09:12:48 2017 (1508404368)\r\nBuild timestamp: 1508404368\r\n```", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "EricCousineau-TRI": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4444", "title": "Add definition of \"repository\" to \"Concepts and Terminology\" page?", "body": "The terms \"package\", \"workspace\", \"repository\", \"external\", etc., can be confusing, so it's *really* nice to have the \"Concepts and Terminology\" page to distinguish those:\r\nhttps://docs.bazel.build/versions/master/build-ref.html\r\n\r\nThat being said, there does not appear to be an explicit definition of what a Bazel \"repository\" is. \r\nIt's more or less implicitly defined though `repository_rule`, `*local_repository`, etc, and there is kind of an explicit definition, constrained to \"external repository\", mentioned here:\r\nhttps://docs.bazel.build/versions/master/skylark/repository_rules.html\r\n\r\nHowever, constraining it to \"external repository\" seems a tad awkward when using a `*local_repository` (it makes technical sense in that it's consumed via `@` / `//external`, but grammatically it's confusing).\r\n\r\nWould it be possible to add a definition of \"repository\"?\r\n(An \"external repository\", or a local repository that may have its own WORKSPACE, but is *not* a workspace in that it's not the active workspace via `bazel info workspace`?)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3998", "title": "Python package is shadowed when a workspace has same name and is included as local_repository", "body": "### Description of the problem:\r\n\r\nIf a `new_local_repository` / `local_repository` is defined in such a way that a Python package shares a common name with the Bazel workspace / repository, then the intended Python package appears to be shadowed by the workspace directory due to the (potentially excessive?) sprinkling of `__init__.py` files throughout the symlink forest.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\nSee [`py_nest_repro`](https://github.com/EricCousineau-TRI/repro/tree/1e6f3e354902c6fb85ff00a0a8f683c1b7e6c7d2/bazel/py_nest_repro):\r\n* `show_issue.sh` - reproduces the issue.\r\n* `show_issue.output.txt` - example output from my system\r\n\r\nThis example has a top-level repo, `py_nest_repro`, which adds a sub-repo, `sub_example`, which has a Python package at `@sub_example//src/sub_example`, and a test `usage_test.py`, which imports `sub_example` and executes its `check()` method.\r\nThis test is also symlink'd into `py_nest_repro`, and tested against including the module from an external.\r\n\r\nThe test works when run directly inside of `sub_example`, but fails when attempting to run it from `py_nest_repro` due the shadowing issues.\r\n\r\n### Environment info\r\n* Operating System:\r\nUbuntu 16.04.2 LTS\r\n\r\n* Bazel version (output of `bazel info release`):\r\nrelease 0.6.1\r\n\r\n###  Have you found anything relevant by searching the web?\r\nNo, nothing in GitHub issues or searching online.\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n\r\nThe workaround is to avoid naming your workspace / package the same as your contained Python package (e.g. `tensorflow` may be able to get around this since the workspace name is `org_tensorflow`).\r\nHowever, this seems like it constrains the modularity of the package (since you have to be wary of your package's name and how you use those targets within your project).\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "katre": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4442", "title": "Allow users to configure the available execution platforms", "body": "Currently, the host platform is the only available execution platform during toolchain resolution. Allow users to specify additional platforms that are execution platforms, via the command line and by registering them in the WORKSPACE file.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4269", "title": "Skylark Java methods should use a JavaToolchainProvider, not a ConfiguredTarget", "body": "Currently, several methods available in the SkyLark Java API require a JavaToolchainProvider, but access it by requiring users to pass a ConfiguredTarget that provides the JavaToolchainProvider.\r\n\r\nThese methods need to be reworked to accept either form, so that these methods can continue to work when JavaToolchainProvider is accessed via the toolchain resolution process.\r\n\r\nPossible the JavaRuntimeInfo also need to be handled similarly.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3997", "title": "Occasional failures to read test.xml", "body": "Occasionally in CI we get errors such as this:\r\n```\r\nFailed to read test report file /home/ci/workspace/Global/bazel-tests-node=linux-x86_64/tests-node=linux-x86_64/src/test/shell/bazel/bazel_repository_cache_test/shard_3_of_4/test.xml\r\norg.dom4j.DocumentException: Error on line 6 of document file:///home/ci/workspace/Global/bazel-tests-node=linux-x86_64/tests-node=linux-x86_64/src/test/shell/bazel/bazel_repository_cache_test/shard_3_of_4/test.xml : An invalid XML character (Unicode: 0x18) was found in the CDATA section. Nested exception: An invalid XML character (Unicode: 0x18) was found in the CDATA section.\r\n```\r\n\r\nIt appears that the shell tests are sometimes writing invalid XML, which makes sense since they are just echoing output to a file, not using an actual XML formatter.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/65797d43f1ae31b8150d36734d3d07db3369e1c8", "message": "Add new skyfunction to load registered execution platforms\n\nPart of #4442.\n\nChange-Id: I49d6d851787727739f50348df2e2ef48392af479\nPiperOrigin-RevId: 182795733"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/0b29e64eb59c0ade10369583177591070a33f7f5", "message": "Add registration of execution platforms\n\nPart of #4442.\n\nChange-Id: I6debbf7cfdf560d2113e736176702c2cd889c0d2\nPiperOrigin-RevId: 182763864"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/b8aabe3fc5de6c1c655ea2821251c3d554de7e5b", "message": "Add required configuration fragments for platform rules.\n\nPiperOrigin-RevId: 182568806"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/1708aad76b5223c233a5f96794345fe35c071da5", "message": "Simplify the toolchain test case setup.\n\nAlso add a new appendFile method on Scratch.\n\nPiperOrigin-RevId: 182558199"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/8608df20d98873d1aecf2d6f08836d0b56f826fa", "message": "Add new flag to add additional execution platforms.\n\nPart of #4442.\n\nChange-Id: Ie263be75b85635717aa5670cf059891e644dfaee\nPiperOrigin-RevId: 182537464"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/ed90b554d05db038ff0eab5463af9ab51c2c72a7", "message": "Actually run ExternalPackageUtilTest.\n\nFixes #4443.\n\nChange-Id: I8a30823eff87457e3ef2568efbe667f29c644ed4\nPiperOrigin-RevId: 182208767"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/d90a0054b902c771a80efcbcfabde7e34db6fafd", "message": "Add toolchain_type definitions for JDK and JRE toolchains.\n\nChange-Id: I61def9d449a8b05dde4f96983b84488a71be63a4\nPiperOrigin-RevId: 181742031"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/38ba193c60c027157b55088a7aebb76ef293caf2", "message": "Have the RemoteSpawnRunner use the execution platform present in the Spawn to get the remote execution properties.\n\nFixes #4128.\n\nThis reverts commit 3ce42ef3074ee6d3ac7d9968381c8c0a51d9d38d.\n\nChange-Id: I8b9ad5099f6334c2488a22baf05d0b273e10f776\nPiperOrigin-RevId: 181550828"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/173cf8333ae5f2de9c451e445b188fa04553d1b9", "message": "Update documentation on local_repository.path.\n\nFixes #4391.\n\nPiperOrigin-RevId: 180963440"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/ec5d2edb3f6aa82f3a551f26bc7d0e97a77398ef", "message": "Fix Action subclasses so that the execution platform is properly set in\nmore cases.\n\nPart of #4128.\n\nChange-Id: Ife5e4581f91ac07931d193ed5eaa256aab3ad047\nPiperOrigin-RevId: 180826445"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/283666d7547da8e76c8a929decb14eac9c200941", "message": "Expose platform flags for documentation purposes.\n\nAlso remove experimental tag from platform and toolchain flags in docs.\n\nFixes #4372.\n\nChange-Id: I4e8f29273b52fbaabf9c97d1a7563f817601653f\nPiperOrigin-RevId: 180678722"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/19182960", "body": "Fixes #1828 .\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/19182960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/24572373", "body": "Hmm, that seems logical to me. Can you create an issue for this?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/24572373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/71152517", "body": "s/running/run/\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/71152517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/90245114", "body": "It would be handy to encode the Bazel version in this, similar to how Browser do it (but hopefully with less compatibility-related garbage).", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/90245114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93632625", "body": "I have another branch in progress to push the debian package generation into //scripts/packages/debian:, so I will move the file as part of that.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93632625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93632747", "body": "By default, _sysconfdir is \"/etc\".", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93632747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93633298", "body": "We can also install the ubuntu/debian \"rpm\" package and build this on a debian-based system, which is actually how I tested it. So a RHEL worker is needed for testing but not necessarily for building the RPM.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93633298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93633159", "body": "Right now, the changelog is empty and the version is \"devel\".\r\n\r\nHere are my next steps on this:\r\n1. Submit this PR. :)\r\n2. Write a pkg_rpm that generates the spec file, possibly from a template, instead of using a static one.\r\n3. Have two targets: bazel-devel-rpm and bazel-release-rpm. The release target will include the changelog and version from parsing the same sources of data as the debian package targets.\r\n4. Get a RHEL worker in GCE and start building RPMs during releases.\r\n\r\nI'm going to go add this list to the issue.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93633159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93634184", "body": "Not really. There's no package without the Java version. The -headless package is missing all video and audio code (which Bazel doesn't need) so it's smaller and has fewer dependencies.\r\n\r\nAnyone trying to actually build will need the -devel package, which also has javac, but that's not needed just to install.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93634184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/123001693", "body": "Is this going to pick up bazel-bin, etc? I don't think we want that.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/123001693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/123010052", "body": "The syntax allows removing directories. Can we add:\r\n- bazel-*\r\nto the directories list?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/123010052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "kwc": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4434", "title": "Bazel make_deb.py uses incorrect mode encoding for ar files", "body": "### Description of the problem / feature request:\r\n\r\nBazel produces incorrect debian packages when using `pkg_deb`. The ar archive mode flag is encoded as a string instead of an octal. String debian package readers will fail to process this file, while others will treat the invalid encoding as mode 000 instead of 644.\r\n\r\nThe bug is in\r\n\r\nhttps://github.com/bazelbuild/bazel/blob/master/tools/build_defs/pkg/make_deb.py\r\n\r\n### Feature requests: what underlying problem are you trying to solve with this feature?\r\n\r\nCorrect debian packages\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\nRun `ar -x` on any debian package produced by Bazel. The files (e.g., control.tar.gz) will have mode 000 instead of 644.\r\n\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nLinux\r\n\r\n### What's the output of `bazel info release`?\r\n\r\nrelease 0.8.1\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nNo\r\n\r\n### Any other information, logs, or outputs that you want to share?\r\n\r\nThe following patch fixes this issue:\r\n\r\n```\r\n+++ b/make_deb.py\r\n@@ -99,7 +99,7 @@ def AddArFileEntry(fileobj, filename,\r\n     str(timestamp).ljust(12),      # timestamp\r\n     str(owner_id).ljust(6),        # owner id\r\n     str(group_id).ljust(6),        # group id\r\n-    oct(mode).ljust(8),            # mode\r\n+    '{:<8o}'.format(mode),         # mode\r\n     str(len(content)).ljust(10),   # size\r\n     '\\x60\\x0a',                    # end of file entry\r\n```\r\n\r\nDemonstration of value difference:\r\n\r\n```\r\nIn [14]: oct(0o644).ljust(8).encode()\r\nOut[14]: b'0o644   '\r\n\r\nIn [15]: '{:<8o}'.format(0o644).encode()\r\nOut[15]: b'644     '\r\n```", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brendandouglas": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4432", "title": "Support supplying jdeps data via java_common.create_provider", "body": "Jdeps data is required by IDEs. It's available in the old `java` provider, but there's no way to expose it via `java_common.provider`, when created via `java_common.create_provider`\r\n\r\nSee https://github.com/bazelbuild/intellij/issues/207", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4411", "title": "--test_filter flag not implemented for cc_test test runner", "body": "Action: \"bazel test --test_filter=x -- //cc_test_target\", with a test class using the gtest framework.\r\n\r\nExpected result:\r\n--test_filter gives equivalent results to --test_arg=\"--gtest_filter=x\"\r\n\r\nActual result:\r\n--test_filter flag has no effect.\r\n\r\nManually replacing '--test_filter=x' with '--test_arg=gtest_filter=x' is the current workaround.\r\n\r\nPossibly WAI, if there's no expectation that the test runner implements 'test_filter' for gtest?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "meteorcloudy": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4420", "title": "Windows, Java launcher: remove '../' in classpath jar", "body": "\"The Java platform team advised that we shouldn't rely on the JVM supporting \"../\" in the class path, because it's possible that the JVM won't support that in the future.\" -- L\u00e1szl\u00f3\r\n\r\nWe can use junctions to avoid using ../ in classpath jar.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4378", "title": "Windows: Error: corrupt installation", "body": "I noticed this error in many places, my local machine, [Bazel CI](https://ci.bazel.io/blue/organizations/jenkins/bazel-tests/detail/bazel-tests/1606/pipeline), [Tensorflow CI](http://ci.tensorflow.org/job/tf-master-win-bzl/2189/console), \r\n```\r\nError: corrupt installation: file 'C:\\tmp/_bazel_pcloudy/install/6f94f50e4679b4d40059370500e5cb9c/_embedded_binaries/A-server.jar' modified.  Please remove 'C:\\tmp/_bazel_pcloudy/install/6f94f50e4679b4d40059370500e5cb9c' and try again.\r\n```\r\n\r\nThe interesting part is that, it happens with every old Bazel versions **in the new year**!\r\n\r\nThe file timestamps are all set to `Jan  1  2027`. \r\n```\r\npcloudy@tensorflow-jenkins-win-gpu2-slave MSYS ~/workspace/tensorflow\r\n$ ll /c/tmp/_bazel_pcloudy/install/6f94f50e4679b4d40059370500e5cb9c/_embedded_binaries\r\ntotal 44894\r\n-rw-r--r-- 1 pcloudy None 45074399 Jan  1  2027 A-server.jar\r\n-rwxr-xr-x 1 pcloudy None   257536 Jan  1  2027 build-runfiles.exe\r\ndrwxr-xr-x 1 pcloudy None        0 Oct 19 16:13 embedded_tools\r\n-rw-r--r-- 1 pcloudy None       33 Jan  1  2027 install_base_key\r\n-rw-r--r-- 1 pcloudy None        4 Jan  1  2027 java.version\r\n-rw-r--r-- 1 pcloudy None     3849 Jan  1  2027 jdk.BUILD\r\n-rwxr-xr-x 1 pcloudy None    90112 Jan  1  2027 linux-sandbox.exe\r\n-rwxr-xr-x 1 pcloudy None   257536 Jan  1  2027 process-wrapper.exe\r\n-rwxr-xr-x 1 pcloudy None   272896 Jan  1  2027 windows_jni.dll\r\n-rwxr-xr-x 1 pcloudy None      698 Jan  1  2027 xcode-locator\r\n```\r\n\r\n@laszlocsomor Do you have any idea about this? Is there anything wrong with our file invalid mechanism?\r\nFYI @mhlopko ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4149", "title": "Resolve Windows long path issue during C++ compilation", "body": "https://stackoverflow.com/questions/47412512/bazel-build-nccl-archive-nccl-could-not-resolve-label-ws2-32-lib\r\nWhen I tried to help a user build tensorflow_serving on Windows, I encountered an error `Cannot open compiler generated file: '': Invalid argument`:\r\n```\r\n  C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/amd64/cl.exe /c external/org_tensorflow/tensorflow/core/profiler/internal/advisor/internal_checker_runner_dummy.cc /Fobazel-out/msvc_x64-py3-opt/bin/external/org_tensorflow/tensorflow/core/profiler/internal/advisor/_objs/internal_checker_runner_dummy/external/org_tensorflow/tensorflow/core/profiler/internal/advisor/internal_checker_runner_dummy.o /nologo /DCOMPILER_MSVC /DNOMINMAX /D_WIN32_WINNT=0x0600 /D_CRT_SECURE_NO_DEPRECATE /D_CRT_SECURE_NO_WARNINGS /D_SILENCE_STDEXT_HASH_DEPRECATION_WARNINGS /bigobj /Zm500 /J /Gy /GF /EHsc /wd4351 /wd4291 /wd4250 /wd4996 /Iexternal/org_tensorflow /Ibazel-out/msvc_x64-py3-opt/genfiles/external/org_tensorflow /Iexternal/protobuf_archive /Ibazel-out/msvc_x64-py3-opt/genfiles/external/protobuf_archive /Iexternal/bazel_tools /Ibazel-out/msvc_x64-py3-opt/genfiles/external/bazel_tools /Iexternal/com_google_absl /Ibazel-out/msvc_x64-py3-opt/genfiles/external/com_google_absl /Iexternal/nsync /Ibazel-out/msvc_x64-py3-opt/genfiles/external/nsync /Iexternal/eigen_archive /Ibazel-out/msvc_x64-py3-opt/genfiles/external/eigen_archive /Iexternal/local_config_sycl /Ibazel-out/msvc_x64-py3-opt/genfiles/external/local_config_sycl /Iexternal/gif_archive /Ibazel-out/msvc_x64-py3-opt/genfiles/external/gif_archive /Iexternal/jpeg /Ibazel-out/msvc_x64-py3-opt/genfiles/external/jpeg /Iexternal/com_googlesource_code_re2 /Ibazel-out/msvc_x64-py3-opt/genfiles/external/com_googlesource_code_re2 /Iexternal/farmhash_archive /Ibazel-out/msvc_x64-py3-opt/genfiles/external/farmhash_archive /Iexternal/fft2d /Ibazel-out/msvc_x64-py3-opt/genfiles/external/fft2d /Iexternal/highwayhash /Ibazel-out/msvc_x64-py3-opt/genfiles/external/highwayhash /Iexternal/png_archive /Ibazel-out/msvc_x64-py3-opt/genfiles/external/png_archive /Iexternal/zlib_archive /Ibazel-out/msvc_x64-py3-opt/genfiles/external/zlib_archive /Iexternal/snappy /Ibazel-out/msvc_x64-py3-opt/genfiles/external/snappy /Iexternal/protobuf_archive/src /Ibazel-out/msvc_x64-py3-opt/genfiles/external/protobuf_archive/src /Iexternal/bazel_tools/tools/cpp/gcc3 /Iexternal/nsync/public /Ibazel-out/msvc_x64-py3-opt/genfiles/external/nsync/public /Iexternal/eigen_archive /Ibazel-out/msvc_x64-py3-opt/genfiles/external/eigen_archive /Iexternal/gif_archive/lib /Ibazel-out/msvc_x64-py3-opt/genfiles/external/gif_archive/lib /Iexternal/gif_archive/windows /Ibazel-out/msvc_x64-py3-opt/genfiles/external/gif_archive/windows /Iexternal/farmhash_archive/src /Ibazel-out/msvc_x64-py3-opt/genfiles/external/farmhash_archive/src /Iexternal/png_archive /Ibazel-out/msvc_x64-py3-opt/genfiles/external/png_archive /Iexternal/zlib_archive /Ibazel-out/msvc_x64-py3-opt/genfiles/external/zlib_archive /D__CLANG_SUPPORT_DYN_ANNOTATION__ /DEIGEN_MPL2_ONLY /DTENSORFLOW_USE_ABSL /DTF_USE_SNAPPY /showIncludes /MD /O2.\r\nC:\\tmp\\_bazel_pcloudy\\dpitg86y\\execroot\\tf_serving\\external\\org_tensorflow\\tensorflow\\core\\profiler\\internal\\advisor\\internal_checker_runner_dummy.cc : fatal error C1083: Cannot open compiler generated file: '': Invalid argument\r\n```\r\n\r\nIt turns out that the object file the compiler trying to write `C:/tmp/_bazel_pcloudy/dpitg86y/execroot/bazel-out/msvc_x64-py3-opt/bin/external/org_tensorflow/tensorflow/core/profiler/internal/advisor/_objs/internal_checker_runner_dummy/external/org_tensorflow/tensorflow/core/profiler/internal/advisor/internal_checker_runner_dummy.o` is longer than 270 characters.\r\n\r\nThis happens when I already set the output directory to a short path `C:/tmp`.\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/c924cf6f464cf24ac6ba4fb1c1d34aa2fe567e3f", "message": "Clean up Windows config_settings\n\n1.Deleted config_setting for --cpu=x64_windows_msys, because we don't build\n  Bazel with MSYS gcc anymore.\n\n2.Deleted config_setting for --cpu=x64_windows_msvc, because it uses exactly\n  the same toolchain as --cpu=x64_windows, it'll be removed in the future.\n\nThis change reduces the complexity of our BUILD files and make them less\nconfusing.\n\nChange-Id: I939831a6861413b0f745fb1be98aacd4fb780e0a\nPiperOrigin-RevId: 181751853"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/5fa8dbd9d536417cfe544114a2584dfef9785dd7", "message": "Windows, Java launcher: Use relativize paths in classpath jar\n\nFixed https://github.com/bazelbuild/bazel/issues/4408\n\nChange-Id: Id62b25e675822bbed91a448e70bdcb76e722721e\nPiperOrigin-RevId: 181591585"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/fa46927fb24de61a987f28d2c64b01cfbe0a6fcc", "message": "Clean up windows_msvc in ijar BUILD file\n\nRELNOTES: None\nPiperOrigin-RevId: 181149284"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/76bf766b5d558b5ae4a0e6981c67511cdf592ec5", "message": "Clean up windows_msvc in ijar BUILD file [third_party]\n\nChange-Id: Ic3d2331b7ccb5ca7db6b0fe83a12c7a6d1b58a9a"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/18fa042d9584f2f4bdde1233169ebe45789b988a", "message": "Clean up Windows config_settings [third_party]\n\nChange-Id: I14256e583d07ebad9a0b525917d25e5cb5f7f684"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/e9f4090c67a89247166b7c9607394b350a7c4ef6", "message": "Refactor Windows C++ toolchain selection\n\nWe used to have --cpu=x64_windows_msys for selecting msys gcc toolchain,\nthis is a misuse of --cpu flag.\n\nInstead, we should use --compiler flag to select C++ toolchain.\nFor example, --compiler=msvc-cl, --compiler=msys-gcc, --compiler=mingw-gcc\n\nAfter this change, we can use mingw gcc toolchain by following steps:\n1. In MSYS, install mingw by `pacman -S mingw-w64-x86_64-gcc`\n2. Add /mingw64:/mingw64/bin into PATH\n3. build with --compiler=mingw-gcc\n\nRelated:\nhttps://github.com/bazelbuild/rules_go/issues/736\n\nChange-Id: I4b5f77ce0698cfcafefe5d2ab17657f9c9e295d3\nPiperOrigin-RevId: 180678829"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/61dffca579074213e7489798601a9923973abd26", "message": "Enable switching def_parser's Windows target for remote execution\n\nWhen --define EXECUTOR=remote is specified in bazel command, embedded\ntools 'def_parser' will be compiled remotely from source.\n\nBecause def_parser itself is a cc_binary, if we want to compile it\nremotely, to avoid cycle dependency it cannot be a dependency of\ncc_toolchain. Therefore, we make it a dependency of cc rules.\n\nChange-Id: I77faf77238f8edd3585d0e5e5c780b14e9782a40\nPiperOrigin-RevId: 180534568"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/18623172", "body": "I made this change just to make it work in msys on Windows (python is not under /usr/bin/python in msys), but I guess we could also do what you suggest. But as you can see there is a FindPythonBinary function, the real python binary used to run the main script is not decided by this shebang. So I guess it doesn't matter that much.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/18623172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/18624268", "body": "Oh, that's because we need to add necessary directories into PYTHONPATH.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/18624268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/18627781", "body": "But when users try to run ./bazel-bin/foo/bar/bin, that doesn't work.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/18627781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/18628231", "body": "Do you mean using os.execv as well? Actually I am aware of this problem. But if we do so, we are not able to remove the temporary runfiles tree.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/18628231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20817522", "body": "Thanks! I'll fix this.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20817522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20856442", "body": "This logic should not be removed.\r\nSee https://github.com/bazelbuild/bazel/issues/2242", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20856442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/89273979", "body": "Can we change the id to `python` only?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/89273979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/91050234", "body": "Just curious, why change the default to `/MD` from `/MT` ?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/91050234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/91168517", "body": "OK, I see. I'll merge this. Thanks again!", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/91168517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/100533177", "body": "How about we don't add the prefix when the length < 260 characters?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/100533177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "ashi009": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4419", "title": "Incorrectly converting git_repository to http_archive", "body": "### Description of the problem / feature request:\r\n\r\nbazel 0.9 failed to fetch git_repository rule pin to a tag with `/` in the tag name. \r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\n```\r\ngit_repository(\r\n        name = \"io_bazel_rules_jsonnet\",\r\n        remote = \"https://github.com/xreception/rules_jsonnet.git\",\r\n        tag = \"patched/6f425a8482ceac19d122944a38d250ae4758de53\",  # latest, as of 2017-12-26\r\n)\r\n```\r\n\r\nThe root cause is that the new git fetcher assumes the tag name is always safe to use for stripping prefixes.\r\n\r\nFor the above example, the directory in the archive will be named as `rules_jsonnet-patched-6f425a8482ceac19d122944a38d250ae4758de53` instead of `rules_jsonnet-patched/6f425a8482ceac19d122944a38d250ae4758de53`.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ivucica": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4417", "title": "Please include version in the Debian nightly-built package", "body": "### Description of the problem / feature request:\r\n\r\nhttps://ci.bazel.build/view/Bazel%20bootstrap%20and%20maintenance/job/bazel/job/nightly/182/\r\n\r\nI tried installing the .deb to try out a new feature, but dpkg refuses to do so as the `Version` field is empty.\r\n\r\n`Version` field should probably have the next-release's version, plus `~git$BUILD_TIMESTAMP` or `~nightly$JENKINS_ID`. See [what tilde means](https://unix.stackexchange.com/questions/230911/what-is-the-meaning-of-the-tilde-in-some-debian-openjdk-package-version-string).\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\n```\r\nwget https://ci.bazel.build/view/Bazel%20bootstrap%20and%20maintenance/job/bazel/job/nightly/lastSuccessfulBuild/artifact/node=linux-x86_64/variation=/bazel_-linux-x86_64.deb\r\ndpkg -i bazel_-linux-x86_64.deb\r\n```\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nDebian stretch + some buster\r\n\r\n### What's the output of `bazel info release`?\r\n\r\nn/a\r\n\r\n  ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "thezha": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4412", "title": "cc_import rule fails cc_binary dependency check", "body": "### Description of the problem:\r\n\r\nFollowing the instructions on [cc_import](https://docs.bazel.build/versions/master/be/c-cpp.html#cc_import) doesn't give expected result when importing an external pre-compiled library. Error message seems to say that \"cc_import\" doesn't belong to the cc_library dependency list. \r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\n1. Set up a new_local_repository in WORKSPACE which points to a directory containing a pre-compiled library\r\n```\r\nnew_local_repository(\r\n    name = \"hello_world\",\r\n    path = \"/Users/kainanc/projects/vsi/sandbox/libhello_world\",\r\n    build_file = \"hello_world.BUILD\",\r\n)\r\n```\r\n2. Write local BUILD rule hello_world.BUILD with rule **cc_import**\r\n```\r\ncc_import(\r\n    name = \"libhello_world\",\r\n    shared_library = \"libhello_world.so\",\r\n    hdrs = [\"hello_world.h\"],\r\n    visibility = [\"//visibility:public\"],\r\n)\r\n```\r\n3. In BUILD, create cc_binary rule to include the import rule\r\n```\r\ncc_binary(\r\n    name = \"hi\",\r\n    srcs = [\"hi.c\"],\r\n    deps = [\"@hello_world//:libhello_world\"]\r\n)\r\n```\r\n4. Run build and fails\r\n> bazel build hi\r\n> ERROR: /Users/kainanc/projects/vsi/sandbox/hello_world/BUILD:22:12: in deps attribute of cc_binary rule //:hi: cc_import rule '@hello_world//:libhello_world' is misplaced here (expected cc_inc_library, cc_library, objc_library or cc_proto_library)\r\n> ERROR: Analysis of target '//:hi' failed; build aborted: Analysis of target '//:hi' failed; build aborted\r\n> INFO: Elapsed time: 0.119s\r\n> FAILED: Build did NOT complete successfully (1 packages loaded)\r\n> \r\n\r\n### What operating system are you running Bazel on?\r\nTested this on both Ubuntu 16.04 and MacOS High Sierra with bazel 0.9.0 release\r\n\r\n### What's the output of `bazel info release`?\r\nrelease 0.9.0-homebrew\r\n\r\n###  Have you found anything relevant by searching the web?\r\nNo\r\n\r\n### Any other information, logs, or outputs that you want to share?\r\ncc_library() way works just fine\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "werkt": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4410", "title": "build_event_stream_test `ed` dependency and confusing error", "body": "### Description of the problem / feature request:\r\n\r\nbuild_event_stream_test introduces an undeclared dependency on ed. This manifests in an extremely unclear error reporting (with stderr and the status of ed suppressed)\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\nRemove 'ed' from a build system and run `bazel test //src/test/shell/integration:build_event_stream_test`\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nubuntu 14.04 (full base image installed without an `ed` provider or requirement)\r\n\r\n### What's the output of `bazel info release`?\r\n\r\n0.9.0\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nNo\r\n\r\n### Any other information, logs, or outputs that you want to share?\r\n\r\nNot sure if there's a standard for bazel shell tests, or whether there are any declarable dependencies here similar to other 'toolchains', but it seems like this should be satisfiable by an existing editor implementation (perhaps sed?)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4405", "title": "skylark_git_repository_test fails under standalone", "body": "### Description of the problem / feature request:\r\n\r\nBazel's `//src/test/shell/bazel:skylark_git_repository_test` relies on execution under `test --spawn_strategy=sandboxed`.  Running it with `test --spawn_strategy=standalone` causes the test to fail with errors during `git_repository`, failing to locate the revision for reset. This appears to be less of a correctness issue for the test, than a minor environmental difference that isn't reflected in standalone execution, but should probably work without sandboxing on.\r\n\r\nCaveat for swapping between these two options: test results will be cached, and not invalidated based on the switch.  Prefer test runs with `--nocache_test_results`.\r\n\r\nThis failure is also unreproducible without invoking the *test* itself with `--spawn_strategy=standalone`; if only the offending `bazel run` invocations are put under `standalone`, the tests do not fail.\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\n`bazel test --spawn_strategy=sandboxed //src/test/shell/bazel:skylark_git_repository_test`\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nlinux\r\n\r\n### What's the output of `bazel info release`?\r\n\r\n0.9.0\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nNo\r\n\r\n### Any other information, logs, or outputs that you want to share?\r\n\r\nLog files from execution of 0.9.0 under standalone strategy are attached: [skylark_git_repository.log](https://github.com/bazelbuild/bazel/files/1613723/skylark_git_repository.log)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4389", "title": "bazel_test_test invalid undeclared output test", "body": "### Description of the problem / feature request:\r\n\r\n`test_no_zip_annotation_manifest_when_no_undeclared_outputs` in `src/test/shell/bazel/bazel_test_test.sh` has a check for the existence of the values of `TEST_UNDECLARED_OUTPUTS_DIR` and `TEST_UNDECLARED_OUTPUTS_ANNOTATIONS_DIR`, but the associated change to add this test only ensures that the undeclared outputs MANIFEST is removed if there are no undeclared outputs. Further, the name of this test seems to indicate that it should be testing for the absence of the annotations *zip* file rather than these two directories.\r\nThis test only succeeds because the directories *cannot* exist after the test is run, because the default spawn_strategy of `sandboxed` prevents *any* undeclared outputs from being copied from the action's execution, including those of the test output directories...\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\nAdd `--spawn_strategy=standalone` to the invocation at https://github.com/bazelbuild/bazel/blob/f05a59f68563b48a30abc55dbe927048df011fe2/src/test/shell/bazel/bazel_test_test.sh#L630\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nlinux\r\n\r\n### What's the output of `bazel info release`?\r\n\r\n0.9.0\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nNo\r\n\r\n### Any other information, logs, or outputs that you want to share?\r\n\r\nOutput of the test log after only adding the standalone strategy specification is attached.\r\n\r\n[test_no_zip_annotation_manifest_when_no_undeclared_outputs.log](https://github.com/bazelbuild/bazel/files/1606977/test_no_zip_annotation_manifest_when_no_undeclared_outputs.log)\r\n  ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/cd1946183214af255017e35106fd87bd6186b674", "message": "Create ndk wrong path in TMPDIR, not SRCDIR\n\ntest_android_ndk_repository_wrong_path presumes the wrong ndk path\n'some_dir' to not exist. This test will work initially, but break if run\nincrementally, because of the some_dir remaining in the TEST_SRCDIR (the\nrunfiles root for this test). Switching this over to use the ephemeral\nTEST_TMPDIR instead.\n\nCloses #4465.\n\nPiperOrigin-RevId: 182083666"}], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4482", "title": "Propagate remote_upload_local_results to remote ex", "body": "Translated a false 'remote_upload_local_results' into a desire to not\r\ncache action outputs if a miss was encountered; the actionKey continues\r\nto be based on an action for which do_not_cache is false, while the exec\r\ncan have this value flipped after an action cache miss.\r\n\r\nThis is currently the only way to have bazel alter the do_not_cache for\r\nremotely executed actions after a cache miss (because do_not_cache must\r\nbe false to perform a cache check).", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/3448", "title": "Confer outputs arity implicitly for list/singular", "body": "Multiple outputs, expanded through placeholder specification of list\r\nattributes, should be conveyed to outputs struct definition unmodified.\r\nPresumed singleton extraction from implicit outputs subsystem has been\r\nreworked, and tests of singular/list behavior have been updated.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/91151280", "body": "We noted specifically that workspace.clearCaches() removed nearly all object utilization, and that a gc invocation was definitive in demonstrating that nearly all of bazel's (vm) persistent heap usage was tied up in the cache.  Meaningless in the expunge case, it was just an opportunity to show it had nothing else up its sleeves.  I'm fine with removing it, it just felt right.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/91151280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/91187886", "body": "I'm happy to augment this string, but I'm not sure where you're trying to get to here (or specifically how 'workspace_root' fits in).  Mind commenting with an example, or giving me a pointer to one of these?\r\n\r\nPer directory:\r\n  Cleaning [workspace|build|output] directory <child>< asynchronously... if async>\r\nOnce for all directories:\r\n  Cleaning [workspace|build|output] director{y/ies}< asynchronously... if async>\r\n\r\ntbh the inclusion of 'workspace' or 'workspace_root' in the output here for some may indicate that their actual source workspace is in jeopardy, though perhaps not anyone who expects something reasonable out of a build system.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/91187886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/95597563", "body": "I will remove the if above.  While we have a number of compiler variation selections, we've done all of the legwork for cross/multi-target products in skylark proper, owing to the poor documentation and constrained observable behavior in CROSSTOOL </shameless-req-for-additional-docs>.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/95597563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/102984039", "body": "This is the excerpt from the log that I'm looking to match (assuming the info line doesn't appear) which is always present with -s for a recompilation:\r\n\r\n`>>>>>>>>> # //a:a [action 'Compiling a/a.cc']`\r\n\r\nDo you want to match something else?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/102984039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/103186392", "body": "Yes, any instance of CppCompileAction will reproduce without inputsKnown starting out as false in the discovery case.  cc_binary, cc_library, cc_test are all affected.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/103186392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/114337917", "body": "Apologies, this comment is generally incorrect and was from my own development - it corresponded to the behavior elsewhere that performs reflection tests where I was only able to test for `Iterable`, and not `Iterable<String>`, to assure myself (and others) that the only possible generic for the `Iterable` was `String`.  I can clarify or remove it", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/114337917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/114346733", "body": "Generally, I'm all for attempting to prevent breakages, but I want to lay out the following scenario, as it would occur without this change:\r\n\r\nRule takes a list attribute\r\nOutput function/dictionary specifies a template substitution for an output based on the list attribute\r\n\r\nIn two invocation cases:\r\nRule is invoked with an empty list of values\r\nBazel will error with the following when the output is accessed by name:\r\n```\r\nNo attribute '<list output attribute name>' in outputs. Make sure you declared a rule output with this name.\r\n```\r\n\r\nOr\r\n\r\nRule is invoked with a plural list of values (more than one entry in a list)\r\nBazel will error with the following:\r\n```\r\njava.lang.RuntimeException: Unrecoverable error while evaluating node 'PACKAGE:' (requested by nodes 'TARGET_PATTERN::empty')\r\n        at com.google.devtools.build.skyframe.ParallelEvaluator$Evaluate.run(ParallelEvaluator.java:438)\r\n        at com.google.devtools.build.lib.concurrent.AbstractQueueVisitor$WrappedRunnable.run(AbstractQueueVisitor.java:501)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n        at java.lang.Thread.run(Thread.java:745)\r\nCaused by: java.lang.IllegalArgumentException: expected one element but was: <a.out, b.out>\r\n```\r\n\r\nYes, the fix breaks anyone who has specified a list attribute in a skylark rule of their own making that has been supplied a singleton list and expected it to be resolved to a singular object by forcing them to either correctly specify their attribute as a singular type or iterate over the resulting list value, but isn't this more correct?\r\n\r\nI've attached a small workspace demonstrating both of the failures in packages `empty` and `plural` with a small custom rule, buildable with `bazel build empty` and `bazel build plural`\r\n[confer.tar.gz](https://github.com/bazelbuild/bazel/files/970927/confer.tar.gz)\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/114346733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "edbaunton": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4409", "title": "Fix fictional characters in test data", "body": "### Description of the problem / feature request:\r\n\r\nThe identities used in the tests for the `git_repository` skylark rules are from `foo.com`. We should update to use globally recognised example characters as discussed in https://github.com/bazelbuild/bazel/pull/4368#issuecomment-354520872.\r\n\r\n### Feature requests: what underlying problem are you trying to solve with this feature?\r\n\r\nStandardisation!\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/512b9b9b353bcabc436a87329fadd449c684c44b", "message": "Add support for strip_prefix to {new_}git_repository skylark rules\n\nContinuation of https://github.com/bazelbuild/bazel/pull/4356\n\nAn approach at supporting strip_prefix with the git skylark rules.\n\nThis approach unfortunately uses symlinks since you cannot clone a subset of a git repository. It creates a tmp directory which is the 'real' clone and then provides a link in place of the expected location of the repository to the path of the required prefix. Behaviour is only changed if a strip_prefix is provided.\n\nCloses #4368.\n\nPiperOrigin-RevId: 181438640"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/4f51c0849305e9bfff2af4d80792fc69c02dfa08", "message": "Use --depth=1 on git clone for git_repository skylark rules\n\nFixes https://github.com/bazelbuild/bazel/issues/4359\n\nCloses #4360.\n\nPiperOrigin-RevId: 181161619"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ubique": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4404", "title": "Files without extensions are not allowed in hdrs of cc_inc_library rule", "body": "### Description of the problem / feature request:\r\n\r\nThe Guideline Support Library ( https://github.com/Microsoft/GSL )  uses <gsl/gsl> for their main header.\r\nWhen I try to specify cc_inc_library headers as hdrs = glob([\"include/gsl/*\"]), I got error:\r\n\r\n```\r\nERROR: /home/amnesia/git/xyz/third_party/gsl/BUILD:5:10: in hdrs attribute of cc_inc_library rule //third_party/gsl:gsl: file '//third_party/gsl:include/gsl/gsl' is misplaced here (expected .h, .hh, .hpp, .ipp, .hxx or .inc)\r\n```\r\n\r\n### Feature requests: what underlying problem are you trying to solve with this feature?\r\n\r\nI try to use Microsofot GSL library in my project. \r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\n```\r\ncc_inc_library(\r\n  name = \"gsl\",\r\n  hdrs = glob([\"include/gsl/*\"]),\r\n  visibility = [\"//blabla:__pkg__\"]\r\n)\r\n```\r\n### What operating system are you running Bazel on?\r\n\r\nGNU/Linux\r\n\r\n### What's the output of `bazel info release`?\r\n\r\nrelease 0.9.0\r\n###  Have you found anything relevant by searching the web?\r\nhttps://github.com/bazelbuild/bazel/issues/1276\r\n\r\n  \r\n  ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "philwo": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4403", "title": "Android SDK installation on Ubuntu 16.04 Jenkins slaves seems broken", "body": "Tests are failing due to the Android SDK not being found.\r\n\r\n```\r\n[node=ubuntu_16.04-x86_64] ERROR: /home/ci/workspace/bazel-tests-node=ubuntu_16.04-x86_64/WORKSPACE:155:1: no such package '@androidsdk//': Expected directory at /home/ci/workspace/bazel-tests-node=ubuntu_16.04-x86_64/platforms but it is not a directory or it does not exist. Unable to read the Android SDK at /home/ci/workspace/bazel-tests-node=ubuntu_16.04-x86_64, the path may be invalid. Is the path in android_sdk_repository() or ANDROID_HOME set correctly? If the path is correct, the contents in the Android SDK directory may have been modified. and referenced by '//external:android_sdk_for_testing'\r\n[node=ubuntu_16.04-x86_64] ERROR: /home/ci/workspace/bazel-tests-node=ubuntu_16.04-x86_64/WORKSPACE:159:1: no such package '@androidndk//': Could not read RELEASE.TXT in Android NDK: /home/ci/workspace/bazel-tests-node=ubuntu_16.04-x86_64/RELEASE.TXT (No such file or directory) Unable to read the Android NDK at /home/ci/workspace/bazel-tests-node=ubuntu_16.04-x86_64, the path may be invalid. Is the path in android_ndk_repository() or ANDROID_NDK_HOME set correctly? If the path is correct, the contents in the Android NDK directory may have been modified. and referenced by '//external:android_ndk_for_testing'\r\n[node=ubuntu_16.04-x86_64] ERROR: /home/ci/workspace/bazel-tests-node=ubuntu_16.04-x86_64/WORKSPACE:155:1: no such package '@androidsdk//': Expected directory at /home/ci/workspace/bazel-tests-node=ubuntu_16.04-x86_64/platforms but it is not a directory or it does not exist. Unable to read the Android SDK at /home/ci/workspace/bazel-tests-node=ubuntu_16.04-x86_64, the path may be invalid. Is the path in android_sdk_repository() or ANDROID_HOME set correctly? If the path is correct, the contents in the Android SDK directory may have been modified. and referenced by '//external:android/sdk'\r\n[node=ubuntu_16.04-x86_64] Analyzing: 313 targets (78 packages loaded)\r\n[node=ubuntu_16.04-x86_64] ERROR: /home/ci/workspace/bazel-tests-node=ubuntu_16.04-x86_64/src/test/java/com/google/devtools/build/android/desugar/BUILD:21:1: no such package '@androidsdk//': Expected directory at /home/ci/workspace/bazel-tests-node=ubuntu_16.04-x86_64/platforms but it is not a directory or it does not exist. Unable to read the Android SDK at /home/ci/workspace/bazel-tests-node=ubuntu_16.04-x86_64, the path may be invalid. Is the path in android_sdk_repository() or ANDROID_HOME set correctly? If the path is correct, the contents in the Android SDK directory may have been modified. and referenced by '//src/test/java/com/google/devtools/build/android/desugar:android_jar_for_testing'\r\n[node=ubuntu_16.04-x86_64] ERROR: /home/ci/workspace/bazel-tests-node=ubuntu_16.04-x86_64/WORKSPACE:155:1: no such package '@androidsdk//': Expected directory at /home/ci/workspace/bazel-tests-node=ubuntu_16.04-x86_64/platforms but it is not a directory or it does not exist. Unable to read the Android SDK at /home/ci/workspace/bazel-tests-node=ubuntu_16.04-x86_64, the path may be invalid. Is the path in android_sdk_repository() or ANDROID_HOME set correctly? If the path is correct, the contents in the Android SDK directory may have been modified. and referenced by '//external:android/dx_jar_import'\r\n```", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4181", "title": "discard_analysis_cache_test seems flaky", "body": "I had two \"bazel-test\" CI runs fail with that test now in the last hour, but a retry usually passed.\r\n\r\nHere's one log: https://ci.bazel.io/blue/rest/organizations/jenkins/pipelines/bazel-tests/runs/1267/nodes/26/log/?start=0\r\n\r\n@janakdr Could you have a look please or reassign to someone who knows more about that test?\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3952", "title": "Investigate better use of java.nio.file.Path in our JavaIoFilesystem", "body": "Taras suggested the following on bazel-dev:\r\n\r\n> when implementing JavaIoFilesystem methods you frequently use java.nio.file.Path, but instead of directly creating a java.nio.file.Path an extra allocation is used everywhere file.toPath() is used. In other words I'm only talking about implementation details - not changes to APIs. The other advantage I see is that if java.nio.file.Path was used instead of java.io.File, it would be possible to implement InMemoryFilesystem by just overriding a newly suggested getNioPath() method and jimfs would do the rest, which has an advantage of having to maintain one fewer FS implementations in Bazel :)\r\n\r\n> On a related note, I've noticed that some methods, like delete can be replaced with standard library functions like Files.delete and getDirectoryEntries can be implemented using Files.list. I'm guessing that it's because this filesystem implementation had to support older Java versions. Does anyone have any objections to migrate or at least add an additional getNioPath method in addition to getIoFile that can be used by methods that operate on java.nio.file.Path instead of java.io.File?\r\n\r\nI'll look into this.\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3952/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/96c654d43eb2906177325cbc2fc2b1e90dbcc792", "message": "Remove EOL'd Linux flavours, bump CentOS to 6.9.\n\nThis should fix the bazel-slow-tests job on CI. :)\n\nPiperOrigin-RevId: 181510264"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/1fa84f1ad22189e16aedb3572cc2304ea18f0747", "message": "Automated rollback of commit 55f1e58a7a3e77027dd23cf58564424d76ab6dc0.\n\n*** Reason for rollback ***\n\nFreeBSD should work again, so re-enable it.\n\n*** Original change description ***\n\nRemove FreeBSD from our CI temporarily.\n\nRELNOTES: None.\nPiperOrigin-RevId: 181140165"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/55f1e58a7a3e77027dd23cf58564424d76ab6dc0", "message": "Remove FreeBSD from our CI temporarily.\n\nRELNOTES: None.\nPiperOrigin-RevId: 180857355"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/16783865", "body": "@hermione521 This would be the explanation for the spurious mount() errors - please fix. :)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/16783865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20119124", "body": "The reason why this doesn't work is that protobuf.bzl doesn't use use_default_shell_env=True in their ctx.action here https://github.com/google/protobuf/blob/master/protobuf.bzl#L87.\r\n\r\nThe fix would be to add that statement there, but maybe then the next thing that doesn't have that flag set breaks. Thanks for bringing this up - we'll investigate how we can make this the default so it will just work for your use case. :)\r\n\r\ncc @aehlig ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20119124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20119268", "body": "@greg1github Would you mind trying this one-line patch which flips the default value of that flag to True? https://bazel-review.googlesource.com/#/c/7674/ - it should cause LD_LIBRARY_PATH to be set for all Skylark based actions in your build, which hopefully either completely fixes your build, or at least lets it progress further. The outcome would be very interesting and helpful for us to decide if this is the right path to go on fixing this issue.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20119268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21695697", "body": "Hi @keith,\r\n\r\nseems like there was a regression found in one of our projects where some files were no longer included in a build with this change in. Engineers decided to rollback this change and investigate before it causes harm to other users as well. @dmishe and @allevato might have more details. I'm pretty sure it was just a bug and this change is coming back very soon :)\r\n\r\nCheers,\r\nPhilipp", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21695697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/54915496", "body": "@johnynek Mhm... I think so, too.\n\n@damienmg Can you have a look at https://github.com/bazelbuild/bazel/blob/master/tools/build_defs/scala/scala.bzl? I think you made those changes and probably know best what they're supposed to look like :)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/54915496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/119330657", "body": "Maybe add:\r\n// Handle actions without inputs.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/119330657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/119330756", "body": "Can we instead store \"new TreeNode(ImmutableList.<TreeNode.ChildEntry>of())\" in a static final field and use that instead of calling interner.intern on a new instance everytime?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/119330756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/123009071", "body": "Yes, but that doesn't seem to cause any issues for the IDE. I've been running with this project file for some time now and macOS and Linux.\r\n\r\nAlternatively we could also explicitly list all directories, but that would prevent us from editing files in the root directory using the IDE.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/123009071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/123218627", "body": "I tried, but it doesn't change anything. The directories still show up in the project directory list, but as they're already \"excluded directories\" (marked as orange folders) by default, adding it here is a no-op. Maybe the IJWB plugin automatically excludes symlinks or bazel-*?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/123218627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/123218781", "body": "![screenshot from 2017-06-21 13 06 40](https://user-images.githubusercontent.com/504652/27381286-8738ee4e-5682-11e7-98e4-24da9762a328.png)\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/123218781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/126278511", "body": "Not only for tests, I would change this to:\r\n\r\n'standalone' means run all of them locally without any kind of sandboxing", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/126278511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/126278527", "body": "This is also wrong by now, it should read:\r\n\r\n'sandboxed' means to run them in a sandboxed environment with limited privileges (details depend on platform support)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/126278527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/124378306", "body": "When I try to run this on Linux (Ubuntu 14.04) I get this:\r\n\r\n```bash\r\nphilwo@philwo:~$ mktemp -t bazel\r\nmktemp: too few X's in template 'bazel'\r\n```\r\n\r\nWhat about this version:\r\n`JARJAR=\\\"$$(mktemp 2> /dev/null || mktemp -t bazel)\\\"\",`\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/124378306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "alexeagle": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4400", "title": "Deploy jar cannot execute on Debian: \"bad magic number\"", "body": "Repro is in a docker container that we use for CI.\r\n```\r\n$ docker run --rm -it angular/ngcontainer:0.1.0\r\ncircleci@e1d10f36103e:~/repro$ echo \"\" > WORKSPACE\r\ncircleci@e1d10f36103e:~/repro$ cat > BUILD\r\njava_binary(\r\n  name = \"main\",\r\n  srcs = [\"Main.java\"],\r\n  main_class = \"Main\",\r\n)\r\ncircleci@e1d10f36103e:~/repro$ cat > Main.java\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        // Prints \"Hello, World\" to the terminal window.\r\n        System.out.println(\"Hello, World\");\r\n    }\r\n\r\n}\r\ncircleci@e1d10f36103e:~/repro$ bazel build :main_deploy.jar\r\nExtracting Bazel installation...\r\n...............\r\nINFO: Analysed target //:main_deploy.jar (13 packages loaded).\r\nINFO: Found 1 target...\r\nTarget //:main_deploy.jar up-to-date:\r\n  bazel-bin/main_deploy.jar\r\nINFO: Elapsed time: 6.358s, Critical Path: 1.09s\r\nINFO: Build completed successfully, 9 total actions\r\ncircleci@e1d10f36103e:~/repro$ bazel-bin/main_deploy.jar\r\ninvalid file (bad magic number): Exec format error\r\ncircleci@e1d10f36103e:~/repro$ bazel info release\r\nrelease 0.9.0\r\n```\r\n\r\nContext: discussion on https://github.com/bazelbuild/bazel/commit/ba1f83c2c32159dab2640c844e73cbc6cb02ddc4 where I'm trying to run Skylint", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4385", "title": "@wkspc shorthand label syntax works as a dependency but not on command line", "body": "Bazel 0.8.1\r\nThe current treatment of a label expressed as just `@wkspc` is inconsistent.\r\n\r\nI can have `deps=[\"@rxjs\"]` as a shorthand for `deps=[\"@rxjs//:rxjs\"]`\r\n\r\nBut if I `bazel build @rxjs` I get \r\n```\r\nINFO: Analysed 0 targets (4 packages loaded).\r\nINFO: Found 0 targets...\r\n```\r\n\r\nand if I try to abbreviate `bazel run @yarn//:yarn` as `bazel run @yarn` I get `ERROR: No targets found to run`\r\n\r\nReproduction in this repo:\r\nhttps://github.com/alexeagle/angular-bazel-example", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4257", "title": "How to build all buildable targets and test all testable targets", "body": "I want to \"build and test all the things\" on my CI.\r\n\r\n`bazel test ...` is bad because it doesn't build a target unless some test depends on it. (probably surprising to new users)\r\n\r\n`bazel build ... && bazel test ...` is bad because the first test doesn't start running until the slowest build target is built\r\n\r\nAt Google we give up on this, and use `build_test` (alluded to at https://docs.bazel.build/versions/master/be/functions.html#load) which is a special test target that always passes, but consumes the files from some given deps, forcing those deps to build, and thus making the test either fail with a build error, or pass. But I think this is bad because it's easy to forget to create a `build_test` for some target, and we shouldn't expect everyone to be ever-watchful for that gotcha.\r\n\r\nIs there some other way I don't know of?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4254", "title": "bazel --client_debug should print server.pid location", "body": "We got a workspace into a strange state: the server process had been killed, but the client kept trying to connect to it. Don't know how to repro.\r\n\r\nHowever, recovering from this was difficult, because\r\n- we didn't know where bazel keeps the server pid\r\n- when we did figure out that it's in the output_base, we couldn't run `bazel info` to find out the location of the output_base\r\n\r\nWe did discover `bazel --client_debug` from the documentation, but it didn't tell us how it finds the server. If it printed the absolute path to the server-pid.txt file it would have saved a lot of trouble.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4185", "title": "Cannot provide internal visibility to target that uses absolute label syntax", "body": "I'd like to use an absolute label with my own workspace name, but then there is no way to get visibility on an internal target I reference:\r\n\r\n```\r\nalexeagle@alexeagle:/tmp/repro$ bazel info release\r\nrelease 0.8.0\r\nalexeagle@alexeagle:/tmp/repro$ cat WORKSPACE \r\nworkspace(name = \"myworkspace\")\r\nalexeagle@alexeagle:/tmp/repro$ cat BUILD \r\nfilegroup(\r\n  name = \"stuff\",\r\n  srcs = glob([\"*\"]),\r\n  visibility = [\"@myworkspace//:__subpackages__\"],\r\n)\r\nalexeagle@alexeagle:/tmp/repro$ cat subdir/BUILD \r\n\r\nfilegroup(\r\n  name = \"subdir\",\r\n  srcs = [\"@myworkspace//:stuff\"],\r\n)\r\nalexeagle@alexeagle:/tmp/repro$ bazel build subdir\r\nERROR: /tmp/repro/subdir/BUILD:2:1: Target '@myworkspace//:stuff' is not visible from target '//subdir:subdir'. Check the visibility declaration of the former target if you think the dependency is legitimate\r\nERROR: Analysis of target '//subdir:subdir' failed; build aborted: Analysis of target '//subdir:subdir' failed; build aborted\r\nINFO: Elapsed time: 0.177s\r\nFAILED: Build did NOT complete successfully (0 packages loaded)\r\n```\r\n\r\nNote, `visibility = [\"//:__subpackages__\"]` doesn't work for `subdir` either.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26654164", "body": "Hey @fanzier ,\r\n\r\nYou document here that you can build Skylint and then copy it somewhere. But these instructions don't work, the wrapper script needs to find the runfiles as well. Doing it the naive way, you get\r\n\r\n```\r\n$ Skylint\r\n/usr/local/bin/Skylint: Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\r\n```\r\n\r\nOne fix is to copy the deploy.jar and run\r\n```\r\njava -jar /usr/local/bin/Skylint_deploy.jar\r\n```\r\n\r\nbut that exposes that it's not a native command, and looks strange to put a jar file in /usr/local/bin\r\n\r\nI guess the implication in the instructions is to copy the runfiles tree as well?\r\n```\r\ncp -rpv bazel-bin/src/tools/skylark/java/com/google/devtools/skylark/skylint/Skylint.runfiles /usr/local/bin\r\n```\r\n\r\nIf you think that's the best, I can send a PR against this readme.\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26654164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26707082", "body": "I had problems with copying the runfiles tree as well, because it contains symlinks that were broken in the move. I suppose a copy operation that resolves all symlinks might work (like some rsync option maybe?) but really the deploy.jar is supposed to do this job. Maybe I should file a different issue for the deploy.jar execution failure, @laurentlb ?\r\nfor reference, here's where my change is: https://github.com/alexeagle/ngcontainer/commit/6e6ac08cbce3d3a550292b8a4c5ffccf46bfa562", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26707082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26716916", "body": "@iirina I opened https://github.com/bazelbuild/bazel/issues/4400 for the deploy.jar issue that's the ultimate blocker here.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26716916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "robfig": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4398", "title": "Exception running bazel coverage on java tests", "body": "### Description of the problem / feature request:\r\n\r\n\"bazel coverage\" produces an exception internal to bazel\r\n\r\n```\r\n$ bazel clean --expunge\r\nINFO: Starting clean (this may take a while). Consider using --async if the clean takes more than several minutes.\r\n\r\n$ bazel coverage --instrumentation_filter=//src/com/corp/profiles //test/com/corp/profiles:unit\r\n...........\r\nINFO: Analysed target //test/com/corp/profiles:unit (171 packages loaded).\r\nINFO: Found 1 test target...\r\nERROR: /Users/robfig/alpha/src/com/corp/profileservice/validation2/error/BUILD:3:1: Building src/com/corp/profileservice/validation2/error/liberror.jar (3 source files) failed (Exit 1): java failed: error executing command\r\n  (cd /private/var/tmp/_bazel_robfig/1db08896ecff7e5e96a745981c3b77e6/execroot/__main__ && \\\r\n  exec env - \\\r\n    LC_CTYPE=en_US.UTF-8 \\\r\n  external/local_jdk/bin/java -XX:+TieredCompilation '-XX:TieredStopAtLevel=1' -Xbootclasspath/p:external/bazel_tools/third_party/java/jdk/langtools/javac-9-dev-r4023-3.jar -jar external/bazel_tools/tools/jdk/JavaBuilder_deploy.jar @bazel-out/darwin-fastbuild/bin/src/com/corp/profileservice/validation2/error/liberror.jar-2.params)\r\njava.nio.file.DirectoryNotEmptyException: bazel-out/darwin-fastbuild/coverage-metadata/com/corp/profileservice/completion\r\n\tat sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:242)\r\n\tat sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)\r\n\tat java.nio.file.Files.delete(Files.java:1126)\r\n\tat com.google.devtools.build.buildjar.instrumentation.JacocoInstrumentationProcessor$2.postVisitDirectory(JacocoInstrumentationProcessor.java:153)\r\n\tat com.google.devtools.build.buildjar.instrumentation.JacocoInstrumentationProcessor$2.postVisitDirectory(JacocoInstrumentationProcessor.java:143)\r\n\tat java.nio.file.Files.walkFileTree(Files.java:2688)\r\n\tat java.nio.file.Files.walkFileTree(Files.java:2742)\r\n\tat com.google.devtools.build.buildjar.instrumentation.JacocoInstrumentationProcessor.recursiveRemove(JacocoInstrumentationProcessor.java:141)\r\n\tat com.google.devtools.build.buildjar.instrumentation.JacocoInstrumentationProcessor.processRequest(JacocoInstrumentationProcessor.java:79)\r\n\tat com.google.devtools.build.buildjar.SimpleJavaLibraryBuilder.buildJar(SimpleJavaLibraryBuilder.java:140)\r\n\tat com.google.devtools.build.buildjar.SimpleJavaLibraryBuilder.run(SimpleJavaLibraryBuilder.java:118)\r\n\tat com.google.devtools.build.buildjar.BazelJavaBuilder.processRequest(BazelJavaBuilder.java:105)\r\n\tat com.google.devtools.build.buildjar.BazelJavaBuilder.runPersistentWorker(BazelJavaBuilder.java:67)\r\n\tat com.google.devtools.build.buildjar.BazelJavaBuilder.main(BazelJavaBuilder.java:45)\r\nTarget //test/com/corp/profiles:unit failed to build\r\nINFO: Elapsed time: 111.911s, Critical Path: 39.00s\r\nFAILED: Build did NOT complete successfully\r\n\r\nExecuted 0 out of 1 test: 1 fails to build.\r\n\r\n$ bazel test //test/com/corp/profiles:unit\r\nINFO: Analysed target //test/com/corp/profiles:unit (0 packages loaded).\r\nINFO: Found 1 test target...\r\nTarget //test/com/corp/profiles:unit up-to-date:\r\n  bazel-bin/test/com/corp/profiles/unit.jar\r\n  bazel-bin/test/com/corp/profiles/unit\r\nINFO: Elapsed time: 26.749s, Critical Path: 22.90s\r\nINFO: Build completed successfully, 139 total actions\r\n//test/com/corp/profiles:unit                                            PASSED in 5.5s\r\n\r\nExecuted 1 out of 1 test: 1 test passes.\r\n\r\n```\r\n\r\nThe directory being complained about does not exist under output_path\r\n\r\n```\r\n$ bazel info\r\noutput_path: /private/var/tmp/_bazel_robfig/1db08896ecff7e5e96a745981c3b77e6/execroot/__main__/bazel-out\r\n\r\n$ ls /private/var/tmp/_bazel_robfig/1db08896ecff7e5e96a745981c3b77e6/execroot/__main__/bazel-out/darwin-fastbuild/coverage-metadata/com/corp/profileservice/completion\r\nls: /private/var/tmp/_bazel_robfig/1db08896ecff7e5e96a745981c3b77e6/execroot/__main__/bazel-out/darwin-fastbuild/coverage-metadata/com/corp/profileservice/completion: No such file or directory\r\n```\r\n\r\n\r\n### Feature requests: what underlying problem are you trying to solve with this feature?\r\n\r\nRun java tests with coverage enabled\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\nI don't have an open source reproducer. I was hoping the stack trace would be enough\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nMac OS High Sierra\r\n\r\n### What's the output of `bazel info release`?\r\n\r\nrelease 0.9.0\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nThis appears to be the main discussion about coverage, but it seems to indicate that java coverage is expected to be in working order\r\nhttps://github.com/bazelbuild/bazel/issues/1118\r\n\r\n  ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RNabel": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4396", "title": "Side-by-side support of different bazel versions", "body": "> ATTENTION! Please read and follow:\r\n> - if this is a _question_ about how to build / test / query / deploy using Bazel, ask it on StackOverflow instead: https://stackoverflow.com/questions/tagged/bazel\r\n> - if this is a _discussion starter_, send it to bazel-discuss@googlegroups.com\r\n> - if this is a _bug_ or _feature request_, fill the form below as best as you can.\r\n\r\n### Description of the problem / feature request:\r\n\r\nSupport for multiple versions installed side-by-side by default. Maybe a built in way to switch between them. My apologies if this belongs in the `discussion starter` category.\r\n\r\n### Feature requests: what underlying problem are you trying to solve with this feature?\r\n\r\nConcurrent work on multiple projects using different versions of bazel. See [this PR](https://github.com/Homebrew/homebrew-core/pull/22470) against `homebrew` for further context.\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\nN/A\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nmacOS.\r\n\r\n### What's the output of `bazel info release`?\r\n\r\nN/A\r\n\r\n### If `bazel info release` returns \"development version\" or \"(@non-git)\", tell us how you built Bazel.\r\n\r\nN/A\r\n\r\n### What's the output of `git remote get-url origin ; git rev-parse master ; git rev-parse HEAD` ?\r\n\r\nN/A\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nYep, a general discussion can be found in this [email thread](https://groups.google.com/forum/#!topic/bazel-discuss/7FdIOJdFMyc).\r\n\r\n### Any other information, logs, or outputs that you want to share?\r\n\r\nN/A", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4396/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brunobowden": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4395", "title": "remote_rest_cache inaccessible error message is unclear", "body": "### Description of the problem / feature request:\r\n\r\nAn inaccessible `remote_rest_cache` for a build will produce unclear errors that doesn't clearly explain the cause (i.e. remote rest cache couldn't be contacted):\r\n\r\n`C++ compilation of rule '//xxxx:status' failed (Exit 34). Note: Remote connection/protocol failed with: execution failed`\r\n\r\n### Improved Error Message\r\nIdeally bazel would identify a higher level error that more directly points to the cause. In this case it's not that the build cache failed internally but that it was inaccessible at all. Something like this would be much more helpful:\r\n\r\n`C++ compilation of rule '//xxxx:status' failed (Exit 34). Note: Remote rest cache couldn't be reached: http://my-build-cache-path:8081/cache`\r\n\r\n`C++ compilation of rule '//xxxx:status' failed (Exit 34). Note: Remote rest cache internal failure: http://my-build-cache-path:8081/cache - further explanation of internal error`\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug?\r\nConfigure `bazel.rc` with non-existent build cache:\r\n```\r\nbuild --spawn_strategy=remote --remote_rest_cache=http://non-existent:8081/cache\r\n```\r\n### What operating system are you running Bazel on?\r\nUbuntu 16.04\r\n\r\n### What's the output of `bazel info release`?\r\n```release 0.8.1```\r\n\r\n### What's the output of `git remote get-url origin ; git rev-parse master ; git rev-parse HEAD` ?\r\n\r\nn/a\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\n@ulfjack and @buchgr both created tests that verify the existing message\r\n\r\n### Any other information, logs, or outputs that you want to share?\r\n\r\nn/a\r\n\r\n@BillZito for tracking this issue", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "agoulti": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4390", "title": "Bazel installer failed to produce bazel binary", "body": "### Description of the problem / feature request:\r\n\r\nBazel installer failed to produce bazel binary\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\nThe same script usually works, but at some point it failed for unknown reason.\r\n\r\nOn 2018/01/05 around 00:37 EST, we obtained a nightly bazel release as follows:\r\n\r\n`curl --compressed -L https://ci.bazel.io/view/Bazel%20bootstrap%20and%20maintenance/job/bazel/job/nightly/lastSuccessfulBuild/artifact/node=linux-x86_64/variation=/bazel--installer-linux-x86_64.sh -o <redacted>/bazel--installer-linux-x86_64.sh`\r\n\r\nWe then ran the script:\r\n`<redacted>/bazel--installer-linux-x86_64.sh --prefix=<redacted>/foundry-demo-ascit.114572848`\r\n\r\nIt gave the following output:\r\n\r\n```\r\nBazel installer\r\n---------------\r\n\r\nBazel is bundled with software licensed under the GPLv2 with Classpath exception.\r\nYou can find the sources next to the installer on our release page:\r\n   https://github.com/bazelbuild/bazel/releases\r\n\r\n# Binary package at HEAD (@55f1e58)\r\n   - [Commit](https://github.com/bazelbuild/bazel/commit/55f1e58)\r\nUncompressing...chmod: cannot access `<redacted>/lib/bazel/bin/bazel': No such file or directory\r\n```\r\n\r\nWhen we inspected the directories, we found that the directory `<redacted>/lib/bazel/bin/` existed but was empty. Re-running the script succeeded.\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nGoobuntu\r\n\r\n### What's the output of `bazel info release`?\r\n\r\nN/A\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gimo": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4387", "title": "linkopts / cxxopts / defines specific to static or shared libraries", "body": "It would be nice to pass different linkopts/cxxopts/defines to the compiler depending on whether or not the library is being compiled as static or shared. I presume this problem hasn't shown up until now because linux handling of shared libraries doesn't usually require any specific code changes. However this functionality is needed to properly support windows where it is common to pass a compile time define indicating whether symbols should be compiled as dllexport or not.\r\n\r\nFor Example:\r\nboost-thread under windows requires BOOST_THREAD_BUILD_LIB=1 for static library builds and BOOST_THREAD_BUILD_DLL=1\r\n\r\nThis is one of the only blockers I have found for porting the codebase I work on to Bazel and so would be motivated to assist with the implementation. But I would need some guidance as to what this solution should look like.\r\n\r\n[`bazel-discuss thread`](https://groups.google.com/forum/#!topic/bazel-discuss/eEP4-GGoBts)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "EricBurnett": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4386", "title": "bazel hits a NullPointerException when --auth_credentials is passed a non-existent file", "body": "### Description of the problem / feature request / question:\r\nWhen running a build with --auth_credentials provided, but the referenced file not present, bazel hits a NullPointerException then spends about 70s waiting for its server to die. This should be handled more gracefully.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\nadd `--auth_credentials=blah` to an otherwise reasonable command (may need to be a remote build also, to hit the right code path; unclear at what time this credential actually gets parsed).\r\n\r\n### Environment info\r\n* Operating System:\r\nLinux (container: gcr.io/cloud-builders/bazel)\r\n\r\n* Bazel version (output of `bazel info release`):\r\n0.9.0\r\n\r\n###  Have you found anything relevant by searching the web?\r\nNope\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\nFull stdout:\r\n\r\nExtracting Bazel installation...\r\n...........................\r\nERROR: Could not open auth credentials file 'service_account_credential.json': service_account_credential.json (No such file or directory)\r\njava.lang.NullPointerException\r\n\tat com.google.common.base.Preconditions.checkNotNull(Preconditions.java:871)\r\n\tat com.google.devtools.build.lib.events.Event.<init>(Event.java:52)\r\n\tat com.google.devtools.build.lib.events.Event.error(Event.java:165)\r\n\tat com.google.devtools.build.lib.events.Event.error(Event.java:200)\r\n\tat com.google.devtools.build.lib.runtime.BlazeCommandDispatcher.execExclusively(BlazeCommandDispatcher.java:470)\r\n\tat com.google.devtools.build.lib.runtime.BlazeCommandDispatcher.exec(BlazeCommandDispatcher.java:218)\r\n\tat com.google.devtools.build.lib.runtime.CommandExecutor.exec(CommandExecutor.java:58)\r\n\tat com.google.devtools.build.lib.server.GrpcServerImpl.executeCommand(GrpcServerImpl.java:851)\r\n\tat com.google.devtools.build.lib.server.GrpcServerImpl.access$2100(GrpcServerImpl.java:109)\r\n\tat com.google.devtools.build.lib.server.GrpcServerImpl$2.lambda$run$0(GrpcServerImpl.java:916)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\njava.lang.NullPointerException\r\n\tat com.google.common.base.Preconditions.checkNotNull(Preconditions.java:871)\r\n\tat com.google.devtools.build.lib.events.Event.<init>(Event.java:52)\r\n\tat com.google.devtools.build.lib.events.Event.error(Event.java:165)\r\n\tat com.google.devtools.build.lib.events.Event.error(Event.java:200)\r\n\tat com.google.devtools.build.lib.runtime.BlazeCommandDispatcher.execExclusively(BlazeCommandDispatcher.java:470)\r\n\tat com.google.devtools.build.lib.runtime.BlazeCommandDispatcher.exec(BlazeCommandDispatcher.java:218)\r\n\tat com.google.devtools.build.lib.runtime.CommandExecutor.exec(CommandExecutor.java:58)\r\n\tat com.google.devtools.build.lib.server.GrpcServerImpl.executeCommand(GrpcServerImpl.java:851)\r\n\tat com.google.devtools.build.lib.server.GrpcServerImpl.access$2100(GrpcServerImpl.java:109)\r\n\tat com.google.devtools.build.lib.server.GrpcServerImpl$2.lambda$run$0(GrpcServerImpl.java:916)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\nWARNING: Waiting for server process to terminate (waited 5 seconds, waiting at most 60)\r\nWARNING: Waiting for server process to terminate (waited 10 seconds, waiting at most 60)\r\nWARNING: Waiting for server process to terminate (waited 30 seconds, waiting at most 60)\r\nINFO: Waited 60 seconds for server process (pid=21) to terminate.\r\nWARNING: Waiting for server process to terminate (waited 5 seconds, waiting at most 10)\r\nWARNING: Waiting for server process to terminate (waited 10 seconds, waiting at most 10)\r\nINFO: Waited 10 seconds for server process (pid=21) to terminate.\r\nAttempted to kill stale server process (pid=21) using SIGKILL, but it did not die in a timely fashion.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Fuuzetsu": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4384", "title": "Bazel crashes with NPE when trying to access transitive_compile_time_jars of some java_binary dependency", "body": "### Description of the problem / feature request / question:\r\n\r\nWe're writing bazel rules and one of the things we'd like to do is obtain information about Java dependencies, notably `dep[JavaInfo].transitive_compile_time_jars`. Sadly when I try to with what's a rather simple dependency, bazel throws NullPointerException and crashes.\r\n\r\nAs far as I remember, a couple of other fields in the same provider have the same issue but I focus on this field in my repro.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\nYou can find a prepared repository which exhibits the problem at https://github.com/Fuuzetsu/bazel-trans-classpath-repro/tree/185dac522019f15918b46cea7a9c1576e951e70e . There are instructions in the README along with all information about bazel version &c.. Briefly:\r\n\r\n* Clones repository with one of our products which contains some Java files.\r\n* Specifies a couple of `maven_jar`s in WORKSPACE which are needed to build.\r\n* Specifies `java_binary` which depends on those maven jars and uses files from the repository.\r\n* Defines a small helper rule `get_classpath` which has only a single purpose: output `transitive_compile_time_jars` of the aforementioned `java_binary` into a file.\r\n* Tries to build an instance of `get_classpath`: bazel crashes.\r\n\r\n### Environment info\r\n* Operating System:\r\n\r\n[NixOS](https://nixos.org/). Built from [nixpkgs](https://github.com/NixOS/nixpkgs) `4026ea9c8afd09b60896b861a04cc5748fdcdfb4`.\r\n\r\n* Bazel version (output of `bazel info release`):\r\n\r\n```\r\n$ bazel info release\r\nrelease 0.8.0- (@non-git)\r\n\r\n$ bazel version\r\nBuild label: 0.8.0- (@non-git)\r\nBuild target: bazel-out/k8-opt/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\r\nBuild time: Tue Jan 1 00:00:00 1980 (315532800)\r\nBuild timestamp: 315532800\r\nBuild timestamp as int: 315532800\r\n```\r\n\r\nBuild timestamps are irrelevant here due to `nix` package manager.\r\n\r\n* If `bazel info release` returns \"development version\" or \"(@non-git)\", please tell us what source tree you compiled Bazel from; git commit hash is appreciated (`git rev-parse HEAD`):\r\n\r\nhttps://github.com/bazelbuild/bazel/releases/download/0.8.0/bazel-0.8.0-dist.zip\r\n\r\n###  Have you found anything relevant by searching the web?\r\nI have not.\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\nSee README in aforementioned repository for part of the bazel stack trace.\r\n  \r\n  ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sharvil": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4383", "title": "Package runfiles along with C++ binaries in pkg_* rules", "body": "### Description of the problem / feature request / question:\r\n\r\n(https://groups.google.com/forum/#!topic/bazel-discuss/5r_Ajw_j-ZI for context)\r\n\r\nThe current pkg_* rules don't package runfiles along with C++ binaries. This behavior makes it difficult to deploy an entire C++ application to machines that don't have source access.\r\n\r\nCan we update the packaging rules to include runfiles along with binaries?\r\n\r\n### Environment info\r\n* Operating System:\r\nMacOS 10.13.2\r\n\r\n* Bazel version (output of `bazel info release`):\r\nrelease 0.8.1-homebrew", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wush978": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4374", "title": "compile bazel on centos6 successful but trigger /lib64/libc.so.6: version `GLIBC_2.14' not found", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\n\r\nThe compiled bazel executable yields the following errors:\r\n\r\n```\r\n[linuxbrew@3e67cadeb1b0 build-bazel]$ jenv exec output/bazel --help\r\nExtracting Bazel installation...\r\n...\r\nServer crashed during startup. Now printing '/home/linuxbrew/.cache/bazel/_bazel_linuxbrew/3f8a7cd0bf59ecd065c281daa40527cb/server/jvm.out':\r\nJNI initialization failed: /home/linuxbrew/.cache/bazel/_bazel_linuxbrew/install/f75975279c416ea3cf82411356d17f89/_embedded_binaries/libunix.so: /lib64/libc.so.6: version `GLIBC_2.14' not found (required\r\nby /home/linuxbrew/.cache/bazel/_bazel_linuxbrew/install/f75975279c416ea3cf82411356d17f89/_embedded_binaries/libunix.so).  Possibly your installation has been corrupted.\r\njava.lang.UnsatisfiedLinkError: /home/linuxbrew/.cache/bazel/_bazel_linuxbrew/install/f75975279c416ea3cf82411356d17f89/_embedded_binaries/libunix.so: /lib64/libc.so.6: version `GLIBC_2.14' not found (requ\r\nired by /home/linuxbrew/.cache/bazel/_bazel_linuxbrew/install/f75975279c416ea3cf82411356d17f89/_embedded_binaries/libunix.so)\r\n```\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\n```\r\ndocker pull wush978/bazel-glibc-centos6\r\ndocker run -it wush978/bazel-glibc-centos6 /bin/bash\r\n# under docker\r\ncd /tmp\r\nmkdir build-bazel2\r\ncd build-bazel2\r\njenv local 1.8\r\nunzip ~/.cache/Homebrew/bazel-0.9.0.zip\r\njenv exec ./compile.sh\r\njenv exec output/bazel\r\n```\r\n\r\n### Environment info\r\n\r\n* Operating System: Centos 6\r\n* Bazel version (output of `bazel info release`): 0.9.0\r\n* There are two glibc:\r\n    - Host glibc: 2.12\r\n    - linuxbrew glibc: 2.23\r\n* java 1.8\r\n\r\n###  Have you found anything relevant by searching the web?\r\n(e.g. [StackOverflow answers](http://stackoverflow.com/questions/tagged/bazel),\r\n[GitHub issues](https://github.com/bazelbuild/bazel/issues),\r\nemail threads on the [`bazel-discuss`](https://groups.google.com/forum/#!forum/bazel-discuss) Google group)\r\n\r\n- https://github.com/bazelbuild/bazel/issues/4107 \r\n- https://github.com/tensorflow/tensorflow/issues/527\r\n\r\nThere are some instruction of modifying CROSSTOOL which is no effect in version 0.9.\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n(If they are large, please upload as attachment or provide link).\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mboes": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4370", "title": "Expose CcSkylarkApiProvider as a first-class provider in Skylark", "body": "### Description of the feature request\r\n\r\nIt's possible to write Skylark rules that have `cc_*` rules as dependencies. Via the `CcSkylarkApiProvider`, it's possible for these Skylark rules to e.g. collect the list of transitive header files from these dependencies. But,\r\n\r\n1. it's not possible to write a Skylark rule that itself provides `CcSkylarkApiProvider`,\r\n2. it's not possible to test whether a dependency provides `CcSkylarkApiProvider`.\r\n\r\nA workaround for (2) is:\r\n\r\n```bzl\r\n[dep for dep in ctx.attr.deps if hasattr(dep, \"cc\")]\r\n```\r\n\r\nwhere one would expect to be able to use:\r\n\r\n```bzl\r\n[dep for dep in ctx.attr.deps if CcSkylarkApiProvider in dep]\r\n```\r\n\r\nUnderlying both (1) and (2) is the fact that unlike say `DefaultInfo` and `OutputGroupInfo`, `CcSkylarkApiProvider`, along with many other native providers, are not exported to Skylark as a global.\r\n\r\nMy use case for (1) is writing a replacement for `cc_import` in Skylark, since that rule does not currently provide `CcSkylarkApiProvider`.\r\n\r\n### Environment info\r\n* Bazel version (output of `bazel info release`): 0.9.0\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nI've seen mention of \"Bazel <X> sandwiches\" where <X> is some language. e.g. https://blog.bazel.build/2017/03/07/java-sandwich.html. It looks like for Java at least, the equivalent of (2) above is possible. Though the blog post mentions that the equivalent of (1) is still not possible. The Java functionality is provided via the `java_common` struct. For C/C++, the corresponding struct [`cc_common`](https://docs.bazel.build/versions/master/skylark/lib/cc_common.html) does not expose the corresponding methods.\r\n\r\nAlso related: https://github.com/bazelbuild/bazel/issues/2163\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n(If they are large, please upload as attachment or provide link).\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4366", "title": "Allow private attributes as outputs template placeholders", "body": "### Description of the feature request:\r\n\r\nConsider the following rule:\r\n\r\n```bzl\r\nmy_rule = rule(\r\n  _my_rule_impl,\r\n  outputs = {\r\n    \"conf\": \"%{name}-%{_version}.conf\",\r\n  },\r\n  attrs = { ..., \"_version\": attr.string(default = \"1.0.0\") },\r\n)\r\n```\r\n\r\nThis definition doesn't work. It fails with:\r\n\r\n```\r\nFor attribute 'conf' in outputs: Invalid placeholder(s) in template\r\n```\r\n\r\nThe reason is that `_version` is a private attribute. But citing private attributes in outputs sounds legit to me, since the spec of the outputs is a property of rule that itself has a private attribute. I could work around this problem using `declare_file` etc, so it sounds to me like an arbitrary limitation that private variables can't be cited in the outputs template.\r\n\r\n### Environment info\r\n* Bazel version (output of `bazel info release`): release 0.9.0- (@non-git)                                         \r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nNo relevant GitHub issues that I could find, except possibly #2467.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4354", "title": "test_rules not --allow_incompatible_changes compliant", "body": "### Description of the problem:\r\n\r\nCode that uses `@bazel_tools//tools/build_rules:test_rules.bzl` directly or indirectly fails to execute when `--allow_incompatible_changes` is turned on. This in turn makes impossible to turn on `--allow_incompatible_changes` in any project that defines a rule test using `rule_test` anywhere.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\ndefine a `BUILD` file with the following content:\r\n\r\n```bzl\r\ngenrule(\r\n    name = \"foo\",\r\n    srcs = [],\r\n    outs = [\"file\"],\r\n    cmd = \"touch \\\"$@\\\"\",\r\n)\r\n\r\nrule_test(\r\n  name = \"test\",\r\n  generates = [\"file\"],\r\n  rule = \":foo\",\r\n)\r\n```\r\n\r\nThe output will be:\r\n\r\n```\r\nERROR: [...]\r\nTraceback (most recent call last):\r\n[...]\r\n\"/home/mboes/.cache/bazel/_bazel_mboes/822aa44857e17f47d08bb198503f3032/external/bazel_tools/tools/build_rules/test_rules.bzl\", line 208, in _rule_test_impl\r\n\t\tsorted([strip_prefix(prefix, f.short_pa...])\r\n\tFile \"/home/mboes/.cache/bazel/_bazel_mboes/822aa44857e17f47d08bb198503f3032/external/bazel_tools/tools/build_rules/test_rules.bzl\", line 208, in sorted\r\n\t\t[strip_prefix(prefix, f.short_path) for f in rule_.files]\r\ntype 'depset' is not iterable. Use the `to_list()` method to get a list. Use --incompatible_depset_is_not_iterable=false to temporarily disable this check.\r\n[...]\r\n```\r\n\r\n### Environment info\r\n\r\n* Bazel version (output of `bazel info release`):\r\n\r\nrelease 0.8.0", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4355", "title": "Make test_rules.bzl --all_incompatible_changes compliant.", "body": "Fixes #4354.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cushon": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4364", "title": "'contributing > Creating an IntelliJ project' docs are stale", "body": "https://bazel.build/contributing.html says\r\n\r\n> Select Import from workspace and choose the `scripts/ij.bazelbuild` file as the Project view.\r\n\r\n`scripts/ij.bazelbuild` doesn't exist, I think that should be `scripts/ij.bazelproject`", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/860af5be10b6bad68144d9d2d34173e86b40268c", "message": "Consolidate Error Prone resource handling\n\nFixes bazelbuild/bazel#4483\n\nPiperOrigin-RevId: 182847474"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/3ac310e3c870cd70cef26354ee34b3708584db84", "message": "Minimal support for compiling module-infos\n\nPiperOrigin-RevId: 182461095"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/4dce09cdc7914d76401a6f77fd78e0176d173dd1", "message": "Add a missing format argument to an error message\n\nPiperOrigin-RevId: 182396321"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/adecfb2101a1bb19c53ab6c0361cd59073f8b723", "message": "Update turbine version\n\nChange-Id: Icf38365fc7f3bf2d6d1ef11e7c07504a222969f6"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/354d675bdc468009b05ba08a9f7f371092bf239a", "message": "Add missing resources to jopt-simple\n\nThis was causing jarjar --help to crash.\n\nChange-Id: Ia8e654cf3f45225d00001a75b10d8a1a6d261401"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/6e945ced1f3d61d2497626db9138127bcb302c77", "message": "Update javac version to 9+181-r4173-1\n\nChange-Id: I05fa85967317c4581081adfc620e24a7c6322669"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/6f95124c3453006149eac955d7620540c7d6bda4", "message": "Normalize javacopts for javac-turbine\n\nPiperOrigin-RevId: 182130131"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/d087df0332b71704cc55311027d76bed6010696a", "message": "If a compilation uses both -source and --release, prefer --release\n\njavac does not allow both -source and --release to be set, which makes it\ndifficult to migrate to --release when javacopts are combined from\nmultiple sources.\n\nPiperOrigin-RevId: 182113897"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/5344498e36c03c9b8528a3988ee50632f91e5667", "message": "Clean up after https://github.com/bazelbuild/bazel/commit/3864a45afa368473a4a6a90d69edb48cb67d367a\n\nPiperOrigin-RevId: 181940016"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/2c61efb2839eda2e6385ef10137b426db4bd31bc", "message": "Add a TODO\n\nPiperOrigin-RevId: 181908311"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/7270c9398d9a33ee78a868515812af7814587271", "message": "Avoid mixing -source and --release\n\njavac doesn't allow both to be set, so when defaulting to target\nJava 8 use --release if the javacopts already include a\n--release flag.\n\nPiperOrigin-RevId: 181777670"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/5ffcd12ec9cb02b7d24c39cfd74f24e459671788", "message": "Fix breakage caused by unknown commit\n\nPiperOrigin-RevId: 181703395"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/3613c0461e56170a32fa42e23b2e2f299d00932a", "message": "Require --javacopts to be terminated with --\n\nPiperOrigin-RevId: 181687846"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/3864a45afa368473a4a6a90d69edb48cb67d367a", "message": "Add support for native header outputs to {java,android}_library\n\nPiperOrigin-RevId: 181684446"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/22ccdd1ebe1dc495e05d894a3325f6b05e681fb3", "message": "Fix turbine command lines with empty javacopts\n\nSee #4422\n\nPiperOrigin-RevId: 181497117"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/65c13dd5a4c1b4b5a072f7680b8f1cf3c5079b52", "message": "Fix StreamResourceLeak error\n\nFixes #4414\n\nChange-Id: I06eac192b5be84bd84190980fbcd05574e3a4439\nPiperOrigin-RevId: 181465165"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/4ba60d0631afc6be2ec055813d7b97fd96d1924e", "message": "Update Error Prone version\n\nChange-Id: I94cdf0ea3e219887515ee52a86bd6d5d65681c67"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/e00b457a727e8511e7330d6a0ca5b98898865aaf", "message": "Use Iterable#forEach instead of `.stream().forEach`.\n\nPiperOrigin-RevId: 181180652"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/8ab32fcb0affb45a9c299cac580f1251fb6a16bc", "message": "Make SJD @Generated handling compatible with javax.annotation.processing.Generated\n\nPiperOrigin-RevId: 181012373"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/11389d548b45d0467138eefb7eee806c1290b336", "message": "Batch SJD errors for an entire compilation\n\ninstead of emitting them one file at a time. This provides users\nwith a single add_dep command instead of one-per-file.\n\nPiperOrigin-RevId: 180979982"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/54177d746c44e0117e0c9c068dd5885303111876", "message": "Add support for native header outputs to JavaBuilder\n\nAdd a --native_header_output flag which, if set, causes JavaBuilder to set\nthe equivalent of `javac -h`, and then collect all generated headers and\nwrite them to a jar archive at the given path.\n\nPiperOrigin-RevId: 180954084"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/bbebe815a2580904f095583364770f5f6bf71dbb", "message": "Automatic code cleanup.\n\nPiperOrigin-RevId: 180878300"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/a8e5eddbf121f75173f580d30c1f69e9e1f0a568", "message": "RemappingClassAdapter is deprecated, use ClassRemapper instead\n\nChange-Id: I232828d44447ee66019ff0fedb5ebc18b2e7aee9"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/de0812923a8b79b4221cec00c8d6c30ce8eee931", "message": "Delete unused jarjar artifact\n\nFollow-up to 55828e256af4fe04e95f1c342a73d649d8525435.\n\nChange-Id: Ie765f0797e8b85c3c8cb7735f11e021912de3de5"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/7ba7276d0111a6e48616e626f62d3e25cbceb826", "message": "Update turbine version\n\nChange-Id: Iabf2d196d5050ab5ac81534663f655d80ba21e41"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/24094922", "body": "It's on by default for Java compilations if `--java_header_compilation` is enabled. (It used to have a separate flag, but that was removed in 923d7df521f67d031b288180560848bd35e20976.)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/24094922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "gongwei": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4361", "title": "0.9.0 bazel build fail with gRPC remote cache", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\nI use bazel remote worker as a cache server, build would fail if local fallback is disabled (I want to make sure remote cache is really working).\r\n\r\n_If asking a question or requesting a feature, also tell us about the underlying problem you're trying to solve._\r\n\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\nremote worker setting: \r\n        bazel-bin/src/tools/remote_worker/remote_worker   --work_path=/tmp/test  --listen_port=8080\r\n\r\nbazel setting:\r\n  write_to_bazelrc \"build --spawn_strategy=remote\"\r\n  write_to_bazelrc \"build --strategy=Javac=remote\"\r\n  write_to_bazelrc \"build --genrule_strategy=remote\"\r\n  write_to_bazelrc \"build --remote_cache=10.101.219.71:8080\"\r\n\r\n### Environment info\r\n* Operating System:\r\nlinux redhat\r\n\r\n* Bazel version (output of `bazel info release`):\r\n0.9.0\r\n\r\n* If `bazel info release` returns \"development version\" or \"(@non-git)\", please tell us what source tree you compiled Bazel from; git commit hash is appreciated (`git rev-parse HEAD`):\r\n\r\n\r\n###  Have you found anything relevant by searching the web?\r\n(e.g. [StackOverflow answers](http://stackoverflow.com/questions/tagged/bazel),\r\n[GitHub issues](https://github.com/bazelbuild/bazel/issues),\r\nemail threads on the [`bazel-discuss`](https://groups.google.com/forum/#!forum/bazel-discuss) Google group)\r\n\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n(If they are large, please upload as attachment or provide link).\r\nERROR: /home/admin/wei.gong/tensorflow/tensorflow/compiler/xla/tests/BUILD:115:1: Linking of rule '//tensorflow/compiler/xla/tests:local_client_aot_test_helper' failed (Exit 34). Note: Remote connection/protocol failed with: execution failed: com.google.devtools.build.lib.remote.Retrier$RetryException: Call failed after exhausting retry attempts: 5\r\n        at com.google.devtools.build.lib.remote.Retrier.execute(Retrier.java:242)\r\n        at com.google.devtools.build.lib.remote.RemoteRetrier.execute(RemoteRetrier.java:101)\r\n        at com.google.devtools.build.lib.remote.GrpcRemoteCache.download(GrpcRemoteCache.java:203)\r\n        at com.google.devtools.build.lib.remote.RemoteSpawnRunner.downloadRemoteResults(RemoteSpawnRunner.java:206)\r\n        at com.google.devtools.build.lib.remote.RemoteSpawnRunner.exec(RemoteSpawnRunner.java:158)\r\n        at com.google.devtools.build.lib.exec.AbstractSpawnStrategy.exec(AbstractSpawnStrategy.java:97)\r\n        at com.google.devtools.build.lib.exec.AbstractSpawnStrategy.exec(AbstractSpawnStrategy.java:65)\r\n        at com.google.devtools.build.lib.rules.cpp.CppLinkAction.execute(CppLinkAction.java:321)\r\n        at com.google.devtools.build.lib.skyframe.SkyframeActionExecutor.executeActionTask(SkyframeActionExecutor.java:860)\r\n        at com.google.devtools.build.lib.skyframe.SkyframeActionExecutor.prepareScheduleExecuteAndCompleteAction(SkyframeActionExecutor.java:803)\r\n        at com.google.devtools.build.lib.skyframe.SkyframeActionExecutor.access$900(SkyframeActionExecutor.java:110)\r\n        at com.google.devtools.build.lib.skyframe.SkyframeActionExecutor$ActionRunner.call(SkyframeActionExecutor.java:671)\r\n        at com.google.devtools.build.lib.skyframe.SkyframeActionExecutor$ActionRunner.call(SkyframeActionExecutor.java:628)\r\n        at java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n        at com.google.devtools.build.lib.skyframe.SkyframeActionExecutor.executeAction(SkyframeActionExecutor.java:412)\r\n        at com.google.devtools.build.lib.skyframe.ActionExecutionFunction.checkCacheAndExecuteIfNeeded(ActionExecutionFunction.java:444)\r\n        at com.google.devtools.build.lib.skyframe.ActionExecutionFunction.compute(ActionExecutionFunction.java:201)\r\n        at com.google.devtools.build.skyframe.AbstractParallelEvaluator$Evaluate.run(AbstractParallelEvaluator.java:340)\r\n        at com.google.devtools.build.lib.concurrent.AbstractQueueVisitor$WrappedRunnable.run(AbstractQueueVisitor.java:352)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n        at java.lang.Thread.run(Thread.java:748)\r\nCaused by: io.grpc.StatusRuntimeException: UNKNOWN\r\n        at io.grpc.Status.asRuntimeException(Status.java:526)\r\n        at io.grpc.stub.ClientCalls$BlockingResponseStream.hasNext(ClientCalls.java:523)\r\n        at com.google.devtools.build.lib.remote.GrpcRemoteCache.readBlob(GrpcRemoteCache.java:287)\r\n        at com.google.devtools.build.lib.remote.GrpcRemoteCache.lambda$download$1(GrpcRemoteCache.java:206)\r\n        at com.google.devtools.build.lib.remote.Retrier.execute(Retrier.java:220)\r\n        ... 21 more\r\nINFO: Elapsed time: 1203.491s, Critical Path: 286.69s\r\nFAILED: Build did NOT complete successfully\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "susiwen8": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4353", "title": "Bazel 0.9 stop working on Windows10", "body": "I installed Bazel 0.9 on Windows10 by Chocolatey, but when I run bazel, there is pop out window to tell me \"bazel.exe has stopped working\".  Does this occur to anyone else?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "denis-zhdanov": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4349", "title": "Please support javac plugins", "body": "*Bazel* supports annotations processors only at the moment - [java_plugin](https://docs.bazel.build/versions/master/be/java.html#java_plugin):   \r\n\r\n```\r\njava_plugin defines plugins for the Java compiler run by Bazel. At the moment, the only supported kind of plugins are annotation processors.\r\n```\r\nA sample javac plugin is [Traute](http://traute.oss.harmonysoft.tech/)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mmorearty": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4348", "title": "--sandbox_debug output gets uploaded to remote cache", "body": "### Description of the problem / feature request / question:\r\n\r\nI could see how this could be quite hard to avoid, and might even be considered WAI, but it's probably not optimal behavior from the perspective of users:\r\n\r\nIf `--sandbox_debug` is used, and the remote cache is also used, then the full output of `--sandbox_debug` is uploaded to the remote cache for every command that is run. This means that future downloads from the cache by other users will clutter the screen with a lot of the `--sandbox_debug` output.\r\n\r\nIn my case, I had `--sandbox_debug` on while doing some debugging of our Bazel config. I left it on for a little while, so thousands of my build artifacts got uploaded. Later, after a `bazel clean` and then a new build *without* `--sandbox_debug`, there was a long stream of sandbox-debug output.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\n```bash\r\nbazel build --sandbox_debug --experimental_remote_spawn_cache --remote_rest_cache=http://localhost:13000 :main\r\n\r\nbazel clean\r\n\r\nbazel build --experimental_remote_spawn_cache --remote_rest_cache=http://localhost:13000 :main\r\n```\r\n\r\nChange `http://localhost:13000` to the location of your remote cache, and change `:main` to any target you have.\r\n\r\nThe second `bazel build` will display the `--sandbox_debug` outpu even though it was not on the command line.\r\n\r\n### Environment info\r\n* Operating System: Linux\r\n* Bazel version (output of `bazel info release`): 0.9.0", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4284", "title": "local_repository's \"bazel-<subrepo>\" symlink causes @subrepo//... to fail", "body": "### Description of the problem / feature request / question:\r\n\r\nSuppose I have a top-level workspace named `toprepo`, and it pulls in a `local_repository` named `subrepo`.\r\n\r\nIf the `subrepo` directory contains Bazel's convenience symlinks (bazel-out, bazel-bin, etc.), then most of them don't cause any problems; but the `bazel-subrepo` one does cause a problem.\r\n\r\nIf you are in `toprepo`, then the expression `@subrepo//...` will navigate into the `bazel-subrepo` symlink, looking for `BUILD` files, and it will get confused.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\nIn `~/toprepo`, put these files:\r\n\r\n`WORKSPACE`:\r\n\r\n```python\r\nworkspace(name = \"toprepo\")\r\n\r\nlocal_repository(\r\n    name = \"subrepo\",\r\n    path = \"../subrepo\")\r\n```\r\n\r\n`BUILD`: empty file\r\n\r\nIn `~/subrepo`, put these files:\r\n\r\n`WORKSPACE`:\r\n\r\n```python\r\nworkspace(name = \"subrepo\")\r\n```\r\n\r\n`BUILD`:\r\n\r\n```python\r\nsh_test(\r\n    name = \"subtest\",\r\n    srcs = [\"foo.sh\"]\r\n)\r\n```\r\n\r\n`foo.sh`:\r\n\r\n```bash\r\n#!/usr/bin/env bash\r\necho hi from foo.sh\r\n```\r\n\r\nThen: starting in `toprepo`: `bazel test @subrepo//...`\r\n\r\nResult: It works (runs one test).\r\n\r\nNow go into `subrepo` and do `bazel test //...`\r\n\r\nResult: It works (runs the same test), but also, the convenience symlinks have now been created: bazel-subrepo, bazel-bin, etc.\r\n\r\nNow go back to `toprepo` and run tests again: `bazel test @subrepo//...`\r\n\r\nResult: Error messages:\r\n\r\n```\r\nERROR: error loading package '@subrepo//bazel-subrepo/external/bazel_tools/src/main/protobuf': Extension file not found. Unable to load package for '@subrepo//tools/build_rules:utilities.bzl': BUILD file not found on package path\r\nERROR: error loading package '@subrepo//bazel-subrepo/external/bazel_tools/src/main/protobuf': Extension file not found. Unable to load package for '@subrepo//tools/build_rules:utilities.bzl': BUILD file not found on package path\r\nINFO: Elapsed time: 0.116s\r\nFAILED: Build did NOT complete successfully (12 packages loaded)\r\n    currently loading: @subrepo//bazel-subrepo/external/bazel_tools/src/main/protobuf ... (4 packages)\r\nERROR: Couldn't start the build. Unable to run tests\r\n```\r\n\r\nIt seems that subrepo's `bazel-subrepo` symlink is the only one that is causing a problem. If you delete that one symlink, but leave all the others, the problem goes away.\r\n\r\n### Environment info\r\n* Operating System: macOS 10.12.6 (Sierra)\r\n* Bazel version (output of `bazel info release`): 0.8.1", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4228", "title": "The same empty file written to the remote cache multiple times", "body": "### Description of the problem / feature request / question:\r\n\r\nI think that the same zero-byte file is written to the remote cache (content-addressable storage, CAS) twice each time a genrule is run.\r\n\r\nI don't think this breaks any functionality; but it probably slows Bazel down a little.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\nSet up a remote cache, e.g. nginx. In this example, I set up a remote cache on localhost port 8080.\r\n\r\nBUILD file:\r\n\r\n```python\r\ngenrule(\r\n    name = \"gen1\",\r\n    srcs = [\"gen1.in\"],\r\n    outs = [\"gen1.out\"],\r\n    cmd = \"cp $< $@\"\r\n)\r\n```\r\n\r\nThen make a `gen1.in` file with any text in it.\r\n\r\nRun:\r\n\r\n```bash\r\nbazel build --spawn_strategy=remote --remote_rest_cache=http://localhost:8080 :gen1\r\n```\r\n\r\nThen look at the log file of your remote cache. In my case, I see a `GET` request (this is an attempt to see if the final output is in the cache); then, after that returns a 404, I see four `PUT` requests. Note that two of them are identical. If you download /cas/d41d8cd98f00b204e9800998ecf8427e (with `curl http://localhost:8000/cas/d41d8cd98f00b204e9800998ecf8427e`), you will see that it's an empty file.\r\n\r\n```\r\nGET /ac/785858acef65db774c552415c8f4299b 404\r\nPUT /cas/eac67abc9f8774df064db9e5868633b0 200\r\nPUT /cas/d41d8cd98f00b204e9800998ecf8427e 200\r\nPUT /cas/d41d8cd98f00b204e9800998ecf8427e 200\r\nPUT /ac/785858acef65db774c552415c8f4299b 200\r\n```\r\n\r\n### Environment info\r\n* Operating System:\r\n\r\nMac and Linux.\r\n\r\n* Bazel version (output of `bazel info release`):\r\n\r\n0.8.0", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4153", "title": "Proposal: Overhaul command line args for choosing a spawn strategy", "body": "This is a proposal for a pretty big change to the command line arguments that are used to choose a build strategy. Please consider it to be a design doc of sorts. It's a strawman; probably needs improvement. It's based on our experiences at Asana, and a number of complex scenarios we have run into.\r\n\r\n## Introduction\r\n\r\nThere are currently a number of command line arguments that are used to choose which spawn strategy (e.g. standalone, sandboxed, worker, remote) is used for a given action. Each of these command line arguments serves a specific need; but taken as a whole, they (a) are somewhat difficult to learn, and (b) make it difficult to express some commonly desired workflows.\r\n\r\nHere are some (all?) of the current flags:\r\n\r\n* `--spawn_strategy=...`: specify the overall default strategy\r\n* `--genrule_strategy=...`: specify the strategy to use for genrules, if different from `spawn_strategy`\r\n* `--strategy=<mnemonic>=...`: specify an override, the strategy to use with a specific mnemonic\r\n* `--worker_sandboxing`: doesn't actually choose a spawn strategy, but it's related \u2014 turns on sandboxing for persistent workers\r\n\r\nAlso, currently the strategy names `local` and `standalone` are synonyms. Apparently `local` is the old, deprecated name, and `standalone` is the preferred name meaning \"a regular, local, non-sandboxed, non-worker build.\" In this document, if I use the word \"local\", I mean \"any action that is running on the same machine that Bazel is running on.\" In other words, \"local\" is the opposite of \"remote\"; but in my terminology, a local build might be `standalone` or `sandboxed` or `worker`.\r\n\r\n## Some current problems\r\n\r\n* If you want to use a remote cache, and fall back to a local build (`--spawn_strategy=remote --remote_rest_cache=...`), the local build will always be `standalone`. There is no way to tell Bazel to fall back to `worker` or `sandboxed`.\r\n* If you specify `worker` but, for whatever reason, the action can't be run in worker, it always falls back to `standalone`. No way to specify `sandboxed`.\r\n* Worker sandboxing (`--worker_sandboxing`) is separate from other sandboxing (`--spawn_strategy=sandboxed`). This could lead to lack of clarity on the part of the developer: They might think they have turned on safe, fully sandboxed builds with `--spawn_strategy=sandboxed`, when in fact anything they run in a worker isn't actually safe.\r\n* In more complex scenarios, switching between `sandboxed` and `standalone` can require numerous changes to the command line. For example, as mentioned above, if you are using workers then it might require changing both the `--spawn_strategy` and the `--worker_sandboxing` arguments. Or, suppose you usually use `remote`, but you have several specific actions that you don't want to be cached remotely. So you might have a bazelrc file that looks like this:\r\n\r\n        build --spawn_strategy=remote\r\n        build --strategy=SpecialCase1=standalone\r\n        build --strategy=SpecialCase2=standalone\r\n        build --strategy=SpecialCase3=standalone\r\n        build --strategy=SpecialCase4=standalone\r\n        build --strategy=SpecialCase5=standalone\r\n\r\n    Switching that to use sandboxing will require changing five lines. Putting `standalone` did not actually express your goal; your goal was actually \"do the build locally, somehow; don't use remote.\"\r\n* Finally, a different kind of problem: Today's command-line flags can take a long time to get comfortable with. For example, the difference between `--spawn_strategy` and `--strategy`; questions such as \"if an item is not in the cache, what sort of local build does it fall back to, and can I control that\" (I learned by reading the source); and so on.\r\n\r\n## Strategy selection goals\r\n\r\nI feel that it would be desirable for the strategy-related command line arguments had the following characteristics:\r\n\r\n* A flag can apply to either all mnemonics, or to only one. For example, eliminate the difference between `--spawn_strategy` and `--strategy`.\r\n* A flag expresses one *characteristic* of the strategy selection process; it does not entirely define what strategy to use. For example, \"when doing any local build, use sandboxing if possible\" (separate from specifying whether to use a worker), or \"if the remote cache does not contain the artifacts, do some kind of local build\" (without defining what kind).\r\n* The flags are a little easier for a newcomer to get a handle in, in terms of the relationships between them.\r\n\r\nIt would then be up to Bazel to take this set of guidelines, and resolve it to an appropriate build action.\r\n\r\n## Examples\r\n\r\nA complex scenario might play out like this:\r\n\r\n1. The args say to allow downloads from the remote cache (maybe with just `--remote_rest_cache=...`, no more args needed). So Bazel queries the remote cache, but does not find the build artifacts.\r\n2. The args say local builds are allowed (`--remote_local_fallback`, on by default). So Bazel needs to decide which local strategy to use.\r\n3. The args say to allow persistent workers for any actions that support them (maybe `--workers` or something). But this action does not.\r\n4. The args say to use sandboxing when possible (maybe `--sandboxing`). So we do a local, sandboxed build.\r\n5. The args say that locally built, sandboxed artifacts are safe to upload to the remote cache (maybe `--remote_upload_sandboxed_results`). So Bazel uploads the build artifacts.\r\n\r\nAnother scenario, this time with a non-sandboxed local build:\r\n\r\n1. same as above\r\n2. same as above\r\n3. same as above\r\n4. The args allow sandboxing for most actions, but not this one (maybe `--sandboxing` plus `--nosandboxing=ThisMnemonic`). So, no sandboxing.\r\n5. Bazel does a `standalone` build.\r\n6. The args say that locally built, *sandboxed* artifacts are safe to upload to the remote cache, but *un-sandboxed* local builds are not safe (maybe `--noremote_upload_standalone_results`; the default). So Bazel does *not* upload the build artifacts.\r\n\r\nAnother scenario, with no remote cache, and with a worker:\r\n\r\n1. No remote cache is specified. So, we will do a local build.\r\n2. The args say to allow persistent workers for any actions that support them (maybe `--workers` or something). This action *does* support workers. So, great.\r\n3. The args say to use sandboxing when available (`--sandboxing`). So, we do the build in a sandboxed worker.\r\n\r\n## Strategy selection algorithm\r\n\r\nThe strategy selection approach is pretty clearly indicated by the above examples. To spell it out:\r\n\r\n1. If there is a remote cache, check to see if the artifacts are there already. they are, we're done. Otherwise, continue to step 2.\r\n2. Choose between remote or local execution. If remote execution is available, choose that, and we're done. Otherwise choose local, and continue to step 3.\r\n3. Choose worker vs. non-worker.\r\n4. Choose sandboxed vs. non-sandboxed.\r\n5. Do the local build. At this point we are doing some combination of (worker/non-worker) + (sandboxed/non-sandboxed).\r\n6. After the build, if there is *not* a remote cache, we're done. Otherwise, continue to step 7.\r\n7. If the build was sandboxed, and sandboxed artifacts are allowed to upload to the remote cache, then upload.\r\n8. If the build was non-sandboxed, and non-sandboxed artifacts are allowed to upload to the remote cache, then upload.\r\n\r\n## Suggested flags\r\n\r\nAlthough I'm happy with the *spirit* of the following suggestions, I'm not sure if these are the best names for the flags.\r\n\r\n**Remote execution:**\r\n\r\n* I don't really know; I don't have any experience with remote execution. But I think `--remote_executor`, with nothing more, would imply that remote execution should be used.\r\n\r\n**Remote caching:**\r\n\r\n* `--remote_rest_cache=...`: Same as today. Implies allowing downloads from the remote cache, and falling back to a local build.\r\n* `--[no]remote_upload_sandboxed_results` (default true) and `--[no]remote_upload_nonsandboxed_results` (default false). Note, it says `nonsandboxed` instead of `standalone`, because e.g. non-sandboxed worker builds should fit in the `remote_upload_nonsandboxed_results` category.\r\n* `--[no]remote_upload_worker_results` (default true). (As an aside, It doesn't make any sense to add a `--[no]remote_upload_nonworker_results`, because that is implied by the presence of `--remote_rest_cache`.)\r\n\r\nWith those defaults for remote-cache uploads, a sandboxed worker build would upload; a non-sandboxed worker build would not.\r\n\r\n**Sandboxing:**\r\n\r\n* `--[no]sandboxing`: This would mean: \"For all mnemonics: *If* we are doing a local build, and if sandboxes are supported, do it in a sandbox.\" Or with \"no\" prefix, never use a sandbox. Applies to local worker worker in addition to local non-worker actions.\r\n* `--[no]sandboxing=<mnemonic>`: Same, but for a specific mnemonic.\r\n\r\n(Open issue: Maybe it should be `--strategy_sandboxing` instead of `--sandboxing`)\r\n\r\n**Workers:**\r\n\r\n* `--[no]workers`: This would mean: \"For all mnemonics: *If* we are doing a local build, and if persistent workers are supported, do it in a persistent worker.\" Or with \"no\" prefix, never use a persistent worker.\r\n* `--[no]workers=<mnemonic>`: Same, but for a specific mnemonic.\r\n* `--[no]worker_sandboxing`: Whether to allow worker+sandbox. It's important to default to true (the opposite of today's default) in order to make the model consistent and easy to undertstand.\r\n\r\n(Open issue: Maybe it should be `--strategy_workers` instead of `--workers`. But that would not affect `--worker_sandboxing`, which is in a separate option group.)\r\n\r\n## No need for strategy-specific \"fallback\" strategies\r\n\r\nOne result of all of the above is that the list of strategies now becomes a \"flat\" list, with no need for one strategy to know about any others. (The worker-with-sandboxing scenario is a little subtle; but that is basically just the worker strategy with an option for whether to use sandboxing.)\r\n\r\nAs the code is written today, many strategies -- remote, worker, and sandbox -- need a \"fallback\" capability right in the runner code (and they usually fall back to standalone). With this new approach, the selection process would happen before we get to the runner; the runner can just do its work.\r\n\r\nNot only does this make the code simpler, but it also (as described extensively above) simplifies the mental model for the user. There is no need to ask questions like \"what does a remote build fall back to\"; it just falls back to an appropriate kind of local build.\r\n\r\nIn fact, to some degree, the concept of \"strategies\" becomes less important to the end user. To the user, it's more of just a multidimensional selection process of different characteristics of the build (remote execution yes/no, remote cache yes/no, worker yes/no, sandboxed yes/no). It's a little easier (for me anyway) to think of it that way than to think of it as \"I'm using the remote strategy, which fell back to worker\" or \"I'm using the worker strategy, which fell back to standalone\".\r\n\r\n## The \"problem\" scenarios from above\r\n\r\nWith these new flags, here is how the problem scenarios from above would be handled:\r\n\r\n* If you want to use a remote cache, and fall back to a local build, just use `--remote_rest_cache=...`; the rest of the selection will fall out naturally from other flags.\r\n* If you specify `worker` but, for whatever reason, the action can't be run in worker, it will fall back to sandboxed if that has been specified and is available.\r\n* Worker sandboxing is (by default) separate from other sandboxing. So if you turn on sandboxing, you have turned it on for everything.\r\n* Switching between `sandboxed` and `standalone` now just requires `--[no]sandboxing`, and nothing more.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4153/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tybook": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4343", "title": "The `no-cache` tag / execution requirement is broken in 0.9.0", "body": "### Description of the problem / feature request / question:\r\n\r\nAs of release 0.9.0, setting the `no-cache` execution requirement on a Skylark rule or the `no-cache` tag on a built-in rule does not properly prevent a target's output from being uploaded to the remote cache server. It _does_ prevent the output from being downloaded from the server at build time, so we're getting the worst of both worlds here: storage space usage on the remote cache server but no build acceleration. \r\n\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\nRemote caching enabled in `tools/bazel.rc` via\r\n```\r\nbuild --experimental_remote_spawn_cache\r\nbuild --remote_rest_cache=http://remote.cache.server.url\r\n```\r\n\r\n1. Build a target with the `no-cache` tag or execution requirement set.\r\n2. Check your remote cache server and notice its output was uploaded\r\n3. `bazel clean` to clear local cache\r\n4. Build the target again and notice it is rebuilt locally, not downloading from the remote cache\r\n\r\n### Environment info\r\n* Operating System:\r\nUbuntu 16.04\r\n\r\n* Bazel version (output of `bazel info release`):\r\n`release 0.9.0`\r\n\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n(If they are large, please upload as attachment or provide link).\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3960", "title": "Allow the `no-cache` execution requirement to be set via a tag on built-in rules", "body": "### Description of the problem / feature request / question:\r\n\r\nI am using remote caching (Apache WebDAV with the `--experimental_remote_spawn_cache` option) and some of my build artifacts created by `genrule`s are very large (1-3GB). These artifacts don't take very long to build locally, so they would be unnecessarily taking up cache space and network bandwidth. It appears that Skylark actions can be excluded from remote caching by specifying `execution_requirements = { 'no-cache': '1' }` in their implementations. Setting this execution requirement as a tag on built-in rules (at least `genrule`s) does not work, however. It would seem that I would have to wrap my `genrule`s in a new build rule to exclude them from remote caching.\r\n\r\nFor the 0.8.0 release, could setting `tags = ['no-cache']`, or equivalent, on built-in rules be made to work?\r\n\r\n\r\n### Environment info\r\n* Operating System:\r\nUbuntu 16.04\r\n\r\n* Bazel version (output of `bazel info release`):\r\n0.7.0\r\n\r\n* Relevant `.bazelrc`\r\n```\r\n<snip>\r\nstartup --host_jvm_args=-Dbazel.DigestFunction=SHA1\r\nbuild --experimental_remote_spawn_cache\r\nbuild --remote_rest_cache=http://REMOTE.CACHE.IP\r\nbuild --experimental_strict_action_env\r\ntest --test_env=USER=dummytestuser  # see https://github.com/bazelbuild/bazel/issues/2574\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vjpai": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4341", "title": "grpc Mac bazel build fails because of thread-local, but make passes", "body": "### Description of the problem / feature request / question:\r\n\r\nI'm on the [grpc/grpc](https://github.com/grpc/grpc) project. We recently switched to using thread-local on one of our key `struct`s. Although this project builds fine with make on Mac and Linux, [it stopped building with bazel on Mac](grpc/grpc#13856) after we made this switch. Looking into it, it seems like [tensorflow/serving](tensorflow/serving#1) also has the same issue.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\n```\r\n$ git clone git@github.com:grpc/grpc\r\n$ cd grpc\r\n$ bazel build //:grpc\r\n```\r\n\r\n### Environment info\r\n* Operating System: MacOS Sierra 10.12.6\r\n* Bazel version (output of `bazel info release`): release 0.8.1-homebrew\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nRelated issues are tensorflow/serving#1 and grpc/grpc#13856\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n\r\n```\r\n$ bazel build --verbose_failures //:grpc\r\nINFO: Analysed target //:grpc (0 packages loaded).\r\nINFO: Found 1 target...\r\nERROR: /Users/vpai/Git/grpc/BUILD:224:1: Linking of rule '//:grpc' failed (Exit 1): cc_wrapper.sh failed: error executing command \r\n  (cd /private/var/tmp/_bazel_vpai/5285458b308b3aadd65cb54a5ac76b0c/execroot/com_github_grpc_grpc && \\\r\n  exec env - \\\r\n    APPLE_SDK_PLATFORM=MacOSX \\\r\n    APPLE_SDK_VERSION_OVERRIDE=10.13 \\\r\n    PATH=/Users/vpai/google-cloud-sdk/bin:/usr/local/git/current/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:/usr/local/go/bin \\\r\n    TMPDIR=/var/folders/xd/2k15ssh10lz6088_k_2lddtw007xtq/T/ \\\r\n    XCODE_VERSION_OVERRIDE=9.1.0 \\\r\n  external/local_config_cc/cc_wrapper.sh -fobjc-link-runtime -Wl,-S -shared -o bazel-out/darwin-fastbuild/bin/libgrpc.so bazel-out/darwin-fastbuild/bin/_objs/grpc/src/core/lib/surface/init.o bazel-out/darwin-fastbuild/bin/_objs/grpc/src/core/plugin_registry/grpc_plugin_registry.o -pthread -headerpad_max_install_names -lc++ -no-canonical-prefixes -undefined dynamic_lookup)\r\n\r\nUse --sandbox_debug to see verbose messages from the sandbox\r\nclang: warning: argument unused during compilation: '-pthread' [-Wunused-command-line-argument]\r\nld: illegal thread local variable reference to regular symbol __ZN9grpc_core7ExecCtx9exec_ctx_E for architecture x86_64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nTarget //:grpc failed to build\r\nINFO: Elapsed time: 0.504s, Critical Path: 0.31s\r\nFAILED: Build did NOT complete successfully\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "axgillies": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4338", "title": "Integrate Information from Bazel Code Search blog post into main docs", "body": "The blog post about the Bazel Code Search feature contains a lot of good information, especially background information, that seems like it should be merged into the main docs.\r\n\r\nBlog post: https://blog.bazel.build/2017/12/14/introducing-bazel-code-search.html\r\nMain docs: https://bazel.build/browse-and-search-user-guide.html\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mafanasyev-tri": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4331", "title": "changed source while building, and bazel got into stable inconsistent state", "body": "### Description of the problem / feature request / question:\r\n\r\nWhile I was building our project using bazel  (with  `bazel test //..`\"), I accidentally checked out a different revision of the code. When I discovered it, I restored the previous revision, stopped bazel mid-build, and then restarted to get back to the consistent state. However, one of the unit tests has failed.\r\n\r\nI re-ran the bazel it a couple of times, and nothing changed -- bazel did not detect that any file needed rebuilding, and the same error kept happening again and again. Running \"bazel clean\" followed by another rebuild cleared the error -- the test started to pass.\r\n\r\nThe failing test was a C++ app. It looks like the problem occurred because two object files from different revisions got linked together -- so a test driver was from one revision, white the module under test was from the old one.\r\n\r\nThis looks like a classical example of \"stable inconsistent state\".  The user manual says:\r\n\r\n> If you ever detect a stable inconsistent state with Bazel, please report a bug.\r\n\r\nso I am reporting this bug. But the same manual says that only _normal or \"reasonable\" use of the build tool_ counts, and I am not sure if this situation counts as reasonable.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\nI am not sure how to investigate this. I have saved bazel caches from inconsistent run and from successful rebuild. I tried diff'ing them, and there are too many differences to find meaningful changes. I am not sure what else would I be looking for.\r\n\r\nIf this bug is valid, I can try to set up the reproduction.\r\n\r\n### Environment info\r\n* Operating System:\r\n\r\nUbuntu 16.04.3 LTS xenial\r\n4.4.0-97-generic\r\n\r\n* Bazel version (output of `bazel info release`):\r\n\r\nBuild label: 0.8.0- (@non-git)\r\n\r\n* If `bazel info release` returns \"development version\" or \"(@non-git)\", please tell us what source tree you compiled Bazel from; git commit hash is appreciated (`git rev-parse HEAD`):\r\n\r\n0.8.0 source zip from releases page\r\n\r\n###  Have you found anything relevant by searching the web?\r\nsearched the bug tracker and bazel-discuss for \"inconsistency\" and \"inconsistent\", found nothing relevant\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n\r\nbazel was running in `--batch` mode, in the docker container\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3976", "title": "When building in a sandbox with base being a symlink, TEST_TMPDIR is mounted read-only", "body": "### Description of the problem / feature request / question:\r\n\r\nI am using bazel 0.7.0 with sandboxing enabled, and with ` --experimental_sandbox_base=/run/shm`\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\nCode from https://github.com/mafanasyev-tri/bazel-ro-tmpdir-example (simple sh_test which touches TEST_TMPDIR):\r\n```\r\n$ ls -lad /dev/shm /run/shm\r\ndrwxrwxrwt 6 root root 260 Oct 26 22:21 /dev/shm\r\nlrwxrwxrwx 1 root root   8 Oct 26 09:44 /run/shm -> /dev/shm\r\n\r\n$ /tmp/bazel-0.7.0 test --nocache_test_results --spawn_strategy=sandboxed --test_output=errors --experimental_sandbox_base=/dev/shm //...\r\nINFO: Found 1 test target...\r\nTarget //:test1 up-to-date:\r\n  bazel-bin/test1\r\nINFO: Elapsed time: 0.317s, Critical Path: 0.10s\r\n//:test1                                                                 PASSED in 0.1s\r\n\r\nExecuted 1 out of 1 test: 1 test passes.\r\n\r\n$ /tmp/bazel-0.7.0 test --nocache_test_results --spawn_strategy=sandboxed --test_output=errors --experimental_sandbox_base=/run/shm //...\r\nINFO: Found 1 test target...\r\nFAIL: //:test1 (see /home/mafanasyev/.cache/bazel/_bazel_mafanasyev/f292761e5a3c89fc79b58cd3b248b03e/execroot/__main__/bazel-out/local-fastbuild/testlogs/test1/test.log).\r\nINFO: From Testing //:test1:\r\n==================== Test output for //:test1:\r\ntotal 0\r\ndrwxrwxr-x 2 mafanasyev mafanasyev 40 Oct 27 02:11 .\r\ndrwxrwxr-x 3 mafanasyev mafanasyev 60 Oct 27 02:11 ..\r\n274 273 0:21 /bazel-sandbox.d4ff110593a85ddab4c3c0e298f37917/8451945918528164039/execroot/__main__/_tmp/33fc2f4faf2e96b25f08cf6d9c3f27c4 /dev/shm/bazel-sandbox.d4ff110593a85ddab4c3c0e298f37917/8451945918528164039/execroot/__main__/_tmp/33fc2f4faf2e96b25f08cf6d9c3f27c4 rw,nosuid,nodev - tmpfs tmpfs rw\r\n278 277 0:21 /bazel-sandbox.d4ff110593a85ddab4c3c0e298f37917/8451945918528164039/execroot/__main__/_tmp/33fc2f4faf2e96b25f08cf6d9c3f27c4 /dev/shm/bazel-sandbox.d4ff110593a85ddab4c3c0e298f37917/8451945918528164039/execroot/__main__/_tmp/33fc2f4faf2e96b25f08cf6d9c3f27c4 ro,nosuid,nodev - tmpfs tmpfs rw\r\nmkdir: cannot create directory '/dev/shm/bazel-sandbox.d4ff110593a85ddab4c3c0e298f37917/8451945918528164039/execroot/__main__/_tmp/33fc2f4faf2e96b25f08cf6d9c3f27c4/a': Read-only file system\r\n================================================================================\r\nTarget //:test1 up-to-date:\r\n  bazel-bin/test1\r\nINFO: Elapsed time: 0.675s, Critical Path: 0.12s\r\n//:test1                                                                 FAILED in 0.1s\r\n  /home/mafanasyev/.cache/bazel/_bazel_mafanasyev/f292761e5a3c89fc79b58cd3b248b03e/execroot/__main__/bazel-out/local-fastbuild/testlogs/test1/test.log\r\n\r\nExecuted 1 out of 1 test: 1 fails locally.\r\n\r\n```\r\n\r\n### Environment info\r\n* Operating System: `Ubuntu 16.04.3 LTS`\r\n\r\n* Bazel version (output of `bazel info release`): `release 0.7.0- (@non-git)`\r\n\r\n* If `bazel info release` returns \"development version\" or \"(@non-git)\", please tell us what source tree you compiled Bazel from; git commit hash is appreciated (`git rev-parse HEAD`):\r\nhttps://github.com/bazelbuild/bazel/releases/download/0.7.0/bazel-0.7.0-dist.zip\r\n\r\n###  Have you found anything relevant by searching the web?\r\nsearched for TEST_TMPDIR, found no issues on bazel's github or on bazel-discuss\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bcsgh": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4321", "title": "Please open source //tools/build_rules:build_test.bzl", "body": "The docs include a reference to `//tools/build_rules:build_test.bzl`, which is not publicly available, in one of the examples.\r\n\r\nThe reference:\r\nhttps://github.com/bazelbuild/bazel/blob/7cc8efe44a167d818deb77e53f12cecc15b4e4aa/src/main/java/com/google/devtools/build/docgen/templates/be/functions.vm#L42\r\n\r\nWhere that file would be:\r\nhttps://github.com/bazelbuild/bazel/tree/7cc8efe44a167d818deb77e53f12cecc15b4e4aa/tools/build_rules\r\n\r\nIdeally, this build extension should be open sourced. Or, failing that, the example in the docs should be updated to use something that is publicly available.\r\n\r\n* Operating System: n/a\r\n* Bazel version: docs at head\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "thinlizzy": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4317", "title": "bazel run fails with 255 or '-1073740791' process statuses", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\n\r\nWhen I try to bazel run a cc_binary on Windows, it always fails with one of these two error messages:\r\n\r\nERROR: Non-zero return code '255' from command: Process exited with status 255.\r\n\r\nERROR: Non-zero return code '-1073740791' from command: Process exited with status -1073740791.\r\n\r\nI think this is a bazel run issue because if I manually run the generated executable, it works as expected.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\nit happens with \"main_win32\" cc_binary target in this build file:\r\nhttps://github.com/thinlizzy/libjukebox/blob/master/jukebox_test/demo/BUILD\r\n\r\n### Environment info\r\n* Operating System:\r\n\r\nWindows 8.1\r\n\r\n* Bazel version (output of `bazel info release`):\r\n\r\nrelease 0.5.4\r\n\r\n* If `bazel info release` returns \"development version\" or \"(@non-git)\", please tell us what source tree you compiled Bazel from; git commit hash is appreciated (`git rev-parse HEAD`):\r\n\r\nN/A\r\n\r\n###  Have you found anything relevant by searching the web?\r\n(e.g. [StackOverflow answers](http://stackoverflow.com/questions/tagged/bazel),\r\n[GitHub issues](https://github.com/bazelbuild/bazel/issues),\r\nemail threads on the [`bazel-discuss`](https://groups.google.com/forum/#!forum/bazel-discuss) Google group)\r\n\r\nnope :(\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n(If they are large, please upload as attachment or provide link).\r\n\r\nrunning via bazel run:\r\n\r\n> D:\\diego\\progs\\c++\\libjukebox>bazel run //jukebox_test/demo:main_win32\r\n> ____Loading package: jukebox_test/demo\r\n> ____Loading package: @bazel_tools//tools/cpp\r\n> ____Loading package: @local_config_xcode//\r\n> ____Loading package: @local_config_cc//\r\n> ____Loading package: @local_jdk//\r\n> ____Loading complete.  Analyzing...\r\n> ____Loading package: jukebox_test/data\r\n> ____Loading package: @win32_libs//\r\n> ____Found 1 target...\r\n> ____Building...\r\n> ____[0 / 14] BazelWorkspaceStatusAction stable-status.txt\r\n> ____From Linking jukebox_test/demo/main_win32.exe:\r\n> LINK : warning LNK4001: no object files specified; libraries used\r\n> Target //jukebox_test/demo:main_win32 up-to-date:\r\n>   C:/users/john/appdata/local/temp/_bazel_john/2hwe4_ab/execroot/__main__/bazel-\r\n> out/msvc_x64-fastbuild/bin/jukebox_test/demo/main_win32.exe\r\n> ____Elapsed time: 5.574s, Critical Path: 1.41s\r\n> \r\n> ____Running command line: C:/users/john/appdata/local/temp/_bazel_john/2hwe4_ab/execroot/__main__/bazel-out/msvc_x64-fastbuild/bin/jukebox_test/demo/main_win32.exe\r\n> ERROR: Non-zero return code '255' from command: Process exited with status 255.\r\n> \r\n\r\nmanually running via command line does the expected thing:\r\n\r\n> D:\\diego\\progs\\c++\\libjukebox>C:\\Users\\John\\AppData\\Local\\Temp\\_bazel_John\\2Hwe4_aB\\execroot\\__main__\\bazel-out\\msvc_x64-fastbuild\\bin\\jukebox_test\\demo\\main_win32.exe\r\n> you need to supply two wave files as arguments\r\n> \r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tvolkert": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4316", "title": "Skylark: cfg=\"data\" is deprecated, but you're forced to use it for attributes named \"data\"", "body": "https://github.com/bazelbuild/bazel/blob/076977e019ebcb8b822e7727d292636fadcafcca/src/main/java/com/google/devtools/build/lib/analysis/Runfiles.java#L1012\r\n\r\nThat check means that any attributes named data but configured for either the `target` or `host` configurations will cause the build to fail:\r\n\r\n```\r\nCaused by: java.lang.IllegalStateException: /.../BUILD:<line>:<column>: <rule> attribute data is not configured for the data configuration\r\n\tat com.google.devtools.build.lib.analysis.RuleContext.checkAttribute(RuleContext.java:1028)\r\n\tat com.google.devtools.build.lib.analysis.RuleContext.getPrerequisites(RuleContext.java:718)\r\n\tat com.google.devtools.build.lib.analysis.Runfiles$Builder.getPrerequisites(Runfiles.java:1165)\r\n\tat com.google.devtools.build.lib.analysis.Runfiles$Builder.addDataDeps(Runfiles.java:1012)\r\n```\r\n\r\nI'm told that new Skylark rules should not be using the `data` configuration, as it's deprecated and exists merely for legacy reasons.  If that's the case, we shouldn't be forcing users to use it for attributes that happened to be named \"data\".\r\n\r\n@laurentlb ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4054", "title": "RUNFILES detection in executable scripts is hard", "body": "In order for executable rules to be able to properly refer to files that are included as `data` deps, those executables need to know what the `RUNFILES` directory is.\r\n\r\nThere are many contexts from which an executable can be invoked, so it's common for the templates of such executable rules to contain boilerplate code that tries to deduce `RUNFILES` with code that looks similar to the following:\r\n\r\n```bash\r\nif [[ -n \"$TEST_SRCDIR\" && -d \"$TEST_SRCDIR\" ]]; then\r\n  # use $TEST_SRCDIR if set.\r\n  export RUNFILES=\"$TEST_SRCDIR\"\r\nelif [[ -z \"$RUNFILES\" ]]; then\r\n  # canonicalize the entrypoint.\r\n  pushd \"$(dirname \"$0\")\" > /dev/null\r\n  abs_entrypoint=\"$(pwd -P)/$(basename \"$0\")\"\r\n  popd > /dev/null\r\n  if [[ -e \"${abs_entrypoint}.runfiles\" ]]; then\r\n    # runfiles dir found alongside entrypoint.\r\n    export RUNFILES=\"${abs_entrypoint}.runfiles\"\r\n  elif [[ \"$abs_entrypoint\" == *\".runfiles/\"* ]]; then\r\n    # runfiles dir found in entrypoint path.\r\n    export RUNFILES=\"${abs_entrypoint%.runfiles/*}.runfiles\"\r\n  else\r\n    # runfiles dir not found: fall back on current directory.\r\n    export RUNFILES=\"$PWD\"\r\n  fi\r\nfi\r\n```\r\n\r\nBlocks of code like this end up sprinkled throughout a project's Bazel codebase, which is (a) not very maintainable, and (b) fragile.  And note that the code above only attempts to work on Mac and Linux - with Windows support, it'd look even worse.\r\n\r\nIs there any way Bazel could guarantee that `$RUNFILES` will always be set when executable targets are invoked from the following contexts:\r\n * `bazel run`\r\n * `bazel test`\r\n * Being invoked via a `genrule`\r\n\r\nIf those guarantees were made, then developers would only have to worry about deducing `RUNFILES` when the script was invoked directly at the command-line, in which case `RUNFILES` is basically `<path-to-current-script>.runfiles/`", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4050", "title": "Document SkylarkLateBoundDefault", "body": "https://docs.bazel.build/versions/master/skylark/lib/attr.html#parameters-3\r\n\r\nCan you please document `SkylarkLateBoundDefault`?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4050/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dpursehouse": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4314", "title": "Bazel 0.8.1: Build fails with \"Xcode version must be specified to use an Apple CROSSTOOL\" on OSX High Sierra", "body": "This is similar to #3063 but not quite the same so I'm adding a new issue rather than commenting on that one again.  CC @c-parsons as you were asking me about it before.\r\n\r\nWhile building gerrit, the build failed due to a 404 on one of the dependency downloads.  Then, on subsequent builds it failed with `Xcode version must be specified to use an Apple CROSSTOOL`.  It only succeeds (or rather, fails again but with the expected error) after cleaning.\r\n\r\n1. The initial failure caused by 404 when downloading jgit library (seems to have not propagated on maven central yet):\r\n\r\n```\r\ngerrit $ bazel build gerrit\r\n............\r\nERROR: /Users/dpursehouse/git/gerrit/lib/jgit/org.eclipse.jgit/BUILD:3:1: no such package '@jgit_lib//jar': failed /usr/bin/python /Users/dpursehouse/git/gerrit/tools/download_file.py -o /private/var/tmp/_bazel_dpursehouse/af01e59a244d19667aa266607f080c5a/external/jgit_lib/jar/org.eclipse.jgit-4.9.2.201712150930-r.jar -u MAVEN_CENTRAL:/org/eclipse/jgit/org.eclipse.jgit/4.9.2.201712150930-r/org.eclipse.jgit-4.9.2.201712150930-r.jar -v a3a2d1df793245ebfc7322db3c2b9828ee184850 --unsign: Download http://repo1.maven.org/maven2/org/eclipse/jgit/org.eclipse.jgit/4.9.2.201712150930-r/org.eclipse.jgit-4.9.2.201712150930-r.jar\r\ncurl: (22) The requested URL returned error: 404 Not Found\r\nerror using curl: Command '['curl', '--proxy-anyauth', '-ksSfLo', '/Users/dpursehouse/.gerritcodereview/buck-cache/downloaded-artifacts/org.eclipse.jgit-4.9.2.201712150930-r.jar-a3a2d1df793245ebfc7322db3c2b9828ee184850', 'http://repo1.maven.org/maven2/org/eclipse/jgit/org.eclipse.jgit/4.9.2.201712150930-r/org.eclipse.jgit-4.9.2.201712150930-r.jar']' returned non-zero exit status 22\r\n and referenced by '//lib/jgit/org.eclipse.jgit:jgit'\r\nERROR: Analysis of target '//:gerrit' failed; build aborted: Loading failed\r\nINFO: Elapsed time: 8.959s\r\nFAILED: Build did NOT complete successfully (68 packages loaded)\r\n```\r\n\r\n2. Subsequent build fails with `Xcode version ...` error:\r\n\r\n```\r\ngerrit $ bazel build gerrit\r\nERROR: /private/var/tmp/_bazel_dpursehouse/af01e59a244d19667aa266607f080c5a/external/local_config_cc/BUILD:50:5: in apple_cc_toolchain rule @local_config_cc//:cc-compiler-darwin_x86_64: Xcode version must be specified to use an Apple CROSSTOOL\r\nERROR: Analysis of target '//:gerrit' failed; build aborted: Analysis of target '@local_config_cc//:cc-compiler-darwin_x86_64' failed; build aborted\r\nINFO: Elapsed time: 0.399s\r\nFAILED: Build did NOT complete successfully (14 packages loaded)\r\n    currently loading: gerrit-util-http ... (2 packages)\r\n```\r\n\r\n3. Run it again and see that it still fails with the Xcode error:\r\n\r\n```\r\ngerrit $ bazel build gerrit\r\nERROR: /private/var/tmp/_bazel_dpursehouse/af01e59a244d19667aa266607f080c5a/external/local_config_cc/BUILD:50:5: in apple_cc_toolchain rule @local_config_cc//:cc-compiler-darwin_x86_64: Xcode version must be specified to use an Apple CROSSTOOL\r\nERROR: Analysis of target '//:gerrit' failed; build aborted: Analysis of target '@local_config_cc//:cc-compiler-darwin_x86_64' failed; build aborted\r\nINFO: Elapsed time: 0.183s\r\nFAILED: Build did NOT complete successfully (0 packages loaded)\r\n    currently loading: lib/lucene\r\n```\r\n\r\n3. Clean and try again, then it fails with the original (and expected) error\r\n\r\n```\r\ngerrit $ bazel clean --expunge\r\nINFO: Starting clean (this may take a while). Consider using --expunge_async if the clean takes more than several minutes.\r\ngerrit $ bazel build gerrit\r\n............\r\nERROR: /Users/dpursehouse/git/gerrit/lib/jgit/org.eclipse.jgit/BUILD:3:1: no such package '@jgit_lib//jar': failed /usr/bin/python /Users/dpursehouse/git/gerrit/tools/download_file.py -o /private/var/tmp/_bazel_dpursehouse/af01e59a244d19667aa266607f080c5a/external/jgit_lib/jar/org.eclipse.jgit-4.9.2.201712150930-r.jar -u MAVEN_CENTRAL:/org/eclipse/jgit/org.eclipse.jgit/4.9.2.201712150930-r/org.eclipse.jgit-4.9.2.201712150930-r.jar -v a3a2d1df793245ebfc7322db3c2b9828ee184850 --unsign: Download http://repo1.maven.org/maven2/org/eclipse/jgit/org.eclipse.jgit/4.9.2.201712150930-r/org.eclipse.jgit-4.9.2.201712150930-r.jar\r\ncurl: (22) The requested URL returned error: 404 Not Found\r\nerror using curl: Command '['curl', '--proxy-anyauth', '-ksSfLo', '/Users/dpursehouse/.gerritcodereview/buck-cache/downloaded-artifacts/org.eclipse.jgit-4.9.2.201712150930-r.jar-a3a2d1df793245ebfc7322db3c2b9828ee184850', 'http://repo1.maven.org/maven2/org/eclipse/jgit/org.eclipse.jgit/4.9.2.201712150930-r/org.eclipse.jgit-4.9.2.201712150930-r.jar']' returned non-zero exit status 22\r\n and referenced by '//lib/jgit/org.eclipse.jgit:jgit'\r\nERROR: Analysis of target '//:gerrit' failed; build aborted: Loading failed\r\nINFO: Elapsed time: 8.886s\r\nFAILED: Build did NOT complete successfully (63 packages loaded)\r\n```\r\n\r\nOS: OSX High Sierra 10.13.2\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20113318", "body": "@laszlocsomor [0.4.2 for homebrew](https://github.com/Homebrew/homebrew-core/pull/7647)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20113318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "ixdy": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4311", "title": "\"Server crashed during startup\" in CI environment", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\n\r\nWe're running Bazel in our CI environment (Prow, which runs Bazel inside Docker on GKE). Starting with Bazel 0.7.0, we noticed Bazel occasionally crashing during startup, and it seems to continue with Bazel 0.8.1.\r\n\r\nUsing `--batch` seems to mitigate the issue, but we make several successive Bazel calls, so would like to avoid its usage if possible.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\nNo great repro steps yet. There were two recent failures after we upgraded to Bazel 0.8.1 and reverted the `--batch` mitigation:\r\nhttps://k8s-gubernator.appspot.com/build/kubernetes-jenkins/pr-logs/pull/57221/pull-kubernetes-bazel-build/20714/\r\nhttps://k8s-gubernator.appspot.com/build/kubernetes-jenkins/pr-logs/pull/57221/pull-kubernetes-bazel-test/22094/\r\n\r\nIn both cases, we were just running `bazel version`, but it crashed:\r\n```\r\nW1215 22:29:00.731] Run: ('bazel', 'version')\r\nW1215 22:29:03.479] INFO: $TEST_TMPDIR defined: output root default is '/root/.cache/bazel'.\r\nW1215 22:29:03.482] Extracting Bazel installation...\r\nW1215 22:29:46.215] .\r\nW1215 22:29:46.215] Server crashed during startup. Now printing '/root/.cache/bazel/_bazel_root/e9f728bbd90b3fba632eb31b20e1dacd/server/jvm.out':\r\n```\r\n\r\n(nothing was printed from jvm.out)\r\n\r\n### Environment info\r\n* Operating System: Linux / Docker / GKE\r\n\r\n* Bazel version (output of `bazel info release`):\r\nrelease 0.8.1\r\n\r\n* If `bazel info release` returns \"development version\" or \"(@non-git)\", please tell us what source tree you compiled Bazel from; git commit hash is appreciated (`git rev-parse HEAD`):\r\n\r\n\r\n###  Have you found anything relevant by searching the web?\r\nhttps://github.com/bazelbuild/bazel/issues/3956 and https://github.com/bazelbuild/bazel/issues/4267 look somewhat related.\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n(If they are large, please upload as attachment or provide link).\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kevingessner": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4309", "title": "`bazel coverage` fails when a java_test references no source files", "body": "### Description of the problem / feature request / question:\r\n\r\nIf a `java_test` target does not reference any non-test source files (i.e. it only tests libraries), then `bazel coverage` generates an empty `coverage.dat` file.  The LcovMerger fails with `SEVERE: No lcov file found.`, even though an empty coverage file is valid in this case---there are no referenced files to be covered.  LcovMerger should not fail in this case.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\nhttps://github.com/kevingessner/bazel-lcov-repro\r\n\r\n### Environment info\r\n* Operating System: Linux (Centos 7)\r\n\r\n* Bazel version (output of `bazel info release`):  Reproducible on 0.7.0 and 0.8.1\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nThis error message is mentioned in #2528, but that issue is for a different coverage problem.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4069", "title": "Feature request: Allow generated files to be used in repository rules", "body": "### Description of the problem / feature request / question:\r\n\r\nRepository rules can execute various actions, and are generally quite powerful for dealing with resources outside of Bazel and the workspace.  However, repository rules are restricted to only using source files from inside the workspace, and cannot use generated files from the workspace.  This is implemented via [`repository_ctx.path`](https://docs.bazel.build/versions/master/skylark/lib/repository_ctx.html#path), the docs for which include: \"Note that remote repositories are executed during the analysis phase and thus cannot depends on a target result (the label should point to a non-generated file).\"\r\n\r\nThis limitation is frustrating for implementing reliable, consistent repository rules.  In many cases, a repository rule needs to execute utilities to download or process external repositories (e.g. maven, gazelle, python).  Because repository rules are limited to source files only, authors have to rely on pre-installed executables on the system and/or jump through hoops to use generated files (e.g. executing `go build` directly as rules_go does).  That makes the rule's behavior hard to predict, and doesn't allow the rule to take advantage of the build language, cache, or sandbox.\r\n\r\nRepository rules should be able to execute build steps and use the generated files.  The `repository_ctx.path` method should be extended to allow generated files, specified with the usual build rules.  Bazel would execute the build steps as needed, so the repository rule would have consistent inputs.\r\n\r\n### Environment info\r\n* Bazel version (output of `bazel info release`): 0.7.0 (and many earlier versions)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nelhage": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4302", "title": "Mention changed file with `--verbose_explanations`", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\n\r\nI have a mid-sized C++ codebase. I'd like to understand which header files are commonly being changed that require rebuilds of the ~entire codebase. I added `build --explain=bazel.log --verbose_explanations` to my `.bazelrc`, in the hopes of consulting `bazel.log` after rebuilds to determine which header change(s) necessitated the full rebuild.\r\n\r\nHowever, the log file is just full of information like\r\n```\r\nExecuting action 'Compiling common/counters.cc': One of the files has changed.\r\n```\r\nwhich doesn't tell me the information I actually want -- *which* dependency file changed?\r\n\r\nWould it be possible (probably only under `--verbose_explanations`) for bazel to log *which* file has changed, or maybe a subset of them, if an exact list is too verbose or expensive somehow?\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\n\r\n### Environment info\r\n* Operating System:\r\nLinux Ubuntu 16.04\r\n\r\n* Bazel version (output of `bazel info release`):\r\n```\r\nrelease 0.8.0\r\n```\r\n\r\n* If `bazel info release` returns \"development version\" or \"(@non-git)\", please tell us what source tree you compiled Bazel from; git commit hash is appreciated (`git rev-parse HEAD`):\r\n\r\n\r\n###  Have you found anything relevant by searching the web?\r\n(e.g. [StackOverflow answers](http://stackoverflow.com/questions/tagged/bazel),\r\n[GitHub issues](https://github.com/bazelbuild/bazel/issues),\r\nemail threads on the [`bazel-discuss`](https://groups.google.com/forum/#!forum/bazel-discuss) Google group)\r\n\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n(If they are large, please upload as attachment or provide link).\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3886", "title": "`local_resources` defaults should respect cgroup memory limits on Linux", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\n\r\nBazel, by default, looks at available RAM on the system to set `local_resources` defaults, so as to best-use the resources of the machine.\r\n\r\nUnfortunately, inside a Docker container or other cgroup environment, the system-wide memory statisics (`/proc/meminfo`, the output of `free`, etc) reflect the memory usage of the host, not the container.\r\n\r\nbazel should make a best-effort attempt to find the effective cgroup memory controller limits, and use those.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\nI ran into this in a [CircleCI build](https://circleci.com/gh/livegrep/livegrep/25); All builds would fail with\r\n\r\n> Server terminated abruptly (error code: 14, error message: '', log file: '/root/.cache/bazel/_bazel_root/f85b6fb5740e6e8c7efea142eec4b6e8/server/jvm.out')\r\n\r\nuntil I added `build --local_resources=4096,4,1.0` to my `.bazelrc`.\r\n\r\nCircle's build containers report 60G of RAM, but are cgroup-limited to 4G, so building any large application on Circle ought reproduce the issue.\r\n\r\n### Environment info\r\n* Operating System:\r\nLinux; Tested on Ubuntu 16.04\r\n\r\n* Bazel version (output of `bazel info release`):\r\n`release 0.5.4`\r\n\r\n* If `bazel info release` returns \"development version\" or \"(@non-git)\", please tell us what source tree you compiled Bazel from; git commit hash is appreciated (`git rev-parse HEAD`):\r\n\r\n\r\n###  Have you found anything relevant by searching the web?\r\n(e.g. [StackOverflow answers](http://stackoverflow.com/questions/tagged/bazel),\r\n[GitHub issues](https://github.com/bazelbuild/bazel/issues),\r\nemail threads on the [`bazel-discuss`](https://groups.google.com/forum/#!forum/bazel-discuss) Google group)\r\n\r\nThere are a number of reports online of people puzzling with bazel OOM-ing. It's hard to know how many of them root-cause to this issue, but almost certainly some of them do, since container environments are increasingly popular these days.\r\n- https://github.com/bazelbuild/bazel/issues/3020\r\n- https://github.com/tensorflow/tensorflow/issues/9940\r\n- https://github.com/bazelbuild/bazel/issues/3251\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n(If they are large, please upload as attachment or provide link).\r\n\r\nhttps://fabiokung.com/2014/03/13/memory-inside-linux-containers/ has some notes on how to detect memory availability inside containers.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "olafure": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4301", "title": "Doc for @bazel_tools", "body": "Bazel documentation is missing an explanation the \"@bazel_tools\" built in repository. ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zlalanne": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4299", "title": "Bazel doesn't respect NO_PROXY when fetching dependencies", "body": "### Description of the problem / feature request / question:\r\n\r\nBazel doesn't look at the NO_PROXY environment variable to determine if the set proxy should be used when downloading dependencies. This is problematic for projects where some dependencies are on the local network and some are not.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\n\r\n### Environment info\r\n* Operating System:\r\n\r\nUbuntu 14.04 x64\r\n\r\n\r\n* Bazel version (output of `bazel info release`):\r\n0.8.0\r\n\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nThere was a previous PR to fix this that was abandoned.\r\nhttps://github.com/bazelbuild/bazel/pull/2007\r\n\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n(If they are large, please upload as attachment or provide link).\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4307", "title": "Add NO_PROXY environment variable support to downloader", "body": "Check the no_proxy and NO_PROXY environment variables for a list of URLs that\r\nshould not use a proxy. If the requested URL matches the no_proxy list, don't\r\nproxy the download.\r\n\r\nFixes #4299", "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/3585", "title": "Change pkg_tar behavior to keep current permissions of files", "body": "Changes the default behavior of pkg_tar to not modify file permissions before\r\nputting the files in an archive unless requested. Now by default pkg_tar will\r\nkeep the current permissions on a file unless the user specifies a mode.\r\n\r\nThis fixes #2925.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pcj": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4297", "title": "JavaInfo should expose `transitive_full_compile_jars`", "body": " For some JVM languages (kotlin), we need access to the transitive set of original \"full\" (non-ABI) jars.  For example consider this code snippet that attempts to build a classpath:\r\n\r\n```python\r\n    jars = depset()\r\n    # Populate from (transitive, pretty please) java dependencies.  \r\n    for dep in ctx.attr.java_deps:\r\n        if java_common.provider in dep:\r\n            info = dep[java_common.provider]\r\n            # Here's what we have currently\r\n            jars += info.full_compile_jars\r\n            # Here's what we'd like to do\r\n            jars += info.transitive_full_compile_jars\r\n```\r\n\r\ncc @iirina Thanks in advance for considering this!\r\n\r\nhttps://github.com/pubref/rules_kotlin/issues/47\r\n\r\nhttps://github.com/pubref/rules_kotlin/pull/41\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4297/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/77667328", "body": "Both awk and sed are in POSIX, and would be expected to be present everywhere bazel would run, including busybox.  Both awk and sed are present in the bazel codebase, with [sed](https://github.com/bazelbuild/bazel/search?q=sed&type=Code) outnumbering [awk](https://github.com/bazelbuild/bazel/search?q=awk&type=Code) by a factor of 4.  \n\nIs awk more portable/stable then sed?  [Hard to say](https://www.google.com/search?q=is+awk+more+portable+than+sed).  What I can say is that the `-r` sed option is not portable, so this is an improvement and IMHO clearer to read.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/77667328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "benjaminp": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4295", "title": "skylark is vulnerable to self-referential data structures", "body": "Here's a nice way to get a Java stack trace:\r\n```\r\n# BUILD\r\nevil = []\r\nevil.append(evil)\r\n\r\nfilegroup(\r\n    name = 'f',\r\n    srcs = evil,\r\n)\r\n```\r\n```\r\n$ bazel --batch build :f\r\nINFO: Elapsed time: 0.402s\r\nFAILED: Build did NOT complete successfully (0 packages loaded)\r\n    currently loading: \r\njava.lang.StackOverflowError\r\n    at com.google.devtools.build.lib.syntax.Printer$BasePrinter.appendListElements(Printer.java:441)\r\n    at com.google.devtools.build.lib.syntax.Printer$BasePrinter.printList(Printer.java:427)\r\n    at com.google.devtools.build.lib.syntax.Printer$BasePrinter.printList(Printer.java:466)\r\n    at com.google.devtools.build.lib.syntax.Printer$BasePrinter.printList(Printer.java:261)\r\n    at com.google.devtools.build.lib.syntax.SkylarkList.repr(SkylarkList.java:102)\r\n    at com.google.devtools.build.lib.syntax.Printer$BasePrinter.repr(Printer.java:319)\r\n    at com.google.devtools.build.lib.syntax.Printer$BasePrinter.appendListElements(Printer.java:445)\r\n    at com.google.devtools.build.lib.syntax.Printer$BasePrinter.printList(Printer.java:427)\r\n    at com.google.devtools.build.lib.syntax.Printer$BasePrinter.printList(Printer.java:466)\r\n    at com.google.devtools.build.lib.syntax.Printer$BasePrinter.printList(Printer.java:261)\r\n    at com.google.devtools.build.lib.syntax.SkylarkList.repr(SkylarkList.java:102)\r\n    at com.google.devtools.build.lib.syntax.Printer$BasePrinter.repr(Printer.java:319)\r\n    at com.google.devtools.build.lib.syntax.Printer$BasePrinter.appendListElements(Printer.java:445)\r\n    at com.google.devtools.build.lib.syntax.Printer$BasePrinter.printList(Printer.java:427)\r\n    at com.google.devtools.build.lib.syntax.Printer$BasePrinter.printList(Printer.java:466)\r\n    at com.google.devtools.build.lib.syntax.Printer$BasePrinter.printList(Printer.java:261)\r\n    at com.google.devtools.build.lib.syntax.SkylarkList.repr(SkylarkList.java:102)\r\n    at com.google.devtools.build.lib.syntax.Printer$BasePrinter.repr(Printer.java:319)\r\n    at com.google.devtools.build.lib.syntax.Printer$BasePrinter.appendListElements(Printer.java:445)\r\n    at com.google.devtools.build.lib.syntax.Printer$BasePrinter.printList(Printer.java:427)\r\n    at com.google.devtools.build.lib.syntax.Printer$BasePrinter.printList(Printer.java:466)\r\n    at com.google.devtools.build.lib.syntax.Printer$BasePrinter.printList(Printer.java:261)\r\n    at com.google.devtools.build.lib.syntax.SkylarkList.repr(SkylarkList.java:102)\r\n    at com.google.devtools.build.lib.syntax.Printer$BasePrinter.repr(Printer.java:319)\r\n    at com.google.devtools.build.lib.syntax.Printer$BasePrinter.appendListElements(Printer.java:445)\r\n    at com.google.devtools.build.lib.syntax.Printer$BasePrinter.printList(Printer.java:427)\r\n    at com.google.devtools.build.lib.syntax.Printer$BasePrinter.printList(Printer.java:466)\r\n    at com.google.devtools.build.lib.syntax.Printer$BasePrinter.printList(Printer.java:261)\r\n    at com.google.devtools.build.lib.syntax.SkylarkList.repr(SkylarkList.java:102)\r\n    at com.google.devtools.build.lib.syntax.Printer$BasePrinter.repr(Printer.java:319)\r\n    at com.google.devtools.build.lib.syntax.Printer$BasePrinter.appendListElements(Printer.java:445)\r\n    at com.google.devtools.build.lib.syntax.Printer$BasePrinter.printList(Printer.java:427)\r\n    at com.google.devtools.build.lib.syntax.Printer$BasePrinter.printList(Printer.java:466)\r\n    at com.google.devtools.build.lib.syntax.Printer$BasePrinter.printList(Printer.java:261)\r\n    at com.google.devtools.build.lib.syntax.SkylarkList.repr(SkylarkList.java:102)\r\n...\r\n```", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4117", "title": "dict methods (but not subscripting) leak the underlying Java types", "body": "Consider a little workspace with `example.bzl`:\r\n```\r\ndef example_impl(ctx):\r\n    print(dir(ctx.attr.d['key']))\r\n    print(dir(ctx.attr.d.get('key')))\r\n    return struct()\r\n\r\nexample = rule(\r\n    implementation = example_impl,\r\n    attrs = {'d': attr.string_list_dict()},\r\n)\r\n```\r\n\r\nand `BUILD`:\r\n```\r\nload(':example.bzl', 'example')\r\nexample(\r\n    name = 'ex',\r\n    d = {'key': []},\r\n)\r\n```\r\n\r\nRunning `bazel build //:ex` should print the same line twice, but instead, it earns you an error:\r\n```\r\nDEBUG: example.bzl:2:5: [\"append\", \"extend\", \"index\", \"insert\", \"pop\", \"remove\"]\r\nERROR: BUILD:3:1: in example rule //:ex:\r\nTraceback (most recent call last):\r\n    File \"BUILD\", line 3\r\n        example(name = 'ex')\r\n    File \"example.bzl\", line 3, in example_impl\r\n        print(dir(ctx.attr.dict.get(\"key\")))\r\n    File \"example.bzl\", line 3, in print\r\n        dir(ctx.attr.dict.get(\"key\"))\r\nillegal argument in call to dir: class java.util.ArrayList is not allowed as a Skylark value (getSkylarkType() failed)\r\nERROR: Analysis of target '//:ex' failed; build aborted: Analysis of target '//:ex' failed; build aborted\r\n```\r\n\r\nThe problem is `IndexExpression` [coerces the result of subscripting into a skylark value](https://github.com/bazelbuild/bazel/blob/2af2bff08c2fab136ea0927242bd4f3fe05456bf/src/main/java/com/google/devtools/build/lib/syntax/IndexExpression.java#L65-L68) whereas the dict methods do not.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4059", "title": "exceptions during test running actions lead to non-executable testlogs", "body": "If a Java exception occurs during a test runner action, the test logs will not be marked executable because the outputs of failed actions aren't \"checked\" by `ActionMetadataHandler`. This is particularly noticeable with `--notest_keep_going` because a exception is used to stop the build after the first test failure.\r\n\r\nExample:\r\n```\r\n$ cat always-fail.sh\r\n#/bin/sh\r\nexit 1\r\n$ cat BUILD\r\nsh_test(\r\n    name = 'always-fail',\r\n    srcs = ['always-fail.sh'],\r\n)\r\n$ bazel test :always-fail\r\n-r-xr-xr-x 1 benjamin benjamin 206 Nov  9 02:11 bazel-testlogs/always-fail/test.log\r\n$ bazel test --notest_keep_going :always-fail\r\n$ ls -lh bazel-testlogs/always-fail/test.log \r\n-rw-rw-r-- 1 benjamin benjamin 206 Nov  9 02:11 bazel-testlogs/always-fail/test.log\r\n```", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4033", "title": "LcovMerger not properly declared as a tool by StandaloneTestStrategy", "body": "If coverage is enabled, `TestActionBuilder` sticks the` LcovMerger` tool's `FilesToRun` into the test action's inputs. This suffices to build the `LcovMerger` executable and runfiles tree before running the test. However, since `StandaloneTestStrategy` does not include `LcovMerger` as a tool in the underlying test-running spawn, the sandbox fails to mount `LcovMerger`'s runfiles tree into the sandbox execroot. This \"works\" now because the wrapper script for LcovMerger follows symlinks back into the real execroot. Given that such behavior isn't correct, a future stricter sandbox implementation could break coverage.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3880", "title": "SymlinkEntry is opaque", "body": "`Runfiles.SymlinkEntry` has a repr that implies it has two properties: `path` and `artifact`. However, neither of these properties are actually exposed to skylark. Having these properties accessible to Skylark would allow writing packaging rules (e.g., `pkg_tar`) that properly embed runfiles trees.\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/e17630d18eccf819f5860f5c065d40d0dcd6e79b", "message": "Correct comment for OneVersionEnforcementLevelConverter.\n\nFixup from copy-paste in c5672f8edb1cb9fb7806024706d776901d7d434e (\"Add the option for warning-level enforcement of One Version violations.\")\n\nChange-Id: I90909b2f14aa7a8e0beadb99a72c25ab71bc40d8\nPiperOrigin-RevId: 180779047"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/f50a6659b83a8b4907d3a812f93888de9297a5fb", "message": "Rework implementation of --nobuild_runfile_manifests.\n\nWhen --nobuild_runfile_manifests is passed, don't create runfiles\ninput or output manifests at all. This seems better than creating fake\nmanifest artifacts that are actually a middleman. Fail fast for local\ntests and the run command when --nobuild_runfiles_manifests is\npassed. (These cases were failing with obscure errors before under\n--nobuild_runfile_manifests-I just improved the messaging. See\nhttps://github.com/bazelbuild/bazel/issues/4177.)\n\nChange-Id: I351d26f746ecbe47016b58e4662768a5b6a72ff2\nPiperOrigin-RevId: 180659571"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "qzmfranklin": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4286", "title": "Can py_runtime use a label cc_binary target as the interpreter?", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\n\r\nI want to\r\n- build the cpython project with Bazel, and\r\n- use the Bazel-built target to create my own py_runtime.\r\n\r\nI have completely built the python binary target (a cc_binary target defined in a BUILD file) from the cpython source tree using Bazel. Check.\r\nNow I am trying to reference the python binary target from the py_runtime rule.\r\n\r\nI want to define py_runtime as the follows:\r\n```\r\npy_runtime(\r\n    name = 'py-3.7',\r\n    visibility = [\r\n        '//visibility:public',\r\n    ],\r\n    files = glob([\r\n        '//third_party/cpython:runtime',\r\n    ]),\r\n    interpreter = '//third_party/cpython:python',\r\n)\r\n```\r\n\r\nThe `//third_party/cpython:python` is the cc_binary.\r\nThe `//third_party/cpython:runtime` is the standard python runtime library. This is irrelevant to this issue.\r\n\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\nThe snippet shown above is good enough for this purpose.\r\n\r\n\r\n\r\n### Environment info\r\n* Operating System:\r\nUbuntu 16.04\r\n\r\n* Bazel version (output of `bazel info release`):\r\nrelease 0.7.0\r\n\r\n* If `bazel info release` returns \"development version\" or \"(@non-git)\", please tell us what source tree you compiled Bazel from; git commit hash is appreciated (`git rev-parse HEAD`):\r\n\r\n\r\n###  Have you found anything relevant by searching the web?\r\nNot really. I looked at the py_runtime doc (https://docs.bazel.build/versions/master/be/python.html#py_runtime).\r\n\r\nLooks like the `interpreter` argument must point to an actual binary file. But I do not want to check in the python binary, yet. Instead, I want to build the python binary from my source tree.\r\n\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n(If they are large, please upload as attachment or provide link).\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "StephenAmar": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4277", "title": "Inconsistent default character encoding across sandboxes", "body": "The default encoding seems to be different between darwin-sandbox and linux-sandbox.\r\nI wrote a small test to demonstrate:\r\n\r\n```java\r\npublic class UtfTest {\r\n  @Test\r\n  public void testCharset() throws Exception {\r\n    assertEquals(Charset.defaultCharset(), Charsets.UTF_8);\r\n  }\r\n```\r\n\r\nIf I run this test on mac os, it succeeds.\r\nIf I run it on linux, it fails:\r\n\r\nThere was 1 failure:\r\n1) testCharset(com.foo.bar.UtfTest)\r\njava.lang.AssertionError: expected:US-ASCII but was:UTF-8\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.junit.Assert.failNotEquals(Assert.java:743)\r\n\tat org.junit.Assert.assertEquals(Assert.java:118)\r\n\tat org.junit.Assert.assertEquals(Assert.java:144)\r\n\r\nA workaround I found is to specifically pass `--test_env=LC_ALL=\"en_US.UTF-8\"` to bazel.\r\nIs that expected?\r\n\r\n### Environment info\r\n* Operating System:\r\nOS X Sierra / Ubuntu 14.04\r\n\r\n* Bazel version (output of `bazel info release`):\r\nrelease 0.8.1\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4293", "title": "Allow @Ignore on junit test classes", "body": "Currently a test class annotated with `@Ignore` will cause the test\nrunner to fail with\n\n```\nException in thread \"main\" java.lang.IllegalArgumentException: Top test must be a suite\n\tat com.google.testing.junit.runner.junit4.JUnit4TestModelBuilder.get(JUnit4TestModelBuilder.java:53)\n```\n\nThis change treats classes with no tests (either no @Test annotations or\n@Ignore at class level) as an empty test suite. The main motivation\nbehind this is allowing an entire test class to be ignored (e.g. to\nquickly deal with a flaky test) without having to modify the BUILD file.\nThis is desirable in order to reduce the likelihood that a developer\nforgets to update the BUILD file when removing the `@Ignore` annotation.\n\nThis pull request overrides the previous pull request\nhttps://github.com/bazelbuild/bazel/pull/4073", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ola-rozenfeld": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4275", "title": "embed label in nightly builds", "body": "Currently, the Bazel nightly builds https://ci.bazel.io/view/Bazel%20bootstrap%20and%20maintenance/job/bazel/job/nightly/ generate binaries with empty build labels. It would help the remote execution service if these builds contained labels such as \"nightly-2017-11-27\", to help our CI identify them in the logs.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "abergmeier": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4264", "title": "Transitive tags", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\n\r\nI wanted to enable `bazel test //src/test/... --test_tag_filters=-android` (can someone explain why the sdk/ndk are not set up in the workspace in the first place?). Turns out tagging all _android_-tests is quite the work. The interesting thing is that it might not be necessary if tags would be transitive.\r\nThen we only would need to tag the base libraries and filegroups and viola - all tests would be correctly tagged.\r\n\r\n### Environment info\r\n* Bazel version (output of `bazel info release`): 0.8.1", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4213", "title": "Docker tests enforce specific docker setup", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\n\r\nWhen trying to run `bazel test //src/test/...` the docker tests fail, since they are not allowed to access `~/.docker` nor execute `docker <anything>`. The default setup on Ubuntu is that the user does not belong to a docker group.\r\nIMO anyone should be able to run all tests.\r\nMy preferred fix for that would be to actually test whether the current user is allowed to run docker.\r\n\r\n### Environment info\r\n* Operating System: Ubuntu 16.04.3\r\n* Bazel version (output of `bazel info release`): 0.8.0\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n\r\n```\r\nWARNING: Error loading config file: /home/andreas/.docker/config.json - stat /home/andreas/.docker/config.json: permission denied\r\nGot permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post http://%2Fvar%2Frun%2Fdocker.sock/v1.32/build?buildargs=%7B%7D&cachefrom=%5B%5D&cgroupparent=&cpuperiod=0&cpuquota=0&cpusetcpus=&cpusetmems=&cpushares=0&dockerfile=Dockerfile.ubuntu-16.04&labels=%7B%7D&memory=0&memswap=0&networkmode=default&q=1&rm=1&session=12820e8b93c3d11d7c94a14cadeb785af3a9057587baa403a07a1a776654eb0d&shmsize=0&t=bazel_tools_cpp_test%3Aubuntu-16.04&target=&ulimits=null: dial unix /var/run/docker.sock: connect: permission denied\r\nWARNING: Error loading config file: /home/andreas/.docker/config.json - stat /home/andreas/.docker/config.json: permission denied\r\ntime=\"2017-12-02T18:30:31+01:00\" level=error msg=\"failed to dial gRPC: cannot connect to the Docker daemon. Is 'docker daemon' running on this host?: dial unix /var/run/docker.sock: connect: permission denied\" \r\ncontext canceled\r\nWARNING: Error loading config file: /home/andreas/.docker/config.json - stat /home/andreas/.docker/config.json: permission denied\r\nDEBUG: /home/andreas/Projects/bazel/src/test/docker/docker_pull.bzl:47:5: Running `docker build`\r\nWARNING: Error loading config file: /home/andreas/.docker/config.json - stat /home/andreas/.docker/config.json: permission denied\r\nGot permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post http://%2Fvar%2Frun%2Fdocker.sock/v1.32/build?buildargs=%7B%7D&cachefrom=%5B%5D&cgroupparent=&cpuperiod=0&cpuquota=0&cpusetcpus=&cpusetmems=&cpushares=0&dockerfile=Dockerfile.debian-stretch&labels=%7B%7D&memory=0&memswap=0&networkmode=default&q=1&rm=1&session=cd8297b0ede255f8b38a01f0a2fb383fa6592d71e5e543429bab4d250bfc5d7c&shmsize=0&t=bazel_tools_cpp_test%3Adebian-stretch&target=&ulimits=null: dial unix /var/run/docker.sock: connect: permission denied\r\nWARNING: Error loading config file: /home/andreas/.docker/config.json - stat /home/andreas/.docker/config.json: permission denied\r\nGot permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post http://%2Fvar%2Frun%2Fdocker.sock/v1.32/build?buildargs=%7B%7D&cachefrom=%5B%5D&cgroupparent=&cpuperiod=0&cpuquota=0&cpusetcpus=&cpusetmems=&cpushares=0&dockerfile=Dockerfile.centos6.7&labels=%7B%7D&memory=0&memswap=0&networkmode=default&q=1&rm=1&session=5982b0b7b9cbd7afa89a78901f9c71a495870d00243ca0956ef872df8e79d22f&shmsize=0&t=bazel_tools_cpp_test%3Acentos6.7&target=&ulimits=null: dial unix /var/run/docker.sock: connect: permission denied\r\ntime=\"2017-12-02T18:30:31+01:00\" level=error msg=\"failed to dial gRPC: cannot connect to the Docker daemon. Is 'docker daemon' running on this host?: dial unix /var/run/docker.sock: connect: permission denied\" \r\ncontext canceled\r\nERROR: /home/andreas/Projects/bazel/src/test/docker/BUILD:13:6: no such package '@docker-fedora23//': docker build failed with error code 1:\r\nWARNING: Error loading config file: /home/andreas/.docker/config.json - stat /home/andreas/.docker/config.json: permission denied\r\ntime=\"2017-12-02T18:30:31+01:00\" level=error msg=\"failed to dial gRPC: cannot connect to the Docker daemon. Is 'docker daemon' running on this host?: dial unix /var/run/docker.sock: connect: permission denied\" \r\ncontext canceled\r\n and referenced by '//src/test/docker:bazel_cc_configure-fedora23-opt'\r\nERROR: Analysis of target '//src/test/docker:bazel_cc_configure-fedora23-opt' failed; build aborted: no such package '@docker-fedora23//': docker build failed with error code 1:\r\nWARNING: Error loading config file: /home/andreas/.docker/config.json - stat /home/andreas/.docker/config.json: permission denied\r\ntime=\"2017-12-02T18:30:31+01:00\" level=error msg=\"failed to dial gRPC: cannot connect to the Docker daemon. Is 'docker daemon' running on this host?: dial unix /var/run/docker.sock: connect: permission denied\" \r\ncontext canceled\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4113", "title": "Implement cc_toolchain_suite in Skylark", "body": "### Description of the problem / feature request / question:\r\n\r\nCurrently the steps for a toolchain are `cc_configure` -> `CROSSTOOL` -> Java impl. This makes writing a custom toolchain (_clang_, _spir_, ...) cumbersome because you can only use the former, if it matches very much the implicit Java impl logic. So the only choice you have often is to write your own implementation from scratch (and hit a wall sooner or later).\r\nIt would be great to have the implicit Java impl logic available in Skylark and with that step perhaps also retire `CROSSTOOL`.\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4005", "title": "Support C++ modules", "body": "### Description of the problem / feature request / question:\r\n\r\nStarting to look into C++ Modules. While it will earliest officially arrive in 2020, would be good to have support for that soonish.\r\nHeard there is some Module support inside of Google. Can/Will that be opensourced?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4210", "title": "Enable override of cc tools", "body": "~~For every tool, there is a corresponding environment variable, which\r\noverrides platform resolution and defaults.~~", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4180", "title": "Apply % encoding to CPLUS_INCLUDE_PATH.", "body": "As a result, `%` and `:` from now on need to be escaped.\r\nErrors will be shown when unescaped characters are detected.\r\nIt silently breaks if there is a `%:` anywhere in CPLUS_INCLUDE_PATH.\r\nWith proper encoding this needs to be `%%:` now.\r\n\r\nChanges:\r\n- Reverse `escape_string` with `unescape_string`\r\n- Proper escaping can be checked with `get_escaping_error` (with returned error being None)\r\n- Split of encoded string with `split_escaped_by_sep`\r\n- Add tests for all latest macros", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4123", "title": "Enable override linker flags", "body": "Not everyone wants to link with stdc++. Enable overriding standard link flags with LINK_FLAGS.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4121", "title": "Enable internal C++ compiler path", "body": "Enable overriding path to C++ compiler without having to go through `which` validation.\r\nIntroduces a new `BAZEL_CC` environment variable, which gets evaluated before `CC`.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/18612273", "body": "Dumb question but why are you referencing `python` at all and not directly replace that line by e.g. `#!%python_plat_binary%`?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/18612273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/18627658", "body": "`PYTHONPATH` can be set from Java with `ProcessBuilder`, too.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/18627658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/18631970", "body": "Well you could execute a watcher in a child process, which deletes the `module_space` upon `SIGTERM` or so.Then `exec` should be possible.\n\nOn the other hand wiring at least signal processing is not that hard (for the `subprocess` variant).\n\nBiggest problem is that you have two code paths which handle pretty different currently, which is bound to be bad, maintainance, feature and bug wise.\nWould be good if you guys could choose one way to proceed and then make that one solution stick for all cases.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/18631970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20226624", "body": "Why not change all to wide variant? IME normally on Windows you choose one and stick to it. If you don't then there is a good chance that you will have oversights at some points and introduce subtle bugs.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20226624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25268377", "body": "So this is deprecated for 2 years but still in use!?\r\n/cc @damienmg ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25268377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25669809", "body": "Why are you not using `constexpr` here? And above all it enforces ODR.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25669809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25669853", "body": "Is writing ifs with mutation and side effects ok inside of Google?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25669853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25673150", "body": "No specific issue. Personally prefer const only access in conditionals. They prevent unnecessary split of lines and make reordering easier to reason about.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25673150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25716187", "body": "Cookie point for effort. Problem is that the output is dependent on other flags (e.g. `-nostdinc`, `-nostdinc++`, ...). Question is how to best pass these options to honor these.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25716187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25779489", "body": "So in essence this means that you cannot use `:` in include paths.\r\nThe way around this would be to allow `%` escaping (`:` -> `%:`). Problem then is that you break current `CPLUS_INCLUDE_PATH`s which contain an unescaped `%`.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25779489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25779739", "body": "Alternative would be to allow setting the separator via an environment variable like `BAZEL_SEP`.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25779739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25779747", "body": "/cc @mhlopko ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25779747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25825653", "body": "> I guess you're starting to see why I gave up on improving this pile of hacks and instead plan to design something more robust? :)\r\n\r\nMeanwhile we are stuck with this pile of hacks for the time being.\r\nThe thing that scares me is that currently there are no tests in place to validate that this still works when something more robust is activated.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25825653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25825714", "body": "> Let's break unescaped %, we'll put that into relnotes so people know.\r\n\r\nGood choice :). I even have a version in the works that checks for escaping errors.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25825714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26135869", "body": "This seems like nonsense. This code path does not have docker - why try to execute it later (via `docker_build`)?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26135869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/70493465", "body": "Is there a particular reason why you included the C headers instead of C++ wrappers like `stdio.h` instead of `cstdio`? The former always feels so wrong when working with C++.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/70493465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/73743228", "body": "Should now be limited sufficiently.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/73743228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "aahmed-se": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4260", "title": "Bazel 0.8.0 migration issue", "body": "We are currently trying to move from bazel 0.7.0 to 0.8.0 for heron and having a error with shell script execution which works fine on 0.7.0\r\n\r\n### Description of the problem / feature request / question:\r\nThe issue is during the execution of this rule\r\nhttps://github.com/twitter/heron/blob/master/tools/rules/pex/BUILD\r\n\r\nIt seems the way we handle long terminal lines in linux is not longer working in 0.8.0 the problem does not appear in darwin , so it something specific to linux, and is related to bazel changes.\r\n\r\n```\r\nERROR: /home/jenkins/test/heron/tools/rules/pex/BUILD:4:1: Bootstrapping pex //tools/rules/pex:pex_wrapper failed (Exit 126): bash failed: error executing command \r\n  (cd /home/jenkins/.cache/bazel/_bazel_jenkins/4aee62fbf194cfd9f33e35137c9b5465/execroot/__main__ && \\\r\n  exec env - \\\r\n    PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games \\\r\n  /bin/bash -c 'source external/bazel_tools/tools/genrule/genrule-setup.sh; \r\n        OUTDIR=$(cd bazel-out/host/bin/tools/rules/pex && pwd)\r\n        # Workaround really long shebang lines breaking on linux:\r\n        # Use a /tmp path, but keep the actual venv inside the bazel outdir.\r\n        # Avoids having to worry about cleanup, even if sandboxing is off.\r\n        TMPF=$(mktemp -d -t pex.XXXXX)\r\n        ln -sf \"$OUTDIR\" \"$TMPF\"\r\n        VENV=\"${TMPF}/venv\"\r\n\r\n        bazel-out/host/bin/external/virtualenv/virtualenv --no-download --quiet --clear \"$VENV\"\r\n        PYTHON=\"$VENV/bin/python\"\r\n\r\n        $VENV/bin/pip install pex             --quiet --no-cache-dir --no-index --build bazel-out/host/bin/tools/rules/pex/pexbuild             --find-links $(dirname external/pex_src/file/pex-1.2.11.tar.gz)             --find-links $(dirname external/wheel_src/file/wheel-0.29.0.tar.gz)             --find-links $(dirname external/setuptools_src/file/setuptools-31.0.0.tar.gz)\r\n\r\n        # Work around setuptools insistance on writing to the source directory,\r\n        # which is discouraged by Bazel (and annoying)\r\n        cp -r $(dirname tools/rules/pex/wrapper/setup.py) bazel-out/host/bin/tools/rules/pex/.pex_wrapper\r\n\r\n        # Use the bootstrapped pex to build pex_wrapper.pex\r\n        $VENV/bin/pex bazel-out/host/bin/tools/rules/pex/.pex_wrapper             --disable-cache --no-index -m pex_wrapper -o bazel-out/host/bin/tools/rules/pex/pex_wrapper.pex             --find-links $(dirname external/pex_src/file/pex-1.2.11.tar.gz)             --find-links $(dirname external/setuptools_src/file/setuptools-31.0.0.tar.gz)             --find-links $(dirname external/requests_src/file/requests-2.12.3.tar.gz)             --find-links $(dirname external/wheel_src/file/wheel-0.29.0.tar.gz)\r\n    ')\r\n/bin/bash: /home/jenkins/.cache/bazel/_bazel_jenkins/4aee62fbf194cfd9f33e35137c9b5465/execroot/__main__/tmp52e_d7d65d35d0518793/pex.LIWGE/venv/bin/pip: /home/jenkins/.cache/bazel/_bazel_jenkins/4aee62fbf194cfd9f33e35137c9b5465/ex: bad interpreter: No such file or directory\r\nTarget //scripts/packages:binpkgs failed to build\r\n```\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\nclone twitter heron repo and execute on an ubuntu machine with bazel 0.8.0\r\nbazel build -c opt --config=ubuntu scripts/packages:binpkgs\r\n\r\n\r\n### Environment info\r\n* Operating System: ubuntu 16.04\r\n\r\n\r\n* Bazel version (output of `bazel info release`): 0.8.0\r\n\r\n\r\n* If `bazel info release` returns \"development version\" or \"(@non-git)\", please tell us what source tree you compiled Bazel from; git commit hash is appreciated (`git rev-parse HEAD`):\r\n\r\n\r\n###  Have you found anything relevant by searching the web?\r\n(e.g. [StackOverflow answers](http://stackoverflow.com/questions/tagged/bazel),\r\n[GitHub issues](https://github.com/bazelbuild/bazel/issues),\r\nemail threads on the [`bazel-discuss`](https://groups.google.com/forum/#!forum/bazel-discuss) Google group)\r\n\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n(If they are large, please upload as attachment or provide link).\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vmrob": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4255", "title": "Can someone elaborate on the instructions to install zsh completion?", "body": "I'm looking at the instructions for how to install zsh completion [here](https://docs.bazel.build/versions/master/install.html#zsh) and am left a little confused about what to do. I'm only a casual user of ZSH, so I think I'm missing something fundamental.\r\n\r\n># Getting zsh completion\r\n>\r\n>Bazel also comes with a zsh completion script. To install it:\r\n>\r\n>Add this script to a directory on your `$fpath`:\r\n>```\r\n>fpath[1,0]=~/.zsh/completion/\r\n>mkdir -p ~/.zsh/completion/\r\n>cp scripts/zsh_completion/_bazel ~/.zsh/completion\r\n>```\r\n>\r\n>You may have to call `rm -f ~/.zcompdump; compinit` the first time to make it work.\r\n>\r\n>Optionally, add the following to your .zshrc.\r\n>```\r\n># This way the completion script does not have to parse Bazel's options\r\n># repeatedly.  The directory in cache-path must be created manually.\r\n>zstyle ':completion:*' use-cache on\r\n>zstyle ':completion:*' cache-path ~/.zsh/cache\r\n>```\r\n\r\nThe second step is very clear, but the first is confusing to me.\r\n\r\nMy `$fpath` includes a whole list of directories. So should I just pick a directory and write a file with the contents of that first script? Does it matter what I name it? Is there an existing convention I should be following? I'm reviewing the docs for zsh functions at http://zsh.sourceforge.net/Doc/Release/Functions.html, but I'm still unsure of how to proceed.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "4ZM": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4248", "title": "Option to set outputRoot to ex /tmp/bazel instead of ~/.cache/bazel", "body": "I would like to set the outputRoot to somewhere outside the home directory (and that the location is specified on command line or in the .bazelrc.\r\n\r\nI don't want to set the outputUserRoot or the outputBase, but the top level outputRoot. I still want the username and workspace hash directories under my new outputRoot directory.\r\n\r\n### Environment info\r\n* Operating System:\r\nLinxu (Ubuntu)\r\n\r\n* Bazel version (output of `bazel info release`):\r\nTried without finding solution on 0.8.0\r\n\r\n###  Have you found anything relevant by searching the web?\r\nRef [`bazel-discuss`](https://groups.google.com/forum/#!topic/bazel-discuss/OCSu95cM5Hw) Google group question about this)\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "NicholasGorski": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4241", "title": "Clarify best practices for third-party dependencies", "body": "Currently the documentation for third-party dependencies suggests the best practice is to declare an external dependency, rather than vendor the code into the repository.\r\n\r\nWhat is the justification for this preference? Google does not do this internally, and it makes the build dependent on the availability of things outside my own repository. I could see this being justified with a preference to simplicity or ease of use, but not justified with a preference to better hermeticity or availability (or if I need to apply patches).\r\n\r\nCan this documentation or this issue be updated to clarify this decision? Or perhaps make the better practice conditional on the goal of the user. Thanks!", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chaoren": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4227", "title": "Wrong name for bazel process", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\n\r\nBazel process name is\r\n```\r\nbazel(<parent of workspace directory>)\r\n```\r\ninstead of\r\n```\r\nbazel(<workspace name>)\r\n```\r\nThis is probably because there's only one workspace with blaze, and we use the client name instead. This is wrong for bazel, however.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n1. Run long bazel command\r\n2. \r\n```\r\n$ pgrep -fa bazel\r\n<pid> bazel(<parent of workspace directory>) -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=...\r\n```\r\n### Environment info\r\n* Operating System: Debian\r\n* Bazel version (output of `bazel info release`): release 0.8.0rc2\r\n\r\n###  Have you found anything relevant by searching the web?\r\n(e.g. [StackOverflow answers](http://stackoverflow.com/questions/tagged/bazel),\r\n[GitHub issues](https://github.com/bazelbuild/bazel/issues),\r\nemail threads on the [`bazel-discuss`](https://groups.google.com/forum/#!forum/bazel-discuss) Google group)\r\n\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n(If they are large, please upload as attachment or provide link).\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "siddharthab": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4222", "title": "clientEnv is cached for workspace status command", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\nThe client environment passed to the BazelWorkspaceStatusModule is cached across runs.\r\nhttps://github.com/bazelbuild/bazel/blob/d926bc40260549b997a6a5a1e82d9e7999dbb65e/src/main/java/com/google/devtools/build/lib/bazel/BazelWorkspaceStatusModule.java#L106\r\n\r\nThis means we have to do `bazel clean` whenever any stable value changes as a result of change in environment variables.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\nFile env_status.sh\r\n```\r\n#!/bin/bash\r\nenv | sed -e 's/^/STABLE_/' -e 's/\\=/ /'\r\n```\r\n\r\nFile WORKSPACE is empty.\r\n\r\nDemonstration:\r\n```\r\n(bazel build --workspace_status_command=./env_status.sh @bazel_tools//tools/zip:zipper 2>&1 && cat bazel-out/stable-status.txt) | grep STABLE_FOO\r\n# Not found; expected.\r\n\r\n# Set a new environment variable and check.\r\nexport FOO=\"Checking environment input.\"\r\n(bazel build --workspace_status_command=./env_status.sh @bazel_tools//tools/zip:zipper 2>&1 && cat bazel-out/stable-status.txt) | grep STABLE_FOO\r\n# Not found; unexpected.\r\n\r\n# Clean cache and try again.\r\nbazel clean\r\n(bazel build --workspace_status_command=./env_status.sh @bazel_tools//tools/zip:zipper 2>&1 && cat bazel-out/stable-status.txt) | grep STABLE_FOO\r\n# Found; expected.\r\n\r\nunset FOO\r\n(bazel build --workspace_status_command=./env_status.sh @bazel_tools//tools/zip:zipper 2>&1 && cat bazel-out/stable-status.txt) | grep STABLE_FOO\r\n# Found; unexpected.\r\n```\r\n\r\n### Environment info\r\n* Operating System:\r\nmacOS 10.13.1\r\n\r\n* Bazel version (output of `bazel info release`):\r\nrelease 0.8.0-homebrew\r\n\r\n###  Have you found anything relevant by searching the web?\r\nNothing related to client environment in relation to stable or volatile status.\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dbabkin": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4221", "title": " Fix return type for JavaInfo.getSourceJars() ", "body": "getSourceJars() returns SkylarkList<Artifact> now.\r\n\r\nShould be NestedSet<Artifact> as was before in JavaSkylarkApiProvider and to be consistent with other methods which returns collection of Jar files.\r\n\r\nAlso consider some cleaning in scope of this task, as this method can be already used by someone.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/fca3d391161ae4c92cf289a897db2a1c69a9b334", "message": "Create function createJavaInfo with new API. Implement JavaExportsProvider.\n\nAdded tests for checking JavaExportsProvider state.\nRefactored logic working with collection in favor of using Streams to improve readability.\nAll other providers will be implemented in next CLs.\n\nprevious CL with JavaCompilationArgsProvider implementation is https://github.com/bazelbuild/bazel/commit/32dff21d00ad7d1bdf50e8761d675a6e7e002de9,\nJavaSourceJarsProvider : https://github.com/bazelbuild/bazel/commit/5bd53cb609480ca896ca2d011f415b424c63ce63\n\nRELNOTES:none\nPiperOrigin-RevId: 182342490"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/5bd53cb609480ca896ca2d011f415b424c63ce63", "message": "Create function createJavaInfo with new API. Implement JavaSourceJarsProvider.\n\nAdded tests for checking JavaSourceJarsProvider state.\nAll other providers will be implemented in next CLs.\n\nprevious CL with JavaCompilationArgsProvider implementation is https://github.com/bazelbuild/bazel/commit/32dff21d00ad7d1bdf50e8761d675a6e7e002de9\n\nRELNOTES:none\nPiperOrigin-RevId: 182028182"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/32dff21d00ad7d1bdf50e8761d675a6e7e002de9", "message": "Create function createJavaInfo with new API. Implement JavaCompilationArgsProvider.\n\nAdded tests for checking JavaCompilationArgsProvider state.\nAll other providers will be implemented in next CLs.\n\nRELNOTES:none\nPiperOrigin-RevId: 181451235"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "th0br0": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4218", "title": "Test cannot load other library target at runtime via dlopen", "body": "### Description of the problem / feature request / question:\r\n\r\nThere is no easy way for a test to load another target at runtime using dynloading.\r\nThe only solution I have found so far is to add the library to `deps` and then reference via e.g. \"`$CWD + /../_solib_local/libtests_Slibmylib.so`\" but this is an ugly hack. There seems to exist no way to add the output of a `cc_library` target to the test's runfiles directory.\r\n\r\nOne example use case for this is testing a module ABI for run-time plugins.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\nThis is a sketch and not a runnable example. I can provide one if preferred.\r\n\r\n```python\r\ncc_test(name=\"dl_test\", srcs=[\"test.c\"],data=[\":mylib\"])\r\ncc_library(name=\"mylib\", srcs=[\"lib.c\"])\r\n```\r\n\r\nwith `test.c` containing:\r\n```c\r\nint main(int argc, char** argv) {\r\n// ...\r\n  void* handle = dlopen(\"libmylib.so\", RTLD_NOW);\r\n// ...\r\n}\r\n```\r\nThis will work fine when run from the workspace dir after a `bazel build` but not via `bazel test` because the library can't be found.\r\n### Environment info\r\n* Operating System:\r\nLinux / OS-independent\r\n\r\n* Bazel version (output of `bazel info release`):\r\n`release 0.8.0`\r\n\r\n###  Have you found anything relevant by searching the web?\r\nNo.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "softprops": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4209", "title": "consider moving to preemptive auth for remove cache interactions", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\n\r\nThe implementation of remote caches http blob store results in two requests for every logical single request when the remote_rest_cache value contains basic authentication credentials\r\n\r\n```bash\r\n--remote_rest_cache=https://user:pass@myhost.com\r\n```\r\n\r\nThis can be observed by monitoring the responses a remote cache server returns, typically a 401, before the client sends a second request containing the credentials. This is the default behavior of apache httpclient but results doubling the network chatter between a bazel build and a cache server\r\n\r\nThe potential improvement to be made is to opt into [preemptive auth](http://hc.apache.org/httpclient-3.x/authentication.html#Preemptive_Authentication). I think this could probably happen with a small change to the RestBlobStore [here](https://github.com/bazelbuild/bazel/blob/062da5cbb5848dbfa1cf8bae028b06313a84ef0d/src/main/java/com/google/devtools/build/lib/remote/blobstore/RestBlobStore.java#L60).\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\nset up a remote build cache with basic auth authentication and configure a bazel build with a remote_rest_cache parameter\r\n\r\n```bash\r\n--remote_rest_cache=https://user:pass@myhost.com\r\n```\r\n\r\nObserve two requests for every http interaction with the remote cache server.\r\n\r\n\r\n\r\n### Environment info\r\n* Operating System:\r\n\r\n\r\n* Bazel version (output of `bazel info release`):\r\n\r\n\r\n* If `bazel info release` returns \"development version\" or \"(@non-git)\", please tell us what source tree you compiled Bazel from; git commit hash is appreciated (`git rev-parse HEAD`):\r\n\r\n\r\n###  Have you found anything relevant by searching the web?\r\n(e.g. [StackOverflow answers](http://stackoverflow.com/questions/tagged/bazel),\r\n[GitHub issues](https://github.com/bazelbuild/bazel/issues),\r\nemail threads on the [`bazel-discuss`](https://groups.google.com/forum/#!forum/bazel-discuss) Google group)\r\n\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n(If they are large, please upload as attachment or provide link).\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mattmoor": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4207", "title": "Support changing the working directory of repository_ctx.execute", "body": "### Description of the feature request:\r\n\r\nI want to be able to direct `repository_ctx.execute` to run in a particular directory.  I believe right now it executes under `external/` vs. `external/<repo_name>`, which is where it should be putting files.  So unless every tool we invoke supports changing directories, this is inadequate.\r\n\r\nThis can be worked around by trampolining through a script that changes into the appropriate directory.\r\n\r\n@damienmg FYI", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/112085454", "body": "s/os.path.join/_join_path/\r\n\r\nI meant the equivalent of this std Python library, which for Bazel is defined in `path.bzl`\r\n\r\nThe same below.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/112085454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/112085486", "body": "Path joining should replace this.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/112085486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "achew22": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4205", "title": "Aliases don't correctly destination targets that contain a /", "body": "Aliases don't correctly destination targets that contain a /\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\n```\r\nsh_test(\r\n  name = \"demo/foryou\",\r\n  srcs = [\"test.sh\"],\r\n)\r\n\r\nalias(\r\n  name = \"test\",\r\n  actual = \":demo/foryou\",\r\n)\r\n```\r\n\r\n```\r\n$ bazel test :test\r\n...\r\nERROR: missing input file :demo/foryou'\r\n...\r\n```\r\n\r\n### Environment info\r\n* Operating System: Linux\r\n* Bazel version (output of `bazel info release`): release 0.8.0\r\n\r\n###  Have you found anything relevant by searching the web?\r\nNope", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4100", "title": "load('ing a file that doesn't exist in WORKSPACE should tell you what file it errored in", "body": "### Description of the problem / feature request / question:\r\n\r\nIf you attempt to `load` a `.bzl` file in the `WORKSPACE` that doesn't exist you get the following error:\r\n\r\n`ERROR: error loading package '': Extension file not found. Unable to load file '//path/to:import.bzl': file doesn't exist or isn't a file`\r\n\r\nSince this is an error new users are likely to experience it might be worth prioritizing since it may drive people away before they experience the awesome.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\nWORKSPACE:\r\n\r\n```\r\nload(\"//path/to:import.bzl\", \"doesnt_exit\")\r\n```\r\n\r\n### Environment info\r\n* Operating System: Linux\r\n* Bazel version (output of `bazel info release`): release 0.8.0rc2", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3931", "title": "Bazel crashes on test success with error java.lang.IllegalStateException", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\n\r\nBazel crashes on test success with `error java.lang.IllegalStateException`\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\nYou can view the results of a TravisCI run here https://travis-ci.org/bazelbuild/bazel-watcher/jobs/288897545\r\n\r\ngit clone git@github.com:bazelbuild/bazel-watcher.git\r\ncd bazel-watcher\r\nbazel test //...\r\n\r\n### Environment info\r\n* Operating System:\r\nLinux and macOS\r\n\r\n* Bazel version (output of `bazel info release`):\r\n\r\n0.6.1 but also happens on 0.7.0 locally on my laptop.\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nNot really, it's a prety opaque error. The only results I've found on the web are the actual line of code that throws the exception.\r\n\r\nIt may be fixed by https://github.com/bazelbuild/bazel/commit/59984b5bb795f6067117be47c44ddb21ccc376de, but even with that new message it's not clear what I am doing wrong.\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n\r\nhttps://travis-ci.org/bazelbuild/bazel-watcher/jobs/288897545", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "snnn": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4203", "title": "[Feature Request] Please document how to use a static analyzer with bazel", "body": "We often need to run static analyze on our code, but most static analyze tools (e.g. clang scan-build, HP Fortify SCA) do not  have a document of how to use it with bazel.  For most users, it's not a easy to find a way to do that. (see #1622). \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4078", "title": "Misspelling in BazelCcStaticLibraryRule.java?", "body": "```diff\r\n--- a/src/main/java/com/google/devtools/build/lib/bazel/rules/cpp/BazelCcStaticLibraryRule.java\r\n+++ b/src/main/java/com/google/devtools/build/lib/bazel/rules/cpp/BazelCcStaticLibraryRule.java\r\n   @Override\r\n   public  Metadata getMetadata() {\r\n     return RuleDefinition.Metadata.builder()\r\n-        .name(\"cc_shared_library\")\r\n+        .name(\"cc_static_library\")\r\n         .ancestors(CcBaseRule.class, BaseRuleClasses.MakeVariableExpandingRule.class)\r\n         .factoryClass(BazelCcStaticLibrary.class)\r\n         .build();\r\n```\r\n\r\nBTW, what's the status of \"Bazel C/C++ Transitive Libraries\"?  I hope I can use this for building a static tensorflow library on windows. ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3949", "title": "\"alwayslink=1\" is broken on Windows and VS 2017", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\n\"alwayslink=1\"  doesn't work anymore.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\nBuild file:\r\n```\r\ncc_binary(\r\n    name = \"h\",\r\n    srcs = [\"main.cpp\"],\r\n    deps = [\":a1\"]\r\n)\r\n\r\ncc_library(\r\nname=\"a1\",\r\nsrcs=[\"a1.cpp\"],\r\nvisibility=[\"//visibility:public\"],\r\nalwayslink=1,\r\nlinkstatic=1\r\n)\r\n```\r\n\r\nmain.cpp\r\n\r\n```cpp\r\n#include <stdio.h>\r\n\r\nint main(){\r\n\tprintf(\"main\\n\");\r\n\treturn 0;\r\n}\r\n```\r\na1.cpp\r\n```cpp\r\n#include <stdlib.h>\r\n#include <stdio.h>\r\n\r\nclass Hello{\r\npublic:\r\nHello(){\r\n\tprintf(\"hello\\n\");\r\n}\r\n};\r\n\r\nstatic Hello h;\r\n```\r\n\r\nWhen you run \"h.exe\", the expected output should be \r\n<hr/>\r\nhello <br/>\r\nmain\r\n<hr/>\r\n\r\n### Environment info\r\n* Operating System:\r\nWindows 10, Visual Studio 2017(15.4.1)\r\n\r\n* Bazel version (output of `bazel info release`):\r\n0.7.0\r\n\r\n###  Have you found anything relevant by searching the web?\r\nno\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n\r\nI've found the root cause: In \"h.exe-2.params\", the file path after \"/WHOLEARCHIVE:\" should use '\\\\' as path separator, not '/'\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "djudd-stripe": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4201", "title": "Support --include_imports equivalent in proto_library", "body": "### Description of the feature request:\r\n\r\nWe would find it useful to have an attribute on the native `proto_library` rule which causes it to behave like protoc when passed `--include_imports`, which would include all the transitive descriptor set contents in the output descriptor set. Supporting self-contained descriptor set outputs in this way would make it easier to write tooling that uses descriptor sets as the import/export unit for passing schemas between repos, which in our setting are not always built with Bazel, and it would bring the rule closer to feature parity with using protoc directly.\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4155", "title": "Allow specifying http(s)_proxy per http_archive", "body": "### Feature request:\r\nWe have an internal corporate HTTP egress proxy that disallows queries to internal resources, for security reasons. Requests to the internet from some of our servers are required to go through this proxy. Meanwhile, I have a Bazel workspace that depends on some artifacts hosted on internal servers, and some artifacts hosted externally. Whether or not I set HTTP_PROXY & HTTPS_PROXY, some artifacts will be broken.\r\n\r\nSpecifying the http_proxy & https_proxy (for my use case, they're the same) per http_archive rule would let me make this work with Bazel. I suggest adding one or two attributes, whose values override the environment variables if present (but the environment variables could take precedence and my use case would still be ok).\r\n\r\nI could work around this by modifying our egress proxy in theory, or by mirroring all artifacts internally, but both have downsides, and it seems simple to solve this on the client side.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4155/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "plinnell": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4195", "title": "RPM for openSUSE / SUSE Enterprise Linux  / Need for dependency listing. ", "body": "* Operating System:  Linux\r\n\r\n\r\n* Bazel version (output of `bazel info release`):\r\n0.8.0\r\n\r\n#2701 is related\r\n\r\nI'm developing an rpm for openSUSE / SUSE which will be built on https://build.opensuse.org and hosted in a repo with a pretty permanent address on download.opensuse.org\r\n\r\nBefore getting it officially in the distro, we need to be able to build bazel without the bundled third party bits. To do so, I would need a full list of the dependencies either as jars or libraries. Is there a way to get bazel to use the distro version of protobuf ? That is already in the distro and I suspect most of the bundled jars.\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "monkeynova": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4191", "title": "Protobuf sample workspace file is missing required fields", "body": "The documentation at https://blog.bazel.build/2017/02/27/protocol-buffers.html provides a sample WORKSPACE file to get started with the proto libraries. It includes a shortened form of the workspace found at https://github.com/cgrushko/proto_library/blob/master/WORKSPACE for brevity.\r\n\r\nUnfortunately the inline documentation doesn't include the strip_prefix field which is required to get the build working, and it was non-intuitive from the error what exactly when wrong (see below for the specific error I got).\r\n\r\nCan the documentation be updated to include the strip_prefix (and maybe the sha256 too since that would be good practice) to make sure that it's easy for a user to get up and running quickly?\r\n\r\nkeith-mbp:logic-solver keith$ bazel run -c opt :swimming_pool -- --brute_force\r\nERROR: /Users/keith/github/logic-solver/BUILD:25:1: every rule of type proto_library implicitly depends upon the target '@com_google_protobuf//:protoc', but this target could not be found because of: no such package '@com_google_protobuf//': BUILD file not found on package path.\r\nERROR: Analysis of target '//:swimming_pool' failed; build aborted: Loading failed.\r\nINFO: Elapsed time: 2.171s\r\nERROR: Build failed. Not running target.\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ambrusc": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4189", "title": "OSX: Changing file contents without changing its size doesn't trigger a rebuild of cc_binary", "body": "### Description of the problem:\r\nChanging file contents without changing the file size should probably trigger a rebuild, but it doesn't on my OSX machine. I can test on Linux and Windows tomorrow.\r\n\r\n### To repro:\r\n1 . download [osx_no_rebuild.zip](https://github.com/bazelbuild/bazel/files/1512649/osx_no_rebuild.zip) (or do this in any other workspace -- there is nothing special about this one)\r\n2. Run `bazel build //osx_no_rebuild:main && ./bazel-bin/osx_no_rebuild/main`: observe one target rebuilt.\r\n3. Make any change (including a syntax-breaking change) in main.cpp _without changing the file size_.\r\n2. Run `bazel build //osx_no_rebuild:main && ./bazel-bin/osx_no_rebuild/main`: observe no targets built; the cached binary from step 2. is executed instead.\r\n\r\n### Environment info\r\n* Operating System: OSX 10.12.5, bash on iterm 3.1.beta.6, bazel 0.7.0-homebrew, and Sublime Text 2\r\n* Bazel version (output of `bazel info release`): release 0.7.0-homebrew\r\n* Output of `bazel version`\r\nBuild label: 0.7.0-homebrew\r\nBuild target: bazel-out/darwin_x86_64-opt/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\r\nBuild time: Sun Nov 12 03:11:31 2017 (1510456291)\r\nBuild timestamp: 1510456291\r\nBuild timestamp as int: 1510456291\r\n\r\n### Relevant or similar issues:\r\nIssue #1525 seems somewhat similar, but didn't yield an answer. #2674 may be mildly relevant.\r\n\r\nhttps://github.com/bazelbuild/bazel/issues/1525#issuecomment-266976638 about DigestUtils may be relevant, or https://github.com/bazelbuild/bazel/issues/1525#issuecomment-273709447 about FSEvents on OSX.\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MYasin93": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4169", "title": "Build Bazel on LXC ARM take very very long time", "body": "Processor : Intel\u00ae Core\u2122 i5-3320M CPU @ 2.60GHz \u00d7 4 \r\nMemory : 8 GiB\r\nMain OS : 64-bit ubuntu xenial \r\n----------------------------------------------------------------------\r\n\r\nI am using LXC ARM7l Architecture ubuntu xenial and tried to build bazel onto it but it takes 50 hrs and still building at that moment !! I think that is very long time and it still printing some lines like those \r\n![bp43n](https://user-images.githubusercontent.com/34027840/33264537-a84d6ea4-d376-11e7-815d-7fd8a3b63071.png)\r\n\r\nThere is something not right, isn't it ? what is it ??", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mfarrugi": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4167", "title": "Standardized config_settings", "body": "Platform `config_settings` are very common and often duplicated, like [this](https://github.com/google/brotli/blob/master/BUILD#L14). \r\n\r\nIt would be useful to provide these in a standardized or built-in way.\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nictuku": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4161", "title": "Can't easily import googleapis into my WORKSPACE", "body": "The [github.com/googleapis/googleapis][1] repository has several `.proto` files for Google APIs, including for example the Google Assistant one.\r\n\r\nUnfortunately, though unsurprisingly, they are missing BUILD files so it's not possible to build them from Bazel by purely importing the remote repository.\r\n\r\nI can vendor it as a stop-gap solution, no big deal, but this seems sub-optimal at scale.\r\n\r\n1. Could the googleapis repo have BUILD.bazel files? OR\r\n1. Could Bazel somehow live without explicitly checked in BUILD files for protos? \r\n\r\nI would suggest that you consider the 2nd option. Imagine a world where a lot of people write gRPC services and want to publish them for the world to use. There needs to be an easy way for folks to share .protos and Bazel is *almost* the perfect solution, except that demanding that all upstream services have BUILD files makes it hard to even get started.\r\n\r\nWould it be possible to improve this? Thanks!\r\n\r\n  [1]: https://github.com/googleapis/googleapis", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/83d0d90b20f6ff1a09c9361c991301b14f4585ee", "message": "Fix link to cpp-use-cases.md\n\nCloses #4352.\n\nPiperOrigin-RevId: 180659440"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sk-": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4157", "title": "Targets are not visible by packages in javatests", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\nThe documentation on https://docs.bazel.build/versions/master/be/common-definitions.html#common-attributes says that \"Rules in javatests/foo/bar can always use rules in java/foo/bar\" when the visibility is private, which is the default.\r\n\r\nHowever in practice I see that this is not the case, and that both with the default visibility and with `package(default_visibility = [\"//visibility:private\"])` and with `visibility = [\"//visibility:private\"],` I get the following error:\r\n\r\n```\r\n$ bazel test javatests/com/sample:SampleTest\r\nERROR: /project/javatests/com/sample/BUILD:13:1: Target '//java/com/sample:Sample' is not visible from target '//javatests/com/sample:SampleTest'. Check the visibility declaration of the former target if you think the dependency is legitimate.\r\nERROR: Analysis of target '//javatests/com/sample:SampleTest' failed; build aborted: Analysis of target '//javatests/com/sample:SampleTest' failed; build aborted.\r\nINFO: Elapsed time: 0.093s\r\nERROR: Couldn't start the build. Unable to run tests.\r\n```\r\n\r\nThe file structure of my project is as following:\r\n```\r\nWORKSPACE\r\njava/com/sample\r\n  BUILD\r\n  Sample.java\r\njavatests/com/sample\r\n  BUILD\r\n  SampleTest.java\r\n```\r\n\r\nwhere the `BUILD` files are:\r\n\r\n```\r\njava_library(\r\n    name = \"Sample\",\r\n    srcs = [\"Sample.java\"],\r\n)\r\n```\r\n\r\n```\r\njava_test(\r\n    name = \"SampleTest\",\r\n    srcs = [\"SampleTest.java\"],\r\n    deps = [\r\n        \"//java/com/sample:Sample\",\r\n        \"@junit//jar\",\r\n        \"@com_google_truth//jar\",\r\n        \"@com_google_guava//jar\",\r\n     ],\r\n)\r\n```\r\n\r\n_If asking a question or requesting a feature, also tell us about the underlying problem you're trying to solve._\r\n\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\n\r\n### Environment info\r\n* Operating System:\r\nMacOS X\r\n\r\n* Bazel version (output of `bazel info release`):\r\nrelease 0.7.0-homebrew\r\n\r\n* If `bazel info release` returns \"development version\" or \"(@non-git)\", please tell us what source tree you compiled Bazel from; git commit hash is appreciated (`git rev-parse HEAD`):\r\n\r\n\r\n###  Have you found anything relevant by searching the web?\r\n(e.g. [StackOverflow answers](http://stackoverflow.com/questions/tagged/bazel),\r\n[GitHub issues](https://github.com/bazelbuild/bazel/issues),\r\nemail threads on the [`bazel-discuss`](https://groups.google.com/forum/#!forum/bazel-discuss) Google group)\r\n\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n(If they are large, please upload as attachment or provide link).\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4156", "title": "[Documentation] maven_jar: add section explaining that transitive dependencies need to be dealt with manually", "body": "Please add to the `maven_jar` documentation (https://docs.bazel.build/versions/master/be/workspace.html#maven_jar) that any transitive dependencies need to be deal with manually and that some tools exist to automatically populate the workspace and maybe wrapper rules.\r\n\r\nFor example:\r\nWhen depending on Google Truth (http://google.github.io/truth/), you need to also depend on Guava, or otherwise you get a compilation error like the following \r\n\r\nhttp://central.maven.org/maven2/com/google/guava/guava/23.4-jre/guava-23.4-jre.pom\r\n```\r\nERROR: /project/javatests/com/sample/BUILD:13:1: Building javatests/com/sample/SampleTest.jar (1 source file) failed (Exit 1).\r\njavatests/com/sample/SampleTest.java:49: error: cannot access Optional\r\n    assertThat(pairs)\r\n    ^\r\n  class file for com.google.common.base.Optional not found\r\njavatests/com/sample/SampleTest.java:81: error: cannot access Multimap\r\n    assertThat(pairs)\r\n    ^\r\n  class file for com.google.common.collect.Multimap not found\r\nTarget //javatests/com/sample:SampleTest failed to build\r\n```\r\nPlease provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\n\r\n_If asking a question or requesting a feature, also tell us about the underlying problem you're trying to solve._\r\n\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\n\r\n### Environment info\r\n* Operating System:\r\nMacOs X\r\n\r\n* Bazel version (output of `bazel info release`):\r\nrelease 0.7.0-homebrew\r\n\r\n* If `bazel info release` returns \"development version\" or \"(@non-git)\", please tell us what source tree you compiled Bazel from; git commit hash is appreciated (`git rev-parse HEAD`):\r\n\r\n\r\n###  Have you found anything relevant by searching the web?\r\n(e.g. [StackOverflow answers](http://stackoverflow.com/questions/tagged/bazel),\r\n[GitHub issues](https://github.com/bazelbuild/bazel/issues),\r\nemail threads on the [`bazel-discuss`](https://groups.google.com/forum/#!forum/bazel-discuss) Google group)\r\nFound some open issues here: https://github.com/bazelbuild/bazel/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aopen%20maven_jar%20transitive\r\n\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n(If they are large, please upload as attachment or provide link).\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "greggdonovan": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4150", "title": "--sandbox_add_mount_pair ignored on OSX", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\n\r\nI would like to use `--sandbox_add_mount_pair` to mount specific directories into the sandbox filesystem on both OSX and Linux, but [this support was only added on Linux](https://github.com/bazelbuild/bazel/commit/18e6b410a7f4e24b67740978d101cd665edea6cc).\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\n[DarwinSandboxedSpawnRunner](https://github.com/bazelbuild/bazel/blob/04f2b03d351d3de16601dff2290f40643f2cb16e/src/main/java/com/google/devtools/build/lib/sandbox/DarwinSandboxedSpawnRunner.java) is missing `sandboxAdditionalMounts`, but [LinuxSandboxedSpawnRunner](https://github.com/bazelbuild/bazel/blob/04f2b03d351d3de16601dff2290f40643f2cb16e/src/main/java/com/google/devtools/build/lib/sandbox/LinuxSandboxedSpawnRunner.java) has them.\r\n\r\n### Environment info\r\n* Operating System:\r\n\r\nmacOS Sierra 10.12.6\r\n\r\n* Bazel version (output of `bazel info release`):\r\n\r\nrelease 0.7.0-homebrew\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4086", "title": "Expose Skylint in @bazel_tools", "body": "### Description of the problem / feature request / question:\r\n\r\nWe would like to run Skylint in CI without a source checkout of Bazel. Skylint's [README](https://github.com/bazelbuild/bazel/blob/master/site/docs/skylark/skylint.md#building-the-linter) does not provide a way to use it other than via a full source checkout of Bazel.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\nSkylint cannot be found in `$(bazel info execution_root)/external/bazel_tools/tools/`.\r\n\r\nSkylint cannot be accessed in its current location:\r\n```\r\n$ cd rules_scala\r\n$ bazel run '@bazel_tools//src/tools/skylark/java/com/google/devtools/skylark/skylint:Skylint' ./scala/scala.bzl\r\nERROR: no such package '@bazel_tools//src/tools/skylark/java/com/google/devtools/skylark/skylint': BUILD file not found on package path.\r\n```\r\n\r\n### Environment info\r\n* Operating System:\r\nOSX Sierra 10.12.6\r\n\r\n* Bazel version (output of `bazel info release`):\r\n\r\nrelease 0.7.0-homebrew\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nNo. There is no [Skylint discussion on SO](https://stackoverflow.com/search?q=%5Bbazel%5D+skylint) or [`bazel-discuss`](https://groups.google.com/forum/#!searchin/bazel-discuss/skylint%7Csort:date).\r\n\r\n#3895 mentions publishing Skylint separately. But, Skylint is built into Bazel so it seems easier to \"publish\" it via `@bazel_tools`.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4086/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mishas": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4146", "title": "Since Bazel 0.5.0, it's impossible to build a python3 py_binary on one OS and run on another", "body": "Since both the `--python_path` flag, and the `interpreter` label of the `python_runtime` targets only accept full paths, it makes it impossible to build and run programs on different systems when using python3.\r\n\r\nBy default, without setting the flag or the runtime targets, `python` (python2) is used, and the autogenerated \"runner\" file from `py_binary` targets searches the env of the system it's running on for where `python` is. But if I want to use `python3`, I have to specify a full path.\r\nThis is problematic, as the full path on the machine I'm building/testing on might be different from the one on the machine I'm actually running on.\r\n\r\nFor example, on Mac, python3 is installed either in `/usr/local/bin/python3` (when using brew) or in '/Library/Frameworks/Python.framework/Versions/3.X/bin/python3` when installing from a .pkg file. But on Linux, it is installed in `/usr/bin/python3`.\r\nSo - when building and testing on mac, I must have a --python_path defined to one folder, but during final build to another.\r\n\r\nA simple solution would be to do `ln -s <wherever python is> /usr/bin/python3` on my build machine, but this is actually impossible on mac, as the `/usr` tree is read-only (https://stackoverflow.com/questions/32659348/operation-not-permitted-when-on-root-el-capitan-rootless-disabled)\r\n\r\nAnother solution would be to test with one flag, but then to build with another, but that approach fails if there are custom rules (skylark) that execute other targets via ctx.action during build.\r\n\r\nThis is somewhat related to this issue: https://github.com/bazelbuild/bazel/issues/3517\r\n\r\nProposed solution:\r\nAllow setting \"python3\" (without full path) as `--python_path` or `interpreter` in `py_runtime`. It will actually work without any other changes to the code.\r\nI'll attach a pull request shortly.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sgreenstein": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4143", "title": "Print invocation url to stdout after building with BES enabled", "body": "### Description of the problem / feature request / question:\r\n\r\nWhen I build with BES enabled, it would be very convenient to have a link to the uploaded invocation printed to the *end* of the stdout. e.g. the last line of the build logs should be https://source.cloud.google.com/results/invocation/c257a6e1-cad8-9d30-7808-ca5d65a12d53\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n```\r\nsgreens@sgreens0:yeti$ bazel build //cloud/... --bes_backend=\"buildeventservice.googleapis.com\" --auth_credentials=... --bes_best_effort=false --bes_timeout=10s --tls_enabled --auth_enabled --auth_scope=https://www.googleapis.com/auth/cloud-source-tools --project_id=...\r\nINFO: Streaming Build Event Protocol to buildeventservice.googleapis.com build_request_id: 53c444ca-a532-31c2-cada-2c4189a40aea invocation_id: c257a6e1-cad8-9d30-7808-ca5d65a12d53\r\n...\r\ntons of build logs\r\n...\r\n```\r\n\r\nI then have to scroll to the top of the build output, copy the invocation_id, and prepend part of the url to get this:\r\nhttps://source.cloud.google.com/results/invocation/c257a6e1-cad8-9d30-7808-ca5d65a12d53\r\n\r\n### Environment info\r\n* Operating System: Linux\r\n\r\n* Bazel version (output of `bazel info release`): 0.6.1\r\n\r\n###  Have you found anything relevant by searching the web?\r\nNo\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zjh-nudger": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4139", "title": "Could I compile bazel from source on redhat5 successfully?", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\nCould I compile bazel on redhat5 successfully? \r\nI have tried some method to compile bazel from source on redhat5(We deploy our applications on redhat5). However, I failed.\r\nMany utilities , such as htole16, sandbox, needed by compiling, are not supported on redhat5.\r\nConsequently, I want to know if I can compile successfully on redhat5.\r\n\r\nI need some help. Thank you very much!\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\n\r\n### Environment info\r\n* Operating System:\r\n1.cat /etc/redhat-release:\r\nRed Hat Enterprise Linux Server release 5.8 (Tikanga)\r\n2.GLIBC version: 2.5\r\n3.uname -a:\r\nLinux localhost.localdomain 2.6.33 #1 SMP Fri Nov 17 03:22:34 EST 2017 x86_64 x86_64 x86_64 GNU/Linux\r\n4.GCC version:\r\ngcc (GCC) 4.8.2 20140120 (Red Hat 4.8.2-15)\r\n\r\n* Bazel version (output of `bazel info release`):\r\n\r\n\r\n* If `bazel info release` returns \"development version\" or \"(@non-git)\", please tell us what source tree you compiled Bazel from; git commit hash is appreciated (`git rev-parse HEAD`):\r\n\r\n\r\n###  Have you found anything relevant by searching the web?\r\n(e.g. [StackOverflow answers](http://stackoverflow.com/questions/tagged/bazel),\r\n[GitHub issues](https://github.com/bazelbuild/bazel/issues),\r\nemail threads on the [`bazel-discuss`](https://groups.google.com/forum/#!forum/bazel-discuss) Google group)\r\n\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n(If they are large, please upload as attachment or provide link).\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4032", "title": "GLIBC_2.14 not found ", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\nGLIBC_2.14' not found \r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\nwhen I compile bazel use *.sh shell file.\r\n\r\n### Environment info\r\n* Operating System:\r\nuname -a \r\nLinux x86_64 #1 SMP Tue Nov 29 17:56:13 CST 2016 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\n* Bazel version (output of `bazel info release`):\r\n0.1.0 and 0.7.0\r\n\r\n* If `bazel info release` returns \"development version\" or \"(@non-git)\", please tell us what source tree you compiled Bazel from; git commit hash is appreciated (`git rev-parse HEAD`):\r\n\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n(If they are large, please upload as attachment or provide link).\r\nthe follow info occurs when I run bazel commond.\r\nbazel: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.14' not found (required by bazel)\r\nbazel: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.15' not found (required by bazel)\r\nbazel: /lib64/libc.so.6: version `GLIBC_2.14' not found (required by bazel)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jianglai": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4138", "title": "Dagger @BindsInstance annotation processing not working with arrays when building with Bazel", "body": "### Description of the problem / feature request / question:\r\nWhen I use Bazel to build a Java application with Dagger's [@BindsInstance](https://google.github.io/dagger/api/2.13/dagger/BindsInstance.html) annotatoins in it, the annotation processor throws an error if the annotated method's argument is an array (byte[] for example). This does not happen when building the same code with Maven, so I presume this is a Bazel issue.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\nAn example an be found [here](https://github.com/jianglai/bazel-dagger-issue).\r\nNote that I am using [java_import_external](https://github.com/bazelbuild/rules_closure/blob/master/closure/private/java_import_external.bzl) from closure to import maven artifacts.\r\n\r\n```\r\nmaster jianglai@jianglai:~/bazel-dagger-issue$ bazel build test:all \r\nINFO: Analysed 2 targets (15 packages loaded).\r\nINFO: Found 2 targets...\r\nERROR: /usr/local/google/home/jianglai/bazel-dagger-issue/test/BUILD:1:1: Building test/libtest.jar (1 source file) and running annotation processors (ComponentProcessor) failed (Exit 1)\r\njava.lang.RuntimeException: java.lang.IllegalArgumentException: byte[] cannot be converted to an Element\r\n\tat com.sun.tools.javac.api.JavacTaskImpl.handleExceptions(JavacTaskImpl.java:158)\r\n\tat com.sun.tools.javac.api.JavacTaskImpl.doCall(JavacTaskImpl.java:96)\r\n\tat com.sun.tools.javac.api.JavacTaskImpl.call(JavacTaskImpl.java:90)\r\n\tat com.google.devtools.build.buildjar.javac.BlazeJavacMain.compile(BlazeJavacMain.java:105)\r\n\tat com.google.devtools.build.buildjar.SimpleJavaLibraryBuilder$1.invokeJavac(SimpleJavaLibraryBuilder.java:106)\r\n\tat com.google.devtools.build.buildjar.ReducedClasspathJavaLibraryBuilder.compileSources(ReducedClasspathJavaLibraryBuilder.java:53)\r\n\tat com.google.devtools.build.buildjar.SimpleJavaLibraryBuilder.compileJavaLibrary(SimpleJavaLibraryBuilder.java:109)\r\n\tat com.google.devtools.build.buildjar.SimpleJavaLibraryBuilder.run(SimpleJavaLibraryBuilder.java:117)\r\n\tat com.google.devtools.build.buildjar.BazelJavaBuilder.processRequest(BazelJavaBuilder.java:105)\r\n\tat com.google.devtools.build.buildjar.BazelJavaBuilder.runPersistentWorker(BazelJavaBuilder.java:67)\r\n\tat com.google.devtools.build.buildjar.BazelJavaBuilder.main(BazelJavaBuilder.java:45)\r\nCaused by: java.lang.IllegalArgumentException: byte[] cannot be converted to an Element\r\n\tat dagger.shaded.auto.common.MoreTypes$AsElementVisitor.defaultAction(MoreTypes.java:532)\r\n\tat dagger.shaded.auto.common.MoreTypes$AsElementVisitor.defaultAction(MoreTypes.java:527)\r\n\tat javax.lang.model.util.SimpleTypeVisitor6.visitArray(SimpleTypeVisitor6.java:158)\r\n\tat com.sun.tools.javac.code.Type$ArrayType.accept(Type.java:1409)\r\n\tat dagger.shaded.auto.common.MoreTypes.asElement(MoreTypes.java:524)\r\n\tat dagger.shaded.auto.common.MoreTypes.asTypeElement(MoreTypes.java:553)\r\n\tat dagger.internal.codegen.ComponentRequirement.typeElement(ComponentRequirement.java:62)\r\n\tat dagger.internal.codegen.ComponentWriter.lambda$canInstantiateAllRequirements$0(ComponentWriter.java:194)\r\n\tat com.google.common.collect.Iterators.indexOf(Iterators.java:799)\r\n\tat com.google.common.collect.Iterators.any(Iterators.java:688)\r\n\tat com.google.common.collect.Iterables.any(Iterables.java:627)\r\n\tat dagger.internal.codegen.ComponentWriter.canInstantiateAllRequirements(ComponentWriter.java:192)\r\n\tat dagger.internal.codegen.ComponentWriter.addFactoryMethods(ComponentWriter.java:176)\r\n\tat dagger.internal.codegen.AbstractComponentWriter.write(AbstractComponentWriter.java:314)\r\n\tat dagger.internal.codegen.ComponentGenerator.write(ComponentGenerator.java:71)\r\n\tat dagger.internal.codegen.ComponentGenerator.write(ComponentGenerator.java:35)\r\n\tat dagger.internal.codegen.SourceFileGenerator.generate(SourceFileGenerator.java:72)\r\n\tat dagger.internal.codegen.SourceFileGenerator.generate(SourceFileGenerator.java:63)\r\n\tat dagger.internal.codegen.ComponentProcessingStep.generateComponent(ComponentProcessingStep.java:154)\r\n\tat dagger.internal.codegen.ComponentProcessingStep.process(ComponentProcessingStep.java:142)\r\n\tat dagger.internal.codegen.ComponentProcessingStep.process(ComponentProcessingStep.java:47)\r\n\tat dagger.shaded.auto.common.BasicAnnotationProcessor.process(BasicAnnotationProcessor.java:329)\r\n\tat dagger.shaded.auto.common.BasicAnnotationProcessor.process(BasicAnnotationProcessor.java:182)\r\n\tat com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:968)\r\n\tat com.sun.tools.javac.processing.JavacProcessingEnvironment.discoverAndRunProcs(JavacProcessingEnvironment.java:884)\r\n\tat com.sun.tools.javac.processing.JavacProcessingEnvironment.access$2200(JavacProcessingEnvironment.java:108)\r\n\tat com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1204)\r\n\tat com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1313)\r\n\tat com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1267)\r\n\tat com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:943)\r\n\tat com.sun.tools.javac.api.JavacTaskImpl.lambda$doCall$0(JavacTaskImpl.java:100)\r\n\tat com.sun.tools.javac.api.JavacTaskImpl.handleExceptions(JavacTaskImpl.java:142)\r\n\t... 10 more\r\nINFO: Elapsed time: 1.534s, Critical Path: 0.25s\r\nFAILED: Build did NOT complete successfully\r\n```\r\n\r\n### Environment info\r\n* Operating System:\r\nUbuntu 14.04\r\n\r\n* Bazel version (output of `bazel info release`):\r\nrelease 0.7.0", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yliu120": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4137", "title": "ENV not propagated to process-wrapper", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\nI have a problem using bazel to build the rules_scala on a custom platform. I am sure it is because the shell envs are not propagated correctly to a subprocess that is spawned by some actions of bazel. Please see the log information that I provide in the last section.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\n\r\n### Environment info\r\n* Operating System:\r\nCentOS 6.7\r\n\r\n* Bazel version (output of `bazel info release`):\r\n0.8.1\r\n\r\n* If `bazel info release` returns \"development version\" or \"(@non-git)\", please tell us what source tree you compiled Bazel from; git commit hash is appreciated (`git rev-parse HEAD`):\r\n\r\n\r\n###  Have you found anything relevant by searching the web?\r\n(e.g. [StackOverflow answers](http://stackoverflow.com/questions/tagged/bazel),\r\n[GitHub issues](https://github.com/bazelbuild/bazel/issues),\r\nemail threads on the [`bazel-discuss`](https://groups.google.com/forum/#!forum/bazel-discuss) Google group)\r\n\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n(If they are large, please upload as attachment or provide link).\r\n\r\nThe command I ran to build rules_scala is `bazel build -s --verbose_failures --sandbox_debug //src/...`\r\n\r\n```\r\n>>>>> # //src/scala/io/bazel/rules_scala/tut_support:tut_compiler [action 'scala //src/scala/io/bazel/rules_scala/tut_support:tut_compiler']\r\n(cd /home-4/yliu120@jhu.edu/.cache/bazel/_bazel_yliu120@jhu.edu/12dd3863654b107695e643fa774ca856/execroot/io_bazel_rules_scala && \\\r\n  exec env - \\\r\n  /bin/bash -c '\r\nrm -f bazel-out/local-fastbuild/bin/src/scala/io/bazel/rules_scala/tut_support/tut_compiler.jar\r\nexternal/bazel_tools/tools/zip/zipper/zipper c bazel-out/local-fastbuild/bin/src/scala/io/bazel/rules_scala/tut_support/tut_compiler.jar @bazel-out/local-fastbuild/bin/src/scala/io/bazel/rules_scala/tut_support/bazel-out/local-fastbuild/bin/src/scala/io/bazel/rules_scala/tut_support/tut_compiler.jar_zipper_args\r\n')\r\n>>>>> # @scala//:scala-reflect [action 'Extracting interface @scala//:scala-reflect [for host]']\r\n(cd /home-4/yliu120@jhu.edu/.cache/bazel/_bazel_yliu120@jhu.edu/12dd3863654b107695e643fa774ca856/execroot/io_bazel_rules_scala && \\\r\n  exec env - \\\r\n    LD_LIBRARY_PATH=/cm/shared/gcc/6.4.0/lib64:/cm/shared/gcc/6.4.0/lib:/cm/shared/apps/mpc/1.0.3/lib:/cm/shared/apps/gcc/4.9.2/gmp-6.0/lib:/cm/shared/apps/mpfr/3.1.3/lib:/cm/shared/apps/sqlite3/3.15.0/lib:/cm/shared/apps/libevent/2.1.5-beta/lib:/cm/shared/apps/cudnn/6.0/lib64:/cm/shared/apps/java/jdk1.8.0_112/lib:/cm/shared/apps/python/3.6.0/lib:/cm/shared/apps/cuda/8.0/lib64:/cm/shared/apps/binutils/2.25/src/lib:/cm/shared/apps/slurm/current/lib/slurm:/cm/shared/apps/slurm/current/lib:/cm/shared/apps/parallel_studio_xe_2015_update2/composer_xe_2015.2.164/compiler/lib/intel64:/cm/shared/apps/parallel_studio_xe_2015_update2/composer_xe_2015.2.164/mkl/lib/intel64:/home-4/yliu120@jhu.edu/lib:/home-4/yliu120@jhu.edu/opt/lib \\\r\n    PATH=/cm/shared/gcc/6.4.0/bin:/home-4/yliu120@jhu.edu/go/bin:/home-4/yliu120@jhu.edu/.local/bin:/home-4/yliu120@jhu.edu/opt/go/bin:/home-4/yliu120@jhu.edu/maven/bin:/home-4/yliu120@jhu.edu/arcanist/bin:/home-4/yliu120@jhu.edu/opt/bin:/cm/shared/apps/sqlite3/3.15.0/bin:/cm/shared/apps/tmux/2.1/bin:/cm/shared/apps/libevent/2.1.5-beta/bin:/cm/shared/apps/java/jdk1.8.0_112/bin:/cm/shared/apps/python/3.6.0/bin:/cm/shared/apps/cuda/8.0/bin:/cm/shared/apps/binutils/2.25/src/bin:/cm/shared/apps/binutils:/cm/shared/apps/slurm/current/sbin:/cm/shared/apps/slurm/current/bin:/cm/shared/apps/parallel_studio_xe_2015_update2/composer_xe_2015.2.164/bin/intel64:/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/opt/ibutils/bin:/sbin:/usr/sbin:/cm/local/apps/environment-modules/3.2.10/bin:/opt/dell/srvadmin/bin \\\r\n  external/bazel_tools/tools/jdk/ijar/ijar external/scala/lib/scala-reflect.jar bazel-out/host/genfiles/external/scala/_ijar/scala-reflect/external/scala/lib/scala-reflect-ijar.jar)\r\n>>>>> # @scala//:scala-reflect [action 'Extracting interface @scala//:scala-reflect']\r\n(cd /home-4/yliu120@jhu.edu/.cache/bazel/_bazel_yliu120@jhu.edu/12dd3863654b107695e643fa774ca856/execroot/io_bazel_rules_scala && \\\r\n  exec env - \\\r\n    LD_LIBRARY_PATH=/cm/shared/gcc/6.4.0/lib64:/cm/shared/gcc/6.4.0/lib:/cm/shared/apps/mpc/1.0.3/lib:/cm/shared/apps/gcc/4.9.2/gmp-6.0/lib:/cm/shared/apps/mpfr/3.1.3/lib:/cm/shared/apps/sqlite3/3.15.0/lib:/cm/shared/apps/libevent/2.1.5-beta/lib:/cm/shared/apps/cudnn/6.0/lib64:/cm/shared/apps/java/jdk1.8.0_112/lib:/cm/shared/apps/python/3.6.0/lib:/cm/shared/apps/cuda/8.0/lib64:/cm/shared/apps/binutils/2.25/src/lib:/cm/shared/apps/slurm/current/lib/slurm:/cm/shared/apps/slurm/current/lib:/cm/shared/apps/parallel_studio_xe_2015_update2/composer_xe_2015.2.164/compiler/lib/intel64:/cm/shared/apps/parallel_studio_xe_2015_update2/composer_xe_2015.2.164/mkl/lib/intel64:/home-4/yliu120@jhu.edu/lib:/home-4/yliu120@jhu.edu/opt/lib \\\r\n    PATH=/cm/shared/gcc/6.4.0/bin:/home-4/yliu120@jhu.edu/go/bin:/home-4/yliu120@jhu.edu/.local/bin:/home-4/yliu120@jhu.edu/opt/go/bin:/home-4/yliu120@jhu.edu/maven/bin:/home-4/yliu120@jhu.edu/arcanist/bin:/home-4/yliu120@jhu.edu/opt/bin:/cm/shared/apps/sqlite3/3.15.0/bin:/cm/shared/apps/tmux/2.1/bin:/cm/shared/apps/libevent/2.1.5-beta/bin:/cm/shared/apps/java/jdk1.8.0_112/bin:/cm/shared/apps/python/3.6.0/bin:/cm/shared/apps/cuda/8.0/bin:/cm/shared/apps/binutils/2.25/src/bin:/cm/shared/apps/binutils:/cm/shared/apps/slurm/current/sbin:/cm/shared/apps/slurm/current/bin:/cm/shared/apps/parallel_studio_xe_2015_update2/composer_xe_2015.2.164/bin/intel64:/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/opt/ibutils/bin:/sbin:/usr/sbin:/cm/local/apps/environment-modules/3.2.10/bin:/opt/dell/srvadmin/bin \\\r\n  external/bazel_tools/tools/jdk/ijar/ijar external/scala/lib/scala-reflect.jar bazel-out/local-fastbuild/genfiles/external/scala/_ijar/scala-reflect/external/scala/lib/scala-reflect-ijar.jar)\r\n>>>>> # @scala//:scala-compiler [action 'Extracting interface @scala//:scala-compiler']\r\n(cd /home-4/yliu120@jhu.edu/.cache/bazel/_bazel_yliu120@jhu.edu/12dd3863654b107695e643fa774ca856/execroot/io_bazel_rules_scala && \\\r\n  exec env - \\\r\n    LD_LIBRARY_PATH=/cm/shared/gcc/6.4.0/lib64:/cm/shared/gcc/6.4.0/lib:/cm/shared/apps/mpc/1.0.3/lib:/cm/shared/apps/gcc/4.9.2/gmp-6.0/lib:/cm/shared/apps/mpfr/3.1.3/lib:/cm/shared/apps/sqlite3/3.15.0/lib:/cm/shared/apps/libevent/2.1.5-beta/lib:/cm/shared/apps/cudnn/6.0/lib64:/cm/shared/apps/java/jdk1.8.0_112/lib:/cm/shared/apps/python/3.6.0/lib:/cm/shared/apps/cuda/8.0/lib64:/cm/shared/apps/binutils/2.25/src/lib:/cm/shared/apps/slurm/current/lib/slurm:/cm/shared/apps/slurm/current/lib:/cm/shared/apps/parallel_studio_xe_2015_update2/composer_xe_2015.2.164/compiler/lib/intel64:/cm/shared/apps/parallel_studio_xe_2015_update2/composer_xe_2015.2.164/mkl/lib/intel64:/home-4/yliu120@jhu.edu/lib:/home-4/yliu120@jhu.edu/opt/lib \\\r\n    PATH=/cm/shared/gcc/6.4.0/bin:/home-4/yliu120@jhu.edu/go/bin:/home-4/yliu120@jhu.edu/.local/bin:/home-4/yliu120@jhu.edu/opt/go/bin:/home-4/yliu120@jhu.edu/maven/bin:/home-4/yliu120@jhu.edu/arcanist/bin:/home-4/yliu120@jhu.edu/opt/bin:/cm/shared/apps/sqlite3/3.15.0/bin:/cm/shared/apps/tmux/2.1/bin:/cm/shared/apps/libevent/2.1.5-beta/bin:/cm/shared/apps/java/jdk1.8.0_112/bin:/cm/shared/apps/python/3.6.0/bin:/cm/shared/apps/cuda/8.0/bin:/cm/shared/apps/binutils/2.25/src/bin:/cm/shared/apps/binutils:/cm/shared/apps/slurm/current/sbin:/cm/shared/apps/slurm/current/bin:/cm/shared/apps/parallel_studio_xe_2015_update2/composer_xe_2015.2.164/bin/intel64:/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/opt/ibutils/bin:/sbin:/usr/sbin:/cm/local/apps/environment-modules/3.2.10/bin:/opt/dell/srvadmin/bin \\\r\n  external/bazel_tools/tools/jdk/ijar/ijar external/scala/lib/scala-compiler.jar bazel-out/local-fastbuild/genfiles/external/scala/_ijar/scala-compiler/external/scala/lib/scala-compiler-ijar.jar)\r\n>>>>> # @io_bazel_rules_scala_org_tpolecat_tut_core//jar:jar [action 'Extracting interface @io_bazel_rules_scala_org_tpolecat_tut_core//jar:jar']\r\n(cd /home-4/yliu120@jhu.edu/.cache/bazel/_bazel_yliu120@jhu.edu/12dd3863654b107695e643fa774ca856/execroot/io_bazel_rules_scala && \\\r\n  exec env - \\\r\n    LD_LIBRARY_PATH=/cm/shared/gcc/6.4.0/lib64:/cm/shared/gcc/6.4.0/lib:/cm/shared/apps/mpc/1.0.3/lib:/cm/shared/apps/gcc/4.9.2/gmp-6.0/lib:/cm/shared/apps/mpfr/3.1.3/lib:/cm/shared/apps/sqlite3/3.15.0/lib:/cm/shared/apps/libevent/2.1.5-beta/lib:/cm/shared/apps/cudnn/6.0/lib64:/cm/shared/apps/java/jdk1.8.0_112/lib:/cm/shared/apps/python/3.6.0/lib:/cm/shared/apps/cuda/8.0/lib64:/cm/shared/apps/binutils/2.25/src/lib:/cm/shared/apps/slurm/current/lib/slurm:/cm/shared/apps/slurm/current/lib:/cm/shared/apps/parallel_studio_xe_2015_update2/composer_xe_2015.2.164/compiler/lib/intel64:/cm/shared/apps/parallel_studio_xe_2015_update2/composer_xe_2015.2.164/mkl/lib/intel64:/home-4/yliu120@jhu.edu/lib:/home-4/yliu120@jhu.edu/opt/lib \\\r\n    PATH=/cm/shared/gcc/6.4.0/bin:/home-4/yliu120@jhu.edu/go/bin:/home-4/yliu120@jhu.edu/.local/bin:/home-4/yliu120@jhu.edu/opt/go/bin:/home-4/yliu120@jhu.edu/maven/bin:/home-4/yliu120@jhu.edu/arcanist/bin:/home-4/yliu120@jhu.edu/opt/bin:/cm/shared/apps/sqlite3/3.15.0/bin:/cm/shared/apps/tmux/2.1/bin:/cm/shared/apps/libevent/2.1.5-beta/bin:/cm/shared/apps/java/jdk1.8.0_112/bin:/cm/shared/apps/python/3.6.0/bin:/cm/shared/apps/cuda/8.0/bin:/cm/shared/apps/binutils/2.25/src/bin:/cm/shared/apps/binutils:/cm/shared/apps/slurm/current/sbin:/cm/shared/apps/slurm/current/bin:/cm/shared/apps/parallel_studio_xe_2015_update2/composer_xe_2015.2.164/bin/intel64:/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/opt/ibutils/bin:/sbin:/usr/sbin:/cm/local/apps/environment-modules/3.2.10/bin:/opt/dell/srvadmin/bin \\\r\n  external/bazel_tools/tools/jdk/ijar/ijar external/io_bazel_rules_scala_org_tpolecat_tut_core/jar/tut-core_2.11-0.4.8.jar bazel-out/local-fastbuild/genfiles/external/io_bazel_rules_scala_org_tpolecat_tut_core/jar/_ijar/jar/external/io_bazel_rules_scala_org_tpolecat_tut_core/jar/tut-core_2.11-0.4.8-ijar.jar)\r\nERROR: /home-4/yliu120@jhu.edu/rules_scala/src/scala/scripts/BUILD:41:1: error executing shell command: '\r\nrm -f bazel-out/local-fastbuild/bin/src/scala/scripts/scalapb_generator.jar\r\nexternal/bazel_tools/tools/zip/zipper/zipper c bazel-out/local-fastbuild/bin/src/scala/scripts/scalapb_generator.jar @ba...' failed (Exit 1): process-wrapper failed: error executing command\r\n  (cd /home-4/yliu120@jhu.edu/.cache/bazel/_bazel_yliu120@jhu.edu/12dd3863654b107695e643fa774ca856/execroot/io_bazel_rules_scala && \\\r\n  exec env - \\\r\n  /home-4/yliu120@jhu.edu/.cache/bazel/_bazel_yliu120@jhu.edu/12dd3863654b107695e643fa774ca856/execroot/io_bazel_rules_scala/_bin/process-wrapper '--timeout=-1' '--kill_delay=15' /bin/bash -c '\r\nrm -f bazel-out/local-fastbuild/bin/src/scala/scripts/scalapb_generator.jar\r\nexternal/bazel_tools/tools/zip/zipper/zipper c bazel-out/local-fastbuild/bin/src/scala/scripts/scalapb_generator.jar @bazel-out/local-fastbuild/bin/src/scala/scripts/bazel-out/local-fastbuild/bin/src/scala/scripts/scalapb_generator.jar_zipper_args\r\n').\r\n/home-4/yliu120@jhu.edu/.cache/bazel/_bazel_yliu120@jhu.edu/12dd3863654b107695e643fa774ca856/execroot/io_bazel_rules_scala/_bin/process-wrapper: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.21' not found (required by /home-4/yliu120@jhu.edu/.cache/bazel/_bazel_yliu120@jhu.edu/12dd3863654b107695e643fa774ca856/execroot/io_bazel_rules_scala/_bin/process-wrapper)\r\nINFO: Elapsed time: 0.820s, Critical Path: 0.14s\r\n```\r\nFrom the log message, you can see the last command doesn't have PATH and LD_LIBRARY_PATH propagated but the others have. I highlighted the command that reports the error:\r\n\r\n```\r\n(cd /home-4/yliu120@jhu.edu/.cache/bazel/_bazel_yliu120@jhu.edu/12dd3863654b107695e643fa774ca856/execroot/io_bazel_rules_scala && \\\r\n  exec env - \\\r\n  /home-4/yliu120@jhu.edu/.cache/bazel/_bazel_yliu120@jhu.edu/12dd3863654b107695e643fa774ca856/execroot/io_bazel_rules_scala/_bin/process-wrapper '--timeout=-1' '--kill_delay=15' /bin/bash -c '\r\nrm -f bazel-out/local-fastbuild/bin/src/scala/scripts/scalapb_generator.jar\r\nexternal/bazel_tools/tools/zip/zipper/zipper c bazel-out/local-fastbuild/bin/src/scala/scripts/scalapb_generator.jar @bazel-out/local-fastbuild/bin/src/scala/scripts/bazel-out/local-fastbuild/bin/src/scala/scripts/scalapb_generator.jar_zipper_args\r\n')\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pconrad-sx": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4135", "title": "Implement interface shared objects to avoid re-linking", "body": "### Description:\r\nAs discussed on [this thread](https://groups.google.com/d/msg/bazel-discuss/8Wt3l9zfksY/E0HJNnWECwAJ), any changes to c++ sources or headers will trigger relinking of dynamically linked binaries. Bazel supports the concept of \"interface shared objects\", (*.ifso files), to separate the implementation from the interface, thus limiting the need to re-link for source-only changes. However, Google's current implementation of a tool that can create ifso files is not public. \r\n\r\nThis ticket is a request for a public implementation of an ifso tool. This is a non-trivial performance boost for users of dynamic linking. One compelling use case is for dynamically-linked unit test suites, where many linking tasks might be avoided. \u200b\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\nTo demonstrate this behavior, we can use the cpp-tutorial/stage2 hello-world application in the bazel tutorials: https://github.com/bazelbuild/examples/ \r\nMake the binary dynamic by adding \"linkstatic=0\" to the cc_binary rule. Change the string in hello-greet.cc, and the binary will re-link upon building //main:hello-world. \r\n  \r\nSubcommands show: \r\n```\r\nSUBCOMMAND: # //main:hello-greet [action 'Compiling main/hello-greet.cc'] \r\nSUBCOMMAND: # //main:hello-greet [action 'Linking main/libhello-greet.so'] \r\nSUBCOMMAND: # //main:hello-world [action 'Linking main/hello-world'] \r\n```\r\n  \r\nExplanations of rebuilds show: \r\n```\r\nExecuting action 'BazelWorkspaceStatusAction stable-status.txt': unconditional execution is requested. \r\nExecuting action 'Compiling main/hello-greet.cc': One of the files has changed. \r\nExecuting action 'Linking main/libhello-greet.so': One of the files has changed. \r\nExecuting action 'SolibSymlink _solib_k8/libmain_Slibhello-greet.so': One of the files has changed. \r\nExecuting action 'Linking main/hello-world': One of the files has changed. \r\n```\r\n\r\nSince hello-greet.h wasn't changed, I think chain should have been able to stop after re-linking the shared library.\r\n\r\n* Bazel version (output of `bazel info release`):\r\n0.7.0\r\n\r\n###  Have you found anything relevant by searching the web?\r\nThere do not appear to be other issues on this topic.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghemawat": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4129", "title": "Better docs for authors of new rules", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\n\r\nI find myself doing a lot of searches and cut and paste to figure out how to add new rules.  I suspect it would be helpful to a lot of people if there was some kind of a tutorial with examples for how to add new rules. \r\n\r\nMy suggestion would be sketch out everything needed for somebody to add Yacc or Bison support since it should be fairly straightforward, yet a realistic example.\r\n\r\nThe reference manual is useful for details, but doesn't provide much guidance for how to put things together.\r\n\r\nSimilarly, the \"Packaging Rules\" section seems like overkill for somebody first experience with Skylark and new rules. \r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\n\r\n### Environment info\r\n\r\nApplies to all environments.\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ttsugriy": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4119", "title": "Provide an option to write skylint warnings in a structured format.", "body": "When using Skylint with any automation, it's very useful to be able to parse every message for either visualization or storage purposes. In particular, we are using Skylint with arcanist tool to run all linters for our project and in order for it to be useful, we need to parse all message parts.\r\n\r\n### Description of the feature request:\r\n\r\nUnfortunately, messages that describe missing `Args` or other parts of a docstring span multiple lines:\r\n```\r\n    /some_path/foo.bzl:8:3-11:5:\r\n    incomplete docstring: the function parameters are not documented (no\r\n    'Args:' section found)\r\n    The parameter documentation should look like this:\r\n\r\n    Args:\r\n      name: ...\r\n      srcs: ...\r\n      deps: ...\r\n      visibility: ...\r\n\r\n     [inconsistent-docstring]\r\n```\r\nand even though it's possible to match an entire message with a regular expression like:\r\n```\r\n    $re = '/\r\n      ^\r\n        (?<path>[^:]+):                         # java_rules.bzl:\r\n        (?<s_line>[0-9]+):(?<s_char>[0-9]+)-    # 1:1-\r\n        (?<e_line>[0-9]+):(?<e_char>[0-9]+):    # 2:1:\r\n        \\s*(?<msg>.*)\\s*\\[(?<category>[\\w-]+)\\] # file has no module docstring [missing-docstring]\r\n      $\r\n    /mxs';\r\n```\r\nit gets much trickier when multiple messages are written. It's still possible, but very fragile.\r\n\r\nInstead I would like to have an option (`--json` flag) to produce a structured format like json. So the message above would be written as:\r\n```\r\n[{\"path\": \"/some_path/foo.bzl\", \"range\": {\"start\": {\"line\": 8\", \"column\": 3}, \"end\": {\"line\": 11, \"column\": 5}}, \"message\": \"...\", \"category\": \"inconsistent-docstring\"}\r\n```\r\n\r\nThis would greatly simplify automation around Skylint.\r\n\r\n### Simple repro:\r\n\r\nTo reproduce you can run linter on something like:\r\n```\r\n\"\"\"Some module.\"\"\"\r\n\r\ndef some_test(\r\n    name,\r\n    srcs,\r\n    deps = [],\r\n    visibility = []):\r\n  \"\"\"Define a new caliper microbenchmark test.\"\"\"\r\n  pass\r\n```", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aj-michael": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4116", "title": "Move android tools out of Bazel binary", "body": "Put them in a separate git repository so that we're not wasting space on the hard drives of iOS developers.\r\n\r\nNote that the native rules code will stay in the Bazel binary, they just wont work unless the tools are also set up.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4103", "title": "Enable aapt2 by default", "body": "It works internally and is now the default in gradle:\r\n\r\nhttps://developer.android.com/studio/build/gradle-plugin-3-0-0.html\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/56567bbb56ab2f0d1423121abea4af2373acc8aa", "message": "aar_resources_extractor ignore empty res/ and assets/ dirs.\n\nRELNOTES: None\nPiperOrigin-RevId: 182416060"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/710b9a3af0c1432ed288fe02c8205b645a3e4d52", "message": "Fix aar_import.deps to propagate jars.\n\nPreviously, aar_import.deps only worked for resource files and\naar_import.exports worked for both resource files and Java. Now,\naar_import.deps works for both as well with the same semantics as exports. This\nis not ideal, but it is how java_import.deps currently works.\n\nFixes https://github.com/bazelbuild/bazel/issues/4472\n\nRELNOTES: None\nPiperOrigin-RevId: 182405741"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/19044cfd268dff2321bd624315912bdbda2e4576", "message": "Add assets support to aar_import.\n\nFixes https://github.com/bazelbuild/bazel/issues/4439.\n\nEmpty assets are handled by writing out an empty file named \"assets/empty_asset_generated_by_bazel~\", which will silently be ignored by AAPT.\n\nRELNOTES: aar_import now supports assets.\nPiperOrigin-RevId: 182110400"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/731ac946d882ffe3449f8dc6af3ece78cab59aa3", "message": "Open source some more android_library tests.\n\nRELNOTES: None\nPiperOrigin-RevId: 181523499"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/104329719", "body": "nit: space before and after \"=\" for consistency with the other attributes.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/104329719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/104329759", "body": "Please add something along the lines of \"or read from the $ANDROID_NDK_HOME environment variable if the `path` attribute is not set\", because I don't think we mention the actual environment variable to set anywhere else in this tutorial.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/104329759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/104329782", "body": "s/parameter/attribute", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/104329782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/104329787", "body": "s/parameter/attribute", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/104329787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "davyfeng": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4109", "title": "build tensorflow via bazel on windows-7 32 bit, no toolchain for x86, any idea on how to add it?", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\nI am trying to build tensorflow from source via bazel on Windows 7 32bit. As there is no bazel prebuilt binary for windows 7 32bit, I first build bazel for it from source, and successfully got it on windows7 32bit with msys2 env. Now I want to use this newly built bazel.exe to build tensorflow from source on win-7 32bit, but I am not able to find a suitable toolchain for the x86 platform for TF. Any idea on how to do that? Thank you.\r\n\r\n_If asking a question or requesting a feature, also tell us about the underlying problem you're trying to solve._\r\n\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\n\r\n### Environment info\r\n* Operating System:\r\nWindows 7 32 bit\r\n\r\n* Bazel version (output of `bazel info release`):\r\n0.5.1\r\n\r\n* If `bazel info release` returns \"development version\" or \"(@non-git)\", please tell us what source tree you compiled Bazel from; git commit hash is appreciated (`git rev-parse HEAD`):\r\n\r\n\r\n###  Have you found anything relevant by searching the web?\r\n(e.g. [StackOverflow answers](http://stackoverflow.com/questions/tagged/bazel),\r\n[GitHub issues](https://github.com/bazelbuild/bazel/issues),\r\nemail threads on the [`bazel-discuss`](https://groups.google.com/forum/#!forum/bazel-discuss) Google group)\r\n\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n(If they are large, please upload as attachment or provide link).\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gregghz": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4106", "title": "Android support library now requires maven.google.com", "body": "### Description of the problem / feature request / question:\r\n\r\nIn the [Android Rules documentation for support libraries](https://docs.bazel.build/versions/master/be/android.html#android_sdk_repository_support_libraries) it says to use `@androidsdk//com.android.support:appcompat-v7-25.0.0` in `deps`. This approach uses the local maven repo provided by the android sdk. However as of (I think) 26.0.0 of the support libraries these artifacts are no longer managed by the sdk and are instead published to https://maven.google.com. The [Android documentation for using support libraries](https://developer.android.com/topic/libraries/support-library/setup.html) also reflects this change.\r\n\r\nIdeally androidsdk would be changed to (perhaps as a fallback?) look for artifacts at maven.google.com. At the very least, documentation should be updated to show how to use support libraries with versions 26+ (I still haven't fully figured that out, but I guess that's a different issue).\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\n```\r\nandroid_binary(\r\n    name = \"app\",\r\n    custom_package = \"com.gregghz.android.sample\",\r\n    srcs = glob([\"src/main/java/**/*.java\"]),\r\n    resource_files = glob([\"src/main/res/**\"]),\r\n    manifest = \"src/main/AndroidManifest.xml\",\r\n    deps = [\r\n        \"@androidsdk//com.android.support:appcompat-v7-26.1.0\",\r\n    ]\r\n)\r\n```\r\n\r\nThis fails with:\r\n\r\n    ERROR: /home/gregg/workspace/android-scala-bazel/app/BUILD:10:1: no such target '@androidsdk//com.android.support:appcompat-v7-26.1.0': target 'appcompat-v7-26.1.0' not declared in package 'com.android.support' (did you mean 'appcompat-v7-22.1.0'?) defined by /home/gregg/.cache/bazel/_bazel_gregg/29f69d95c66f549f861c961ce50dbe9f/external/androidsdk/com.android.support/BUILD and referenced by '//app:app'\r\n\r\n### Environment info\r\n* Operating System:\r\nUbuntu 16.04\r\n\r\n* Bazel version (output of `bazel info release`):\r\n\r\n```\r\n$ bazel info releaserelease 0.7.0\r\n```\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nAll of what I found uses the `@androiddsk//` deps.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cauthu": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4104", "title": "some broken doc pages", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\n\r\nhttps://docs.bazel.build/versions/master/skylark/ is showing:\r\n```\r\n404 - Page not found\r\n$ bazel build :what-you-were-looking-for\r\n...............\r\nERROR: no such page ':what-you-were-looking-for': BUILD file not found on package path.\r\nINFO: Elapsed time: 0.567s\r\n```\r\n\r\nchild pages, e.g., https://docs.bazel.build/versions/master/skylark/concepts.html, work fine.\r\n\r\nUPDATE: others that are failing similarly:\r\nhttps://docs.bazel.build/versions/master/tutorial/workspace.html\r\nhttps://docs.bazel.build/versions/master/bazel-user-manual.html", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ahippler": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4102", "title": "cc_test data is not copied to .runfiles on windows", "body": "### Description of the problem / feature request / question:\r\n\r\nI need test data for an cc_test. i added a filegroup to data of the test. the test is execute, the MANIFEST file is created with references to the test data. However the test data is not linked/copied in to the .runfiles directory. And I also tested the exact same cc_test on Mac and Linux, everything works as expected. \r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n```\r\ncc_test(\r\n    name = \"test\",\r\n    srcs = glob([\r\n        \"src/**/*.cpp\",\r\n        \"src/**/*.h\",\r\n    ]),\r\n    data = glob([\r\n        \"**/*.xml\"\r\n    ]),\r\n)\r\n```\r\n\r\n### Environment info\r\n* Operating System:\r\nWindows10\r\n\r\n* Bazel version (output of `bazel info release`):\r\n0.7.0\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vrobertbaruch": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4098", "title": "Expose tools from toolchain in CROSSTOOL", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\n\r\nhttps://docs.bazel.build/versions/master/be/make-variables.html shows that these are exposed as Make variables:\r\n\r\nCC\r\nSTRIP\r\nAR\r\nNM\r\nOBJCOPY\r\n\r\nHowever, objdump gives useful information that nm does not, so I wanted to use objdump. However, bazel does not expose OBJDUMP.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\nhttps://github.com/bazelbuild/bazel/wiki/Building-with-a-custom-toolchain\r\n\r\nAnd then write a definition such as:\r\n\r\n\r\nelf_rule = \":%s.out\" % (name,)\r\ngenrule(\r\n        name = name + \"_map\",\r\n        srcs = [elf_rule],\r\n        outs = [name + \".map\"],\r\n        cmd = \"$(OBJDUMP) -C --all-headers $< > $@\")\r\n\r\n\r\n### Environment info\r\n* Operating System:\r\nLinux 4.4.0-96-generic #119~14.04.1-Ubuntu SMP Wed Sep 13 08:40:48 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\n* Bazel version (output of `bazel info release`):\r\nrelease 0.7.0\r\n\r\n\r\n* If `bazel info release` returns \"development version\" or \"(@non-git)\", please tell us what source tree you compiled Bazel from; git commit hash is appreciated (`git rev-parse HEAD`):\r\n\r\n\r\n###  Have you found anything relevant by searching the web?\r\n(e.g. [StackOverflow answers](http://stackoverflow.com/questions/tagged/bazel),\r\n[GitHub issues](https://github.com/bazelbuild/bazel/issues),\r\nemail threads on the [`bazel-discuss`](https://groups.google.com/forum/#!forum/bazel-discuss) Google group)\r\n\r\n[Discussion on getting a map file during the compilation step](https://groups.google.com/forum/#!topic/bazel-discuss/A00d7Ui1f8s)\r\n\r\n\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n(If they are large, please upload as attachment or provide link).\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "schnaitterm": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4093", "title": "feature request: add a flag that tells bazel to include the current environment's variables", "body": "I understand the concept of wanting to have a sandboxed environment for builds on many software in order to maintain reproducibility, etc... but the fact that there is no way to tell bazel to do otherwise is an incredible hassle, especially when, for instance, you are using to build software in an HPC environment (*cough* TensorFlow *cough*) where everything is managed using environment modules. there should be a flag along the lines of `--use-local-env` (as in `nvcc` for CUDA).  There's no good reason that I should have to wrap my compilers (Intel, in the current case) just to have them reload all the modules when the compiler is run so that it can find its licenses and what not.  I tried using the `--action_env` option but it had absolutely no effect. We need an option to keep our local environment when building with bazel.  Thanks", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "damienmg": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4092", "title": "native.repository_name() and ctx.workspace_name() are similar function but with different name", "body": "To get the workspace name of the call site, we do `native.repository_name()` in a macro and `ctx.workspace_name()` in a rule. The latter is behaving differently in the main repository probably (returning the name, whereas the repository name can be empty).\r\n\r\nThis is a [confusing API](https://stackoverflow.com/questions/47068989/how-to-compute-the-bazel-workspace-name-in-a-macro) and it needs to be cleaned.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3959", "title": "Release - February 2018 - Target RC date: 2018-02-01 - name: 0.11.0", "body": "Release tracking bug for February 2018:\r\n\r\n- Target cut should be 1st of February (first business day of January) but it is close to FOSDEM so we might want to delay\r\n- Name: 0.11.0\r\n\r\nRM if we follow the rotation should be @katre: can you take it?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3958", "title": "Release - January 2018 - Target RC date: 2018-01-09 - name: 0.10.0", "body": "Release tracking bug for January 2018:\r\n\r\n* Target cut should be 2nd of January (first business day of January) but since it is close to holidays we need to check with whoever is going to be RM.\r\n* Name: 0.10.0\r\n\r\nRM if we follow the rotation should be @philwo: can you take it?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3951", "title": "SkylarkDocumentationGenerator generate incorrect documentation for is_executable", "body": "https://docs.bazel.build/versions/master/skylark/lib/actions.html#expand_template says that the last argument is `executable` but the code https://github.com/bazelbuild/bazel/blob/e222ba362c4c8c0cc0c76b308ee899e75098746a/src/main/java/com/google/devtools/build/lib/analysis/skylark/SkylarkActionFactory.java#L798 shows that it should be `is_executable`. This is actually verified by writing a skylark action.\r\n\r\nFound out the same issue with the `write` action\r\n\r\n/cc @dslomov ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85561326", "body": "Ok I don't know if we ever going to ship the current Eclipse support but having an IDE support is definitely something high on our list\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85561326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85624927", "body": "It actually looks like you have a tool head that do a HEAD request on website. Is that a standard Yosemite or did you installed some other tools? What is `which head` outputting?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85624927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85664462", "body": "Great!\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85664462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85944795", "body": "Hello, thank you for reporting it. We were already aware of that problem and it is a bit tricky to solve. I will report when I finally find a solution.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85944795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86005551", "body": "Recent JVM all have the -client option. bazel build -s or bazel build --verbose should have worked.\n\nThe workaround is not immediate and might take some time because java launch with -server option for ridically low memory space (in today criteria).\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86005551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86082122", "body": "Sorry the option is --verbose_failures\n\nWhat is the actual error message without the --verbose_failures?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86082122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86179767", "body": "Do you have a empty.c in tools/cpp ?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86179767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86185602", "body": "I just introduced a wrapper around gcc for another bug (the library path one we discussed on monday), let just do another wrapper around otool for that.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86185602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86185759", "body": "sorry I means around libtool\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86185759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86202623", "body": "Merge in commit d408df2804c880f6dcd5e35e37c6f06a3cb1b97c sorry we don't have the tooling to accept pull request yet.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86202623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86205719", "body": "We should basically be able to provide a list of host flags to the jvm so one can deactivate the -client. I will work on that along with the full support of the java_toolchain. For now I think I can submit a workaround. Let me look at that.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86205719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86224243", "body": "process-wrapper hasn't the x flag in the output directory.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86224243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86224865", "body": "What you call the installation directory is actually just the build output of the compile.sh script. In the real installation directory the x flag is missing. Now the question is why\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86224865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86228949", "body": "There is no installation directory per se. Bazel is a self-extractable zip, we call install base the folder that contains the _embedded_binaries one. \n\nYou cannot strace Bazel, it is launching a server in the background.\n\nThe files in /home/rbvermaa/.cache/bazel/_blaze_rbvermaa/ce51c282b5b9dadfc520c685445c68ce/base_workspace/_bin/ should be symbolic links. I think we should just do chmod when unzipping files. Depending on the zip configuration it will change.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86228949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86231843", "body": "Closing this one as we cannot do anything about https://bazel.io github pages does not support https on custom domain :(\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86231843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86232171", "body": "The links have been fixed.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86232171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86232724", "body": "Ok I have look around and the workaround is not feasible. Fixing that need a refactoring.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86232724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86234465", "body": "Ok after took a look at the code, it depends on the version of libarchive. I will send a workaround tomorrow to enforce the executable flags on extracted files.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86234465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86235978", "body": "I just thought that it would be easier for you to test, the envision solution is to replace the line 229 of src/main/cpp/blaze.cc:\n\n```\n   794c794\n   <     int fd = open(path.c_str(), O_CREAT | O_WRONLY, archive_entry_perm(entry));\n   ---\n   >     int fd = open(path.c_str(), O_CREAT | O_WRONLY, 0755);\n```\n\nCan you try to do that change and see if that fixes your issue?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86235978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86383159", "body": "The patch is going through the review process and should be here in a day\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86383159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86388241", "body": "Ulf, I let you handle this one when you are back.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86388241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86388897", "body": "This is a duplicate. The fix is already going through review.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86388897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86389686", "body": "Actually it is the other way around. bug #58 is a duplicate of this one.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86389686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86395090", "body": "hanwen: I though the binary was completely static, I guess we don't bundle the GLIBC (make sense though). Can we lower the version of GLIBC needed? Or should we just mark that as another prerequesite to have bazel?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86395090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86415642", "body": "Kristina can you update the readme on supported OS?\n\nOn Thu, Mar 26, 2015 at 9:53 AM kohlerm notifications@github.com wrote:\n\n> No it does not solve this problem. OpenSuse 12.3 uses a new glibc\n> \n> Kristina notifications@github.com schrieb am Mi., 25. M\u00e4rz 2015 um\n> 21:36 Uhr:\n> \n> > Does this resolve #50 https://github.com/google/bazel/issues/50 for\n> > you, as well?\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/google/bazel/issues/55#issuecomment-86205598.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/bazel/issues/55#issuecomment-86408206.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86415642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86424602", "body": "Sorry we don't have the tooling to accept pull request on those yet.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86424602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86424808", "body": "Sorry we don't have the tooling to accept pull request now. Your change have been merged\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86424808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86424994", "body": "Forgot to say that the links have been fixed\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86424994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86549100", "body": "I haven't found a documentation label but we should have such an example\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86549100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86612138", "body": "Sorry we have to work that out. We are setting up external CI systems and we might able to target 32bits.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86612138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86868795", "body": "Kristina got into the same problem with our builds on TravisCI.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86868795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86907034", "body": "Cannot reproduce:\n\n```\n    # Regression test for https://github.com/google/bazel/issues/67\n    # C++ library depedending on C++ library fails to compile on Darwin\n    function test_cpp_libdeps() {\n        mkdir -p pkg\n        cat <<'EOF' >pkg/BUILD\n    cc_library(\n      name = \"a\",\n      srcs = [\"a.cc\"],\n    )\n\n    cc_library(\n      name = \"b\",\n      srcs = [\"b.cc\"],\n      deps = [\":a\"],\n    )\n\n    cc_binary(\n      name = \"main\",\n      srcs = [\"main.cc\"],\n      deps = [\":b\"],\n    )\n    EOF\n\n        cat <<'EOF' >pkg/a.cc\n    #include <string>\n\n    std::string get_hello(std::string world) {\n      return \"Hello, \" + world + \"!\";\n    }\n    EOF\n\n        cat <<'EOF' >pkg/b.cc\n    #include <string>\n    #include <iostream>\n\n    std::string get_hello(std::string);\n\n    void print_hello(std::string world) {\n      std::cout << get_hello(world) << std::endl;\n    }\n    EOF\n\n        cat <<'EOF' >pkg/main.cc\n    #include <string>\n    void print_hello(std::string);\n\n    int main() {\n       print_hello(std::string(\"World\"));\n    }\n    EOF\n\n        bazel build //pkg:a >& $TEST_log \\\n            || fail \"Failed to build //pkg:a\"\n        bazel build //pkg:b >& $TEST_log \\\n            || fail \"Failed to build //pkg:b\"\n        bazel run //pkg:main >& $TEST_log \\\n            || fail \"Failed to run //pkg:main\"\n        expect_log \"Hello, World!\";\n    }\n```\n\nSucceed on my mac I will commit it to share it but the output is clean. I might have forgotten a flag though\n\nEDIT NOTE: I added the two build to the test case to have a failing test case for future reference.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86907034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86908961", "body": "\\o/ I have a failing test\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86908961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87031162", "body": "The problem is that darwin clang expect to have all the dependency provided at compile time. It is not going to be fast to fix.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87031162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87258555", "body": "I think you are asking the question in the wrong place, this is the Bazel issue tracker. There is no part called telegram and no such thing called \"stickers\" anywhere in Bazel (nor any button since it is a command line software).\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87258555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87258611", "body": "https://github.com/DrKLO/Telegram/issues <-- Here the issue tracker for Telegram :)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87258611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87380568", "body": "We have a whole install story we need to take care of and pushing to a maven repository is probably not going to be soon (especially because we have nothing to comply with maven version scheme)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87380568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87472455", "body": "I edited the test case in my previous message to have an actually failing one for future reference.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87472455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/88623390", "body": "I don't think we should disregards doing so. We could restrict it to fully defined version dependency only, i.e. we pull a dependency only if its version is not specified by a version range. That would ensure reproducibility without having to specify sha1 (eventually with an option to force pulling even if we encounter a version range). In the future plan, there is actually a \"flag\" for that (IMHO this flag belongs to the maven_jar rule)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/88623390/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/88777116", "body": "I have some experience in ruby but I think it is just simpler to use the\nPython highlighting\nLe jeu. 2 avr. 2015 \u00e0 07:38, Han-Wen Nienhuys notifications@github.com a\n\u00e9crit :\n\n> Since both .bzl and BUILD are syntactically correct python, linguist could\n> be configured to use that?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/bazel/issues/72#issuecomment-88743880.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/88777116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/89240041", "body": "For now we have a genproto that supports Java using Skylark (see\ntools/build_rules/genproto.bzl and its usage in the link Laszlo sent. You\ncan easily adapt it for other languages.\n\nOn Fri, Apr 3, 2015 at 1:57 AM Collin Winter notifications@github.com\nwrote:\n\n> Is there a timeline for releasing proto_library support? We'd love to\n> ditch Kythe's campfire build system, but can't feasibly do so without\n> proto_library.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/bazel/issues/52#issuecomment-89084720.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/89240041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90844966", "body": "You can use the external_repository mechanism which is suited exactly for this use-case.\n\nSee http://bazel.io/docs/build-encyclopedia.html#bind\nand http://bazel.io/docs/build-encyclopedia.html#local_repository\n\nWe have plan to support remote repository pull directly git repository but it is still unfinished work.\n\nAssigning to Kristina if you have further question.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90844966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90845930", "body": "Hanwen: can you take care of this one?\nAlso you might want to see with Kristina if we can set-up 32-bit build on Travis\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90845930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90846412", "body": "Closing the issue, feel free to reopen it if you have further questions.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90846412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90847791", "body": "We just did a static compilation of the proto compiler. Using external repositories (see http://bazel.io/docs/build-encyclopedia.html#local_repository and http://bazel.io/docs/build-encyclopedia.html#bind), you can bind your local proto compiler in your repository. Or you can simply modify the genproto.bzl to use whatever compiler you want.\n\nWe checked-in a static binary so we can compile bazel on any machine. It is not part of an \"official\" proto support.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90847791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90850291", "body": "It should work with all the other command. We are getting rid of what cause that bug.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90850291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90850429", "body": "Daniel: can you do the follow-up of this bug when this stuff is actually removed?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90850429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90853890", "body": "You should not build the world :) Try bazel build //src/...\n\nWe are not building the world in our automated build. And I don't think we should support it. (//tools will never be able to compile everything for instance).\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90853890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90854499", "body": "nb: output is an artifact of compile.sh and we cannot add special case for that in bazel. I am closing this issue.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90854499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90934254", "body": "Requalifying as a documentation issue\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90934254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91144226", "body": "You are not supposed to build //...\nSee https://github.com/google/bazel/issues/103\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91144226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91144468", "body": "No it is a side-effect of bazel bootstrapping and we are actually working on a better approach to providing tools outside of bazel.\n\nYou can put /home/rublee/bazel/base_workspace instead of /home/rublee/bazel in your bazelrc and that should remove it.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91144468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91146477", "body": "We have to wait until we have finished a bit of internal work to accept this fix.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91146477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91150227", "body": ":) so we know we don't have to handle it.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91150227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91273444", "body": "Concurrent modification. closing this pull request.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91273444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91305632", "body": "c66f436587596c289e5449e442a4430472b1862c imported your change. Thank you for your contribution!\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91305632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91306969", "body": "Ok the fix got imported. assigning to lberki for the follow-up on python\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91306969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91450603", "body": "hanwen did a change to that I think we have to roll it back. We don't have 32 bit machine so it is a bit tricky to debug.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91450603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91452814", "body": "A drop-by comment:\n- for non trivial contribution, we prefer to use gerrit (https://bazel-review.googlesource.com).\n- we should not have a new classes just for that (have it at least inside unix_jni).\n- you should update the Bazel build as well as compile.sh\n\nA personal opinion: I would love to see the JNI part of Bazel disappear at some point and I don't think we should introduce more JNIsh especially when we can put the corresponding code in the client and pass flags to the server.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91452814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91468740", "body": "Indeed my bad. So hopefully it should be solved when the change come live.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91468740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91475344", "body": "Humm can we do something so the pull request are marked as merged when reexporting them?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91475344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91494984", "body": "hanwen: Maybe if we need it to be written in C but if it is parsing the filesystem we can do it in Java. Anyway, the JNI part is probably no more needed with java.nio (this needs a lot of testing though) and I think it is better if we try not to grow it.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91494984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91501592", "body": "then for now just adding the necessary method to unix_jni\\* files is probably the faster. I am sure we can call sysctl from Java with JDK 7+ but I don't find it anymore. It is just a preference anyway.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91501592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91577294", "body": "Can you try to launch ./bootstrap_test.sh all instead of compile and\nprovide the binary generated by Bazel instead of compile sh now the\nsegfault should have been fixed?\n\nOn Fri, Apr 10, 2015 at 4:34 PM Kristina notifications@github.com wrote:\n\n> Closed #100 https://github.com/google/bazel/pull/100.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/bazel/pull/100#event-278173388.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91577294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91598024", "body": "The change isn't live yet.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91598024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/92398102", "body": "8d676c5 refer to bug #18 not this one.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/92398102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/92421969", "body": "what ? Can you do \"bazel help completion\" with a bootstrapped version? It\nwas the error I was getting when the WORKSPACE file was not here. What\nmachine was it on?\nLe lun. 13 avr. 2015 \u00e0 18:16, Kristina notifications@github.com a \u00e9crit :\n\n> Assigned #113 https://github.com/google/bazel/issues/113 to @damienmg\n> https://github.com/damienmg.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/bazel/issues/113#event-279923542.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/92421969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/92423606", "body": "humm and out of a workspace?\n\nWhich distrib is it?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/92423606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/92423989", "body": "got it on my workstation. that's a regression\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/92423989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/92425772", "body": "btw there a set +x in that build that should be removed.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/92425772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/92432657", "body": "Ok I traced back this problem to:\n#9  0x000000000041c480 in blaze_util::Which(std::string const&) ()\n#10 0x000000000041d376 in blaze::GetDefaultHostJavabase() ()\n\nThe thing is JAVA_HOME is undefined inside the spawn process so it is trying to find the JDK using the path leading to an exception because the path is empty. I'll send out a fix for both problems.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/92432657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/11026087", "body": "I don't really want to have them here. It is just a prototype and I don't think this will ever get merged. If it is merged I will go through gerrit. It is here to avoid having google code hosted under my personal name but I can move it to my personal copy of the repo.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/11026087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/13207067", "body": "you have to change the java_toolchain (default one is declared in tools/jdk/BUILD) to add a `jvm_opts` attribute set to `[]` and that should work,\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/13207067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/13207167", "body": "Well the location of the java_toolchain itself is over-writable with\n--java_toolchain\nOn Mon, Sep 14, 2015 at 10:34 AM kohlerm notifications@github.com wrote:\n\n> Ok, Thanks! I had hoped I could be overridden.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/bazelbuild/bazel/commit/1fa163c42ee26a72c21c118ec820d677a431ee49#commitcomment-13207150\n> .\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/13207167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/16783800", "body": "/cc @philwo @hermione521 \n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/16783800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/18444655", "body": "It will once it become a release. It is just a release candidates for now.\n\nOn Fri, Jul 29, 2016, 12:35 AM Kevin Moore notifications@github.com wrote:\n\n> Should this be tagged as a release?\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/bazelbuild/bazel/commit/c6cfe0be06bcffdb439c5cadd8e091464d3ee766#commitcomment-18440400,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/ADjHf-75TVQrWrC3PvN0Y9BI_duBcg6Tks5qaS6_gaJpZM4JXthL\n> .\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/18444655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21011531", "body": "It was not deleted.\r\n\r\nThis section was moved to a separate page by a later commit, see https://bazel.build/versions/master/docs/skylark/language.html#differences-with-python", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21011531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21163770", "body": "it is in src/test/shell/bazel IIRC", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21163770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21169231", "body": "https://github.com/bazelbuild/bazel/blob/master/src/test/shell/testenv.sh#L44\nis\nwhere those path are.\n\nOn Mon, Mar 6, 2017 at 4:44 PM Or Shachar <notifications@github.com> wrote:\n\n> Thanks @damienmg <https://github.com/damienmg> !\n> Unfortunately - I couldn't find there a target called bazel or that can\n> explain what makes src/bazel available on the runfile environment...\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bazelbuild/bazel/commit/fa389066641ac7f92b220ef232f23e757704318d#commitcomment-21168245>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ADjHf02u7XNKP6vO0XSIHsgCmB85j1_Fks5rjCnrgaJpZM4MTY7h>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21169231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21626417", "body": "For the record, there was an issue with our tooling (#2778) and the commit author is wrong. The correct author should be @petemounce.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21626417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21626425", "body": "For the record, there was an issue with our tooling (#2778) and the commit author is wrong. The correct author should be @royalharsh.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21626425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21746258", "body": "Is there a reference of those environment variable somewhere? We have a custom pre --action_env workaround for the Homebrew superenv in the c++ wrapper.\r\n\r\nAs for invalidation, if we can reduce the number of them that's saner for viewing the list. So if there is one that change all the time the superenv change, we could use that one instead.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21746258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21746449", "body": "Inside Bazel there is no way to say invalidate on all environment variable\nthat starts with XXX_, we can only use a precise list.\n\nWe are already transmitting all the HOMEBREW_* to the child processes. The\nHomebrew superenv would change CC, we might want to  add the HOMEBREW_CC\nand other C++ related path here but I actually wonder why HOMEBREW_RUBY is\nthere, maybe nicolas can tell?\n\nOn Thu, Apr 13, 2017 at 8:06 AM Shaun Jackman <notifications@github.com>\nwrote:\n\n> I extracted this list from this source file:\n>\n> https://github.com/Homebrew/brew/blob/master/Library/Homebrew/shims/super/cc#L23\n>\n> It's best to white list all environment variables that start with\n> HOMEBREW_ so that you don't have to keep your list synchronized with\n> Homebrew. It could cause weird breakage if only some variables are missing\n> from your white list.\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bazelbuild/bazel/commit/6326f98ed84c2e0677b552cd4af808d482e8749c#commitcomment-21746296>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ADjHfzQBghP482isYQqs55lwh_DvJXs3ks5rvbtqgaJpZM4M8SKk>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21746449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/24464233", "body": "This change is causing some issue with the nightly:\r\nhttp://ci.bazel.io/blue/rest/organizations/jenkins/pipelines/Global/pipelines/rules_closure/runs/182/nodes/21/log/?start=0\r\n\r\nfor example", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/24464233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/24607870", "body": "This commit description was unfortunately scrubbed by our export process.\r\n\r\nThe original code review happened on https://bazel-review.googlesource.com/c/bazel/+/16810", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/24607870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25278235", "body": "Not exactly 2 years :)\r\n\r\nAnyway, there is a lot of legacy issue in the CROSSTOOL, /cc @calpeyser @mhlopko ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25278235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/51358381", "body": "After thinking more, leave it for now.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/51358381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/51358384", "body": "revert\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/51358384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/51358420", "body": "revert, our style guide requires 2 empty lines between global def.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/51358420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/51358427", "body": "oops mixed up with python styleguide, you can leave it as it is.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/51358427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/51358432", "body": "revert\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/51358432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/51358552", "body": "Don't depends on java being on the PATH, instead add dependency to //tools/defaults:jdk and to @bazel_tools//tools/jdk:java and use the latter as your java binary here.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/51358552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53233044", "body": "Kamil: if you can merge it, would be awesome :)\n\nOn Wed, Feb 17, 2016 at 10:13 PM Michael Zhou notifications@github.com\nwrote:\n\n> In tools/build_rules/closure/closure_js_binary.bzl\n> https://github.com/bazelbuild/bazel/pull/910#discussion_r53232161:\n> \n> > @@ -46,6 +48,21 @@ _COMPILATION_LEVELS = {\n> >    \"advanced\": [\"--compilation_level=ADVANCED\"]\n> >  }\n> > \n> > +_LANGUAGE_LEVELS = {\n> \n> I see :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/bazelbuild/bazel/pull/910/files#r53232161.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53233044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53160010", "body": "2spaces\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53160010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53160020", "body": "2 spaces\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53160020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53248109", "body": "nit: \"\"\" on the same line + ending .\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53248109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53605625", "body": "Why have buildijar here if you are not using it?\n\nAlso the ijar should be just an empty jar here, no?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53605625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53665412", "body": "I mean why is there _build_nosrc_jar(ctx, buildijar) if everwhere you call it buildijar = False?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53665412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53671549", "body": "This is not a call to build_nosrc_jar, was it supposed to be?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53671549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53674432", "body": "Sorry so I was, ijar is ignored right after being produced (buildijar can indeed be true):\nhttps://github.com/bazelbuild/bazel/pull/948/files#diff-981b14fba970d9a9d0dd316467d216eeR112\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53674432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53743620", "body": "No I am fine with it. Just though the ijar wasn't actually used\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53743620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/54915770", "body": "Yes that's a typo\n\nOn Thu, Mar 3, 2016, 9:31 AM Philipp Wollermann notifications@github.com\nwrote:\n\n> In tools/build_defs/scala/scala.bzl\n> https://github.com/bazelbuild/bazel/pull/980#discussion_r54915496:\n> \n> > @@ -26,7 +26,7 @@ load(\n> >  def warning(rule):\n> >    return \"\"\"This rule has moved out of @bazel_tools!\n> > \n> > -The scala rules have moved to https://github.com/bazelbuild/scala_rules, you\n> > +The scala rules have moved to https://github.com/bazelbuild/rules_scala, you\n> >  should now refer them via @io_bazel_rules_scala, use:\n> \n> @johnynek https://github.com/johnynek Mhm... I think so, too.\n> \n> @damienmg https://github.com/damienmg Can you have a look at\n> https://github.com/bazelbuild/bazel/blob/master/tools/build_defs/scala/scala.bzl?\n> I think you made those changes and probably know best what they're supposed\n> to look like :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/bazelbuild/bazel/pull/980/files#r54915496.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/54915770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/60831320", "body": "setup_objc_test_support would do that for you so we don't have that code in 2 places.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/60831320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/61852806", "body": "I am not against JavaScript but I think we must be clear about what so why not: \"JavaScript (Closure Tools)\"?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/61852806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/75665491", "body": "replace to www.bazel.io?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/75665491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/77657816", "body": "Is this going to be more portable? Is awk more stable than sed?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/77657816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/90839897", "body": "Why gc here?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/90839897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/90840030", "body": "Can we factor this so we do not have code duplication", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/90840030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/90840148", "body": "That will be wrong if the person use --expunge right?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/90840148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/90840276", "body": "You also want to duplicate the logic at line 116 to avoid doing async clean on platforms that does not support it.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/90840276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/90840969", "body": "Can we change that test to check that platform is linux instead?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/90840969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/92776137", "body": "Our CI test is green so there is no issue. If the test is timing out on  supported platform it might be because the platform is overloaded while running the test.\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/92776137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/92779063", "body": "Yes I mean this test is made to work only on Linux x86_64 so it's better to test that we are in the good architecture rather than list all the platform it cannot work on.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/92779063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/92789227", "body": "/cc @philwo: why do we still have -client flag on Java on some machine, is there case it would be needed?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/92789227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93228095", "body": "Add a space between \"!\" and \"[\"", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93228095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93618259", "body": "If it is no longer debian specific, maybe move it to linux/bazel.bazelrc?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93618259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93619508", "body": "Is that going to /etc/bazel.bazelrc? You might want to consider patching bazel if not.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93619508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93619587", "body": "What do you need here?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93619587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93619724", "body": "We will need rpmbuild in the fedora image to build it.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93619724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93619851", "body": "Is there a more generic package name that the openjdk-headless one?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93619851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/92779527", "body": "I am not too familiar with include scanning but IIRC include scanning is to skip strict header checking to know the actual header used. Not to improve incrementality. This is kind of ugly to do in general.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/92779527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/113123228", "body": "simply `sys.argv[0]`, no need for creating a tuple.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/113123228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/115982282", "body": "We still have 4 .html files in that:\r\n\r\n$ find site/versions -name '*.html'\r\nsite/versions/master/docs/bazel-user-manual.html\r\nsite/versions/master/docs/build-ref.html\r\nsite/versions/master/docs/query.html\r\nsite/versions/master/docs/test-encyclopedia.html\r\n\r\n\r\nYou might want to add special cases for those.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/115982282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/116304693", "body": "nit: add missing space after the comma.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/116304693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/124175550", "body": "What is ./completion/.?\r\nWhy do you need a special step on macOS? Isn't homebrew supposed to install that correctly?\r\n\r\nAlso why is the step different from Linux? I mean the origin should be the git repository probably.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/124175550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "lberki": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4090", "title": "cr.bazel.build/19550 breaks a few Google-internal targets", "body": "/cc @benjaminp \r\n\r\nAssigning to Ulf because I'm on sheriff duty this week and as such, have limited capacity to do debugging; I'll roll the change back and let Ulf sort it out.\r\n\r\nI'll also create an bug in our internal bugtracker with a bit more pointers; this is here to inform @benjaminp about the progress.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/543e3b67616f5b3dd93d9ded725b93e8a61e40b7", "message": "Change the mnemonic of C++ link stamp compile actions so that extra actions can be attached to C++ compile actions without tickling the bug that makes Blaze crash when extra actions are attached to shared actions that do input discovery.\n\nRELNOTES: None.\nPiperOrigin-RevId: 182044169"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/f2075d27ca124156fcd7c01242c552175c0cf145", "message": "Export the runfiles path of the JVM executable to Skylark.\n\nRELNOTES: None.\nPiperOrigin-RevId: 181973847"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/84f2c42686763c81e1cfa75e021dccbc70f8572c", "message": "Minor cleanup: move all code from JavaConfigurationLoader to the ctor of JavaConfiguration.\n\nRELNOTES: None.\nPiperOrigin-RevId: 181593727"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/15b77ec8314a6df0608bf027aab5bd5e06dcde07", "message": "Fold the Jvm configuration fragment into JavaConfiguration.\n\nRELNOTES: None.\nPiperOrigin-RevId: 181579365"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/bc704360a93ff65c4d3684ab5cc0e45bd403bdd8", "message": "Remove the unused --[no]experimental_disable_jvm command line option.\n\nRELNOTES: The --[no]experimental_disable_jvm command line option is not\nsupported anymore.\nPiperOrigin-RevId: 181575259"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/b247935cb187280a71df49334551ba90ef9c9f05", "message": "Make fake link actions \"work\" with ThinLTO.\n\nRELNOTES: None.\nPiperOrigin-RevId: 181462949"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/15961269f0f7433f3877669ec38a5b59c95c354c", "message": "Remove ctx.fragments.jvm .\n\nIt contained no fields or any other information accessible from Skylark, so it's not a big loss.\n\nRELNOTES[INC]: ctx.fragments.jvm is not available anymore.\n\nPiperOrigin-RevId: 181455474"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/13abaab801d40800fb8b86f79d81cd1ff860c5a4", "message": "Remove package loading from JvmConfigurationLoader .\n\nThis should not cause a user-visible change: --{host_,}javabase was already\nrequired to point to a java_runtime_suite / java_runtime rule, the only change is that\nwe now enforce it differently.\n\nIf anything, this makes Bazel more lenient in that it now accepts Skylark rules\nthat provide JavaRuntimeInfo, but I doubt anyone does that, since it does not\nwork at HEAD.\n\nRELNOTES: None.\nPiperOrigin-RevId: 181444563"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/b342a2051e45bfc390f2671395305662cd5552be", "message": "Initialize server_pid in an attempt to convince a linter that ExecuteDaemon() always returns a defined value.\n\nFixes #4394.\n\nRELNOTES: None.\nPiperOrigin-RevId: 181315375"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/9c21b5cf530b7d2a2070a11465ca22e79d6d8729", "message": "Expose the Java home to Skylark.\n\nRELNOTES: None.\nPiperOrigin-RevId: 181297029"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/fae484ddb382e0048479837015a704291088270c", "message": "Remove code that used to support --javabase=<absolute path>.\n\nThis is the first step in removing package loading from JvmConfigurationLoader (I didn't want to add the rest into this change because it's technically possible to access ctx.fragments.jvm even though it contains no fields, so removing that is an incompatible change) and it's also possible that removing error reporting from JvmConfigurationLoader causes some subtle changes in behavior.\n\nBaby steps. Now that the hard part is done, there is no need to rush.\n\nRELNOTES: None.\nPiperOrigin-RevId: 181143978"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85977090", "body": "Oh, I see, bazel.io, doesn't support https... this has already been fixed in aae65e0e9d. Thanks for the pull request! :)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85977090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85986026", "body": "Thanks for the contribution! This has been submitted as\n\nhttps://github.com/google/bazel/commit/ad98ffdfde030a07c309a0f6c76a97ead6306bf5\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85986026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85986132", "body": "Thanks for the patch! This is submitted as \n\nhttps://github.com/google/bazel/commit/be8af482a3a14ea17450e54250187722709ceaf9\n\n, although your nice commithash dcddddcd... is gone :(\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85986132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86003577", "body": "This was merged as \n\nhttps://github.com/google/bazel/commit/60c901fff972e8c70ec97677e9388996ff183046\n\nThanks for the patch!\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86003577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86894827", "body": "We put that exclusive lock in place so that Bazel doesn't start checksumming 200 files in parallel, since that would be a lot of I/O load. This was introduced at the beginning of 2009, so the state of affairs could have changed a lot since then.\n\nAt the very least we could raise the file size limit for concurrent threads or run things on more than one (but not --jobs) threads. \n\nCould you try removing the sychronization from getDigestInExclusiveMode and see how much (if at all) it improves performance?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86894827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86896387", "body": "Assigning to kchodorow, although it's a bit strange becayse src.zip is not referenced in jdk.BUILD. \n\nOnce that strangeness is taken care of (probably my ignorance), all this needs at most is a change in the installation instructions.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86896387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86896651", "body": "Assigning to ulfjack since he already has a fix.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86896651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86899085", "body": "This is very surprising. Couldn't reproduce with this BUILD file on Linux, though:\n\ncc_library(\n    name = \"a\",\n    srcs = [\"a.cpp\"],\n)\n\ncc_library(\n    name = \"b\",\n    srcs = [\"b.cpp\"],\n    deps = [\":a\"],\n)\n\ncc_binary(\n    name = \"main\",\n    srcs = [\"main.cpp\"],\n    deps = [\":b\"],\n)\n\nAssigning to Damien since he knows a tad more about Mac than I do.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86899085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86899451", "body": "I vote for hardcoding an absolute amount of free space instead of a percentage.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86899451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86899681", "body": "I agree that this would be nice, but realistically, we have a bunch of other burning issues that we should take care of before. For now, Bazel's world ends with output files.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86899681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91514122", "body": "This is tricky :) TL;DR: use ctx.action(executable =\nctx.executable._smart_tar, inputs= ctx.files.configs + ctx.files.deps)\n\nBazel has a concept of \"runfiles\", which is the set of files an executable\nneeds to run in addition to the binary. For Python binaries, this includes\nall the source files. If you just add the binary to inputs, you only get\nthe binary and not the runfiles, thus, Bazel won't find your source .py\nfiles. The solution is to put your executable into the conveniently named\nattribute called \"executable\" instead, which tells Bazel that you want to\nexecute it in the action and then you will get the runfiles, too.\n\nIf you want to execute _two_ things in the same action... that, I'll let\nLaurent answer.\n\nOn Wed, Apr 8, 2015 at 8:23 PM, kwatts notifications@github.com wrote:\n\n> I wrote a custom rule that depends on a py_binary. The rule calls the\n> Python binary to generate an output file.\n> \n> When I build the target, my rule is called before the Python binary is\n> built. This call fails:\n> \n> $ bazel build //my_package:simple_deployment\n> \n> Manually building in order works:\n> \n> $ bazel build //common:smart_tar\n> $ bazel build //my_package:simple_deployment\n> \n> I think that Bazel is not properly processing the dependencies.\n> Full details\n> \n> To duplicate, check out repo here:\n> https://github.com/kwatts/bazel_py_binary_test\n> \n> My rule:\n> \n> def impl_deploy(ctx):\n>     paths = [ d.path for d in ctx.files.deps ]\n>     paths += [ c.path for c in ctx.files.configs ]\n> \n> ```\n> ctx.action(\n>            inputs=ctx.files.configs + ctx.files.deps + [ctx.executable._smart_tar],\n>            outputs=[ctx.outputs.tarball],\n>            command=\"%s %s %s\" % (ctx.executable._smart_tar.path,\n>                                  ctx.outputs.tarball.path,\n>                                  ' '.join(paths))\n>            )\n> ```\n> \n> deploy = rule(\n>     implementation=impl_deploy,\n>     attrs = {\n>         \"_smart_tar\": attr.label(default=Label(\"//common:smart_tar\"),\n>                                  executable=True),\n>         \"configs\": attr.label_list(allow_files=True),\n>         \"deps\": attr.label_list(),\n>     },\n>     outputs={\"tarball\": \"%{name}.tgz\"},\n> )\n> \n> Then I call the rule:\n> \n> package(default_visibility = [\"//visibility:public\"])\n> \n> load(\"//common/packaging\", \"deploy\")\n> \n> deploy(\n>     name=\"simple_deployment\",\n>     configs = [\"my_file.txt\"],\n> )\n> \n> When I build the target //my_package:simple_deployment, bazel fails\n> because the py_binary has not been built yet.\n> \n> $ bazel build //my_package:simple_deployment\n> INFO: Found 1 target...\n> INFO: From Unknown my_package/simple_deployment.tgz:\n> python: can't open file '/home/kwatts/.cache/bazel/_bazel_kwatts/644944009200f979782a9d414b079bab/bazel_py_binary/bazel-out/local_linux-fastbuild/bin/common/smart_tar.runfiles/py_binary_test/common/smart_tar.py': [Errno 2] No such file or directory\n> ERROR: /home/kwatts/scratch/bazel_py_binary/my_package/BUILD:7:1: error executing shell command: 'bazel-out/local_linux-fastbuild/bin/common/smart_tar bazel-out/local_linux-fastbuild/bin/my_package/simple_deployment.tgz my_package/my_file.txt' failed: bash failed: error executing command /bin/bash -c 'bazel-out/local_linux-fastbuild/bin/common/smart_tar bazel-out/local_linux-fastbuild/bin/my_package/simple_deployment.tgz my_package/my_file.txt': com.google.devtools.build.lib.shell.BadExitStatusException: Process exited with status 2.\n> Target //my_package:simple_deployment failed to build\n> Use --verbose_failures to see the command lines of failed build steps.\n> INFO: Elapsed time: 0.278s, Critical Path: 0.02s\n> \n> The dependency on /common/smart_tar is correctly set up, AFAICT:\n> \n> $ bazel query 'deps(//my_package:simple_deployment)'\n> //my_package:simple_deployment\n> //my_package:my_file.txt\n> //common:smart_tar\n> //tools/python:2to3\n> //tools/python:2to3.sh\n> //tools/defaults:crosstool\n> //tools/cpp:toolchain\n> //tools/cpp:cc-compiler-local\n> //tools/cpp:cc-compiler-darwin\n> //tools/cpp:empty\n> //common:smart_tar.py\n> \n> Building the packages in order (manually) works:\n> \n> $ bazel build //common:smart_tar\n> $ bazel build //my_package:simple_deployment\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/bazel/issues/105.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91514122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/10389094", "body": "Indeed. I did not really think that through :)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/10389094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/12426417", "body": "(facepalm)\n\nThat's whay whe have the --python2_path command line argument. We should\nhave some sort of detection, but for the time being, this is the best we\ncan offer.\n\nOn Wed, Jul 29, 2015 at 7:22 PM, Steven Dee notifications@github.com\nwrote:\n\n> Although of course Arch went crazy and made python point to python3. :-p\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/bazel/commit/a18964096887e592a14d9553f776e70ce9495131#commitcomment-12426295\n> .\n## \n\nLuk\u00e1cs T. Berki | Software Engineer | lberki@google.com |\n\nGoogle Germany GmbH | Dienerstrasse 12 | 80331 M\u00fcnchen | Germany |\nGesch\u00e4ftsf\u00fchrer:\nGraham Law, Christine Elizabeth Flores | Registergericht und -nummer:\nHamburg, HRB 86891\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/12426417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/17080729", "body": "These rules are intended to be Bazel-only. Designing protobuf rules that work for all possible cases is hard, and we so far haven't had the manpower to tackle that particular problem. It's not that we shouldn't..\n\nHowever, I have a change chambered that would nevertheless allow these rules to work from other repositories that I need to get http://github.com/bazelbuild/dash to compile again.  It should be pushed within half an hour or so.\n\n`//external` isn't really necessary here, because it's enough to reference a target that is in the same repository as the `.bzl` file, for which we have the funky `str(Label(\"//a:b\"))` syntax.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/17080729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/17081055", "body": "Pushed. The commit is https://github.com/bazelbuild/bazel/commit/c6c516dda8083caa42a60db7b82fcf52647a8cb3 .\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/17081055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/13811952", "body": "Not eloquent enough. Try harder.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/13811952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/55565990", "body": "It would be nice if there was a nicer way to get to the providers the rule produced\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/55565990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/55566042", "body": "How are you planning to run this? `bazel build <wherever this function is called from>`? It would be nice if it could be run from `bazel test`.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/55566042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/92781035", "body": "`genrule` infrastructure? What's that?\r\n\r\ninclude scanning is custom C++ specific logic in Blaze. It serves two purposes: add includes that are not specified by the rule but are still needed (bad) and remove includes from the inputs of the action that are not actually needed (good, helps with action caching especially when remote executors are in play)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/92781035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "j3parker": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4083", "title": "Windows: CreateProcess(): The parameter is incorrect (due to long argument list)", "body": "### Description of the problem:\r\n\r\nWhen the total length of the arguments + executable (+ null terminator etc.) exceeds 32,767 Bazel fails ungracefully with the error\r\n\r\n```\r\nAction failed to execute: java.io.IOException: CreateProcess(): The parameter is incorrect.\r\n```\r\n\r\nIt would be nice if this had a better error message, at least.\r\n\r\nGenerally this is pretty worrying because Bazel seems to like creating very large argument lists and this definitely something Bazel can just \"fix\" :) I've been able to solve my specific case with [param files](https://docs.bazel.build/versions/master/skylark/lib/Args.html#use_param_file) but I think there should be an error message so folks know what's up.\r\n\r\n### Minimal reproduction:\r\n\r\nIn `foo.bzl`:\r\n\r\n```BUILD\r\ndef _broken(ctx):\r\n  dummy = ctx.actions.declare_file(\"dummy.txt\")\r\n\r\n  ctx.actions.run(\r\n    outputs = [dummy],\r\n    executable = \"echo\",\r\n    arguments = [\"x\"*32760],\r\n  )\r\n\r\nbroken = rule(\r\n  implementation = _broken,\r\n  outputs = {\"foo\": \"dummy.txt\"},\r\n)\r\n```\r\n\r\nIn a `BUILD`:\r\n\r\n```BUILD\r\nload(\"//:foo.bzl\", \"broken\")\r\n\r\nbroken(name = \"whoops\")\r\n```\r\n\r\nChanging 32760 to something lower (e.g. 32759) causes the build to fail for legitimate reasons.\r\n\r\n* Bazel version (output of `bazel info release`): release 0.7.0\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nThe following issues may be related. They both contain the same error message (`CreateProcess(): The parameter is incorrect`) and the one's log showed what appeared to be a 51k long process creation.\r\n\r\n* [Zipper fails under Windows due to incorrect parameters](https://github.com/bazelbuild/bazel/issues/2164)\r\n* [appengine_war cannot complete due to incorrect zipper parameters](https://github.com/bazelbuild/rules_appengine/issues/29)\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n\r\n* [MSDN docs](https://msdn.microsoft.com/en-us/library/windows/desktop/ms682425(v=vs.85).aspx) for `CreateProcess` which documents the 32,767 restriction", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4088", "title": "Improve Windows error when arg list is too long ", "body": "CreateProcess has a limit of 32768 for its lpCommandLine argument.\r\nCurrently Bazel will emit an error about a parameter to CreateProcess\r\nbeing incorrect if we exceed that. This change makes it print a more\r\ninformative error message (but still fail.)\r\n\r\n---\r\n\r\nThis \"fixes\" #4083. I don't think there is anything more Bazel could do here (creating Windows-compatible build rules is just going to be a bit tough in general, I think.)\r\n\r\n---\r\n\r\nI'm not super happy about this: the error message is a little weird because this may not be the result of an action. It's easiest to put the check here because 1) it's platform specific 2) the length calculation depends on things like quoting which are done in here.\r\n\r\nI opted to keep this `IOException` because it's not something I expect is a common scenario and this involves the least plumbing. Objections? (I'm not a Java person myself, not familiar with the idioms.)\r\n\r\n---\r\n\r\nI haven't tested this at all. I haven't got Bazel building on Windows yet (this builds on Linux though, heh.) I'm not sure this is even the right spot for the change :) **I'll confirm, though**. In particular I need to check that the arithmetic is correct.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ben-ng": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4080", "title": "Virtualenv state is stuck in the server", "body": "### Description of the problem / feature request / question:\r\n\r\nIf the bazel server is started when a python virtualenv is activated, actions are run in that virtualenv until the server restarts. `bazel clean` does not clear this state.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\n1. Create a python virtualenv\r\n2. Create a python script that `import`s a dependency in that virtualenv\r\n3. Activate the virtualenv\r\n4. Build & run the script with bazel. It should exit normally.\r\n5. Deactivate the virtualenv. Build & run the script with bazel again. It passes, unexpectedly.\r\n6. `bazel shutdown` (in practice this happens automatically, which is even more surprising)\r\n7. Build & run the script with bazel. It now fails because the dependency couldn't be found.\r\n\r\nIt looks like it's because activating the virtualenv changes `PATH`, and the deactivation of the virtualenv doesn't propagate to the bazel server.\r\n\r\n### Environment info\r\n* Operating System:\r\n\r\nCentOS Linux release 7.0.1406\r\n\r\n* Bazel version (output of `bazel info release`):\r\n\r\nrelease 0.7.0\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zhangbo5891001": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4077", "title": "How to change the default compiler for bazel when building tensorflow?", "body": "Hi,\r\nI build tensorflow successfully using the default installation of bazel. Now, I want to use my custom gcc/g++ compiler(for example: linaro gcc) compiler to build some tensorflow examples. But I got the following error:\r\n\r\ngcc: error trying to exec 'cc1': execvp: No such file or directory\r\n\r\nhere is my steps:\r\n\r\n1. export CC=/my/path/gcc\r\nexport CXX=/my/path/g++\r\n\r\n2. bazel build tensorflow/examples/wav_to_spectrogram/...\r\n\r\n3. got the previous error msg, but i confirm that cc1 indeed exists.\r\n\r\nsome information:\r\n\r\nbazel version: bazel release 0.7.0(install from apt-get install bazel)\r\nos: ubuntu 14.04\r\ntensorflow: r1.4(from github)\r\n\r\nI think this maybe a common question: how to change the default compiler for bazel?\r\nI try to find the answer from google, but not luck.\r\n\r\nCan anyone give some advice? I will be appreciate.\r\n\r\nThanks.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Barro": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4075", "title": "Source forest creation failed error on symbolically linked hidden .#filename.c type of file names", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\n\r\nBazel fails with following type of message when there are .c files that named like \".#filename.c\" in the directory that are symbolic links (sometimes a second build attempt is needed):\r\n\r\n```\r\nERROR: Source forest creation failed: /<path-to-cache>/execroot/__main__/.#tst.c (File exists)\r\n```\r\n\r\nThese come up when you edit files with emacs and have not saved the files. Bazel should not fail when these files are not listed anywhere in its BUILD files.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\nWrite following commands on your favorite *nix shell:\r\n\r\n    echo \"int main() { return 0; }\" > tst.c\r\n    touch WORKSPACE\r\n    echo 'cc_binary(name=\"tst\", srcs=[\"tst.c\"])' > BUILD\r\n    ln -s nothing \".#tst.c\"\r\n    bazel build :all\r\n    bazel build :all  # Second build might be needed when Bazel does not fail for the first time.\r\n\r\nThis should lead into following build message on the second build attempt (first build does succeed):\r\n\r\n```\r\nINFO: Analysed target //:tst (0 packages loaded).\r\nINFO: Found 1 target...\r\nERROR: Source forest creation failed: /<path-to-cache>/execroot/__main__/.#tst.c (File exists)\r\nINFO: Elapsed time: 0.196s\r\nFAILED: Build did NOT complete successfully\r\n```\r\n\r\n### Environment info\r\n* Operating System:\r\n\r\nBasically Debian testing amd64 version:\r\n\r\n```\r\n$ java -version\r\nopenjdk version \"1.8.0_144\"\r\nOpenJDK Runtime Environment (build 1.8.0_144-8u144-b01-1-b01)\r\nOpenJDK 64-Bit Server VM (build 25.144-b01, mixed mode)\r\n$ lsb_release  -a\r\nNo LSB modules are available.\r\nDistributor ID: Debian\r\nDescription:    Debian GNU/Linux testing (buster)\r\nRelease:        testing\r\nCodename:       buster\r\n```\r\n\r\nAlso happens on FreeBSD, so there is not that much operating system dependent behavior here.\r\n\r\n* Bazel version (output of `bazel info release`):\r\n\r\n    release 0.7.0\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nA previously closed bug report describing the issue but without giving means to reproduce it: https://github.com/bazelbuild/bazel/issues/1064", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jmillikin": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4074", "title": "Accessing the CPP config fragment attribute `sysroot` crashes Bazel", "body": "`cpp.sysroot` is documented at https://docs.bazel.build/versions/master/skylark/lib/cpp.html#sysroot as being a `string`, or `None` in some cases. But when I try to access it with `print(\"sysroot: \", ctx.fragments.cpp.sysroot)` it crashes Bazel:\r\n\r\n```\r\njava.lang.NullPointerException\r\n\tat com.google.devtools.build.lib.rules.cpp.CppConfiguration.getSysroot(CppConfiguration.java:709)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n[...]\r\n```", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4060", "title": "Rebuilds fail with \"Source forest creation failed\" when a top-level dir starts with an underscore", "body": "If a top-level directory name starts with an underscore, Bazel won't delete its symlink when regenerating the symlink forest.\r\n\r\n```java\r\n// SymlinkForest.java\r\nthis.prefixes = new String[] { \".\", \"_\", productName + \"-\"};\r\n\r\nvoid plantSymlinkForest() throws IOException {\r\n  deleteTreesBelowNotPrefixed(execroot, prefixes);\r\n  // ...\r\n  for (Map.Entry<PackageIdentifier, Set<Path>> entry : dirRootsMap.entrySet()) {\r\n    PackageIdentifier dir = entry.getKey();\r\n    execroot.getRelative(dir.getPathUnderExecRoot())\r\n        .createSymbolicLink(root.getRelative(dir.getSourceRoot()));\r\n  // ...\r\n}\r\n\r\nstatic void deleteTreesBelowNotPrefixed(Path dir, String[] prefixes) throws IOException {\r\n  dirloop:\r\n  for (Path p : dir.getDirectoryEntries()) {\r\n    String name = p.getBaseName();\r\n    for (String prefix : prefixes) {\r\n      if (name.startsWith(prefix)) {\r\n        continue dirloop;\r\n      }   \r\n    }   \r\n    FileSystemUtils.deleteTree(p);\r\n  }   \r\n}\r\n```\r\n\r\nThis code works the first time a package is built, but fails the second time:\r\n\r\n```shell\r\n$ bazel build //_site:main\r\nERROR: Source forest creation failed: /home/john/nas/scratch/bazel_root/execroot/gitbrowser/_site (File exists)\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mobileink": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4072", "title": "android ndk builds use wrong headers", "body": "### Description of the problem / feature request / question:\r\n\r\nAndroid builds that build native code pull system headers from $NDK/platforms/... rather than $NDK/sysroot.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\nIn a C11 source file:\r\n#include <assert.h>\r\nstatic_assert( 1 == 0, \"static assert failed successfully - comment me out and recompile\");\r\n\r\n(While you're at it, add #include <asm/types>, to validate that platform-specific headers are correctly included.)\r\n\r\nBuild with copt -std=c11. It should fail; if the compile succeeds with a warning about \"implicit declaration of function 'static_assert' is invalid in C99\", then the wrong assert.h header is being used. The ones in $NDK/platforms do not define static_assert; the one in $NDK/sysroot does.\r\n\r\nI cannot provide a patch, but I have a working custom CROSSTOOL.\r\nThe fix is to point build_sysroot to $NDK/platforms/android-<api level>/arch-<arch>.  This is for lib searches.\r\nThen use unfiltered_cxx_flag: \"-isysroot .....\" tell bazel to use $NDK/sysroot for header searches.\r\nUse cxx_builtin_include_directory to point to $NDK/sysroot.\r\nUse unfiltered_cxx_flag to explicitly add both $NDK/sysroot/usr/include and $NDK/sysroot/usr/include/<TRIPLE> to the search paths using -I or -isystem.\r\n\r\nWith clang you need to pass the -I stuff to the preprocessor as well, using -Wp,-I\r\n\r\n### Environment info\r\n* Operating System:\r\n\r\nmacOS 10.12.6\r\n\r\n* Bazel version (output of `bazel info release`):\r\n\r\nrelease 0.7.0-homebrew\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "philsc": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4071", "title": "Provide command line option to enable network sandbox by default", "body": "I am not exactly sure in what release of the official repo this happened, but for at least two internal bazel upgrades we've partially reverted c5af2f3f2d974f7d0d84cecab6c57444b3413b01.\r\n\r\nWe understand that this was done because of performance concerns, but we're finding too much value in the sandbox to give up. This is on Linux.\r\n\r\nWould it be reasonable to provide a command line option that enables/disables the network sandbox?\r\n\r\nI believe @philwo agreed that that'd be useful.\r\n\r\n/cc @AustinSchuh", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ianthehat": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4070", "title": "Ability to propagate features with an aspect", "body": "Originally posted in the newsgroup:\r\nhttps://groups.google.com/d/msg/bazel-discuss/u5xS99WL1J4/hbA4VCNyBwAJ\r\n\r\nI need to be able to propagate the features from an originating rule along with the aspect as it travels across all the dependancies.\r\nAt the moment the only information you can send from the originating rule is string attributes with value lists.\r\nI need to be able to either calculate string attributes from the features (which is what I originally asked for, and is probably the easiest) or be able to directly propagate or access the features.\r\nThis is to allow the aspect to vary it's behavior based on the rule that triggered it, rather than just the rule it is applying to. This would allow things like varying the build mode of libraries based on the options set on the binary they will be linked into.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4067", "title": "Toolchains with deps in target mode", "body": "At the moment all the deps of a toolchain are evaluated in host mode.\r\nIt would be nice if toolchains could \"inject\" deps on target (for instance, the library that goes along with the generated source file produced by the toolchain) but there is no way to achieve this at the moment that works for cross compilation.\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "thunderfyc": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4068", "title": "Support Android NDK 16 in Bazel", "body": "At this moment, build with NDK 16 will cause fatal errors that \"stdlib.h\" \"wchar.h\", etc could not found,", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "BenTheElder": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4065", "title": "tools/build_defs/pkg:pkg_rpm silently depends on rpmbuild", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\n\r\nThe `pkg_rpm` seems to shell out to `rpmbuild` which is not entirely surprising, however I do not see this documented anywhere and the resulting errors are not obvious (see: https://github.com/kubernetes/test-infra/issues/5429)\r\n\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\nBuild a target using `pkg_rpm` on a system without `rpmbuild` installed.\r\n\r\n### Environment info\r\n* Operating System: Debian Jessie... Any OS without rpmbuild installed\r\n\r\n\r\n* Bazel version (output of `bazel info release`): release 0.7.0\r\n\r\n\r\n* If `bazel info release` returns \"development version\" or \"(@non-git)\", please tell us what source tree you compiled Bazel from; git commit hash is appreciated (`git rev-parse HEAD`):\r\n\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n\r\nhttps://github.com/bazelbuild/bazel/blob/9135b7bfc4245e16bd6599e22dce0ba077e0d10a/tools/build_defs/pkg/make_rpm.py#L170-L184\r\n\r\n\r\nSee: https://github.com/kubernetes/test-infra/issues/5429, https://github.com/kubernetes/kubernetes/issues/55437", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sghiaus": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4063", "title": "pkg_tar fails when src file name contains the '=' character", "body": "### Description of the problem / feature request / question:\r\n\r\nCannot build simple `pkg_tar` target when a file contains the `=` character, e.g. if the file is named `a=b`.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n```\r\nmkdir mydir\r\ntouch mydir/a=b\r\n\r\npkg_tar(\r\n    name = \"test-tar\",\r\n    extension = \"tar.gz\",\r\n    strip_prefix = \"/\",\r\n    package_dir = \"/home/user\",\r\n    srcs = glob([\"mydir/**/*\"]),\r\n    mode = \"0777\",\r\n)\r\n```\r\n\r\n### Environment info\r\n* Operating System:\r\nLinux x64, Ubuntu 14.04\r\n\r\n* Bazel version (output of `bazel info release`):\r\nrelease 0.7.0\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n```\r\n    with open(file_content, 'rb') as f:\r\nIOError: [Errno 2] No such file or directory: 'mydir/a'\r\nTarget //prebuilt:test-tar failed to build\r\n```\r\n\r\nThe `=` character is used as delimiter in `bazel-out/..../test-tar.args` which conflicts with the file name.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Capstan": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4061", "title": "Suggest label closed pull request with first release it's available in.", "body": "This is a suggestion to improve the release automation to make it very obvious when a given accepted pull request will be available by using labels to mark said pull requests. Specifically, it's a suggestion to do the following:\r\n\r\n1. Add a new label for release candidate, e.g., `in-candidate-0.8rc00`\r\n1. Apply said label to all closed pull requests that don't already have a relevant label that are in the release candidate.\r\n1. When the release is finalized, add a label for the release, e.g., `in-release-0.8`\r\n1. Replace the label of all `in-candidate-0.8*` with `in-release-0.8`\r\n1. Clean up dead `in-candidate-0.8*` labels.\r\n\r\nThis could similarly be applied to issues fixed by commits in the release.\r\n\r\nSome additional maintenance might be required, e.g., if a release is abandoned, may have to remove `in-candidate-` labels, or if a commit is later rolled-back, not sure how to have the system know not to apply that label.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jayconrod": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4057", "title": "cc_library warning: file has no symbols", "body": "### Description of the problem / feature request / question:\r\n\r\nOn macOS, if a source file in a static `cc_library` doesn't define any global symbols, we see a warning like the one below:\r\n\r\n```\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: bazel-out/darwin_x86_64-fastbuild/bin/libempty.a(empty.o) has no symbols\r\n```\r\n\r\nThis is a problem in rules_go. We use a tool in the Go toolchain (cgo) that generates some .c files that get compiled with `cc_library`. One of the generated files in each library frequently has no symbols, but it's hard to know ahead of time whether that's the case (the file is not empty).\r\n\r\nIt would be nice to suppress these warnings altogether. There may be a lot of libraries with cgo in a Go project, so our users may see a lot of warnings.\r\n\r\nIt looks like ranlib on macOS supports a flag `-no_warnings_for_no_symbols`. ar does not support this flag. The actual command that's emitting this warning looks like this: \r\n\r\n```\r\nexternal/local_config_cc/wrapped_ar rcs bazel-out/darwin_x86_64-fastbuild/bin/libempty.a bazel-out/darwin_x86_64-fastbuild/bin/_objs/empty/empty.o\r\n```\r\n\r\nMaybe this flag can be added in [wrapped_ar.tpl](https://github.com/bazelbuild/bazel/blob/837e1b3d4859140d29aaa6bbab8fbb008e6d701e/tools/osx/crosstool/wrapped_ar.tpl)?\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\n```\r\ncc_library(\r\n    name = \"empty\",\r\n    srcs = [\"empty.c\"],\r\n    linkstatic = 1,\r\n)\r\n```\r\n\r\nempty.c is an empty file. Note that there are additional warnings if the entire library has no symbols. Those warnings don't affect rules_go, but they should probably be suppressed, too.\r\n\r\n### Environment info\r\n* Operating System: macOS Sierra 10.12.6\r\n\r\n\r\n* Bazel version (output of `bazel info release`):  release 0.7.0\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "petemounce": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4049", "title": "Integrate chocolatey package publishing into release process", "body": "### Description of the problem / feature request / question:\r\n\r\nAt present, publishing the chocolatey package for Windows is a manual process\r\n\r\n0. hear about an RC or release\r\n0. run (on Windows)\r\n    ```powershell\r\n    pushd \"scripts/packages/chocolatey\"\r\n      ./build.ps1 -version <version> -mode <rc or release> -rc <rc number>\r\n      ./test.ps1 -version <version>\r\n      & choco.exe push # this assumes the secret for the chocolatey API key is present in the user's profile\r\n    popd\r\n    ```\r\n0. reply to the release ticket saying that the package has been pushed and the URL it's available from.\r\n\r\nI'd like to eliminate this manual process from the release.\r\n\r\n#### Dependencies:\r\n0. choco.exe - binary only available for Windows, but [apparently choco.exe can be compiled and run on Linux](https://github.com/chocolatey/choco#other-platforms). So, try that out.\r\n0. chocolatey API key secret - bazel team should sign up to chocolatey and I'll invite that account to become a package maintainer\r\n0. sha256 of the bazel zip file that the chocolatey package downloads and installs - so, access to either that file, or the release binaries directly to calculate that.\r\n0. actually verifying that the package installs on Windows\r\n\r\nHaving talked to @damienmg and @dslomov the simplest thing to do is to create a Dockerfile for a (ubuntu, probably) container that contains \r\n* the choco binary\r\n* the packaging script\r\n* the API key secret\r\n* the build output\r\n\r\nand then runs the steps (probably, rewritten into bash) to publish the package.\r\n\r\nSo, I'll have a go at this.\r\n\r\nI need to know where to put what I create - I'm going to assume within bazelbuild/continuous-integration somewhere?\r\n\r\nAlso note dependency (4) - this approach does not satisfy that requirement. Doing that would, I suppose, require shifting this left to become an artifact that is built and tested within CI, as opposed to just within the release process.\r\n\r\nI don't intend to address that within this work. Sounds like to do so we'd want to create some `pkg_chocolatey` rule akin to [deb and rpm](https://docs.bazel.build/versions/master/be/pkg.html).", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/78738042", "body": "@dslomov here is where I have declared a dependency on the msys2 package. I have another PR open to that package to update its contents from 20150916 to 2016latest (userzimmermann/choco-packages#4).\n\n[These are the nuspec docs for dependencies](https://docs.nuget.org/create/nuspec-reference#specifying-dependencies) - I have chosen to use the latest available versions of the dependencies that I'm aware of bazel having.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/78738042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/78738375", "body": "Done in 78c3b0e\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/78738375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/78740108", "body": "Done in c10c522\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/78740108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/78740219", "body": "Ok - taking no action. I don't feel like I know enough about the intended docs structure to make decisions about where to put which content.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/78740219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/78740280", "body": "My pleasure :)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/78740280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/78754089", "body": "Done in 642c535. If you'd prefer ZipArchive class usage instead of [compress-archive introducing powershell v5 dependency](https://technet.microsoft.com/en-us/library/dn841358%28v=wps.640%29.aspx), please supply an example? I searched but didn't find one before finding that.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/78754089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79173019", "body": "Done in 2169e25 and 1c44384\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79173019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79173102", "body": "Fixed in 9e4a6b5\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79173102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79173220", "body": "Fixed by 9e4a6b5\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79173220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79173580", "body": "Done & pushed.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79173580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79845614", "body": "Bad rebase, as you guessed. Fixed in 1014cd4.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79845614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79845715", "body": "Bad rebase, fixed by 1014cd4.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79845715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/83266459", "body": "It should be, but has not been published to the feed.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/83266459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/83548369", "body": "Done in 8b292e9. Good spot.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/83548369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/83726173", "body": "Apparently I messed up a rebase; done in 8620ac1.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/83726173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/83733350", "body": "Done in bffe94a.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/83733350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/83733372", "body": "Done in bffe94a.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/83733372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/85646922", "body": "Done in 12fd8aa.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/85646922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/86761991", "body": "That's true. I like this pattern more since it's more explicit, but I don't feel strongly.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/86761991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/87991854", "body": "Ah, then I'll close this as unnecessary.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/87991854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/89336158", "body": "Yes; excellent point! Done in 2a147e5.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/89336158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/104467529", "body": "By the way - these are removed because there's no 32-bit build. These not being present causes chocolatey to print a friendly error to a 32-bit user saying it's not possible to install this there.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/104467529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/105923004", "body": "These are unrelated drive-by fixes.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/105923004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/105923024", "body": "These are unrelated drive-by fixes.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/105923024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/105923338", "body": "`get-content` already returns an array of strings, but it sounds like #2671 problem is that powershell v2 treats them as `system.object` rather than `system.string`. Which is super nice.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/105923338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/106431175", "body": "@laszlocsomor - I'm going on trust that this is the version that you'd like to pin to. https://chocolatey.org/packages/msys2 lists the ones that are available.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/106431175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/106461847", "body": "You asked me to pin it to the precise version inside https://github.com/bazelbuild/bazel/issues/2449#issuecomment-278059161 on the basis that others didn't work for bazel (at the time). \r\n\r\nI haven't tested that assertion, and also haven't seen issues reported about bazel failures against later versions (there's `20160719.1.1`, and there are also later versions in the [moderation queue (this is a paged link)](https://chocolatey.org/packages?sortOrder=package-title&page=7&prerelease=False&moderatorQueue=True)).", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/106461847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/106625014", "body": "In that case, shall I simply back out this change (the version pin) as unnecessary?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/106625014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/106867272", "body": "Done.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/106867272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/111009101", "body": "That's idiomatic PowerShell null-coalescing, that is. Expressive, huh? :cry:\r\n\r\n\"Take the first item from the array that is not equal to null\".", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/111009101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/113579786", "body": "Done; good spot!", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/113579786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "AustinSchuh": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4047", "title": "Android rules can't use external repo for toolchain", "body": "Currently, we require developers to install a package with the SDK and NDK.  This makes upgrades almost impossible to version and track.\r\n\r\nI want to be able to tar up the SDK and NDK and point Bazel to them.  An external repo would be awesome and bazely.  A URL that the rules fetch from and unpack would also work.\r\n\r\nIt looks like we *might* be able to check the toolchains into our repo and it would work that way.  That would blow the size of our repo up in a way that's not scalable long term.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3911", "title": "Poor error with invalid CPU environment group", "body": "I have a BUILD file in //tools with the following in it.\r\n\r\n```\r\nenvironment(name = \"k8\")\r\nenvironment(name = \"armhf-debian\")\r\nenvironment(name = \"roborio\")\r\nenvironment(name = \"cortex-m4f\")\r\nenvironment_group(\r\n    name = \"cpus\",\r\n    environments = [\":k8\", \":roborio\", \":armhf-debian\", \":cortex-m4\"],\r\n    defaults = [\":k8\", \":roborio\", \":armhf-debian\"],\r\n)\r\n```\r\n\r\n(Notice the missing 'f' in the environments list).\r\n\r\nI get a pretty cryptic error\r\n\r\n```\r\n$ bazel test -c opt //... --experimental_auto_cpu_environment_group=//tools:cpus\r\nERROR: package contains errors: tools.\r\nERROR: error loading package 'tools': Package 'tools' contains errors.\r\nINFO: Elapsed time: 0.414s\r\nERROR: Couldn't start the build. Unable to run tests.\r\n```\r\n\r\nI would expect to see something saying that 'cortex-m4' isn't a valid target, or something so I don't have to guess and check.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3898", "title": "Poor errors when using CPU constraints", "body": "I've got a cc_binary marked with `restricted_to = [\"@//tools:armhf-debian\"]`\r\n\r\nWhen I build the package with that binary in it, I get the following error:\r\n```\r\naustin[114436] aschuh-debian-z620 (bazel-0.6.0) ~/local/repo/vehicle\r\n$ bazel build -c opt //vehicle/radio/... --cpu=k8 --verbose_failures\r\nINFO: Analysed 4 targets.\r\nINFO: Found 4 targets...\r\nINFO: Writing explanation of rebuilds to '/tmp/bazel_explain.log'\r\nTarget //vehicle/radio:mk5_files up-to-date (nothing to build)\r\nTarget //vehicle/radio:readme up-to-date:\r\n  bazel-bin/vehicle/radio/readme.native\r\nTarget //vehicle/radio:echo up-to-date:\r\n  bazel-bin/vehicle/radio/echo\r\nTarget //vehicle/radio:echo_arm_only failed to build\r\nTarget //vehicle/radio:echo_arm_only failed to build\r\nINFO: Elapsed time: 1.338s, Critical Path: 0.05s\r\nINFO: Build completed successfully, 1 total action\r\n```\r\n\r\nWhen I build up one folder, I get no error.\r\n\r\n```\r\naustin[114438] aschuh-debian-z620 (bazel-0.6.0) ~/local/peloton-tech/vehicle\r\n$ bazel build -c opt //vehicle/... --cpu=k8 --verbose_failures\r\nINFO: Analysed 2676 targets.\r\nINFO: Found 2676 targets...\r\nINFO: Writing explanation of rebuilds to '/tmp/bazel_explain.log'\r\nINFO: Elapsed time: 4.191s, Critical Path: 0.17s\r\nINFO: Build completed successfully, 2 total actions\r\n```", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xxlest": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4046", "title": "link  shared library which compiled by myself failed ", "body": "bazel version is 0.5.4,  system is ubuntu 16.04, I'm trying to use so file which i build ,but failed \r\n\r\nbuild file:\r\ncc_library(\r\n    name = \"hello-time\",\r\n    srcs = [\"hello-time.cc\"],\r\n    hdrs = [\"//main:hello-time.h\",\"//main:hello-greet.h\"],\r\n)\r\n\r\ncc_library(\r\n    name = \"hello-shared\",\r\n    srcs = [\"hello.so\"],\r\n    hdrs = [\"hello-greet.h\"],\r\n    visibility = [\"//visibility:public\"],\r\n)\r\n\r\ncc_binary(\r\n    name = \"hello-world\",\r\n    srcs = [\"hello-world.cc\"],\r\n    deps = [\r\n        \":hello-time\",\r\n        \"//main:hello-shared\",\r\n    ],\r\n)\r\n\r\nand i got error:   /usr/bin/ld.gold: error: cannot find -lhello\r\nactually  i have hello.so file in main folder, i confused for whole day. since i'm trying to modifed tesorflow serving for support  mxnet model, and want to load mxnet .so file.\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ronshapiro": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4038", "title": "Canonical naming for external repositories", "body": "There's a discrepancy within documentation on how to best name external repositories and common practice, and I think we should formalize this in order to make importing bazel projects as easy as possible.\r\n\r\nThe [WORKSPACE docs](https://docs.bazel.build/versions/master/be/workspace.html#maven_jar_name) recommend a way to name jars that are on maven. That's great, but it's often redundant, which has led to the naming proposal for [`java_import_external`](https://github.com/bazelbuild/bazel/blob/67c84b1036ad02ba2384fa75fb28e779a488f3d4/tools/build_defs/repo/java.bzl#L87). And yet others name things differently (for java libraries, perhaps the java package?). Furthermore, I don't believe there is any guidelines on any of the other workspace rules.\r\n\r\nConsistency is key, otherwise it becomes very difficult for projects to integrate two libraries that use the different conventions. This has come up recently as [Dagger](https://github.com/google/dagger) has been trying to integrate with [Kythe](https://github.com/google/kythe) and also get [rules_closure](https://github.com/bazelbuild/rules_closure) to use the defined Dagger bazel rules instead of downloading maven jars.\r\n\r\nI personally don't care much about what convention we select, I think there are tradeoffs to both, but I do think this is something that is worth documenting clearly. When a project is not in accordance with the convention, we need a good place to point them so that we can achieve consistency.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4038/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mjs-sx": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4037", "title": "External git repository fetch fails if output base is below a git directory", "body": "### Description of the problem / feature request / question:\r\n\r\nIf the Bazel output base is placed below a git repository, it will fail to fetch external git repositories when running `git clone`. This has come up a few times for us when users have $HOME/.git directories for managing personal rc files, and the default output base ($HOME/.cache/bazel/...) is used.\r\n\r\nThe affected code is here: https://github.com/bazelbuild/bazel/blob/master/tools/build_defs/repo/git.bzl#L30\r\n\r\nThis could be avoided by setting GIT_CEILING_DIRECTORIES, or at least erroring out if the execroot is below a git directory. Currently, git gives cryptic errors about being unable to clone.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n`bazel --output_user_root=/path/to/a/git/repo/bazel_outputs/ fetch //... `\r\n\r\n### Environment info\r\n* Operating System:\r\nUbuntu 16.04\r\n\r\n* Bazel version (output of `bazel info release`):\r\n0.7.0\r\n\r\n###  Have you found anything relevant by searching the web?\r\nI didn't find a similar error report here or on stack overflow.\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "michaelsafyan": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4025", "title": "git_repository should support Google Cloud Source Repositories", "body": "### Description of the problem / feature request / question:\r\n\r\nThe git_repository() rule doesn't work when authentication is involved. This is problematic for development using private repositories as hosted on Google Cloud. For example, if you develop purely within Google Cloud Shell and have multiple repositories within the same Google Cloud project, you cannot have one repository reference another via the git_repository() rule.\r\n\r\nIdeally, git_repository() would support Git's \"credential helper\" mechanism (as set via git config --global credential.helper) and would be able to work with Google Cloud Source Repositories via the credential helper supplied when installing the Google Cloud SDK (and would similarly work with any other repository provider that supplies a valid credential helper). Failing that, it would be ideal if the version of Bazel installed on Google Cloud Shell were to specially include some logic that would enable authorization with the Cloud Source repositories in the git_repository() rule.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\n1. Create a throw-away Google Cloud project.\r\n2. At \"console.cloud.google.com\", create a Cloud Source repository.\r\n3. In this repository, create a WORKSPACE, BUILD, and trivial rule (e.g. a cc_library\r\n    that exports some very simple C++ function that returns \"Hello, World\").\r\n4. Create another Cloud Source repository.\r\n5. In the second respository, create a WORKSPACE, BUILD, etc. rules. Create a\r\n    cc_binary that includes the functionality from the first library.\r\n6. In the \"WORKSPACE\" file of the second repository, try to create a \"git_repository\"\r\n    rule that references the URL of the first repository. That URL should look something\r\n    like \"https://source.developers.google.com/p/$PROJECT_ID/r/$REPOSITORY_NAME\"\r\n\r\nObserved:\r\nFails, because Cloud Source Repositories require authorization.\r\n\r\nExpected:\r\nShould succeed (at least while authenticated in this project).\r\n\r\n### Environment info\r\n* Operating System:\r\nGoogle Cloud Shell [custom debian-based VM]\r\n\r\n* Bazel version (output of `bazel info release`):\r\nrelease 0.7.0\r\n\r\n###  Have you found anything relevant by searching the web?\r\n(e.g. [StackOverflow answers](http://stackoverflow.com/questions/tagged/bazel),\r\n[GitHub issues](https://github.com/bazelbuild/bazel/issues),\r\nemail threads on the [`bazel-discuss`](https://groups.google.com/forum/#!forum/bazel-discuss) Google group)\r\n\r\nN/A\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n(If they are large, please upload as attachment or provide link).\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hhclam": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4022", "title": "Symlink to the binary created from a py_binary rule does not work", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\nI'm using Bazel version 0.7.0\r\n\r\nSay I have these files:\r\n$ cat BUILD\r\npy_binary(\r\n    name = \"test\",\r\n    srcs = [\"test.py\"]\r\n)\r\n\r\n$ cat test.py\r\nprint \"Hello world!\"\r\n\r\n$ bazel build :test\r\nINFO: Found 1 target...\r\nTarget //:test up-to-date:\r\n  bazel-bin/test\r\n\r\n$ bazel-bin/test\r\nHello world!\r\n\r\n$ ln -s bazel-bin/test bazel_link\r\n\r\n$ ./bazel_link\r\nTraceback (most recent call last):\r\n  File \"./bazel_link\", line 178, in <module>\r\n    Main()\r\n  File \"./bazel_link\", line 117, in Main\r\n    module_space = FindModuleSpace()\r\n  File \"./bazel_link\", line 91, in FindModuleSpace\r\n    sys.argv[0])\r\nAssertionError: Cannot find .runfiles directory for ./bazel_link\r\n\r\nThe problem is this line that does not consider the realpath of the argv[0].\r\nhttps://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/bazel/rules/python/python_stub_template.txt#L82", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3981", "title": "compile.sh fails with version 0.7.0", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem:\r\n\r\nI checked out Bazel 0.7.0 and ran compile.sh (Locally installed version is 0.5.2) and it fails at the bootstrap process.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\n# Builds  the tools needed to bootstrap\r\nbazel build third_party/protobuf:protoc\r\nbazel build third_party/grpc:grpc-java-plugin\r\n\r\n GRPC_JAVA_PLUGIN=bazel-bin/third_party/grpc/grpc-java-plugin PROTOC=bazel-bin/third_party/protobuf/3.4.0/protoc JAVA_HOME=/opt/ts/jdk.current-bcdbef6b5380344dc75df6a63065ba32c286a06b/ext/vendor/oracle/jdk/1/8/0/144/dist ./compile.sh\r\n\r\n\ud83c\udf43  Building Bazel from scratch.bazel-bin/third_party/protobuf/3.4.0/protoc -Isrc/main/protobuf/ -Isrc/main/java/com/google/devtools/build/lib/buildeventstream/proto/ --java_out=/tmp/bazel_MDiTfuUb/src --plugin=protoc-gen-grpc=bazel-bin/third_party/grpc/grpc-java-plugin --grpc_out=/tmp/bazel_MDiTfuUb/src src/main/java/com/google/devtools/build/lib/buildeventstream/proto/build_event_stream.proto\r\nsrc/main/protobuf/invocation_policy.proto: File not found.\r\nbuild_event_stream.proto: Import \"src/main/protobuf/invocation_policy.proto\" was not found or had errors.\r\nbuild_event_stream.proto:273:3: \"blaze.invocation_policy.InvocationPolicy\" is not defined.\r\n\r\n\r\n### Environment info\r\n* Operating System: Debian 7.8 (wheezy)\r\n\r\n\r\n* Bazel version (output of `bazel info release`):\r\n\r\nThe source version is 0.7.0 and locally installed version is 0.5.2.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sparkprime": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4021", "title": "Bazel build of trivial C++ fails if the workspace directory has a particular name:", "body": "### If possible, provide a minimal example to reproduce the problem:\r\n\r\n```\r\ndcunnin@dcunnin7:~$ git clone git@github.com:sparkprime/jsonnet\r\nCloning into 'jsonnet'...\r\nremote: Counting objects: 5348, done.\r\nremote: Compressing objects: 100% (159/159), done.\r\nremote: Total 5348 (delta 68), reused 170 (delta 34), pack-reused 5123\r\nReceiving objects: 100% (5348/5348), 13.98 MiB | 3.36 MiB/s, done.\r\nResolving deltas: 100% (3443/3443), done.\r\ndcunnin@dcunnin7:~$ cd jsonnet\r\ndcunnin@dcunnin7:~/jsonnet$ bazel build third_party/md5:all\r\n............\r\nINFO: Analysed target //third_party/md5:libmd5 (9 packages loaded).\r\nINFO: Found 1 target...\r\nERROR: /home/dcunnin/jsonnet/third_party/md5/BUILD:4:1: undeclared inclusion(s) in rule '//third_party/md5:libmd5':\r\nthis rule is missing dependency declarations for the following files included by 'third_party/md5/md5.cpp':\r\n  '/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h'\r\n  '/usr/lib/gcc/x86_64-linux-gnu/6/include/stdarg.h'\r\n  '/usr/lib/gcc/x86_64-linux-gnu/6/include/stdint.h'\r\nTarget //third_party/md5:libmd5 failed to build\r\nUse --verbose_failures to see the command lines of failed build steps.\r\nINFO: Elapsed time: 2.143s, Critical Path: 0.31s\r\nFAILED: Build did NOT complete successfully\r\ndcunnin@dcunnin7:~/jsonnet$ cd ..\r\n```\r\n\r\nHowever:\r\n\r\n```\r\ndcunnin@dcunnin7:~$ git clone git@github.com:sparkprime/jsonnet jsonnet2\r\nCloning into 'jsonnet2'...\r\nremote: Counting objects: 5348, done.\r\nremote: Compressing objects: 100% (159/159), done.\r\nremote: Total 5348 (delta 68), reused 170 (delta 34), pack-reused 5123\r\nReceiving objects: 100% (5348/5348), 13.98 MiB | 3.38 MiB/s, done.\r\nResolving deltas: 100% (3443/3443), done.\r\ndcunnin@dcunnin7:~$ cd jsonnet2/\r\ndcunnin@dcunnin7:~/jsonnet2$ bazel build third_party/md5:all\r\n............\r\nINFO: Analysed target //third_party/md5:libmd5 (9 packages loaded).\r\nINFO: Found 1 target...\r\nTarget //third_party/md5:libmd5 up-to-date:\r\n  bazel-bin/third_party/md5/liblibmd5.a\r\n  bazel-bin/third_party/md5/liblibmd5.so\r\nINFO: Elapsed time: 1.679s, Critical Path: 0.01s\r\nINFO: Build completed successfully, 1 total action\r\n```\r\n\r\n### Environment info\r\n* Operating System:\r\nDebian\r\n\r\n* Bazel version (output of `bazel info release`):\r\nrelease 0.7.0\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "endobson": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4016", "title": "Setting --cpu=k8 doesn't change output format (mac OS X)", "body": "When I compile with a different cpu I normally see the output path change, but I don't see that when I specify `--cpu=k8`. My understanding is that k8 is the default on linux, and thus it should generate elf object files instead of mach, but I don't see that nor do I see it change the output directory.\r\n\r\n```\r\nendobson@yggdrasil () ~/tmp/boringssl % ~/proj/bazel-release/bazel-0.7.0-dist/output/bazel info bazel-bin --cpu=armeabi-v7a                                                                                                               (0)\r\n/private/var/tmp/_bazel_endobson/f2aeada60c0436e7f3ea6491c9fc7f57/execroot/boringssl/bazel-out/stub_armeabi-v7a-fastbuild/bin\r\nendobson@yggdrasil () ~/tmp/boringssl % ~/proj/bazel-release/bazel-0.7.0-dist/output/bazel info bazel-bin --cpu=ios_x86_64                                                                                                                (0)\r\n/private/var/tmp/_bazel_endobson/f2aeada60c0436e7f3ea6491c9fc7f57/execroot/boringssl/bazel-out/ios_x86_64-fastbuild/bin\r\nendobson@yggdrasil () ~/tmp/boringssl % ~/proj/bazel-release/bazel-0.7.0-dist/output/bazel info bazel-bin                                                                                                                                 (0)\r\n/private/var/tmp/_bazel_endobson/f2aeada60c0436e7f3ea6491c9fc7f57/execroot/boringssl/bazel-out/darwin_x86_64-fastbuild/bin\r\nendobson@yggdrasil () ~/tmp/boringssl % ~/proj/bazel-release/bazel-0.7.0-dist/output/bazel info bazel-bin --cpu=k8                                                                                                                        (0)\r\n/private/var/tmp/_bazel_endobson/f2aeada60c0436e7f3ea6491c9fc7f57/execroot/boringssl/bazel-out/darwin_x86_64-fastbuild/bin\r\n```\r\n\r\nbazel  0.7, os X 10.11.6", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4006", "title": "native.repository_name() in the main repository returns \"@\" when it is documented as returning \"\"", "body": "Docs here:\r\nhttps://docs.bazel.build/versions/master/skylark/lib/native.html#repository_name\r\n\r\nWhen I run it in the main repostory and print it: `print(native.repository_name())`. I get the following output: \r\n```\r\nDEBUG: /private/var/tmp/_bazel_endobson/e36ff165f90c34e5ec103dfa2b4ef8e1/external/minimal_racket/racket.bzl:402:3: @\r\n```\r\n\r\nIt is unclear whether the current behavior or the documented behavior is what is desired.\r\n\r\nbazel version 0.6.1\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aacirino": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4014", "title": "Illegal instruction: 4 on macOS 10.11.6 El Capitan", "body": "Either installing with homebrew or downloading the binary I am not able to run bazel. My info:\r\n\r\nmacOS 10.11.6\r\nbazel 0.7.0\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "didzis": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4008", "title": "--action_env not forwarded through \"tools\" dependency", "body": "\r\n### Description of the problem:\r\n\r\nVariables set by `--action_env` are not forwarded through `tools` dependency of a rule. To generate test example, paste following lines into terminal:\r\n\r\n```shell\r\nmkdir test\r\ncd test\r\ntouch WORKSPACE\r\ntouch tool.sh\r\nchmod +x tool.sh\r\ncat > BUILD << EOF\r\ngenrule(\r\n    name = \"rule1\",\r\n    srcs = [],\r\n    outs = [\"out1.c\"],\r\n    cmd = \"bash -c 'echo RULE1:TESTVAR=\\$\\$TESTVAR'; exit 1\",\r\n)\r\n\r\nsh_binary(\r\n    name = \"tool\",\r\n    srcs = [\"tool.sh\"],\r\n    # srcs = [\":rule1\"],\r\n    data = [\":rule1\"],\r\n)\r\n\r\ngenrule(\r\n    name = \"rule2\",\r\n    srcs = [],\r\n    outs = [\"out2.c\"],\r\n    cmd = \"\",\r\n    tools = [\":tool\"],\r\n)\r\n\r\ngenrule(\r\n    name = \"rule3\",\r\n    srcs = [],\r\n    outs = [\"out3.c\"],\r\n    cmd = \"\",\r\n    tools = [\":rule1\"],\r\n)\r\n\r\ngenrule(\r\n    name = \"rule4\",\r\n    srcs = [\":rule1\"],\r\n    outs = [\"out4.c\"],\r\n    cmd = \"\",\r\n)\r\n\r\ncc_binary(\r\n    name = \"main\",\r\n    srcs = [\r\n        # \":rule1\",\r\n        # \":rule2\",\r\n        # \":rule3\",\r\n        # \":rule4\",\r\n    ],\r\n    data = [\r\n        # \":rule1\",\r\n        \":rule2\",\r\n        # \":rule3\",\r\n        # \":rule4\",\r\n        # \":tool\",\r\n    ],\r\n)\r\nEOF\r\nbazel build :main --action_env TESTVAR=hello\r\n```\r\noutputs\r\n```\r\nRULE1:TESTVAR=\r\n```\r\nhowever depending on what is uncommented, i.e., `\":rule1\",`, `\":rule2\",`, `\":rule3\",`, `\":rule4\",`, `\":tool\",` at the end of BUILD, bazel may output also\r\n```\r\nRULE1:TESTVAR=hello\r\n```\r\n`rule1` gives `RULE1:TESTVAR=hello` - rule1 is directly referenced\r\n`rule2` and `rule3` gives `RULE1:TESTVAR=` - rule1 is referenced via tools option\r\n`rule4` and `tool` again gives `RULE1:TESTVAR=hello` - rule1 is referenced via middleman\r\n\r\nIf the `rule1` is referenced from the \"_tool_\" and from another rule as a dependency, it may be randomly executed with different environment set for each run. Is this the expected behaviour?\r\n\r\nA consistent behaviour is obtained when exporting the environment variable into bazel environment, i.e.,\r\n```\r\nexport TESTVAR=\"hello world!\"\r\nbazel shutdown\r\nbazel build :main\r\n```\r\n\r\n_NOTE:_ in case there is a linking error, execute the last command (`bazel build ...`) once more.\r\n_NOTE2:_ if more than one rule dependency is uncommented, it may randomly output both results, execute multiple times to verify, e.g.,\r\n```shell\r\nfor i in 1 2 3 4 5; do bazel build :main --action_env TESTVAR=hello 2> /dev/null | grep TESTVAR ; done\r\n```\r\n\r\n### Environment info\r\n* Operating System: macOS, Linux\r\n\r\n\r\n* Bazel version: release 0.7.0, release 0.5.4\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3979", "title": "wrapped_clang does not correctly pass arguments to xcrunwrapper.sh", "body": "### Description of the bug:\r\n\r\nThe wrapped_clang scripts do not correctly pass arguments to xcrunwrapper.sh, i.e., the argument list `$@` must be quoted: `\"$@\"`.\r\n\r\nThe following two files have this issue present\r\n[tools/osx/crosstool/wrapped_clang.tpl](https://github.com/bazelbuild/bazel/blob/master/tools/osx/crosstool/wrapped_clang.tpl#L10)\r\n[tools/osx/crosstool/wrapped_clang_pp.tpl](https://github.com/bazelbuild/bazel/blob/master/tools/osx/crosstool/wrapped_clang_pp.tpl#L10)\r\nwhereas this file has the quoting in place\r\n[tools/osx/crosstool/wrapped_ar.tpl](https://github.com/bazelbuild/bazel/blob/master/tools/osx/crosstool/wrapped_ar.tpl#L18)\r\n\r\nThis does matter on some situations when there is a complicated command line option defined in `copts` for `cc_binary` rule that includes spaces, e.g., a define like `-DMESSAGE=\"Hello World!\"` will be split into two command line arguments no matter how the string is quoted.\r\n\r\nThis generally applies to macOS platform where clang is the default toolchain.\r\n\r\n### Environment info\r\n* Operating System: macOS\r\n\r\n* Bazel version: _master_ branch\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JonNRb": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4007", "title": "native.repository_name() throws", "body": "### Description of the problem / feature request / question:\r\n\r\n[native.repository_name()](https://docs.bazel.build/versions/master/skylark/lib/native.html#repository_name) throws an exception when used.\r\n\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n```bzl\r\ndef not_good_fn():\r\n  return native.repository_name()\r\n```\r\n\r\n### Environment info\r\n* Operating System: macOS High Sierra\r\n\r\n\r\n* Bazel version (output of `bazel info release`): `release 0.7.0-homebrew`\r\n\r\n\r\n```\r\nUnhandled exception thrown during build; message: Unrecoverable error while evaluating node 'PACKAGE:' (requested by nodes '//:avcodec')\r\nINFO: Elapsed time: 0.631s\r\njava.lang.RuntimeException: Unrecoverable error while evaluating node 'PACKAGE:' (requested by nodes '//:avcodec')\r\n\tat com.google.devtools.build.skyframe.AbstractParallelEvaluator$Evaluate.run(AbstractParallelEvaluator.java:413)\r\n\tat com.google.devtools.build.lib.concurrent.AbstractQueueVisitor$WrappedRunnable.run(AbstractQueueVisitor.java:352)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nCaused by: java.lang.NullPointerException\r\n\tat com.google.common.base.Preconditions.checkNotNull(Preconditions.java:770)\r\n\tat com.google.devtools.build.lib.util.Preconditions.checkNotNull(Preconditions.java:344)\r\n\tat com.google.devtools.build.lib.syntax.EvalUtils.getDataTypeName(EvalUtils.java:205)\r\n\tat com.google.devtools.build.lib.syntax.EvalUtils.getDataTypeName(EvalUtils.java:197)\r\n\tat com.google.devtools.build.lib.syntax.Type$ConversionException.message(Type.java:260)\r\n\tat com.google.devtools.build.lib.syntax.Type$ConversionException.<init>(Type.java:265)\r\n\tat com.google.devtools.build.lib.syntax.Type$StringType.convert(Type.java:419)\r\n\tat com.google.devtools.build.lib.syntax.Type$StringType.convert(Type.java:395)\r\n\tat com.google.devtools.build.lib.syntax.Type$ListType.convert(Type.java:595)\r\n\tat com.google.devtools.build.lib.syntax.Type$ListType.convert(Type.java:533)\r\n\tat com.google.devtools.build.lib.packages.BuildType.selectableConvert(BuildType.java:172)\r\n\tat com.google.devtools.build.lib.packages.RuleClass.convertFromBuildLangType(RuleClass.java:1825)\r\n\tat com.google.devtools.build.lib.packages.RuleClass.populateDefinedRuleAttributeValues(RuleClass.java:1529)\r\n\tat com.google.devtools.build.lib.packages.RuleClass.populateRuleAttributeValues(RuleClass.java:1486)\r\n\tat com.google.devtools.build.lib.packages.RuleClass.createRule(RuleClass.java:1434)\r\n\tat com.google.devtools.build.lib.packages.RuleFactory.createRule(RuleFactory.java:129)\r\n\tat com.google.devtools.build.lib.packages.RuleFactory.createAndAddRule(RuleFactory.java:175)\r\n\tat com.google.devtools.build.lib.packages.RuleFactory.createAndAddRule(RuleFactory.java:216)\r\n\tat com.google.devtools.build.lib.packages.PackageFactory.addRule(PackageFactory.java:1201)\r\n\tat com.google.devtools.build.lib.packages.PackageFactory.access$900(PackageFactory.java:96)\r\n\tat com.google.devtools.build.lib.packages.PackageFactory$9.invoke(PackageFactory.java:1242)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:497)\r\n\tat com.google.devtools.build.lib.syntax.BuiltinFunction.call(BuiltinFunction.java:166)\r\n\tat com.google.devtools.build.lib.syntax.BaseFunction.call(BaseFunction.java:428)\r\n\tat com.google.devtools.build.lib.syntax.FuncallExpression.callFunction(FuncallExpression.java:741)\r\n\tat com.google.devtools.build.lib.syntax.FuncallExpression.doEval(FuncallExpression.java:713)\r\n\tat com.google.devtools.build.lib.syntax.Expression.eval(Expression.java:65)\r\n\tat com.google.devtools.build.lib.syntax.Eval.execDispatch(Eval.java:196)\r\n\tat com.google.devtools.build.lib.syntax.Eval.exec(Eval.java:178)\r\n\tat com.google.devtools.build.lib.syntax.BuildFileAST.execTopLevelStatement(BuildFileAST.java:226)\r\n\tat com.google.devtools.build.lib.syntax.BuildFileAST.exec(BuildFileAST.java:199)\r\n\tat com.google.devtools.build.lib.packages.PackageFactory.evaluateBuildFile(PackageFactory.java:1688)\r\n\tat com.google.devtools.build.lib.packages.PackageFactory.createPackageFromPreprocessingAst(PackageFactory.java:1331)\r\n\tat com.google.devtools.build.lib.skyframe.PackageFunction.loadPackage(PackageFunction.java:1289)\r\n\tat com.google.devtools.build.lib.skyframe.PackageFunction.compute(PackageFunction.java:559)\r\n\tat com.google.devtools.build.skyframe.AbstractParallelEvaluator$Evaluate.run(AbstractParallelEvaluator.java:338)\r\n\t... 4 more\r\njava.lang.RuntimeException: Unrecoverable error while evaluating node 'PACKAGE:' (requested by nodes '//:avcodec')\r\n\tat com.google.devtools.build.skyframe.AbstractParallelEvaluator$Evaluate.run(AbstractParallelEvaluator.java:413)\r\n\tat com.google.devtools.build.lib.concurrent.AbstractQueueVisitor$WrappedRunnable.run(AbstractQueueVisitor.java:352)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nCaused by: java.lang.NullPointerException\r\n\tat com.google.common.base.Preconditions.checkNotNull(Preconditions.java:770)\r\n\tat com.google.devtools.build.lib.util.Preconditions.checkNotNull(Preconditions.java:344)\r\n\tat com.google.devtools.build.lib.syntax.EvalUtils.getDataTypeName(EvalUtils.java:205)\r\n\tat com.google.devtools.build.lib.syntax.EvalUtils.getDataTypeName(EvalUtils.java:197)\r\n\tat com.google.devtools.build.lib.syntax.Type$ConversionException.message(Type.java:260)\r\n\tat com.google.devtools.build.lib.syntax.Type$ConversionException.<init>(Type.java:265)\r\n\tat com.google.devtools.build.lib.syntax.Type$StringType.convert(Type.java:419)\r\n\tat com.google.devtools.build.lib.syntax.Type$StringType.convert(Type.java:395)\r\n\tat com.google.devtools.build.lib.syntax.Type$ListType.convert(Type.java:595)\r\n\tat com.google.devtools.build.lib.syntax.Type$ListType.convert(Type.java:533)\r\n\tat com.google.devtools.build.lib.packages.BuildType.selectableConvert(BuildType.java:172)\r\n\tat com.google.devtools.build.lib.packages.RuleClass.convertFromBuildLangType(RuleClass.java:1825)\r\n\tat com.google.devtools.build.lib.packages.RuleClass.populateDefinedRuleAttributeValues(RuleClass.java:1529)\r\n\tat com.google.devtools.build.lib.packages.RuleClass.populateRuleAttributeValues(RuleClass.java:1486)\r\n\tat com.google.devtools.build.lib.packages.RuleClass.createRule(RuleClass.java:1434)\r\n\tat com.google.devtools.build.lib.packages.RuleFactory.createRule(RuleFactory.java:129)\r\n\tat com.google.devtools.build.lib.packages.RuleFactory.createAndAddRule(RuleFactory.java:175)\r\n\tat com.google.devtools.build.lib.packages.RuleFactory.createAndAddRule(RuleFactory.java:216)\r\n\tat com.google.devtools.build.lib.packages.PackageFactory.addRule(PackageFactory.java:1201)\r\n\tat com.google.devtools.build.lib.packages.PackageFactory.access$900(PackageFactory.java:96)\r\n\tat com.google.devtools.build.lib.packages.PackageFactory$9.invoke(PackageFactory.java:1242)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:497)\r\n\tat com.google.devtools.build.lib.syntax.BuiltinFunction.call(BuiltinFunction.java:166)\r\n\tat com.google.devtools.build.lib.syntax.BaseFunction.call(BaseFunction.java:428)\r\n\tat com.google.devtools.build.lib.syntax.FuncallExpression.callFunction(FuncallExpression.java:741)\r\n\tat com.google.devtools.build.lib.syntax.FuncallExpression.doEval(FuncallExpression.java:713)\r\n\tat com.google.devtools.build.lib.syntax.Expression.eval(Expression.java:65)\r\n\tat com.google.devtools.build.lib.syntax.Eval.execDispatch(Eval.java:196)\r\n\tat com.google.devtools.build.lib.syntax.Eval.exec(Eval.java:178)\r\n\tat com.google.devtools.build.lib.syntax.BuildFileAST.execTopLevelStatement(BuildFileAST.java:226)\r\n\tat com.google.devtools.build.lib.syntax.BuildFileAST.exec(BuildFileAST.java:199)\r\n\tat com.google.devtools.build.lib.packages.PackageFactory.evaluateBuildFile(PackageFactory.java:1688)\r\n\tat com.google.devtools.build.lib.packages.PackageFactory.createPackageFromPreprocessingAst(PackageFactory.java:1331)\r\n\tat com.google.devtools.build.lib.skyframe.PackageFunction.loadPackage(PackageFunction.java:1289)\r\n\tat com.google.devtools.build.lib.skyframe.PackageFunction.compute(PackageFunction.java:559)\r\n\tat com.google.devtools.build.skyframe.AbstractParallelEvaluator$Evaluate.run(AbstractParallelEvaluator.java:338)\r\n\t... 4 more\r\n```", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brianretford": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4003", "title": "Building a DLL that contains no sources complains about the lack of an '.ifso' file.", "body": "### Description of the problem / feature request / question:\r\nBuilding a DLL that has only deps and no sources no longer works. (Say you want to bundle the same library into an .so and a .dll and have separate build rules). \r\nSpecifically it fails like this:\r\n```\r\nINFO: From Linking plaidml/plaidml.dll:\r\nLINK : warning LNK4044: unrecognized option '/lpthread'; ignored\r\nLINK : warning LNK4044: unrecognized option '/lpthread'; ignored\r\nERROR: C:/users/brian/plaidml/plaidml/BUILD:67:1: output 'plaidml/plaidml.ifso' was not created.\r\n```\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\nFor a build rule that looks like this:\r\n```\r\ncc_binary(\r\n    name = \"plaidml.dll\",\r\n    linkshared = 1,\r\n    deps = [\r\n        \":api\",\r\n    ],\r\n)\r\n```\r\n\r\nAdding a dummy source file that has at least one exported function solves the problem:\r\n```\r\ncc_binary(\r\n    name = \"plaidml.dll\",\r\n    linkshared = 1,\r\n    srcs = [\r\n        \"dummy.cc\"\r\n    ],\r\n    deps = [\r\n        \":api\",\r\n    ],\r\n)\r\n```\r\ndummy.cc:\r\n```\r\nextern \"C\" {\r\n__declspec(dllexport)void i_love_bazel_most_of_the_time(char *message) {}\r\n}\r\n```\r\n\r\n### Environment info\r\n* Operating System:\r\nWinders10\r\n\r\n* Bazel version (output of `bazel info release`):\r\n0.7.0\r\n\r\n###  Have you found anything relevant by searching the web?\r\nNope (tried though). I built the example dll and figured out what was different.\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\nSeems pretty straightforward.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nicolov": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3989", "title": "C++ rules link again when $PATH changes", "body": "Changing `$PATH` or `$LD_LIBRARY_PATH` in the client environment cause re-linking of all cc binaries. This also happens when `--experimental_strict_action_env=true`. The explain log says: *Effective client environment has changed, using..*. In any case, compilation does _not_ run again. Forcing `--action_env=PATH=...` does not seem to work either.\r\n\r\nMinimal reproduction case:\r\n\r\n```\r\n#/bin/bash\r\n\r\n# ./make_wkspace.sh\r\n# bazel build --experimental_strict_action_env=true //...\r\n# export PATH=$PATH:hello\r\n# bazel build --experimental_strict_action_env=true --explain=explain.log --verbose_explanations //...\r\n\r\ncat << EOF > WORKSPACE\r\nEOF\r\n\r\ncat << EOF > BUILD\r\ncc_binary(\r\n    name = \"my_test\",\r\n    srcs = [\"main.cpp\"],\r\n)\r\nEOF\r\n\r\ncat << EOF > main.cpp\r\n#include <iostream>\r\n\r\nint main() {\r\n    std::cout << \"Hello world!\\n\";\r\n}\r\nEOF\r\n```\r\n\r\nBazel 0.7.0 on Ubuntu 14.04\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ddwolf": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3988", "title": "[Windows] build failed with: \"must produce a single file\"", "body": "### Description of the problem / feature request / question:\r\n     I am building a project in windows, it failed with:\r\n    /c/msys64/tmp/_bazel_usera/9l56y845/external/bazel_tools/tools/jdk/BUILD:187:17: in singlejar attribute of java_toolchain rule @bazel_tools//tools/jdk:toolchain: '@bazel_tools//tools/jdk:singlejar' must produce a single file.\r\n\r\nwhile I can successfully build it in a linux VM, \r\n\r\n### Environment info\r\n* Operating System: Windows 7 Professional Service Pack 1\r\n\r\n* Bazel version (output of `bazel info release`): \r\n\r\nBuild label: 0.7.0- (@non-git)\r\nBuild target: bazel-out/msvc_x64-opt/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\r\nBuild time: Mon Oct 30 02:52:43 2017 (1509331963)\r\nBuild timestamp: 1509331963\r\nBuild timestamp as int: 1509331963\r\n\r\n\r\n* Source code are downloaded from bazel release 0.7 dist.zip file: [here](https://github.com/bazelbuild/bazel/releases/download/0.7.0/bazel-0.7.0-dist.zip)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "PoncinMatthieu": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3978", "title": "Option --check_tests_up_to_date doesn't work with Remote cache server", "body": "### Description of the bug:\r\nBazel option `--check_tests_up_to_date` doesn't work with the remote cache server.\r\nAlso there is no easy way to know if the tests were retrieved from the cache server or if they actually run.\r\nIs this a bug or an intended behavior? Is there any alternative?\r\n\r\n### Background to the question / context\r\nI have been trying to setup a remote cache server for setting up bazel with jenkins. We have a mono repo with multiple BUILD projects/libs and what I am trying to do is to setup a main jenkins pipeline which would run on every open pull requests and every commits to master. This main pipeline is checking if tests are up to date, if they are not, then we execute a downstream pipeline specific to the project requiring tests. The downstream pipeline run the tests and automatically deploy to staging/dev environments depending on the branch and project.\r\nWe need to use the remote cache server because we want the ability to run this pipeline in parallel for every PR. So that we can open 2 PRs at the same time and one doesn't need to wait for the other to run tests. Eventually this will be done from multiple jenkins nodes but for now we simply checkout the code in a different directory for each branches. \r\nThis setup works really well with a single server and single branch/workspace since we only need the local cache and the --check_tests_up_to_date works as expected. However this doesn't work when using the remote cache server.\r\n\r\n\r\n### Minimal example to reproduce the problem:\r\nConsider the following repository: https://github.com/dfabulich/hazelcast-junit-test\r\nFirst start the hazelcast server:\r\n```\r\njava -jar hazelcast-3.8.jar &\r\n```\r\nThen run the tests for the first time\r\n```\r\n$> bazel clean && bazel test :apptest --hazelcast_node=127.0.0.1:5701 --spawn_strategy=remote\r\nINFO: Starting clean (this may take a while). Consider using --async if the clean takes more than several minutes.\r\nINFO: Analysed target //:apptest (19 packages loaded).\r\nINFO: Found 1 test target...\r\nTarget //:apptest up-to-date:\r\n  bazel-bin/apptest.jar\r\n  bazel-bin/apptest\r\nINFO: Elapsed time: 14.457s, Critical Path: 12.08s\r\nINFO: Build completed successfully, 12 total actions\r\n//:apptest                                                               PASSED in 10.4s\r\n\r\nExecuted 1 out of 1 test: 1 test passes.\r\n```\r\nAll good: We can see that the tests take 10s seconds to execute (this is due to a sleep in the tests)\r\n\r\nThen we run the tests for a second time, but do a bazel clean to remove the local cache. Checking out the repo on a different path would do the same:\r\n```\r\n$> bazel clean && bazel test :apptest --hazelcast_node=127.0.0.1:5701 --spawn_strategy=remote\r\nINFO: Starting clean (this may take a while). Consider using --async if the clean takes more than several minutes.\r\nINFO: Analysed target //:apptest (19 packages loaded).\r\nINFO: Found 1 test target...\r\nTarget //:apptest up-to-date:\r\n  bazel-bin/apptest.jar\r\n  bazel-bin/apptest\r\nINFO: Elapsed time: 4.531s, Critical Path: 2.44s\r\nINFO: Build completed successfully, 12 total actions\r\n//:apptest                                                               PASSED in 0.0s\r\n\r\nExecuted 1 out of 1 test: 1 test passes.\r\n```\r\nGood but could be better: We can see that the tests passed but didn't actually run from the fact that tests took 0 seconds. However it doesn't show the usual string `(cached) PASSED`\r\n\r\nThen doing the same with the argument --check_tests_up_to_date:\r\n```\r\n$> bazel clean && bazel test :apptest --hazelcast_node=127.0.0.1:5701 --spawn_strategy=remote --check_tests_up_to_date\r\nINFO: Reading 'startup' options from /Users/ovelincompany/Projects/test/hazelcast-junit-test/tools/bazel.rc: --host_jvm_args=-Dbazel.DigestFunction=SHA1\r\nINFO: Reading 'startup' options from /Users/ovelincompany/.bazelrc: --host_jvm_args=-Dbazel.DigestFunction=SHA1\r\nINFO: Found 1 test target...\r\nERROR: action 'Expanding template apptest' is not up-to-date.\r\nERROR: action 'Creating source manifest for //:apptest' is not up-to-date.\r\nERROR: action 'BazelWorkspaceStatusAction stable-status.txt' is not up-to-date.\r\nTarget //:apptest failed to build\r\nUse --verbose_failures to see the command lines of failed build steps.\r\nINFO: Elapsed time: 0.986s, Critical Path: 0.00s\r\n//:apptest                                                            NO STATUS\r\n\r\nFinished with 0 passing and 0 failing tests up to date, 1 out of date.\r\n```\r\nNot good: bazel doesn't use the remote cache server and shows NO STATUS .. forcing us to rebuild/retest all of our apps.\r\n\r\n\r\n### Environment info\r\n* Operating System:\r\nLinux ubuntu\r\n\r\n* Bazel version (output of `bazel info release`):\r\nrelease 0.7.0\r\n\r\n###  Have you found anything relevant by searching the web?\r\nThis issue was useful for me to understand how the remote cache works: https://github.com/bazelbuild/bazel/issues/1413\r\n\r\n### Small note:\r\nOur actual project is mostly python code, but the behaviour is the same as for this java unit test.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ulfjack": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3977", "title": "C++ code fails to build with clang 4.0", "body": "On a Ubuntu 17.04 machine, with clang-4.0 installed, I get this error from Bazel for some straightforward C++ code:\r\n```\r\nthis rule is missing dependency declarations for the following files included by 'C-Source/something/other.c':\r\n  '/usr/lib/llvm-4.0/lib/clang/4.0.0/include/stdbool.h'\r\n  '/usr/lib/llvm-4.0/lib/clang/4.0.0/include/stdint.h'\r\n  '/usr/lib/llvm-4.0/lib/clang/4.0.0/include/stddef.h'\r\n```", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/d844e65ff333b1dc460ecb575c8ee42b670c54c4", "message": "Disable concurrent change detection\n\nRegress on #3360.\n\nWe have reports of Bazel outputting warnings for generated files, which I have been able to reproduce. Apparently, Bazel gets stuck with an old FileContentsProxy for generated files, and is unable to recover.\n\nPiperOrigin-RevId: 182772324"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/8896d2e211c57453359566c4520615c1c1f75b66", "message": "Prevent broken cache entries on concurrent file changes\n\nLocal execution has an inherent race condition: if a user modifies a file while an action is executed, then it is impossible for Bazel to tell which version of the file was actually read during action execution. The file may have been modified before or after the tool has read it, or, in the worst case, the tool may have read both the original and the modified version. In addition, the file may be changed back to the original state before Bazel can check the file, so computing the digest before / after may not be sufficient.\n\nThis is a concern for both local and remote caches, although the cost of poisoning a shared remote cache is significantly higher, and is what has triggered this work.\n\nFixes #3360.\n\nWe solve this by keeping a reference to the FileContentsProxy, and using that to check for modificaitons before storing the cache entry. We output a warning if this check fails.\n\nThis change does not increase memory consumption; Java objects are always allocated in multiples of 8 bytes, we use compressed oops, and the FileArtifactValue currently has 12 bytes worth of fields (excl. object overhead), so adding another pointer is effectively free.\n\nAs a possible performance optimization on purely local builds, we could also consider not computing digests at all, and only use the FileContentsProxy for caching.\n\nPiperOrigin-RevId: 182510358"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/225b57bfbb74a62a3212c7013ef92ce95ceaf79e", "message": "Remove EventBus from SkyframeActionExecutor\n\nPost to the Skyframe Environment instead.\n\nPiperOrigin-RevId: 182096559"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/0f6a539606e0dae28831b713e3e2c89f922bd74e", "message": "Mark tests that inherit BuildViewTestCase as small\n\nThe default is SMALL, and for better or worse, we mark BuildViewTestCase tests\nas small, and BuildIntegrationTestCase tests as medium.\n\nPiperOrigin-RevId: 181966013"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/146ff24aa89f3c5b0f0c0b1b0cfc4bc5640c0797", "message": "Remove some unnecessary deps\n\nChange-Id: Ib8dd9265b18fa0915f52427567845105fcdfa295\n\nCloses #4447.\n\nChange-Id: Ib8dd9265b18fa0915f52427567845105fcdfa295\nPiperOrigin-RevId: 181943004"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/e4794532730ce1df4072a23f9fd5209bcc2cb3e6", "message": "Make FileSymlinkException and InconsistentFSException IOExceptions\n\nMost places handle them the same way as IOException, which seems like a safe\ndefault. The places that do care can still throw or catch the more specific type.\n\nPiperOrigin-RevId: 181719688"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/1c59e78215f7beaa10229df48f483779ebad8217", "message": "Adjust semantics of Metadata interface, remove isFile (use getType)\n\nAfter some consideration, I think it makes sense to always allow a getDigest call, instead of specifying it as disallowed based on type. This is a follow-up CL for a previous CL introducing the getType method, which increased the complexity of the specification.\n\nI have a follow-up CL, which is related, namely unknown commit. After that CL, Metadata instances for directories (but not Filesets) also have digests rather than using mtime, which is compatible with the documentation changes made here. Said CL is solving a correctness issue with directory dependencies, which I think we want, and using the digest in the Metadata is a natural way to get correct action cache lookups.\n\nPiperOrigin-RevId: 181440548"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/31d3bdcc0d6b6d1cd3881fdf6cf40ca3330db057", "message": "Cleanup: move some tests {ArtifactFunction,FileArtifactValue}Test\n\nThese tests don't require a full Skyframe instance, so we might as well move\nthem to a lighter-weight test class. Also, it turns out that we have duplicate\ntests for equality and hashing - this is now explicit.\n\nPiperOrigin-RevId: 181285144"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/3e28868f63692b3a57a3d22a2dabc18395f24ceb", "message": "Use EmptyActionInput instead of null in SpawnInputExpander\n\nThis simplifies some spawn runners, which no longer have to specially handle\nnull; unfortunately, the sandbox runners do not support VirtualActionInput,\nso they still have to special-case it.\n\nPiperOrigin-RevId: 181175408"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/f7c98d30cb4c1e58de4a0a640563407d4a095b1a", "message": "Fix param names - this is going to be enforced with error prone\n\nPiperOrigin-RevId: 181162816"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/c686a971c0570537568cd1e2af0693d12b4782b7", "message": "Cleanup: remove use of LegacySkyKey for TargetCompletionKey\n\nPiperOrigin-RevId: 181141383"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/46194680", "body": "How about this?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/46194680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/58003349", "body": "We can't currently accept pull requests, I'm afraid. I've patched this into our internal repo.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/58003349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/64259271", "body": "We're unfortunately not yet setup to accept pull requests - we currently do all releases from an internal repository. Also, to contribute, you'll have to sign Google's CLA.\n\nhttps://cla.developers.google.com/about/google-individual\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/64259271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/64262831", "body": "Cool. I'll talk to the others on the team to see if we can prioritize our\nability to accept patches.\n\nOn Mon Nov 24 2014 at 9:34:46 PM Jake Wharton notifications@github.com\nwrote:\n\n> Ok. I have both an individual and corporate CLA signature (Square) in\n> place for the future.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/bazel/pull/8#issuecomment-64259520.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/64262831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/82596944", "body": "Uhm, works for me. I'm at a loss what could cause this. It seems like the most likely explanation is that the symbols aren't there. I'm using homebrew on this machine, so the output may look different:\n\n$ ls fromhost/\nBUILD       archive.h   archive_entry.h empty.c     libarchive.a\n\n$ ls -l fromhost/libarchive.a \n-r--r--r--  1 ulfjack  5000  965808 Mar 17 21:40 fromhost/libarchive.a\n\n$ nm fromhost/libarchive.a | grep \"_archive_read_close\"\n0000000000000ca1 T ___archive_read_close_filters\n0000000000002b88 S ___archive_read_close_filters.eh\n0000000000001d54 t __archive_read_close\n0000000000002f40 s __archive_read_close.eh\n                 U _archive_read_close\n                 U ___archive_read_close_filters\n0000000000000deb t __archive_read_close\n0000000000003298 s __archive_read_close.eh\n0000000000000044 T _archive_read_close\n00000000000004a8 S _archive_read_close.eh\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/82596944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86183886", "body": "The rules aren't quite compatible with the Mac tools - that's why we added\nthe empty.cc in a few places. I have an idea of how to change the rules to\nmake this go away, but the downside is that it would be technically\nincompatible with our internal rules. Alternatively, we could add wrappers\naround the Mac tools to make them handle that corner case in a way that's\ncompatible with the rules.\n\nOn Wed, Mar 25, 2015 at 8:20 PM Trevor Gray notifications@github.com\nwrote:\n\n> Yes. This was run from head with only modifying examples/cpp/BUILD.\n> \n> $ ls tools/cpp\n> BUILD       CROSSTOOL   empty.cc\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/bazel/issues/61#issuecomment-86180226.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86183886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86184850", "body": "To clarify - the Mac tools don't allow static libraries (and maybe this\nalso applies to dynamic libraries) which are empty - i.e. which don't\ncontain any object files, while the Linux tools typically allow this. The\nrules, however, have implicit .a and .so outputs which the rules\n'guarantee' to always be created, even for empty libraries (the rules can't\ndetermine during the loading phase if there are going to be .cc source\nfiles or not).\n\nOn Wed, Mar 25, 2015 at 8:30 PM Ulf Adams ulf@adams.info wrote:\n\n> The rules aren't quite compatible with the Mac tools - that's why we added\n> the empty.cc in a few places. I have an idea of how to change the rules to\n> make this go away, but the downside is that it would be technically\n> incompatible with our internal rules. Alternatively, we could add wrappers\n> around the Mac tools to make them handle that corner case in a way that's\n> compatible with the rules.\n> \n> On Wed, Mar 25, 2015 at 8:20 PM Trevor Gray notifications@github.com\n> wrote:\n> \n> > Yes. This was run from head with only modifying examples/cpp/BUILD.\n> > \n> > $ ls tools/cpp\n> > BUILD       CROSSTOOL   empty.cc\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/google/bazel/issues/61#issuecomment-86180226.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86184850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86833803", "body": "The last LTS has a broken gcc. I have a fix for that in the circleci branch.\n\nOn Friday, March 27, 2015, markchadwick notifications@github.com wrote:\n\n> Compiled bazel from source using ./compile.sh -- resulting binary\n> segfaults moments after starting.\n> \n> Ubuntu 12.04.5 LTS\n> java-8-oracle (from the PPA suggested here:\n> http://bazel.io/docs/install.html)\n> libc6 2.15-0ubuntu10.11\n> \n> To reproduce:\n> \n> $ git clone https://github.com/google/bazel\n> $ cd bazel\n> $ ./compile.sh\n> Compiling Java stubs for protocol buffers...\n> Compiling Bazel Java code...\n> Extracting helper classes for Bazel Java...\n> Creating libblaze.jar...\n> Compiling SingleJar tool code...\n> Extracting helper classes for SingleJar tool...\n> Creating SingleJar_deploy.jar...\n> Compiling JavaBuilder tool code...\n> Extracting helper classes for JavaBuilder tool...\n> Creating JavaBuilder_deploy.jar...\n> Compiling client .cc files...\n> Linking client...\n> Compiling ijar .cc files...\n> Linking ijar...\n> Compiling JNI libraries...\n> Linking libunix.so...\n> Compiling build-runfiles...\n> Compiling process-wrapper...\n> Compiling sandbox...\n> Creating Bazel self-extracting archive...\n> Creating objc helper tools...\n> Compiling actoolzip code...\n> Extracting helper classes for actoolzip...\n> Creating precomp_actoolzip_deploy.jar...\n> Compiling ibtoolzip code...\n> Extracting helper classes for ibtoolzip...\n> Creating precomp_ibtoolzip_deploy.jar...\n> Compiling momczip code...\n> Extracting helper classes for momczip...\n> Creating precomp_momczip_deploy.jar...\n> Compiling bundlemerge code...\n> Extracting helper classes for bundlemerge...\n> Creating precomp_bundlemerge_deploy.jar...\n> Compiling plmerge code...\n> Extracting helper classes for plmerge...\n> Creating precomp_plmerge_deploy.jar...\n> Compiling xcodegen code...\n> Extracting helper classes for xcodegen...\n> Creating precomp_xcodegen_deploy.jar...\n> Build successful! Binary is here: (...)/bazel/output/bazel\n> $ ./output/bazel\n> Extracting Bazel installation...\n> Segmentation fault (core dumped)\n> \n> Inspecting the core:\n> \n> $gdb ./output/bazel core\n> ...\n> warning: Can't read pathname for load map: Input/output error.\n> [Thread debugging using libthread_db enabled]\n> Using host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\n> \n> warning: no loadable sections found in added symbol-file system-supplied DSO at 0x7fffe23fe000\n> Core was generated by `./output/bazel'.\n> Program terminated with signal 11, Segmentation fault.\n> \n> (gdb) thread apply all where\n> Thread 1 (Thread 0x7f51dc60f740 (LWP 26482)):\n> #0  0x00007f51db7f7ec5 in ?? () from /lib/x86_64-linux-gnu/libc.so.6\n> #1  0x00007f51dc1bb842 in std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long) ()\n>    from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\n> #2  0x00007f51dc1bbf5c in std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\n> #3  0x0000000000404d86 in blaze::BlazeStartupOptions::GetJvm (this=0x1383100)\n>     at src/main/cpp/blaze_startup_options.cc:136\n> #4  0x000000000040f017 in blaze::VerifyJavaVersionAndGetJvm () at src/main/cpp/blaze.cc:443\n> #5  0x000000000040f434 in blaze::StartServer (socket=6) at src/main/cpp/blaze.cc:489\n> #6  0x000000000040fd47 in blaze::ConnectToServer (start=true) at src/main/cpp/blaze.cc:637\n> #7  0x0000000000411f87 in blaze::SendServerRequest () at src/main/cpp/blaze.cc:1150\n> #8  0x00000000004140be in blaze::main (argc=1, argv=0x7fffe22c7298) at src/main/cpp/blaze.cc:1687\n> #9  0x000000000041416b in main (argc=1, argv=0x7fffe22c7298) at src/main/cpp/blaze.cc:1694\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/bazel/issues/68.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86833803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87395274", "body": "I won't get to this before the middle of next week.\n\nOn Fri, Mar 27, 2015 at 11:36 AM lberki notifications@github.com wrote:\n\n> Assigning to ulfjack since he already has a fix.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/bazel/issues/68#issuecomment-86896651.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87395274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90527073", "body": "Han-Wen has a design proposal. We need the new rules to be (at least partially) compatible with our internal rules as we have cases where people use both the internal and external tools for the same code.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90527073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90531252", "body": "We can't use proto3 in Bazel right now, as the protos (and code) also need to work internally, where we're still using proto2 for various reasons (and we also need to ensure that the proto runtime and the compiler are updated in sync; we've seen incompatible changes in the past). If you want to use proto3 in your own project, you will probably have to compile the protocol compiler yourself.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90531252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90531352", "body": "If you have a more specific / bazel use case in mind, please reopen with more details.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90531352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90531857", "body": "We're still discussing how to best pull in dependencies from the local machine; keep in mind that you also need to distinguish between different platforms, and possible different locations on identical platforms (for example: you may have a custom compiled libz on your machine which you want to use, where the headers are in /opt/usr/include, rather than in /usr/include).\n\nFor now, changing your CROSSTOOL is the easiest workaround, but keep in mind that bazel will not trigger on changes to those files; it assumes that files are immutable.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90531857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90532252", "body": "Assigning to myself as I designed the original crosstool format. But any help is appreciated.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90532252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90659626", "body": "What about it? :-) I don't have any first-hand experience with it, but I\nthink it can be made to work.\n\nOn Tuesday, April 7, 2015, Ming Zhao notifications@github.com wrote:\n\n> What about \"-fno-omit-frame-pointer\"?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/bazel/issues/99#issuecomment-90614248.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90659626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91461946", "body": "Hanwen's change isn't live yet (sorry!).\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91461946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91475051", "body": "Should be live now.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91475051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91475472", "body": "This might be fixed now. I think the new protoc is fully statically linked, which avoids the glibc issue.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91475472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91694605", "body": "Sorry about that.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91694605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/10866369", "body": "Why do you want to package these additional files? I'd rather have less in the bazel binary than more. Also, it might be easier to use gerrit (easier for us to comment on changes).\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/10866369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/91164768", "body": "style: this should be four spaces indentation", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/91164768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/91164929", "body": "I would use present tense here:\r\n\"If specified, %product% asynchronously removes the entire working tree ...\"\r\n\r\nI realize that the other doc doesn't do that right now, and I think those should be changed as well.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/91164929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/91177449", "body": "Can you make this method static?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/91177449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/91177585", "body": "Can you make the string a bit more descriptive? Lukacs suggested 'workspace_root'.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/91177585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/91366453", "body": "Ok. How about \"Output tree\"? In the expunge case, we write \"Output base\", which also includes a bunch of other things. I suppose the distinction is a bit subtle, but I don't see any good way to explain it with two words.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/91366453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/95554505", "body": "Skylark can't do include scanning in any form or shape, so this is something Skylark rules cannot do right now. If you consider that 'cheating', then yes, it's cheating.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/95554505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/95554764", "body": "I think this is a no-op for locally installed toolchains on Linux. We need to check if this works with checked-in toolchains or not. I suspect it doesn't, and that we should always add the crosstool (i.e., remove the if above). The subsetting should still work, right? Even if not, subsetting the crosstool headers is probably not critical, unless someone modifies them all the time - is anyone doing that?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/95554764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/102972546", "body": "The info line may not be printed, but with -s, you should be guaranteed to see the mnemonic. Can you check for that instead?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/102972546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/103173618", "body": "My bad, I thought the output would look different. Merging.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/103173618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/103179324", "body": "Does it also reproduce with cc_library?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/103179324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/119332258", "body": "Done.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/119332258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/127195718", "body": "\"mktemp -t bazel\" actually fails on Linux. Also, I don't see why you'd need to run mktemp first. Why not run mktemp -t bazel.XXXXXXXX right away and not fall back?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/127195718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "htuch": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3971", "title": "Support --include_source_info in native proto_library", "body": "It's useful to be able to specify an optional inclusion of `source_code_info` in the proto descriptors generated by `proto_library`, for the purpose of documentation generation tools etc. I was working on an aspect that used the `proto_library` output descriptors, and this is stripped away. It's useful to strip by default, but it would be also good to have a param to `native.proto_library` that allows us to specify targets that provide the source code info.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3971/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3935", "title": "Defining a Skylark py_proto_library via proto_library", "body": "Given https://github.com/bazelbuild/bazel/issues/2626, I was wondering whether it would be possible to add a pure Skylark `py_proto_library` built on `proto_library`.\r\n\r\nI've played around with rules and had a look at how rules_go does this with toolchains (https://github.com/bazelbuild/rules_go/pull/803/files). These basically involve you maintaining an additional dependency tree (which `proto_library` is supposed to solve) and having your custom `py_proto_library` applied across this tree. The most promising approach to avoiding this seems to be to use aspects.\r\n\r\nIt's pretty clear how aspects could be used to invoke `protoc` to generate the `_pb2.py` files. What's less clear is how to use these outputs, which are unknown ahead of time and come from the `proto_library` transitive dep provider, in conjunction with the native `py_library` rule (I _think_ this is the sandwich problem?).\r\n\r\nAny guidance here from the Bazel proto or Python teams?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rtsai": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3961", "title": "bazel sandboxing is too narrow for compiler-selecting conditionally-compiled code", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\n\r\nWe use gcc to compile our project, and use an experimental_action_listener to implement clang-tidy checking of the code as it compiles.\r\n\r\nPart of our project uses boost (in source form, in our //third_party). Boost includes a \"[select_compiler_config.hpp](https://github.com/boostorg/config/blob/boost-1.60.0/include/boost/config/select_compiler_config.hpp)\" that checks for the compiler in use, and includes a compiler-specific header file (gcc.hpp, clang.hpp, etc.).\r\n\r\n* In 0.4.3, things were working\r\n* In 0.4.5, we needed to use strategy=standalone (see #2790)\r\n* In 0.7.0, we can remove strategy-standalone for builds that do not depend on boost\r\n\r\nFor the boost-dependent builds, I observe the following differences in behavior:\r\n\r\n* In 0.4.3, 5c346b5e4b6390e1d6c311b5361d6719/bazel-sandbox/3678643609906101330/execroot/foo/third_party/boost/libs/config is fully-populated with all header files.\r\n* In 0.7.0, the same directory contains only the files needed to build with gcc, and the clang-tidy check fails because clang.hpp is not present.\r\n\r\nI suspect the sandboxing code since 0.4.3 is improved to be more narrow and dependent only on files identified by some variant of gcc -M, which for a compiler-selecting header like Boost config.hpp would eliminate the files required for clang-tidy, causing things to fail.\r\n\r\nThe high-level feature request is a mechanism to enable clang-tidy as an action listener for compiler-dependent code when gcc is the compiler\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\nI will try to create one and update later.\r\n\r\n### Environment info\r\n* Operating System: Ubuntu 16.04.3 LTS\r\n* Bazel version (output of `bazel info release`): 0.7.0\r\n\r\n###  Have you found anything relevant by searching the web?\r\n(e.g. [StackOverflow answers](http://stackoverflow.com/questions/tagged/bazel),\r\n[GitHub issues](https://github.com/bazelbuild/bazel/issues),\r\nemail threads on the [`bazel-discuss`](https://groups.google.com/forum/#!forum/bazel-discuss) Google group)\r\n\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n(If they are large, please upload as attachment or provide link).\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ArigarasuthanRepo": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3948", "title": ".so file not generated in tensorflow", "body": "Iam trying to build .so file in tensorflow using bazel build tool.when i build the .so file iam getting following how can i solve this issue.\r\n\r\n**$ bazel build -c opt //tensorflow/contrib/android:libtensorflow_inference.so    --crosstool_top=//external:android/crosstool    --host_crosstool_top=@bazel_tools//tools/cpp:toolchain    --cpu=armeabi-v7a**\r\n_ERROR: C:/tools/msys64/tmp/_bazel_deemsys/28x4acs5/external/fft2d/BUILD.bazel:21:1: C++ compilation of rule '@fft2d//:fft2d' failed (Exit -1). Note: Remote connection/protocol failed with: execution failed.\r\nAction failed to execute: java.io.IOException: CreateProcess(): The system cannot find the file specified._\r\n\r\n____Building complete.\r\nTarget //tensorflow/contrib/android:libtensorflow_inference.so failed to build\r\nUse --verbose_failures to see the command lines of failed build steps.\r\n____Elapsed time: 2.181s, Critical Path: 0.01s\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zegl": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3947", "title": "No descriptive output when fetching git_repository", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\n\r\nNo descriptive output when fetching a large `git_repository` dependency.\r\n\r\nThe only output is:\r\n\r\n```\r\nINFO: Loading package:\r\n```\r\n\r\nSomething simple as displaying the dependency name or git remote would improve the experience a lot.\r\n\r\nWe are using the [skylark git](https://github.com/bazelbuild/bazel/blob/master/tools/build_defs/repo/git.bzl) implementation.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\n1. Add a large git repo as a dependency\r\n2. Build your project\r\n\r\n### Environment info\r\n* Operating System:\r\n\r\n`macOS Sierra (10.12.6)`\r\n\r\n* Bazel version (output of `bazel info release`):\r\n\r\n`release 0.7.0-homebrew`\r\n\r\n* If `bazel info release` returns \"development version\" or \"(@non-git)\", please tell us what source tree you compiled Bazel from; git commit hash is appreciated (`git rev-parse HEAD`):\r\n\r\n\r\n###  Have you found anything relevant by searching the web?\r\n(e.g. [StackOverflow answers](http://stackoverflow.com/questions/tagged/bazel),\r\n[GitHub issues](https://github.com/bazelbuild/bazel/issues),\r\nemail threads on the [`bazel-discuss`](https://groups.google.com/forum/#!forum/bazel-discuss) Google group)\r\n\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n(If they are large, please upload as attachment or provide link).\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "thassss": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3940", "title": "apple_binary.app.dSYM.temp.zip was not created", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\n\r\nHi I am exploring hazel to possibly use at my company.  I am unable to build simple Swift iOS app. I have an ios_application target that depends on a swift_library, which contains my AppDelegate and RootViewController. I tried to set this up similar to the tutorial, but haven't been able to get it working. It seems that it's breaking on zipping the dSYM.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\nMy small workspace directory is attached.\r\n\r\nthis works: `bazel build //app:bztest`\r\n\r\nthis doesn't: `bazel build --apple_generate_dsym=true //app:bztest`\r\n\r\nlog:\r\n```\r\nINFO: Found 1 target...\r\nERROR: /bztest/app/BUILD:13:1: output 'app/bztest.apple_binary.app.dSYM.temp.zip' was not created.\r\nERROR: /bztest/app/BUILD:13:1: not all outputs were created or valid.\r\nTarget //app:bztest failed to build\r\nUse --verbose_failures to see the command lines of failed build steps.\r\nINFO: Elapsed time: 5.175s, Critical Path: 3.07s\r\n```\r\n\r\n\r\n### Environment info\r\n* Operating System: macOS 10.13\r\n\u2022\u00a0Xcode: 9.0 \r\n\r\n\r\n* Bazel version (output of `bazel info release`): release 0.7.0-homebrew\r\n\r\n\r\n* If `bazel info release` returns \"development version\" or \"(@non-git)\", please tell us what source tree you compiled Bazel from; git commit hash is appreciated (`git rev-parse HEAD`):\r\n\r\n\r\n###  Have you found anything relevant by searching the web?\r\n(e.g. [StackOverflow answers](http://stackoverflow.com/questions/tagged/bazel),\r\n[GitHub issues](https://github.com/bazelbuild/bazel/issues),\r\nemail threads on the [`bazel-discuss`](https://groups.google.com/forum/#!forum/bazel-discuss\r\n[bztest.zip](https://github.com/bazelbuild/bazel/files/1403008/bztest.zip)\r\n) Google group)\r\n\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n(If they are large, please upload as attachment or provide link).\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cgrushko": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3922", "title": "Bazel lets me redefine a workspace rule, and then ignores the second definition", "body": "From CcProtoLibraryTest, I wrote the following WORKSPACE:\r\n\r\n```\r\nlocal_repository(name = 'com_google_protobuf', path = 'protobuf/')\r\nlocal_repository(name = 'bazel_tools', path = '/bazel_tools_workspace')\r\nlocal_repository(name = 'local_config_xcode', path = '/local_config_xcode')\r\nlocal_repository(name = 'com_google_protobuf', path = '/protobuf')\r\nbind(name = 'android/sdk', actual='@bazel_tools//tools/android:sdk')\r\nbind(name = 'tools/python', actual='//tools/python')\r\n```\r\n\r\nNotice the two conflicting definitions of `com_google_protobuf` - one takes `/protobuf/`, the other just `protobuf/`. \r\nIncredulously, I neither got an error, nor the second definition took precedence over the first. \r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3895", "title": "Publish Skylark tools: Buildifier, Buildozer, Skylint", "body": "For Buildifier, I think we should distribute it with Bazel itself, similarly to how Go includes `go fmt`. The more teams use Bazel, and the more teams generate BUILD files, the more important it gets.\r\n\r\n@damienmg proposes we have multiple packages that users choose from:\r\n\r\n1. `bazel` or `bazel-core` - includes Bazel only, for automated use-cases like CI.\r\n2. `bazel-dev` - includes everything a Bazel developer needs, such as Skylark tools.\r\n3. Possible: Bazel for Java, which includes https://github.com/johnynek/bazel-deps for Maven jar management.\r\n\r\nWe can also bundle the tools into the command-line installers (e.g., in the list in https://github.com/bazelbuild/bazel/releases/tag/0.6.1)\r\n\r\nCC @laurentlb @dslomov @davidstanke ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3895/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85640371", "body": "I probably posted this prematurely, but basically, I'd like to answer a question that's going to come up often: \"why should I try Bazel? what does it give me that I don't get from Gradle or xcodebuild?\"\n\nA single build-system which builds my iOS app, my backend (written in Java) and my Android app sounds like an awesome advantage, and I wish we could showcase it :)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85640371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85731110", "body": "My `cc_library`-knowledge is rusty, so I might be wrong, but -\n\n###Case 1\n\nIf you have one BUILD file in `.`, you can just reference the sub-directories like this:\n\n```\ncc_library(\n  name = \"foo\",\n  srcs = [\"foopath/foo.cpp\"],\n  hdrs = [\"barpath/bar.h\"],\n)\n```\n\nIf you have two BUILD files, one in `foopath/` and the other in `barpath/`, you can do something like\n\n```\ncc_library(\n  name = \"foo\",\n  srcs = [\"foo.cpp\"],\n  deps = [\"//root/to/barpath:bar\"],\n)\n```\n\n`//root/to/barpath:bar` must be a `cc_library`, which must have a `srcs` attribute.\n\n###Case 2\n\nYou can include more than one header,\n\n```\ncc_library(\n  name = \"foo\",\n  srcs = [\"foopath/foo.cpp\"],\n  hdrs = [\"barpath/bar1.h\", \"barpath/bar2.h\"],\n)\n```\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85731110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "benvanik": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3921", "title": "--test_env=LD_LIBRARY_PATH not passed to tests on MacOS", "body": "I need to manipulate the LD_LIBRARY_PATH used by my test binaries. I tried using --test_env=LD_LIBRARY_PATH and --test_env=LD_LIBRARY_PATH=foo and neither were set in the environment when running the tests. Nor are DYLD_LIBRARY_PATH and most other DYLD_* values. Arbitrary other environment variables are correctly passed (--test_env=FOO=1, etc).\r\n\r\nI can't seem to find any code in bazel that is explicitly stripping these, but perhaps I'm missing something. Why is this happening? The docs state that --test_env can be used for this kind of stuff (explicitly listing --test_env=PATH as an example) - why would LD_LIBRARY_PATH be special?\r\n\r\nI was able to confirm this with the following:\r\n```\r\nsh_binary(name = \"runner\", srcs = [\"runner.sh\"])\r\nsh_test(name = \"dummy\", srcs=[\"runner.sh\"])\r\n```\r\n```\r\n#!/bin/bash\r\nexport\r\necho $LD_LIBRARY_PATH\r\n```\r\n```\r\n$ blaze test :dummy --test_env=LD_LIBRARY_PATH=/foo --test_env=FOO=1 --run_under=:runner\r\n```\r\n\r\nOutput:\r\n```\r\n...\r\ndeclare -x FOO=\"1\"\r\n...\r\n```\r\nLD_LIBRARY_PATH is nowhere in that list and the value is empty.\r\n\r\n```\r\n$ bazel version\r\nBuild label: 0.6.1-homebrew\r\nBuild target: bazel-out/darwin_x86_64-opt/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\r\nBuild time: Fri Oct 6 02:36:58 2017 (1507257418)\r\nBuild timestamp: 1507257418\r\nBuild timestamp as int: 1507257418\r\n```", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tianzhi0549": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3905", "title": "[Document Issue] What does \"//:target-name\" stand for?", "body": "### Description of the problem / feature request / question:\r\nHi, in the official document, it is said //:target-name means `referencing targets within the same package`. You could find it at https://docs.bazel.build/versions/master/tutorial/cpp.html#use-labels-to-reference-targets. However, according to my tries, it should refer to the targets in the root directory of a WORKSPACE. Therefore, I think it's wrong in the official document. Additionally, the another part of the official document, it is said it refers to the targets in the root directory. https://docs.bazel.build/versions/master/build-ref.html#package-names-package-name.\r\n\r\nHope you can fix it if I'm right:-). Thank you.\r\n\r\n### Environment info\r\n* Operating System:\r\nUbuntu 14.04\r\n\r\n* Bazel version (output of `bazel info release`):\r\nbazel release 0.6.1\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Reflexe": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3901", "title": "[I think that] repository_ctx.path(Label) should be able to resolve directories too", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\n1. The `repository_ctx.path` function throws error when it gets a directory `Label`. However, it has no problem with other `Label`-s.\r\n\r\n    The source of the problem is in [this](https://github.com/bazelbuild/bazel/blob/0204bccf95dfaa01d15c21ffe9a64d04c5a6bf61/src/main/java/com/google/devtools/build/lib/bazel/repository/skylark/SkylarkRepositoryContext.java#L734) condition that makes sure `path` is a regular file.\r\n\r\n    To bypass this restriction I ended up giving it a `BUILD` file inside of the required directory and then calling `path.dirname` to resolve the requested `path` (ugly hack).\r\n\r\n     If it was intentional, I would be happy to learn way (except if the reason is to restrict the overpowered `repository_rule`).\r\n\r\n2. The problem also occur when I tried to give a `repository_rule` an `attr.Label` with a directory.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n```python\r\ndef _impl(repository_ctx):\r\n     # Problem #1\r\n    repository_ctx.path(Label(\"//:directory\"))\r\n\r\nrepo_rule = repository_rule(_impl, \r\n    attrs = {  \r\n        # Problem #2\r\n        'label': attr.label(default=Label(\"//:directory\")) ,\r\n    },\r\n)\r\n```\r\n\r\n### Environment info\r\n* Operating System: Linux, ArchLinux.\r\n\r\n\r\n* Bazel version (output of `bazel info release`): 0.6.1\r\n\r\n\r\n* If `bazel info release` returns \"development version\" or \"(@non-git)\", please tell us what source tree you compiled Bazel from; git commit hash is appreciated (`git rev-parse HEAD`): The archlinux official package.\r\n\r\n\r\n###  Have you found anything relevant by searching the web?\r\nUnfortunately, not.\r\n\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n(If they are large, please upload as attachment or provide link).\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yilei": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3892", "title": "Confusing error message when a custom repository_rule fails", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\n\r\nWhen a custom repository_rule fails, bazel displays something like:\r\n\r\n`ERROR: /path/to/BUILD:1:1: no such package '@my_custom_repository//':`\r\n\r\nThe `no such package` part is very confusing, because there *is* such package, just it *fails*.\r\n\r\nSomething like `error loading package` will be much more clear?\r\n\r\nI spent an afternoon trying to figure out why my custom repository rule implementation function isn't executed because I thought `no such package` means it cannot find the package that is supposed to be provided by the custom repository rule. Then I finally realized that the function is indeed executed, it just fails.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\n./WORKSPACE:\r\n\r\n```\r\nload(\"//:custom_repository.bzl\", \"custom_repository\")\r\n\r\ncustom_repository(name=\"my_custom_repository\")\r\n```\r\n\r\n./custom_repository.bzl:\r\n\r\n```\r\ndef _custom_repository_impl(repository_ctx):\r\n  fail(\"...\")\r\n\r\ncustom_repository = repository_rule(\r\n    implementation = _custom_repository_impl,\r\n)\r\n```\r\n\r\n./BUILD:\r\n\r\n```\r\ncc_library(\r\n    name = \"shim\",\r\n    deps = [\"@my_custom_repository//:lib\"],\r\n)\r\n```\r\n\r\nRun `bazel build :shim`, it produces something like:\r\n\r\n`ERROR: /path/to/BUILD:1:1: no such package '@my_custom_repository//': ... and referenced by '//:shim'.`\r\n\r\n### Environment info\r\n* Operating System:\r\nmacOS 10.12.6\r\n\r\n* Bazel version (output of `bazel info release`):\r\nrelease 0.6.1-homebrew\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3892/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MarkusTeufelberger": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3890", "title": "[skylark] add repository_ctx.tar", "body": "### Description of the problem / feature request / question:\r\n\r\nRepository_ctx:\r\nhttps://docs.bazel.build/versions/master/skylark/lib/repository_ctx.html\r\n\r\nI'd like to create a tarball of one or several files in a repository_ctx context when writing a custom function in skylark. Probably using similar syntax to the native pkg_tar rule (https://docs.bazel.build/versions/master/be/pkg.html#pkg_tar). Currently it would be possible to run an `repository_ctx.execute` function with `tar` in it somehow, but then it would rely on tar being available on the host, might have issues with reproducibility and so on.\r\n\r\n### Environment info\r\n* Operating System:\r\nAny\r\n\r\n* Bazel version (output of `bazel info release`):\r\n0.6.1\r\n\r\n###  Have you found anything relevant by searching the web?\r\n(e.g. [StackOverflow answers](http://stackoverflow.com/questions/tagged/bazel),\r\n[GitHub issues](https://github.com/bazelbuild/bazel/issues),\r\nemail threads on the [`bazel-discuss`](https://groups.google.com/forum/#!forum/bazel-discuss) Google group)\r\n\r\nNot really, https://github.com/bazelbuild/bazel/issues/893 seems to be the meta-issue that introduced repository_ctx and its features.\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "davidstanke": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3885", "title": "Support WORKSPACE.bazel as alias for WORKSPACE", "body": "We support naming the BUILD file \"BUILD.bazel\"... for consistency, let's add support for WORKSPACE.bazel, too.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3885/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "eustas": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3881", "title": "Windows: \"data\" dependencies does not link to \".runfiles\"", "body": "### If possible, provide a minimal example to reproduce the problem:\r\n`BUILD` file:\r\n```\r\nfilegroup(\r\n    name = \"some_data\",\r\n    srcs = [\"some_data.txt\"],\r\n)\r\njava_test(\r\n    name = \"SomeDataTest\",\r\n    srcs = [\"SomeDataTest.java\"],\r\n    data = [\":some_data\"],\r\n    jvm_flags = [\"-DSOME_DATA=$(location :some_data)\"],\r\n    deps = [\"@junit_junit//jar\"],\r\n)\r\n```\r\n\r\nResult: `SomeDataTest` can't read file at `System.getProperty(\"SOME_DATA\")`\r\nPath looks OK, but there is no corresponding file in `.runfiles`.\r\n\r\n### Environment info\r\n* Operating System:\r\nFails on Windows\r\nWorks fine on OSX, Linux\r\n\r\n* Bazel version (output of `bazel info release`):\r\n0.6.1 windows binary distro\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "likan999": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3879", "title": "Can't build usable install scripts for 32-bit Linux", "body": "### Description of the problem / feature request / question:\r\nThere is no 32-bit installer in the release page, while there is problem building a usable installer on 32-bit OS from sources.\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\n1. Install prerequisistes listed on [bazel doc](https://docs.bazel.build/versions/master/install-compile-source.html#compile-bazel-from-source);\r\n2. Download bazel-0.6.0-dist.zip from release page;\r\n3. Unzip and run `./compile.sh`, it fails with\r\n```\r\n./src/tools/singlejar/mapped_file.h:40:2: error: #error This code for 64 bit Unix.                                                                                    \r\n #error This code for 64 bit Unix.                                                                                                                                    \r\n```\r\n4. Following instructions on [this comment](https://github.com/bazelbuild/bazel/issues/3643#issuecomment-326043355): replacing `\"//src/tools/singlejar:singlejar\"` with `\"//src/java_tools/singlejar:SingleJar_deploy.jar\"`.\r\n5. `./compile.sh` succeeds, but the resulting `bazel` can't be used to build `scripts/packages:with-jdk/install.sh`:\r\n```\r\n[xyz@xyz-mac-fc-x86 bazel]$ output/bazel build scripts/packages:with-jdk/install.sh                                                                               \r\nExtracting Bazel installation...         \r\n...........                              \r\nERROR: /home/xyz/.cache/bazel/_bazel_xyz/97cdd804d556cb3de47debcf86f945f6/external/bazel_tools/tools/jdk/BUILD:187:17: in singlejar attribute of java_toolchain rule @bazel_tools//tools/jdk:toolchain: '@bazel_tools//tools/jdk:singlejar' must produce a single file.                                                                 \r\nERROR: Analysis of target '//scripts/packages:with-jdk/install.sh' failed; build aborted.                                                                             \r\nINFO: Elapsed time: 2.894s    \r\n```\r\n6. Revert changes in 4, and follow another [comment](https://github.com/bazelbuild/bazel/issues/3643#issuecomment-326165404) in the same issue: deleting the line `#error This code for 64 bit Unix`;\r\n7. `./compile.sh` succeeds, and `output/bazel build //scripts/packages:with-jdk/install.sh` also succeeds, but the resulting `install.sh` fails to execute. The root cause is the generated java toolchain is 64-bits, therefore can't run on 32-bit system:\r\n```\r\n[xyz@xyz-mac-fc-x86 bazel]$ bazel-bin/scripts/packages/with-jdk/install.sh --user\r\nBazel installer\r\n---------------\r\n\r\nBazel is bundled with software licensed under the GPLv2 with Classpath exception.\r\nYou can find the sources next to the installer on our release page:\r\n   https://github.com/bazelbuild/bazel/releases\r\n\r\n# Binary package at HEAD (@)\r\n   - [Commit](https://github.com/bazelbuild/bazel/commit/)\r\nUncompressing......Java version not detected while at least 1.8 is needed.\r\nPlease set JAVA_HOME.\r\n[xyz@xyz-mac-fc-x86 bazel]$ /home/xyz/.cache/bazel/_bazel_xyz/install/6358169ca9a2dc5154b3959c34d0533b/_embedded_binaries/embedded_tools/jdk/bin/javac -version                                        \r\n-bash: /home/xyz/.cache/bazel/_bazel_xyz/install/6358169ca9a2dc5154b3959c34d0533b/_embedded_binaries/embedded_tools/jdk/bin/javac: cannot execute binary file: Exec format error                           \r\n[xyz@xyz-mac-fc-x86 bazel]$ readelf -h /home/xyz/.cache/bazel/_bazel_xyz/install/6358169ca9a2dc5154b3959c34d0533b/_embedded_binaries/embedded_tools/jdk/bin/javac\r\nELF Header:\r\n  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 \r\n  Class:                             ELF64\r\n  Data:                              2's complement, little endian\r\n  Version:                           1 (current)\r\n  OS/ABI:                            UNIX - System V\r\n  ABI Version:                       0\r\n  Type:                              EXEC (Executable file)\r\n  Machine:                           Advanced Micro Devices X86-64\r\n  Version:                           0x1\r\n  Entry point address:               0x400530\r\n  Start of program headers:          64 (bytes into file)\r\n  Start of section headers:          3312 (bytes into file)\r\n  Flags:                             0x0\r\n  Size of this header:               64 (bytes)\r\n  Size of program headers:           56 (bytes)\r\n  Number of program headers:         8\r\n  Size of section headers:           64 (bytes)\r\n  Number of section headers:         34\r\n  Section header string table index: 31\r\n\r\n```\r\n\r\n\r\n### Environment info\r\n* Operating System:\r\nFails both on 32-bit Ubuntu 17.10 and Fedora 26.\r\n\r\n* Bazel version (output of `bazel info release`):\r\nbazel-0.6.0-dist.zip\r\n\r\n###  Have you found anything relevant by searching the web?\r\nhttps://github.com/bazelbuild/bazel/issues/3643", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3879/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kevinburke": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3877", "title": "interesting SHELL environment variable can lead to misleading log messages", "body": "If I set the SHELL environment variable to `/bin/bash -o pipefail`, Bazel reports that the command I tried to run was `-o`. I'm using the latest version of Bazel, 0.6.1, though I was able to reproduce this on 0.5.4 as well. You can probably reproduce it by setting `remote_rest_cache` to some hostname that rejects connections or returns errors.\r\n\r\n```\r\n[2017-10-09 17:27:11.318684] ERROR: /home/travis/.cache/bazel/_bazel_travis/10212575102b38e278b4bbd4cd4fa80b/external/io_bazel_rules_go/go/tools/builders/BUILD:38:1: error executing shell command: '-o' failed: Error in remote cache/executor: GET failed with status code 500\r\n```\r\n\r\nSee for example https://travis-ci.org/kevinburke/nacl/builds/285701473, which runs `make ci` on the github.com/kevinburke/nacl project.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jackwootton": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3876", "title": "Package is of bad quality", "body": "Please provide the following information. The more we know about your system and use case, the more easily and likely we can help.\r\n\r\n### Description of the problem / feature request / question:\r\n\r\nWhen installing latest  release `bazel_0.6.1-linux-x86_64.deb`, Ubuntu Software Center reports\r\n\r\n> The installation of a package which violates the quality standards isn't allowed. This could cause serious problems on your computer. Please contact the person or organisation who provided this package file and include the details beneath.\r\n\r\n```\r\n**Lintian check results for /usr/local/google/home/jackwootton/Downloads/bazel_0.6.1-linux-x86_64.deb:\r\nE: bazel: package-contains-ancient-file etc/ 1970-01-01\r\nE: bazel: package-contains-ancient-file etc/bash_completion.d/ 1970-01-01\r\nE: bazel: package-contains-ancient-file etc/bash_completion.d/bazel 1970-01-01\r\nE: bazel: package-contains-ancient-file etc/bazel.bazelrc 1970-01-01\r\nE: bazel: package-contains-ancient-file usr/ 1970-01-01\r\nE: bazel: package-contains-ancient-file usr/bin/ 1970-01-01\r\nE: bazel: package-contains-ancient-file usr/bin/bazel 1970-01-01\r\nE: bazel: package-contains-ancient-file usr/bin/bazel-real 1970-01-01**\r\n_If asking a question or requesting a feature, also tell us about the underlying problem you're trying to solve._\r\n```\r\n\r\n\r\n### If possible, provide a minimal example to reproduce the problem:\r\n\r\n\r\n### Environment info\r\n* Operating System: Ubuntu 14.04 Trust (x86-64)\r\n* Linux Kernel: 4.4.0-96-generic\r\n\r\n\r\n* Bazel version (output of `bazel info release`):\r\n`release 0.5.2`\r\n\r\n* If `bazel info release` returns \"development version\" or \"(@non-git)\", please tell us what source tree you compiled Bazel from; git commit hash is appreciated (`git rev-parse HEAD`):\r\n\r\n\r\n###  Have you found anything relevant by searching the web?\r\n(e.g. [StackOverflow answers](http://stackoverflow.com/questions/tagged/bazel),\r\n[GitHub issues](https://github.com/bazelbuild/bazel/issues),\r\nemail threads on the [`bazel-discuss`](https://groups.google.com/forum/#!forum/bazel-discuss) Google group)\r\n\r\n\r\n### Anything else, information or logs or outputs that would be helpful?\r\n(If they are large, please upload as attachment or provide link).\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3876/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tomazos": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3875", "title": "bazel, distcc and remote execution?", "body": "We are currently using bazel with distcc on a 300 package, 900 target (mostly C++), 35000 action WORKSPACE - and a full build takes 10 mins (profile included below).  (If we switch off distcc and compile locally, a full build takes 60 mins) We have achieved this by writing a CROSSTOOL file that references a gcc wrapper script that forwards the arguments to distcc gcc, and then placed the following:\r\n\r\n```\r\nbuild --jobs=600\r\nbuild --local_resources=\"15000,30,10\"\r\n```\r\n\r\nin our bazelrc.  The problem is that, at this level of parallelism, while great for the C++ compilation steps, is bad for the other non C++ compilation steps, like for example C++ linking, test execution and so on - because they run locally.  Frankly, it feels like a bit of a hack.\r\n\r\nIs it the intention that the remote execution feature of bazel will eventually replace distcc and be as performant as it?\r\n\r\nCurrently we have a set of dedicated machines running distcc servers, and then these are listed in the DISTCC_HOSTS environment variable - so when bazel calls distcc gcc it will connect to a random one of the available servers to farm out the compile.  We have many developers simulatenously using bazel to build on their workstations, all sharing this distcc server farm.\r\n\r\nIs it currently possible to replace that setup with `remote_worker`?  Is the idea that instead of the distcc servers we will run `remote_worker` instances on the dedicated servers?\r\n\r\nIs it possible to get this setup working currently?  If so, what command do I execute to start the remote workers running on the servers?  How do I configure the bazelrc to specify those available remote workers and tell it to use them?\r\n\r\nAlso, given the description of what we are doing, does the below profile look healthy?\r\n\r\nThanks for your help.\r\n\r\n```\r\n=== PHASE SUMMARY INFORMATION ===\r\n\r\nTotal launch phase time          550 ms    0.09%\r\nTotal init phase time           98.1 ms    0.02%\r\nTotal loading phase time        1.340 s    0.22%\r\nTotal analysis phase time       3.772 s    0.61%\r\nTotal preparation phase time    15.3 ms    0.00%\r\nTotal execution phase time    611.332 s   99.06%\r\nTotal finish phase time         40.8 ms    0.01%\r\nTotal run time                617.148 s  100.00%\r\n\r\n=== INIT PHASE INFORMATION ===\r\n\r\nTotal init phase time                    98.1 ms\r\n\r\nTotal time (across all threads) spent on:\r\n              Type    Total    Count     Average\r\n\r\n=== LOADING PHASE INFORMATION ===\r\n\r\nTotal loading phase time                 1.340 s\r\n\r\nTotal time (across all threads) spent on:\r\n              Type    Total    Count     Average\r\n    CREATE_PACKAGE    8.30%      339     2.66 ms\r\n          VFS_STAT    0.55%      912     0.07 ms\r\n           VFS_DIR    2.47%      886     0.30 ms\r\n          VFS_OPEN    0.11%      331     0.04 ms\r\n          VFS_READ    0.01%      330     0.00 ms\r\n         VFS_WRITE    0.00%        1     0.01 ms\r\n          VFS_GLOB   21.17%     1839     1.25 ms\r\n     SKYFRAME_EVAL   11.97%        3      433 ms\r\n       SKYFUNCTION   42.57%    94382     0.05 ms\r\n     SKYLARK_LEXER    0.26%      360     0.08 ms\r\n    SKYLARK_PARSER    1.52%      360     0.46 ms\r\n   SKYLARK_USER_FN    1.17%      429     0.30 ms\r\nSKYLARK_BUILTIN_FN    9.52%     2179     0.47 ms\r\n\r\n=== ANALYSIS PHASE INFORMATION ===\r\n\r\nTotal analysis phase time                3.772 s\r\n\r\nTotal time (across all threads) spent on:\r\n              Type    Total    Count     Average\r\n    CREATE_PACKAGE    0.04%       16     2.30 ms\r\n          VFS_STAT    0.19%     2631     0.07 ms\r\n           VFS_DIR    3.48%     2278     1.57 ms\r\n          VFS_OPEN    0.00%       14     0.04 ms\r\n          VFS_READ    0.00%       14     0.01 ms\r\n          VFS_GLOB    2.39%     4942     0.50 ms\r\n     SKYFRAME_EVAL    3.09%        1     3.193 s\r\n       SKYFUNCTION   89.66%    85650     1.08 ms\r\n     SKYLARK_LEXER    0.00%       23     0.04 ms\r\n    SKYLARK_PARSER    0.01%       23     0.37 ms\r\n   SKYLARK_USER_FN    0.00%        2     0.44 ms\r\nSKYLARK_BUILTIN_FN    0.59%      295     2.07 ms\r\n\r\n=== EXECUTION PHASE INFORMATION ===\r\n\r\nTotal preparation time                   15.3 ms\r\nTotal execution phase time             611.332 s\r\nTotal time finalizing build              40.8 ms\r\n\r\nAction dependency map creation           0.00 ms\r\nActual execution time                  611.332 s\r\n\r\nTotal time (across all threads) spent on:\r\n              Type    Total    Count     Average\r\n            ACTION    0.06%    36219     8.79 ms\r\n      ACTION_CHECK    0.00%        4     30.7 ms\r\n    ACTION_EXECUTE    5.42%    36219      762 ms\r\n       ACTION_LOCK   43.35%     6829    32.330 s\r\n    ACTION_RELEASE    0.00%     6846     0.20 ms\r\n     ACTION_UPDATE    0.00%     5051     0.00 ms\r\n   ACTION_COMPLETE    0.03%    36219     3.60 ms\r\n              INFO    0.00%        1     0.00 ms\r\n          VFS_STAT    0.00%  2864398     0.01 ms\r\n           VFS_DIR    0.00%    68094     0.02 ms\r\n      VFS_READLINK    0.00%   136758     0.01 ms\r\n           VFS_MD5    0.01%    41612     0.68 ms\r\n        VFS_DELETE    0.19%   531371     1.80 ms\r\n          VFS_OPEN    0.00%     7128     0.95 ms\r\n          VFS_READ    0.00%    38453     0.00 ms\r\n         VFS_WRITE    0.00%     2707     0.01 ms\r\n              WAIT    0.80%    28548      143 ms\r\n     SKYFRAME_EVAL    0.12%        1   611.230 s\r\n       SKYFUNCTION   50.03%   317700      802 ms\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gregestren": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3871", "title": "Support Python 2 and 3 in the same build", "body": "Context: https://groups.google.com/d/msg/bazel-discuss/nVQ48R94S_8/xbMi3_RWBwAJ\r\n\r\nActive work is going on for this (code in review inside Google). Follow this bug to track.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/3871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/7fa23eaf4617431875acbb63052f7349546343ba", "message": "Remove ConfigurationTransitionProxy.NONE and BaseRuleClasses.DYNAMIC_TRANSITION_MAP.\n\nThis leaves DATA as the last remaining legacy transition.\n\nPiperOrigin-RevId: 182422552"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/47ef92d437972aee06ab2caff2cb12cd617adc9a", "message": "Remove ConfigurationTransitionProxy.NULL\n\nPiperOrigin-RevId: 182099803"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/b099292d4f513012c1c63a4e73cec043015a55fc", "message": "Move PatchTransition and kin to analysis.config.transitions.\n\nHostTransition can't be migrated yet because it depends on\nBuildConfiguration.\n\nPiperOrigin-RevId: 180842784"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/192583d5fbf49f43bc7646e5750647362dfaecfe", "message": "Remove obsolete ConfigurationTransition.SPLIT.\n\nPiperOrigin-RevId: 180291093"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/4e093d8e08454c9c2c04e94fe2e97ef4592198b6", "message": "Replace Attribute.ConfigurationTransition with config.transitions.ConfigurationTransitionProxy.\n\nThe \"proxy\" part is to dissuade people from writing:\n\n void myfunc(ConfigurationTransition transition)\n\nsignatures casually.\n\nMaybe that's actually a better name than \"Transition\". But I'd rather\nrename Transition to ConfigurationTransition in its own change if we\nwant to do that.\n\nPiperOrigin-RevId: 180285321"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "a-googler": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/838f33991f5c878c650a82f491db0b0574503649", "message": "Quick blanket replacement of getTarget().getLabel() with .getLabel(). Some have already been changed to ConfiguredTargetAndTarget so there's fewer classes than I thought there would be.\n\nPiperOrigin-RevId: 182839243"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/bac5fc382c56d7b231686b228db192a78caed3ec", "message": "Support DTD when processing resource files in the aapt2 pipeline\n\nUnfortunately, the getTag() function explicitly fails when it encounters a DTD\nitem, so we need to do a bit of custom handling instead.\n\nRELNOTES: none\nPiperOrigin-RevId: 182821046"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/a1a1e61387920c11abfecb15845401a527bab2fa", "message": "Improve documentation for depsets.\n\nPiperOrigin-RevId: 182767783"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/c193fc40c2f6f11e30d18cb6191b17810aeda9c5", "message": "Non functional changes.\nJust shuffling code in the build() method to simplify future review.\n1. Reuse result of getRootRelativePath()\n2. Delay linkerInputs generation\n3. allowLtoIndexing ? thinltoParamFile : null -> thinltoParamFile\n  it must be null if indexing is not allowed\n\nRELNOTES: None\nPiperOrigin-RevId: 182626938"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/dd17d9fd7329954210e86b82798ff012cb34ebd2", "message": "Style fix for https://google.github.io/styleguide/javaguide.html#s3.4.2.1-overloads-never-split\n\nRELNOTES: NONE.\nPiperOrigin-RevId: 182626819"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/99f62ef22fd32277fde5fa1236f716a1e20b70c3", "message": "Add a codec for LanguageDependentFragment and LibraryLanguage. Switch the only\nconstructor of a LanguageDependentFragment to use an ImmutableSet instead of a\nHashSet.\n\nRELNOTES: None.\nPiperOrigin-RevId: 182555522"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/2b4584745a9830de25b8282d08751fbcb1c9972d", "message": "Replaced 'legal' by 'valid' in some documentation.\n\nRELNOTES: None.\nPiperOrigin-RevId: 182528996"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/80edfd343ba993961c29bc49a60cbc06bb79e8c2", "message": "User can never explicitly set generator_* attributes. So it should be\nnonconfigurable.\n\nRELNOTES: generator_* attributes are nonconfigurable.\nPiperOrigin-RevId: 182443578"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/ab0cdd55fc73b40f1c7462a2b95cc1ce7f930043", "message": "Re-add WalkableGraph#isUpToDate and BuildDriver#alreadyEvaluated\n\nRELNOTES: None\nPiperOrigin-RevId: 182389876"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/4695de623614b1105166513d28f6b52ceb8f4c83", "message": "Add deprecation warning message to mobile-install classic mode.\n\nWe've notified the top classic users by email that classic mode is deprecated.\nAs we are no longer actively supporting classic mode, we'd like users to move\nover to skylark.\n\nRELNOTES: None.\nPiperOrigin-RevId: 182268733"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/70ec04ad08b250c34b1ce455b1faa25228ef8a2f", "message": "[Autocodec] Add a ImmutableSetCodec. ImmutableCollections have a deterministic\niteration order so we should be okay.\n\nPiperOrigin-RevId: 182235068"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/e01d0c8f9019b7e0beb406ea3932e7dc84b6f333", "message": "Filter out generated proto extension registry loader from instrumentation APK.\n\nRELNOTES: None\nPiperOrigin-RevId: 182145172"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/da59188963e739fe3d00e096ae2f1d88546422e3", "message": "Fix parsing for public.xml file when using aapt2.\n\nRELNOTES: none\nPiperOrigin-RevId: 182110722"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/53e45318ad8da0a244639a44c1c9a1720d8c4b10", "message": "Default to filtering resources in analysis\n\nRELNOTES: none\nPiperOrigin-RevId: 182100169"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/5418362f878afc6c61ce7e5c190b9d234584d40f", "message": "Also support es-r419 as a locale.\n\nRELNOTES: none\nPiperOrigin-RevId: 182099868"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/7c439b9f6f67939c57fe321958878972869e12e0", "message": "Fix typo in example code\n\nRELNOTES: None.\nPiperOrigin-RevId: 181990193"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/6337b7116818e9f13d9456a21d7abae9a58c3d38", "message": "PiperOrigin-RevId: 181797878"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/d4c19e65c9e219772d22720761ef7646cdb210f8", "message": "RELNOTES: Allow expanding TreeArtifacts for libraries_to_link\n\nPiperOrigin-RevId: 181750466"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/852111be336776dceaab58ddbcb41ce99c19d812", "message": "Final cleanup of android_resources\n\nRELNOTES: none\nPiperOrigin-RevId: 181653922"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/ee28bc3a15a7eeeccf21b39b3d307b64ae8acee4", "message": "Fix parsing for some aapt2-generated resources.\n\nRELNOTES: none\nPiperOrigin-RevId: 181506851"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/ea41dc4f5179533c3c54a786848157cc17dccac2", "message": "Produce data binding file from compile action when \"enable_data_binding\" attribute is on.\n\nRELNOTES: none\nPiperOrigin-RevId: 181503682"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/f6ca78808722c8c119affdb33400838ee92d44b6", "message": "isable_presubmit\n\nPiperOrigin-RevId: 181491528"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/773f12e8138096d7ece523e764bb52c44140c41d", "message": "Automatic code cleanup.\n\nPiperOrigin-RevId: 181482268"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/7253a8bfe43b5c661f04b336017cda589f892855", "message": "RELNOTES: Make PIC and non PIC outputs for C++ compilation with Tree Artifacts\n\nPiperOrigin-RevId: 181330907"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/786f31303e8a8deca4780dfaf971ba55fa391617", "message": "Fix android_binary.aapt_version docs referencing the wrong flag\n\nPiperOrigin-RevId: 181255541"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/233807ec94189c4a322c203322163a154d90aa8f", "message": "Serialize and package xml attributes from resources xml tags in values folders for aapt2.\n\nRELNOTES: none\nPiperOrigin-RevId: 181226483"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/9755c72b48866ed034bd28aa033e9abd27431b1e", "message": "PiperOrigin-RevId: 180959513"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/a483876e8cbee32a87d1cc5290a1cdb9e6e6488e", "message": "Automated rollback of changelist 180845132.\n\n*** Reason for rollback ***\n\nRoll forward, add updated Resources.proto.\n\nBranch:   pi-release\nRepo:     platform/frameworks/base\nID:       8552195d338da03df31ec188322ff30e2878d6d2\n\nTAP Presubmit\n[]\n\nRELNOTES: New version of aapt2 and Resources.proto.\nPiperOrigin-RevId: 180873128"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/a5e9a0c6f46ccc6d7f899e5c5bc1414bc429d1f2", "message": "Always filter resources by density in execution\n\nNewly discovered bugs indicate that density filtering in analysis does not\ncover all cases. Filter in execution as a workaround for these cases. This will\nlet us turn resource filtering in analysis on and avoid these bugs. (I will\nwork on actually fixing these bugs in parallel.)\n\nNon-density filtering already runs in execution, even when already filtering in\nanalysis, due to known limitations of filtering in analysis. (Specifically,\naapt filters more strictly than android_ide_common, and also needs the resource\nfilters passed anyway to generate pseudolocalized resources.)\n\nRELNOTES: none\nPiperOrigin-RevId: 180806206"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/51a4eec633e149bedad7e0f4b82e54e662fa9f8b", "message": "AutoCodec: support for ImmutableListMultimap, ImmutableMultimap and ImmutableMap types.\n\nPiperOrigin-RevId: 180288965"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tomlu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/3ab47c9d3fa0ecfee51828a126cec7c9554aecdc", "message": "Remove one use of CustomMultiArgv in JavaCompileAction.\n\nPiperOrigin-RevId: 182837838"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/e7552c53a5dd65ae496562fc29adecd89e9db5fb", "message": "Fix usages of PathFragment segments that will become inefficient.\n\nAn upcoming replacement to PathFragment will not have efficient segment semantics, causing code to become unnecessarily inefficient.\n\nRELNOTES: None\nPiperOrigin-RevId: 182553098"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/8cc5dcf34cf5156db78ccf5f936ca3c8b893c36f", "message": "Rename relativePath -> rootRelativePath in Root and friends.\n\nThis makes it clearer that the path fragments in question are relative *to the root*. Confusingly, when the root is absolute, the root relative fragment is also absolute. This makes it a tiny bit clearer that the path fragment may be absolute.\n\nPiperOrigin-RevId: 182544893"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/74706da1b101e08500978633755005b37c017da6", "message": "Inline rarely used PathFragment methods that do not deserve to be on a core path class.\n\nPiperOrigin-RevId: 182526427"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/908f6d5e54c7a7ab20220c298bd43b5a392fe912", "message": "Clean up ArtifactRoot.\n\n* Use an enum instead of booleans and null fields having special meaning.\n* Remove the exec root from ArtifactRoot. This is only used to calculate artifact exec paths, which can be done from the root's exec path and the root relative path.\n\nPiperOrigin-RevId: 182411710"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/4c9fafd8e7137ed117529e0a72ed4d9aefe6ec48", "message": "Add absolute root concept.\n\nAn absolute root accepts any absolute path fragments and simply returns it.\n\nThis concept replaces the FileSystem root directory concept.\n\nPiperOrigin-RevId: 182400471"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/ee6a6862e26704854fb08bd90912890814cc3426", "message": "Introduce Root class.\n\nThis class represents a root (such as a package path or an output root) used for file lookups and artifacts. It is meant to be as opaque as possible in order to hide the user's environment from sky keys and sky functions.\n\nRoots are used by RootedPaths and ArtifactRoots.\n\nThis CL attempts to make the minimum number of modifications necessary to change RootedPath and ArtifactRoot to use these fields. Deprecated methods and invasive accessors are permitted to minimise the risk of any observable changes.\n\nRELNOTES: None\nPiperOrigin-RevId: 182271759"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/12640e54eadd40f674c23ac4cbd63725e9ac3f56", "message": "Fix blaze crashes with running under JDK9.\n\nRELNOTES: None\nPiperOrigin-RevId: 182223038"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/ac4da4b96cfc6941f4203050f5fcd7aec20ad142", "message": "Move RootedPathCodec to an inner class of RootedPath.\n\nPiperOrigin-RevId: 182087153"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/1cdcdf9a72458850f8a0f40c7cab1699685ed6cc", "message": "Rename Root to ArtifactRoot.\n\nThis is slightly more descriptive, and we will potentially want to use the name Root for a broader concept shared between ArtifactRoot and RootedPath.\n\nPiperOrigin-RevId: 182082367"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/89eaee567429b559ca9983fff146ae60477688ad", "message": "Remove use of Root#asDerivedRoot where the derived root == exec root.\n\nThis method violates the invariant that derived roots are never equal to the exec root. Only source roots can be equal to the exec root.\n\nNote that this method was only used in tests, so this CL should be completely safe as long as its tests pass.\n\nPiperOrigin-RevId: 181998483"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/15b532652e446472d6a61af1ba73c8aca170500d", "message": "Remove test methods from ArtifactFactory and Root that violate root invariants.\n\nIn this case, the invariant violated is creating derived roots at the exec root.\n\nPiperOrigin-RevId: 181994080"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/775d3a9066cd674f158652ca3c6abf2ed6cd5549", "message": "Change packaging rules to operate on strings instead of path fragments.\n\nThe upcoming path refactor will normalize all path fragments upon creation. That is fine 99% of the time, but sometimes we want to disallow non-normalized paths on rule attributes. Even this isn't usually a problem since we can validate the string prior to putting it in a path fragment.\n\nHowever, in the case of the packaging rule we do not know the rules of validation until the packaging rule is *consumed* by some other rule. Therefore, retain input as a string on these rules all the way through.\n\nWe don't really do a lot of path fragmenty stuff with these strings. The main drawback is losing a bit of type safety / readability.\n\nSKIP_KOKORO\n\nPiperOrigin-RevId: 181760613"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/eec7250dccba5bf19b6c923b7213138c74187c20", "message": "Remove isMainRepo from Root.\n\nThis is no longer used.\n\nPiperOrigin-RevId: 181754475"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/3e379d1479b2de6118b16aa33f6b9b6fd4ac6ab0", "message": "Simplify root relative path calculation.\n\nThis is a first-class artifact concept. No need to go the long way to get this path.\n\nPiperOrigin-RevId: 181717016"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/6c919068534730c7c5e9814e2fce88ac248e4621", "message": "Remove trivial instances of FileSystem#getRootDirectory from testing code.\n\nPiperOrigin-RevId: 181686136"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/88131ba135e743c2237bf62a3bc17a2a7a1c24f8", "message": "Factor out InMemoryFileSystem's use of root directory.\n\nWhen there is no root directory this minimises the size of the change required to keep InMemoryFileSystem working.\n\nPiperOrigin-RevId: 181685159"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/1a19b62bc493d83734c34c888401d5c45e8bf55c", "message": "Plumb exec root through to all spawn runners.\n\nThey need this to parse input manifests. Previously we would grab the exec root from the Root, but wish to unsupport this.\n\nPiperOrigin-RevId: 181669143"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/3328197af12f18a9d51059ef5d54e6c11c13d4f9", "message": "Simplify SkylarkRuleContext#getBuildFileRelativePath.\n\nWe don't need to construct roots to relativize a path.\n\nPiperOrigin-RevId: 181661592"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/42623f59fdd3bfbdfc21490c69f21537fa32011c", "message": "Remove unused code from AndroidIdeInfoProvider.\n\nPiperOrigin-RevId: 181657963"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/67ac826b26283040922200239f2f53fcc2c225cc", "message": "Remove some trivally unneeded usages of FileSystem#getRootDirectory.\n\nWindows doesn't have a root directory, so this abstraction doesn't make sense and should be removed.\n\nPiperOrigin-RevId: 181638749"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/99e2acee9fa8098340fa7c152e7ba317faf53759", "message": "Use Path#createDirectoryAndParents in SkylarkRepositoryContext.\n\nPiperOrigin-RevId: 181638689"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/3d8fb5efb02700cddb6e0a300f1d3e4913aa6b42", "message": "Remove use of Path#isRootDirectory from BlazeDirectories.\n\nIt was put there to support \"/\" as the workspace. Checking for a null parent will do the same thing.\n\nPiperOrigin-RevId: 181638375"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/22c2f9a7722e8c8b7fdf8f5d30a40f1c4118e993", "message": "Automated rollback of commit 80c8ff1819a889814cbe2dae477d7fedce6aa181.\n\n*** Reason for rollback ***\n\nRolling forward after underlying issue has been fixed.\n\n*** Original change description ***\n\nAutomated rollback of commit d50cbbeef115f28c0cea1ac17572e0f12c0cf312.\n\n*** Reason for rollback ***\n\nb/71442447\n\n*** Original change description ***\n\nRemove synchronization from file system.\n\nAfter the path refactor we will no longer have path instances to synchronize on.\n\nThe underlying OS file systems are already naturally thread safe, that is, their internal data structures cannot be damaged. Any further synchronization (eg. races between directory creation and deletion) has to be managed at the client level.\n\nThe l...\n\n***\n\nPiperOrigin-RevId: 181368707"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/7f17d08d5be04d1fc393958c9895747c9dc88b30", "message": "Automated rollback of commit cb7689404ef9a69488d64bfc2e0bfb9326e664d6.\n\n*** Reason for rollback ***\n\nRolling forward after the underlying issue has been fixed.\n\n*** Original change description ***\n\nAutomated rollback of commit 6a54339bb943702bd7dffc43f85267dac98dc355.\n\n*** Reason for rollback ***\n\nb/71442447\n\n*** Original change description ***\n\nCall through to Path#createDirectoryAndParents from FileUtils.\n\nThis CL removes a method that due to its implementation causes threading difficulties for Path#createDirectory.\n\nThe tests for the method are brought across to FileSystemTests since the methods are now implemented natively by the FileSystem classes. The tests were also cleaned up.\n\nThe test revealed an edge c...\n\n***\n\nPiperOrigin-RevId: 181367850"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/457a226f69ab56109fd5ec9163ac57181d715bda", "message": "Save errno in unix_jni.cc stat when throwing exceptions.\n\nIt's otherwise possible that we do other syscalls in between the original syscall and us reading the errno for use in the exception.\n\nPiperOrigin-RevId: 181367811"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/995e157edbea8732769d63c3e0aecd29d6fa9774", "message": "Fix bug in unix_jni.cc that causes Path#exist to spuriously return true.\n\nWe use errno to signal an error in the stat call that gets passed back to Java land. However, between the time we make the failed stat syscall and the time that we read the final value of errno we will very rarely make other syscalls in between, which will stomp the value of errno back to 0. This will get interpreted as \"no error, the file exists\" by the VFS.\n\nThis bug has existed since 2009. Only a perturbation of the sequence of syscalls we make during startup has since caused the bug to surface.\n\nPiperOrigin-RevId: 181358035"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/cb7689404ef9a69488d64bfc2e0bfb9326e664d6", "message": "Automated rollback of commit 6a54339bb943702bd7dffc43f85267dac98dc355.\n\n*** Reason for rollback ***\n\nb/71442447\n\n*** Original change description ***\n\nCall through to Path#createDirectoryAndParents from FileUtils.\n\nThis CL removes a method that due to its implementation causes threading difficulties for Path#createDirectory.\n\nThe tests for the method are brought across to FileSystemTests since the methods are now implemented natively by the FileSystem classes. The tests were also cleaned up.\n\nThe test revealed an edge case bug in JavaIoFileSystem, so fix this.\n\nIn two cases some code was using the return value from the old method. Returning \"f...\n\n***\n\nROLLBACK_OF=179864042\nPiperOrigin-RevId: 180946251"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/80c8ff1819a889814cbe2dae477d7fedce6aa181", "message": "Automated rollback of commit d50cbbeef115f28c0cea1ac17572e0f12c0cf312.\n\n*** Reason for rollback ***\n\nb/71442447\n\n*** Original change description ***\n\nRemove synchronization from file system.\n\nAfter the path refactor we will no longer have path instances to synchronize on.\n\nThe underlying OS file systems are already naturally thread safe, that is, their internal data structures cannot be damaged. Any further synchronization (eg. races between directory creation and deletion) has to be managed at the client level.\n\nThe last attempt to do this failed because of races in FileUtils#createDirectoryAndParents on Windows. This method is now gone, rep...\n\n***\n\nROLLBACK_OF=180290901\nPiperOrigin-RevId: 180936132"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/3ed01597a938c4b762606d02af1c793196961da0", "message": "Remove support for Windows relative-to-current-drive paths.\n\nEg. 'C:foo' was previously \"the directory 'foo' relative to the current directory of drive 'C:\\'\". Now it is simple interpreted as \"the relative path fragment 'C:foo'\".\n\nPiperOrigin-RevId: 180936012"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/d50cbbeef115f28c0cea1ac17572e0f12c0cf312", "message": "Remove synchronization from file system.\n\nAfter the path refactor we will no longer have path instances to synchronize on.\n\nThe underlying OS file systems are already naturally thread safe, that is, their internal data structures cannot be damaged. Any further synchronization (eg. races between directory creation and deletion) has to be managed at the client level.\n\nThe last attempt to do this failed because of races in FileUtils#createDirectoryAndParents on Windows. This method is now gone, replaced by a method from the Java framework that knows how to synchronize.\n\nPiperOrigin-RevId: 180290901"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/ef2f5aeba13c15faad36cfb1d13426f8c0636b46", "message": "Undo change to introduce methods to remove file system instance from Path.\n\nI no longer believe that it is worthwhile to remove the file system instance from Path. Measurements indicate that I can simply replace the Path implementation in one go and just leave the instance on the Path class.\n\nThis CL was done entirely using IDE refactoring, so should be safe.\n\nPiperOrigin-RevId: 180287162"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cvcal": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/454485877e7456ffe4831633333ae533fd57d3e9", "message": "Use the new option categories by default\n\nBazel help output will now use the new categories by default, including for the generated html documentation at https://bazel.build/versions/master/docs/command-line-reference.html\n\nIssue #3758 - this switches to the new categories, but the grouping is still by command, which leads to duplicate options\n\nRELNOTES: None\nPiperOrigin-RevId: 182815006"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/28c20f79e3d265f897e8c644a4c31bd2b3d6ac67", "message": "Add option to optionally wipe state at the end of a build.\n\nThis will serve as an alternative to --batch, leaving behind a server without state from the previous build.\n\nRELNOTES: Introduces --[no]keep_state_after_build\nPiperOrigin-RevId: 182778500"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/ec41eaea04b3ee39f0457a51a05eabf4d84431fd", "message": "Fixed docs: `bazel fetch` is not a required manual step before `bazel build`\n\nCloses #4490.\n\nPiperOrigin-RevId: 182812418"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/080eaae0f75ab105455560e1f589f2169b8ca5ac", "message": "Removed extra .useDefaultShellEnvironment()\n\nRELNOTES: None.\nPiperOrigin-RevId: 182566009"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/6f502ac12180973f4646c95d95e1516082b3c71c", "message": "Point android_instrumentation_test's test runner to the vendored\ndeploy jar at @android_test_support//:instrumentation_test_runner alias to  @android_test_support//opensource:entry_point_deploy.jar\n\nGITHUB: #903\nRELNOTES: None.\nPiperOrigin-RevId: 182310718"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/ec7c273cde36d1ccd27ab8bab56cfc3743789f26", "message": "Fixed Build Status embed image in README (ci.bazel.io -> ci.bazel.build)\n\nCloses #4441.\n\nPiperOrigin-RevId: 181663339"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/e4b9ca042432e3ab5c105aba1f63c462ba0a3093", "message": "Merge the runfiles of @androidsdk//:aapt_binary into android_instrumentation_test's runfiles, and pass the execpath of aapt_binary to the entry point using the --aapt flag.\n\nThis allows android_instrumentation_test to use the dynamically linked AAPT from the user-provided SDK.\n\nThe reason for not using %aapt% template expansion in the stub template is because @androidsdk//:aapt_binary is a shell script with hardcoded paths to the actual dependencies in its runfiles directory, but since this binary is called within an android_instrumentation_test's runfiles directory, the nested aapt runfiles directory doesn't exist because runfiles are not nested, but merged.\n\nWe can make this work by referring to the actual external/androidsdk/aapt_binary using a `../../` directory traversal, and we can also assume that the aapt_binary is there because android_instrumentation_test merged aapt's runfiles from the SDK.\n\nRELNOTES: None.\nPiperOrigin-RevId: 180888739"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26580044", "body": "\ud83c\udf89\ud83c\udf8a", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26580044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "dslomov": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/2f80e5895fbcc4fc4102e57660cd631eba731b04", "message": "Only allow files created by the same rule as executable outputs of a rule.\n\nFixes #4170.\n\nChange-Id: I308ee17eb769dcc6a94b90b1dd6cc2ccbe14e968\nPiperOrigin-RevId: 182807196"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/f0bec36864f10370cbbda4caa8beac2e0c5ee45b", "message": "Automated rollback of commit 2aeaeba66857c561dd6d63c79a213f1cabc3650d.\n\n*** Reason for rollback ***\n\nBreaks C++ on gcc 4.8.4 (specifically, TensorFlow: https://github.com/bazelbuild/bazel/issues/4474)\n\nFixes #4474\n\n*** Original change description ***\n\nWhen linking mostly-static Linux binaries, link libstdc++.a explicitly.\n\nThis allows libstdc++ to be statically linked, which is normally only\npossible when invoking GCC as `g++` with the `-static-libstdc++` flag.\n\nFixes https://github.com/bazelbuild/bazel/issues/2840\n\nSee https://github.com/envoyproxy/envoy/issues/415 for additional\nbackground and context.\n\ncc @htuch (for Envoy) and @calpeyser @hlopko (who I talked to earlier about this)...\n\n***\n\nRELNOTES: None.\nPiperOrigin-RevId: 182519445"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/290970c1e0567f1ecd39a64cd6fd14324367126e", "message": "Automated rollback of commit dafe71390340224e06eab0ac7afcebb2f5219f5a.\n\n*** Reason for rollback ***\n\nBreaks Bazel CI (https://ci.bazel.build/job/bazel-tests/1722/)\n\n*** Original change description ***\n\nReport unsuccessful error code if bazel fetch fails in \"keep going\" mode.\n\nFixes #3234.\n\nPiperOrigin-RevId: 182042503"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/dafe71390340224e06eab0ac7afcebb2f5219f5a", "message": "Report unsuccessful error code if bazel fetch fails in \"keep going\" mode.\n\nFixes #3234.\n\nChange-Id: I1bfbe856d35b98995f5a0684fe47c7566b8dd093\nPiperOrigin-RevId: 182029085"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/1bf3e3685e124510a6a4874039a994ccf425e5ce", "message": "Disable test_actions_deleted_after_execution_nobatch_keep_analysis\n\nRELNOTES: None.\nPiperOrigin-RevId: 181971087"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/2944fdc2eba77e785d6345d1783e59806ee4e5c2", "message": "Regression test for #3656.\n\nChange-Id: Id3d6e6da60aca3c02c7cf3e9e727ecbf177dde66\nPiperOrigin-RevId: 181971084"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/9582cff36e2a51e6d17869d77d175a2c465710c3", "message": "Use BAZEL_SH if available instead of hard-coding bash in git.bzl\n\nFixes #3699.\n\nChange-Id: I44028476be96037334a1ae48de450d625925676f\nPiperOrigin-RevId: 181962926"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/822a8b311173f7fe90bf89686b406cec610e89b9", "message": "Do not crash if 'bind' and external repo generate the same //external: target.\n\nWork towards #3676.\n\nThe behavior is still incorrect (we should in fact disallow this), but\nat least there is no hard crash.\n\nChange-Id: I5181dba73ad725d20b2ea82b2f19e86664b9dbff\nPiperOrigin-RevId: 181954820"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/f0711024f90541727fab60760f2d1affe12cc917", "message": "Properly report missing external repositiones during pattern evaluation.\n\nFixes #3836.\n\nChange-Id: Icc9e8e08c4336fc20f46b6b878986b991d62ab18\nPiperOrigin-RevId: 181949937"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/19676522", "body": "@petemounce It might be worthwhile to handle drive letters other than C: here, now that we finally support that in Bazel #2032", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/19676522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25152093", "body": "No; the whole change was a rollback. not sure what happened/", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25152093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/55567639", "body": "`blaze build :test_my_rule_provider_two_dependencies`. Yes, should be runnable from test\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/55567639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/70661372", "body": "Actually don't sweat it. I am merging this now (with fixed errno.h)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/70661372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/73121782", "body": "This is not needed: QueryOptions are directly avaliable to `OutputFormatter#output` method, so you can just get it from there,\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/73121782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/73121938", "body": "Get the line terminator from options directly\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/73121938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/73373779", "body": "Let's just leave this option, and not specify arbitrary string for line terminator (I believe that is the extent of configurability Unix tools have, and having arbitrary terminators beg questions of whether those terminators are escaped in the output otherwise)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/73373779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79132837", "body": "These changes has to go to upstream protobuf.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79132837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/78712086", "body": "Drop this change\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/78712086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/78712189", "body": "Split these instructions away from install.md\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/78712189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/78713258", "body": "Let's not grab all the files from the output (who knows what is there). Instead, grab the specific files we need (I believe that is just bazel.exe)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/78713258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/78714702", "body": "Sorry nevermind, it is in `windows.md`, that is fine\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/78714702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/78739115", "body": "nice, thanks!\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/78739115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/78743921", "body": "Let's not create garbage directories; use ZipArchive class to archive \"$outputDir/bazel.exe\".\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/78743921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79165150", "body": "Please rebase this file to the latest changes\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79165150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79165346", "body": "For now, keep building from source the preferred method of installation in this do.\nMention that unofficial chocolatey package is avialable.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79165346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79165459", "body": "Unfinished sentence?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79165459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79165931", "body": "Sorry I am having second thoughts about this. Let's spilt these instructions into a separate `windows-chocolatey-maintenance.md` (this is not something an average Bazekl user on Windows needs to do)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79165931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79833792", "body": "Where did this paragraph go?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79833792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79833865", "body": "Why Pyhton is gone?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79833865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79834003", "body": "Let's remove this paragraph, and add it back once this really works.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79834003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/82166398", "body": "We intend `third_party/protobuf/<version>` to be the exact copy of protobuf's <version> directory (see https://github.com/bazelbuild/bazel/blob/master/third_party/protobuf/README.md). So these files should not be changed as part of ths PR\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/82166398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/82166444", "body": "Ditto here\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/82166444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/83260160", "body": "20160205 should be fine no?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/83260160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/83548339", "body": "\"in that shell\"\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/83548339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/83729054", "body": "Add:\nUse `where msys-2.0.dll` to ensure that your path is set up correctly\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/83729054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/83729148", "body": "Make it an \"Issues/Troubleshooting\" subsection\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/83729148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/85646766", "body": "Please fix this\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/85646766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/87881002", "body": "Actually, docs/windows.html is the right place afaiu. Right @davidzchen?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/87881002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/105385293", "body": "Eventually (soon!) we would just kill this script in favor of building this as a normal cc_library with msvc toolchain. This is fine until then. \r\nArguably, this code should look into registry (and generally duplicate the logic in cc_configure.bzl), but this is moot since this script goes away soon anyway.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/105385293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/110616013", "body": "How does this syntax work? ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/110616013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/111010319", "body": "ok. ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/111010319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/101520561", "body": "This enum needs a javadoc comment", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/101520561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "brandjon": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/32d359f4fbde6bfdcfa1beda64a87c407480ba76", "message": "Add a native provider registry to ConfiguredRuleClassProvider\n\nThe idea is that rule sets should record what builtin providers (types, not instances) they use, as opposed to having a static registry the way we do for @SkylarkSignature builtins. (It'd be nice for the latter to not be static one day.)\n\nRELNOTES: None\nPiperOrigin-RevId: 182802492"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/33a7cad5c2c82267638cc2ae3081592cef90bc8b", "message": "Add a way for BaseCodecs to register association with subtypes\n\nAlso add accessor to SkylarkInfo for the custom error message, and expose its concrete implementation classes for the benefit of reflection.\n\nPiperOrigin-RevId: 182443146"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/a0c056e406fab214b30b12851829194fbf908a3a", "message": "Add TestUtils#ConstantStringCodec\n\nRELNOTES: None\nPiperOrigin-RevId: 182390511"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/aadf6600faa099726b2e1c00e75b0edc9d95bfb8", "message": "Fix forbidding of If statements in BUILD files\n\nThe bug also permitted For statements in BUILD files so long as they were contained within an If statement (i.e. not at the top level).\n\nAlso add minor guidance to error messages.\n\nRELNOTES: None\nPiperOrigin-RevId: 182236172"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/ba23ae2a4ae20d14f98475a482715821e2d0dd61", "message": "Fix value collision in builtins registry\n\nIf two values compared equal (e.g., MethodLibrary#bool and SkylarkAttr#bool), we were dropping one of them in favor of the other.\n\nRELNOTES: None\nPiperOrigin-RevId: 182057611"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/b178e89e9ec079ecde901e4fca113c88e8aad317", "message": "Encapsulate SkylarkInfo layouts in a class\n\nThis avoids invalid layouts (non-sequential map values), and provides better separation between a layout's representation as a map and its view as a list.\n\nAlso removed a factory method that's unnecessary, now that the plan is not to closely tie SkylarkInfo to SkylarkProvider.\n\nRELNOTES: None\nPiperOrigin-RevId: 181807071"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/b549457d45c0759737785ef21ffcbb6bd9c285f7", "message": "Move custom err msg functionality from Info to SkylarkInfo\n\nInfo objects no longer store a string pointer for their error message format, which is almost always the same as the one specified by their provider type. Only map-based SkylarkInfo used this (for fancy built-in structs like ctx.attr), so the field is pushed down to there.\n\nRELNOTES: None\nPiperOrigin-RevId: 181654641"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/04b5ab2e303a1a09fa2b942c264b16df6d6d472a", "message": "Refactor SkylarkInfo constructors\n\n- Info now has one protected constructor. (Would've preferred the builder pattern, but inheritance makes it much more verbose.)\n- Direct SkylarkInfo subclass access is replaced by factory methods and an isCompact() accessor.\n- Added/simplified tests\n\nRELNOTES: None\nPiperOrigin-RevId: 181616757"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/a29648a2cdc223deeed17ef8489f694d133d7de6", "message": "Info-related cleanups\n\n- Reorder Info methods for consistency with ClassObject\n- \"StructConstructor\" -> \"StructProvider\"\n- Added javadoc\n\nRELNOTES: None\nPiperOrigin-RevId: 181469643"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/8bd201631e380327f5a7fb72e11bd493973913b8", "message": "Fix test that accidentally masked an exception\n\nLooks like the test was originally broken (to always pass) by https://github.com/bazelbuild/bazel/commit/01120026dc313ee7ad9ea95069a29252eb19173b and its roll-forward https://github.com/bazelbuild/bazel/commit/950310ff911da6c26339f4dc0b124487adc0cdbb.\n\nRELNOTES: None\nPiperOrigin-RevId: 180272998"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/23514302", "body": "Sounds good for this one, will commit a follow-up. Shame I can't do it for the listiterator methods as well.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/23514302/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "vladmos": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/772d958f1577f1697a1112ffbddc23898c11a48b", "message": "Improve documentation for the select function\n\nPiperOrigin-RevId: 182796843"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/f05a59f68563b48a30abc55dbe927048df011fe2", "message": "Fix the attr documentation\n\nFixed a broken link, also applied a couple of minor changes.\n\nPiperOrigin-RevId: 180913699"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/ceaed5145f5ad27facd103a79d047cf0e301b4b5", "message": "Remove usages of `+` on dicts\n\nThe `+` operator on dicts is deprecated and will be removed. This change makes\nBazel files compatible with the new behavior.\n\nFixes #4346.\n\nPiperOrigin-RevId: 180702882"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/541afa63fd68924521793058a37203fa529fb8e2", "message": "Fix testPlusEqualsOnDict\n\nThe said test fails if the --incompatible_disallow_dict_plus flag is flipped by\ndefault (e.g. in a .bazelrc file)\n\nPiperOrigin-RevId: 180553910"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21925329", "body": "Thanks, filed #2897", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21925329/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/104675859", "body": "Fontawesome has a Github icon, we can add it here as well: http://fontawesome.io/icon/github/", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/104675859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/105408145", "body": "If it was on purpose then no, I just thought it was missed by mistake.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/105408145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "janakdr": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/192c8904999a3e4407999a12c85fc4e9114b5e97", "message": "Start serializing ArtifactOwner: put in a simple codec for the null artifact owner and fix up BuildConfigurationValue.Key. ConfiguredTargetKey is going to need some modifications to AutoCodec: probably the long-awaited static \"create\" method.\n\nPiperOrigin-RevId: 182630181"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/ee692d5fe03117fb3995c63ccb6b515adf375c88", "message": "Add serialization codec for SkylarkImports. This is needed to serialize SkylarkAspectLoadingKey.\n\nAlso add a @VisibleForSerialization annotation to @AutoCodec, since we're going to need to increase serialization visibility a lot here, and clean up some unnecessary modifiers.\n\nPiperOrigin-RevId: 182389162"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/f3e6f251d3823a826918ad762d1f69f84030ef8c", "message": "Start the process of getting Target out of ConfiguredTarget: add a new container, ConfiguredTargetAndTarget, that can be used to access Targets, and deprecate ConfiguredTarget#getTarget. ConfiguredAndTargetObjects are intended to be limited in scope, not being persisted to Skyframe.\n\nThe eventual plan is to remove the target field from ConfiguredTarget.\n\nThis CL is mostly straightforward, except for dealing with AliasConfiguredTargets, which cause some complications.\n\nA significant cleanup is still needed before #getTarget can be removed, but I don't see any impossible blockers. We will may still need to store a Target-like object in ConfiguredTarget (that has the RuleClass, or at least a string representation of it, for instance), but that will let us avoid storing a full Target together with its associated Package.\n\nPiperOrigin-RevId: 182371566"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/2b876c112b06d458585356682b6a11bc392ca4cc", "message": "Add an additional attempt to get a heap histogram since jmap on Bazel CI appears to be flaky in connecting to the JVM.\n\nPiperOrigin-RevId: 182118581"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/8b0934795036154dd4d835ea30770bc0b86243a9", "message": "Remove mtime field from FileStateValue.\n\nWe stopped treating empty files specially in the execution phase after unknown commit. So this code is mostly if not entirely orphaned. The only scenario in which this would lead to a semantic difference that I can think of is if the user is running with --nouse_action_cache and a running Bazel server, and they have an action they want to re-run when an empty input file changes, which isn't something we need to be concerned about.\n\nPiperOrigin-RevId: 182109952"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/3863b536bcab8de2000f342c85c31c7ea91cccbe", "message": "Stop including BuildConfiguration inside ConfiguredTargetKey: it's too heavyweight. For now, put a BuildConfigurationValue.Key in there. In the future, we may want to put some kind of \"delta\" key in.\n\nPiperOrigin-RevId: 181673805"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/573807d4e9d1b7a8b6956278773dfc53b544093f", "message": "Convert ActionLookupKey implementations to directly implement SkyKey, removing the layer of indirection of getting SkyKey out of ActionLookupKey, which uses more memory for no reason.\n\nPiperOrigin-RevId: 181658615"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/534191b7f506bb32447c890119789464a469bdf9", "message": "Remove BuildConfigurationValue#Key#enableActions field. Saves 8 bytes of memory and some work: BuildOptions#equals and #hashCode already take that value into account, so pulling it out does nothing but slow us down during Key construction.\n\nPiperOrigin-RevId: 181645301"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/19e03d7db789cc44ce3625a8ff14bcb8c1b4856c", "message": "Remove synchronization from InMemoryNodeEntry#getValue{,MaybeWithMetadata} and #toValue. I saw significant contention from this method in some experiments, and the synchronization isn't needed, since we only call these methods on done nodes (as determined by #isDone), and a node that is observably done cannot racily change its value.\n\nPiperOrigin-RevId: 181507133"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/29bd80d40bbca49d29e5ae45aa1341e1d19cc7f0", "message": "Intern the BuildConfigurationValue.Key instances that we create. Currently we don't create too many of them, but it'll be nice to have this interning for future work in which there are many more of them.\n\nWhen comparing BuildConfiguration instances, compare their full BuildOptions fields, which can compare quickly due to fingerprint caching, as opposed to their raw options, which is slow.\n\nAlso intern the map of Fragments that we create as part of a BuildConfiguration. There aren't too many of them either, but it means that equal Fragment sets can be compared using reference equality downstream.\n\nPiperOrigin-RevId: 180289334"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/906c7cbd0e990841c53af8664d8b699c2987823e", "message": "After getting rid of LabelAndConfiguration, simplify some code by providing a ConfiguredTargetKey directly.\n\nPiperOrigin-RevId: 180285691"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26557318", "body": "I think it wouldn't matter much either way: there aren't too many of these, so the extra memory shouldn't be too bad, but on the other hand, the chances of -1 are less than 1 in 4 billion, so recomputing in that case seems ok.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26557318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "ahumesky": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/3215117dc5372c103459a6cd21274fc756e5a9c9", "message": "Make createMainDexProguardSpec public.\n\nRELNOTES: None.\nPiperOrigin-RevId: 182579590"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "juliexxia": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/486085832490cef59762c0e76f3d6b6e7231f295", "message": "Move storage of queryExpression for cquery out of BuildRequest and straight into processRequest method in BuildTool. This is an extension of CL/181816980 and prevents pollution of BuildRequest.\n\nPiperOrigin-RevId: 182576704"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/07c4e3648e3b7a521b6706ffc5cbcdeca1ebf4e1", "message": "Introduce the blaze cquery command as the new ui for configurable query.\n\nbefore: blaze build --nobuild //foo --experimental_post_build_query=\"deps(//foo)\"\nafter: blaze cquery \"deps(//foo)\"\n\npros of ui change:\n- more concise\n- assumes query expression targets == targets to be built (but allows for flexibility through --top_level_targets flag)\n- separate from build command\n- cquery command recognizes query options, build options, and its own unique set of options\n\ncons of ui change:\n- adds another command to blaze\n- recognizes options that don't actually work yet -> requires more option validation\n\nRELNOTES: None\nPiperOrigin-RevId: 181816980"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/91695a31a8414f87a21ad2f32c4a122f5823bdfa", "message": "Automated rollback of commit 9e63684a58025d98bfe2f180d56ba7ece69545ae.\n\n*** Reason for rollback ***\n\nRoll forward of commit 86b4532769c22cca2ed7068a60f3326beaad34af after fixing bad import.\n+small misc fixes suggested by critique\n\n*** Original change description ***\n\nAutomated rollback of commit 86b4532769c22cca2ed7068a60f3326beaad34af.\n\n*** Reason for rollback ***\n\nProbably breaking //javatests/com/google/devtools/build/lib:Query2Tests\n\n*** Original change description ***\n\nRestructure how universeScope is used when testing configured query to mimick impending changes to the configured query interface (CL/179872445) which will pull build targets out of the query expression.\n\nFill in testTopLevelTransitions on the way!\n\nPiperOrigin-RevId: 180930388"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/9e63684a58025d98bfe2f180d56ba7ece69545ae", "message": "Automated rollback of commit 86b4532769c22cca2ed7068a60f3326beaad34af.\n\n*** Reason for rollback ***\n\nProbably breaking //javatests/com/google/devtools/build/lib:Query2Tests\n\n*** Original change description ***\n\nRestructure how universeScope is used when testing configured query to mimick impending changes to the configured query interface (CL/179872445) which will pull build targets out of the query expression.\n\nFill in testTopLevelTransitions on the way!\n\nPiperOrigin-RevId: 180880350"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/86b4532769c22cca2ed7068a60f3326beaad34af", "message": "Restructure how universeScope is used when testing configured query to mimick impending changes to the configured query interface (CL/179872445) which will pull build targets out of the query expression.\n\nFill in testTopLevelTransitions on the way!\n\nPiperOrigin-RevId: 180854150"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/693abdcf0947bcc9f8010ea139b5b7b37eaa0a0e", "message": "Consolidate calls to AnalysisUtils.getTopLevelTargetsWithConfigs which conveniently also makes it unnecessary to pass the entire LoadingResult when doing configured queries post analysis.\n\nPiperOrigin-RevId: 180676481"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/24466847", "body": "re: #350 (typo #305 in description :/)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/24466847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "kevin1e100": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/b0c6fcf735fab34aad6db8400648bb57766f0a3b", "message": "Multi-thread zip file writing in DexFileSplitter.  Since we push content into output files one by one this mostly means that we can start writing the next file while the previous one is still finishing up, and can read and write in parallel.\nRELNOTES: None.\n\nPiperOrigin-RevId: 182570961"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/a79d507cc3bbc857cf5f922dc108634c18d6aa2c", "message": "Enable incremental dexing of proguarded Android binaries in Bazel (one dexbuilder action by default).\nBinaries can opt in by adding \"incremental_dexing = 1\" attribute.\nRELNOTES: Proguarded Android binaries can be built with incremental dexing.\n\nPiperOrigin-RevId: 182092699"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/950c2a2d5bb4886dcec94caf601c5fb10f7c3f3d", "message": "use built-in params file support in DexArchiveAspect\nRELNOTES: None.\n\nPiperOrigin-RevId: 181397098"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/1ade18a652900410f632b2b9f47e6456c522a2e4", "message": "PiperOrigin-RevId: 180964207"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/eb6d2a1ef2dc15931b238db52397ab04df9a4fe3", "message": "Remove defunct Android incremental dexing flags\nRELNOTES: Remove defunct flags --experimental_incremental_dexing_for_lite_proto and --experimental_incremental_dexing_error_on_missed_jars that have long been enabled by default\n\nPiperOrigin-RevId: 180821902"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "haxorz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/26866939e115798cf91d7a02de5417ad81314384", "message": "Hoist \"continue\" statement outside of inner loop.\n\nRELNOTES: None\nPiperOrigin-RevId: 182546239"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/be21cb6f2946c1bd0545359b291167d0690c7e2d", "message": "Address post-commit comments in https://github.com/bazelbuild/bazel/commit/6f35e2d81a4d10359d39643bd03887d1b87f4224.\n\nRELNOTES: None\nPiperOrigin-RevId: 182415982"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/659974ed5e1fbd2122efc98ed7e1a0e3d5e59472", "message": "Fix bug where an was-inflight-and-is-about-to-be-done NodeEntry has incomplete deps that need to be removed, and\nthese deps are currently duplicated in the NodeEntry's newly requested deps\nGroupedList.\n\nAlso add a fast-path to GroupedListHelper#remove(List<Object> elements, Set<E> toRemove) for the incredibly common case where toRemove is empty. This saves a wasteful O(elements.size()) scan over elements. This method is unconditionally called each time a SkyFunction restart causes us to add new direct deps (with elements=<the new direct deps> and toRemove=<unfinished direct deps>); in the case where there are a ton of new direct deps, this scan entails wasted cpu and gc churn. The bug only occurs in uncommon case that there are deps to remove.\n\nThe bug has existed since GroupedList was first introduced into the codebase.\n\nIn Skyframe-land, this is only observable in nokeep_going mode because in keep_going mode \"we\ndo not let SkyFunctions throw errors with missing deps\" (quote from\ncomment in AbstractParallelEvaluator).\n\nA Bazel-on-Skyframe-land example how this bug could occur in practice is PackageFunction's Skyframe hybrid globbing. If an io error is encountered during legacy globbing, the PackageFunction eagerly throws a SkyFunctionException but it has already requested the Skyframe GlobValue deps.\n\nRELNOTES: None\nPiperOrigin-RevId: 182403943"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/8e2ae53375c0a615c53ab4e10f27856025a83fb1", "message": "Include the list of 'excludes' glob patterns in the error message used when an IOException is encountered from a Globber. The io error may have been encountered during evaluation of one of the 'excludes' patterns.\n\nRELNOTES: None\nPiperOrigin-RevId: 182390180"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/97f358412aeb1109afa8a9ea500150fd21aebf3c", "message": "Make comment more readable and correct.\n\nRELNOTES: None\nPiperOrigin-RevId: 182272900"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/6f35e2d81a4d10359d39643bd03887d1b87f4224", "message": "Have UnixGlob explicitly handle RuntimeExceptions encountered by individual glob tasks.\n\nRELNOTES: None\nPiperOrigin-RevId: 182125500"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26926434", "body": "tl;dr - This was done out of a concern of lack of uncaught exception handlers in arbitrary client code of BazelPackageLoader.\r\n\r\n------------\r\n\r\nThis was very briefly discussed during internal code review but not as much as it could have. I'm sorry that the external commit message didn't contain much context; the context was that an internal FileSystem implementation was throwing a RuntimeException in FileSystem#readdir AND the code was not being used by Bazel-proper; it was being used by BazelPackageLoader (that is, as a library).\r\n\r\nYou're right that in isolation \"catch (Throwable e) {\" is a code smell (I have a personal aversion for code that swallows or otherwise mishandles InterruptedExceptions). And you're especially right to be concerned about Errors.\r\n\r\nBut this code in question already doesn't handle non-IOException-Throwables. In such a case, the Throwable will be propagated to the UncaughtExceptionHandler, if any, installed for the Thread in the ThreadPoolExecutor in PackageFactory.\r\n\r\nBazel calls Thread#setDefaultUncaughtExceptionHandler in BlazeRuntime such that uncaught exceptions will hard-crash Bazel. But in our case, the thing using BazelPackageLoader had not set a default uncaught exception handler, so it did not observe the RuntimeException at all!\r\n\r\nNote that the catch-block of GlobVisitor#glob will propagate a non-IOException-Throwables as a RuntimeException (or an Error). This is good and making use of it was the purpose of my commit.\r\n\r\nSo the concern is a situation where a single GlobVisitor has a bunch of glob tasks such that it encounters more than one non-IOException-Throwable and also a IOException, _and_ the final referent of the AtomicReference is the IOException. In this case GlobVisitor#glob will propagate the IOException and the other(s) non-IOException-Throwables get swallowed.\r\n\r\nWith this in mind, the concerns with the code after my commit are\r\n- BazelPackageLoader client without a sensible default uncaught exception handler: status quo is strictly better than it used to be.\r\n- Bazel or BazelPackageLoader client with a sensible default uncaught exception handler: status quo has the issue described above, meaning that the sensible default uncaught exception handler doesn't get used in this corner case.\r\n\r\nSo I think an improvement would be to have both an AtomicReference<IOException> and a AtomicReference<Throwable>. This prevents an observation of an IOException from trampling over the observation of a non-IOException-Throwable. This does not prevent an observation of a RuntimeException from trampling over an observation of an Error. So a further improvement would be to implement the proper priority there. I'll do this in a followup commit.\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26926434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26940293", "body": "yes, that's roughly correct.\r\n\r\none minor correction would be that the threading in question is an implementation detail of UnixGlob, which is an implementation detail of the Bazel-on-Skyframe stuff that both BazelPackageLoader and Bazel itself uses. so i think it's UnixGlob's responsibility to do something sensible here; it's a bit unreasonable to require all transitive users of UnixGlob to handle thread deaths of the internal threads of UnixGlob.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26940293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "asmundak": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/fe1bee5977fe7a4811114daa922a69e1effd85da", "message": "Bug fix: a call to OutputJar::ReserveCdh potentially invalidates the addresses\nreturned by the previous calls of the same method. Keep each such address in a\nseparate scope.\n\nRELNOTES: Crash in OutputJar::Close has been fixed\nPiperOrigin-RevId: 182286718"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rupertks": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/f323fb3043bc782526e0e47933efedea9c5c2ad9", "message": "Suggest 'bazel clean --expunge' to fix Xcode errors in AppleCcToolchain.\n\nRELNOTES: None.\nPiperOrigin-RevId: 182271042"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/1c5a1344bdf0853df9efc5d4574ee0b1f245c2a7", "message": "Disable CommandUsingLinuxSandboxTest in bazel-tests-remote.\n\nRELNOTES: None.\nPiperOrigin-RevId: 180851611"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/c9eace52b90b805a54c3f5515fe086b56c7e8408", "message": "Add new shell test target for CommandUsingLinuxSandboxTest, and remove it from the ShellTests catch-all target.\n\nRELNOTES: None.\nPiperOrigin-RevId: 180836428"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/9f959c574acd01a18d0900e8218e270fd4eb99b6", "message": "Make lib/shell test targets more consistent.\n\nRELNOTES: None.\nPiperOrigin-RevId: 180826643"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "c-parsons": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/8134b9fc140c810d00a91ca9a0313a1e4322ee00", "message": "Migrate Apple providers to abide by Native Declared Provider best practices.\n\nThis has the effect of documenting exposed struct fields on these providers.\n\nRELNOTES: None.\nPiperOrigin-RevId: 182221042"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/ac2666018e6a4ad37cd108ea86715d8a4904bb01", "message": "Propagate depsObjcProvider from loadable_bundle apple_binary targets\n\nThis fixes a regression introduced by some prior refactoring work.\n\nRELNOTES: None.\nPiperOrigin-RevId: 181665047"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/f596113d3015a9e351b4643ef091c6517d5f25c6", "message": "Use an annotation preprocessor to validate SkylarkConfigurationField.\n\nThis is a rollforward -- the previous attempt was rolled back due to incorrectly adding test sources.\nIn addition, the newly checked in tests do not work on Windows, and are thus disabled on the Windows platform. I suspect this is due to a bug in the compile-testing library.\n\nRELNOTES: None.\nPiperOrigin-RevId: 181482589"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/48c21586a6776c91172f2ed5f9a63d0c22e08d16", "message": "Refactor ObjcProvider to abide by Native Declared Provider best practices.\n\nThis has the effect of documenting exposed struct fields on the provider.\n\nRELNOTES: None.\nPiperOrigin-RevId: 181346052"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/5a7d2575d3527a35b8ac541ae09591b6a040f67b", "message": "Expose apple_common.link_multi_arch_binary to Skylark.\n\nThis API mimics the linking logic of apple_binary, and is a step to migrating apple_binary to skylark.\nThis API is *highly experimental* and subject to change.\n\nRELNOTES: None.\nPiperOrigin-RevId: 181215275"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/7ee24c619495a6ec41eaf66140928b9005d09751", "message": "Allow late bound defaults in skylark aspects\n\nRELNOTES: None.\nPiperOrigin-RevId: 180849649"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/260756dcd176ce1e9a90454458eddf20ce4e664f", "message": "Propagate deps' objc providers with AppleLoadableBundle\n\nThis change allows turndown of top-level ObjcProvider propagation by apple_binary via --noexperimental_objc_provider_from_linked.\nios test bundle rules depend on loadable bundle apple_binary, and require the binary's deps' objc providers -- thus this is the only mechanism to propagate these providers.\n\nRELNOTES: None.\nPiperOrigin-RevId: 180824037"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aoeui": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/7ac7b63c658509fd335db6f0149da8e2786c488a", "message": "Codec for Location.\n\n* Moves SingletonCodec to third_party.\n\nPiperOrigin-RevId: 182143153"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/ed7e484ffba634d5d2c8da54eb7fece7f06468b6", "message": "Deletes unused code: ArtifactIdRegistry, ArtifactSerializer / Deserializer.\n\nPiperOrigin-RevId: 181975994"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/c8a8090c55b1541f91b77c2929e4140796aebca4", "message": "Adds FileSystem check to Path.CODEC.serialize.\n\nPiperOrigin-RevId: 181797078"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/c7667ae8d558dfc146e217bbf5e86954592234d1", "message": "Adds a CODECs for Package and PackageValue.\n\nPiperOrigin-RevId: 181624201"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/9694cae29752d205edcf45cb89e37f440eda6b0d", "message": "Codec for BuildConfigurationValue.\n\nPiperOrigin-RevId: 181545835"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/da8fea3689e0fb9cde8142ff80c51a6813b72ed6", "message": "AutoCodec proto marshaller bug fix and support for mutable Map.\n\nPiperOrigin-RevId: 181533491"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/87d1c252ec8ec13aa8178ebd64810a620f74dd28", "message": "Adds a CODEC for CppConfiguration.\n\n* Creates an enum for cpu transformer, which is easier to serialize than an opaque function. This also means moving FakeCPU to avoid introducing a circular dependency.\n* Adds a CODEC to Path using InjectingObjectCodec.\n\nPiperOrigin-RevId: 181445911"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/ecb481d9afad8863d95aa53a24dc9a75bd204e8f", "message": "For InjectingObjectCodec, also forwards dependency to serialize.\n\nPiperOrigin-RevId: 181105886"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/590057a58b67e7aa073e55fc4719914e2bf48e22", "message": "Deletes FakeAutoCodecProcessor.\n\nThis is not needed for bootstrapping, which can be done using the real\nAutoCodecProcessor anyway.\n\nPiperOrigin-RevId: 181099386"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/04e7fd80cf8df79b316d1c858ac33e9db07901b9", "message": "@AutoCodec: allow CONSTRUCTOR strategy to be used with dependency element.\n\nIt's very common for a child to need a dependency that the parent does not.\nThis eliminates the need for a `@AutoCodec.Dependency D unusedDependency'\nconstructor parameter.\n\n* Adds a marshaller for HashCode.\n\nPiperOrigin-RevId: 180989432"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/13b000c575e3fc86bfd0ccce8db89740980d5f15", "message": "Codecs for all non-test Fragment subclasses (except CppConfiguration, handled separately).\n\nPiperOrigin-RevId: 180974083"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/d5d508dcaa3f9ad1cf9d6ad88a4f5024f9d60757", "message": "Enables dependency injection for PUBLIC_FIELD and POLYMORPHIC AutoCodec strategies.\n\nPiperOrigin-RevId: 180954849"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/f475101aaf046a897660fb737d0c444411a3bc15", "message": "Allows @AutoCodec to handle injected deserialization dependencies.\n\n* Adds an interface, InjectingObjectCodec, taking an injected parameter in its deserialize method.\n* Adds the annotation, @AutoCodec.Dependency, that can be used to indicate that a constructor parameter is a dependency instead of a normal parameter.\n\nPiperOrigin-RevId: 180797816"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/e981d20dafc268ff9c1b5e23452e060327a0ace2", "message": "@AutoCodec: proper handling of checked exceptions thrown by constructors.\n\nPiperOrigin-RevId: 180697983"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/d2acedc4ca87156a6aa6f96008652c2070dfd071", "message": "Adds the @AutoCodec.Constructor annotation for selecting constructors.\n\nUses the constructor having the @AutoCodec.Constructor annotation to generate a codec (instead of choosing the first in source code). This annotation is required when a class has more than one constructor.\n\nPiperOrigin-RevId: 180685902"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/6ad05df111478e412ea760b60039224d0497228b", "message": "@AutoCodec: Uses sun.misc.Unsafe to retrieve fields for serialization.\n\nThis is fast (profiles indicate a 9% penalty vs getters) and does not require getters.\n* Also adds a Marshaller for java.util.regex.Pattern.\n* Minor fixes for codecs that were broken by this change.\n\nPiperOrigin-RevId: 180619680"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dkelmer": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/72850745a32c7153408f1da77de96fead4b3ae60", "message": "Add cfg = \"host\" to implicit executable aspect attribute because it is required for all attributes marked executable.\n\nRELNOTES: None\nPiperOrigin-RevId: 182082917"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/0518796f5b9b3580a9fd9140978360f8a38bdcba", "message": "Make android_local_test use robolectric's framework manifest parser.\n\nRELNOTES: None\nPiperOrigin-RevId: 180562543"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/2ef5d2170e0558468b0c0e989b910fbb52e95368", "message": "Add android_local_test rule to Bazel.\n\nThis rule enables testing android_librarys locally in the jvm (as opposed to on a device). To use this rule with robolectric (robolectric.org), add the following to your WORKSPACE file:\n\nhttp_archive(\n  name = \"bazel_android\",\n  url = \"...\",\n)\nload(\"@bazel_android//:setup_robolectric.bzl\", \"setup_robolectric\")\nsetup_robolectric()\n\nand then an android_local_test rule would need to add:\n\"@bazel_android//:robolectric\",\nto its dependencies.\n\nandroid_local_test(\n    name = \"MyTest\",\n    srcs = [\"MyTest.java\"],\n    deps = [\n        \"//java/app:lib\",\n        \"@bazel_android//:robolectric\",\n    ],\n)\n\nRELNOTES[NEW]: New android test rule, android_local_test.\n\nPiperOrigin-RevId: 180438995"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "grswk": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/644ada0444a9db285eb4e6c2511fc9581cc69880", "message": "HOME missing from the action env (despite mentioned in the docs)\n\nIssue #4401\n\nCloses #4437.\n\nPiperOrigin-RevId: 182067976"}], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4478", "title": "docs: Add --workspace_status_command", "body": "Resolves issue #4220", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xingao267": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/bea6712789cd7e70db23674402fb11a175cfc896", "message": "Update pin for bazel-toolchains to latest version\n\nhttps://github.com/bazelbuild/bazel-toolchains/releases/tag/f3b0970\n\nPiperOrigin-RevId: 182058527"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "calpeyser": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/32d8dc9caba84136340e0354656c9d2bd790b21f", "message": "Support array fields in AutoCodec. To do this, introduce\nSerializationCodeGenerator, which is a generalization of Marshaller that\nsupports primitive and array values.\n\nPiperOrigin-RevId: 182053617"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/2919413bf0a826dd30cf6b69bfdb8584e177ee9f", "message": "AutoCodec's constructor strategy recognizes fields in a (transitive)\nsuperclass of the class in question.\n\nPiperOrigin-RevId: 181524469"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/efb3b5926b6d317ff7d91c88d6502d8d0a4fe386", "message": "Genrules do not override c++ toolchain Make variables using the toolchains attribute.\nThis fixes an issue where CC_FLAGS was being overwritten.\n\nPiperOrigin-RevId: 181463694"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "oquenchil": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/80bc160b4534abd411909ab8deb74417e356634c", "message": "Refactor py_wrap_cc to go through CcLibraryHelper.\n\nRELNOTES:none\nPiperOrigin-RevId: 182051418"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/70538b5dfc5bc1ff84aa506f588f26ce8d4421f7", "message": "C++: Fixes linkstamp not compiled with PIC.\n\nRELNOTES:none\nPiperOrigin-RevId: 182044727"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/0819f73a4065fe7e87f665bb3806610c224dfadb", "message": "C++: Updates documentation for cc_library.\n\nRELNOTES:none\nPiperOrigin-RevId: 182033773"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/849cec256c606db47dc179c788f937d7482087ae", "message": "C++: Only call link() in cc_binary when linkCompileOutputSeparately is true.\n\nAlso rename setLinkType() to setStaticLinkType() in CcLibraryHelper to make it clear that we are setting the specific linking type for the static library.\n\nThis is an improved version of https://github.com/bazelbuild/bazel/commit/a705eaa9225ff8a03975c8cb49faa6b2899e398d which was rolled back due to a previous conflicting CL causing problems in the nightly.\n\nRELNOTES:none\nPiperOrigin-RevId: 181746447"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/8d2036106f68251a14371f478ec6ff886fed9398", "message": "Automated rollback of commit c166cd99ce9f72eed522e78d63c93ff410b6dc18.\n\n*** Reason for rollback ***\n\nThis was missing adding LTO files in the cc_embed_data rule.\n\nFixed and added test.\n\n*** Original change description ***\n\nAutomated rollback of commit 67330ad52391ad6562d439f77cc5133a0ea4247d.\n\n*** Reason for rollback ***\n\nBreaks nightly: b/71790513\n\n*** Original change description ***\n\nC++ refactoring: Separate compilation and linking calls to CcLibraryHelper\n\nRELNOTES:none\nPiperOrigin-RevId: 181613477"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/c166cd99ce9f72eed522e78d63c93ff410b6dc18", "message": "Automated rollback of commit 67330ad52391ad6562d439f77cc5133a0ea4247d.\n\n*** Reason for rollback ***\n\nBreaks nightly: b/71790513\n\n*** Original change description ***\n\nC++ refactoring: Separate compilation and linking calls to CcLibraryHelper\n\nRELNOTES:none\nPiperOrigin-RevId: 181457811"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/8b447ed0888ee3ba09f2357d5588e7c1e118e763", "message": "Automated rollback of commit a705eaa9225ff8a03975c8cb49faa6b2899e398d.\n\n*** Reason for rollback ***\n\nRolling back due to previous CL breaking nightly.\n\n*** Original change description ***\n\nRemoves call to CcLibraryHelper.link() in cc_binary.\n\nThis call is unnecessary when the sources of the cc_binary are being built as\nEXECUTABLE or DYNAMIC LIBRARY. The call doesn't do anything, no linking outputs\nare returned.\n\nRELNOTES:none\nPiperOrigin-RevId: 181457495"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/a705eaa9225ff8a03975c8cb49faa6b2899e398d", "message": "Removes call to CcLibraryHelper.link() in cc_binary.\n\nThis call is unnecessary when the sources of the cc_binary are being built as\nEXECUTABLE or DYNAMIC LIBRARY. The call doesn't do anything, no linking outputs\nare returned.\n\nRELNOTES:none\nPiperOrigin-RevId: 181455622"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/91c82b34171542e6c45a9e81dddaf9db0bc185d4", "message": "Removes unnecessary check for LinkTargetType.EXECUTABLE.\n\nThe precondition check in line 1274 makes sure that it has Staticness.STATIC.\nEXECUTABLE has Staticness.DYNAMIC which precludes the checks from ever being\nexecuted.\n\nNO_SQ=Kokoro failing without giving an actual error.\n\nRELNOTES:none\nPiperOrigin-RevId: 181314900"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/67330ad52391ad6562d439f77cc5133a0ea4247d", "message": "C++ refactoring: Separate compilation and linking calls to CcLibraryHelper\n\nRELNOTES:none\nPiperOrigin-RevId: 181169134"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "duggelz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/b30dfcb639f284d5b43973b6e8742e148f438fbe", "message": "Add CI configuration to run tests with Python 3 interpreter\n\nFixes #3872\n\nCloses #3873.\n\nPiperOrigin-RevId: 181644101"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "prebeta": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/a4ac4a154da69927731f9d432913978f6e807a55", "message": "Concatenate reference config files in singlejar\n\nMerge reference.conf files in single jar since [akka will break](https://doc.akka.io/docs/akka/current/general/configuration.html#when-using-jarjar-onejar-assembly-or-any-jar-bundler) if reference.conf files are overwritten.\nThe feature is added to both java and cpp implementations of singlejar to concatenate reference.conf files to keep behaviors consistent. For the cpp implementation, using `OutputJar.ExtraCombiner` in singlejar_main.cc feels less intrusive than adding a new `Concatenator` in the output_jar code.\n\nBazel-dev discussion on the issue is [here](https://groups.google.com/forum/#!topic/bazel-dev/C30dwAPL708).\n\nCloses #4413.\n\nPiperOrigin-RevId: 181622277"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "michajlo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/784db69f81adb869c673682831e538c733c33716", "message": "Stop memoizing Label#hashCode()\n\nBoth members of Label (String & PackageIdentifier) have memoized hash codes so\nthis should be marginally more expensive but probably not noticably so. The\nbenefit is it makes Label objects smaller in certain vm conditions.\n\nAs to why things were the way they were, I believe this is from before\nPackageIdentifier memoized its hashCode.\n\nRELNOTES: None\nPiperOrigin-RevId: 181362077"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/19e42c9936b78b8339e38826a63b1068ad8b46eb", "message": "Consolidate GlobDescriptor functionality\n\nMakes GlobDescriptor directly implement SkyKey and adds custom serialization\nlogic. This lets us narrow visibility and migrate yet another SkyKey away from\nLegacySkyKey.\n\nPiperOrigin-RevId: 180705483"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/11480224", "body": "I think this may causing #224. It looks like AttributeMap#has() checks if a rule has an attribute but not necessarily that any value was specified for it.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/11480224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/23521180", "body": "Sounds right, good catch.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/23521180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "kabakaev": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/0ba8307ff46746864e357d0b7834b3c4247421d0", "message": "fix git.bzl error when outputRoot is in a git repo\n\n`_clone_or_update()` should `git clone` external repositories only if repo is absent. Unfortunately, it may happen that the bazel outputRoot (~/.cache/bazel by default) is a subdirectory of some other git working copy. For example, user may track his whole home directory in git and add `.config` to .gitignore. In that case, it is not enough to check if the cache dir is a git repo. One must check that the cache dir holds a root of a git working copy. In other words, the `.git` folder must be in the repo dir, not on any level above.\n\n* Steps to reproduce\n    ```bash\n    cd ~/.cache\n    git init\n    cd /some/project/that/uses/bazel-git_repository\n    mv WORKSPACE WORKSPACE.orig\n    (echo \"load('@bazel_tools//tools/build_defs/repo:git.bzl', 'git_repository')\" ; cat WORKSPACE.orig) > WORKSPACE\n    bazel --batch build :all || echo \"Ah, there is a bug\"\n    ```\n\nRead on for definitive info.\n\n* clone any project that uses `git_repository`\n    ```bash\n    [arch@archlinux bazelbuild]$ git clone https://github.com/bazelbuild/bazel-watcher.git\n    [arch@archlinux bazelbuild]$ cd bazel-watcher\n    ```\n\n* enable Skylark implementation of `git_repository` as documented in https://github.com/bazelbuild/bazel/issues/1408#issuecomment-276815467\n    ```bash\n    [arch@archlinux bazel-watcher]$ mv WORKSPACE WORKSPACE.orig\n    [arch@archlinux bazel-watcher]$ (echo \"load('@bazel_tools//tools/build_defs/repo:git.bzl', 'git_repository')\" ; cat WORKSPACE.orig) > WORKSPACE\n    [arch@archlinux bazel-watcher]$ grep -v ^# WORKSPACE |head -n4\n    load('@bazel_tools//tools/build_defs/repo:git.bzl', 'git_repository')\n\n    git_repository(\n        name = \"com_github_bazelbuild_bazel_integration_testing\",\n    ```\n\n* (optionally) define custom Bazel `outputRoot` directory (default is ~/.cache/bazel)\n    ```bash\n    [arch@archlinux bazel-watcher]$ rm -rf /tmp/.cache/ ; mkdir /tmp/.cache/\n    [arch@archlinux bazel-watcher]$ export TEST_TMPDIR=/tmp/.cache/bazel\n    ```\n\n* try building the project to make sure everything works as expected\n    ```bash\n    [arch@archlinux bazel-watcher]$ bazel --batch build :all\n    INFO: $TEST_TMPDIR defined: output root default is '/tmp/.cache/bazel' and max_idle_secs default is '15'.\n    Extracting Bazel installation...\n    WARNING: /tmp/.cache/bazel/_bazel_arch/f2207b308c89ea5d32323052637210b1/external/com_github_bazelbuild_bazel_integration_testing/WORKSPACE:1: Workspace name in /tmp/.cache/bazel/_bazel_arch/f2207b308c89ea5d32323052637210b1/external/com_github_bazelbuild_bazel_integration_testing/WORKSPACE (@build_bazel_integration_testing) does not match the name given in the repository's definition (@com_github_bazelbuild_bazel_integration_testing); this will cause a build error in future versions\n    INFO: Analysed target //:go_prefix (6 packages loaded).\n    INFO: Found 1 target...\n    Target //:go_prefix up-to-date (nothing to build)\n    INFO: Elapsed time: 15.088s, Critical Path: 0.05s\n    INFO: Build completed successfully, 1 total action\n    [arch@archlinux bazel-watcher]$ echo $?\n    0\n    ```\n\n* reproduce the issue by placing the `outputRoot` under a git working copy\n    ```bash\n    [arch@archlinux bazel-watcher]$ rm -rf /tmp/.cache/ ; mkdir /tmp/.cache/\n    [arch@archlinux bazel-watcher]$ cd /tmp/.cache/ ; git init\n    Initialized empty Git repository in /tmp/.cache/.git/\n    [arch@archlinux .cache]$ cd -\n    [arch@archlinux bazel-watcher]$ bazel --batch build :all\n    INFO: $TEST_TMPDIR defined: output root default is '/tmp/.cache/bazel' and max_idle_secs default is '15'.\n    Extracting Bazel installation...\n    ERROR: error loading package '': Encountered error while reading extension file 'tools/repositories.bzl': no such package '@com_github_bazelbuild_bazel_integration_testing//tools': Traceback (most recent call last):\n        File \"/tmp/.cache/bazel/_bazel_arch/f2207b308c89ea5d32323052637210b1/external/bazel_tools/tools/build_defs/repo/git.bzl\", line 69\n            _clone_or_update(ctx)\n        File \"/tmp/.cache/bazel/_bazel_arch/f2207b308c89ea5d32323052637210b1/external/bazel_tools/tools/build_defs/repo/git.bzl\", line 44, in _clone_or_update\n            fail((\"error cloning %s:\\n%s\" % (ctx....)))\n    error cloning com_github_bazelbuild_bazel_integration_testing:\n    + cd /tmp/.cache/bazel/_bazel_arch/f2207b308c89ea5d32323052637210b1/external\n    + cd /tmp/.cache/bazel/_bazel_arch/f2207b308c89ea5d32323052637210b1/external/com_github_bazelbuild_bazel_integration_testing\n    + git reset --hard 55a6a70dbcc2cc7699ee715746fb1452788f8d3c\n    fatal: Could not parse object '55a6a70dbcc2cc7699ee715746fb1452788f8d3c'.\n    + git fetch origin 55a6a70dbcc2cc7699ee715746fb1452788f8d3c:55a6a70dbcc2cc7699ee715746fb1452788f8d3c\n    fatal: 'origin' does not appear to be a git repository\n    fatal: Could not read from remote repository.\n\n    Please make sure you have the correct access rights\n    and the repository exists.\n    ERROR: error loading package '': Encountered error while reading extension file 'tools/repositories.bzl': no such package '@com_github_bazelbuild_bazel_integration_testing//tools': Traceback (most recent call last):\n        File \"/tmp/.cache/bazel/_bazel_arch/f2207b308c89ea5d32323052637210b1/external/bazel_tools/tools/build_defs/repo/git.bzl\", line 69\n            _clone_or_update(ctx)\n        File \"/tmp/.cache/bazel/_bazel_arch/f2207b308c89ea5d32323052637210b1/external/bazel_tools/tools/build_defs/repo/git.bzl\", line 44, in _clone_or_update\n            fail((\"error cloning %s:\\n%s\" % (ctx....)))\n    error cloning com_github_bazelbuild_bazel_integration_testing:\n    + cd /tmp/.cache/bazel/_bazel_arch/f2207b308c89ea5d32323052637210b1/external\n    + cd /tmp/.cache/bazel/_bazel_arch/f2207b308c89ea5d32323052637210b1/external/com_github_bazelbuild_bazel_integration_testing\n    + git reset --hard 55a6a70dbcc2cc7699ee715746fb1452788f8d3c\n    fatal: Could not parse object '55a6a70dbcc2cc7699ee715746fb1452788f8d3c'.\n    + git fetch origin 55a6a70dbcc2cc7699ee715746fb1452788f8d3c:55a6a70dbcc2cc7699ee715746fb1452788f8d3c\n    fatal: 'origin' does not appear to be a git repository\n    fatal: Could not read from remote repository.\n\n    Please make sure you have the correct access rights\n    and the repository exists.\n    INFO: Elapsed time: 4.974s\n    FAILED: Build did NOT complete successfully (0 packages loaded)\n    ```\n\n* let's find out why it failed\n    ```bash\n    [arch@archlinux bazel-watcher]$ grep rev-parse /tmp/.cache/bazel/_bazel_arch/f2207b308c89ea5d32323052637210b1/external/bazel_tools/tools/build_defs/repo/git.bzl\n        if ! ( cd '{dir}' && git rev-parse --git-dir ) >/dev/null 2>&1; then\n    [arch@archlinux bazel-watcher]$ cd /tmp/.cache/bazel/_bazel_arch/f2207b308c89ea5d32323052637210b1/external/com_github_bazelbuild_bazel_integration_testing\n    [arch@archlinux com_github_bazelbuild_bazel_integration_testing]$ git rev-parse --git-dir\n    /tmp/.cache/.git\n    [arch@archlinux com_github_bazelbuild_bazel_integration_testing]$ cd -\n    ```\n\n* let's fix git.bzl\n    ```bash\n    [arch@archlinux bazel-watcher]$ sed -i -E 's/git rev-parse --git-dir/[[ \"$(git rev-parse --git-dir)\" == '.git' ]]/' /tmp/.cache/bazel/_bazel_arch/f2207b308c89ea5d32323052637210b1/external/bazel_tools/tools/build_defs/repo/git.bzl\n    [arch@archlinux bazel-watcher]$ grep rev-parse /tmp/.cache/bazel/_bazel_arch/f2207b308c89ea5d32323052637210b1/external/bazel_tools/tools/build_defs/repo/git.bzl\n    if ! ( cd '{dir}' && [[ \"$(git rev-parse --git-dir)\" == .git ]] ) >/dev/null 2>&1; then\n    ```\n\n* make sure that Bazel works again\n    ```bash\n    [arch@archlinux bazel-watcher]$ ls -a /tmp/.cache/bazel/_bazel_arch/f2207b308c89ea5d32323052637210b1/external/com_github_bazelbuild_bazel_integration_testing\n    .  ..\n    [arch@archlinux bazel-watcher]$ bazel --batch build :all\n    INFO: $TEST_TMPDIR defined: output root default is '/tmp/.cache/bazel' and max_idle_secs default is '15'.\n    Error: corrupt installation: file '/tmp/.cache/bazel/_bazel_arch/install/f20169627a8110e2cc3d005319e97c94/_embedded_binaries/embedded_tools/tools/build_defs/repo/git.bzl' modified.  Please remove '/tmp/.cache/bazel/_bazel_arch/install/f20169627a8110e2cc3d005319e97c94' and try again.\n    [arch@archlinux bazel-watcher]$ touch -m -t 202712120101 /tmp/.cache/bazel/_bazel_arch/install/f20169627a8110e2cc3d005319e97c94/_embedded_binaries/embedded_tools/tools/build_defs/repo/git.bzl\n    [arch@archlinux bazel-watcher]$ bazel --batch build :all\n    INFO: $TEST_TMPDIR defined: output root default is '/tmp/.cache/bazel' and max_idle_secs default is '15'.\n    WARNING: /tmp/.cache/bazel/_bazel_arch/f2207b308c89ea5d32323052637210b1/external/com_github_bazelbuild_bazel_integration_testing/WORKSPACE:1: Workspace name in /tmp/.cache/bazel/_bazel_arch/f2207b308c89ea5d32323052637210b1/external/com_github_bazelbuild_bazel_integration_testing/WORKSPACE (@build_bazel_integration_testing) does not match the name given in the repository's definition (@com_github_bazelbuild_bazel_integration_testing); this will cause a build error in future versions\n    INFO: Analysed target //:go_prefix (6 packages loaded).\n    INFO: Found 1 target...\n    Target //:go_prefix up-to-date (nothing to build)\n    INFO: Elapsed time: 13.318s, Critical Path: 0.07s\n    INFO: Build completed successfully, 1 total action\n    [arch@archlinux bazel-watcher]$ ls -a /tmp/.cache/bazel/_bazel_arch/f2207b308c89ea5d32323052637210b1/external/com_github_bazelbuild_bazel_integration_testing\n    .  ..  AUTHORS  bazel_integration_test  bazel_integration_test.bzl  bazel_version.bzl  BUILD  .ci  CODEOWNERS  CONTRIBUTING.md  .git  .gitignore  go  java  javatests  LICENSE  README.md  tools  WORKSPACE\n    ```\n\nCloses #4358.\n\nPiperOrigin-RevId: 181151078"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chengniansun": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/7bde688a21b781caa666fe2bebe4482cf987270b", "message": "Relax the assertion on the inferred resource type. Now we only require that the\nresource type should have a (public) close() method.\n\nThe old version requires the resource type implements AutoCloseable. When the classpath provided to Desugar has some problems, the resource type may not implement AutoCloseable, though it has the close() method.\n\nRELNOTES:n/a.\nPiperOrigin-RevId: 180950815"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kush-c": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/5a0857e54f96ab6cf763902e27ba79bc203d38d3", "message": "Change the default for value for experimental_skyframe_native_filesets now that most Google builds have it set to true.\n\nRELNOTES: None\nPiperOrigin-RevId: 180578926"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ilya-biryukov": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/e99279bcce475249e58543a5330fa35e59acd7e8", "message": "Use -no-canonical-prefixes when -fno-canonical-system-headers is not available\n\nBazel's autoconf script adds -fno-canonical-system-headers to gcc's crosstool\nin order to get output in '.d' files that can be properly verified by bazel.\nTo workaround the same issue in clang we have to use a different flag:\n'-no-canonical-prefixes'.\n\nThe same issue arises with clang if it resides in the configured repository\n(e.g., when it is downloaded via 'repository_ctx.download').\n\nPiperOrigin-RevId: 180552155"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/defba586cde9435478d13d33225c2c643b58268f", "message": "Use relative paths for repository-local files in C++ crosstool\n\nGenerated crosstool previously used absolute paths for everything.\nHowever, when using a compiler, local to the repository (e.g., downloaded via\n'repository_ctx.download'), relative paths should be used to avoid absolute\npaths that point into the crosstool repository.\n\nSpecifically, this patch contains the following changes:\n1. Replaces absolute paths in 'cxx_builtin_include' with relative if includes\n   point inside the repository.\n2. Removes the '-B<compiler-dir>' from 'compiler_flag' and 'linker_flag'\n   sections when compiler is inside the repository.\n\nPiperOrigin-RevId: 180540359"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mhlopko": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/6220c72b27261fc70e63f635a86b528688cd3016", "message": "Add libstdc++-static to the fedora dockerfile\n\nThis fixes //src/test/docker/test_cc_configure-fedora23-fastbuild after\nhttps://github.com/bazelbuild/bazel/commit/2aeaeba66857c561dd6d63c79a213f1cabc3650d.\n\nRELNOTES: None.\nPiperOrigin-RevId: 180535604"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21036810", "body": "Fix flying in in 1 minute :)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21036810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25278354", "body": "Yes. But only recently we reached the state where we primarily use action_configs for all c++ actions. So there is progress, it just takes time. And the actual migration of crosstools hasn't yet started.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25278354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25642171", "body": "Indeed!! Good catch! Do you want to give it a try in a pull request?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25642171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25825427", "body": "Let's break unescaped %, we'll put that into relnotes so people know.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25825427/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25825527", "body": "The only sane way IMO is to have another env var to override this check completely.\r\n\r\nI guess you're starting to see why I gave up on improving this pile of hacks and instead plan to design something more robust? :)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25825527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "auke-": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/63a8e1a9c2eb887c45e4ec37c7a858b004acd979", "message": "Don't output duplicate srcs when jar and sourcejar are the same\n\nWhen a source jar is used as maven_jar the filegroup in the generated BUILD.bazel contains duplicate entries. This results in an error when the jar is used as a dependency (... is duplicated in the 'srcs' attribute of rule 'file').\n\nThis change simply doesn't write the duplicate entry to the BUILD.bazel file when  the filenames are equal.\n\nCloses #4333.\n\nPiperOrigin-RevId: 180534960"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rongjiecomputer": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4494", "title": "Remove dead ConvertPathList", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4493", "title": "Use std::to_string for non-mingw/cygwin", "body": "`std::to_string` is faster than `std::stringstream`.\r\n\r\nThis issue only presents in older versions of Mingw/Cygwin. My Mingw64 GCC 7.1.0 has `std::to_string`. I can't determine the exact version of GCC that fixed the issue.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4491", "title": "Optimize GetEscapedArgument", "body": "If `argument` does not contain `' '` and `'\"'` and `escape_backslash` is false (i.e: no escaping needed), `escaped_arg` will allocate memory exactly once only.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4489", "title": "Optimize GetRandomStr", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4488", "title": "Ignore VSCode files", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4487", "title": "[MSVC] Don't declare environ when it is already defined as macro", "body": "In MSVC, `environ` is a macro (from `stdlib.h`):\r\n\r\n```cpp\r\nextern char***               __p__environ(void);\r\n#define _environ           (*__p__environ())\r\n#define environ _environ\r\n```\r\n\r\nSo `extern char **environ;` will be expanded as `extern char **(*__p_environ());` which is invalid.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4486", "title": "Use linear search when there are < 20 items to match", "body": "Better performance and smaller binary size than `std::set`. We can easily change to `std::binary_search` if the list grows > 20.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "buchgr": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4481", "title": "remote: Rewrite the HTTP caching client in Netty.", "body": "* This puts in the foundation of HTTP/2 support for remote caching.\r\n* Allows us to remove the Apache HTTP library as a dependency, reducing\r\nthe Bazel binary size by 1MiB.\r\n\r\nI experimentally determined that remote caching using TLS is on the\r\norder of ~10% faster. I attribute this to the native boringssl\r\nimplementation that Netty uses.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21713377", "body": "Thanks for correcting!", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21713377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26398380", "body": "Glad you like it! I don't think we support relative paths. I am not sure if this is something other Bazel flags support? I ll open a bug and we can discuss.\r\n\r\nI have just renamed the --auth_ flags (see 8a7c63e76320b1ae8eafc1a44d82d1214e1bfdb0, but no worries the old ones keep working for a while). You can also specify --google_default_credentials (or previously --auth_enabled) and authenticate using `gcloud login`.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26398380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/122153191", "body": "nit: BlazeRuntimeTest ... we don't seem to use the *UnitTest suffix elsewhere?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/122153191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/122154110", "body": "I think it would be worthwhile to add a test with a input list size > 1. To 1) test matching works over a list, 2) output is correctly formatted.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/122154110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/122154450", "body": "nit: If for nothing but consistency, make this a one line comment?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/122154450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/122155874", "body": "You could just use `m.group()` here, which would be equivalent to `--client_env=m.group(1)=`. So this code could be simplified to\r\n\r\n```\r\nbuf.append(m.group()).append(\"__private_value_removed__\").\r\n```", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/122155874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "andyscott": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4476", "title": "Fix a really tiny typo", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jart": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4471", "title": "Update java_import_external best practices", "body": "Our best practices have evolved to recommend HTTP. There's also now a\r\nnote that should help maintainers do the right thing.\r\n\r\nhttps://github.com/bazelbuild/bazel/issues/4425#issuecomment-358230243", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/3946", "title": "Open source Bazel Maven Config Generator website", "body": "This directory contains the source code to a website that runs on [Google Apps Script](https://script.google.com). It crawls Maven POM metadata to generate `WORKSPACE` configs using [`java_import_external`](https://github.com/bazelbuild/bazel/blob/062fe70189fc622285833311d241021be313680b/tools/build_defs/repo/java.bzl).\r\n\r\nPlease watch the [demo video](https://www.youtube.com/watch?v=xdMDuhJTKMI) on YouTube.\r\n\r\n### Features\r\n\r\n- Defines all transitive relationships\r\n- Resolves diamond conflicts by bumping versions\r\n- Calculates SHA256 (slow due to Apps Script API issue)\r\n- Documents `licenses` and heuristically categorizes them\r\n- Heuristics for `neverlink` (provided) jars\r\n- Source jars and optional dependencies\r\n- Mirrors jars to Google Drive\r\n- Adds iBiblio URLs if 200 OK\r\n\r\n### Verbosity\r\n\r\nThe huge config is good because it makes builds deterministic, highly available, and fast because Bazel won't need to BFS HTTP POMs each build. Even Java projects with hundreds of transitive dependencies can expect `bazel fetch //....` to take seconds.\r\n\r\nYou'll also see all the mysterious code from the Internet that you're running on your machine. For example, you might discover Apache Commons Collections 3.2.1 on the classpath, in which case it's game over if anything in the JVM is deserializing. So the verbosity might actually save you from ending up in the same boat as Equifax. See [Operation Rosehub](https://opensource.googleblog.com/2017/03/operation-rosehub.html) to learn more.\r\n\r\n### Imperfection\r\n\r\nAnother reason why the generated config is huge is because it only gets you 90% there. You will need to make subtle adjustments after using the tool. See the README in the PR to learn more.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/18499293", "body": "\ud83d\udc4d A+++++ \n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/18499293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/19956397", "body": "@aehlig This change broke compiling Bazel from source for me on my Goobuntu workstation. The workaround I found was non-obvious. \r\n\r\n```sh\r\nPROTOC=third_party/protobuf/3.0.0/protoc-3.0.0-linux-x86_64.exe \\\r\n  GRPC_JAVA_PLUGIN=third_party/grpc/protoc-gen-grpc-java-0.15.0-linux-x86_64.exe \\\r\n  ./compile.sh\r\n```\r\n\r\nCC: @dslomov", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/19956397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53240295", "body": "Is this safe? Wouldn't the build break if a new \"latest\" version is uploaded?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53240295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53240864", "body": "Are you sure this works? Doesn't setting the `--dependency_mode` flag mean you're also required to use `--entry_point=goog:foo.main` instead of `--closure_entry_point=foo.main`?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53240864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53240886", "body": "This should have been removed.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53240886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53241011", "body": "Why support name aliases? Why not require that users enter the canonical name documented by the Closure Compiler CLI?\n\n```\n --language_in VAL                  : Sets what language spec that input\n                                      sources conform. Options: ECMASCRIPT3,\n                                      ECMASCRIPT5, ECMASCRIPT5_STRICT,\n                                      ECMASCRIPT6 (default), ECMASCRIPT6_STR\n                                      ICT, ECMASCRIPT6_TYPED (experimental)\n```\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53241011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53243278", "body": "It's undocumented behavior though. Are the Bazel devs OK with propagating undocumented (or possibly deprecated) behavior to new code?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53243278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/61866272", "body": "Done. But shortened so it doesn't break the navigation flow.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/61866272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "mouadino": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4470", "title": "Make __init__.py files creation optional", "body": "Introduce a new attribute to py_binary and py_test to control whether to\r\ncreate `__init__.py` or not.\r\n\r\nFixes https://github.com/bazelbuild/rules_python/issues/55\r\n\r\nTODO:\r\n\r\n- [x] Sign CLA (waiting for my company input on how to proceed).\r\n- [x] Test to see if my original reported issue is fixed with this change, especially how this works with https://github.com/bazelbuild/rules_python#importing-pip-dependencies.\r\n- [ ] Add automated tests, although I am not sure how to do it, any advice is much appreciated.\r\n- [ ] Understand why flipping the new flag doesn't create/delete `__init__.py` files, b/c currently running clean is required after flipping the flag.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lightyang": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4304", "title": "support action env in runfiles generation, cpp compile and cpp link", "body": "So that we can pass in LIBRARY_PATH, etc.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "akira-baruah": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4253", "title": "Give the Bazel server process a more appropriate name", "body": "See #4227.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/3855", "title": "Integrate abseil-py to replace deprecated gflags with absl.flags", "body": "Fixes #3816 (Python 3 incompatibility issue). May also help address:\r\n* #1580 \r\n* #3871 \r\n* #3872 \r\n* #4097 \r\n* bazelbuild/rules_docker#57\r\n\r\nAs of version 3.1.1, [python-gflags](https://pypi.python.org/pypi/python-gflags) has been marked obsolete, preferring the `flags` subpackage of [absl-py](https://pypi.python.org/pypi/absl-py/0.1.1) (a.k.a. [abseil-py](https://github.com/abseil/abseil-py)) as a replacement.\r\n\r\nI've followed existing convention and placed all source files from the `absl-py` PyPI tarball inside `third_party/py/abseil/` and subsequently removed the existing `third_party/py/gflags/` package.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/3671", "title": "Add -v, --version flag", "body": "Attempts to resolve issue #3599 by adding conventional `-v` and `--version` flags to the Bazel client, calling `bazel version` under the hood.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hchauvin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4243", "title": "sha256 python tool: stream instead of reading whole file beforehand", "body": "This is a rather small change to a Python tool used to produce a SHA256 hash.  Currently, the whole file is loaded in memory before computing the hash, which causes problem when large files are processed.  For instance, github.com/bazelbuild/rules_docker uses it to compute the hash of Docker images, which can be multiple GB in size.  This PR avoids the tool to cause issues in a limited-memory environment.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mikelikespie": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4064", "title": "Adding toolchain support for j2objc protos", "body": "Ran into an issue where it wasn't possible to add protos to blacklist for j2objc toolchain and was getting duplicate symbols for the descriptor protos.\r\n\r\nThis change should make it consistent with the other proto rules which use a toolchain. Was able to remove bespoke and uncustomizable proto blacklist for j2objc.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4058", "title": "Fixing issue with external j2objc protos", "body": "The output files are created without a repository, but the expected\r\nfilenames have them\r\n\r\nThis resolves issues when having a proto_library from an external build\r\nfile.\r\n\r\nThis seems to be a regression, so maybe should go into the 0.8.0 branch?\r\n\r\nNote: Work at Square and we have a signed CLA with google\r\n\r\n\r\nNote, without this fix we get errors like\r\n\r\n```\r\nERROR: /private/var/tmp/_bazel_lewis/4a25cfc2b9b758043413ac58525ef6b4/external/AllProtos/BUILD.bazel:27:1: output 'external/AllProtos/squareup/objc/objc.j2objc.pb.m' was not created\r\nERROR: /private/var/tmp/_bazel_lewis/4a25cfc2b9b758043413ac58525ef6b4/external/AllProtos/BUILD.bazel:27:1: output 'external/AllProtos/squareup/objc/objc.j2objc.pb.h' was not created\r\n```", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/118531641", "body": "I had issues moving this to a Support class since this method is used by both BundleSupport and IntermediateArtifacts.\r\n\r\nWith regards to validation. I think the modulemap langauge supports basically any arbitrary string as a module name, however one can't use \"@import\" syntax if uses a special objective-c character, so not sure if we have to validate. I'll add a comment to that extent.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/118531641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "onponomarev": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/3929", "title": "Fixed building with a custom toolchain fails on OS X #3859", "body": "cc-compiler-darwin depends on osx_wrapper and we should refer to it in dependencies. Otherwise only standalone builds will work.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "treuherz": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/3850", "title": "Make pkg defs Python 2/3 compatible", "body": "Use BytesIO instead of StringIO, change strings to bytes throughout the\r\narchiving code. Needed to import from Six in a couple of places.\r\n\r\nAs discussed in #1580 ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jerrymarino": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/3712", "title": "Implicit HeaderMaps", "body": "Request for feedback on an implementation of C++ HeaderMaps in Bazel.\r\n\r\nA HeaderMap is a data structure that allows the compiler to lookup included\r\nheaders in constant time.\r\n\r\nTraditionally, the compiler has to parse a large string of `iquote` includes,\r\nand then search these directories for a given header. This is slow for many\r\nreasons.\r\n\r\nThe protocol of HeaderMap is implemented within compilers. Please find the\r\nLexer implementation in Clang.\r\nhttps://clang.llvm.org/doxygen/HeaderMapTypes_8h.html\r\nhttps://clang.llvm.org/doxygen/HeaderMap_8cpp_source.html\r\n\r\nUse case:\r\n\r\nI'm seeing a massive increase in build performance by using this. It cut my\r\nclean build time in half.\r\n\r\nPerformance data:\r\n\r\nBuild time before HeaderMap:\r\n```\r\nTarget //Pinterest/iOS/App:PinterestDevelopment up-to-date:\r\nbazel-bin/Pinterest/iOS/App/PinterestDevelopment.ipa\r\n____Elapsed time: 373.588s, Critical Path: 18.86s\r\n```\r\n\r\nBuild time after header maps on the entire project:\r\n```\r\nTarget //Pinterest/iOS/App:PinterestDevelopment up-to-date:\r\nbazel-bin/Pinterest/iOS/App/PinterestDevelopment.ipa\r\n____Elapsed time: 188.971s, Critical Path: 17.11s\r\n```\r\n\r\nAdditionally, this solves the problem of having namespaced headers which is used\r\nin CocoaPods all over. Using a namespace makes includes more clear since it is\r\neasier for the user to distinguish where the header was derived.\r\n\r\nImplementation:\r\n\r\nAt the ObjC level, headermaps are created with a namespace of the given target.\r\nIn `objc_library` it is possible for the user to override the value of the\r\nnamespace via the new attribute, `header_namespace`.\r\n\r\nBy using 2 headermaps the headersearchs are most efficient: a headermap for the\r\ncurrent target, and a header map with namespaced includes.\r\n\r\nUsers can include headers from ObjC targets in the convention of\r\n`Namespace/Header.h`. Projects that don't use namespacing should see benefits as\r\nwell: includes of the form `Header.h` will be read from the headermap.\r\n\r\n`HeaderMapInfo` contains all of the transitive info for dependent header maps,\r\nand is merged together into a single map. This yields much better performance\r\nthan multiple headermaps.\r\n\r\nThis is my first PR to the Bazel repo, so any suggestions or feedback is greatly\r\nappreciated!\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "srikalyan": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/2791", "title": "Added support to expose imports for python to Skylark.", "body": "Fixes #2617. Please let me know if you need anything else.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kchodorow": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/46686832", "body": "It's already there in the instructions:\n\n$ touch tools/genrule/genrule-setup.sh\n\n  Create tools/genrule/BUILD and add the following to it:\n\n```\n  exports_files([\n      \"genrule-setup.sh\",\n  ])\n```\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/46686832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/46700508", "body": "@hanwen Done.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/46700508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/82604676", "body": "I've reproduced, looking into it...\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/82604676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/82608697", "body": "This is a byproduct of any extremely hacky thing we're doing in compile.sh.  If you delete the file fromhost/BUILD and re-run compile.sh, it should work.\n\nI'll work on fixing the compile script.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/82608697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/83045942", "body": "For future reference, this should now be fixed in the compile script, too (fixed by https://github.com/google/bazel/commit/bdc24960f552886126cb03809ddd0de31a3ddc01).\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/83045942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85584393", "body": "Thanks, should all be fixed.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85584393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85587303", "body": "Thanks, adding it to the install reqs.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85587303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85588225", "body": "Can you be more specific?  \"I want to see an app that that has... at least x java_\\* rules... can serve a webpage... is a mobile app... has external dependencies... whatever?\"  An example program that you think is about right?  (e.g., a todo list? libgdx?)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85588225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85622985", "body": "It looks like head might not support the -n1 format in Yosemite?  Can you try running:\n\n```\n$ head --help\n```\n\nand paste the output here?  (Please paste the text, not a screenshot, if possible.)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85622985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85623478", "body": "What OS are on you on?  Did you follow the [install instructions](http://bazel.io/docs/install.html) for downloading libarchive?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85623478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85624389", "body": "Thanks, correct links are https://github.com/google/bazel/blob/master/tools/build_rules/py_rules.bzl and https://github.com/google/bazel/tree/master/examples/py.  I'll update the FAQ.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85624389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85710181", "body": "We've actually already added this to the list at http://bazel.io/docs/install.html.  \n\nIf you'd like to contribute patches in the future, please check out http://bazel.io/docs/contributing.html, we can't merge in Github pull requests, unfortunately.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85710181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85710652", "body": "The title of the README now links to bazel.io.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85710652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85711453", "body": "Thanks, but this has actually already been fixed in the main tree.\n\nIf you'd like to contribute patches in the future, please check out http://bazel.io/docs/contributing.html.  We can't merge in Github pull requests, unfortunately.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85711453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86102251", "body": "Can you paste the entire command you're running + bazel output?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86102251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86157585", "body": "Thanks!  \n\n--verbose_failures will give you the actual command line that caused the error, which you probably don't care about in this case (we know it's the -client flag).\n\nexternal/local-jdk is the autogenerated path Bazel uses as a symlink to the local JDK.\n\nI don't know enough about JVMs to be able to answer what we should do about -client, @damienmg?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86157585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86158464", "body": "What kind of system is this running on?  Can you paste the output of `unzip -v $(which bazel)`?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86158464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86164292", "body": "I think all of the commands are correct now.  Thank you for the heads-up.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86164292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86181315", "body": "What system are you on?  Can you paste the output of running:\n\n```\n$ g++ -v\n```\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86181315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87255684", "body": "I have no idea what you're talking about, can you clarify?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87255684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/88928447", "body": "Given our somewhat funky export process, the third_party/BUILD change had to be done in a separate commit, but it should be updated now.  I had some issues testing it, though, let me know if it actually works for you.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/88928447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90754406", "body": "If I run it on a clean repo, I get:\n\n```\n$ output/bazel build ...\nERROR: /Users/kchodorow/gitroot/bazel/output/classes/BUILD:86:1: //output/classes:srcs: invalid label 'autovalue/shaded/com/google/common/auto/common/MoreElements$1.class' in element 72 of attribute 'srcs' in 'filegroup' rule: invalid target name 'autovalue/shaded/com/google/common/auto/common/MoreElements$1.class': target names may not contain '$'.\nERROR: package contains errors: output/classes.\nERROR: error loading package 'output/classes': Package 'output/classes' contains errors.\nINFO: Elapsed time: 1.811s\n```\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90754406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90755989", "body": "Yeah, I'm not sure if this is actually an autovalue problem, Fare.  I don't think output/ should have any BUILD files in it.  It's generated by compile.sh.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90755989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91010275", "body": "I'm working on a fix for this, I'll update this issue once it's in.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91010275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91280330", "body": "It's so you don't need a symlink to tools/ into your project directory (see bazel.io/blog/2015/04/06/Simplified-Workspace-Creation.html).  compile.sh won't modify it after creating it, so feel free to make it an empty file if you prefer the tools/ symlink.  Note that every time you compile your tools will still be updated globally, though.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91280330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91298664", "body": "Good idea, that way it can contain exactly the directories we want and nothing extra.  I actually removed base_workspace in that commit, let me just add it back... (and you'll have to modify .bazelrc when you recompile).\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91298664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91376839", "body": "Whoops, didn't mean to close.  Not sure if 32-bit compile actually works now, but there is a 32-bit protoc in https://github.com/google/bazel/tree/master/third_party/protobuf now.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91376839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91577296", "body": "Reopening.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91577296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91641166", "body": "When did you download/build bazel?  I pushed a fix for using location+//external yesterday: https://github.com/google/bazel/issues/90.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91641166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/92423181", "body": "```\n$ bazel-bin/src/bazel help completion\nBAZEL_COMMAND_LIST=\"build canonicalize-flags clean help doc_ext info analyze-profile query run shutdown test version\"\nBAZEL_INFO_KEYS=\"\nworkspace\ninstall_base\noutput_base\nexecution_root\noutput_path\n...\n--noexperimental_external_repositories\n--force_experimental_external_repositories\n--noforce_experimental_external_repositories\n\"\n```\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/92423181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/92423796", "body": "The latest code on Github (on my desktop).\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/92423796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/11339787", "body": "I'd like it to be mandatory eventually, but I agree with you for now.  I'm working on a tool to generate a WORKSPACE file from a pom.xml, once that's available it seems reasonable to flip this to mandatory.  I'll remove the `mandatory()` on Tuesday.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/11339787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/11408764", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/11408764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/15599825", "body": "It is, indeed, different internally.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/15599825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/15747664", "body": "Good catch!\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/15747664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/17920316", "body": "It's been rolled back. However, when it's rolled forward, `-I` can be specified with `-I../foo`.  Which isn't gorgeous, but it does have the benefit of working the same whether the repository is local or remote.\n\nWe would love to get rid of genfiles and bin for local repos, too, but there's a ton of internal cleanup blocking that.  Getting rid of them for external repos is a feature, not a bug.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/17920316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/17934163", "body": "> Thanks! ../foo as in -I../<reponame>/path/to/dir?\n\nExactly.\n\n> As an aside, it would be really nice to minimize the number of places I have to hard code a repository name, but I get that that's impractical/unfeasible.\n\nI think the problem here is that copts/linkopts/lots of other places should really understand $(location)s, so you can just refer to those and not have to hard code paths.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/17934163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/22142565", "body": "Indeed, thanks.  I've sent a fix.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/22142565/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/52766182", "body": "Please change to \"# support\" (1 space between # and the comment).\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/52766182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/52766213", "body": "//tools/build_defs/scala/test/...\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/52766213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50145146", "body": "refactor candidate?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50145146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50145197", "body": "Weird spacing around here.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50145197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50145395", "body": "Remove annotation.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50145395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50145493", "body": "Please add license.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50145493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50145637", "body": "As a style thing, we put a space after the closing ).\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50145637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50145764", "body": "This is duplicating the code in HttpDownloader, might as well move them both into ProxyHelper.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50145764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50145844", "body": "Do these need to be set for both protocols?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50145844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50282632", "body": "For now you could create an instance and pass it in via the relevant constructors in https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/bazel/BazelRepositoryModule.java#L82-94.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50282632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50767835", "body": "Do not create a URL.  The URL constructor does a DNS resolution, which is very slow.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50767835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50767921", "body": "Please add a unit test for this method.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50767921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50768089", "body": "Please add.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50768089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50853068", "body": "Oh, good point.  You can leave it untested.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50853068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53220244", "body": "Still need to set for both http & https.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53220244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/70659137", "body": "Thanks for trying to match the style, but just use C++ headers.  Remove the redundant errno.h. \n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/70659137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/72072951", "body": "Your else's content is the same as the if's.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/72072951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/72073282", "body": "Use positive conditions when possible (e.g., if reqOutputDir.isEmpty()) as it's more readable, especially since requestBuildOutputDir is non-empty if-and-only-if reqWorkspaceOutputDir is non-empty.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/72073282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/72074254", "body": "Wait, do you want people to be able to specify --output_dir and one of --build_file or --workspace_file?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/72074254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/72142087", "body": "With the current logic, `generate_workspace --workspace_file=whatever --output_dir=whatever` wouldn't throw an error (`options.buildOutputFile.isEmpty() && options.workspaceOutputFile.isEmpty()) != options.outputDir.isEmpty()` -> `(true && false) != false` -> `false != false`.  \n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/72142087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/72143860", "body": "Might as well add to https://github.com/bazelbuild/bazel/blob/master/site/docs/external.md now.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/72143860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/100337650", "body": "Please make \"cannot\" one word.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/100337650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/100091547", "body": "s/install/installed/\r\n\r\nAlso, `bazel version` instead of `$ bazel` (don't include the $ for inline snippets).", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/100091547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/100091828", "body": "s/install/installed/\r\n\r\nAlso, `bazel version` instead of `$ bazel` (don't include the $ for inline snippets).", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/100091828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/100092459", "body": "This seems like useful info to have.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/100092459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/100096423", "body": "I think you need a `!`.  Say I have `requestUrl = URL(\"http://mybiz.com\")` and `export NO_PROXY=mybiz.com`.  Then then this _would_ create a proxy, right?\r\n\r\nAlso, I think you need to use `endsWith`, not `contains`.   According to https://www.gnu.org/software/wget/manual/html_node/Proxies.html:\r\n\r\n> *no_proxy*\r\n> This variable should contain a comma-separated list of domain extensions proxy should not be used for. For instance, if the value of no_proxy is \u2018.mit.edu\u2019, proxy will not be used to retrieve documents from MIT.\r\n\r\nIn the example above, suppose `NO_PROXY=biz`, then it wouldn't use a proxy for http://mybiz.com.\r\n\r\nFinally, please indent the contents of the if by 2 spaces and add spaces around the for-loop's =, <, and after each ; (to match the coding style of the rest of the file).", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/100096423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/101049911", "body": "Ah, I see. Please just return Proxy.NO_PROXY directly there, then, for clarity.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/101049911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/103989696", "body": "AFAICT, if we have any links pointing at .mds, they are just wrong and should just 404. \r\n\r\nDoes this actually work?  You're not usually going to be in a place where a relative link to docs/be/docker.html actually resolves to /versions/master/docs/be/docker.html.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/103989696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/103991890", "body": "But why should anyone be going to docs/be/docker.md?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/103991890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "hanwen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/46693426", "body": "I think it's better to have under example/ or test/ subdir in the master branch, then the tree is self-contained.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/46693426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85653602", "body": "See https://github.com/google/bazel/blob/master/src/main/cpp/blaze.cc#L1532\n\nI suppose we could hardcode some other threshold, but I'm not sure what it should be.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85653602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85653832", "body": "these should be fixed now.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85653832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85654449", "body": "yeah. It'll probably work if you replace it with a binary that executes correctly on your machine (it should be from protobuf 2.5.0).\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85654449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86121300", "body": "side note: we need to document what information people should supply on bugreports.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86121300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86154619", "body": "No special reason, we just forgot about i686.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86154619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/88738448", "body": "https://github.com/google/bazel/commit/d52d32ef0ecfc0d784ec2fd0f1b4dcbbc03aa389\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/88738448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/88739961", "body": "Bazel doesn't have special support for incremental compilers, and for correctness, we usually prefer non-incremental ones. \n\nFor javac, having a hot JVM is very important. This may also be the case for Scala (in which case, somehting like nailgun would be a useful technology). In any case, we'd want to have something working before we make it fast.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/88739961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/88742539", "body": "Since a RPM and DEBs are normal artifiacts (which can be cached normally), I don't think we need a separate command: bazel build has alll the functionality we need assuming somebody writes a rule.\n\ntraditionally \"make dist\" is to make a source tarball of the project, and is probably easier handled by extracting a tarball from the version control system. Handling it in Bazel is annoying, because you'd have to declare lists of inputs to distribute in each BUILD file separately. \n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/88742539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/88743386", "body": "Anyone know ruby out there that'd be interested?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/88743386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/88743880", "body": "Since both .bzl and BUILD are syntactically correct python, linguist could be configured to use that?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/88743880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/88745852", "body": "@Aragos - maybe we should add /System/Library/Frameworks into the darwin CROSSTOOL entry?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/88745852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90223854", "body": "@trevorgray - there is a list of accepted include dirs here:\n\nhttps://github.com/google/bazel/blob/master/tools/cpp/CROSSTOOL#L78\n\nyou could try adding an entry for /System/Library/Frameworks/\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90223854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90906493", "body": "also, on OSX, \n\nint count;\nsize_t count_len = sizeof(count);\nsysctlbyname(\"hw.logicalcpu\", &count, &count_len, NULL, 0);\nfprintf(stderr,\"you have %i cpu cores\", count);\n\n(source: http://stackoverflow.com/questions/1715580/how-to-discover-number-of-cores-on-mac-os-x)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90906493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90908396", "body": "On Linux,\n\n   /sys/devices/system/cpu/cpu11/topology/core_id\n  =>\n  5\n\nwe can use this to detect both physical and logical cores. \n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90908396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91281103", "body": "can you see if adding cfg=HOST_CFG to the smart_tar dependency works?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91281103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91308066", "body": "Plan was ok'd by the Go team.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91308066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91310766", "body": "Ulf, ping?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91310766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91311670", "body": "Trevor, can you try the suggestion and report back? Thanks!\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91311670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91469933", "body": "What is your solution? Just to be clear, we already detect the CPU count on Linux by parsing  /proc/cpuinfo, and it is the mac part that needs more attention. \n\nCan you send a gerrit code review? It'll be sufficiently complex that we might need a couple of rounds. For Gerrit:\n\nAuthentication is by https + gitcookie.\n\nOn gerrit go to Settings -> HTTP Password -> Obtain Password, then\nauthenticate and follow instructions to set up your ~/.gitcookies.\n\nYou also need to set up the gerrit hook for the Change-Id. Just try to\npush and follow the instructions in the error message. E.g.:\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91469933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91493329", "body": "Damien, what do you suggest?  Do you want the launcher to detect the number of CPUs and pass a --local_capacity flag instead?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91493329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91493739", "body": "If we're using sysconf to get the number of CPUs, we should delete the /proc parsing as well.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91493739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91495597", "body": "looked a bit further.  So, the executable is actually created, but the runfiles aren't populated.\n\n$ cat bazel-bin/common/smart_tar \n#!/bin/bash -eu\n\nSTUBPATH=$(python -c \"import os.path; print os.path.realpath('$0');\")\nexport PYTHONPATH=$STUBPATH.runfiles\npython ${PYTHONPATH}/py_binary_test/common/smart_tar.py\n\n$  bazel-bin/common/smart_tar \npython: can't open file '/home/hanwen/.cache/bazel/_bazel_hanwen/d06a0894f810fbe034ee4b2eb0ea1dbf/bazel_py_binary_test/bazel-out/local_linux-fastbuild/bin/common/smart_tar.runfiles/py_binary_test/common/smart_tar.py': [Errno 2] No such file or directory\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91495597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91496579", "body": "@damienmg for linux, we want to parse the FS under /sys, under MacOS, we want to call sysctl() with \"hw.ncpu\" and \"hw.nlogicalcpu\" as arguments.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91496579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91513439", "body": "According to the Java docs, getRuntime().availableProcessors()  may change according to load, so you have to poll it. I imagine it will give misleading results if we're busy dispatching lots of spawns, because it would take the load generate ourselves into account. Also, it gives the number of CPUs available to the JVM, while we may want to have what's available outside the JVM.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91513439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91520228", "body": "shall we keep discussion of tentative implementation ideas on the issue itself? \n\nhttps://github.com/google/bazel/issues/101 \n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91520228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91520544", "body": "Alternatively, we have getRuntime().availableProcessors().\n\nWe currently take 0.6 of the total CPU count for HT CPUs. We could simply assume that all CPUs are HT today, and do 0.6 \\* getRuntime().availableProcessors(). How about that?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91520544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91521547", "body": "On a related note: do we have something for the amount of memory as well? (the memory estimates are bogus, but I suspect things will blow up if we remove it completely.)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91521547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91552208", "body": "The protoc binary we have now is 100% statically linked and should work on kernel 2.6.8 and later.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91552208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/92397624", "body": "fixed by https://github.com/google/bazel/commit/8d676c54644b7213a926faa00fc793e0e23fad0b\n\n(I thought github would autoclose the issues?)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/92397624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/15344543", "body": "Can you open a discussion on the list instead? Thanks!\n\nOn Tue, Dec 8, 2015 at 9:19 PM, Mickey Reiss notifications@github.com\nwrote:\n\n> @hanwen https://github.com/hanwen Can you share context as to why\n> jvm_flags does not support $(location)? Am I mistaken in that\n> understanding?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/bazelbuild/bazel/commit/d08b27fa9701fecfdb69e1b0d1ac2459efc2129b#commitcomment-14857491\n> .\n## \n\nHan-Wen Nienhuys\nGoogle Munich\nhanwen@google.com\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/15344543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "illicitonion": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/47413593", "body": "With these changes I can compile and run blaze info:\n\n$ ./compile.sh \nPROTOC src/main/protobuf/build.proto\nPROTOC src/main/protobuf/extra_actions.proto\nPROTOC src/main/protobuf/testing_api.proto\nJAVAC src/main/java/**/_.java\nsrc/main/java/com/google/devtools/build/lib/server/signal/InterruptSignalHandler.java:19: warning: Signal is internal proprietary API and may be removed in a future release\nimport sun.misc.Signal;\n               ^\nsrc/main/java/com/google/devtools/build/lib/server/signal/InterruptSignalHandler.java:20: warning: SignalHandler is internal proprietary API and may be removed in a future release\nimport sun.misc.SignalHandler;\n               ^\nsrc/main/java/com/google/devtools/build/lib/server/signal/InterruptSignalHandler.java:32: warning: Signal is internal proprietary API and may be removed in a future release\n  private static final Signal SIGINT = new Signal(\"INT\");\n                       ^\nsrc/main/java/com/google/devtools/build/lib/server/signal/InterruptSignalHandler.java:32: warning: Signal is internal proprietary API and may be removed in a future release\n  private static final Signal SIGINT = new Signal(\"INT\");\n                                           ^\nsrc/main/java/com/google/devtools/build/lib/server/signal/InterruptSignalHandler.java:34: warning: SignalHandler is internal proprietary API and may be removed in a future release\n  private SignalHandler oldHandler;\n          ^\nsrc/main/java/com/google/devtools/build/lib/server/signal/InterruptSignalHandler.java:42: warning: SignalHandler is internal proprietary API and may be removed in a future release\n    this.oldHandler = Signal.handle(SIGINT, new SignalHandler() {\n                                                ^\nsrc/main/java/com/google/devtools/build/lib/server/signal/InterruptSignalHandler.java:44: warning: Signal is internal proprietary API and may be removed in a future release\n        public void handle(Signal signal) {\n                           ^\nsrc/main/java/com/google/devtools/build/lib/server/signal/InterruptSignalHandler.java:42: warning: Signal is internal proprietary API and may be removed in a future release\n    this.oldHandler = Signal.handle(SIGINT, new SignalHandler() {\n                      ^\nsrc/main/java/com/google/devtools/build/lib/server/signal/InterruptSignalHandler.java:55: warning: Signal is internal proprietary API and may be removed in a future release\n    Signal.handle(SIGINT, oldHandler);\n    ^\nNote: Some input files use or override a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\nNote: Some input files use unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n9 warnings\nUNZIP third_party/{guava,joda-time,jsr305,protobuf}/_.jar\nJAR libblaze.jar\nJAVAC src/test/java/**/*.java\nNote: Some input files use or override a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\nCC src/main/cpp/blaze_startup_options.cc\nCC src/main/cpp/blaze_startup_options_common.cc\nCC src/main/cpp/blaze_util.cc\nCC src/main/cpp/blaze_util_darwin.cc\nCC src/main/cpp/blaze.cc\nsrc/main/cpp/blaze.cc:452:1: warning: control may reach end of non-void function [-Wreturn-type]\n}\n^\nsrc/main/cpp/blaze.cc:520:1: warning: control may reach end of non-void function [-Wreturn-type]\n}\n^\nsrc/main/cpp/blaze.cc:603:1: warning: control may reach end of non-void function [-Wreturn-type]\n}\n^\n3 warnings generated.\nCC src/main/cpp/option_processor.cc\nCC src/main/cpp/util/port.cc\nCC src/main/cpp/util/strings.cc\nCC src/main/cpp/util/file.cc\nCC src/main/cpp/util/md5.cc\nCC src/main/cpp/util/numbers.cc\nLD client\nCC src/main/native/localsocket.cc\nCC src/main/native/process.cc\nCC src/main/native/unix_jni.cc\nsrc/main/native/unix_jni.cc:417:36: warning: 'stat64' is deprecated: first deprecated in OS X 10.6 [-Wdeprecated-declarations]\n  return ::StatCommon(env, path, ::stat64, true);\n                                   ^\n/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/usr/include/sys/stat.h:380:5: note: 'stat64' declared here\nint     stat64(const char *, struct stat64 *) __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5,__MAC_10_6,__IPHONE_NA,__IPHONE_NA);\n        ^\nsrc/main/native/unix_jni.cc:430:36: warning: 'lstat64' is deprecated: first deprecated in OS X 10.6 [-Wdeprecated-declarations]\n  return ::StatCommon(env, path, ::lstat64, true);\n                                   ^\n/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/usr/include/sys/stat.h:379:5: note: 'lstat64' declared here\nint     lstat64(const char *, struct stat64 *) __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5,__MAC_10_6,__IPHONE_NA,__IPHONE_NA);\n        ^\nsrc/main/native/unix_jni.cc:442:36: warning: 'stat64' is deprecated: first deprecated in OS X 10.6 [-Wdeprecated-declarations]\n  return ::StatCommon(env, path, ::stat64, false);\n                                   ^\n/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/usr/include/sys/stat.h:380:5: note: 'stat64' declared here\nint     stat64(const char *, struct stat64 *) __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5,__MAC_10_6,__IPHONE_NA,__IPHONE_NA);\n        ^\nsrc/main/native/unix_jni.cc:454:36: warning: 'lstat64' is deprecated: first deprecated in OS X 10.6 [-Wdeprecated-declarations]\n  return ::StatCommon(env, path, ::lstat64, false);\n                                   ^\n/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/usr/include/sys/stat.h:379:5: note: 'lstat64' declared here\nint     lstat64(const char *, struct stat64 *) __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5,__MAC_10_6,__IPHONE_NA,__IPHONE_NA);\n        ^\n4 warnings generated.\nCC src/main/native/unix_jni_darwin.cc\nCC src/main/cpp/util/md5.cc\nLD libunix.dylib\nCC build-runfiles\nCC process-wrapper\nclang: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated\nupdating: libblaze.jar (deflated 12%)\nupdating: libunix.dylib (deflated 67%)\nupdating: build-runfiles (deflated 69%)\nupdating: process-wrapper (deflated 77%)\nupdating: alarm (stored 0%)\nupdating: client_info (stored 0%)\nupdating: install_base_key (stored 0%)\n\n$ /Users/danielwh/wcs/bazel/output/bazel --host_javabase=$(/usr/libexec/java_home) info\nExtracting Blaze installation...\nJun 27, 2014 8:48:39 PM com.google.devtools.build.lib.blaze.BlazeRuntime main\nINFO: Starting Blaze server with args [--batch, --install_base=/var/tmp/_blaze_danielwh/install/d593fd674b72cdd2f724ed63faf4032d, --output_base=/private/var/tmp/_blaze_danielwh/fba9439d1ee97f86a37db961c5cefbbf, --option_sources=host_Ujavabase:, info, --startup_time=1403916519159, --extract_data_time=49, --binary_path=/Users/danielwh/wcs/bazel/output/bazel, --isatty=1, --terminal_columns=202, ...some-vars-removed..., --client_cwd=/private/tmp/google3]\nJun 27, 2014 8:48:39 PM com.google.devtools.build.lib.blaze.BlazeRuntime setupLogging\nINFO: Log level: INFO\nblaze-bin: /private/var/tmp/_blaze_danielwh/fba9439d1ee97f86a37db961c5cefbbf/google3/blaze-out/fastbuild/bin\nblaze-genfiles: /private/var/tmp/_blaze_danielwh/fba9439d1ee97f86a37db961c5cefbbf/google3/blaze-out/fastbuild/genfiles\nblaze-testlogs: /private/var/tmp/_blaze_danielwh/fba9439d1ee97f86a37db961c5cefbbf/google3/blaze-out/fastbuild/testlogs\ncommand_log: /private/var/tmp/_blaze_danielwh/fba9439d1ee97f86a37db961c5cefbbf/command.log\ncommitted-heap-size: 262MB\nexecution_root: /private/var/tmp/_blaze_danielwh/fba9439d1ee97f86a37db961c5cefbbf/google3\ngc-count: 2\ngc-time: 42ms\ninstall_base: /var/tmp/_blaze_danielwh/install/d593fd674b72cdd2f724ed63faf4032d\nmax-heap-size: 4008MB\nmessage_log: /private/var/tmp/_blaze_danielwh/fba9439d1ee97f86a37db961c5cefbbf/message.log\noutput_base: /private/var/tmp/_blaze_danielwh/fba9439d1ee97f86a37db961c5cefbbf\noutput_path: /private/var/tmp/_blaze_danielwh/fba9439d1ee97f86a37db961c5cefbbf/google3/blaze-out\npackage_path: %workspace%:%workspace%/../READONLY/google3\nrelease: development version\nserver_pid: 18223\nused-heap-size: 4401KB\nworkspace: /private/tmp/google3\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/47413593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/47413975", "body": "And, creating a fake tools/genrule/genrule-setup.sh I can run genrules :)\n\n$ /Users/danielwh/wcs/bazel/output/bazel --host_javabase=$(/usr/libexec/java_home) build //p:gr\nJun 27, 2014 9:01:37 PM com.google.devtools.build.lib.blaze.BlazeRuntime main\nINFO: Starting Blaze server with args [...]\nJun 27, 2014 9:01:37 PM com.google.devtools.build.lib.blaze.BlazeRuntime setupLogging\nINFO: Log level: INFO\nJun 27, 2014 9:01:37 PM com.google.devtools.build.lib.buildtool.BuildTool buildTargets\nINFO: Build identifier: ab96f790-f9f4-4a97-adb9-a75c0e2cfdfd\nJun 27, 2014 9:01:37 PM com.google.devtools.build.lib.pkgcache.LoadingPhaseRunner execute\nINFO: Starting pattern evaluation\nINFO: Loading...\nJun 27, 2014 9:01:37 PM com.google.devtools.build.lib.pkgcache.LoadingPhaseRunner doLoadingPhase\nINFO: Loading package: tools/genrule\nJun 27, 2014 9:01:37 PM com.google.devtools.build.lib.pkgcache.LoadingPhaseRunner doLoadingPhase\nINFO: Loading phase finished\nJun 27, 2014 9:01:38 PM com.google.devtools.build.lib.buildtool.BuildTool buildTargets\nINFO: Loading complete.  Analyzing...\nJun 27, 2014 9:01:38 PM com.google.devtools.build.lib.view.BuildView update\nINFO: Starting analysis\nJun 27, 2014 9:01:38 PM com.google.devtools.build.lib.view.BuildView update\nINFO: Found 1 target...\nINFO: Building...\nJun 27, 2014 9:01:38 PM com.google.devtools.build.lib.actions.LocalHostCapacity disableProcFsUse\nWARNING: Unable to read system load or capacity\njava.io.FileNotFoundException: /proc/cpuinfo (No such file or directory)\n    at java.io.FileInputStream.open(Native Method)\n    at java.io.FileInputStream.<init>(FileInputStream.java:146)\n    at com.google.common.io.Files$FileByteSource.openStream(Files.java:126)\n    at com.google.common.io.Files$FileByteSource.openStream(Files.java:116)\n    at com.google.common.io.ByteSource$AsCharSource.openStream(ByteSource.java:434)\n    at com.google.common.io.CharSource.read(CharSource.java:161)\n    at com.google.common.io.Files.toString(Files.java:367)\n    at com.google.devtools.build.lib.actions.LocalHostCapacity.readContent(LocalHostCapacity.java:290)\n    at com.google.devtools.build.lib.actions.LocalHostCapacity.getLocalHostCapacity(LocalHostCapacity.java:246)\n    at com.google.devtools.build.lib.actions.LocalHostCapacity.getLocalHostCapacity(LocalHostCapacity.java:145)\n    at com.google.devtools.build.lib.buildtool.ExecutionTool.configureResourceManager(ExecutionTool.java:919)\n    at com.google.devtools.build.lib.buildtool.ExecutionTool.executeBuild(ExecutionTool.java:396)\n    at com.google.devtools.build.lib.buildtool.BuildTool.buildTargets(BuildTool.java:199)\n    at com.google.devtools.build.lib.buildtool.BuildTool.processRequest(BuildTool.java:261)\n    at com.google.devtools.build.lib.blaze.commands.BuildCommand.exec(BuildCommand.java:60)\n    at com.google.devtools.build.lib.blaze.BlazeCommandDispatcher.exec(BlazeCommandDispatcher.java:413)\n    at com.google.devtools.build.lib.blaze.BlazeRuntime.batchMain(BlazeRuntime.java:1177)\n    at com.google.devtools.build.lib.blaze.BlazeRuntime.main(BlazeRuntime.java:1040)\n    at com.google.devtools.build.lib.bazel.BazelMain.main(BazelMain.java:35)\n\nJun 27, 2014 9:01:38 PM com.google.devtools.build.lib.actions.ParallelBuilder buildArtifactsHook\n[0%] Executing genrule //p:gr\nJun 27, 2014 9:01:38 PM com.google.devtools.build.lib.actions.ParallelBuilder buildArtifactsHook\nINFO: Building complete.\nJun 27, 2014 9:01:38 PM com.google.devtools.build.lib.buildtool.ExecutionTool saveCaches\nINFO: saving action cache...\nJun 27, 2014 9:01:38 PM com.google.devtools.build.lib.buildtool.ExecutionTool saveCaches\nINFO: action cache saved\nJun 27, 2014 9:01:38 PM com.google.devtools.build.lib.buildtool.ExecutionTool saveCaches\nINFO: saving metadata cache...\nJun 27, 2014 9:01:38 PM com.google.devtools.build.lib.buildtool.ExecutionTool saveCaches\nTarget //p:gr up-to-date:\n  blaze-genfiles/p/o\nJun 27, 2014 9:01:38 PM com.google.devtools.build.lib.blaze.BuildSummaryStatsModule buildComplete\nINFO: Critical Path: 0.03s\n  0.00s TargetCompletionMiddleman _middlemen/target_Ucomplete_U_S_Sp_Cgr\n  0.02s Executing genrule //p:gr\nINFO: Elapsed time: 1403917297.674s, Incrementality: 41%, Critical Path: 0.03s\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/47413975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/48115215", "body": "@hanwen merged these changes in manually\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/48115215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "JakeWharton": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/64259520", "body": "Ok. I have both an individual and corporate CLA signature (Square) in place for the future.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/64259520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "wentao": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/82536898", "body": "Did another try with:\n- download libarchive from github\n- compile it by myself\n\nThen link against the customized libarchive with the following command \n\nexport CFLAGS=-I../libarchive/libarchive; export  LDFLAGS=-L../libarchive ; ./compile.sh\n\nStill failed...\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/82536898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/82623180", "body": "Yes, it works now! Thanks!\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/82623180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/83048477", "body": "Cool, thanks!\n\nOn Wed, Mar 18, 2015 at 12:27 PM Kristina notifications@github.com wrote:\n\n> For future reference, this should now be fixed in the compile script, too\n> (fixed by bdc2496\n> https://github.com/google/bazel/commit/bdc24960f552886126cb03809ddd0de31a3ddc01\n> ).\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/bazel/issues/9#issuecomment-83045942.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/83048477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "laurentlb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85594929", "body": "Thanks! We fixed it, it will be live in a minute.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85594929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/89018908", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/89018908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26716526", "body": "The `_deploy.jar` is supposed to do this job. Skylint is a standard java_binary.\r\n\r\ncc @iirina for the recommended way to ship Java applications.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26716526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/114297100", "body": "If it's guaranteed to be Iterable<String>, why can't it be the type of the return value?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/114297100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/114297849", "body": "This means that your change is a breaking change. We try to avoid breaking changes. If we have to do it, we have to make sure we're not breaking anyone.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/114297849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/114379900", "body": "Right. I don't think anyone relies on this behavior, so we should be fine.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/114379900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "dgageot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85625711", "body": "So you basically told me to RTFM :-)\nGuess what, it fixes the problem!\nThanks a lot\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85625711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "leemcd56": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85644322", "body": "@kchodorow \nbash-3.2$ head --help\nUnknown option: help\nUsage: head [-options] <url>...\n    -m <method>   use method for the request (default is 'HEAD')\n    -f            make request even if head believes method is illegal\n    -b <base>     Use the specified URL as base\n    -t <timeout>  Set timeout value\n    -i <time>     Set the If-Modified-Since header on the request\n    -c <conttype> use this content-type for POST, PUT, CHECKIN\n    -a            Use text mode for content I/O\n    -p <proxyurl> use this as a proxy\n    -P            don't load proxy settings from environment\n    -H <header>   send this HTTP header (you can specify several)\n\n```\n-u            Display method and URL before any response\n-U            Display request headers (implies -u)\n-s            Display response status code\n-S            Display response status chain\n-e            Display response headers\n-d            Do not display content\n-o <format>   Process HTML content in various ways\n\n-v            Show program version\n-h            Print this message\n\n-x            Extra debugging output\n```\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85644322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85664021", "body": "@damienmg You were correct; head was referring to /Applications/XAMPP/xamppfiles/bin/head instead of /usr/bin/head. Fixed and compiled!\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85664021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cgruber": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85718094", "body": "I've sort of generalized this in #31 beyond eclipse.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85718094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85736310", "body": "Heh.  I just ran into that, and was working out a patch.  Cool!\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85736310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85742997", "body": "Technically this is already the case, because of simple execution calls.  I would rename this issue to be more about patching travis-ci to support bazel projects with sane defaults, and less shell-script magic.  All the hooks are already there in a .travis.yml file to do all the needed setup in a pinch. \n\nSo... steps would be:\n1. published recipes for travis usage in the bazel docs\n2. patch travis to support some of those recipes in a less boiler-platey way. \n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85742997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85784216", "body": "Closed - filing internally. \n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85784216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85794122", "body": "Closing - submitted for review internally. \n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85794122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85811174", "body": "Closing - submitted for review internally. \n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85811174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/27084390", "body": "This is maybe contentious, but I suspect that you will get people filing proposals for ideas in github issues, and it is not an unreasonable forum for such discussion. \n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/27084390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/27084440", "body": "This is a recommendation, which is to permit non-code changes via pull-requests, to reduce impediments to contributing documentation fixes/changes. \n\n... like this one. :)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/27084440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "prattmic": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85742810", "body": "Upon further consideration, it makes much more sense to publish only the project directory, not the project inside of an existing workspace.  That way, developers can combine multiple projects into a workspace as they see fit.\n\nThis of course means you cannot simply download and build a project unless it is in a workspace, but I suppose nothing can be done about that.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85742810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "drmuzik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85760935", "body": "Unfortunately, Github does not support https with custom URLs. https will work if you go directly to google.github.io/bazel/ but not bazel.io. \n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85760935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85768807", "body": "Ah, I see the issue. The links are referencing https://bazel.io/foo/bar even though you're viewing the index from google.github.io/bazel. I'll update this issue again when we get it fixed. \n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85768807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "WYSIATI": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85762572", "body": "@drmuzik The link worked but when I clicked, say, `get started using Bazel` to request a redirection, I got http 443 error. OS: Mac OS 10.10, Browser: Chrome Version 41.0.2272.104 (64-bit)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85762572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "safarmer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85775858", "body": "This was the only issue I saw during compile and after this I am able to run Bazel.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85775858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "davidzchen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85795509", "body": "From the [Build Encyclopedia section on `cc_library`](http://bazel.io/docs/build-encyclopedia.html#cc_library):\n\n> `hdrs`: The list of header files published by this library to be directly included by sources in dependent rules.\n\nThus, in your case, you should do the following:\n\nIn `barpath/`, define a `cc_library` target for the `bar.cpp` source file that publishes the `bar.h` header file via `hdrs`:\n\n``` python\ncc_library(\n    name = \"bar\",\n    srcs = [\"bar.cpp\"],\n    hdrs = [\"bar.h\"],\n)\n```\n\nAnd then in `foopath/foo.cpp`, you would have the following `#include`:\n\n``` cpp\n#include \"barpath/bar.h\"\n...\n```\n\nAnd then define the build rule under `foopath/` for `foo.cpp` with a dependency on `//barpath:bar`:\n\n``` python\ncc_library(\n    name = \"foo\",\n    srcs = [\"foo.cpp\"],\n    hdrs = [\"foo.h\"],\n    deps = [\"//barpath:bar\"],\n)\n```\n\nBasically, use `hdrs` to indicate which header files `//barpath:bar` publishes, and use `deps` to indicate that `//foopath:foo` depends on `//barpath:bar`. Bazel will then the `hdrs` from `//barpath:bar` to include the correct header files when building `//foopath:foo`.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85795509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85797566", "body": "For the case where you have `foopath/foo.cpp` including `barpath/bar.h` which includes `bazpath/baz.h`, you will just have three targets where `//foopath:foo` depends on `//barpath:bar` which depends on `//bazpath:baz`, similar to the following:\n\nUnder `bazpath/`:\n\n``` python\ncc_library(\n    name = \"baz\",\n    srcs = [\"baz.cpp\"],\n    hdrs = [\"baz.h\"],\n    deps = [...],\n)\n```\n\nUnder `barpath/`:\n\n``` python\ncc_library(\n    name = \"bar\",\n    srcs = [\"bar.cpp\"],\n    hdrs = [\"bar.h\"],\n    deps = [\n        \"//bazpath:baz\",\n        ...\n    ],\n)\n```\n\nAnd finally, under `foopath/`:\n\n``` python\ncc_library(\n    name = \"foo\",\n    srcs = [\"foo.cpp\"],\n    hdrs = [\"foo.h\"],\n    deps = [\n        \"//barpath:bar\",\n    ],\n)\n```\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85797566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85975937", "body": "Having YouCompleteMe integration would be awesome as well. :)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85975937/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87153315", "body": "While it is possible to implement this with `genrule`, it may be better to have some abstractions on top of `install`. It might also be better to have a separate command since `bazel install //package:target` is more intuitive than `bazel build //package:install_target` and since there should be a flag similar to `--prefix` for setting the install prefix.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87153315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87297609", "body": "I think we will eventually want to have this feature since both Maven and Gradle offer this. I think the interface to this would a rule for pushing to Maven similar to the [Gradle Maven Plugin](http://gradle.org/docs/current/userguide/maven_plugin.html). Perhaps if we implement distribution rules (see #74), pushing to Maven can be a distribution rule.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87297609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/88671924", "body": "I agree with Damien that we should still implement pulling transitive dependencies. Given that all other major Java build systems (i.e. Ant/Ivy, Maven, Gradle, etc.) all pull transitive dependencies by default, not having this feature would be a blocker for migrating many Java-based projects from one of these other build systems to Bazel.\n\nDon't Maven pom files specify the versions for the artifacts that a given JAR depends on?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/88671924/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/88672158", "body": "Thanks!\n\nI saw that the JAR was added in commit b2922dead4909f5df9ba248af5ea894b13cfe7d3, but it seems that the `//third_party:maven_model` BUILD rule was not updated to include the JAR. \n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/88672158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/89733352", "body": "You can use the `includes` attribute of `cc_library` to set the include path so that you don't need to change the include paths in the source files: http://bazel.io/docs/build-encyclopedia.html#cc_library\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/89733352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/89750149", "body": "Got it. It works now. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/89750149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/89757901", "body": "While that makes sense in theory, unfortunately, it does not always work very well in practice. There are many Java projects that rely on jars to pull in transitive dependencies in order to compile successfully.\n\nA concrete example of this is my attempts at compiling `dropwizard-example` with Bazel. I am unable to simply use the list of dependencies in the [Maven pom](https://github.com/dropwizard/dropwizard/blob/4ceee223cddbac4183828c1c0277b1f9ec102a75/dropwizard-example/pom.xml) because the code directly references classes in jars that are transitive dependencies of the ones listed in the Maven pom. For example, it assumes that `dropwizard-jersey` will pull in `jersey-server`, etc.\n\nIIRC, the other Bazel build rules have the same behavior: if `java_library` `foo` depends on `bar` and `baz`, and `bar` also depends on `baz`, then `foo` only needs to add `bar` to its `deps` and `baz` will be included transitively. The same applies to the `cc_*` rules from what I have observed. Please correct me if I'm wrong.\n\nIn any case, I think we need a better story around pulling Maven jars transitively. Otherwise, migrating something as simple as `dropwizard-example` would require one to dig deep into the various transitive dependencies among the `dropwizard` jars it depends on in order to cover all of the transitive dependencies, which is very time consuming and may discourage adoption, unless covering all transitive dependencies this way yields some properties that provides very clear benefits for projects that do want to pull jars from Maven rather than checking them into source control.\n\n@kchodorow, @damienmg - Is there a significant number of artifacts in repositories such as Maven Central that are lacking version info for dependencies?\n\n@talios - I would also like to learn more about the issues that Maven's behavior for its compile and runtime scopes. Can you give some examples of how this has caused issues?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/89757901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/49043262", "body": "Why this change? The include path is relative to the root of the workspace.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/49043262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/49043292", "body": "Have you tested this? The `:hello-world` target is in the `//examples/cpp` package. There is no `:hello-world` target in the root BUILD file.\n\nIf you want to build `:hello-world` from inside the `examples/cpp` directory, then the correct command would be `bazel build :hello-world`, and Bazel would look for a target called `:hello-world` in the BUILD file in the current directory. Labels beginning with `//` are absolute paths relative to the workspace root.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/49043292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/62247805", "body": "Can you change the URL to http://bazel.io/docs/be/docker.html instead?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/62247805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/87890652", "body": "For now, we should use docs/windows.html since it is shorter and will automatically redirect to windows.html page of the latest version under versions/.\n\nFYI Once I finish the script for cutting releases of the docs, ideally, this script should print the link with the correct version, such as https://bazel.build/versions/0.5/docs/windows.html. We can make that change separately once versioned docs is done.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/87890652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "Caffeinix": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85909705", "body": "I was able to reproduce this using the built-in cpp example with no modifications:\n\n```\n$ bazel test --test_output=all //examples/cpp:hello-success_test\nINFO: Found 1 test target...\nFAIL: //examples/cpp:hello-success_test (see /private/var/tmp/_blaze_phoenix/70ce3f379b09976e83961c12a3bbdb4e/test_cc_app/bazel-out/local_darwin-fastbuild/testlogs/examples/cpp/hello-success_test/test.log).\nINFO: From Testing //examples/cpp:hello-success_test:\n==================== Test output for //examples/cpp:hello-success_test:\nexec ${PAGER:-/usr/bin/less} \"$0\" || exit 1\ndyld: Library not loaded: bazel-out/local_darwin-fastbuild/bin/examples/cpp/libhello-lib.so\n  Referenced from: /private/var/tmp/_blaze_phoenix/70ce3f379b09976e83961c12a3bbdb4e/test_cc_app/bazel-out/local_darwin-fastbuild/bin/examples/cpp/hello-success_test.runfiles/examples/cpp/hello-success_test\n  Reason: image not found\ntools/test/test-setup.sh: line 16:  2309 Trace/BPT trap: 5       \"$@\"\n================================================================================\nTarget //examples/cpp:hello-success_test up-to-date:\n  bazel-bin/examples/cpp/hello-success_test\nINFO: Elapsed time: 0.164s, Critical Path: 0.10s\n//examples/cpp:hello-success_test                                        FAILED\n\nExecuted 1 out of 1 tests: 1 fails locally.\n```\n\nbazel run //examples/cpp:hello-world works fine, however, and it has the same library dependency (and is in fact the same source file).\n\nI am also on OS X 10.10.2.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85909705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tfarina": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86021373", "body": "You have to install libarchive-dev as recommended by http://bazel.io/docs/install.html.\n\nIf you are on Ubuntu you can run the following command line:\n\n $ sudo apt-get install libarchive-dev\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86021373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86023259", "body": "Looks like you haven't installed it yet.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86023259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86181870", "body": "$ g++ -v\nUsing built-in specs.\nCOLLECT_GCC=g++\nCOLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/4.7/lto-wrapper\nTarget: x86_64-linux-gnu\nConfigured with: ../src/configure -v --with-pkgversion='Ubuntu/Linaro 4.7.3-2ubuntu1~12.04' --with-bugurl=file:///usr/share/doc/gcc-4.7/README.Bugs --enable-languages=c,c++,go,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-4.7 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --with-gxx-include-dir=/usr/include/c++/4.7 --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --enable-plugin --with-system-zlib --enable-objc-gc --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64 --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu\nThread model: posix\ngcc version 4.7.3 (Ubuntu/Linaro 4.7.3-2ubuntu1~12.04) \n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86181870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86232052", "body": "Thanks! That works for me. Looking forward to see a fix (this or another) for this merged in the mainline tree.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86232052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/15598226", "body": "Does the internal repo has a different version of this function? Otherwise you don't need to pass GlobalVariables to it, you don't use |globals| here.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/15598226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "0xmalloc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86022904", "body": "i use centos and i have installed  libarchive;\nthe new error message is below:\nPackage libarchive was not found in the pkg-config search path.\nPerhaps you should add the directory containing `libarchive.pc'\nto the PKG_CONFIG_PATH environment variable\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86022904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kohlerm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86081582", "body": "SAP JVM is a pure server VM and -client was therefore removed. \nThis is not a very urgent request yet, but if there would be some way to override the -client option, that would be helpful. \n\n--verbose does not work for me:\n\n~/bazel>$HOME/bazel/output/bazel   build  --verbose  //examples/java-native/src/main/java/com/example/myproject:hello-world \nUnrecognized option: --verbose\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86081582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86086337", "body": " I tried that one already, but I think there was no difference have to try it again. \nNote that the error message also says that one should use --verbose\n...\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86086337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86150546", "body": "Sorry I was in a hurry.\nUpon further inspection it prints that -client is not recognized, but I don't think it is obvious what it means. \n\n~/bazel>$HOME/bazel/output/bazel   build    //examples/java-native/src/main/java/com/example/myproject:hello-world \nINFO: Found 1 target...\nINFO: From Building examples/java-native/src/main/java/com/example/myproject/hello-world.jar (0 files):\nUnrecognized option: -client\nError: Could not create the Java Virtual Machine.\nError: A fatal exception has occurred. Program will exit.\nERROR: /root/bazel/examples/java-native/src/main/java/com/example/myproject/BUILD:3:1: Java compilation in rule '//examples/java-native/src/main/java/com/example/myproject:hello-world' failed: java failed: error executing command external/local-jdk/bin/java -Xbootclasspath/p:external/local-jdk/lib/tools.jar -client -jar tools/jdk/JavaBuilder_deploy.jar ... (remaining 1 argument(s) skipped): com.google.devtools.build.lib.shell.BadExitStatusException: Process exited with status 1.\nTarget //examples/java-native/src/main/java/com/example/myproject:hello-world failed to build\nUse --verbose_failures to see the command lines of failed build steps.\nINFO: Elapsed time: 0.488s, Critical Path: 0.04s\n\n I was also confused that it says:\nexternal/local-jdk/bin/java\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86150546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86152366", "body": "Oh and I forgot, at least a few years ago -server was causing the JIT to generate significantly faster code, because it would try harder to optimize the code which causes a longer warm up phase. \nIf that is still the case -server might be anyway faster depending on how much needs to be compiled. \nThe caveat is of course that one would have to set the memory parameters accordingly. \n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86152366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86408206", "body": " No it does not solve this problem. OpenSuse 12.3 uses a new glibc\n\nKristina notifications@github.com schrieb am Mi., 25. M\u00e4rz 2015 um\n21:36 Uhr:\n\n> Does this resolve #50 https://github.com/google/bazel/issues/50 for\n> you, as well?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/bazel/issues/55#issuecomment-86205598.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86408206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86410048", "body": "note that Suse 12.3 comes with glib 2.17 (v2.17-4.7.1 for me atm) so higher versions seem to work. \n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86410048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/13207007", "body": "it seems -client is always set regardless of what I specify in \n--host_jvm_args, am I'm right here?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/13207007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/13207044", "body": "I still could not figure out how to run bazel on a VM that does not support -client.\nRunning  \nstrace bin/bazel  --host_jvm_args=\"-server\"\nI can see that the -server option is picked up. \n\nexecve(\"/usr/java/latest/bin/java\", [\"bazel()\", \"-client\", \"-Xms256m\", \"-XX:NewRatio=4\", \"-XX:+HeapDumpOnOutOfMemoryError\", \"-XX:HeapDumpPath=/sapmnt/home1/d\"..., \"-Xverify:none\", \"-Djava.library.path=/sapmnt/home\"..., \"-Dfile.encoding=ISO-8859-1\", \"-server\", \"-jar\", \"/sapmnt/home1/d041705/.cache/baz\"..., \"--batch\", \"--install_base=/sapmnt/home1/d04\"..., \"--install_md5=fc73563854b9d52217\"..., \"--output_base=/sapmnt/home1/d041\"..., ...], [/\\* 103 vars */]) = 0\n\nbut -client is still used\n\nwhich leads to an error on my vm (-client not supported)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/13207044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/13207150", "body": "Ok, Thanks! I had hoped I could   be overridden. \n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/13207150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "rbvermaa": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86081614", "body": "Actually, I have tested if the issue is there with a writable installation prefix, and that gives the same error.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86081614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86159412", "body": "This is on NixOS, which is a Linux distribution.\n\n```\n$ unzip -v /nix/store/wl19f5z591zrmrp66mbdjr1zi5z5kdr6-bazel-20150325.9a0dc1b2/share/bazel/bazel    \nArchive:  /nix/store/wl19f5z591zrmrp66mbdjr1zi5z5kdr6-bazel-20150325.9a0dc1b2/share/bazel/bazel                                             \n Length   Method    Size  Cmpr    Date    Time   CRC-32   Name                                                                              \n--------  ------  ------- ---- ---------- ----- --------  ----                                                                              \n13589089  Defl:N 11996120  12% 01-01-1980 00:00 a8d36238  libblaze.jar                                                                      \n   94557  Defl:N    29216  69% 01-01-1980 00:00 efcb6f63  libunix.so                                                                        \n   64181  Defl:N    19820  69% 01-01-1980 00:00 3eb3a114  build-runfiles                                                                    \n   14008  Defl:N     5117  64% 01-01-1980 00:00 a23844b8  process-wrapper                                                                   \n       0  Stored        0   0% 01-01-1980 00:00 00000000  client_info                                                                       \n     109  Defl:N       98  10% 01-01-1980 00:00 f8f8e5a6  build_interface_so                                                                \n     820  Defl:N      279  66% 01-01-1980 00:00 104f0421  jdk.WORKSPACE                                                                     \n     801  Defl:N      301  62% 01-01-1980 00:00 0a52a10e  jdk.BUILD                                                                         \n   19486  Defl:N     7028  64% 01-01-1980 00:00 76e9b9f6  namespace-sandbox                                                                 \n      33  Stored       33   0% 01-01-1980 00:00 b6be7f86  install_base_key                                                                  \n       4  Stored        4   0% 01-01-1980 00:00 ac4a7ed7  java.version                                                                      \n--------          -------  ---                            -------                                                                           \n13783088         12058016  13%                            11 files    \n```\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86159412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86227485", "body": "Indeed, we copied the results that were in output/ after compile.sh was run. What do you mean exactly by 'real installation directory'? \n\nI tried looking through the code and saw some chmod calls in the Java code, however, when running strace I don't see any chmod on any of the files in $HOME/.cache/bazel/_blaze_rbvermaa/install/c319309e20c3f37a277f6e599681275a/_embedded_binaries/  come by. \n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86227485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86358432", "body": "@damienmg Thanks for the quick response, the patch seems to work!\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86358432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86383371", "body": "Great, thanks!\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86383371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "filmil": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86126600", "body": "Is there any special reason that i686 binaries aren't there? Is it even\nworth running bazel on a 32-bit machine?\n\nOn Tue, Mar 24, 2015 at 12:20 PM Han-Wen Nienhuys notifications@github.com\nwrote:\n\n> yeah. It'll probably work if you replace it with a binary that executes\n> correctly on your machine (it should be from protobuf 2.5.0).\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/bazel/issues/18#issuecomment-85654449.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86126600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bootstraponline": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86172251", "body": "`https://github.com/google/bazel/blob/master/docs/docs/skylark/concepts.md` is 404. governance.md is already in the docs folder so the relative link needs to be `skylark/concepts.md` instead of `docs/skylark/concepts.md`\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86172251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "trevorgray": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86180226", "body": "Yes. This was run from head with only running compile.sh and modifying examples/cpp/BUILD.\n\n```\n$ ls tools/cpp\nBUILD       CROSSTOOL   empty.cc\n```\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86180226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "stuartfehr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86203150", "body": "That's fine. Thanks!\n\nOn Wed, Mar 25, 2015 at 2:24 PM, Damien Martin-Guillerez <\nnotifications@github.com> wrote:\n\n> Closed #45 https://github.com/google/bazel/pull/45.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/bazel/pull/45#event-265156850.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86203150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "igkm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86231206", "body": " You can explicitly request inclusion by using __STDC_FORMAT_MACRO, along with __STDC_LIMIT_MACROS\n\ndiff --git a/third_party/ijar/classfile.cc b/third_party/ijar/classfile.cc\nindex 90749ff..a170d8a 100644\n--- a/third_party/ijar/classfile.cc\n+++ b/third_party/ijar/classfile.cc\n@@ -27,6 +27,7 @@\n // http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4\n\n #define __STDC_LIMIT_MACROS 1\n+#define __STDC_FORMAT_MACROS 1\n #include <inttypes.h> // for PRIx32\n #include <stddef.h>\n #include <stdio.h>\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86231206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86750016", "body": "I am on fedora, there is slight package renaming needed to get this going. \nlibarchive-devel (instead of libarchive-dev) \npkgconfig          (instead of pkg-config)\nzlib-devel           (instead of zlib1g-dev - the fedora repo I point to has zlib-devel)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86750016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jdmaturen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86244020", "body": ":metal: \n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86244020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "MarkRunWu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86609460", "body": "I tried to replace by 32 bit version protoc.\nIt still cannot be built cause the codebase is targeted at 64 bit machine. :confounded: \n\n``` bash\nsrc/main/cpp/blaze.cc: In function \u2018void blaze::ActuallyExtractData(const string&, const string&)\u2019:\nsrc/main/cpp/blaze.cc:804:71: error: cannot convert \u2018off_t* {aka long int*}\u2019 to \u2018int64_t* {aka long long int*}\u2019 for argument \u20184\u2019 to \u2018int archive_read_data_block(archive*, const void**, size_t*, int64_t*)\u2019\n       retval = archive_read_data_block(blaze_zip, &buf, &size, &offset);\n                                                                       ^\n```\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86609460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pmbethe09": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86726509", "body": "that was supposed to be include jni.h with angle brackets.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86726509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86935587", "body": "Add an a.h which b.cc includes and calls a function from.\nOn Mar 27, 2015 6:45 AM, \"lberki\" notifications@github.com wrote:\n\n> This is very surprising. Couldn't reproduce with this BUILD file on Linux,\n> though:\n> \n> cc_library(\n> name = \"a\",\n> srcs = [\"a.cpp\"],\n> )\n> \n> cc_library(\n> name = \"b\",\n> srcs = [\"b.cpp\"],\n> deps = [\":a\"],\n> )\n> \n> cc_binary(\n> name = \"main\",\n> srcs = [\"main.cpp\"],\n> deps = [\":b\"],\n> )\n> \n> Assigning to Damien since he knows a tad more about Mac than I do.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/bazel/issues/67#issuecomment-86899085.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/86935587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87037875", "body": "cc_library allows srcs to contain precompiled \".a\" and \".so\" files.\n\nNote: on Mac you will need an \"empty.cc\" in srcs as clang/bazel do not handle empty srcs (as in nothing to actually compile)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87037875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/88972376", "body": "The Google way to do this is includes rooted at the WORKSPACE level.\n\nSo MyLib can just depend on a cc_library in //project/dependancy:whatever \nand then in MyLib .cc files use\n#include \"project/dependency/some_header.h\"\nAs all bazel compilations have an implicit -I on the directory containing WORKSPACE.\n\nHowever, if you can't do that yet, then the 'includes' attribute can be used.\nBut, not in the way you might think.  Includes is for how THIS library is depended on by others (not what this library depends on).\nSo.  In //package/dependency\ncc_library(\n    name = \"whatever\",\n    srcs = [\"whatever.c\"],\n    hdrs = glob([\"*.h\"]),\n    includes = [\".\"],\n)\n\nThe magic is: includes = [\".\"]\nNow when MyLib depends on //project/dependency:whatever it will be able to reference the headers in there without extra work.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/88972376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "jhi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87081375", "body": "Also:\n\nbeing able to switch easily between different sets of cc binaries and flags would be nice: I routinely want to test my code with, say, clang, gcc, g++, and if I could be bothered to get a license, also icc.  \n\nBut while the flags available between even these closely-related compilers intersect a lot, there are incompatibilities: clang has -Weverything, gcc has not, some -W flags do not make sense for C++ or they make sense only for C++, certain -fflags only work for some subset, etc.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87081375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Nekbakht": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87255901", "body": "How stickers working on telegram?\nAnd how create new button for stickers?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87255901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "googlebot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87338235", "body": "Thanks for your pull request.\n\nIt looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA) at https://cla.developers.google.com/.\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check the [information on your CLA](https://cla.developers.google.com/clas) or see this help article on [setting the email on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\nOnce you've done that, please reply here to let us know.  If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87338235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87340765", "body": "CLAs look good, thanks!\n\n<!-- ok -->\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87340765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90970041", "body": "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90970041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90996032", "body": "We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\n\n<!-- need_author_cla -->\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90996032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90997044", "body": "CLAs look good, thanks!\n\n<!-- ok -->\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90997044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91429991", "body": "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91429991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [], "review_comments": []}, "eduaranega": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87340764", "body": "I signed the CLA.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87340764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87340830", "body": "travis-ci build failed during apt-get update, but this PR is safe to merge. Thanks.\n\n$ sudo apt-get update -qq\n\nW: Failed to fetch http://www.rabbitmq.com/debian/dists/testing/main/i18n/Translation-en_US Connection failed\n\nW: Failed to fetch http://www.rabbitmq.com/debian/dists/testing/main/i18n/Translation-en Could not connect to www.rabbitmq.com:80 (192.240.153.117), connection timed out\n\nE: Some index files failed to download. They have been ignored, or old ones used instead.\n\nThe command \"sudo apt-get update -qq\" failed and exited with 100 during .\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87340830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ethanrublee": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87446853", "body": "Added CL here: https://bazel-review.googlesource.com/#/c/1040/\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/87446853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91110442", "body": "So I think I found part of the problem...\n\nLets say we have two bazel workspaces, bazel, and my_workspace.\n\nUpon building a recent version of bazel ( mine's checked out at 41c2f9ee09751a0709c02e2e8dfdca227ccc45b0), it generates `.bazelrc`\n\n```\n$ cd bazel/\n$ ./compile.sh \nCompiling Java stubs for protocol buffers...\n$ cat ~/.bazelrc \nbuild --package_path %workspace%:/home/rublee/bazel\n```\n\nmy_workspace can be reproduced with:\n\n``` sh\nmkdir ~/my_workspace\ncp -R ~/bazel/base_workspace/third_party  ~/bazel/base_workspace/tools ~/my_workspace\nmkdir ~/my_workspace/examples\ncp -r ~/bazel/base_workspace/examples/cpp ~/my_workspace/examples/\necho 'workspace(name = \"my_workspace\")' > ~/my_workspace/WORKSPACE\n```\n\nWith the generated ~/.bazelrc I get the same error described above:\n\n```\n$ cat ~/.bazelrc\nbuild --package_path %workspace%:/home/rublee/bazel\n$ cd ~/my_workspace\n$ ~/bazel/output/bazel build ...\n...\nERROR: error loading package 'output/classes': Package 'output/classes' contains errors.\nINFO: Elapsed time: 0.382s\n```\n\nNow if I change the `~/.bazelrc`, by removing the entry for `/home/rublee/bazel` it works.\n\n```\n$ cat ~/.bazelrc\nbuild --package_path %workspace%\n$ cd ~/my_workspace\n$ ~/bazel/output/bazel build ...\nINFO: Found 5 targets...\nINFO: Elapsed time: 1.522s, Critical Path: 0.02s\n```\n\nIs this behavior really intentional?  It seems very reasonable to build all of my_workspace.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91110442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pgr0ss": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/136827710", "body": "What about fronting with something like Cloudflare?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/136827710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/112637521", "body": "Yeah, for now I think we'll try use the same paths on every machine.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/112637521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/173795198", "body": "That looks interesting. I'll have to check it out.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/173795198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/137270834", "body": "FWIW, here's how we've been doing it: https://github.com/pgr0ss/bazel-deps\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/137270834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/137346828", "body": "Our script is based on yours, but with a few advantages for us:\n- It already accepts artifact ids instead of local paths\n- It formats the WORKSPACE entries as a single line, which makes sorting and uniquing them much easier.\n- It allows you to exclude common dependencies. For example, if you're using `dropwizard-core`, `dropwizard-client`, `dropwizard-testing`, etc., you don't want to duplicate all of the transitive dependencies for each one. You just need the additional dependencies on top of core.\n\nI fully expect that your version will keep improving and surpass ours at some point, and then we'll switch.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/137346828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/137584084", "body": "Good to know. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/137584084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/138608303", "body": "@damienmg If I understand correctly, that means that we can't use the packaged release candidate and `bazel build //...` or `bazel test //...` to build and test our app for the next two months? I think this means we'll have to stick with using bazel from a `git clone`.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/138608303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/138613297", "body": "We currently use the git clone and don't have any issues. We only had a problem when we tried to switch from the clone to the packaged released candidate.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/138613297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/153456184", "body": "I got merge conflicts pulling in your branch, but I resolved them and pushed the result: https://github.com/bazelbuild/bazel/compare/release-0.1.2...pgr0ss:debug-skyframe\n\nI'm not sure how to interpret the output, however:\n\n```\n% bazel build //... > /tmp/build_output\n% grep INVALIDATING /tmp/build_output | wc -l\n8630\n\n% head /tmp/build_output\nINVALIDATING null => PRECOMPUTED:build_id\nINVALIDATING null => ERROR_TRANSIENCE:ERROR_TRANSIENCE\nINVALIDATING PRECOMPUTED:build_id => FILE_STATE:[/]/[]\nINVALIDATING PRECOMPUTED:build_id => FILE_STATE:[/]/[home/admin]\nINVALIDATING PRECOMPUTED:build_id => FILE_STATE:[/]/[home/admin/bazel/tools]\nINVALIDATING PRECOMPUTED:build_id => FILE_STATE:[/]/[home/admin/bazel/tools/build_rules]\nINVALIDATING PRECOMPUTED:build_id => FILE_STATE:[/]/[home/admin/bazel]\nINVALIDATING PRECOMPUTED:build_id => FILE_STATE:[/]/[home]\nINVALIDATING PRECOMPUTED:build_id => FILE_STATE:[/]/[home/admin/bazel/tools/build_defs]\nINVALIDATING PRECOMPUTED:build_id => FILE_STATE:[/]/[home/admin/bazel/tools/build_defs/docker/docker.bzl]\n```\n\nIt also has lines like:\n\n```\nINVALIDATING ARTIFACT:build-info-volatile.properties com.google.devtools.build.lib.skyframe.BuildInfoCollectionValue$BuildInfoKeyAndConfig@f4a41f0 => ACTION_EXECUTION:action 'Building deploy jar app1/app1_deploy.jar' (JavaDeployJar[[Artifact:[[/home/admin/.cache/bazel/_bazel_admin/61e657d6884c63362b8b441914a1bc68/apps]bazel-out/host/internal]_middlemen/external_Slocal-jdk_Cjdk-default, Artifact:[[/home/admin/.cache/bazel/_bazel_admin/61e657d6884c63362b8b441914a1bc68/apps]bazel-out/local_linux-fastbuild/bin]app1/libapp1_lib.jar, Artifact:[[/home/admin/.cache/bazel/_bazel_admin/61e657d6884c63362b8b441914a1bc68/apps]bazel-out/local_linux-fastbuild/bin]authorization/libauthorization.jar, ...\n```\n\nWhat should I be looking for? I'm happy to chat on IRC if that would be easier.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/153456184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/153460821", "body": "My workspace root is `/home/admin/proj/apps`\n\nI have a `.bazelrc` in that folder with this:\n\n```\nbuild --package_path %workspace%:%workspace%/../../bazel/base_workspace\nfetch --package_path %workspace%:%workspace%/../../bazel/base_workspace\nquery --package_path %workspace%:%workspace%/../../bazel/base_workspace\n```\n\nIs this related?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/153460821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/153511236", "body": "`/home/admin/bazel` is a git clone of https://github.com/google/bazel/, and we run `./compile.sh`. I don't think we have any weird symlinks in our repo. We load the docker file like this: `load(\"/tools/build_defs/docker/docker\", \"docker_build\")`\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/153511236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/153519574", "body": "Is there any other information I can give that will help us track down the issue?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/153519574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/153527190", "body": "Is this what you're looking for?\n\n```\n% pwd\n/home/admin/bazel/base_workspace\n\n% git diff\ndiff --git a/examples/java-native/BUILD b/examples/java-native/BUILD\nindex b698a88..a35efca 100644\n--- a/examples/java-native/BUILD\n+++ b/examples/java-native/BUILD\n@@ -1,3 +1,4 @@\n+load(\"/tools/build_defs/docker/docker\", \"docker_build\")\n package(default_visibility = [\"//visibility:public\"])\n\n filegroup(\n\n% bazel build //examples/java-native:all > /tmp/build_output\nWARNING: Sandboxed execution is not supported on your system and thus hermeticity of actions cannot be guaranteed. See http://bazel.io/docs/bazel-user-manual.html#sandboxing for more information. You can turn of\nf this warning via --ignore_unsupported_sandboxing.\n____Loading...\n____Loading complete.  Analyzing...\n____Found 1 target...\nTarget //examples/java-native:srcs up-to-date (nothing to build)\n____Elapsed time: 2.105s, Critical Path: 0.00s\n```\n\nbuild_output as a gist: https://gist.github.com/pgr0ss/75db537f872c4fe4357a\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/153527190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/155917823", "body": "The jars are from `maven_jar`. I am not restarting bazel between builds.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/155917823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/164082716", "body": "Thanks for fixing this! We haven't been tracking HEAD recently due to other issues (e.g. https://github.com/bazelbuild/bazel/issues/421), but I can try to give HEAD another shot.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/164082716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/187256832", "body": "Accidentally hit enter. Will close and create a new one with the proper info.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/187256832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/189394267", "body": "@ulfjack I'm not sure if your questions are targeted at me, but I'll do my best.\n\n> What features does .env support?\n\nI don't understand the question. If you are asking about bazel features, I think it's reasonable to accept it wherever you accept `--test_env`. If you are asking why it's necessary at all, I would like to use the same `.env` file for bazel as for my other tools, rather than having to write out separate `--test_env` commands for each variable. It's becoming increasingly common to rely on environment variables for configuration (e.g. http://12factor.net/config).\n\n> What charset does it use?\n\nI'm not sure. I would guess it's generally tool specific. Or maybe UTF-8?\n\n> Does it require unescaping (i.e., can you escape newline characters)?\n\nDoes `--test-env` support it? We could probably use the same logic?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/189394267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/190279972", "body": "@ulfjack They look like:\n\n``` bash\nVAR1=foo\nVAR2=bar\n```\n\nIn general, it's the same format as if it were shell commands so you can source the file.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/190279972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/232545033", "body": "I think this is https://github.com/bazelbuild/bazel/issues/1461, which is fixed.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/232545033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/213600070", "body": "You're right. It also happens with a simple file if the file is top level. If the file is not top level, it seems to work correctly.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/213600070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/230068870", "body": "Upon further investigation, it seems like there are different formats to the sha1 file in maven:\n\n``` bash\n% curl https://repo1.maven.org/maven2/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar.sha1\n5fe28b9518e58819180a43a850fbc0dd24b7c050\n\n% curl https://repo1.maven.org/maven2/antlr/antlr/2.7.7/antlr-2.7.7.jar.sha1\n83cd2cd674a217ade95a4bb83a8a14f351f48bd0  /home/maven/repository-staging/to-ibiblio/maven2/antlr/antlr/2.7.7/antlr-2.7.7.jar\n```\n\nWould you be open to a pull request that splits on whitespace and returns the first entry here? https://github.com/bazelbuild/bazel/blob/7d265e07e7a1e37f04d53342710e4f21d9ee8083/src/tools/generate_workspace/src/main/java/com/google/devtools/build/workspace/maven/Resolver.java#L275-L276\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/230068870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/230382468", "body": "I force pushed a new commit with an additional test and a little less code.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/230382468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/308199388", "body": "@petroseskinder It doesn't look like #1553 was merged: https://github.com/bazelbuild/bazel/pull/1553#issuecomment-239987143", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/308199388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/308227785", "body": "Yeah, `--output_dir` seems sufficient. ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/308227785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/329836697", "body": "Is there an update on this issue? Either a built in way in bazel, or an official skylark wrapper to generate test suites?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/329836697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/315115880", "body": "Seems fixed in 0.5.2, and we were able to upgrade and keep our warnings turned on.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/315115880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "varikin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/136377301", "body": "Hi, I signed it.\n\nThank you.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/136377301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "stephenchu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/159442241", "body": "I hit the same thing, with an extremely simple test case to reproduce.\n\nAm I doing something wrong? Or, does this have a workaround?\n\n#### Steps to Reproduce\n\n```\n$ touch WORKSPACE\n\n$ mkdir one\n\n$ echo \"FILE1 CONTENT\" > one/file1.txt\n\n$ echo '\ngenrule(\n  name = \"buggy\",\n  srcs = [],\n  outs = [\"output.txt\"],\n  cmd = \"cat file1.txt > $@\",\n)\n' > one/BUILD\n```\n\n#### Output\n\n```\n$ bazel run //one:buggy -- cat_output.txt\n.......\nWARNING: Sandboxed execution is not supported on your system and thus hermeticity of actions cannot be guaranteed. See http://bazel.io/docs/bazel-user-manual.html#sandboxing for more information. You can turn off this warning via --ignore_unsupported_sandboxing.\nUnhandled exception thrown during build; message: Attribute 'executable' is potentially configurable - not allowed here\nINFO: Elapsed time: 0.472s\njava.lang.IllegalStateException: Attribute 'executable' is potentially configurable - not allowed here\n        at com.google.common.base.Preconditions.checkState(Preconditions.java:197)\n        at com.google.devtools.build.lib.packages.NonconfigurableAttributeMapper.get(NonconfigurableAttributeMapper.java:45)\n        at com.google.devtools.build.lib.bazel.rules.genrule.BazelGenRuleRule$1.getDefault(BazelGenRuleRule.java:204)\n        at com.google.devtools.build.lib.packages.AbstractAttributeMapper.get(AbstractAttributeMapper.java:67)\n        at com.google.devtools.build.lib.packages.NonconfigurableAttributeMapper.get(NonconfigurableAttributeMapper.java:47)\n        at com.google.devtools.build.lib.runtime.commands.RunCommand.isExecutableNonTestRule(RunCommand.java:512)\n        at com.google.devtools.build.lib.runtime.commands.RunCommand.isExecutable(RunCommand.java:498)\n        at com.google.devtools.build.lib.runtime.commands.RunCommand.validateTarget(RunCommand.java:449)\n        at com.google.devtools.build.lib.runtime.commands.RunCommand.validateTargets(RunCommand.java:405)\n        at com.google.devtools.build.lib.runtime.commands.RunCommand.access$000(RunCommand.java:85)\n        at com.google.devtools.build.lib.runtime.commands.RunCommand$1.validateTargets(RunCommand.java:119)\n        at com.google.devtools.build.lib.buildtool.BuildTool$1.notifyTargets(BuildTool.java:391)\n        at com.google.devtools.build.lib.pkgcache.LegacyLoadingPhaseRunner.execute(LegacyLoadingPhaseRunner.java:201)\n        at com.google.devtools.build.lib.buildtool.BuildTool.runLoadingPhase(BuildTool.java:401)\n        at com.google.devtools.build.lib.buildtool.BuildTool.buildTargets(BuildTool.java:165)\n        at com.google.devtools.build.lib.buildtool.BuildTool.processRequest(BuildTool.java:334)\n        at com.google.devtools.build.lib.runtime.commands.RunCommand.processRequest(RunCommand.java:115)\n        at com.google.devtools.build.lib.runtime.commands.RunCommand.exec(RunCommand.java:155)\n        at com.google.devtools.build.lib.runtime.BlazeCommandDispatcher.exec(BlazeCommandDispatcher.java:370)\n        at com.google.devtools.build.lib.runtime.BlazeRuntime$3.exec(BlazeRuntime.java:1009)\n        at com.google.devtools.build.lib.server.RPCService.executeRequest(RPCService.java:65)\n        at com.google.devtools.build.lib.server.RPCServer.executeRequest(RPCServer.java:434)\n        at com.google.devtools.build.lib.server.RPCServer.serve(RPCServer.java:229)\n        at com.google.devtools.build.lib.runtime.BlazeRuntime.serverMain(BlazeRuntime.java:968)\n        at com.google.devtools.build.lib.runtime.BlazeRuntime.main(BlazeRuntime.java:765)\n        at com.google.devtools.build.lib.bazel.BazelMain.main(BazelMain.java:55)\n\n$ bazel version\nBuild label: head (@f1c411b)\nBuild target: bazel-out/local_linux-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel-main_deploy.jar\nBuild time: Tue Nov 24 23:34:22 2015 (1448408062)\nBuild timestamp: 1448408062\nBuild timestamp as int: 1448408062\n\n```\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/159442241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/160711322", "body": "Thanks for the explanation. It makes perfect sense.\n\nDo you want me to repurpose this issue to ~\"bazel run a genrule should not throw stack trace\"?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/160711322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/205478689", "body": "Yea. It makes sense now. Given the same graph, the rank numbers don't change regardless of whether the graph comes from `deps(...)` or `rdeps(//..., ...)`, according to your definition of root nodes. Thank you for your explanation.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/205478689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "talios": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/88704998", "body": "@davidzchen It would be good if Bazel _didn't_ repeat the same bugs that Maven has in this regard tho.  Maven's \"compile\" scope is essentially a \"compile _and_ runtime\" scope, which is subtly different to its \"runtime\" scope.\n\nIf project-A has several compile time dependencies - there IT'S dependencies to compile, not necessarily be consumed by project-B's compilation.\n\nPulling in transitives for distribution and/or unit-testing is a different thing.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/88704998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/92281291", "body": "On 6 Apr 2015, at 1:50, Yucong Sun wrote:\n\n> Would it be possible to write a pom->bazel translation tool that\n> automatically generate relevant rules?\n\nActually, depending on the approach one took it shouldn't be all that difficult - ish, and certainly wouldn't be foolproof.\n\nOne could make use of the new [1] polyglot maven support and write a converter, that simply writes out a WORKSPACE file with all the dependencies, and potentially generate basic BUILD files for src/main and src/test for each module ( assuming a multi-module build ).\n\nI did some work on the original clojure polyglot implementation and been meaning to check out whats changed, might have to try find some time and take a look.\n\n[1] https://github.com/takari/maven-polyglot\n\n## \n\nMark Derricutt\nhttp://www.theoryinpractice.net\nhttp://www.chaliceofblood.net\nhttp://plus.google.com/+MarkDerricutt\nhttp://twitter.com/talios\nhttp://facebook.com/mderricutt\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/92281291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "aragos": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/88976294", "body": "@hanwen: That sounds fine to me but I honestly have no knowledge of c++ compilation on Macs so I'm probably the wrong person to ask. :)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/88976294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/97648151", "body": "Please document this new method. ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/97648151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/97648731", "body": "This user-supplied value should likely be validated against the restrictions that apply to module names. Normally we'd do this in the validate method(s) of the *Support class most related with the attribute but in this case the association isn't obvious (both bundling and compilation read it). I would say that this is more associated with compilation so validate the attribute there. In that case I'd also move this method there.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/97648731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "collinw": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/89084720", "body": "Is there a timeline for releasing proto_library support? We'd love to ditch Kythe's campfire build system, but can't feasibly do so without proto_library.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/89084720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90705238", "body": "FWIW, I'm not asking that Bazel be migrated to use syntax=\"proto3\"; I'm asking that the compiler be updated to include support for that syntax. The same compiler can handle both proto2 and proto3 syntax.\n\nIt certainly possible that I can build my own copy of the proto compiler. Is there documentation about how the binaries in third_party/protobuf/protoc\\* were produced?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90705238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "thefallentree": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/89774253", "body": "Would it be possible to write a pom->bazel translation tool that\nautomatically generate relevant rules?\n\nOn Sun, Apr 5, 2015 at 8:20 PM, David Z. Chen notifications@github.com\nwrote:\n\n> While that makes sense in theory, unfortunately, it does not always work\n> very well in practice. There are many Java projects that rely on jars to\n> pull in transitive dependencies in order to compile successfully.\n> \n> A concrete example of this is my attempts at compiling dropwizard-example\n> with Bazel. I am unable to simply use the list of dependencies in the Maven\n> pom\n> https://github.com/dropwizard/dropwizard/blob/4ceee223cddbac4183828c1c0277b1f9ec102a75/dropwizard-example/pom.xml\n> because the code directly references classes in jars that are transitive\n> dependencies of the ones listed in the Maven pom. For example, it assumes\n> that dropwizard-jersey will pull in jersey-server, etc.\n> \n> IIRC, the other Bazel build rules have the same behavior: if java_library\n> foo depends on bar and baz, and bar also depends on baz, then foo only\n> needs to add bar to its deps and baz will be included transitively. The\n> same applies to the cc_\\* rules from what I have observed. Please correct\n> me if I'm wrong.\n> \n> In any case, I think we need a better story around pulling Maven jars\n> transitively. Otherwise, migrating something as simple as\n> dropwizard-example would require one to dig deep into the various\n> transitive dependencies among the dropwizard jars it depends on in order\n> to cover all of the transitive dependencies, which is very time consuming\n> and may discourage adoption, unless covering all transitive dependencies\n> this way yields some properties that provides very clear benefits for\n> projects that do want to pull jars from Maven rather than checking them\n> into source control.\n> \n> @kchodorow https://github.com/kchodorow, @damienmg\n> https://github.com/damienmg - Is there a significant number of\n> artifacts in repositories such as Maven Central that are lacking version\n> info for dependencies?\n> @talios https://github.com/talios - I would also like to learn more\n> about the issues that Maven's behavior for its compile and runtime scopes.\n> Can you give some examples of how this has caused issues?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/bazel/issues/89#issuecomment-89757901.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/89774253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mzhaom": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90614248", "body": "What about \"-fno-omit-frame-pointer\"?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90614248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91643520", "body": "Thanks, this a duplicate of #90. I can verify it's fixed after pulling your change.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91643520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "fare": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90753363", "body": "Ouch. These are classes provided by the auto_value jar from maven. Apparently, that doesn't make bazel happy. I'll be working on it.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90753363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90754108", "body": "and where is that package third_party/protobuf coming from? There's no BUILD file in there. Or is it confusing multiple workspaces?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90754108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90754814", "body": "What is output/classes ? It doesn't smell like source code, but output files being confused for source code.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90754814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90756766", "body": "More generally, we should exclude any output directories from scanning of source code for the purpose of ...\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90756766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90756971", "body": "We didn't discover that earlier because the setup at Google avoids putting the outputs under the top workspace directory.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90756971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90758652", "body": "If while writing this support you find that you need features not yet supported in Skylark, please file bugs about it. I'll be glad to handle them.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90758652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "srib": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90762472", "body": "Any idea when a fix to this might be pushed for i686?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90762472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91375128", "body": "Hanwen: thanks for fixing this problem!\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91375128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91424100", "body": "Hanwen,\n\nI have a solution to this. I only have access to a Linux machine and I cannot test it on Mac. \n\nIs there a way someone can help me improve this? If it works, let me know and I can send a pull request. \n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91424100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91592974", "body": "The problem hasn't been fixed. I still get the same error message.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91592974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "emartynov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90861348", "body": "Thanks! I tried some other commands and they work\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90861348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kwatts": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90995800", "body": "Note: this depends on a py_binary fix:\nhttps://github.com/google/bazel/pull/104\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90995800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90996029", "body": "I signed the CLA\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/90996029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91367148", "body": "Sorry, adding \"cfg=HOST_CFG\" doesn't work.\n\n``` patch\ndiff --git a/common/packaging.bzl b/common/packaging.bzl\nindex 27e42c1..29d223a 100644\n--- a/common/packaging.bzl\n+++ b/common/packaging.bzl\n@@ -23,7 +23,7 @@ deploy = rule(\n     implementation=impl_deploy,\n     attrs = {\n         \"_smart_tar\": attr.label(default=Label(\"//common:smart_tar\"),\n-                                 executable=True),\n+                                 executable=True, cfg=HOST_CFG),\n         \"configs\": attr.label_list(allow_files=True),\n         \"deps\": attr.label_list(),\n     },\n```\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91367148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91676994", "body": "Thanks, that works!\n\n``` patch\ndiff --git a/common/packaging.bzl b/common/packaging.bzl\nindex 27e42c1..08d5082 100644\n--- a/common/packaging.bzl\n+++ b/common/packaging.bzl\n@@ -5,12 +5,10 @@ def impl_deploy(ctx):\n     paths += [ c.path for c in ctx.files.configs ]\n\n     ctx.action(\n-               inputs=ctx.files.configs + ctx.files.deps + [ctx.executable._smart_tar],\n+        executable=ctx.executable._smart_tar,\n+               inputs=ctx.files.configs + ctx.files.deps,\n                outputs=[ctx.outputs.tarball],\n-               command=\"%s %s %s\" % (ctx.executable._smart_tar.path,\n-                                     ctx.outputs.tarball.path,\n-                                     ' '.join(paths))\n-               )\n+        arguments=[ctx.outputs.tarball.path] + paths)\n\n \"\"\"\n Deployment:\n@@ -23,7 +21,7 @@ deploy = rule(\n     implementation=impl_deploy,\n     attrs = {\n         \"_smart_tar\": attr.label(default=Label(\"//common:smart_tar\"),\n-                                 executable=True),\n+                                 executable=True, cfg=HOST_CFG),\n         \"configs\": attr.label_list(allow_files=True),\n         \"deps\": attr.label_list(),\n     },\n```\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91676994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "claridge": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91278261", "body": "I'm joining the discusion from #107, and I just figured out the root of my own confusion. Why does compile.sh now create a .bazelrc in my home directory, or tell me to add the Bazel repo root to my home directory if I already have one?\n\nI have a separate project that I'm building with Bazel, and I rebuild Bazel itself fairly often to catch updates. Having its compilation touch global state like that is...surprising.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91278261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91290723", "body": "Ah, neat! I'll have to start watching the blog.\n\nFollowing damienmg's suggestion above, could you make compile.sh use <Bazel root>/base_workspace instead? Then other projects can still \"build ...\".\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91290723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91694887", "body": "I just reinstalled with the update. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91694887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ulfbot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91507020", "body": "Runtime.getRuntime().availableProcessors()?\n\nOn Fri, Apr 10, 2015 at 12:00 PM, Damien Martin-Guillerez <\nnotifications@github.com> wrote:\n\n> then for now just adding the necessary method to unix_jni\\* files is\n> probably the faster. I am sure we can call sysctl from Java with JDK 7+ but\n> I don't find it anymore. It is just a preference anyway.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/bazel/pull/110#issuecomment-91501592.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91507020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91514585", "body": "I don't think it's doing any of that sort - I think the documentation just\ntries to say that you can have cases where the number of cores changes over\ntime , both on the hardware side and on the software side, where you can\nreassign cores to processes on the fly - think taskset.\n\nOn Fri, Apr 10, 2015 at 12:47 PM, Han-Wen Nienhuys <notifications@github.com\n\n> wrote:\n> \n> According to the Java docs, getRuntime().availableProcessors() may change\n> according to load, so you have to poll it. I imagine it will give\n> misleading results if we're busy dispatching lots of spawns, because it\n> would take the load generate ourselves into account. Also, it gives the\n> number of CPUs available to the JVM, while we may want to have what's\n> available outside the JVM.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/bazel/pull/110#issuecomment-91513439.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/91514585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "schroederc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/92426443", "body": "The Kythe team has found that the genproto rule isn't as easy to use as you've suggested.  It seems to have at least one severe issue that we'd need fixed before we migrate to using Bazel.\n\nBazel special-cases the genproto Skylark rule for Java (see [BazelJavaRuleClasses.java](https://github.com/google/bazel/blob/master/src/main/java/com/google/devtools/build/lib/bazel/rules/java/BazelJavaRuleClasses.java#L118)).  It does not, however, support the native C++ rules in the same way.  We have thought of a few ways to workaround this problem but feel that they would burden us in the same way as having our own build system.  Switching to Bazel (from Campfire) is meant to remove these types of concerns from our team.\n\nLikewise, having to write our own support for C++ (and Go) means maintaining even more build-related logic.  It would be nice if C++ was supported in genproto by the Bazel team.  That would minimize our need for forking/maintaining the existing rule.\n\nOther Relevant C++ issues:\n- https://github.com/google/bazel/issues/114\n- https://github.com/google/bazel/issues/117\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/92426443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "DomT4": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/10388754", "body": "This is actually likely to break compile. `brew --prefix $FORMULA` leads to the `opt_prefix`, in this case, presuming you keep Homebrew in `/usr/local` -  `/usr/local/opt/libarchive/`. Running the full command makes this happen: \n\n`cannot access /usr/local/opt/libarchive/Cellar/libarchive/*/include/archive.h: No such file or directory`.\n\nYou want to change it to just `$(ls -1 $(brew --prefix libarchive)/include/archive.h | head -n1)` - Obviously with the `/dev/null` calls still in place.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/10388754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/10388785", "body": "Ah! I hadn't updated my local git clone yet, you've already fixed the above comment in https://github.com/google/bazel/commit/9a0dc1b222269c527942749c2990efabba38fb9b. Apologies :smile_cat: \n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/10388785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "ademuri": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/11338019", "body": "Does the sha1 need to be mandatory? Without transitive dependency resolution, this is kind of annoying.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/11338019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "hosaka": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/11340775", "body": "Same issue happens when _JAVA_OPTIONS are set.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/11340775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "mrdomino": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/12426295", "body": "Although of course Arch went crazy and made python point to python3. :-p\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/12426295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/12426526", "body": "No complaints; I'm not using Arch for anything serious atm anyway.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/12426526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/15559735", "body": "This is not portable. On my current vendored bazel setup (which relies on manual `PATH` editing), I need to have a `linux-x86_64/bazel` and `darwin-x86_64/bazel` (the latter for OS X workstations and build slaves.)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/15559735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/15567494", "body": "Ah, good idea. So this script is bazel on your path, and then tools/bazel is a script in your repo that redirects to the appropriate bazel-real. Cool.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/15567494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "pfn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/13226479", "body": "How does this work pre-4.4? As I understand it, android.app.ResourcesManager is new for android-4.4. There are no obvious try/catch that prevent this from crashing when running on a pre-4.4 device.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/13226479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/13241091", "body": "nevermind, I guess this is controlled build-side: don't deploy external resources if device version level is <4.4\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/13241091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "klaasb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/14279588", "body": "Sorry for that, must've slipped through.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/14279588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "mickeyreiss": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/14857491", "body": "@hanwen Can you share context as to why `jvm_flags` does not support `$(location)`? Am I mistaken in that understanding?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/14857491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/72137357", "body": "The possibilities are:\n1. `workspace_file` and `build_file` (new behavior, requested in #1520)\n2. `output_dir` (current behavior)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/72137357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/72137460", "body": "Sorry, will fix.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/72137460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "bsilver8192": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/15566012", "body": "I was thinking the logic for running different binaries for different platforms etc would live in your tools/bazel (eg have a shell script that looks at uname, and then execs the appropriate binary). Seems more flexible than hard-coding a limited subset of the information from the environment into a path or something.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/15566012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "shahms": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/16769546", "body": "This patch introduces a race condition between finding the directories to mount and actually mounting them such that it will non-deterministically break builds if a directory is removed before being mounted.  There exist nsscache tools which add a temporary directory to /etc, validate the contents and then move them to a permanent location.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/16769546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/17112538", "body": "This change is actually pretty disastrous for external repositories (although less so than turning it into an error would be), particularly locally installed or system libraries outside of the default search path.\n\nSay, for example, you have a project with a dependency on libmemcached and want to allow developers to point at either a locally compiled version via LIBMEMCACHED_HOME or use pkg-config to find the system installed version.  Prior to this change, we could use a repository_rule to create the requisite symlinks and generate a BUILD file which used `includes` to point at the right header files while still including them via the standard system path (e.g. #include <libmemcached/memcached.h>)\n\nAfter this, we get a big warning and/or a big headache.\n\nIt's certainly possible that we're doing it wrong and should jump through a bunch more hoops so the headers can/must be included as `#include \"external/libmemcached/memcached.h\"` but every single such hoop is going to complicate education, migration and adoption of Bazel.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/17112538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/17919058", "body": "This straight-up breaks specifying `-I` includes in the `copts` attribute for external dependencies.  `$(location)` doesn't work in `copts` (and specifying directories that way isn't necessarily reliable), `$(GENDIR)` and `$(BINDIR)` are incorrect for external repositories.  Prefacing these dependencies with: `bazel-out/local_linux-fastbuild` seems wrong and depends on the value of the `-c` flag.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/17919058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/17921184", "body": "Thanks! `../foo` as in `-I../<reponame>/path/to/dir`?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/17921184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/17921200", "body": "As an aside, it would be really nice to minimize the number of places I have to hard code a repository name, but I get that that's impractical/unfeasible.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/17921200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "fzakaria": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/17075630", "body": "@lberki - Why did you use the map of compiler from //third-party ? From the documentation it sounds like it should be bound to `//external` so that people can just reuse BUILD files ?\n(using _git_repository_)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/17075630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "ladventure": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/17208971", "body": "It is very diao diao diao\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/17208971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "kheuton": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/17959420", "body": "This does not appear to fix #1358. To test, I added made these 4 additions to the `src/main/java/com/google/devtools/build/lib/bazel/rules/BazelConfiguration.java` file from the 0.2.3 tagged release.\n\nWhen that failed, I checked out this commit from the master branch, and still see the same errors:\n\n```\nERROR: /snfs2/HOME/krheuton/tensorflow/tensorflow/core/BUILD:90:1: null failed: protoc failed: error executing command \n  (cd /snfs2/HOME/krheuton/.cache/bazel/_bazel_krheuton/4bbcdf630a5812f0ffcb10ef621943b3/execroot/tensorflow && \\\n  exec env - \\\n  bazel-out/host/bin/external/protobuf/protoc '--cpp_out=bazel-out/host/genfiles/' -I. -Iexternal/protobuf/src -Ibazel-out/host/genfiles/external/protobuf/src tensorflow/core/example/example.proto tensorflow/core/example/feature.proto tensorflow/core/framework/allocation_description.proto tensorflow/core/framework/attr_value.proto tensorflow/core/framework/cost_graph.proto tensorflow/core/framework/device_attributes.proto tensorflow/core/framework/function.proto tensorflow/core/framework/graph.proto tensorflow/core/framework/kernel_def.proto tensorflow/core/framework/log_memory.proto tensorflow/core/framework/op_def.proto tensorflow/core/framework/step_stats.proto tensorflow/core/framework/summary.proto tensorflow/core/framework/tensor.proto tensorflow/core/framework/tensor_description.proto tensorflow/core/framework/tensor_shape.proto tensorflow/core/framework/tensor_slice.proto tensorflow/core/framework/types.proto tensorflow/core/framework/variable.proto tensorflow/core/framework/versions.proto tensorflow/core/lib/core/error_codes.proto tensorflow/core/protobuf/config.proto tensorflow/core/protobuf/meta_graph.proto tensorflow/core/protobuf/named_tensor.proto tensorflow/core/protobuf/queue_runner.proto tensorflow/core/protobuf/saver.proto tensorflow/core/protobuf/tensorflow_server.proto tensorflow/core/util/event.proto tensorflow/core/util/memmapped_file_system.proto tensorflow/core/util/saved_tensor_slice.proto tensorflow/core/util/test_log.proto): com.google.devtools.build.lib.shell.BadExitStatusException: Process exited with status 1.\nbazel-out/host/bin/external/protobuf/protoc: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.18' not found (required by bazel-out/host/bin/external/protobuf/protoc)\nTarget //tensorflow/cc:tutorials_example_trainer failed to build\nINFO: Elapsed time: 80.675s, Critical Path: 25.12s\n```\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/17959420/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "kevmoo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/18440400", "body": "Should this be tagged as a release?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/18440400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/18449589", "body": "Ah! Gotcha. Thanks\n\nOn Jul 29, 2016 01:05, \"Damien Martin-Guillerez\" notifications@github.com\nwrote:\n\n> It will once it become a release. It is just a release candidates for now.\n> \n> On Fri, Jul 29, 2016, 12:35 AM Kevin Moore notifications@github.com\n> wrote:\n> \n> > Should this be tagged as a release?\n> > \n> > \u2014\n> > You are receiving this because you are subscribed to this thread.\n> > Reply to this email directly, view it on GitHub\n> > <\n> > https://github.com/bazelbuild/bazel/commit/c6cfe0be06bcffdb439c5cadd8e091464d3ee766#commitcomment-18440400\n> > ,\n> > or mute the thread\n> > <\n> > https://github.com/notifications/unsubscribe-auth/ADjHf-75TVQrWrC3PvN0Y9BI_duBcg6Tks5qaS6_gaJpZM4JXthL\n> > \n> > .\n> \n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> https://github.com/bazelbuild/bazel/commit/c6cfe0be06bcffdb439c5cadd8e091464d3ee766#commitcomment-18444655,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AABCilHMwNT5gvtwbchZC9awYPflZtyFks5qabRVgaJpZM4JXthL\n> .\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/18449589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "abergmeier-dsfishlabs": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/18623294", "body": "Using `subprocess.call` breaks various things (signal handling being among them). Why is zip handling not done outside?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/18623294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/18623335", "body": "The whole necessity of this script is the first thing I do not understand.\nWhy can't you call the \"real python binary\":tm: and load the necessary python main script?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/18623335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/19950425", "body": "Is there a reason why `MakeDirectories` is not returning something a bit more descriptive like `std::error_condition`?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/19950425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/19961119", "body": "Especially with `MakeDirectories` it would be nice IMO to have an error message which at least roughly points into the direction of the problem. Having to look at all possible variants why a directory could not be created is tedious. Currently have exactly that problem.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/19961119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20182127", "body": "Amazing, thanks :)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20182127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20778925", "body": "I seem to be missing something. Why is `expandMakeVariables` called with `includes`? Naive me would expect `imports`.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20778925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20814099", "body": "Why not use `os.pathsep`?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20814099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/24566946", "body": "This seems wrong. Shouldn't it be `too few arguments`? Just seem to have hit that with calling `repository_ctx.path()`.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/24566946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/24752008", "body": "Isn't that _throwing the baby out with the bathwater_? What if there is a DNS change while Bazel Server is running?\r\nWhy not returning the cached hostname and executing the Hostname lookup in a secondary background thread and then updating cache. This way at least the next call gets a current value.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/24752008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/92777461", "body": "@damienmg Out of curiousity, is scanning of includes using the same `genrule` infrastructure we have available in Skylark or is it cheating?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/92777461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/100746002", "body": "That means that the path in question must NEVER be extended afterwards (without calling the function again). Also, nobody guarantees that some Python API does not choke on 258 characters or such. In general it makes the whole handling more brittle IMO.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/100746002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/105382848", "body": "IMO the bit cleaner way would be to search for `VC/Auxiliary/Build/VCVARSALL.BAT` and from that infer the possible editions.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/105382848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "LaceyChen17": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/19605886", "body": "Will this commit influence bazel fetch external dependencies using proxy?\n\nI am trying to build tensorflow and it shows Warning: ignoring http_proxy in environment.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/19605886/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/100693685", "body": "The idea about endsWith is awesome.But I don't think we need a `!`.Say I have `requestUrl = URL(\"http://mybiz.com\")` and `export NO_PROXY=mybiz.com`.Then this would call `createProxy(null)` (Notice that `proxyAddress`  being initialized as `null`)and wouldn't create a proxy.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/100693685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "greg1github": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/19858439", "body": "Not working for me either.  I described my setup here [https://github.com/tensorflow/tensorflow/issues/3261](url) I also tried hard-coding the path\r\n\r\nbuilder.put(\"LD_LIBRARY_PATH\", \"/home/sr1/greg.m/lib/gcc-4.9.4_built/lib64\");\r\n\r\nand commenting out your change. Still protoc is missing GLIBCXX_3.4.18 when I try to build tensorflow.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/19858439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "dahlstrom-g": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20391894", "body": "\u2026 except targets can also be affected by changes to files Bazel interprets\u2014BUILD files, Skylark extensions, configuration files\u2014and to binaries like compilers and Bazel itself.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20391894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "rjmccabe3701": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20920762", "body": "ummm ... no way to disable this?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20920762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20922916", "body": "I tried removing the check and get\r\n\r\n> ERROR: com.google.devtools.build.lib.packages.BuildFileContainsErrorsException: error loading package '': Encountered error while reading extension file 'closure/defs.bzl': no such package '@io_bazel_rules_closure//closure': Error downloading [http://bazel-mirror.storage.googleapis.com/github.com/bazelbuild/rules_closure/archive/5ca1dab6df9ad02050f7ba4e816407f88690cf7d.tar.gz, https://github.com/bazelbuild/rules_closure/archive/5ca1dab6df9ad02050f7ba4e816407f88690cf7d.tar.gz] to /home/rjmccabe/.cache/bazel/_bazel_rjmccabe/7a0162ed60bb1d30400c999e6e881b3e/external/io_bazel_rules_closure/5ca1dab6df9ad02050f7ba4e816407f88690cf7d.tar.gz: All mirrors are down: [java.lang.NullPointerException].\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20922916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "nguyenhoan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20932660", "body": "Hi @katre \r\nWe are a team of researchers from Iowa State, The University of Texs at Dallas and Oregon State University, USA. We are investigating common/repeated code changes.\r\nWe have four short questions regarding the change in the image below which is part of this commit.\r\n![image](https://cloud.githubusercontent.com/assets/2257582/23070844/048a5506-f4f2-11e6-8010-b5e526fe7c26.png)\r\n\r\nQuestions:\r\n\r\nQ1- Is the change at these lines similar to any other changes (from other locations of the same commit or from other commits)? (yes, no, not sure)\r\n\r\nQ2- Can you briefly describe the change and why you made it? (for example, checking parameter before calling the method to avoid a Null Pointer Exception)\r\n\r\nQ3- Can you give it a name? (for example, Null Check)\r\n\r\nQ4- Would you like to have this change automated by a tool? (Yes, No, Already automated)\r\n\r\nThe data collected from the answers will never be associated with you or your project. Our questions are about recurring code changes from the developer community, not about personal information. All the data is merged across recurring changes from GitHub repositories. We will publish aggregated data from the trends of the whole community. \r\nWe have a long tradition of developing refactoring tools and contributing them freely to the Eclipse, Netbeans, Android Studio under their respective FLOSS licenses. For example, look at some of our recently released refactoring tools: http://refactoring.info/tools/ \r\n\r\nThank you,\r\nHoan Nguyen https://sites.google.com/site/nguyenanhhoan/\r\nMichael Hilton http://web.engr.oregonstate.edu/~hiltonm/\r\nTien Nguyen http://www.utdallas.edu/~tien.n.nguyen/\r\nDanny Dig http://eecs.oregonstate.edu/people/dig-danny\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/20932660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "bolinfest": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21009945", "body": "This section was quite useful: why was it deleted rather than moved?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21009945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21021275", "body": "@damienmg Awesome, thanks!", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21021275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "or-shachar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21157002", "body": "@lfpino  - I'm trying to replicate this behavior in `rules_scala` repo. \r\n(main motivation is to make sure I have `bazel` available on test_sh runtime)\r\n\r\nCan you please help me understand where is this `src/bazel` coming from. I don't see it in `src` directory. \r\n\r\n@damienmg @johnynek @ittaiz  - FYI", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21157002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21168245", "body": "Thanks @damienmg  !\r\nUnfortunately -  I couldn't find there a target called `bazel` or that can explain what makes `src/bazel` available on the runfile environment...", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21168245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21169963", "body": "Thanks. The question is - how to import that  `io_bazel/src/bazel` ? \r\nIt doesn't seem to be available when we're not actually running in `io_bazel` workspace.\r\n\r\nThe function `$(rlocation io_bazel/src/bazel)` fails on foreign repository (like **rules_scala**)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21169963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21175460", "body": "I think I have a final answer.\r\nSeems like `io_bazel/src/bazel` is coming from [this target](https://github.com/bazelbuild/bazel/blob/master/src/BUILD#L208), that creates the `bazel` executable...\r\n\r\nThis gentool seems to be heavily dependent on targets within bazel repository.\r\nThis means that we need to find another way to import `bazel` into the `$TEST_SRCDIR`\r\nWe'll continue this thread [here](https://github.com/bazelbuild/rules_scala/pull/156)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21175460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "pawatzaza5": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21359608", "body": "p", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21359608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "develra": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21378534", "body": "I had a similar problem. This works great. Thanks! ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21378534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "hermione521": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21415983", "body": "@develra I'm glad it helps you :)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21415983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "keith": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21693275", "body": "@philwo can you explain why this was reverted? And also if there's any plan to add it back?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21693275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21700838", "body": "Awesome, thanks for the context!", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21700838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "allevato": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21700630", "body": "That's correct\u2014the change broke another project and we rolled it back. Unfortunately the reason that it broke is not entirely clear so it's been a bit slower trying to fix it. \ud83d\ude1e  I'm hoping to have a solution soon!", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21700630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "sjackman": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21746175", "body": "White listing just `HOMEBREW_RUBY_PATH` isn't sufficient. All environment variables starting with `HOMEBREW_` need to be white listed. The current list is:\r\n```\r\nHOMEBREW_ARCHFLAGS HOMEBREW_CC HOMEBREW_CCCFG HOMEBREW_CC_LOG_PATH HOMEBREW_CELLAR HOMEBREW_DEPENDENCIES HOMEBREW_EXPERIMENTAL_FILTER_FLAGS_ON_DEPS HOMEBREW_FORMULA_PREFIX HOMEBREW_INCLUDE_PATHS HOMEBREW_ISYSTEM_PATHS HOMEBREW_LIBRARY_PATHS HOMEBREW_OPT HOMEBREW_OPTFLAGS HOMEBREW_OPTIMIZATION_LEVEL HOMEBREW_PREFIX HOMEBREW_RPATH_PATHS HOMEBREW_RUBY_PATH HOMEBREW_TEMP\r\n```", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21746175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21746296", "body": "I extracted this list from this source file:\r\nhttps://github.com/Homebrew/brew/blob/master/Library/Homebrew/shims/super/cc#L23\r\n\r\nIt's best to white list all environment variables that start with `HOMEBREW_` so that you don't have to keep your list synchronized with Homebrew. It could cause weird breakage if only some variables are missing from your white list.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21746296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "juhalindfors": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21924952", "body": "This commit breaks my previously working toolchain configuration. The previous commit 3e25d20 was still ok:\r\n\r\n```\r\n> git checkout 2195f25\r\nM\tsrc/java_tools/buildjar/java/com/google/devtools/build/buildjar/javac/BlazeJavacMain.java\r\nPrevious HEAD position was 3e25d20... Cleanup SingleJarActionBuilder\r\nHEAD is now at 2195f25... Update to javac9-r4023\r\n\r\n> bazel build //src:bazel\r\n.\r\nINFO: Found 1 target...\r\nTarget //src:bazel up-to-date:\r\n  bazel-bin/src/bazel\r\n> cd mytest/\r\n> ../bazel-bin/src/bazel build lib --java_toolchain=:testlib-toolchain\r\nExtracting Bazel installation...\r\n.\r\nINFO: Found 1 target...\r\nERROR: missing input file '@bazel_tools//third_party/java/jdk/langtools:javac-9-dev-r3297-4.jar'.\r\nERROR: /home/u/.cache/bazel/_bazel_u/425a650790ab9/external/project/BUILD:31:1: @project//:target: missing input file '@bazel_tools//third_party/java/jdk/langtools:javac-9-dev-r3297-4.jar'.\r\nTarget //:lib failed to build\r\n```\r\n\r\nToolchain config:\r\n\r\n\r\n```\r\njava_toolchain(\r\n    name = \"testlib-toolchain\",\r\n    bootclasspath = [\"@bazel_tools//tools/jdk:bootclasspath\"],\r\n    encoding = \"iso-8859-1\",\r\n    extclasspath = [\"@bazel_tools//tools/jdk:extdir\"],\r\n    forcibly_disable_header_compilation = 0,\r\n    genclass = [\"@bazel_tools//tools/jdk:GenClass_deploy.jar\"],\r\n    header_compiler = [\"@bazel_tools//tools/jdk:turbine_deploy.jar\"],\r\n    ijar = [\"@bazel_tools//tools/jdk:ijar\"],\r\n    javabuilder = [\"@bazel_tools//tools/jdk:JavaBuilder_deploy.jar\"],\r\n    javac = [\"@bazel_tools//third_party/java/jdk/langtools:javac_jar\"],\r\n    javac_supports_workers = 1,\r\n    jvm_opts = [\r\n        \"-XX:+TieredCompilation\",\r\n        \"-XX:TieredStopAtLevel=1\",\r\n    ],\r\n    misc = [\r\n        \"-XDskipDuplicateBridges=true\",\r\n    ],\r\n    singlejar = [\"@bazel_tools//tools/jdk:SingleJar_deploy.jar\"],\r\n    source_version = \"8\",\r\n    target_version = \"8\",\r\n\r\n    visibility = [\"//visibility:public\"]\r\n)\r\n```\r\n\r\nThe issue still persists on current HEAD.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/21924952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/22276866", "body": "Is there a list of open issues that needs completion before java_common.compile can be used instead of java_library?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/22276866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jbduncan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/22131116", "body": "@aehlig @kchodorow I believe that the \"JOSN\" in this sentence should read as \"JSON\"? :)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/22131116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/22898231", "body": "@laszlocsomor I just happened to notice that blank lines were inserted in this non-static imports block, which IIRC goes against google-java-format's behaviour of removing such lines.\r\n\r\nWas the addition of these blank lines intentional?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/22898231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/22911105", "body": "Okey-dokey. Thanks for clarifying things for me. :)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/22911105/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/23512808", "body": "@brandjon I don't know if you've considered it, but I think this can be alternatively written as `Iterators.unmodifiableIterator(getContentsUnsafe.iterator())`, which might be more readable or a tiny bit more efficient.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/23512808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/23512930", "body": "@michajlo Please correct me if I'm mistaken, but I think this line of code would more accurately do what you wanted here if it were replaced with `Sets.newHashSetWithExpectedSize(visibilityLabels.size() + 1)`.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/23512930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/23512946", "body": "@michajlo Ditto, but using ` `Sets.newHashSetWithExpectedSize(visibilityLabels.size() + ruleLabels.size())` instead.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/23512946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/23515703", "body": "> Shame I can't do it for the listiterator methods as well.\r\n\r\nShame indeed. :(", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/23515703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25143502", "body": "@dslomov Was this particular change intended? :thinking: ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25143502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26226100", "body": "@tomlu `String#split`has known problems like this. Have you considered using [`com.google.common.base.Splitter`](https://google.github.io/guava/releases/23.0/api/docs/com/google/common/base/Splitter.html), which doesn't have these deficiencies?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26226100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26552347", "body": "@janakdr Would it be worthwhile to make the type of `hashCode` `OptionalInt` so as to prevent recomputation if the hash code indeed is -1, or would the extra memory consumption not be worth it?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26552347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26565133", "body": "Okay, cool, I'm happy either way then. :)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26565133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26692182", "body": "Hey @cushon. Minor nit: I believe this line can be shortened from `vals.stream().forEachOrdered(...)` to `vals.forEach(...)`.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26692182/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26721338", "body": ":+1: ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26721338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26925814", "body": "@haxorz I'm not sure if this has been discussed already, so apologies if it has, but I fear that catching _all_ throwables is a bit too dangerous, as `UnixGlob` may catch unexpected `StackOverflowError`s or `OutOfMemoryError`s, which AFAIK should never be caught. Catching all `Exception`s seems perfectly reasonable to me, but going the level up to `Throwable` causes alarm bells to go off in my mind.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26925814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26927779", "body": "Oh, wow, that actually sounds very complicated.\r\n\r\nI admit that I've not fully understood your otherwise very comprehensive explanation, but I think I have understood a couple of things:\r\n\r\n1. Things get very messy when exception handing, threading and `UncaughtExceptionHandler` come together.\r\n2. `BazelPackageLoader`, which itself uses `UnixGlob` and `GlobVisitor`, all work under the assumption that they are part of a multithreaded environment - an environment which Bazel itself is prepared for with a custom `UncaughtExceptionHandler` (and presumably other mechanisms). However, the internal client of `BazelPackageLoader` apparently does not realise that it needs to supply or use a custom `UncaughtExceptionHandler`, meaning that when certain exceptions (or any exception?) gets thrown close to or by `UnixGlob`, the internal client never actually sees/catches them, because they are automatically swallowed by the non-main threads in the multithreaded environment instead.\r\n\r\n...Is my current understanding correct, more or less? Are there any other important high-level details that I've missed or not understood?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26927779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26940372", "body": "Cool! Thank you very much for taking the time to explain all of this to me. :)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26940372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26969236", "body": "@cushon It's not clear to me from this commit what version of turbine was checked in.\r\n\r\nI wonder if the version information should be appended to the name of the jar, as with the last version. WDYT?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26969236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "yvdriess": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/22228580", "body": "Seconding @LaceyChen17 , this change means I can no longer build tensorflow from behind the corporate proxy. 0.5 does not seem to offer a fix.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/22228580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "joydeep-mitra": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/22240368", "body": "This still didn't fix the problem. I'm getting the following error on redhat linux 6.6 cpu=x86_64. See [https://github.com/bazelbuild/bazel/issues/3038](url)\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/22240368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "neosformpeople": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/23256097", "body": "158974207\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/23256097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "snowp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/23873813", "body": "maybe im missing something, but this reads to me like we won't attach the srcjar if we've already cached the main jar? ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/23873813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "ittaiz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/24088401", "body": "@cushon What is this feature? I'm fiddling with scala strict deps and using strict deps from skylark so I'm interested in the area :)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/24088401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/24095188", "body": "Thanks for replying.\nWhat is \"it\"?\nOn Tue, 5 Sep 2017 at 20:14 Liam Miller-Cushon <notifications@github.com>\nwrote:\n\n> It's on by default for Java compilations if --java_header_compilation is\n> enabled. (It used to have a separate flag, but that was removed in 923d7df\n> <https://github.com/bazelbuild/bazel/commit/923d7df521f67d031b288180560848bd35e20976>\n> .)\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bazelbuild/bazel/commit/98bfd9831168660d10ba4f29b62dc65d90653b13#commitcomment-24094922>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABUIF4U4B8ktijMtLZR_DESAQj5XScOKks5sfYGDgaJpZM4PMzOD>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/24095188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/24424532", "body": "@iirina\r\nWhat happened to using deps?\r\nIMHO this was one of the wins of your design as it minimized the cognitive load of the user and added encapsulation ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/24424532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/24425254", "body": "Awesome! I was just afraid some new obstacle surfaced. Thanks.\nOn Wed, 20 Sep 2017 at 10:13 Irina Iancu <notifications@github.com> wrote:\n\n> That's arriving in a follow up change. I don't want to add multiple\n> functionalities into one change.\n>\n> On Wed, Sep 20, 2017 at 9:05 AM, Ittai Zeidman <notifications@github.com>\n> wrote:\n>\n> > @iirina <https://github.com/iirina>\n> > What happened to using deps?\n> > IMHO this was one of the wins of your design as it minimized the\n> cognitive\n> > load of the user and added encapsulation\n> >\n> > \u2014\n> > You are receiving this because you were mentioned.\n> > Reply to this email directly, view it on GitHub\n> > <\n> https://github.com/bazelbuild/bazel/commit/655a529db693e0d3c89a68ca81fc4858147b90f0#commitcomment-24424532\n> >,\n> > or mute the thread\n> > <\n> https://github.com/notifications/unsubscribe-auth/ABnAmi7VN3_YAPEaQscOF8osIoxtQKhlks5skLlUgaJpZM4PdbhD\n> >\n> > .\n> >\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bazelbuild/bazel/commit/655a529db693e0d3c89a68ca81fc4858147b90f0#commitcomment-24424674>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABUIF5xmu4N463WLdME3B55WKdatugwTks5skLsygaJpZM4PdbhD>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/24425254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "Teena000": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25231026", "body": "5cc6246", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25231026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25231030", "body": "5cc6246", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25231030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "soonho-tri": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25387448", "body": "@mhlopko, I think we need to unset `libname` variable right after line 86. Otherwise, the `libname` variable keeps the string from the previous iteration and this condition passes even if the current iteration doesn't assign/update it.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25387448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "nlopezgi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25932899", "body": "It looks like this commit broke builds with remote execution (is there a typo on tools/test/BUILD? coverage_suppot vs coverage_suppoRt). Error message:\r\nno such target '@bazel_tools//tools/test:coverage_support': target 'coverage_support' not declared in package 'tools/test' (did you mean 'coverage_suppot'?) defined by .../external/bazel_tools/tools/test/BUILD and referenced by '//tools/defaults:coverage_support'", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/25932899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "jafar786": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26001120", "body": "Ok", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26001120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "AdamFridel": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26163336", "body": "-", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26163336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jgavris": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26395145", "body": "@buchgr This is awesome! Just tested this out and moving tons of bytes.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26395145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26395151", "body": "And now I no longer have to deal with deploying yet another service.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26395151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26395309", "body": "How can I pass a relative file path (relative to workspace?) to `--auth_credentials`?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26395309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26398415", "body": "Actually, nevermind, relative paths work. I was just re-using this bazelrc file to build bazel itself (wrapper script bootstraps bazel, then uses bootstrapped bazel to build), and the path just needed to be tweaked. ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26398415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/123754100", "body": "On `master` it's `remote_rest_cache`", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/123754100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "fanzier": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26689350", "body": "Hi Alex, you're right, copying doesn't seem to work as documented. I personally prefer your second solution because it think it would be annoying to type `java -jar /usr/local/bin/Skylint_deploy.jar` all the time. But I don't work on Bazel anymore, so I better let someone else decide. @laurentlb, what do you think?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/26689350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "johnynek": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46184308", "body": "are these needed? It would be nice to default to discovering all the suites in the jar and running them. That seems like the preferred way to go. If you don't want to run a suite, it should be in its own target, and just not test that target.\n\nOr at least, that's my view.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46184308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46184432", "body": "I think it is better to download rather than add the jar to the git repo. This can be done by adding to the WORKSPACE.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46184432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46184457", "body": "same comment about it being better to not check in the jar.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46184457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46206193", "body": "I looked at the dependencies here:\n\nhttp://central.maven.org/maven2/org/scalatest/scalatest_2.11/2.2.4/scalatest_2.11-2.2.4.pom\n\nIt looks like everything other than scala is optional or test. This does mean using generator/scalacheck style won't work here, but I think that's okay for a first draft.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46206193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46206319", "body": "I have this:\nhttps://bazel-review.googlesource.com/#/c/2410/1\n\nwhich pulls scala 2.11 and gets the scalac and scalalib there. It would be nice to use the jar provided there once both this and that are merged.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46206319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46206361", "body": "I didn't find the email thread. Can you link here for completeness?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46206361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46722035", "body": "+1 to something basic that works is better than the current state. We can definitely iterate.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46722035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50303511", "body": "these should no longer be here right?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50303511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53664891", "body": "Yeah, I don't like it. But `scala_library` defines an ijar output always. I don't see how I can tell bazel that output is only generated when srcs are non-empty. So, what I do is just copy the (empty) jar to be the ijar. I do this with the flag so that we can accomodate `scala_macro_library` which never creates ijars.\n\nSo basically a desire for consistency with `java_library` and both `scala_library` and `scala_macro_library` motivated this choice.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53664891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53666087", "body": "we call it with true here:\nhttps://github.com/bazelbuild/bazel/pull/948/files#diff-981b14fba970d9a9d0dd316467d216eeR222\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53666087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53674007", "body": "no, sorry I was not very clear:\n\n1) `scala_library` calls `_lib`: https://github.com/bazelbuild/bazel/pull/948/files#diff-981b14fba970d9a9d0dd316467d216eeR222\n2) `_lib` calls `_compile_or_empty`: https://github.com/bazelbuild/bazel/pull/948/files#diff-981b14fba970d9a9d0dd316467d216eeR198\n3) `_compile_or_empty` calls `_build_nosrc_jar`: https://github.com/bazelbuild/bazel/pull/948/files#diff-981b14fba970d9a9d0dd316467d216eeR110\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53674007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53686111", "body": "yes, but not ignored here:\nhttps://github.com/bazelbuild/bazel/pull/948/files#diff-981b14fba970d9a9d0dd316467d216eeR52\n\nwhere bazel it checking that an ijar war produced. There are two places where ijar identity is relevant;\n1. where bazel checks that all outputs are created by some rule.\n2. where dependant scala rules look for their compile time dependency.\n\nSo, in 2 above, I don't bother to give it the path to the copy, but I generate that path for 1 so bazel sees that it is created.\n\nWould you prefer another approach?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53686111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/54616770", "body": "aren't there missing `)` on lines 40 and 44 below?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/54616770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "dinowernli": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46204594", "body": "Sounds good. Added a download instead.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46204594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46204617", "body": "Added a download here as well :)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46204617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46205034", "body": "I agree that it would be nice. As discussed on the email thread, the big challenge is that, in Scala, the test suite name cannot easily be inferred from the path (because packages are independent of the file sytem). So I see two options:\n- Add a custom test runner (written in Scala/Java) which wraps the usual scalatest runner and does this discovery at runtime.\n- Specify the suites by hand.\n\nI went for the second option for now because the first one seemed controversial on the thread. Also, supporting the second one seems like a good idea regardless of whether we end up adding the first one in addition.\n\nWhat do you think?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46205034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46206561", "body": "Certainly, here it is: https://groups.google.com/forum/#!msg/bazel-dev/5Kbbwr11XOA/znTY-H1DBgAJ\n\nIt's also in the top-level description of the change but maybe it's more visible here inline.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46206561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46206756", "body": "Oh, nice! Specifying the scala version to use in inside the workspace rather than a symlink sounds great.\n\n+1 regarding the plan once both are merged.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46206756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46207045", "body": "Yup, I figured if we need some of the optionals in there, we can still add them manually when the need comes up.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46207045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46535607", "body": "Thanks Orr, responded on the main thread. Would it make sense to get this PR in as a \"basic\" way of specifying tests and possibly add more runners in the future?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46535607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/51358489", "body": "Ack :)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/51358489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "orrsella": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46418228", "body": "@johnynek @dinowernli Added a comment to the thread, which I think basically implements what @johnynek said above. Would love to hear what you think (preferably in the thread?).\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46418228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "kjiwa": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53219311", "body": "Nit: These aren't \"levels\". How about naming it _LANGUAGES _SUPPORTED_LANGUAGES?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53219311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53231957", "body": "I meant to put an \"or\" between the two suggestions. :-/\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53231957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53240640", "body": "Oh yeah, good catch. This should reference -20160208 which is the latest release I can find.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53240640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53240723", "body": "I'll submit an update to this separately.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53240723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Dominator008": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53231511", "body": "Done. I guess you meant `_SUPPORTED_LANGUAGES`?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53231511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53232161", "body": "I see :)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53232161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53242334", "body": "Good catch. I missed the deprecated `--closure_entry_point` argument on the other line.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53242334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53242462", "body": "The CLI accepts name aliases.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53242462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53243730", "body": "Would you mind updating the documentation / help message within Closure Compiler? :)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53243730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53240923", "body": "Good catch. I actually thought about that but then I saw https://github.com/bazelbuild/bazel/blob/master/tools/build_rules/closure/closure_repositories.bzl#L103 :(\n\nSince Closure Compiler releases come more often, we should not use \"latest\". I didn't find a versioned URL for Closure Templates though so we'd have to keep it as is for now.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53240923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53244039", "body": "Why's that? I'm fine removing it. Closure Compiler now defaults to `ECMASCRIPT6`.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/53244039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "flawless2011": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50152754", "body": "Old comment, will remove\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50152754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50153088", "body": "Seems so based on documentation I read.  Let me do some more testing to verify.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50153088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50153203", "body": "I wasn't sure what this annotation was for so I left it from when this method was in HttpDownloader.  Will remove.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50153203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50157221", "body": "I'll see what I can come up with on this.  Ideally proxy setup would be performed just once instead of for every resource requested.  That will involve more refactoring though and I'm hesitant to get muck with too much of you guys' stuff in here.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50157221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50769043", "body": "Interesting, did not know that.  I'll switch back to a String.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50769043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50769418", "body": "This one is going to be a problem due to the usage of environment variables.  I originally had one for this method but threw my hands up after noticing the environment variables aren't set in Junit execution.  I could wrap the environment variables into another class that can be mocked but then that class assumes the problems with testing in Junit.  Do you have another suggestion on that?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50769418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "dmishe": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/60845239", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/60845239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/97610326", "body": "This does not apply to Swift anymore as the support has been removed from the native rules.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/97610326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/97610688", "body": "You actually don't need enable_modules here because it applies to this objc_library compilation and not the swift_library which imports this module.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/97610688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/97611061", "body": "Looks like an excessive whiteline", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/97611061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "dougnd": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/70524411", "body": "That seemed to be the format used with the other includes in that file (e.g. signal.h instead of csignal, string.h instead of cstring).\n\nI will admit the next line I added probably should not be, errno.h is already included here. Not sure why I added that.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/70524411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Nayana-ibm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79141872", "body": "@dslomov  The above change has been committed in protobuf master through commit id [c59473d](https://github.com/google/protobuf/commit/c59473d53eafadd126502657e5c5c33e952b67ed) \nHowever, it looks Bazel doesn't use protobuf master yet.\nHence, I have made changes in \n`bazel/third_party/protobuf/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h`\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/79141872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/82329747", "body": "@dslomov  We have reverted changes from above two files.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/82329747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/82333775", "body": "We have also updated the documentation for s390x users. \n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/82333775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "ferventcoder": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/89375202", "body": "@petemounce this is effectively the same as `version=\"2.7.11\"` - it just means 2.7.11 is the minimum version that can be installed.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/89375202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "justbuchanan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/90268301", "body": "I initially tried that with [BlazeVersionInfo.instance().getVersion()](https://github.com/bazelbuild/bazel/blob/c484f19a2cf7427887d6e4c71c8534806e1ba83e/src/main/java/com/google/devtools/build/lib/analysis/BlazeVersionInfo.java#L124), but the value wasn't set and just returned an empty string.\r\n\r\nDoes Bazel only set the version number for released / non-development builds?  If so, how should the user-agent be formatted when no version number is present?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/90268301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "javidcf": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/91103430", "body": "Well I read [here](http://stackoverflow.com/a/14752373/1782792) that it is the default option in Visual Studio and [here](https://stackoverflow.com/questions/14172856/cmake-compile-with-mt-instead-of-md) that it is too in CMake. But honestly I don't think there are unquestionable reasons for one or another...", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/91103430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "npanpaliya": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/92649463", "body": "After rebase, the test case started giving timeout error, even with checking linux instead of ppc64le or without any change i.e. just checking darwin. Is this a known problem? If it is, I'll undo this change and keep that original change of darwin.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/92649463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/92777216", "body": "Thanks, so should I change ppc64le check to \"linux\"? I've made that change but haven't committed it as the test was giving timeout. If it is green in your CI, I'll commit that change as you've suggested.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/92777216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93010648", "body": "On Power, when we compile a program using -std=c++11, then __linux gets undefined, which otherwise is defined. However, on x86, -std=c++11 does not make any difference. I verified on x86 too, and defined(__linux__) is defined there as well.\r\nOn Power:\r\n```\r\n$ cpp -dM foo.c | grep linux\r\n#define __linux 1\r\n#define __linux__ 1\r\n#define __gnu_linux__ 1\r\n#define linux 1\r\n$ cpp -dM -std=c++11 foo.c | grep linux\r\n#define __linux__ 1\r\n#define __gnu_linux__ 1\r\n```\r\n\r\nOn x86:\r\n```\r\n$ cpp -dM foo.cc | grep linux\r\n#define __linux 1\r\n#define __linux__ 1\r\n#define __gnu_linux__ 1\r\n#define linux 1\r\n~$ cpp -dM -std=c++11 foo.cc | grep linux\r\n#define __linux 1\r\n#define __linux__ 1\r\n#define __gnu_linux__ 1\r\n\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93010648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93226596", "body": "Thank you.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93226596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93230638", "body": "Oops, my bad! Thanks for pointing it out!.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/93230638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "dkomanov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/97664882", "body": "I saw only FtpURLConnection. But, anyway, it could return anything (depending on protocol in url), so we should be protective, and not fail with ClassCastException", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/97664882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "steren": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/101303121", "body": "fixed", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/101303121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/101303156", "body": "fixed\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/101303156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/101303179", "body": "fixed", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/101303179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/103990719", "body": "This `redirect` code is redirecting to https://bazel.build/versions/master/docs/be/docker.html\r\nSee its source at https://github.com/bazelbuild/bazel/blob/master/site/_layouts/redirect.html", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/103990719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/103992466", "body": "Because I cleaned up these pages in #2561, and the underlying issue is #2556.\r\n\r\nThese pages were still available and served some time ago and appeared in our site search. I prefer to have redirects in case people have links pointing to it.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/103992466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/104677662", "body": "It's important that GitHub appears more prominently than Twitter, Stack Overflow or Mailing list. When I tried to use an icon, it was less noticeable (blended within many icons), thus I kept it as a plain word.\r\n\r\nDo you think we should aim for using a maximum of icons?\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/104677662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/115982847", "body": "arg yes I did not see.\r\nCouldn't we just rename them to .md?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/115982847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/115995896", "body": "It made me sad to hardcode these pages. But done.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/115995896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "linuxerwang": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/112089375", "body": "Done.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/112089375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/112089402", "body": "Done.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/112089402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "twpayne": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/123754701", "body": "OK, thanks!", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/123754701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "amutu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/124181503", "body": "I original patch used PATH_MAX - 1\uff0cbut I changed to PATH_MAX because I see the /usr/bin/procstat do the call like this :https://github.com/freebsd/freebsd/blob/master/usr.bin/procstat/procstat_bin.c#L53\uff0cand also here: https://github.com/freebsd/freebsd/blob/master/lib/libproc/proc_create.c#L93. So are you sure this should be MAX_PATH - 1?", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/124181503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "cmluciano": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/124617027", "body": "That's a good point. Perhaps I should patch the brew package to ensure that this happens.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/124617027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "harmank": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/126302533", "body": "Thanks for the review. Updated.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/126302533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/126302535", "body": "Thanks for the review. Updated", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/126302535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ilovezfs": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/124379040", "body": "Thanks for testing it on :penguin:. Yes let's do that instead.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/124379040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}