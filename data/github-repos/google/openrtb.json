{"_default": {"1": {"firefisher": {"issues": [{"url": "https://api.github.com/repos/google/openrtb/issues/120", "title": "Handling 500+ DataAssetType Values", "body": "We are receiving messages from a 3rd party which contain DataAssetTypes of 501, 502, etc. The 500+ range is defined in the openrtb spec for \"exchange specific usage\".\r\n\r\nreadBidRequests() fails to process messages containing these data types (stacktrace below). \r\n\r\nI believe enum's cannot be extended in protobuf. What would be the best way to allow processing of these messages?\r\n\r\n```\r\ncom.google.protobuf.UninitializedMessageException: Message missing required fields: type\r\n\tat com.google.protobuf.AbstractMessage$Builder.newUninitializedMessageException(AbstractMessage.java:501)\r\n\tat com.google.openrtb.OpenRtb$NativeRequest$Asset$Data$Builder.build(OpenRtb.java)\r\n\tat com.google.openrtb.OpenRtb$NativeRequest$Asset$Builder.setData(OpenRtb.java)\r\n\tat com.google.openrtb.json.OpenRtbNativeJsonReader.readReqAssetField(OpenRtbNativeJsonReader.java:224)\r\n\tat com.google.openrtb.json.OpenRtbNativeJsonReader.readReqAsset(OpenRtbNativeJsonReader.java:199)\r\n\tat com.google.openrtb.json.OpenRtbNativeJsonReader.readNativeRequestField(OpenRtbNativeJsonReader.java:151)\r\n\tat com.google.openrtb.json.OpenRtbNativeJsonReader.readNativeRequest(OpenRtbNativeJsonReader.java:113)\r\n\tat com.google.openrtb.json.OpenRtbJsonReader.readNativeField(OpenRtbJsonReader.java:410)\r\n\tat com.google.openrtb.json.OpenRtbJsonReader.readNative(OpenRtbJsonReader.java:396)\r\n\tat com.google.openrtb.json.OpenRtbJsonReader.readImpField(OpenRtbJsonReader.java:316)\r\n\tat com.google.openrtb.json.OpenRtbJsonReader.readImp(OpenRtbJsonReader.java:294)\r\n\tat com.google.openrtb.json.OpenRtbJsonReader.readBidRequestField(OpenRtbJsonReader.java:159)\r\n\tat com.google.openrtb.json.OpenRtbJsonReader.readBidRequest(OpenRtbJsonReader.java:145)\r\n\tat com.google.openrtb.json.OpenRtbJsonReader.readBidRequest(OpenRtbJsonReader.java:126)\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/357744632", "body": "I confirmed that PR https://github.com/google/openrtb/pull/121 fixes my issue. \r\n\r\nIs it possible to include this in the next release?", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/357744632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Fredrik-L": {"issues": [{"url": "https://api.github.com/repos/google/openrtb/issues/119", "title": "Wrong default value for deal auction type.", "body": "When invoking the getAt() method on a OpenRtb.BidRequest.Imp.Pmp.Deal object, that doesn't have that 'at' value set - the method defaults to OpenRtb.AuctionType.FIRST_PRICE.\r\n\r\nAccording to the OpenRTB specs, if should default to the BidRequest's auction type: \"Optional override of the overall auction type of the bid request\".\r\n\r\n(Which in turn defaults correctly to OpenRtb.AuctionType.SECOND_PRICE)\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/350216184", "body": "Ok, I thought you added some \"runtime\" code (rules) after generating the code from protobuf, resulting in the final code code.\r\n\r\nI understand that defaulting to AuctionType.SECOND_PRICE for Deal.at wouldn't then completely solve the issue, but it wouldn't either be \"worse\" than it is today (defaulting to FIRST_PRICE). :-)\r\n\r\nI had already implemented my work-around as you described with hasAt() and fall-backing in code, but it would have been so much better to get that support directly in the framework.\r\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/350216184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "haitui": {"issues": [{"url": "https://api.github.com/repos/google/openrtb/issues/113", "title": "build DSP", "body": "where can I learn how to build a DSP?", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/318288067", "body": "excuse me! Have you installed the opentrb successfully? Can you help me?", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/318288067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mzgupta": {"issues": [{"url": "https://api.github.com/repos/google/openrtb/issues/109", "title": "Version Specific BidRequest Writers ", "body": "@opinali \r\nThis library does not provide version specific writer. I mean if I want to send RTB 2.3 BidRequest to DSP1 and RTB 2.4 BidRequest to DSP2, the what is the best way to do it ? ", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/271477624", "body": "@opinali \r\nThank you for your response. I would follow your step. One more question any plan to update to OpenRtb 2.5 in near future.", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/271477624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/295037995", "body": "@opinali solution I was thinking of keeping 2.3 and 2.4 schema both in the application and having separate reader and writer for each version. \r\n\r\nYou are right, in ideal case DSP should ignore the field. So if I go with your suggestion we should set event deprecated field. What if new version of open rtb remove deprecated fields ?\r\nYou also mentioned there are incompatible changes too, what should we do for that ?\r\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/295037995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/295812920", "body": "@opinali Thanks for your suggestion, how about extending the OpenRtbJsonWriter.java and overrides the methods and write according to versions\r\n\r\nFor V23\r\nOpenRtbJsonWriterV23 extends OpenRtbJsonWriter\r\n\r\nFor V21\r\nOpenRtbJsonWriterV21 extends OpenRtbJsonWriter\r\n\r\nI also have to extend OpenRtbJsonFactory.\r\n\r\n\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/295812920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "opinali": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/openrtb/commits/28cc0f5857de10e3b3a4bbc9e47be520eb731568", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/af4cd1dec7b4e143b95b911ec6a28fb2f70d4b2c", "message": "[maven-release-plugin] prepare release 1.5.1"}, {"url": "https://api.github.com/repos/google/openrtb/commits/3eb7919c2a8e1257f4a7e7df04e04b97c3ed768d", "message": "Merge pull request #118 from opinali/master\n\nProtobuf 3.5.0"}, {"url": "https://api.github.com/repos/google/openrtb/commits/cbe75b740a5c09ecf52ba0d4d8e73904be72eaa2", "message": "Update changelog"}, {"url": "https://api.github.com/repos/google/openrtb/commits/b57e8a09d7908e4112828796b138e8d82ef955f0", "message": "Protobuf 3.5.0"}, {"url": "https://api.github.com/repos/google/openrtb/commits/986773a60e76831d955719f4a63246df2efade91", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/3a45920d43aa58832d3a5ff35d0a790768b37099", "message": "[maven-release-plugin] prepare release 1.5.0"}, {"url": "https://api.github.com/repos/google/openrtb/commits/e5f5bfc0e6b2c238c946743646a6d8bc74df06ed", "message": "Merge pull request #117 from opinali/master\n\nOpenRTB Native 1.2"}, {"url": "https://api.github.com/repos/google/openrtb/commits/2f81d0b78db23a5151af23951c251e8a638eb0b0", "message": "v1.5.0"}, {"url": "https://api.github.com/repos/google/openrtb/commits/8f553a9a8ed9f416263b412edf6787a74a576289", "message": "OpenRTB Native 1.2 reviews"}, {"url": "https://api.github.com/repos/google/openrtb/commits/739bba25df9b5f36a8990b49961fab2f9163a38a", "message": "OpenRTB Native 1.2, other proto updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/1bf1e4efd5dd914f4036210a0601afea7f271eec", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/88e86f38f28f230a773c2aaf1a14c7789b5664e2", "message": "[maven-release-plugin] prepare release 1.4.7"}, {"url": "https://api.github.com/repos/google/openrtb/commits/ed35eec002ba8e2da3855a83d9997c5cc4624954", "message": "Merge pull request #116 from opinali/master\n\nv1.4.7 Updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/14a734f776e0cb40a17e90b256e68cad316eb7e9", "message": "Updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/403018eae188d7543c75b8e58d62221e1fae5cba", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/757dd408f763f5fea6873cd100fe09631858d468", "message": "[maven-release-plugin] prepare release 1.4.6"}, {"url": "https://api.github.com/repos/google/openrtb/commits/6c62d9e524af7fd2ffe89971e8141b18688902ef", "message": "Merge pull request #115 from opinali/master\n\nProtobuf 3.4.0"}, {"url": "https://api.github.com/repos/google/openrtb/commits/268313b42f1829a1c0b6ae998b2de623bce50d3c", "message": "Protobuf 3.4.0"}, {"url": "https://api.github.com/repos/google/openrtb/commits/28de6b7186c74ce2065abd6bfb22912eb7a6ab81", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/fbcaae73c6368906d9448c489575f736ddbb1fd2", "message": "[maven-release-plugin] prepare release 1.4.5"}, {"url": "https://api.github.com/repos/google/openrtb/commits/623c97a7895befe687bc5fb6ecc4135f481c70b2", "message": "Merge pull request #114 from opinali/master\n\nChanges for v1.4.5"}, {"url": "https://api.github.com/repos/google/openrtb/commits/aaf7d204e012b359147f15608d8aae4fb54305df", "message": "Fix POM"}, {"url": "https://api.github.com/repos/google/openrtb/commits/00e94b232891b0880e5fac024f7fe537ae126912", "message": "Dependency updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/2f1e78df563f5879b899f6dfe489144ef9a840d9", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/d371fe69523cd85928172d120412e2c6d0ff22f6", "message": "[maven-release-plugin] prepare release 1.4.3"}, {"url": "https://api.github.com/repos/google/openrtb/commits/09ef66ff68bc9ca4678bdb065af01d4777710a80", "message": "Merge pull request #112 from opinali/master\n\nFix extension reader filtering"}, {"url": "https://api.github.com/repos/google/openrtb/commits/32aa8a3418469d67cd0e73c17998748a98101494", "message": "Fix extension reader filtering"}, {"url": "https://api.github.com/repos/google/openrtb/commits/4298d00f4298dd8015afdd76cec97567c8d8c97a", "message": "Fix extension reader filtering"}, {"url": "https://api.github.com/repos/google/openrtb/commits/17f2d28c7bd1ae5d0ebbf537b7dfabce5dc22496", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/b17ac6878fd430d003b994ac7b1d1ff8effd6407", "message": "[maven-release-plugin] prepare release 1.4.1"}, {"url": "https://api.github.com/repos/google/openrtb/commits/cacac63314d459233f5d5a77923f5c08b37f1243", "message": "Merge pull request #111 from opinali/master\n\nUpdates for 1.4.1"}, {"url": "https://api.github.com/repos/google/openrtb/commits/748ab91e6c014172998f76bef88135e3358690d3", "message": "Cleanups; Update protobuf and Guava"}, {"url": "https://api.github.com/repos/google/openrtb/commits/de108107226530ce068bc3a1b2cca7d20a0522be", "message": "Proto documentation updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/2f2b52e895dbd6f933c826fd112c36414807c4f7", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/ce0a49fe30d7b70a41c439397563c7076699d0e2", "message": "[maven-release-plugin] prepare release 1.4.0"}, {"url": "https://api.github.com/repos/google/openrtb/commits/8d116fb4afdc7c5c812b5fa60b523f90afcebc74", "message": "Changelog update"}, {"url": "https://api.github.com/repos/google/openrtb/commits/bd66404cbdefd8e51fe209ab4afc1d1427244c01", "message": "Merge pull request #110 from opinali/master\n\nCleanups"}, {"url": "https://api.github.com/repos/google/openrtb/commits/197c1b0146e79b10e3ccf60e3de731047c417084", "message": "Cleanups"}, {"url": "https://api.github.com/repos/google/openrtb/commits/bae1999d7e5cf6076914fad35ebe1b072fd218be", "message": "Merge pull request #108 from opinali/master\n\nOpenRTB 2.5"}, {"url": "https://api.github.com/repos/google/openrtb/commits/90613bdf28a81653b15a7d286bb97f8e4c660214", "message": "OpenRTB 2.5"}, {"url": "https://api.github.com/repos/google/openrtb/commits/c50746cc07845f54d95c52f3b5a54cb563f3a2e2", "message": "Dependency updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/99dc340af4e8d181bdea0ac1651c124fed69bd2f", "message": "Dependency updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/6667a5c651bf69288b911e382aa13c23b8a94604", "message": "Fix deprecations"}, {"url": "https://api.github.com/repos/google/openrtb/commits/98ba619a982295e0843e26e30fc04d0a01c579f1", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/c14f9f563eeecdcc6233bed17d259b19c3f42313", "message": "[maven-release-plugin] prepare release 1.3.0"}, {"url": "https://api.github.com/repos/google/openrtb/commits/7e500fd2efb9529bb1585a26df169220d78c0549", "message": "Merge pull request #104 from opinali/master\n\nv1.3.0"}, {"url": "https://api.github.com/repos/google/openrtb/commits/1ff62aa5bae4306bee34ef8193ea407be7957bc7", "message": "v1.3.0"}, {"url": "https://api.github.com/repos/google/openrtb/commits/efe9efec32e0b58b7a0a3b4b8122fdace738f7a8", "message": "Changelog, deps updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/72103ebaaa82e8e302f7a46e2fbe5fad3cd4431f", "message": "Merge pull request #103 from opinali/master\n\nProtobuf 3.2.0"}, {"url": "https://api.github.com/repos/google/openrtb/commits/3c120cca69250168d90bbb51082713b9a620d31a", "message": "Protobuf 3.2.0"}, {"url": "https://api.github.com/repos/google/openrtb/commits/af80562826815bd039841cab1e6e2b4f3d60216b", "message": "Protobuf 3.1.0"}, {"url": "https://api.github.com/repos/google/openrtb/commits/8d4a4da2e2b69f8656e3281e6d5e9e2432b25a69", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/c0a64baec63947645065976fb1c70b29b3f782f8", "message": "[maven-release-plugin] prepare release 1.2.2"}, {"url": "https://api.github.com/repos/google/openrtb/commits/a4b86339937aab18c7a06ca33dee2b7aa08dd68e", "message": "Update CHANGELOG.md"}, {"url": "https://api.github.com/repos/google/openrtb/commits/12654670bdb1bea9bbd6ed41ff3230a6755dab91", "message": "Merge pull request #102 from opinali/master\n\nProto updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/9c29c6d84ee236912557184bcf76784ba495b497", "message": "Proto, changelog updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/04a0dbab17494a39930e3363115add343600124d", "message": "OpenRTB proto update / docs"}, {"url": "https://api.github.com/repos/google/openrtb/commits/78a2dd91eaf2e5294c18b72c75da5e3e1c014a5c", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/8bc1c26eadde8a705a3cf580f292cb7b65bb5d3f", "message": "[maven-release-plugin] prepare release 1.2.1"}, {"url": "https://api.github.com/repos/google/openrtb/commits/3d680e319a6ed028788d7954135e1d89d1140d2a", "message": "Changelog"}, {"url": "https://api.github.com/repos/google/openrtb/commits/b266991d8347e21e98cc2d8f7159fb14dc50e862", "message": "Merge pull request #100 from opinali/master\n\nSome new JsonExt utils"}, {"url": "https://api.github.com/repos/google/openrtb/commits/98c2d91d3b6ba784f8ca1763f360e5c20cdb33f7", "message": "Some new JsonExt utils"}, {"url": "https://api.github.com/repos/google/openrtb/commits/60a22a108c130bd765902255dd16b5cc5ee9055e", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/fb1ebafdfc1caee4db8327eccb2f6b9724c90814", "message": "[maven-release-plugin] prepare release 1.2.0"}, {"url": "https://api.github.com/repos/google/openrtb/commits/e17371bdc7e0d2fcb37131aded2cd58a7202cbb6", "message": "Merge pull request #99 from opinali/master\n\nv1.2.0"}, {"url": "https://api.github.com/repos/google/openrtb/commits/8d82351db007ee1e4e2bae6e72537bb96adca27d", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/b4f83d975838bb176201b316a61d0d255699451e", "message": "[maven-release-plugin] prepare release 1.2.0"}, {"url": "https://api.github.com/repos/google/openrtb/commits/36ad728e557ac970d094faae8d5295ecaa55b803", "message": "Remove ObjectMapper"}, {"url": "https://api.github.com/repos/google/openrtb/commits/a7ab9d4b5f944855d497efcfd26a0058e3878339", "message": "openrtb.proto comment updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/cd8cd1a60827bdf73694da0a8c4bc9888f537f57", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/381620d64da3338bf3c752a18f0671730cc4e063", "message": "[maven-release-plugin] prepare release 1.1.0"}, {"url": "https://api.github.com/repos/google/openrtb/commits/da6e774a15af1e963ee1287d7d218b4bb7505231", "message": "Merge pull request #97 from opinali/master\n\nChangelog, final reviews"}, {"url": "https://api.github.com/repos/google/openrtb/commits/b0638109133c3f551a99158eeff4ed0c17dad12f", "message": "Changelog, final reviews"}, {"url": "https://api.github.com/repos/google/openrtb/commits/8a76e3042e03f2c53f4666fd7beb78b896008e48", "message": "Merge pull request #96 from opinali/master\n\nOpenRTB 2.4 & Native 1.1 / JSON support"}, {"url": "https://api.github.com/repos/google/openrtb/commits/7392d6242b9d4d7018ebe9735f1faaf25128c83a", "message": "Native 1.1 / JSON support"}, {"url": "https://api.github.com/repos/google/openrtb/commits/4e0b8fa7def2044f2e58e60e161903fc7855c669", "message": "OpenRTB 2.4 & Native 1.1 / JSON support"}, {"url": "https://api.github.com/repos/google/openrtb/commits/f0074d547beaa16758f311985746f2c382ef5793", "message": "Organize imports"}, {"url": "https://api.github.com/repos/google/openrtb/commits/fce2febd5d3990d584a845e7ea469ce82b6468da", "message": "Merge pull request #95 from opinali/master\n\nOpenRTB 2.4, Native 1.1 proto"}, {"url": "https://api.github.com/repos/google/openrtb/commits/3e5ceba8fa00e21c4556d309eb756e40d584ff54", "message": "Final proto updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/5ca464bd9cf270909d35c4c4d47f2e8f9c9d43ab", "message": "OpenRTB proto reviews/sync"}, {"url": "https://api.github.com/repos/google/openrtb/commits/334c9f8a08912dc2b41231da63c65c728a32a39d", "message": "OpenRTB 2.4, Native 1.1 / proto changes"}, {"url": "https://api.github.com/repos/google/openrtb/commits/68cd355dc46a78274efba07bfc0becb333b3bc6d", "message": "Dependency updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/ab32fdeea605e7d251b8998740fa8fcd7d91a4a1", "message": "Dependency updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/dfbc7c890acd0b86296b09281d884dc796fb61f0", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/aba05c7e93bcc63b820bb824711adcc5c9f855f5", "message": "[maven-release-plugin] prepare release 1.0.5"}, {"url": "https://api.github.com/repos/google/openrtb/commits/3ed727ced8a7c3237d50664387a8cffffb4ea783", "message": "Changelog, dependency updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/6043f9c13fa76f393ccfd94cd82d06083c2f6cd9", "message": "Merge pull request #90 from opinali/master\n\nNative JSON PR reviews (mostly style, a couple fixes); some cleanups."}, {"url": "https://api.github.com/repos/google/openrtb/commits/61fbc293915e684bd342445762dee5198d6e64de", "message": "Make writeLong() public, add writeLongField()"}, {"url": "https://api.github.com/repos/google/openrtb/commits/7d77c994005626b5d13461edb94a713425d36219", "message": "Remove deprecated methods"}, {"url": "https://api.github.com/repos/google/openrtb/commits/9c0540b809c93607f269946d03a0a75a6fe499f3", "message": "Post-merge reviews for the native-JSON PR"}, {"url": "https://api.github.com/repos/google/openrtb/commits/36804a7ab56b564dc7893d96bc1caf0ae93acd51", "message": "Merge pull request #87 from bundeskanzler4711/master\n\nEnable native Json object"}, {"url": "https://api.github.com/repos/google/openrtb/commits/62fbd7864b59629956c476899e9e1747d9b0e00e", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/d6cea6a94347160204aa7e5171e9001c86b70157", "message": "[maven-release-plugin] prepare release 1.0.4"}, {"url": "https://api.github.com/repos/google/openrtb/commits/59d6675fbb29e808ebba451472dbc802be6b565b", "message": "Fix javadocs"}, {"url": "https://api.github.com/repos/google/openrtb/commits/9644db1b73d8fd3e9d209ca85dde4a0497a8dff8", "message": "Merge pull request #84 from opinali/master\n\nUpdates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/ccf84dc747c6eaa89648d1b48d69674c7a127e14", "message": "Updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/f5eb528eabaf9b362cc28ab8c67b28a1d9bbb075", "message": "Merge pull request #81 from opinali/master\n\nSnippetProcessor supports extended fields"}, {"url": "https://api.github.com/repos/google/openrtb/commits/130020ab29ac7aa441957086cac9113eaf993465", "message": "SnippetProcessor tests"}, {"url": "https://api.github.com/repos/google/openrtb/commits/52883941f419c96ac9ea909c839edeb68ed977f1", "message": "SnippetProcessor supports extended fields"}, {"url": "https://api.github.com/repos/google/openrtb/commits/71b870217ee4b9cca7f9cc480faf84c3740cec2c", "message": "Merge pull request #80 from opinali/master\n\nJSON utils, SnippetProcessor reviews"}, {"url": "https://api.github.com/repos/google/openrtb/commits/e6d7a72056e0d8f57d9f0a1956af5757489cc092", "message": "SnippetProcessor can reuse buffer, added to context"}, {"url": "https://api.github.com/repos/google/openrtb/commits/adae65a8869c3801c812255088e4c8fbd3cbda39", "message": "Review OpenRtbJsonUtils and AbstractOpenRtb*"}, {"url": "https://api.github.com/repos/google/openrtb/commits/f6a792674433053aa3a1ec3e11c642402f51c59e", "message": "Merge pull request #79 from opinali/master\n\nSmall reviews"}, {"url": "https://api.github.com/repos/google/openrtb/commits/9b6be3be43aa84e97323849cc1f1ac829fa2bb15", "message": "Small reviews"}, {"url": "https://api.github.com/repos/google/openrtb/commits/741fe1225bdc84e31cd9679b73ff684a971ec382", "message": "Merge pull request #78 from opinali/master\n\nFix native response's Video.vasttag"}, {"url": "https://api.github.com/repos/google/openrtb/commits/7b419b894c2c29689a3fbc45b6a4458f8e5a5496", "message": "Fix native response's Video.vasttag"}, {"url": "https://api.github.com/repos/google/openrtb/commits/a68c19a1d2480676490b890c4afcbb9c7e2cee57", "message": "Merge pull request #77 from opinali/master\n\nSmall reviews, changelog"}, {"url": "https://api.github.com/repos/google/openrtb/commits/916d210f285c75478b55d4f8ba08a78ae97a1786", "message": "Small reviews, changelog"}, {"url": "https://api.github.com/repos/google/openrtb/commits/b392eaaaa960dfd789ab0b5fbb291189707ff272", "message": "Merge pull request #76 from opinali/master\n\nSync openrtb.proto"}, {"url": "https://api.github.com/repos/google/openrtb/commits/38615b18373b5972f8511c24e98eac01e74ef01a", "message": "Update openrtb.proto docs, dependencies"}, {"url": "https://api.github.com/repos/google/openrtb/commits/25766374584408dc802c36bad9fca63b7b724d32", "message": "Dependency updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/3f81515aaeabd249cc378ff3e009f3c9f1274b86", "message": "Sync openrtb.proto / doc fixes"}, {"url": "https://api.github.com/repos/google/openrtb/commits/007f5f87da9602cf22eb63fef3c3ca87299747cd", "message": "Sync openrtb.proto / doc fixes"}, {"url": "https://api.github.com/repos/google/openrtb/commits/a4b19a3bc181d19a1d67f80484fe03315ebfdf06", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/ab3f702f79ae04685c2b12e8fdd2cb5b774e71a9", "message": "[maven-release-plugin] prepare release 1.0.3"}, {"url": "https://api.github.com/repos/google/openrtb/commits/1a14269342eb9d3568b01ee7d92484cf24f159b1", "message": "Update changelog"}, {"url": "https://api.github.com/repos/google/openrtb/commits/e629309cb701f16a14357604e0b70549e528d0e4", "message": "Merge pull request #75 from opinali/master\n\n1.0.3 updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/42fe05b079a58c27e93fb0fc5cae58a63c59f0d9", "message": "Final updates to openrtb.proto"}, {"url": "https://api.github.com/repos/google/openrtb/commits/caf5296e65f0d464d897ded9f368bc8f4ad917da", "message": "SnippetProcessor processes only adm, allows overriding fields processed"}, {"url": "https://api.github.com/repos/google/openrtb/commits/96cb1d1d60709f7958cb6310803ab00bcbcb70d9", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/69bd7a1f6077ce7889b7acda745e151491c8846f", "message": "[maven-release-plugin] prepare release 1.0.2"}, {"url": "https://api.github.com/repos/google/openrtb/commits/755e9b794e8e84c67dd162576f52e66543d22cb8", "message": "Merge pull request #74 from opinali/master\n\nNew features"}, {"url": "https://api.github.com/repos/google/openrtb/commits/3dc95eb305e6c8791c4eb0e7c91a71617a08a74b", "message": "Changelog updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/f976c14298ab60a871342046b33fc90fbe107ea4", "message": "Mapping docs in-proto"}, {"url": "https://api.github.com/repos/google/openrtb/commits/1e6e60408ae826b146e822c0be7d8ca61846e51f", "message": "RootNativeField fixes"}, {"url": "https://api.github.com/repos/google/openrtb/commits/93b6434582f513883652e7b1219a1585273a3a72", "message": "RootNativeField option"}, {"url": "https://api.github.com/repos/google/openrtb/commits/2e022b66f3c843d4f8a64d334cd6c93f3b389c85", "message": "Dependency updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/17d9ea2bccef3215a9428247e56a63b642c29d7c", "message": "Fix ProtoUtils.filter() recursion"}, {"url": "https://api.github.com/repos/google/openrtb/commits/f0b869befd233def0dca472327887233568002ca", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/ed9ab75014dcc6d3fb5da2871b45547b9b25a5d6", "message": "[maven-release-plugin] prepare release 1.0.1"}, {"url": "https://api.github.com/repos/google/openrtb/commits/4508a9429680900ee480243144e5fbcbcf9eeebb", "message": "Update CHANGELOG.md"}, {"url": "https://api.github.com/repos/google/openrtb/commits/153152fa27ef95fe16628dbccbfdc7ac6c0fd0a8", "message": "Merge pull request #72 from opinali/master\n\nDependency updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/351f3062969facd05661e0b238484b7fb5f7160d", "message": "Back to Jackson 2.6"}, {"url": "https://api.github.com/repos/google/openrtb/commits/a96be415133f8ff9d9f87edb5867f96755aca70a", "message": "Dependency updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/c1a3a271bcfcf7c47af21efe81147fceab2db887", "message": "Merge pull request #71 from opinali/master\n\nMinor reviews, dependency updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/9e8deb35c15c2f8d8e518cc16ae8a1ba8ccb096b", "message": "Javadoc fixes"}, {"url": "https://api.github.com/repos/google/openrtb/commits/86f782340ccd3aeb5f8ba70453f54c4b553e938a", "message": "Minor reviews"}, {"url": "https://api.github.com/repos/google/openrtb/commits/76f4ddfe51dc5905a3b8977bbacd6be20d30f64d", "message": "Dependency updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/b78d44071d0df98b462e243b9acc908649fd135d", "message": "Review TestUtil"}, {"url": "https://api.github.com/repos/google/openrtb/commits/7e5e81cf0badde3897d75ac4293e6297c7655ac1", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/f58252669048d4da4d81f02e9d91cb3f3322b6e3", "message": "[maven-release-plugin] prepare release 1.0.0"}, {"url": "https://api.github.com/repos/google/openrtb/commits/6b54bc321de270064a277bc67339fdf6e7c2b255", "message": "Merge pull request #70 from opinali/master\n\nFinal reviews and updates for 1.0.0"}, {"url": "https://api.github.com/repos/google/openrtb/commits/af2c8494c27357d3ab2269b6434211dbc66fb364", "message": "Final reviews and updates for 1.0.0"}, {"url": "https://api.github.com/repos/google/openrtb/commits/ddf57028f5ba400541761916490c90103c37f172", "message": "Dependency updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/1fc9649884387b0fa6c99c0eaa6e65c101b0dfb5", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/2964266702ea983baef283717803df68a280b75e", "message": "[maven-release-plugin] prepare release 0.9.8"}, {"url": "https://api.github.com/repos/google/openrtb/commits/c11b0b0fd854091cae6c1e5033e2b6613223caec", "message": "Merge pull request #68 from opinali/master\n\nOpenRtbUtils reviews"}, {"url": "https://api.github.com/repos/google/openrtb/commits/3d5f09a80830717cb68d0d26e329d71d85239bdf", "message": "OpenRtbUtils reviews"}, {"url": "https://api.github.com/repos/google/openrtb/commits/d7d1fa47b8bf65fa40908dfb6c1b62a4666b446d", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/fb0cf032d740d7ead43b3ba09110aab2338fd977", "message": "[maven-release-plugin] prepare release 0.9.7"}, {"url": "https://api.github.com/repos/google/openrtb/commits/ff62e27440483f2a4492cd7b850af45d7b4abcbd", "message": "Merge pull request #67 from opinali/master\n\nJDK 8, Streams"}, {"url": "https://api.github.com/repos/google/openrtb/commits/7587519455de89147b398ab4c67cd4bd2a52b608", "message": "Review tests, deprecations"}, {"url": "https://api.github.com/repos/google/openrtb/commits/a18e5619646660bf32913494aa172e0538a60ad7", "message": "Update changelog"}, {"url": "https://api.github.com/repos/google/openrtb/commits/20dd51404079b232640de5dee0cc2982abc6c7e4", "message": "OpenRtbUtils reviews"}, {"url": "https://api.github.com/repos/google/openrtb/commits/1f9f3179f2f8702ed4128757dcd8cef88dbeeb56", "message": "fmt"}, {"url": "https://api.github.com/repos/google/openrtb/commits/525ab2c81c2e83b689eaf00756fe86091553d887", "message": "JDK 8, Streams"}, {"url": "https://api.github.com/repos/google/openrtb/commits/1248006cea953d9248dfd77f2ffcd0f655ef03ef", "message": "Merge pull request #66 from opinali/master\n\nFix docs"}, {"url": "https://api.github.com/repos/google/openrtb/commits/24586069de201c1733877e650f67f2bef7e95448", "message": "Merge branch 'master' of https://github.com/opinali/openrtb"}, {"url": "https://api.github.com/repos/google/openrtb/commits/253eb0eb137059fcb9ea2dc86a3a2209f0eb0fa1", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/301d43f7f60af90d3db10282729ebfb7f0fd90a6", "message": "[maven-release-plugin] prepare release 0.9.6"}, {"url": "https://api.github.com/repos/google/openrtb/commits/90af82cad4c1d7ece629e6f5fd0e8bf9ffd3445c", "message": "Merge pull request #65 from opinali/master\n\nJSON strict by default"}, {"url": "https://api.github.com/repos/google/openrtb/commits/e27242980f42ccbc829c69e7a7fe103fa691af81", "message": "Update changelog"}, {"url": "https://api.github.com/repos/google/openrtb/commits/67d34a01fa9aa200e0a3bbe91f5e7e558002473b", "message": "Fix docs"}, {"url": "https://api.github.com/repos/google/openrtb/commits/a2482db5dd58a358637c92e2b00efd275640715e", "message": "Dependency updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/c69c3063bd73e605e2b84513ea002e8b6e63b3e0", "message": "JSON strict by default; non-strict supports empty input"}, {"url": "https://api.github.com/repos/google/openrtb/commits/0dbce01b9804c476aa47736036f20d55ed46c04b", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/8a2b5981003b33905131f890dcd3ef43a07dfa0b", "message": "[maven-release-plugin] prepare release 0.9.5"}, {"url": "https://api.github.com/repos/google/openrtb/commits/8b0076f80abb8778388ab7c67aa292bc3fd3f7b7", "message": "Update CHANGELOG.md"}, {"url": "https://api.github.com/repos/google/openrtb/commits/5fd021ca27daa2b152e2dd4c18d5c90187b70d12", "message": "Merge pull request #62 from opinali/master\n\nTruth!"}, {"url": "https://api.github.com/repos/google/openrtb/commits/4efe3fcd9ad30bd53a239bc6f197d34826a8ab0c", "message": "Truth"}, {"url": "https://api.github.com/repos/google/openrtb/commits/1275c21b1736f223a22ef4de63700f3ed4a04d0d", "message": "Truth"}, {"url": "https://api.github.com/repos/google/openrtb/commits/d9c03335ac2a3631c42802e062e76453e5ee1274", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/b9f83270eba9156c0bfedc75b17493eb392bad91", "message": "[maven-release-plugin] prepare release 0.9.4"}, {"url": "https://api.github.com/repos/google/openrtb/commits/90ba9432bd969f532b77e00457cdd98431505564", "message": "Merge pull request #61 from opinali/master\n\nReviews"}, {"url": "https://api.github.com/repos/google/openrtb/commits/885e9e42587b4ef99c64cc9dcf52764c78b2e0be", "message": "Reviews"}, {"url": "https://api.github.com/repos/google/openrtb/commits/036687ef37a85fbcc81cd84e45d4349cde695805", "message": "Merge pull request #60 from opinali/master\n\nOpenRtbUtils improvements for filtering"}, {"url": "https://api.github.com/repos/google/openrtb/commits/c7dfc8092ece0d77610d224441aba7e6ad47a073", "message": "OpenRtbUtils improvements for filtering"}, {"url": "https://api.github.com/repos/google/openrtb/commits/d80a1e5b36c24224170a72b7ec2838099c709cc2", "message": "OpenRtbUtils improvements for filtering"}, {"url": "https://api.github.com/repos/google/openrtb/commits/ea362eb6ab5b4b9614a2100be4bfc9caac645a56", "message": "Merge pull request #59 from opinali/master\n\nRelease 0.9.3"}, {"url": "https://api.github.com/repos/google/openrtb/commits/d6e8f80fcc754224a1b76d69804dcba96ae3cbf6", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/5789bf06761b11a6588462b069c856a259fe0236", "message": "[maven-release-plugin] prepare release 0.9.3"}, {"url": "https://api.github.com/repos/google/openrtb/commits/0703ef84b16dff6590f8977e55973f968d1947cd", "message": "Changelog update"}, {"url": "https://api.github.com/repos/google/openrtb/commits/069870519b6a4f4ef50561c57789ced6beabbb5d", "message": "Merge pull request #58 from opinali/master\n\nOpenRTB proto reviews, JSON ext API improvements"}, {"url": "https://api.github.com/repos/google/openrtb/commits/4239a74d4ac08d3073b1e490598250f761207403", "message": "JSON ext API improvements"}, {"url": "https://api.github.com/repos/google/openrtb/commits/c8320691268a2ca8f779925613ed51d62eaa9db5", "message": "JSON ext API improvements"}, {"url": "https://api.github.com/repos/google/openrtb/commits/bc9c8da2491fac40a383b58da633bf32c703151e", "message": "OpenRtbJsonExtWriter review"}, {"url": "https://api.github.com/repos/google/openrtb/commits/10e9354c5ba2e691efa8690031f7a199341af5ea", "message": "OpenRTB proto reviews"}, {"url": "https://api.github.com/repos/google/openrtb/commits/30195ff087ec378fa1d63ca2b5b2602bcc7d26a1", "message": "Merge pull request #55 from opinali/master\n\nJSON improvements"}, {"url": "https://api.github.com/repos/google/openrtb/commits/7a27301d8edfb6e30293bed19f48ec1c2efc01bf", "message": "Better support for strict/lenient modes"}, {"url": "https://api.github.com/repos/google/openrtb/commits/023b4890a8a4a5237e56263342c2ecfa7ac46ce4", "message": "Avoid NPE desserializing invalid enums"}, {"url": "https://api.github.com/repos/google/openrtb/commits/e4186d0ee9edec24f2b68c17d0213559b501060a", "message": "Using oneof for dual fields"}, {"url": "https://api.github.com/repos/google/openrtb/commits/73d36b10ea092df3c7dddb274e8efbf61130ba6e", "message": "Review dual native/JSON fields"}, {"url": "https://api.github.com/repos/google/openrtb/commits/1c9d2a3dffff78cd9c9fcc32aa71c065c87b81c6", "message": "Update CHANGELOG.md"}, {"url": "https://api.github.com/repos/google/openrtb/commits/865090f3c4b149bbb5acf480c51d3aa5a75e59a0", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/60f96b6dae6c650a0d7b90d73c28d7becc110bda", "message": "[maven-release-plugin] prepare release 0.9.2"}, {"url": "https://api.github.com/repos/google/openrtb/commits/4d45a0d32e3d7c655f2f41566c68f029561fdab3", "message": "Update CHANGELOG.md"}, {"url": "https://api.github.com/repos/google/openrtb/commits/5c82da9d40705281b8d4ebe112ad4c4ee20dc793", "message": "Merge pull request #53 from opinali/master\n\nRemove CharSequenceReader copy"}, {"url": "https://api.github.com/repos/google/openrtb/commits/42f48311ba7c7180566b395b95522699d0635943", "message": "Remove CharSequenceReader copy"}, {"url": "https://api.github.com/repos/google/openrtb/commits/60ec6547da405bbec21d0d639daf0e307e1ff4a6", "message": "Merge pull request #51 from opinali/master\n\nFindBugs/Checkstyle/Dependency reviews"}, {"url": "https://api.github.com/repos/google/openrtb/commits/51b74231431194197b21eb66643c2e17cbac9080", "message": "Merge pull request #50 from donbeave/patch-1\n\nTypo BLOCKED_PUBISHER"}, {"url": "https://api.github.com/repos/google/openrtb/commits/0af027d475b0d2bef7a2e3e7f801e9c51582459b", "message": "FindBugs/CheckStyle reviews"}, {"url": "https://api.github.com/repos/google/openrtb/commits/3626026fd2bc24d6c0ddd8ae389f5397c365536a", "message": "Dependency updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/140d8299fcc204356fbb3b639d33da44325f0ec7", "message": "Update CHANGELOG.md"}, {"url": "https://api.github.com/repos/google/openrtb/commits/cffa314ee9ec485e281bf79d30827a3f1ab2162a", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/063aadf76dfa9982500f1a5277229cb62a03e1b3", "message": "[maven-release-plugin] prepare release 0.9.1"}, {"url": "https://api.github.com/repos/google/openrtb/commits/f1591c332ca089158e5f9d9c44dd0c24b6bb9da2", "message": "Merge pull request #49 from opinali/master\n\nSnippetProcessor improved, extensible context"}, {"url": "https://api.github.com/repos/google/openrtb/commits/60ca0d98c6394e5dd2e97a1ed028a95fc309cdc8", "message": "SnippetProcessor updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/23d737ae3c54c2602dd64f64f9c5f714322cfd91", "message": "SnippetProcessor updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/c22019d446403a0c63b966ab4904d5545bf043f4", "message": "SnippetProcessor improved, extensible context"}, {"url": "https://api.github.com/repos/google/openrtb/commits/a3bfc85d51d3b3131d53dc882e11032bedb69815", "message": "Update CHANGELOG.md"}, {"url": "https://api.github.com/repos/google/openrtb/commits/1e15dbdccaae735df8c33a8dea2db735703a7f86", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/1ea7dec26bc743676a788194ba0b558b2d4fccd1", "message": "[maven-release-plugin] prepare release 0.9.0"}, {"url": "https://api.github.com/repos/google/openrtb/commits/695a75a677211d91e60b6ff6a20984cde9ac6b57", "message": "Update CHANGELOG.md"}, {"url": "https://api.github.com/repos/google/openrtb/commits/88981b499878481f1d43e92ca4a79a54bf0ab654", "message": "Merge pull request #48 from opinali/master\n\nInterop fixes: context/context_22, gender"}, {"url": "https://api.github.com/repos/google/openrtb/commits/7c55f17c134dacb2503982b08bd90f92074646b2", "message": "Interop fixes: context/context_22, gender"}, {"url": "https://api.github.com/repos/google/openrtb/commits/7439cc9b65405b43111bbe69f4907300ea90a91b", "message": "Update CHANGELOG.md"}, {"url": "https://api.github.com/repos/google/openrtb/commits/351fa81e1fab47a9615a8e1347228c6c5563307c", "message": "Merge pull request #47 from opinali/master\n\nAdX compatibility changes"}, {"url": "https://api.github.com/repos/google/openrtb/commits/841709bf8dace6430709477b22b46e1a0c036fcf", "message": "Revert categories back to string; merge core/native protos"}, {"url": "https://api.github.com/repos/google/openrtb/commits/3989af2ff16d669b3cb16524e53a80f5270e9300", "message": "Revert keywords back to optional, for AdX compatibility"}, {"url": "https://api.github.com/repos/google/openrtb/commits/7ad452ff52b5271b1a5e271700f6e880d5a8e431", "message": "Update README.md"}, {"url": "https://api.github.com/repos/google/openrtb/commits/e1704ef2bdfd7960d619015aa43ee9c1ad409faa", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/cb354d4c9e4e5156662438cd89cf24cb87ed80dd", "message": "[maven-release-plugin] prepare release 0.8.6"}, {"url": "https://api.github.com/repos/google/openrtb/commits/c6feb7ca8e04f32168faa323fa769c36231a3176", "message": "Update CHANGELOG.md"}, {"url": "https://api.github.com/repos/google/openrtb/commits/5f6b95dc0bca5348323a65b6784844caa6eb4517", "message": "Update README.md"}, {"url": "https://api.github.com/repos/google/openrtb/commits/9950398b8c4ecfeb2438b717afea69209d5b53c5", "message": "Merge pull request #46 from opinali/master\n\nCleanup non-ASCII charaters in protos"}, {"url": "https://api.github.com/repos/google/openrtb/commits/6d8cad2a820c76a3392647f7aa41a5780f2d6509", "message": "Merge branch 'master' of https://github.com/opinali/openrtb"}, {"url": "https://api.github.com/repos/google/openrtb/commits/63ed1b20265a5b061acc350e30f4da26cd89cbad", "message": "Cleanup non-ASCII charaters in protos"}, {"url": "https://api.github.com/repos/google/openrtb/commits/a99f5f430ede1afc693b020aa70a531108fc8d0b", "message": "Split release notes and changelog"}, {"url": "https://api.github.com/repos/google/openrtb/commits/86d6bd296f85e5d19f66d81c6d7306af8a0a1091", "message": "Split release notes and changelog"}, {"url": "https://api.github.com/repos/google/openrtb/commits/44982b33aee63f1ec9c3dcb875bbce1cd1178963", "message": "Merge pull request #44 from opinali/master\n\nFix JSON serialization of Native ads; 2.3.1 reviews"}, {"url": "https://api.github.com/repos/google/openrtb/commits/b7227507700649284a9c65567d7bc777b51e9935", "message": "Fix JSON serializetion of Native ads"}, {"url": "https://api.github.com/repos/google/openrtb/commits/59649f887f78ac312d0b932825b627fb031ae43f", "message": "OpenRTB 2.3.1 reviews"}, {"url": "https://api.github.com/repos/google/openrtb/commits/7e8ce98a9259cacfc2330e561c99c33d923b7d69", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/d8a01f3cc5afe3d22fbec942037240e5b773a695", "message": "[maven-release-plugin] prepare release 0.8.5"}, {"url": "https://api.github.com/repos/google/openrtb/commits/ce18df30e4ebf176bd1e85ad78f7b24d1da6198c", "message": "Update README.md"}, {"url": "https://api.github.com/repos/google/openrtb/commits/8cec7b5c8ad8d994428e36780e44a94fd3a797fc", "message": "Merge pull request #42 from opinali/master\n\nFix field name Asset.req->required / JSON"}, {"url": "https://api.github.com/repos/google/openrtb/commits/03eead044562bb987be6f73f6192779455ca13ef", "message": "Fix field name Asset.req->required / JSON"}, {"url": "https://api.github.com/repos/google/openrtb/commits/55e6eed516014c22cbe0540987d74249fcbbe914", "message": "Merge pull request #41 from opinali/master\n\nFix field name Asset.req->required"}, {"url": "https://api.github.com/repos/google/openrtb/commits/f887b4d014159976da2e77b06867562cb30895a5", "message": "Fix field name Asset.req->required"}, {"url": "https://api.github.com/repos/google/openrtb/commits/36cacd80de838d8603aed43fd148c1d3b2022c9e", "message": "Merge pull request #40 from opinali/master\n\nFix Bid.cat to repeated; packed fields"}, {"url": "https://api.github.com/repos/google/openrtb/commits/54056f4d03684d045e76acd20a70a6de6c2b8f28", "message": "More packed fields"}, {"url": "https://api.github.com/repos/google/openrtb/commits/2b501b163e88e824afb6e28234f75cbab5f8bc3e", "message": "Fix Bid.cat to repeated"}, {"url": "https://api.github.com/repos/google/openrtb/commits/c5fa2cda31a296d252142777c5678fe0d959208c", "message": "Update README.md"}, {"url": "https://api.github.com/repos/google/openrtb/commits/93387c8565d0e1233f224acf6218cc9d2d3afd12", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/c22bd3d639ace067f472b9c214a7e09e3da9f7f7", "message": "[maven-release-plugin] prepare release 0.8.4"}, {"url": "https://api.github.com/repos/google/openrtb/commits/743d1abe91a0bb3f59867222a0e74af586cc1103", "message": "Merge pull request #38 from opinali/master\n\nRename Impression->Imp, PMP->Pmp, Regulations->Regs, some enum values"}, {"url": "https://api.github.com/repos/google/openrtb/commits/bbe8c5dbc6659ef38e1f4c2b63dcb38b13c956f9", "message": "Javadoc fix"}, {"url": "https://api.github.com/repos/google/openrtb/commits/ef15267fa469a825683aabe4d626a6f45d193766", "message": "Rename Impression->Imp"}, {"url": "https://api.github.com/repos/google/openrtb/commits/fb85f7c173cf9f814f384f234e26b3e9e3cb42d4", "message": "Rename Impression->Imp, PMP->Pmp, Regulations->Regs"}, {"url": "https://api.github.com/repos/google/openrtb/commits/771a5dce87991af093d9c7e2873d1d65a3b2fdc6", "message": "Enum reviews"}, {"url": "https://api.github.com/repos/google/openrtb/commits/1c45caa397cd127319d0cabef80aa57f7471b6ef", "message": "Update README.md"}, {"url": "https://api.github.com/repos/google/openrtb/commits/fced0b884cdbcfc9e9741d3987ae9ff0eb5807d9", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/a31b2efcfb0030e4b1543f35de7908004b791895", "message": "[maven-release-plugin] prepare release 0.8.3"}, {"url": "https://api.github.com/repos/google/openrtb/commits/1815138da7e23ef2fa1d186b993da44fc53d91a4", "message": "Merge pull request #37 from opinali/master\n\nInclude proto files in source-jar"}, {"url": "https://api.github.com/repos/google/openrtb/commits/0910b0b4855126091a73f007ec15cbbf217ee738", "message": "Include proto files in source-jar"}, {"url": "https://api.github.com/repos/google/openrtb/commits/ecd65a05512267ece8cd029c21410580f2dd9234", "message": "Merge pull request #36 from opinali/master\n\nJSON extension parsing fixes II"}, {"url": "https://api.github.com/repos/google/openrtb/commits/2086ae971fb1646ca6bdc6cfc269413defd79be0", "message": "JSON extension parsing fixes II"}, {"url": "https://api.github.com/repos/google/openrtb/commits/79e1cff77b5cc3dcf660b509b5a3c53febf5d3fd", "message": "Merge pull request #35 from opinali/master\n\nJSON extension parsing fixes"}, {"url": "https://api.github.com/repos/google/openrtb/commits/c8b46821cf09664fdde8e07f45e3c99c7cd24df5", "message": "JSON extension parsing fixes"}, {"url": "https://api.github.com/repos/google/openrtb/commits/39415866960f8865bf4ec4043e6b694f8870a1f5", "message": "Update README.md"}, {"url": "https://api.github.com/repos/google/openrtb/commits/2f417ab8db2cd5e4c0a77c0b40201b30677436a5", "message": "Update README.md"}, {"url": "https://api.github.com/repos/google/openrtb/commits/b7547ee82af5317bf4f183bf95c4d6867722ea6c", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/039c7536af0a67f3d132e8f9261d4d48fa91e223", "message": "[maven-release-plugin] prepare release 0.8.2"}, {"url": "https://api.github.com/repos/google/openrtb/commits/0a57e5cf7b88b7103bfe91f425b7b8681ce854de", "message": "Merge pull request #33 from opinali/master\n\nSeveral reviews"}, {"url": "https://api.github.com/repos/google/openrtb/commits/9a89f539536dc2ce444e43d2ccc8cf85c90cd897", "message": "OpenRtbJsonFactory inheritane reviews, test/sample"}, {"url": "https://api.github.com/repos/google/openrtb/commits/49f1d07149bc4782242ddf2888489d722e4ff53e", "message": "Improve OpenRtb*JsonWriter for subclassing"}, {"url": "https://api.github.com/repos/google/openrtb/commits/3d4045ab409e4d0908c6b21d30bcfe9a59e9b1c5", "message": "JSON parsing lenient with unknown fields"}, {"url": "https://api.github.com/repos/google/openrtb/commits/5ffffcdf4ec8704f58e594b130faf7da0d5d67a3", "message": "Completed support for the broken-2.1 CompanionAd"}, {"url": "https://api.github.com/repos/google/openrtb/commits/d0165670423d09dcf48670be94dcef746571f54d", "message": "Proto reviews\n\n- Added OpenRTB 2.1-compatible CompanionAd\n- Expanded the range of IDs reserved for extensions\n- Changed some field IDs to fix binary compatibility\n  with internal Google systems, so future interop may be possible"}, {"url": "https://api.github.com/repos/google/openrtb/commits/553e448b417d03dbba9f96c9039714cf4baa489d", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/0df04dd6fdd6c73107fe68187cac50a24e937908", "message": "[maven-release-plugin] prepare release 0.8.1"}, {"url": "https://api.github.com/repos/google/openrtb/commits/2a757dd412c5e50e96919b5c4df45d6eee5437d8", "message": "Merge pull request #31 from opinali/master\n\nTyped ContentCategory in the model; AuctionType enum"}, {"url": "https://api.github.com/repos/google/openrtb/commits/b1f3bb61adfb941cbd2aea70f5d77e9367a53ba4", "message": "AuctionType enum; improve ContentCategory JSON"}, {"url": "https://api.github.com/repos/google/openrtb/commits/8e3a71d46d89ffc796c084c9a5fd20c83c36e8b9", "message": "Typed ContentCategory in the model"}, {"url": "https://api.github.com/repos/google/openrtb/commits/b563ea868454b8f3a5afc9319e1fb2e3b435e035", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/720e44b459427ffa1c020b9e2de036654df85abb", "message": "[maven-release-plugin] prepare release 0.8.0"}, {"url": "https://api.github.com/repos/google/openrtb/commits/e9b36202fb409cc58f2884a76df44fd9f3bed98a", "message": "Merge pull request #29 from opinali/master\n\nFinal reviews for 0.8.0"}, {"url": "https://api.github.com/repos/google/openrtb/commits/7341db42296d4848b1ea063e8d887bc46f927f8a", "message": "Update README.md"}, {"url": "https://api.github.com/repos/google/openrtb/commits/a7f270b9b9b044ef43baf26bf34b00a690b1eeaf", "message": "openrtb/openrtb-native.proto review"}, {"url": "https://api.github.com/repos/google/openrtb/commits/132fd43d56926c59b6fa93cd3202b67d6d8ed0cf", "message": "Plugin updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/6e315a50f0586304b14fa2dc47c256f4ac5303cf", "message": "openrtb.proto review"}, {"url": "https://api.github.com/repos/google/openrtb/commits/a2cb881b963972848d52bdead0f6ac3b1af89530", "message": "Collection reviews"}, {"url": "https://api.github.com/repos/google/openrtb/commits/77cbdf79a3a7a9ac472eecc65046d56e6a720431", "message": "Review OpenRtbMapper to avoid confusion with Native ads"}, {"url": "https://api.github.com/repos/google/openrtb/commits/d204409cdff81df0981b170e5d5f3533d7098d00", "message": "Merge pull request #27 from opinali/master\n\nOpenRTB proto review"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/62891837", "body": "Oops, good catch-fixed.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/62891837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/65879611", "body": "I guess you're using this non-conforming JSON because some exchange uses that? There are some OpenRTB fields that were poorly specified and later changed/clarified, but I don't remember that Site.cat or Publisher.cat were among those.\n\nAnyway, I never worried to support uncompliant JSON and I'd expect a case like this to result in some error; but an infinite loop is not an acceptable failure mode. Let me try improve this.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/65879611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/65907427", "body": "I see you've got this sample JSON from a SpotXchange sample, I wonder if it's an obsolete or incorrect sample? Even if not, worst-case it's easy to modify the JSON serializer to handle the `cat` fields as scalar (I guess with CSV internally to allow multiple elements).\n\nDoing that without a fork is not very clean, e.g. you can extend `OpenRtbJsonReader` and override `readSite()`, but then you have to copy that entire method to only change the parsing code for one field. Same for the writer. I could refactor these methods in two pieces, allowing to override only a `readSiteFields()` method where you'd only handle one field and super-call for others. Will consider this as a future improvement.\n\nAlternatively, I could make the serializer \"smarter\", allowing a single value without `[]` in lieu of an array, but this is only trivial to implement for arrays of scalar values. If the array may contain objects, it's more complicated. On top of that I don't think it's a good idea to support what is effectively an uncompliant extension of OpenRTB... unless this kind of extension turns out to be common so people need to customize the serializer for multiple exchanges.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/65907427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/65911633", "body": "Fixed in commit 380f29b7fec31391d725fa2aaa463372e62e5eb8\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/65911633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/66139360", "body": "Hum, that's painful... I was hoping that nobody would actually have messages with null values, even if they are valid in JSON (OpenRTB implementations are supposed to avoid redundancies like 'keywords: null' because it's good to make messages shorter)... it seems that was too optimistic.\n\nI think the only good solution here will be to change the reader so it detects `VALUE_NULL` tokens and skips them (option 2). Investigating this now.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/66139360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/66152037", "body": "Ok, I have implemented support for nulls, and also used the opportunity to make another pending refactoring that will make easier for people to customize the serialization of individual fields if necessary (see Issue 10). Can you check this at the fork https://github.com/opinali/openrtb, if it works for you I'll merge that here.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/66152037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/66154700", "body": "Good, merged as commit d3204c81819faebad704531b2fff97a5c2a86fb1.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/66154700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/71342132", "body": "@metaquanta thanks for the patch! I just wish we had discussed this before writing the code. The problem is that storing values as decimals is not really helpful unless values are manipulated as decimals everywhere in the application that uses the library; using decimals only for storage or in parse/format operations makes no difference if apps still have to call getters/setters that only use doubles. And of course we can't have a `BigDecimal` in the API because protobuf doesn't support any type that maps to `BigDecimal` or equivalent language-specific decimal types.\n\nI considered using a `string` field for these values, but that would result in a really inconvenient API, forcing every get/set call to perform a conversion. And this still wouldn't provide any advantage over doubles: today you can just write code like `BigDecimal bidfloor = new BigDecimal(imp.getBidfloor)`. The double field is precise enough to represent any price; it supports 15-17 significant decimal digits of mantissa, and more critically, for any numbers up to 15 digits roundtrip conversions between a string (or precise decimal type) and a double are guaranteed to always be exact. This means `double` is perfectly safe for storage and parsing/formatting of any normal value used in OpenRTB.\n\nThe above is for background; now specifically on your patch: you're changing the model's field types to `int64` (= Java's `long`), and changing their scale to micros (just like DoubleClick's native protocol). This is another way to solve the problem, but then it forces apps to always manipulate prices in micros instead of \"currency units\" (USD or whatever used by the request). Unfortunately this is even more inconvenient for users of the API; as an end-user myself, if I care about precise decimal arithmetics I'd rather make some explicit `double`/`BigDecimal` conversions than work with micros all the time.\n\nTechnically, OpenRTB defines only a wire protocol and we have some flexibility for API/language-binding design, see for example how this library uses booleans instead of 0/1 integers for flags; or how I have introduced an extended `admNative` field [native is still WIP]. But these are changes that make the API significantly more type-safe and easy to use. The `admNative` will also result in significant performance gain. Changing the price to micros is a step backward in usability. (Also an important breaking change, one I'd rather avoid at this time, this code already has significant usage...) Even the potential advantage of precision is highly questionable, because `double` is not only good enough for storage and conversions, it's good enough even for arithmetics, since the values we manipulate here leave lots of mantissa bits unused \u2013 you'd need a crapton of error propagation before you get a significant error (I doubt any SSP or other platform will consider digits below 1^-6). This is remarkably true for monetary values, which are typically only manipulated by simple operations like sums or multiplies, which have maximum precision (<= 1ulp) in any language or platform; few if any people should calculate bid prices with complex formulas full of transcendental operations that sometimes have several bits of error in some \"hard\" value ranges. And if anyone is doing that, they certainly can't use `long`: even `BigDecimal` would be a huge ordeal because in most mainstream languages \u2013 anything other than specialized stuff like Mathematica \u2013 the math libraries cannot perform any decent math with decimal types; anything as sophisticated as a square root forces you to step down to floating point anyway.\n\nHaving said all that, my only concern with the current, simple usage of `double` is in the serialization; for example it would be ugly (although not a real problem) if the library emits JSON like `price: \"1.2000000000000000000003\"` due to accumulation of errors in the last few bits. Ideally, (1) the code for deserialization should ignore anything after some specific limit like the sixth digit after the decimal point, (2) the code for serialization should make sure to only emit digits up to the same limit. I think Java's default behavior in `double`/`String` conversions will take care of (2) but I'm not sure at which digit, and it won't take care of (1) at all. We could use `BigDecimal` to solve these problems, but I think just the `DecimalFormat` API should be good enough for that and way more efficient.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/71342132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/71376401", "body": "Thanks for the understanding! I'm closing the request then, but keeping this in mind. Just curious if your current habit of using micros for everything comes from working with the DoubleClick protocol?\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/71376401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/73566329", "body": "Thanks! Merged.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/73566329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/88657195", "body": "Preliminary support implemented as planned in the 0.8.0 betas. Reopen this or file new bug for tracking future changes for proto3 syntax.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/88657195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/94542536", "body": "This documentation is not in sync anymore with the code if you get the latest code from master; but it should be right for the last release (0.8.0-beta4). The JSON extension API is changing indeed, when the next release is out (which will be soon and hopefully the final 0.8.0) the docs will be updated to match it; but let's keep this bug open as a reminder :)\n\nP.S.: You are right that this part of the API is difficult; one of the motivations for the changes I'm making now is to make it simpler and more type-safe.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/94542536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/96506763", "body": "Hi Sam,\n\nThe latest changes have been finally released with the final 0.8.0, please\nuse that instead of master, as of today there are no additional changes in\nmaster and hopefully this will keep true for some time (and the next 0.8.x\nversions will be backwards-compatible, focused on fixes or minor stuff,\netc.).  Can't release snapshot jars to maven-central even if I wanted :) so\nif you need snapshots you always have to pull the sources and 'mvn install'.\n\nSample code are still a weak part of the project; it does't include proper\nsamples, OTOH it does have very high unit test coverage and you should find\ntest code that can sort of double as sample code for everything. For\nextensions, look here\nhttps://github.com/google/openrtb/tree/master/openrtb-core/src/test/protobuf\nand here\nhttps://github.com/google/openrtb/tree/master/openrtb-core/src/test/java/com/google/openrtb/json.\nBut it's another good point that the wiki uses an example that doesn't\nmatch any code in the project, ideally the docs should use code from some\nsample or even test code, adding that to my todo list.\n\nOn Sun, Apr 26, 2015 at 8:25 PM, Sam Bessalah notifications@github.com\nwrote:\n\n> Hi Osvaldo.\n> I have been trying to use the code on master, since it's the only one with\n> clear tests for handling protobuf extensions, but I can't seem to find the\n> 0.8.1-SNAPSHOTS on maven central. Are they published somewhere?\n> Also it would be nice for further improvement,,if you could provide an\n> example like in the Tests,based for example on your wiki, with the\n> \"SpaceAds\" example.\n> \n> Thanks.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/openrtb/issues/28#issuecomment-96451520.\n\n## \n\nOsvaldo Doederlein | Software Engineer, Doubleclick Ad Exchange |\nopinali@google.com\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/96506763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/97270271", "body": "That's a good idea; the spec uses ints or strings everywhere for these things but we can always use a higher-level type like enum in the model and then translate in the JSON serializer. It seems the ContentCategory fields are the only ones that missed this improvement, will fix this next release.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/97270271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/97499331", "body": "Fix will be in 0.8.1 soon.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/97499331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/102216347", "body": "There is no way to do that right now, but this is an improvement that was already being considered - not just ignoring unknown extensions, but ignoring any unknown field. We'll try to get this into the next update.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/102216347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/102819652", "body": "Adding support for non-standard fields is possible, just not very clean... you can fork the library and adding that field to the proto. Then it should also be easy to patch the JSON read/writer classes with support for this field. The problem then is continued merging to upstream, since we can't accept a change that adds uncompliant exchange-specific fields to the main library (even if it's tempting because we have the exact same problem internally at Google for interop with MoPub's protocol, and we do the same thing, adding the crtype field...). But it's not a lot of work either since the model and the JSON libs are pretty stable.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/102819652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/102838233", "body": "Final status on this: the next release will have a small fix in the classes `OpenRtb*JsonWriter` so you can write subclasses that extend field writing for regular fields. (This was already possible for `OpenRtb*JsonReader`.) This will make a new solution possible: keep the standard proto unchanged (no `crtype` field there), but create an extension for that, and subclass the writer class so it maps regular fields in the JSON into/from proper extension fields in the protobuf-based model. You may still consider the forking option simpler, but it will be nicer to have this alternative.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/102838233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/104267860", "body": "Thanks for the report, this definitely looks like a bug -- apparently the new unit tests that cover this stuff weren't good enough :( gonna fix this asap.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/104267860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/104298963", "body": "All fixed in master, can you test to confirm?\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/104298963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/104654251", "body": "Oh well another corner case... think I've got it right now, please try again.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/104654251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/104681688", "body": "Great! Now for the proto... good idea except that it would be OK to put the proto files in the source-jar, not in the main jar. Would that help you?\n\n(Alternatively you can use the download-maven-plugin to fetch the proto directly from github.)\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/104681688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/104704203", "body": "Good, released then!\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/104704203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/110847544", "body": "The `Bid.cat` field should be repeated indeed, and this was just recently fixed but it's not released yet. I have just merged this fix to the main repo with https://github.com/google/openrtb/pull/40 (and https://github.com/google/openrtb-doubleclick/pull/39 if you use that library too) so it's easier to test. Planning to make a small release in the next few days to address this, but let's make sure you don't see any other problem here.\n\nOn the second question, maybe some side effect of the buggy single-value field; I double-checked the current code and this problem certainly doesn't happen there but please update and confirm for me.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/110847544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/111160367", "body": "Great; next release should be out soon then. Should have happened already but good thing it didn't, before you've found this bug. :)\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/111160367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/113704028", "body": "This is not the desired behavior, it's a bug, it seems the library never supported the root `native` field. I think the reason this kind-of-worked before is that the parser would ignore things it didn't understood in the start of the stream, but this won't happen anymore in the current parser which was improved to scan the document more reliably in several ways. But it's a good thing that this uncovered an old bug. Expect a fix and release with this fix early next week...\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/113704028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/113962908", "body": "Please test the current code just committed to master.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/113962908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/136148387", "body": "I didn't want to make this class public because it's something very out of the scope of this library... but the real problem here was sloppy research, it turns out this copy of an internal Guava utility was not necessary because there's a public API there that does what we need! I just fixed this with commit 5c82da9d40705281b8d4ebe112ad4c4ee20dc793; you can use similar code in overrides.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/136148387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/137029910", "body": "Great, closing then :)\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/137029910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/137985525", "body": "You have a good point/find that deserializing this JSON should never fail with a `NullPointerException`. I guess the best option is not failing at all, just ignoring the unsupported values. Will be fixed in next release.\n\nNow on the second problem of providing some kind of support for non-standard values: this is one explicit tradeoff made by the library, we wanted both the safety and convenience of fields typed as enumerations, instead of having tons of `int32` fields everywhere. The flipside is that supporting extended enum values is not possible, at least not in any elegant way (yes I could play with protobuf's support for \"unknown values\"... it would require reserving separate tag IDs and hacks in several places). But the most important factor is that this tradeoff is actually minimal, because this kind of extension is _not_ generally allowed; the only enum explicitly documented to allow exchange-specific values is the `at` (Auction Type) IIRC; and even there you have to use ordinal numbers above 500, you can't just pick the first \"free\" number. This is highly likely to clash with new standard creative attributes that may be added in future versions of the spec (unless the spec just adopts as standard this new attribute from Rubicon; but that doesn't scale to multiple vendors doing the same hack). In the native spec this is similar, vendor-specific enums all above 500, except that this is explicitly allowed for all enums from that spec.\n\nI suggest that you fork the library and just add a new enum element for attribute 17, if not losing it is critical.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/137985525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/138576383", "body": "Happy to know Rubicon doesn't break the spec in this way, that seemed surprising considering their role creating the standard :) The NPE was an easy fix... can't wait for Protobuf 3 GA so we can stop writing handcoded JSON parsers for this :(\n\nOptional failure is a good idea too.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/138576383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/139413089", "body": "Just got in the code to fix this, you can test with master but we should have a release soon.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/139413089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/140093016", "body": "This is a tradeoff, the builder parameter would certainly help your use case, but it's much less convenient for the general case where all callers would need code like:\n\n```\nBid.Builder bid = Bid.newBuilder();\nreadBid(par, bid);\nseatBid.addBid(bid);\n```\n\nI can make that better by returning the same builder passed as parameter:\n\n```\nseatBid.addBid(readBid(par, Bid.newBuilder()));\n```\n\nBut it's still more code, and that's not even the most important thing: I lose the ability to control creation of that builder in the `readBid()` method. This is important for example if I want to optimize all those read methods so they don't even allocate a builder (and return `null`) if the JSON object is an empty `{}`, which is something that can happen inside sloppily-created messages. (Avoiding to set a dummy child object on desserialization will also prevent serializing it back to `{}` from the same model, if you need to do that.) It's not a big impact in terms of performance, so I didn't put the time yet for that change, but I still find that valuable as a way to ensure canonicalization of messages: in scenarios like persistent data or test data, you want if possible that the same \"logical\" message results in the exact same in-memory model / same JSON, that makes everything more efficient and reliable (comparisons, indexing and whatever you need to do).\n\nIn your use case you can do this: `ext.mergeFrom(readBid(par))`. That switches the inconvenience from some extra code to your use case :) but other than that, should work.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/140093016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/140852153", "body": "This one will take some time \u2014 the JSON extension API is already the part of this library I'm less happy about. Good that for now you have a workaround, meanwhile I'm lookingo into a real improvement for this API instead of just adding another special case.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/140852153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/141590860", "body": "Ok, the latest code on master should fix this last limitation, also it does the big revamp of the JSON extension API that I'd been putting off for too long. This required breaking changes but not too bad and the new code is simpler\u2013most readers will lose one generic parameter so you don't need to use a dummy `..., Message.Builder>`; others will have to change the base class and lose the first parameter in the `read()` method. Some work too for easier development like proper abstract methods and more error handling and logging.\n\nI'm afraid testing this can be difficult before the next Open Bidder is released because the code in master for these libraries include other changes (even a rare breaking change in the AdX protocol), but there are new unit tests that reproduce your use case so hopefully this will solve the problem.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/141590860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/146199391", "body": "Hi @karenhovhannisian, this library is only concerned with  the representation of OpenRTB messages, ideally you should checking this with Smaato's documentation or support. But since your question is about a pretty general feature of the protocol (so I don't think Smaato's implementation would do something unique): you need to check the `mimes` field of the request's `Banner`, `Video`, or `Image` assets for native impressions; in all cases the field is an array of all MIME types the request supports, so you can reject all impressions that don't include at least one of your image types in that list.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/146199391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/146568461", "body": "I agree this would be a nice improvement... normally, the read method should return `null` for empty string, because an empty string is not a valid representation of any JSON object (an \"empty\" JSON object must contain at least `{}`). But it's nasty to make the reader methods `@Nullable` only for this special case. I think we can just return `BidRequest.getDefaultInstance()`, which also doesn't require special casing in the caller. (The default instance is a fixed object, so you can detect if that was the returned object if you care.)\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/146568461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/146970072", "body": "Some good points... returning the default object is clean in the theory because the Protobuf library documents that this thing is a singleton; still, I agree it's not a popular and obvious API design.\n\nNow, an empty string is not a valid JSON input, so the exception you get today is the perfect behavior for strict parsing. Unfortunately there's no good way to detect the cause of Jackson's exceptions, other than matching the message strings, otherwise I would dismiss this as WAI. We already have a \"strict\" option in the API, so that's a perfect candidate for the desired feature: do `setStrict(false)`, then the read methods will mask this special case and return `null`. I'm still not friendly to the idea of making the return types `@Nullable` for the sake of a corner case (if you have some exchange/platform sending you empty-string requests or responses they are doing it wrong...), but I suppose it's not a big sin to return null _without_ declaring `@Nullable` if the user has set a _strict=false_ option; that opens the Pandora box of \"I know what I'm doing\" so it looks like a good tradeoff.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/146970072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/157500517", "body": "The `NullPointerException` was not intended, it's a bug that was fixed in v0.9.3, so you can update to at least avoid this exception. (If you're using the library via Open Bidder, that will have a release later this week, catching up with the current OpenRTB libs.) I agree this representation of enums doesn't support the extended values allowed by the spec, but it's a tradeoff we've made for a more convenient, strong-typed API. (And frankly this is a bad feature of the spec IMO, so we don't plan to ever use it in AdX' upcoming OpenRTB callout support; but that's a separate discussion.)\n\nHowever there was always a plan to support extended values via Protobuf's unknown field feature (which makes reading/writing the extended values less convenient, but that's OK for a corner case -- you are the first user ever who reports this limitation as a problem, confirming my impression that actual usage of extended values is uncommon). But it's not a hard change and now there's demand for it, so maybe a good time to work on that. Another solution is forking the proto from this library and adding new values to the enum, this is a good workaround with the latest lib which will just ignore unknown values so you only need to add the ext values you care to process.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/157500517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/158989550", "body": "(0.9.6 improved this; closing bug.)\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/158989550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/186636880", "body": "You are right, this is an incomplete and not well documented part of the JSON support. The current implementation favor what seemed to me to be the prevailing interpretation of the spec, but the \"right thing\" is not having that top-level field anymore, it's past due time to change it. Except that I can't just change, so I will be adding a boolean flag you can set in the factory to choose if the JSON write will emit this field or not, so people needing the legacy-compatible behavior can do that. (The reader already works with or without that field.)\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/186636880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/187480704", "body": "The plan so far did not include any further updates for lower JDK releases, but I didn't expect the demand :) I think it's fair to backport at least bugfixes and compatibility improvements like this to a 0.9.9 release.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/187480704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/187768256", "body": "This would normally be a priority (at least releasing this fix if not the JDK8 port), but bad timing this week with SFO AdX Developer Day ahead :) so I think I can get this out early next week, and the porting maybe later that week, or following week worst case. If there's urgency you could fork the last release you can use and patch in only this fix.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/187768256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/195392237", "body": "Yes this is released now as 1.0.3. A backport is planned next, should be available later this month!\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/195392237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/206069644", "body": "There's a new minor release coming, so the jdk7-compatible branch is planned to be part of that release, thanks for some extra patience :)\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/206069644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/218223672", "body": "Thanks for the feedback! On the need to register the extension, you are right, the problem is that the wiki is not a full tutorial so it doesn't show how to use the `ExtensionRegistry`. This is a problem because Protobuf extensions are not a feature that I should assume everyone will be familiar with and this registry is not an obvious step. You don't need to register extensions individually, do this instead:\n\n```\nAdxExt.registerAllExtensions(reg);\n```\n\nAlso, even if you don't do this, the extension values are present in he proto model, they just aren't parsed but they can be accessed like this:\n\n```\nAdxExt.ImpExt.parseFrom(\n    imp.getUnknownFields().getField(AdxExt.imp.getNumber())\n        .getLengthDelimitedList().get(0));\n```\n\nAdmittedly, this code is horrible :) even though it's simplified to assume that there will be exactly one ImpExt value. This is only good for advanced uses that need dynamic discovery of extensions, or lazy parsing for big extensions that are rarely used, etc. I will update the wiki with the registry step.\n\nOn the dependency to doubleclick-core, that's inevitable because the `AdxExt` is AdX-specific so there's no way I could move this to the openrtb-core library; everything here needs to be really exchange-neutral. Modularity is the whole point of using extensions in the first place so the protos can be independent and also associated utilities like JSON support. However I'm planning to split doubleclick-core in two pieces, moving the AdX->OpenRTB mapper to a separate library since now this is not useful for users that work with AdX's new on-wire OpenRTB protocols.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/218223672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/220010666", "body": "Hi, thanks for the suggestion. It's already come to our attention that some exchanges do the direct embedding even with the regular `request` field (but I don't know about `adm`), also version 2.4 of the spec makes this option more kosher so it makes sense to expand support for this. Did you already check out the just-released v1.0.4? That already supports all variants of using or not using the root `native` field, but that's mostly legacy support, everyone should really move to not have that root field anywhere and I hope some day we can remove this support. Looking forward, additional support for direct embedding is planned, it just won't be very fast because the plan is to include this in the next major version which will add full support for OpenRTB 2.4 & Native 1.1 so that can take a couple months.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/220010666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/220047101", "body": "Hi, this looks amazing, thanks! It seems we can have an unplanned release sooner, just to deliver this improvement. :) Will still take some time to review because the pull request is so big (thanks for all new test code!), I also have to do integration testing with other stuff, but hopefully will give you feedback over the next few days.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/220047101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/221598582", "body": "Done with the code reviews for now, thanks in advance for the patience :)\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/221598582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/221603931", "body": "The OpenRTB-extension mechanism used by the library is designed to be modular, not requiring any changes to the core proto; you define the extensions in a different proto (which imports `openrtb.proto`). I realize the documentation provided in [the wiki](https://github.com/google/openrtb/wiki#extensions) is very summarized, it's already planned to be improved, will try to work on that soon. But you can check the examples hidden inside the unit tests, look at the `test-*.proto` files and the code that uses them (not the most didactic material because it's written as test and not as sample code, but I guess better than nothing for now). A better source of sample code would be the companion DoubleClick OpenRTB library, see [this proto](https://github.com/google/openrtb-doubleclick/blob/master/doubleclick-openrtb/src/main/protobuf/openrtb-adx.proto) and if you need JSON support for extensions see also [this package](https://github.com/google/openrtb-doubleclick/tree/master/doubleclick-openrtb/src/main/java/com/google/doubleclick/openrtb/json), it's a decent real-world example.\n\n@pratikkumar19 \n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/221603931/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/221611956", "body": "Yes that's a correct start; to compile you will need the core _openrtb.proto_ and you need an `import \"openrtb.proto\";` in your file. You could just make a copy of the _openrtb.proto_ to your project, but if you want to automatically keep it in sync with the library as you move to newer versions, you can use Maven's `download-maven-plugin` (or something equivalent in other build systems). Basically your build file needs to download _openrtb.proto_ from this github repo, put it in a local directory and add that to the import path for `protoc`. You can copy the necessary configurations from [this build file](https://github.com/google/openrtb-doubleclick/blob/master/doubleclick-openrtb/pom.xml); the pieces you need are the following:\n- `build-helper-maven-plugin` configuration\n- `download-maven-plugin` configuration\n- `maven-antrun-plugin / generate-protoc` config, check the `<arg value=\"-I${protobufGenerated}/include\" />`\n- Notice that the last two items are stuffed inside a profile config, this complication is necessary for Eclipse, which Maven plugin doesn't support those plugins... so the profile makes Eclipse ignore this part of the POM, and you need to make a build from the command line to produce the generated code before creating, updating or building the Eclipse m2e project. You may not need any of this in other IDEs with better Maven integration.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/221611956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/222502937", "body": "The example you find in the spec uses this string _\"...Native Spec etc.\"_ only as a placeholder, that string is not valid native request content, so the parsing failure you see is correct. This string must contain an encoded JSON object, for example `{\\\"ver\\\":\\\"1.0\\\"}` is a minimal valid native request (already escaped to be inserted into the larger JSON BidRequest).\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/222502937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/224301788", "body": "Finally had the time to go through this again; thanks once more for your effort addressing all my comments. There are still some minor style issues but it's just nitpicking and it's easier to merge the code so I can reformat myself. On the functionality, it's a pretty big pull request so it's hard to be sure everything is 100% ok just by looking at it, but it certainly looks very good and the amount of work you put in unit tests is very reassuring :) so once again, best way to go is merging it and then testing on other proijects I have.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/224301788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/224391066", "body": "cc @bundeskanzler4711\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/224391066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/231432095", "body": "Wiki updated.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/231432095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/231436528", "body": "Hi @modqhx, as you figured out the RTB \"protocol\" is really simple, mostly a single request/response pair on top of HTTP[S]. The real complexity of RTB is in the data model inside the request and response objects, and the logic used in both sides, by exchanges and bidders, both trying to optimize several factors like revenue, impressions/clicks, respect restrictions from publishers and networks, avoid fraud etc. And the operational part of the service can also be tough, in particular a bidder may need to handle tens or hundreds of thousand requests per second and it needs to handle them all very fast and still perform complex bidding logic, so performance is important. The JSON-based protocol allows you to easily handle the messages in Javascript or another dynamically-typed language without a special library, but most people want to use more efficient languages like Java or C++, we also want static typing just because the model is so complex with tons of object types and of fields. This library helps with that, it will make sure messages are valid, also support a binary serialization format that's way more efficient than JSON (this saves a ton of money when one operates at the scale of large RTB exchanges like AdX; may be less relevant for small bidders).\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/231436528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/239980025", "body": "Oh sure, sorry for not updating this issue but yes the compat branch is updated, I'm keeping it in sync with every new release.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/239980025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/242402837", "body": "Hi @torbenbrodt, first thanks for the contribution! However there are some problems with accepting this (mostly our own fault). It turns out that we already have the full 2.4/1.1 proto changes internally at Google, but the actual support for the new protocol in AdX is still work in progress... and even though this library is exchange-neutral, in practice it's derived from AdX/OpenRTB since we started supporting the protocol natively this year. And while this project welcomes external fixes and contribs, the proto is a critical piece that needs to match the internal stuff exactly. (It's a perfect copy of [this file](https://developers.google.com/ad-exchange/rtb/downloads/openrtb-proto), except for the license header.)\n\nOther minor issue: The numeric tag ID for existing fields (like `assets`) cannot change, ever, in no circumstance, it's a dogmatic rule for us because protobuf relies on this for compatibility across versions.\n\nBut I'll take this as incentive for moving faster with 2.4/1.1, this shouldn't really be gated on AdX's full support (which is reflected by a [separate library](https://github.com/google/openrtb-doubleclick)). So what I'm doing now is updating the proto here with our latest internal changes, so that this library will have the more up-to-date proto, and the copy at the AdX download site will stick to 2.3/1.0 for now.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/242402837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/242829740", "body": "You can take an early look at the upcoming support for 2.4/1.1 [here](https://github.com/opinali/openrtb/commit/334c9f8a08912dc2b41231da63c65c728a32a39d). Unfortunately this will require some breaking changes, but only imports.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/242829740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/242830107", "body": "I'm closing this PR, and opened a bug to track 2.4/1.1 impl :)\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/242830107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/245916030", "body": "Hi @philipphoffmann, as you see we're finally working on this... slowly, because the user demand has been slow too but finally picking up. :) So this support will come in two phases:\n1. The core openrtb project (this one) will include the updated protos and JSON support. This is coming soon in v1.1.0, maybe next week but two weeks from now I'd say.\n2. For people bidding on AdX who may also need the sibling [openrtb-doubleclick](https://github.com/google/openrtb-doubleclick) library, it will have a matching, simultaneous v1.1.0 release that will initially have no functional changes, just compatibility with openrtb core v1.1.0. Later, we'll have v1.1.x updates that will incrementally add new mappings (e.g. for the `format` field and others useful for AdX), these will roll out simultaneously with updates in the native OpenRTB protocol support from AdX so people can use the new stuff with or without this library; my expectation is having this done by EOY.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/245916030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/248639430", "body": "Yes, it's just lagging a little behind but this should be out today or tomorrow. :)\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/248639430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/248718512", "body": "No problem, I was expecting more merging work for this update but it was easier than expected.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/248718512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/271473257", "body": "This is a common difficulty with protobufs + Maven, there's no good building support, at least last time I checked, and imports / dependenciesfrom external protos have to be resolved manually. What I do is using the maven-download-plugin, see here:\r\n\r\nhttps://github.com/google/openrtb-doubleclick/blob/1.2.3/doubleclick-openrtb/pom.xml\r\n\r\nBasically, you need to make the pom download external protos, then use maven-antrun-plugin to run javac on that and finally use build-helper-maven-plugin to add this compikled code to the build path for the rest of the Maven project. Lots of maven boilerplate but works well.", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/271473257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/272451755", "body": "The short answer is yes, we're committed to support new releases of OpenRTB as they come, but there's no public schedule for specific releases. Best thing you can do is communicate any urgency to your DoubleClick account manager. ;-)", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/272451755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/281232247", "body": "Unfortunately this is \"working as intended\": strong-typed enums are one important design tradeoff of this proto, so you get development conveniences like compile-time checking or code completion for fields like this (at least then the proto is compiled for static-typed languages), but there's no support for extended values. Unless of course you fork the proto and declare the additional values for extensions you want to support. Notice that such fork may need to be on a per-exchange basis, since there's no mechanism to prevent different exchanges to use the same number for their extensions.\r\n\r\nMy personal opinion is that this extension mechanism is a very bad idea, which I have expressed a few times to the OpenRTB committee; DoubleClick Ad Exchange makes no use of this ever, even though we have lots of custom values that can't be mapped cleanly to many of these enum-typed fields. It's much cleaner to use a proper extension with `ext.*` nodes when this is necessary. `</rant>`", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/281232247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/283350897", "body": "We are aware of this issue, these rules changed in proto3... and there's no way to fix it without a breaking change in the enum names. See discussion at https://github.com/google/protobuf/issues/2179\r\n\r\nThis behavior was improved in protoc 3.2.0 so all you get is a noisy warning, at least for most languages.", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/283350897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/283392689", "body": "Which release of protoc are you using? This really requires the very latest, 3.2.0. Anything below that will fail to compile, they only fixed this to be a warning in 3.2.0.", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/283392689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/286553207", "body": "Hi Yoav, checking your messages now -- is this related to issue #107 or that one is unsolved?", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/286553207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/287237395", "body": "Did you try checking the included unit tests [here](https://github.com/google/openrtb/tree/master/openrtb-core/src/test/java/com/google/openrtb/json)? These tests are reasonably documented so that can also be useful as samples; you will find one for each possible scenario. I know it's not as good as a detailed tutorial document but maybe this can clarify things.", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/287237395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/294891244", "body": "Filtering messages by version is not a supported feature, i.e. I guess you want to populate a request with all signals you have but then automatically exclude 2.4+ specific fields for a DSP that supports 2.3, right? In theory this shouldn't be necessary, those DSPs that use older versions should just ignore the fields they don't understand, after all this is one of the advantages of a dynamic-typed format like JSON. Nobody should be parsing these messages with code that's strict enough to fail if it encounters unknown fields, if this happens it's a bug. However I also see the motivation of saving bandwidth, for that purpose this could be a nice feature... but it's some significant work to do right, it's not just exclude/include fields (lots of them) but many fields are deprecated, some of them had incompatible changes of type (actually spec clarifications), so the decision so far has been to avoid the whole problem and rely on SSPs/DSPs to be well-behaved with higher-spec messages.", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/294891244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/295279528", "body": "@mzgupta I think it wouldn't be hard to keep multiple versions of this entire library, using for example the Maven shade or jarjar plugins, but then you need different code to access each version because the generated protobuf classes will be incompatible so this may be only viable if you are using them only in some limited code (e.g some interop stuff that needs separate code per SSP/DSP anyway), but not viable to write core bidding logic that you want to reuse across platforms.\r\n\r\nHaving a single RTB model and associated utilities that work perfectly for all OpenRTB versions is possible, but it's a big hassle. At Google we do that in systems that needs to integrate with partner platforms, some of them not well behaved with the spec (e.g. extension fields without the `ext.*` containers). So the internal OpenRTB proto we use for that is much messier than this one, in fact this public proto is a \"cleaned up\" version of that internal proto.\r\n\r\nOne of the tricks you can use is this: declare multiple proto fields that will map to the same JSON field, for example have both `companionad` and `companionad_21`, the latter for the 2.1 spec which was incompatibly changed at 2.2+. Then have a JSON serializer that can be configured to map either of these proto fields to the `companionad` JSON field, and then also the app code that processes companion ads must have some extra code to handle both cases.\r\n\r\nBut the goal of this library is having an OpenRTB model that's as clean as possible, privileging compliance with the latest standard, and exchange-neutral (we keep all AdX-specific support in the separate openrtb-doubleclick library). So we're explicitly not supporting any hacks, not even for AdX. If you need to support special needs of some DSP or incompatible traits of ancient versions of the spec, you can fork the library to add the necessary hacks, then keep the fork in sync as the parent changes.", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/295279528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/350152750", "body": "Notice that the specification states both \"optional override\", like you quote above, and it doesn't mention any default value in the Type column like it usually does for all fields that have a default. This means this default is implicit, i.e. if we don't provide a value for `Deal.at` then you should assume its auction type to be whatever you get from `BidRequest.at`. And the latter field defaults to second price, but this is just a default, another type can be set.\r\n\r\nProtobuf doesn't have syntax to specify defaults dynamically with runtime rules referring to other fields, only statically with constant values. If I set a static default value to `AuctionType.SECOND_PRICE`, and the exchange sets a different auction type in the request but doesn't set any value in the deal, then you will get the wrong value from `Deal.at`.\r\n\r\nYou only need to mind the fact that protobuf fields can have absent value, so the right way to code is: first check if the field is set (`has` method), if it's not set then you should use the request's field instead, i.e. it's caller responsibility to do this default logic because unfortunately we cannot put that in the message as a static default.", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/350152750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/350927645", "body": "What you suggest would be ideal indeed, unfortunately protobuf doesn't allow you to customize any of the generated code... well I could take the generated sources and modify them, but that would be hard to maintain :)", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/350927645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/356974887", "body": "Right, the tradeoff of the strongly-typed enums is that they cannot accept extended values without further modification. There are a few alternatives:\r\n\r\n1. Fork the proto and add extended values. Notice that you need to support multiple exchanges, which could use the same numeric value to mean different things, you can support that with a single proto with `option allow_alias = true;`; or you may find less confusing to use neutral names like VALUE_501, etc.\r\n\r\n2. Do nothing in the proto, and handle extended enum values as unknown fields (check protobuf docs on this).\r\n\r\nThe problem with option 2 is the JSON support library, it throws the exception above because the JSON reader does not support extended values. I think this can be improved, let me know if this support would be useful i.e. if you think the unknown-field proto feature is a good way of handling this, provided that JSOn mapping would work.", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/356974887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/openrtb/pulls/comments/23776131", "body": "Thanks for spotting this! I'll only ask for some improvements. :)\n\n1) Put a comment here explaining that we need this different code due to backwards compatibility with 2.2. (At some point in the future, maybe by 2.4 or whenever we don't have to care about 2.2 anymore, it would make sense to clean it up and revert to just `getIntValue()`.)\n\n2) This doesn't always work well because `getValueInt()` will silently return 0 if the field doesn't contain a parseable number. If this happens, `Context.valueOf(...)` will return null because there's no enumerated value for 0. and then, `content.setContext(...)` will throw `NullPointerException`. So we need to handle this better. I suggest just keep using `getIntValue()`, but put all code inside a try/catch for `JsonParseException` and just ignore this exception.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/23776131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/24216173", "body": "- typo: s/readKeywoards/readKeywords\n- this method can be static and it could also move to OpenRtbJsonUtils; in that case, also get a more generic name, like getStringOrArray?\n- Please add a javadoc to this method, explaining that this is specific to OpenRTB 2.2. (In 2.3 all these keywords fields have been clarified/fixed to be only strings with comma-separated values.) 2.2 is still recetn so I agree it's a good idea to have this backwards compatibility for now, thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/24216173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/24216398", "body": "I'd rather not have this case, for consistency with all other reads: if the token is not an array, then assume it's a string\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/24216398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64451825", "body": "I want to always parse to `Native.requestNative`, it doesn't matter if the input is an object or a string, we never want the resulting proto to contain the native request as a JSON string that needs further parsing. The string field is treated as \"write-only\", it's useful in the writer because the user can set the value as JSON text, but the reader is biased for the object representation. It would be acceptable though to parse into `Native.request`, if the input is a string, as a non-default option that could be set in the factory, e.g. `setForceReadNativeAsObject(false)`.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64451825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64457559", "body": "We don't want to support any alternate names for this; notice that the library is strictly OpenRTB-conformant at the JSON level, there are no exceptions even for AdX extensions, they need to be provided in a separate library via extension plugins or overriding. So the idea we had here before is that the JSON field is always the same name, but we detect variations in the format. The current code assumes it's a string with escaped JSON so we parse that and only detect if it has the root `native` field; what you want to do now is improving the code here like this:\n\n```\n  case \"request\": {\n    OpenRtbNativeJsonReader nativeReader = factory().newNativeReader();\n      if (par.getCurrentToken() == JsonToken.VALUE_STRING) {\n        nativ.setRequestNative(nativeReader.readNativeRequest(new CharArrayReader(\n            par.getTextCharacters(), par.getTextOffset(), par.getTextLength())));\n      } else {\n        nativ.setRequestNative(nativeReader.readNativeRequest(par));\n      }\n    }\n    break;\n```\n\nIf in addition to that you want to support an alternate JSON field name for some exchanges that do that, this need to belong in a separate library or custom code.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64457559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64460820", "body": "Similar problem here; in this library we can support detection of multiple formats for `adm`, but we cannot have parsing of any non-standard field names. Notice that doing this in a separate library is easy: subclass this class, override only this method, have a similar `switch` that handles only the `adm_native` field, then the `default` makes a super-call. Also subclass the factory to override `newReader()`.\n\nOne thing that's different here is that I don't try to parse the JSON `adm` field to `Bid.admNative`, with automatic parsing of the embedded JSON like I did for the request. This is because the `adm` field (unfortunately) is not exclusive for native requests, it's also used for banner/video requests so it can contain HTML or VAST. That was a limitation planned to be fixed some day, so maybe this is a good opportunity to do that. I think this should work:\n- Current token is `START_OBJECT`: the easy case => can only be a child native response\n- Current token is `VALUE_STRING`: get the text like we already do now, but check if it starts with `{`, if it does then it should be a native JSON since neither HTML snippets nor VAST can start with this character, right? I don't like this kind of sniffing but I think it's reliable here.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64460820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64462091", "body": "Please avoid small refactored helpers like this unless it's invoked in more than one place, or potentially useful as an protected method that could be independently overridden. This class has a difficult balance between the large number of methods and the long `switch`/`case` inside each method, so I feel a \"dumber\" structure is the least evil, at least it makes easily to read and debug stuff linearly.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64462091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64463362", "body": "This seems to be a bugfix (the missing `nextToken()`), but please use `endObject()` in the condition, like:\n\n```\nif (rootNativeField && endObject(par)) {\n    par.nextToken();\n}\n```\n\nFor one thing, this can prevent a bug if there is no current token, which will happen if the JSON is broken and ends abruptly.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64463362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64503899", "body": "For new files, please fix indent size to 2 spaces, matching the rest.\nhttps://google.github.io/styleguide/javaguide.html#s4.2-block-indentation\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64503899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64504085", "body": "Also the + operator goes after line break... may have other style violations too, the project needs to follow the Google Java style strictly. We have formatter configurations for IDE/s editors at https://github.com/google/styleguide\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64504085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64504199", "body": "Thanks a lot for all this new test code! I see it seems to be real messages captured from exchanges; please make sure none of those messages contain any significant PII such as device IDs or non-anonymized IP addresses. Superficial check seems good :)\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64504199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64504255", "body": "import the Logger type, instead of using qualified classname\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64504255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64510351", "body": "indent in 3 lines, vertically aligning `?` and `:`\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64510351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64510707", "body": "same as before / tiny single-use helper methods\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64510707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64510757", "body": "no `final` for parameters or local variables unless necessary for inner classes \u2013 I used to like this myself, but not Google style... and obsolete with Java 8's effective final rule\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64510757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64510831", "body": "please avoid these line breaks if a setter's parameter fits in the same line, even if it's a complex expression.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64510831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64576217", "body": "You are right that these utilities are confusing, I was coding from memory and forgot the negation :) but please use that anyway for now, with the negation. The rationale for this naming is that those start/endXxx methods are mostly used as loop guards, like `for (startObject(par); endObject(par); par.nextToken())` -- it's a kind of macro. In hindsight this may have not been the best idea, particularly when the same methods need to be used in other places (but that's rare). I've already considered to change this but that would need to include other methods, update all uses, keep deprecated methods for a couple releases, etc.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64576217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64579811", "body": "Similarly to the reader side, in the writer we want to transparently support either representation in the memory/Protobuf model (user can put the native part either in the string field `requestNative` or the object field `request`) but the output will be always the same, and that should be the most standards-compliant representation which is (even after OpenRTB 2.4) the ugly JSON-escaped string field. However we want to support a child object representation too, but the right way to do that is not by binding the output format to the user's choice of `requestNative` vs. `request`; this choice must be independent, it's a convenience and performance feature: when you create the native request programmatically you want to always use `requestNative`, but when you already have the complete native request as JSON (e.g. you may read it from a database of campaign data), then you want to just copy that to `request`.\n\nIn the reader we could handle the external-format choice via detection, sniffing the first token or character; in the writer we can't do that, so the only solution in this case is adding another boolean option to the factory. Above I had suggested an option named `forceReadNativeAsObject`, but we could have a single option that does the job for both reader and writer, maybe just `nativeAsObject`. Usually you will have the same choice for the request and response, it would be strange to use the standard escaped-JSON form in the request but send the child-object form in the response for example (if someone really needs that, then just create two factories - so we optimize the API for the common case).\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64579811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64583006", "body": "Thinking more about this... actually, having all this static JSON data as inline constants is awful. Can you move them to resource files? For example _request-full-noroot.json_, etc. then just read them with `getResourceAsStream()`. Then you can get rid of all the escaping, and also run the JSON through a tool like http://jsbeautifier.org/ so it's nicely  indented and readable.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64583006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64584376", "body": "I see the code here and below is only used to generate the big JSON test data but you can't call it from tests since it uses the same JSON utilities being tested, so it's smart to generate only once, validate the output, then dump it into static golden data. But we could have one improvement here: make this helper class a unit test too, with one `@Test` method that validates the golden data by comparing it to the output of the generator functions, i.e. similar to this `main` method except that you would do an `assertThat(REQUEST_...).isEqualTo(generate...)` for each constant. This is important to detect bugs that may inadvertently change the output of the generator functions, but might not be captured by the existing tests which only read the golden data.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64584376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64609237", "body": "Please don't add GSON or anything new, we try to limit dependency libraries to a minimum here. But you shouldn't need that, the Jackson library that we use here can do all the pretty printing we need. Because our data model is not POJO-based this requires a hack, but [not too bad](http://stackoverflow.com/a/14532435).\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64609237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/65655174", "body": "Thanks again for the work! Still a big pile of code so I'll need a few days to fully review again, but looks good. :)\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/65655174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "bundeskanzler4711": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/openrtb/commits/0131983355713634feb6bac388ee264463444792", "message": "Code cleanup"}, {"url": "https://api.github.com/repos/google/openrtb/commits/9f81eb24a35e4964d2a18783d6c7df87c0d68532", "message": "Added new test case for cross-factory native object behavior https://github.com/google/openrtb/pull/87"}, {"url": "https://api.github.com/repos/google/openrtb/commits/1e7b70bb8adea87e59a4dd0e9df4495bdab5886f", "message": "Fix for review https://github.com/google/openrtb/pull/87"}, {"url": "https://api.github.com/repos/google/openrtb/commits/f00b379617a41ee50721ff80a262af6180518461", "message": "Integrate feature/nativeJsonObject into master"}, {"url": "https://api.github.com/repos/google/openrtb/commits/0b9dcb4eebbf5a547bb9b3b374a3d9091675994a", "message": "Merge branch 'master' of github.com:bundeskanzler4711/openrtb"}, {"url": "https://api.github.com/repos/google/openrtb/commits/ee9f4b62e3a5c8265ca5356be09a42c15dcdb07f", "message": "Revert \"Zwischenstand\"\n\nThis reverts commit 2f9a5273623f2cc9f54207ab23a630fd2cca56bf."}, {"url": "https://api.github.com/repos/google/openrtb/commits/ca67036742ea30449f41a39ff4b396025483cb2e", "message": "Zwischenstand"}, {"url": "https://api.github.com/repos/google/openrtb/commits/84b8e77dce43d5b5709a09953789b426f0946c33", "message": "Revert \"Zwischenstand\"\n\nThis reverts commit 2f9a5273623f2cc9f54207ab23a630fd2cca56bf."}, {"url": "https://api.github.com/repos/google/openrtb/commits/748720c934a15e1e578a4a9b199c86482849d629", "message": "Zwischenstand"}, {"url": "https://api.github.com/repos/google/openrtb/commits/06ed7c158158477188cceb9a05512181f7085869", "message": "Merge branch 'master' of github.com:bundeskanzler4711/openrtb"}, {"url": "https://api.github.com/repos/google/openrtb/commits/64abcf52dd11f3cb342e756f2a9343936149fb23", "message": "Revert \"Zwischenstand\"\n\nThis reverts commit 2f9a5273623f2cc9f54207ab23a630fd2cca56bf."}, {"url": "https://api.github.com/repos/google/openrtb/commits/f90f3fa182d19023f180e82739dbb2c31bdf8d34", "message": "Zwischenstand"}, {"url": "https://api.github.com/repos/google/openrtb/commits/3b99243f7674e092a2ab07b889d884903ca57a04", "message": "Revert \"Zwischenstand\"\n\nThis reverts commit 2f9a5273623f2cc9f54207ab23a630fd2cca56bf."}, {"url": "https://api.github.com/repos/google/openrtb/commits/2f9a5273623f2cc9f54207ab23a630fd2cca56bf", "message": "Zwischenstand"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/220018889", "body": "I signed it!\n\ngooglebot notifications@github.com schrieb am Mi., 18. Mai 2016 um\n14:54 Uhr:\n\n> Thanks for your pull request. It looks like this may be your first\n> contribution to a Google open source project. Before we can look at your\n> pull request, you'll need to sign a Contributor License Agreement (CLA).\n> \n> [image: :memo:] _Please visit https://cla.developers.google.com/\n> https://cla.developers.google.com/ to sign._\n> \n> Once you've signed, please reply here (e.g. I signed it!) and we'll\n> \n> ## verify. Thanks.\n> - If you've already signed a CLA, it's possible we don't have your\n>   GitHub username or you're using a different email address. Check your\n>   existing CLA data https://cla.developers.google.com/clas and verify\n>   that your email is set on your git commits\n>   https://help.github.com/articles/setting-your-email-in-git/.\n> - If you signed the CLA as a corporation, please let us know the\n>   company's name.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/openrtb/pull/86#issuecomment-220016820\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/220018889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/220019600", "body": "Perhaps I can help make it happen a bit faster ;-)\nhttps://github.com/google/openrtb/pull/86\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/220019600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/220027255", "body": "It's a mistake, only @bschev and @bundeskanzler4711 contributed to this pull request\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/220027255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/220027939", "body": "confirm\n\ngooglebot notifications@github.com schrieb am Mi., 18. Mai 2016 um\n15:32 Uhr:\n\n> We found a Contributor License Agreement for you (the sender of this pull\n> request) and all commit authors, but as best as we can tell these commits\n> were authored by someone else. If that's the case, please add them to this\n> pull request and have them confirm that they're okay with these commits\n> being contributed to Google. If we're mistaken and you did author these\n> commits, just reply here to confirm.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/openrtb/pull/86#issuecomment-220026785\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/220027939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/220036649", "body": "conflict -> close.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/220036649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/220037705", "body": "Sorry, had a conflict in my first pull request. \nClosed the first one, opened a second one: https://github.com/google/openrtb/pull/87\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/220037705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/220052588", "body": "With pleasure!\nFeel free to contact me, if you have any questions.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/220052588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/221600920", "body": "Thank you very much for your review!\nI'll take a look on every point and fix it in the next few days. Afterwards I let you know when I am done and you can start with the re-review ;-)\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/221600920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/223229562", "body": "Hi @opinali,\nI am done with the fixes for your review. Hopefully I got all of your points.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/223229562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/223263511", "body": "Hi @elic9,\n\nIn OpenRTB Native 1.0 the imp.native field is included as a JSON-encoded string in the bid request.\nIt's the same for the native creative; it is returned as a JSON-encoded string in the adm field of the bid response.\nWhile Native 1.0 supported only an encoded string, the current draft for 1.1 adds support for a direct object and encourages adoption of that option to reduce confusion.\nPlease have a look at http://www.iab.com/wp-content/uploads/2016/01/OpenRTB-Native-Ads-Specification-Draft.pdf chapter 4.1 and 5 for more information.\n\nLike you I'm not really happy with it. Please have a look at my pull request https://github.com/google/openrtb/pull/87 in which I try to fix/improve the behavior and prepare OpenRTB Native 1.1 compatibility.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/223263511/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/223529157", "body": "Hi @opinali,\nI just added two more cross-check test cases `testRequestWithNativeCrossCheck` and `testResponseWithNativeCrossCheck` to be sure, that if you use two factories (1st one with `forceNativeAsObject` enabled, 2nd without and vice versa) the openrtb library handles this \"conversion\" correctly.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/223529157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/224347917", "body": "Hi @modqhx,\nif you are not yet familiar with Java, building a Java based SSP or DSP on your own will be a hard thing ;-)\nBut let me give you some hints.\n\nFirst of all, to build the openrtb project you need JDK 7, Maven 3.2 and Google Protocol Buffers 2.6.1. Having m2e installed is not enough: \n\n> On Eclipse, the latest m2e is recommended but it can't run the code generation step, so you need to run a \"mvn install\" from the command line after checkout or after any mvn clean.\n\nI don't know any tutorials or howtos there outside using this project. But only to be sure you got right what the openrtb project is about: it is only a library, that helps you implementing the OpenRTB Protocol using JSON (or protobuf) as exchange format. So some bidder implementations _uses_ this library (I'm not sure, if google's open bidder does, but I think so).\n\nIf you just want to try out OpenRTB, maybe this project is not a good starting point for you ;-)\nOtherwise, try [this article](https://github.com/google/openrtb/wiki)\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/224347917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/224404936", "body": "Having merged https://github.com/google/openrtb/pull/87 and https://github.com/google/openrtb/pull/90 this issue is resolved from my point of view.\nThank you very much @opinali for your precious reviews!\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/224404936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/224821163", "body": "Hi @modqhx,\n\nwe call it 'protocol' because the openrtb library is used to implement the (HTTP based) OpenRTB Protocol described in these two documents:\n- [OpenRTB Spec v2.3](http://www.iab.com/wp-content/uploads/2015/05/OpenRTB_API_Specification_Version_2_3_1.pdf)\n- [OpenRTB Dynamic Native Ads API\n  Specification Version 1](https://www.iab.com/wp-content/uploads/2015/06/OpenRTB-Native-Ads-Specification-1_0-Final.pdf)\n\nIf you are interested in full-size-examples, please have a look into the [`src/test/resources`](https://github.com/google/openrtb/tree/master/openrtb-core/src/test/resources) directory of this project. \n\nThese files were built using\n- [`OpenRtbJsonRequestHelper.java`](https://github.com/google/openrtb/blob/master/openrtb-core/src/test/java/com/google/openrtb/json/OpenRtbJsonRequestHelper.java)\n- [`OpenRtbJsonResponseHelper.java`](https://github.com/google/openrtb/blob/master/openrtb-core/src/test/java/com/google/openrtb/json/OpenRtbJsonResponseHelper.java)\n\nI hope this helps you understanding how this library works.\n\nBy the way, did you notice the draft for the upcoming [OpenRTB version 2.4](http://www.iab.com/wp-content/uploads/2016/01/OpenRTB-API-Specification-Version-2-4-DRAFT.pdf) with [Native 1.1](http://www.iab.com/wp-content/uploads/2016/01/OpenRTB-Native-Ads-Specification-Draft.pdf)?\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/224821163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64589573", "body": "If the JSON data should be pretty-written in resource files I think that we should use a pretty-print library for that, because in the test methods I am currently doing (non-pretty-printed) string comparison:\n\n``` java\n  static void testRequestWithNative(final String requestString, final boolean rootNative) throws IOException {\n    OpenRtbJsonFactory jsonFactory = newJsonFactory();\n    OpenRtb.BidRequest bidRequest = jsonFactory.newReader().readBidRequest(requestString);\n    String jsonRequNativeStr = jsonFactory.setRootNativeField(rootNative).newWriter().writeBidRequest(bidRequest);\n    assertThat(jsonRequNativeStr).isEqualTo(requestString);\n  }\n```\n\nWould [GSON](https://github.com/google/gson) be a good choice?\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64589573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/65509295", "body": "Hint: All golden data Json files under `test/resources` don't have a newline at end of file, so we don't have to do `trim()` while getting the file content for all test cases.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/65509295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "donbeave": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/openrtb/commits/908ddedfba23b455a971612affaf45be687fd0c0", "message": "Typo\n\nBLOCKED_PUBISHER -> BLOCKED_PUBLISHER"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sdorazio": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/openrtb/pulls/121", "title": "Adding support for enum extension values within range 500-999", "body": "This pull request adds support for exchange-specific enum values (typically 500+), which should address issue #120. The meaning of each of these values will be dependent on the exchange.", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/356950902", "body": "This seems like a larger problem than just the data asset types.\r\n\r\nOne possible solution is to add entries 500 to 999 in the protobuf enum values and mark them as exchange-specific. For example:\r\n\r\n```\r\nenum DataAssetType {\r\n  // Sponsored By message where response should contain the brand name\r\n  // of the sponsor.\r\n  // Format: Text; Max length: 25 or longer.\r\n  SPONSORED = 1;\r\n\r\n  // Descriptive text associated with the product or service being advertised.\r\n  // Format: Text; Max length: 140 or longer.\r\n  DESC = 2;\r\n\r\n  // Rating of the product being offered to the user.\r\n  // For example an app's rating in an app store from 0-5.\r\n  // Format: Number (1-5 digits) formatted as string.\r\n  RATING = 3;\r\n\r\n  // Number of social ratings or \"likes\" of product being offered to the user.\r\n  // Format: Number formatted as string.\r\n  LIKES = 4;\r\n\r\n  // Number downloads/installs of this product.\r\n  // Format: Number formatted as string.\r\n  DOWNLOADS = 5;\r\n\r\n  // Price for product / app / in-app purchase.\r\n  // Value should include currency symbol in localised format.\r\n  // Format: Number formatted as string.\r\n  PRICE = 6;\r\n\r\n  // Sale price that can be used together with price to indicate a discounted\r\n  // price compared to a regular price. Value should include currency symbol\r\n  // in localised format.\r\n  // Format: Number formatted as string.\r\n  SALEPRICE = 7;\r\n\r\n  // Phone number.\r\n  // Format: Formatted string.\r\n  PHONE = 8;\r\n\r\n  // Address.\r\n  // Format: Text.\r\n  ADDRESS = 9;\r\n\r\n  // Additional descriptive text associated with the product or service\r\n  // being advertised.\r\n  // Format: Text.\r\n  DESC2 = 10;\r\n\r\n  // Display URL for the text ad.\r\n  // Format: Text.\r\n  DISPLAYURL = 11;\r\n\r\n  // Text describing a 'call to action' button for the destination URL.\r\n  // Format: Text.\r\n  CTATEXT = 12;\r\n\r\n  // Exchange-specific values above 500.\r\n  EXCHANGE_SPECIFIC_DATA_ASSET_TYPE_500 = 500;\r\n  EXCHANGE_SPECIFIC_DATA_ASSET_TYPE_501 = 501;\r\n  EXCHANGE_SPECIFIC_DATA_ASSET_TYPE_502 = 502;\r\n  EXCHANGE_SPECIFIC_DATA_ASSET_TYPE_503 = 503;\r\n...\r\n```\r\n\r\nAnother option would be to add a configuration variable to ignore exchange-specific values & to drop the asset altogether. This does not seem like an optimal solution, but it may be acceptable for the majority of exchanges.", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/356950902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/356980507", "body": "In some cases, I do not believe option 2 is a possibility, as the enum value is required. I believe the best way to handle this is to add support for the exchange-specific enum values in the protobuf, and to put it on the users of the library to determine the meaning of the value based on the exchange/partnership. This gives everyone the flexibility to handle these values gracefully without the need to fork the library.", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/356980507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "matzi11a": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/66154161", "body": "that has resolved the issue. thanks :+1: \n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/66154161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/72093952", "body": "Much better thanks for the feedback\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/72093952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "metaquanta": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/71342829", "body": "My limited time investment was absolutely worth getting to read such a\nthorough justification for the existing implementation. Thanks a lot for\nthe response. I'm glad to see the degree to which you've considered the\nproblem.\n\nI am a user and we handle everything as micros. I find the necessary\nconversions objectionable and now you've convinced me it is only an\naesthetic objection.\n\nI share your concern regarding (de)serialization. However, in practice I\nfeel that's also unlikely to result in any real unwanted behavior outside\nof a human eavesdropper scratching their head.\n\nThanks a lot for the response!\nMatt\nOn Jan 24, 2015 6:06 PM, \"Osvaldo Pinali Doederlein\" <\nnotifications@github.com> wrote:\n\n> @metaquanta https://github.com/metaquanta thanks for the patch! I just\n> wish we had discussed this before writing the code. The problem is that\n> storing values as decimals is not really helpful unless values are\n> manipulated as decimals everywhere in the application that uses the\n> library; using decimals only for storage or in parse/format operations\n> makes no difference if apps still have to call getters/setters that only\n> use doubles. And of course we can't have a BigDecimal in the API because\n> protobuf doesn't support any type that maps to BigDecimal or equivalent\n> language-specific decimal types.\n> \n> I considered using a string field for these values, but that would result\n> in a really inconvenient API, forcing every get/set call to perform a\n> conversion. And this still wouldn't provide any advantage over doubles:\n> today you can just write code like BigDecimal bidfloor = new\n> BigDecimal(imp.getBidfloor). The double field is precise enough to\n> represent any price; it supports 15-17 significant decimal digits of\n> mantissa, and more critically, for any numbers up to 15 digits roundtrip\n> conversions between a string (or precise decimal type) and a double are\n> guaranteed to always be exact. This means double is perfectly safe for\n> storage and parsing/formatting of any normal value used in OpenRTB.\n> \n> The above is for background; now specifically on your patch: you're\n> changing the model's field types to int64 (= Java's long), and changing\n> their scale to micros (just like DoubleClick's native protocol). This is\n> another way to solve the problem, but then it forces apps to always\n> manipulate prices in micros instead of \"currency units\" (USD or whatever\n> used by the request). Unfortunately this is even more inconvenient for\n> users of the API; as an end-user myself, if I care about precise decimal\n> arithmetics I'd rather make some explicit double/BigDecimal conversions\n> than work with micros all the time.\n> \n> Technically, OpenRTB defines only a wire protocol and we have some\n> flexibility for API/language-binding design, see for example how this\n> library uses booleans instead of 0/1 integers for flags; or how I have\n> introduced an extended admNative field [native is still WIP]. But these\n> are changes that make the API significantly more type-safe and easy to use.\n> The admNative will also result in significant performance gain. Changing\n> the price to micros is a step backward in usability. (Also an important\n> breaking change, one I'd rather avoid at this time, this code already has\n> significant usage...) Even the potential advantage of precision is highly\n> questionable, because double is not only good enough for storage and\n> conversions, it's good enough even for arithmetics, since the values we\n> manipulate here leave lots of mantissa bits unused \u2013 you'd need a crapton\n> of error propagation before you get a significant error (I doubt any SSP or\n> other platform will consider digits below 1^-6). This is remarkably true\n> for monetary values, which are typically only manipulated by simple\n> operations like sums or multiplies, which have maximum precision (<= 1ulp)\n> in any language or platform; few if any people should calculate bid prices\n> with complex formulas full of transcendental operations that sometimes have\n> several bits of error in some \"hard\" value ranges. And if anyone is doing\n> that, they certainly can't use long: even BigDecimal would be a huge\n> ordeal because in most mainstream languages \u2013 anything other than\n> specialized stuff like Mathematica \u2013 the math libraries cannot perform any\n> decent math with decimal types; anything as sophisticated as a square root\n> forces you to step down to floating point anyway.\n> \n> Having said all that, my only concern with the current, simple usage of\n> double is in the serialization; for example it would be ugly (although\n> not a real problem) if the library emits JSON like price:\n> \"1.2000000000000000000003\" due to accumulation of errors in the last few\n> bits. Ideally, (1) the code for deserialization should ignore anything\n> after some specific limit like the sixth digit after the decimal point, (2)\n> the code for serialization should make sure to only emit digits up to the\n> same limit. I think Java's default behavior in double/String conversions\n> will take care of (2) but I'm not sure at which digit, and it won't take\n> care of (1) at all. We could use BigDecimal to solve these problems, but\n> I think just the DecimalFormat API should be good enough for that and way\n> more efficient.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/openrtb/pull/16#issuecomment-71342132.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/71342829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/71564438", "body": "I have not used the DoubleClick protocol, but it's probably somewhere in\nthe heritage of code I've worked on.\n\nOn Sun, Jan 25, 2015 at 10:04 AM, Osvaldo Pinali Doederlein <\nnotifications@github.com> wrote:\n\n> Thanks for the understanding! I'm closing the request then, but keeping\n> this in mind. Just curious if your current habit of using micros for\n> everything comes from working with the DoubleClick protocol?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/openrtb/pull/16#issuecomment-71376401.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/71564438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ceocoder": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/73562539", "body": "@opinali fixed. named the method `readStringOrArray`\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/73562539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/openrtb/pulls/comments/24350360", "body": "makes sense - I'll have update the PR later today.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/24350360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "samklr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/94586837", "body": "Yes after reverting to an old version,I figured that out indeed. I'll try with the master ... \nThanks.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/94586837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/96451520", "body": "Hi Osvaldo.\nI have been trying to use the code  on  master, since it's the only one with clear tests for handling protobuf extensions, but I can't seem to find the 0.8.1-SNAPSHOTS on maven central. Are they published somewhere?\nAlso it would be nice for further improvement,,if you could provide an example like in the Tests,based for example on your wiki, with the \"SpaceAds\" example. \n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/96451520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/96621475", "body": "Thanks Osvaldo.\nI'll do just that. I'll keep you updated.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/96621475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dhamilton-nanigans": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/102275507", "body": "Thanks for getting back to me, that's good to hear. I have one follow up question. I am working on using your library to support MoPub's OpenRTB protocol. Extending the protobuf objects and implementing JSON serializers for the extensions has been a pretty smooth process. However, MoPub defines a non-standard \"crtype\" field that is not in their bid response that is not mapped to the \"ext\" field. I am able to serialize and deserialize a bid response with this field without any failures (not sure if that's expected or not), however I can't find a way to register a JSON reader/writer to handle a field like this. Is there a way to do this?\n\nHere's a link to the MoPub spec for reference, note the \"crtype\" field highlighted in blue under section 3: https://dl.dropboxusercontent.com/u/10601557/RTB2.1spec.html\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/102275507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pawel-kowalski": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/104186574", "body": "Additionally I noticed when I registered at least one extension Reader (even dummy - that reads nothing) it avoided loop, however in this particular case it fails with exception:\n\n``` java\ncom.google.protobuf.UninitializedMessageException: Message missing required fields: id\n    at com.google.protobuf.AbstractMessage$Builder.newUninitializedMessageException(AbstractMessage.java:372)\n    at com.google.openrtb.OpenRtb$BidRequest$Builder.build(OpenRtb.java:50992)\n    at com.google.openrtb.json.OpenRtbJsonReader.readBidRequest(OpenRtbJsonReader.java:119)\n```\n\ndue to the last \"udi\" extensions which is nested and nothig after extension part is read by parser.\nIn case when there are only scalar extensions it works fine. Try with the same case mentioned previously but without \"udi\"\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/104186574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/104537453", "body": "Thanks for you quick replay , I have tested it and it is partially fixed. I mean there is no more infinite loop observed when there are unknown extensions, but there is still issue  with reading non-scalar extensions as last one. It causes end of  reading (before id is read and everything further) and again I got  \n\n``` java\ncom.google.protobuf.UninitializedMessageException: Message missing required fields: id\n    at com.google.protobuf.AbstractMessage$Builder.newUninitializedMessageException(AbstractMessage.java:372)\n    at com.google.openrtb.OpenRtb$BidRequest$Builder.build(OpenRtb.java:50992)\n    at com.google.openrtb.json.OpenRtbJsonReader.readBidRequest(OpenRtbJsonReader.java:119)\n```\n\nI observed this happens only if non-scalar is last one as in the example provided by me in first post - the \"udi\" one. If you shuffle order of extensions and \"udi\" is not last one it works fine \n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/104537453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/104673728", "body": "It works now  :) Thanks for quick fix!\n\nBTW Could you please  add *.proto files to jar file when releasing openrtb?  The reason is because  in order to generate extensions from my .proto files there is required to include openrtb*.proto files and also add dependency to openrtb. So this is not convenient and it may lead to incompatibility between generated extensions classes and openrtb classes if one forgot to synch them when updating openrtb in project.\nWhat I wanted to do to is to extract these *.proto from dependency jar before generating my and this way I would have compatibility between  extensions generated bindings and openrtb generated bindings classes guaranteed and all this stuff automated. \nOr maybe you can suggest something else?\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/104673728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/104695278", "body": "Yes, source-jar are OK as long as they are in maven repo.\nDownload-maven-plugin also would work if there would be easy to match url to dependency version declared in pom i.e. branch,tag .\nAnyway looking forward for next release :)\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/104695278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jihonrado": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/111138577", "body": "Hi @opinali,\n\nI have just tested the 0.8.5-SNAPSHOT version of doubleclick-openrtb and it is working as expected.\n\nThanks!!\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/111138577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bschev": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/114028723", "body": "I tested the new code, it works. \nThank you for the fast fix!\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/114028723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/220023159", "body": "I signed it!\n\n2016-05-18 15:02 GMT+02:00 googlebot notifications@github.com:\n\n> We found a Contributor License Agreement for you (the sender of this pull\n> request), but were unable to find agreements for the commit author(s). If\n> you authored these, maybe you used a different email address in the git\n> commits than was used to sign the CLA (login here\n> https://cla.developers.google.com/ to double check)? If these were\n> authored by someone else, then they will need to sign a CLA as well, and\n> confirm that they're okay with these being contributed to Google.\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/openrtb/pull/86#issuecomment-220018911\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/220023159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/220030683", "body": "I confirm that I authored some of the commits.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/220030683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64544366", "body": "This will not work, because `endObject(par)` negates the comparison. The following would be an option:\n\n```\nif (rootNativeField && !endObject(par)) {\n    par.nextToken();\n}\n```\n\nBut this is a bit confusing to read and it leads to a `par.nextToken()` call if the current token is null. I think this is not wanted.\nA new `OpenRtbJsonUtils` helper method would be an alternative, like :\n\n```\npublic static boolean isEndObject(JsonParser par) {   \n  return par.hasCurrentToken() && par.getCurrentToken() == JsonToken.END_OBJECT;\n}\n```\n\nThis could then be used in `readNativeRequest` and `readNativeResponse`, like:\n\n```\nif (rootNativeField && isEndObject(par)) {\n    par.nextToken();\n}\n```\n\nWhat do you think?\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64544366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "evgenyshulman": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/136971317", "body": "that's exactly what we needed =)\n\nthanks!\n\nOn Sun, Aug 30, 2015 at 5:25 PM, Osvaldo Pinali Doederlein <\nnotifications@github.com> wrote:\n\n> I didn't want to make this class public because it's something very out of\n> the scope of this library... but the real problem here was sloppy research,\n> it turns out this copy of an internal Guava utility was not necessary\n> because there's a public API there that does what we need! I just fixed\n> this with commit 5c82da9\n> https://github.com/google/openrtb/commit/5c82da9d40705281b8d4ebe112ad4c4ee20dc793;\n> you can use similar code in overrides.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/openrtb/pull/52#issuecomment-136148387.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/136971317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Spikhalskiy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/137986888", "body": "Hi,\n\n17 is just a value to localize error for you, that we have an error on values above maximum provided by specification. I have no need to handle this specific value. Rubicon used values above 10000 in attached example. Maybe it's an outdated sample.\n\nYour solution is absolutely fine with me if using values not from specification is prohibited be spec for this attribute. In that case - look at it issue as a report about NullPointer.\n\nOne general note - it would be great to have two options dealing with elements not from schema/specification - \"ignore\" and \"fail whole process with exception\".\n\nThank you,\nDmitry\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/137986888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/146573165", "body": "> an empty string is not a valida representation of any JSON object\n\nSure, that is why we definitely shouldn't return BidRequest with default content here\n\n> But it's nasty to make the reader methods @Nullable only for this special case.\n\nI'm not sure. Reader return \"nothing\" only if there is \"nothing\" in input and only in this case. So, this case is enough for Nullable from my perspective.\nI don't like \"defaultInstance\" solution, because it's\n1) looks like a hack and magic object\n2) \"{}\" is default object ideologically, so we need getEmptyInstance and it's definitely looks like a hack because empty object is null\n\nAccuracy to Nullable - this is why I suggest to make it as feature that user can enable. In default behavior we never return null and throw and exception (but maybe rework to throw some specific like EmptyInputException), but if user explicitly enable parsing empty input as null - we will return null.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/146573165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "thaDude": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/140096786", "body": "Thank you for the reply. Yeah, `ext.mergeFrom(readBid(par))` is probably what I was looking for. I am closing this issue.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/140096786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/141655058", "body": "Thank  you for looking into this. I'll test this in the context of the next OB release!\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/141655058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/142598612", "body": "Hi, just for completeness' sake - my original work-around did not have the intended effect. I just settled for something like this:\n\n```\npublic class EventExtensionReader extends OpenRtbJsonExtReader<Bid.Builder, Event.Builder> {\n\n    private String keyName;\n\n    public EventExtensionReader(GeneratedExtension<?, ?> key) {\n        super(key);\n        this.keyName = key.getDescriptor().getName();\n    }\n\n    @Override\n    protected void read(Bid.Builder msg, Event.Builder ext, JsonParser par) throws IOException {\n        String fieldName = getCurrentName(par);\n        if (keyName.equals(fieldName) == false) {\n            return;\n        }\n        Type type = Type.valueOf(getCurrentName(par).toUpperCase());\n        EventUtils.read(ext, type, par);\n    }\n\n}\n```\n\nThe only drawback of this solution is that it requires a different reader instance for each key type - click, impression in my case. The read method returns early if the field name does not match the key. I can live with that.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/142598612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bryanwagner": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/157509113", "body": "Ah, the fix you provided in 0.9.3 works perfectly enough for me!  Thank you!\n\nI had a transitive dependency that was blocking my attempt at using the latest build (our project is on Maven 2 still).  Knowing there was a fix in 0.9.3 helped me track it down, and 0.9.8 is working for me.  I agree; I think in practice codes like these are remnants of system built prior to the spec formalization and it's always been enough for us to discard them or refer people to the `ext` fields.  I agree that the strongly typed API in terms of enums is much more robust.  This library has been extremely valuable to us; thanks again.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/157509113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "morpheusTheCoder": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/187375813", "body": "Thanks a bunch opinali.\n\nBTW, currently we are using version 0.9.0 of the library.\nAnd we were not planning to move to latest version as it requires Java 8.\n\nOn which version would you plan to apply the patch?\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/187375813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/187508301", "body": "Thanks opinali.\n\nJust to get some idea, would you be comfortable providing a very rough timeframe on when can we expect this.\nSincerely appreciate your help.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/187508301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/195079990", "body": "Thanks opinali.\nI see that this issue fixed in the current branch. Please let me know if you can get around to backport it for pre-java8 branch.\nThanks a bunch in advance.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/195079990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/195522084", "body": "Thanks Opinali, appreciate your help.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/195522084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/206060836", "body": "Hi Opinali, just wanted to check on this. Have a great day.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/206060836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/239964359", "body": "Hi opinali,\n\nJust wanted to check if the fix for this eventually made it to the jdk-compatible branch.\nThanks a bunch, and appreciate your help.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/239964359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "googlebot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/220016820", "body": "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/220016820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/220018911", "body": "We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\n\n<!-- need_author_cla -->\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/220018911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/220026785", "body": "We found a Contributor License Agreement for you (the sender of this pull request) and all commit authors, but as best as we can tell these commits were authored by someone else.  If that's the case,  please add them to this pull request and have them confirm that they're okay with these commits being contributed to Google.  If we're mistaken and you did author these commits, just reply here to confirm.\n\n<!-- need_author_consent -->\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/220026785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/235138441", "body": "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/235138441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "elic9": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/221595061", "body": "Hi,\n\nI am facing the exact same problem, did you find any solution? I would appreciate your help.\n\nRegards.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/221595061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/221606740", "body": "Thanks, I will try it and will update, hopefully I will get it working.\n\nPlease approve if it is correct:\n1. In my source directory I create my own proto (e.g. Ext.proto) and I import openrtb.proto and I write:\n\n```\nextend BidRequest {\n    optional int32 bar = 110;\n}\n```\n1. How do I compile it, where will it find the reference to the actual place the JAR from open rtb resides? It is somewhere in the maven repositories. I am not sure how to point to the openrtb.proto in my import.\n\nThank you\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/221606740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/221825007", "body": "Thanks @opinali I managed following your assistance\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/221825007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/222618384", "body": "Hi @opinali,\n\nThank you for your answer. I would appreciate if you can explain me what means the following in the .proto:\n\n```\nmessage Native {\n      oneof request_oneof {\n        // Request payload complying with the Native Ad Specification.\n        // Exactly one of {request, request_native} should be used;\n        // this is the OpenRTB-compliant field for JSON serialization.\n        // [AdX: BidRequest.AdSlot.NativeAdTemplate]\n        string request = 1;\n\n        // Request payload complying with the Native Ad Specification.\n        // Exactly one of {request, request_native} should be used;\n        // this is an alternate field preferred for Protobuf serialization.\n        // [AdX: BidRequest.AdSlot.NativeAdTemplate]\n        NativeRequest request_native = 50;\n      }\n      ...\n}\n```\n\nDoesn't it mean that you can have either one of _request_ as a string, or _request_native_ as an object?\n\nThanks again.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/222618384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/223251583", "body": "Hi @opinali \n\nI followed your example and set the following\n\n`{\"id\":\"80ce30c53c16e6ede735f123ef6e32361bfc7b22\",\"at\":1,\"cur\":[\"USD\"],\"imp\":[{\"id\":\"1\",\"bidfloor\":0.03,\"native\":{\"request\":{\"ver\":\"1.0\"},\"ver\":\"1.0\",\"api\":[3],\"battr\":[13,14]}}],\"site\":{\"id\":\"102855\",\"cat\":[\"IAB3-1\"],\"domain\":\"www.foobar.com\",\"page\":\"http://www.foobar.com/1234.html\",\"publisher\":{\"id\":\"8953\",\"name\":\"foobar.com\",\"cat\":[\"IAB3-1\"],\"domain\":\"foobar.com\"}},\"device\":{\"ua\":\"Mozilla/5.0(Macintosh;IntelMacOSX10_6_8)AppleWebKit/537.13(KHTML,likeGecko)Version/5.1.7Safari/534.57.2\",\"ip\":\"123.145.167.10\"},\"user\":{\"id\":\"55816b39711f9b5acf3b90e313ed29e51665623f\"}}`\n\nBut the d-serialization fails with an exception:\n\n> com.fasterxml.jackson.core.JsonParseException: Unexpected end-of-input: expected close marker for OBJECT (from [Source: java.io.CharArrayReader@5d70dd3d; line: 1, column: 1])\n>  at [Source: java.io.CharArrayReader@5d70dd3d; line: 1, column: 3]\n>   at com.fasterxml.jackson.core.JsonParser._constructError(JsonParser.java:1586)\n>   at com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(ParserMinimalBase.java:521)\n>   at com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(ParserMinimalBase.java:458)\n>   at com.fasterxml.jackson.core.base.ParserBase._handleEOF(ParserBase.java:532)\n>   at com.fasterxml.jackson.core.base.ParserBase._eofAsNextChar(ParserBase.java:540)\n>   at com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipWSOrEnd(ReaderBasedJsonParser.java:2265)\n>   at com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextToken(ReaderBasedJsonParser.java:601)\n>   at com.google.openrtb.json.OpenRtbJsonUtils.startObject(OpenRtbJsonUtils.java:53)\n\nPlease help me to figure out why there is a problem with my JSON, I don't manage to find whether I can work with native.\n\nThank you.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/223251583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/223273348", "body": "Thank you @bundeskanzler4711\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/223273348/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/228598608", "body": "I found the problem, it was in my custom reader, I am closing this one.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/228598608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pratikkumar19": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/221679109", "body": "Thanks @opinali \n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/221679109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "modqhx": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/224741933", "body": "@bundeskanzler4711 Great thanks for replying. I understand. I've decided to create a very simple server which basically generates and broadcasts openrtb json of a user, let's say and send it over the network(http?)-- like a mock exchange.. I wanted to ask, what does a complete bid request look like(the json file I mean)..Does it look something like this: Then I can maybe process it with maybe spark/kafka etc..\n\n```\n{\n    \"id\" : \"32a69c6ba388f110487f9d1e63f77b22d86e916b\",\n    \"imp\": [\n        {\n        \"id\": \"1\",\n        \"banner\": {\n            \"h\": 250,\n            \"w\": 300,\n            \"battr\": [2,3],\n            \"btype\": [1,3]\n            }\n        }\n    ],\n    \"site\": {\n        \"id\": \"102855\",\n        \"name\": \"Example Site Name\",\n        \"domain\": \"http://www.example.com\",\n        \"cat\" : [ \"IAB15\", \"IAB15-10\" ],\n        \"page\": \"http://easy.example.com/easy?cu=13824;cre=mu;target=_blank\",\n        \"ref\" : \"http://refer+url\",\n        \"publisher\": {\n            \"id\": \"qqwer1234xgfd\",\n            \"name\": \"site_name\",\n            \"domain\": \"my.site.com\"\n        }\n    },\n    \"device\": {\n        \"ua\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/537.13  (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2\",\n        \"ip\": \"192.168.5.5\",\n        \"geo\": {\n            \"lat\": 37.789,\n            \"lon\": -122.394,\n            \"country\": \"USA\",\n            \"city\": \"San Francisco\",\n            \"region\": \"CA\",\n            \"zip\" : \"94105\",\n            \"type\": 2\n        }\n    },\n    \"user\": {\n        \"buyeruid\" : \"89776897686798fwe87rtryt8976fsd7869678\",\n        \"id\": \"55816b39711f9b5acf3b90e313ed29e51665623f\",\n        \"gender\": \"M\",\n        \"yob\": 1975,\n        \"customdata\": \"Data-asdfdwerewr\",\n        \"data\": [{\n            \"id\": \"pub-demographics\",\n            \"name\": \"data_name\",\n            \"segment\": [{\n                \"id\" : \"345qw245wfrtgwertrt56765wert\",\n                \"name\" : \"segment_name\",\n                \"value\": \"segment_value\"\n            }]\n        }]\n    }\n}\n\nThe following sample bid response for web-based display contains a single SeatBid object.\n\nExample 3. BidResponse\n\n{\n    \"id\": \"eb85349d-03c3-44f4-a77b-824f7221d116\",\n    \"seatbid\": [{\n        \"bid\": [{\n            \"id\": \"bid1\",\n            \"impid\": \"eb85349d-03c3-44f4-a77b-824f7221d116\",\n            \"price\": 0.1,\n            \"adm\": \"<div>Ad Creative</div>\",\n            \"adomain\": [\n                \"http://www.example.com/clickthrough\"\n            ],\n            \"crid\": \"crid_value\",\n            \"nurl\": \"http://example.com/winnotice?impid={AUCTION_IMP_ID}&auction=${AUCTION_ID}&price=${AUCTION_PRICE}&bidid=${AUCTON_BID_ID}\"&bidcur=${AUCTION_CURRENCY}\",\n            \"ext\": {\n                \"brand_id\": \"brand_val\",\n                \"buyer_id\": \"buyer_val\",\n            }\n        }]\n    }]\n}\n\n{\n    \"id\": \"eb85349d-03c3-44f4-a77b-824f7221d116\",\n    \"seatbid\": [{\n        \"bid\": [{\n            \"id\": \"32a69c6ba388f110487f9d1e63f77b22d86e916b\",\n            \"impid\": \"eb85349d-03c3-44f4-a77b-824f7221d116\",\n            \"price\": 0.60000,\n            \"adid\": \"529833ce55314b19e8796116\",\n            \"nurl\": \"http://example.com/win/529833ce55314b19e8796116?won=${AUCTION_PRICE}&impid={AUCTION_IMP_ID}&auction=${AUCTION_ID}&bidid=${AUCTON_BID_ID}\",\n            \"adm\": \"<iframe src=\\\"http://example.com/render/529833ce55314b19e8796116\\\" width=\\\"300\\\" height=\\\"250\\\" frameborder=\\\"0\\\" scrolling=\\\"no\\\" marginheight=\\\"0\\\" marginwidth=\\\"0\\\" topmargin=\\\"0\\\" leftmargin=\\\"0\\\"></iframe>\",\n            \"adomain\": [\n                \"openx.ads.com\"\n            ],\n            \"cid\": \"529833ce55314b19e8796116\",\n            \"crid\": \"529833ce55314b19e8796116_1385706446\"\n        }],\n        \"seat\": \"772\"\n    }],\n    \"cur\": \"USD\"\n}\n```\n\nP.s. why do we say openrtb 'protocol'? Isn't it just this json document simply being sent from one server to another over tcp? \n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/224741933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/225336184", "body": "@bundeskanzler4711 Thanks for sharing those links :) although I'm still a little fuzzy on the concept. I saw the requestHelper.java code. Eventually its still does come down to an ad exchange server sending, let's say json object to another server over port 80. Not sure why is it hard to simply parse that json on the receiver in real time/or so called 'protocol' and send a response. Another reason I feel its called _protocol_ because the 'keys' in json represent and mean something, and always remain the same when receiving the file. \nNo?- please correct me if I'm wrong. Learning a lot from you..\nThe reason I'm asking this, if I do create my 'mock exchange', like a single machine which basically sends a millions of these json objects(which are a user's ad impression) -- to -> my server listening on port 80, parses json/basic filtering(with apache storm/spark) and sends that json back to the server, within 100 ms. \np.s I also realized along with the bidrequest json object, there's also a cookie file being sent everytime, which needs to be sent back to the ad exchange everytime. Although I'm wondering after I win, I send another object, which would be an image over http, would definitely take more than 100 ms to send over \n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/225336184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "torbenbrodt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/242770379", "body": "Hey @opinali, I am happy for the fast response and I am looking forward to the updated .proto file. Thanks a lot.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/242770379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "philipphoffmann": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/245871443", "body": "Any plan on when this release is going to happen? Just asking, no pressure :)\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/245871443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/245929855", "body": "alright, thx @opinali :)\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/245929855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dhamilton": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/248642701", "body": "Awesome, thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/248642701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/248708988", "body": "I just pulled the release from Maven Central. Thanks for the quick turnaround!\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/248708988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "macchiatow": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/283364048", "body": "@opinali I wouldn't complain really if it was merely a noisy warning:\r\n\r\n[INFO] Google OpenRTB Libraries ........................... SUCCESS [  0.816 s]\r\n[INFO] Google OpenRTB Core ................................ FAILURE [  1.365 s]\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] BUILD FAILURE\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] Total time: 2.376 s\r\n[INFO] Finished at: 2017-03-01T17:01:46+02:00\r\n[INFO] Final Memory: 11M/155M\r\n[INFO] ------------------------------------------------------------------------\r\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-antrun-plugin:1.8:run (compile-protoc) on project openrtb-core: An Ant BuildException has occured: exec returned: 1\r\n[ERROR] around Ant part ...<exec failonerror=\"true\" executable=\"protoc\">... @ 11:48 in /Users/macchiatow/Development/openrtb/openrtb-core/target/antrun/build-main.xml", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/283364048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/283398156", "body": "@opinali oh I see. I believed protoc comes with mvn dependencies. Yes my local protoc was of version 3.1.0.... thanks!", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/283398156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "YoavNordmann": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/286091572", "body": "I was able to solve this as follows:\r\nin my new *.proto file I added the import as so: \r\n`import \"openrtb.proto\";`\r\n\r\nI then added the dependency as usual in maven.\r\n\r\nI used the `protobuf-maven-plugin` plugin which makes me put the .proto files in the \"src.main.proto\" directory, but the import works and code is being generated as reuested.", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/286091572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/286093018", "body": "I was able to solve this as follows:\r\nin my new *.proto file I added the import as so:\r\nimport \"openrtb.proto\";\r\n\r\nI then added the dependency as usual in maven.\r\n\r\nI used the protobuf-maven-plugin plugin which makes me put the .proto files in the \"src.main.proto\" directory, but the import works and code is being generated as reuested.", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/286093018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/286554932", "body": "Hi\r\nI just thought I would share how I succeeded.\r\nAs for issue #107 it is still unresolved.\r\n\r\nYoav", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/286554932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/286555674", "body": "Hi\r\nI see a lot of documentation on how to add an extension using the proto files and then adding and using that extension.\r\nI see no documentation which has an example including json serialization. \r\nIf you would help me I would be happy to write a blog explaining said example from beginning to end.\r\nYoav", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/286555674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}}}}