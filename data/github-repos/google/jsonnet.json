{"_default": {"1": {"sparkprime": {"issues": [{"url": "https://api.github.com/repos/google/jsonnet/issues/445", "title": "Canonicalize ||| line endings", "body": "Ensure unix2dos does not change output of Jsonnet execution.\r\n\r\nDiscussion was in #421", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/437", "title": "Keyword that returns most recently nested field.", "body": "edit: Completely rewrote the example as it was nonsense...\r\n\r\n```\r\nlocal Template(name) = { name: name };\r\n\r\n{\r\n  local outer = self,\r\n  path: [],\r\n  f: Template(here) {\r\n    local outer2 = self,\r\n    path: outer.path + [self.name],\r\n    g: Template(here) {\r\n      local outer3 = self,\r\n      path: outer2.path + [self.name],\r\n    },\r\n  },\r\n} \r\n```\r\n\r\nyields\r\n\r\n```\r\n{\r\n   \"f\": {\r\n      \"g\": {\r\n         \"name\": \"g\",\r\n         \"path\": [\r\n            \"f\",\r\n            \"g\"\r\n         ]\r\n      },\r\n      \"name\": \"f\",\r\n      \"path\": [\r\n         \"f\"\r\n      ]\r\n   },\r\n   \"path\": [ ]\r\n}\r\n```\r\n\r\n@andreabedini expressed interest in this feature", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/437/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/415", "title": "Consider try / catch functionality", "body": "Currently `error \"foo\"` is like throwing an exception, but there is no way to catch the exception.\r\n\r\nMotivations for \"catch\":\r\n1) Routines that loop over data and trigger errors for particular items don't have useful stack traces because the line of code in the stack trace doesn't tell you e.g. which array index caused the problem.  This is particularly important in custom manifestation functions where we typically iterate over the tree forcing fields.\r\n2) It is currently not possible to write test cases in Jsonnet that check that the correct error is raised.\r\n3) It is not possible to detect using reflection that a field requires overriding, because we typically represent that with `f: error \"Must overide f\"` see #414.\r\n\r\nCaveats:\r\n- Should it be possible to catch \"runtime errors\" like `1/0` or `[1,2,3][10]`?  If not, how do we distinguish?\r\n- Should it be possible to catch major errors like exceeding stack size?  If not, how do we distinguish?\r\n- It is clearly not possible to catch non-termination (halting problem).\r\n- Should error values be cached in thunks?\r\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/405", "title": "cpp stack traces are lagging behind go ones", "body": "See test cases:\r\n\r\ntest_cmd/ext3\r\ntest_cmd/max_stack1\r\ntest_cmd/max_stack2\r\ntest_cmd/max_trace1\r\ntest_cmd/max_trace2\r\ntest_cmd/max_trace3\r\ntest_cmd/max_trace4\r\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/390", "title": "Comprehension performance matches Go implementation", "body": "std.flatMap already exists, just need to desugar them to use it.  Go code serves as a guide.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/389", "title": "importstr should fail on bad UTF-8", "body": "The current behavior (transparently inserting unicode error chars) is not very helpful.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/378", "title": "Prevent changing meaning of std in desugared expressions", "body": "See https://github.com/google/go-jsonnet/issues/69", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/355", "title": "Add YAML gotchas to comparisons page", "body": "http://blog.teamlazerbeez.com/2009/04/15/yaml-gotchas/\r\nhttps://docs.saltstack.com/en/latest/topics/troubleshooting/yaml_idiosyncrasies.html\r\nhttps://www.elastic.co/guide/en/beats/filebeat/5.3/yaml-tips.html\r\nhttps://www.reddit.com/r/programming/comments/8cpe2/yaml_gotchas_we_learned_the_hard_way/\r\n\r\n@mbrukman ", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/347", "title": "external variables / top-level arguments not mentioned in the tutorial", "body": "", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/347/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/345", "title": "Desugaring of +: substitutes self/super too deeply", "body": "When implementing +:, the desugarer currently substitutes self and super out of deeply nested objects when it is not necessary.  See this thread and example:\r\n\r\nhttps://groups.google.com/forum/#!topic/jsonnet/IYrLl-6MpZY\r\n\r\n`{[{a: \"y\"}{b: super.a}.b]+: 1}`\r\n\r\n@guoshimin ", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/292", "title": "Support ruby / jq style array subtraction", "body": "Request from the Google group: https://groups.google.com/forum/#!topic/jsonnet/4u23V3alGMw", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/292/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/185", "title": "Object asserts not run by std.objectFieldsEx and std.objectHasEx", "body": "```\n$ jsonnet -e '{} == {assert false}'\ntrue\n```\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/153", "title": "Add an easier way to check function params", "body": "@huggsboson asked \"Any interest in static or dynamically checked type assertions on parameters?\"\n\nYou're the first to draw attention to this.\n\nWe decided pretty early on that dynamic typing would be most approachable.  It fits in better with the laziness and dynamic binding, and avoids all the syntactic overhead of type annotations.  There was a previous language that used type inference (HM system) but people found the unification errors hard to understand.  Adding some form of gradual typing into the language now would probably be a bit incongruous.  However some middle ground might be to have a dynamic checking framework, e.g. maybe something that looks like:\n\n```\nlocal f(x, y) = \n    assert std.check({x: x, y: y}, { ... some spec here ... });\n    ...\n```\n\nThis is just a library addition That would allow consistent and (relatively) concise checking of function preconditions for libraries.  It could also be conservatively interpreted by linting tools.  We could add more syntax sugar to make it even more concise:\n\n```\nlocal f(x, y) =\n    checkparams { ... some spec here ... };\n    ....\n```\n\nThe hardest problem here is defining what the spec should be -- how expressive is it, should it use some existing thing or subset of an existing thing (jsonschema is probably overkill).\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/124", "title": "Strengthen tutorial", "body": "No mention of asserts and a bunch of other new features.\n\nFeedback from box: should expand on the discussion of object orientation.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/123", "title": "No stacktrace during manifestation when error occurs at object level", "body": "```\n$ cat stacktrace_bug.jsonnet \n\nlocal A = {\n    f +: {},\n};\n\nA {\n}\n$ jsonnet stacktrace_bug.jsonnet \nRUNTIME ERROR: Attempt to use super when there is no super class.\n                object <anonymous>\n        During manifestation\n```\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/61", "title": "Warn if a variable is not used.", "body": "This is probably a small modification to the static checking code.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/61/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/44", "title": "Documentation: Compare to HOCON", "body": "HOCON is a configuration language that is part of the typesafehub config library https://github.com/typesafehub/config\n\nIt has some similarities with Jsonnet.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/44/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/33", "title": "Cmdline flag to check two jsonnet files manifest equivalently", "body": "Evaluate both files and check JSON output is the same.\n\nThis is useful when refactoring to know whether or not the changes were purely internal (good) or had some external effect (bad).\n\nE.g. if you're a vim user:\n\njsonnet --compare Foo.jsonnet Foo.jsonnet~\n\nCan output a diff of the two JSON strings.\n\nConflicts with --multi.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/33/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/31", "title": "Continue after syntax error, present more than one error at a time.", "body": "", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/31/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/30", "title": "Improve syntax error in case of { a: e <kwd> }", "body": "This can easily be done if you miss a }, but the error message currently complains about the lack of comma after the e.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/30/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/21", "title": "Add a date library", "body": "Code to convert to/from tuples like {year: x, month:x, ... seconds: x } into textual / other structured representations (seconds since epoch, etc).\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/21/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/google/jsonnet/commits/4f876247352505141d83e235f0b9dd3ce6acc75d", "message": "Improve error message for [1, 2, 3].map(...)"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/9297d93640d4534bb6cc22ae34c42cc50db371db", "message": "Formatter never emits code with \\r in it."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/6dbd30b5427c7b3718bdc6f6de0412849aacca22", "message": "Add std.isFoo for various types (#444)\n\n* Add std.isFoo for various types\r\nFix #393"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/94829caabe9356d09063a674d512ce26f9450be9", "message": "Chomp whitespace after |||, including \\r, fix #421"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/44dbc4342e41913e88ca3642ba69fe1d4c134194", "message": "Escape filename in import error, fix #372"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/6cb8d4d5e7a3accb116b0fcf79240137be420dd5", "message": "Add string replace function"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/ce82241452e5c496496086d38770eaa0fa9c8a57", "message": "Null field values now ignored in object comps, just like regular objects"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/d17db72a8222d26894f17ce650591d44e7bd8577", "message": "Script now refreshes all args"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/12db0bda9227c9cb5cd73b3cf57beeea2ecd446f", "message": "Fix use of e in abstract syntax"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/e5e7e8360269a2718a1e9ae09bbca71ae8b6a579", "message": "Fix operational semantics of object comprehension when field expression was stuck"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/30240d9658540c73b349dde23f482285c5b433fb", "message": "give full commandline in failing test"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/d9e9d920bdd31eb7ddd284212ef8fa0c8cc7a420", "message": "Ensure libjsonnet.js is always built before pushing website"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/8ad88ce929c6716e921e357a7f7ea2d2966d48b5", "message": "Don't waste as much stack space while parsing. (#431)\n\nRedesign parser to use less stack space"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/2d25d9e38db86e5f4b59fd231f80c3fb47336e0e", "message": "Add top level function test with no tla"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/8fe9bf5e05e1cedf27d187f8050313d6c96186ef", "message": "fix bazel"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/b11fc89c94492941ea8c908602f9885947dc18c7", "message": "Add server side recommendation"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/b8a626a7854af5a49d24f0174b537ae57e462739", "message": "Update to latest jekyll"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/e810b43ccee0e57423b3669ba393dda34e94cd36", "message": "Remove \"rvm get head\" workaround to see what happens"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/e78a7e5a05e8bcd7d952f210630dc1bdcb49ecdd", "message": "backwards incompatible: make std.join more strict about types"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/005d048507b8bbf74aaeea9bd8fe3c7687c9a7bb", "message": "attempt to work around broken travis"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/1ddf38e6f697d95c413c488a22fb0f63e1f50a83", "message": "fix escape codes in spec (#418)"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/d41445767f7528c9dd8096c158d366f05188cda3", "message": "Add JSONNET_PATH environment variable. (#417)\n\n* Add JSONNET_PATH environment variable."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/d8d3f88bb2a04665fec9c9ea30ffeb54a86d5826", "message": "Fix EOF token, parser tests (#413)"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/5c17788d4d692f0012592e9dd8e1914a0c2444fc", "message": "Fix format of object with empty field name '' (#412)"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/74eb5efa5e8838b72489f556f1c289696ea2e67c", "message": "Add some Jsonnet programs that take a while to execute. (#399)\n\n* Add some Jsonnet programs that take a while to execute."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/d5c3431f5cc9e6f86be821ea3a8c3181ceda2e1d", "message": "improve compatability of go stack traces"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/93055441975d874bf03e832f4ef8b71bc2eef882", "message": "Some UX improvements to commandline tool + cmdline tests"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/14805f679db844921c17ecd338c71f4f08749fed", "message": "Fix git diff not showing anything sometimes"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/c20caa0f627bfee1fc98f02b162e6656c1bc3343", "message": "Change column in error messages to be half-open [,) for consistency with other compilers"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/d4434c8df41c46d4ed11958677a655f0d1c52f87", "message": "Fix #386"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/af2afbd25262a92b4b1bac5ab9c1fb5ab4c7a4b6", "message": "Compensate for desugaring in max-stack size"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/79577a671a3e1f36d02952bb302897e759f3179f", "message": "Run reformatter"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/381d7ddded601b54333669003efffff8f3199367", "message": "-y and -m now respect -o"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/71bed72a16a8713d1f3f2b86b3d54ddff8f8947e", "message": "Thread commandline parameter through to format pass"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/a522815957893b375444196343498fc2829c9ceb", "message": "Spec now says std.makeArray(0, null) and std.filter(null, []) are errors."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/e68c0e4b22d22f39407c3f685a947325b29190fd", "message": "Fix #377 and also avoid integer overflow for huge indexes"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/b18966a5aa6cdf46067c53b6c97fabce67d4c0aa", "message": "Fix reformatter unparsing - $.f as -$.f"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/6b7f64c136156ca67371be6089d2b89d5f0dab9e", "message": "Bump version to v0.9.5"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/04cf4fd00fdd75a22af195439bbf9cd4e2318ec7", "message": "Bump version of rules_jsonnet.git to avoid depset warning"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/3210d6c0b2947596bcd955dbec247b466cdd5661", "message": "Fix clang range error in Python test"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/a422d1dae898f7c7d8d7c2f36134519ac962a2bd", "message": "Add some import error checking tests"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/b9de34579029b512be14abe01514c73041b9443e", "message": "Merge pull request #357 from sbarzowski/spelling\n\nUse a more common spelling: Pre-Procesor -> preprocessor"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/11cf9fa9f2fe8acbb14b096316006082564ca580", "message": "Merge pull request #344 from andreadps/feature/vs2017-support\n\nSupport Visual Studio 2017"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/b240be4c02eafeb068b07eb979d45f1777cbbd24", "message": "Merge pull request #346 from sparkprime/fix_default_lib_path\n\nFix default -J to use a jsonnet-prefixed path in usr and usr/local"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/d1228de0110a25c7ba443bbcc276804bcc2e63b8", "message": "Fix default -J to use a jsonnet-prefixed path in usr and usr/local"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/9265a9cdcc86007b069b86875114910908d120b6", "message": "Merge pull request #342 from sparkprime/fix_import_desugar\n\nFix #172"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/dc7798e661b82dc47aaf10325351784986a17a01", "message": "Test scripts output the names of the test suite with pass/fail status"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/c32e1bab867a15c83515474c16ea6001827c69c9", "message": "Merge pull request #339 from sbarzowski/master\n\nMake comment more accurate"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/294b8a37a95f932090401eb769887d8254de88dc", "message": "Fix #172 by desugaring Import filenames."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/96fe73f64ed57245ee8f8a3cc6eda1f235bf006c", "message": "Merge pull request #341 from sparkprime/fix_spec\n\nSpec no-longer allows { f() +: e }"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/1a5dcac3e4d4c71a4564762f2d58c92840733b91", "message": "Spec no-longer allows { f() +: e }"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/4a2a781395a51e42e28da6d351555b9b5aa3810d", "message": "Merge pull request #340 from sparkprime/fix_verbatim_strings\n\nFix handling of verbatim strings as object fields"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/411afd75a7a386a7621475a45ddfb44b95f6d49a", "message": "Fix handling of verbatim strings as object fields"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/51d657dd0aff4e90cb8a3fb8fa5c4fe12c89b1f2", "message": "Merge pull request #335 from benley/python-3\n\nPython 3 compatibility"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/8d59af3d12508b6e14cbce89e622b6536ec0b459", "message": "Merge pull request #338 from sbarzowski/specfix\n\nAdd missing argument to the slice spec"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/09f8edf0c7b63c6f729e27a42a6cd0f756ee94ce", "message": "Merge pull request #337 from sbarzowski/tests_external\n\nAn option to disable error tests"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/93476c27a03cac3841fafc597cf124cc55035079", "message": "Try to fix JS stack overflow by avoiding long functions"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/2ef4765c0bc84c14302a078acefaa033a776f024", "message": "Merge pull request #336 from sbarzowski/tests_external\n\nExternal testing support"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/03e0c922fd38b464c23043818ebb63b88522098b", "message": "Merge pull request #326 from sbarzowski/reformat\n\nReformat code (and add make target to do so)"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/7453280404a4bc0e81aad342255c732111afb626", "message": "Merge pull request #334 from sbarzowski/bracebug\n\nAdd simple newline insertion to formatter"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/78a7023f417a15ddd98bd44965bb446c19b9387e", "message": "Merge pull request #333 from benley/fix-bazel-python\n\nFix the bazel python build"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/2cfa8ea41a0495d4c795d2cef34b91458f894919", "message": "Merge pull request #332 from sbarzowski/fix-travis\n\nMake TravisCI fail when tests fail."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/35a993d163ee60ece25de40c7a8eeabc8a9c289b", "message": "Merge pull request #331 from sbarzowski/commentfix\n\nRegenerate golden output (comment change)."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/ef886a2da031c4ce89d26f3100a3416dfd05b40a", "message": "Merge pull request #329 from sbarzowski/idempotence-tests\n\nAdd idempotence tests"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/71f524197979f19c34897d57f85ceb6dfa369f8a", "message": "Merge pull request #327 from sparkprime/todos\n\nMove TODOs inside their branches"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/ee1b07c8be2221d2e01be83269a430c665b83909", "message": "Move TODOs inside their branches"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/c72b64155d428979ca687be4138bca79bf6640d3", "message": "Add comments giving more detail on fodder representation"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/316068be7fd2511d554686ae4994426d4471e44f", "message": "Merge pull request #324 from sbarzowski/multiple-files\n\nAllow reformatting of multiple files"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/0ee46bcdeac3cfda1a97095761acb84acd0ae567", "message": "Merge pull request #323 from sbarzowski/typos\n\nFix spelling"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/12d0d1f9ce8e609b85b51484d487cace6c5574a0", "message": "Fix typo in spec"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/d198cf81a5e910a82b0a1843cfd0c3dd648a904e", "message": "Bump version"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/7e3e9c7cbda8ca749f54428484c9ebb365d07421", "message": "Bump version to -pre"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/f3b1fa72e2407a42a8ede9c481cbe5353b9d6c6b", "message": "Disable python module in Bazel"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/05da44191206b0d943f41f870f7fee7c5e5a2cbc", "message": "Merge pull request #318 from sparkprime/permissive_extends\n\nPermissive extends"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/c84a64f39b4eaf0660e093c1b1f5bf4b9f00b447", "message": "Update tutorial"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/380b6e94cf059709a0e63b10a4406bca7d916e3a", "message": "Modify +: semantics"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/05b3fe691cd6b0ad0c6fbc024f3edd0a69497c41", "message": "add \"super in\" and \"e in e\""}, {"url": "https://api.github.com/repos/google/jsonnet/commits/0e2749d65e603a52b42cf9ad6fb406fa004301f0", "message": "Add `e in e` and `e in super`, desugar +: in a more permissive way"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/36001c09a3a06dae63a57eaf075a76abdc6dd13d", "message": "Merge pull request #320 from sparkprime/refactor\n\nRefactor"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/60af260dfa8db3a6f0304dddf6942a78cd879424", "message": "Refactor and improve existing spec"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/06c72c1a399eba631d420c885c9883d6af9f4c44", "message": "Rename to UString, UStringStream"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/7d565c690b50844d330774477021dde3754ab22c", "message": "Lines were too long"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/30b104586e84259eb7570b7f8af5eeee4c4cc2b1", "message": "Merge pull request #317 from sparkprime/gcc_depends\n\nReplace make depend with g++ -MM"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/7f6480f86e43492f14a50ebdc64d3978d56af412", "message": "Fix uninitialized value UB"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/3e84a6ced0064ce74403c30861ee0c1ec4966ca9", "message": "Replace make depend with g++ -MM"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/d71e3eca84069174ee12c7b636142b6438df8273", "message": "Merge pull request #315 from jbeda/fix-depend\n\nFix `make depend` to look at right paths"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/e88b9e3a4046be1d7312cef3fca09c35eaa0fa94", "message": "Merge pull request #314 from jbeda/prune\n\nAdd `prune` to stdlib"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/c99297cc84df6ace5bf14f94064c0f9ecca51524", "message": "Fix stale comments"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/1a2d481485f7a1535160d2052f240db2a5b69a8e", "message": "Merge pull request #309 from devth/master\n\nUse alpine based Docker image and set its entrypoint"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/942b12a82c2cc57d20391e02195e446d3ebecb06", "message": "Bump version to 0.9.3"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/6c746649c14cd19ad6b02f6fad4d3589fa4b61cc", "message": "Fix Python package"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/238a96a916e1a3d33cd17ec764119664008f4e5d", "message": "Bump version to v0.9.2"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/4e3a127b9c4accf9d22847e0fe0173404f6587f5", "message": "Merge pull request #296 from sparkprime/fix_buffer_overflow\n\nAvoid popping off the end of the token stream"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/3c08593f289b828357e6d8090d637b4fc6eb8282", "message": "Merge pull request #297 from sparkprime/always_cleanup_vm\n\nFix #295"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/801fd2597bbaaa3c0f0c8f8c9236eadb71424df9", "message": "Fix #295"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/456793b02c945b3fab3217df14634011f2dfe8f9", "message": "Avoid popping off the end of the token stream, fix parsing of [e::]"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/061374008db62ee019d85c6f2bb242e47a996df4", "message": "Merge pull request #294 from sparkprime/fix_formatter_named_arg_newline\n\nFix formatter behavior around + and ()"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/bf3e11a664e64030b5893ea37a925b8c81d95588", "message": "stdlib now passes fmt -n 4"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/a0f50f7c142958e55be76bcef29ac55b90ba0a0d", "message": "Improve reindenter handling of +"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/02c02258ffa258635d45ee504bdb00ff3a57ea34", "message": "Re-indentation inside paren is now aligned with ("}, {"url": "https://api.github.com/repos/google/jsonnet/commits/7dee7f8f34923a2f8ab9e041218bd42d7aad89ba", "message": "Merge pull request #293 from sparkprime/add_readme\n\nAdded build instructions to readme."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/9d7d8d94ed6f9d0e158a53ce894aa6940f5cf700", "message": "Add new Rust binding"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/d07ba4fd0e9672a8121a75c190aa2e8b862bf8af", "message": "Bump version fo v0.9.1"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/5f1ee36145a89f9c8cec0064264071cb50b3823f", "message": "soften some tabs"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/4af04b05003ea8c49611b53a78dcc10c215c17ff", "message": "Merge pull request #291 from huggsboson/master\n\nAdd stdlib md5 function"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/a26de96ff15cd9f44ea11ebeaf36339553b40235", "message": "Merge pull request #290 from sparkprime/fix_formatter_named_arg_newline\n\nFix function application named arg on new line"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/f2e721dbdfcb639c5eed424226675f84e8827200", "message": "Merge pull request #288 from brbbs/master\n\nAdd fmt test for toplevel binary expression"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/dd761662b4edb806a96b036a1e50fcd3705289ee", "message": "Fix function application named arg on new line"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/2ea5e41276823831ed96349c90d79da2672ed17b", "message": "Merge pull request #287 from sparkprime/test_reindenter\n\nRun fmt tests with -n 4"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/2580d7f5a37e76aacded7cc0d8a9662e63ceebe3", "message": "Run fmt tests with -n 4"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/83cd2d8a5da81819b33151f41b4b166b96b10ea4", "message": "Merge pull request #286 from sparkprime/fix_slice_formatter\n\nFix #280"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/ca00f930949ab05e0a40ca94948e35319e780d7b", "message": "Fix #280"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/068eaa8a33933e99683816a9b0bbcb8cef94640c", "message": "Merge pull request #285 from sparkprime/fix_assert_format\n\nFix #283"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/3b5f6fd9388e00f3c51c885a8017aa9f04881fc7", "message": "Fix #283"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/e525532406c68c8cee5018bb2b6f2fe5921a1d93", "message": "Merge pull request #284 from sparkprime/make_tests_pass_fmt\n\nMake tests pass fmt"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/14666dd22a0cee8d265227fabf0c7e361daf2cb0", "message": "Fix trivial indenting errors"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/da1720cc136ec6bf110c110b1efeeae4a557d3df", "message": "Merge pull request #282 from sparkprime/fix_reformatter_verbatim_strings\n\nFix #281"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/8c1ee409695c4e6f4248ecbb11004c1487b48f4f", "message": "Fix #281"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/7da23977398246874063fdffc3e9caf004d679b2", "message": "Merge pull request #277 from sparkprime/fix_infinite_loop\n\nFix #275"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/1f59c4766e4ad592f3948131677ff7c13dae04ec", "message": "Fix #275"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/516f68331fa5b5ea70a084daf153acb03ddbea33", "message": "Merge pull request #265 from benley/verbatim-strings\n\nImplement verbatim string literals"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/4b0e7957ddd490e46c16af84e046bfcebf6b4d5b", "message": "Merge pull request #273 from benley/bashisms\n\nUse /bin/bash shebang since these scripts require it"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/72e37f2bb9b37fb8daddd0b981bfdaed25fd6d5f", "message": "Merge pull request #272 from sparkprime/fix_minus_dollar\n\nFix #271"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/e923ab6a5423f386d243912b9f33eec664326d67", "message": "Fix #271"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/5e2bf0fbf4fe39da2fd46d0b7372d95512af0b39", "message": "Merge pull request #268 from sparkprime/fix_argparams\n\nFix #267 argparams"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/0dfd1053915db462ce84d8480adf20890222e0ae", "message": "Fix #267 argparams"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/8db69ed8648ff0b6b647785affe28e7f965d64bb", "message": "Merge pull request #264 from sparkprime/reflection_asserts\n\nClarify object asserts not checked during reflection operations"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/28e2739a3f02786bdc9436af3bdef00cea968cc9", "message": "Clarify object asserts not checked during reflection operations"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/83530f9e65bc5e360f6c59c0beb01ea86d9e40af", "message": "Merge pull request #263 from sparkprime/fix_super_self_bug\n\nFix #244 super/self in +: desugaring"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/114a3e7f20de57f11bfb334cc085e7b04bad1cc1", "message": "Fix #244 super/self in +: desugaring"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/c6d8d0ffb45ca71954bdca577c06c6620e761905", "message": "Merge pull request #262 from sparkprime/fix_obj_desugar\n\nUse outerself/outersuper only when inside an object"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/8f3453cc03cfb3118651e0eb96c36b0e4436a1ab", "message": "Use outerself/outersuper only when inside an object"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/8117945ca3845ebdb2091ea424955a4f3b153818", "message": "Merge pull request #259 from benley/fix-bazel-tests\n\nFix Bazel tests"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/2f60c48fa443a48eea4bf7cfacefa1e92e1976bb", "message": "Merge pull request #258 from benley/python-bazel\n\nBazel rules for the python module"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/f75d47410e36b14c3d8f5f995ac3d04a52285ace", "message": "Merge pull request #257 from sparkprime/docs_null_term\n\nFix #256"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/0971193fbb29c0d70c6c84d9e05e537ce7235a5d", "message": "Fix #256"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/de9b782e0fcf89a3b42e096557643c890db27132", "message": "Merge pull request #255 from sparkprime/desugar_comps\n\nAdd array/object comprehensions to spec"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/ebf243498336058245b68a06c44bfd91d77d9612", "message": "Add array/object comprehensions to spec"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/3362386192a3afc273d8147ca45db1d6e77a14c5", "message": "Merge pull request #254 from sparkprime/plus_colon_bug\n\nFix +: issue in spec"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/5aed59d0fcc0f13fefae7c2e5a3601047bf8e085", "message": "Fix +: issue in spec"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/080b83f2ab34dda6ef4b4d5549e53c608696cfe7", "message": "Merge pull request #253 from sparkprime/error_tostring\n\nError implicitly converts to string"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/f8a929b5ad6c776f50840de453d0052e3735204c", "message": "Error implicitly converts to string"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/638842d9a837fd119e149cd00c65b91c287473da", "message": "Merge pull request #252 from sparkprime/html_id\n\nadd ids to all HTML headers"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/450349c192b5027733fcb3cee43c86ef764f7490", "message": "Merge pull request #251 from sparkprime/std_hide\n\nEnsure all std functions are hidden."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/bf5536fb112ec2d9485b3f54fd7d42738f7c19db", "message": "add ids to all HTML headers"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/d8fcb46744a5d98724b5d935e895a171307f0723", "message": "Ensure all std functions are hidden."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/78da9cb6fd04a388b7d18054ab743f7e99deaff7", "message": "Merge pull request #250 from sparkprime/docs\n\nDocs"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/6d6a7b371d1f2fc62cf9bbd5d7fb5f4e29662fd2", "message": "Bring spec up-to-date with language additions"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/8f7d3b70084fd63fe532ef288a2653268a1f8d0d", "message": "Add lexing details to spec.  Fix #98"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/996797ed559f9020843d26b096d6076e3f02a874", "message": "Update keyword highlighting"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/d6a231d6fdf948c860a3b95b5ef9ad92ddfd4a08", "message": "Instruct jekyll to watch for changes in the unzipped files."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/41f9f80b243853147d6aa0ed1b9c65654af05900", "message": "Update links to libsonnet"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/c6db9f1167448a8a314a99331086a4fb05230344", "message": "Attempt to fix travis"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/f68ed0571026658c71d860a1e23d20da54a8e7a8", "message": "Bump version to v0.9.0"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/f3396a3ec649d9ec23f36cae1af079cd33242a9e", "message": "Merge pull request #241 from sparkprime/import_as_thunk\n\nCache import value via thunk"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/7faa1455f64665999936458f81bae8582846fe5c", "message": "Merge pull request #242 from sparkprime/formatter_warnings\n\nFix warnings in formatter.cpp on travis osx"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/9f94774e97965811d3e3b4dc4ceed7be0cc16a23", "message": "Fix warnings in formatter.cpp on travis osx"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/3bbc3033edfe3aec2a163bb1aaa48fdc750a77b6", "message": "Cache import value via thunk"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/7bce0f42847d3e921446267b7b7b8c225a7517f2", "message": "Merge pull request #240 from sparkprime/cache_imported_ast\n\nImprove performance of repeated same file import"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/e3f3e8a7a321e16594bd1cd7d5b0661c0f4f54c3", "message": "Improve performance of repeated same file import"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/4296ec522a704d1dfe5e3d04402853d8ed0b20b0", "message": "Merge pull request #237 from sparkprime/fix-quote-field\n\nFix #236"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/257c889ec674a0ca16cfd3ac1d96a8c650555c4e", "message": "Fix #236"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/227079272a19d03adf34332e2a0c11906e081894", "message": "Merge pull request #231 from sparkprime/fmt_closing_brace\n\nFmt closing brace"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/a9d1ad5b75336dce9c471c203ae0989c681bed3f", "message": "Fix fodder concatenation when moving comma"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/a3c95e38112937682f52ccd22ef54d7a8ff78f33", "message": "Add test"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/5f83c307132d3c25e19fd61b4a28977965668535", "message": "Merge pull request #229 from sparkprime/json_to_heap_segfault\n\nPostpone setting filled until content points to valid data."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/6ea31d59cc1c7c4fdc1ee3bcc3c0603b212c3955", "message": "Postpone setting filled until content points to valid data."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/7415b0bb8e7e54361bdff40d180edbed6808e76f", "message": "Merge pull request #224 from dastergon/fix_pagination\n\nFix pagination in the 3rd page of the case study"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/c820a6f563f0183a64113108ebaedcb357328fd8", "message": "Merge pull request #218 from Neeke/master\n\nFixed libjsonnet.h href in bindings.html"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/75049638d0d90a3fa20f4f166a428edf1f4c8bea", "message": "Merge pull request #215 from sparkprime/fix_native_bool\n\nFix #214 bool returned as number, add test"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/13fa61e5a1adc7df56fc9ac225dfd1627ec7829d", "message": "Fix #214 bool returned as number, add test"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/88ad9d30d87663bae01f829735a2e0b01437bd2f", "message": "Bump version to 0.8.9"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/0542d240b1f3eaf0da7ef68294555a7b146ea149", "message": "Merge pull request #213 from andrewmchen/parse-int\n\nadded parseInt to stdlib"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/66ade34c7fdff820b5e5eecc555ba54fa1eccc2c", "message": "Merge pull request #209 from sparkprime/fix_single_quote_fmt\n\nFix #197"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/bac3d43cece3a6207152bd86c217998d782f230c", "message": "Fix #197"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/a523d7ff7337c809585e959b6c5f4f6f3af0a25d", "message": "Merge pull request #208 from lamuguo/master\n\nFor easily using jsonnet in test."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/adf169b1e4a4ba170f58b47111ed88552fae42c8", "message": "Merge pull request #204 from sparkprime/extensions\n\nReturn arbitrary JSON from native extensions"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/4ef72cd8d1a34644180e0c226ce40f05eb6832a9", "message": "Fix build on Mac"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/a2a01f7d96d5e2a664b2bae904bd94f218dc79da", "message": "Native python extensions can return arbitrary JSON"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/e26f8ab4416f8cdf91171a6e9143785b78863ade", "message": "Return arbitrary json from native extensions"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/336111af500a3fdd87690609f1e4a89f6fe2c91c", "message": "Merge pull request #199 from sparkprime/extensions\n\nExtend native functions to all primitive types"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/c205b5d72ca9b2157ea34ffa599c0f389d5a8b0a", "message": "Extend native functions to all primitive types"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/fc4d786bece4e5bfbc4250543a774d11463ce6df", "message": "demodularize core/BUILD, add missing json.h file"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/49ea2f4df348a8bcc1c533d3d79454622c0af73f", "message": "Merge pull request #198 from sparkprime/extensions\n\nNative Extensions"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/bcbcdf1b68c795bea3acd04cdb31df2285009b0f", "message": "Add native extensions to Python wrapper"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/d5410c4ae42ec708d3651f6e45782e2d0a814071", "message": "Added native functions, fix #108"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/c292727b745751924b2829992644592354efa822", "message": "Merge pull request #194 from sparkprime/fix_format_percent\n\nFix format percent"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/eecd82e88000ca3c3924d35d954a4ffb30f19a3c", "message": "Fix tests (travis test script was broken)"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/0c234fe3b96d0d4a8566768843f663046414daaf", "message": "Merge pull request #193 from sparkprime/fix_travis\n\nStop masking failures from earlier tests"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/8f4b737aa63630cad9a191a2d9905a46a3a4fcc1", "message": "Stop masking failures from earlier tests"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/202aa40dcd2dbc60423eadad753e87c4be2bac1c", "message": "Add test for %%"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/f28c010202227e41e1d967f40818465feba3f02e", "message": "Merge pull request #192 from sparkprime/fix_format_percent\n\nFix #190"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/bd6ae83007972068e4231d22e8d6dbc7bf7aad44", "message": "Merge pull request #191 from guoshimin/manifestJson\n\navoid trailing spaces in manifestJsonEx output"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/45918f400a1a67a045d6d329685c93a45c3e76e4", "message": "Fix #190"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/b0e145f4f57be4641226fc177fb9657abb6a5a1d", "message": "Merge pull request #189 from guoshimin/fixbazel\n\nfix bazel build"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/cf3307e6863c026e9599ee7b67ccb0829688a083", "message": "Merge pull request #186 from sparkprime/fix_obj_asserts\n\nFix obj asserts"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/8a9a1753d7f64fa88e45f37b4d1ffd9a557e9449", "message": "Ensure all object asserts are executed, fix #181"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/670a4b83556b3c83f24137d0f6b7d346b88556f0", "message": "Merge pull request #184 from sparkprime/too_many_params_errors\n\nAdd tests"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/1ae338c6c0f2432dd55d515f9c437a34c7964840", "message": "Add tests"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/461233f4592ef6e8a511fca55e349abd232f6d6d", "message": "Make it easier to read desugared output"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/27311349d572a716b02924ff2c7702a1983006b1", "message": "Merge pull request #183 from sparkprime/fix_too_many_args_segfault\n\nCheck for too many positional params, fix #180"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/78f6eb06c77e19179bf5e6f4143bb4d2374dd63d", "message": "Merge pull request #182 from sparkprime/fix_tests\n\nUpdate test golden files"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/9856be55bf08ddb33d4eb037bb09f7e53b6f256d", "message": "Update test golden files"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/54e36bb494266904e61feb4e227a2a9b5cc03b18", "message": "Check for too many positional params, fix #180"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/62da175f7561a6bf0a826e9bf7a5a22738188c01", "message": "Merge pull request #179 from sparkprime/fix_micromanage\n\nUpdate for Terraform changes, fix logging package"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/82ac3778151c31b3924a0793d8560f3ae134276b", "message": "Update for Terraform changes, fix logging package"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/bb0e03263e25a81057beffaced2338d75472c291", "message": "Merge pull request #175 from sparkprime/zerostep\n\nError rather than infinite loop when slice step == 0"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/8d0017807392d61ea00a122ab8231aaafbd52a72", "message": "Merge pull request #173 from sparkprime/libsonnet\n\nProvide examples for new .libsonnet convention"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/ed91720d98803f4b120c689d2c03f49bd63b714d", "message": "Error rather than infinite loop when slice step == 0"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/b8b867e403944cb3103c2aa903c7eb9c12203105", "message": "Merge pull request #174 from sparkprime/dash\n\nA single - is no-longer treated as an invalid option"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/08f9af631927defb70c372e7aac821ff84772657", "message": "Provide examples for new .libsonnet convention"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/edc558c72542c5cb42f6e30cc629d70e9bd7bab9", "message": "A single - is no-longer treated as an invalid option"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/dc990ec9628b150f92a928f59562e2d70e705784", "message": "Merge pull request #171 from sparkprime/fix_keywords\n\nFix #170"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/a161de153f0024d4dd358bbdd713290a0ed94a50", "message": "Fix #170"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/96560a8b27af51e23d002f84bc08b205788b0a52", "message": "Merge pull request #169 from sparkprime/python\n\nPlumb tla (and ext code) into Python"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/938f9bcc5d9d6ab13e03d6c700a5476dfe14f3e5", "message": "Strip v from version"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/63ca6c683199d166d9ea62a337c415e6ee126a5a", "message": "Add Python testing to travis"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/7cc2135f4a70251330f45e065e14fe72f9edd611", "message": "Plumb tla (and ext code) into Python"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/57c26896e4873008967fff5afacdc57913998422", "message": "Merge pull request #168 from sparkprime/comma_fodder\n\nFix comma fodder attributed to wrong AST"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/d3744941333fbc9fadb89e2233980280f8881aec", "message": "Fix comma fodder attributed to wrong AST"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/82c55cb544f18b051810b6fa7174a314f1955aee", "message": "Merge pull request #167 from sparkprime/old_cli_args\n\nAdd back deprecated command-line args as aliases of new ones"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/b4c40b79603683e1f73450cdd742a9a42e7d6b86", "message": "Fix --help and tweak command-line flags"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/35389b06984f4b31f9773a8a0e4483cdf397d2f3", "message": "Add back deprecated command-line args as aliases of new ones"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/140d65fab8ccbeae34ff7da560a676ba07fe1cc5", "message": "Merge pull request #166 from sparkprime/func_tests\n\nMore tests for named params / default args"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/19730128f225734bd350006e1b3fc764120a6439", "message": "More tests for named params / default args"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/2c806e1bd3b502564899fe974d107bffc01fcb62", "message": "Merge pull request #164 from sparkprime/better_functions\n\nBetter functions"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/333a4ab1500edb7327cddb3e646d80210e2da3db", "message": "Add support for TLAs in jsonnet commandline tool"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/90aa20718304c3141bb0b8ddfb8b86e9c0ed54ba", "message": "Implement named params, default args, tlas"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/216a95b8f4e039d7ac8f47716b8ca28c0247e308", "message": "Merge pull request #165 from sparkprime/underflow\n\nFix another underflow in strip_ws"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/a513d6a405584a90233541279ed459e8bc4f4b80", "message": "Fix another underflow in strip_ws"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/ef3fef86820c0ffcb6ee3df93eb27ddb1ee36c1c", "message": "Merge pull request #162 from sparkprime/overloads\n\nEnable -Woverloaded-virtual and fix resulting warnings"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/a1bda24ea2a9d45d74fe3857d4c690894317bc87", "message": "Enable -Woverloaded-virtual and fix resulting warnings"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/8025a01c1be16ee27b29e1e7a48dbebf70db4d20", "message": "Update README.md"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/332c748f3565b6769a3d8e34c559f7067079117d", "message": "Update JsonnetValue.java\n\nRemove unnecessary comment."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/6c2663d7199d4657d603f28a814a07d23b0c3951", "message": "Merge pull request #161 from sparkprime/java_comparison\n\nJava comparison"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/1f61ac350dd8b221f1d73c2a3937740c907054f0", "message": "Java comparison"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/56a91d4182a812f4f64b8bf6c4d2ac96b6e819df", "message": "Merge pull request #160 from sparkprime/manifest_json\n\nAdd std.manifestJson manifestJsonEx and manifestYamlStream"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/9fc4c1983a33b7668941caaf104c88d6f00d1ae1", "message": "Add std.manifestJson manifestJsonEx and manifestYamlStream"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/e660c55b4a35a1ebd85370e0f162838a862e2465", "message": "Merge pull request #159 from sparkprime/text_block_escaping\n\nFix bug where escaping was still performed in text blocks"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/2bdad69fc3ff982c91eaedd18809a399c3f91c5b", "message": "Fix bug where escaping was still performed in text blocks"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/4871195883146b598afe4a1324be70810ccdb72e", "message": "Merge pull request #158 from igorpeshansky/fix-logging-agent-url\n\nUpdate to the latest logging install script URL."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/72c67a157e7a4e31d6247b09eaf211dfde96607e", "message": "Merge pull request #157 from sparkprime/cleanup_object_fields\n\nCleanup object fields"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/c4113fa6b475f9ca6a7266d87935453f28dcfee9", "message": "More cleanup of objectFields (stuff not needed since super restriction)"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/1b3571b60fa5dba9fc1053e869a786648ca8444c", "message": "Simplify objectFields code"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/16524a00d0574b3fed8711bba84b25c6bed7b2ce", "message": "Merge pull request #156 from sparkprime/cleanup_find_object\n\nCLEANUP: Remove unnecessary params from findObject"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/28e874e9226c40561ce42aa17a1a9ac849d12a96", "message": "CLEANUP: Remove unnecessary params from findObject"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/a62a717aba72381b06c45628a0b59c5b00b9f931", "message": "Merge pull request #155 from sparkprime/var_original\n\nRemove unused var.original field."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/53116438", "body": "Optimization is implicit for now.  We may revisit this later, e.g. define a tail keyword and put it on the end of a function call.  This could also implicitly force the arguments of the function, making code easier to write.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/53116438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/54084339", "body": "Closing as per conclusion of parallel discussion on google groups.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/54084339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/54087158", "body": "Sounds great!  Do post your findings on the Google group :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/54087158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/56136521", "body": "Ideally we would use libreadline, but would need an #ifdef for windows, and I'm not sure whether it'd work out-of-the-box on OSX.\n\nOn the plus side, this doesn't affect libjsonnet.so.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/56136521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/57722145", "body": "Thinking more about this, the only thing I know how to provide is the ability to execute complete programs on each line, i.e. the only benefit over using jsonnet -i 'foo' is avoiding typing jsonnet -i ''\n\nImperative languages like Scala have an easier time because they have this notion of intermediate state.\n\nAnd in contrast with Haskell, Jsonnet does not have the notion of top-level declarations, it is not possible to parse just \"local x = 4\";\n\nSo given all that, do you still think it's worth it?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/57722145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/62846691", "body": "It looks like this is still failing, on gcc because of parser.cpp:621:18: error: expected identifier before \u2018[\u2019 token\n\nand on clang because of \n\nparser.cpp:621:19: error: clang::fallthrough attribute is only allowed on empty\n      statements\n                [[clang::fallthrough]]\n                  ^\nparser.cpp:621:39: note: did you forget ';'?\n                [[clang::fallthrough]]\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/62846691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/64052921", "body": "Cool!  Did you change any of the code or is it just directory structure & build files?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/64052921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/67575024", "body": "This is all now in trunk.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/67575024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/73459943", "body": "Fixed by prior referenced commit\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/73459943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76598244", "body": "Those are doxygen constructs, although I've never actually run it through doxygen.  There are some more in state.h as well.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76598244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76598987", "body": "Oh, I almost forgot, can I ask you to retroactively sign either the individual or corporate (as appropriate) contributor license agreements http://google.github.io/jsonnet/doc/contributing.html\n\nthanks\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76598987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76600702", "body": "Perfect, thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76600702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76600913", "body": "So the current documented behavior is for this case is the filename defaults to stdin.  That may not be particularly useful but it is documented as doing that :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76600913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76603910", "body": "https://github.com/google/jsonnet/commit/41c11d09a7d7c7b4c07a144946ab3672494721dd\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76603910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76762232", "body": "It'd be interesting to see how much code coverage is obtained by running the test suite.  There are definitely some holes, especially with different ways of using the C/Python APIs.\n\nI think since the test suite is pretty fast, it is ok as long as there is good coverage.  However, there are probably some things that are hard to get good coverage for, and unit tests would be good for that.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76762232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/78360382", "body": "Being able to install Jsonnet's python bindings with just pip install jsonnet sounds awesome.\n\nCan we set it up so only stable releases get uploaded?  I'll cut a new one right now, it's been a while.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/78360382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/78706447", "body": "It worked for me, but I had to use --pre.  Presumably this is because I appended -beta to all the versions.  I did that because I misunderstood semantic versioning at the time :).  If I do a new release with just v0.8.1 do you think it would fix it?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/78706447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/88662133", "body": "I'd love that.  How hard is it?  Is it just a case of identifying some keywords and regular expressions?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/88662133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/95375247", "body": "This is probably not that hard to implement as a syntax sugar.  But the benefit of string interpolation is somewhat watered down by the existing support for Python string formatting:\n\n```\nlocal total = 37; \nThe total is %g (%02g with tax)\" % [total, total*1.05]\n```\n\nand the named version:\n\n```\nlocal o = {total: 37, withTax: 1.05*self.total};\n\"The total is %(total)g (%(withTax)02g with tax)\" % o\n```\n\nwhich both yield:\n\n\"The total is 37 (38.85 with tax)\"\n\nWith your proposal, you would also be able to do the somewhat similar-looking:\n\n```\nlocal total = 37;\n`The total is ${total} (${\"%02g\" % (total*1.05)} with tax)`\n```\n\nWhich would be desugared to\n\n```\nlocal total = 37;\n(\"The total is \" + total + \" (\" + \"%02g\" % (total*1.05) + \" with tax)\")\n```\n\nWith that in mind, how badly do you still want it? :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/95375247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/95381637", "body": "I think you need #2 to get the behavior you're looking for?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/95381637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/95416651", "body": "Ah yes, I had forgotten that JSON does not allow these values.  So the question is, should they generate errors whenever they appear as immediate values (fail fast) or should there only be an error if they reach manifestation time.  It seems to me that the latter behavior will be quite annoying.  The NaN / inf will propagate through values and it will be hard to know where it originally came from.  I can't think of any compelling use cases for allowing NaN and inf in a config language.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/95416651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/96479330", "body": "I just added a syntax file that works for atom.  I understand that is the first step on this process.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/96479330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/97540893", "body": "Thanks for the heads up.  Jsonnet differs in being a full programming language, and therefore has a lot more features beyond comments.  That is why it needs more code :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/97540893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/97557481", "body": "@loverszhaokai Hi, I've just remembered I need you to sign the contributor license agreement, either https://cla.developers.google.com/about/google-individual or https://cla.developers.google.com/about/google-corporate -- it's a legal requirement from Google (common for big companies working in the open source community).  I'll have to retract your changes if I cannot get your signature.  If you've already signed it, please let me know.  Sorry for the trouble!\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/97557481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/97557637", "body": "@PaulFurtado Sorry I forgot about this.  I'm going to merge, but first I need you to sign the contributor license agreement, either https://cla.developers.google.com/about/google-individual or https://cla.developers.google.com/about/google-corporate -- it's a legal requirement from Google (common for big companies working in the open source community).\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/97557637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/97558058", "body": "@dgarstang Thanks for the report -- I'll try this out on latest HEAD and see if any issue remains.  From a quick glance at the Makefile I can't see -std=c++0x being passed to $CC so I think it will work now.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/97558058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/97664888", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/97664888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/98377306", "body": "Good catch.  I'm adding explicit checks for importing the empty strings and directories.  But you can still import \".\" which I can't detect is a directory in standard C++.  So I'll just turn the IO error into a Jsonnet runtime error:\n\n$ jsonnet -e 'import \"\"'\nRUNTIME ERROR: Couldn't open import \"\": The empty string is not a valid filename\n        <cmdline>:1:1-9\n$ jsonnet -e 'import \".\"'\nRUNTIME ERROR: Couldn't open import \".\": basic_filebuf::underflow error reading the file\n        <cmdline>:1:1-10\n$ jsonnet -e 'import \"/\"'\nRUNTIME ERROR: Couldn't open import \"/\": Attempted to import a directory\n        <cmdline>:1:1-10\n\nHopefully that's good enough.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/98377306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/99905676", "body": "So those files are not part of the API -- the only thing you need to include is lbijsonnet.h which currently has no header guards on account of only containing declarations that can be re-declared without errors.  If I need to add header guards I'll use LIBJSONNET_H.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/99905676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/99908519", "body": "That sounds reasonable.  Given libjsonnet.so is a C wrapper around C++, it should also catch all the std exceptions and give a catchall exception handler for anything else that might happen.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/99908519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/99915072", "body": "I'll just add JSONNET_ to all the others though, it's not like it'll cost us anything.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/99915072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/99915159", "body": "Yes that's needed.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/99915159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/100045107", "body": "So I got my colleague to try make _jsonnet.so on his 10.9.5 mac and it worked OK.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/100045107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/107667469", "body": "Very cool.  I should maintain a list of these integrations on the website.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/107667469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/107667640", "body": "By the way if you call it JsonNet as opposed to Jsonnet, people will be more likely to confuse it with JSON.NET which is a different project.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/107667640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/107672722", "body": "How about Jsonnet-PHP :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/107672722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/108177072", "body": "Thanks.\n\nI have created a list of these 3rd party integrations here https://google.github.io/jsonnet/doc/bindings.html\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/108177072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/134655282", "body": "I thought about it.  The cost is that it is much harder to statically analyze the Jsonnet (e.g. to find out what Jsonnet files are affected by a given library refactoring, and running them to ensure they emit the same JSON).  I wasn't sure how valuable the ability to compute imports would be, so err'd on the side of caution.\n\nI'd like to know more about your use case so I can think about the tradeoff.\n\nPreviously, I have done things like:\n\n```\nlocal whatever = {\n    a: import \"whatever_a.jsonnet\",\n    b: import \"whatever_b.jsonnet\",\n    c: import \"whatever_c.jsonnet\",\n};\n```\n\nAnd then you can reference it dynamically just with whatever[my_var].  So at least the expansion is done in one place.  And of course generating such a thing in a separate file is very easy :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/134655282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/134831145", "body": "Can't you write your generated data to a json file with a static filename and then import that from script.jsonnet?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/134831145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/134836251", "body": "Brain dump of crazy ideas:\n\n1) import \"/dev/stdin\"\n\n2) add a feature\n\nlocal foo = importexec [\"echo\", \"{\\\"x\\\": 1}\"];\nfoo.x\n\nyielding 1, but this would only process JSON\n\n3) write a JSON parser in Jsonnet (yes, this is possible)\n\nlocal foo = std.parseJson(std.extVar(\"DATA\"));\n\nthen run jsonnet with -V DATA=\"$data\"  (or use an environment variable and -E)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/134836251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/135913271", "body": "What I can do is:\n\n1) add a -R name=value where value is arbitrary jsonnet code (like --arg in Nix)\n2) internally, std.extVar will behave the same if the var was defined with -V, otherwise if it was defined with -R it will actually execute the string in the current VM and return the value as a runtime object.\n\nIf you need to know the dependencies of the jsonnet execution, you need to add on any dependencies from code you pass in with -R to whatever the dependencies are in the actual jsonnet files, but this is natural and not hard.\n\nOn the other hand I could do a full std.eval function so you could just do std.eval(std.getenv()) and keep using -V.  But this would mean the code would be impossible to statically analyse for dependencies.  It would also mean the code in the file decides whether the variable contains code or string, instead of the user at the commandline.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/135913271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/136948991", "body": "Ok, implemented that: https://github.com/google/jsonnet/commit/0299d84a5aa4c35c346125fa6ac31a14d6a923ff\n\n@davidreuss you should be able to do something like this now:\n\ndata=$(...)\nexport data\njsonnet --code-env data script.jsonnet\n\nand then script.jsonnet can do std.extVar(\"data\") which will yield the json struct\n\nPlease let me know if that works out for you :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/136948991/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/138962585", "body": "Yes this should be pretty easy and Java is noticeably missing from the list of 3rd party language bindings.\n\nLong term it'd be great to rewrite the whole thing in haxe so we can get straightforward pure implementations in every language but that is probably at least 2 weeks of fulltime work and that kind of effort would probably be better spent elsewhere.  JNI bindings would be < 1 day as the C API is pretty straightforward.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/138962585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/139045045", "body": "Go for it :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/139045045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/139798470", "body": "Is it possible to re-use -o for this?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/139798470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/139798482", "body": "Actually I guess the list of files output should go to -o\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/139798482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/139899404", "body": "I am OK with changing -m\nOn Sep 12, 2015 1:16 PM, \"David Z. Chen\" notifications@github.com wrote:\n\n> I am not sure whether using -o for this is better. In general, using -o\n> when outputting a single file allows one to rename the output file to\n> something other than the default. However, for multiple file output, the\n> basenames of the files cannot be changed, and the only thing that can be\n> easily changed is which directory the files are written to. I know that\n> adding yet another flag is not ideal, but I think simply setting a\n> directory for multiple file output is easier to do than listing all the\n> output files on -o.\n> \n> Another option would be to have -m take the output directory an optional\n> argument. What do you think?\n> \n> By the way, I am not sure what is causing the CI failures. I am unable to\n> reproduce locally using make test.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/jsonnet/pull/68#issuecomment-139816207.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/139899404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/140876413", "body": "It says in there that it needs to be hundreds of repos, not hundreds of files.  I think we only have 10 repos or so so maybe we can't do this yet.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/140876413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/140940269", "body": "Ok in that case perhaps we should try.  It would definitely be useful.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/140940269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/140940866", "body": "Any idea how we would maintain the syntax highlighting after the fact?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/140940866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/140955635", "body": "Yeah if we pushed changes to that would it all just work, or would we have to open a ticket to get it brought in.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/140955635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/140979145", "body": "Not really.  Is there any kind of system you know of that other languages\nuse?\n\nOn Thu, Sep 17, 2015 at 1:56 AM, David Z. Chen notifications@github.com\nwrote:\n\n> By the way, do you have a preference for the color to use for Jsonnet in\n> GitHub repository language stats?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/jsonnet/issues/43#issuecomment-140976603.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/140979145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/141161172", "body": "The website is #402010 maybe we should use that.\n\nOn Thu, Sep 17, 2015 at 5:05 AM, David Z. Chen notifications@github.com\nwrote:\n\n> Not in particular. It's usually pretty arbitrary, though some languages\n> pick colors that match their logo color. Here's a sample of some of the\n> colors used by different languages: https://github.com/ozh/github-colors\n> \n> I'm currently using #00BCD4 (cyan) in my patch.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/jsonnet/issues/43#issuecomment-141017722.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/141161172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/141956136", "body": "Related to #45 \n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/141956136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/144505508", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/144505508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/144929506", "body": "My plan was to avoid having a dependency on ICU -- store everything\ninternally as wstring and assume that wchar is a unicode codepoint.  Then\nwe just need to tweak the lexer to parse utf8 in string literals and the\nstring output function to render it back as utf8.  It shouldn't be too hard\nas I left some placeholders and TODOs in there.  You're very welcome to\nhave a try at it.\n\nI suggest 1) modifying the internal string representation in state.h 2)\nmodifying the output code to encode utf8 and testing it with std.char(x)\nfor x > 127 and 3) modifying the lexer to parse utf8. It would be possible\nto run all tests and commit upstream at each intermediate point.\n\nThis would be great. How painful did this change look to be? I might be\nable to contribute if it's not huge.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/jsonnet/issues/1#issuecomment-144860394.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/144929506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/144937757", "body": "Thanks.  I'm in favor of this but I need to understand better what you've actually done here.  We should talk about it face to face next week.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/144937757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/145364892", "body": "Glad you like it!\n\nI did some reading and it seems wstring is not what we want because it has UTF16 behavior on windows.  So we probably need to do something like\n\n```\ntypedef std::basic_string<char32_t> JsonnetString;\n```\n\nwith functions to convert from UTF8-encoded std::string to that and back.\n\nThere are a bunch of places where the HeapString internal representation leaks out into other places as well, e.g. field names, std.extVar() keys, filenames (from std.thisFile) etc.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/145364892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/146068540", "body": "@hotdog929 you may be interested\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/146068540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/147222891", "body": "I'm going to have a go at this because I think it's probably harder / more work than I originally thought.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/147222891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/147246517", "body": "That was a productive 4 hours ;)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/147246517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/149396820", "body": "Thanks\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/149396820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/149682231", "body": "I changed the repo under your feet but I added your change in ad3c6cfe2cebb9d87406325f26b5594a1455c982\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/149682231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/149683371", "body": "Thanks for tracking this down!\n\nI suppose you can do things like \"\ud83d\ude80\ud83d\ude80\ud83d\ude80\"[1] which should == \"\ud83d\ude80\".\n\n\\u{XXX} should be a no-brainer though, it could be added in the lexer quite easily.\n\nI have been worried for a long time about the limitation of \\u and whether it's necessary to support e.g. things like this as well https://bugs.launchpad.net/zorba/+bug/1024448\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/149683371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/151594613", "body": "Missed a file in the setup.py, should be fixed now\n\nsudo pip install jsonnet --upgrade\n\nOn Tue, Oct 27, 2015 at 2:02 PM dgarstang notifications@github.com wrote:\n\n> Currently getting this:\n> \n> (venv)root@default-vagrant:~# python\n> Python 2.7.6 (default, Jun 22 2015, 17:58:13)\n> [GCC 4.8.2] on linux2\n> Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n> \n> > > > import _jsonnet\n> > > > Traceback (most recent call last):\n> > > >   File \"<stdin>\", line 1, in <module>\n> > > > ImportError: /root/venv/local/lib/python2.7/site-packages/_jsonnet.so: undefined symbol: _Z15jsonnet_desugarP9AllocatorRP3AST\n> \n> Latest refresh of Ubuntu 14.04.\n> \n> Doug\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/jsonnet/issues/81.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/151594613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/151603940", "body": "In fact the release was broken but I just pushed a new one to pip to fix\nit.  Since it seems you prefer to build from setup.py, I'll create a new\ntag on github with this fix.\n\nOn Tue, Oct 27, 2015 at 2:35 PM dgarstang notifications@github.com wrote:\n\n> Thanks David. I probably shouldn't have been building from the master\n> branch anyway. I just tried v0.8.4 and seem to have the same issue. I\n> guess, even though you've fixed it in the master branch, I'd prefer to pull\n> from a specific release to not have this happen again. Any ideas?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/jsonnet/issues/81#issuecomment-151603450.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/151603940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/151607021", "body": "Fixed in 0a15204876feec2f810a281e24cc346848984bfe\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/151607021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/152266438", "body": "Vague plan for this:\n\n1) Move all syntax desugaring out of the parser into a separate class.  That allows more-or-less pretty printing the original AST (although without comments / original whitespace).\n\n2) Adjust lexer to preserve comments and whitespace.  This allows pretty printing exactly in the original form.  There may be some shortcuts here, if we don't mind dropping comments in various places in the source code.\n\n3) This is where is gets vague: My thinking is we can discard / overwrite almost all whitespace, but we must keep all comments (although we may reformat the content of the comment).  Comments also should stay on the end of a line if that's where they were put.  Double and single empty lines should be preserved, but any more than that can be squashed.  Line breaking is quite a challenge.  We should change the code to take advantage of the syntax sugars where possible.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/152266438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/152267211", "body": "Before starting on 3 I really need to take some time to examine go fmt, pyformat and other popular things of this kind.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/152267211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/158678202", "body": "Good point, and probably a one-line fix :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/158678202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/161172382", "body": "Thanks for the fix\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/161172382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/163096279", "body": "I've studiously avoided autotools for 2 decades but I suppose I won't get away with it anymore ;)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/163096279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/163462037", "body": "Does the autoconf stuff you're working on need this or replace this?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/163462037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/163479440", "body": "cmake does build visual studio files which might be useful.  However last time I tried to build Jsonnet on msvc, it crashed the compiler...  So probably best for people to use g++ on windows for now.\n\nDitto on bazel -- it's nice but I think we'll need the fallback and then we'll have to maintain both and that would be a pain.\n\nI have fixed the integration tests btw, merge master to get that.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/163479440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/163713849", "body": "I verified, will do a new release to fix this.\n\nOn Thu, Dec 10, 2015 at 10:51 AM Cristi Cobzarenco notifications@github.com\nwrote:\n\n> @sparkprime https://github.com/sparkprime This doesn't seem to be fixed\n> in pip. Doing pip install jsonnet installs 0.8.4, which breaks in the way\n> described in the original issue.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/jsonnet/issues/81#issuecomment-163666822.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/163713849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/164112156", "body": "Just remembered that we do actually have a bazel BUILD file now... :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/164112156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/164194881", "body": "The irony is Jsonnet is a great tool for describing builds :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/164194881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/164947845", "body": "This is all good, you should merge it when you're comfortable doing so\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/164947845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/167317250", "body": "I think it should be b = (o(f) = (\\false, _))\n\nWe also need to add rules for the versions of the reflection calls that ignore the hidden status at some point.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/167317250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/167964178", "body": "You're right, it should be o(f) = (h, _) where h != ::\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/167964178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/169974826", "body": "Thanks.  It'd be good to have a regression test for building with bazel.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/169974826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/169982119", "body": "And setup.py for that matter...\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/169982119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/169994152", "body": "Yeah this seems like a good idea.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/169994152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/170118539", "body": "Since this is a lazy language, the second a in \n\nlocal a = a && true;\n\nis actually referring recursively to the a that is being defined on the same line, so the infinite loop is expected behavior.\n\nYou can of course write one that terminates:\n\nlocal x = false && x\n\nIn this case the shortcut semantics for && prevents the x from being recursively evaluated.\n\nThis is the same as e.g. Haskell.  In fact I think even in C you can do int x = x + 1 although it's undefined behavior because rather than being a recursive definition, you're reading x before it's been initialized.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/170118539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/170119772", "body": "Try this on for size:\n\n```\n    merge(target, patch)::\n        if std.type(patch) == \"object\" then \n\n            local target_fields =\n                if std.type(target) == \"object\" then std.objectFields(target) else [];\n\n            local null_fields = [k for k in std.objectFields(patch) if patch[k] == null];\n            local both_fields = std.setUnion(target_fields, std.objectFields(patch));\n            {\n                [k]:\n                    if !std.objectHas(patch, k) then\n                        target[k]\n                    else if !std.objectHas(target, k) then\n                        patch[k]\n                    else\n                        util.merge(target[k], patch[k])\n                for k in std.setDiff(both_fields, null_fields)\n            }\n        else\n            patch\n```\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/170119772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/170120364", "body": "Also, the reason you have some failing test cases is because you've changed std.jsonnet and the line numbers in the \"golden\" stacktraces for unrelated tests no-longer align.  To fix that, use refresh_golden.sh to rewrite the \"golden\" files with the new content (and sanity check with git diff).\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/170120364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/170120780", "body": "Maybe this should be called mergePatch, and it really calls out for the diff equivalent as well, although not necessarily in this PR.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/170120780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/170124302", "body": "It looks like 7396 is the better RFC as it obsoletes 7386\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/170124302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/170150154", "body": "I think it will work with this as the inner block:\n\n```\n                    if !std.objectHas(patch, k) then\n                        target[k]\n                    else if !std.objectHas(target, k) then\n                        std.merge(null, patch[k])\n                    else\n                        std.merge(target[k], patch[k])\n```\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/170150154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/170211500", "body": "Nah std.merge(null, patch[k]) is recursive into patch[k]\n\nstd.merge(x, null) evaluates to null though\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/170211500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/171119683", "body": "Looks like error.equality_function.jsonnet.golden needs updating\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/171119683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/171466401", "body": "@oconnorr \n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/171466401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/173029285", "body": "I can't remember who initially suggested this or what they wanted it for.  But, yes I think it would have to be UTC and static offsets only, otherwise it would no-longer be hermetic.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/173029285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/173774725", "body": "Hmm yes it looks like I got partially through implementing it and then forgot about it.  I'll finish off the implementation, close this, and then work on the docs.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/173774725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/180077782", "body": "Why\n\n```\n    identity(obj)::\n        function(obj) obj,\n```\n\nand not\n\n```\n    identity(obj):: obj\n```\n\nor\n\n```\n    identity::\n        function(obj) obj,\n```\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/180077782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/180083464", "body": "You only have one colon on addOne, but in this case the stacktrace is bad as it did not point you at addOne.  I'll look into that quickly...\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/180083464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/180097054", "body": "s/private/hidden :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/180097054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/180097747", "body": "I just committed a fix for the stacktrace, it now refers to the line containing the obj + 1 which is not exactly perfect, but other than pointing to the (obj) tokens at which I don't currently record location information, it's the best I can do.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/180097747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/183702601", "body": "Calling in @oconnorr for Nix fact checking purposes :)\n\nFirstly I hesitate to add anything more to that page that isn't 1) completely objective 2) absolutely verifiably true.  Most comparison of programming languages tends towards rationalizations of deep-seated ideologies and is not usually very productive.  And of course the aim is not to bash Nix but to draw attention to the differences in a balanced way.  But that said, maybe we could add more discussion on the page.\n\nThe languages are similar in that they're elegant, small, powerful, lazy, and have referential transparency.  However the OOP semantics in Jsonnet completely changes the way programs are typically written.  The laziness in Jsonnet is actually under-emphasized whereas in Nix it is essential for getting things done.\n\nYou're right you can build OOP on top of Nix as a library, and we even did that in the early days of Jsonnet as we were considering compiling Jsonnet to Nix.  @oconnorr packaged that up and released it somewhere.  But that's not a perfect user experience and is more interesting as an exercise than a soild foundation.  Also, Jsonnet supports mixins and we never built that on Nix.  I'm not certain it's feasible although I would not be surprised if it was.  I've had a lot of experience with OOP frameworks on top of other languages (C, Lua, Javascript) but they never feel natural, they have a tendency to be very complex (in a manner that is not hidden when debugging / looking at stack traces, and you have to be disciplined to use them.\n\nThe other thing is being JSON-based.  It's not just the syntax, there are big design compromises in Jsonnet in order to be an extension of JSON, e.g. supporting only doubles and not distinguishing between maps and objects.  Another design goal was to be familiar to Javascript and Python programmers.  We only deviated from this if we had a good reason.  Nix has a functional \"look and feel\" and will appeal to functional programmers far more than Python programmers.  On the other hand if you squint a bit, Jsonnet doesn't look so different from Python code (although obviously the semantics are very different).  No matter how much you squint, Nix does not look like Python.\n\nThe heritage of Jsonnet goes back a long time within Google and unfortunately there is not a lot of public information I can share with you. You might be interested in http://alexandria.tue.nl/extra1/afstversl/wsk-i/bokharouss2008.pdf but I would not call that an authoritative document.  OOP is an attractive paradigm for config because of the tendency to derive configs for different environments, locations, or purposes from \"master\" templates with the ability to override arbitrary details.  And hermiticity is required for repeatability, which when combined with all the structured data manipulation going on, leads one towards a functional language that also has OOP as a core component.  Nix is clearly underpinned by similar philosophies but the evolution is separate and the end result is quite different.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/183702601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/184024420", "body": "No it never got past the stage of assessing feasibility.  In fact the main thing that killed it was lack of floating point, which wouldn't really work with JSON.  The OO library is out there somewhere, @roconnor can tell you where :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/184024420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/185804837", "body": "Hard in Jsonnet, easy as a builtin, but the trick is to make sure every language that someone might want to implement Jsonnet in (and therefore have to provide an implementation for each of the builtins) has a native regular expression library with exactly the same regex syntax and semantics.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/185804837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/185890945", "body": "Does it support unicode typically?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/185890945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/185891677", "body": "That's very specific to the implementation language (C++).\n\nBut we could do is something like\nstd.builtin(\"foo\")\nand require the application code linking the jsonnet library to provide callbacks (just like we already allow import callbacks for doing I/O).\n\nThere is already an AST node for builtins, but it is only introduced during desugaring, it is not part of the actual syntax of the language.  We could make it part of the actual syntax and allow adding more builtins as well.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/185891677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/186659837", "body": "Good work!  Sorry it took me a few days to get around to reviewing it.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/186659837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/187956147", "body": "ugh, need a better way of doing this\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/187956147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/189560660", "body": "Heh, looks like I accidentally fixed this in my reformatter branch.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/189560660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/189562964", "body": "Yeah there's code to reset it in the branch here \nhttps://github.com/google/jsonnet/blob/fmt/core/parser.cpp#L582\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/189562964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/190367968", "body": "This is definitely interesting.  In the case of the arith_bools it has more than tripled in size.  Ideally there would have been a reduction in size.  For the sake of argument, maybe it could look like this:\n\n```\n{\n    \"Test !\": unit.SimpleInputOutput {\n        cases: [\n            self.Case(!false, true),\n            self.Case(!true, false),\n            ...\n        ]\n    }\n}\n```\n\nI also think we should try to use this framework for something more \"real\".  How about your Kubernetes stuff?  If not, there is a whole bunch of abstract templates in micromanage we can use.\n\nI think there's a big win for unit testing library abstractions (whether mixins or functions) that check that they can be instantiated into either something specific, or at least into something that has a set of expected properties.  It would help document their interfaces as well as allowing refactoring with confidence.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/190367968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/191537642", "body": "@davidzchen The use case is basically Kubernetes.  But the YAML stream format is a standard.\n\n@mikedanese Good point, this could at least be implemented in the desugarer and by enabling -S with -y.\n\nWhat you're calling a finalizer is exactly what I've been calling manifestation though I think.  It's a final step that converts a value to a string.  OK the semantics actually says convert a Jsonnet value to a JSON value by forcing thunks, bindings objects, and stripping hidden fields.  But It could just as easily say \"call the std.manifestJson function and get a string\".\n\nSo should we be able to specify a jsonnet file on the commandline and that would define the manifestation function?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/191537642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/191538465", "body": "```\njsonnet --manifest=std.manifestJson -e \"{}\"  # Also the default.\n{}\n```\n\n```\n$ jsonnet --manifest=3 -e \"{}\"\n3\n```\n\n```\n$ jsonnet --manifest=std.manifestYamlStream -e '[{}, {}]'\n---\n{}\n---\n{}\n...\n```\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/191538465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/191541826", "body": "So you desugar jsonnet --manifest=M -e E to M(E)\nThis is an error if it doesn't return a string and the string is not escaped in any way.\n\nThe old -S behavior is now --manifest=function(x)x\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/191541826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/192562197", "body": "So you're not really asking to omit the function keyword, right?  You're asking for a way to write the following in half as much space:\n\n```\nlocal func(T)\n    local a = T.a, b = T.b, c = T.c;\n    a + b + c;\nfunc({ a: 1, b: 2, c: 3 })\n```\n\nOne thing I've realized recently is that people want to use functions a lot more than expected.  And in the design they are pretty rudimentary (compared to other languages), with not much sugar to encourage conciseness.\n\nI did for a while flirt with the idea of allowing func{ a: 1, b: 2, c: 3 } as in Lua.  But in Jsonnet that makes it quite hard to see whether func is indeed a func or in fact an object being extended.  So I think the parens have to stay.\n\nOne option is to add something like Python named variables and kwargs\n\n```\nlocal func(a, b, c)\n    a + b + c;\nfunc(a=1, b=2, c=3)\n```\n\n```\nfunc(**{ a: 1, b: 2, c: 3 })\n```\n\n\"Borrow from Python\" has been a good default in other areas.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/192562197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/192730572", "body": "@oconnorr as the word \"nix\" was mentioned\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/192730572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/192902310", "body": "Here's a challenge with this though:  If you do \n\n```\nlocal X = {\n    a: 1,\n    b: 3/self.a,\n};\n\n{\n    A: X {\n        a: 1,\n    },\n    B: X {\n        a: 0,\n    },\n    C: X {\n        a: 2,\n    },\n}\n```\n\nThen you get\n\n```\nRUNTIME ERROR: Division by zero.\n        test.jsonnet:3:8-15     object <X>\n        test.jsonnet:(10:8)-(12:5)      object <anonymous>\n        During manifestation\n```\n\nWhich has the very useful piece of contextual information test.jsonnet:(10:8)-(12:5) that lets us know where we instantiated the bad X from.\n\nHowever if you use std.manifestJson (which I just wrote), you get:\n\n```\ndcunnin@tyrion:~$ jsonnet -eS 'std.manifestJson(import \"test.jsonnet\")'\nRUNTIME ERROR: Division by zero.\n        test.jsonnet:3:8-15     object <anonymous>\n        std.jsonnet:744:50-53   thunk <v>\n        std.jsonnet:720:16      thunk <a>\n        std.jsonnet:954:29      thunk <x>\n        std.jsonnet:954:20-30   thunk <ta>\n        std.jsonnet:956:33-34   thunk <a>\n        std.jsonnet:956:13-39   function <anonymous>\n        std.jsonnet:720:16-24   function <aux>\n        std.jsonnet:744:46-84   thunk <array_element>\n        std.jsonnet:148:21-26   thunk <a>\n        ...\n        std.jsonnet:954:20-30   thunk <ta>\n        std.jsonnet:956:33-34   thunk <a>\n        std.jsonnet:956:13-39   function <anonymous>\n        std.jsonnet:148:21-34   function <aux>\n        std.jsonnet:153:17-62   function <aux>\n        std.jsonnet:157:13-33   function <anonymous>\n        std.jsonnet:747:17-35   function <aux>\n        std.jsonnet:748:9-26    function <anonymous>\n        std.jsonnet:716:27-59   function <anonymous>\n        <cmdline>:1:1-39\n```\n\nWhich lacks that information.\n\nThis problem already existing with std.manifestPython of course but JSON is the common case here.\n\nSome solutions:\n\n1) Proceed with PR as is (at least for now)\n\n2) Make std.manifestJson a builtin that calls the current manifestation code (this is a bit different to just std.toString(v) because it escapes a string at the top level and also introduces newlines and indenting).\n\n3) Allow catching the error and adding contextual information to it at each recursion point.  This also makes it possible to unit test libraries that are intended to fail.  Then the error would look like\nRUNTIME ERROR: Division by zero while manifesting $.B.b\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/192902310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/192927781", "body": "Catching and rethrowing would have to preserve the stack trace as well, so there's some design work there.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/192927781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/193404366", "body": "How do you do that (peel off and pass the whole dict through) in Nix?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/193404366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/193577401", "body": "Doing what you did on the Go side is probably good enough: \"Expected an identifier but got a complex expression\"\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/193577401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/193896359", "body": "Probably the code is doing x[i] for i in std.range(0, std.length({a: \"foo\"})} and length of an object is the number of keys.  Best thing to do right now is to put an explicit check in that it's an array and not an object.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/193896359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/193997590", "body": "@oconnorr @mikedanese @davidzchen \n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/193997590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/194146233", "body": "On debian/ubuntu I think having a ppa is an advantage, although pip install jsonnet works pretty well for the Python case.  I don't know much about mac.  Is homebrew sufficient?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/194146233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/195693902", "body": "Yep, let's leave them unsupported as we can simply do\n\nlocal x = arr; x[length(x) - 1]\n\nor\n\n(function(x)x[length(x) - 1])(arr)\n\nto represent\n\narr[-1]\n\nAlthough it's more chars, it's not often that you need to use negative indexes whereas index arithmetic errors can happen anywhere.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/195693902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/196058378", "body": "```\nlocal foo = f(bar),\n      bar = g(foo);\n```\n\nI advise using the other syntax unless you actually need mutual recursion, though.  That way it's clear when it's happening / not happening.  This is something the formatter will probably enforce in future.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/196058378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/196061454", "body": "In HEAD this is already a bit better, as that hex error was already spotted and fixed.\n\nSTATIC ERROR: test.jsonnet:3:15-20: Expected an identifier but got a complex expression.\n\nWhat's happening is it's parsed up to:\n\n```\nlocal id(x) = x;\nlocal obj = {\n  x: whoa, id(self.x)\n```\n\nAnd interpreting it as an attempt to write something like:\n\n```\nlocal id(x) = x;\nlocal obj = {\n  x: whoa,\n  id(self.x): 3,\n}\n```\n\nExcept you can't put self.x as a function param, only identifiers are allowed, so that's the error it gave you.  In the following case, it parses a bit further and gives a different error:\n\n```\nlocal id(x) = x;\nlocal obj = {\n  x: whoa, id(x)\n};\nobj\n```\n\nSTATIC ERROR: test.jsonnet:4:1: Expected token OPERATOR but got \"}\"\n\nThe OPERATOR it was looking for should have been one of : :: ::: +: +:: +::: but the error message unfortunately does not say this.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/196061454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197135425", "body": "Having more than one such syntax would be weird, and removing the existing one would break compatibility, so I think this ship has sailed now.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197135425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197136882", "body": "Yes, this is a great idea and something I've had in the back of my mind for a while.  You can sort of debug with error right now -- error foo will print out foo, but will also block execution.\n\nOne concern is how many implementation hacks this would expose.  For example, at the moment, object-level locals are re-evaluated whenever you read a field of the object (as they are desugared into every field).  They are not cached like regular thunks.  This will give surprising output!  However it is probably still useful.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197136882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197138287", "body": "Agree that std.extVar is global state and a blunt instrument.  I have thought the same thing -- that we might allow people to write configs that are functions, and then the bound variables would not be visible throughout.\n\n--exec already exists as an alias of -e\n\nWhy not have some --local-var command that binds a variable implicitly at the top level, like std is bound implicitly?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197138287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197139815", "body": "Backwards compatible changes are fine at any time as long as I like the cost / benefit ratio :)\n\nThe cost is complexity -- in people making their own implementations, and complexity to learn / document the language.\n\nIn this case the complexity is not much but the benefit is not so much either.  You could sway my opinion on that if you showed me some real configs that would have real benefits from such a feature.\n\nBefore 1.0 even backwards incompatible changes are OK but there would have to be a really good reason.  Like after launch (2014 time) I changed the meaning of : -- that was a significant change.  Such a change now, when we have many users would be unthinkable.  However a few months ago I removed the use of super in contexts other than super.f and super['f'].  I also required import \"foo\".f to have parens like (import \"foo\").f.  And a few weeks ago, I required :: to be adjacent, not allowing : /\\* */ : (for example).  But these were cases where I judged (admittedly without much evidence) that probably nobody would be affected, so the benefits outweighed the cost.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197139815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197140133", "body": "It is trivial to add a new builtin that prints str and returns x.  I'm not saying that would be the best way to provide this feature, but it would give you something to play with if you wanted to do that.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197140133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197140668", "body": "@oconnorr it's the n word again\n\nThere is a really old issue to add a REPL.  I'm not sure how that would work / how to implement it, but it sounds like a good idea.\n\nIf there was a REPL, would you still want this?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197140668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197141024", "body": "Can you paste your python shim (just curious)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197141024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197142126", "body": "Cute :)\n\nYeah the fact that files designed for --local-var cannot be otherwise imported is pretty weird.  That's probably not a good direction to go in.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197142126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197142228", "body": "I think the commandline interface gets a lot nicer if you only allow one arg, like in that python file.  People are free to pass in a JSON object.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197142228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197160395", "body": "To save some time -- you need to add another builtin to jsonnet_builtin_decl in desugarer.cpp then modify vm.cpp to add the corresponding case to the inner interpreter loop\n\n```\n                 case FRAME_BUILTIN_FORCE_THUNKS: {\n```\n\nand I apologize for the hairiness of that code :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197160395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197162404", "body": "What's the output of bc -l <<< \"$(sed 's/function/L/g' < myfile.jsonnet | wc -c) / $(wc -c < myfile.jsonnet)\"\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197162404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197163458", "body": "FWIW the requirement to use std.objectFields in object comprehensions was an opinion born out of conservatism so it could easily be challenged by sufficient evidence that this is actually a bad idea :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197163458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197165571", "body": "Obvious question is do we want to add extra dependencies?  I did use getopt in some previous projects and I found it rather obtuse.  That's just my opinion though.\n\nBy how much would it make the code cleaner?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197165571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197195716", "body": "lgtm\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197195716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197668628", "body": "Yeah the javadoc style I think is what we want.  I guess we'll document files, whatever the top-level object is, and if the top-level object is an object then all of the fields of that object (recursively if they are objects and so on).\n\nI have a feeling documentation is mainly important for the public API of a file so documenting locals would not be necessary.  I.e., you can put comments on them, but they wouldn't make it into generated HTML.\n\nThe benefit of having all 3 comment types is easier copy-pastability from various languages whose syntax significantly overlaps with Jsonnet.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197668628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/198639584", "body": "@mikedanese would this help with your k-on-k stuff?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/198639584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/199412457", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/199412457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/199414096", "body": "Otherwise LGTM\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/199414096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/199539161", "body": "When the parser hits id(self.x) it knows it is in object scope, so it will try to parse the \"key\" which can be of the form id(e, e, e, ...) where e are arbitrary expressions, and then it looks for the colons.  But it checks the e's are actually just identifiers.  Why not just parse id(x, y, z) -- this is just an artifact of the implementaiton -- re-using some code that parses lists of expressions separated by commas, which are used in arrays as well.  So the error could still be better if that code was rewritten instead of re-used.  Then you'd get an error like \"expected identifier but got self\" or similar.\n\nThe change in the parser was to stop printing out the 'e' in the case that e was not an identifier.  Because there is no ostream<< operator for ASTs, it just printed the pointer.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/199539161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/199539569", "body": "Just adding some notes here:\n\nThis code was overly complicated so I simplified it, and this avoided the problem.  But the underlying problem still remains, and code that is legitimately complex may trigger it in future.\n\nThe problem is we force thunk e in the case of f(e) tailstrict, but if e is an array or a std.makeArray or similar, then its elements are not currently forced.\n\nOne solution is to have a std.makeArrayStrict call that will make an array and force the thunks.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/199539569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/199554902", "body": "It's sorta related to that but a bit different.  With the manifest stuff, the function is the manifester, which you add onto the config.  With the original proposal here, the config becomes a function, and the extra code on the side calls that function.\n\nMore generally, I was wondering how you'd feel about replacing std.extVar with some top level function and threading through the variable?  Would that improve your scripts?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/199554902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/199643648", "body": "Doh, I just cut a release! :)  No matter, we'll get this fixed (waiting for dzc to comment on that) and then do a follow-up release.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/199643648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/199878975", "body": "I also had this on my work laptop:\n\n```\n$ bazel version\nBuild label: 0.1.2\nBuild target: bazel-out/local_linux-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel-main_deploy.jar\nBuild time: Fri Dec 4 23:13:21 2015 (1449270801)\nBuild timestamp: 1449270801\nBuild timestamp as int: 1449270801\n```\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/199878975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/199879362", "body": "@davidzchen did you try on a fresh clone?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/199879362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/200036400", "body": "We could really use a travis rule for bazel builds :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/200036400/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/200592091", "body": "Nope, the Google C++ style guide is terrible.  However I am definitely in favor of codifying the existing style and fixing any inconsistencies within.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/200592091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/200593229", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/200593229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/200593633", "body": "A good rant on the style guide here: https://www.linkedin.com/pulse/20140503193653-3046051-why-google-style-guide-for-c-is-a-deal-breaker\n\nI cut my teeth on Ogre graphics engine and Bullet physics engine, so the style I use is similar to theirs.  It's also similar to the code I wrote at IBM for the X10 project.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/200593633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/201333496", "body": "I couldn't figure out how to run two separate things in travis, do we just do them sequentially?\n\nOnce you've done this I volunteer to do the same thing for setup.py :)\n\nThis will mean I don't have to manually test this stuff when I make releases, which should speed stuff up a lot.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/201333496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/201354565", "body": "When you have exceptions you often need RAII, which used to be used to assist the GC but isn't any more I think (except in STL containers and such).  I'm probably using unique_ptr or something like that in there somewhere as well.\n\nThe \"no exceptions\" rule in Google is born out of having too much old code and doesn't apply here.  Removing exceptions from the code would lead to a lot of boilerplate error propagation, which IMO outweighs the supposed benefits.\n\nAt any rate I think we should stick to basic visual style like whitespace and naming conventions and not opinionated stuff like \"exceptions are bad mmk\"\n\nI don't feel that strongly about mutable references in function arguments, although I don't buy the argument in favor of them at all.  The function signature is always immediately available (unlike some languages), and in the case of foo(x) I have to know whether x is a pointer (unless we also use hungarian notation like p_x), so it's not apparent just from looking at the call with no context that it cannot write to a param.  In general the effect of a function can be arbitrary so this very thin convention doesn't buy me much.  I've also was never surprised by a non-const & despite writing probably about 200kloc of C++ over the last 10 years. SAL annotations are a real \"effects system\" and much more powerful.  They're probably too bureaucratic for our purposes.  If we were writing / validating drivers it'd be different, and MS also has some cool tech for that.\n\nWhen it comes to function / variable names, I use:\n- ALL_CAPS for top-level constants / macros (all top-level things should be constant)\n- camelCase for member functions & variables\n- CamelCase for class names, enumerations, typedefs, etc\n- under_score for symbols that aren't scoped in a class, i.e. global functions, stack variables\n- single letter capitals for template params\n\nBasically that's a classic K&R-like C style but extended to C++ in a java-like fashion, to distinguish between OO and procedural styles.  So there's a lot of high-level information encoded in the names (but not hungarian notation).  I've never liked the \"everything is an object\" concept that underpins Java, so I use procedural style unless objects are a natural fit.\n\nWhitespace:\n- `{` on the next line for functions but nothing else (K&R style)\n- 4 spaces for indentation (no tabs, ever)\n- 100 char line max\n- no indentation for namespaces (your recent change)\n- comments on the same line separated by 2 spaces\n\nMisc:\n- use (void) if the function takes no params (throwback to C I know, but I find it more readable, and we have some C code here as well anyway)\n- prefer (void) unused_param; instead of just dropping the name, because the name is usually valuable information\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/201354565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/201356264", "body": "@jbeda probably has some thoughts on this.\n\nAll this SGTM and I don't mind using bazel for this.  It is kinda a barrier to entry for people wanting to make changes and run the tests locally, but there aren't that many such people and it's not that hard to install it (unless you're on a Google Linux machine, ironically).\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/201356264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/201909809", "body": "LGTM, thanks for updating the style as well :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/201909809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/201909911", "body": "I'd be OK with minimally changing the style if .clang-format is not able to enforce the way it currently is, so we should do this first, and then document the resulting state.\n\nPresumably, it'll be possible to do run the C++ reformatter over the whole code base and update it, if that is the case?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/201909911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/49598278", "body": "Absence of a .golden file means it should expect it to output just true, so you can delete this file.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/49598278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554170", "body": "Is there an advantage to having this as a separate AST if it can only be used inside the [ ] of an Index AST?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554183", "body": "Basically you could extend Index to add the last and step ASTs which are null if they're not provided.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554214", "body": "The coding convention here is that locals on the stack follow the C style of foo_bar whereas fields of classes use fooBar.  While I'm at it, macros and constants are FOO_BAR.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554262", "body": "I think this code would be simplified by unrolling the loop and folding the constant i values in.  You could handle the breaks by nesting ifs.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554363", "body": "We should exactly replicate the semantics of Python\n\n```\n>>> range(0, 5)[0:10]\n[0, 1, 2, 3, 4]\n```\n\nAlso supporting negative numbers.  This can all be implemented in std.slice() :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554437", "body": "It'd be an interesting project to design a unit testing framework for Jsonnet.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554509", "body": "This should also work on strings and fail explicitly if arr is not a string or array type.  There is already str.substr but its semantics aren't right (see comment below).  So we should deprecate str.substr() and use this instead.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554618", "body": "Ideally the code should read like the BNF:\n\n```\ne ::= ...\n    | e '[' e [ ':' [ e ] [ ':' [ e ] ] ] ']'\n    | e '['     ':' [ e ] [ ':' [ e ] ]   ']'\n```\n\nI think that's the right syntax anyway :)\n\nedit: Actually that was wrong but I updated it.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53880369", "body": "local build(slice, cur) = \n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53880369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53881231", "body": "Oh this is bad unfortunately -- { x:: 3 } is lexed as the single token ::\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53881231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53881311", "body": "I guess you can change the parser to check for that, a bit like C++ does with\n\n```\nC<vector<int>>\n```\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53881311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53881833", "body": "If you desugared them to null, you could test for null in std.slice and implement the full semantics that way\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53881833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53882133", "body": "```\n>>> [1,2,3][None:None:None]\n[1, 2, 3]\n```\n\nIn fact this is mandatory for python compatibility :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53882133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53882736", "body": "A workaround is also to do [ : : ]\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53882736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53962210", "body": "Yes I am not sure how to solve this.  There are various instances of it throughout the code.\n\nThe Python approach is to make std.join O(n) and then do everything in terms of that.\n\nCurrently std.join is O(n^2) and making it O(n) would mean making it native.\n\nThere may be a better way though.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53962210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54457505", "body": "The rest of the Jsonnet code in the repo uses 4 and 100.  It may be time to write a style guide.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54457505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54468580", "body": "This will cause the stacktrace to refer to extvar:tests rather than the name of the file.  But perhaps this is something that should be fixed elsewhere.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54468580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54468764", "body": "You could also --exec 'import \"'\"${jsonnet_test}\"'\"'\nThat would fix the filename thing.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54468764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54469070", "body": "I would be inclined to use a superclass here and save the evaluate: evaluate on subsequent lines.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54469070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54469249", "body": "I think we should probably use # instead of // to save one character.  However I don't feel very strongly about it.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54469249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54472348", "body": "It's also not unthinkable to have some jsonnet test foo.jsonnet command.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54472348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54519961", "body": "Yeah there are several cases of that already, they should have a .fmt.golden file to hold the output of formatting those files (because they do not format to themselves).  If I accidentally broke the test, please fix it ;)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54519961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54520027", "body": "You'll want to run ./refresh_fmt_golden.sh on this one.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54520027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56284516", "body": "Seems unrelated to this PR :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56284516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56284644", "body": "Apologies that I haven't RTFM but how does this work?  Does it take the libjsonnet cc_library rule and use the \nonly the \"includes\" param from it?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56284644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56284687", "body": "What's all this? :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56284687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56284885", "body": "...nevermind I just found include/BUILD\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56284885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56286191", "body": "Would this make sense as a header only library?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56286191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56290205", "body": "I noticed it did not include many new headers, so if it (libjsonnet++) were a header only library, it would not need a new build target and would be much simpler.  No need to do it in this PR but it's worth considering.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56290205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56290916", "body": "Ok as long as it works, no need for it to be the same location as the makefile for example.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56290916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56871582", "body": "toString is used elsewhere\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56871582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56919939", "body": "Thanks, fixed in a separate commit\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56919939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/57258704", "body": "Looks like Github diffing is broken here?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/57258704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/64235338", "body": "I think David's right but we can fix it some other time\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/64235338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/86604140", "body": "clang is also supported\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/86604140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/86604179", "body": "We should probably guard this with a -j 8 or something :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/86604179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/86604242", "body": "We should put an optimization flag in I think?  @davidzchen \n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/86604242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/89849128", "body": "There's one other case to handle these, and that's in the FixIndentation pass.  It's exactly the same, except you increment the column counter rather than writing to the the stream.  So you'll still have to loop over ast->value and either add 2 or 1 depending no whether it's a quote.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/89849128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/89849627", "body": "Can you add a comment explaining that the '' and \"\" quoting is interpreted here, unlike the non-verbatim strings where it is done later by jsonnet_string_unescape.  This is OK in this case because no information is lost by resolving the repeated quote into a single quote, so we can go back to the original form in the formatter.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/89849627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/89849710", "body": "You should probably say \"non-quoted\" again here, although the quoting scheme is different, it's still a quoting scheme.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/89849710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/121692779", "body": "Yeah String and StringStream are both char32_t.  We should probably rename them to UStringStream and UString or something.\r\n\r\nAll internal string processing is in that format, however the I/O, i.e. lexing and manifesting are in UTF-8.  So there we convert between std::string and String with explicit encode/decode functions.  Also, the Identifier object used in parameters and variables (as in the case you called out here) is also stored in UTF-8 because it is limited to [a-zA-Z_][_a-zA-Z0-9]*.  They're also interned.  Both are arbitrary decisions.\r\n\r\nFinally, the field names as stored in the HeapObject are Identifiers (even though they can be arbitrary strings).  This technically can lead to a high-level memory leak, because being interned, they are never free'd and the set of field names is not statically bound.  This doesn't cause a probably in practice, but we probably want to fix it in the Go version.\r\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/121692779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/121705543", "body": "Yeah this was a temporary experiment.  For `e+: e'`, The true branch is\r\n\r\n```\r\n[e]: (if e in super then super[e] else std.zero(std.type(e')) + e'\r\n```\r\n\r\nThe false branch is\r\n\r\n```\r\n[e]: if e in super then super[e] + e' else e'\r\n```\r\n\r\nThis relates to our semantic discussion:  The two branches are equivalent in a world where `e in super` never fails.  So going forward I'll use the false branch because it's simpler.  The difference is that in the true branch, + is involved in both the two conditional cases.  For mixins `Inner = { g+: { x: 3 } }` and `Outer = { f+: Inner }` in the desugaring of Outer we have `e' = Inner`.\r\n\r\nIn the false branch this would mean Outer is desugared to `After = { f: if \"f\" in super then super.f + Inner else Inner }`.  The result of that desugaring is that `{ } + After` would be an error because `Inner` cannot stand by itself (the \"g\" in super throws an error).\r\n\r\nIn the true branch the result of `{ } + After` not Inner standing alone but `std.zero(std.type(Inner)) + Inner`, which is `{ } + Inner` which means by induction it will work for all nestings.\r\n\r\nHowever all of this is academic now since we agreed on the permissive super :)\r\n\r\nRegarding your description of your understanding, both versions work with strings.  `{} + \"\"` will do an implicit string conversion of the `{}` and indeed create a \"{}\" string rather than a HeapExtendedObject.  However `{} + \"\"` only occurs in a case like `{ f: {} } + {f+: \"\"}` which for both cases should yield `{ f: \"{}\" }`, which is correct.  In vm.cpp `countLeaves(self)` is only ever used when self has been taken from the stack, so it is always some sort of HeapObject  (A HeapString is not a HeapObject, as the base type of all garbage collected things is HeapEntity).  The else branch in countLeaves is just looking for other HeapObjects, i.e. HeapLeafObject (they have a common supertype).\r\n\r\nThanks for taking the time to figure out what you did, we really need more people to be confident in this code.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/121705543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/121706362", "body": "Just so it is easier to call it.  I realized we would probably be calling it quite a lot, and don't want to discourage cloning the subtree, because if the tree becomes a dag it leads to subtle bugs, whereas unnecessarily cloning is pretty harmless (slightly more static memory use).\r\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/121706362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/121717189", "body": "Yeah I remember you making that argument before.  I wouldn't consider having `x in [...]` except that we already have it in the array and object comprehensions (as they're the same syntax as Python).  In that case it's obviously O(n) though.\r\n\r\nAnother complication is we're representing sets as arrays (sets are a library that makes sorted arrays).  In that case `e in my_set` would be O(n) instead of O(log n) which is even more confusing.\r\n\r\nThat could be fixed by having sets as a first class value, which can be done backwards-compatible as long as `std.type(my_set)` is \"array\".  However that may be even more confusing :)\r\n\r\nI think there's enough doubt to keep `e in arr` out for the moment at least.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/121717189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/121717570", "body": "I checked Python, it's annoying in that [1, 2, 3] is not in [0, 1, 2, 3, 4] but \"123\" is in \"01234\".  So let's punt string as well.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/121717570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/121725201", "body": "Oh looks like I lied:  Identifiers are UTF32 which is why it uses StringStream in this case.  However the literals should also be UTF32 and I'm not sure why the compiler didn't complain here.  I guess because << is more permissive than std::base_string's + operator.  I will fix the literals.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/121725201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127722270", "body": "Can you update the comment - the code does not care what is in the file.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127722270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127724855", "body": "I think it's fine to write out one at a time.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127724855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127725408", "body": "Don't we need to destroy the vm here?", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127725408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127731274", "body": "Can you change the help message to better promote the ability to use multiple filenames (I also tweaked some of the text here):\r\n\r\n```\r\nGeneral commandline:\r\njsonnet [<cmd>] {<option>} { <filename> }\r\nNote: <cmd> defaults to \"eval\".\r\n```\r\n\r\n```\r\nThe eval command:\r\njsonnet eval {<option>} <filename>\r\nNote: Only one filename is supported\r\n```\r\n\r\n```\r\nThe fmt command:\r\njsonnet fmt {<option>} { <filename> }\r\nNote: Some options do not support multiple filenames.\r\n```\r\n\r\nAnd then remove the line `Note: Multiple filenames can be provided at once when using -i or --test options.`\r\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127731274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128593148", "body": "the breaks are redundant because of the return, and then it'll look nice on one line per case (and be easily sortable too)", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128593148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128593290", "body": "std::cerr << \"Unknown AST type\" << std::endl;\r\nabort()", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128593290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128593437", "body": "(because ??? is no more useful than an abort and harder to debug where it came from)", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128593437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128632954", "body": "I don't think it makes a significant difference either way", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128632954/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128798566", "body": "\"and what\" (missing word)", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128798566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128801545", "body": "Can you add a comment to the effect of \"Associate blank lines with the subsequent fodder\".", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128801545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128897500", "body": "You probably also want to check functionSugar == false", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128897500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128897522", "body": "since this is generic code, it's probably best if the example just refers to prev_token and token", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128897522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128897823", "body": "Can you add a comment saying what is in afterFodder and what constraints exist on the bind.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128897823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128897849", "body": "And that the key is the filename being imported", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128897849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128902654", "body": "Since you only use expr to get the fodder, may as well pass in the fodder and call this splitFodder.  Then the description becomes:\r\n\r\nSplit fodder after the first new line / paragraph fodder, leaving blank lines after the newline in the second half.\r\n\r\nThe two returned fodders can be concatenated using concat_fodder to get the original fodder.\r\n\r\nIf that's not what it's doing, please help me fix my understanding :)", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128902654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128902958", "body": "Assertion does not always hold:  (please add this test case to the suite)\r\n\r\n```\r\nlocal b = import \"b.jsonnet\";\r\n/* foo */\r\n\r\n/* bar */\r\nlocal a = import \"a.jsonnet\";\r\n3\r\n```\r\n\r\n```\r\njsonnet: core/formatter.cpp:1821: std::pair<std::vector<FodderElement>, std::vector<FodderElement> > SortImports::splitOpenFodder(AST*): Assertion `beforeThis.empty()' failed.\r\n```\r\n\r\nI guess you want:\r\n```\r\nif (fodderElem.kind != FodderElement::Kind::INTERSTITIAL && !inSecondPart) {\r\n```", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128902958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128906096", "body": "Seems like you could just put {*import.bind} here.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128906096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128906339", "body": "std::unique only recognizes consecutive duplicated elements.  I think you want to make idents a std::set and test whether idents.size() < elems.size()\r\n\r\nPlease add a test case:\r\n```\r\nlocal b = import \"b.jsonnet\";\r\nlocal a = import \"a.jsonnet\";\r\nlocal b = import \"a.jsonnet\";\r\n```", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128906339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128907309", "body": "This is currently not good behavior:\r\n\r\n```\r\nlocal b = import \"b.jsonnet\",  # B comment.\r\n      a = import \"a.jsonnet\";  # A comment.\r\na + b \r\n```\r\n\r\nformats to\r\n\r\n```\r\nlocal  # B comment.\r\n      a = import \"a.jsonnet\";\r\nlocal b = import \"b.jsonnet\";  # A comment.\r\na + b\r\n```\r\n\r\nand if they're sorted to start with:\r\n\r\n```\r\nlocal a = import \"a.jsonnet\",  # A comment.\r\n      b = import \"b.jsonnet\";  # B comment.\r\na + b\r\n```\r\n\r\nyou get:\r\n\r\n```\r\nlocal a = import \"a.jsonnet\";  # B comment.\r\nlocal  # A comment.\r\n      b = import \"b.jsonnet\";\r\na + b\r\n```\r\n\r\n\r\n\r\nFirstly I think \"after\" (which is called adjacent in the caller, and that is a better name) needs to be applied to the last one, not the first one.\r\n\r\nSecondly the opening fodder of the bind (which is varFodder I think) needs to be used as \"adjacent\" for the previous bind.\r\n\r\nSince this is quite complicated, and of dubious value, maybe it's better to exclude these kinds of locals (binds.size() > 1) from isGoodLocal.  I'll leave it up to you to decide what to do.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128907309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128907369", "body": "Can you also add a comment saying that the opening fodder of local is lost, and is presumed to be preserved somewhere else.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128907369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129092498", "body": "It is better because the asserts can be disabled, and most people expect that to not change the behavior of the code.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129092498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129105050", "body": "Actually can't you just remove the default case entirely?", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129105050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129468468", "body": "Didn't we decide this wasn't necessary?", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129468468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/130391247", "body": "looks like 2c is the same as 2b", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/130391247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/130420378", "body": "Incomplete sentence", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/130420378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/130494499", "body": "Slightly more concise description:\r\n\r\n/// * unexpanded and contain newlines in none of the designated places.\r\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/130494499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128621197", "body": "Should this be 4?", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128621197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128832611", "body": "I don't think make all should change source code.  However it can run the test-formatting.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128832611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128834395", "body": "I have a moderate preference for keeping them on the same line, because they're essentially just indirect goto labels.  However if there's no supported option in clang for that then I can live with it.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128834395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128834484", "body": "Any way to encourage it to put the return on the same line?  This is less readable than before.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128834484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128834720", "body": "I've never seen anyone put the { after a namespace before", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128834720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128834802", "body": "(on the line after)", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128834802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128835599", "body": "I think try { } catch should have the same rules as if { } else { }", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128835599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128835731", "body": "uh-oh.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128835731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128836011", "body": "we could change this to\r\n```\r\nTRY {\r\n    return new JsonnetVm();\r\n} CATCH(\"jsonnet_make\")\r\n```\r\n\r\nIt'll probably behavior better then.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128836011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128836120", "body": "(move the { } out of the macro, that is)", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128836120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128836348", "body": "TRY { would fix this indentation too", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128836348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128907623", "body": "Maybe we should do this: #327", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128907623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128907640", "body": "weird that it put it on the one line for this case but not the '  ' case above", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128907640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128907665", "body": "Any way to get it to binpack the cases?", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128907665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/133100367", "body": "Because the desugarer visitor allows editing the AST *&, so everything has to be an AST *.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/133100367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/133100384", "body": "True of CompilerPass too, actually.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/133100384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/133100546", "body": "Done.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/133100546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/103289004", "body": "and MANIFEST.in and setup.py :(", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/103289004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/147835600", "body": "you mean do `std.join(',', std.makeArray(n, function() 'x'))` ?\r\n\r\nsure although it'd be interesting to see how performance differs between the two.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/147835600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/147836422", "body": "you made some benchmarks as well, right?\r\n\r\nI'd like to have realistic ones if possible.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/147836422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/154520048", "body": "Please move to top of file", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/154520048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/154665085", "body": "I think all these passes run before desugaring, so there should not be any ArrayComprehensionSimple.  That could change in future of course.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/154665085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/156267367", "body": "It's like that to reverse the order.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/156267367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/156267501", "body": "actually `istringstream` but yes, good point :)", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/156267501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "fajran": {"issues": [{"url": "https://api.github.com/repos/google/jsonnet/issues/441", "title": "Any plan for a new release?", "body": "I would like to use Bazel to call Jsonnet and produce a Yaml file of Json documents. I have [my changes](https://github.com/fajran/rules_jsonnet/commit/42d467a0f95cc96678031383def89f070c8a3335) ready for the Jsonnet Bazel rules but it requires a newer version of Jsonnet, newer than 0.9.5, or something that includes 381d7ddd.\r\n\r\nIf we have a new release, I will create a PR to [bazelbuild/rules_jsonnet](https://github.com/bazelbuild/rules_jsonnet) project to use the new version.\r\n\r\nthanks!", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sbarzowski": {"issues": [{"url": "https://api.github.com/repos/google/jsonnet/issues/440", "title": "[Documentation] asserts ", "body": "Let the users know that asserts exist, especially asserts with custom messages.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/394", "title": "Test jsonnet on more architectures (x86, arm)", "body": "It would be nice to test it on x86 (32-bit) and maybe arm, instead of just amd64.\r\n\r\nIt's possible that the numeric function behave differently. Some `size_t`-related bugs are also possible. \r\n\r\nSome compilation flags should be enough to check x86.\r\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/385", "title": "Named parameters used as positional for builtins", "body": "This works:\r\n```\r\nstd.makeArray(func=function(i) i, sz=5)\r\n```\r\nBut this does not work:\r\n```\r\nstd.makeArray(sz=5, func=function(i) i)\r\n```\r\nError:\r\n```\r\nRUNTIME ERROR: Builtin function makeArray expected (number, function) but got (function, number)\r\n        testdata/std.makeArrayNamed2.jsonnet:1:1-39\r\n```\r\n\r\nThe names are checked, but then arguments are treated as positional anyway.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/379", "title": "Fractal demo down?", "body": "http://www.fractaldemo.com/ is linked from http://jsonnet.org/case_studies/casestudy_fractal.1.html\r\n\r\nBut it times out.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/373", "title": "Weird indentation after alignment", "body": "This code is formatted with jsonnet fmt:\r\n```\r\nlocal stringToInt(s) =\r\n  local zeroCodepoint = std.codepoint(\"0\"),\r\n        stringToIntHelper(s, idx, acc) =\r\n    if idx == std.length(s) then // see what happened here?\r\n      acc\r\n    else\r\n      local digit = std.codepoint(s[idx]) - zeroCodepoint;\r\n      stringToIntHelper(s, idx + 1, acc * 10 + digit);\r\n  stringToIntHelper(s, 0, 0);\r\nstringToInt(\"42\")\r\n```\r\n\r\nA simpler artificial example:\r\n```\r\nlocal xxxxxxxxxxxxxxxxxxxx = 42,\r\n      yyyyyyy =\r\n  {\r\n    something_long: 42,\r\n  };\r\ntrue\r\n```\r\n\r\nSo if there are multiple binds in a local, and one of them has a body starting on a new line, that body gets weirdly dedented.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/368", "title": "Object assertions caching/performance issue", "body": "Consider the following code:\r\n```\r\nlocal n = 150;\r\nlocal arr = [{v: -1}] + std.makeArray(n, function(x) { v: x, assert arr[x].v == self.v - 1 });\r\narr\r\n```\r\n\r\nIt looks relatively innocent, but there are two problems with it:\r\n* It's quadratic (with regard to `n`)\r\n* It puts >3n frames on stack, so it easily goes over max stack frames limit.\r\nThis happens, because assertions are checked each time we index an object.\r\n\r\nIt's enough to check them once per object. \r\n\r\nThe PR adding the support object invariants in Go version already caches the result of assertion checking and doesn't have this problem.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/366", "title": "idea: json error output for consumption by tools", "body": "To avoid the need to parse custom format (and worrying about colons in filenames etc.).", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/365", "title": "fmt -i with multiple files aborting on first error", "body": "Maybe it could continue and report any errors from other files. ", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/363", "title": "Strings not escaped in assertEqual errors", "body": "Code:\r\n```\r\nstd.assertEqual(\"\\n \", \"\\n\")\r\n```\r\n\r\nExpected output:\r\n```\r\nRUNTIME ERROR: Assertion failed. \"\\n \" != \"\\n\"\r\n        std.jsonnet:649:13-91   function <anonymous>\r\n        testdata/assert_equal5.input:1:1-28\r\n```\r\n\r\nActual output:\r\n```\r\nRUNTIME ERROR: Assertion failed. \r\n  != \r\n\r\n        std.jsonnet:649:13-55   function <anonymous>\r\n        testdata/assert_equal5.input:1:1-28\r\n```\r\n\r\nAnother example where it is pretty important:\r\n```\r\nstd.assertEqual(\"\\u001b[31m\", \"\")\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/362", "title": "More efficient array comprehensions and join", "body": "Currently they are unnecessarily quadratic - underneath they just use +. We can be easily improve that by using a builtin that builds the result array in one go. This was already done in experimental Go version using `flatMap` builtin. \r\n\r\nRelated #222. \r\n\r\nIdeally it would be verified automatically by some benchmarks (#360). ", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/361", "title": "Better error message for newbie mistake +: vs :+", "body": "I don't think this is actually very important, but it was a source of confusion at some point so here it is.\r\n\r\nIt's quite easy to write something like:\r\n```\r\n{x: {y: 1}} {x:+ { z: 2 }}\r\n```\r\nIt doesn't work and error message is mildly confusing:\r\n```\r\nRUNTIME ERROR: Unary operator + does not operate on type object\r\n```\r\n\r\nIt's worse on integer types (that I initially got a problem with), but I suppose this is not what `+:` was designed for anyway:\r\n```\r\n{x: 1} { x :+ 42}\r\n```\r\nIt doesn't fail, but the result is not what I expected:\r\n```\r\n{\r\n   \"x\": 42\r\n}\r\n```\r\n\r\nI think it can be easily made better by lexing `:+` as a single token. Then a much more friendly static error would appear:\r\n```\r\nExpected one of :, ::, :::, +:, +::, +:::, got: :+\r\n```", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/360", "title": "Benchmarks", "body": "Having a set of standard benchmarks will help us improve performance in systematic way and avoid performance regressions.\r\n\r\nIt's also going to help making sure Go version is good enough performance-wise.\r\n\r\nSome benchmarks proposed by @sparkprime :\r\ndcunnin@casterly:~$ time jsonnet -e 'std.length([\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\" for x in std.range(1,10000)])' > /dev/null\r\n\r\nreal    0m0.539s\r\nuser    0m0.472s\r\nsys     0m0.064s\r\ndcunnin@casterly:~$ time jsonnet -e 'std.length(std.join(\"\\n\", [\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\" for x in std.range(1,10000)]))' > /dev/null\r\n\r\nreal    0m3.675s\r\nuser    0m2.928s\r\nsys     0m0.744s\r\n\r\nOne question is how to present the results (i.e. running time) in a way that can be easily compared across versions/implementations.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/359", "title": "Better defaults for jsonnet fmt", "body": "Right now `jsonnet fmt` by default does less than I would expect, e.g. it doesn't fix indentation. \r\n\r\nSomething like `jsonnet fmt -n 2 --max-blank-lines 1 --sort-imports` could be the default. \r\n\r\nI think that ideally long-term we would have something like `gofmt` which provides heavily opinionated, \"the only true\" formatting, without any knobs. Having reasonable defaults is the first step in this direction.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/359/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/358", "title": "Failed to build libjsonnet.js using emscripten", "body": "I tried building js version, but emscripten failed in a way that is completely mysterious to me. I don't really need js version for anything now, but, though.\r\n```\r\nsbarzowski@sbarzowski01:~/Work/jsonnet$ make libjsonnet.js \r\nem++ -s 'EXPORTED_FUNCTIONS=[\"_jsonnet_make\", \"_jsonnet_evaluate_snippet\", \"_jsonnet_realloc\", \"_jsonnet_destroy\"]' -g -O3 -Wall -Wextra -Woverloaded-virtual -pedantic -std=c++0x -fPIC -Iinclude -Ithird_party/md5 -Os --memory-init-file 0 -s DISABLE_EXCEPTION_CATCHING=0 -s OUTLINING_LIMIT=10000  core/desugarer.cpp core/formatter.cpp core/lexer.cpp core/libjsonnet.cpp core/parser.cpp core/pass.cpp core/static_analysis.cpp core/string_utils.cpp core/vm.cpp third_party/md5/md5.cpp -o libjsonnet.js\r\naborting from js compiler due to exception: unknown vector type <4 x i8> | undefined\r\naborting from js compiler due to exception: unknown vector type <4 x i8> | undefined\r\naborting from js compiler due to exception: unknown vector type <4 x i8> | undefined\r\naborting from js compiler due to exception: unknown vector type <4 x i8> | undefined\r\naborting from js compiler due to exception: unknown vector type <4 x i8> | undefined\r\nTraceback (most recent call last):\r\n  File \"/usr/share/emscripten/emscripten.py\", line 1352, in <module>\r\n    _main(environ=os.environ)\r\n  File \"/usr/share/emscripten/emscripten.py\", line 1340, in _main\r\n    temp_files.run_and_clean(lambda: main(\r\n  File \"/usr/share/emscripten/tools/tempfiles.py\", line 39, in run_and_clean\r\n    return func()\r\n  File \"/usr/share/emscripten/emscripten.py\", line 1348, in <lambda>\r\n    DEBUG_CACHE=DEBUG_CACHE,\r\n  File \"/usr/share/emscripten/emscripten.py\", line 1235, in main\r\n    jcache=jcache, temp_files=temp_files, DEBUG=DEBUG, DEBUG_CACHE=DEBUG_CACHE)\r\n  File \"/usr/share/emscripten/emscripten.py\", line 292, in emscript\r\n    assert len(output) == 2, 'Did not receive forwarded data in an output - process failed? We only got: ' + output[0][-3000:]\r\nAssertionError: Did not receive forwarded data in an output - process failed? We only got: 0) {\r\n    $_01=-1;\r\n\r\n    return (($_01)|0);\r\n   }\r\n   $22=(($this+20)|0);\r\n   $23=((HEAP32[(($22)>>2)])|0);\r\n   $24=$12;\r\n   $25=$23;\r\n   $26=((($24)-($25))|0);\r\n   $27=(($this+44)|0);\r\n   $28=((HEAP32[(($27)>>2)])|0);\r\n   $29=$28;\r\n   $30=((($29)-($25))|0);\r\n   $31=(($this+32)|0);\r\n   __THREW__ = 0;invoke_vii('{{ FI___ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc }}',(($31)|0),((0)|0));\r\n   do {\r\n    if (!__THREW__) {\r\n     $33=$31;\r\n     $34=$31;\r\n     $35=((HEAP8[($34)])|0);\r\n     $36=$35&1;\r\n     $37=(($36<<24)>>24)==0;\r\n     if ($37) {\r\n      $42=10;\r\n     } else {\r\n      $39=(($31)|0);\r\n      $40=((HEAP32[(($39)>>2)])|0);\r\n      $41=$40&-2;\r\n      $phitmp=((($41)-(1))|0);\r\n      $42=$phitmp;\r\n     }\r\n\r\n     __THREW__ = 0;invoke_viii('{{ FI___ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc }}',(($31)|0),(($42)|0),((0)|0));\r\n     if (!(!__THREW__)) {\r\n      __THREW__ = 0;\r\n      break;\r\n     }\r\n     $43=((HEAP8[($34)])|0);\r\n     $44=$43&1;\r\n     $45=(($44<<24)>>24)==0;\r\n     if ($45) {\r\n      $50=(($33+1)|0);\r\n      $51=$50;\r\n     } else {\r\n      $47=(($this+40)|0);\r\n      $48=((HEAP32[(($47)>>2)])|0);\r\n      $51=$48;\r\n     }\r\n\r\n     $52=($43&255);\r\n     $53=$52&1;\r\n     $54=($53|0)==0;\r\n     if ($54) {\r\n      $59=$52>>>1;\r\n      $60=$59;\r\n     } else {\r\n      $56=(($this+36)|0);\r\n      $57=((HEAP32[(($56)>>2)])|0);\r\n      $60=$57;\r\n     }\r\n\r\n     $61=(($51+$60)|0);\r\n     HEAP32[(($22)>>2)]=$51;\r\n     HEAP32[(($13)>>2)]=$61;\r\n     $62=(($51+$26)|0);\r\n     HEAP32[(($11)>>2)]=$62;\r\n     $63=(($51+$30)|0);\r\n     HEAP32[(($27)>>2)]=$63;\r\n     $70=$62;$69=$63;$68=$61;$_pre_phi=$17;\r\n     break L4;\r\n    } else {\r\n     __THREW__ = 0;\r\n    }\r\n   } while(0);\r\n   $65$0 = ((___cxa_find_matching_catch(-1, -1,((0)|0)))|0); $65$1 = tempRet0;\r\n   $66=$65$0;\r\n   $67=((___cxa_begin_catch((($66)|0)))|0);\r\n   ___cxa_end_catch();\r\n   $_01=-1;\r\n\r\n   return (($_01)|0);\r\n  } else {\r\n   $_phi_trans_insert=(($this+44)|0);\r\n   $_pre=((HEAP32[(($_phi_trans_insert)>>2)])|0);\r\n   $_pre2=(($this+48)|0);\r\n   $70=$12;$69=$_pre;$68=$14;$_pre_phi=$_pre2;\r\n  }\r\n } while(0);\r\n\r\n\r\n\r\n\r\n $71=(($70+1)|0);\r\n $72=(($this+44)|0);\r\n $73=($71>>>0)<($69>>>0);\r\n $74=($73?$69:$71);\r\n HEAP32[(($72)>>2)]=$74;\r\n $75=((HEAP32[(($_pre_phi)>>2)])|0);\r\n $76=$75&8;\r\n $77=($76|0)==0;\r\n if (!($77)) {\r\n  $79=(($this+32)|0);\r\n  $80=$79;\r\n  $81=((HEAP8[($80)])|0);\r\n  $82=$81&1;\r\n  $83=(($82<<24)>>24)==0;\r\n  if ($83) {\r\n   $88=$79;\r\n   $89=(($88+1)|0);\r\n   $90=$89;\r\n  } else {\r\n   $85=(($this+40)|0);\r\n   $86=((HEAP32[(($85)>>2)])|0);\r\n   $90=$86;\r\n  }\r\n\r\n  $91=(($90+$10)|0);\r\n  HEAP32[(($6)>>2)]=$90;\r\n  HEAP32[(($4)>>2)]=$91;\r\n  $92=(($this+16)|0);\r\n  HEAP32[(($92)>>2)]=$74;\r\n }\r\n $94=($70|0)==($68|0);\r\n if ($94) {\r\n  $96=$this;\r\n  $97=((HEAP32[(($96)>>2)])|0);\r\n  $98=(($97+52)|0);\r\n  $99=((HEAP32[(($98)>>2)])|0);\r\n  $100=$__c&255;\r\n  $101=((FUNCTION_TABLE_iii[($99)&{{{ FTM_iii }}}]($3,$100))|0);\r\n  $_01=$101;\r\n\r\n  return (($_01)|0);\r\n } else {\r\n  $103=(($__c)&255);\r\n  HEAP32[(($11)>>2)]=$71;\r\n  HEAP8[($70)]=$103;\r\n  $104=$__c&255;\r\n  $_01=$104;\r\n\r\n  return (($_01)|0);\r\n }\r\n  return 0;\r\n}\r\n\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/share/emscripten/emcc\", line 1864, in <module>\r\n    final = shared.Building.emscripten(final, append_ext=False, extra_args=extra_args)\r\n  File \"/usr/share/emscripten/tools/shared.py\", line 1276, in emscripten\r\n    assert os.path.exists(filename + '.o.js') and len(open(filename + '.o.js', 'r').read()) > 0, 'Emscripten failed to generate .js: ' + str(compiler_output)\r\nAssertionError: Emscripten failed to generate .js: \r\nmake: *** [libjsonnet.js] Error 1\r\n\r\nsbarzowski@sbarzowski01:~/Work/jsonnet$ em++ --version\r\nemcc (Emscripten GCC-like replacement) 1.10.0 ()\r\nCopyright (C) 2013 the Emscripten authors (see AUTHORS.txt)\r\nThis is free and open source software under the MIT license.\r\nThere is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n```", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/google/jsonnet/commits/76c486c0c81211149bfb27ccec69e6535c215677", "message": "Add --sort-imports to help, add --no-sort-imports (#387)"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/cb50389f1b5880eb4e58dcfe6779527db07ac1bb", "message": "Fix tests failing, but passing on Travis\n\nWe've shown the error message, but the exit code was still 0"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/ea0255a4a3cacc1a2b00742b1a7e38618d431145", "message": "Fix swapped indexes in spec (object-inherit) (#367)\n\n* Fix swapped indexes and apostrophes in spec (object-inherit)"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/9aa90e27d8ff698410dee33a0eeca94b5b58854b", "message": "Consistently use name \"number\" rather than \"double\"\n\nIn jsonnet there is a single number type which is\nin fact IEEE 754 double. We refer to it as \"number\"\nwhen using `std.type` and in specification. However\nin error messages and in our code it was still called double.\nThis change fixes this inconsistency by changing all occurances\nto \"number\"."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/71912dc005991a6f408d18c607ff5b94f5a758eb", "message": "Use a more common spelling: Pre-Procesor -> preprocessor"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/c2000e6855b879954bb45bd10fb10a68572259ca", "message": "Make comment more accurate"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/820f619f74a5adc0045ba3b420bed808c6184f25", "message": "Add missing argument to the slice spec"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/bc80c8384bec16403750dcab9c64e7dacae6abc4", "message": "An option to disable error tests"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/a4c9b2a7e113d2ef587f4a14dfa286148afdace1", "message": "External testing support\n\nMake it easier to use the test suite with other implementatons.\nFor example: https://github.com/google/go-jsonnet"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/9f5697c3d752172128f895bbd0977552aeef04ff", "message": "Reformat code (and add make target to do so)"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/fb952b0bbc876f381c7b13f06811f36de67725b3", "message": "Improve comment"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/9d1ad19a84537d2724c5dfc167fb52c168bbe0be", "message": "Fix comment"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/d9fc3e8df4e1da8617fcf5a50d4ba5098d805b0f", "message": "Change a test, so that it is no longer redundant"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/4904e8be2deedfb230a884b37d134fdb073a8641", "message": "Comment improvements"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/452a24c6cbfd2a0d7cb5ea749df8855cda534d12", "message": "Add simple newline insertion to formatter\n\nThis fixes \"bracebug\" (reported here: #299) and many\nvariants of it.\n\nOf course it's not a complete solution to any newline problems.\nIn particular it never removes or rearranges newlines, it only\nadds some. But it still should help a lot."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/654f96a8a2113d62f8ff4918964d828b3e33aaf0", "message": "Make TravisCI fail when tests fail.\n\nTravisCI used to ignore return code of make test\nand report success even when tests failed."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/8477f03733529107cb591c06e9678f36174ebb88", "message": "Regenerate golden output (comment change).\n\nThis is embarassing, but I forgot to regenerate one of the test\noutputs after some trivial comment change."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/720b4e58579d9e48fea125a2c2b0808f3590e058", "message": "Add an option for import sorting in fmt mode (#325)\n\nAdd an option for import sorting in fmt mode"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/1da05d57cf075a798018dcd3afff31da43b84b60", "message": "Add idempotence tests\n\nJust run formatter again on golden and see if something changes.\nIt shouldn't."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/c52761c868c86a0b616189983f6842dfa18193c4", "message": "Allow reformatting of multiple files\n\nWhen using -i or --test.\n\nSee #210."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/5a30a8d66529c1cd03f9fa3cbdf386fe9ffcba97", "message": "Fix spelling"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127358611", "body": "Well, it was like that before, I have no idea. Probably b/c that was shorter than using strerror and then cerr. @sparkprime? ", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127358611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127359630", "body": "There is a check for that just above the one for \"ERROR: Already specified\".  I didn't need to touch it.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127359630/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127362084", "body": "> Seems useful to pipe files through the formatter rather than modify them in place.\r\n\r\nOf course. It's only preventing specifying the input as \"-\" when changing the files in place (see the `if` above). It's still possible to do `jsonnet fmt - < somefile > output_file`, it only prevents `jsonnet fmt --in-place -` which doesn't make any sense.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127362084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127365643", "body": "The idea was that this function shouldn't care which of the many specified files it reads, but yes it ends up being used only when there is exactly one file.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127365643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127366542", "body": "It's in the function named read_input, so I would expect getting and returning the contents to be the purpose of this function. But in addition to that, in special cases it changes the filename to sth else.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127366542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127366610", "body": "Yes and no. Anyway you made me realize that there is a subtle regression - it's impossible now to use --test with stdin (it will treat it as a filename). I'll fix it.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127366610/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127367270", "body": "I see two ways to approach this:\r\na) Process everything as we do know, but keep the results in memory and write all of them at once afterwards.\r\nb) Just do the initial validation on all files (check that they exist, that stdin is not used with -i, maybe that they can be opened in case permissions are wrong).\r\n\r\nOf course, even with a), it's still possible that only some of them will be updated if something bad happens (file removed, permissions changed, process killed). ", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127367270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129319291", "body": "We don't get to format `error.parse.*` at all (formatting happens after parsing), so there is no interaction with the formatter. And we check that the error is what we expect in run_tests.sh. So I think we're covered here.\r\n\r\nUnless what you meant is running golden files and verifying that the output matches the output of original files. That could help with things like variable shadowing in imports:\r\n```\r\nlocal b = import \"b.jsonnet\";\r\nlocal a = import \"a.jsonnet\";\r\nlocal b = import \"a.jsonnet\";\r\n```\r\nBut I guess that would be another script. ", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129319291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128360813", "body": "It's the same as in the function below, I am referring to it in \"See concat_fodder\". It's short, so maybe duplicating it won't be so bad. Or maybe there is a better place to put these constraints?", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128360813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128361140", "body": "Well, existing code often goes over 80, so I didn't worry about it very much. @sparkprime?", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128361140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128363372", "body": "Maybe commentAfter is not the best name. Any suggestions? It contains all comments until the end of the line. In case a comment goes beyond the end of the line it's also a part of commentAfter. However if there are some blank lines afterwards, they go to beforeNextFodder.\r\n\r\nExample: \r\n```\r\nlocal foo = 'a.jsonnet'; /* blah blah*/ /* blah blah\r\nblah blah\r\n\r\n*/\r\n\r\n// something else\r\n\r\n{}\r\n```\r\ncommentAfter =\r\n```\r\n/* blah blah*/ /* blah blah\r\nblah blah\r\n\r\n*/\r\n```\r\nbeforeNextFodder ==\r\n```\r\n\r\n// something else\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128363372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128364886", "body": "Well, it's not the boundary that starts :-). So maybe just `groupEndsAfter`? ", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128364886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128365653", "body": ":+1:, I like to always put braces. However similar code in this function doesn't use them. @sparkprime?", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128365653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128367727", "body": "Most (but not all) methods in this file have it on a new line, so I'll convert to that. Maybe I should try running clang-format over the whole code (not this change ofc) and maybe I can add it to automatic tests so that we have it always consistent.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128367727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128369015", "body": "stray semicolon", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128369015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128542022", "body": "Done, i.e. it's consistent with the rest of the file now.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128542022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128828994", "body": "Ok, I got the answer. It's 100 columns.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128828994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129076709", "body": "Well, \"???\" was there just to make the compiler happy. There's an `assert(false && \"err msg\")` just above it, doing pretty much the same thing as your proposition.\r\n\r\nNext time I'll add a comment `// never reached` or sth like that to the `return` statement, but here the compiler is smart enough not to issue a warning about not returning if I just remove `return \"???\"` (probably b/c it can check that all cases are covered). \r\n\r\nPlease let me know if you think that:\r\n```\r\nstd::cerr << \"Unknown AST type\" << std::endl;\r\nabort();\r\n```\r\nis better than:\r\n```\r\nassert(false && \"Unknown AST type\");\r\n```", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129076709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129086549", "body": "Argh, I forgot to sort it. :/ I believe `sort` + `unique` is faster, so I default to it, even though it's (as I have demonstrated) a little bug-prone. But yeah, I think set solution is more readable, I'll change to that. ", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129086549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129087507", "body": "done", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129087507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129094767", "body": "Done, i.e. I have fixed it. I may add some more tests.\r\n\r\nBTW I see some real value in it - in discoverability/UX. Otherwise the first-time user may assume that import sorting doesn't work or that it requires some additional setup and never change the style (how would they know that they need to use one-local-per-import?).", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129094767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129110385", "body": "done", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129110385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129110652", "body": "done (+ test)", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129110652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129116398", "body": "done", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129116398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129119127", "body": "done", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129119127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129120718", "body": "good catch, fixed", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129120718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129121235", "body": "No, I can't. But a separate variable is unnecessary.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129121235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129121826", "body": "I have changed the function to just take the binds, instead of whole local, so now it should be obvious.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129121826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129124162", "body": "done (there are major changes to this comment)", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129124162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129124637", "body": "Done. I went with prev_token, next_token.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129124637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129125422", "body": "Done.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129125422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129125701", "body": "done", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129125701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129144994", "body": "eh, there are still some weird cases:\r\n```\r\nlocal /* bbb */ b = import \"b.jsonnet\",  # B comment.\r\n      /* aaa\r\n         aaa\r\n         aaa */ a = import \"a.jsonnet\";  # A comment.\r\n```\r\nor\r\n```\r\nlocal b = import \"b.jsonnet\",  /* BBB */ /* B comment.\r\n      bbb\r\n      bbb\r\n      bbb */ a = import \"a.jsonnet\";  # A comment.\r\n```", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129144994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129360452", "body": "Ok, that's due to paragraph handling. Now the clean line invariant should be preserved. The output is still a little weird, but the input was too.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129360452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129610389", "body": "I think that actually this is a good thing after all.\r\n\r\nSome reasons starting paragraphs on a clean line is a good thing (I think you've mentioned most of them in our discussion):\r\n* Having paragraphs starting mid-line is a weird input and boundary case for all the passes that touch fodders and newlines. It's more \"hygienic\" to eliminate these cases completely.\r\n* We don't allow paragraphs to end mid-line (which is a very good thing, as it would lead to even weirder cases and it would prevent clean conversion to single-line comments). So symmetry here is nice.\r\n* I have randomly asked some people and apparently no one can think of a reason why someone would want to have paragraphs starting mid-line in their code.\r\n\r\nSome reasons why the current representation is reasonable (compared to e.g. treating the line before as part of the paragraph):\r\n* How to otherwise represent the line comment that can go in the line before? Keeping it in a paragraph is very ugly (it effectively gets rid of the invariant + allows mixing comment styles within a paragraph). Some rule like \"PARAGRAPH starts with an endline unless there is LINE_END before it\" is better, but still a little confusing.\r\n* Why not just another pass? Because having these newlines affects other passes, for example FixIndentation and SortImports . So we want to keep this as invariant at all times and not just when we're done. \r\n* Some existing code depends on it. There's a good chance some bugs would be introduced while changing it. I'm not really convinced that the alternatives I can think of now are actually better so keeping things as they are seems like a reasonable default. Especially since this PR is about something else.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129610389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/130372325", "body": "Yes. There are portability problems. OS X and GNU versions of `mktemp` need different arguments. Invoking Python seems much cleaner to me than trying to autodetect the version or trying the other version if it fails (the latter is the top answer here https://unix.stackexchange.com/questions/30091/fix-or-alternative-for-mktemp-in-os-x).", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/130372325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/130373495", "body": "The point of this comment was to explain what this particular function does, expandBetween as opposed to expandNearParens (both operate on ArgParams). \r\n\r\nBut still no, it wouldn't be touched by the other one (it would if there was a newline before 1 or after 3).", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/130373495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/130373669", "body": "No, it doesn't take the length into account. The name was only an example situation when someone would format it this way (as opposed to keeping arguments on the same line). Hmmm... but I can see how it can be confusing. Maybe it's better to change it to something generic.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/130373669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/130676216", "body": "done", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/130676216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128582577", "body": "I think I can fix it through CommentPragma option, thanks for noticing", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128582577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128584051", "body": "I'm worried that reformatting on every build (== adding to `all`) may be annoying. \r\n\r\n:+1: for `.PHONY` I forgot about it. \r\n\r\nAlso I guess I'll add a separate `test-formatting` target for use in TravisCI etc.\r\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128584051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128584782", "body": "The real reason is that it was autogenerated this way. But I guess I can either remove it completely or leave it active. I'll take another look at this config.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128584782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128631738", "body": "No, this is not the indentation, but how we interpret actual tab characters (we change them to this many spaces then). For example Google style, that I started with, uses 8 here, even though the Indentation is only 2 chars wide.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128631738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128633546", "body": "`test-formatting` added, .`.PHONY` added\r\n\r\nMy concern with `all` is not really valid, there is a separate default target. But still I interpret `all` as `build all` as it doesn't run tests etc., so I think reformatting doesn't really belong there. @sparkprime?", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128633546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128834863", "body": "I checked that and I couldn't find anything to control that.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128834863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128835548", "body": "Yes I experimented with that, I think there were fewer changes if I set it this way, but I might be wrong. Anyway, I'll change it. ", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128835548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128842834", "body": "It does. But here we have crazy macros, so it gets a little confused.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128842834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128843576", "body": "I was able to tell clang-format that TRY ... CATCH is a block (as it is, no changes to the macro).", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128843576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129048478", "body": "`clang-format` can sometimes produce weird results. Some quick experimentation shows that the reason why the `' '` case is not put in one line is the comment below it. But I have no idea why.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129048478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129050008", "body": "I can't find any.\r\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129050008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129051763", "body": "Yes, that will help.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129051763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/133060425", "body": "A test for that would be nice.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/133060425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/133060442", "body": "Then why not keep it *LiteralString?\r\n\r\n(Also it doesn't compile on Travis and I think it's because of that).", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/133060442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/133103316", "body": "well, yes, but it can be handled while keeping `Import::file` a `*LiteralString`. Instead of:\r\n```\r\ndesugar(ast->file, obj_level);\r\n```\r\nyou could:\r\n```\r\nAST *file = ast->file;\r\ndesugar(file, obj_level);\r\nast->file = dynamic_cast<LiteralString *>(file);\r\n```\r\nAnd it may be better, because:\r\na) It's more explicit - it clearly states that it needs to be LiteralString, but in this case desugarer could potentially put something else there.\r\nb) In general a little bit nicer data structures and a little more code within some functions is better than the other way around, imo. ", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/133103316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/147980273", "body": "Can we extract the `do_test` part to a separate file? It will be easier to inspect them and add new ones without all of the machinery around them. ", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/147980273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/147814386", "body": "Can we avoid having thousands of lines here? Navigating this is pretty annoying...", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/147814386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/147840080", "body": "Yeah, something like that.\r\n\r\nFor truly realistic examples a corpus of real code would be the best, probably.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/147840080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/154521888", "body": "What's happening here?", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/154521888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/155121840", "body": "nit: Getting the list of paths out of JSONNET_PATH asks for being a separate function.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/155121840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ashi009": {"issues": [{"url": "https://api.github.com/repos/google/jsonnet/issues/425", "title": "Support oct/hex number literals", "body": "It's weird to not support non-decimal literals in a configuration language.\r\n\r\n```\r\n{\r\n container: k8s.Container {\r\n  ...,\r\n  args: {\r\n   fileMode: 0644,  <----- STATIC ERROR: Expected a comma before next field.\r\n  },\r\n  ...\r\n }\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nikolay": {"issues": [{"url": "https://api.github.com/repos/google/jsonnet/issues/422", "title": "Add more file functions to stdlib", "body": "So far, the only function for file paths is `std.thisFile`, but its utility is questionable.\r\n\r\nWe need functions giving us the full pathname of the current file, just the filename, and just the directory. It would be even better if we can get a function that extracts the filename, and the directory of a given file path, too.\r\n\r\nI've been trying to use `importstr` and include configuration files, but I cannot make it work when the containing file is symlinked and it uses relative to its configuration files. Of course, the same applies to `import`, too.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/54082032", "body": "It's fixed now, but I it still doesn't compile:\n\n```\n$ make\nc++ -g -O3 -Wall -Wextra -pedantic -std=c++0x  jsonnet.cpp lexer.cpp parser.cpp static_analysis.cpp vm.cpp libjsonnet.cpp -o jsonnet\nc++: warning: couldn't understand kern.osversion '14.0.0\nparser.cpp:822:1: error: zero-size array 'STD_CODE'\n };\n ^\nmake: *** [jsonnet] Error 1\n```\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/54082032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/54086304", "body": "Thanks, @sparkprime! Can't wait to start playing with this. I have to deal with huge monolithic JSON files for AWS CloudFormation, so, I developed my own Pythonic extension of it, but Jsonnet can definitely do that and a lot more, so, once I have something accomplished, I will post examples to popularize Jsonnet!\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/54086304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mbrukman": {"issues": [{"url": "https://api.github.com/repos/google/jsonnet/issues/370", "title": "Make macOS builds optional?", "body": "Due to Apple licensing restrictions, macOS can only be run on Apple hardware. That means that CI services such as Travis CI are limited in the number of concurrent macOS builds based on the amount of actual hardware they have on hand (or can rent remotely, if that's even possible), whereas Linux builds can be parallelized using bare-metal hardware or VMs, including cloud providers, so they can easily scale elastically to meet demand.\r\n\r\nAs a result, Travis CI very quickly runs the Linux builds, but macOS builds are queued, and make take quite a bit longer to process. In other projects, I have run into issues where macOS builds were queued for a very long time, leading to blocked code reviews or finding out much later that the build had a basic issue, which is not visible if just looking at GitHub, the Travis status is \"pending\". I also noticed a similar situation\r\n\r\nI would like to propose that the Jsonnet project consider making the following  changes:\r\n\r\n* macOS builds are marked as \"optional\", so their delays or failures don't block builds\r\n* a build where Linux build succeeds is marked as \"passing\"\r\n\r\nThis can be done easily using `.travis.yml` config.\r\n\r\nThis is especially the case if we add Bazel-based builds in addition to Make-based builds in issue #137.\r\n\r\nThoughts?", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/354", "title": "Static analysis for Jsonnet C++ code", "body": "Given that Jsonnet is written in C++, there are many potential issues that can lurk in C++ code, such as undefined behavior, buffer overruns, etc.\r\n\r\nWhile unit tests help ensure that code does what it's supposed to (and handles errors correctly), there are other classes of issues that can be found via static analysis. Some of the tools that can be used for this are:\r\n\r\n* Coverity, which provides [free scans](https://scan.coverity.com/) to open-source projects\r\n* LLVM/Clang tools such as: AddressSanitizer, ThreadSanitizer, MemorySanitizer, UndefinedBehaviorSanitizer, etc.\r\n\r\nThese and other similar tools can help find bugs without writing explicit tests, so they provide a lot of value with little additional effort.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/353", "title": "Explain how to unit test Jsonnet files", "body": "What is the recommendation for users who are writing non-trivial Jsonnet configs and would like to test them from within Jsonnet itself?\r\n\r\nI came across https://github.com/yugui/jsonnetunit \u2014 has this framework been reviewed / evaluated? Is this something that should be recommended as a general tool to Jsonnet users? If not, what would be the recommendation to users of Jsonnet interested in unit testing their configs?", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/352", "title": "Explain how to use Bazel with Jsonnet", "body": "By which I mean, not build Jsonnet with Bazel, but how a Jsonnet user can use Bazel.\r\n\r\nSpecifically, I'm referring to explaining how one can use https://github.com/bazelbuild/rules_jsonnet in their own Jsonnet project. Jsonnet project itself uses these rules, but to an external observer, there does not appear to be docs in this repo to explain how to use Bazel + Jsonnet in the context of another project.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/351", "title": "Centralize links to community forums", "body": "There are two places to learn about community for Jsonnet:\r\n\r\n1. https://github.com/google/jsonnet/blob/master/README.md\r\n2. http://jsonnet.org/contributing.html\r\n\r\n(1) only lists the mailing list, and in passing and makes no mention of the IRC channel. (2) lists both. If one looks only on the GitHub repo, one might not realize that the IRC channel even exists.\r\n\r\nI've also found that without providing instructions, users assume that one must have a Google account to join an email list on Google Groups (which is not the case), so I created this set of instructions for JanusGraph:\r\n\r\nhttps://github.com/JanusGraph/janusgraph#community\r\n\r\nProposal to update the `README.md` file:\r\n\r\n* add a Community section the README in the repo\r\n* list both email list and IRC channel there\r\n* explain how to join the mailing list without a Google account", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/350", "title": "Merge the two contributing guides into one", "body": "There are currently two contributing guides:\r\n\r\n1. https://github.com/google/jsonnet/blob/master/CONTRIBUTING\r\n2. http://jsonnet.org/contributing.html\r\n\r\nand the first one refers users to the second one (but it's a plain text file so the link is not even clickable). For simplicity and to improve usability, I recommend merging them into a single one, and that one should be in the code tree, because that is where the potential contributors will expect to find it.\r\n\r\nA sample contributing file with plenty of details can be found in [this repo](https://github.com/mbrukman/autogen/blob/master/CONTRIBUTING.md). Thoughts / objections?", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/349", "title": "Add a list of companies using Jsonnet to GitHub repo", "body": "New users often like to know who else is already using a project, who is already running it in production or otherwise critically depending on it, before deciding to bet on it themselves. Also, even if you have a developer who's a fan of Jsonnet, they will have to convince their leads / management to run it in production, and having third-party voices that are already doing that makes more users comfortable with taking the leap of putting Jsonnet in the critical production stacks.\r\n\r\nIn other words: everyone wants someone else to be the pioneer / bleeding edge tester, but once it's proven, it's a snowball effect since everyone wants to be using what other successful users are already using. Thus, having a list of existing production users is critical to growing the Jsonnet user base.\r\n\r\n**Note: please be sure to get explicit permission from each of the companies before adding their name to a public list.**\r\n\r\nHere are some companies that are pretty clearly using Jsonnet already:\r\n\r\n* Box - see [blog post](https://blog.box.com/blog/kubernetes-box-microservices-maximum-velocity/)\r\n* Databricks - see [blog post](https://databricks.com/blog/2017/06/26/declarative-infrastructure-jsonnet-templating-language.html)\r\n* Heptio - see [ksonnet project](https://github.com/ksonnet/)\r\n\r\nPotential sources of other users:\r\n\r\n* [LinkedIn search for \"jsonnet\"](https://www.linkedin.com/search/results/index/?keywords=jsonnet)\r\n* comments such as [this one](https://news.ycombinator.com/item?id=13901416) on HackerNews:\r\n  > Take a look at jsonnet: http://jsonnet.org. It extends JSON with loops, conditionals, variables and more in an elegant way. We don't write JSON anymore and treat it like an \"assembly language.\" We use jsonnet to generate CloudFormation templates, terraform templates and Kubernetes resource definitions.\r\n\r\nFor inspiration from other projects, see these lists:\r\n\r\n* [Apache Airflow (incubating)](https://github.com/apache/incubator-airflow#who-uses-airflow)\r\n* [JanusGraph](https://github.com/janusgraph/janusgraph/#users)", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/348", "title": "Add instructions for building with Clang", "body": "The [README](https://github.com/google/jsonnet/blob/93476c27a03cac3841fafc597cf124cc55035079/README.md) currently says:\r\n\r\n> The GCC C++ (g++) compiler is required to build Jsonnet. Clang is also supported.\r\n\r\nHowever, the only instructions are for building with g++:\r\n\r\n> ### Makefile\r\n> To build jsonnet with g++, run:\r\n>\r\n> ```\r\n> make\r\n> ```\r\n\r\nPerhaps it should also say:\r\n\r\n> To build with Clang, run:\r\n>\r\n> ```\r\n> make CXX=clang++ CC=clang\r\n> ```\r\n\r\nIs that sufficient? Any other vars that need to be set?\r\n\r\n---\r\n\r\nAlso, there are instructions for building with Bazel, but it's non-obvious (without reading all the `BUILD` / `*.bzl` files) which compiler it will use by default, and if it's g++, how to switch to Clang instead.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/17", "title": "Add a REPL", "body": "For exploring Jsonnet, it would be nice to have a REPL, e.g., via `jsonnet -i`. For inspiration, I would look to Scala's REPL as an example.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/17/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/google/jsonnet/commits/ce800d45286f1ecec79c422365b12587cd774d5b", "message": "Add instructions for building with Bazel + Clang."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/7cc576e7a9e762af0ca369c6331912a2f6668bec", "message": "Add instructions for building with Make + Clang."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/57801875", "body": "Jsonnet REPL _should_ be more featureful than the standard language itself, because it would make it more useful for experimentation and learning the language. I believe both Scala and Haskell REPLs allow you to do more than what the languages themselves provide.\n\nI agree, however, that it's a non-trivial project. As a first step, providing the same functionality as `jsonnet -i` would still be useful because not having to retype that (or press \"up\" and erase the previous command) would be quite useful to get a handle on the syntax.\n\nLater on, allowing the addition of top-level bindings would be an additional useful feature; I suspect as soon as there's a REPL, this will be the first feature request. :-)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/57801875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "guoshimin": {"issues": [{"url": "https://api.github.com/repos/google/jsonnet/issues/343", "title": "document tailstrict", "body": "Include tailstrict in the tutorial and language specification.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/289", "title": "Support |||- from YAML", "body": "This will send jsonnet spinning, consuming 100% of CPU:\r\n```\r\njsonnet -e '|||-\r\n  abc\r\n|||'\r\n```\r\nTested with v0.9.0.\r\n\r\nI was trying to see if jsonnet supported chomping the final newline in text blocks similar to how it's done in YAML. Consider this both a bug report and a feature request :D", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/64135390", "body": "You may be right that it's unnecessary, but the jsonnet_to_json_test rule defined in the bazel repo has a default value for std, which is simply wrong for these targets.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/64135390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/64135395", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/64135395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "hausdorff": {"issues": [{"url": "https://api.github.com/repos/google/jsonnet/issues/321", "title": "Parsing a string to JSON", "body": "@jbeda was kicking around the idea (which I quite like) of having jq-style filters, which would look something like this:\r\n\r\n```\r\ncat foo.yaml | addMixin honeycomb.jsonnet  | kubectl apply -f ...\r\n```\r\n\r\nwhere `addMixin` turns `foo.yaml` into a JSON document, and honeycomb.jsonnet takes it as a parameter and embeds some sidecar.\r\n\r\nIn order for this to work, I think `honeycomb.jsonnet` would have to parse a string and turn it into JSON.\r\n\r\nWhat is the recommended way to do this sort of thing? Native extensions?", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/307", "title": "Consider implementing `import * from \"x\"`", "body": "We use Jsonnet to express the Kubernetes API objects. The namespace is quite dense, so we end up with a lot of imports, something like [EDITED FOR CLARITY]:\r\n\r\n```\r\nlocal core = import \"core.libsonnet\";\r\n\r\nlocal container = core.v1.container;\r\nlocal claim = core.v1.volume.claim;\r\nlocal probe = core.v1.probe;\r\nlocal service = core.v1.service;\r\nlocal secret = core.v1.secret;\r\nlocal volume = core.v1.volume;\r\nlocal configMap = core.v1.configMap;\r\n```\r\n\r\nIt would be great to have sugar for this, _e.g._, JavaScript-style `import * from \"core.libsonnet\"`, which would generate `local` definitions similar to those above.\r\n\r\nWould doing this upend some important part of the language?", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/306", "title": "\"Returning\" an item from a function", "body": "This is somewhat related to the (OT) [tangent discussion](https://github.com/google/jsonnet/issues/302#issuecomment-282866371) I brought up on issue #302. So, I apologize if this stutters a bit, but I'm curious to hear what you think about a more general pattern that this tangent fits in to.\r\n\r\nIn Jsonnet I often find myself wanting to use an object in a function to \"hide\" locals, but then later \"return\" one of the locals I used. For example, if you imagine some syntax for `return` (I'm not proposing this as a solution, but presenting it as a way of expressing what I'd like to do), you might write something like:\r\n\r\n```c++\r\n{\r\n  foo():: {\r\n    // `bar` is \"hidden\" in the body of `foo` because it is `local`.\r\n    local bar = [... do some fancy work here ...]\r\n\r\n    // But we want to \"return\" the result of `processBar`, rather\r\n    // than an object containing it.\r\n    return processBar(baz),\r\n  },\r\n}\r\n```\r\n\r\nWhat is the Jsonnet-y way to accomplish this?", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/121475365", "body": "I've noticed we sometimes use `U\"...\"` and sometimes not. For example, `U\"$outer_self\"` above, and `$\"outer_super_index\"` here. It's not super clear to me when we should do one or the other. Is `StringStream` outputting `const char32_t`?", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/121475365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/121478320", "body": "Hmm, I think you did not mean for `if (true)` to make it in here? :)\r\n\r\nAnyway, I just want to make sure my understanding of this code is corrrect. It looks like the `else` clause doesn't work when the rhs is a `Value::STRING`. After a quick perusal of the code, it looks like this (and I am not an expert) is because `{} + \"\"` is not a `HeapExtendedObject` (?? I think ??), so the `countLeaves(self)` immediately returns `1`, which is the same value in this case as the `offset`, so we fail and report that there is no `super` object. So it seems like the `true` branch of this conditional is just making it so that both the lhs and rhs of the operator are objects, which makes it a `HeapExtendedObject`, which causes it to terminate correctly.\r\n\r\nIf (_if!_) this understanding is correct, I do wonder if this is precisely how the VM should work. It might be worth changing the interpreter to match the intuition that the `else` branch should work, or else it might lead to subtle errors later.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/121478320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/121535874", "body": "Just for my education: is there any particular reason to replace the use of `ClonePass` with `clone_ast`? Just because it looks better? Because we like not having class defs in headers?", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/121535874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/121537189", "body": "I think I mentioned this, but my opinion is that checking `x in [...]` makes it fairly easy to create un-performant code. I personally would rather make this more obvious by being super explicit, _e.g._, with a library function (say, `std.find`, or something). Also, since you can't tell the type statically, it seems like desugaring it to a function call would probably be ungainly.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/121537189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/121543819", "body": "If we support `Value::ARRAY`, we might also consider supporting `Value::STRING`, though we'd have to figure out what the semantics of that are (substring perhaps, so that `\"foo\"` \\in `\"bazfoobar\"`).", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/121543819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "anguslees": {"issues": [{"url": "https://api.github.com/repos/google/jsonnet/issues/316", "title": "Safe way to detect whether a native function exists before trying to call it", "body": "Currently calling `std.native(\"noexist\")` explodes with a runtime error.\r\n\r\nA jsonnet library may want to try a native function if it exists, or fall back to some safe/slower alternative.   It would be neat if there was some way to do this.  (This is not hypothetical, we are about to have exactly this situation in ksonnet-lib)\r\n\r\nI suggest adding a `std.hasNative(\"foo\") -> bool` function, but another fine alternative would be to make `std.native(\"noexist\")` just return `null` and leave it up to the jsonnet caller to check/assert the result.  (Trying to call a `null` function will be just as fatal (so no change there), but the error message might be less helpful without an explicit assert.)\r\n\r\nNote a similar problem exists with things like external variables (`std.extVar(\"noexist\")` explodes).  Returning `null` here seems like a good choice - so perhaps we should just do that for `std.native` too for consistency...  Any opinions before I go and propose a PR?", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/249", "title": "wishlist: --yaml-stream should accept similar object structure to --multi", "body": "For composability, I like my jsonnet files to all evaluate to objects, in a style similar to that required for output by `--multi`.  I want to actually output a YAML stream however (for piping to k8s' `kubectl`), so this means I now have \"stub\" jsonnet files everywhere that effectively import a bunch of jsonnet files, smoosh the objects together (possibly overriding some small number of values), and then end with some variant of `[objects[k] for k in std.objectFields(objects)]`.\r\n\r\nThis all works great, except now that new file can't be imported again in the same fashion.  It would be neat if `--yaml-stream` just did something like that last expression (ie: take the object values) when presented with a file that evaluated to an object.\r\n\r\nIf the answer is \"all this output tweaking is getting out of hand, we'd prefer you just write your own wrapper tool that uses the library\" then I understand, and I'm ok with that.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ant31": {"issues": [{"url": "https://api.github.com/repos/google/jsonnet/issues/312", "title": "Remove a field from an object", "body": "I haven't found examples nor a way to easily remove a field from an object. \r\n\r\nI can eventually iterate over all key and skip the one I want to remove to build a new object with dict comprehension, but the object would lost hidden fields. ", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/196", "title": "Relax computed importstr ?", "body": "Do you think it will be possible to use `importstr` with variable? \n\ne.g: \n\n``` yaml\n {\n files: [\n        { \n         file: filepath,\n         content: importstr filepath\n         } for filepath in ['a.txt', 'b.txt', 'c.txt']\n  ],\n}\n```\n\n``` yaml\nsome_function(file):: (\n    local content = importstr file;\n    #process the content\n  )\n```\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "spencels": {"issues": [{"url": "https://api.github.com/repos/google/jsonnet/issues/301", "title": "C#/.NET language bindings", "body": "It would be nice to have C# language bindings for Jsonnet. C# is a great language for web sites and services, and is a very popular language in enterprise. A simple wrapper library could call a libjsonnet DLL via [PInvoke](https://msdn.microsoft.com/en-us/library/55d3thsc.aspx).\r\n\r\n.NET assemblies are cross-language compatible, so the C# bindings could be used in Visual Basic and F#. .NET Core and Mono support would be nice to have since they are cross-platform, but neither have anywhere near the userbase of the standard .NET framework. So this Issue is scoped to only the standard framework.\r\n\r\nDependent on Visual Studio/VC++ support (#300). PInvoke works with any DLL so it's possible to do this using MinGW DLLs, but that makes building more complicated.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/301/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/300", "title": "Support Visual C++/Visual Studio toolchain", "body": "Jsonnet and libjsonnet/libjsonnet++ should be buildable with the Visual C/C++ (VC/VC++) compiler. The project should include build files for a tool that integrates well with Visual Studio (VS) such as MSBuild, CMake, or NMake.\r\n\r\n## Rationale\r\n\r\nMicrosoft's Visual C/C++ compiler is widely used on Windows. It's bundled with and integrated with Visual Studio, probably the most widely used IDE for C/C++ development on Windows. A small amount of development would give a wide community of developers easy access to Jsonnet.\r\n\r\nJsonnet currently supports Windows builds using Cygwin and MinGW, using make as a build system. These don't integrate well with VS. Cygwin .so libraries can't be used by other Windows development tools. VS can use DLLs and possibly even object files from MinGW's gcc, but not g++ as name mangling works differently. VS also doesn't integrate with the GNU toolchain: no make or gcc support (although there may be plugins for this). Developers wishing to use Jsonnet in a VC++ project must either forgo advanced IDE features like code search and debugging, or manually create their own project file.\r\n\r\nVS is also the de facto IDE for .NET development. Supporting VS/VC++ will make writing and maintaining C#/.NET bindings for Jsonnet easier in the future.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/google/jsonnet/commits/30f4739543c662498fdd2f510ad8bf51b0ba1f24", "message": "CMake build and test. (#303)\n\n* CMake build and test.\r\n\r\nNot supported yet:\r\n* Windows\r\n* Emscripten\r\n* Compilers other than GCC and Clang.\r\n\r\n* Fixed CMake issue where GLOBAL_OUTPUT_PATH was a bool.\r\n\r\n* Added CMake build and test to Travis.\r\n\r\n* Ignore .DS_Store\r\n\r\n* Use CMake 2.8.7 as the minimum version.\r\n\r\nTravis does not support CMake 3.0.\r\n\r\n* Fix googletest. CMake stdlib build.\r\n\r\n* Download googletest at CMake generation time. This makes linking\r\nsimpler and should fix the Linux Travis build.\r\n\r\n* Build the jsonnet standard library header (std.jsonnet.h) via CMake.\r\nDoing this in a cross-platform fashion required a small C++ utility to\r\ngenerate the code.\r\n\r\n* Added header files to targets.\r\n\r\nCMake will compile targets without header files listed as files, but it won't recompile when changes are made unless the files are listed as dependencies.\r\n\r\n* Added regression test CMake target.\r\n\r\n* Fix cmake build errors.\r\n\r\n* Add some documentation to the CMake scripts."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/27bf03c1cc0221200735f4a886060626667a5d35", "message": "Added build instructions to readme."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/86618026", "body": "I removed it. Doesn't take THAT long to build.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/86618026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/86635118", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/86635118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/86635146", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/86635146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "copumpkin": {"issues": [{"url": "https://api.github.com/repos/google/jsonnet/issues/276", "title": "Expose `fmt` command over python interface", "body": "It would be nice if I could call `_jsonnet.fmt` in python and have it do the equivalent of the command-line version.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/226", "title": "Access to function \"arity\"", "body": "Once we get a [splat operator](https://github.com/google/jsonnet/issues/203), this functionality will be more useful, but a fun feature in Nix (cc @oconnorr) is the ability to ask a function about what arguments it takes (assuming it uses the attribute pattern matching construct). Given that jsonnet now has named arguments, it seems like a similar primop could work. I'd imagine it would tell you the number of positional arguments and the names of the attributes for named arguments. You could then use that to implement a form of pseudo-dependency-injection like [the one we use in nixpkgs](https://github.com/NixOS/nixpkgs/blob/master/lib/customisation.nix#L100-L112).\n\nSo basically, what I imagine is something like:\n\n```\nlocal foo(x, y=5, z=y) = ...;\n\nstd.functionSpec(foo) => { positional: 1, named: ['y', 'z'] }\n```\n\nIdeal would be some way to access defaults as well. I could imagine that since you're lazy, you could have `named` return an actual object whose values reference the other arguments, but I don't know how that dict interacts with positional arguments today so it might be a little tricky.\n\nP.S: the Haskeller in me is screaming at me for wanting such an obviously evil function but it does seem pretty handy.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/223", "title": "Shorthand for curried functions", "body": "I love partial application, especially in the presence of HOFs, but especially with the [long syntax for lambdas](https://github.com/google/jsonnet/issues/129) it's currently pretty heavyweight to write those. Even if the syntax were more lightweight, I believe the following could be quite nice:\n\n```\nlocal foo(params1)(params2) = ...;\n```\n\nas shorthand for:\n\n```\nlocal foo(params1) = function (params2) ...;\n```\n\nGiven that we already have the `local foo(params) = ...` as sugar for `local foo = function(params) ...`, it seems like iterating the current rule for each group of parentheses would be a nice generalization of the syntax. Same would apply to object \"keys\", as well as anonymous functions.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/222", "title": "Nontrivial string processing can get very slow", "body": "I think it's mostly caused the back-and-forth between lists of characters and strings.\n\nFor example, I have a function that takes a list of strings and \"camelCases\" the list, so that `[\"foo\", \"bar\", \"baz\"]` turns into \"fooBarBaz\". Using that function on lots of strings in my larger evaluation makes the whole thing take about 40s. Replacing it with a simple `function (x) std.join(\"-\", x)` for hyphenated names reduces total evaluation time to 10s, keeping other things equal.\n\nThe camelcase code is as follows:\n\n```\nlocal upper(c): local cp = std.codepoint(c); if cp >= 97 && cp < 123 then std.char(cp - 32) else c;\nlocal capitalize(str): util.upper(str[0]) + std.substr(str, 1, std.length(str) - 1);\nlocal zipWithIndex(f, list): std.makeArray(std.length(list), function (i) f(i, list[i]));\nlocal camelcase(list): std.join(\"\", util.zipWithIndex(function (i, x) if i == 0 then x else util.capitalize(x), list));\n```\n\nNot the most beautiful thing ever, but it works as intended, other than being super slow.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/221", "title": "Friendlier error message for invalid indices", "body": "For example, I got:\n\n```\nRUNTIME ERROR: Array index must be number, got string.\n```\n\nIt would be easier to track down what was wrong if it told me what unexpected string it got\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/220", "title": "Dictionaries with no sense of self", "body": "I find that most of the time I'm writing jsonnet, having an object bring a magic `self` into scope is a bit of a pain. I usually end up having to define a `local realSelf = self` in the outer scope to retain the `self` that I actually wanted.\n\nCan we have raw dictionaries with no magic `self` in scope for those times we just want to operate on a pure datastructure?\n\nThis is _almost_ the opposite of the `rec` keyword in Nix. For context, `rec` brings a dictionary's keys into scope within that dictionary, and the default is to have no access to the equivalent of `self`. I'm not proposing changing the default at this stage, but it would be nice to have a way to opt out.\n\ncc @roconnor, since whenever I mention Nix @sparkprime cc's him anyway \ud83d\ude04 \n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/220/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/203", "title": "A (un)splat operator for named arguments", "body": "What I'd like is for it to behave just like a regular function application, so:\n\n```\nlocal foo(x, y=100, z) = { x: x, y: y, z: z }\n\nlocal bar = {\n  x: 1,\n  y: 2\n}\n\nfoo(**bar) # Should return { x: 1, y: 100, z: 2 }\n```\n\nGoing the other way would also be nice:\n\n```\nlocal foo(**kwargs) = kwargs\n\nfoo(x=6, y=1) # Should return { x: 6, y: 1 }\n```\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/130", "title": "A trace function", "body": "There might well be one already, but I looked under the \"Assertions and Debugging\" section of the stdlib docs and only saw assertions.\n\nBasically, I want a function that is equivalent to\n\n`local const(str, x) = x;`\n\nBut that prints `str` to `stderr` as a side effect when forced. Very handy for debugging odd execution flow and the like.\n\nBoth Haskell and Nix call this function `trace`, but I'm open to other ideas.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/130/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/129", "title": "Lightweight lambda syntax", "body": "One of jsonnet's big selling points is being able to write functions and pass them around as values. Can we have a more lightweight syntax for anonymous functions than the `function (args) ...` one? I catch myself deliberately trying to to avoid writing them due to the syntactic noise.\n\nI don't really have a proposal for the syntax I want, but here are a few lightweight ones (not sure how compatible they are with your current grammar):\n- Scala: `(arg1, arg2) => body` (probably requires nontrivial lookahead and complicates the parser, but is pretty appealing from a human standpoint)\n- Haskell: `\\arg1 arg2 -> body` (all functions are unary, but this is a shorthand for two lambdas)\n- Nix: `arg: body` (all functions are unary)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/119", "title": "Shorthand for \"pattern matching\" on an object parameter", "body": "One thing I really miss when writing jsonnet after writing Nix for a while is the ability to deconstruct an object being passed in as a parameter. For example:\n\n``` nix\n{ a, b, c }: a + b + c\n```\n\nis a one-parameter lambda (arguably the only sort that matters!) that expects the caller to pass it a dict with those three keys in it. You can also set defaults and match on the aggregate.\n\nWould it be possible to get something similar in jsonnet?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/119/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/103", "title": "Expand on the comparison page against Nix", "body": "It feels a little light on details. Given the extreme similarity between the language semantics, I'm curious what the motivation for creating jsonnet was in the first place. Was it a syntactic thing, aiming to be a superset of JSON, or were there other reasons? I see the OO stuff cited, but it's also not particularly hard to embed those semantics in a lazy language like Nix or jsonnet.\n\nMore than an answer on this ticket, I'd appreciate seeing the reasons expanded upon in the comparisons page (for posterity), although I certainly wouldn't object to both.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/183776346", "body": "Those arguments all make a lot of sense. I appreciate you both writing them out for me, and think that a more profound acknowledgment of the similarities to Nix, and the deliberate decision to make jsonnet in spite of those, would add a lot of value to the comparisons page. When I first saw it, my reaction was \"one of these is waaaaay more similar than the others, but the discussion of the differences feels superficial\". I imagine others who already know Nix might have similar reactions.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/183776346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/193358150", "body": "@sparkprime yeah, not looking to omit the fairly heavyweight function keyword (although I would love that too :smile:). I'm fine with the python splat operator, but with the considerations @oconnorr raises. The only thing I could see us losing from treating it as a splat, rather than an explicit dict, is the sort of thing we do fairly often which is to peel a couple of arguments (possibly with defaults) out of a dict being passed in, but also passing the dict through wholesale to another call.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/193358150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/193404891", "body": "oh, sorry.\n\n``` nix\n{\n  foo = { bar, baz, ... }@foo: doSomethingWith [ bar baz ] (someOtherFunction foo);\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/193404891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/196079856", "body": "Makes sense, thanks!\nOn Sun, Mar 13, 2016 at 19:12 Dave Cunningham notifications@github.com\nwrote:\n\n> Closed #127 https://github.com/google/jsonnet/issues/127.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/jsonnet/issues/127#event-588034623.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/196079856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/196348602", "body": "Oh, so the error message is coming from the _parser_? I assumed by the text that it had parsed successfully and that the issue came from a later stage.\n\nIf it's the parser, I'm still a little confused: how is it taking `id(self.x)` as the beginning of a KV mapping production when there is no colon?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/196348602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/196351024", "body": "```\nSTATIC ERROR: test.jsonnet:4:1: Expected token OPERATOR but got \"}\"\n```\n\nThat new error looks far more like what I'd expect to see here (ideally with the meaning of `OPERATOR` as you say). Closing, but still curious what changed in the parser if you feel like writing it out.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/196351024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197026361", "body": "The simplest way to do this in a general way:\n\n`jsonnet -e foo.jsonnet --exec \"function (expr) expr(5, 8)\"`\n\nThe semantics being that the `--exec` parameter is a function that gets passed the expression loaded from the file you specified on the command line.\n\nToday's `jsonnet -e foo.jsonnet` would be equivalent to `jsonnet -e foo.jsonnet --exec \"function (x) x\"`.\n\nCommand-line CPS!\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197026361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197136773", "body": "What would be weird about it? I can't see much downside other than a sense of desugaring cleanliness/redundancy. \n\nScala basically has two syntaxes for lambdas. Although now that I mention it, I don't really like the other one :smile: \n\nA broader question: do you consider jsonnet to be roughly \"set in stone\" at this point? I assumed that the 0. leading version number meant you were still open to significant change, but might be reading too much into that.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197136773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197137307", "body": "Hah, didn't realize that. Yeah, I don't think anyone will be expecting particularly sensible properties around the output, other than it somehow representing what the VM is doing.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197137307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197139753", "body": "My main motivation is for jsonnet files that I want to be able to invoke in isolation and import from other files. If I make a top-level function, I can pass in what I want from the command line, and also pass in what I want from another file.\n\nWith `extVar` and your `--local-var` solution, I can't.\n\nThere is a bit of precedent for this discussion, FWIW. In nixpkgs, pretty much every \"package\" is a top-level function from its dependencies (and other flags) to a \"buildable thing\". We then import that function and pass in its dependencies, basically hooking everything up together a bit like a dependency injection framework might do.\n\nHowever, people (understandably) get a bit sick of writing some parameter names three times: once in the package call-site, once in the list of parameters for the package, and again wherever it's used inside the package expression. This led to an experimental \"import with scope\" primitive being added to the language called `scopedImport`, which basically behaves like `import` except it lets you pass along a scope while importing.\n\nWe haven't really adopted it much because people feel uneasy about magic variables appearing out of nowhere, without being declared as explicit dependencies somewhere prominent. But there are still proponents of it, and I think people are still experimenting with sensible ways to use it.\n\nBasically, for composability's sake, if you do the `--local-var` solution, I'd really like some sort of accompanying primop that has the same effect in code. In the absence of a REPL and debugger, I quite enjoy being able to take individual jsonnet files that I would normally be importing, and evaluate them independently (I wrote a simple python wrapper that does that right now) to see how they behave.\n\nDoes that make sense? Sorry for the wall of text.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197139753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197140706", "body": "Ah, I see. The only benefit, as I see it, is the ability to do far more \"conventional FP\" stuff. As soon as I started doing nontrivial things with jsonnet, I basically wrote a big swath of higher-order functions over objects (think of them as dictionaries, I guess) because I was getting frustrated with object comprehensions and needed to be able to manipulate mappings in ways that don't translate nicely to comprehensions (was also getting sick of seeing `objectFields` all over my code :smile:). What this means in practice is that I have lots of HOFs with lots of `function (foo) someexpr` in them and I find the `function` part fairly distracting. Definitely not a \"slam dunk\" argument, but in general I like to err on the side of \"make it as easy as possible to factor common patterns out\" and doing that today requires a decent amount of the word `function` appearing in my code.\n\nHaving said all that, it's a syntactic issue and is nowhere close to a dealbreaker. It would just simplify a certain coding style, is all.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197140706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197140824", "body": "If the REPL gave me the equivalent of `scopedImport` with your `--local-var` option, I'd be fine without it. Hell, I'm fine with it today (my python shim is 5 lines), but it would be nice to not need anything else.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197140824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197141047", "body": "I've been meaning to poke around the code for a while. I'll see if I can scrounge together some time one of these days and hack at it, if you don't get sick of waiting for me before that :smile: \n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197141047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197141523", "body": "Sure (turns out I lied about the lines)!\n\n``` python\nimport _jsonnet\nimport json\n\ndef import_jsonnet(path, **kwargs):\n    jsonnet_str = '''\n        local args = %s;\n        local fun = import \"%s\";\n        fun(args)\n    ''' % (json.dumps(kwargs), path)\n    json_str = _jsonnet.evaluate_snippet(\"(dyn)\", jsonnet_str)\n    return json.loads(json_str)\n```\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197141523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197142570", "body": "Yeah, definitely. That was actually part of the motivation for my #119, since I'm basically doing that all over the place because of this snippet.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197142570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197142630", "body": "(although obviously if we had a splat operator we wouldn't have to choose)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197142630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197328988", "body": "Okay, so I'm probably overstating the severity somewhat! but this file is also currently mostly \"data\", along with a few functions to process it:\n\n```\n$ bc -l <<< \"$(sed 's/function/L/g' < whoa.jsonnet | wc -c) / $(wc -c < whoa.jsonnet)\"\n.98033891957681864993\n```\n\nTo put it differently, it's 30 instances of the word `function` in a 200ish-line file. Not oppressive, but not my favorite either!\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/197328988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/199539373", "body": "Thanks, makes sense!\nOn Mon, Mar 21, 2016 at 19:44 Dave Cunningham notifications@github.com\nwrote:\n\n> When the parser hits id(self.x) it knows it is in object scope, so it will\n> try to parse the \"key\" which can be of the form id(e, e, e, ...) where e\n> are arbitrary expressions, and then it looks for the colons. But it checks\n> the e's are actually just identifiers. Why not just parse id(x, y, z) --\n> this is just an artifact of the implementaiton -- re-using some code that\n> parses lists of expressions separated by commas, which are used in arrays\n> as well. So the error could still be better if that code was rewritten\n> instead of re-used. Then you'd get an error like \"expected identifier but\n> got self\" or similar.\n> \n> The change in the parser was to stop printing out the 'e' in the case that\n> e was not an identifier. Because there is no ostream<< operator for ASTs,\n> it just printed the pointer.\n> \n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/jsonnet/issues/128#issuecomment-199539161\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/199539373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dewdad": {"issues": [{"url": "https://api.github.com/repos/google/jsonnet/issues/274", "title": "Usage in NodeJS applications as build transform", "body": "I would like to use Jsonnet as a build tool in my NodeJS project. I've tried using some ports to JS with no luck. I have succeeded in using the cmd tool, but then I would need a separate binary for each platform installed in my project sources.\r\n\r\nIs there a way to compile Jsonnet to JavaScript along with the command line interface like the executable build?", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fare": {"issues": [{"url": "https://api.github.com/repos/google/jsonnet/issues/239", "title": "Import callback should separate relative path conversion from returning file content", "body": "When you import a same file twice, the evaluation results are not cached.\n\nWorse: the callback API for import does not distinguish (1) a file lookup step, (2) a file read step and (3) a code evaluation step. Therefore, a second import of the same file will have the callback return new file contents, which makes either cache or reevaluation cumbersome.\n\nFor compatibility with existing API, a SHA checksum for the contents could serve as the key to cache evaluation results.\n\nIn a newer API, the import function would be broken in three steps, and each could be cached separately, so that (1) file lookup returns an absolute file path or URL from the (probably relative) string of the requested import depending on the current file, (2) file read returns the file contents given the path or URL, and (3) code evaluation evaluates the code.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "huggsboson": {"issues": [{"url": "https://api.github.com/repos/google/jsonnet/issues/234", "title": "Syntax for optional array concatenation", "body": "At Box we've often had a need to optionally include elements in an array, e.g.\n\n```\nutil.list([\n        namespace.object(),\n        deployment.object(logtailer),\n        service.object(),\n    ] + logtailer.configMaps\n      + if cluster.isDSV31 then [ logback.configMap() ] else []\n)\n```\n\nWhile the current approach is effective it has two downsides:\n1. It isn't super readable.\n2. The tendency is to prepend or append the items so you don't have to break up the list to insert an array.\n\nEither some guidance on how best to handle cases like this, or an extension to the syntax would be nice.  I talked to @sparkprime yesterday in slack and he spun up a suggestion to talk about:\n\n```\nutil.list([\n        namespace.object(),\n        configMap for configMap in logtailer.configMaps,\n        logback.configMap() if cluster.isDSV31,\n        deployment.object(logtailer),\n        service.object(),\n])\n```\n\nWhich is much more readable and deals with #1 and #2.\n\nWe began talking about potential implementations for this, and explored the idea of an undefined type/value which stays in the list until render time (and comparison) at which point it is removed.  That idea has a lot of merit and would even allow functions to return undefined thereby pushing certain branching logic down, but there are obviously a lot of interesting corner cases.\n\nDave also mentioned that if such a proposal went through he'd probably want to move from\n{ [if false then \"foo\"]: \"bar\" } to { foo: \"bar\" if false }.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/234/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/230", "title": "Formatter should handle [{...}] better", "body": "jsonnet fmt changed the following code from:\n\n```\n                        volumeMounts: [\n                            {\n                                name: \"deployment-config\",\n                                mountPath:\n                                    if cluster.isLocal then\n                                        \"/box/deployment-config\"\n                                    else\n                                        \"/box\"\n                                ,\n                            },\n                        ],\n```\n\nto:\n\n```\n                        volumeMounts: [\n                            {\n                                name: \"deployment-config\",\n                                mountPath:\n                                    if cluster.isLocal then\n                                        \"/box/deployment-config\"\n                                    else\n                                        \"/box\",\n                                },\n                        ],\n```\n\nwhich is mis-indented.  My personal taste would have had the whole thing turned to:\n\n```\n                        volumeMounts: [{\n                            name: \"deployment-config\",\n                            mountPath:\n                                if cluster.isLocal then\n                                    \"/box/deployment-config\"\n                                else\n                                    \"/box\",\n                        }],\n```\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/google/jsonnet/commits/768a0e0c8b1c4d55d099aff6d98d564dcafbda7c", "message": "Add stdlib md5 function"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "benley": {"issues": [{"url": "https://api.github.com/repos/google/jsonnet/issues/227", "title": "shorthand for deep field overrides", "body": "``` jsonnet\n\nlocal foo = {\n  a: { b: { c: { d: 1234 } } },\n  e: 1\n};\n\nfoo + { a.b.c.d: 999 } \n```\n\nIt would be really cool if the above (or something along those lines) worked and evaluated to:\n\n``` jsonnet\n{\n  a: { b: { c: { d: 999 } } },\n  e: 1\n}\n```\n\nTo achieve the same in today's jsonnet you would have to write:\n\n``` jsonnet\nlocal foo = {\n  a: { b: { c: { d: 1234 } } },\n  e: 1\n};\n\nfoo + { a+: { b+: { c+: { d: 9999} }\n```\n\nI don't know how difficult and/or sane this would be to implement, but there is a similar construct in Nix that is quite useful :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/227/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/149", "title": "add manifestToml(v) function", "body": "It should be fairly easy to write a TOML output function; the syntax is simple and it maps unambiguously to json objects.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/149/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/google/jsonnet/commits/2176ba2da03d05f89337d257d2f254bae56f0bed", "message": "Python 3 compatibility"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/5f9975104137b08c932145582b9c40348d5961c9", "message": "Fix the bazel python build\n\nFor some reason `sysconfig.get_path(\"include\")` incorrectly returns\n/usr/local/include/python2.7 on Debian (and probably Ubuntu) systems.\nFortunately, `distutils.sysconfig.get_python_inc()` seems to do the\nright thing across platforms."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/1d56b030c4361fb931c4e9e634546ef2a9500d39", "message": "Use /bin/bash shebang since these scripts require it"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/43b18026739dde4ff2c3d02080515cf3d1c7688c", "message": "Handle verbatim strings in FixIndentation, tweak comments & docs"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/8a6b970fcc99cdaf84f0ae15d0ce58a40b88a416", "message": "Implement verbatim string literals\n\nFixes #246"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/941e11723be44c8647107ce43988d5fb2dfd7437", "message": "Fix Bazel tests"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/960cdb2d38545e0d9c0faa7161e5823971325ef9", "message": "Bazel rules for the python module\n\nThe python_repository repo rule digs up the local system's Python\nheaders and builds _jsonnet.so with them. Any downstream users of this\nrepo could easily supply a different python location or version as\nneeded.\n\nI also rearranged the Python tests so they could be hooked in with both\nthe setup.py test command and a bazel py_test rule."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/163095256", "body": "autotools is such a weird thing to set up, but I've gotten a decent start on it now.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/163095256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/163115064", "body": "At least it ought to be fairly low-maintenance once it's set up :-)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/163115064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/163465503", "body": "It would replace this.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/163465503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/163465677", "body": "I have the autotools stuff working now, but haven't worked out how to get the tests back into it yet.  Almost there.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/163465677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/163476118", "body": "To be completely honest I didn't give that a lot of consideration; it's just because I've used autotools a bit in the past and it seems like the universal lowest-common-denominator build system.  Personally I'd prefer to use Bazel, but having a generic `./configure;make;make install` build method would be good for user adoption and distro packaging and such.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/163476118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/163476787", "body": "libtool does make the autotools build pretty slick though; it correctly builds shared libraries with pkgconfig metadata on linux, macos, and probably a bunch of other platforms without further fiddling.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/163476787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/164138726", "body": "I'll get back to the autotools project in a few days, I think.  Might also try doing it with cmake to see how that goes.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/164138726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/164196093", "body": "Heh, in that case [Repobuild](https://github.com/chrisvana/repobuild) might be an appealing build system!  (I'm not being serious, but you may find it amusing: it's like bazel, but uses JSON instead of a python-like dsl)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/164196093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/183981497", "body": "Is there code shared anywhere for that earlier nix-based jsonnet implementation?  I wouldn't expect it to be up to the current spec or anything, I just think it would be interesting to read over.\n\nAlso I'm particularly fascinated by that paper about GCLViewer; I had no idea that there was anything publicly released that discussed GCL!  I have been contemplating trying to implement something similar for jsonnet, but at the moment I'm not entirely sure where to begin with such a project.  \n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/183981497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/93108329", "body": "Done; pretty much used your verbiage verbatim.  (ha! verbatim! ... I'll show myself out)", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/93108329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/93108343", "body": "Done.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/93108343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/93108412", "body": "Done, I think.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/93108412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mikedanese": {"issues": [{"url": "https://api.github.com/repos/google/jsonnet/issues/206", "title": "it should be possible to load native extensions from an object file at runtime", "body": "Similart to --jpath, we need an --npath that is search for symbols that match a convention, then dlopen and register them as native extensions. Lua supports a similar feature.\n\nhttps://www.lua.org/pil/8.2.html\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/202", "title": "native extensions should support returning all jsonnet types.", "body": "numbers, objects, arrays, functions?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/200", "title": "C api should expose jsonnet types", "body": "To embbed jsonnet in an application as a config language, you often want it to produce a traversable structure. Right now you can evaluate and then reinterpret the char\\* with a different json parser which is painful:\n\nhttps://github.com/mikedanese/overlay/blob/master/main.c#L195-L206\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/109", "title": "Publish binary releases", "body": "Preferably nightly and at every tag for mac osx and linux.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/107", "title": "stdlib: add support regexp match and replace for strings", "body": "Would be easy to implement as a builtin.\n\nhttps://github.com/google/re2\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/jsonnet/pulls/111", "title": "RFC: implement unit testing framework", "body": "Supports tests of type function, and \"table tests\". Output looks like:\n\n```\nRunning tests/arith_bool.jsonnet...\n--- PASS 'Test !'\n        pass    'case 0'\n        pass    'case 1'\n        pass    'case 2'\n        pass    'case 3'\n--- PASS 'Test !='\n        pass    'case 0'\n        pass    'case 1'\n        pass    'case 2'\n        pass    'case 3'\n--- PASS 'Test &&'\n        pass    'case 0'\n        pass    'case 1'\n        pass    'case 2'\n        pass    'case 3'\n--- PASS 'Test =='\n        pass    'case 0'\n        pass    'case 1'\n        pass    'case 2'\n        pass    'case 3'\n--- PASS 'Test if'\n        pass    'case 0'\n        pass    'case 1'\n--- PASS 'Test no implicit conversions'\n        pass    'case 0'\n        pass    'case 1'\n--- PASS 'Test shortcut semantics'\n        pass    'case 0'\n        pass    'case 1'\n--- PASS 'Test ||'\n        pass    'case 0'\n        pass    'case 1'\n        pass    'case 2'\n        pass    'case 3'\n\nRunning tests/merge.jsonnet...\n--- PASS 'Test std.mergePatch'\n        pass    'case 0'\n        pass    'case 1'\n        pass    'override with null'\n        pass    'case 3'\n        pass    'case 4'\n        pass    'case 5'\n        pass    'case 6'\n        pass    'case 7'\n        pass    'case 8'\n        pass    'case 9'\n        pass    'case 10'\n        pass    'case 11'\n        pass    'case 12'\n        pass    'case 13'\n\nOK\n```\n", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/170142169", "body": "It looks like the pseudocode algorithm for applying a patch did not change between the three RFC revisions so the difference must be in the http parts.\n\nNice! this seems to work:\n\n```\n    merge(target, patch)::\n        if std.type(patch) == \"object\" then \n            local target_object =\n                if std.type(target) == \"object\" then target else {};\n\n            local target_fields =\n                if std.type(target_object) == \"object\" then std.objectFields(target_object) else [];\n\n            local null_fields = [k for k in std.objectFields(patch) if patch[k] == null];\n            local both_fields = std.setUnion(target_fields, std.objectFields(patch));\n\n            {\n                [k]:\n                    if !std.objectHas(patch, k) then\n                        target_object[k]\n                    else if !std.objectHas(target_object, k) then\n                        patch[k]\n                    else\n                        std.merge(target_object[k], patch[k]) tailstrict\n                for k in std.setDiff(both_fields, null_fields)\n            }\n        else\n            patch,\n```\n\nIt fixes all extra nulls except for the one in the last test case.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/170142169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/170158924", "body": "I think that is equivalent since std.merge(null, patch[k]) evaluates to patch[k](always hits the else). The problem is with the else return patch branch. To conform to the spec we would have to walk the patch object and strip out all explictly null fields.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/170158924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/170159637", "body": "I see that it is interpreted as a declaration and not a reassignment which is strange from my naive perspective as it seems like the language then must allow redecleration within a scope just not recursive decleration.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/170159637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/170182187", "body": "Also adding a \"grammar\" to https://github.com/github/linguist would give syntax highlighting in github file view.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/170182187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/171014748", "body": "Ok I gotcha. I've updated the patch.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/171014748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/171539777", "body": "@sparkprime addressed comments and build is all green\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/171539777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/180063220", "body": "Also weird:\n\n``` javascript\n{\n    identity(obj)::\n        function(obj) obj,\n\n    addOne(obj):\n        obj + 1,\n\n    bind(func1, func2)::\n        function(obj) func2(func1(obj)),\n\n    \"1\": self.bind(self.identity, self.addOne)(1),\n    \"2\": self.bind(self.addOne, self.identity)(1),\n}\n```\n\ncase 1 gives:\n\n```\nRUNTIME ERROR: Binary operator + requires matching types, got function and double.\n        libmonad.jsonnet:6:9-14 function <func2>\n        libmonad.jsonnet:9:23-39        function <anonymous>\n        libmonad.jsonnet:11:10-49       object <anonymous>\n        During manifestation\n```\n\ncase 2 gives:\n\n```\nRUNTIME ERROR: Couldn't manifest function in JSON output.\n        libmonad.jsonnet:(1:1)-(16:1)   object <anonymous>\n        During manifestation\n```\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/180063220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/180079352", "body": "ya that's definitely what I meant. thanks. Both of these still return an error\n\n``` javascript\n{\n    identity(obj)::\n        obj,\n\n    addOne(obj):\n        obj + 1,\n\n    bind1(func1, func2)::\n        function(obj) func2(func1(obj)),\n\n    bind2(func1, func2)::\n        function(obj)\n            local tmp1 = func1(obj);\n            local tmp2 = func2(tmp1);\n            tmp2,\n\n    \"1\": self.bind1(self.identity, self.addOne)(1),\n    \"2\": self.bind2(self.identity, self.addOne)(1),\n}\n```\n\nError:\n\n```\nRUNTIME ERROR: Couldn't manifest function in JSON output.\n        libmonad.jsonnet:(1:1)-(16:1)   object <anonymous>\n        During manifestation\n```\n\nIs that correct?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/180079352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/180081947", "body": "and a third:\n\n``` javascript\n...\n    \"3\": self.bind2(self.identity, self.addOne)(1)(1),\n}\n```\n\ncalling what the previous error said was a function, results in:\n\n```\nRUNTIME ERROR: Only functions can be called, got double\n        libmonad.jsonnet:19:10-53       object <anonymous>\n        During manifestation\n```\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/180081947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/180087308", "body": "Awesome! Works great. Thanks for the extra pair of eyes.\n\n``` console\n$ cat libmonad.jsonnet \n{\n    identity(obj)::\n        obj,\n\n    addOne(obj)::\n        obj + 1,\n\n    bind1(func1, func2)::\n        function(obj) func2(func1(obj)),\n\n    bind2(func1, func2)::\n        function(obj)\n            local tmp1 = func1(obj);\n            local tmp2 = func2(tmp1);\n            tmp2,\n\n    \"1\": self.bind1(self.identity, self.addOne)(1),\n    \"2\": self.bind1(self.addOne, self.identity)(1),\n    \"3\": self.bind2(self.identity, self.addOne)(1),\n    \"4\": self.bind2(self.addOne, self.identity)(1),\n}\n$ jsonnet libmonad.jsonnet\n{\n   \"1\": 2,\n   \"2\": 2,\n   \"3\": 2,\n   \"4\": 2\n}\n```\n\nSo the error was coming from trying to serialize addOne where it was declared since it wasn't marked private...\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/180087308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/181537461", "body": "I added parsing support here:\n\nhttps://github.com/google/jsonnet/commit/26bb52e7d7b9d6d842168cdd1fbcf4fa39e9f8e5\n\nI'm deciding whether this should be implemented in the vm or desugarring\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/181537461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/185422593", "body": "Just pushed support for `[:4]` and `[4:]` notations\n\n``` console\n$  jsonnet git:(slice) \u2717 cat exp.jsonnet \nlocal arr = std.range(0, 10);\n{\n    foo: arr[5:7],\n    bar: arr[:7],\n    baz: arr[5:],\n}\n$  jsonnet git:(slice) \u2717 ./jsonnet exp.jsonnet \n{\n   \"bar\": [\n      0,\n      1,\n      2,\n      3,\n      4,\n      5,\n      6\n   ],\n   \"baz\": [\n      5,\n      6,\n      7,\n      8,\n      9,\n      10\n   ],\n   \"foo\": [\n      5,\n      6\n   ]\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/185422593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/185427593", "body": "This doesn't support step parameter yet.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/185427593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/185885743", "body": "PCRE seems to be implemented in many languages. Perhaps it would be better to implement this as a native extension (#108) to the language and not part of the core.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/185885743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/187338263", "body": "Ok, I need to implement the python behavior in std.slice now.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/187338263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/187996024", "body": "I've implemented python behavior for all positive value (index, end, step) inputs. I think it's reasonable to support negative inputs later on.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/187996024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/188035482", "body": "@sparkprime addressed all review comments.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/188035482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/190367453", "body": "Tests can also be written as functions. e.g. these are valid:\n\n``` python\nlocal expect = (import \"stdlib/truth.jsonnet\").expect;\nlocal expectations = (import \"stdlib/truth.jsonnet\").expectations;\n\n{\n    \"Test test function passing\": function()\n        local a = 1 + 2;\n        expectations([\n            expect()\n                .that(a)\n                .hasType(\"number\"),\n            expect()\n                .that(a)\n                .isEqualTo(3),\n        ]),\n\n    \"Test test function failing\"():\n        local a = 1 + 2;\n        expect()\n            .that(a)\n            .isEqualTo(4),\n}\n```\n\nOne huge drawback with this approach is that it's still impossible to test routines that throw exceptions\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/190367453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/190832663", "body": "FIxed\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/190832663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/191044469", "body": "My comment would be that it seems like a lot of change (and modifies very internal components). Unlike multi this could be implemented in a couple lines of jsonnet and -S:\n\n```\n{\n    yamlStream(arr)::\n        std.foldl(function(old, obj) old + \"---\\n%s\\n...\\n\" % [obj], arr, \"\"),\n}\n```\n\nThe requirement seems very similar to the requirement to output .ini, but the implementation and api is quite different.\n\nI'll call a \"finalizer\" a single final function that get's called on the output of a jsonnet program. I've seen three use cases for \"finalizers\" so far:\n1. yamlStream\n2. manifestIni\n3. truth.run (the unit testing main).\n\nI'm sure there will be more. Is it worth it or possible to design a reasonable and generic API for finalizers? That said, if the api existed, it would be easy to move the cli API over to it and even the c API deprecating the functions added here.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/191044469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/195159283", "body": "It looks easy to update: https://github.com/Homebrew/homebrew/blob/master/Library/Formula/jsonnet.rb\n\nKubernetes distributes (mostly?) static binaries for various architecture {windows,darwin,linux}x{i386,x86_64} of kubectl from the github release page. https://github.com/kubernetes/kubernetes/releases\n\nI like static binary distribution because it works when all else fails.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/195159283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/199490676", "body": "If I understand what is proposed, I think that the top level function would be useful for implementing the unit testing framework, yaml stream, a k8s object templater, etc... It makes the (input -> function -> output) flow a little bit cleaner. Is this generalizable to a custom manifestation/finalizers?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/199490676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/199874339", "body": "I'm running the most recent release. It looks like std.jsonnet.h is not included in the sandbox.\n\n``` console\n$ bazel version\nBuild label: 0.2.0\nBuild target: bazel-out/local_linux-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\nBuild time: Tue Feb 23 13:08:29 2016 (1456232909)\nBuild timestamp: 1456232909\nBuild timestamp as int: 1456232909\n$ lsb_release -a\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu 15.10\nRelease:        15.10\nCodename:       wily\n$ uname -a\nLinux ubuntu 4.2.0-30-generic #36-Ubuntu SMP Fri Feb 26 00:58:07 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\n```\n\nlooking at the previous rule, it seems like it should have worked...\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/199874339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/200534106", "body": "have we discussed standardizing on a .clang-format before?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/200534106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53678562", "body": "Python slicing seems crazy complex: \n\nhttps://github.com/rfk/pypy/blob/master/pypy/objspace/std/listobject.py#L1362-L1382\n\nI'll look into duplicating the behavior exactly into std.slice()\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53678562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53678611", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53678611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53678633", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53678633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53678786", "body": "Unrolled.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53678786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53678875", "body": "too bad JUnit is taken :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53678875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53880217", "body": "@sparkprime This is breaking with:\n\n```\nFAIL (exit code): slice.sugar.jsonnet\nThis run's output:\nSTATIC ERROR: slice.sugar.jsonnet:32:21-22: Not a unary operator: ::\n```\n\nI'll investigate what is going on but it's not immediately obvious to me.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53880217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53888120", "body": "Ok, fixed with https://github.com/mikedanese/jsonnet/blob/slice/core/parser.cpp#L1201-L1208 and enabled the test.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53888120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53888309", "body": "I can do it without push() but it requires a whole nother branch which feels gross\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53888309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53889411", "body": "O(n^2) :( but would rather optimize this in the vm for array concatinations where one side is not used again.\n\n``` console\n$ jsonnet git:(slice): cat exp.jsonnet \nstd.range(0, std.extVar(\"vars\").count)[2:100000000000:2]\n$ jsonnet git:(slice): time ./jsonnet --code-var vars='{\"count\": 1000}' exp.jsonnet > /dev/null \n./jsonnet --code-var vars='{\"count\": 1000}' exp.jsonnet > /dev/null  0.25s user 0.00s system 99% cpu 0.258 total\n$ jsonnet git:(slice): time ./jsonnet --code-var vars='{\"count\": 10000}' exp.jsonnet > /dev/null                                                                                             \n./jsonnet --code-var vars='{\"count\": 10000}' exp.jsonnet > /dev/null  1.98s user 0.01s system 99% cpu 1.990 total\n$ jsonnet git:(slice): time ./jsonnet --code-var vars='{\"count\": 100000}' exp.jsonnet > /dev/null\n./jsonnet --code-var vars='{\"count\": 100000}' exp.jsonnet > /dev/null  46.23s user 0.30s system 99% cpu 46.594 total\n```\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53889411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53976958", "body": "I'm curious about implementing the internal representation with a persistent data structure. Arrays could still be copy on write minus the deep copy.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53976958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54519866", "body": "It's not possible to run the formatter on these tests as it denatures the test.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54519866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54520450", "body": "Ah ok. Updated .fmt.golden. It looks like you made some changes but manually reverted anything that would have modified the tests so lgtm.\n https://github.com/google/jsonnet/commit/17c59acbfd455e42ab6bae0e5517157be4bf0b90#diff-5dd5fae04796372f66a075da6ff11ffc\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54520450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/66806314", "body": "protoc?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/66806314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "brbbs": {"issues": [{"url": "https://api.github.com/repos/google/jsonnet/issues/195", "title": "Create output directories if they do not exist", "body": "I'd like to be able to invoke jsonnet like: `jsonnet -o foo/bar.json -e \"{ foo: 'bar' }\"` and have it create the `foo/` directory if it does not already exist. I'd like this to apply to multi-file output invocations as well. My use case is to have a file of the form:\n\n```\n{\n  'a.json': { /* snip */ },\n  'subdir/b.json': /* ... */,\n  'subdir/c.json': /* ... */,\n}\n```\n\nbut I'd like to be able to invoke `jsonnet -m` without having to know which subdirectories to create beforehand.\n\nCurrently, both invocations fail with the error:\n\n```\n$ jsonnet -o foo/bar.json -e \"{ foo: 'bar' }\"\nWriting to output file: foo/bar.json: No such file or directory\n$ jsonnet -m . foo.jsonnet\n./a.json\n./subdir/b.json\nOpening output file: ./subdir/b.json: No such file or directory\n```\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/google/jsonnet/commits/1378fa9f2eb563af2eb807b7b123ef9f90d2e0e9", "message": "Add fmt test for toplevel binary expression"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "davidzchen": {"issues": [{"url": "https://api.github.com/repos/google/jsonnet/issues/143", "title": "Write .clang-format for C++ style", "body": "Related to #142, add a .clang-format that codifies the C++ style for Jsonnet.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/142", "title": "Write C++ style guide documentation", "body": "Let's write a doc specifying the C++ style used for Jsonnet and link it in both CONTRIBUTING.md and http://jsonnet.org/contributing.html.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/141", "title": "Standalone Jsonnet integration test suite", "body": "Now that a pure-Go implementation of Jsonnet is being developed (google/go-jsonnet) is being developed, it would be a good idea to make it possible to share the Jsonnet's rich test suite across different implementations.\n\nPerhaps we can move the test suite into a separate repo and set it up so that it can be used to test any Jsonnet implementation that exposes the same command line interface. It should be possible to set this up using Bazel. We already have a [`jsonnet_to_json_test`](https://github.com/bazelbuild/rules_jsonnet#jsonnet_to_json_test) rule that can be used to run all of the integration tests aside from the formatter tests, for which it would be easy to write a test rule for. We can then use Bazel's external repository mechanism to include this test suite and add the test targets.\n\nHere is how I imagine this will work:\n\nSay that we move the test suite to the repository google/jsonnet-test-suite. We can add a [Skylark macro](http://bazel.io/docs/skylark/macros.html) called `jsonnet_test_suite` that would take a label for a Jsonnet command line binary as an argument. When this macro is used, it will add a bunch of `jsonnet_to_json_test` test targets that would be run with the given Jsonnet binary.\n\nThen, in `google/jsonnet` and `google/go-jsonnet`, we can include the `google/jsonnet-test-suite` repository by adding the following to the WORKSPACE file:\n\n``` python\ngit_repository(\n    name = \"jsonnet_test_suite\",\n    remote = \"https://github.com/google/jsonnet-test-suite\",\n    tag = \"v0.0.1\",\n)\n```\n\nSay that `//cmd:jsonnet` is the build label for the `jsonnet` binary. Then, we can add a BUILD file under the `test_suites` directory with the following:\n\n``` python\nload(\"@jsonnet_test_suite//:test_suite.bzl\", \"jsonnet_test_suite\")\n\njsonnet_test_suite(\n    name = \"test_suite\",\n    jsonnet = \"//cmd:jsonnet\",\n)\n```\n\nThen, the entire test suite can be run against the given jsonnet binary with `bazel test //test_suite:all`.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/137", "title": "Set up Bazel build for Travis", "body": "Currently, we are only running make test in the Travis build.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/137/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/126", "title": "Mechanism for catching errors for tests", "body": "From our discussion on Tuesday: in general, we should not add a catch mechanism to the language, but having a specific mechanism such as `assertThrows` or `assertError` would be useful for testing.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/126/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/125", "title": "Use a library for argument parsing", "body": "I think using a library such as getopt or gflags for argument parsing can make the code in the jsonnet tool a lot cleaner. We would probably want to go with getopt since gflags has a slightly different syntax for flags (getopt --long-opt vs gflags --long_opt).\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/122", "title": "Documentation generator for Jsonnet", "body": "Since we are storing comments in the AST, we can make use of this to build a documentation generator for Jsonnet, such as for documentation for functions.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/118", "title": "Jsonnet Style Guide", "body": "Since we have the reformatter, let's also write a style guide.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/83", "title": "Add support for Jsonnet to Pygments", "body": "It would be nice to add Jsonnet highlighting to Pygments so that we can have syntax highlighting for Jsonnet code in Markdown fenced code blocks in static site generators such as Jekyll, which is also used for GitHub pages:\n\n<pre>\n```jsonnet\n{\n  local Foo = {\n    bar: \"Some jsonnet code here\"\n  },\n  baz: Foo {\n    bar: \"nicely syntax highlighted\"\n  }\n}\n```\n</pre>\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/83/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/64", "title": "Java bindings", "body": "It would be great to have Java bindings for Jsonnet. I'm thinking let's create JNI bindings as an initial implementation.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/64/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/43", "title": "Add GitHub Linguist config for Jsonnet", "body": "We should add an entry to [github/linguist](https://github.com/github/linguist) for Jsonnet so that GitHub can 1) add proper syntax highlighting for displaying .jsonnet files and 2) include them in the language stats for repositories.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/43/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/98063058", "body": "FYI apparently GitHub's policy is that there needs to be a few hundred samples before they would be willing to accept a patch to Linguist. [Bazel's](https://github.com/google/bazel/issues/72) [pull request](https://github.com/github/linguist/pull/2348) was unfortunately rejected for the time being for this reason.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/98063058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/104555094", "body": "It would be great to add a [Bazel](http://bazel.io) BUILD file as well.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/104555094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/139001413", "body": "Sounds good to me. Mind if I go ahead and take this?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/139001413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/139816207", "body": "I am not sure whether using `-o` for this is better. In general, using `-o` when outputting a single file allows one to rename the output file to something other than the default. However, for multiple file output, the basenames of the files cannot be changed, and the only thing that can be easily changed is which directory the files are written to. I know that adding yet another flag is not ideal, but I think simply setting a directory for multiple file output is easier to do than listing all the output files on `-o`.\n\nAnother option would be to have `-m` take the output directory an optional argument. What do you think?\n\nBy the way, I am not sure what is causing the CI failures. I am unable to reproduce locally using `make test`.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/139816207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/139962752", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/139962752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/140239135", "body": "Resolved merge conflicts.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/140239135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/140654255", "body": "Here is the latest Jsonnet usage in GitHub: https://github.com/search?utf8=\u2713&q=extension%3Ajsonnet+NOT+nothack&type=Code&ref=searchresults\n\nWith over 300 files, we should now be meeting GitHub's criteria for adding Jsonnet to Linguist.\n\nI have created a patch to Linguist that I will run through the proper channels before sending the PR. In the meantime, according to the [Linguist CONTRIBUTING.md](https://github.com/github/linguist/blob/master/CONTRIBUTING.md), the grammar must be in its own repository since it will be included by Linguist as a Git submodule.\n\nWe will need to move the language-jsonnet Atom syntax package you added into its own repository before we can submit the PR to Linguist.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/140654255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/140930438", "body": "Though from github/linguist#2348:\n\n> We normally require hundreds of samples before adding support for an extension\n\nI'd be fine with waiting until we have some more usage before sending a PR.\n\nIn comparison, there are [546 .capnp files](https://github.com/search?p=3&q=extension%3Acapnp+NOT+nothack&ref=searchresults&type=Code&utf8=%E2%9C%93), though  these files are spread out over more repos, and capnp was added along with a bunch of other languages in bulk in github/linguist#1714.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/140930438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/140953245", "body": "Are you referring to the language-jsonnet repo that contains the Atom syntax files?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/140953245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/140973410", "body": "Yes, we just need to move the contents of language-jsonnet into the repo. Then, in my PR for Linguist, I just add the repo to .gitmodules: https://github.com/davidzchen/linguist/commit/51f65422bc2fae4dec78ef39d715e4144cfa0680\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/140973410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/140976603", "body": "By the way, do you have a preference for the color to use for Jsonnet in GitHub repository language stats?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/140976603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/141017722", "body": "Not in particular. It's usually pretty arbitrary, though some languages pick colors that match their logo color. Here's a sample of some of the colors used by different languages: https://github.com/ozh/github-colors\n\nI'm currently using `#00BCD4` (cyan) in my patch.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/141017722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/141205753", "body": "Sounds good to me.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/141205753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/144515008", "body": "Rebased and resolved merge conflicts.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/144515008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/144976420", "body": "Sounds good to me.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/144976420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/147259546", "body": "Nice! :D\n\nPerhaps I should also add a `jsonnet_test` Bazel rule since it is possible to write tests in Jsonnet, such as the [`unicode.jsonnet`](https://github.com/google/jsonnet/blob/master/test_suite/unicode.jsonnet) test you just added. :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/147259546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/148305382", "body": "I opened this because it would give me a better idea of what the Java API should look like (see #64).\n\nA few ideas I had in mind for the C++ API are:\n- Simpler interface for returning output strings for `_multi` APIs, such as `std::vector<std::string>`.\n- Using `std::function` for the import callback\n- Using `std::string` instead of `char*`\n\nHere is what I have so far: https://github.com/davidzchen/jsonnet/blob/cpp/cpp/jsonnet.h\n\nCurrently, this is just a wrapper around the libjsonnet C API. In the future, it might be nice to refactor some of the implementation details in `libjsonnet.c` for evaluating Jsonnet files/snippets and move them into the core C++ implementation.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/148305382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/163473758", "body": "Just wondering, what is the motivation for choosing Autotools over CMake?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/163473758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/164366147", "body": "From Repobuild's README:\n\n> Similar to Google's BUILD file system of old (gconfig + make)\n\nNow that's a bit of old history. :)\n\nSimilarly, Kythe also had its own custom [Campfire](https://github.com/google/kythe/blob/75b9fc4ec6e85bd0c30c89ae9474444003aa62f9/buildtools/CAMPFIRE) build system, which was also similar to BUILD but used JSON, before they fully switched to Bazel.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/164366147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/164920840", "body": "I have rebased this patch and added pages to redirect users visiting the pages at the old URL to the new locations for the pages. I have all the pages locally.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/164920840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/170441822", "body": "#23 tracks adding Jsonnet support to Linguist, and we sent a pull request github/linguist#2653, but at the time, there were not enough Jsonnet files in GitHub repositories.\n\nPerhaps we should revisit that PR in the near future.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/170441822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/173827285", "body": "Could we make use of [cctz](https://github.com/google/cctz) for this?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/173827285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/191168714", "body": "What is the use case for this?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/191168714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/193988558", "body": "To recap from the offline discussion, @oconnorr brought up the point that having negative indices often results in error-prone code and that it would be better to not support them. I think that is a valid point and am also in favor in not adding negative indices.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/193988558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/194585199", "body": "For mac, I think homebrew is sufficient until somebody requests macports.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/194585199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/196599211", "body": "One thought about this:\n\nCurrently, we support both Python-style comments (`#`) and C/C++/JavaScript-style comments (`//` and `/* */`). While Jsonnet is a superset of JSON, which derives from JavaScript, we also borrow from Python quite a lot.\n\nHowever, inline documentation in Python documentation generators is very different than those for languages with C-family syntaxes. For example, Python docstrings use a special string literal `\"\"\"` (see [epydoc documentation](http://epydoc.sourceforge.net/manual-docstring.html)). On the other hand, inline documentation for C-family languages and JavaScript use special syntax within comments (see [Doxygen](https://www.stack.nl/~dimitri/doxygen/manual/docblocks.html) and [various JavaScript documentation generators](http://www.fusioncharts.com/blog/2013/12/jsdoc-vs-yuidoc-vs-doxx-vs-docco-choosing-a-javascript-documentation-generator/)).\n\nJsonnet has its own block string syntax (`|||`) similar to Python's multi-line string literal. However, from what I understand, that might not be very suitable for inline documentation. Comments seem to be the better approach, and since we are already storing comments in the AST, generating documentation from them should be relatively straightforward.\n\nIf we are generating documentation from comments, I propose that we adopt an existing syntax, such as the following which is one of the most common used by JavaScript, Java, and many C++ projects:\n\n```\n{\n  /**\n   * Returns whether the string a is prefixed by the string b.\n   *\n   * @param a The input string.\n   * @param b The prefix.\n   * @return true if string a is prefixed by the string b or false otherwise.\n   */\n  startsWith(a, b):\n    if std.length(a) < std.length(b) then\n      false\n    else\n      std.substr(a, 0, std.length(b)) == b,\n}\n```\n\nOn a similar note, I am also thinking that it would be better to only support either Python-style or C/C++-style comments rather than both in order to keep the language as simple and code as consistently as possible, but that can be a separate discussion.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/196599211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/196752148", "body": "This PR is ready for review. I have just added some unit tests for the C++ API.\n\nSince the `jsonnet_jpaths_add` API has been added, and the primary use case of the import callback has been to add directories to the import path, I am leaving out the import callback from this API for now.\n\nCurrently, the C++ API is a simple wrapper around the C APIs. This is not ideal since Jsonnet itself is implemented in C++. It would be better to refactor common logic out of libjsonnet.c and expose both C and C++ APIs. This way, we would able to also expose classes such as [FmtOpts](https://github.com/google/jsonnet/blob/master/core/formatter.h) in the C++ API, which would be more suitable than having separate methods for setting each formatter option.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/196752148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/198096891", "body": "Agreed. Generating documentation only makes sense for public APIs, such as the functions provided by the Jsonnet stdlib.\n\nCan you elaborate on the copy-pastability use case? Is this mainly for transitioning from other configuration languages to Jsonnet?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/198096891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/199480216", "body": "Rebased and addressed review comments.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/199480216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/199728318", "body": "This PR looks good but what's odd is that `bazel build //cmd:jsonnet` works fine for me with Bazel at HEAD (as in Bazel HEAD). Which version of Bazel are you running and on which OS?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/199728318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/200012836", "body": "Interesting. This reproduces on Linux but not on OS X. Let's go ahead and merge these changes. I'll try to isolate a test case and send a bug report to Bazel.\n\nLGTM\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/200012836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/200038662", "body": "I'll set that up :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/200038662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/200591890", "body": "I don't think we have, but I also think it is a good idea to standardize on an established style guide and `.clang-format`, especially since we are getting more contributors. I think we should consider adopting the Google C++ Style Guide to both be consistent with most Google open source projects.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/200591890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/200592139", "body": "Why do you say that it is terrible? Another option is the [LLVM style guide](http://llvm.org/docs/CodingStandards.html), which is in fact quite similar.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/200592139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/200596314", "body": "Yes, I have seen the rant, and I do not 100% agree with it. For example, it mentions that disallowing multiple inheritance is 100% a deal breaker, but I am not convinced that multiple inheritance is a \"strength\" in practice except for multiple interface inheritance.\n\nIn any case, let's move this discussion to a separate bug. I've opened #139 to discuss this.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/200596314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/200598894", "body": "To add some more comments about [Sergey Zubkov's rant](https://www.linkedin.com/pulse/20140503193653-3046051-why-google-style-guide-for-c-is-a-deal-breaker): we should also note that the Google Style Guide is constantly being revised, and as Sergey himself pointed out, with the recent revisions, many of the \"deal breakers\" he listed no longer applies:\n\n> 9/21/14 update: Public style guide was updated from 3.274 to 4.45, losing two of the points I strongly disagreed with.\n> \n> 9/26/15 update: Public style guide was updated from 4.45 to 4.177, losing four more points, including the std::forward ban, the I/O streams ban and the operator overloading ban - although the pros for operator overloading still fail to mention most of the reasons it is required.\n> \n> 1/17/16 update: Public style guide was updated to an unversioned \"current\" on 1/6/16, relaxing the default parameter prohibition but suddenly banning ref-qualifiers as \"obscure\".\n\nCurrently, the key areas where the conventions used by Jsonnet differ from the Google Style Guide that are not formatting-related are:\n1. Use of exceptions\n2. Use of mutable references in function arguments.\n\nFeel free to correct me if there are additional fundamental differences.\n\nI am ambivalent about (1) and would be fine with keeping exceptions since removing them would be non-trivial. For (2), I think the Google style guide has merit and that is better to make it clear whether a function argument is mutable. This is the same reason why Microsoft implemented [SAL annotations](https://msdn.microsoft.com/en-us/library/hh916383.aspx).\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/200598894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/201502120", "body": "Are you referring to making changes to the tests themselves? We can also add build rules to the test suite so that you can just run the test suite with e.g. the jsonnet binary installed on your system.\n\nIf you want to test changes to both the test suite and to jsonnet simultaneously, then you can change the `git_repository` workspace rule to a `local_repository`. Ideally, it would be great to just pass a command line flag to the `bazel` command, but I don't think workspace rules are configurable and it would be good to file a good feature request for this to Bazel.\n\nLet's discuss offline to sort out the issues you're having with installing Bazel on your Goobuntu machine. FWIW, I think it is due to the fact that installing binaries to system directories without using apt-get is generally discouraged, but now that we have a Homebrew recipe for Bazel, you should be able to install that using Linuxbrew.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/201502120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/201722660", "body": "The [latest version of the style guide](https://google.github.io/styleguide/cppguide.html) does not say anything about forbidding RAII. I only see one mention of RAII and it is in a line that states that, as you said, exception safety requires RAII. In fact, there is definitely commonly-used Google C++ code that makes use of RAII, such as [Mutex](https://github.com/tensorflow/tensorflow/blob/df2ea2c8fb6fc2a653843ec521adb52305f1679f/tensorflow/core/platform/default/mutex.h).\n\nAs mentioned above, I agree that getting rid of exceptions in Jsonnet would not be worthwhile. FWIW, the reason why the the exception ban itself exists was due to actual bugs in the C++ compiler in the past. That said, in general, I am not convinced that exceptions in a non-GC language such as C++ is a good idea in general. There are [plenty](http://www.joelonsoftware.com/items/2003/10/13.html) [of](http://mortoray.com/2012/04/02/everything-wrong-with-exceptions/) [reasons](http://www.shanekirk.com/2015/06/c-exceptions-the-good-the-bad-and-the-ugly/) [why](http://stackoverflow.com/questions/1736146/why-is-exception-handling-bad) exceptions in C++ are not a good idea and why new static-typed languages such as [Go](https://golang.org/doc/faq#exceptions) and [Rust](https://doc.rust-lang.org/book/error-handling.html) have decided against using exceptions.\n\nOne thing I should clarify is that the Google style guide's rule against using mutable references in function arguments is to make it clear at the _call site_ whether an argument is mutable or not. This is why the style guide points out that the problem with mutable references is that \"they have value syntax but pointer semantics.\" There are some proposed solutions that I can point you to offline for allowing mutable references but at the same time still making the mutability explicit at the call site.\n\nIn any case, these are my suggestions and my explanation for why I prefer the Google style guide. One of the main points I am trying to make is that we should not be so quick to dismiss a particular style as \"terrible,\" especially since the style guide in its current form is still the product of a decade's worth of experience and battle-testing. Having used the style guide on a daily basis in my job, I can definitely appreciate the merits and reasoning behind the style guide. Finally, given that the Google C++ style guide is the one used for projects such as MapReduce, BigTable, Colossus, TensorFlow, as well as many other parts of the most advanced search stack in the world, I think it is safe to say that it is not such a terrible style guide after all. :)\n\nOf course, as the creator of Jsonnet, you certainly have the final say, and I respect and support the decision that you make.\n\nI've opened separate bugs to write the style guide doc (#142) and add a .clang-format (#143).\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/201722660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/201911608", "body": "No problem!\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/201911608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54377358", "body": "Nit: Is there a reason why we're using `#` comments rather than `//` comments here? :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54377358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54377413", "body": "Nit: @sparkprime - Do we have a recommended line length limit? AFAIU, the line length we're using for the C++ code is 100 characters.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54377413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54703316", "body": "I think we should stick with `//` and `/* */` to be consistent with JavaScript comments since Jsonnet is a superset of JSON, and saving characters isn't really a concern for us.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54703316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54703530", "body": "Agreed. I've opened #118 to discuss a style guide.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54703530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54703657", "body": "It seems that we are doing a fair amount of special-casing for the purposes of running tests, such as adding the `--code-file` flag, etc. Is there a reason why we cannot evaluate Jsonnet files with tests the same we evaluate any other Jsonnet file?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54703657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/42468636", "body": "For some reason, running `make` only builds `jsonnet` but not the `.so` libraries, even though the `so`'s are under `ALL`.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/42468636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/42468961", "body": "The error condition is not handled correctly for the multi APIs since I am returning a `map<string, string>` for the output parameter and thus the error message now gets parsed into a key in the map. I see two options:\n1. Have a separate parameter for returning the error message\n2. Stash the error message in a class member and expose a `GetLastError` method for returning the error message.\n\nWhat do you think?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/42468961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/42469008", "body": "I need to add some documentation and an example for this.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/42469008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/42574379", "body": "This is expected. Running `make all` builds the `.so`'s.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/42574379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56286897", "body": "I was getting an Bazel build error about being unable to find the generated header file:\n\n```\n\u276f\u276f\u276f bazel build //:jsonnet-common\nINFO: Found 1 target...\nERROR: /Volumes/Ocean/Projects/google/jsonnet/BUILD:17:1: undeclared inclusion(s) in rule '//:jsonnet-common':\nthis rule is missing dependency declarations for the following files included by 'core/desugarer.cpp':\n  'bazel-out/local_darwin-fastbuild/genfiles/std.jsonnet.h'.\nTarget //:jsonnet-common failed to build\nUse --verbose_failures to see the command lines of failed build steps.\nINFO: Elapsed time: 1.457s, Critical Path: 1.29s\n```\n\nThis might be a bug in the C/C++ rules related to using the `includes` attribute while looking for a header file in the genfiles tree. Changing the genrule to output the file in the current package rather than `core/` worked.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56286897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56286929", "body": "No worries. Yeah, `//include:libjsonnet` refers to the `:libjsonnet` target in `include/`.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56286929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56287008", "body": "This downloads the gmock archive so that we can use it for the unit tests. This is similar to CMake's [ExternalProject](https://cmake.org/cmake/help/v3.0/module/ExternalProject.html) mechanism but friendlier. :)\n\nHere's the documentation for [`new_http_archive`](http://bazel.io/docs/be/workspace.html#new_http_archive).\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56287008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56287371", "body": "What do you mean? Are you referring to the `cc_library` rules under `include/`? The problem is that since the target for `cpp/libjsonnet++.cc` are in `cpp/BUILD`, directly adding `../include/libjsonnet++.h` would cross package boundaries, and Bazel would complain. The way to include headers in a separate package is to add a `cc_library` rule for the header and then add that rule to `deps`.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56287371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56291547", "body": "I see what you mean. Makes sense. Also, if we end up refactoring libjsonnet.cpp and exposing both a C and C++ APIs, then that will essentially be the case.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56291547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56917262", "body": "This variable seems no longer used\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/56917262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/57258772", "body": "Yes, looks that way. This patch is purely whitespace changes only aside from the additions of the `// namespace` comments to the closing braces for the namespaces.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/57258772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/64106384", "body": "Come to think of it, I think we can remove the `std` attribute since the stdlib is baked into the jsonnet binary. @sparkprime is this correct?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/64106384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/64106428", "body": "Nit(BUILD convention): Indent 4 spaces\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/64106428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/64299655", "body": "Agreed. I will remove the `std` attribute from the Bazel Jsonnet rules in a separate change.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/64299655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "oconnorr": {"issues": [{"url": "https://api.github.com/repos/google/jsonnet/issues/90", "title": "Allow local definition in comprehension syntax", "body": "For example I could replace the expression\n\n   { [k]: processedField[k]\n      for field in std.objectFields(feature)\n      for processedField in [processFeature(field)]\n      for k in std.objectFields(processedField) }\n\nwith\n\n```\n{ [k]: processedField[k]\n  for field in std.objectFields(feature)\n  local processedField = processFeature(field)\n  for k in std.objectFields(processedField) }\n```\n\nwhich is a bit more clear syntactically.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/90/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/135084929", "body": "For what it's worth, nix-instantiate supports `--arg <name> <value>` and `--argstr <name> <value>` command line arguments.  In this case the file containing a Nix expression is expected to be a function, and it passes that function a record of name value pairs collected from the command line.  `--argstr` is the same as `--arg` except that `<value>` is always a string (rather than an arbitrary expression) and the string doesn't have to be quoted (with shell escaped quotes).\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/135084929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/167830491", "body": "According to the spec the o function has type String \u21c0 (Hidden \u00d7 Core) and Hidden = { :, ::, ::: }.  In particular false isn't a member of the type Hidden, so (o(f) = (\\false, _)) doesn't even make sense.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/167830491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/171469673", "body": "Do you want the Jsonnet output to be dependent on or independent of the contents of the Olson time zone database that happens to be installed on the local system?\n\nIf independent, then you cannot do date/time conversions based on time zone (you are restricted to using UTC offsets), but you could write it in Jsonnet.\n\nIf dependent, then Jsonnet isn't hermetic and some operations need to be built-in.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/171469673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/173941587", "body": "Using cctz, or any other tool for dealing with civil time, would make Jsonnet output dependent on the contents of /usr/share/zoneinfo whose content varies from machine to machine and from month to month.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/173941587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/193343700", "body": "I think pattern matching is a great thing, but there are some design choices to be made.\n\nNix has a moderately complex syntax for pattern matching on tuples\n\n{ foo({ a, b }) = a + b }\n\nDoes foo require an object whose set of fields is exactly a and b, or does it always slice an accept any object with at least a and b fields?  Nix supports both with special syntax for the second case.\n\nIs the binding lazy so that even if the parameter doesn't have one of the fields, if that field is never used in the computation then maybe that is okay?\n\nNix also has this ? syntax in the pattern which fills in fields with default values in case the parameter is missing the named field.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/193343700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "elfring": {"issues": [{"url": "https://api.github.com/repos/google/jsonnet/issues/53", "title": "Addition of a build system generator", "body": "I suggest to reuse a higher level build system than [your current small make file](https://github.com/google/jsonnet/blob/a6b18fc485233e86db953a658e6c68371d296e2e/Makefile#L1) so that powerful checks for software features will become easier.\n- [CMake](http://cmake.org/)\n- [Autotools](http://www.gnu.org/software/autoconf/#TOCintroduction)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/53/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/99922260", "body": "I suggest to avoid [ignorance of return values](https://cwe.mitre.org/data/definitions/252.html) a bit more.\n\nAre you interested to apply [aspect-oriented software development](http://aspectc.org/)?\nHow do you think about to encapsulate error detection and corresponding exception handling as [a reusable aspect](http://en.wikipedia.org/wiki/Aspect_%28computer_programming%29) in your software?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/99922260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/100012915", "body": "Thanks for [your improvement of include guards](https://github.com/google/jsonnet/commit/1269a2681b211d92135785026a1a6fcf2cafa2ca).\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/100012915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/100116711", "body": "Thanks for [your source code improvement](https://github.com/google/jsonnet/commit/8b785cf5b4755b40a7326c837b2c4e42979224a0).\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/100116711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/100116850", "body": "Thanks for [your small source code improvement](https://github.com/google/jsonnet/commit/2b83ce57a10de7b7c302b9754d70cbf1206b97c6).\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/100116850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "intervalia": {"issues": [{"url": "https://api.github.com/repos/google/jsonnet/issues/45", "title": "Please support ES6 back-tick for strings", "body": "ES6 has some wonderful functionality based on strings wrapped in the back-tick (`) instead of the standard double-quote (\") and single-quote (') characters.\n\nPlease, PLEASE add full support for the ES6 back-tick functionality!\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/45/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/95709870", "body": "The main reason I would like to see the back-tick is because I sometimes I move code from a JS file into a JSON file and I hate that I need to undo the ES6 coolness.\n\nIt would just be nice to have but not needed.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/95709870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "greatgoogleymoogley": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/jsonnet/commits/4a0a103b50c509bb41d56d7aad3a8195a8b11713", "message": "Replace long with int64_t in virtual machine numeric evaluations\n\nBy the C/C++ standard long is only at least as large as an int.\nFor MSVC it is the same size as an int which caused some jsonnet scripts that work for other platforms to fail on Windows.\nUsing int64_t guarantees all platforms have the same precision."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/9da1f795edd6036437b7674e91bbb2e156af78db", "message": "Adding #include <string> for windows build\n\ncompilation failed in MSVC with\njsonnet\\third_party\\md5\\md5.cpp(353): warning C4717: 'operator<<': recursive on all control paths, function will cause runtime stack overflow\nbecause\nstd::ostream& operator<<(std::ostream&, std::string)\nwas not defined, so it implicitly converted the hex digest back to MD5"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "malkia": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/jsonnet/commits/97a24f7026e95d2dde1894ab86f96373047a21f7", "message": "Use directly static_cast, rather than probing with dynamic_cast (#416)\n\n* Use directly static_cast, based on the stored node type, rather than probing with dynamic_cast. Add AST_APPLY_BRACE node type. One benchmark showed x2 cpu increase: https://github.com/ksonnet/ksonnet-lib/blob/master/examples/readme/hello-nginx.jsonnet"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kant": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/jsonnet/commits/715cdcff04410406760d430ce28a519a105f49ab", "message": "Minor fix (proposal)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "andreadps": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/jsonnet/commits/116cb2196b8b67460429c9734b784363ee2a663d", "message": "adding a VS2017 solution and adapting JsonnetJsonValue to be compatible with its compiler"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jbeda": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/jsonnet/commits/d875726ff3acce468c75b4fb486770511670d926", "message": "Fix `make depend` to look at right paths"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/a6209f0d2a0a03345740a1df4ad0b0d6a671c8b0", "message": "Add prune to stdlib"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/173687918", "body": "Looking at the lexer, it looks like this is supported but undocumented.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/173687918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/173775560", "body": "No hurries on my part.  I'm just working from the lexer on up and haven't hit the unimplemented parts yet.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/173775560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "devth": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/jsonnet/commits/2f5ae7694c830f19ecbe6a02d7c6605e8c97712b", "message": "Use alpine based Docker image and set its entrypoint"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/193512521", "body": "Would be great to get this released :+1: \n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/193512521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "dastergon": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/jsonnet/commits/9c78c3d99de9cd6836437d2a620d7125c08ccac6", "message": "fix pagination in the 3rd page of the case study\n\nThe page enumeration was broken in the third page because\nthere was a leading slash missing in the hyperlinks, and they raised\n404 errors when trying to move backwards."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Neeke": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/jsonnet/commits/ded20d150db5e701cfa39e08af58dc2ae2ab230c", "message": "Reformat html style."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/39fba3434d0aaf0b54564a3195181a40caffeb03", "message": "Fixed libjsonnet.h href in bindings.html"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/107672417", "body": "all right, it will be named JsonNet-PHP.\nIt's ok?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/107672417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/107673345", "body": "yeah, cool.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/107673345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/107676788", "body": "Hi, done.\n\nhttps://github.com/Neeke/Jsonnet-PHP\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/107676788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "andrewmchen": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/jsonnet/commits/c12f39d72177c8a0f555d5294585b173cfcc3c6f", "message": "parseint"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lamuguo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/jsonnet/commits/bdb4f009611e7806e7f00cf02e35bf3be9227989", "message": "For easily using jsonnet in test"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/66898584", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/66898584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "igorpeshansky": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/jsonnet/commits/0faf4c16fff0016112e126a6bdf34d09fff4835d", "message": "Update to the latest logging install script URL."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "teeler": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/62776285", "body": "Oh i did break it..I thought this was already failing, looking.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/62776285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/63310910", "body": "Closing this for now until I can find a better way.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/63310910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tyler-elric": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/64066711", "body": "If I remember correctly, the only source file I changed was _jsonnet.c which I changed from 2.x compatibility to 3.x compatibility ( rather than using #defines for both ).\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/64066711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "loverszhaokai": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76598300", "body": "Get it.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76598300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76599260", "body": "Hi sparkprime, I already signed \"Google Individual Contributor License Agreement\".\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76599260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76601005", "body": "OK, it maybe better handled in the future.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76601005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76849421", "body": "Yes! Currently the test suites is the system test. So unit test is also needed by now.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76849421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/97610782", "body": "@sparkprime \n\nI have signed.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/97610782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "PaulFurtado": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/78395797", "body": "This setup.py is able to build fine, however my company's internal pypi server was rejecting it (returning 500 errors without an error message). I'm going to take a look and see if it's the setup.py's fault or the server's fault before we merge this.\n\nAs for telling travis to only upload stable builds to pypi, travis has an option for uploading to pypi for only tagged commits instead of all commits (however, this is still an issue if you tag commits which are unstable). I think their intention is that you would have a \"stable\" branch which only has stable tags on it. Note that it's also not all that inconvenient to upload to pypi manually - if you have a .pypirc, it's as easy as running one command.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/78395797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/78427046", "body": "Just updated the PR with fixes that allow it to actually work with PyPi:\n- The package needed to be called \"jsonnet\" instead of \"_jsonnet\". That means you install it with \"pip install jsonnet\" but you still use it via \"import _jsonnet\"\n- Added a MANIFEST.in which puts the entire directory into the distribution - previously distutiles was only adding the files in JSONNET_SOURCES\n\nI also added you as the author.\nI tested this against a local pypi-server with all of the defaults.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/78427046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/78429601", "body": "Also put a test version of it called \"paul-jsonnet\" into pypi to test that it works with the official pypi. You can try it out with: \n\n```\npip install paul-jsonnet\n```\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/78429601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/100036140", "body": "@sparkprime Sorry for the delay, I just submitted the CLA, thanks\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/100036140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/100037544", "body": "Yes, it fails to compile on OS X. My friend gave me his macbook for 20 minutes to debug it, but I couldn't figure out what compile flags I needed to make it work, even running `make _jsonnet.so` fails. I think the issue is that jsonnet links against python (which I believe is c99), but also uses c++11 and for some reason clang doesn't like mixing them. I think this issue is related: https://support.enthought.com/hc/en-us/articles/204469410-OS-X-GCC-Clang-and-Cython-in-10-9-Mavericks\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/100037544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "dhaffey": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/95397593", "body": "The spec mentioned \"floating-point arithmetic\", so I'd already assumed IEEE doubles. It's more an issue of consistently handling special float values and avoiding invalid JSON output (eg, \"1 / 0\" sensibly produces an error rather than manifesting \"inf\").\n\nSwitching to arbitrary-precision rationals would certainly do the trick. Though std.sin and friends may get a little trickier to implement :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/95397593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/95401256", "body": "On a related note:\n\n```\n$ jsonnet -e 1e309\ninf\n```\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/95401256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/95684176", "body": "+1 for failing fast. NaN is an atrocity, and the best argument I can think of for allowing an intermediate inf is that it's occasionally convenient as an initial value in algorithms like computing a minimum. Not very compelling.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/95684176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dgarstang": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/97246513", "body": "Doesn't work for me, on a Mac.\n\n```\n(venv2)[chef=prod] Douglass-MacBook-Pro:git doug$ pip install paul-jsonnet --pre\nDownloading/unpacking paul-jsonnet\n  Downloading paul-jsonnet-v0.6.0-beta.tar.gz (1.6MB): 1.6MB downloaded\n  Running setup.py (path:/private/var/folders/qn/sdwwlm7s4zq7mg3535279h240000gn/T/pip_build_doug/paul-jsonnet/setup.py) egg_info for package paul-jsonnet\n\nInstalling collected packages: paul-jsonnet\n  Running setup.py install for paul-jsonnet\n    make: `std.jsonnet.h' is up to date.\n    building '_jsonnet' extension\n    cc -fno-strict-aliasing -fno-common -dynamic -arch x86_64 -arch i386 -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch x86_64 -arch i386 -pipe -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c libjsonnet.cpp -o build/temp.macosx-10.9-intel-2.7/libjsonnet.o -std=c++0x\n    cc -fno-strict-aliasing -fno-common -dynamic -arch x86_64 -arch i386 -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch x86_64 -arch i386 -pipe -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c lexer.cpp -o build/temp.macosx-10.9-intel-2.7/lexer.o -std=c++0x\n    cc -fno-strict-aliasing -fno-common -dynamic -arch x86_64 -arch i386 -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch x86_64 -arch i386 -pipe -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c parser.cpp -o build/temp.macosx-10.9-intel-2.7/parser.o -std=c++0x\n    cc -fno-strict-aliasing -fno-common -dynamic -arch x86_64 -arch i386 -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch x86_64 -arch i386 -pipe -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c static_analysis.cpp -o build/temp.macosx-10.9-intel-2.7/static_analysis.o -std=c++0x\n    cc -fno-strict-aliasing -fno-common -dynamic -arch x86_64 -arch i386 -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch x86_64 -arch i386 -pipe -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c vm.cpp -o build/temp.macosx-10.9-intel-2.7/vm.o -std=c++0x\n    vm.cpp:203:20: warning: implicit conversion loses integer precision: 'size_type' (aka 'unsigned long') to 'unsigned int' [-Wshorten-64-to-32]\n                return stack.size();\n                ~~~~~~ ^~~~~~~~~~~~\n    vm.cpp:209:36: warning: implicit conversion loses integer precision: 'unsigned long' to 'int' [-Wshorten-64-to-32]\n                for (int i=stack.size()-1 ; i>=0 ; --i) {\n                         ~ ~~~~~~~~~~~~^~\n    vm.cpp:301:36: warning: implicit conversion loses integer precision: 'unsigned long' to 'int' [-Wshorten-64-to-32]\n                for (int i=stack.size()-1 ; i>=0 ; --i) {\n                         ~ ~~~~~~~~~~~~^~\n    vm.cpp:322:36: warning: implicit conversion loses integer precision: 'unsigned long' to 'int' [-Wshorten-64-to-32]\n                for (int i=stack.size()-1 ; i>=0 ; --i) {\n                         ~ ~~~~~~~~~~~~^~\n    vm.cpp:360:30: warning: unused variable 'bind' [-Wunused-variable]\n                for (const auto &bind : up_values) {\n                                 ^\n    vm.cpp:370:37: warning: implicit conversion loses integer precision: 'unsigned long' to 'int' [-Wshorten-64-to-32]\n                for (int i=stack.size() - 1 ; i>=0 ; --i) {\n                         ~ ~~~~~~~~~~~~~^~~\n    vm.cpp:1419:54: warning: implicit conversion loses integer precision: 'const unsigned long' to 'unsigned int' [-Wshorten-64-to-32]\n                                unsigned builtin = func->builtin;\n                                         ~~~~~~~   ~~~~~~^~~~~~~\n    7 warnings generated.\n    vm.cpp:360:30: warning: unused variable 'bind' [-Wunused-variable]\n                for (const auto &bind : up_values) {\n                                 ^\n    1 warning generated.\n    cc -fno-strict-aliasing -fno-common -dynamic -arch x86_64 -arch i386 -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch x86_64 -arch i386 -pipe -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c _jsonnet.c -o build/temp.macosx-10.9-intel-2.7/_jsonnet.o -std=c++0x\n    error: invalid argument '-std=c++0x' not allowed with 'C/ObjC'\n    error: command 'cc' failed with exit status 1\n    Complete output from command /usr/bin/python -c \"import setuptools, tokenize;__file__='/private/var/folders/qn/sdwwlm7s4zq7mg3535279h240000gn/T/pip_build_doug/paul-jsonnet/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\\r\\n', '\\n'), __file__, 'exec'))\" install --record /var/folders/qn/sdwwlm7s4zq7mg3535279h240000gn/T/pip-Egrdcg-record/install-record.txt --single-version-externally-managed --compile:\n    running install\n\nrunning build\n\nmake: `std.jsonnet.h' is up to date.\n\nrunning build_ext\n\nbuilding '_jsonnet' extension\n\ncreating build\n\ncreating build/temp.macosx-10.9-intel-2.7\n\ncc -fno-strict-aliasing -fno-common -dynamic -arch x86_64 -arch i386 -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch x86_64 -arch i386 -pipe -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c libjsonnet.cpp -o build/temp.macosx-10.9-intel-2.7/libjsonnet.o -std=c++0x\n\ncc -fno-strict-aliasing -fno-common -dynamic -arch x86_64 -arch i386 -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch x86_64 -arch i386 -pipe -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c lexer.cpp -o build/temp.macosx-10.9-intel-2.7/lexer.o -std=c++0x\n\ncc -fno-strict-aliasing -fno-common -dynamic -arch x86_64 -arch i386 -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch x86_64 -arch i386 -pipe -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c parser.cpp -o build/temp.macosx-10.9-intel-2.7/parser.o -std=c++0x\n\ncc -fno-strict-aliasing -fno-common -dynamic -arch x86_64 -arch i386 -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch x86_64 -arch i386 -pipe -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c static_analysis.cpp -o build/temp.macosx-10.9-intel-2.7/static_analysis.o -std=c++0x\n\ncc -fno-strict-aliasing -fno-common -dynamic -arch x86_64 -arch i386 -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch x86_64 -arch i386 -pipe -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c vm.cpp -o build/temp.macosx-10.9-intel-2.7/vm.o -std=c++0x\n\nvm.cpp:203:20: warning: implicit conversion loses integer precision: 'size_type' (aka 'unsigned long') to 'unsigned int' [-Wshorten-64-to-32]\n\n            return stack.size();\n\n            ~~~~~~ ^~~~~~~~~~~~\n\nvm.cpp:209:36: warning: implicit conversion loses integer precision: 'unsigned long' to 'int' [-Wshorten-64-to-32]\n\n            for (int i=stack.size()-1 ; i>=0 ; --i) {\n\n                     ~ ~~~~~~~~~~~~^~\n\nvm.cpp:301:36: warning: implicit conversion loses integer precision: 'unsigned long' to 'int' [-Wshorten-64-to-32]\n\n            for (int i=stack.size()-1 ; i>=0 ; --i) {\n\n                     ~ ~~~~~~~~~~~~^~\n\nvm.cpp:322:36: warning: implicit conversion loses integer precision: 'unsigned long' to 'int' [-Wshorten-64-to-32]\n\n            for (int i=stack.size()-1 ; i>=0 ; --i) {\n\n                     ~ ~~~~~~~~~~~~^~\n\nvm.cpp:360:30: warning: unused variable 'bind' [-Wunused-variable]\n\n            for (const auto &bind : up_values) {\n\n                             ^\n\nvm.cpp:370:37: warning: implicit conversion loses integer precision: 'unsigned long' to 'int' [-Wshorten-64-to-32]\n\n            for (int i=stack.size() - 1 ; i>=0 ; --i) {\n\n                     ~ ~~~~~~~~~~~~~^~~\n\nvm.cpp:1419:54: warning: implicit conversion loses integer precision: 'const unsigned long' to 'unsigned int' [-Wshorten-64-to-32]\n\n                            unsigned builtin = func->builtin;\n\n                                     ~~~~~~~   ~~~~~~^~~~~~~\n\n7 warnings generated.\n\nvm.cpp:360:30: warning: unused variable 'bind' [-Wunused-variable]\n\n            for (const auto &bind : up_values) {\n\n                             ^\n\n1 warning generated.\n\ncc -fno-strict-aliasing -fno-common -dynamic -arch x86_64 -arch i386 -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch x86_64 -arch i386 -pipe -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c _jsonnet.c -o build/temp.macosx-10.9-intel-2.7/_jsonnet.o -std=c++0x\n\nerror: invalid argument '-std=c++0x' not allowed with 'C/ObjC'\n\nerror: command 'cc' failed with exit status 1\n\n----------------------------------------\nCleaning up...\nCommand /usr/bin/python -c \"import setuptools, tokenize;__file__='/private/var/folders/qn/sdwwlm7s4zq7mg3535279h240000gn/T/pip_build_doug/paul-jsonnet/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\\r\\n', '\\n'), __file__, 'exec'))\" install --record /var/folders/qn/sdwwlm7s4zq7mg3535279h240000gn/T/pip-Egrdcg-record/install-record.txt --single-version-externally-managed --compile failed with error code 1 in /private/var/folders/qn/sdwwlm7s4zq7mg3535279h240000gn/T/pip_build_doug/paul-jsonnet\nStoring debug log for failure in /var/folders/qn/sdwwlm7s4zq7mg3535279h240000gn/T/tmpPwS2Lf\n```\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/97246513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/107686357", "body": "David,\n\nThanks. Doesn't work for me tho...\n\ncc -fno-strict-aliasing -fno-common -dynamic -arch x86_64 -arch i386 -g -Os\n-pipe -fno-common -fno-strict-aliasing -fwrapv -DENABLE_DTRACE -DMACOSX\n-DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv\n-Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch x86_64 -arch i386 -pipe\n-I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7\n-c _jsonnet.c -o build/temp.macosx-10.9-intel-2.7/_jsonnet.o -std=c++0x\nerror: invalid argument '-std=c++0x' not allowed with 'C/ObjC'\nerror: command 'cc' failed with exit status 1\n\nDoug.\n\nOn Mon, Jun 1, 2015 at 12:42 PM, Dave Cunningham notifications@github.com\nwrote:\n\n> Merged #42 https://github.com/google/jsonnet/pull/42.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/jsonnet/pull/42#event-319295717.\n\n## \n\nRegards,\n\nDouglas Garstang\nhttp://www.linkedin.com/in/garstang\nEmail: doug.garstang@gmail.com\nCell: +1-805-340-5627\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/107686357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/151603450", "body": "Thanks David. I probably shouldn't have been building from the master branch anyway. I just tried v0.8.4 and seem to have the same issue. I guess, even though you've fixed it in the master branch, I'd prefer to pull from a specific release to not have this happen again. Any ideas?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/151603450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "spmbt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/97629548", "body": "Of course, we are understand it. But one more language and technology is not always is good :) For example, Yaml has a lot of rules, and this leads to the fact that many developers use  subset of features. JSON: we had 1 simple technology. Jsonnet - 1 complex and 1 preprocessor language for static calculations.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/97629548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "davidreuss": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/134706236", "body": "I guess that makes sense, haven't thought about just importing all known into a local, and referencing that.\n\nFor my current use-case i have some dynamically generated structure (like a always changing inventory), where i use ja\u00f8sonnwt to augment / expand that further.\n\nTo include this properly i now have a script which generates the JSON, and invokes jsonnet so it's using stdin as code.\n\nSomething like:\n\n```\ndata=$(...)\necho 'import \"script.jsonnet\" + '$data'' | jsonnet -e -\n```\n\nBut maybe i need to rethink how i do this.\n\nI've toyed with just changing the import library path for scripts as well, but that feels clunky too.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/134706236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/134833382", "body": "Yes, i could - but i wanted to know if there was a nifty solution to avoid managing temporary files. My usecase is in an automated context, so i'd love to svoid copying too much around.\n\nBut i think with some import path juggling, that it could probably work okay :)\n\nSent from my iPhone\n\n> On 26/08/2015, at 06.49, Dave Cunningham notifications@github.com wrote:\n> \n> Can't you write your generated data to a json file with a static filename and then import that from script.jsonnet?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/134833382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/134847424", "body": "If importing /dev/stdin works then that would solve it, but that would just feel pretty wrong.\n\nI'm in total agreement regarding static configuration, and i'd also expect configuration to not change during the execution of jsonnet, even if reading from say a URL.\n\nWriting a JSON parser could indeed be a solution. I like the importexec solution as well, but i guess it depends on how much you want jsonnet to be able to handle itself, and what should be left to other tooling.\n\n> On 26/08/2015, at 07.38, Dave Cunningham notifications@github.com wrote:\n> \n> Brain dump of crazy ideas:\n> \n> 1) import \"/dev/stdin\"\n> \n> 2) add a feature\n> \n> local foo = importexec [\"echo\", \"{\\\"x\\\": 1}\"];\n> foo.x\n> \n> yielding 1, but this would only process JSON\n> \n> 3) write a JSON parser in Jsonnet (yes, this is possible)\n> \n> local foo = std.parseJson(std.extVar(\"DATA\"));\n> \n> then run jsonnet with -V DATA=\"$data\" (or use an environment variable and -E)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/134847424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/136982363", "body": "Oh, wow -- thanks, that's really helpful, thanks a lot. :+1: \n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/136982363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "johnboiles": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/144860394", "body": "This would be great. How painful did this change look to be? I might be able to contribute if it's not huge.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/144860394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/145117916", "body": "Great, thanks for the info @sparkprime. I'll update here if I get a chance to try it; I need more emoji in my json :beers:\n\nI really love Jsonnet BTW. My team is using it along with ApiDoc to create API documentation that doubles as a mock API server for developing apps against APIs that aren't finished yet.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/145117916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/147252066", "body": "Wow @sparkprime, way to kill it!!\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/147252066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/149646577", "body": "Looks like normal unicode characters (like `\u201c` `\u201d` `\u2018` `\u2019` etc) are working fine, but longer sequences for emoji (like \ud83d\ude80 -- \"\\xF0\\x9F\\x9A\\x80\") always become the sequence \"\\xEF\\xBF\\xBD\\xEF\\xBF\\xBD\\xEF\\xBF\\xBD\\xEF\\xBF\\xBD\"\n\nI'm suspicious of the encode_utf8 method, but I'm struggling to understand what all the bit masking and shifting is doing.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/149646577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/149649664", "body": "I think I have a fix, looks like a typo on [this line](https://github.com/google/jsonnet/commit/fef77da26fc9d66b8a6a8ae1be5390f5eea0e8ce#diff-5f70800c4203dccbe3b4db3f1bdd2193R99):\n\n```\n} else if ((c0 & 0xF8) == 0xF) { //11110zzz 10zzyyyy 10yyyyxx 10xxxxxx\n```\n\nChanging that to the following seems more right\n\n```\n} else if ((c0 & 0xF8) == 0xF0) { //11110zzz 10zzyyyy 10yyyyxx 10xxxxxx\n```\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/149649664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/149659656", "body": "Submitted a fix as #78.\n\nI didn't see an easy way to test this as the `\\u` escape sequence only supports 4 hex digit escape sequences (ie up to character code 0xFFFF). So adding this is invalid:\n\n```\nstd.assertEqual(\"\\u1F680\", \"\ud83d\ude80\") &&\n```\n\nOne solution for testing could be to add support for the [ECMAScript6 code point escapes](https://mathiasbynens.be/notes/javascript-escapes#unicode-code-point) (like `\\u{1F680}`).\n\nIf you have another idea for testing, I'd love to hear it!\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/149659656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/149703626", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/149703626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/149739148", "body": "No problem! It was enlightening to learn more about the inner workings of unicode\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/149739148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cristicbz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/163666822", "body": "@sparkprime This doesn't seem to be fixed in pip. Doing `pip install jsonnet` installs 0.8.4, which breaks in the way described in the original issue.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/163666822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "roconnor": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/183767456", "body": "I feel some of reasons for Jsonnet inlcude\n- Divorcing Nix the language from Nix the build system is slightly tricky.\n- Being a strict superset of JSON makes migrating existing JSON configurations easy and comfortable\n- Lots of programmers like OO semantics even though they are terrible.  At least configuration management is one of the few situations where using OO programming is actually useful.  Even Nixpkgs uses OO semantics, even if they fake them in a purely functional language.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/183767456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [], "review_comments": []}, "akazakov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/189573313", "body": ":shipit: :+1: \n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/189573313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54327634", "body": "typo: evaluate\nsame 2 lines down\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54327634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "lwander": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127342808", "body": "Is it possible to provide multiple files, and have one of them in the middle be stdin? ", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127342808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127343015", "body": "Please elaborate on what you mean by \"side effect\"", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127343015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127343130", "body": "Description should probably reflect the change in functionality you introduced.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127343130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127343264", "body": "I could be reading this wrong, but if `inputFiles` is empty the above check you guard with that \"ERROR: Already specified\" message won't catch a malformed userinput of 0 files.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127343264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127344417", "body": "I realize you copied this restriction from the existing code, but why does it exist @sparkprime? Seems useful to pipe files through the formatter rather than modify them in place.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127344417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127345066", "body": "Why did you introduce `index` as a parameter? I only see this function called [here](https://github.com/google/jsonnet/pull/324/files#diff-cbfdcc436b29a37aa318778257ca6871R640) and [here](https://github.com/google/jsonnet/pull/324/files#diff-cbfdcc436b29a37aa318778257ca6871R743), each time with `0` as `index`.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127345066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127345363", "body": "Looking below I guess not - this block of code reads like it could, but I think once we figure out what to do with the constant `index` parameter this won't be a problem.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127345363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127345937", "body": "It'd be nice if jsonnet didn't modify files until it was sure it could correctly format all of them. WDYT @sparkprime?", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127345937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127346206", "body": "STDERR is unbuffered, I don't think this is needed: https://linux.die.net/man/3/stderr", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127346206/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127346430", "body": "In other places the convention seems to be to write errors with `std:cerr`, any reason to use `perror` instead here?", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127346430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127448682", "body": "It might be neater to take a pointer to the input file you're going to read then, unless you think there is an imminent use case for taking `index` that's not shown yet", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127448682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127448783", "body": "Thanks, could you add this to the comment description?", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127448783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127448843", "body": "Good catch", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127448843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127448932", "body": "Ah I see, thanks", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127448932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127449067", "body": "Yeah this is a little tricky, and might just be overkill. Curious to see what @sparkprime thinks", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/127449067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129294637", "body": "Maybe it's worth testing that no regression in parsing/import formatting gets introduced that causes these to misbehave?", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/129294637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128350564", "body": "What's your target line width? Comments seem to adhere to 80, these are a little over", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128350564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128350989", "body": "Can you extend the comment to explain \"constraints\"?", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128350989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128352231", "body": "Little nit, but I think here it's generally recommended to include braces for one line if-statements (I could be wrong)", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128352231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128357176", "body": "This doesn't modify the input `local` contents, right? The current name kind-of suggests that it does - maybe `groupBoundaryStartsAfter` sounds more like you're asking a question rather than asking it to group a boundary.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128357176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128357589", "body": "What if you have multiple comments? e.g \r\n\r\n```\r\nlocal foo = \"b.jsonnet\"; /* comment1 */ /* comment2 */\r\n```", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128357589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128358286", "body": "Looks like other class methods have the brace on the same line as the method declaration", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128358286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128359534", "body": "Nice", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128359534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128364883", "body": "Ah if its in the surrounding code I'd leave it as is", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128364883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128365467", "body": "Ah nice - I guess the name is a little tricky, maybe `adjacentCommentFodder`?", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128365467/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128365955", "body": "Sounds good to me", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128365955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128494578", "body": "Good idea", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128494578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/130364930", "body": "Did you consider something along the lines of\r\n\r\n```\r\nTMP_DIR=$(mktemp -d jsonnet_XXXX)\r\n```", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/130364930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/130365509", "body": "I'm not familiar with the other formatting passes, but are any considerations taken for line length? Reading the code here it seems the expansion happens when args are already on another line, not if function is too long.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/130365509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/130365810", "body": "Shouldn't the closing paren live on a new line to match the [below style](https://github.com/google/jsonnet/pull/334/files#diff-7171b03fc4ff999fe62969d7161eba37R1168)? Or is that handled separately?  ", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/130365810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128575893", "body": "`all` should probably depend on this.\r\n\r\nalso I think you should declare this as [`.PHONY`](https://www.gnu.org/software/make/manual/html_node/Phony-Targets.html)", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128575893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128576007", "body": "This kind of doc reformatting seems wrong", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128576007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128576121", "body": "Why commented out?", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/128576121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "marcelocantos": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/156164780", "body": "I'm skeptical that `std::list` will improve anything. It requires more mallocs and consumes more memory than `std::vector`.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/156164780/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/155994404", "body": "Use `std::ostringstream oss(\u2026);` instead.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/155994404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/155994549", "body": "Fold the two loops into one for good measure.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/155994549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/155994669", "body": "Suggest: `if (const char *jsonnet_path_env = getenv(\"JSONNET_PATH\") {`", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/155994669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}}}}