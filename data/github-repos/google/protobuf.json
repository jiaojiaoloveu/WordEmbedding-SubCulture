{"_default": {"1": {"fengli79": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4212", "title": "Redistribute CPython protobuf for mac and windows.", "body": "Protobuf ships less redistributable packages than gRPC.\r\ngRPC:\r\nhttps://pypi.python.org/pypi/grpcio\r\n\r\nIt lacks for:\r\n1. Windows 32, 64.\r\n2. Mac\r\n3. Linux 32.\r\n\r\nFulfill the gap helps to improve the gRPC performance on those platforms.\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/4189", "title": "Cannot import other package under google namespace if install protobuf", "body": "I get the same issue (#1296 (comment)) when using protobuf 3.5.1.\r\nThe protobuf is installed in:\r\n\r\nsite-packages/\r\n    google/\r\n        protobuf/\r\n            __init__.py\r\nThere's no \"__init__.py\" install under the google package, and I have to import the google.protobuf package to make other packages under the google namespace be available.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "qingling128": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4210", "title": "`libruby.so.2.4` dependency issue with `google-protobuf` ruby gem `3.5.1.1`", "body": "When building a package with `google-protobuf-3.5.1.1` on a Debian 8 machine, we ran into this dependency error.\r\n\r\n```\r\n    --> /opt/google-fluentd/embedded/lib/ruby/gems/2.4.0/gems/google-protobuf-3.5.1.1-x86_64-linux/lib/google/protobuf_c.so\r\n    DEPENDS ON: libruby.so.2.4\r\n      COUNT: 1\r\n      PROVIDED BY: not found\r\n      FAILED BECAUSE: Unresolved dependency\r\n\r\n            [HealthCheck] I | 2018-01-22T19:20:04+00:00 | Health check time: 5.4719s\r\nThe health check failed! Please see above for important information.\r\n\r\n\r\n/usr/local/rvm/gems/ruby-2.4.1/gems/omnibus-5.5.0/lib/omnibus/health_check.rb:339:in `block in run!'\r\n  /usr/local/rvm/gems/ruby-2.4.1/gems/omnibus-5.5.0/lib/omnibus/instrumentation.rb:23:in `measure'\r\n  /usr/local/rvm/gems/ruby-2.4.1/gems/omnibus-5.5.0/lib/omnibus/health_check.rb:239:in `run!'\r\n  /usr/local/rvm/gems/ruby-2.4.1/gems/omnibus-5.5.0/lib/omnibus/health_check.rb:207:in `run!'\r\n  /usr/local/rvm/gems/ruby-2.4.1/gems/omnibus-5.5.0/lib/omnibus/project.rb:1083:in `build'\r\n  /usr/local/rvm/gems/ruby-2.4.1/gems/omnibus-5.5.0/lib/omnibus/cli.rb:84:in `build'\r\n  /usr/local/rvm/gems/ruby-2.4.1/gems/thor-0.19.1/lib/thor/command.rb:27:in `run'\r\n  /usr/local/rvm/gems/ruby-2.4.1/gems/thor-0.19.1/lib/thor/invocation.rb:126:in `invoke_command'\r\n  /usr/local/rvm/gems/ruby-2.4.1/gems/thor-0.19.1/lib/thor.rb:359:in `dispatch'\r\n  /usr/local/rvm/gems/ruby-2.4.1/gems/omnibus-5.5.0/lib/omnibus/cli/base.rb:33:in `dispatch'\r\n  /usr/local/rvm/gems/ruby-2.4.1/gems/thor-0.19.1/lib/thor/base.rb:440:in `start'\r\n  /usr/local/rvm/gems/ruby-2.4.1/gems/omnibus-5.5.0/lib/omnibus/cli.rb:42:in `execute!'\r\n  /usr/local/rvm/gems/ruby-2.4.1/gems/omnibus-5.5.0/bin/omnibus:16:in `<top (required)>'\r\n  bin/omnibus:29:in `load'\r\n  bin/omnibus:29:in `<main>'\r\n```\r\n\r\nThe issue is resolved after we pinned `google-protobuf` to `3.5.1` (https://github.com/GoogleCloudPlatform/google-fluentd/pull/63).", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "d79ima": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4206", "title": "C# ByteString, CodedInputStream performance improvements desired for messages with large byte array field", "body": "Currently if you have a message with an array of bytes field that translates into a ByteString immutable object.\r\nByteString can't be created without incurring a GC memory allocation and an array copy.\r\nWhen you deserialize a ByteString using CodedInputStream, the same penalty is paid.\r\nFurthermore, when you then go to consume the bytes you received you pay this same penalty yet again because of ByteString.ToByteArray().\r\n\r\nIn my application these penalties are adding up to excessive GC pressure and memory copies which is reducing my message throughput substantially. This leaves me some unatractive options for my .NET C# application, either use C++ protobuffs communication layer or send my large byte array messages natively without using protobuffs.\r\n\r\nIt would be really nice if you allowed an option to have more fine grained control over the  \"bytes\" field such that the code generator would spit out just a native byte[] type field or a new class (i.e. UnsafeByteString) which bypasses the above mentioned penalties and user takes on full responsibility for the fact that it is a mutable unsafe byte array.\r\nCodedInputStream also needs to provide an option for user to inject his own byte array allocator so that user application can have fine grained control over byte array memory allocations to minimize GC penalties.\r\n\r\nI think this is really important to allow for truly high performance C# protobuff apps.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wolfviking0": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4203", "title": "Hang of protobuf on OSX 'sched_yield'", "body": "Hi,\r\n\r\nI am using protobuf and I am currently facing an issue who seems to be happening only on OSX.\r\n\r\nI have a static library with some proto class inside 'libA.a'\r\n\r\nI have one binary application who link this libA.a and a shared library who link the same static library 'libB.dylib'.\r\n\r\nThe binary application load the dylib using dlopen RTLD_LAZY, I am loading a function using dlsym. When I call this function I have a froze/hang of my application.\r\n\r\nThe function I try to call from the shared library, initialize some of my proto file. After building in debug, I can see one of the thread are blocked here: \r\n\r\n0 swtch_pri\r\n1 sched_yield\r\n2 google::protobuf::(anonymous namespace)::SchedYield()\r\n3 google::protobuf::(GoogleOnceInitImpl(long*, google::protobuf::Closure*)\r\n\r\nThe same exact implementation work perfectly fine on linux and I am using protobuf 3.5.1.\r\n\r\nDo you have an idea why I have this issue on OSX ?\r\n\r\nThanks\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mrpi": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4202", "title": "std::string not allocated in Arena memory", "body": "Hi!\r\n\r\nI have noticed that std::string objects are not constructed in the arena memory but only marked as owned by the arena.\r\n\r\nI understand why the current design does not allow to put long strings completely into the arena, but why is the std::string object itself not in the arena?\r\n\r\nThis way, string values that fit into the short string optimization buffer would not cause any heap allocation outside the arena and long strings would only require one heap allocation instead of two.\r\n\r\nThe method `ArenaStringPtr::CreateInstance` currently looks this way: \r\n```\r\nvoid CreateInstance(::google::protobuf::Arena* arena,\r\n                      const ::std::string* initial_value) {\r\n    GOOGLE_DCHECK(initial_value != NULL);\r\n    ptr_ = new ::std::string(*initial_value);\r\n    if (arena != NULL) {\r\n      arena->Own(ptr_);\r\n    }\r\n}\r\n```\r\n\r\nbut I would have expected an implementation that looks something like this:\r\n```\r\nvoid CreateInstance(::google::protobuf::Arena* arena,\r\n                      const ::std::string* initial_value) {\r\n    GOOGLE_DCHECK(initial_value != NULL);\r\n    // uses \"new ::std::string\" when arena is nullptr\r\n    ptr_ = Arena::Create<::std::string>(arena, *initial_value);\r\n}\r\n```\r\n\r\nThank you!\r\n\r\nP.S.: Support for std::string_view (`[ctype = STRING_VIEW]`) as a replacement of your internal StringPiece would be even better :-)", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Disturbing": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4201", "title": "Protobuf bytes[] to Json", "body": "Hello All,\r\n\r\nI'm looking to change protobuf bytes[] to Json without the use of a protofile / class.\r\n\r\nOtherwise, I'm looking to do this in a hot swapping way where the protobuf class definition can be either read in real time via proto file or be able to load a protobuf class as a script (via dotnet core AssemblyModule).\r\n\r\nAre there any resources out there for this already?", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "anandolee": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4200", "title": "Extensions APIs for custom options in C#", "body": "Extension is removed in proto3 thus C# is using a temp solution to support custom options. We should add extension APIs instead and remove CustomOptions.cs. This is also part of adding C# proto2 support.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/3559", "title": "Support preserving unknown fields in C#", "body": "", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/b308580bb1c3f87a062ac1448a3e0bdaab9d40cf", "message": "Cherrypick for csharp, including:\nAdd preserve UnknownFields\nCompare floating point values bitwise\nAdd auto-generated header to C# generated files"}, {"url": "https://api.github.com/repos/google/protobuf/commits/bfd254e14f60f77f68f4de8524cd8984191206d5", "message": " Add unknown field support for csharp (#3936)\n\n Add unknown field support for csharp"}, {"url": "https://api.github.com/repos/google/protobuf/commits/6d6099553b4e9a0cc6bd5a6a92359862a1728db8", "message": "Update csharp version number (#3958)"}, {"url": "https://api.github.com/repos/google/protobuf/commits/45d99a15f369a698a7f5be790ced1fe7029e6139", "message": "Add _file_desc_by_toplevel_extension back\n\nAdd _file_desc_by_toplevel_extension back for compatibility issue with 3.4.1.\r\n\r\n_file_desc_by_toplevel_extension is a temporary solution for FieldDescriptor.file.\r\nFieldDescriptor.file was added in code gen. However, we need to keep it for some time for compatibility reason (with 3.4.1 only). May try to remove it after 2 years."}], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4081", "title": "Add DiscardUnknownFields support for csharp", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/1796", "title": "Add python protoc package", "body": "Going to provide protoc package in pypi. Only python and c++ code gen are included. The package is currently under grpc tools: https://github.com/grpc/grpc/tree/master/tools/distrib/python/grpcio_tools\n\nAfter install, user can call\n$ python -m google.protoc.protoc -I$INCLUDE --python_out=$OUTPUT $PROTO_FILES\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mathstuf": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4198", "title": "When exporting symbols, an include directive may be necessary", "body": "It'd be nice to have an option to add `#include \"mylib_export.h\"` to generated `.pb.h` files so that export symbols are defined before their use.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4196", "title": "cmake: privately add sources to targets", "body": "Public sources get added to dependencies of the target as well which can\r\ncause duplicate symbols.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "how2bot": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4197", "title": "About installation ", "body": "Hi, im very newbie. can some 1 able to help me settle this.\r\n\r\nIm getting error as below \r\n\r\nFatal error: Class 'ProtobufMessage' not found in C:\\xampp\\htdocs\\xxxfile\\src\\libaxolotl-php\\protobuf\\pb_proto_LocalStorageProtocol.php on line 11\r\n\r\nsomeone told me to check on this extension . but i do not really understand how to do it .\r\n\r\nThank you \r\n[ruuning xampp 7.2 above php in windows ..] ", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alexpantyukhin": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4194", "title": "Is it possible to create own Python class and bind it with message?", "body": "I have a message something like:\r\n```\r\nmessage Point {\r\n  string x = 1;\r\n  string y = 2;\r\n}\r\n```\r\n\r\nBut I want to have in the  pyhon code something like:\r\n```python\r\nclass Point():\r\n    def get_quare():\r\n        return self.x * self.y\r\n\r\n    @property\r\n    def source(self):\r\n        ...\r\n\r\n    @source.setter\r\n    def source(self, address):\r\n        ...\r\n    ...\r\n\r\np = new Point()\r\np.source = 'mysource'\r\np.x = 10\r\np.y = 20\r\nprint(p.get_square())\r\n```\r\n\r\nIs it possible to construct somehow such class with binding it with message `Point` ?\r\nFor example there https://github.com/ligato/vpp-agent/blob/master/vendor/github.com/gogo/protobuf/test/typedecl/typedecl.proto described how to avoid generating type with `typedecl` for go.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "janpaul123": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4190", "title": "[Ruby] Crashes when calling `JSON.fast_generate` on a Protobuf object", "body": "```ruby\r\nrequire 'json'\r\nJSON.fast_generate(MyProtobuf.new)\r\n```\r\n\r\nResults in this error:\r\n```\r\nArgumentError: wrong number of arguments (given 1, expected 0)\r\nfrom ~/.gem/ruby/2.4.2/gems/google-protobuf-3.5.0-universal-darwin/lib/google/protobuf/message_exts.rb:43:in `to_json'\r\n```\r\n\r\nThis affects serialisation in some libraries, like when logging errors using [Raven](https://github.com/getsentry/raven-ruby).", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "opengpu": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4188", "title": "why '-Dprotobuf_MSVC_STATIC_RUNTIME=OFF' must after '-Dprotobuf_WITH_ZLIB=ON' ?", "body": "(1)why '-Dprotobuf_MSVC_STATIC_RUNTIME=OFF' must after '-Dprotobuf_WITH_ZLIB=ON' ?\r\ni tried Dprotobuf_MSVC_STATIC_RUNTIME=OFF/ON both works...and what the difference?\r\n(2)can i build protobuf using zlibstatic.lib instead of zlib.lib? i found that cmake just notice zlib.lib while donot know zlibstatic.lib...is it the only way to build protobuf by using zlib's dynamic lib? can i use zlibstatic.lib and how?\r\n(3)zlibstatic.lib or zlib.lib, which way is better if i use protobuf's static lib with zlib enabled in my EXE and meanwhile directly use zlibstatic.lib in my EXE ?\r\nThank you!", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "acidtonic": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4186", "title": "Consider renaming the 'Status' variable, conflicts with Xlib and others.", "body": "Greetings,\r\n\r\nI have spent a few hours trying to locate a bug that ended up resulting from a naming conflict. My project previously was fine but after moving from protobuf 2.x to 3.x suddenly the code failed to compile. A quick search indicated others hit the same issue, but no answers. Thus I decided to open this issue to both document the issue and attempt to fix this by renaming the \"Status\" declaration to something else. \r\n\r\nIn my case this was a result of a variable conflict by including Xlib on a Gentoo Linux development machine. I was able to eventually resolve by carefully reordering includes such that all Xlib and various X11 headers were all before protobuf includes, followed by an #undef Status. \r\n\r\nSince Xlib vastly predates protobufs usage of the varible, I believe the bug is with protobuf for the sudden usage and not with Xlib... Also Linux is a supported platform of Protobuf and Xlib is rather widespread and well-known. If multiple includes of Xlib are present, it's also very difficult to properly place the #undef Status since all further includes of Xlib components or X11 extensions will also fail as they all rely on the \"Status\" variable existing and being defined as an int.\r\n\r\nSorry for the wordy report but hopefully this gets indexed and helps others who may run into this. I appreciate your time.\r\n\r\nError:\r\n/usr/include/google/protobuf/stubs/logging.h:66:7: error: expected identifier before \u2018int\u2019\r\n class Status;       ^\r\n/usr/include/google/protobuf/stubs/logging.h:66:7: error: multiple types in one declaration\r\nIn file included from /usr/include/google/protobuf/stubs/common.h:50:0,\r\n                 from [snip]/protocol/SomeGeneratedProtocolUsing.pb.h:9,\r\n/usr/include/google/protobuf/stubs/logging.h:90:32: error: expected \u2018)\u2019 before \u2018::\u2019 token\r\n   LogMessage& operator<<(const ::google::protobuf::util::Status& status);\r\n                                ^\r\n/usr/include/google/protobuf/stubs/logging.h:90:32: error: \u2018google::protobuf::internal::LogMessage& google::protobuf::internal::LogMessage::operator<<(...)\u2019 must not have variable number of arguments\r\n/usr/include/google/protobuf/stubs/logging.h:90:26: error: expected \u2018;\u2019 at end of member declaration\r\n   LogMessage& operator<<(const ::google::protobuf::util::Status& status);\r\n                          ^\r\nIn file included from [snip]/HeaderIncludingTheGeneratedProtocol.hpp:10:0,\r\n/usr/include/google/protobuf/stubs/logging.h:90:58: error: expected unqualified-id before \u2018int\u2019\r\n   LogMessage& operator<<(const ::google::protobuf::util::Status& status);\r\n\r\n\r\nFixed by something similar to below....\r\n\r\n#include <X11/xlib.h>\r\n#include All other X11 includes here\r\n#undef Status\r\n#include Protobuf here and all generated proto headers", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/61705054", "body": "done. Thanks\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61705054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61754050", "body": "Z Davis. (listed acidtonic@gmail as my email)\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61754050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "pstibrany": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4177", "title": "Buffer size used in writeDelimitedTo method is often too small", "body": "When sending small messages (e.g. message consisting of single enum) by using AbstractMessageLite#writeDelimitedTo method, this method together with CodedOutputStream will compute very small buffer size of 20.\r\n\r\nAbstractMessageLite#writeDelimitedTo then writes single byte (message size) to the buffer, not leaving enough space for CodedOutputStream.writeEnum method, which always wants at least 20 available bytes, and which then must flush that single byte (message size) to make enough room to write enums.\r\n\r\nThis interplay between AbstractMessageLite#writeDelimitedTo and CodedOutputStream, which needs more free space in the buffer now for many types, causes lot of unnecessary writes to the output stream (which is bad especially when using SocketOutputStream).\r\n\r\nWe have observed this as a major performance hit when upgrading from protobuf 2.5.0 to version 3.\r\n\r\nFor a simple test case, please see https://github.com/pstibrany/protobuf-small-buffer-issue\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AlexLuya": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4176", "title": "How to import .proto file in different package correctly?", "body": "I have two packages like this\r\n\r\n```\r\ncom.abc.\r\n         protobuf.\r\n                    share.proto\r\n         depart.\r\n                    detect.proto \r\n```\r\nand the conent of share.proto like this:\r\n\r\n```\r\nsyntax = \"proto3\";\r\npackage com.adc.protobuf;\r\nmessage Test{}\r\n```\r\nand the content of detect.proto like this:\r\n\r\n```\r\nsyntax = \"proto3\";\r\npackage com.adc.depart;\r\nimport \"com/abc/protobuf/share.proto\"\r\n```\r\nand compile share.proto in it's dir like this:\r\n\r\n`protoc -I=. --python_out=. share.proto`\r\n\r\nthen compile detect.proto in it's dir like this:\r\n\r\n`protoc -I=/pathToSrcDir/ -I=. --python_out=. detect.proto `\r\n\r\nand\r\n\r\npathToSrcDir has been added to PYTHONPATH,all compilations work fine,but when run a python script which\r\n\r\n`from com.abc.depart import detect_pb2`\r\n\r\ngot this error\r\n\r\n```\r\nTypeError: Couldn't build proto file into descriptor pool!\r\nInvalid proto descriptor for file \"detect.proto\":\r\n  detect.proto: Import \"com/abc/protobuf/share.proto\" has not been loaded.\r\n  com.abc.depert.XClass.ymethod: \"com.abc.protobuf.Test\" seems to be defined in \"share.proto\", which is not imported by \"detect.proto\".  To use it here, please add the necessary import.\r\n```\r\nHow to solve this import problem?", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jinfagang": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4175", "title": "Can not print out Message as string and save to prototxt", "body": "I just want to print out a message, I am using this codes:\r\n\r\n```\r\nstring resultStr;\r\ndetectionResult.SerializeToString(&resultStr);\r\nprintf(\"%s\", resultStr.c_str());\r\n```\r\n`detectionResult` is my message. But it just got some unicode binary outputs rather than strings and numbers, just not as prototxt beautiful json-like string was.\r\n\r\nI also try to save my Message into a prototxt file which I believe more readable then binary.\r\n```\r\nchar* saveTxtFile = \"det.prototxt\";\r\n    int f = open(saveTxtFile, O_WRONLY|O_CREAT|O_TRUNC);\r\n    auto outputTxtFile = new FileOutputStream(f);\r\n    if (!google::protobuf::TextFormat::Print(detectionResult, outputTxtFile)) {\r\n        cao::Log(kError, \"error in save to prototxt\");\r\n    }\r\n```\r\n\r\nThis gives me an error, I remove the file and try again, it saved blank message. What is the right way to do this? Forgive my ignorance on protobuf but it's really leak of examples on this.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aqsc": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4173", "title": "Does  libprotobuf whose version >2.6 support python2.7\uff1f", "body": "Does  libprotobuf whose version >2.6 support python2.7\uff1f\r\n We find the official reports that the libprotobuf whose version >2.6 support python3, but I want to ask whether they support python2.7......", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shenlanting": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4171", "title": "Who should I e-mail if I find a problem weaknesses/bugs?", "body": "We found some weaknesses/bugs. Please give an e-mail address, so I can send you the details.\r\n\r\ntks.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SeriousMa": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4170", "title": "(Java)How can I get com.google.protobuf.Descriptors.FileDescriptor without from XXXOuterClass,Is there a way to get com.google.protobuf.Descriptors.FileDescriptor from protobin file?", "body": "rt", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "HaasCM": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4169", "title": "Invalid Address in libprotobuf-lite.so.9", "body": "I've been building google protoc-3.5.1 from source on Ubuntu 16.04 LTS. I've tried compiling with gcc-6.3 and gcc-5.3. When I run `make check` it always passes. `protoc` is building the *.h and *.cc files correctly. However, when I try to link the protoc libraries my application it has been crashing within the protoc libraries; specifically, libprotobuf-lite.so.9. The `lldb` output is:\r\n\r\n`thread #1: tid = 13913, 0x00007fffe2a0b516 libprotobuf-lite.so.9 google::protobuf::internal::Mutex::Lock() + 6, name = 'TANS', stop reason = signal SIGSEGV: invalid address (fault address: 0x0)`\r\n\r\nFor context, I am trying to link the protoc libraries with a C++/Qt Application using Qt 5.10.0.\r\n\r\nI've tried compiling example applications as well; they are crashing in the same location; therefore, I believe it's my environment. I've scoured the internet looking for information on the issue and have not been able to come up with any solution.\r\n\r\nThis brings me to posting this issue. Has anyone ever seen any issue like this? If not, direction that I should search in?\r\n\r\nAny help or insight into this issue would be greatly appreciated. ", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shihabkaranchery": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4165", "title": "ReferenceError: goog is not defined", "body": "I follow the steps in the docs, convert the .proto message to myproto_libs.js file while importing the file\r\n\r\nfollowing error occurred \r\nReferenceError: goog is not defined\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mvdan": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4163", "title": "protoc: allow using stdin/stdout in FILE/FILES parameters", "body": "For example, right now I'm doing:\r\n\r\n    protoc -o/dev/stdout --include_imports test.proto\r\n\r\nI am calling protoc from a Go program, so this limitation requires me to either use a temporary file, or hard-code `/dev/stdout` which is not portable. Both are unnecessarily complex.\r\n\r\nI'm not sure what the best way to expose this would be. Some programs use special values, such as `-` to mean standard input.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "diclogic": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4157", "title": "Unable to use proto_h mode in cpp generator", "body": "there's an option called proto_h defined in Options in compiler/cpp directory. it is used in many places and there're comments mentioning about as \".proto.h mode\", but there's no way to turn this option on and there's no document about it. It has a feature useful to me, it generates enum with `int` enum base type, which means forward declarations become available for that kind of enums. I think that would be useful to anyone who want to hide the details of a enum from a header file, or simply making forward declaration file for a enum type generated by protobuf.\r\n[cpp_generator.cc](https://github.com/google/protobuf/blob/master/src/google/protobuf/compiler/cpp/cpp_generator.cc)\r\n[cpp_options.h](https://github.com/google/protobuf/blob/master/src/google/protobuf/compiler/cpp/cpp_options.h)", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "teeks99": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4156", "title": "Old versions of gcc give warnings for pragma diagnostic push and pop", "body": "`#pragma GCC diagnostic push` and `#pragma GCC diagnostic pop` are only supported in gcc >= 4.6. \r\n\r\nA solution to this would be to change the guards from\r\n```c++ \r\n#ifdef __GNUC__\r\n  #pragma GCC diagnostic push\r\n  #pragma GCC diagnostic ignored \"-Wstrict-aliasing\"\r\n#endif  // __GNUC__\r\n```\r\nand\r\n```c++ \r\n#ifdef __GNUC__\r\n  #pragma GCC diagnostic pop\r\n#endif  // __GNUC__\r\n```\r\nTo: \r\n```c++ \r\n#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)\r\n  #pragma GCC diagnostic push\r\n  #pragma GCC diagnostic ignored \"-Wstrict-aliasing\"\r\n#endif  // __GNUC__\r\n```\r\nand\r\n```c++ \r\n#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)\r\n  #pragma GCC diagnostic pop\r\n#endif  // __GNUC__\r\n```\r\n\r\nThere are approximately a dozen header files that do this, as well as the cpp_file.cc codegen.  This could be applied to the 3.?.x branches, but might not be needed on master....if master is now c++11, gcc versions before 4.6 might not work with it anyway...I guess it depends on how good various gcc's -std=c++0x support was back then. Might not hurt to apply to master as well.\r\n  ", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4161", "title": "Guards for older GCC versions", "body": "Fixes #4156", "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/4160", "title": "Guards for older GCC versions", "body": "Fixes #4156", "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/4159", "title": "Guards for older GCC versions", "body": "Fixes #4156", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ShvadronUzi": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4155", "title": "free(): invalid pointer", "body": "Hi,\r\nI am getting \"free(): invalid pointer\" error when using ^c to exit a program that uses protobuf (in caffe):\r\n/usr/lib/x86_64-linux-gnu/libprotobuf.so.9(_ZN6google8protobuf8internal28DestroyDefaultRepeatedFieldsEv+0x1f)[0x7f5f272ec8af]\r\nAny idea why this may happen?\r\n10x", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ivoshabarkov": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4153", "title": "Javascript generated code - repeated properties", "body": "If I have a repeated property for example:\r\n\r\nrepeated SomeType firstSecond = 1;\r\n\r\nprotoc generates a property named 'firstsecondList'.\r\n\r\nThat is quite unexpected. I would rather have my javascript properties be named as they are in the proto file, or at least to follow a javascript convention. Starting with a lower case letter and using upper case for the first letter of every other word in it.\r\nIs there an option I can set to the generator to accomplish this?\r\n\r\nEdit:\r\nAll of my properties are completely lower case. The common convention is to use camelCase for naming variables and object properties. \r\n\r\nEdit:\r\nI looked at the code an I see you expect the properties to be underscore separated. I think it would be nice if it is optional. I had to change the code a little to handle camelCase named properties.\r\n  \r\n  ", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zhangyangsk8": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4152", "title": "Zero-value Enum types are not be seted correctly  in objectivec language", "body": "define enum type in some.pbobjc.h:\r\ntypedef GPB_ENUM(someStatus) {\r\n  Status_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,\r\n  StatusNotStart = 0,\r\n  StatusStart = 1,\r\n  StatusPaused = 3,\r\n  StatusStop = 4,\r\n};\r\ndefine a Property in otherClass like this:\r\n@property (nonatomic, assign) someStatus type;\r\n\r\notherClass.type = StatusNotStart;//can not be seted the zero-value\r\notherClass.type = StatusStart;//if the value is not zero-value it can be seted correctly\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bshaffer": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4151", "title": "Protobuf PHP C extension is not escaping strings for JSON serialization", "body": "When calling `serializeToJsonString `, the Message object in the C Extension does not escape slashes, causing an error in the following code:\r\n\r\n```php\r\n   // add this to tests/encode_decode_test.php\r\n    public function testJsonEncodeEscaping()\r\n    {\r\n        $string = 'this\\\\/should/be/escaped';\r\n        $from = new TestMessage();\r\n        $from->setOptionalString($string);\r\n        $data = $from->serializeToJsonString();\r\n        $to = new TestMessage();\r\n        $to->mergeFromJsonString($data);\r\n        $this->assertEquals(\r\n            $from->getOptionalString(),\r\n            $to->getOptionalString()\r\n        );\r\n    }\r\n```\r\n\r\nAnother less important but still pressing issue can be seen in [this test](https://travis-ci.org/googleapis/gax-php/jobs/326584734#L2834), which shows that the native library escapes slashes but the C extension does not:\r\n\r\n```php\r\n   // add this to tests/encode_decode_test.php\r\n    public function testJsonEncodeEscapeForwardSlash()\r\n    {\r\n        $string = 'this\\\\/should/be/escaped';\r\n        $from = new TestMessage();\r\n        $from->setOptionalString($string);\r\n        $data = $from->serializeToJsonString();\r\n        $this->assertContains(json_encode($string), $data);\r\n    }\r\n```\r\n\r\n**Note**: Both of these tests pass when the `google/protobuf` composer package is used instead.\r\n  ", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/4107", "title": "PHP Protobuf is causing a segmentation fault", "body": "I am receiving a segmentation fault when using the current version of the protobuf C extension for PHP. This is duplicated by [this travis test for PHP 5.6](https://travis-ci.org/googleapis/gax-php/jobs/322270222#L2829) and [this travis test for PHP 7.2](https://travis-ci.org/googleapis/gax-php/jobs/322270226#L2797):\r\n\r\n```\r\n$ vendor/bin/phpunit --coverage-clover=coverage.xml\r\nPHPUnit 4.8.36 by Sebastian Bergmann and contributors.\r\n...............................................................  63 / 276 ( 22%)\r\n...../home/travis/.travis/job_stages: line 57: 30853 Segmentation fault      (core dumped) vendor/bin/phpunit --coverage-clover=coverage.xml\r\n\r\n```\r\n\r\nI can reproduce this on my local machine for PHP 5.6 and PHP 7.2 also.\r\n\r\nThis may be fixed by #4102, but strangely enough the 3.5.1 version of the protobuf extension has [already been released in PECL](https://pecl.php.net/package/protobuf/3.5.1). Can someone shed some light on this situation?\r\n\r\nIn the meantime I'll do some digging to see what the exact line is which causes the fault. ", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/3369", "title": "Split into a sub-namespace instead of using underscores for sub-messages", "body": "For PHP, Instead of having class names such as `RedactContentRequest_ReplaceConfig`, it would be better if `RedactContentRequest` was a namespace, and the class was `ReplaceConfig`, i.e.:\r\n\r\n```php\r\nnamespace Google\\Privacy\\Dlp\\V2beta1\\RedactContentRequest;\r\n\r\n//...\r\n\r\n/**\r\n * Generated from protobuf message <code>google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig</code>\r\n */\r\nclass ReplaceConfig extends \\Google\\Protobuf\\Internal\\Message\r\n{\r\n    //...\r\n}\r\n```\r\n\r\nThe namespaced version is much cleaner and more idiomatic with the language.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3369/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/3330", "title": "PHP: Second argument to GPBUtil::checkEnum is not used", "body": "The GPBUtil class has a function called [`checkEnum`](https://github.com/google/protobuf/blob/master/php/src/Google/Protobuf/Internal/GPBUtil.php#L8), which is an alias for `checkInt32`.\r\n\r\nThe generated enum fields [call this function](https://github.com/google/protobuf/blob/12acbc2678073c3439b427be0b713b97e2074bfb/php/src/Google/Protobuf/Internal/MethodOptions.php#L101) and pass in a second argument which is the class name of the enum field, e.g. `MyEnum::class`. \r\n\r\nSo either this second field should be used to determine if the enum integer is valid, or it should not be supplied as an argument to `checkEnum`.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3371", "title": "includes the expected class in the exception, otherwise the error is \u2026", "body": "\u2026harder to track down", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/3349", "title": "PHP array constructors for protobuf messages", "body": "RFC for adding array construction for PHP messages, i.e.\r\n\r\n```php\r\n$m = new TestMessage([\r\n    'int' => -42,\r\n    'message' => ['a' => 33],\r\n    'repeated_message' => [\r\n        new TestMessage_Sub(['a' => 34]),\r\n        ['a' => 35],\r\n    ],\r\n    'map_message' => [\r\n        1 => new TestMessage_Sub(['a' => 36])\r\n    ],\r\n]);\r\n```", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/3338", "title": "Only use full PHP classnames when necessary", "body": "/cc @michaelbausor ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/3334", "title": "imports GPBType instead of using complete classname", "body": "`GPBType` is already imported in the message class, but the absolute classname is being used everywhere. Because we've imported it, we can make the generated code *much* more readable by using the shortened name.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/3331", "title": "adds PHP typehints for message-type setters", "body": "This adds typehints for all Message setters. A few other interesting things have happened as a result:\r\n\r\n  1. Setters for Message types no longer pass-by-reference, since this is implicit for PHP objects\r\n  1. Setters for Message types now accept an optional `null`, since the base `Message` class requires passing `null` to the public setters in order for the method `clear()` to work.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pongad": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4150", "title": "Java documentation out of date", "body": "The `Durations` utility class has gotten methods like `compare` but this seems to not be documented [here](https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/util/Durations).", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "asemaniko": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4149", "title": "protobuf-2.6.1 make eror", "body": "mingw32\r\n\r\n\r\n$ make\r\nmake  all-recursive\r\nmake[1]: Entering directory `/c/deps/protobuf-2.6.1'\r\nMaking all in .\r\nmake[2]: Entering directory `/c/deps/protobuf-2.6.1'\r\nmake[2]: Leaving directory `/c/deps/protobuf-2.6.1'\r\nMaking all in src\r\nmake[2]: Entering directory `/c/deps/protobuf-2.6.1/src'\r\ndepbase=`echo google/protobuf/compiler/main.o | sed 's|[^/]*$|.deps/&|;s|\\.o$||'`;\\\r\n        g++ -DHAVE_CONFIG_H -I. -I..     -Wall -Wwrite-strings -Woverloaded-virtual -Wno-sign-compare -O2 -g -DNDEBUG -MT google/protobuf/compiler/main.o -MD -MP -MF $depbase.Tpo -c -o google/protobuf/compiler/main.o google/protobuf/compiler/main.cc &&\\\r\n        mv -f $depbase.Tpo $depbase.Po\r\nIn file included from ./google/protobuf/compiler/command_line_interface.h:41,\r\n                 from google/protobuf/compiler/main.cc:33:\r\n./google/protobuf/stubs/common.h:48:20: stdint.h: No such file or directory\r\nIn file included from ./google/protobuf/compiler/command_line_interface.h:41,\r\n                 from google/protobuf/compiler/main.cc:33:\r\n./google/protobuf/stubs/common.h:175: error: `uint8_t' does not name a type\r\n./google/protobuf/stubs/common.h:176: error: `uint16_t' does not name a type\r\n./google/protobuf/stubs/common.h:177: error: `uint32_t' does not name a type\r\n./google/protobuf/stubs/common.h:178: error: `uint64_t' does not name a type\r\n./google/protobuf/stubs/common.h:201: error: `uint32' does not name a type\r\n./google/protobuf/stubs/common.h:202: error: `uint64' does not name a type\r\n./google/protobuf/stubs/common.h:1172: error: `uint32' does not name a type\r\nmake[2]: *** [google/protobuf/compiler/main.o] Error 1\r\nmake[2]: Leaving directory `/c/deps/protobuf-2.6.1/src'\r\nmake[1]: *** [all-recursive] Error 1\r\nmake[1]: Leaving directory `/c/deps/protobuf-2.6.1'\r\nmake: *** [all] Error 2", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lisongmin": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4143", "title": "can not build protobuf 3.5.1 under ia64 platform", "body": "\r\nHi, when i build 3.5.1 with ia64 arch, there is a link error:\r\n\r\n```\r\nlibtool: link: ia64-linux-g++ -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -O2 -g -DNDEBUG -pthread -Wl,-rpath -Wl,\\$ORIGIN:\\$ORIGIN/../lib:\\$ORIGIN/../lib64 -o .libs/protoc google/protobuf/compiler/main.o  ./.libs/libpr\r\notobuf.so ./.libs/libprotoc.so /tmp/protobuf-3.5.1/build_ia64/src/.libs/libprotobuf.so -lpthread /usr/local/ia64-linux/lib/libstdc++.so -lm -lz -pthread -Wl,-rpath -Wl,/usr/local/ia64-linux/lib\r\n./.libs/libprotobuf.so: undefined reference to `google::protobuf::internal::Release_CompareAndSwap(long volatile*, long, long)'\r\ncollect2: error: ld returned 1 exit status                        \r\nmake[3]: *** [protoc] Error 1  \r\n```\r\n\r\n3.3.0 is built success with the same enviroment.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "PengPengHub": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4141", "title": "An invalid file which is parsed successfully by protobuf", "body": "Hi There\r\n\r\nBaidu X-Lab found a suspicious issue of protobuf, please see the attachment for reproducing this issue. In addition, does google provide CVE for the confirmed bug?\r\n\r\nThanks\r\nPeng\r\n\r\n\r\n[protobuf_test.tar.gz](https://github.com/google/protobuf/files/1605558/protobuf_test.tar.gz)\r\n+++++++\r\nProtobuf bug report\r\n1 download protobuf from:\r\nhttps://github.com/google/protobuf\r\n\r\n2 build and install protobuf\r\nhttps://github.com/google/protobuf/blob/master/src/README.md\r\n\r\n3 extra test sample\r\n\r\n4 build test sample\r\n\r\n5 test bug with command:\r\n ./test ./testfile/file\r\n\r\nThe testfile is a invalid protobuf file ,but it is parsed successful\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kamrankausar": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4137", "title": "Connecting", "body": "self.socket.sendall(struct.pack('!I', len(message)) + message)\r\n\r\nOSError: [Errno 9] Bad file descriptor", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ZhouyihaiDing": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4134", "title": "PHP: Incorrect handling for echo.proto", "body": "I installed protobuf from current github master and have a file name `echo.proto`.\r\nAfter running `protoc --php_out=generated_code echo.proto`, it generates `GPBMetadata/Echo.php` instead of `GPBMetadata/GPBEcho.php`. Also, in Message, it generates `\\GPBMetadata\\Echo::initOnce();` in the construct function.\r\nThe same with `array.proto`. But for `empty.proto`, it will generate `GPBMetadata/GPBEmpty.php`\r\n  ", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fweidner": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4129", "title": "Unreal Engine Integration failed:  unresolved external symbol __std_reverse_trivially_swappable_8", "body": "Hey folks!\r\n\r\nI'm using protobuf with Unreal Engine 4.18.2. \r\nToday, I wanted to upgrade to from 3.4.0 to 3.5.1\r\n\r\nIn my UE4 project, I'm linking against libprotobuf.lib\r\n\r\nAfter having applied #4000 and commenting out \"static_assert(std::is_pod<AuxillaryParseTableField>::value, \"\");\" in generated_message_table_driven.h I'm stuck again.\r\n\r\nWhen compiling the UE4 project in Visual Studio 2017, I get the following two errors:\r\n...\r\n1>libprotobuf.lib(text_format.obj) : error LNK2019: unresolved external symbol __std_reverse_trivially_swappable_8 referenced in function \"void __cdecl std::_Buffered_inplace_merge_divide_and_conquer2<class google::protobuf::Message const * *,__int64,class google::protobuf::Message const *,class google::protobuf::DynamicMapSorter::MapEntryMessageComparator>(class google::protobuf::Message const * *,class google::protobuf::Message const * *,class google::protobuf::Message const * *,__int64,__int64,struct std::_Temporary_buffer<class google::protobuf::Message const *> &,class google::protobuf::DynamicMapSorter::MapEntryMessageComparator,class google::protobuf::Message const * *,class google::protobuf::Message const * *,__int64,__int64)\" (??$_Buffered_inplace_merge_divide_and_conquer2@PEAPEBVMessage@protobuf@google@@_JPEBV123@VMapEntryMessageComparator@DynamicMapSorter@23@@std@@YAXPEAPEBVMessage@protobuf@google@@00_J1AEAU?$_Temporary_buffer@PEBVMessage@protobuf@google@@@0@VMapEntryMessageComparator@DynamicMapSorter@23@0011@Z)\r\n\r\n1>libprotobuf.lib(wire_format.obj) : error LNK2001: unresolved external symbol __std_reverse_trivially_swappable_8\r\n\r\n1>F:\\CloudStation\\UE4\\Plugin_C2IReceiver_cpp\\Plugins\\C2IReceiverPlugin\\Binaries\\Win64\\UE4Editor-C2IReceiverPlugin.dll : fatal error LNK1120: 1 unresolved externals\r\n...\r\n`\r\n\r\nWith 3.4.0, I can compile it. \r\n\r\nDoes anyone have encountered the same error or has any suggestions for a fix?\r\n\r\nEDIT: Error starts appearing with 3.4.1\r\n\r\n  \r\n  ", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4129/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wawade": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4126", "title": "error when I reload dynamic library which links against shared protobuf lib", "body": "Hi, \r\n\r\nI have a plugin architecture which will load shared libraries at run time. The shared libraries are linked against protobuf shared library (3.5.0). When I do load and unload, everything is fine, but when I do load again, I get the following error message:\r\n\r\n[libprotobuf ERROR /home/ling/docker_dev/src/Packages/protobuf/src/google/protobuf/descriptor_database.cc:58] File already exists in database: google/protobuf/wrappers.proto\r\n[libprotobuf FATAL /home/ling/docker_dev/src/Packages/protobuf/src/google/protobuf/descriptor.cc:1394] CHECK failed: generated_database_->Add(encoded_file_descriptor, size): \r\nterminate called after throwing an instance of 'google::protobuf::FatalException'\r\n  what():  CHECK failed: generated_database_->Add(encoded_file_descriptor, size): \r\nBackend got SIGABRT !\r\n\r\nMy understanding is that some global variables are initialized during the first load. And when I unload my shared libraries, the protobuf-generated global variables are not cleaned up and they are initialized the second time when I call load again. Then something goes wrong... Am I correct? I have checked ShutdownProtobufLibrary, but it doesn't work for me and I only want to clean the protobuf data generated in my shared library, not overall. And I do not want to use lite version. \r\n\r\nDo you have an idea how to fix this? I am looking forward to your reply.\r\n\r\nBest, Siqi\r\n  ", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pim89": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4125", "title": "C1061 error with many repeated fields in VS 2008", "body": "For reasons I am stuck with Visual Studio 2008.\r\nWhen compiling a proto.pb.cc file with >250 repeated fields I get the error:\r\n\"fatal error C1061: compiler limit : blocks nested too deeply\"\r\nThis is a known bug of visual studio (https://support.microsoft.com/en-us/help/315481/bug-too-many-unnested-loops-incorrectly-causes-a-c1061-compiler-error), and caused by having >250 unnested for loops in one scope.\r\nIt is fixable by putting the for loops in separate scopes. For backwards compatibility this might be worth implementing, at least in a c++98 branch.\r\n\r\nIn my particular case I put [this](https://github.com/google/protobuf/blob/master/src/google/protobuf/compiler/cpp/cpp_primitive_field.cc#L404) 'for' loop extra between { ... } to fix the problem.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nddipiazza": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4123", "title": "protoc doesn't generate dependent stubs", "body": "Why when I run a `protoc` on a proto file that has multiple dependencies do I only get the source stub generated for the proto file itself, not the dependencies? This results in generation of source files that don't compile which isn't ideal in my use case.\r\n\r\nI am using C# GRPC and getting the nuget package for Google.Protobuf.Tools and running `protoc` from there. \r\n\r\nexample: \r\n\r\n`/home/ndipiazza/grpcdir/grpctest-connectors/examples/csharp-connector/csharp-connector/../packages/Grpc.Tools.1.8.0/tools/linux_x64/protoc --proto_path=/home/ndipiazza/grpcdir/grpctest-connectors/examples/csharp-connector/csharp-connector/../../../grpc/proto/build/extracted-include-protos/main --proto_path=/home/ndipiazza/grpcdir/grpctest-connectors/examples/csharp-connector/csharp-connector/../packages/Google.Protobuf.Tools.3.5.1/tools --proto_path=/home/ndipiazza/grpcdir/grpctest-connectors/examples/csharp-connector/csharp-connector/../../../grpc/proto/src/main/proto --csharp_out /home/ndipiazza/grpcdir/grpctest-connectors/examples/csharp-connector/csharp-connector --grpc_out /home/ndipiazza/grpcdir/grpctest-connectors/examples/csharp-connector/csharp-connector --include_imports --plugin=protoc-gen-grpc=/home/ndipiazza/grpcdir/grpctest-connectors/examples/csharp-connector/csharp-connector/../packages/Grpc.Tools.1.8.0/tools/linux_x64/grpc_csharp_plugin /home/ndipiazza/grpcdir/grpctest-connectors/examples/csharp-connector/csharp-connector/../../../grpc/proto/src/main/proto/grpcdir/connector-service.proto`\r\n\r\nWill only generate the files in `connector-service.proto`. But all the dependent source will not get generated. So I have to start finding each dependent proto file one-by-one and add them. Is there a way around having to do that? I tried using `*.proto` that didn't work.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "djdeath": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4122", "title": "Compilation fails with latest emscripten ", "body": "In the src/google/protobuf/stubs/port.h file, there is this bit of defines : \r\n\r\n```\r\n#if defined(__clang__) && defined(__has_cpp_attribute) \\\r\n    && !defined(GOOGLE_PROTOBUF_OS_APPLE)\r\n# if defined(GOOGLE_PROTOBUF_OS_NACL) || defined(EMSCRIPTEN) || \\\r\n     __has_cpp_attribute(clang::fallthrough)\r\n#  define GOOGLE_FALLTHROUGH_INTENDED [[clang::fallthrough]]\r\n# endif\r\n#elif defined(__GNUC__) && __GNUC__ > 6\r\n# define GOOGLE_FALLTHROUGH_INTENDED [[gnu::fallthrough]]\r\n#endif\r\n\r\n#ifndef GOOGLE_FALLTHROUGH_INTENDED\r\n# define GOOGLE_FALLTHROUGH_INTENDED\r\n#endif\r\n\r\n```\r\n\r\nCompilation using the latest version of emscripten (1.37.27), compiling protobuf fails because the ```[[clang::fallthrough]]``` isn't recognized : \r\n\r\n```\r\nemsdk-portable/emscripten/1.37.27/em++ -s WASM=1 -O2 -Iprotoc@sha -I. -I.. -I../src -Xclang -fcolor-diagnostics -pipe -D_FILE_OFFSET_BITS=64 -Wall -Winvalid-pch -Wnon-virtual-dtor -O0 -g -fPIC -DHAVE_PTHREAD -Wno-sign-compare -Wno-unused-parameter -Wno-ignored-qualifiers -Wno-unused-function -MMD -MQ 'protoc@sha/src_google_protobuf_compiler_cpp_cpp_map_field.cc.o' -MF 'protoc@sha/src_google_protobuf_compiler_cpp_cpp_map_field.cc.o.d' -o 'protoc@sha/src_google_protobuf_compiler_cpp_cpp_map_field.cc.o' -c ../src/google/protobuf/compiler/cpp/cpp_map_field.cc\r\nIn file included from ../src/google/protobuf/compiler/cpp/cpp_map_field.cc:32:\r\nIn file included from ../src/google/protobuf/compiler/cpp/cpp_helpers.h:42:\r\nIn file included from ../src/google/protobuf/descriptor.pb.h:25:\r\nIn file included from ../src/google/protobuf/generated_message_table_driven.h:35:\r\n../src/google/protobuf/map_entry_lite.h:204:11: error: expected expression\r\n          GOOGLE_FALLTHROUGH_INTENDED;\r\n          ^\r\n../src/google/protobuf/stubs/port.h:244:39: note: expanded from macro 'GOOGLE_FALLTHROUGH_INTENDED'\r\n#  define GOOGLE_FALLTHROUGH_INTENDED [[clang::fallthrough]]\r\n                                      ^\r\n1 error generated.\r\nERROR:root:compiler frontend failed to generate LLVM bitcode, halting\r\n```\r\nI think the define above should probably drop the defined(EMSCRIPTEN). If emscripten allows ```[[clang::fallthrough]]``` it will probably expose it through ```__has_cpp_attribute``` and if not, then compilation won't fail.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "VaronisDNMacClient": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4120", "title": "Keep '_' in property name in C# generated code", "body": "Hi,\r\n\r\nFrom trial and error, the [style guide](https://developers.google.com/protocol-buffers/docs/style) and [source code](https://github.com/google/protobuf/blob/f39cf88a347767d25572f7344eab44359d872925/src/google/protobuf/compiler/csharp/csharp_helpers.cc) I see that all recurrences of the character '_' are eliminated from property name when generating C# code.\r\n\r\nCan this be overridden or avoided in some way? I need my properties with underscore (or any other char that can be perceived as a separator).", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DavidChennells": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4119", "title": "C# AddressBook example and/or documentation not adequate to get started with version 3.5.1", "body": "Steps to repro:\r\n1. Download current version 3.5.1 and open Google.Protobuf.sln in VS2017 v15.x (I used 15.4).\r\n2. Set a breakpoint on line 52 of AddressBook Program.cs.\r\n3. Rebuild all from within the IDE.\r\n4. Run in the IDE (F5)\r\n\r\nResults:\r\nA. Builds okay.\r\nB. After F5 run, a brief (<100 ms) screen flash appears of a console window opening and closing.\r\nC. Nothing on the Debug output pane.\r\nD. No errors.\r\nE. Breakpoint not hit.\r\n\r\nExpected result:\r\nHitting the breakpoint if set or alternatively have the console window appear and stay up.\r\n\r\nDocumentation consulted:\r\n- The CSharp tutorial references the AddressBook project and says that the example is \"complete\" within the \"csharp/src/AddressBook directory of the GitHub repository\".\r\n- The ReadMe.md file in the csharp root talks about building the Google.Protobuf.sln but does not refer to any known issues in running (debugging) with the default startup project of AddressBook and configured Startup object.\r\n- The examples ReadMe at https://github.com/google/protobuf/tree/master/examples speaks about using Bazel, but the actual Build and Workspace files in the examples folder does not have a section pertaining to C#\r\n\r\nI'm sure I'm missing something obvious.  Is running the csharp example in VS2017 a supported scenario?  I have not yet tried to create a replacement AddressBook2 project using alternative dependencies such as the full framework or NET Core 2.04.\r\n\r\nHappy to pitch-in in getting the csharp example up and running or in improving the docs if someone can provide some initial guidance as to any known issues.\r\n\r\nUPDATE - FURTHER OBSERVATIONS 1/2/2018:\r\n1. I performed a clean re-installation of VS2017 to 15.5.2 to confirm that the problem persists with the latest version of the tooling.  AddressBook does not run, at least not in the IDE in debug mode.\r\n2. I attempted to migrate the AddressBook project as provided in 3.5.1 to NETCore 2.0 but found that the path of least resistance is to use File-New in VS2017 to create a replacement project in a new solution and then migrate the other existing constituent projects.  Having done that, the AddressBook example runs okay targeting .NET Core 2.0.\r\n3. Alternatively, I note that it is possible within the existing solution to create a full framework version of AddressBook that runs okay.\r\n\r\nI would be happy to prepare a pull-request based on number 2 (above) to get the AddressBook project working and simultaneously migrate it to NETCore 2.0, a far more viable framework in any case.  I will be on holiday from mid-January, so please let me know sooner rather than later if this would be useful, (@jskeet).", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4128", "title": "Add VS2017 optional component dependency details to the C# ReadMe for #4119", "body": "Add mention to the \"Build\" section of the ReadMe of the requirement of installing an optional component to VS2017, as discussed with @jskeet in #4119.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jpwhiting": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4118", "title": "Unresolved external fixed_address_empty_string when trying to use dll on windows MSVC 2015", "body": "As has happened before (and somehow still happens even if I use the commits right after the fix is merged) if I build dll on windows with MSVC 2015 and try to link to libprotobuf I get an unresolved external symbol class google::protobuf::internal::ExpliticlyConstructed<class std::basic_string<char, struct std::char_traits<char>, class std::allocatar<char> > > google::protobuf::internal::fixed_address_empty_string\r\n\r\nChecking the dll with dumpbin /exports shows fixed_address_empty_string was exported, yet linking fails to see it somehow...", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nathanielmanistaatgoogle": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4115", "title": "Offer new \"ToBytes\" and \"FromBytes\" behaviors as successors of \"SerializeToString\" and \"FromString\"", "body": "Now that [Python 3 has finally won](https://twitter.com/pycharm/status/865659029460209664), the names of the behaviors `SerializeToString` and `FromString` are especially problematic as the former doesn't return instances of `str` and the latter doesn't accept instances of `str` (right?).\r\n\r\nIt would be better if the API offered successor methods more helpfully named `ToBytes` (or maybe `SerializeToBytes` if strictly necessary, but `ToBytes` is definitely the more attractive name) and `FromBytes`.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/3453", "title": "Weird interplay between pip, virtualenv, protobuf, and DESCRIPTOR.services_by_name", "body": "On my recent-enough-ish Debian (8.7) workstation with `virtualenv` 13.1.2:\r\n```\r\n$ virtualenv venv\r\n$ venv/bin/pip install --upgrade pip protobuf # installs pip 9.0.1 protobuf 3.3.0 setuptools-36.2.7 six-1.10.0\r\n$ wget https://raw.githubusercontent.com/grpc/grpc/master/examples/python/helloworld/helloworld_pb2.py\r\n$ venv/bin/python2.7\r\n>>> import helloworld_pb2\r\n>>> dict(helloworld_pb2.DESCRIPTOR.services_by_name)\r\n{}\r\n```\r\nbut if the force the reinstallation of `protobuf`:\r\n```\r\n$ venv/bin/pip install --upgrade --force-reinstall protobuf\r\n```\r\nthe `services_by_name` [FileDescriptor](https://developers.google.com/protocol-buffers/docs/reference/python/google.protobuf.descriptor.FileDescriptor-class) attribute is populated:\r\n```\r\n$ venv/bin/python2.7\r\n>>> import helloworld_pb2\r\n>>> dict(helloworld_pb2.DESCRIPTOR.services_by_name)\r\n{'Greeter': <google.protobuf.pyext._message.ServiceDescriptor object at 0x7f8c5a685550>}\r\n```\r\n! What's up with that?", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/3283", "title": "Add capability to message Descriptor objects to instantiate, serialize, and deserialize?", "body": "Given a [`google.protobuf.descriptor.Descriptor`](https://developers.google.com/protocol-buffers/docs/reference/python/google.protobuf.descriptor.Descriptor-class) object `my_message_descriptor`, I'd like to be able to run code like\r\n```python\r\nmy_test_integer = 5\r\n\r\nmy_message = my_message_descriptor.create(my_field=my_test_integer)\r\n\r\n# Equivalent to \"my_message.SerializeToString()\".\r\n# Possibly better named \"to_bytes\"?\r\nmy_serialized_message = my_message_descriptor.serialize(my_message)\r\n\r\n# Duck-type-equivalent to \"<message class>.FromString(my_serialized_message)\".\r\n# Possibly better named \"from_bytes\"?\r\nmy_serialized_then_deserialized_message = my_message_descriptor.deserialize(\r\n    my_serialized_message)\r\n\r\n# (Duck-type-equivalence.)\r\nassert my_message == my_serialized_the_deserialized_message\r\nassert my_message == my_generated_module_pb2.MyMessage.FromString(my_serialized_message)\r\nassert my_message == my_generated_module_pb2.MyMessage(my_field=my_test_integer)\r\n```\r\n. Is there a reason [`Descriptor`](https://developers.google.com/protocol-buffers/docs/reference/python/google.protobuf.descriptor.Descriptor-class) objects aren't so capable today?\r\n\r\nIs message instantiation, serialization, and deserialization something I should be able to do today given only a [`Descriptor`](https://developers.google.com/protocol-buffers/docs/reference/python/google.protobuf.descriptor.Descriptor-class)? If so, is it as straightforward as illustrated above and I'm just not seeing how?", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ashi009": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4113", "title": "proto file formatter", "body": "Hi all,\r\n\r\nIs there a proto file formatter somewhere?\r\n\r\nIf not, why there isn't one? It seems possible to create a working prototype from FileDescriptor.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "linux2014linux": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4111", "title": "protobuf 3.3 make check libprotoc.so: undefined reference to well_known_types_js", "body": "libtool: link: ( cd \".libs\" && rm -f \"libprotoc.la\" && ln -s \"../libprotoc.la\" \"libprotoc.la\" )\r\n/bin/bash ../libtool --tag=CXX   --mode=link g++ -std=c++11 -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -O2 \r\n-g -DNDEBUG -pthread  -o protoc google/protobuf/compiler/main.o -lpthread libprotobuf.la libprotoc.la -lz \r\nlibtool: link: g++ -std=c++11 -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -O2 -g -DNDEBUG -pthread -o .libs/\r\nprotoc google/protobuf/compiler/main.o  -lpthread ./.libs/libprotobuf.so ./.libs/libprotoc.so -lz -pthread\r\n./.libs/libprotoc.so: undefined reference to `well_known_types_js'\r\ncollect2: error: ld returned 1 exit status\r\nmake[1]: *** [protoc] \u9519\u8bef 1                                                                                                    \r\nmake[1]:\u6b63\u5728\u79bb\u5f00\u76ee\u5f55 `/home/ll/download/protobuf-3.3.0/src'\r\nmake: *** [check-recursive] \u9519\u8bef 1\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "athreya92": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4110", "title": "protoc v3.5.0 not working as expected ", "body": "Version 3.3.0\r\nExecution environment: Windows 7\r\nCommand: protoc --go_out=. *.proto\r\nOutcome: Proto files are generated\r\n\r\nVersion 3.5.0\r\nExecution environment: Windows 7\r\nCommand: protoc --go_out=. *.proto\r\nExpected Outcome: Proto files must be generated\r\nIssue found: *.proto no such file or directory\r\n\r\nFor more information, please refer the below link [https://github.com/golang/protobuf/issues/470](url)", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "saravanan-murugesan": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4109", "title": "Latest protoc binary (version 3.5.1) for linux-x86_64 does not work in RHEL6", "body": "Hi, \r\n\r\nThis seems to be a regression of the same issue described in https://github.com/google/protobuf/issues/3718. I was using protoc-3.4.0 on RHEL6 without any issues. But version 3.5.1 seems to be linked to GLIBC_2.14\r\n```bash\r\n\u279c  protoc-3.5.1 ./bin/protoc\r\n./bin/protoc: /lib64/libc.so.6: version `GLIBC_2.14' not found (required by ./bin/protoc)\r\n\u279c  protoc-3.5.1 lsb_release -d\r\nDescription:\tRed Hat Enterprise Linux Server release 6.8 (Santiago)\r\n\u279c  protoc-3.5.1 ldd --version\r\nldd (GNU libc) 2.12\r\nCopyright (C) 2010 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\nWritten by Roland McGrath and Ulrich Drepper.\r\n```\r\n\r\nCan this be addressed? Thanks!", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xuehuashanshu": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4105", "title": "Varint32 has an error for Java", "body": "**The offset setting is wrong:**  \r\n`int offset = 7;`\r\n\r\nVersion: 3.5.1\r\nClassName: com.google.protobuf.CodedInputStream\r\nLine: 583\r\n\r\n**The offset maybe:**\r\n`int offset = 0;`\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cw-pratik": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4104", "title": "File generated for python gives error", "body": "gRPC Version: 1.7\r\n Language: Python 2.7\r\n OS: Windows 10\r\n \r\n### What did you do?\r\nI generated gRPC files for python and the run a client using the generated python file.\r\n \r\n### What did you expect to see?\r\n It should run normally\r\n \r\n### What did you see instead?\r\nThe generated python file gave an error even before the start of the execution\r\n \r\nI tried to find the issue and the issue was with an enum that I used. Here is how this issue can be reproduced.\r\n\r\nHere is the proto file\r\n\r\n\r\n```\r\nsyntax = \"proto3\";\r\npackage Service;\r\n\r\nservice MmvGrpcService\r\n{\r\n    rpc Func1(Details) returns (Details) {} \r\n}\r\n\r\nmessage Details\r\n{\r\n  StatusEnum Status=1;\r\n}\r\n\r\nenum StatusEnum\r\n{\r\n    None = 0;\r\n    Futuristic = 1;\r\n    New = 2;\r\n}\r\n\r\n```\r\n\r\nThen I generated the python files using the following command\r\n\r\n`python -m grpc_tools.protoc -I . --python_out=. --grpc_python_out=. mmv.proto`\r\n\r\nThen when I try to use the mmv_pb2.py file in any code It gives this error:\r\n\r\n```\r\n  File \"mmv_pb2.py\", line 54\r\n    None = 0\r\nSyntaxError: cannot assign to None\r\n```\r\n\r\nI think the reason is `None` is a keyword in python used for `Null`\r\n\r\nAs soon as I replace None with something else like `NA`, It works!!\r\n\r\nI raised an [Issue ](https://github.com/grpc/grpc/issues/13868)in the gRPC repo, where they redirected me here.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "imkcy9": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4103", "title": "The format is wrong when output int_64 to JSON..", "body": "When I use MessageToJson function serializing \"int64  n\" to JSON, the value of n is 40, it should output like {\"n\":40 },   but the fact is output like {\"n\":\"40\"}, how to fix it ??", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "amandeepgautam": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4101", "title": "Unable to build protobuf on AIX7.2 (running on Power8) with gcc", "body": "I am unable to build protobuf from source on AIX 7.2. The configure script fails saying that sched_yield was not found on the system. However it seems that ```sched_yield``` is present as ```man sched_yield``` bring up the corresponding man page.\r\n\r\n```\r\nbash-4.4# ./configure --prefix=/opt/cohesity\r\nchecking whether to enable maintainer-specific portions of Makefiles... yes\r\nchecking build system type... powerpc-ibm-aix7.2.1.0\r\nchecking host system type... powerpc-ibm-aix7.2.1.0\r\nchecking target system type... powerpc-ibm-aix7.2.1.0\r\nchecking for a BSD-compatible install... ./install-sh -c\r\nchecking whether build environment is sane... yes\r\nchecking for a thread-safe mkdir -p... ./install-sh -c -d\r\nchecking for gawk... no\r\nchecking for mawk... no\r\nchecking for nawk... nawk\r\nchecking whether make sets $(MAKE)... yes\r\nchecking whether make supports nested variables... yes\r\nchecking whether UID '0' is supported by ustar format... yes\r\nchecking whether GID '0' is supported by ustar format... yes\r\nchecking how to create a ustar tar archive... gnutar\r\nchecking for gcc... gcc\r\nchecking whether the C compiler works... yes\r\nchecking for C compiler default output file name... a.out\r\nchecking for suffix of executables... \r\nchecking whether we are cross compiling... no\r\nchecking for suffix of object files... o\r\nchecking whether we are using the GNU C compiler... yes\r\nchecking whether gcc accepts -g... yes\r\nchecking for gcc option to accept ISO C89... none needed\r\nchecking whether gcc understands -c and -o together... yes\r\nchecking for style of include used by make... GNU\r\nchecking dependency style of gcc... gcc3\r\nchecking for g++... no\r\nchecking for c++... no\r\nchecking for gpp... no\r\nchecking for aCC... no\r\nchecking for CC... no\r\nchecking for cxx... no\r\nchecking for cc++... no\r\nchecking for cl.exe... no\r\nchecking for FCC... no\r\nchecking for KCC... no\r\nchecking for RCC... no\r\nchecking for xlC_r... no\r\nchecking for xlC... no\r\nchecking whether we are using the GNU C++ compiler... no\r\nchecking whether g++ accepts -g... no\r\nchecking dependency style of g++... none\r\nchecking how to run the C++ preprocessor... /lib/cpp\r\nchecking for grep that handles long lines and -e... /usr/bin/grep\r\nchecking for egrep... /usr/bin/grep -E\r\nchecking for ANSI C header files... no\r\nchecking for sys/types.h... no\r\nchecking for sys/stat.h... no\r\nchecking for stdlib.h... no\r\nchecking for string.h... no\r\nchecking for memory.h... no\r\nchecking for strings.h... no\r\nchecking for inttypes.h... no\r\nchecking for stdint.h... no\r\nchecking for unistd.h... no\r\nchecking minix/config.h usability... no\r\nchecking minix/config.h presence... no\r\nchecking for minix/config.h... no\r\nchecking whether it is safe to define __EXTENSIONS__... no\r\nchecking for ar... ar\r\nchecking the archiver (ar) interface... ar\r\nchecking for gcc... gcc\r\nchecking whether we are using the GNU Objective C compiler... no\r\nchecking whether gcc accepts -g... no\r\nchecking dependency style of gcc... gcc3\r\nchecking C++ compiler flags...... use default: -O2  -g -DNDEBUG\r\nchecking whether __SUNPRO_CC is declared... no\r\nchecking how to print strings... print -r\r\nchecking for a sed that does not truncate output... /usr/bin/sed\r\nchecking for fgrep... /usr/bin/grep -F\r\nchecking for ld used by gcc... /usr/bin/ld\r\nchecking if the linker (/usr/bin/ld) is GNU ld... no\r\nchecking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B\r\nchecking the name lister (/usr/bin/nm -B) interface... BSD nm\r\nchecking whether ln -s works... yes\r\nchecking the maximum length of command line arguments... 786432\r\nchecking how to convert powerpc-ibm-aix7.2.1.0 file names to powerpc-ibm-aix7.2.1.0 format... func_convert_file_noop\r\nchecking how to convert powerpc-ibm-aix7.2.1.0 file names to toolchain format... func_convert_file_noop\r\nchecking for /usr/bin/ld option to reload object files... -r\r\nchecking for objdump... no\r\nchecking how to recognize dependent libraries... pass_all\r\nchecking for dlltool... no\r\nchecking how to associate runtime and link libraries... print -r --\r\nchecking for archiver @FILE support... no\r\nchecking for strip... strip\r\nchecking for ranlib... ranlib\r\nchecking command to parse /usr/bin/nm -B output from gcc object... failed\r\nchecking for sysroot... no\r\nchecking for a working dd... /usr/bin/dd\r\nchecking how to truncate binary pipes... /usr/bin/dd bs=4096 count=1\r\nchecking for mt... mt\r\nchecking if mt is a manifest tool... no\r\nchecking for dlfcn.h... no\r\nchecking which variant of shared library versioning to provide... aix\r\nchecking for objdir... .libs\r\nchecking if gcc supports -fno-rtti -fno-exceptions... no\r\nchecking for gcc option to produce PIC... -fPIC -DPIC\r\nchecking if gcc PIC flag -fPIC -DPIC works... yes\r\nchecking if gcc static flag -static works... no\r\nchecking if gcc supports -c -o file.o... yes\r\nchecking if gcc supports -c -o file.o... (cached) yes\r\nchecking whether the gcc linker (/usr/bin/ld) supports shared libraries... yes\r\nchecking dynamic linker characteristics... AIX lib.a(lib.so.V)\r\nchecking how to hardcode library paths into programs... immediate\r\nchecking whether stripping libraries is possible... no\r\nchecking if libtool supports shared libraries... yes\r\nchecking whether to build shared libraries... yes\r\nchecking whether to build static libraries... no\r\nchecking for ANSI C header files... (cached) no\r\nchecking fcntl.h usability... no\r\nchecking fcntl.h presence... yes\r\nconfigure: WARNING: fcntl.h: present but cannot be compiled\r\nconfigure: WARNING: fcntl.h:     check for missing prerequisite headers?\r\nconfigure: WARNING: fcntl.h: see the Autoconf documentation\r\nconfigure: WARNING: fcntl.h:     section \"Present But Cannot Be Compiled\"\r\nconfigure: WARNING: fcntl.h: proceeding with the compiler's result\r\nconfigure: WARNING:     ## ---------------------------------------- ##\r\nconfigure: WARNING:     ## Report this to protobuf@googlegroups.com ##\r\nconfigure: WARNING:     ## ---------------------------------------- ##\r\nchecking for fcntl.h... no\r\nchecking for inttypes.h... (cached) no\r\nchecking limits.h usability... no\r\nchecking limits.h presence... yes\r\nconfigure: WARNING: limits.h: present but cannot be compiled\r\nconfigure: WARNING: limits.h:     check for missing prerequisite headers?\r\nconfigure: WARNING: limits.h: see the Autoconf documentation\r\nconfigure: WARNING: limits.h:     section \"Present But Cannot Be Compiled\"\r\nconfigure: WARNING: limits.h: proceeding with the compiler's result\r\nconfigure: WARNING:     ## ---------------------------------------- ##\r\nconfigure: WARNING:     ## Report this to protobuf@googlegroups.com ##\r\nconfigure: WARNING:     ## ---------------------------------------- ##\r\nchecking for limits.h... no\r\nchecking for stdlib.h... (cached) no\r\nchecking for unistd.h... (cached) no\r\nchecking for working memcmp... no\r\nchecking for working strtod... no\r\nchecking for pow... no\r\nchecking for pow in -lm... no\r\nconfigure: WARNING: cannot find library containing definition of pow\r\nchecking for ftruncate... no\r\nchecking for memset... no\r\nchecking for mkdir... no\r\nchecking for strchr... no\r\nchecking for strerror... no\r\nchecking for strtol... no\r\nchecking zlib version... headers missing or too old (requires 1.2.0.4)\r\nchecking for the pthreads library -lpthreads... yes\r\nchecking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE\r\nchecking if more special flags are required for pthreads... -D_THREAD_SAFE\r\nchecking whether to check for GCC pthread/shared inconsistencies... no\r\nchecking whether what we have so far is sufficient with -nostdlib... no\r\nchecking whether -lpthread saves the day... no\r\nconfigure: WARNING: Impossible to determine how to use pthreads with shared libraries and -nostdlib\r\nchecking the location of hash_map... \r\nconfigure: WARNING: could not find an STL hash_map\r\nchecking for library containing sched_yield... no\r\nconfigure: error: in `/home/woijkd/tools/protobuf-3.0.0':\r\nconfigure: error: sched_yield was not found on your system\r\nSee `config.log' for more details\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/0c0d481c69d8588885027cce82a3e6042c49841a", "message": "whitelisting aix platform as it has sched_yield"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Thaina": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4100", "title": "Please add MessageParser<Value>.TryParse api to C#", "body": "I would like to suggest that MessageParser base class should have TryParse function for additional to `ParseDelimitedFrom` `ParseFrom` and `ParseJson` that return boolean and out value\r\n\r\nSo we could check for message that it parsable and handle alternate logic if it not parsable instead of expensive try/catch", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "smcty": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4099", "title": "Return value for SerializeToFileDescriptor() is unreliable.", "body": "Using SerializeToFileDescriptor() on a filesystem that is full results in creation of an empty output file, and the return value for the function is true. \r\n\r\nFrom scr/google/protobuf/message.cc:\r\n```\r\nbool Message::SerializeToFileDescriptor(int file_descriptor) const {\r\n  io::FileOutputStream output(file_descriptor);\r\n  return SerializeToZeroCopyStream(&output);\r\n}\r\n```\r\nThe function SerializeToZeroCopyStream() is always returning true, and the actual write() to the file descriptor happens from the destructor of FileOutputStream. That write() is correctly returning ENOSPC but the error is not propagated to the user.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "NirelNemirovsky": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4097", "title": "using protobuf for ARMv7 on RPI3", "body": "Hey, I have a raspberry pi 3 using ARM processor and linux 16.04\r\nCouldn't find any protobuf download suitable and didn't manage to compile the source code myself.\r\nDoes anyone have an idea of what should I do?\r\nThanks!", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "demid5111": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4096", "title": "ImportError: cannot import name '_message'", "body": "I have installed the latest protobuf==3.5.1, on macOS High Sierra\r\n\r\nThen I set all necessary environment variables:\r\n```\r\nPROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION_VERSION=2\r\nPROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=cpp\r\n```\r\n\r\nAnd when I run the script, I get the following error:\r\n\r\n```\r\nFile \"/***/.env3/lib/python3.5/site-packages/google/protobuf/descriptor.py\", line 46, in <module>\r\n    from google.protobuf.pyext import _message\r\nImportError: cannot import name '_message'\r\n```\r\n\r\n\r\nAnd when I go to this file in Finder, I don't see the _message file.\r\n\r\nAlthough, when I download the protobuf from [google/tensorflow page](https://www.tensorflow.org/versions/r0.12/get_started/os_setup#protobuf_library_related_issues), it is there.\r\n\r\nCould you please resolve it?\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lutzroeder": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4095", "title": "Reading pbtxt in JavaScript", "body": "Does the code produced with `--js_out` support reading `.pbtxt` files? \r\n\r\nIf not, are there plans getting this added? ", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xRaznick": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4093", "title": "Protobuf 3.5.0/3.5.0.1 build issue", "body": "When using Windows (VS2017) protobuf-lite, and proto3, declaring this message:\r\n```\r\nmessage SomeMessage {\r\n\tmessage SomeInnerMessage {\r\n\t\tuint32 some_attribute = 1;\r\n\t}\r\n\trepeated SomeMessage multiple_some_messages = 1;\r\n}\r\n```\r\nis generated correctly by protoc.exe, but when compiling, this message pops:\r\n```\r\npath\\to\\messages.pb.cc(3090): error C2243: 'type cast': conversion from 'google::protobuf::RepeatedPtrField<SomeMessage_SomeInnerMessage> *' to 'google::protobuf::internal::RepeatedPtrFieldBase *' exists, but is inaccessible\r\n```\r\nCan I get any help here?", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "os12": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4091", "title": "Improve generated code's API (C++)", "body": "### Problem statement\r\n\r\nThe C++ code generated by `protoc` has a peculiar asymmetry between the reading and writing cases.\r\n\r\n**A reader:**\r\n```\r\nmessage.repeated_field(1).map_field()[0].value();\r\n```\r\n\r\n**A writer:**\r\n```\r\n(*message.mutable_repeated_field(1)->mutable_map_field())[0]->set_value(...);\r\n```\r\n\r\nAs seen from the examples above there are two inconsistencies:\r\n\r\n1.  The presence of the `mutable_` prefix for non-const accessors (while const ones have natural names)\r\n    - This becomes rather annoying as the code for a mutation is a lot longer than that of a read\r\n    - Most code bases have a hard limit on the maximum line length and so\r\n      * the code author is forced to create local variables\r\n      * the code reviewer is forced to deal with extra local variables in the scope\r\n1. Mutable accessors return a pointer (while const ones return a `const &`)\r\n    - This is annoying when modifying code\r\n    - Natural assignment does not work (as one must dereference)\r\n    - Map syntax is clumsy (as one must dereference before using `operator[]`)\r\n\r\n### Proposal\r\n\r\nIn most cases there is no technical reason to give mutable accessors a distinct name as the C++ compiler selects the appropriate overload based on the \"const\" property of the given value. Also the mutable accessors can return a mutable reference as there is no technical reason to impose the dereference onto the caller.\r\n\r\n**Proposed writer syntax:**\r\n```\r\nmessage.repeated_field(1).map_field()[0].set_value(...);\r\n```\r\n\r\nNote:\r\n  - Such a thing will not compile when \"message\" is const, just like the existing `mutable_` syntax.\r\n  - I realize that Google's C++ style guide bans mutable reference arguments, but let's leave that point aside.\r\n\r\n### Discussion\r\nI realize that a significant change in the generated code's syntax has breaking implications on the vast amount of existing code and would only benefit new projects/programmers adopting Protobuf. So, let's figure out a gentle way of landing such a feature:\r\n  - Should it be a user-selectable option?\r\n  - Should the new mutable accessors extend the existing API rather than modify it?\r\n  - Should the new syntax imply a major version change (i.e. protobuf v4)?\r\n\r\n### Proof of concept\r\n\r\nI've implemented the proposal and updated the tests. I'll post a PR so that we can see the syntax improvement. My plan is to do the following:\r\n  1. Eliminate the `mutable_` prefix wherever possible\r\n  1. Move the mutable accessors to mutable C++ references", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4091/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4092", "title": "POC: improved the generated C++ code", "body": "This is a POC for #4091:\r\n  - mutable accessors return a mutable C++ reference\r\n  - repeated fields generate a mutable accessor with a natural name\r\n\r\nThe point here is unify reader and writer scenarios:\r\n\r\n**A reader:**\r\n```\r\nmessage.repeated_field(1).map_field()[0].value();\r\n```\r\n\r\n**A proposed writer:**\r\n```\r\nmessage.repeated_field(1).map_field()[0].set_value(...);\r\n```\r\n\r\nAll tests compile and pass on Linux x86-64 using GCC 4.8 (Ubuntu 14). I have not compiled in other environments...", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "qzmfranklin": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4086", "title": "//:protobuf_python with use_fast_cpp_protors does not compile with python3.7 due to python's breaking changes in C API", "body": "How to reproduce:\r\n\r\n\r\n```\r\ngit clone https://github.com/qzmfranklin/torrent\r\ngit submodule update --init --recursive\r\nbazel build third_party/cc/protobuf:protobuf_python --define use_fast_cpp_protos=true\r\n```\r\n\r\nThe `bazel -s` output:\r\n```\r\nERROR: /home/zhongming/git/torrent/third_party/cc/protobuf/BUILD:668:1: C++ compilation of rule '//third_party/cc/protobuf:python/google/protobuf/pyext/_message.so' failed (Exit 1): clang failed: error executing command \r\n  (cd /home/zhongming/.cache/bazel/_bazel_zhongming/252308e7db9d6378926a9d84bb91921c/execroot/torrent && \\\r\n  exec env - \\\r\n    PWD=/proc/self/cwd \\\r\n  /opt/clang/5.0.1/bin/clang -U_FORTIFY_SOURCE '-D_FORTIFY_SOURCE=1' -fstack-protector -fcolor-diagnostics -Wall -fno-omit-frame-pointer -isystem/opt/clang/5.0.1/include/c++/v1 -nostdinc++ '-std=c++17' -MD -MF bazel-out/linux_clang-fastbuild/bin/third_party/cc/protobuf/_objs/python/google/protobuf/pyext/_message.so/third_party/cc/protobuf/python/google/protobuf/pyext/descriptor_containers.pic.d '-frandom-seed=bazel-out/linux_clang-fastbuild/bin/third_party/cc/protobuf/_objs/python/google/protobuf/pyext/_message.so/third_party/cc/protobuf/python/google/protobuf/pyext/descriptor_containers.pic.o' -fPIC -iquote . -iquote bazel-out/linux_clang-fastbuild/genfiles -iquote external/bazel_tools -iquote bazel-out/linux_clang-fastbuild/genfiles/external/bazel_tools -isystem third_party/cc/protobuf/python -isystem bazel-out/linux_clang-fastbuild/genfiles/third_party/cc/protobuf/python -isystem third_party/cc/protobuf/src -isystem bazel-out/linux_clang-fastbuild/genfiles/third_party/cc/protobuf/src -isystem external/bazel_tools/tools/cpp/gcc3 -isystem third_party/cc/cpython/Include -isystem bazel-out/linux_clang-fastbuild/genfiles/third_party/cc/cpython/Include -isystem third_party/cc/cpython -isystem bazel-out/linux_clang-fastbuild/genfiles/third_party/cc/cpython -DHAVE_PTHREAD -Wall -Wwrite-strings -Woverloaded-virtual -Wno-sign-compare -Wno-unused-function -Wno-writable-strings '-DGOOGLE_PROTOBUF_HAS_ONEOF=1' -no-canonical-prefixes -Wno-builtin-macro-redefined '-D__DATE__=\"redacted\"' '-D__TIMESTAMP__=\"redacted\"' '-D__TIME__=\"redacted\"' -c third_party/cc/protobuf/python/google/protobuf/pyext/descriptor_containers.cc -o bazel-out/linux_clang-fastbuild/bin/third_party/cc/protobuf/_objs/python/google/protobuf/pyext/_message.so/third_party/cc/protobuf/python/google/protobuf/pyext/descriptor_containers.pic.o)\r\n\r\nUse --sandbox_debug to see verbose messages from the sandbox\r\nthird_party/cc/protobuf/python/google/protobuf/pyext/descriptor_containers.cc:172:13: error: assigning to 'char *' from incompatible type 'const char *'\r\n        if (PyString_AsStringAndSize(key, &name, &name_size) < 0) {\r\n            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nthird_party/cc/protobuf/python/google/protobuf/pyext/descriptor_containers.cc:69:22: note: expanded from macro 'PyString_AsStringAndSize'\r\n       ((*(charpp) = PyUnicode_AsUTF8AndSize(ob, (sizep))) == NULL? -1: 0): \\\r\n                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nthird_party/cc/protobuf/python/google/protobuf/pyext/descriptor_containers.cc:189:13: error: assigning to 'char *' from incompatible type 'const char *'\r\n        if (PyString_AsStringAndSize(key, &camelcase_name, &name_size) < 0) {\r\n            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nthird_party/cc/protobuf/python/google/protobuf/pyext/descriptor_containers.cc:69:22: note: expanded from macro 'PyString_AsStringAndSize'\r\n       ((*(charpp) = PyUnicode_AsUTF8AndSize(ob, (sizep))) == NULL? -1: 0): \\\r\n                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n2 errors generated.\r\nTarget //third_party/cc/protobuf:protobuf_python failed to build\r\n```\r\n\r\nAfter digging through the documentation of cpython at its master, I found this commit: https://github.com/python/cpython/commit/2a404b63d48d73bbaa007d89efb7a01048475acd\r\n\r\nIt basically says cpython made a breaking change in its C API, i.e., `Python.h`.\r\n\r\nI know that python 3.7 is not released yet. What is the stance of protobuf group on this matter?\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kuien": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4085", "title": "Any suggestion on warning: relinking 'libprotoc.la'", "body": "When compiling protobuf (2.4.1), we saw a warning with following info:\r\n\r\n`libtool: install: warning: relinking `libprotoc.la'`\r\n\r\nAny way to clean or bypass it? thx. I hate warning, LOL.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dcarp": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4079", "title": "Timestamp conformance tests give false positives by using default value expectations", "body": "`TimestampWithPositiveOffset` and `TimestampWithNegativeOffset` tests use as expectation the default value, so that, consequently, it gives false positives for an empty implementation.\r\n\r\nhttps://github.com/google/protobuf/blob/a5b743f8ae55f17cc06b8d67b822c697a792a814/conformance/conformance_test.cc#L2133\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1269", "title": "D language support", "body": "This PR adds support for the D programming language.\r\n\r\nCompiler version dmd 2.077.0 or later is required.\r\n\r\nI am thankful for any suggestion that helps merging this PR upstream. \r\n\r\n  ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Zeks": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4078", "title": "Is there a way to generate POD data types for C++?", "body": "We've been converting protbuf generated classes to and from pure c++ PODs in our application for some time now, could it somehow be automated? Like some plugin that generates POD classes and conversion functions between full and POD classes? We really don't want or need to pass protobuf headers throughout whole application logic.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/3702", "title": "Internal variable name confusion when generating c++ code on windows with relative paths", "body": "When you generate c++ files from proto files and there is a path involved in protoc command line, it will use that exact same command line in internal variable names regardless if the path is correct.\r\n\r\nSay, we target a file `relative/Parser/error.proto`, if there is a file `relative/parser/error.proto` it will be found and the code will be generated but when you try to link this file with \r\n`import relative/parser/error.proto`\r\n\r\nit will not compile in because name mangling in protobuf internal variables will have `Parser` and not `parser`\r\n\r\nThis is very confusing to debug and can baffle people for quite some time. Is it possible to use the _actual_ paths/names while generating or throw an error?", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "neundorf": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4069", "title": "Build error using Intel compiler in generated_message_table_driven.h", "body": "Hi, \r\nwith the Intel C++ compiler (both versions 15.0 and 16.0.4) there is a compiler error in \r\ngenerated_message_table_driven.h:\r\ngenerated_message_table_driven.h(186): error: static assertion failed with \"\"\r\n      static_assert(std::is_pod<AuxillaryParseTableField>::value, \"\");\r\n\r\nCommenting out that line makes it build, then the code looks like this:\r\n\r\n```\r\nif LANG_CXX11 && !defined(__NVCC__)\r\nstatic_assert(sizeof(ParseTableField) <= 16, \"ParseTableField is too large\");\r\n// The tables must be composed of POD components to ensure link-time\r\n// initialization.\r\nstatic_assert(std::is_pod<ParseTableField>::value, \"\");\r\n//static_assert(std::is_pod<AuxillaryParseTableField>::value, \"\");     <---- this line is the problem\r\nstatic_assert(std::is_pod<AuxillaryParseTableField::enum_aux>::value, \"\");\r\nstatic_assert(std::is_pod<AuxillaryParseTableField::message_aux>::value, \"\");\r\nstatic_assert(std::is_pod<AuxillaryParseTableField::string_aux>::value, \"\");\r\nstatic_assert(std::is_pod<ParseTable>::value, \"\");\r\n#endif\r\n\r\n```\r\n\r\nWhat's going wrong there ?", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4084", "title": "Fix build for Intel compilers.", "body": "The full discussion is in ticket #4069 .\r\nThe Intel compilers version 15 and 16 fail at this static_assert.\r\nThe warning 2196 \"routine is both inline and noninline\" makes it impossible to build make check, so disable this warning.\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Feywell": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4067", "title": "some troubles when install protobuf from source", "body": "I just want to install caffe \uff0cbut need to install protobuf before\u3002\r\nI use `./autogen.sh` at first\r\nbut a lots info printed like this:\r\n![image](https://user-images.githubusercontent.com/24384298/34138489-be265c00-e4aa-11e7-9a30-7a4c98030456.png)\r\nenvironment as following:\r\n**Centos 6.4 (Red Hat 4.4.7-1)\r\nI install a new GCC(GCC 5.4) at $HOME/usr/local/gcc/bin\r\nautoconf (GNU Autoconf) 2.69\r\nautomake (GNU automake) 1.11.1\r\nI try to install protobuf-3.0.0-beta-2**\r\nAre thers someone met this question?\r\nThank you!", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ankit-ankuagrawal": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4061", "title": "Android App is crashing due to no method found exception possibly due to progaurd obfuscate", "body": "Having a protobuff file, successfully able to generate java file.\r\nWas able to create object using the java file, no problem till here.\r\n\r\nBut when trying to have toString on the created object, the app is crashing with no method found exception. After doing some work came to know the method was getting removed due to Obfuscation.\r\n\r\nHad tried various entry in progaurd file so that the method's should not be removed when APK is formed using \"-keep\".\r\n\r\nCan you guys suggest how to overcome this problem, what entry should be made in progaurd file, java file has many inner classes.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "marienz": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4059", "title": "Source for Python protobuf-3.5.0.post1 release is missing", "body": "I'm trying to locate the source for the 3.5.0.post1 release available on Pypi (https://pypi.python.org/pypi/protobuf/3.5.0.post1).\r\n\r\nThe protobuf-3.5.0.post1.tar.gz tarball only contains the pure-Python protobuf implementation, not the source for the C++ implementation. Pypi has wheels containing the compiled C++ implementation, but I cannot find the source they were built from.\r\n\r\nThe 3.5.0.1 release tarball available from Github is not the same: it does not contain the changes from commit 45d99a15f369a698a7f5be790ced1fe7029e6139, which I assume motivated the 3.5.0.post1 release.\r\n\r\nWhich commit was 3.5.0.post1 built from? Can you tag this commit and/or provide a source tarball for it?", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "asa": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4051", "title": "Bazel cc_proto_library uses system search path for headers - Non Hermetic", "body": "using a simple cc_proto_library rule, the resulting pb.h file includes <google/protobuf/stubs/common.h> \r\nthis starts searching the host filesystem, which had better have the same version of protobuf headers installed or there are problems.\r\n\r\nI would expect this include to look like the following to work correctly:\r\n#include \"external/com_google_protobuf/src/google/protobuf/stubs/common.h\"\r\n\r\nperhaps the build rule can know its building with bazel and insert this accordingly?", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TeBoring": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4050", "title": "Provide toDatetimeImmutable for Timestamp", "body": "", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/3342", "title": "Make php c extension portable on windows", "body": "", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/c79ba5c1b6187d1a6eb1e771976483a9a7b6a434", "message": "Merge pull request #4034 from TeBoring/php-timestamp-bug\n\nAvoid calling method from php extension directly"}, {"url": "https://api.github.com/repos/google/protobuf/commits/8d6f13e86d62b47570810371a6c0528cfb10b781", "message": "Fix for php5.5"}, {"url": "https://api.github.com/repos/google/protobuf/commits/39159c89f1e6924c1b12a6f12478b6de199894f4", "message": "Accept DatetimeInterface in fromDatetime"}, {"url": "https://api.github.com/repos/google/protobuf/commits/1a549d9a902151e980bfa76093b3d82b7589e158", "message": "Avoid using php_date_get_date_ce() in case date extension is not\navailable."}, {"url": "https://api.github.com/repos/google/protobuf/commits/fffe8d39f810d147c6db65f90ae4f71f4e0f0116", "message": "Call php method via function name instead of calling directly.\n\nThis changes the linking error if php extension is not statically linked\nto a runtime error. In this way, users who don't need Timestamp can\nstill use protobuf even if date extension is not statically linked in\nphp."}, {"url": "https://api.github.com/repos/google/protobuf/commits/f69a5db66f170b22b8a5a0abc04ee65d11ef2621", "message": "Merge pull request #4028 from TeBoring/3.5.x\n\nAdd backslach to make class explict in global namespace"}, {"url": "https://api.github.com/repos/google/protobuf/commits/88102eae8f86045307e9d46ad900f91158227f2b", "message": "Replace private timelib_update_ts with public date_timestamp_get"}, {"url": "https://api.github.com/repos/google/protobuf/commits/9f6aceaa8ce8250d9e36225180c218035bd49fe9", "message": "Add PROTOBUF_ENABLE_TIMESTAMP to let user decide whether timestamp util\ncan be used at install time."}, {"url": "https://api.github.com/repos/google/protobuf/commits/b1386e77a2f4a901a45ad906da7c8cf8a517ab0e", "message": "Merge pull request #4026 from TeBoring/3.5.x\n\nMerge 3.5.0.1 to 3.5.x"}, {"url": "https://api.github.com/repos/google/protobuf/commits/3b13c3f02e476bb668a28fce3e86a1ec62f85562", "message": "Add backslach to make class explict in global namespace"}, {"url": "https://api.github.com/repos/google/protobuf/commits/fc5818b2bbe48f6720410d448c3f5e4afb6bd365", "message": "Merge branch '3.5.0.1' into 3.5.x"}, {"url": "https://api.github.com/repos/google/protobuf/commits/cf7c15e31a456f634d4e3deaf4ef74a6bfad825d", "message": "Fix ruby gc_test in ruby 2.4 (#4011)\n\n* Fix ruby gc_test in ruby 2.4\r\n\r\n* Initialize global variables to Qnil."}, {"url": "https://api.github.com/repos/google/protobuf/commits/0e7b58956684c7c2fc228eff9173ea2ae50de911", "message": "Add discard unknown API in ruby. (#3990)\n\n* Add discard unknown API in ruby.\r\n\r\n* Add test for oneof message field.\r\n\r\n* Add TestUnknown to represent unknown field data clearly.\r\n\r\n* Only serialize the message with unknown fields itself in test.\r\n\r\n* Move discard_unknown from Message to Google.Protobuf"}, {"url": "https://api.github.com/repos/google/protobuf/commits/c370f88fb18eecc33650ec3ce06f7bdcc11d1596", "message": "Recursively clear unknown fields in submessages. (#3982)\n\n* Recursively clear unknown fields in submessages.\r\n\r\n* Recursively discard unknown fields in submsg for c extension\r\n\r\n* Fix zts build\r\n\r\n* Add comment for tests\r\n\r\n* Add a TODO to add a util for encoding varint for better readability.\r\n\r\n* Add test for oneof message field."}, {"url": "https://api.github.com/repos/google/protobuf/commits/457f6a607ce167132b833c049b0eaf3a9c4b3f5f", "message": "Add release log"}, {"url": "https://api.github.com/repos/google/protobuf/commits/ba60b854b6da0494e91b81edc7b91ef3ddf219c9", "message": "Update php c extension version number to 3.5.0.1"}, {"url": "https://api.github.com/repos/google/protobuf/commits/212563d756d50a70272d42d7f8b6374ce5a86317", "message": "Fix memory leak in php7"}, {"url": "https://api.github.com/repos/google/protobuf/commits/3b7a5f451546888ad96aaa143ef86fea904a03ec", "message": "Fix several more memory leak"}, {"url": "https://api.github.com/repos/google/protobuf/commits/7d3437152ad420d4382b883f0a52a86526166ef5", "message": "Fix memory leak when creating map field via array."}, {"url": "https://api.github.com/repos/google/protobuf/commits/e0d3aa057b89540cf83de6639a86d1ddb7199315", "message": "Fix memory leak when creating repeated field via array."}, {"url": "https://api.github.com/repos/google/protobuf/commits/de44982a747519602409fcf7b0cceaf123bf1420", "message": "Remove duplicate typedef. (#3975)"}, {"url": "https://api.github.com/repos/google/protobuf/commits/b140cb3145f697a025d7b81b53a190d1e89b17dc", "message": "Fix memory leak when creating map field via array."}, {"url": "https://api.github.com/repos/google/protobuf/commits/1acacf46ccd386de8ee660335b4b1a8dffb2967d", "message": "Fix memory leak when creating repeated field via array."}, {"url": "https://api.github.com/repos/google/protobuf/commits/94bb1eed17209cacfdf2571be5a1ae91b3964cff", "message": "Remove duplicate typedef. (#3975)"}, {"url": "https://api.github.com/repos/google/protobuf/commits/74e7decbbf130485a5bc5d792fb4f9285143bce3", "message": "Provide discardUnknonwnFields API in php (#3976)\n\n* Provide discardUnknownFields API in php implementation\r\n\r\n* Provide discardUnknownFields API in php c extension."}, {"url": "https://api.github.com/repos/google/protobuf/commits/98836a56e616f3bc387e3c66133b1ad320f36d80", "message": "Update version number for php c extension (#3896)"}, {"url": "https://api.github.com/repos/google/protobuf/commits/857a021645e0c553886cf57816d22dc06a92f606", "message": "Use fully qualifed name for DescriptorPool in Any.php to avoid name (#3886)\n\nconflict"}, {"url": "https://api.github.com/repos/google/protobuf/commits/188f18044feb1ca82ecc922f3e59e37078473ddf", "message": "All integer types should accept null in json. (#3869)"}, {"url": "https://api.github.com/repos/google/protobuf/commits/662e8b20bcc67ff11bd8a8a514484481b7e68839", "message": "Provide util funtions to figure out correct php class names. (#3850)"}, {"url": "https://api.github.com/repos/google/protobuf/commits/2df472690ec878ff75a2ccea0c7ff6df0ff69ee3", "message": "Fix php well known type conformance tests (#3828) (#3840)\n\n* Fix php well known type conformance tests\r\n\r\n* Properly generate code for test.proto\r\n\r\n* Provide GPBMetadata files in c extensions for generated files to import.\r\n\r\n* Remove unnecessary test\r\n\r\n* Clean up code\r\n\r\n* Add declaration for initOnce.\r\n\r\n* Refactoring"}, {"url": "https://api.github.com/repos/google/protobuf/commits/bcda919ceeae8bd854c07a8300d8996ef52315db", "message": "Fix php well known type conformance tests (#3828)\n\n* Fix php well known type conformance tests\r\n\r\n* Properly generate code for test.proto\r\n\r\n* Provide GPBMetadata files in c extensions for generated files to import.\r\n\r\n* Remove unnecessary test\r\n\r\n* Clean up code\r\n\r\n* Add declaration for initOnce.\r\n\r\n* Refactoring"}, {"url": "https://api.github.com/repos/google/protobuf/commits/23adfeb00327fbdccacc99806acb1a9a073bd8e0", "message": "Reserve unknown in Ruby (#3763)\n\n* Reserve unknown in ruby\r\n\r\n* Revert ruby tests. Wait for cpp impl for conformance test\r\n\r\n* Add conformance test for preserving unknown\r\n\r\n* Add unknown field conformance test to csharp failure list.\r\n\r\n* Fix comments\r\n\r\n* Fix comment\r\n\r\n* Fix comments\r\n\r\n* Fix typo\r\n\r\n* Use stringsink_string directly\r\n\r\n* Mark hd unused\r\n\r\n* Remove unused encodeunknown_handlerfunc"}, {"url": "https://api.github.com/repos/google/protobuf/commits/6032746882ea48ff6d983df8cb77e2ebf399bf0c", "message": "Reserve unknown fields in php (#3659)\n\n* Reserve unknown fields in upb\r\n1) For decoding, an unknownfields will be lazily created on message,\r\nwhich contains bytes of unknown fields.\r\n2) For encoding, if the unknownfields is present on message, all bytes\r\ncontained in it will be serialized.\r\n\r\n* Register the function to encode unknown field at decode time.\r\n\r\n* Remove upb_handlers_setaddunknown\r\n\r\n* Use upb_sink_putunknown in decoder\r\n\r\n* Remove upb_pb_encoder_encode_unknown\r\n\r\n* Do not expose encode_unknown\r\n\r\n* Implement reserve unknown field in php Implement.\r\n\r\n* Make buffer private to CodedInputStream"}, {"url": "https://api.github.com/repos/google/protobuf/commits/77f64bb7779ec2195f9bc4dc82497d12c18fc6b7", "message": "Add well known types to php runtime. (#3697)\n\n* Add well known types to php runtime.\r\n\r\n* Fix php7.0 tests\r\n\r\n* No longer generate empty.proto in test as it has been included in\r\nruntime.\r\n\r\n* Fix zts build\r\n\r\n* Clean code\r\n\r\n* Rename g_p_b_empty to empty.\r\n\r\n* Don't generate code for empty.proto in compatibility test\r\n\r\n* Fix 32-bit\r\n\r\n* Fix mac build\r\n\r\n* Fix Makefile.am to add new files"}, {"url": "https://api.github.com/repos/google/protobuf/commits/cd5f49d0942e19a5854a325941918fca02fdb409", "message": "Fix ruby segment fault (#3708)\n\n* Fix ruby segment fault\r\n\r\n1) rb_ary_new cannot be called during allocate function. During allocate\r\nfucntion, the containing object hasn't been marked and rb_ary_new may\r\ninvoke gc to collect containing object.\r\n2) The global map should be marked before allocating it. Otherwise it\r\nmay be garbage collected.\r\n\r\n* Add test\r\n\r\n* Remove commented code\r\n\r\n* Fix grammer error"}], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4211", "title": "Fix more memory leak for php c extension", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/3841", "title": "[WIP] Fix php c extension on windows", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/3415", "title": "Update docker file", "body": "* Remove oracle-java7\r\n* Add hhvm", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/21978844", "body": "We didn't officially released any stable version. So that shouldn't be\nconsidered breaking compatibility.\nOn Tue, May 2, 2017 at 00:25 Dave <notifications@github.com> wrote:\n\n> About renaming encode/decode, do you have considered compatible strategies\n> with lower version?\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/protobuf/commit/dd8d5f57d7068080283c2c03af01d806efbe6cf4#commitcomment-21978814>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AE9H5bopdXxdYYLNvZcLlnp_Q3kW2TYSks5r1tpxgaJpZM4NNy7j>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/21978844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23893510", "body": "Should it iterate on file_set.file()?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23893510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24117864", "body": "Cannot use --encode or --decode and --dependency_out=FILE at the same time\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24117864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24118794", "body": "open is in cpp standard library. It's safe to use it cross platform.\nI agree this doesn't look good. But now FileOutputStream is supposed to be used in this way. It requires fd, which can only be gotten like this. Other place in this file has same code. Will fix it internally.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24118794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24121383", "body": "I think it should be filename. Otherwise, what filename you want to use for the dependency? And what's the target name in the dependency file?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24121383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24131891", "body": "```\nfoo.pb.cc foo.pb.h: foo.proto\n```\n\nIt looks good. However, protoc doesn't know generated file is named foo.pb.cc and foo.pb.h\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24131891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24138654", "body": "If code generator/plugin can tell protoc the path of its generated files, protoc can make it.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24138654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ravijo": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4039", "title": "PROTOBUF_INCLUDE_DIR is pointing to incorrect location", "body": "I installed Protocol Buffers locally by `using ./configure --prefix=$PWD` inside l`ib/protobuf-3.5.0` directory. I configured `CMakeLists.txt` and provided the path to this location as follows:\r\n```\r\ncmake_minimum_required(VERSION 2.8.3)\r\nproject(local_protobuf_ros_example)\r\n\r\nfind_package(catkin REQUIRED COMPONENTS roscpp)\r\n\r\nset(PROTOBUF_FOLDER ${PROJECT_SOURCE_DIR}/lib/protobuf-3.5.0)\r\n\r\nset(CMAKE_PREFIX_PATH\r\n    ${CMAKE_PREFIX_PATH}\r\n   \"${PROTOBUF_FOLDER}/cmake/build/release/lib/x86_64-linux-gnu/cmake/protobuf\"\r\n)\r\n\r\nfind_package(Protobuf CONFIG REQUIRED)\r\n\r\nmessage(STATUS \"CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH}\")\r\nmessage(STATUS \"Protobuf_VERSION ${Protobuf_VERSION}\")\r\nmessage(STATUS \"PROTOBUF_VERSION ${PROTOBUF_VERSION}\")\r\nmessage(STATUS \"PROTOBUF_INCLUDE_DIR ${PROTOBUF_INCLUDE_DIR}\")\r\nmessage(STATUS \"PROTOBUF_INCLUDE_DIRS ${PROTOBUF_INCLUDE_DIRS}\")\r\nmessage(STATUS \"PROTOBUF_LIBRARY ${PROTOBUF_LIBRARY}\")\r\nmessage(STATUS \"PROTOBUF_LIBRARIES ${PROTOBUF_LIBRARIES}\")\r\n```\r\nBelow is the output reported at terminal:\r\n```\r\n-- +++ processing catkin package: 'local_protobuf_ros_example'\r\n-- ==> add_subdirectory(local_protobuf_ros_example)\r\n-- CMAKE_PREFIX_PATH /home/test/ros_ws/devel;/opt/ros/indigo;/home/test/ros_ws/src/local_protobuf_ros_example/lib/protobuf-3.5.0/cmake/build/release/lib/x86_64-linux-gnu/cmake/protobuf\r\n-- Protobuf_VERSION 3.5.0\r\n-- PROTOBUF_VERSION \r\n-- PROTOBUF_INCLUDE_DIR /usr/include\r\n-- PROTOBUF_INCLUDE_DIRS \r\n-- PROTOBUF_LIBRARY /usr/lib/x86_64-linux-gnu/libprotobuf.so\r\n-- PROTOBUF_LIBRARIES \r\n```\r\nSurprisngly, some of the variables are empty and remaning are pointing to incorrect location. In this case, it should point to `${PROJECT_SOURCE_DIR}/lib/protobuf-3.5.0`. However the version is correct.\r\n\r\nAll the files including `libprotobuf.so` exists locally such as\r\n```\r\ntest@test-VirtualBox:~$ ll /home/test/ros_ws/src/local_protobuf_ros_example/lib/protobuf-3.5.0/lib/libprotobuf.so\r\nlrwxrwxrwx 1 root root 21 Dec 13 13:30 /home/test/ros_ws/src/local_protobuf_ros_example/lib/protobuf-3.5.0/lib/libprotobuf.so -> libprotobuf.so.15.0.0*\r\n```\r\n\r\nWhats going on here? I have no idea how to fix it. Any workaround, please?", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xfxyjwf": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4035", "title": "Update developer guide C++/Java/Python tutorials to proto3", "body": "Right now the tutorials are still based on proto2. For example C++ tutorial:\r\nhttps://developers.google.com/protocol-buffers/docs/cpptutorial\r\n\r\nHowever the example code in the source code has been upgraded to proto3 already. We should migrate the docs to proto3 as well.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/3688", "title": "Migrate protobuf to use Abseil: Google C++ common libraries.", "body": "For a long time protobuf has been keeping its own fork of Google C++ common libraries under the stubs directory:\r\nhttps://github.com/google/protobuf/tree/master/src/google/protobuf/stubs\r\n\r\nThey have to be forked because Google never released these common libraries as an opensource project, util now:\r\nhttps://opensource.googleblog.com/2017/09/introducing-abseil-new-common-libraries.html\r\n\r\nWith the release of Abseil, we should be able to deprecate code in the stubs directory and migrate protobuf to use Abseil instead.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/3577", "title": "Release CodedInputStream Iterable ByteBuffer API in lite.", "body": "The change will need to be cherry-picked to lite branch.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/099d99759101c295244c24d8954ec85b8ac65ce3", "message": "Merge pull request #4083 from matt-kwong/kokoro_jobs\n\nShard 64-bit Linux languages into different Kokoro jobs"}, {"url": "https://api.github.com/repos/google/protobuf/commits/4b2977b39684f762b9d2a9746a0029af4f24442b", "message": "Merge pull request #4082 from matt-kwong/kokoro_jobs\n\nMigrate Jenkins jobs to Kokoro"}, {"url": "https://api.github.com/repos/google/protobuf/commits/a5b743f8ae55f17cc06b8d67b822c697a792a814", "message": "Merge pull request #4030 from cyyber/master\n\nCalling Keychecker before checking key in MessageMap"}, {"url": "https://api.github.com/repos/google/protobuf/commits/3a06fe1fc9590b534f403114a0668befba926947", "message": "Fix file permission for python package.\n\n`umask 0022` makes sure the created package will be accessible by all users."}, {"url": "https://api.github.com/repos/google/protobuf/commits/77d32bc56ce8f0cb37577eabcfd426b99fa3c091", "message": "Merge pull request #4053 from xfxyjwf/fixumask\n\nFix file permission for python package."}, {"url": "https://api.github.com/repos/google/protobuf/commits/0fc85acdf2220ce21b375f97a39b4bce02d5a759", "message": "Fix file permission for python package.\n\n`umask 0022` makes sure the created package will be accessible by all users."}, {"url": "https://api.github.com/repos/google/protobuf/commits/a4f68d479ad3edde6a24f733e44b65e3014b5f62", "message": "Merge pull request #4044 from xfxyjwf/issue3268\n\n Avoid double underscores in macro name"}, {"url": "https://api.github.com/repos/google/protobuf/commits/b3ac4417b735f73207938c09c41de15608fac48a", "message": "Update generated code."}, {"url": "https://api.github.com/repos/google/protobuf/commits/50ef6a623e02639fb8c252dfca67691f320e7349", "message": "Avoid two consecutive underscores in macro name.\n\nFixes https://github.com/google/protobuf/issues/3268"}, {"url": "https://api.github.com/repos/google/protobuf/commits/0a7120ac32e16d49a35abf18186c8c4db515dd02", "message": "Merge pull request #4037 from xfxyjwf/issue2880\n\nClarify default value behavior in JSON conversion."}, {"url": "https://api.github.com/repos/google/protobuf/commits/5ce724bcebebb56914da6efc40b85c4c801e6fe1", "message": "Merge pull request #4036 from xfxyjwf/issue3093\n\nUpdate comments for Timestamp JSON format."}, {"url": "https://api.github.com/repos/google/protobuf/commits/6c27550df09d7344c2aba15733f36109d80d00cf", "message": "Clarify default value behavior in JSON conversion.\n\nMake it clear default value is only omitted for proto3."}, {"url": "https://api.github.com/repos/google/protobuf/commits/75eceb84249cd157dc26af44bb77edb57476c053", "message": "Update generated code."}, {"url": "https://api.github.com/repos/google/protobuf/commits/8489612dadd3775ffbba029a583b6f00e91d0547", "message": "Update comments for Timestamp JSON format.\n\nClarify that JSON parser are required to accept both UTC and other\ntimezone offsets.\n\nFixes issue 3093"}, {"url": "https://api.github.com/repos/google/protobuf/commits/db7c043f6dce400e4c777810a76fe900a7f0bc7e", "message": "Merge pull request #3968 from fahhem/patch-2\n\nAdd a check_version() for use in WORKSPACEs"}, {"url": "https://api.github.com/repos/google/protobuf/commits/6de51caed52d798815954646b230c5aef3e4d2fc", "message": "Merge pull request #3824 from anuraaga/dev_rag\n\n[Java] Add a UTF-8 decoder that uses Unsafe to directly decode a byte buffer."}, {"url": "https://api.github.com/repos/google/protobuf/commits/da89eb25efc9f8a9ff14c5e6460bc8e120c167ae", "message": "Merge pull request #3955 from linux-on-ibm-z/master\n\nAdding Release_CompareAndSwap 64-bit variant"}, {"url": "https://api.github.com/repos/google/protobuf/commits/f08e4dd9845c5ba121b402f8768f3d2617191bbe", "message": "Merge pull request #3919 from jart/less-warnings\n\nRemove unhelpful build warnings"}, {"url": "https://api.github.com/repos/google/protobuf/commits/b819abf0b26cd5b0edfac8f36acfcebe3103a4fc", "message": "Merge pull request #3918 from OEP/fix-sdist\n\nInclude .cc and .h files in Python source distribution"}, {"url": "https://api.github.com/repos/google/protobuf/commits/7daa320065f3bea2b54bf983337d1724f153422d", "message": "Merge pull request #3878 from Yangqing/master\n\nAllow one to omit building libprotoc and protoc binaries"}, {"url": "https://api.github.com/repos/google/protobuf/commits/b9f891e3dd42eb83211c62eee345f051c943b583", "message": "Merge pull request #3875 from hchasestevens/add-hypothesis-protobuf-doc\n\nAdd hypothesis-protobuf library to the 3rd party doc."}, {"url": "https://api.github.com/repos/google/protobuf/commits/6dd82243932e929331f3808742b191c85a353461", "message": "Merge pull request #3817 from xuwei-k/joda-url\n\nupdate joda-time javadoc url"}, {"url": "https://api.github.com/repos/google/protobuf/commits/c4f59dcc5c13debc572154c8f636b8a9361aacde", "message": "Merge pull request #3760 from jmillikin-stripe/descriptor-memset-ub\n\nFix undefined memory management found by Clang's sanitizers."}, {"url": "https://api.github.com/repos/google/protobuf/commits/c4083bb3d1231f8a94f2f000434e38528bdff64a", "message": "Merge pull request #3735 from sgreenstein/patch-1\n\nDon't pass -lpthread and -lm on Windows"}], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4047", "title": "Allow roundtrip of FLT_MIN/MAX in JSON convention.", "body": "Fixes https://github.com/google/protobuf/issues/3615", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/3934", "title": "Remove the use of BUILT_SOURCES", "body": "Fixes https://github.com/google/protobuf/issues/3912\r\n\r\n[BUILT_SOURCES](https://www.gnu.org/software/automake/manual/html_node/Sources.html)\r\nis a hack used with [Automake's automatic dependency tracking](https://www.gnu.org/software/automake/manual/html_node/Dependencies.html#Dependencies)\r\nbut we don't use this automatic dependency tracking in protobuf as we explicitly\r\nlist all dependencies in the makefile. Its presence causes make to always\r\ngenerate these listed source files even when they are not requested and as\r\na result causes cross-compilation to fail because the built protoc\r\ncannot be used to generate unittest protos (see: https://github.com/google/protobuf/issues/3912).\r\n\r\nRemoving it fixes the build issue when running 'make', 'make all',  'make install' at cross-compilation. It doesn't affect 'make\r\nprotoc' because this BUILT_SOURCES hack only works for the implicit\r\ntargets 'all', 'check' or 'install'.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/2921", "title": "Fix issues for down-integration.", "body": "PR created for test purpose. Not ready for review.", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/53611349", "body": "Hi, please sign this Google Individual Contributor License Agreement:\nhttps://developers.google.com/open-source/cla/individual\nand update this thread when you are done. This is required for us to use your code.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/53611349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/53612493", "body": "I'm not sure whether this is the right change. My understanding is that cpp_message.py is only used for Python CPPv1. We probably should delete it instead.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/53612493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/53772119", "body": "@pherl can you review this change?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/53772119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54376908", "body": "We probably won't import/tag any old releases. If you already synced pass r495, it should already contain all changes in 2.5.0 release. The last change we made for 2.5.0 release is r482.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54376908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54393066", "body": "This patch only fixed the declaration in the header file. Shouldn't we also remove the const qualifier from the method definition in the source file?\nhttps://github.com/google/protobuf/blob/master/src/google/protobuf/generated_message_reflection.cc#L1499\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54393066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54516857", "body": "Hi huahang, please sign this Google Individual Contributor License Agreement:\nhttps://developers.google.com/open-source/cla/individual\nIt's required for us to use your code.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54516857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54518742", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54518742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54519932", "body": "Hum, the release package I just uploaded to maven central repository still says 2.5.0... Guess it has to be fixed in a future release...\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54519932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54559885", "body": "Sorry about that. How bad is this issue? Does it cause projects to fail to build/deploy or something? I just uploaded 2.6.0 release package to maven central repository without realizing this. Depending on how serious the problem is we probably need a minor release to fix it.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54559885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54651861", "body": "Thanks very much.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54651861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54865771", "body": "We had a discussion about field lifetime issue just recently and here is assumption that I think users should make when accessing sub-fields of a protobuf message:\n\n_After getting a reference/pointer to a field of a protobuf message, any subsequent mutation method calls to the message may invalidate this reference/pointer and accessing this reference/pointer is an undefined behavior._\n\nThis not only applies to the case you mentioned, but also applies to other cases and other languages. For example, step 3 in the following scenario will result in undefined behavior:\n1. List&lt;Integer&gt; list = builder.getRepeatedFieldList();\n2. builder.addRepeatedField(value);\n3. for (Integer element : list) {...}\n\nIt might be better to throw an exception to let the user aware of the problem, but given the implementation overhead to address this, I would prefer leaving it as-is. \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54865771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55028176", "body": "Please sign this Google Individual Contributor License Agreement:\nhttps://developers.google.com/open-source/cla/individual?csw=1\n\nand let me know when you are done. It's required for us to use your code.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55028176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55155150", "body": "No. The original method is used widely in our internal code base. Unless we are willing to do a global clean-up and replace all call-sites (which will take weeks or months and isn't worthwhile in this case), we shouldn't mark the old method as deprecated. \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55155150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55175655", "body": "Sorry, we don't have an ETA for this. It should be fixed in the next minor release which hasn't been scheduled yet.\n\nI believe most uses of DynamicMessage still work as we have unit-tests covering DynamicMessage:\nhttps://github.com/google/protobuf/blob/master/java/src/test/java/com/google/protobuf/DynamicMessageTest.java\n\nPresumably these tests are not failing despite of the bug. In most places we use addRepeatedField()/setRepeatedField() instead of setField() to manipulate repeated fields. Users could use these methods as a workaround as well.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55175655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55983668", "body": "Could you sign this Google Individual Contributor License Agreement?\nhttps://developers.google.com/open-source/cla/individual?csw=1\n\nLet me know when you are done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55983668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55983776", "body": "Thanks. I'll merge this patch in once you sign Google CLA.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55983776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55984174", "body": "Sorry but we won't add these tags to github. The old releases we made in svn mostly happened in a release branch while we only ported the main branch to github. As a result there isn't a git commit that matches exactly to these old releases.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55984174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55985136", "body": "Could you help make a patch and remove these two methods? I don't think we are using them in protobuf.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55985136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56101238", "body": "Thanks.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56101238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56116803", "body": "The problem may be one of the two:\n1. the FileDescriptorSet file contains 2147483647 instead of 536870912. This indicates a bug in protoc.\n2. FileDescriptorSet.parseFrom() magically turns 536870912 to 2147483647. This is very unlikely because FileDescriptorSet is just a normal protobuf message.\n\nI couldn't reproduce either of these. Can you double check?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56116803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56121017", "body": "Can you only remove the one in atomicops_internals_generic_gcc.h? Most of the atomics code is forked from v8/chromium. It's better to avoid local modifications to make future syncs easier.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56121017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56404495", "body": "Why do you use message_set_wire_format? It's not a feature we support in open-source protobuf.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56404495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55028176", "body": "Please sign this Google Individual Contributor License Agreement:\nhttps://developers.google.com/open-source/cla/individual?csw=1\n\nand let me know when you are done. It's required for us to use your code.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55028176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55155150", "body": "No. The original method is used widely in our internal code base. Unless we are willing to do a global clean-up and replace all call-sites (which will take weeks or months and isn't worthwhile in this case), we shouldn't mark the old method as deprecated. \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55155150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/173022977", "body": "FYI. It has been decided protobuf implementations will live in this same repo. We don't have plans to separate the implementations for the time being.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/173022977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55983668", "body": "Could you sign this Google Individual Contributor License Agreement?\nhttps://developers.google.com/open-source/cla/individual?csw=1\n\nLet me know when you are done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55983668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56101238", "body": "Thanks.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56101238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55983776", "body": "Thanks. I'll merge this patch in once you sign Google CLA.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55983776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55984174", "body": "Sorry but we won't add these tags to github. The old releases we made in svn mostly happened in a release branch while we only ported the main branch to github. As a result there isn't a git commit that matches exactly to these old releases.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55984174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55985136", "body": "Could you help make a patch and remove these two methods? I don't think we are using them in protobuf.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55985136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56116803", "body": "The problem may be one of the two:\n1. the FileDescriptorSet file contains 2147483647 instead of 536870912. This indicates a bug in protoc.\n2. FileDescriptorSet.parseFrom() magically turns 536870912 to 2147483647. This is very unlikely because FileDescriptorSet is just a normal protobuf message.\n\nI couldn't reproduce either of these. Can you double check?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56116803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56404495", "body": "Why do you use message_set_wire_format? It's not a feature we support in open-source protobuf.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56404495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/57252709", "body": "It's not a bug. When message_set_wire_format is enabled, the extension range is supposed to be up to 2147483647. This is an internal only feature. It spreads too widely across the code base so we haven't been able remove it from open-source release.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/57252709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56121017", "body": "Can you only remove the one in atomicops_internals_generic_gcc.h? Most of the atomics code is forked from v8/chromium. It's better to avoid local modifications to make future syncs easier.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56121017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56404776", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56404776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58071070", "body": "Hi, please sign this Google CLA and let me know when you are done:\nhttps://developers.google.com/open-source/cla/individual?csw=1\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58071070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58099795", "body": "Thanks very much!\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58099795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58407603", "body": "Please sign this Google CLA:\nhttps://developers.google.com/open-source/cla/individual?csw=1\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58407603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58687329", "body": "I don't think linking with both -lprotobuf and -lprotobuf-lite is a supported use case. -lprotobuf has a duplicate version of everything that -lprotobuf-lite has. You should only link with one of them.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58687329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58697518", "body": "@worr, could you help fix this issue?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58697518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58713550", "body": "@worr, your suggestion sounds good to me. Can you help make this change? (i.e., disable the change on Win32).\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58713550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58722886", "body": "It's 2.6.1rc1 in the 2.6.1 branch:\nhttps://github.com/google/protobuf/blob/2.6.1/java/pom.xml\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58722886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58723581", "body": "FYI. I just merged all changes in 2.6.1 into the master branch.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58723581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58975101", "body": "If you are using one of our release packages, it should contain a gtest directory.\n\nIf you check out code from github directly, it doesn't contain a gtest directory. You have to run ./autogen.sh which will download gtest from its official Google Code site, or if you are using MSVC, you'll need to download it yourself (can this be automated?).\n\nIn the future we probably can add gtest as a submodule but that can only be done when gtest is available as a git repository (it's still svn only).  \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58975101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59122101", "body": "@mrovner, can you take a look at this patch?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59122101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59138176", "body": "What's the gtest version you are using? You can try to replace the gtest directory with the gtest that comes from our release packages (2.6.0 or 2.5.0).\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59138176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59148852", "body": "Can you expand on the reasons to check whether an ExtensionRegistry is empty?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59148852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59247650", "body": "To be clear, protobuf does support framed stream of messages. Are you talking specifically about protobuf in Python? In C++ and Java, you can use CodedInputStream/CodedOutputStream to read/write varint or any other protobuf wire format data.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59247650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59249514", "body": "Such name conflict should be reported as an error in every implementation. The pure Python needs to be fixed to report an error as well.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59249514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59252818", "body": "Thanks very much, Craig!\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59252818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59403864", "body": "Thanks. Please sign Google CLA and let me know when you are done:\nhttps://cla.developers.google.com/about/google-individual?csw=1\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59403864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59404114", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59404114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59405884", "body": "Besides the approach you mentioned, you can also check whether a message is empty by \"message.getSerializedSize() == 0\". It's recommended and works for lite runtime as well.\n\nRegarding the default instance of DynamicMessage, I think DynamicMessage.getDefaultInstance() not returning a singleton is a bug.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59405884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59563494", "body": "Hi johnbeard, did you sign the CLA electronically or by other means? I didn't see your github name on our CLA signers' list.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59563494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59863697", "body": "How did you get the release package? Our release package has a bundled gtest directory and it appears the code line the error message points to doesn't exist in the bundled gtest code. Can you try this version:\nhttps://github.com/google/protobuf/releases/download/v2.6.0/protoc-2.6.0-win32.zip\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59863697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59864995", "body": "I have updated the version number to 2.6.1 in the 2.6.1 release branch:\nhttps://github.com/google/protobuf/blob/2.6.1/java/pom.xml\n\nThat will be pom.xml file we'll push to maven central repository.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59864995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59967842", "body": "Got it. It turns out they now provide a query system for CLA signers and the old list is no longer updated.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59967842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/60004939", "body": "Sorry, the link should be:\nhttps://github.com/google/protobuf/releases/download/v2.6.0/protobuf-2.6.0.zip\n\nYou can find it on the releases page:\nhttps://github.com/google/protobuf/releases\n\nThe zip file you downloaded is a snapshot of the git repository, not a release package. It doesn't contain the correct gtest code.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/60004939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/60015112", "body": "Hi David,\nI just published 2.6.1. Can you help verify whether the pom.xml is correct? I'll upload it to Maven soon.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/60015112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/60134744", "body": "Ops.. I just checked-in some new tarballs, can you help check whether they work on solaris?\nhttps://github.com/google/protobuf/blob/fix/dist/protobuf-2.6.1.tar.gz\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/60134744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/60288810", "body": "Hmm, so the platform_macros.h header file only supports Solaris on sparc CPU. Could you help check which macro your compiler has defined and maybe send us a fix for this? I would think it should have defined the **i386** macro but apparently it doesn't.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/60288810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/60429389", "body": "Hi, @dlitz, can you sign this Google CLA and let me know when you are done?\nhttps://cla.developers.google.com/about/google-individual?csw=1\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/60429389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/60627653", "body": "\\+ @mrovner  to help take a look.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/60627653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61305246", "body": "Could you sign Google CLA: https://cla.developers.google.com/about/google-individual and send the patch as a pull request?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61305246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61332225", "body": "Thanks for the patch. Please sign this Google CLA before we can proceed:\nhttps://cla.developers.google.com/about/google-individual\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61332225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61333210", "body": "What's the name you used to signed the CLA before? I couldn't find your github username on our CLA signers list.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61333210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61589383", "body": "As we don't have a Solaris machine to test this by ourselves we will need users' help to fix this problem. Could you help send us a patch for this?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61589383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61691799", "body": "Thanks for the patch. Could you sign this Google CLA so we can accept the patch?\nhttps://cla.developers.google.com/about/google-individual\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61691799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61707520", "body": "What name did you use to sign the CLA? I couldn't find your github name among google CLA signers.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61707520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61762005", "body": "Found it. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61762005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61834319", "body": "Thanks for the patch. Could you sign the Google CLA?\nhttps://cla.developers.google.com/about/google-individual\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61834319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61834761", "body": "Thanks for the patch!\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61834761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/62248947", "body": "Thanks, @dlitz !\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/62248947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/62248978", "body": "@Kentzo, feel free to send us a pull request for that.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/62248978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/62489157", "body": "Thanks for the patch! Please sign Google CLA:\nhttps://cla.developers.google.com/about/google-individual\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/62489157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/62633130", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/62633130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/62641465", "body": "+@pherl  to review\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/62641465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63152144", "body": "The code is slightly modified from what's in the android git repository. See the diff here:\nhttps://github.com/xfxyjwf/protobuf/commit/1aea11b316e4678ef7552a07ffee584b2f8a8db8\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63152144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63397294", "body": "Please sign Google CLA here: https://cla.developers.google.com/about/google-individual\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63397294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63412008", "body": "Found it, thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63412008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63562381", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63562381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63569363", "body": "Hi Tres, I couldn't find your signed CLA on our new CLA query system (but could find it in the old one). I contacted the team maintaing the new query system and was told that you need to sign the CLA again to have the information updated there. Could you please help do so? It's not necessary but would help us to identify you as a CLA signer when accepting your patches.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63569363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63570877", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63570877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63583105", "body": "Dropping this. Will send a new PR.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63583105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63748409", "body": "This merge preserves the commit history of nano proto.\n\nSome minor changes are made to the nano proto code in order to merge it. These changes are in this commit:\nhttps://github.com/xfxyjwf/protobuf/commit/cd980d1c13c736b0f9fc453843f696a93c2c2a71\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63748409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63883371", "body": "Have you compiled the C++ version before running this test? That is, run \"./configure && make check\" before testing the python C++ implementation.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63883371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64009725", "body": "Can you check the protoc version you used on Ubuntu? Run \"protoc --version\" to check. Ubuntu comes with a pre-installed protoc but it's an older version. Make sure you are using the correct protoc.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64009725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64050248", "body": "The method is actually named getMutableVertices() which will return a Map<key, value> for you to add map entries.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64050248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64250840", "body": "Should be a bug. I guess message Vertice has some required fields (or its sub-fields have required fields) and our tests haven't been able to cover such cases.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64250840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64283649", "body": "We'll fix it this week.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64283649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64285444", "body": "@TeBoring \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64285444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64285859", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64285859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64286396", "body": "@nothing-whoami, you were using an older version, not the one you built and installed from source. You can uninstall protoc (apt-get uninstall protobuf-compiler) and try it again. After you correctly install protobuf-2.6.1, \"protoc --version\" should output \"libprotoc 2.6.1\".\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64286396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64287186", "body": "We don't have resource to test it on these platforms. If you know how to implement a portable fallback (or how to make platform_macros.h to support your platform, you are welcome to send a patch for that.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64287186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64288850", "body": "Protobuf does not have such an option (and is unlikely to provide one). You can though, write a plugin to insert such kind of detecting code to generated .pb.(cc|h) files. For example, in the generated decriptor.pb.cc file, there are a lot of comments in the pattern \"// @@protoc_insertion_point(...)\". That's where the plugin can insert code to. If the methods you are interested in don't have an insertion point, feel free to send us a patch to add one. \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64288850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64289152", "body": "Fixed in https://github.com/google/protobuf/pull/71\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64289152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64289701", "body": "One problem is that in Python there isn't a central DecriptorPool with all generated types so it can't detect such conflicts. Unless such a DescriptorPool is introduced in Python, pure Python implementation won't be able to detect such conflicts. This also applies to Java.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64289701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64452533", "body": "Thanks. Please sign this Google CLA (required for us to accept your patch):\nhttps://cla.developers.google.com/about/google-individual\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64452533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64461889", "body": "Yes, we'll fix this soon. I don't think you can use python C++ implementation before this is fixed though.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64461889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64479485", "body": "Fixed in https://github.com/google/protobuf/commit/6ae3bde73dd9090712e22986afe866229e61d305\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64479485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64488518", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64488518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64500189", "body": "Fixed in https://github.com/google/protobuf/commit/90f2f50233fc42a9e6f551ac8454c46a5df00454\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64500189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64500456", "body": "Fixed in https://github.com/google/protobuf/pull/106\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64500456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64718861", "body": "I suggest avoiding using nanoproto until we have an official release including nanoproto support. Currently the code is pulled directly from android git repository and there are a lot of controlling flags that might not end up in the final release.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64718861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64731599", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64731599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64733829", "body": "Is this patch originally from daniel.martin@crowdstrike.com? If yes, we'll need him to sign Google CLA as well before we can accept this patch.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64733829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64847485", "body": "I think it's fine. Thanks for the patch.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64847485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65112870", "body": "We have no plan to migrate these old release tags. Could you update your protobuf dependency to the latest releases instead?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65112870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65148090", "body": "Can you remove files under vsprojects/... from this PR? We'd better just change the existing .vcproj files instead of adding new ones and it seems you added a lot of temporary files by mistake.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65148090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65293810", "body": "No. I don't think we should remove the support for vs2008 and it also seems messy to me to put both vs2008 and vs2013 files in the same directory.\n\nCan you move the vsproject files into a separate PR?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65293810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65327788", "body": "Fixed in PR #105 \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65327788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65328048", "body": "Fixed in PR #115 \n\nAdded one flag DIST_LANG (instead of many --with-LANG flags) to specify which language to include in the distribution package.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65328048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65691084", "body": "The right way to install the python module from source is described in https://github.com/google/protobuf/blob/master/python/README.txt\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65691084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65728736", "body": "There is not a version of gtest that can work on all platforms we test in protobuf release process so we always include the gtest source with our own patches in protobuf release packages. You can try to replace the gtest directory with one coming from source tarballs we published in the release page:\nhttps://github.com/google/protobuf/releases\n\nLet me know if the problem persist after you replace the gtest source.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65728736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65728839", "body": "Should be fixed in https://github.com/google/protobuf/commit/0eaae1e6ce8767a10de49fb130f9e7f066210d7b\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65728839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65740211", "body": "We only copy the gtest source to the released source tarballs and it's not included in github. So if you download one of our released source packages (e.g., protobuf-2.6.1.tar.bz2), it will contain the gtest source and you don't need to run ./autogen.sh. However, if you do \"git clone ...\", the resulted directory will not have the gtest source and ./autogen.sh will download a version of gtest that is known to not compile on some platforms.\n\nThe last time I checked this gtest issue was around protobuf 2.5.0 release. At that time neither gtest-1.6 nor any revision in gtest svn works well. I'll check whether gtest 1.7 has fixed the problems we encountered before.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65740211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/9017929", "body": "We are in the process of updating protobuf developer guide to include new features in proto3. It will be eventually available there:\nhttps://developers.google.com/protocol-buffers/docs/overview\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/9017929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/9019790", "body": "Documentation for maps and arenas will be published soon. Maybe next month or so. The documentation for proto3 will come after that. Currently I don't think there is anything publicly available except the v3.0.0-alpha-1 change log.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/9019790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/11465942", "body": "This file is objective-c specific. Why is it in the top level directory instead of in the objective directory?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/11465942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/11466494", "body": "Thanks for the explanation :)  Could you add these comments on top of the file?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/11466494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/11915673", "body": "Hmm, I guess this code doesn't compile and the platforms we tested haven't covered this code path.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/11915673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/12028209", "body": "std::map only takes 4 type parameters. How is this code compiled?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/12028209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/18435833", "body": "@sheffatguidance Can you create a github issue for it? Comments on commits usually get lost quickly.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/18435833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17762650", "body": "Can you make this macro only contain the string literal? I remember \"#define XXX #error\" doesn't compile on some platforms (likely to be VC on windows).\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17762650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17763653", "body": "I was suggesting:\n#define PLATFORM_ERROR \"Host platform ...\"\nand then\n#error PLATFORM_ERROR\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17763653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17763709", "body": "It should be ok if such \"#define XXX #error\" is already used elsewhere in protobuf. I'll merge the patch.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17763709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17325179", "body": "This is a public method. Removing it will break existing clients. Please keep the old one and add a new method instead.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17325179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17377709", "body": "Please remove use of this StandardCharsets.\n\nThis StandardCharsets is introduced only since jdk 1.7. Our library supports back to jdk 1.5. We probably can drop 1.5 support soon but I believe jdk 1.6 will be supported for quite some time.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17377709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17377836", "body": "Please add new tests rather than replacing existing tests. Here you have removed the test coverage of the ByteString.toString(String) method.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17377836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17884353", "body": "Please test both ByteString.toString(String) and ByteString.toString(Charset) here (you added a test case for the latter but removed the test case for the former).\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17884353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17862241", "body": "Can you update this copyright notice and remove lines that have \"Protocol Buffers\", \"Google\"? \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17862241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17862262", "body": "Replace \"Google Inc.\".\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17862262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17876428", "body": "I was suggesting putting yourself as the copyright owner and removing \"Google Inc.\", \"Google Protocol Buffers\" to  avoid confusion. Note that putting \"Google Inc.\" here does not affect your rights.\n\nLet me know if you want to use your own name, or is fine with using \"Google Inc.\".\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17876428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/18603716", "body": "Can you register this function with google::protobuf::internal::OnShutdown() instead? ShutdownProtobufLibrary() wil call these callbacks and release all memory allocated by protobuf runtime.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/18603716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/19695045", "body": "Could you instead update EXPECT_EQ's implementation to make it work for this case?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/19695045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/19695090", "body": "Replace \"Google Inc.\"\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/19695090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20127837", "body": "Then it's a problem in gtest. I don't think it's good idea to make this change in protobuf code. Could you revert this EXPECT_EQ() change from this PR?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20127837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20175209", "body": "What I meant is replacing \"Google Inc.\" with \"Bloomberg Finance LP.\" in line 13.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20175209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20474781", "body": "Can you change them to use \"kint32min\" and \"kint32max\" (defined [here](https://github.com/google/protobuf/blob/master/src/google/protobuf/stubs/common.h)) and remove the inclusion of <stdint.h>?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20474781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20973994", "body": "Can you add this test for BoundedByteString and RopeByteString as well?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20973994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21126192", "body": "Why do you add this const?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21126192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21183092", "body": "Adding \"const\" here forces the initialization code of this struct to do \"const_cast\" everywhere. Doesn't seem to be a win to me. Can you remove this \"const\" and also these \"const_cast\"s? \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21183092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21330567", "body": "This README talks about how to compile/install protobuf from source. I think this tip you added here is irrelevant. To install protobuf python module, you can follow instructions in python/README. \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21330567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21567970", "body": "This change doesn't improve the code. There are 3 symbols (a function name, a variable name and a string literal) both before and after the change.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21567970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21568284", "body": "What does X stand for? Better to name it \"GlobalSymbolName\" or some other less mysterious name. The second parameter could be named \"prefix\".\n\nAccording to Google C++ code style, the parameter's name should not contain upper case letters. And also, \"{\" must  be put at the end of the preceding line.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21568284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21568745", "body": "Function names should be in CamelCase. That is, \"PrintService\" instead of \"printService\".\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21568745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21568852", "body": "Google C++ Style Guide forbids the use of tab. Code should be indented using spaces.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21568852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21568707", "body": "Introducing these two booleans and two if-statements will actually hurt the readability of this code. I think a better way to put it is:\n\nvoid Generator::PrintServiceClass(...) {\n  code to print the service class\n  PrintDescriptorKeyAndModuleName();\n}\n\nvoid Generator::PrintServiceStub(...) {\n  code to print the stub\n  PrintDescriptorKeyAndModuleName();\n}\n\nvoid Generator::PrintDescriptorKeyAndModuleName(...) {\n  ...\n}\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21568707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21410175", "body": "Ruby files need to be listed in a separate ruby_EXTRA_DIST variable and added to all_EXTRA_DIST (see line 250). Also please add ruby to line 26 in https://github.com/google/protobuf/blob/master/configure.ac#L26\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21410175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21643844", "body": "Please revert changes to this file. I don't think this refactoring helps.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21643844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21644161", "body": "Put this first print statement back to PrintServiceClass() and PrintServiceStub(). The result should be like:\nvoid Generator::PrintServiceClass(...) {\n  printer->Print(\"$class_name$ = ...\"\n                        \"....\"\n                        \"class_name\", descriptor.name());\n  printer->Indent();\n  PrintDescriptorKeyAndModuleName(descriptor);\n  printer->Print(\"))\\n\\n\");\n  printer->Outdent();\n}\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21644161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21719953", "body": "Move this \"printer_->Indent()\" to PrintServiceClass() and PrintServiceStub().\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21719953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21720137", "body": "Move \"printer_->Print(\"))\\n\\n\"); printer_->Outdent();\" to PrintServiceClass() and PrintServiceStub().\n\nA print function should print the same number of \"(\"s and closing \")\"s (if otherwise its calling function will have no idea whether it should produce extra \"(\"s or \")\"s). As this PrintDescriptorKeyAndModuleName() prints no \"(\", all of \")\"s should be moved outside of this function.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21720137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21720146", "body": "Revert this change.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21720146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22833268", "body": "Align the backslash vertically.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22833268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23244167", "body": "Why would VC require a constructor? I tested v3.0.0-alpha-1 on visual studio 2008 and 2013 but did not find such a problem.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23244167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23244299", "body": "Use spaces to indent.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23244299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23244315", "body": "Use static_cast.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23244315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23244413", "body": "Where is this used? This file does not seem like the place to define it.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23244413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23244548", "body": "Which VC version are you using? \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23244548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23793077", "body": "Just unit32 should be good enough.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23793077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23793093", "body": "same here\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23793093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23947151", "body": "Remove this line or the tab character.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23947151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23425356", "body": "Add map fields as well?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23425356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23425619", "body": "Can we put the conformance test related code in a separate stand-alone directory? I.e., in paralle with src. I think we will need some scripts to run the conformance test for every language and it's better to put the scripts and code in a central place.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23425619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23426028", "body": "I think we should make this conformance test work on windows as well. The code should not be platform dependent.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23426028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23426097", "body": "Could you use the GOOGLE_LOG(FATAL) macro defined in google/protobuf/stubs/common.h instead?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23426097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23426163", "body": "Google Code Style suggests DoTestIo instead of DoTestIO (the last o needs be lower-cased).\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23426163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23426191", "body": "Use GOOGLE_LOG(ERROR) instead?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23426191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23426235", "body": "Platform dependent code in this file needs to be rewritten. For creating sub-process we could use the functions defined in google/protobuf/compiler/subprocess.h\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23426235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27696509", "body": "Could you move the two constants UTF_8 and ISO_8859_1 in the same class?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27696509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27699320", "body": "This test seems exactly same as the testCharsetToString(). I suppose you meant to test unicode.toString(\"UTF-8\") in this test case? The test for RopeByteString has the same problem.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27699320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27705488", "body": "Please document the return value of these two methods.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27705488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27705664", "body": "Why is this not final any more?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27705664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27922762", "body": "Never mind. I just want to understand why it's removed and the reason you gave is good enough to me. Could you fix my other comment? I'll merge the change after you update that.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27922762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27923208", "body": "Also could you update the author of the first commit to you (i.e., fizbin)? Our CLA bot found the CLA for Daniel Martin but complained that we need Daniel Martin's consent for you to commit on his behalf. We need Daniel Martin to reply on this thread, or you can just update the commit author.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27923208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28115970", "body": "So the flag is not needed when running the tests?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28115970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "AlexTheLost": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4033", "title": "Incorrect result of with empty LiteralByteString.toStringUtf8().", "body": "Hi! I'm found strange behavior, in java protobuf - empty LiteralByteString (\"\") on call toStringUtf8(), returned String that look like empty, but actualy contains some number of 'empty' symbols, in quantity 16.\r\nIn consequence, comparing empty java.lang.String and LiteralByteString no return true -> java.lang.String.equals(LiteralByteString.toStringUtf8()).\r\nBy after print, both look similar, as \"\".\r\nI'm found workaround by applying trim() to result. But it's behavior not look like good.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wsw2016": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4032", "title": "Abort in JsonToBinaryStream on mismatched type in json [C++]", "body": "If the json content mismatches with the \"announced\" type_url the function util::JsonToBinaryStream aborts instead of returning the issue in util::Status.\r\n\r\nThe problem occurs within the destructor of internal::ZeroCopyStreamByteSink sink(binary_output), which aborts, if no input was provided during the parsing.\r\n\r\nVersion 3.5.0.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/ac1fdd163748077cf2a47919a2991cd5e128ff38", "message": "line breaks adjsted"}, {"url": "https://api.github.com/repos/google/protobuf/commits/e68caa3e6aa518f443a33795f9c1d1a276ef77d3", "message": "formatting issues"}, {"url": "https://api.github.com/repos/google/protobuf/commits/ffa18ad28fe73dc81088988fa7ea86c23784237a", "message": "resolve issue 4032 and added a unit test"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jbq": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4031", "title": "PHP crash on array_key_exists() / full test-case included", "body": "This is a followup to issue #3779.  I did some further research.\r\n\r\nPlease find at https://github.com/jbq/protobuf-crash a full crash test with PHP 7.2.0.\r\n\r\nHere is the GDB traceback of the crash:\r\n\r\n```\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x0000555555a59167 in zend_hash_find ()\r\n(gdb) bt\r\n#0  0x0000555555a59167 in zend_hash_find ()\r\n#1  0x0000555555944cf7 in zif_array_key_exists ()\r\n#2  0x0000555555aefa0c in execute_ex ()\r\n#3  0x0000555555af5624 in zend_execute ()\r\n#4  0x0000555555a44c73 in zend_execute_scripts ()\r\n#5  0x00005555559e0258 in php_execute_script ()\r\n#6  0x0000555555af799f in do_cli ()\r\n#7  0x00005555556a88c9 in main ()\r\n```\r\n\r\nThe crash only arises with the protobuf extension loaded and with the following code on the `array_key_exists()` call:\r\n\r\n```\r\n    public function execute() {\r\n        $tender = new \\Tender();\r\n\r\n        $object = $tender;\r\n        $item = \"owner\";\r\n\r\n        // mimic vendor/twig/twig/lib/Twig/Extension/Core.php line 1506\r\n        var_dump(isset($object->$item));\r\n\r\n        // this crashes!\r\n        var_dump(array_key_exists((string) $item, $object));\r\n    }\r\n```\r\n\r\nWhere `Tender` is a proto object:\r\n\r\n```\r\nsyntax = \"proto3\";\r\n\r\nmessage User {\r\n    string first_name = 6;\r\n    string last_name = 7;\r\n}\r\n\r\nmessage Tender {\r\n    User owner = 4;\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/3662", "title": "PHP: error when calling RepeatedField setter with array value", "body": "Consider the following protobuf definition (cleaned-up for the sake of brevity):\r\n\r\n```\r\nmessage User {\r\n    int32 id = 1;\r\n}\r\n\r\nmessage Tender {\r\n    repeated User member = 12;\r\n}\r\n```\r\n\r\nNow consider the following piece of PHP code:\r\n\r\n```\r\n$pbTender = new Tender();\r\n$pbTender->setMember([]);\r\n```\r\n\r\nI get the following error:\r\n\r\n```\r\nCannot pass parameter 1 by reference\r\n```\r\n\r\nI'm expecting to be able to pass an array directly.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cyyber": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4029", "title": "Membership test of a key in Map have different behavior in Python & CPP API ", "body": "Recently, I have faced an issue using protobuf in Python3, where CPP environ works fine, but python environ fails to find the key. This behavior has recently caused disruption to the distribution of our software using protobuf.\r\n\r\nLets assume the following protoformat\r\n\r\nmessage myData {\r\n    map<string, uint64> data = 1;\r\n}\r\n\r\nNow lets assume I set the cpp environment I do the following after generating stub.\r\n\r\nos.environ['PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION'] = 'cpp'\r\nmyData.data['hello'] = 10\r\nprint(b'hello' in myData.data)\r\n\r\nThe above would print True, in cpp api of protobuf.\r\nNow lets do the same with python\r\n\r\nos.environ['PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION'] = 'python'\r\nmyData.data['hello'] = 10\r\nprint(b'hello' in myData.data)\r\n\r\nThe above would print False as python api doesn't convert bytes into string.\r\n\r\nDue to this, our software, using protobuf, when deployed into different nodes of our users, had mixed result. Users with cpp api of protobuf, in their nodes, our software worked fine, without any problem. But users with the python api of protobuf, had faced a lot of bug just because of this.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/0e2089c775ce1e19cc9429e496d84952e11c907c", "message": "Calling Keychecker before checking key in MessageMap"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kpayson64": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4027", "title": "Compiling for NodeJS with import_style=commonjs does not create commonjs modules for messages", "body": "Reported here:\r\nhttps://github.com/grpc/grpc/issues/9189\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cmoad": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4025", "title": "TypeError: jspb.Message.setProto3StringIntField is not a function", "body": "```\r\nhomebrew 3.5.0.1\r\nprotoc --version\r\nlibprotoc 3.5.0\r\nnpm google-protobuf 3.5.0\r\n```\r\n\r\nI upgraded my project to 3.5.0 and use the `[jstype = JS_STRING]` field annotation on int64's extensively. I'm getting the following error in javascript:\r\n\r\n```\r\nTypeError: jspb.Message.setProto3StringIntField is not a function\r\n```", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4025/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "KantarBruceAdams": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4024", "title": "decode to json from command line", "body": "**Bug:** The man page does not state what format is used by the _--decode_ and _--encode_ options\r\n**Feature request:** Add an option to decode directly to json.\r\n\r\nLooking for a way to decode a message into json from the command line I stumbled upon:\r\n\r\nhttps://stackoverflow.com/questions/34952811/is-there-a-definitive-nix-command-line-tool-for-inspecting-protocol-buffers\r\n\r\nwhich mentions the _--decode_ option which at first sight appears to be just what I was looking for.\r\nHowever the output format is not in fact json but something called \"_text format_\" which is undocumented (see https://github.com/google/protobuf/issues/3755).\r\n\r\nMy use case is that I am writing test cases to check the output of programs that send messages encoded using protocol buffers. I want to convert them to some format that can be analysed easily and add test assertions.\r\nE.g.  \r\n\r\n> ACTUAL=`protoc --decode .... | jq .getSomeField`      \r\n> assertEqual \"expected foo\" \"foo\" \"$ACTUAL\"", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4024/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rvijayraghavan": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4022", "title": "protobuf-lite is not on v3.5.0", "body": "Any specific reason to not keep protobuf-lite and protoc-gen-javalite in line with other libraries? All but these 2 seem to be on older versions (3.0.1 and 3.0.0 respectively).\r\n\r\nhttp://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.google.protobuf%22\r\n\r\nUse-case: Our server uses latest protobuf compiler version 3.5.0 whereas the Android client can only use 3.0.1 (latest protobuf-lite) causing some issues in code generation.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jonathan-se": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4006", "title": "JS - How to get and set fields of inner message field ", "body": "Given the following message:\r\nmessage A{\r\n--  message B{\r\n------  int32 x = 1\r\n------  int32 y = 2\r\n--  }\r\n--  int32 foo = 1\r\n--  B bar       = 2\r\n}\r\n\r\nmsg = A.deserializeBinary(buffer)\r\n\r\n1) Is msg.getBar().getX() is the only way to get x value? or there is a nicer solution like msg.bar.getX() (without using toObject())?\r\n\r\n2) How can I set the value of x field without creating a new B message? ", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/4005", "title": "JS - toObject() inconsistent behavior with empty fields", "body": "When a message contains an inner message field, if it's left empty, toObject() will return undefined for that field value and that Implies the field was empty in the original message.\r\nBut when the empty field is a Singular Scalar Field, toObject() will return default value for its type and it's not possible to know if this was the original value of the field or was it originally empty.\r\n\r\nProbably the difference is derived from the same difference in getField(), but why not use hasFeild() to really determine if the field is empty and to set the value of it to \"undefined\" in all cases? otherwise it's not possible to trust and use the object representation.       ", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wonson": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4004", "title": "[Feature Request] Allow custom namespace to avoid protobuf version/linking conflicts", "body": "There are constantly some problems about linking multiple protobuf. \r\nFor example, \r\nUsing Qt shared lib (Having system protobuf dependency) in Ubuntu conflicts the specified linked protobuf binary in your own project (not working well neither same version or different version).\r\n\r\nIn my case with 2.6.1 version, i found that replacing the `namespace google ` and `google::` to a custom namespace can already solve this issue well, especially if the compiled binary is not intended to be shared but using only in your own lib/app.\r\n\r\nSo, maybe you guys can add a configure option to rename/add a layer of namespace to solve this perfectly, and also be able to remove the restriction of \"Cannot link 2 protobuf in one app\"? ", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "khuzemap": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4002", "title": "Control for preserving unknown fields for proto2", "body": "Hi,\r\n\r\nWe have a requirement that, on certain platform because of constraint resources, we need to control if unknown field should be preserved for incoming proto2 protobuf . This is to change the default behavior of proto2 which always preserves unknown fields.\r\n\r\nWould like to understand if there is wider interest in such a feature and recommendation on how to enable such a control.\r\n\r\nKhuzema/Austin", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "geigerj": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3998", "title": "Ruby protobuf generated classes should implement to_s", "body": "### Original issue\r\n\r\nhttps://github.com/GoogleCloudPlatform/google-cloud-ruby/issues/1868\r\n\r\n### What\r\n\r\nRuby protobuf generated classes should implement `to_s`.\r\n\r\n### Why\r\n\r\nFrom original issue:\r\n\r\n> When working in irb trying to build up a script to interact with language it is hard to figure out what properties/fields each class has because they don't all implement #to_s. To understand what's going on you have to use #inspect. It would be handy if they all implemented #to_s. \r\n> For example, compare\r\n> ```ruby\r\n> puts syn.tokens[1]\r\n> #<Google::Cloud::Language::V1::Token:0x007ff8a40cc368>\r\n> ```\r\n> to \r\n> ```ruby\r\n> puts syn.tokens[1].inspect\r\n> <Google::Cloud::Language::V1::Token: text: <Google::Cloud::Language::V1::TextSpan: content: \"cat\", begin_offset: -1>, part_of_speech: <Google::Cloud::Language::V1::PartOfSpeech: tag: :NOUN, aspect: :ASPECT_UNKNOWN, case: :CASE_UNKNOWN, form: :FORM_UNKNOWN, gender: :GENDER_UNKNOWN, mood: :MOOD_UNKNOWN, number: :SINGULAR, person: :PERSON_UNKNOWN, proper: :PROPER_UNKNOWN, reciprocity: :RECIPROCITY_UNKNOWN, tense: :TENSE_UNKNOWN, voice: :VOICE_UNKNOWN>, dependency_edge: <Google::Cloud::Language::V1::DependencyEdge: head_token_index: 2, label: :NSUBJ>, lemma: \"cat\">\r\n> ```\r\n> The second one helps me see what fields I can call and makes learning the library faster.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/3470", "title": "Ruby question: how to unpack Any instance without wrapped class?", "body": "The Ruby Any type encodes the wrapped message class as a type_url:\r\n\r\n```\r\n> ts = Google::Protobuf::Timestamp.new :nanos => 123\r\n> a = Google::Protobuf::Any.new.pack ts\r\n> puts a.inspect\r\n<Google::Protobuf::Any: type_url: \"type.googleapis.com/google.protobuf.Timestamp\", value: \"\\x10{\">\r\n```\r\nHowever, to unpack the Any type, you need to specify the wrapped class:\r\n\r\n```\r\na.unpack Google::Protobuf::Timestamp\r\n```\r\n\r\nIf I don't know that the wrapped class is Google::Protobuf::Timestamp, it seems that the protobuf library should be able to infer the right argument from the type_url. But if it can't, does the protobuf runtime keep a registry of messages and type URLs so that the calling code can do the conversion?\r\n\r\n```\r\n> a.unpack Google::Protobuf::RuntimeRegistry.lookup(a.type_url)\r\n``` \r\n?\r\n\r\ncc: @haberman ", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/3425", "title": "Ruby generated code: determine if field is of map type", "body": "### What\r\n\r\nAdd a method to `field_descriptor` to determine if it represents a map type, something like\r\n\r\n`field_descriptor.map_type?`\r\n\r\nor\r\n\r\n`field_descriptor.type.map?`\r\n\r\n### Why\r\n\r\nIn the Ruby generated code, `map` fields have `:message` type. which makes them indistinguishable from proto message-type fields. For example, for [`google.api.Metric.labels`](https://github.com/googleapis/googleapis/blob/f53bb6bbb0af759d2508defee7bc97f30d679f52/google/api/metric.proto#L195):\r\n\r\n```\r\nfield_descriptor.type # => message\r\nfield_descriptor.subtype.name # => google.api.Metric_MapEntry_labels\r\n```\r\n\r\ncc: @landrito @haberman \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "E-HERO": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3991", "title": "proto used by executable file and shared lib crash", "body": "I met a problem that my executable file used a static lib named A which contain a proto and my shared lib(.so file) also use the same static lib A. When my executable file load (called by dlopen) the  shared lib\uff0cthe program crash (core segment).similar with [https://github.com/google/protobuf/issues/1489](url)  \r\nBut I can't replace the static lib A with shared lib (A.so), because the lib is too complicated and I have no right to change it. \r\nI have tried another way that I remove static lib A from the shared lib, therefore these symbols in static lib A is undefined in the shared lib (nm can prove it). I think the symbols in static lib A have already been in memory when my executable file startup, so when executable file dlopen the shared lib it will search static lib A's symbols in memory. However, when dlopen the shared lib, it dlopen fail because of undefined symbol(not core segment error).\r\n\r\nSo, I am very appreciated for any suggestion to solve the problem.\r\n\r\nthe core information \uff1a\r\n#0  google::protobuf::internal::Mutex::Lock (this=0x0) at google/protobuf/stubs/common.cc:302\r\n#1  0x00007f9838e1f9b0 in google::protobuf::internal::MutexLock::MutexLock (this=<optimized out>, mu=0x0) at ./google/protobuf/stubs/common.h:1866\r\n#2  0x00007f9838e1f9b0 in google::protobuf::internal::LogMessage::Finish (this=0x7fff93979090) from ../plugin/libzacdefaultworker.so\r\n#3  0x00007f9838e71b1f in google::protobuf::SimpleDescriptorDatabase::DescriptorIndex<std::pair<void const*, int> >::AddFile (this=0x285d018, file=..., value=...)\r\n    at ./google/protobuf/descriptor.pb.h:2682\r\n#4  0x00007f9838e6cc30 in google::protobuf::EncodedDescriptorDatabase::Add (this=0x285d010, encoded_file_descriptor=0x7f98390d9168, size=960)\r\n    at /usr/lib/gcc/x86_64-redhat-linux/3.4.5/../../../../include/c++/3.4.5/bits/stl_pair.h:144\r\n#5  0x00007f9838e2de11 in google::protobuf::DescriptorPool::InternalAddGeneratedFile (encoded_file_descriptor=0x7f98390d9168, size=960) at google/protobuf/descriptor.cc:862\r\n#6  0x00007f9838eca0fa in protobuf_AddDesc_service_2eproto () at msg/service.pb.cc:260\r\n#7  0x00007f9838ed8483 in StaticDescriptorInitializer_service_2eproto::StaticDescriptorInitializer_service_2eproto (this=0x1ac8938 <static_descriptor_initializer_service_2eproto_>)\r\n    at msg/service.pb.cc:283\r\n#8  0x00007f9838ed65fd in __static_initialization_and_destruction_0 (__initialize_p=1, __priority=65535) at msg/service.pb.cc:285\r\n#9  0x00007f9838ed6612 in _GLOBAL__sub_I_service.pb.cc(void) () at msg/service.pb.cc:3205\r\n#10 0x00007f9838ed97b6 in __do_global_ctors_aux () from ../plugin/libzacdefaultworker.so\r\n#11 0x00007f9838a7fd37 in _init () from ../plugin/libzacdefaultworker.so\r\n#12 0x00007f98389ec0a0 in ?? () from ../plugin/libzacdefaultworker.so\r\n#13 0x00007f985368f7cd in call_init.part () from /opt/compiler/gcc-4.8.2/lib64/ld-linux-x86-64.so.2\r\n#14 0x00007f985368f8f3 in _dl_init_internal () from /opt/compiler/gcc-4.8.2/lib64/ld-linux-x86-64.so.2\r\n#15 0x00007f9853693a28 in dl_open_worker () from /opt/compiler/gcc-4.8.2/lib64/ld-linux-x86-64.so.2\r\n#16 0x00007f985368f694 in _dl_catch_error () from /opt/compiler/gcc-4.8.2/lib64/ld-linux-x86-64.so.2\r\n#17 0x00007f985369321b in _dl_open () from /opt/compiler/gcc-4.8.2/lib64/ld-linux-x86-64.so.2\r\n#18 0x00007f9852a0601b in dlopen_doit () from /opt/compiler/gcc-4.8.2/lib/libdl.so.2\r\n#19 0x00007f985368f694 in _dl_catch_error () from /opt/compiler/gcc-4.8.2/lib64/ld-linux-x86-64.so.2\r\n#20 0x00007f9852a065cd in _dlerror_run () from /opt/compiler/gcc-4.8.2/lib/libdl.so.2\r\n#21 0x00007f9852a060b1 in dlopen@@GLIBC_2.2.5 () from /opt/compiler/gcc-4.8.2/lib/libdl.so.2", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "arthur-tacca": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3986", "title": "[Python] Enhancement request: Timestamp from datetime on one line", "body": "The `google.protobuf.Timestamp` well-known type is very much appreciated, but I've found myself often needing to be able to convert a Python `datetime` into a `Timestamp` within an expression (especially in list comprehensions). Of course it is easy to knock up a function to do this:\r\n\r\n    def timestamp_from_datetime(dt):\r\n        ts = Timestamp()\r\n        ts.FromDatetime(dt)\r\n        return ts\r\n\r\nBut it seems a bit annoying to have to do this. Would it be possible to add a facility to do this directly into `Timestamp`? A constructor or static method would be ideal, but even just `return self` in `FromDatetime()` would do (then we could write the above as `Timestamp().FromDatetime(dt)`). The same problem applies to `Duration` from `timedelta`, although I personally have not used that class.\r\n\r\nBy the way, I realised that the only time I come across this is as part of building a larger protobuf object. Getting `datetime` objects to work directly in their constructor would be even better, for my use case at least:\r\n\r\n    my_protobuf = MyProtobufMessage(\r\n        int_field=3,  # fine\r\n        list_of_strings=[\"foo\", \"bar\"],  # fine\r\n        timestamp=datetime.utcnow(),   # error\r\n    )", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3986/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sviterok": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3983", "title": "[python] Add option to format Enums as integers in MessageToDict/MessageToJson", "body": "Hi,\r\nJSON formatter for C# has option called `FormatEnumsAsIntegers` (pull request #2884 has added it). Golang's `jsonpb` also has a similar option, it's called `EnumsAsInts` (link: https://godoc.org/github.com/golang/protobuf/jsonpb#Marshaler).\r\nC++ `JsonPrintOptions` has `always_print_enums_as_ints ` flag too.\r\n\r\n**What do you think about adding a similar option for Python?**\r\n\r\nHere is my proposal of how it might look like for users:\r\n```python\r\n# ... google/protobuf/json_format.py\r\ndef MessageToDict(message,\r\n                  including_default_value_fields=False,\r\n                  preserving_proto_field_name=False,\r\n                  format_enums_as_integers=False):  # <--- new argument\r\n```\r\n```python\r\n# ... google/protobuf/json_format.py\r\ndef MessageToJson(message,\r\n                  including_default_value_fields=False,\r\n                  preserving_proto_field_name=False,\r\n                  format_enums_as_integers=False): # <--- new argument\r\n```\r\n\r\nI'll be glad to work on the implementation if you like the idea.\r\n\r\nThanks!", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/da3bfa693af8c61da0b16e6d323c1057d68de97f", "message": "Fix a typo in WKT's test suite\n\nHi!\r\nSorry for bothering with such a minor thing, but I just noticed and fixed one annoying typo in WKT's test suite:\r\n`\"accpets\" -> \"accepts\"`\r\n\r\nThanks!"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "benesch": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3980", "title": "support treating warnings as errors (-Werror)", "body": "Compiler warnings from `protoc` can get lost, especially when part of a large build system, and there's no flag\u2014at least, not one that I can find\u2014to upgrade those warnings into fatal errors, like the `-Werror` flag does for GCC.\r\n\r\nIt would also be nice to provide plugins with an interface for indicating when a warning has been produced, so that `protoc` can exit with a failing exit status if `-Werror` has been passed. Our Go protobuf generator produces some warnings that we'd like to treat as errors, for example: gogo/protobuf/issues/356", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "arnaud-lb": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3974", "title": "PHP: json_name honored in pure-php impl, ignored in C extension", "body": "When using the `json_name` option to control the name of serialized attributes, the pure-PHP implementation of protobuf works as expected. However the C extension ignores the option completely.\r\n\r\n``` protobuf\r\n// test.prot\r\n\r\nsyntax=\"proto3\";\r\n\r\nmessage Foo {\r\n    int32 foo = 1 [json_name=\"bar\"];\r\n}\r\n```\r\n\r\n``` php\r\n<?php\r\n\r\n// test.php\r\n\r\nrequire \"vendor/autoload.php\";\r\n\r\n$foo = new Foo();\r\n$foo->setFoo(42);\r\n\r\necho $foo->serializeToJsonString(), \"\\n\";\r\n```\r\n\r\n``` sh\r\n$ protoc --php_out=. test.proto\r\n$ php test.php\r\n{\"bar\":42} # ok\r\n$ php -dextension=protobuf.so test.php\r\n{\"foo\":42} # not ok with extension\r\n```", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "djudd-stripe": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3973", "title": "Allow specifying both --proto_path and --descriptor_set_in", "body": "Feature request: protoc should allow specifying both `--proto_path` and `--descriptor_set_in`. Two use cases: \r\n* A dependency provides a descriptor_set_in, but not .proto files, and I'd like to use that to compile some .proto files which import schemas from the descriptor set but also depend on each other. This arises, e.g., when using a Bazel `proto_library` output as a dependency, but in a project that itself doesn't use Bazel, so we can't rely on Bazel's dependency resolution.\r\n* `proto_path` allows you to rename a .proto on import (by setting `--proto_path=foo.proto=my_prefix.foo.proto` etc). It would be great to have that capability when using descriptor set inputs, too.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4021", "title": "Add CLI flag --schemas_out to turn descriptor set back to .protos", "body": "This is a proposed feature, on which I'm looking for comment. I haven't implemented tests yet, but will if folks like the idea.\r\n\r\nThe main use case I have is generating .proto schemas from another, canonical schema definition. Rather than writing out .proto strings myself, it seems safer/nicer to build a descriptor set object using standard setters and then use google/protobuf C++ code to turn that into .proto strings, and I'm not working in C++ so would like to be able to shell out to protoc.\r\n\r\nEvidence that I'm not the only person who has wanted this feature: https://stackoverflow.com/questions/19418655/restoring-proto-file-from-descriptor-string-possible\r\n\r\nI should be covered by the Stripe CLA, although the bot doesn't always seem to recognize that.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cc5092": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3970", "title": "php namespace support for GPBMetadata", "body": "#3162 \r\n\r\n> TeBoring commented on 2 Jun\r\nI don't think we need to change the namespace of GPBMetadata files. These files are transparent to users.\r\n\r\nAs you said, these GPBMetadata files are transparent to users. But I think it still makes sense to add namespace for GPBMetadata file.\r\n\r\nSuppose I have 2 grpc go services and are developed by different teams. They define the protobuf file by \"user.proto\". this \"user.proto\" will generate a GPBMetadata\\User.php file.\r\n\r\nMy laravel project needs to use both two grpc services they provided and for the psr-4 autoload, the composer.json file needs to be defined as follows: \r\n\r\n```json\r\n\"autoload\": {\r\n    \"psr-4\": {\r\n        \"App\\\\\": \"app/\"\r\n    },\r\n    \"classmap\": [\r\n        \"app/FirstService/GPBMetadata/\",\r\n        \"app/SecondService/GPBMetadata/\"\r\n    ]\r\n}\r\n```\r\n\r\nExecuting \"composer dumpautoload\" in the root directory of project, and we will get notice like this:\r\n> Warning: Ambiguous class resolution, \"GPBMetadata\\User\" was found in both \"$baseDir . 'app/FirstService/GPBMetadata/User.php\" and \"path_to_proj/app/SecondService/GPBMetadata/User.php\", the first will be used.\r\n\r\nSo I think it makes sense to add GPBMetadata namespace support. \r\n\r\nLooking forward to your reply.\r\n\r\nping @TeBoring ", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Gnouc": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3965", "title": "[python] well known types lacks of rich comparison", "body": "Take a look at [well_known_types.py](https://github.com/google/protobuf/blob/master/python/google/protobuf/internal/well_known_types.py), most of them lacks of rich comparison method. So writing it the idiom way in Python can cause confusion. Example:\r\n\r\n```\r\nIn [1]: from google.protobuf import timestamp_pb2\r\n\r\nIn [2]: bool(timestamp_pb2.Timestamp())\r\nOut[2]: True\r\n```\r\n\r\nalways give `True`, causing this code:\r\n```\r\nt = timestamp_pb2.Timestamp()\r\nif not t:\r\n    print 't is empty message'\r\n```\r\n\r\ndoes not print as expected.\r\n\r\nWhile:\r\n\r\n```\r\nIn [1]: from google.protobuf import struct_pb2\r\n\r\nIn [2]: bool(struct_pb2.Struct())\r\nOut[2]: False\r\n```\r\n\r\nalways give `False` (`Struct` has its own [\\_\\_len\\_\\_\\(\\)](https://github.com/google/protobuf/blob/master/python/google/protobuf/internal/well_known_types.py#L748)).\r\n\r\nAnd also:\r\n\r\n```\r\nIn [1]: from google.protobuf import timestamp_pb2\r\n\r\nIn [2]: t = timestamp_pb2.Timestamp()\r\n\r\nIn [3]: now = timestamp_pb2.Timestamp()\r\n\r\nIn [4]: now.GetCurrentTime()\r\n\r\nIn [5]: s = timestamp_pb2.Timestamp()\r\n\r\nIn [6]: now > t\r\nOut[6]: False\r\n\r\nIn [7]: now > s\r\nOut[7]: True\r\n```\r\n\r\nis not consistent, because `Timestamp` lacks all of rich comparison methods.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3965/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "apacha": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3957", "title": "Degrade from 3.4 to 3.5: Windows Protobuf Compiler does no longer understand * operator for multiple input files", "body": "I tried to follow the instructions from [tensorflow-models repo](https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/installation.md) up until the point where to run \r\n\r\n`protoc object_detection/protos/*.proto --python_out=.`\r\n\r\nSo I downloaded the appropriate Windows version and added it to my Path. But when running the corresponding windows command: \r\n\r\n`protoc .\\object_detection\\protos\\*.proto --python_out=.`\r\nor even with the forward slash\r\n`protoc object_detection/protos/*.proto --python_out=.`\r\n\r\nI only get the error `object_detection/protos/*.proto: No such file or directory`, indicating that it does not understand the *-operator. When compiling the files individually that reside in that directory, it works as expected.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jleni": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3954", "title": "Attribute types are not always kept when serializing/deserializing", "body": "Protobuf validates that attributes with type `bytes` cannot be assigned `bytearray`, however, when parsing this is not respected and types change and are incorrect.\r\n\r\nThe following unit tests shows the problem. While it is correctly not accepting bytearray, if the value is restored from a buffer with type bytearray, the attribute adopts that type instead of the expected `bytes`\r\n\r\nThis bug results in inconsistent behavior and odd type exceptions when moving that between data between protobuf objects in python.\r\n\r\n```\r\nimport unittest\r\nfrom unittest import TestCase\r\n\r\nfrom bug_pb2 import Foo\r\n\r\n\"\"\"\r\nsyntax = \"proto3\";\r\n\r\npackage repro_bug;\r\n\r\nmessage Foo\r\n{\r\n    bytes bar = 1;\r\n}\r\n\"\"\"\r\n\r\n\r\nclass TestBytearrayBug(TestCase):\r\n\r\n    def test_stable_type(self):\r\n        foo = Foo(bar=bytes(b'test'))\r\n        self.assertIsInstance(foo.bar, bytes)\r\n\r\n        with self.assertRaises(TypeError):\r\n            invalid_foo = Foo(bar=bytearray(b'should_fail'))\r\n\r\n        data = foo.SerializeToString()\r\n        self.assertIsInstance(data, bytes)\r\n\r\n        data_array = bytearray(data)\r\n        foo.ParseFromString(data_array)\r\n        self.assertIsInstance(foo.bar, bytes)\r\n\r\n\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n```", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/582d6ac3aa519316b64c09e55e40422c4950e05c", "message": "Upgrading dotnet to 1.0.4"}, {"url": "https://api.github.com/repos/google/protobuf/commits/08334f0908991601152a103cf2934f991bab2efd", "message": "Converting to immutable hashable types"}], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3956", "title": "Fixing immutable/mutable type conversion in parser", "body": "This PR solves the problem described in issue #3954.\r\n\r\nIf the input to the parser is a mutable `bytearray`, an error is triggered in python2 and the type of the attributes is incorrect in python3.\r\n\r\nA unit test is also added to reproduce the problem:\r\n> python/google/protobuf/internal/parsing_test.py\r\n\r\nWithout the fix, the corresponding problems are triggered in python 2 / 3.\r\n\r\nPython2 unit test failure:\r\n\r\n> \r\n> Error\r\n> Traceback (most recent call last):\r\n>   File \"/home/lenij/anaconda3/envs/p2/lib/python2.7/unittest/case.py\", line 329, in run\r\n>     testMethod()\r\n>   File \"/home/lenij/crypto/protobuf/python/google/protobuf/internal/parsing_test.py\", line 54, in test_stable_type\r\n>     foo.ParseFromString(data_array)\r\n>   File \"/home/lenij/crypto/protobuf/python/google/protobuf/message.py\", line 185, in ParseFromString\r\n>     self.MergeFromString(serialized)\r\n>   File \"/home/lenij/crypto/protobuf/python/google/protobuf/internal/python_message.py\", line 1091, in MergeFromString\r\n>     raise message_mod.DecodeError('Truncated message.')\r\n> DecodeError: Truncated message.\r\n\r\nPython3 unit test failure:\r\n\r\n> Failure\r\n> Traceback (most recent call last):\r\n>   File \"/home/lenij/anaconda3/envs/qrl3/lib/python3.6/unittest/case.py\", line 59, in testPartExecutor\r\n>     yield\r\n>   File \"/home/lenij/anaconda3/envs/qrl3/lib/python3.6/unittest/case.py\", line 605, in run\r\n>     testMethod()\r\n>   File \"/home/lenij/crypto/protobuf/python/google/protobuf/internal/parsing_test.py\", line 55, in test_stable_type\r\n>     self.assertIsInstance(foo.bar, six.binary_type)\r\n>   File \"/home/lenij/anaconda3/envs/qrl3/lib/python3.6/unittest/case.py\", line 1245, in assertIsInstance\r\n>     self.fail(self._formatMessage(msg, standardMsg))\r\n>   File \"/home/lenij/anaconda3/envs/qrl3/lib/python3.6/unittest/case.py\", line 670, in fail\r\n>     raise self.failureException(msg)\r\n> AssertionError: bytearray(b'test') is not an instance of <class 'bytes'>\r\n> \r\n\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JanecekPetr": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3949", "title": "Backward-compatible field/message rename", "body": "When using text format, JSON format, or any `FieldMask` features, it is _not_ safe to rename messages/fields. We're using text format for various things, mostly complex configuration files; and a FieldMask is occasionally useful, too.\r\n\r\nOver time, the inability to rename old fields and messages is a bigger and bigger issue for us.\r\n\r\nWould it be possible to add a way to rename and/or alias fields and messages in text-backward-compatible way? Having a new option seems to me to be the easieast approach to me currently:\r\n\r\n```\r\nint32 new_name = 6 [alias=\"old_name\", alias=\"oooold_name\"];\r\n\r\nmessage NewMessageName {\r\n    option alias = \"OldMessageName\";\r\n}\r\n```\r\n\r\nThese options would be disregarded when parsing from the wire, but could be taken into account when parsing from any text representation (or when using `FieldMask`).\r\n\r\nThe biggest issue I can see that this clashes with how currently enum aliasing works.\r\n\r\n(related to #3793)", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "achew22": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3928", "title": "proto3 => json docs don't include a serialized oneof field", "body": "It would be nice if there was an example of a proto that had a oneof field being JSON serialized.\r\n\r\nhttps://developers.google.com/protocol-buffers/docs/proto3", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Xjs": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3924", "title": "Go output with grpc plugin in super-directory doesn't work", "body": "On Windows 10, `protoc --go_out=plugins=grpc:../output input.proto` doesn't work (even if `../output` directory exists). Error message:\r\n\r\n```plugins=grpc;..\\output/: No such file or directory```\r\n\r\n`protoc --go_out=plugins=grpc:output input.proto` and even `protoc --go_out=plugins=grpc:./output input.proto` do work (with existing `./output` directory of course).\r\n\r\nI'm not sure if this issue is correctly placed here, or rather in https://github.com/grpc/grpc or in https://github.com/golang/protobuf.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jay11ca39": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3912", "title": "Error while cross compiling protobuf for arm64 on ubuntu machine", "body": "I am following steps to build protobuf 3.4.0 release:\r\n\r\n```\r\n(1) https://github.com/google/protobuf/releases [download protobuf 3.4.0]\r\n\r\n(2) Unzip it\r\n\r\n(3) chmod 777 autogen.sh && ./autogen.sh\r\n\r\n(4)  ./configure --host=aarch64-unknown-linux-gnu CC=/usr/bin/aarch64-linux-gnu-gcc-4.8 CXX=/usr/bin/aarch64-linux-gnu-g++-4.8\r\n\r\n(5) make\r\n```\r\n\r\nI got the following error in 5th step: \r\n```\r\nlibtool: link: (cd \"lib/.libs\" && rm -f \"libgtest.so.0\" && ln -s \"libgtest.so.0.0.0\" \"libgtest.so.0\")\r\nlibtool: link: (cd \"lib/.libs\" && rm -f \"libgtest.so\" && ln -s \"libgtest.so.0.0.0\" \"libgtest.so\")\r\nlibtool: link: ar cru lib/.libs/libgtest.a  src/gtest-all.o\r\nlibtool: link: ranlib lib/.libs/libgtest.a\r\nlibtool: link: ( cd \"lib/.libs\" && rm -f \"libgtest.la\" && ln -s \"../libgtest.la\" \"libgtest.la\" )\r\ndepbase=`echo src/gtest_main.lo | sed 's|[^/]*$|.deps/&|;s|\\.lo$||'`;\\\r\n        /bin/bash ./libtool  --tag=CXX   --mode=compile /usr/bin/aarch64-linux-gnu-g++-4.8 -DHAVE_CONFIG_H -I. -I./build-aux  -I. -I./include  -pthread -DGTEST_HAS_PTHREAD=1 -g -DNDEBUG -MT src/gtest_main.lo -MD -MP -MF $depbase.Tpo -c -o src/gtest_main.lo src/gtest_main.cc &&\\\r\n        mv -f $depbase.Tpo $depbase.Plo\r\nlibtool: compile:  /usr/bin/aarch64-linux-gnu-g++-4.8 -DHAVE_CONFIG_H -I. -I./build-aux -I. -I./include -pthread -DGTEST_HAS_PTHREAD=1 -g -DNDEBUG -MT src/gtest_main.lo -MD -MP -MF src/.deps/gtest_main.Tpo -c src/gtest_main.cc  -fPIC -DPIC -o src/.libs/gtest_main.o\r\nlibtool: compile:  /usr/bin/aarch64-linux-gnu-g++-4.8 -DHAVE_CONFIG_H -I. -I./build-aux -I. -I./include -pthread -DGTEST_HAS_PTHREAD=1 -g -DNDEBUG -MT src/gtest_main.lo -MD -MP -MF src/.deps/gtest_main.Tpo -c src/gtest_main.cc -o src/gtest_main.o >/dev/null 2>&1\r\n/bin/bash ./libtool  --tag=CXX   --mode=link /usr/bin/aarch64-linux-gnu-g++-4.8 -pthread -DGTEST_HAS_PTHREAD=1 -g -DNDEBUG   -o lib/libgtest_main.la -rpath /usr/local/lib src/gtest_main.lo lib/libgtest.la\r\nlibtool: link: /usr/bin/aarch64-linux-gnu-g++-4.8  -fPIC -DPIC -shared -nostdlib /usr/lib/gcc-cross/aarch64-linux-gnu/4.8/../../../../aarch64-linux-gnu/lib/../lib/crti.o /usr/lib/gcc-cross/aarch64-linux-gnu/4.8/crtbeginS.o  src/.libs/gtest_main.o   -Wl,-rpath -Wl,/home/jay/2017/EMF/protobuf-3.4.0/protobuf-3.4.0/gmock/gtest/lib/.libs lib/.libs/libgtest.so -L/usr/lib/gcc-cross/aarch64-linux-gnu/4.8 -L/usr/lib/gcc-cross/aarch64-linux-gnu/4.8/../../../../aarch64-linux-gnu/lib/../lib -L/lib/../lib -L/usr/lib/../lib -L/usr/lib/gcc-cross/aarch64-linux-gnu/4.8/../../../../aarch64-linux-gnu/lib -lstdc++ -lm -lc -lgcc_s /usr/lib/gcc-cross/aarch64-linux-gnu/4.8/crtendS.o /usr/lib/gcc-cross/aarch64-linux-gnu/4.8/../../../../aarch64-linux-gnu/lib/../lib/crtn.o  -pthread   -pthread -Wl,-soname -Wl,libgtest_main.so.0 -o lib/.libs/libgtest_main.so.0.0.0\r\nlibtool: link: (cd \"lib/.libs\" && rm -f \"libgtest_main.so.0\" && ln -s \"libgtest_main.so.0.0.0\" \"libgtest_main.so.0\")\r\nlibtool: link: (cd \"lib/.libs\" && rm -f \"libgtest_main.so\" && ln -s \"libgtest_main.so.0.0.0\" \"libgtest_main.so\")\r\nlibtool: link: ar cru lib/.libs/libgtest_main.a  src/gtest_main.o\r\nlibtool: link: ranlib lib/.libs/libgtest_main.a\r\nlibtool: link: ( cd \"lib/.libs\" && rm -f \"libgtest_main.la\" && ln -s \"../libgtest_main.la\" \"libgtest_main.la\" )\r\nmake[3]: Leaving directory `/home/jay/2017/EMF/protobuf-3.4.0/protobuf-3.4.0/gmock/gtest'\r\nmake[2]: Leaving directory `/home/jay/2017/EMF/protobuf-3.4.0/protobuf-3.4.0'\r\nmake[1]: Leaving directory `/home/jay/2017/EMF/protobuf-3.4.0/protobuf-3.4.0'\r\nMaking check in src\r\nmake[1]: Entering directory `/home/jay/2017/EMF/protobuf-3.4.0/protobuf-3.4.0/src'\r\noldpwd=`pwd` && ( cd . && $oldpwd/protoc -I. --cpp_out=$oldpwd google/protobuf/any_test.proto google/protobuf/compiler/cpp/cpp_test_bad_identifiers.proto google/protobuf/map_lite_unittest.proto google/protobuf/map_proto2_unittest.proto google/protobuf/map_unittest.proto google/protobuf/unittest_arena.proto google/protobuf/unittest_custom_options.proto google/protobuf/unittest_drop_unknown_fields.proto google/protobuf/unittest_embed_optimize_for.proto google/protobuf/unittest_empty.proto google/protobuf/unittest_enormous_descriptor.proto google/protobuf/unittest_import_lite.proto google/protobuf/unittest_import.proto google/protobuf/unittest_import_public_lite.proto google/protobuf/unittest_import_public.proto google/protobuf/unittest_lazy_dependencies.proto google/protobuf/unittest_lazy_dependencies_custom_option.proto google/protobuf/unittest_lazy_dependencies_enum.proto google/protobuf/unittest_lite_imports_nonlite.proto google/protobuf/unittest_lite.proto google/protobuf/unittest_mset.proto google/protobuf/unittest_mset_wire_format.proto google/protobuf/unittest_no_arena_lite.proto google/protobuf/unittest_no_arena_import.proto google/protobuf/unittest_no_arena.proto google/protobuf/unittest_no_field_presence.proto google/protobuf/unittest_no_generic_services.proto google/protobuf/unittest_optimize_for.proto google/protobuf/unittest_preserve_unknown_enum2.proto google/protobuf/unittest_preserve_unknown_enum.proto google/protobuf/unittest.proto google/protobuf/unittest_proto3_arena.proto google/protobuf/unittest_proto3_arena_lite.proto google/protobuf/unittest_proto3_lite.proto google/protobuf/unittest_well_known_types.proto google/protobuf/util/internal/testdata/anys.proto google/protobuf/util/internal/testdata/books.proto google/protobuf/util/internal/testdata/default_value.proto google/protobuf/util/internal/testdata/default_value_test.proto google/protobuf/util/internal/testdata/field_mask.proto google/protobuf/util/internal/testdata/maps.proto google/protobuf/util/internal/testdata/oneofs.proto google/protobuf/util/internal/testdata/proto3.proto google/protobuf/util/internal/testdata/struct.proto google/protobuf/util/internal/testdata/timestamp_duration.proto google/protobuf/util/internal/testdata/wrappers.proto google/protobuf/util/json_format_proto3.proto google/protobuf/util/message_differencer_unittest.proto google/protobuf/compiler/cpp/cpp_test_large_enum_value.proto )\r\n/home/jay/2017/EMF/protobuf-3.4.0/protobuf-3.4.0/src/protoc: line 117: /home/jay/2017/EMF/protobuf-3.4.0/protobuf-3.4.0/src/.libs/lt-protoc: cannot execute binary file: Exec format error\r\n/home/jay/2017/EMF/protobuf-3.4.0/protobuf-3.4.0/src/protoc: line 117: /home/jay/2017/EMF/protobuf-3.4.0/protobuf-3.4.0/src/.libs/lt-protoc: Success\r\nmake[1]: *** [unittest_proto_middleman] Error 126\r\nmake[1]: Leaving directory `/home/jay/2017/EMF/protobuf-3.4.0/protobuf-3.4.0/src'\r\nmake: *** [check-recursive] Error 1\r\n\r\n```\r\n\r\nThanks in advance.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "io7m": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3903", "title": "Any plans to modularize (or add Automatic-Module-Name properties to) protobuf-java?", "body": "Hello.\r\n\r\nIn order to play nicely with programs/libraries that have been modularized, it would be good if `Automatic-Module-Name` properties could be added to the `protobuf-java` jar files. This would give a stable name that can be used in the `requires` directives of modules.\r\n\r\nhttp://blog.joda.org/2017/05/java-se-9-jpms-automatic-modules.html\r\n\r\n> Do not release to Maven Central a modular jar file that depends on an automatic module, unless the automatic module has an \"Automatic-Module-Name\" MANIFEST.MF entry.\r\n\r\nI'd submit a PR, but I'm not sure what module names you'd want to use. Presumably something like `com.google.protobuf.core` and `com.google.protobuf.lite`.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alalek": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3899", "title": "build[python]: avoid symbols conflicts with other loaded libprotobuf.so (Linux)", "body": "There are several libraries/tools that uses protobuf via linking with system-wide libprotobuf.so.\r\nProtobuf version mismatch between system protobuf binary and protobuf Python's extension (from [PyPi](https://pypi.python.org/pypi/protobuf/3.4.0)) usually cause a fatal crashes.\r\n\r\nSymbols conflict detection:\r\n- Fedora 26 with protobuf-devel package installed (protobuf version is 3.2.0).\r\n- Python virtualenv with installed protobuf package (`pip install protobuf`, protobuf version is 3.4.0)\r\n- try to simulate some library/tool which loads system protobuf binary:\r\n> $ python -c 'from ctypes import *; CDLL(\"/lib64/libprotobuf.so\", mode=RTLD_GLOBAL); from google.protobuf import api_pb2'\r\n> Segmentation fault (core dumped)\r\n- `LD_PRELOAD=/lib64/libprotobuf.so` instead of `CDLL` works too\r\n\r\nCrash stack trace shows protobuf symbols:\r\n```\r\n(gdb) bt\r\n#0  std::_Hashtable<std::string, std::string, std::allocator<std::string>, std::__detail::_Identity, std::equal_to<std::string>, google::protobuf::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_deallocate_nodes (this=0x5555557b4178, __n=0x1)\r\n    at /opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/bits/hashtable.h:763\r\n#1  std::_Hashtable<std::string, std::string, std::allocator<std::string>, std::__detail::_Identity, std::equal_to<std::string>, google::protobuf::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::clear (this=0x5555557b4178)\r\n    at /opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/bits/hashtable.h:1641\r\n#2  0x00007fffeb038116 in std::unordered_set<std::string, google::protobuf::hash<std::string>, std::equal_to<std::string>, std::allocator<std::string> >::clear (this=<optimized out>)\r\n    at /opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/bits/unordered_set.h:472\r\n#3  google::protobuf::DescriptorPool::FindFileByName (this=0x55555578d3b0, name=\"\")\r\n    at google/protobuf/descriptor.cc:1327\r\n#4  0x00007fffeaff1f98 in google::protobuf::python::cdescriptor_pool::AddSerializedFile (self=0x7fffeb9cc1b8, serialized_pb=0x555555815e30)\r\n    at google/protobuf/pyext/descriptor_pool.cc:510\r\n#5  0x00007ffff7b12342 in PyEval_EvalFrameEx () from /lib64/libpython2.7.so.1.0\r\n```\r\n\r\nBut frames 0,1,2 are related to system libprotobuf.so (3.2.0, **/opt/rh/** marker or \"info source\" gdb command) and frames 3,4 are from protobuf Python extension (3.4.0).\r\nSure, these functions are not binary compatible and they can't call each other.\r\n\r\n<details>\r\n<summary>Output of LD_DEBUG=files,symbols</summary>\r\n\r\n```\r\n      1379:\tfile=/home/alalek/penv/lib/python2.7/site-packages/google/protobuf/pyext/_message.so [0];  dynamically loaded by /lib64/libpython2.7.so.1.0 [0]\r\n      1379:\tfile=/home/alalek/penv/lib/python2.7/site-packages/google/protobuf/pyext/_message.so [0];  generating link map\r\n      1379:\t  dynamic: 0x00007f796de7bba8  base: 0x00007f796da87000   size: 0x00000000003ff648\r\n      1379:\t    entry: 0x00007f796db1d190  phdr: 0x00007f796da87040  phnum:                  7\r\n      1379:\t\r\n      1379:\tsymbol=_ZTVN10__cxxabiv120__si_class_type_infoE;  lookup in file=python [0]\r\n      1379:\tsymbol=_ZTVN10__cxxabiv120__si_class_type_infoE;  lookup in file=/lib64/libpython2.7.so.1.0 [0]\r\n      1379:\tsymbol=_ZTVN10__cxxabiv120__si_class_type_infoE;  lookup in file=/lib64/libpthread.so.0 [0]\r\n      1379:\tsymbol=_ZTVN10__cxxabiv120__si_class_type_infoE;  lookup in file=/lib64/libdl.so.2 [0]\r\n      1379:\tsymbol=_ZTVN10__cxxabiv120__si_class_type_infoE;  lookup in file=/lib64/libutil.so.1 [0]\r\n      1379:\tsymbol=_ZTVN10__cxxabiv120__si_class_type_infoE;  lookup in file=/lib64/libm.so.6 [0]\r\n      1379:\tsymbol=_ZTVN10__cxxabiv120__si_class_type_infoE;  lookup in file=/lib64/libc.so.6 [0]\r\n      1379:\tsymbol=_ZTVN10__cxxabiv120__si_class_type_infoE;  lookup in file=/lib64/ld-linux-x86-64.so.2 [0]\r\n      1379:\tsymbol=_ZTVN10__cxxabiv120__si_class_type_infoE;  lookup in file=/lib64/libprotobuf.so [0]\r\n      1379:\tsymbol=_ZTVN10__cxxabiv120__si_class_type_infoE;  lookup in file=/lib64/libz.so.1 [0]\r\n      1379:\tsymbol=_ZTVN10__cxxabiv120__si_class_type_infoE;  lookup in file=/lib64/libstdc++.so.6 [0]\r\n      1379:\tsymbol=_ZTSN6google8protobuf6python20PyDescriptorDatabaseE;  lookup in file=python [0]\r\n      1379:\tsymbol=_ZTSN6google8protobuf6python20PyDescriptorDatabaseE;  lookup in file=/lib64/libpython2.7.so.1.0 [0]\r\n      1379:\tsymbol=_ZTSN6google8protobuf6python20PyDescriptorDatabaseE;  lookup in file=/lib64/libpthread.so.0 [0]\r\n      1379:\tsymbol=_ZTSN6google8protobuf6python20PyDescriptorDatabaseE;  lookup in file=/lib64/libdl.so.2 [0]\r\n      1379:\tsymbol=_ZTSN6google8protobuf6python20PyDescriptorDatabaseE;  lookup in file=/lib64/libutil.so.1 [0]\r\n      1379:\tsymbol=_ZTSN6google8protobuf6python20PyDescriptorDatabaseE;  lookup in file=/lib64/libm.so.6 [0]\r\n      1379:\tsymbol=_ZTSN6google8protobuf6python20PyDescriptorDatabaseE;  lookup in file=/lib64/libc.so.6 [0]\r\n      1379:\tsymbol=_ZTSN6google8protobuf6python20PyDescriptorDatabaseE;  lookup in file=/lib64/ld-linux-x86-64.so.2 [0]\r\n      1379:\tsymbol=_ZTSN6google8protobuf6python20PyDescriptorDatabaseE;  lookup in file=/lib64/libprotobuf.so [0]\r\n      1379:\tsymbol=_ZTSN6google8protobuf6python20PyDescriptorDatabaseE;  lookup in file=/lib64/libz.so.1 [0]\r\n      1379:\tsymbol=_ZTSN6google8protobuf6python20PyDescriptorDatabaseE;  lookup in file=/lib64/libstdc++.so.6 [0]\r\n      1379:\tsymbol=_ZTSN6google8protobuf6python20PyDescriptorDatabaseE;  lookup in file=/lib64/libgcc_s.so.1 [0]\r\n      1379:\tsymbol=_ZTSN6google8protobuf6python20PyDescriptorDatabaseE;  lookup in file=/home/alalek/penv/lib/python2.7/site-packages/google/protobuf/pyext/_message.so [0]\r\n      1379:\tsymbol=_ZTIN6google8protobuf18DescriptorDatabaseE;  lookup in file=python [0]\r\n      1379:\tsymbol=_ZTIN6google8protobuf18DescriptorDatabaseE;  lookup in file=/lib64/libpython2.7.so.1.0 [0]\r\n      1379:\tsymbol=_ZTIN6google8protobuf18DescriptorDatabaseE;  lookup in file=/lib64/libpthread.so.0 [0]\r\n      1379:\tsymbol=_ZTIN6google8protobuf18DescriptorDatabaseE;  lookup in file=/lib64/libdl.so.2 [0]\r\n      1379:\tsymbol=_ZTIN6google8protobuf18DescriptorDatabaseE;  lookup in file=/lib64/libutil.so.1 [0]\r\n      1379:\tsymbol=_ZTIN6google8protobuf18DescriptorDatabaseE;  lookup in file=/lib64/libm.so.6 [0]\r\n      1379:\tsymbol=_ZTIN6google8protobuf18DescriptorDatabaseE;  lookup in file=/lib64/libc.so.6 [0]\r\n      1379:\tsymbol=_ZTIN6google8protobuf18DescriptorDatabaseE;  lookup in file=/lib64/ld-linux-x86-64.so.2 [0]\r\n<OOPS> 1379:\tsymbol=_ZTIN6google8protobuf18DescriptorDatabaseE;  lookup in file=/lib64/libprotobuf.so [0]\r\n      1379:\tsymbol=_ZTIN6google8protobuf6python20PyDescriptorDatabaseE;  lookup in file=python [0]\r\n      1379:\tsymbol=_ZTIN6google8protobuf6python20PyDescriptorDatabaseE;  lookup in file=/lib64/libpython2.7.so.1.0 [0]\r\n... there are many OOPS cases ...\r\n```\r\n</details>\r\n\r\n---\r\n\r\nRelated SO question: https://stackoverflow.com/questions/7201667/ld-magically-overrides-statically-linked-symbols\r\n\r\nPossible solution is to isolate protobuf symbols in Python extension (assume gcc+ld on Linux):\r\n1. link Python extensions with `-Bsymbolic` linker flag\r\n2. don't export protobuf symbols by using `-fvisibility=hidden` compiler flag. But this breaks .so build.\r\n3. don't export symbols from .a files: `-exclude-libs=ALL` linker option\r\n\r\nThere are many \"magic\" crashes related to conflicts of different protobuf versions, so lets try to resolve this issue.\r\n\r\nAdditional information:\r\n- similar problem can be observed on Ubuntu\r\n- Installing the same version of Python extension (`pip install protobuf==3.2.0`) doesn't help (still SIGSEGV)\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3900", "title": "build: isolate symbols of Python extensions on Linux", "body": "to avoid conflicts with other loaded libprotobuf.so libraries.\r\n\r\nresolves #3899", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mojinxun": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3898", "title": "IMessage With Member Null Value", "body": "            var res = new ResponseModel()\r\n            {\r\n                Name = null\r\n            };\r\n            var aa = res.ToByteArray();\r\n\r\nAny solution?", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "HermanEldering": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3877", "title": "WriteDelimitedTo needs to specify format of length field", "body": "The C# documentation does not specify the format of the length field that is prepended when using the WriteDelimitedTo function. I poked around a bit in the documentation and for me it was not easy to find. For instance, it would be useful to mention here: https://developers.google.com/protocol-buffers/docs/reference/csharp/class/google/protobuf/message-extensions#class_google_1_1_protobuf_1_1_message_extensions_1a99a4de2ce4de5bc1da1e1f5c367f4c7c\r\n\r\nFrom source, I checked it is a [variable 32 bit int](https://github.com/google/protobuf/blob/ce0a53273a400369932ba788d17500336a6ecaad/csharp/src/Google.Protobuf/MessageExtensions.cs#L157). Which is actually not what I expected.\r\n\r\nOn a side note it would be useful to offer some way to specify the size of the length field. In my case I have instances where I need to write fixed length fields of 32 or 16 bit int.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "iwaseyusuke": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3871", "title": "Escape argument/attribute name collides Python reserved keyword", "body": "The similar to https://github.com/google/protobuf/issues/65;\r\n\r\nI asked the same on \"grpc/grpc\" project and they recommended me to request on \"protobuf\" project side; https://github.com/grpc/grpc/issues/13318\r\n\r\n---\r\n\r\nVersion of protoc and plugins;\r\n```\r\n$ protoc --version\r\nlibprotoc 3.4.0\r\n$ pip show grpcio\r\nName: grpcio\r\nVersion: 1.7.0\r\n...(snip)...\r\n $ pip show grpcio-tools\r\nName: grpcio-tools\r\nVersion: 1.7.0\r\n...(snip)...\r\n```\r\n\r\nOS: Linux Ubuntu 16.04 LTS\r\n \r\nRuntime and compiler:\r\n ```bash\r\n$ python --version\r\nPython 3.5.2\r\n$ gcc --version\r\ngcc (Ubuntu 5.4.0-6ubuntu1~16.04.5) 5.4.0 20160609\r\nCopyright (C) 2015 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n ```\r\n\r\nI'm trying to send a message from gRPC client written in Python and the message is like:\r\n```protobuf\r\nmessage TestMessage {\r\n  bool global = 1;\r\n  uint32 as = 2;\r\n}\r\n```\r\n\r\nThe gRPC server is written in Go, `global` and `as` does not collides the reserved keywords, but on Python, these variable name clash with reserved keywords.\r\nThen, I couldn't create the above message with keyword arguments and couldn't access these attributes:\r\n\r\n```python\r\n# couldn't create message with keyword arguments\r\nmsg = xxx_pb2.TestMessage(\r\n    global=True,  # Here raises syntax error\r\n    as=100,\r\n)\r\n# required to pass arguments like\r\nkwargs = {\r\n    'global': True,\r\n    'as': 100,\r\n}\r\nmsg= xxx_pb2.TestMessage(**kwargs)\r\n\r\n# Also couldn't access these attributes\r\nprint(msg.global)  # Here raises syntax error\r\n# required to use getattr() like\r\nprint(getattr(msg, 'global'))\r\n```\r\n\r\n### Request\r\n\r\n[pep8](https://www.python.org/dev/peps/pep-0008/#function-and-method-arguments) says \"If a function argument's name clashes with a reserved keyword, it is generally better to append a single trailing underscore\", so I want to pass arguments appending \"_\" like:\r\n```python\r\nmsg = xxx_pb2.TestMessage(\r\n    global_=True,\r\n    as_=100,\r\n)\r\n```\r\nand also access attribute like:\r\n```python\r\nprint(msg.global_)\r\n```\r\n\r\nWhat do think about it? Does anyone know better workaround?\r\n\r\n---\r\n\r\nThe answer of \"#65\" recommended to rename the field, but \".proto\" is defined on the server side (Go implemented and out of our project), so difficult to rename it.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "khenaidoo": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3870", "title": "Different protobuf 3.3.0 container type returned in Ubuntu vs Mac environment", "body": "Hello,\r\n\r\nI have the following message definition:\r\n\r\nmessage Port { ... }\r\nmessage Device { repeated Port ports = 1; ...}\r\n\r\nWhen I get a response with the above data, ports is defined as a google.protobuf.pyext._message.RepeatedCompositeContainer on Ubuntu 16 environment while on the Mac OS it is defined as a RepeatedCompositeFieldContainer.   Parsing the data becomes problematic because in my python program on ubuntu i can import google.protobuf.pyext._message.RepeatedCompositeContainer while on Mac Os the google.protobuf.pyext._message module does not exist.  Looking in my virtual environment, on the mac, the _message.so library is missing from the venv-darwin/lib/python2.7/site-packages/google/protobuf/pyext directory.\r\n\r\nI am using protobuf 3.3.0 on both ubuntu and mac os.   Since my program needs to run in both environment then how to I import the RepeatedCompositeContainer such that it is consistent on both Mac and Ubuntu.  If they are in different modules that's alright as I can do a try/except on the import instructions in my file.\r\n\r\nPlease advise.\r\nThanks\r\nKhen\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zamibaru": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3866", "title": "Repeated Enum Values generate segmentation fault", "body": "Hi\r\n\r\nI am trying to generate a binary file and I have to use a repetead field with ENUM.\r\nWhat I am doing:\r\nOption one:\r\n\r\n```\r\n$weekDay = new WeekDay();\r\n$setWeekday->setWeekday(array(\\poi\\common\\Weekday::Monday,\\poi\\common\\Weekday::Tuesday,\\poi\\common\\Weekday::Wednesday,\\poi\\common\\Weekday::Thursday,\\poi\\common\\Weekday::Friday));\r\n```\r\n\r\nOption two:\r\n```\r\n$weekDay = new WeekDay();\r\n$weekdayArr = $weekDay->getWeekday();   \r\n$arrWeek = array(\\poi\\common\\Weekday::Monday,\\poi\\common\\Weekday::Tuesday,\\poi\\common\\Weekday::Wednesday,\\poi\\common\\Weekday::Thursday,\\poi\\common\\Weekday::Friday) ; `\r\n foreach ($arrWeek as  $value) \r\n{\r\n      $weekdayArr[] =  $value;\r\n}\r\n```\r\n\r\nThe problem:\r\n\r\nThis works well if I create a file with 400-500 messages but if i try to add more then 500 messages in the file I will get  \r\n`segmentation fault` error\r\n\r\nI am a little stuck here, don't know how to solve this. Any direction would be much appreciated.\r\n\r\n**Later Edit:**\r\nI managed to find a workaround. If I disable the garbage collector in my PHP script the problem goes away. \r\n\r\nIn this case I presume that the problem is generated when the repeated field is collected by garbage collector.\r\n\r\nHope this helps. I am looking forward for a solution that does not imply totally disabling the garbage collector.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rsebille": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3857", "title": "[Python] Incoherent behavior with and without the C++ implementation for bool fields", "body": "Hello,\r\n\r\nWhen reverting back from using the C++ implementation with found a discrepancy.\r\nIf the library is build with the flag then the value is properly cast, but without the flag there is no cast happening.\r\n\r\nWith the C++ implementation:\r\n```\r\nIn [1]: from test import my_message_pb2\r\n\r\nIn [2]: msg = my_message_pb2.Message()\r\n\r\nIn [3]: msg.bool_field\r\nOut[3]: False\r\n\r\nIn [4]: msg.bool_field = 1\r\n\r\nIn [5]: msg.bool_field\r\nOut[5]: True\r\n```\r\n\r\nWithout the implementation:\r\n```\r\nIn [1]: from test import my_message_pb2\r\n\r\nIn [2]: msg = my_message_pb2.Message()\r\n\r\nIn [3]: msg.bool_field\r\nOut[3]: False\r\n\r\nIn [4]: msg.bool_field = 1\r\n\r\nIn [5]: msg.bool_value\r\nOut[5]: 1\r\n```\r\n\r\nThe C++ implementation's behavior is the right and expected one but the Python implementation should behave identically.\r\n\r\nWhat you're take on this?", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "francislavoie": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3855", "title": "PHP: Notice when serializing to JSON, output stream doesn't have enough buffer", "body": "```\r\nPHP Notice:  Output stream doesn't have enough buffer. in /vendor/google/protobuf/php/src/Google/Protobuf/Internal/CodedOutputStream.php on line 92\r\n```\r\n\r\nI'm serializing some binary data, i.e. result of `hash('sha256', $data, true)`. I think the `jsonByteSize()` helper might not be taking into account the translation to base64. That's my best guess. \r\n\r\nMy `.proto` definition looks like this (where `Type` is an enum):\r\n\r\n```proto\r\nmessage List {\r\n    uint32 version = 1;\r\n    repeated Pair data = 2;\r\n}\r\n\r\nmessage Pair {\r\n    Type type = 1;\r\n    bytes hash = 2;\r\n}\r\n```\r\n\r\nI fill this list up with a bunch of pairs, where the hashes are just `hash('sha256', $data, true)`, so 32 raw bytes, then just doing `echo $list->serializeToJsonString();` gets me the above notice.\r\n\r\nThe printed JSON is invalid as well, because the last hash being written into the JSON is just missing. Not even an empty string. The following is the ending portion of the JSON.\r\n\r\n[...]`,\"hash\":\"Fo+\\/hPIjMw0MPhZHPNuCbcY61skNaXD6WrY8Fb7NApk=\"},{\"type\":\"THREE\",\"hash\":}]}`\r\n\r\nAs you can see there's just a colon with no value.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "calhamdower": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3852", "title": "protobuf 3.4 fails to deserialise StringValue (retains length in deserialized string)", "body": "When utilizing GRPC and sending a StringValue message inside a map(string, any) the StringValue result contains the length as a prefix to the resultant string.\r\n\r\nThe problem here is something to do with the FromString function of the compiled protobuf. \r\n\r\n found this issue when utilizing TensorflowServing. Using the bazel built python protos to deserialize these grpc messages works fine. \r\nWith the same server (same recieved message, as I checked the code proto binary) utilizing the pip package protobuf: the FromString function adds the length to the \r\n\r\nRaw Protobuf:\r\n`\\n\\x0b\\n\\x05mnist\\x12\\x02\\x08\\x01\\x12\\xaa\\x03\\n\\x16preprocessing_settings\\x12\\x8f\\x03\\n/type.googleapis.com/google.protobuf.StringValue\\x12\\xdb\\x02\\n\\xd8\\x02some crazyy lines....`\r\n\r\nFromString good:\r\n```\r\nmodel_spec {\r\n  name: \"mnist\"\r\n  version {\r\n    value: 1\r\n  }\r\n}\r\nmetadata {\r\n  key: \"preprocessing_settings\"\r\n  value {\r\n    [type.googleapis.com/google.protobuf.StringValue] {\r\n      value: \"some crazyy lines\r\n```\r\nFromString bad: \r\n```\r\nmodel_spec {\r\n  name: \"mnist\"\r\n  version {\r\n    value: 1\r\n  }\r\n}\r\nmetadata {\r\n  key: \"preprocessing_settings\"\r\n  value {\r\n    [type.googleapis.com/google.protobuf.StringValue] {\r\n      value: \"/n/330/02some crazyy lines\r\n```\r\n\r\nWhat seems to be happening is that the compiled protobuf for the messages is using a different version of _descriptor. The pip related version is not mapping in decoders properly (but I don't really know)\r\n\r\nThe version of protobuf that bazel pulls causes the compiled message to have decoder tags, whereas the pip pulled protobuf does not. \r\n\r\nI do not know what version of protobuf tensorflow pulls as it pulls it from some bazel mirror??", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MrSaints": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3848", "title": "[Python] Preserving dictionary order w/ json_format.ParseDict", "body": "When using `json_format.ParseDict(.., Value())`, the original order of a dictionary (even an `OrderedDict`) does not appear to be preserved. Calling `json_format.MessageToJson(..)` on the resulting protobuf message will return a result with undeterministic ordering. Calling `ListFields()` on the output returns the keys, and values in alphabetical order.\r\n\r\nI was wondering if there was a way to \"parse\" a generic dictionary into a `Value` while preserving the order? \r\n\r\n> Wire format ordering and map iteration ordering of map values is undefined, so you cannot rely on your map items being in a particular order.\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "FX-HAO": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3846", "title": "[Ruby] Google::Protobuf::Struct should be able to access a missing key", "body": "```ruby\r\nstruct = Google::Protobuf::Struct.new\r\nassert_equal(nil, struct['nonexistence']) # throw NoMethodError: undefined method `to_ruby' for nil:NilClass, expect `nil`\r\n```\r\n\r\nI am willing to open a PR to fix it.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/3807", "title": "[Ruby] google/protobuf/well_known_types is not included automatically", "body": "```ruby\r\nirb> Google::Protobuf::Struct.from_hash({})\r\nNoMethodError: undefined method `from_hash' for Google::Protobuf::Struct:Class\r\n\tfrom /Users/haofuxin/shundaojia/shundao-backend/app/publishers/publisher/payment.rb:24:in `publish'\r\n\tfrom /Users/haofuxin/shundaojia/shundao-backend/app/services/payment_service.rb:11:in `publish_event'\r\n\tfrom (irb):3\r\n\tfrom /Users/haofuxin/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/railties-4.2.8/lib/rails/commands/console.rb:110:in `start'\r\n\tfrom /Users/haofuxin/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/railties-4.2.8/lib/rails/commands/console.rb:9:in `start'\r\n\tfrom /Users/haofuxin/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/railties-4.2.8/lib/rails/commands/commands_tasks.rb:68:in `console'\r\n\tfrom /Users/haofuxin/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/railties-4.2.8/lib/rails/commands/commands_tasks.rb:39:in `run_command!'\r\n\tfrom /Users/haofuxin/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/railties-4.2.8/lib/rails/commands.rb:17:in `<top (required)>'\r\n\tfrom /Users/haofuxin/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/polyglot-0.3.5/lib/polyglot.rb:65:in `require'\r\n\tfrom /Users/haofuxin/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/polyglot-0.3.5/lib/polyglot.rb:65:in `require'\r\n\tfrom /Users/haofuxin/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-4.2.8/lib/active_support/dependencies.rb:274:in `block in require'\r\n\tfrom /Users/haofuxin/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-4.2.8/lib/active_support/dependencies.rb:240:in `load_dependency'\r\n\tfrom /Users/haofuxin/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-4.2.8/lib/active_support/dependencies.rb:274:in `require'\r\n\tfrom /Users/haofuxin/shundaojia/shundao-backend/bin/rails:9:in `<top (required)>'\r\n\tfrom /Users/haofuxin/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-4.2.8/lib/active_support/dependencies.rb:268:in `load'\r\n\tfrom /Users/haofuxin/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-4.2.8/lib/active_support/dependencies.rb:268:in `block in load'\r\n\tfrom /Users/haofuxin/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-4.2.8/lib/active_support/dependencies.rb:240:in `load_dependency'\r\n\tfrom /Users/haofuxin/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-4.2.8/lib/active_support/dependencies.rb:268:in `load'\r\n\tfrom /Users/haofuxin/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/spring-2.0.2/lib/spring/commands/rails.rb:6:in `call'\r\n\tfrom /Users/haofuxin/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/spring-2.0.2/lib/spring/command_wrapper.rb:38:in `call'\r\n\tfrom /Users/haofuxin/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/spring-2.0.2/lib/spring/application.rb:201:in `block in serve'\r\n\tfrom /Users/haofuxin/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/spring-2.0.2/lib/spring/application.rb:171:in `fork'\r\n\tfrom /Users/haofuxin/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/spring-2.0.2/lib/spring/application.rb:171:in `serve'\r\n\tfrom /Users/haofuxin/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/spring-2.0.2/lib/spring/application.rb:141:in `block in run'\r\n\tfrom /Users/haofuxin/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/spring-2.0.2/lib/spring/application.rb:135:in `loop'\r\n\tfrom /Users/haofuxin/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/spring-2.0.2/lib/spring/application.rb:135:in `run'\r\n\tfrom /Users/haofuxin/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/spring-2.0.2/lib/spring/application/boot.rb:19:in `<top (required)>'\r\n\tfrom /Users/haofuxin/.rbenv/versions/2.3.1/lib/ruby/2.3.0/rubygems/core_ext/kernel_require.rb:55:in `require'\r\n\tfrom /Users/haofuxin/.rbenv/versions/2.3.1/lib/ruby/2.3.0/rubygems/core_ext/kernel_require.rb:55:in `require'\r\n\tfrom -e:1:in `<main>'\r\n\r\nirb> require 'google/protobuf/well_known_types'\r\n=> true\r\nirb> Google::Protobuf::Struct.from_hash({})\r\n=> <Google::Protobuf::Struct: fields: {}>\r\n```\r\n\r\nAnd need more documentation or where can i find it?\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3847", "title": "Google::Protobuf::Struct can access a missing key (#3846)", "body": "#3846 ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "guyuqi": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3844", "title": "No Protoc binaries for support Arm64 on Maven Central", "body": "Hi, \r\nWe want to use 'protoc' to compile the '.proto' file in the java project with a maven plugin for Arm64 platform.\r\nUnfortunately, there are no Arm64 binaries on https://repo.maven.apache.org/maven2/com/google/protobuf/protoc/.\r\n\r\nIt is noted that the protoc binaries are built and deployed to Maven Central by the kind folks at Google.\r\nCould you kindly please include Arm64 binaries in the next release?\r\n\r\nThanks a lot!\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3844/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kkm000": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3843", "title": "Discuss adding an option to preserve file names in C# codegen", "body": "This is related to https://github.com/grpc/grpc/pull/13207. When automating the build process, it is necessary to know the exact names of the files generated by protoc. In the build process I am trying to introduce for .NET Core and Visual Studio, the generated outputs files are considered transient (just like .o files would be for a C++ compilation). The problem is the filenames need to be known ahead to the build process, and they are currently camelized (and, well, deunderscored?..)\r\n\r\nWhat I would like to do is add an option `preserve_filename` for the C# codegen plugins (both proto and gRPC) so that the generated file has the same name as the input, e. g. `one_two.proto` would produce `one_two.cs` (and `one_twoGrpc.cs` in the gRPC codegen). Are there any issues with that? Would such a change be acceptable?\r\n\r\nOn the same note, the function `GetOutputFile` in `csharp_names.h` would have to change. It is marked `LIBPROTOC_EXPORT` but is not actually used by gRPC codegen. Would it be ok to change it? Un-export and move the declaration to `csharp_helpers.h`? Or keep the existing API for compatibility with something else? I am thinking of passing it a const pointer to `struct Options` instead of the 3 last parameters, as it contains all codegen plugin options already (and will need more).\r\n\r\nIf the decision is to go ahead with this, unit tests for name generation are on me. There are currently none at all, and I would not start changing anything without them in place first.\r\n\r\n/cc @jtattermusch, @jskeet ", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3959", "title": "Allow --dependency_out for multiple input files", "body": "Ref. https://github.com/google/protobuf/issues/3843#issuecomment-346173274\r\n\r\n@xfxyjwf, @TeBoring, can you think of any downside of enabling this?\r\n\r\n/cc @jtattermusch @jskeet", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mirzazadeh": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3842", "title": "[JS] Getter function for singular message fields", "body": "Getter function for singular message fields in javascript returns \"undefined\" when the field is not set. This is not consistent with the behavior of getter function for such fields in all other languages.\r\n\r\nThis is very inconvenient and is a source of bugs because programmer has always check for undefined values for nested messages (imagine multi levels of nested submessages). It can be fixed by introducing new getter  function like msg.GetFooOrDefault().\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dzen": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3838", "title": "python : segfault in PyImport_Cleanup", "body": "Hello,\r\nwe're currently triggering a segfault in protobuf with python 3.4.2 : \r\n\r\nprotobuf is embedded in uwsgi which calls PyImport_Cleanup (https://github.com/python/cpython/blob/dbb126103e1c4f2818e0dfc7aa4a689d86565e7a/Python/import.c#L398)\r\nThe code segfaults when dealloc'ing in protobuf : `google::protobuf::python::descriptor::Dealloc`\r\n\r\nAny help is appreciated on this.\r\n\r\nHere is the traceback : \r\n```\r\n#1  0x00007fc58b8ffb29 in __run_exit_handlers (status=1, listp=0x7fc58bc6d5a8 <__exit_funcs>, \r\n    run_list_atexit=run_list_atexit@entry=true) at exit.c:82\r\n#2  0x00007fc58b8ffb75 in __GI_exit (status=<optimized out>) at exit.c:104\r\n#3  0x000000000042210f in uwsgi_exit ()\r\n#4  0x0000000000469e51 in uwsgi_segfault ()\r\n#5  <signal handler called>\r\n#6  0x00007fc583437586 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#7  0x00007fc583437a6d in std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#8  0x00007fc582c92af1 in _M_erase_aux (__position=..., \r\n    this=0x7fc582ff5160 <google::protobuf::python::interned_descriptors>)\r\n    at /opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/bits/stl_tree.h:1745\r\n#9  erase (__position=..., this=0x7fc582ff5160 <google::protobuf::python::interned_descriptors>)\r\n    at /opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/bits/stl_tree.h:830\r\n#10 _M_erase_aux (__last=..., __first=..., \r\n    this=0x7fc582ff5160 <google::protobuf::python::interned_descriptors>)\r\n    at /opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/bits/stl_tree.h:1760\r\n#11 erase (__last=..., __first=..., \r\n    this=0x7fc582ff5160 <google::protobuf::python::interned_descriptors>)\r\n    at /opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/bits/stl_tree.h:848\r\n#12 erase (__x=@0x7fc57277cd60: 0x2df5da0, \r\n    this=0x7fc582ff5160 <google::protobuf::python::interned_descriptors>)\r\n    at /opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/bits/stl_tree.h:1771\r\n#13 erase (__x=@0x7fc57277cd60: 0x2df5da0, \r\n    this=0x7fc582ff5160 <google::protobuf::python::interned_descriptors>)\r\n    at /opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/bits/stl_map.h:727\r\n#14 google::protobuf::python::descriptor::Dealloc (self=0x7fc57277cd50)\r\n    at google/protobuf/pyext/descriptor.cc:370\r\n#15 0x00007fc58bf522b7 in free_keys_object (keys=<optimized out>) at ../Objects/dictobject.c:369\r\n#16 PyDict_Clear (op=0x2d5f450) at ../Objects/dictobject.c:1282\r\n#17 0x00007fc58bf522e9 in dict_tp_clear.lto_priv.414 (op=<optimized out>)\r\n    at ../Objects/dictobject.c:2483\r\n#18 0x00007fc58c0bd7c7 in delete_garbage (collectable=collectable@entry=0x7ffd01875850, \r\n    old=old@entry=0x7fc58c4a3c80 <generations+64>) at ../Modules/gcmodule.c:866\r\n#19 0x00007fc58c0bf18c in collect (generation=2, n_collected=0x0, n_uncollectable=0x0, nofail=1)\r\n    at ../Modules/gcmodule.c:1032\r\n#20 _PyGC_CollectNoFail () at ../Modules/gcmodule.c:1638\r\n#21 0x00007fc58c039739 in PyImport_Cleanup () at ../Python/import.c:483\r\n#22 0x00007fc58bfed4e4 in Py_Finalize () at ../Python/pythonrun.c:616\r\n#23 0x0000000000466d31 in uwsgi_plugins_atexit ()\r\n#24 0x00007fc58b8ffb29 in __run_exit_handlers (status=0, listp=0x7fc58bc6d5a8 <__exit_funcs>, \r\n    run_list_atexit=run_list_atexit@entry=true) at exit.c:82\r\n#25 0x00007fc58b8ffb75 in __GI_exit (status=<optimized out>) at exit.c:104\r\n#26 0x000000000042210f in uwsgi_exit ()\r\n#27 0x00000000004694a6 in simple_goodbye_cruel_world ()\r\n#28 0x00000000004694d8 in goodbye_cruel_world ()\r\n#29 0x0000000000422df9 in uwsgi_close_request ()\r\n#30 0x0000000000465dad in simple_loop_run ()\r\n#31 0x000000000046a0fb in uwsgi_ignition ()\r\n#32 0x000000000046e805 in uwsgi_worker_run ()\r\n#33 0x000000000046edbc in uwsgi_run ()\r\n#34 0x000000000041ef4e in main ()\r\n```\r\n\r\nHere is some debug of frame 14:\r\n```\r\n(gdb) p *self\r\n$12 = {\r\n  ob_base = {\r\n    ob_refcnt = 0, \r\n    ob_type = 0x7fc582ff11e0 <google::protobuf::python::PyFileDescriptor_Type>\r\n  }, \r\n  descriptor = 0x2df5da0, \r\n  pool = 0x7fc583b072d0\r\n}\r\n(gdb) p *(self->ob_base->ob_type )\r\n$13 = {\r\n  ob_base = {\r\n    ob_base = {\r\n      ob_refcnt = 18, \r\n      ob_type = 0x7fc58c4cd5c0 <PyType_Type>\r\n    }, \r\n    ob_size = 0\r\n  }, \r\n  tp_name = 0x7fc582d8cc90 \"google.protobuf.pyext._message.FileDescriptor\", \r\n  tp_basicsize = 40, \r\n  tp_itemsize = 0, \r\n  tp_dealloc = 0x7fc582c92c00 <google::protobuf::python::file_descriptor::Dealloc(google::protobuf::python::PyFileDescriptor*)>, \r\n  tp_print = 0x0, \r\n  tp_getattr = 0x0, \r\n  tp_setattr = 0x0, \r\n  tp_reserved = 0x0, \r\n  tp_repr = 0x7fc58c062910 <object_repr.lto_priv.253>, \r\n  tp_as_number = 0x0, \r\n  tp_as_sequence = 0x0, \r\n  tp_as_mapping = 0x0, \r\n  tp_hash = 0x7fc58bfe6d90 <_Py_HashPointer>, \r\n  tp_call = 0x0, \r\n  tp_str = 0x7fc58c057740 <object_str.lto_priv.254>, \r\n  tp_getattro = 0x7fc58bf2f420 <PyObject_GenericGetAttr>, \r\n  tp_setattro = 0x7fc58bf2f1b0 <PyObject_GenericSetAttr>, \r\n  tp_as_buffer = 0x0, \r\n  tp_flags = 790528, \r\n  tp_doc = 0x7fc582d8c763 \"A File Descriptor\", \r\n  tp_traverse = 0x0, \r\n  tp_clear = 0x0, \r\n  tp_richcompare = 0x7fc58c064470 <object_richcompare.lto_priv.255>, \r\n  tp_weaklistoffset = 0, \r\n  tp_iter = 0x0, \r\n  tp_iternext = 0x0, \r\n  tp_methods = 0x7fc582ff2020 <google::protobuf::python::file_descriptor::Methods>, \r\n  tp_members = 0x0, \r\n  tp_getset = 0x7fc582ff2080 <google::protobuf::python::file_descriptor::Getters>, \r\n  tp_base = 0x7fc582ff19e0 <google::protobuf::python::descriptor::PyBaseDescriptor_Type>, \r\n  tp_dict = 0x7fc583b05748, \r\n  tp_descr_get = 0x0, \r\n  tp_descr_set = 0x0, \r\n  tp_dictoffset = 0, \r\n  tp_init = 0x7fc58c062ea0 <object_init.lto_priv.256>, \r\n  tp_alloc = 0x7fc58c065420 <PyType_GenericAlloc>, \r\n  tp_new = 0x0, \r\n  tp_free = 0x7fc58bf1fdf0 <PyObject_Free>, \r\n  tp_is_gc = 0x0, \r\n  tp_bases = 0x7fc583af1828, \r\n  tp_mro = 0x7fc583b0a2d0, \r\n  tp_cache = 0x0, \r\n  tp_subclasses = 0x0, \r\n  tp_weaklist = 0x7fc583b081d8, \r\n  tp_del = 0x0, \r\n  tp_version_tag = 48170, \r\n  tp_finalize = 0x0\r\n}\r\n\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "neurojab": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3823", "title": "[JS] proto.google.protobuf.StringValue does not work correctly.", "body": "If you set a value using StringValue, then call getValue() you will only get the first character.  \r\n\r\nExample test:\r\n\r\nit(\u2018should Serialize and deserialize correctly\u2019,\r\n        function() {\r\n            let mystr = \u2018AAAD12324\u2019;\r\n            let protoValue = new pport.wrappers_pb.StringValue(mystr);\r\n            let mystrFromProto = protoValue.getValue();\r\n            console.log(mystrFromProto);\r\n            assert(mystr === mystrFromProto);\r\n        });\r\n\r\nConsole.log Output:  \r\nA\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "iskiselev": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3820", "title": "Add props file to Google.Protobuf.Tool", "body": "It is hard to integrate protoc from Google.Protobuf.Tool to MsBuild scripts, as it hard to resolve actual path to protoc. It could be greatly simplify, if package will contain file build/Google.Protobuf.Tool.props with text like:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project ToolsVersion=\"12.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <PropertyGroup>\r\n    <protoc64>$(MSBuildThisFileDirectory)..\\tools\\windows_x64\\protoc.exe</protoc64>\r\n    <protoc86>$(MSBuildThisFileDirectory)..\\tools\\windows_x64\\protoc.exe</protoc86>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\nWith it call to protoc from MsBuild file will be possible with `$(protoc64)` ms-build expression.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3820/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jhump": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3819", "title": "protoc produces SourceCodeInfo that references uninterpreted options, which are not present", "body": "When protoc produces `SourceCodeInfo` for a file descriptor, all details related to options are attributed (according to the `path` field) to uninterpreted options. There is no way, however, for client code to actually map uninterpreted options to the actual options. During linking, protoc updates the options message and then *discards* the uninterpreted versions. So the path refers to absent elements of the descriptor.\r\n\r\nThis makes it effectively impossible to extract, for example, comments associated with options. Another task that *seems* like it should be possible is to reconstruct a proto source file from a descriptor that includes source code info (with the understanding that certain things, like trailing comments, cannot be preserved in the descriptor). But the way options are handled in source code info further reduces the fidelity that is possible.\r\n\r\nPossible approaches to solve:\r\n\r\n1. During linking, the source code info could be updated so that the info for options is actually attributed to the options (e.g. references proper option field numbers, or extension numbers for custom options). For options that define values nested deep inside of options that are messages, the path could contain additional elements that pinpoint exactly the field that is being set. This would lose fidelity since the current representation allows attribution of source code location and comments to option names (even name parts, when the option type is itself a message) whereas this could not be preserved with the suggested transformation.\r\n\r\n2. During linking, preserve uninterpreted options in the descriptor when source code info is being included. Furthermore, add fields to the uninterpreted option (or maybe just the name part message) that provide the resolved field/extension numbers. This allows client code to discover the link between uninterpreted option source code info and the actual option values in the descriptor.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RanadheerMusham": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3816", "title": "Adding Sub Fields to a DescriptorProto.Builder.", "body": "Hi,\r\nI have recently started working protobufs, found the following tough. Could you please help me out?\r\nSample Code:\r\n```\r\nDescriptorProto.Builder builder;\r\nFieldDescriptorProto.Builder fieldBuilder = FieldDescriptorProto.newBuilder()\r\n\t\t\t\t\t.setLabel(label)\r\n\t\t\t\t\t.setType(type)\r\n\t\t\t\t\t.setName(\"name\")\r\n\t\t\t\t\t.setNumber(1)\r\n\t\t\t\t\t.setDefaultValue(\"value\");\r\nbuilder.addField(fieldBuilder.build());\r\n```\r\nNow let the **type** of the field is `FieldDescriptorProto.Type.TYPE_MESSAGE`. I have to add a sub field to the field built using **fieldBuilder **.\r\nThis should be possible because when I build a descriptor file for a proto file with a message having a nested message with fields. And when I debug what I found is \"A field of type message with its inner fields is added to the root message \", i.e., for the following message it is represented as  rootMessage has a field subMessage(type = Message) with two subfields B, C.\r\n\r\nSample Proto:\r\n```\r\nmessage rootMessage{\r\n      string A = 1;\r\n      message subMessage{\r\n         string B = 1;\r\n         string C = 2;\r\n      }\r\n      subMessage sub = 2;\r\n}\r\n```\r\n\r\nTypically I need something like\r\n```\r\nFieldDescriptorProto.Builder fieldBuilder = FieldDescriptorProto.newBuilder()\r\n\t\t\t\t\t.setLabel(label)\r\n\t\t\t\t\t.setType(type)\r\n\t\t\t\t\t.setName(\"name\")\r\n                                        .addField(...) // **This Part**\r\n\t\t\t\t\t.setNumber(1)\r\n\t\t\t\t\t.setDefaultValue(\"value\");\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Elyahou": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3814", "title": "[Ruby] Reload protobuf definition", "body": "I wan't to reload the protobuf definition in my ruby code when schema change.\r\n\r\nBut when I try to reload it I got this error:\r\n\r\n`RuntimeError: Unable to add defs to DescriptorPool: Symtab already has a def named 'proto.example'`\r\n\r\nTo reproduce it just run twice this code:\r\n```\r\nGoogle::Protobuf::DescriptorPool.generated_pool.build do\r\n  add_message \"proto.example\" do\r\n    optional :test, :string, 1\r\n  end\r\nend\r\n```\r\n\r\nIs there a way to clean the `generated_pool` before reloading it ?", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gvanrossum": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3803", "title": "Please allow the addition of stubs for the Python protobuf API to typeshed", "body": "In https://github.com/python/typeshed we are collecting type-checking stubs for the Python standard library and for popular third party Python packages. These stubs are used by mypy, PyCharm and Google's own pytype.\r\n\r\nWe'd like to add stubs for protobuf. Our policy is to first request permission from the original package developers, to ensure that we don't do double work or cause additional problems for them. (See https://github.com/python/typeshed#third_party for the policy.)\r\n\r\nTo give permission, just say so in this issue and we'll do the rest (unless you want to be more involved, that would be great of course).\r\n\r\nPS. I know of several projects that automatically generate stubs from protobuf specifications. Such stubs will be more useful if the protobuf base library APIs have stubs.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "blowmage": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3788", "title": "Ruby Segmentation Fault", "body": "This morning the google-cloud-ruby project had a segfault on the Travis-CI build system.\r\n\r\nSystem details:\r\n \r\n* gRPC language and version: grpc 1.6.7 (universal-darwin)\r\n* Protobuf version: google-protobuf 3.4.1.1 (universal-darwin)\r\n* Operating System: MacOS Sierra\r\n* Runtime version: ruby 2.1.9p490 (2016-03-30 revision 54437) [x86_64-darwin16.0]\r\n\r\n<details><summary>segfault details</summary>\r\n\r\n```\r\n/Users/travis/.rvm/gems/ruby-2.1.9/gems/google-protobuf-3.4.1.1-universal-darwin/lib/google/protobuf/duration_pb.rb:6: [BUG] Segmentation fault at 0x00000000000000\r\nruby 2.1.9p490 (2016-03-30 revision 54437) [x86_64-darwin16.0]\r\n\r\n-- Crash Report log information --------------------------------------------\r\n   See Crash Report log file under the one of following:\r\n     * ~/Library/Logs/CrashReporter\r\n     * /Library/Logs/CrashReporter\r\n     * ~/Library/Logs/DiagnosticReports\r\n     * /Library/Logs/DiagnosticReports\r\n   for more details.\r\n\r\n-- Control frame information -----------------------------------------------\r\nc:0041 p:---- s:0137 e:000136 CFUNC  :build\r\nc:0040 p:0025 s:0134 e:000133 TOP    /Users/travis/.rvm/gems/ruby-2.1.9/gems/google-protobuf-3.4.1.1-universal-darwin/lib/google/protobuf/duration_pb.rb:6 [FINISH]\r\nc:0039 p:---- s:0132 e:000131 CFUNC  :require\r\nc:0038 p:0015 s:0128 e:000127 TOP    /Users/travis/.rvm/gems/ruby-2.1.9/gems/google-protobuf-3.4.1.1-universal-darwin/lib/google/protobuf/well_known_types.rb:33 [FINISH]\r\nc:0037 p:---- s:0126 e:000125 CFUNC  :require\r\nc:0036 p:0039 s:0122 e:000121 TOP    /Users/travis/.rvm/gems/ruby-2.1.9/gems/google-gax-0.8.12/lib/google/gax/grpc.rb:34 [FINISH]\r\nc:0035 p:---- s:0120 e:000119 CFUNC  :require\r\nc:0034 p:0015 s:0116 e:000115 TOP    /Users/travis/.rvm/gems/ruby-2.1.9/gems/google-gax-0.8.12/lib/google/gax/errors.rb:32 [FINISH]\r\nc:0033 p:---- s:0114 e:000113 CFUNC  :require\r\nc:0032 p:0015 s:0110 e:000109 TOP    /Users/travis/.rvm/gems/ruby-2.1.9/gems/google-gax-0.8.12/lib/google/gax/api_callable.rb:32 [FINISH]\r\nc:0031 p:---- s:0108 e:000107 CFUNC  :require\r\nc:0030 p:0007 s:0104 e:000103 TOP    /Users/travis/.rvm/gems/ruby-2.1.9/gems/google-gax-0.8.12/lib/google/gax.rb:30 [FINISH]\r\nc:0029 p:---- s:0102 e:000101 CFUNC  :require\r\nc:0028 p:0023 s:0098 e:000097 TOP    /Users/travis/build/[secure]/google-cloud-ruby/google-cloud-video_intelligence/test/google/cloud/video_intelligence/ [FINISH]\r\nc:0027 p:---- s:0096 e:000095 CFUNC  :require_relative\r\nc:0026 p:0009 s:0092 e:000091 BLOCK  /Users/travis/build/[secure]/google-cloud-ruby/google-cloud-video_intelligence/Rakefile:25 [FINISH]\r\nc:0025 p:---- s:0089 e:000088 CFUNC  :each\r\nc:0024 p:0030 s:0086 e:000085 BLOCK  /Users/travis/build/[secure]/google-cloud-ruby/google-cloud-video_intelligence/Rakefile:25 [FINISH]\r\nc:0023 p:---- s:0084 e:000083 CFUNC  :call\r\nc:0022 p:0028 s:0079 e:000078 BLOCK  /Users/travis/.rvm/gems/ruby-2.1.9/gems/rake-11.3.0/lib/rake/task.rb:248 [FINISH]\r\nc:0021 p:---- s:0076 e:000075 CFUNC  :each\r\nc:0020 p:0113 s:0073 e:000072 METHOD /Users/travis/.rvm/gems/ruby-2.1.9/gems/rake-11.3.0/lib/rake/task.rb:243\r\nc:0019 p:0075 s:0069 e:000068 BLOCK  /Users/travis/.rvm/gems/ruby-2.1.9/gems/rake-11.3.0/lib/rake/task.rb:187\r\nc:0018 p:0014 s:0067 e:000066 METHOD /Users/travis/.rvm/rubies/ruby-2.1.9/lib/ruby/2.1.0/monitor.rb:211\r\nc:0017 p:0025 s:0064 e:000063 METHOD /Users/travis/.rvm/gems/ruby-2.1.9/gems/rake-11.3.0/lib/rake/task.rb:180\r\nc:0016 p:0036 s:0057 e:000056 METHOD /Users/travis/.rvm/gems/ruby-2.1.9/gems/rake-11.3.0/lib/rake/task.rb:173\r\nc:0015 p:0033 s:0052 e:000051 METHOD /Users/travis/.rvm/gems/ruby-2.1.9/gems/rake-11.3.0/lib/rake/application.rb:152\r\nc:0014 p:0009 s:0045 e:000044 BLOCK  /Users/travis/.rvm/gems/ruby-2.1.9/gems/rake-11.3.0/lib/rake/application.rb:108 [FINISH]\r\nc:0013 p:---- s:0042 e:000041 CFUNC  :each\r\nc:0012 p:0039 s:0039 e:000038 BLOCK  /Users/travis/.rvm/gems/ruby-2.1.9/gems/rake-11.3.0/lib/rake/application.rb:108\r\nc:0011 p:0025 s:0037 e:000036 METHOD /Users/travis/.rvm/gems/ruby-2.1.9/gems/rake-11.3.0/lib/rake/application.rb:117\r\nc:0010 p:0007 s:0033 e:000032 METHOD /Users/travis/.rvm/gems/ruby-2.1.9/gems/rake-11.3.0/lib/rake/application.rb:102\r\nc:0009 p:0019 s:0030 e:000029 BLOCK  /Users/travis/.rvm/gems/ruby-2.1.9/gems/rake-11.3.0/lib/rake/application.rb:80\r\nc:0008 p:0006 s:0028 e:000027 METHOD /Users/travis/.rvm/gems/ruby-2.1.9/gems/rake-11.3.0/lib/rake/application.rb:178\r\nc:0007 p:0007 s:0024 e:000023 METHOD /Users/travis/.rvm/gems/ruby-2.1.9/gems/rake-11.3.0/lib/rake/application.rb:77\r\nc:0006 p:0021 s:0021 e:000020 TOP    /Users/travis/.rvm/gems/ruby-2.1.9/gems/rake-11.3.0/exe/rake:27 [FINISH]\r\nc:0005 p:---- s:0019 e:000018 CFUNC  :load\r\nc:0004 p:0140 s:0015 E:000fa8 EVAL   /Users/travis/.rvm/gems/ruby-2.1.9/bin/rake:23 [FINISH]\r\nc:0003 p:---- s:0011 e:000010 CFUNC  :eval\r\nc:0002 p:0118 s:0005 E:0022c0 EVAL   /Users/travis/.rvm/gems/ruby-2.1.9/bin/ruby_executable_hooks:15 [FINISH]\r\nc:0001 p:0000 s:0002 E:001768 TOP    [FINISH]\r\n\r\n/Users/travis/.rvm/gems/ruby-2.1.9/bin/ruby_executable_hooks:15:in `<main>'\r\n/Users/travis/.rvm/gems/ruby-2.1.9/bin/ruby_executable_hooks:15:in `eval'\r\n/Users/travis/.rvm/gems/ruby-2.1.9/bin/rake:23:in `<main>'\r\n/Users/travis/.rvm/gems/ruby-2.1.9/bin/rake:23:in `load'\r\n/Users/travis/.rvm/gems/ruby-2.1.9/gems/rake-11.3.0/exe/rake:27:in `<top (required)>'\r\n/Users/travis/.rvm/gems/ruby-2.1.9/gems/rake-11.3.0/lib/rake/application.rb:77:in `run'\r\n/Users/travis/.rvm/gems/ruby-2.1.9/gems/rake-11.3.0/lib/rake/application.rb:178:in `standard_exception_handling'\r\n/Users/travis/.rvm/gems/ruby-2.1.9/gems/rake-11.3.0/lib/rake/application.rb:80:in `block in run'\r\n/Users/travis/.rvm/gems/ruby-2.1.9/gems/rake-11.3.0/lib/rake/applica/Users/travis/.travis/job_stages: line 166: shell_session_update: command not found\r\n```\r\n\r\n</details>\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/3771", "title": "Ruby Segmentation Fault", "body": "This afternoon the google-cloud-ruby project had a segfault on a [CircleCI build](https://circleci.com/gh/GoogleCloudPlatform/google-cloud-ruby/2539#tests/containers/0).\r\n\r\nSystem details:\r\n \r\n* gRPC language and version: grpc 1.6.6 (x86_64-linux)\r\n* Protobuf version: google-protobuf 3.4.1.1 (x86_64-linux)\r\n* Runtime version: ruby 2.4.0p0 (2016-12-24 revision 57164) [x86_64-linux]\r\n* Operating System: Linux\r\n\r\n<details><summary>segfault details</summary>\r\n\r\n```\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/googleapis-common-protos-types-1.0.0/lib/google/api/annotations_pb.rb:7: [BUG] Segmentation fault at 0x007f762b2f0350\r\nruby 2.4.0p0 (2016-12-24 revision 57164) [x86_64-linux]\r\n\r\n-- Control frame information -----------------------------------------------\r\nc:0057 p:---- s:0272 e:000271 CFUNC  :build\r\nc:0056 p:0038 s:0268 e:000267 TOP    /opt/circleci/.rvm/gems/ruby-2.4.0/gems/googleapis-common-protos-types-1.0.0/lib/google/api/annotations_pb.rb:7 [FINISH]\r\nc:0055 p:---- s:0265 e:000264 CFUNC  :require\r\nc:0054 p:0017 s:0260 e:000259 TOP    /home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/lib/google/devtools/clouderrorreporting/v1beta1/error_group_service [FINISH]\r\nc:0053 p:---- s:0257 e:000256 CFUNC  :require\r\nc:0052 p:0035 s:0252 e:000251 TOP    /home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/lib/google/cloud/error_reporting/v1beta1/error_group_service_client [FINISH]\r\nc:0051 p:---- s:0249 e:000248 CFUNC  :require\r\nc:0050 p:0008 s:0244 e:000243 TOP    /home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/lib/google/cloud/error_reporting/v1beta1.rb:17 [FINISH]\r\nc:0049 p:---- s:0241 e:000240 CFUNC  :require\r\nc:0048 p:0026 s:0236 e:000235 TOP    /home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/lib/google/cloud/error_reporting/service.rb:18 [FINISH]\r\nc:0047 p:---- s:0233 e:000232 CFUNC  :require\r\nc:0046 p:0026 s:0228 e:000227 TOP    /home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/lib/google/cloud/error_reporting/project.rb:18 [FINISH]\r\nc:0045 p:---- s:0225 e:000224 CFUNC  :require\r\nc:0044 p:0026 s:0220 e:000219 TOP    /home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/lib/google/cloud/error_reporting.rb:18 [FINISH]\r\nc:0043 p:---- s:0217 e:000216 CFUNC  :require\r\nc:0042 p:0053 s:0212 e:000211 TOP    /home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/test/helper.rb:20 [FINISH]\r\nc:0041 p:---- s:0209 e:000208 CFUNC  :require\r\nc:0040 p:0008 s:0204 e:000203 TOP    /home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/test/google-cloud-error_reporting_test.rb:16 [FINISH]\r\nc:0039 p:---- s:0201 e:000200 CFUNC  :require_relative\r\nc:0038 p:0010 s:0196 e:000195 BLOCK  /home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/Rakefile:25 [FINISH]\r\nc:0037 p:---- s:0192 e:000191 CFUNC  :each\r\nc:0036 p:0032 s:0188 e:000187 BLOCK  /home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/Rakefile:25 [FINISH]\r\nc:0035 p:0030 s:0185 e:000184 BLOCK  /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/task.rb:248 [FINISH]\r\nc:0034 p:---- s:0181 e:000180 CFUNC  :each\r\nc:0033 p:0127 s:0177 e:000176 METHOD /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/task.rb:243\r\nc:0032 p:0085 s:0172 e:000171 BLOCK  /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/task.rb:187\r\nc:0031 p:0015 s:0169 e:000168 METHOD /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/monitor.rb:214\r\nc:0030 p:0028 s:0165 e:000164 METHOD /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/task.rb:180\r\nc:0029 p:0039 s:0157 e:000156 METHOD /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/task.rb:173\r\nc:0028 p:0038 s:0151 e:000150 METHOD /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/application.rb:152\r\nc:0027 p:0010 s:0143 e:000142 BLOCK  /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/application.rb:108 [FINISH]\r\nc:0026 p:---- s:0139 e:000138 CFUNC  :each\r\nc:0025 p:0050 s:0135 e:000134 BLOCK  /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/application.rb:108\r\nc:0024 p:0030 s:0132 e:000131 METHOD /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/application.rb:117\r\nc:0023 p:0009 s:0127 e:000126 METHOD /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/application.rb:102\r\nc:0022 p:0022 s:0123 e:000122 BLOCK  /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/application.rb:80\r\nc:0021 p:0006 s:0120 e:000119 METHOD /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/application.rb:178\r\nc:0020 p:0009 s:0115 e:000114 METHOD /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/application.rb:77\r\nc:0019 p:0024 s:0111 e:000110 TOP    /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/exe/rake:27 [FINISH]\r\nc:0018 p:---- s:0108 e:000107 CFUNC  :load\r\nc:0017 p:0152 s:0103 e:000102 TOP    /opt/circleci/.rvm/gems/ruby-2.4.0/bin/rake:23 [FINISH]\r\nc:0016 p:---- s:0098 e:000097 CFUNC  :load\r\nc:0015 p:0170 s:0093 e:000092 METHOD /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/cli/exec.rb:74\r\nc:0014 p:0089 s:0083 e:000082 METHOD /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/cli/exec.rb:27\r\nc:0013 p:0032 s:0078 e:000077 METHOD /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/cli.rb:362\r\nc:0012 p:0078 s:0073 e:000072 METHOD /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/vendor/thor/lib/thor/command.rb:27\r\nc:0011 p:0058 s:0065 e:000064 METHOD /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/vendor/thor/lib/thor/invocation.rb:126\r\nc:0010 p:0305 s:0058 e:000057 METHOD /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/vendor/thor/lib/thor.rb:387\r\nc:0009 p:0012 s:0045 e:000044 METHOD /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/cli.rb:22\r\nc:0008 p:0070 s:0040 e:000039 METHOD /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/vendor/thor/lib/thor/base.rb:466\r\nc:0007 p:0012 s:0033 e:000032 METHOD /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/cli.rb:13\r\nc:0006 p:0090 s:0027 e:000026 BLOCK  /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/exe/bundle:30\r\nc:0005 p:0006 s:0021 e:000020 METHOD /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/friendly_errors.rb:121\r\nc:0004 p:0056 s:0016 E:0026a0 TOP    /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/exe/bundle:22 [FINISH]\r\nc:0003 p:---- s:0013 e:000012 CFUNC  :load\r\nc:0002 p:0152 s:0008 E:000b40 EVAL   /opt/circleci/.rvm/gems/ruby-2.4.0/bin/bundle:23 [FINISH]\r\nc:0001 p:0000 s:0003 E:000ae0 (none) [FINISH]\r\n\r\n-- Ruby level backtrace information ----------------------------------------\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/bin/bundle:23:in `<main>'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/bin/bundle:23:in `load'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/exe/bundle:22:in `<top (required)>'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/friendly_errors.rb:121:in `with_friendly_errors'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/exe/bundle:30:in `block in <top (required)>'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/cli.rb:13:in `start'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/vendor/thor/lib/thor/base.rb:466:in `start'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/cli.rb:22:in `dispatch'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/vendor/thor/lib/thor.rb:387:in `dispatch'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/vendor/thor/lib/thor/invocation.rb:126:in `invoke_command'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/vendor/thor/lib/thor/command.rb:27:in `run'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/cli.rb:362:in `exec'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/cli/exec.rb:27:in `run'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/cli/exec.rb:74:in `kernel_load'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/cli/exec.rb:74:in `load'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/bin/rake:23:in `<top (required)>'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/bin/rake:23:in `load'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/exe/rake:27:in `<top (required)>'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/application.rb:77:in `run'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/application.rb:178:in `standard_exception_handling'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/application.rb:80:in `block in run'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/application.rb:102:in `top_level'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/application.rb:117:in `run_with_threads'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/application.rb:108:in `block in top_level'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/application.rb:108:in `each'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/application.rb:108:in `block (2 levels) in top_level'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/application.rb:152:in `invoke_task'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/task.rb:173:in `invoke'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/task.rb:180:in `invoke_with_call_chain'\r\n/opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/monitor.rb:214:in `mon_synchronize'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/task.rb:187:in `block in invoke_with_call_chain'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/task.rb:243:in `execute'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/task.rb:243:in `each'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/task.rb:248:in `block in execute'\r\n/home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/Rakefile:25:in `block in <top (required)>'\r\n/home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/Rakefile:25:in `each'\r\n/home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/Rakefile:25:in `block (2 levels) in <top (required)>'\r\n/home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/Rakefile:25:in `require_relative'\r\n/home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/test/google-cloud-error_reporting_test.rb:16:in `<top (required)>'\r\n/home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/test/google-cloud-error_reporting_test.rb:16:in `require'\r\n/home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/test/helper.rb:20:in `<top (required)>'\r\n/home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/test/helper.rb:20:in `require'\r\n/home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/lib/google/cloud/error_reporting.rb:18:in `<top (required)>'\r\n/home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/lib/google/cloud/error_reporting.rb:18:in `require'\r\n/home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/lib/google/cloud/error_reporting/project.rb:18:in `<top (required)>'\r\n/home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/lib/google/cloud/error_reporting/project.rb:18:in `require'\r\n/home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/lib/google/cloud/error_reporting/service.rb:18:in `<top (required)>'\r\n/home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/lib/google/cloud/error_reporting/service.rb:18:in `require'\r\n/home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/lib/google/cloud/error_reporting/v1beta1.rb:17:in `<top (required)>'\r\n/home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/lib/google/cloud/error_reporting/v1beta1.rb:17:in `require'\r\n/home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/lib/google/cloud/error_reporting/v1beta1/error_group_service_client.rb:30:in `<top (required)>'\r\n/home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/lib/google/cloud/error_reporting/v1beta1/error_group_service_client.rb:30:in `require'\r\n/home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/lib/google/devtools/clouderrorreporting/v1beta1/error_group_service_pb.rb:6:in `<top (required)>'\r\n/home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/lib/google/devtools/clouderrorreporting/v1beta1/error_group_service_pb.rb:6:in `require'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/googleapis-common-protos-types-1.0.0/lib/google/api/annotations_pb.rb:7:in `<top (required)>'\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/googleapis-common-protos-types-1.0.0/lib/google/api/annotations_pb.rb:7:in `build'\r\n\r\n-- Machine register context ------------------------------------------------\r\n RIP: 0x00007f762b19d57f RBP: 0x00007f762e3ff0b0 RSP: 0x00007fffa5ba3870\r\n RAX: 0x00007f762b2f02e0 RBX: 0x00007f762d1a99d0 RCX: 0x0000000000000037\r\n RDX: 0x0000000000000137 RDI: 0x00007f762d1a99d0 RSI: 0x2ee6e0ff084f8949\r\n  R8: 0x000000000000000c  R9: 0x0000000000002825 R10: 0x00007f762d1a99d0\r\n R11: 0x00007f762b15b5a9 R12: 0x00007f762e3fc000 R13: 0x0000000000000020\r\n R14: 0x0080000000000000 R15: 0x00007f762d1a99d0 EFL: 0x0000000000010202\r\n\r\n-- C level backtrace information -------------------------------------------\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_vm_bugreport+0x528) [0x7f762b3887e8] vm_dump.c:679\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_bug_context+0xd0) [0x7f762b37d980] error.c:426\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(sigsegv+0x3e) [0x7f762b279abe] signal.c:907\r\n/lib/x86_64-linux-gnu/libpthread.so.0 [0x7f762ad2d330]\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(gc_mark_ptr+0x7f) [0x7f762b19d57f] gc.c:4241\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(gc_marks_rest+0x10e) [0x7f762b19f9fe] gc.c:4629\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(gc_start.part.63+0x4ce) [0x7f762b1a004e] gc.c:5606\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(heap_get_freeobj_from_next_freepage+0x2dd) [0x7f762b183189] gc.c:1696\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(newobj_slowpath_wb_protected+0xfd) [0x7f762b1a2cdd] gc.c:1742\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_wb_protected_newobj_of+0x6c) [0x7f762b1a2f2c] gc.c:1915\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/google-protobuf-3.4.1.1-x86_64-linux/lib/google/2.4/protobuf_c.so(Builder_alloc+0x31) [0x7f76260be871]\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_obj_alloc+0x43) [0x7f762b1f55b3] object.c:1862\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_class_new_instance+0x11) [0x7f762b1f59b1] object.c:1894\r\n/opt/circleci/.rvm/gems/ruby-2.4.0/gems/google-protobuf-3.4.1.1-x86_64-linux/lib/google/2.4/protobuf_c.so(DescriptorPool_build+0x21) [0x7f76260be521]\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_cfunc+0xf1) [0x7f762b2ea151] vm_insnhelper.c:1752\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_method+0xe3) [0x7f762b2f8263] vm_insnhelper.c:2291\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec_core+0x2f90) [0x7f762b2f2c70] insns.def:967\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec+0x87) [0x7f762b2f6207] vm.c:1712\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_load_internal0+0xad) [0x7f762b1cdb3d] load.c:617\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_require_internal+0x72c) [0x7f762b1cf81c] load.c:997\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_f_require+0x13) [0x7f762b1cf9e3] load.c:1042\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_cfunc+0xf1) [0x7f762b2ea151] vm_insnhelper.c:1752\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_method+0xe3) [0x7f762b2f8263] vm_insnhelper.c:2291\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec_core+0x2251) [0x7f762b2f1f31] insns.def:1066\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec+0x87) [0x7f762b2f6207] vm.c:1712\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_load_internal0+0xad) [0x7f762b1cdb3d] load.c:617\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_require_internal+0x72c) [0x7f762b1cf81c] load.c:997\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_f_require+0x13) [0x7f762b1cf9e3] load.c:1042\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_cfunc+0xf1) [0x7f762b2ea151] vm_insnhelper.c:1752\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_method+0xe3) [0x7f762b2f8263] vm_insnhelper.c:2291\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec_core+0x2251) [0x7f762b2f1f31] insns.def:1066\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec+0x87) [0x7f762b2f6207] vm.c:1712\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_load_internal0+0xad) [0x7f762b1cdb3d] load.c:617\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_require_internal+0x72c) [0x7f762b1cf81c] load.c:997\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_f_require+0x13) [0x7f762b1cf9e3] load.c:1042\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_cfunc+0xf1) [0x7f762b2ea151] vm_insnhelper.c:1752\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_method+0xe3) [0x7f762b2f8263] vm_insnhelper.c:2291\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec_core+0x2251) [0x7f762b2f1f31] insns.def:1066\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec+0x87) [0x7f762b2f6207] vm.c:1712\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_load_internal0+0xad) [0x7f762b1cdb3d] load.c:617\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_require_internal+0x72c) [0x7f762b1cf81c] load.c:997\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_f_require+0x13) [0x7f762b1cf9e3] load.c:1042\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_cfunc+0xf1) [0x7f762b2ea151] vm_insnhelper.c:1752\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_method+0xe3) [0x7f762b2f8263] vm_insnhelper.c:2291\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec_core+0x2251) [0x7f762b2f1f31] insns.def:1066\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec+0x87) [0x7f762b2f6207] vm.c:1712\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_load_internal0+0xad) [0x7f762b1cdb3d] load.c:617\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_require_internal+0x72c) [0x7f762b1cf81c] load.c:997\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_f_require+0x13) [0x7f762b1cf9e3] load.c:1042\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_cfunc+0xf1) [0x7f762b2ea151] vm_insnhelper.c:1752\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_method+0xe3) [0x7f762b2f8263] vm_insnhelper.c:2291\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec_core+0x2251) [0x7f762b2f1f31] insns.def:1066\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec+0x87) [0x7f762b2f6207] vm.c:1712\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_load_internal0+0xad) [0x7f762b1cdb3d] load.c:617\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_require_internal+0x72c) [0x7f762b1cf81c] load.c:997\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_f_require+0x13) [0x7f762b1cf9e3] load.c:1042\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_cfunc+0xf1) [0x7f762b2ea151] vm_insnhelper.c:1752\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_method+0xe3) [0x7f762b2f8263] vm_insnhelper.c:2291\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec_core+0x2251) [0x7f762b2f1f31] insns.def:1066\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec+0x87) [0x7f762b2f6207] vm.c:1712\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_load_internal0+0xad) [0x7f762b1cdb3d] load.c:617\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_require_internal+0x72c) [0x7f762b1cf81c] load.c:997\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_f_require+0x13) [0x7f762b1cf9e3] load.c:1042\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_cfunc+0xf1) [0x7f762b2ea151] vm_insnhelper.c:1752\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_method+0xe3) [0x7f762b2f8263] vm_insnhelper.c:2291\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec_core+0x2251) [0x7f762b2f1f31] insns.def:1066\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec+0x87) [0x7f762b2f6207] vm.c:1712\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_load_internal0+0xad) [0x7f762b1cdb3d] load.c:617\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_require_internal+0x72c) [0x7f762b1cf81c] load.c:997\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_f_require+0x13) [0x7f762b1cf9e3] load.c:1042\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_cfunc+0xf1) [0x7f762b2ea151] vm_insnhelper.c:1752\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_method+0xe3) [0x7f762b2f8263] vm_insnhelper.c:2291\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec_core+0x2251) [0x7f762b2f1f31] insns.def:1066\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec+0x87) [0x7f762b2f6207] vm.c:1712\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_load_internal0+0xad) [0x7f762b1cdb3d] load.c:617\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_require_internal+0x72c) [0x7f762b1cf81c] load.c:997\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_f_require_relative+0x3c) [0x7f762b1cfa7c] load.c:1042\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_cfunc+0xf1) [0x7f762b2ea151] vm_insnhelper.c:1752\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_method+0xe3) [0x7f762b2f8263] vm_insnhelper.c:2291\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec_core+0x2251) [0x7f762b2f1f31] insns.def:1066\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec+0x87) [0x7f762b2f6207] vm.c:1712\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_yield+0x5dc) [0x7f762b300b6c] vm.c:969\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_ary_each+0x3d) [0x7f762b30c25d] array.c:1824\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_cfunc+0xf1) [0x7f762b2ea151] vm_insnhelper.c:1752\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_method+0xe3) [0x7f762b2f8263] vm_insnhelper.c:2291\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec_core+0x2f90) [0x7f762b2f2c70] insns.def:967\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec+0x87) [0x7f762b2f6207] vm.c:1712\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(invoke_iseq_block_from_c+0x3a9) [0x7f762b2f6d99] vm.c:969\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(invoke_block_from_c_unsplattable+0xeb) [0x7f762b2f6f3b] vm.c:1086\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_invoke_proc+0xbb) [0x7f762b2f709b] vm.c:1111\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_opt_call+0x9c) [0x7f762b2f722c] vm_insnhelper.c:1979\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_method+0xe3) [0x7f762b2f8263] vm_insnhelper.c:2291\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec_core+0x2251) [0x7f762b2f1f31] insns.def:1066\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec+0x87) [0x7f762b2f6207] vm.c:1712\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_yield+0x5dc) [0x7f762b300b6c] vm.c:969\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_ary_each+0x3d) [0x7f762b30c25d] array.c:1824\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_cfunc+0xf1) [0x7f762b2ea151] vm_insnhelper.c:1752\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_method+0xe3) [0x7f762b2f8263] vm_insnhelper.c:2291\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec_core+0x2f90) [0x7f762b2f2c70] insns.def:967\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec+0x87) [0x7f762b2f6207] vm.c:1712\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_yield+0x5dc) [0x7f762b300b6c] vm.c:969\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_ary_each+0x3d) [0x7f762b30c25d] array.c:1824\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_cfunc+0xf1) [0x7f762b2ea151] vm_insnhelper.c:1752\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_method+0xe3) [0x7f762b2f8263] vm_insnhelper.c:2291\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec_core+0x2f90) [0x7f762b2f2c70] insns.def:967\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec+0x87) [0x7f762b2f6207] vm.c:1712\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_load_internal0+0xad) [0x7f762b1cdb3d] load.c:617\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_f_load+0x88) [0x7f762b1ce208] load.c:646\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_cfunc+0xf1) [0x7f762b2ea151] vm_insnhelper.c:1752\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_method+0xe3) [0x7f762b2f8263] vm_insnhelper.c:2291\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec_core+0x2251) [0x7f762b2f1f31] insns.def:1066\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec+0x87) [0x7f762b2f6207] vm.c:1712\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_load_internal0+0xad) [0x7f762b1cdb3d] load.c:617\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_f_load+0x88) [0x7f762b1ce208] load.c:646\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_cfunc+0xf1) [0x7f762b2ea151] vm_insnhelper.c:1752\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_method+0xe3) [0x7f762b2f8263] vm_insnhelper.c:2291\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec_core+0x2251) [0x7f762b2f1f31] insns.def:1066\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec+0x87) [0x7f762b2f6207] vm.c:1712\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_load_internal0+0xad) [0x7f762b1cdb3d] load.c:617\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(rb_f_load+0x88) [0x7f762b1ce208] load.c:646\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_cfunc+0xf1) [0x7f762b2ea151] vm_insnhelper.c:1752\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_call_method+0xe3) [0x7f762b2f8263] vm_insnhelper.c:2291\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec_core+0x2251) [0x7f762b2f1f31] insns.def:1066\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(vm_exec+0x87) [0x7f762b2f6207] vm.c:1712\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(ruby_exec_internal+0xad) [0x7f762b1850ad] eval.c:244\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(ruby_run_node+0x2d) [0x7f762b18878d] eval.c:308\r\n/opt/circleci/ruby/ruby-2.4.0/bin/ruby(main+0x4b) [0x7f762b184e6b] addr2line.c:177\r\n\r\n-- Other runtime information -----------------------------------------------\r\n\r\n* Loaded script: /opt/circleci/.rvm/gems/ruby-2.4.0/bin/rake\r\n\r\n* Loaded features:\r\n\r\n    0 enumerator.so\r\n    1 thread.rb\r\n    2 rational.so\r\n    3 complex.so\r\n    4 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/enc/encdb.so\r\n    5 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/enc/trans/transdb.so\r\n    6 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/unicode_normalize.rb\r\n    7 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/rbconfig.rb\r\n    8 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/compatibility.rb\r\n    9 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/defaults.rb\r\n   10 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/deprecate.rb\r\n   11 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/errors.rb\r\n   12 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/version.rb\r\n   13 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/requirement.rb\r\n   14 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/platform.rb\r\n   15 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/basic_specification.rb\r\n   16 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/stub_specification.rb\r\n   17 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/util/list.rb\r\n   18 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/stringio.so\r\n   19 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/specification.rb\r\n   20 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/exceptions.rb\r\n   21 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/dependency.rb\r\n   22 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/core_ext/kernel_gem.rb\r\n   23 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/monitor.rb\r\n   24 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/core_ext/kernel_require.rb\r\n   25 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems.rb\r\n   26 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/path_support.rb\r\n   27 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/pathname.so\r\n   28 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/pathname.rb\r\n   29 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/constants.rb\r\n   30 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/util.rb\r\n   31 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/io/console.so\r\n   32 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/user_interaction.rb\r\n   33 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/etc.so\r\n   34 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/config_file.rb\r\n   35 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/rubygems_integration.rb\r\n   36 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/current_ruby.rb\r\n   37 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/shared_helpers.rb\r\n   38 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/fileutils.rb\r\n   39 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/tmpdir.rb\r\n   40 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/errors.rb\r\n   41 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/environment_preserver.rb\r\n   42 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/plugin/api.rb\r\n   43 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/plugin.rb\r\n   44 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/uri/rfc2396_parser.rb\r\n   45 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/uri/rfc3986_parser.rb\r\n   46 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/uri/common.rb\r\n   47 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/uri/generic.rb\r\n   48 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/uri/ftp.rb\r\n   49 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/uri/http.rb\r\n   50 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/uri/https.rb\r\n   51 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/uri/ldap.rb\r\n   52 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/uri/ldaps.rb\r\n   53 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/uri/mailto.rb\r\n   54 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/uri.rb\r\n   55 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/digest.so\r\n   56 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/digest.rb\r\n   57 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/source/git.rb\r\n   58 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/source/installed.rb\r\n   59 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/source/specific_file.rb\r\n   60 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/source/local.rb\r\n   61 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/source/lock.rb\r\n   62 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/source/vendor.rb\r\n   63 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/source.rb\r\n   64 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/gem_helpers.rb\r\n   65 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/match_platform.rb\r\n   66 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/rubygems_ext.rb\r\n   67 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/version.rb\r\n   68 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler.rb\r\n   69 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/settings.rb\r\n   70 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/ext/builder.rb\r\n   71 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/source.rb\r\n   72 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/digest/sha1.so\r\n   73 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/source/path.rb\r\n   74 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/source/git.rb\r\n   75 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/source/rubygems.rb\r\n   76 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/lockfile_parser.rb\r\n   77 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/set.rb\r\n   78 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/definition.rb\r\n   79 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/dependency.rb\r\n   80 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/ruby_dsl.rb\r\n   81 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/dsl.rb\r\n   82 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/source_list.rb\r\n   83 /home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/lib/google/cloud/error_reporting/version.rb\r\n   84 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/index.rb\r\n   85 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/source/gemspec.rb\r\n   86 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/lazy_specification.rb\r\n   87 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/tsort.rb\r\n   88 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/forwardable/impl.rb\r\n   89 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/forwardable.rb\r\n   90 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/spec_set.rb\r\n   91 /home/ubuntu/google-cloud-ruby/stackdriver-core/lib/stackdriver/core/version.rb\r\n   92 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/ui.rb\r\n   93 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/ui/silent.rb\r\n   94 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/ui/rg_proxy.rb\r\n   95 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/text.rb\r\n   96 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/site_ruby/2.4.0/rubygems/util/licenses.rb\r\n   97 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/remote_specification.rb\r\n   98 /home/ubuntu/google-cloud-ruby/google-cloud-env/lib/google/cloud/env/version.rb\r\n   99 /home/ubuntu/google-cloud-ruby/google-cloud-core/lib/google/cloud/core/version.rb\r\n  100 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/shellwords.rb\r\n  101 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/delegate.rb\r\n  102 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/tempfile.rb\r\n  103 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/source/git/git_proxy.rb\r\n  104 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/gem_version_promoter.rb\r\n  105 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/runtime.rb\r\n  106 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/dep_proxy.rb\r\n  107 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/stub_specification.rb\r\n  108 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/endpoint_specification.rb\r\n  109 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/ruby_version.rb\r\n  110 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/setup.rb\r\n  111 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/cgi/core.rb\r\n  112 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/cgi/escape.so\r\n  113 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/cgi/util.rb\r\n  114 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/cgi/cookie.rb\r\n  115 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/cgi.rb\r\n  116 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/vendor/thor/lib/thor/command.rb\r\n  117 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/vendor/thor/lib/thor/core_ext/hash_with_indifferent_access.rb\r\n  118 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/vendor/thor/lib/thor/core_ext/ordered_hash.rb\r\n  119 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/vendor/thor/lib/thor/error.rb\r\n  120 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/vendor/thor/lib/thor/invocation.rb\r\n  121 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/vendor/thor/lib/thor/parser/argument.rb\r\n  122 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/vendor/thor/lib/thor/parser/arguments.rb\r\n  123 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/vendor/thor/lib/thor/parser/option.rb\r\n  124 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/vendor/thor/lib/thor/parser/options.rb\r\n  125 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/vendor/thor/lib/thor/parser.rb\r\n  126 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/vendor/thor/lib/thor/shell.rb\r\n  127 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/vendor/thor/lib/thor/line_editor/basic.rb\r\n  128 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/readline.so\r\n  129 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/vendor/thor/lib/thor/line_editor/readline.rb\r\n  130 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/vendor/thor/lib/thor/line_editor.rb\r\n  131 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/vendor/thor/lib/thor/util.rb\r\n  132 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/vendor/thor/lib/thor/base.rb\r\n  133 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/vendor/thor/lib/thor.rb\r\n  134 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/vendored_thor.rb\r\n  135 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/friendly_errors.rb\r\n  136 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/feature_flag.rb\r\n  137 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/cli/plugin.rb\r\n  138 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/cli.rb\r\n  139 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/vendor/thor/lib/thor/shell/basic.rb\r\n  140 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/vendor/thor/lib/thor/shell/color.rb\r\n  141 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/ui/shell.rb\r\n  142 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/cli/exec.rb\r\n  143 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/version.rb\r\n  144 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/singleton.rb\r\n  145 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/optparse.rb\r\n  146 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/ostruct.rb\r\n  147 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/ext/core.rb\r\n  148 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/ext/string.rb\r\n  149 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/win32.rb\r\n  150 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/linked_list.rb\r\n  151 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/cpu_counter.rb\r\n  152 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/scope.rb\r\n  153 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/task_argument_error.rb\r\n  154 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/rule_recursion_overflow_error.rb\r\n  155 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/task_manager.rb\r\n  156 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/cloneable.rb\r\n  157 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/file_utils.rb\r\n  158 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/file_utils_ext.rb\r\n  159 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/file_list.rb\r\n  160 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/promise.rb\r\n  161 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/thread_pool.rb\r\n  162 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/private_reader.rb\r\n  163 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/thread_history_display.rb\r\n  164 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/trace_output.rb\r\n  165 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/application.rb\r\n  166 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/rake_module.rb\r\n  167 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/pseudo_status.rb\r\n  168 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/task_arguments.rb\r\n  169 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/invocation_chain.rb\r\n  170 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/invocation_exception_mixin.rb\r\n  171 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/task.rb\r\n  172 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/early_time.rb\r\n  173 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/file_task.rb\r\n  174 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/file_creation_task.rb\r\n  175 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/multi_task.rb\r\n  176 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/dsl_definition.rb\r\n  177 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/default_loader.rb\r\n  178 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/late_time.rb\r\n  179 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/name_space.rb\r\n  180 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/backtrace.rb\r\n  181 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake.rb\r\n  182 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/clean.rb\r\n  183 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/gem_helper.rb\r\n  184 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/bundler-1.15.4/lib/bundler/gem_tasks.rb\r\n  185 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rake-11.3.0/lib/rake/tasklib.rb\r\n  186 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rubocop-0.35.1/lib/rubocop/rake_task.rb\r\n  187 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rubocop-0.35.1/lib/rubocop/options.rb\r\n  188 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/version.rb\r\n  189 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/server.rb\r\n  190 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/autoload.rb\r\n  191 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/config.rb\r\n  192 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/core_ext/array.rb\r\n  193 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/core_ext/file.rb\r\n  194 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/core_ext/hash.rb\r\n  195 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/core_ext/insertion.rb\r\n  196 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/core_ext/module.rb\r\n  197 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/core_ext/string.rb\r\n  198 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/core_ext/symbol_hash.rb\r\n  199 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/rubygems/backports/gem.rb\r\n  200 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/rubygems/backports/source_index.rb\r\n  201 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/rubygems/backports.rb\r\n  202 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/globals.rb\r\n  203 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/versions.rb\r\n  204 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/exception.rb\r\n  205 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/syntax_error.rb\r\n  206 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/psych.so\r\n  207 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/omap.rb\r\n  208 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/set.rb\r\n  209 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/class_loader.rb\r\n  210 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/strscan.so\r\n  211 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/scalar_scanner.rb\r\n  212 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/nodes/node.rb\r\n  213 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/nodes/stream.rb\r\n  214 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/nodes/document.rb\r\n  215 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/nodes/sequence.rb\r\n  216 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/nodes/scalar.rb\r\n  217 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/nodes/mapping.rb\r\n  218 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/nodes/alias.rb\r\n  219 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/nodes.rb\r\n  220 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/streaming.rb\r\n  221 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/visitors/visitor.rb\r\n  222 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/visitors/to_ruby.rb\r\n  223 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/visitors/emitter.rb\r\n  224 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/handler.rb\r\n  225 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/tree_builder.rb\r\n  226 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/visitors/yaml_tree.rb\r\n  227 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/json/ruby_events.rb\r\n  228 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/visitors/json_tree.rb\r\n  229 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/visitors/depth_first.rb\r\n  230 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/visitors.rb\r\n  231 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/parser.rb\r\n  232 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/coder.rb\r\n  233 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/core_ext.rb\r\n  234 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/date_core.so\r\n  235 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/date.rb\r\n  236 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/deprecated.rb\r\n  237 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/stream.rb\r\n  238 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/json/yaml_events.rb\r\n  239 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/json/tree_builder.rb\r\n  240 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/json/stream.rb\r\n  241 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych/handlers/document_stream.rb\r\n  242 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/psych.rb\r\n  243 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/yaml.rb\r\n  244 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/options.rb\r\n  245 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/templates/template_options.rb\r\n  246 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/cli/command.rb\r\n  247 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/cli/yardopts_command.rb\r\n  248 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/cli/yardoc.rb\r\n  249 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/logger.rb\r\n  250 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/logging.rb\r\n  251 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/mutex_m.rb\r\n  252 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/minitest-5.10.3/lib/minitest/parallel.rb\r\n  253 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/minitest-5.10.3/lib/minitest/assertions.rb\r\n  254 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/minitest-5.10.3/lib/minitest/unit.rb\r\n  255 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/minitest-5.10.3/lib/minitest/test.rb\r\n  256 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/minitest-5.10.3/lib/minitest.rb\r\n  257 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/minitest-5.10.3/lib/minitest/expectations.rb\r\n  258 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/minitest-5.10.3/lib/minitest/spec.rb\r\n  259 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-doctest-0.1.8/lib/yard/cli/doctest.rb\r\n  260 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-doctest-0.1.8/lib/yard/doctest/example.rb\r\n  261 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-doctest-0.1.8/lib/yard/doctest/rake.rb\r\n  262 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-doctest-0.1.8/lib/yard/doctest/version.rb\r\n  263 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/cli/config.rb\r\n  264 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/time.rb\r\n  265 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/open-uri.rb\r\n  266 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/cli/diff.rb\r\n  267 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/cli/display.rb\r\n  268 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/cli/gems.rb\r\n  269 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/cli/graph.rb\r\n  270 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/cli/help.rb\r\n  271 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/cli/list.rb\r\n  272 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/cli/markup_types.rb\r\n  273 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/cli/yri.rb\r\n  274 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/cli/server.rb\r\n  275 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/templates/helpers/base_helper.rb\r\n  276 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/cli/stats.rb\r\n  277 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/cli/i18n.rb\r\n  278 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/cli/command_parser.rb\r\n  279 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-doctest-0.1.8/lib/yard-doctest.rb\r\n  280 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard.rb\r\n  281 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/yard-0.9.9/lib/yard/rake/yardoc_task.rb\r\n  282 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/minitest-5.10.3/lib/minitest/mock.rb\r\n  283 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/minitest-5.10.3/lib/minitest/autorun.rb\r\n  284 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/minitest-focus-1.1.2/lib/minitest/focus5.rb\r\n  285 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/minitest-focus-1.1.2/lib/minitest/focus.rb\r\n  286 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/minitest-rg-5.2.0/lib/minitest/rg_plugin.rb\r\n  287 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/minitest-server-1.0.4/lib/minitest/server_plugin.rb\r\n  288 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/minitest-5.10.3/lib/minitest/pride_plugin.rb\r\n  289 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/minitest-rg-5.2.0/lib/minitest/rg.rb\r\n  290 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/timeout.rb\r\n  291 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/faraday-0.13.1/lib/faraday/utils.rb\r\n  292 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/faraday-0.13.1/lib/faraday/options.rb\r\n  293 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/faraday-0.13.1/lib/faraday/connection.rb\r\n  294 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/faraday-0.13.1/lib/faraday/rack_builder.rb\r\n  295 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/faraday-0.13.1/lib/faraday/parameters.rb\r\n  296 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/faraday-0.13.1/lib/faraday/middleware.rb\r\n  297 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/faraday-0.13.1/lib/faraday/adapter.rb\r\n  298 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/faraday-0.13.1/lib/faraday/request.rb\r\n  299 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/faraday-0.13.1/lib/faraday/response.rb\r\n  300 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/multipart-post-2.0.0/lib/composite_io.rb\r\n  301 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/multipart-post-2.0.0/lib/parts.rb\r\n  302 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/faraday-0.13.1/lib/faraday/upload_io.rb\r\n  303 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/faraday-0.13.1/lib/faraday/error.rb\r\n  304 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/faraday-0.13.1/lib/faraday/autoload.rb\r\n  305 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/faraday-0.13.1/lib/faraday.rb\r\n  306 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/json-2.1.0/lib/json/version.rb\r\n  307 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/json-2.1.0/lib/json/generic_object.rb\r\n  308 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/json-2.1.0/lib/json/common.rb\r\n  309 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/json-2.1.0/lib/json/ext/parser.so\r\n  310 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/json-2.1.0/lib/json/ext/generator.so\r\n  311 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/json-2.1.0/lib/json/ext.rb\r\n  312 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/json-2.1.0/lib/json.rb\r\n  313 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/faraday-0.13.1/lib/faraday/request/url_encoded.rb\r\n  314 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/socket.so\r\n  315 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/io/wait.so\r\n  316 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/socket.rb\r\n  317 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/net/protocol.rb\r\n  318 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/zlib.so\r\n  319 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/net/http/exceptions.rb\r\n  320 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/net/http/header.rb\r\n  321 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/enc/windows_31j.so\r\n  322 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/net/http/generic_request.rb\r\n  323 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/net/http/request.rb\r\n  324 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/net/http/requests.rb\r\n  325 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/net/http/response.rb\r\n  326 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/net/http/responses.rb\r\n  327 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/net/http/proxy_delta.rb\r\n  328 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/net/http/backward.rb\r\n  329 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/net/http.rb\r\n  330 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/openssl.so\r\n  331 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/openssl/bn.rb\r\n  332 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/openssl/pkey.rb\r\n  333 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/openssl/cipher.rb\r\n  334 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/openssl/config.rb\r\n  335 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/openssl/digest.rb\r\n  336 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/openssl/x509.rb\r\n  337 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/openssl/buffering.rb\r\n  338 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/io/nonblock.so\r\n  339 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/openssl/ssl.rb\r\n  340 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/openssl.rb\r\n  341 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/net/https.rb\r\n  342 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/faraday-0.13.1/lib/faraday/adapter/net_http.rb\r\n  343 /home/ubuntu/google-cloud-ruby/google-cloud-env/lib/google/cloud/env.rb\r\n  344 /home/ubuntu/google-cloud-ruby/google-cloud-env/lib/google-cloud-env.rb\r\n  345 /home/ubuntu/google-cloud-ruby/google-cloud-core/lib/google/cloud.rb\r\n  346 /home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/lib/google-cloud-error_reporting.rb\r\n  347 /home/ubuntu/google-cloud-ruby/stackdriver-core/lib/stackdriver/core/async_actor.rb\r\n  348 /home/ubuntu/google-cloud-ruby/google-cloud-error_reporting/lib/google/cloud/error_reporting/async_error_reporter.rb\r\n  349 /home/ubuntu/google-cloud-ruby/google-cloud-core/lib/google/cloud/errors.rb\r\n  350 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/English.rb\r\n  351 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/grpc-1.6.6-x86_64-linux/src/ruby/lib/grpc/2.4/grpc_c.so\r\n  352 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/grpc-1.6.6-x86_64-linux/src/ruby/lib/grpc/grpc.rb\r\n  353 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/grpc-1.6.6-x86_64-linux/src/ruby/lib/grpc/errors.rb\r\n  354 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/grpc-1.6.6-x86_64-linux/src/ruby/lib/grpc/logconfig.rb\r\n  355 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/grpc-1.6.6-x86_64-linux/src/ruby/lib/grpc/notifier.rb\r\n  356 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/grpc-1.6.6-x86_64-linux/src/ruby/lib/grpc/version.rb\r\n  357 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/grpc-1.6.6-x86_64-linux/src/ruby/lib/grpc/core/time_consts.rb\r\n  358 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/weakref.rb\r\n  359 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/grpc-1.6.6-x86_64-linux/src/ruby/lib/grpc/generic/bidi_call.rb\r\n  360 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/grpc-1.6.6-x86_64-linux/src/ruby/lib/grpc/generic/active_call.rb\r\n  361 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/grpc-1.6.6-x86_64-linux/src/ruby/lib/grpc/generic/client_stub.rb\r\n  362 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/grpc-1.6.6-x86_64-linux/src/ruby/lib/grpc/generic/rpc_desc.rb\r\n  363 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/grpc-1.6.6-x86_64-linux/src/ruby/lib/grpc/generic/service.rb\r\n  364 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/grpc-1.6.6-x86_64-linux/src/ruby/lib/grpc/generic/rpc_server.rb\r\n  365 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/grpc-1.6.6-x86_64-linux/src/ruby/lib/grpc.rb\r\n  366 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/google-protobuf-3.4.1.1-x86_64-linux/lib/google/protobuf/message_exts.rb\r\n  367 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/google-protobuf-3.4.1.1-x86_64-linux/lib/google/2.4/protobuf_c.so\r\n  368 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/google-protobuf-3.4.1.1-x86_64-linux/lib/google/protobuf/repeated_field.rb\r\n  369 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/google-protobuf-3.4.1.1-x86_64-linux/lib/google/protobuf.rb\r\n  370 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/google-protobuf-3.4.1.1-x86_64-linux/lib/google/protobuf/any_pb.rb\r\n  371 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/googleapis-common-protos-types-1.0.0/lib/google/rpc/status_pb.rb\r\n  372 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/grpc-1.6.6-x86_64-linux/src/ruby/lib/grpc/google_rpc_status_utils.rb\r\n  373 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/multi_json-1.12.2/lib/multi_json/options.rb\r\n  374 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/multi_json-1.12.2/lib/multi_json/version.rb\r\n  375 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/multi_json-1.12.2/lib/multi_json/adapter_error.rb\r\n  376 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/multi_json-1.12.2/lib/multi_json/parse_error.rb\r\n  377 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/multi_json-1.12.2/lib/multi_json/options_cache.rb\r\n  378 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/multi_json-1.12.2/lib/multi_json.rb\r\n  379 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/memoist-0.16.0/lib/memoist/version.rb\r\n  380 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/memoist-0.16.0/lib/memoist/core_ext/singleton_class.rb\r\n  381 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/memoist-0.16.0/lib/memoist.rb\r\n  382 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/os-0.9.6/lib/os.rb\r\n  383 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/googleauth-0.5.3/lib/googleauth/credentials_loader.rb\r\n  384 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/addressable-2.5.2/lib/addressable/version.rb\r\n  385 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/addressable-2.5.2/lib/addressable/idna/pure.rb\r\n  386 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/addressable-2.5.2/lib/addressable/idna.rb\r\n  387 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/public_suffix-2.0.5/lib/public_suffix/domain.rb\r\n  388 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/public_suffix-2.0.5/lib/public_suffix/version.rb\r\n  389 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/public_suffix-2.0.5/lib/public_suffix/errors.rb\r\n  390 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/public_suffix-2.0.5/lib/public_suffix/rule.rb\r\n  391 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/public_suffix-2.0.5/lib/public_suffix/list.rb\r\n  392 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/public_suffix-2.0.5/lib/public_suffix.rb\r\n  393 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/addressable-2.5.2/lib/addressable/uri.rb\r\n  394 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/signet-0.8.1/lib/signet/version.rb\r\n  395 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/signet-0.8.1/lib/signet.rb\r\n  396 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/signet-0.8.1/lib/signet/errors.rb\r\n  397 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/base64.rb\r\n  398 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/signet-0.8.1/lib/signet/oauth_2.rb\r\n  399 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/jwt-1.5.6/lib/jwt/json.rb\r\n  400 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/jwt-1.5.6/lib/jwt/error.rb\r\n  401 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/jwt-1.5.6/lib/jwt/verify.rb\r\n  402 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/jwt-1.5.6/lib/jwt/decode.rb\r\n  403 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/jwt-1.5.6/lib/jwt.rb\r\n  404 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/signet-0.8.1/lib/signet/oauth_2/client.rb\r\n  405 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/googleauth-0.5.3/lib/googleauth/signet.rb\r\n  406 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/googleauth-0.5.3/lib/googleauth/compute_engine.rb\r\n  407 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/googleauth-0.5.3/lib/googleauth/service_account.rb\r\n  408 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/googleauth-0.5.3/lib/googleauth/scope_util.rb\r\n  409 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/googleauth-0.5.3/lib/googleauth/user_refresh.rb\r\n  410 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/googleauth-0.5.3/lib/googleauth/client_id.rb\r\n  411 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/googleauth-0.5.3/lib/googleauth/user_authorizer.rb\r\n  412 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/securerandom.rb\r\n  413 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/googleauth-0.5.3/lib/googleauth/web_user_authorizer.rb\r\n  414 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/googleauth-0.5.3/lib/googleauth.rb\r\n  415 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/google-protobuf-3.4.1.1-x86_64-linux/lib/google/protobuf/duration_pb.rb\r\n  416 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/google-protobuf-3.4.1.1-x86_64-linux/lib/google/protobuf/field_mask_pb.rb\r\n  417 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/google-protobuf-3.4.1.1-x86_64-linux/lib/google/protobuf/struct_pb.rb\r\n  418 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/google-protobuf-3.4.1.1-x86_64-linux/lib/google/protobuf/timestamp_pb.rb\r\n  419 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/google-protobuf-3.4.1.1-x86_64-linux/lib/google/protobuf/well_known_types.rb\r\n  420 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/googleapis-common-protos-types-1.0.0/lib/google/rpc/error_details_pb.rb\r\n  421 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/google-gax-0.8.12/lib/google/gax/grpc.rb\r\n  422 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/google-gax-0.8.12/lib/google/gax/errors.rb\r\n  423 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/google-gax-0.8.12/lib/google/gax/bundling.rb\r\n  424 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/google-gax-0.8.12/lib/google/gax/api_callable.rb\r\n  425 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/google-gax-0.8.12/lib/google/gax/constants.rb\r\n  426 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/google-gax-0.8.12/lib/google/gax/credentials.rb\r\n  427 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rly-0.2.3/lib/rly/version.rb\r\n  428 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rly-0.2.3/lib/rly/lex_token.rb\r\n  429 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rly-0.2.3/lib/rly/lex.rb\r\n  430 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rly-0.2.3/lib/rly/file_lex.rb\r\n  431 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rly-0.2.3/lib/rly/parse/production.rb\r\n  432 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rly-0.2.3/lib/rly/parse/lr_item.rb\r\n  433 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rly-0.2.3/lib/rly/parse/grammar.rb\r\n  434 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rly-0.2.3/lib/rly/parse/yacc_production.rb\r\n  435 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rly-0.2.3/lib/rly/parse/yacc_symbol.rb\r\n  436 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rly-0.2.3/lib/rly/parse/lr_table.rb\r\n  437 /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/erb.rb\r\n  438 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rly-0.2.3/lib/rly/parse/ply_dump.rb\r\n  439 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rly-0.2.3/lib/rly/yacc.rb\r\n  440 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rly-0.2.3/lib/rly/parse/rule_parser.rb\r\n  441 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/rly-0.2.3/lib/rly.rb\r\n  442 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/google-gax-0.8.12/lib/google/gax/path_template.rb\r\n  443 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/google-gax-0.8.12/lib/google/gax/settings.rb\r\n  444 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/google-gax-0.8.12/lib/google/gax/util.rb\r\n  445 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/google-gax-0.8.12/lib/google/gax/version.rb\r\n  446 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/google-gax-0.8.12/lib/google/gax.rb\r\n  447 /opt/circleci/.rvm/gems/ruby-2.4.0/gems/googleapis-common-protos-types-1.0.0/lib/google/api/http_pb.rb\r\n\r\n* Process memory map:\r\n\r\n7f7624d10000-7f7624ed6000 r--s 00000000 00:24 550881                     /lib/x86_64-linux-gnu/libc-2.19.so\r\n7f7624ed6000-7f7624f42000 r--s 00000000 00:24 564274                     /opt/circleci/.rvm/gems/ruby-2.4.0/gems/google-protobuf-3.4.1.1-x86_64-linux/lib/google/2.4/protobuf_c.so\r\n7f7624f42000-7f7625e90000 r--s 00000000 00:24 17298                      /opt/circleci/ruby/ruby-2.4.0/bin/ruby\r\n7f7625e90000-7f7625ea6000 r-xp 00000000 00:24 551028                     /lib/x86_64-linux-gnu/libgcc_s.so.1\r\n7f7625ea6000-7f76260a5000 ---p 00016000 00:24 551028                     /lib/x86_64-linux-gnu/libgcc_s.so.1\r\n7f76260a5000-7f76260a6000 rw-p 00015000 00:24 551028                     /lib/x86_64-linux-gnu/libgcc_s.so.1\r\n7f76260a6000-7f76260fa000 r-xp 00000000 00:24 564274                     /opt/circleci/.rvm/gems/ruby-2.4.0/gems/google-protobuf-3.4.1.1-x86_64-linux/lib/google/2.4/protobuf_c.so\r\n7f76260fa000-7f76262fa000 ---p 00054000 00:24 564274                     /opt/circleci/.rvm/gems/ruby-2.4.0/gems/google-protobuf-3.4.1.1-x86_64-linux/lib/google/2.4/protobuf_c.so\r\n7f76262fa000-7f7626302000 r--p 00054000 00:24 564274                     /opt/circleci/.rvm/gems/ruby-2.4.0/gems/google-protobuf-3.4.1.1-x86_64-linux/lib/google/2.4/protobuf_c.so\r\n7f7626302000-7f7626304000 rw-p 0005c000 00:24 564274                     /opt/circleci/.rvm/gems/ruby-2.4.0/gems/google-protobuf-3.4.1.1-x86_64-linux/lib/google/2.4/protobuf_c.so\r\n7f7626304000-7f7626519000 r-xp 00000000 00:24 569370                     /opt/circleci/.rvm/gems/ruby-2.4.0/gems/grpc-1.6.6-x86_64-linux/src/ruby/lib/grpc/2.4/grpc_c.so\r\n7f7626519000-7f7626719000 ---p 00215000 00:24 569370                     /opt/circleci/.rvm/gems/ruby-2.4.0/gems/grpc-1.6.6-x86_64-linux/src/ruby/lib/grpc/2.4/grpc_c.so\r\n7f7626719000-7f762672e000 r--p 00215000 00:24 569370                     /opt/circleci/.rvm/gems/ruby-2.4.0/gems/grpc-1.6.6-x86_64-linux/src/ruby/lib/grpc/2.4/grpc_c.so\r\n7f762672e000-7f7626734000 rw-p 0022a000 00:24 569370                     /opt/circleci/.rvm/gems/ruby-2.4.0/gems/grpc-1.6.6-x86_64-linux/src/ruby/lib/grpc/2.4/grpc_c.so\r\n7f7626734000-7f7626739000 rw-p 00000000 00:00 0 \r\n7f7626739000-7f762673a000 r-xp 00000000 00:24 21401                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/io/nonblock.so\r\n7f762673a000-7f7626939000 ---p 00001000 00:24 21401                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/io/nonblock.so\r\n7f7626939000-7f762693a000 r--p 00000000 00:24 21401                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/io/nonblock.so\r\n7f762693a000-7f762693b000 rw-p 00001000 00:24 21401                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/io/nonblock.so\r\n7f762693b000-7f7626990000 r-xp 00000000 00:24 550848                     /lib/x86_64-linux-gnu/libssl.so.1.0.0\r\n7f7626990000-7f7626b90000 ---p 00055000 00:24 550848                     /lib/x86_64-linux-gnu/libssl.so.1.0.0\r\n7f7626b90000-7f7626b93000 r--p 00055000 00:24 550848                     /lib/x86_64-linux-gnu/libssl.so.1.0.0\r\n7f7626b93000-7f7626b9a000 rw-p 00058000 00:24 550848                     /lib/x86_64-linux-gnu/libssl.so.1.0.0\r\n7f7626b9a000-7f7626bf1000 r-xp 00000000 00:24 21494                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/openssl.so\r\n7f7626bf1000-7f7626df0000 ---p 00057000 00:24 21494                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/openssl.so\r\n7f7626df0000-7f7626df2000 r--p 00056000 00:24 21494                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/openssl.so\r\n7f7626df2000-7f7626df4000 rw-p 00058000 00:24 21494                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/openssl.so\r\n7f7626df4000-7f7626df5000 rw-p 00000000 00:00 0 \r\n7f7626df5000-7f7626df8000 r-xp 00000000 00:24 21473                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/enc/windows_31j.so\r\n7f7626df8000-7f7626ff7000 ---p 00003000 00:24 21473                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/enc/windows_31j.so\r\n7f7626ff7000-7f7626ff8000 r--p 00002000 00:24 21473                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/enc/windows_31j.so\r\n7f7626ff8000-7f7626ff9000 rw-p 00003000 00:24 21473                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/enc/windows_31j.so\r\n7f7626ff9000-7f7627011000 r-xp 00000000 00:24 551049                     /lib/x86_64-linux-gnu/libz.so.1.2.8\r\n7f7627011000-7f7627210000 ---p 00018000 00:24 551049                     /lib/x86_64-linux-gnu/libz.so.1.2.8\r\n7f7627210000-7f7627211000 r--p 00017000 00:24 551049                     /lib/x86_64-linux-gnu/libz.so.1.2.8\r\n7f7627211000-7f7627212000 rw-p 00018000 00:24 551049                     /lib/x86_64-linux-gnu/libz.so.1.2.8\r\n7f7627212000-7f7627222000 r-xp 00000000 00:24 21410                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/zlib.so\r\n7f7627222000-7f7627422000 ---p 00010000 00:24 21410                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/zlib.so\r\n7f7627422000-7f7627423000 r--p 00010000 00:24 21410                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/zlib.so\r\n7f7627423000-7f7627424000 rw-p 00011000 00:24 21410                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/zlib.so\r\n7f7627424000-7f7627426000 r-xp 00000000 00:24 21400                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/io/wait.so\r\n7f7627426000-7f7627625000 ---p 00002000 00:24 21400                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/io/wait.so\r\n7f7627625000-7f7627626000 r--p 00001000 00:24 21400                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/io/wait.so\r\n7f7627626000-7f7627627000 rw-p 00002000 00:24 21400                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/io/wait.so\r\n7f7627627000-7f7627652000 r-xp 00000000 00:24 21407                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/socket.so\r\n7f7627652000-7f7627851000 ---p 0002b000 00:24 21407                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/socket.so\r\n7f7627851000-7f7627852000 r--p 0002a000 00:24 21407                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/socket.so\r\n7f7627852000-7f7627853000 rw-p 0002b000 00:24 21407                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/socket.so\r\n7f7627853000-7f762785c000 r-xp 00000000 00:24 563479                     /opt/circleci/.rvm/gems/ruby-2.4.0/gems/json-2.1.0/lib/json/ext/generator.so\r\n7f762785c000-7f7627a5c000 ---p 00009000 00:24 563479                     /opt/circleci/.rvm/gems/ruby-2.4.0/gems/json-2.1.0/lib/json/ext/generator.so\r\n7f7627a5c000-7f7627a5d000 r--p 00009000 00:24 563479                     /opt/circleci/.rvm/gems/ruby-2.4.0/gems/json-2.1.0/lib/json/ext/generator.so\r\n7f7627a5d000-7f7627a5e000 rw-p 0000a000 00:24 563479                     /opt/circleci/.rvm/gems/ruby-2.4.0/gems/json-2.1.0/lib/json/ext/generator.so\r\n7f7627a5e000-7f7627a64000 r-xp 00000000 00:24 563480                     /opt/circleci/.rvm/gems/ruby-2.4.0/gems/json-2.1.0/lib/json/ext/parser.so\r\n7f7627a64000-7f7627c63000 ---p 00006000 00:24 563480                     /opt/circleci/.rvm/gems/ruby-2.4.0/gems/json-2.1.0/lib/json/ext/parser.so\r\n7f7627c63000-7f7627c64000 r--p 00005000 00:24 563480                     /opt/circleci/.rvm/gems/ruby-2.4.0/gems/json-2.1.0/lib/json/ext/parser.so\r\n7f7627c64000-7f7627c65000 rw-p 00006000 00:24 563480                     /opt/circleci/.rvm/gems/ruby-2.4.0/gems/json-2.1.0/lib/json/ext/parser.so\r\n7f7627c65000-7f7627d26000 rw-p 00000000 00:00 0 \r\n7f7627d26000-7f7627d5b000 r-xp 00000000 00:24 21496                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/date_core.so\r\n7f7627d5b000-7f7627f5b000 ---p 00035000 00:24 21496                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/date_core.so\r\n7f7627f5b000-7f7627f5c000 r--p 00035000 00:24 21496                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/date_core.so\r\n7f7627f5c000-7f7627f5d000 rw-p 00036000 00:24 21496                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/date_core.so\r\n7f7627f5d000-7f7627f5f000 rw-p 00000000 00:00 0 \r\n7f7627f5f000-7f7627f65000 r-xp 00000000 00:24 21411                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/strscan.so\r\n7f7627f65000-7f7628164000 ---p 00006000 00:24 21411                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/strscan.so\r\n7f7628164000-7f7628165000 r--p 00005000 00:24 21411                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/strscan.so\r\n7f7628165000-7f7628166000 rw-p 00006000 00:24 21411                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/strscan.so\r\n7f7628166000-7f7628185000 r-xp 00000000 00:24 405166                     /usr/lib/x86_64-linux-gnu/libyaml-0.so.2.0.2\r\n7f7628185000-7f7628384000 ---p 0001f000 00:24 405166                     /usr/lib/x86_64-linux-gnu/libyaml-0.so.2.0.2\r\n7f7628384000-7f7628385000 r--p 0001e000 00:24 405166                     /usr/lib/x86_64-linux-gnu/libyaml-0.so.2.0.2\r\n7f7628385000-7f7628386000 rw-p 0001f000 00:24 405166                     /usr/lib/x86_64-linux-gnu/libyaml-0.so.2.0.2\r\n7f7628386000-7f762838c000 r-xp 00000000 00:24 21406                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/psych.so\r\n7f762838c000-7f762858b000 ---p 00006000 00:24 21406                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/psych.so\r\n7f762858b000-7f762858c000 r--p 00005000 00:24 21406                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/psych.so\r\n7f762858c000-7f762858d000 rw-p 00006000 00:24 21406                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/psych.so\r\n7f762858d000-7f76285b2000 r-xp 00000000 00:24 551020                     /lib/x86_64-linux-gnu/libtinfo.so.5.9\r\n7f76285b2000-7f76287b1000 ---p 00025000 00:24 551020                     /lib/x86_64-linux-gnu/libtinfo.so.5.9\r\n7f76287b1000-7f76287b5000 r--p 00024000 00:24 551020                     /lib/x86_64-linux-gnu/libtinfo.so.5.9\r\n7f76287b5000-7f76287b6000 rw-p 00028000 00:24 551020                     /lib/x86_64-linux-gnu/libtinfo.so.5.9\r\n7f76287b6000-7f76287f3000 r-xp 00000000 00:24 551034                     /lib/x86_64-linux-gnu/libreadline.so.6.3\r\n7f76287f3000-7f76289f3000 ---p 0003d000 00:24 551034                     /lib/x86_64-linux-gnu/libreadline.so.6.3\r\n7f76289f3000-7f76289f5000 r--p 0003d000 00:24 551034                     /lib/x86_64-linux-gnu/libreadline.so.6.3\r\n7f76289f5000-7f76289fb000 rw-p 0003f000 00:24 551034                     /lib/x86_64-linux-gnu/libreadline.so.6.3\r\n7f76289fb000-7f76289fc000 rw-p 00000000 00:00 0 \r\n7f76289fc000-7f7628a04000 r-xp 00000000 00:24 21392                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/readline.so\r\n7f7628a04000-7f7628c03000 ---p 00008000 00:24 21392                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/readline.so\r\n7f7628c03000-7f7628c04000 r--p 00007000 00:24 21392                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/readline.so\r\n7f7628c04000-7f7628c05000 rw-p 00008000 00:24 21392                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/readline.so\r\n7f7628c05000-7f7628c08000 r-xp 00000000 00:24 21403                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/cgi/escape.so\r\n7f7628c08000-7f7628e07000 ---p 00003000 00:24 21403                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/cgi/escape.so\r\n7f7628e07000-7f7628e08000 r--p 00002000 00:24 21403                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/cgi/escape.so\r\n7f7628e08000-7f7628e09000 rw-p 00003000 00:24 21403                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/cgi/escape.so\r\n7f7628e09000-7f7628fbc000 r-xp 00000000 00:24 550849                     /lib/x86_64-linux-gnu/libcrypto.so.1.0.0\r\n7f7628fbc000-7f76291bb000 ---p 001b3000 00:24 550849                     /lib/x86_64-linux-gnu/libcrypto.so.1.0.0\r\n7f76291bb000-7f76291d6000 r--p 001b2000 00:24 550849                     /lib/x86_64-linux-gnu/libcrypto.so.1.0.0\r\n7f76291d6000-7f76291e1000 rw-p 001cd000 00:24 550849                     /lib/x86_64-linux-gnu/libcrypto.so.1.0.0\r\n7f76291e1000-7f76291e5000 rw-p 00000000 00:00 0 \r\n7f76291e5000-7f76291e6000 r-xp 00000000 00:24 21491                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/digest/sha1.so\r\n7f76291e6000-7f76293e5000 ---p 00001000 00:24 21491                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/digest/sha1.so\r\n7f76293e5000-7f76293e6000 r--p 00000000 00:24 21491                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/digest/sha1.so\r\n7f76293e6000-7f76293e7000 rw-p 00001000 00:24 21491                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/digest/sha1.so\r\n7f76293e7000-7f76293eb000 r-xp 00000000 00:24 21413                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/digest.so\r\n7f76293eb000-7f76295ea000 ---p 00004000 00:24 21413                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/digest.so\r\n7f76295ea000-7f76295eb000 r--p 00003000 00:24 21413                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/digest.so\r\n7f76295eb000-7f76295ec000 rw-p 00004000 00:24 21413                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/digest.so\r\n7f76295ec000-7f76295f2000 r-xp 00000000 00:24 21483                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/etc.so\r\n7f76295f2000-7f76297f1000 ---p 00006000 00:24 21483                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/etc.so\r\n7f76297f1000-7f76297f2000 r--p 00005000 00:24 21483                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/etc.so\r\n7f76297f2000-7f76297f3000 rw-p 00006000 00:24 21483                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/etc.so\r\n7f76297f3000-7f76297f7000 r-xp 00000000 00:24 21399                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/io/console.so\r\n7f76297f7000-7f76299f7000 ---p 00004000 00:24 21399                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/io/console.so\r\n7f76299f7000-7f76299f8000 r--p 00004000 00:24 21399                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/io/console.so\r\n7f76299f8000-7f76299f9000 rw-p 00005000 00:24 21399                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/io/console.so\r\n7f76299f9000-7f7629a00000 r-xp 00000000 00:24 21388                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/pathname.so\r\n7f7629a00000-7f7629bff000 ---p 00007000 00:24 21388                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/pathname.so\r\n7f7629bff000-7f7629c00000 r--p 00006000 00:24 21388                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/pathname.so\r\n7f7629c00000-7f7629c01000 rw-p 00007000 00:24 21388                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/pathname.so\r\n7f7629c01000-7f7629c09000 r-xp 00000000 00:24 21396                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/stringio.so\r\n7f7629c09000-7f7629e08000 ---p 00008000 00:24 21396                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/stringio.so\r\n7f7629e08000-7f7629e09000 r--p 00007000 00:24 21396                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/stringio.so\r\n7f7629e09000-7f7629e0a000 rw-p 00008000 00:24 21396                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/stringio.so\r\n7f7629e0a000-7f7629e0c000 r-xp 00000000 00:24 21434                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/enc/trans/transdb.so\r\n7f7629e0c000-7f762a00c000 ---p 00002000 00:24 21434                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/enc/trans/transdb.so\r\n7f762a00c000-7f762a00d000 r--p 00002000 00:24 21434                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/enc/trans/transdb.so\r\n7f762a00d000-7f762a00e000 rw-p 00003000 00:24 21434                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/enc/trans/transdb.so\r\n7f762a00e000-7f762a010000 r-xp 00000000 00:24 21467                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/enc/encdb.so\r\n7f762a010000-7f762a20f000 ---p 00002000 00:24 21467                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/enc/encdb.so\r\n7f762a20f000-7f762a210000 r--p 00001000 00:24 21467                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/enc/encdb.so\r\n7f762a210000-7f762a211000 rw-p 00002000 00:24 21467                      /opt/circleci/ruby/ruby-2.4.0/lib/ruby/2.4.0/x86_64-linux/enc/encdb.so\r\n7f762a211000-7f762a3cf000 r-xp 00000000 00:24 550881                     /lib/x86_64-linux-gnu/libc-2.19.so\r\n7f762a3cf000-7f762a5cf000 ---p 001be000 00:24 550881                     /lib/x86_64-linux-gnu/libc-2.19.so\r\n7f762a5cf000-7f762a5d3000 r--p 001be000 00:24 550881                     /lib/x86_64-linux-gnu/libc-2.19.so\r\n7f762a5d3000-7f762a5d5000 rw-p 001c2000 00:24 550881                     /lib/x86_64-linux-gnu/libc-2.19.so\r\n7f762a5d5000-7f762a5da000 rw-p 00000000 00:00 0 \r\n7f762a5da000-7f762a6df000 r-xp 00000000 00:24 550858                     /lib/x86_64-linux-gnu/libm-2.19.so\r\n7f762a6df000-7f762a8de000 ---p 00105000 00:24 550858                     /lib/x86_64-linux-gnu/libm-2.19.so\r\n7f762a8de000-7f762a8df000 r--p 00104000 00:24 550858                     /lib/x86_64-linux-gnu/libm-2.19.so\r\n7f762a8df000-7f762a8e0000 rw-p 00105000 00:24 550858                     /lib/x86_64-linux-gnu/libm-2.19.so\r\n7f762a8e0000-7f762a8e9000 r-xp 00000000 00:24 550902                     /lib/x86_64-linux-gnu/libcrypt-2.19.so\r\n7f762a8e9000-7f762aae9000 ---p 00009000 00:24 550902                     /lib/x86_64-linux-gnu/libcrypt-2.19.so\r\n7f762aae9000-7f762aaea000 r--p 00009000 00:24 550902                     /lib/x86_64-linux-gnu/libcrypt-2.19.so\r\n7f762aaea000-7f762aaeb000 rw-p 0000a000 00:24 550902                     /lib/x86_64-linux-gnu/libcrypt-2.19.so\r\n7f762aaeb000-7f762ab19000 rw-p 00000000 00:00 0 \r\n7f762ab19000-7f762ab1c000 r-xp 00000000 00:24 550885                     /lib/x86_64-linux-gnu/libdl-2.19.so\r\n7f762ab1c000-7f762ad1b000 ---p 00003000 00:24 550885                     /lib/x86_64-linux-gnu/libdl-2.19.so\r\n7f762ad1b000-7f762ad1c000 r--p 00002000 00:24 550885                     /lib/x86_64-linux-gnu/libdl-2.19.so\r\n7f762ad1c000-7f762ad1d000 rw-p 00003000 00:24 550885                     /lib/x86_64-linux-gnu/libdl-2.19.so\r\n7f762ad1d000-7f762ad36000 r-xp 00000000 00:24 550886                     /lib/x86_64-linux-gnu/libpthread-2.19.so\r\n7f762ad36000-7f762af35000 ---p 00019000 00:24 550886                     /lib/x86_64-linux-gnu/libpthread-2.19.so\r\n7f762af35000-7f762af36000 r--p 00018000 00:24 550886                     /lib/x86_64-linux-gnu/libpthread-2.19.so\r\n7f762af36000-7f762af37000 rw-p 00019000 00:24 550886                     /lib/x86_64-linux-gnu/libpthread-2.19.so\r\n7f762af37000-7f762af3b000 rw-p 00000000 00:00 0 \r\n7f762af3b000-7f762af5e000 r-xp 00000000 00:24 550900                     /lib/x86_64-linux-gnu/ld-2.19.so\r\n7f762afb5000-7f762b05c000 r--s 00000000 00:24 417731                     /usr/lib/debug/lib/x86_64-linux-gnu/libpthread-2.19.so\r\n7f762b05c000-7f762b15d000 rw-p 00000000 00:00 0 \r\n7f762b15d000-7f762b15e000 r--p 00022000 00:24 550900                     /lib/x86_64-linux-gnu/ld-2.19.so\r\n7f762b15e000-7f762b15f000 rw-p 00023000 00:24 550900                     /lib/x86_64-linux-gnu/ld-2.19.so\r\n7f762b15f000-7f762b160000 rw-p 00000000 00:00 0 \r\n7f762b160000-7f762b460000 r-xp 00000000 00:24 17298                      /opt/circleci/ruby/ruby-2.4.0/bin/ruby\r\n7f762b49b000-7f762b4be000 r--s 00000000 00:24 550886                     /lib/x86_64-linux-gnu/libpthread-2.19.so\r\n7f762b4be000-7f762b647000 r--p 00000000 00:24 428659                     /usr/lib/locale/locale-archive\r\n7f762b647000-7f762b64b000 rw-p 00000000 00:00 0 \r\n7f762b652000-7f762b653000 rw-p 00000000 00:00 0 \r\n7f762b653000-7f762b65a000 r--s 00000000 00:24 404631                     /usr/lib/x86_64-linux-gnu/gconv/gconv-modules.cache\r\n7f762b65a000-7f762b65b000 ---p 00000000 00:00 0 \r\n7f762b65b000-7f762b660000 rw-p 00000000 00:00 0                          [stack:117957]\r\n7f762b660000-7f762b665000 r--p 00300000 00:24 17298                      /opt/circleci/ruby/ruby-2.4.0/bin/ruby\r\n7f762b665000-7f762b666000 rw-p 00305000 00:24 17298                      /opt/circleci/ruby/ruby-2.4.0/bin/ruby\r\n7f762b666000-7f762b678000 rw-p 00000000 00:00 0 \r\n7f762d1a8000-7f762e6eb000 rw-p 00000000 00:00 0                          [heap]\r\n7fffa53b1000-7fffa5bb0000 rw-p 00000000 00:00 0 \r\n7fffa5bd4000-7fffa5bd6000 r-xp 00000000 00:00 0                          [vdso]\r\nffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]\r\n\r\n\r\n[NOTE]\r\nYou may have encountered a bug in the Ruby interpreter or extension libraries.\r\nBug reports are welcome.\r\nFor details: http://www.ruby-lang.org/bugreport.html\r\n```\r\n\r\n</details>\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3771/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fis": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3766", "title": "Bazel workspace name mismatch for @com_google_protobuf_cc causes build warnings", "body": "Bazel's native `proto_library` rules have an implicit dependency on `@com_google_protobuf//:protoc`, while `cc_proto_library` rules have one on `@com_google_protobuf_cc//:cc_toolchain`. I believe the normal way of configuring a Bazel project to use these rules is to point both the plain and `_cc` remote repositories at the code in this GitHub repository.\r\n\r\nWith the recent addition of `workspace(name = \"com_google_protobuf\")` in the protobuf `WORKSPACE` file, any use of `cc_proto_library` (after pointing it at this code) is now causing the following warning:\r\n\r\n`WARNING: /.../external/com_google_protobuf_cc/WORKSPACE:1: Workspace name in /.../external/com_google_protobuf_cc/WORKSPACE (@com_google_protobuf) does not match the name given in the repository's definition (@com_google_protobuf_cc); this will cause a build error in future versions`\r\n\r\nThere's an analogous issue for `java_proto_library`'s implicit dependency on `@com_google_protobuf_java`, which could also be pointed at the same codebase. (`java_lite_proto_library` manages to avoid this because the `javalite` branch doesn't have the workspace name definition.)\r\n\r\nFWIW, I'm not really sure whether this counts as a protobuf issue or a Bazel issue.\r\n\r\nI've managed to partially work around the issue by using `build --proto_toolchain_for_cc=@com_google_protobuf//:cc_toolchain` in my project's `bazel.rc`, but that does not work for example for \"bazel query\", which has no equivalent flag.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jyaif": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3759", "title": "\"missing-noescape\" when building Objective-C library with latest clang", "body": "Clang recently introduced the \"missing-noescape\" warning. This results in a new warning that prevents from building the Objective-C library:\r\n\r\n/third_party/protobuf/objectivec/GPBArray.m:2540:82: error: parameter of overriding method should be annotated with __attribute__((noescape)) [-Werror,-Wmissing-noescape]\r\n- (void)enumerateObjectsUsingBlock:(void (^)(id obj, NSUInteger idx, BOOL *stop))block {\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MartinDong": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3742", "title": "kotlin  support request", "body": "please support convert to kotlin", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3742/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "varun85gupta": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3730", "title": "Unable to build protobuf on AIX with xlC ", "body": "I am trying to build protobuf on AIX 7.1 using xlC and xlc compilers but configure fails to detect sched_yield on the system which is present. I checked it using man page for sched_yield\r\n\r\n\r\n```\r\n./configure CXX=xlC CC=xlc CPPFLAGS=\"-I/usr/vac/include\"\r\nchecking whether to enable maintainer-specific portions of Makefiles... yes\r\nchecking build system type... powerpc-ibm-aix7.1.0.0\r\nchecking host system type... powerpc-ibm-aix7.1.0.0\r\nchecking target system type... powerpc-ibm-aix7.1.0.0\r\nchecking for a BSD-compatible install... ./install-sh -c\r\nchecking whether build environment is sane... yes\r\nchecking for a thread-safe mkdir -p... ./install-sh -c -d\r\nchecking for gawk... no\r\nchecking for mawk... no\r\nchecking for nawk... nawk\r\nchecking whether make sets $(MAKE)... yes\r\nchecking whether make supports nested variables... yes\r\nchecking whether UID '9000' is supported by ustar format... yes\r\nchecking whether GID '100' is supported by ustar format... yes\r\nchecking how to create a ustar tar archive... plaintar\r\nchecking for gcc... xlc\r\nchecking whether the C compiler works... yes\r\nchecking for C compiler default output file name... a.out\r\nchecking for suffix of executables...\r\nchecking whether we are cross compiling... no\r\nchecking for suffix of object files... o\r\nchecking whether we are using the GNU C compiler... no\r\nchecking whether xlc accepts -g... yes\r\nchecking for xlc option to accept ISO C89... none needed\r\nchecking whether xlc understands -c and -o together... yes\r\nchecking for style of include used by make... GNU\r\nchecking dependency style of xlc... xlc\r\nchecking whether we are using the GNU C++ compiler... no\r\nchecking whether xlC accepts -g... yes\r\nchecking dependency style of xlC... xlc\r\nchecking how to run the C preprocessor... xlc -E\r\nchecking for gcc... gcc\r\nchecking whether we are using the GNU C compiler... (cached) no\r\nchecking whether gcc accepts -g... yes\r\nchecking for gcc option to accept ISO C89... (cached) none needed\r\nchecking whether gcc understands -c and -o together... (cached) yes\r\nchecking dependency style of gcc... (cached) xlc\r\nchecking how to run the C preprocessor... gcc -E\r\nchecking how to run the C++ preprocessor... xlC -E\r\nchecking for g++... g++\r\nchecking whether we are using the GNU C++ compiler... (cached) no\r\nchecking whether g++ accepts -g... yes\r\nchecking dependency style of g++... (cached) xlc\r\nchecking how to run the C++ preprocessor... g++ -E\r\nchecking for grep that handles long lines and -e... /usr/bin/grep\r\nchecking for egrep... /usr/bin/grep -E\r\nchecking for ANSI C header files... yes\r\nchecking for sys/types.h... yes\r\nchecking for sys/stat.h... yes\r\nchecking for stdlib.h... yes\r\nchecking for string.h... yes\r\nchecking for memory.h... yes\r\nchecking for strings.h... yes\r\nchecking for inttypes.h... yes\r\nchecking for stdint.h... yes\r\nchecking for unistd.h... yes\r\nchecking minix/config.h usability... no\r\nchecking minix/config.h presence... no\r\nchecking for minix/config.h... no\r\nchecking whether it is safe to define __EXTENSIONS__... yes\r\nchecking for ar... ar\r\nchecking the archiver (ar) interface... ar\r\nchecking for gcc... gcc\r\nchecking whether we are using the GNU Objective C compiler... no\r\nchecking whether gcc accepts -g... no\r\nchecking dependency style of gcc... gcc3\r\nchecking C++ compiler flags...... use default:   -DNDEBUG\r\nchecking whether __SUNPRO_CC is declared... no\r\nchecking how to print strings... print -r\r\nchecking for a sed that does not truncate output... /usr/bin/sed\r\nchecking for fgrep... /usr/bin/grep -F\r\nchecking for non-GNU ld... /usr/bin/ld\r\nchecking if the linker (/usr/bin/ld) is GNU ld... no\r\nchecking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B\r\nchecking the name lister (/usr/bin/nm -B) interface... BSD nm\r\nchecking whether ln -s works... yes\r\nchecking the maximum length of command line arguments... 786432\r\nchecking whether the shell understands some XSI constructs... yes\r\nchecking whether the shell understands \"+=\"... no\r\nchecking how to convert powerpc-ibm-aix7.1.0.0 file names to powerpc-ibm-aix7.1.0.0 format... func_convert_file_noop\r\nchecking how to convert powerpc-ibm-aix7.1.0.0 file names to toolchain format... func_convert_file_noop\r\nchecking for /usr/bin/ld option to reload object files... -r\r\nchecking for objdump... no\r\nchecking how to recognize dependent libraries... pass_all\r\nchecking for dlltool... no\r\nchecking how to associate runtime and link libraries... print -r --\r\nchecking for archiver @FILE support... no\r\nchecking for strip... strip\r\nchecking for ranlib... ranlib\r\nchecking command to parse /usr/bin/nm -B output from xlc object... ok\r\nchecking for sysroot... no\r\nchecking for mt... mt\r\nchecking if mt is a manifest tool... no\r\nchecking for dlfcn.h... yes\r\nchecking for objdir... .libs\r\nchecking for xlc option to produce PIC...  -DPIC\r\nchecking if xlc PIC flag  -DPIC works... yes\r\nchecking if xlc static flag -bnso -bI:/lib/syscalls.exp works... no\r\nchecking if xlc supports -c -o file.o... yes\r\nchecking if xlc supports -c -o file.o... (cached) yes\r\nchecking whether the xlc linker (/usr/bin/ld) supports shared libraries... yes\r\nchecking dynamic linker characteristics... aix7.1.0.0 ld.so\r\nchecking how to hardcode library paths into programs... immediate\r\nchecking whether stripping libraries is possible... no\r\nchecking if libtool supports shared libraries... yes\r\nchecking whether to build shared libraries... yes\r\nchecking whether to build static libraries... no\r\nchecking how to run the C++ preprocessor... xlC -E\r\nchecking whether the xlC linker (/usr/bin/ld) supports shared libraries... yes\r\nchecking for xlC option to produce PIC...  -DPIC\r\nchecking if xlC PIC flag  -DPIC works... yes\r\nchecking if xlC static flag -bnso -bI:/lib/syscalls.exp works... no\r\nchecking if xlC supports -c -o file.o... yes\r\nchecking if xlC supports -c -o file.o... (cached) yes\r\nchecking whether the xlC linker (/usr/bin/ld) supports shared libraries... yes\r\nchecking dynamic linker characteristics... aix7.1.0.0 ld.so\r\nchecking how to hardcode library paths into programs... immediate\r\nchecking whether the linker supports version scripts... no\r\nchecking for ANSI C header files... (cached) yes\r\nchecking fcntl.h usability... yes\r\nchecking fcntl.h presence... yes\r\nchecking for fcntl.h... yes\r\nchecking for inttypes.h... (cached) yes\r\nchecking limits.h usability... yes\r\nchecking limits.h presence... yes\r\nchecking for limits.h... yes\r\nchecking for stdlib.h... (cached) yes\r\nchecking for unistd.h... (cached) yes\r\nchecking for working memcmp... yes\r\nchecking for working strtod... yes\r\nchecking for ftruncate... yes\r\nchecking for memset... yes\r\nchecking for mkdir... yes\r\nchecking for strchr... yes\r\nchecking for strerror... yes\r\nchecking for strtol... yes\r\nchecking zlib version... headers missing or too old (requires 1.2.0.4)\r\nchecking for the pthreads library -lpthreads... yes\r\nchecking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE\r\nchecking if more special flags are required for pthreads... -D_THREAD_SAFE\r\nchecking for xlc_r... xlc_r\r\nchecking whether to check for GCC pthread/shared inconsistencies... no\r\nchecking whether what we have so far is sufficient with -nostdlib... no\r\nchecking whether -lpthread saves the day... no\r\nconfigure: WARNING: Impossible to determine how to use pthreads with shared libraries and -nostdlib\r\nchecking the location of hash_map...\r\nconfigure: WARNING: could not find an STL hash_map\r\nchecking for library containing sched_yield... no\r\nconfigure: error: in `/usr/u/qaunix/protobuf-3.4.1':\r\nconfigure: error: sched_yield was not found on your system\r\nSee `config.log' for more details\r\n```\r\n\r\n\r\n\r\nIn config.log \r\n```\r\nconfigure:19229: checking for library containing sched_yield\r\nconfigure:19260: xlC -o conftest  -DNDEBUG -I/usr/vac/include  conftest.cpp  >&5\r\n\"/usr/include/sys/atomic_op.h\", line 123.9: 1540-1411 (W) \"pragma mc_func\" must be specified in global scope. The pragma is ignored.\r\n\"/usr/include/sys/atomic_op.h\", line 126.9: 1540-1411 (W) \"pragma mc_func\" must be specified in global scope. The pragma is ignored.\r\n\"/usr/include/sys/atomic_op.h\", line 129.9: 1540-1411 (W) \"pragma mc_func\" must be specified in global scope. The pragma is ignored.\r\n\"/usr/include/sys/atomic_op.h\", line 132.9: 1540-1411 (W) \"pragma mc_func\" must be specified in global scope. The pragma is ignored.\r\n\"/usr/include/sys/types.h\", line 43.12: 1540-0063 (S) The text \"{\" is unexpected.\r\n\"/usr/include/sys/sched.h\", line 77.51: 1540-0064 (S) Syntax error:  \"(\" was expected but \"*\" was found.\r\n\"/usr/include/sys/sched.h\", line 79.55: 1540-0064 (S) Syntax error:  \"(\" was expected but \"*\" was found.\r\n\"/usr/include/sys/sched.h\", line 80.57: 1540-0064 (S) Syntax error:  \"(\" was expected but \"*\" was found.\r\n\"/usr/include/sys/sched.h\", line 81.39: 1540-0064 (S) Syntax error:  \"(\" was expected but \",\" was found.\r\n\"/usr/include/time.h\", line 137.25: 1540-0040 (S) The text \"strftime\" is unexpected.  \"size_t\" may be undeclared or ambiguous.\r\n\"/usr/include/time.h\", line 138.25: 1540-0040 (S) The text \"clock\" is unexpected.  \"clock_t\" may be undeclared or ambiguous.\r\n\"/usr/include/time.h\", line 140.25: 1540-0040 (S) The text \"mktime\" is unexpected.  \"time_t\" may be undeclared or ambiguous.\r\n\"/usr/include/time.h\", line 142.25: 1540-0040 (S) The text \"time\" is unexpected.  \"time_t\" may be undeclared or ambiguous.\r\n\"/usr/include/time.h\", line 145.45: 1540-0040 (S) The text \"*\" is unexpected.  \"time_t\" may be undeclared or ambiguous.\r\n\"/usr/include/time.h\", line 146.43: 1540-0040 (S) The text \"*\" is unexpected.  \"time_t\" may be undeclared or ambiguous.\r\n\"/usr/include/time.h\", line 147.46: 1540-0040 (S) The text \"*\" is unexpected.  \"time_t\" may be undeclared or ambiguous.\r\n\"/usr/include/time.h\", line 158.47: 1540-0040 (S) The text \"*\" is unexpected.  \"time_t\" may be undeclared or ambiguous.\r\n\"/usr/include/time.h\", line 159.48: 1540-0040 (S) The text \"*\" is unexpected.  \"time_t\" may be undeclared or ambiguous.\r\n\"/usr/include/time.h\", line 160.51: 1540-0040 (S) The text \"*\" is unexpected.  \"time_t\" may be undeclared or ambiguous.\r\n\"/usr/include/time.h\", line 230.22: 1540-1118 (S) The declaration of \"it_interval\" uses the undefined class \"timespec\" when the class must be complete.\r\n\"/usr/include/time.h\", line 240.52: 1540-0064 (S) Syntax error:  \"(\" was expected but \"*\" was found.\r\n\"/usr/include/time.h\", line 241.53: 1540-0064 (S) Syntax error:  \"(\" was expected but \"*\" was found.\r\n\"/usr/include/time.h\", line 242.59: 1540-0064 (S) Syntax error:  \"(\" was expected but \"*\" was found.\r\n\"/usr/include/time.h\", line 243.50: 1540-0063 (S) The text \")\" is unexpected.\r\n\"/usr/include/time.h\", line 248.41: 1540-0064 (S) Syntax error:  \"(\" was expected but \"*\" was found.\r\n\"/usr/include/time.h\", line 251.53: 1540-0064 (S) Syntax error:  \"(\" was expected but \"*\" was found.\r\n\"/usr/include/time.h\", line 253.38: 1540-0064 (S) Syntax error:  \"(\" was expected but \",\" was found.\r\n\"/usr/include/time.h\", line 257.42: 1540-0064 (S) Syntax error:  \"(\" was expected but \",\" was found.\r\n\"/usr/include/time.h\", line 275.36: 1540-0063 (S) The text \"size_t\" is unexpected.\r\n\"/usr/include/time.h\", line 296.41: 1540-0040 (S) The text \"*\" is unexpected.  \"time64_t\" may be undeclared or ambiguous.\r\n\"/usr/include/time.h\", line 297.50: 1540-0040 (S) The text \"*\" is unexpected.  \"time64_t\" may be undeclared or ambiguous.\r\n\"/usr/include/time.h\", line 298.47: 1540-0040 (S) The text \"*\" is unexpected.  \"time64_t\" may be undeclared or ambiguous.\r\n\"/usr/include/time.h\", line 300.21: 1540-0040 (S) The text \"mktime64\" is unexpected.  \"time64_t\" may be undeclared or ambiguous.\r\n\"/usr/include/time.h\", line 302.21: 1540-0040 (S) The text \"time64\" is unexpected.  \"time64_t\" may be undeclared or ambiguous.\r\n\"/usr/include/time.h\", line 304.43: 1540-0040 (S) The text \"*\" is unexpected.  \"time64_t\" may be undeclared or ambiguous.\r\n\"/usr/include/time.h\", line 305.52: 1540-0040 (S) The text \"*\" is unexpected.  \"time64_t\" may be undeclared or ambiguous.\r\n\"/usr/include/time.h\", line 307.49: 1540-0040 (S) The text \"*\" is unexpected.  \"time64_t\" may be undeclared or ambiguous.\r\n\"/usr/include/sys/sched.h\", line 78.29: 1540-0274 (S) The name lookup for \"pid_t\" did not find a declaration.\r\n\"/usr/include/time.h\", line 139.34: 1540-0274 (S) The name lookup for \"time_t\" did not find a declaration.\r\n\"/usr/include/time.h\", line 250.25: 1540-0274 (S) The name lookup for \"timer_t\" did not find a declaration.\r\n\"/usr/include/time.h\", line 252.29: 1540-0274 (S) The name lookup for \"timer_t\" did not find a declaration.\r\n\"/usr/include/time.h\", line 301.30: 1540-0274 (S) The name lookup for \"time64_t\" did not find a declaration.\r\nconfigure:19260: $? = 1\r\n\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "publicD3vRepository": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3727", "title": "(JAVA) Send custom bytes with request", "body": "hi all,\r\nI need to modify my message request.\r\n\r\n\r\n// Example\r\nmessage Test {\r\n  required int32 a = 1;\r\n}\r\nset a to 150 -> 08 96 01 (encoded)\r\nsize 3 bytes = 33(encoded)\r\n\r\ni want to send request like this   33 08 96 01\r\n\r\nservice MyService {\r\nrpc send (Test) returns (SomeReponse){}\r\n}\r\n i tried ClientInterceptor, but i cant modify request from 08 96 01  -> 33 08 96 01\r\n\r\n\r\ni tried send bytes\r\nmessage Wrapper {\r\n    bytes byte = 1;\r\n}\r\nThis will encode again 0A 03  33 08 96 01\r\n\r\ni need something like \r\nservice MyService {\r\nrpc send (ByteString) returns (SomeReponse){}\r\n}\r\n\r\ni want to send custom encoded structure.\r\n\r\nAny ideas?\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vaibhavsood": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3726", "title": "Protobuf docker image", "body": "Hi,\r\n\r\nWant to check if there is a docker image/Dockerfile for protobuf which is officially supported? I could not find one under dockerhub official images https://hub.docker.com/explore/\r\n\r\nIf not, want to check if there is any plan to add an official protobuf image to dockerhub? https://docs.docker.com/docker-hub/official_repos/#how-do-i-create-a-new-official-repository", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jmillikin-stripe": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3721", "title": "Ruby MessageExts should define to_json with an `options` parameter", "body": "The Ruby standard JSON module assumes `to_json` methods have a single positional parameter for propagating serialization options down the call stack. The protobuf `MessageExts` module ([message_exts.rb](https://github.com/google/protobuf/blob/master/ruby/lib/google/protobuf/message_exts.rb)) defines `to_json` with no parameters, which causes errors when serializing containers:\r\n\r\n```ruby\r\n# $ ruby test_json.rb \r\n# test_json.rb:3:in `to_json': wrong number of arguments (1 for 0) (ArgumentError)\r\n# \tfrom test_json.rb:7:in `to_json'\r\n# \tfrom test_json.rb:7:in `<main>'\r\nrequire 'json'\r\nclass Foo \r\n  def to_json\r\n    'FOO'\r\n  end \r\nend\r\nputs [Foo.new].to_json\r\n\r\n# $ ruby test_json.rb \r\n# [FOO]\r\nrequire 'json'\r\nclass Foo\r\n  def to_json(opts)\r\n    'FOO'\r\n  end\r\nend\r\nputs [Foo.new].to_json\r\n```", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/aff10976fc7722b1174fc3dcce15bfe8ebdfcbcd", "message": "Fix undefined memory management found by Clang's sanitizers.\n\nSee https://github.com/google/protobuf/issues/3752 for context."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fhermeni": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3718", "title": "protoc-3.1.0 for linux-x86.64 is linked to GLIBC2.14", "body": "Hi\r\n\r\nHaving pre-compiled binaries for protoc inside the maven repository is awesome and simplified my daily life. However, some of the machines I am using to compile the proto files are using a GLIBC 2.12. so the compilation fails in that context and I have to go back to some maven gymnastic to make everything fine.\r\n\r\nWould it be possible to have protoc statically linked to prevent that situation ? ", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chicoxyzzy": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3716", "title": "WebAssembly module for protobuf encoding / decoding", "body": "Are there any plans on wasm implementation of protobufs?", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Peter-Levine": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3711", "title": "Building no-warning-test fails with -Og in CXXFLAGS", "body": "When building with GCC, inclusion of `-Og` in `CXXFLAGS` causes `make check` to fail with errors such as:\r\n\r\n```\r\nIn file included from google/protobuf/compiler/cpp/cpp_test_bad_identifiers.pb.cc:5:0:\r\n./google/protobuf/compiler/cpp/cpp_test_bad_identifiers.pb.h: In member function \u2018virtual bool protobuf_unittest::TestConflictingEnumNames::MergePartialFromCodedStream(google::protobuf::io::CodedInputStream*)\u2019:\r\n./google/protobuf/compiler/cpp/cpp_test_bad_identifiers.pb.h:3798:21: error: \u2018value\u2019 may be used uninitialized in this function [-Werror=maybe-uninitialized]\r\n   conflicting_enum_ = value;\r\n   ~~~~~~~~~~~~~~~~~~^~~~~~~\r\ngoogle/protobuf/compiler/cpp/cpp_test_bad_identifiers.pb.cc:6765:15: note: \u2018value\u2019 was declared here\r\n           int value;\r\n               ^~~~~\r\n```\r\n\r\nThis appears to be related to [Bug 58455 - spurious \"may be used uninitialized\" warning with -Og](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=58455) and [Bug 42145 - bogus \"may be used uninitialized\" (a || b converted to a|b)](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=42145).  As part of protobuf gets built with `-Werror`, such spurious warnings become fatal.\r\n\r\nTested with protobuf-3.3.0 using GCC-5.4.0 and GCC-6.4.0.\r\n\r\nSee also [Bug 618150 - dev-libs/protobuf-3.3.0 - error: 'value' may be used uninitialized in this function [-Werror=maybe-uninitialized]](https://bugs.gentoo.org/618150)", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ethernomad": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3704", "title": "JS compiler generates invalid code", "body": "protoc 3.4.0 generated this:\r\n\r\n```\r\n/** @param {string} value */\r\nproto.PastebinMixin.prototype.setText = function(value) {\r\n  jspb.Message.setProto3StringField(this, 1, value);\r\n};\r\n```\r\n\r\nBut I have to manually change it to this to work:\r\n```\r\n/** @param {string} value */\r\nproto.PastebinMixin.prototype.setText = function(value) {\r\n  jspb.Message.setField(this, 1, value);\r\n};\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3704/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "paridhisrivastava": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3671", "title": "Problems with Python Layer: Protobuf Internal Error - Mutex Lock", "body": "Hi, \r\nI am trying to run a Caffe model which includes a python layer. Initially, when I tried to run the model prototxt file, I got an error asking me to update the version of Protocol Buffer to 3.4.0. So I did that by building from the source code. I have also upgraded the protobuf package in python to version 3.4.0. After doing this and rebuilding caffe, I'm getting the following error on running a prototxt file containing the python layer. [Please note that this error does not generate when I run another model without Python layer.]\r\n\r\n*** Aborted at 1506013588 (unix time) try \"date -d @1506013588\" if you are using GNU date ***\r\nPC: @     0x7f7cb3719516 google::protobuf::internal::Mutex::Lock()\r\n*** SIGSEGV (@0x0) received by PID 26314 (TID 0x7f7d9961e740) from PID 0; stack trace: ***\r\n    @     0x7f7d961dc4b0 (unknown)\r\n    @     0x7f7cb3719516 google::protobuf::internal::Mutex::Lock()\r\n    @     0x7f7cb3719833 google::protobuf::internal::OnShutdown()\r\n    @     0x7f7d994686ba (unknown)\r\n    @     0x7f7d994687cb (unknown)\r\n    @     0x7f7d9946d8e2 (unknown)\r\n    @     0x7f7d99468564 (unknown)\r\n    @     0x7f7d9946cda9 (unknown)\r\n    @     0x7f7d8815ef09 (unknown)\r\n    @     0x7f7d99468564 (unknown)\r\n    @     0x7f7d8815f571 (unknown)\r\n    @     0x7f7d8815efa1 dlopen\r\n    @     0x7f7d969bda69 _PyImport_FindSharedFuncptr\r\n    @     0x7f7d96976ea2 _PyImport_LoadDynamicModuleWithSpec\r\n    @     0x7f7d9697a7e7 (unknown)\r\n    @     0x7f7d96827199 PyCFunction_Call\r\n    @     0x7f7d9694273e PyEval_EvalFrameEx\r\n    @     0x7f7d969d1c0c (unknown)\r\n    @     0x7f7d9693fe09 PyEval_EvalFrameEx\r\n    @     0x7f7d96941509 PyEval_EvalFrameEx\r\n    @     0x7f7d96941509 PyEval_EvalFrameEx\r\n    @     0x7f7d96941509 PyEval_EvalFrameEx\r\n    @     0x7f7d96941509 PyEval_EvalFrameEx\r\n    @     0x7f7d969d1c0c (unknown)\r\n    @     0x7f7d969d1ce3 PyEval_EvalCodeEx\r\n    @     0x7f7d96859a98 (unknown)\r\n    @     0x7f7d969008ee PyObject_Call\r\n    @     0x7f7d968fbf0f _PyObject_CallMethodIdObjArgs\r\n    @     0x7f7d96978824 PyImport_ImportModuleLevelObject\r\n    @     0x7f7d96945588 (unknown)\r\n    @     0x7f7d968271b9 PyCFunction_Call\r\n    @     0x7f7d969008ee PyObject_Call\r\n\r\n\r\nAlso, I'm using Ubuntu 16.04. \r\n\r\nAny help/pointers would be appreciated. \r\nThanks!", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ezyang": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3658", "title": "Handle field access with Python 2 unicode literals", "body": "I was a bit perplexed by the following error:\r\n\r\n```\r\nfrom __future__ import unicode_literals\r\nimport mything_pb\r\np = mything_pb.MyProto()\r\np.ClearField(\"my_field\")\r\n```\r\n\r\nThis doesn't work on Python 2, it will throw:\r\n\r\n```\r\nTypeError: field name must be a string\r\n```\r\n\r\nThis is because `unicode_literals` turns the string literal into a Unicode literal, but Python protobufs is only doing a native string test to decide if the field name is OK or not. It would be great if it could handle both cases. (This code works on Python 3 because Unicode strings are the \"native\" string.)\r\n\r\nTo work around this problem, call `future.utils.bytes_to_native_str` on a binary string literal first.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bryanvpham": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3650", "title": "Issue with JRuby", "body": "Used `protoc` to generate `at.rb`.  My `main.rb` literally just includes `at.rb` and outputs \"hello world\". \r\n\r\nI built the gem from scratch following the instructions in the readme. Tried running my simple ruby program that \r\n\r\n```\r\nRuntimeError: headers.key: \"key\" is already defined in \"headers\".\r\n    build at com/google/protobuf/jruby/RubyDescriptorPool.java:84\r\n   <main> at /root/work/at/at.rb:6\r\n  require at org/jruby/RubyKernel.java:955\r\n   (root) at uri:classloader:/jruby/kernel/kernel.rb:1\r\n   <main> at main.rb:1\r\n```", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "magick93": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3644", "title": "Compiling on a 32bit docker image", "body": "Hello\r\n\r\nIm trying to compile Protobuf from source, during the build process of a docker image. \r\nThe docker image is 32bit, but is intended to run on a 64bit host.\r\n\r\nThe build of the docker image was successful, but when I try to run protoc I cant. \r\nFor example, I get:\r\n\r\n```\r\nfile /usr/local/bin/protoc          \r\n/usr/local/bin/protoc: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.18, BuildID[sha1]=e87bf6eb1c507bb7f65f3c7687df6a3b41b563be, stripped\r\n```\r\n\r\nAnd also\r\n`bash: /usr/local/bin/protoc: No such file or directory`\r\n\r\nSo it seems, while the docker container is - in many ways 32 bit - the compilation was 64bit.\r\n\r\nMy question therefore is, how can I compile protobuffers to be 32 bit?\r\n\r\nThanks\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ta32": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3638", "title": "[Python] linters should discover when you mistype a property ", "body": "I expected generated code from IDL, would allow python linters to generate warnings if you mistype a property or fill with the wrong type.\r\n\r\nThis would present an advantage over passing around JSON. Would it be possible to add type hints or do something to make static checking work with protobuf classes for python?\r\n\r\nIs this an issue for the linters or is it something that can be improved in protobuf. \r\n\r\nPeople are complaining about this.\r\nhttps://stackoverflow.com/questions/43674028/how-do-you-tell-pylint-what-the-members-of-a-protobuf-generated-object-are \r\n\r\nhttps://github.com/grpc/grpc/issues/10547", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "IronsDu": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3636", "title": "provide Importer .proto from memory", "body": "Now, Importer .proto only from file, https://github.com/google/protobuf/blob/master/src/google/protobuf/compiler/importer.h#L167,\r\n\r\nCan you provide dynamic compiler .proto from memory(.proto content string) ?\r\n\r\nLike this:\r\n\r\n`std::string protoContent = std::string(\"//here is proto file content\")`\r\n\r\n`DiskSourceTree sourceTree;`\r\n`sourceTree.MapPath(\"\", \"./\");`\r\n`Importer importer(&sourceTree, NULL);`\r\n\r\n**`importer.importFromString(protoContent);`**", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lukesneeringer": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3631", "title": "KeyError: \"Couldn't find field google.protobuf.DescriptorProto.ExtensionRange.options\" when  import datastore", "body": "_From @tianqig on September 13, 2017 12:1_\n\nJust installed google-cloud (0.27.0) on my Mac OS X EI Capitan\r\nPython 2.7\r\nAnaconda \r\n\r\nunder a root env. when running: testLog.py \r\n```\r\n#Retrieve Datastore Entities\r\nfrom google.cloud import datastore\r\nclient = datastore.Client()\r\nproduct_key = client.key('Product', 123)\r\nprint(client.get(product_key))\r\n```\r\n\r\nGot following messages:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"testLog.py\", line 3, in <module>\r\n    from google.cloud import datastore\r\n  File \"/Users/David/anaconda/lib/python2.7/site-packages/google/cloud/datastore/__init__.py\", line 60, in <module>\r\n    from google.cloud.datastore.batch import Batch\r\n  File \"/Users/David/anaconda/lib/python2.7/site-packages/google/cloud/datastore/batch.py\", line 24, in <module>\r\n    from google.cloud.datastore import helpers\r\n  File \"/Users/David/anaconda/lib/python2.7/site-packages/google/cloud/datastore/helpers.py\", line 23, in <module>\r\n    from google.protobuf import struct_pb2\r\n  File \"/Users/David/anaconda/lib/python2.7/site-packages/google/protobuf/struct_pb2.py\", line 11, in <module>\r\n    from google.protobuf import descriptor_pb2\r\n  File \"/Users/David/anaconda/lib/python2.7/site-packages/google/protobuf/descriptor_pb2.py\", line 409, in <module>\r\n    options=None),\r\n  File \"/Users/David/anaconda/lib/python2.7/site-packages/google/protobuf/descriptor.py\", line 501, in __new__\r\n    return _message.default_pool.FindFieldByName(full_name)\r\nKeyError: \"Couldn't find field google.protobuf.DescriptorProto.ExtensionRange.options\"\r\n\r\n```\r\n\r\nPlease help, thanks\n\n_Copied from original issue: GoogleCloudPlatform/google-cloud-python#3948_", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "denisiussion": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3625", "title": "C++11 enum class", "body": "It would be great use 'enum class' in the C++11 code generation.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3625/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mvdstam": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3623", "title": "PHP and proto2", "body": "Hi,\r\n\r\nAt the time of writing, the PHP implementation of protobuf doesn't support files written in `proto2` format. Are there any plans on making the PHP implementation backwards compatible with `proto2` files?\r\n\r\nThanks!", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/3622", "title": "PHP and well-known-types", "body": "Hi,\r\n\r\nA lot of [well-known types](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf) aren't implemented in the PHP implementation as of this moment. Is this on the roadmap?\r\n\r\nThanks!", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3622/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hadrielk": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3615", "title": "Max float encoded into JSON cannot be decoded back again", "body": "Hi, using the protobuf C++ API on a Centos system, encoding a `FLT_MAX` value into JSON yields:\r\n\r\n```json\r\n{ \"float_value\": 3.4028235e+38 }\r\n```\r\n...but when deserializing that back into protobuf, I get the following error:\r\n```\r\nINVALID_ARGUMENT:float_value: invalid value 3.4028235e+38 for type TYPE_FLOAT\r\n```\r\nThat's because `3.4028235e+38` is actually a rounded-up value of float's actual maximum, which is something like `3.402823466e+38`.\r\n\r\nInternally protobuf decodes it in `util::converter::SafeStrToFloat()` in `utility.cc`, I believe; and in that function it actually decodes it to a `double` first, and then checks if the double is bigger than `std::numeric_limits<float>::max()`. But of course it will be bigger than that max, since it was rounded up from max.\r\n\r\nOne could argue it should accept that number as a valid `float`, or else serialize `float` with fewer significant digits so that it gets encoded as `3.402823e+38`. It looks like the encoding occurs in `FloatToBuffer()` in `strutil.cc`, which first calls `snprintf()` using `FLT_DIG` for precision, but then checks the encoded value is correct by decoding the encoded string in `safe_strtof()` and checking the decoded value equals the original value. But those will not be equal (and frequently not be equal for other values either). So then it encodes it again using `FLT_DIG+3` precision, which is how this problem arises.\r\n\r\nArguably the whole point of `FLT_DIG` is to be the number of digits that can be safely encoded to string without rounding errors, so the right fix here might be to get rid of that `safe_strtof()` checking and re-encoding with `FLT_DIG+3`.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Falldog": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3607", "title": "Python finalize will cause infinite loop ", "body": "callstack from gdb\r\n```\r\n#0  erase (__k=@0x7ffd59a53260: 0x2158450, this=0x7f86d4d2dca0 <google::protobuf::python::descriptor_pool_map>) at /opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/tr1/hashtable.h:1041\r\n#1  google::protobuf::python::cdescriptor_pool::Dealloc (self=0x7f86d49178f0) at google/protobuf/pyext/descriptor_pool.cc:153\r\n#2  0x00007f86dc7f671f in ?? () from /usr/lib/x86_64-linux-gnu/libpython2.7.so.1.0\r\n#3  0x00007f86dc7b4b46 in ?? () from /usr/lib/x86_64-linux-gnu/libpython2.7.so.1.0\r\n#4  0x00007f86dc7de2bf in ?? () from /usr/lib/x86_64-linux-gnu/libpython2.7.so.1.0\r\n#5  0x00007f86dc7bd85b in PyDict_SetItem () from /usr/lib/x86_64-linux-gnu/libpython2.7.so.1.0\r\n#6  0x00007f86dc775ca6 in _PyModule_Clear () from /usr/lib/x86_64-linux-gnu/libpython2.7.so.1.0\r\n#7  0x00007f86dc77614d in PyImport_Cleanup () from /usr/lib/x86_64-linux-gnu/libpython2.7.so.1.0\r\n#8  0x00007f86dc7b388e in Py_Finalize () from /usr/lib/x86_64-linux-gnu/libpython2.7.so.1.0\r\n#9  0x0000000000467451 in uwsgi_plugins_atexit ()\r\n#10 0x00007f86dc2cb1a9 in __run_exit_handlers (status=30, listp=0x7f86dc6516c8 <__exit_funcs>, run_list_atexit=run_list_atexit@entry=true) at exit.c:82\r\n#11 0x00007f86dc2cb1f5 in __GI_exit (status=<optimized out>) at exit.c:104\r\n#12 0x00000000004218cf in uwsgi_exit ()\r\n#13 0x00000000004674a5 in end_me ()\r\n#14 <signal handler called>\r\n#15 0x00007f86dc38d693 in epoll_wait () at ../sysdeps/unix/syscall-template.S:81\r\n#16 0x000000000045da33 in event_queue_wait ()\r\n#17 0x000000000041f1be in wsgi_req_accept ()\r\n#18 0x0000000000466496 in simple_loop_run ()\r\n#19 0x000000000046a654 in uwsgi_ignition ()\r\n#20 0x000000000046ee4d in uwsgi_worker_run ()\r\n#21 0x000000000046f43f in uwsgi_run ()\r\n#22 0x000000000041e62e in main ()\r\n```\r\n\r\n### Environment:\r\nUbuntu 14.04 x64\r\nPython 2.7.6\r\nNginx + uWsgi + Django + protobuf 3.3.0\r\n\r\n### Result:\r\nInfinite loop and 100% CPU usage\r\n\r\n### Steps\r\n* Stop uwsgi\r\n* Can't reproduce it every time when stopping uwsgi\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3607/reactions", "total_count": 9, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 3, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "patelprateek": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3601", "title": "Lazy parsing for protobuf", "body": "Marking sub messages lazy in protobuf does not affect deserialization time. Is this feature implemented for java yet , i do see few LazyField.java and test cases , but marking nested fields (mostly maps) lazy , does not change any generated code or the deserialization performance. \r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jaybennett89": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3600", "title": "Feature Request: Field Validation Parity with JSON Schema", "body": "In the REST+JSON world you often see protocols defined with JSON schemas as an alternative to Protobufs. These schemas function very similar to protobuf definitions to define your message payloads. They also offer many of the same rules such as oneof, required, repeated (aka arrays), etc.\r\n\r\nHowever, with JSON schema validators you can provide additional business rules on your fields and get the data validation free as part of using the JSON schema. How do developers using gRPC + Protobufs maintain these validation rules across multiple languages in a consistent way, without these type of rules in the proto definitions?\r\n\r\nThere are a couple main rules that are badly needed, such as pattern matching, checking int values, and checking repeated field item counts. Could look something like this:\r\n\r\n```\r\nmessage Example {\r\n    string message = 1; `pattern: ^[a-zA-Z].*`\r\n    int32 percentage = 2; `minValue: 0, maxValue: 100`\r\n    repeated int32 list = 3; `minItems: 1, maxItems: 10`\r\n}\r\n```\r\n\r\nAnd then have the protoc compiled code for reading/writing the message automatically check these simple rules during the serialization and deserialization of this message and throw an error if the data is not valid.\r\n\r\nWouldn't that be awesome?", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mmikulicic": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3593", "title": "Ruby encode_json not encoding well known Any type correctly", "body": "e.g for:\r\n\r\n```\r\nsyntax= \"proto3\";\r\n\r\nmessage MyTestMessage {\r\n  string foo = 1;\r\n}\r\n```\r\n\r\ngot: \r\n\r\n```\r\n{\"typeUrl\":\"type.googleapis.com/MyTestMessage\",\"value\":\"CgNiYXI=\"}\r\n```\r\n\r\nexpected:\r\n\r\n```\r\n{\"@type\":\"type.googleapis.com/MyTestMessage\",\"foo\":\"bar\"}\r\n```\r\n\r\nSee https://developers.google.com/protocol-buffers/docs/proto3#json\r\n\r\n```\r\nIf the Any contains a value that has a special JSON mapping, it will be converted as follows: {\"@type\": xxx, \"value\": yyy}. Otherwise, the value will be converted into a JSON object, and the \"@type\" field will be inserted to indicate the actual data type.\r\n```", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wenzhihong2003": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3580", "title": "32-bit python Timestamp.ToDatetime will throw ValueError", "body": "32-bit python google.protobuf.internal.well_nkown_tpes.Timestamp.ToDatetime() will throw ValueError if `self.second` is less than `-43200`. \r\n\r\nIt's describe in https://stackoverflow.com/questions/36179914/timestamp-out-of-range-for-platform-localtime-gmtime-function. \r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "omamchich": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3573", "title": "The library is incompatible with python3-protobuf", "body": "python3-protobuf is one of the dependencies for riak library.\r\n\r\nOnce I install protobuf. Then riak library stops working.\r\n\r\nI always get the error like this:\r\nFile \"/usr/local/lib/python3.5/dist-packages/google/protobuf/descriptor.py\", line 824, in new\r\nreturn _message.default_pool.AddSerializedFile(serialized_pb)\r\nTypeError: expected bytes, str found\r\n\r\nSeems like python3-protobuf and protobuf are incompatible.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sm2017": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3571", "title": "Assertion failed", "body": "I have a problem with JavaScript protobuf (version 3.4.0 ,  )\r\n\r\nin the following code\r\n\r\n```js\r\nvar message = MyMessage.deserializeBinary(bytesFromServer);\r\n```\r\n\r\nWhen I have  a `repeated uint64` field I have `Assertion failed` error, in other cases I have no problem\r\n\r\nI know `bytesFromServer` is correct , other languages can deserialize the message", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DengQunhao": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3566", "title": "Lua Lua Lua , I want !!!", "body": "When can support lua,I've been waiting a long time.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3566/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mitar": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3554", "title": "Unable to access extensions from JavaScript", "body": "We use code like this to encode a version of the gRPC protocol:\r\n\r\n```protobuf\r\nimport \"google/protobuf/descriptor.proto\";\r\n\r\nextend google.protobuf.FileOptions {\r\n    string protocol_version = 51000;\r\n}\r\n\r\noption (protocol_version) = \"0.1.0\";\r\n```\r\n\r\nAnd in Python, one can access it using:\r\n\r\n```python\r\nimport test_service_pb2\r\nversion = test_service_pb2.DESCRIPTOR.GetOptions().Extensions[test_service_pb2.protocol_version]\r\n```\r\n\r\nBut it seems there is no way to access extensions from JavaScript code?", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "FZUPotato": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3532", "title": "coredump under the MIPS64 architecture", "body": "[15:52:04]GNU gdb 6.8 Cavium Networks Version: 2_0_0 build 95\r\n[15:52:04]Copyright (C) 2008 Free Software Foundation, Inc.\r\n[15:52:04]License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\r\n[15:52:04]This is free software: you are free to change and redistribute it.\r\n[15:52:04]There is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\r\n[15:52:04]and \"show warranty\" for details.\r\n[15:52:04]This GDB was configured as \"mips64-octeon-linux-gnu\"...\r\n[15:52:05]Reading symbols from /lib64/libjemalloc.so...done.\r\n[15:52:05]Loaded symbols for /lib64/libjemalloc.so\r\n[15:52:05]Reading symbols from /lib64/libcrypt.so.1...done.\r\n[15:52:05]Loaded symbols for /lib64/libcrypt.so.1\r\n[15:52:05]Reading symbols from /lib64/libpq.so.5...done.\r\n[15:52:05]Loaded symbols for /lib64/libpq.so.5\r\n[15:52:05]Reading symbols from /lib64/librt.so.1...done.\r\n[15:52:05]Loaded symbols for /lib64/librt.so.1\r\n[15:52:05]Reading symbols from /lib64/libiconv.so.2...done.\r\n[15:52:05]Loaded symbols for /lib64/libiconv.so.2\r\n[15:52:05]Reading symbols from /lib64/libm.so.6...done.\r\n[15:52:05]Loaded symbols for /lib64/libm.so.6\r\n[15:52:05]Reading symbols from /lib64/libxml2.so.2...done.\r\n[15:52:05]Loaded symbols for /lib64/libxml2.so.2\r\n[15:52:05]Reading symbols from /lib64/libdl.so.2...done.\r\n[15:52:05]Loaded symbols for /lib64/libdl.so.2\r\n[15:52:05]Reading symbols from /lib64/libc.so.6...done.\r\n[15:52:05]Loaded symbols for /lib64/libc.so.6\r\n[15:52:06]Reading symbols from /lib64/libpthread.so.0...done.\r\n[15:52:06]Loaded symbols for /lib64/libpthread.so.0\r\n[15:52:06]Reading symbols from /lib64/ld.so.1...done.\r\n[15:52:06]Loaded symbols for /lib64/ld.so.1\r\n[15:52:06]Reading symbols from /lib64/libz.so.1...done.\r\n[15:52:06]Loaded symbols for /lib64/libz.so.1\r\n[15:52:06]Reading symbols from /lib64/phpredis.so...done.\r\n[15:52:06]Loaded symbols for /lib64/phpredis.so\r\n[15:52:06]Reading symbols from /lib64/client.so...done.\r\n[15:52:06]Loaded symbols for /lib64/client.so\r\n[15:52:06]Reading symbols from /lib64/librg-thread.so...done.\r\n[15:52:06]Loaded symbols for /lib64/librg-thread.so\r\n[15:52:06]Reading symbols from /lib64/librg_syslog.so...done.\r\n[15:52:06]Loaded symbols for /lib64/librg_syslog.so\r\n[15:52:06]Reading symbols from /lib64/libhiredis.so...done.\r\n[15:52:06]Loaded symbols for /lib64/libhiredis.so\r\n[15:52:06]Reading symbols from /lib64/libredis.so...done.\r\n[15:52:06]Loaded symbols for /lib64/libredis.so\r\n[15:52:06]Reading symbols from /lib64/curl.so...done.\r\n[15:52:06]Loaded symbols for /lib64/curl.so\r\n[15:52:06]Reading symbols from /lib64/libcurl.so.4...done.\r\n[15:52:06]Loaded symbols for /lib64/libcurl.so.4\r\n[15:52:06]Reading symbols from /lib64/libssl.so.0.9.8...done.\r\n[15:52:06]Loaded symbols for /lib64/libssl.so.0.9.8\r\n[15:52:06]Reading symbols from /lib64/libcrypto.so.0.9.8...done.\r\n[15:52:06]Loaded symbols for /lib64/libcrypto.so.0.9.8\r\n[15:52:06]Reading symbols from /lib64/protobuf.so...done.\r\n[15:52:06]Loaded symbols for /lib64/protobuf.so\r\n[15:52:06]Reading symbols from /lib64/libnss_compat.so.2...done.\r\n[15:52:06]Loaded symbols for /lib64/libnss_compat.so.2\r\n[15:52:06]Reading symbols from /lib64/libnsl.so.1...done.\r\n[15:52:06]Loaded symbols for /lib64/libnsl.so.1\r\n[15:52:06]Reading symbols from /lib64/libnss_nis.so.2...done.\r\n[15:52:06]Loaded symbols for /lib64/libnss_nis.so.2\r\n[15:52:06]Reading symbols from /lib64/libnss_files.so.2...done.\r\n[15:52:06]Loaded symbols for /lib64/libnss_files.so.2\r\n[15:52:06]Core was generated by `php-fpm: pool www                                                             '.\r\n[15:52:06]Program terminated with signal 10, Bus error.\r\n[15:52:06][New process 32302]\r\n[15:52:06]#0  dispatch (d=0x555f4f8a40)\r\n[15:52:06]    at ***/php-5.6.31/ext/protobuf/upb.h:1264\r\n[15:52:06]1264    ***/php-5.6.31/ext/protobuf/upb.h: No such file or directory.\r\n[15:52:06]        in ***/php-5.6.31/ext/protobuf/upb.h\r\n[15:52:09](gdb) bt full\r\n[15:52:09]#0  dispatch (d=0x555f4f8a40)\r\n[15:52:09]    at ****/php-5.6.31/ext/protobuf/upb.h:1264\r\n[15:52:09]        dispatch = (upb_inttable *) 0x5f4b0fb800000055\r\n[15:52:09]        tag = 10\r\n[15:52:09]        wire_type = 2 '\\002'\r\n[15:52:09]        fieldnum = 1\r\n[15:52:09]        val = {val = 0}\r\n[15:52:09]#1  0x000000555e6ed98c in run_decoder_vm (d=0x555f4f8a40, \r\n[15:52:09]    group=<value optimized out>, handle=0xffff9fbe00)\r\n[15:52:09]    at ***/php-5.6.31/ext/protobuf/upb.c:10002\r\n[15:52:09]        shortofs = 10 '\\n'\r\n[15:52:09]        arg = 2048\r\n[15:52:09]#2  0x000000555e6ee000 in upb_pbdecoder_decode (decoder=0x555f4f8a40, \r\n[15:52:09]    group=0x555f462630, buf=<value optimized out>, \r\n[15:52:09]    size=<value optimized out>, handle=0xffff9fbe00)\r\n[15:52:09]    at ****/php-5.6.31/ext/protobuf/upb.c:10147\r\n[15:52:09]No locals.\r\n[15:52:09]#3  0x000000555e6d4b10 in upb_bufsrc_putbuf (\r\n[15:52:09]    buf=0x555ec76c18 \"\\nN\\n\\021addressbook.proto\\\"1\\n\\006Person\\022\\f\\n\\004name\\030\\001 \\001(\\t\\022\\n\\n\\002id\\030\\002 \\001(\\005\\022\\r\\n\\005email\\030\\003 \\001(\\tb\\006proto3\", len=80, sink=0x555f4f8a48)\r\n[15:52:09]    at ****/php-5.6.31/ext/protobuf/upb.h:6230\r\n[15:52:09]        subc = (void *) 0xa\r\n[15:52:09]        ret = <value optimized out>\r\n[15:52:09]        handle = {\r\n[15:52:09]  buf_ = 0x555ec76c18 \"\\nN\\n\\021addressbook.proto\\\"1\\n\\006Person\\022\\f\\n\\004name\\030\\001 \\001(\\t\\022\\n\\n\\002id\\030\\002 \\001(\\005\\022\\r\\n\\005email\\030\\003 \\001(\\tb\\006proto3\", obj_ = 0x0, objtype_ = 0x0, objofs_ = 0}\r\n[15:52:09]#4  0x000000555e6f0f64 in upb_loaddescriptor (\r\n[15:52:09]    buf=0x555ec76c18 \"\\nN\\n\\021addressbook.proto\\\"1\\n\\006Person\\022\\f\\n\\004name\\030\\001 \\001(\\t\\022\\n\\n\\002id\\030\\002 \\001(\\005\\022\\r\\n\\005email\\030\\003 \\001(\\tb\\006proto3\", n=80, owner=0xffff9fbf30, status=0xffff9fbf40)\r\n[15:52:09]    at ***/php-5.6.31/ext/protobuf/upb.c:10838\r\n[15:52:09]        decoder_m = (const upb_pbdecodermethod *) 0x555f4b0f00\r\n[15:52:09]        reader_h = (const upb_handlers *) 0x555ed86200\r\n[15:52:09]        env = {arena_ = {alloc = {func = 0x555e6d1940 <upb_arena_doalloc>}, \r\n[15:52:09]    block_alloc = 0x555e70f230, bytes_allocated = 5568, \r\n[15:52:09]    next_block_size = 14272, max_block_size = 16384, \r\n[15:52:09]    block_head = 0x555f521800, cleanup_head = 0x555f4f8a20, \r\n[15:52:09]    future1 = 0x120414388, future2 = 0xffff9fbf00}, \r\n[15:52:09]  error_func_ = 0x555e6cccc8 <write_err_to>, error_ud_ = 0xffff9fbf40, \r\n[15:52:09]  ok_ = true}\r\n[15:52:09]        opts = {handlers = 0x555ed86200, lazy = false}\r\n[15:52:09]        reader = <value optimized out>\r\n[15:52:09]        i = <value optimized out>\r\n[15:52:09]        ret = <value optimized out>\r\n[15:52:09]#5  0x000000555e6bf494 in zim_DescriptorPool_internalAddGeneratedFile (\r\n[15:52:09]    ht=<value optimized out>, return_value=<value optimized out>, \r\n[15:52:09]    return_value_ptr=<value optimized out>, this_ptr=<value optimized out>, \r\n[15:52:09]    return_value_used=<value optimized out>)\r\n[15:52:09]    at ***/php-5.6.31/ext/protobuf/def.c:459\r\n[15:52:09]        status = {ok_ = true, code_ = 0, error_space_ = 0x0, \r\n[15:52:09]  msg = '\\0' <repeats 127 times>}\r\n[15:52:09]        data = 0x555ec76c18 \"\\nN\\n\\021addressbook.proto\\\"1\\n\\006Person\\022\\f\\n\\004name\\030\\001 \\001(\\t\\022\\n\\n\\002id\\030\\002 \\001(\\005\\022\\r\\n\\005email\\030\\003 \\001(\\tb\\006proto3\"\r\n[15:52:09]        data_len = 80\r\n[15:52:09]        files = <value optimized out>\r\n[15:52:09]        i = <value optimized out>\r\n[15:52:09]        pool = (DescriptorPool *) 0x555ec7ae38\r\n[15:52:09]#6  0x00000001204af290 in zend_do_fcall_common_helper_SPEC (\r\n[15:52:09]    execute_data=0x555ec43cb0)\r\n[15:52:09]    at ***/php-5.6.31/Zend/zend_vm_execute.h:558\r\n[15:52:09]        ret = (temp_variable *) 0x555ec43b50\r\n[15:52:09]        opline = (zend_op *) 0x555ec7db80\r\n[15:52:09]        should_change_scope = 1 '\\001'\r\n[15:52:09]        fbc = (zend_function *) 0x555f48ff00\r\n[15:52:09]        num_args = 1\r\n[15:52:09]#7  0x00000001204a34a8 in execute_ex (execute_data=0x555ec43cb0)\r\n[15:52:09]    at ***/php-5.6.31/Zend/zend_vm_execute.h:363\r\n[15:52:09]        original_in_execution = 0 '\\0'\r\n[15:52:09]#8  0x0000000120406da0 in zend_execute_scripts (type=8, retval=0x0, \r\n[15:52:09]    file_count=3)\r\n[15:52:09]    at ***/php-5.6.31/Zend/zend.c:1341\r\n[15:52:09]        files = (va_list) 0xffff9fc238\r\n[15:52:09]        i = 1\r\n[15:52:09]        file_handle = (zend_file_handle *) 0xffff9fe5a0\r\n[15:52:09]        orig_op_array = (zend_op_array *) 0x0\r\n[15:52:09]        orig_retval_ptr_ptr = (zval **) 0x0\r\n[15:52:09]#9  0x0000000120384f44 in php_execute_script (primary_file=0xffff9fe5a0)\r\n[15:52:09]    at ***/php-5.6.31/main/main.c:2613\r\n[15:52:09]        realfile = \"\\000\\000\\000\\000\\000\\000\\000@\\000\\000\\000\\000\\000\\000\\000@\\000\\000\\000\\000\\000\\000\\000@\\000\\000\\000\\000\\000\\000\\001\u7e7a000\\000\\000\\000\\000\\000\\001\u7e7a000\\000\\000\\000\\000\\000\\000\\b\\000\\000\\000\\003\\000\\000\\000\\004\\000\\000\\000\\000\\000\\000\u792cb\\000\\000\\000\\000\\000\\000\u792cb\\000\\000\\000\\000\\000\\000\u792cb\\000\\000\\000\\000\\000\\000\\000\\020\\000\\000\\000\\000\\000\\000\\000\\020\\000\\000\\000\\000\\000\\000\\000\\b\\000\\000\\000\\001\\000\\000\\000\\005\", '\\0' <repeats 30 times>, \"\u792c034\\000\\000\\000\\000\\000\\000\u792c034\\000\\000\\000\\000\\000\\001\\000\\000\\000\\000\\000\\001\\000\\000\\000\\006\\000\\000\\000\\000\\000\\000\u63a7\\000\\000\\000\\000\\000\\001\u63a7\\000\\000\\000\\000\\000\\001\u63a7\\000\\000\\000\\000\\000\\000\\002p\\000\\000\\000\\000\\000\\000\\005\u8c5b000\\000\\000\\000\\000\\001\\000\\000\\000\\000\\000\\002\"...\r\n[15:52:09]        __orig_bailout = (jmp_buf *) 0xffff9fe6c0\r\n[15:52:09]        __bailout = {{__jmpbuf = {{__pc = 4835528084, __sp = 1099505320528, \r\n[15:52:09]        __regs = {1099505329568, -1, -1, 4842064832, 8, 1099505339256, 0, \r\n[15:52:09]          4841935248}, __fp = 1099505324640, __gp = 4841969776, \r\n[15:52:09]        __fpc_csr = 0, __fpregs = {1.8114735872792628e-312, \r\n[15:52:09]          1.8115262905413347e-312, 1.8114740407920004e-312, \r\n[15:52:09]          1.8114730918302332e-312, 0, 0, 1.8114739031255489e-312, \r\n[15:52:09]          1.8114740407920004e-312}}}, __mask_was_saved = 0, __saved_mask = {\r\n[15:52:09]      __val = {366646235880, 0, 4096, 366665243392, 366661926176, \r\n[15:52:09]        1099505339248, 832, 9170820079774990592, 0, 844459289870337, 8416, \r\n[15:52:09]        64, 197080, 9262497088686522424, 2252074694213669, 25769803781}}}}\r\n[15:52:09]        prepend_file_p = (zend_file_handle *) 0x0\r\n[15:52:09]        append_file_p = (zend_file_handle *) 0x0\r\n[15:52:09]        prepend_file = {type = ZEND_HANDLE_FILENAME, filename = 0x0, \r\n[15:52:09]  opened_path = 0x0, handle = {fd = 0, fp = 0x0, stream = {handle = 0x0, \r\n[15:52:09]      isatty = 0, mmap = {len = 0, pos = 0, map = 0x0, buf = 0x0, \r\n[15:52:09]        old_handle = 0x0, old_closer = 0}, reader = 0, fsizer = 0, \r\n[15:52:09]      closer = 0}}, free_filename = 0 '\\0'}\r\n[15:52:09]        append_file = {type = ZEND_HANDLE_FILENAME, filename = 0x0, \r\n[15:52:09]  opened_path = 0x0, handle = {fd = 0, fp = 0x0, stream = {handle = 0x0, \r\n[15:52:09]      isatty = 0, mmap = {len = 0, pos = 0, map = 0x0, buf = 0x0, \r\n[15:52:09]        old_handle = 0x0, old_closer = 0}, reader = 0, fsizer = 0, \r\n[15:52:09]      closer = 0}}, free_filename = 0 '\\0'}\r\n[15:52:09]        retval = <value optimized out>\r\n[15:52:09]#10 0x00000001204eabd8 in main (argc=8, argv=0xffffa00b78)\r\n[15:52:09]    at ***/php-5.6.31/sapi/fpm/fpm/fpm_main.c:1989\r\n[15:52:09]        primary_script = 0x555ec75b48 \"/tmp/html/protobuf_test.php\"\r\n[15:52:09]        __bailout = {{__jmpbuf = {{__pc = 4836993012, __sp = 1099505329392, \r\n[15:52:09]        __regs = {0, 4841930752, -1, 4842061824, 8, 1099505339256, 0, \r\n[15:52:09]          4841935248}, __fp = 4841832176, __gp = 4841969776, __fpc_csr = 85, \r\n[15:52:09]        __fpregs = {1.8114743018365251e-312, 0, 0, 1.8115295722686334e-312, \r\n[15:52:09]          1.8115295708852496e-312, 1.8115295715967041e-312, \r\n[15:52:09]          4.9406564584124654e-324, 1.8115295708457244e-312}}}, \r\n[15:52:09]    __mask_was_saved = 0, __saved_mask = {__val = {0, 366661861424, 16384, \r\n[15:52:09]        366646671120, 0, 366646477448, 366661861376, 1, 1, 0, 640, \r\n[15:52:09]        366661877760, 128, 366646701600, 366657670400, 366646481680}}}}\r\n[15:52:09]        exit_status = <value optimized out>\r\n[15:52:09]        c = <value optimized out>\r\n[15:52:09]        use_extended_info = 0\r\n[15:52:09]        file_handle = {type = ZEND_HANDLE_MAPPED, \r\n[15:52:09]  filename = 0x555ec43460 \"/tmp/html/protobuf_test.php\", opened_path = 0x0, \r\n[15:52:09]  handle = {fd = 85, fp = 0x555ec75d10, stream = {handle = 0x555ec75d10, \r\n[15:52:09]      isatty = 0, mmap = {len = 741, pos = 0, map = 0x0, \r\n[15:52:09]        buf = 0x555dd38000 <Address 0x555dd38000 out of bounds>, \r\n[15:52:09]        old_handle = 0x0, old_closer = 0}, \r\n[15:52:09]      reader = 0x1203a3a60 <_php_stream_read>, \r\n[15:52:09]      fsizer = 0x120386868 <php_zend_stream_fsizer>, \r\n[15:52:09]      closer = 0x120386820 <php_zend_stream_mmap_closer>}}, \r\n[15:52:09]  free_filename = 0 '\\0'}\r\n[15:52:09]        orig_optind = 1\r\n[15:52:09]        orig_optarg = 0x0\r\n[15:52:09]        ini_entries_len = 0\r\n[15:52:09]        max_requests = 0\r\n[15:52:09]        requests = 0\r\n[15:52:09]        request = {listen_socket = 0, fd = 3, id = 1, keep = 0, closed = 0, \r\n[15:52:09]  in_len = 0, in_pad = 0, out_hdr = 0x0, out_pos = 0xffff9fe950 \"\", \r\n[15:52:09]  out_buf = '\\0' <repeats 8191 times>, reserved = '\\0' <repeats 15 times>, \r\n[15:52:09]  env = 0x555ec42300}\r\n[15:52:09]        fpm_config = 0xffffa03a67 \"\"\r\n[15:52:09]        fpm_prefix = 0xffffa03aa0 \"\"\r\n[15:52:09]        fpm_pid = 0x0\r\n[15:52:09]        test_conf = 0\r\n[15:52:09]        force_daemon = -1\r\n[15:52:09]        force_stderr = 0\r\n[15:52:09]        php_information = 0\r\n[15:52:09]        php_allow_to_run_as_root = 1\r\n[15:52:09]        __func__ = \"main\"\r\n[15:52:13](gdb) q\r\n[15:52:17]/var/tmp/coredump # uname -m\r\n[15:52:17]mips64\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bootstraponline": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3531", "title": "Update protobuf-java-util gson dep from v2.7 to v2.8.1", "body": "protobuf-java-util isn't using the latest gson. I had to add a gradle exclude rule. It'd be nice to update to the latest stable version.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mkosieradzki": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3530", "title": "[CSharp] Consider implementing arena allocation in C#", "body": "# Background\r\nObjects deserialized by protocol buffers have very often very similiar life time and can strongly benefit from Arena allocation as in C++ version. (https://developers.google.com/protocol-buffers/docs/reference/arenas)\r\n\r\nC# 7.0 introduces new powerful feature called ref returns and ref locals (https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/ref-returns) practically making structs a first class citizen.\r\n\r\n# Benefits\r\nUsing arena allocation can strongly decrease pressure on the GC during deserialization (and together with some other perf-works can remove completely GC from the deserialization path).\r\n\r\n# Drawbacks\r\nThis feature requires dramatic changes to the generated code - it requires to generate an additional struct for every message contract. Structs are required for custom memory management and we do not want to break compatibility and APIs for pre-existing code. Also there should be some conversion possible from structs to classes if user decides to keep his/her struct a bit longer (at least longer than arena lifetime).\r\n\r\n# POC\r\nI have created some early POC structs allowing to implement arena allocation for protocol buffers deserialization and they seem to do the job, however as I told I see no even remote possibility to do this on classes.\r\n\r\n# Open questions\r\nAre you interested in accepting such a PR?\r\n\r\nThere is also a decision to be made whether we would like to prefer performance: i.e. refs everywhere, limited safety checks over preventing developer from hurting himself by freeing arena and still trying to use some remaining refs.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3530/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/3431", "title": "[CSharp] Allow passing byte* as CodedInputStream buffer", "body": "IMO C# protobuf implementation could strongly benefit performance-wise from allowing some unsafe code.\r\n\r\n# Background\r\nFirst of all I am not saying that unsafe should be enabled in every build/every platform, having 100% managed library is always a nice feature. All I am suggesting is again some conditional feature on some platform.\r\n\r\nHowever there is a trend to move towards unsafe mixing we can observe in .NET Core.\r\nFor example a lot of .NET Core libraries use unsafe code due to need to interop with different kind of unmanaged libraries or just to handle AOT compiled code.\r\n\r\n# API change\r\nToday CodedInputStream works in two modes: streaming with byte[] buffer and with a fixed buffer.\r\n\r\nIt would be really nice to be able to provide byte * and length to CodedInputStream constructor.\r\n\r\nAlternatively we could create an UnmanagedCodedInputStream which would work on unmanaged memory.\r\n\r\nThis would require to abstracting CodedInputStream as an interface\r\n\r\n## Affected APIs\r\nAsync API #3166 makes absolutely no sense for UnmanagedCodedInputStream because it assumes everything have been already read.\r\n\r\n# Benefits\r\n1. It's extremely useful for interop (See scenario 1)\r\n2. It can work with stackalloc (See scenario 2)\r\n3. It allows even quicker deserialization we can quicker deserialize byte * to for example fixed-size primitive types by pointer dereference. (Endiannes might be a problem here)\r\n\r\n# Scenarios\r\n## Scenario 1. NoSQL Database\r\nUser is using native NoSQL database (for example RocksDB/LevelDB) and is using protobuf for data persistence. Database returns native allocated pointer with buffer. Instead of copying entire buffer to the memory user can deserialize record straight from the returned memory native memory and then free the pointer. Very little GC is involved and there is practically no overhead.\r\n## Scenario 2. Stackalloc-ated buffers\r\nFor performance reasons to decrease heap allocations and allocate buffer on stack. This scenario can be alternatively handled by Buffer Pooling, however stackalloc seems to be more efficient.\r\n\r\n# Affected by\r\nhttps://github.com/dotnet/corefxlab/blob/master/docs/specs/span.md - this work in progress improvement can allow to achieve the same goals in a managed way by providing some platform improvements.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3431/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/3253", "title": "[CSharp] Inefficient descriptor literals", "body": "@jskeet \r\nI have noticed that protobuf generated assemblies are HUGE and did some investigation.\r\n\r\nToday descriptors are stored as base64-encoded string literals (and they are concatenated what makes it worse. This is just evil and has negative impact on three elements:\r\n- application startup time\r\n- memory footprint\r\n- size of assemblies\r\n\r\nWhy is base64 string literal so evil... .NET stores string internally as UTF16 what basically means: to store 1024 bytes, you need: 1366 UTF16 characters => 2732 bytes, what roughly evaluates to 2.66 ratio (without length delimiters!).\r\n\r\nAlso you need to do in-memory concatenation (!) and base64 parsing during Descriptor initialization. Increasing temporal memory footprint more than twofold.\r\n\r\nI have done some basic tests storing byte array as array function returning byte array literal...\r\n\r\n1000 loops x 100KB takes roughly (on my machine - it's not a proper benchmark, but good enough to prove my point):\r\n16ms for byte arrays\r\n750ms for base64 (without concatenation!)\r\nIt means this is 2 orders of magnitude better performance.\r\n\r\nI would also consider storing descriptors as manifest resource streams... but haven't done appropriate tests yet.\r\n\r\nSo basically I would start by replacing codegen to use byte array (debug dll with 100 KB literal has 133 KB (while base64 literal has 346KB) so it doesn't look like a huge overhead...", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3173", "title": "Support for async in C# version", "body": "This is PR for #3166 ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Chenjunchao": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3522", "title": "How to use C++ based python protobuf on windows", "body": "Hi,\r\n\r\nI'd like to use C++ based python protobuf on windows. When I tried to build the C++ extension of python protobuf, I found the python/setup.py is designed only for Linux. I was just wondering if there is any suggestion on how to use C++ based python protobuf on windows.\r\n\r\nThanks in advance.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yaronsumel": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3513", "title": "Can only generate PHP code for proto3 .proto while importing proto2", "body": "While compiling my .proto (proto3) that making use of protobuf/gogoproto/gogo.proto (proto2)\r\nim getting - `-php_out: gogoproto/gogo.proto: Can only generate PHP code for proto3 .proto files.` any workaround solving this ?", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vbfox": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3487", "title": "Can't create a full protoc plugin in C#", "body": "[plugin.proto](https://github.com/google/protobuf/blob/master/src/google/protobuf/compiler/plugin.proto) describe the messages to interact with `protoc` as a plugin but the feature doesn't seem to be fully accessible from C#.\r\n\r\nHere are the steps I tried:\r\n\r\n1. Using the file directly: Impossible, C# doesn't support proto2\r\n\r\n2. Using the file converted to proto3: Doesn't work as it tries to reference `global::Google.Protobuf.Reflection.FileDescriptorProto` that isn't accessible.\r\n3. Converting descriptor.proto and compiling it too: `Descriptor.cs` doesn't build as it reference internals that aren't accessible like `CustomOptions.Empty` (protoc does special generation when it see Descriptor.proto)\r\n4. Avoid protoc special casing (Changing the folder of `descriptor.proto`): Now it works and writing a basic plugin is possible. But we lost the magic introduced in #2317 so custom options aren't usable at all (And can't be hacked around as it relies on extensions and they aren't supported).\r\n\r\nI don't see any way to make it work with google version of C#/protobuf \ud83d\ude22 but maybe i'm missing something ?", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jhaber": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3474", "title": "Issues with Protobuf and Spark", "body": "Hi, I wanted to get your thoughts on an issue we've run into with a few of our Spark jobs when they try to serialize protobufs using Java serialization (and it seems like others have run into [this](https://stackoverflow.com/questions/40885430/unable-to-find-proto-buffer-class-in-spark/40904420#40904420) [same](http://apache-spark-user-list.1001560.n3.nabble.com/Unable-to-find-proto-buffer-class-error-with-RDD-lt-protobuf-gt-td14529.html) [issue](http://permalink.gmane.org/gmane.comp.lang.scala.spark.user/4936)). I put an example stack trace [here](https://gist.github.com/jhaber/198bbb1f3a91378cfe4271655021b54f). The error was confusing at first, but looking at the relevant line in GeneratedMessageLite I think I see the problem: https://github.com/google/protobuf/blob/774d630bde574f5fcbb6dae6eaa0f91f7bc12967/java/src/main/java/com/google/protobuf/GeneratedMessageLite.java#L768\r\n\r\nThe call to `Class.forName` doesn't include a `ClassLoader` argument, so it will attempt to use whichever `ClassLoader` was used to load  `GeneratedMessageLite`. Since Spark itself uses protobuf-java, this ends up being a `ClassLoader` further up the chain that doesn't know anything about our protobuf classes. To confirm this is the issue, we ran this code in the Spark executor:\r\n```java\r\n// fails with ClassNotFoundException\r\nClass.forName(\"com.hubspot.Protos$ExampleProto\", true, GeneratedMessageLite.class.getClassLoader());\r\n// works fine\r\nClass.forName(\"com.hubspot.Protos$ExampleProto\", true, Thread.currentThread().getContextClassLoader());\r\n```\r\n\r\nThere are a few workarounds in the Spark case, but it seems like this is a more general issue that could crop up outside of Spark. Thoughts on switching all usages of `Class.forName` to include an explicit `ClassLoader` argument? This way, preference could be given to the thread's context class loader, similar to the strategy that's used by the [Resources class in Guava](https://github.com/google/guava/blob/6290373588ef914111f0896b8d0c86a15b7f0f6b/guava/src/com/google/common/io/Resources.java#L194-L195)\r\n\r\nI'm interested to hear your thoughts on this issue, thanks", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3475", "title": "Use the context ClassLoader where appropriate", "body": "Fix for #3474, thanks for the quick response @xfxyjwf \r\n\r\nI kept the existing behavior on Android, because grpc/grpc-java#1273 suggests that using the context `ClassLoader` may not be relied upon. I wasn't aware of any way to reuse the grpc code, so I just copied the relevant bits over.\r\n\r\nI'm also not entirely sure about the change to `java_file.cc`, I don't have much experience with extensions but I think we'd want the same behavior there. \r\n\r\nI followed the instructions [here](https://github.com/google/protobuf/tree/master/src) to build and then I ran the Maven build and all the tests passed. Setting up a unit test to verify that it fixes #3474 would be a bit involved but I'm happy to do it if you think it's worthwhile.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "StevenWash": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3472", "title": "goog.require could not find: jspb.Message", "body": "Hi @willnorris ,\r\nI am using the protobuf-js ,and I use 'npm install google-protobuf' to install it .Then I use 'goog.require('jspb.Message');' to get the 'Message',but it occured like this:\r\n![image](https://user-images.githubusercontent.com/18731292/29064166-baec1678-7c5a-11e7-8687-bbb3fc398d3a.png)\r\n\r\nAnd I use it in a Angular-cli project.I impot it in the .angular-cli.json like that:\r\n![image](https://user-images.githubusercontent.com/18731292/29064224-eab13bae-7c5a-11e7-9aba-37768c6ca024.png)\r\n\r\nCan anyone help me ?Thank you  very much!\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "grantr": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3471", "title": "No way to change generated Ruby module names", "body": "Many protoc generator implementations support options for the naming of generated classes, e.g. `java_package` and `go_package`. Ruby does not. This causes problems when a generated package conflicts with an existing class hierarchy:\r\n\r\n```ruby\r\n# Existing class\r\nmodule Bigco\r\n  class Embiggener\r\n    # ...\r\n  end\r\nend\r\n\r\n# Generated code for the bigco.embiggener.v1 package\r\nmodule Bigco\r\n  module Embiggener # <-- causes a syntax error because the class is already defined above\r\n    module V1\r\n      # ...\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nIt'd be nice to have an option `ruby_namespace` to specify an alternate namespace hierarchy, similar to `java_package`.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3471/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "NVgithub": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3466", "title": "Installing Google.Protobuf -Version 3.3.0 nuget to UWP project", "body": "Hello \r\n\r\nI was wondering if the Google.Protobuf nuget package is supported in UWP projects because when I try to add it to a UWP Class Library project the following exception is thrown:\r\n\r\n`System.Reflection.Emit.ILGeneration 4.0.1 provides a compile-time reference assembly for System.Reflection.Emit.ILGeneration on UAP,Version=v10.0, but there is no run-time assembly compatible with win10-arm-aot.\r\nOne or more packages are incompatible with UAP,Version=v10.0 (win10-arm-aot).\r\nSystem.Reflection.Emit.ILGeneration 4.0.1 provides a compile-time reference assembly for System.Reflection.Emit.ILGeneration on UAP,Version=v10.0, but there is no run-time assembly compatible with win10-x64-aot.\r\nOne or more packages are incompatible with UAP,Version=v10.0 (win10-x64-aot).\r\nSystem.Reflection.Emit.ILGeneration 4.0.1 provides a compile-time reference assembly for System.Reflection.Emit.ILGeneration on UAP,Version=v10.0, but there is no run-time assembly compatible with win10-x86-aot.\r\nOne or more packages are incompatible with UAP,Version=v10.0 (win10-x86-aot).`\r\n\r\nI am trying to use a generated .cs file from a protoc.exe in a UWP project.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "johanbrandhorst": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3464", "title": "JavaScript documentation missing methods", "body": "Hi!\r\n\r\nI noticed the JS generated code documentation (https://developers.google.com/protocol-buffers/docs/reference/javascript-generated#repeated) was missing information about the following methods that are being generated by the latest protoc:\r\n\r\n`addFooList(): Adds value at specified index in list`\r\n\r\nAnd for `repeated bytes`:\r\n\r\n`getFooList_asU8(): Gets the array of bytes, with each value converted to Uint8Array`\r\n`getFooList_asB64(): Gets the array of bytes, with each value converted to Base64 strings`\r\n\r\nI looked around in this repo and couldn't find anywhere to contribute this, could someone point me in the right direction?", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "remann": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3463", "title": "Windows10, failed unit-tests", "body": "protobuf 3.3.2\r\nWindows 10\r\ncmake 3.9.0\r\nVisual Studio Build Tools 2017\r\n\r\nI could pass other unit-tests with `git config --global core.autocrlf false`. But There are two failed unit-tests in my environment. \r\n\r\n```\r\n[----------] Global test environment tear-down\r\n[==========] 1931 tests from 191 test cases ran. (29351 ms total)\r\n[  PASSED  ] 1929 tests.\r\n[  FAILED  ] 2 tests, listed below:\r\n[  FAILED  ] CommandLineInterfaceTest.Win32ErrorMessage\r\n[  FAILED  ] TokenizerTest.ParseString\r\n```\r\n```\r\nNMAKE : fatal error U1077: '\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.10.25017\\bin\\HostX86\\x86\\nmake.exe\"' : return code '0x2'.\r\nStop.\r\nNMAKE : fatal error U1077: '\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.10.25017\\bin\\HostX86\\x86\\nmake.exe\"' : return code '0x2'.\r\nStop.\r\nNMAKE : fatal error U1077: '\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.10.25017\\bin\\HostX86\\x86\\nmake.exe\"' : return code '0x2'.\r\nStop.\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "roidelapluie": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3457", "title": "Field rules proto3 doc improvements", "body": "in https://developers.google.com/protocol-buffers/docs/proto3\r\n\r\non the line:\r\n\r\nsingular: a well-formed message can have zero or one of this field (but not more than one)\r\n\r\n1. There is a missing `<code></code>`  around singular\r\n2. We could specify that singular is the default rule.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "htuch": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3449", "title": "Fix spurious \"warning: directory does not exist\" messages in {cc,py}_proto_library", "body": "When building https://github.com/lyft/envoy-api, we see a lot of warning spew of the form:\r\n\r\n```\r\nINFO: From ProtoCompile api/filter/http_connection_manager.pb.cc:\r\nbazel-out/local-fastbuild/genfiles/external/googleapis: warning: directory does not exist.\r\nbazel-out/local-fastbuild/genfiles/external/protobuf_bzl/src: warning: directory does not exist.\r\nbazel-out/local-fastbuild/genfiles/external/protobuf_bzl/src: warning: directory does not exist.\r\nbazel-out/local-fastbuild/genfiles/external/googleapis: warning: directory does not exist.\r\nbazel-out/local-fastbuild/genfiles/external/protobuf_bzl/src: warning: directory does not exist.\r\nbazel-out/local-fastbuild/genfiles/external/protobuf_bzl/src: warning: directory does not exist.\r\nbazel-out/local-fastbuild/genfiles/external/googleapis: warning: directory does not exist.\r\nbazel-out/local-fastbuild/genfiles/external/protobuf_bzl/src: warning: directory does not exist.\r\nbazel-out/local-fastbuild/genfiles/external/protobuf_bzl/src: warning: directory does not exist.\r\n```\r\n\r\nDigging into this, it appears the `protobuf_bzl/src` errors are a result of https://github.com/google/protobuf/blob/dd04ffb923d2048a9ba054f2099d450bea4fae68/protobuf.bzl#L74 adding a `genfiles` include for the Protobuf cc_wkt_protos, which don't have a generated component. \r\n\r\nI looked into removing `genfiles` for just the internal bootstrap proto hack (i.e. the WKTs), but this still left:\r\n\r\n```\r\nbazel-out/local-fastbuild/genfiles/external/googleapis: warning: directory does not exist.\r\n```\r\n\r\nThis doesn't appear when I do `--spawn_strategy=standalone`, indicating that there is some missing dependency. I think the protogen rule https://github.com/google/protobuf/blob/dd04ffb923d2048a9ba054f2099d450bea4fae68/protobuf.bzl#L122 is not picking up on the genfiles directory correctly.\r\n\r\nCreating this issue to track further investigation and a fix.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dvescovi1": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3444", "title": "compiler error \"The first enum value...\" does not generate error line number", "body": "The compiler error \"The first enum value must be zero in protobuf 3\" does not generate error line number.\r\nThis makes it very difficult to find the error within the file.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ramigluzman": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3440", "title": "Incompatibility between json and binary decode in ruby", "body": "Binary proto is decoded properly with a proto class which doesn't define all the fields, though an exception is thrown when doing the same with json decoding.\r\nMy encoding is done using `UserCreatedEvent` and the decoding is done using `BaseEvent` (which is a \"subset\" of `UserCreatedEvent` that contains only the `message_base` field)\r\n\r\n**base.proto**\r\n```\r\nsyntax = \"proto3\";\r\n\r\nmessage BaseStateChangeEvent {\r\n  string aggregate_id = 1;\r\n  string aggregate_type = 2;\r\n}\r\n\r\nmessage BaseEvent{\r\n  BaseStateChangeEvent message_base = 1;\r\n}\r\n```\r\n**user.proto**\r\n```\r\nsyntax = \"proto3\";\r\n\r\nimport \"base/base.proto\";\r\n\r\nmessage UserCreatedEvent{\r\n  BaseStateChangeEvent message_base = 1;\r\n  string username = 2;\r\n  string email = 3;\r\n  string password = 4;\r\n}\r\n```\r\n**Runtime example using `irb`:**\r\n```\r\n2.3.3 :001 > require './base/base_pb'\r\n => true\r\n2.3.3 :002 > require './entities/user_pb'\r\n => true\r\n2.3.3 :003 > u = UserCreatedEvent.new(username: 'ramzigl', password: '123456')\r\n => <UserCreatedEvent: message_base: nil, username: \"ramzigl\", email: \"\", password: \"123456\">\r\n2.3.3 :004 > u.message_base = BaseStateChangeEvent.new(aggregate_id: '1', aggregate_type: 'User')\r\n => <BaseStateChangeEvent: aggregate_id: \"1\", aggregate_type: \"User\">\r\n2.3.3 :005 > BaseEvent.decode(UserCreatedEvent.encode(u)) # works!!!\r\n => <BaseEvent: message_base: <BaseStateChangeEvent: aggregate_id: \"1\", aggregate_type: \"User\">>\r\n2.3.3 :006 > BaseEvent.decode_json(UserCreatedEvent.encode_json(u)) # fails!\r\nGoogle::Protobuf::ParseError: Error occurred during parsing: No such field: username\r\n\r\n\tfrom (irb):6:in `decode_json'\r\n\tfrom (irb):6\r\n\tfrom /Users/rami.gluzman/.rvm/rubies/ruby-2.3.3/bin/irb:11:in `<main>'\r\n```\r\n(See the difference between line 5 and line 6)\r\n\r\nI would expect both decoders to be coherent.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "michaelsafyan": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3427", "title": "Feature request: Python implementation that does not require explicit build step", "body": "One of the reasons to use Python in the first place is the quick edit-refresh cycle without an interleaving build step. Currently, the way protobuf is implemented breaks this benefit of the Python language. Python has a very powerful module import system that can be extended (see [importlib](https://docs.python.org/3/library/importlib.html)).\r\n\r\nThus I'd like to request a change to the Python implementation so that it is possible to import a *_pb2 module where the corresponding *.proto file exists but no such *.py file exists, with the protobuf implementation dynamically generating the Python classes at runtime in the import library (and, of course, caching this intelligently so that this strategy is still viable and efficient in a production context).\r\n\r\nNOTE: this is a dependency of [a similar feature request](https://github.com/grpc/grpc/issues/11946) in gRPC. (Also, because of that, such a runtime generation mechanism would also need to support some sort of plugin mechanism for systems like gRPC to extend the generated Python code).", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3427/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "daicoden": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3418", "title": "Change behavior of include parameter in skylark py_proto_library. (Maybe affects other proto_libraries?)", "body": "Hi, this is just an ease of use suggestion.\r\n\r\nThe include parameter isn't intuitive.\r\nIf you omit include, the proto library root is anchored at WORKSPACE.\r\nSeeing this, you attempt to fix it by specifying a path relative to WORKSPACE.\r\nHowever, the include string gets appended to the BUILD  path, which was unexpected and hard to figure out why it was happening.\r\n\r\nI sampled a few projects, and it looks like most protos using bazel are imported relative to their WORKSPACE, but I suspect that's an artifact of the include default behavior.\r\n\r\nI'm guessing this behavior exists since the BUILD file isn't supposed to reference locations above its directory location. But it's a weird middle ground. You can either import protos relative to WORKSPACE, or relative to the BUILD file. The weirdness is if you have BUILD files at the leaf (which I arrived at from following examples), then proto imports **MUST** be relative to the workspace.\r\n\r\nA few thoughts on cleaning it up.\r\n1) detect root of the proto file based on package? (though the only way to detect the directory structure is from the usages, nesting is not tied to package... so maybe not)\r\n2) default include to \".\" - probably breaks everything, but allow a special token of \"WORKSPACE\" or something.\r\n3) since proto packages can be arbitrary, i.e. not relative to folder structure, always anchor include path from the WORKSPACE.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "r-custodio": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3411", "title": "Add clojure", "body": "Is it possible to add clojure to the lang list?", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "roczpwu": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3402", "title": "protobuf-3.3.2 segment fault: 11", "body": "php-version: php 7.1.7\r\nprotobuf-vsesion:protobuf 3.3.2(https://pecl.php.net/package/protobuf/3.3.2)\r\n\r\nHere is the proto file and  backtrace message:\r\n//=================================================\r\nsyntax = \"proto3\";\r\npackage com;\r\nmessage A\r\n{\r\n    string str = 1;\r\n}\r\nmessage B\r\n{\r\n    A a = 307001;\r\n    string json_body_req = 308000;\r\n}\r\n//=======================================================\r\nphp script is :\r\n$b = new \\Com\\B();\r\n$a = new Com\\A();\r\n$a->setStr(\"hello\");\r\n$b->setJsonBodyReq(\"world\");\r\n$b->setA($a);\r\n$str = $b->serializeToString();\r\n\r\n$b = new \\Com\\B();\r\n$b->mergeFromString($str);\r\nvar_dump($b->getA()->getStr());\r\n//=======================================================\r\nCore was generated by `php Client.php'.\r\nProgram terminated with signal 11, Segmentation fault.\r\n#0  stringdata_handler (closure=0x600000002, hd=0x322d2f0,\r\n    str=0x7efe59462419 \"hello\", len=5, handle=0x7fff883d3820)\r\n    at /root/protobuf-3.3.2/encode_decode.c:325\r\n325\t/root/protobuf-3.3.2/encode_decode.c: No such file or directory.\r\nMissing separate debuginfos, use: debuginfo-install cyrus-sasl-lib-2.1.26-20.el7_2.x86_64 glibc-2.17-157.el7_3.5.x86_64 keyutils-libs-1.5.8-3.el7.x86_64 krb5-libs-1.14.1-27.el7_3.x86_64 libcom_err-1.42.9-9.el7.x86_64 libcurl-7.29.0-35.el7.centos.x86_64 libidn-1.28-4.el7.x86_64 libjpeg-turbo-1.2.90-5.el7.x86_64 libmcrypt-2.5.8-13.el7.x86_64 libpng-1.5.13-7.el7_2.x86_64 libselinux-2.5-6.el7.x86_64 libssh2-1.4.3-10.el7_2.1.x86_64 libxml2-2.9.1-6.el7_2.3.x86_64 nspr-4.13.1-1.0.el7_3.x86_64 nss-3.28.4-1.2.el7_3.x86_64 nss-softokn-freebl-3.16.2.3-14.4.el7.x86_64 nss-util-3.28.4-1.0.el7_3.x86_64 openssl-libs-1.0.1e-60.el7_3.1.x86_64 pcre-8.32-15.el7_2.1.x86_64 xz-libs-5.2.2-1.el7.x86_64 zlib-1.2.7-17.el7.x86_64\r\n(gdb) bt\r\n#0  stringdata_handler (closure=0x600000002, hd=0x322d2f0,\r\n    str=0x7efe59462419 \"hello\", len=5, handle=0x7fff883d3820)\r\n    at /root/protobuf-3.3.2/encode_decode.c:325\r\n#1  0x00007efe58ec4cc7 in upb_sink_putstring (handle=0x7fff883d3820, n=5,\r\n    buf=<optimized out>, sel=2, s=<optimized out>)\r\n    at /root/protobuf-3.3.2/upb.h:6285\r\n#2  run_decoder_vm (d=0x7fff883d3908, group=<optimized out>, handle=0x7fff883d3820)\r\n    at /root/protobuf-3.3.2/upb.c:9942\r\n#3  0x00007efe58eb6b86 in upb_bytessink_putbuf (s=0x7fff883d3910,\r\n    handle=0x7fff883d3820, size=22,\r\n    buf=0x7efe59462408 \"\\202\\262\\226\\001\\005world\\312\\363\\225\\001\\a\\n\\005hello\",\r\n    subc=<optimized out>) at /root/protobuf-3.3.2/upb.h:6228\r\n#4  upb_bufsrc_putbuf (\r\n    buf=0x7efe59462408 \"\\202\\262\\226\\001\\005world\\312\\363\\225\\001\\a\\n\\005hello\",\r\n    len=22, sink=0x7fff883d3910) at /root/protobuf-3.3.2/upb.c:5106\r\n#5  0x00007efe58ead8f1 in zim_Message_mergeFromString (\r\n    execute_data=<optimized out>, return_value=<optimized out>)\r\n    at /root/protobuf-3.3.2/encode_decode.c:1449\r\n#6  0x000000000089a696 in ZEND_DO_FCALL_SPEC_RETVAL_UNUSED_HANDLER ()\r\n    at /root/php-7.1.7/Zend/zend_vm_execute.h:970\r\n#7  0x000000000084930b in execute_ex (ex=<optimized out>)\r\n    at /root/php-7.1.7/Zend/zend_vm_execute.h:429\r\n#8  0x000000000089c3f4 in zend_execute (op_array=0x7efe59480000,\r\n    op_array@entry=0x7efe59463ae0, return_value=return_value@entry=0x7efe59413030)\r\n    at /root/php-7.1.7/Zend/zend_vm_execute.h:474\r\n#9  0x00000000008045a4 in zend_execute_scripts (type=type@entry=8,\r\n    retval=0x7efe59413030, retval@entry=0x0, file_count=file_count@entry=3)\r\n    at /root/php-7.1.7/Zend/zend.c:1476\r\n#10 0x00000000007a56f0 in php_execute_script (\r\n    primary_file=primary_file@entry=0x7fff883d6d50)\r\n    at /root/php-7.1.7/main/main.c:2537\r\n#11 0x000000000089e58f in do_cli (argc=2, argv=0x306dae0)\r\n    at /root/php-7.1.7/sapi/cli/php_cli.c:993\r\n#12 0x000000000043cea0 in main (argc=2, argv=0x306dae0)\r\n    at /root/php-7.1.7/sapi/cli/php_cli.c:1381\r\n(gdb) source /root/php-7.1.7/.gdbinit\r\n(gdb) zbacktrace\r\n[0x7efe59413260] Google\\Protobuf\\Internal\\Message->mergeFromString(\"\\37777777602\\37777777662\\37777777626\\1\\5world\\37777777712\\37777777763\\37777777625\\1\\7\\12\\5hello\") [internal function]\r\n[0x7efe59413030] (main) /root/test/tsf2.0/App/Udp/Client.php:26\r\n(gdb)", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hzhxxx": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3400", "title": "javascript use int32 data type,nesting struct  deserializeBinary fail", "body": "\r\nif message OwnersInfoResp define \r\nmessage UserInfo\r\n\t{\r\n\t\tint32 UserId = 1;\r\n\t\tstring PhoneNumber = 2;\r\n\t\tstring NickName = 3;\r\n\t\tstring Gender = 4;\r\n\t\tint32 Birthday = 5;\r\n\t}\r\nthen ,deserializeBinary fail \r\n\r\nsyntax = \"proto3\";\r\npackage manage;\r\nmessage OwnersInfoResp\r\n{\r\n\tint32 Result = 1;\r\n\tstring ErrMsg = 2;\r\n\t//\u4e2a\u4eba\u4fe1\u606f\r\n\tmessage UserInfo\r\n\t{\r\n\t\tstring UserId = 1;\r\n\t\tstring PhoneNumber = 2;\r\n\t\tstring NickName = 3;\r\n\t\tstring Gender = 4;\r\n\t\tstring Birthday = 5;\r\n\t}\r\n\tmessage OwnerInfo\r\n\t{\r\n\t\tstring AreaId = 1;\r\n\t\tstring AreaName = 2;\r\n\t\tstring BuildNo = 3;  //\u680b\r\n\t\tstring UnitNo = 4;  //\u5355\u5143\r\n\t\tstring HouseNo = 5;  //\u623f\u53f7\r\n\t\tstring Type = 6; // 1:\u4e1a\u4e3b  2:\u79df\u5ba2\r\n\t\tUserInfo User = 7;  //\u4e2a\u4eba\u4fe1\u606f\t\t\r\n\t}\t\r\n\trepeated OwnerInfo OwnerList = 3;\r\n\t//repeated UserInfo User = 4;  //\u4e2a\u4eba\u4fe1\u606f\t\r\n}\r\n\r\n/*\r\n\r\n\u652f\u6301\u4e09\u5c42\u5d4c\u5957\uff0c\u603b\u4f53\u770b\uff0c\u8fd8\u662f\u6574\u6570\u7684\u95ee\u9898\u3002\u88ab\u5d4c\u5957\u7684\u5bf9\u8c61\uff0c\u5fc5\u987b\u5168\u90e8\u662f\u5b57\u7b26\u4e32\u3002\r\n\u5982\u679c\u88ab\u5d4c\u5957\u7684\u5bf9\u8c61\uff0c\u51fa\u73b0\u4e86\u6574\u6570\uff0c\u5e76\u5bf9\u8fd9\u4e2a\u6574\u6570\u8fdb\u884c\u4e86\u8d4b\u503c\uff0c\u5e8f\u5217\u5316\u540e\u53cd\u5e8f\u5217\u5316\u5c31\u4f1a\u5931\u8d25\r\n*/\r\n\r\nvar http = require('http');\r\nrequire('./manage_pb');\r\nrequire('./encoding-indexes');\r\nvar encoding = require('./encoding');\r\nvar fs = require('fs');\r\n\r\n/**\r\n * Convert an Uint8Array into a string.\r\n *\r\n * @returns {String}\r\n */\r\nfunction Decodeuint8arr(uint8array){\r\n    var d = new encoding.TextDecoder(\"utf-8\");\r\n    return d.decode(uint8array);\r\n}\r\n\r\n/**\r\n * Convert a string into a Uint8Array.\r\n *\r\n * @returns {Uint8Array}\r\n */\r\nfunction Encodeuint8arr(myString){\r\n    var e = new encoding.TextEncoder(\"utf-8\");\r\n    return e.encode(myString);\r\n}\r\n\r\n//\u5e8f\u5217\u5316\r\nvar ownersinforesp = new proto.manage.OwnersInfoResp();\r\nownersinforesp.setResult(0);\r\nownersinforesp.setErrmsg(\"success\");\r\nvar ownerinfo = ownersinforesp.addOwnerlist();\r\nownerinfo.setAreaid('10001');\r\nownerinfo.setAreaname(\"\u9a8f\u5b8f\u79d1\u6280\");\r\nownerinfo.setBuildno(\"01\");\r\nownerinfo.setUnitno(\"01\");\r\nownerinfo.setHouseno(\"0201\");\r\nownerinfo.setType('1');\r\n\r\nvar user = new proto.manage.OwnersInfoResp.UserInfo();\t\r\nuser.setUserid('10003');\r\nuser.setBirthday('50');\r\nuser.setNickname(\"\u517d\u517d\");\r\nownerinfo.setUser(user);\r\n\r\nownerinfo = ownersinforesp.addOwnerlist();\r\nownerinfo.setAreaname(\"\u5c0f\u5c0f\u7a9d\");\r\nownerinfo.setAreaid('10002');\r\nuser = new proto.manage.OwnersInfoResp.UserInfo();\r\nuser.setUserid('10004');\r\nuser.setBirthday('52535');\r\nuser.setNickname(\"joee\");\r\nownerinfo.setUser(user);\t\r\n\r\n//\u5199\u6587\u4ef6\r\nvar bytes = ownersinforesp.serializeBinary();\r\nfs.writeFile('./f_out',Decodeuint8arr(bytes),function(err)\r\n{\r\n\tif(err) throw err;\r\n\tconsole.log('writeFile  has finished\\n');\r\n});\r\n\r\n//\u8bfb\u6587\u4ef6\u53cd\u5e8f\u5217\u5316\r\nfs.readFile(\"./f_out\",function(err,bytes){\r\n\tif(err) throw err;\r\n\tif(bytes.length > 0)\r\n\t{\r\n\t\t//\u53cd\u5e8f\u5217\u5316\t\t\r\n\t\t//console.log(\"aa serializeBinary:\",bytes.length);\r\n\t\tarr = Encodeuint8arr(bytes);\r\n\t\townersinforesp = new proto.manage.OwnersInfoResp.deserializeBinary(arr);\r\n\t\tconsole.log(\"Result\",ownersinforesp.getResult());\r\n\t\tconsole.log(\"Errmsg\",ownersinforesp.getErrmsg());\r\n\t\tfor(var k = 0;k < ownersinforesp.getOwnerlistList().length;++k)\r\n\t\t{\r\n\t\t\tconsole.log(\"\\n\");\r\n\t\t\t//proto.manage.OwnersInfoResp.OwnerInfo \r\n\t\t\tf = ownersinforesp.getOwnerlistList()[k];\r\n\t\t\tconsole.log(\"getAreaid:\",f.getAreaid());\r\n\t\t\tconsole.log(\"getBuildno:\",f.getBuildno());\r\n\t\t\tconsole.log(\"getUnitno:\",f.getUnitno());\r\n\t\t\tconsole.log(\"getAreaname:\",f.getAreaname());\r\n\t\t\tif(f.hasUser())\r\n\t\t\t{\r\n\t\t\t\tconsole.log(\"getNickname:\",f.getUser().getNickname());\r\n\t\t\t\tconsole.log(\"getUserid:\",f.getUser().getUserid());\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t}\r\n});", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kstubs": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3384", "title": "Error compiling with VS 2017 Duplicate Attribute", "body": "I have several messages complaining about Duplicate attributes from Google.Protobuf(net45) project.  I'm not sure how to build.  Here is one of the exceptions.\r\n\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tCS0579\tDuplicate 'System.Reflection.AssemblyFileVersionAttribute' attribute\tGoogle.Protobuf(net45), Google.Protobuf(netstandard1.0)\tC:\\Tools\\protobuf-3.3.0\\csharp\\src\\Google.Protobuf\\obj\\Debug\\net45\\Google.Protobuf.AssemblyInfo.cs\t18\tActive\r\n```\r\n\r\n\r\n\r\nKarl..", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "inikulshin": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3380", "title": "Building with Visual Studio produces libprotobuf.dll without version information", "body": "Version, file description, copyright etc. - usually defined in *.rc file.\r\n\r\nThis data is critical for upgrading tools, comparing versions.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ewang": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3376", "title": "C++: Incorrect JSON output for NullValue", "body": "Given the following protobuf definition:\r\n```\r\nmessage Test {\r\n    google.protobuf.NullValue value = 1;\r\n}\r\n```\r\nAccording to the comment in `google/protobuf/struct.proto`, `google.protobuf.NullValue` should have a JSON representation of `null`. Currently it seems to print the enum string of `NULL_VALUE` instead.\r\n\r\nCurrent:\r\n```\r\n{\"value\": \"NULL_VALUE\"}\r\n```\r\nExpected:\r\n```\r\n{\"value\": null}\r\n```", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yurivict": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3373", "title": "Build fails on FreeBSD", "body": "See the log here https://github.com/tensorflow/magenta/issues/779 - in the version bundled with\r\n the magenta project.\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "amelhaoui": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3346", "title": "64 bit integer serialization error - JS - How to make writeUint64String default ?", "body": "Hi,\r\nI used this sample\r\n```\r\nsyntax = \"proto3\"; \r\n\r\nmessage foo {\r\n\tuint64 id = 1;\r\n}\r\n```\r\n\r\n```\r\nvar Foo = require('./foo_pb.js');\r\n\r\nvar foo_pb = new Foo.foo();\r\nfoo_pb.setId(18446744073709551615); // is saved as number not as string which cast it\r\nor\r\nfoo_pb.setId(\"18446744073709551615\"); // saved as is\r\n\r\nfoo_pb.serializeBinary(); // fails here even it's less than 2^64\r\n``` \r\n\r\nTo my understanding, 64 bit integers can be serialized since protobuf put it in a (low, high) uint32.\r\nThis changes when I change the method in the generated foo_pb.js from writeUInt64 to writeUInt64String.. any way to make default-generated  the second one ?\r\n\r\nThanks", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ryanmats": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3340", "title": "Trouble Installing the C Extension for PHP 5.5", "body": "I needed to [install gRPC for PHP](https://cloud.google.com/php/grpc) and part of the instructions included installing the Protobuf Runtime Library. I was unable to install the C extension, and got [this error message](https://paste.googleplex.com/6400195495460864). However, I was successfully able to install the PHP extension.\r\n\r\nI have the following version of PHP installed: PHP 5.5.9-1ubuntu4.21\r\n\r\n@TeBoring ", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "groganz": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3326", "title": "PHP: Provide field name in exception message when parsing JSON", "body": "When there's a mismatch between the defined and the provided value, this is how an error message looks like:\r\n\r\n`Error occurred during parsing: Invalid data type for int32 field`\r\n\r\nIt would be helpful to also include the name of the field, to more easily understand where the error occurred, e.g.:\r\n\r\n`Error occurred during parsing: Invalid data type for int32 field 'my_field'`\r\n\r\nThe respective code could be something like this at https://github.com/google/protobuf/blob/master/php/src/Google/Protobuf/Internal/Message.php#L772\r\n\r\n`\r\nif (!is_numeric($value)) {\r\n    throw new GPBDecodeException(\r\n        \"Invalid data type for int32 field '\" . $field->getName() . \"'\");\r\n    }\r\n`", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "oridb": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3316", "title": "There is no Java API for adding arrays of primitives to repeated fields without boxing", "body": "I would like to have an API for primitive types of repeated fields, in order to efficiently set them. The reason I need this is that I am transferring a large array of floats (representing the pixels of a thermal image), and would be happier if there was no need to box each float before adding it to the protobuf.\r\n\r\nIdeally, the protobuf would just provide a function `addAllBuffer(float[] data)` in addition to the current iterator based APIs. Currently, all of the APIs for adding an array involve boxing the data at some point or another.\r\n\r\nThe system setup is a little bit odd, since the grpc server is actually running on an android device, but I think this request applies in general.\r\n\r\n### Should this be an issue in the gRPC issue tracker?\r\n\r\nThis is a new feature request. Also, I was asked to file an issue by @ejona86.\r\n \r\n### What version of gRPC and what language are you using?\r\n\r\nI am using Java. The desired API is not present in all versions,  as far as I am aware.\r\n \r\n### What operating system (Linux, Windows, \u2026) and version?\r\n \r\nAndroid (Linux), targeting Android 6.\r\n\r\nYes, I would also like to switch to a newer version.\r\n\r\n### What runtime / compiler are you using (e.g. python version or version of gcc)\r\n \r\nAndroid Studio, with current versions of the toolchain.\r\n \r\n### What did you expect to see?\r\n\r\nAn efficient, boxing-free, method of adding a large array of primitives to a protobuf. \r\n \r\n### What did you see instead?\r\n \r\nhttp://cdn3.meme.am/cache/instances/folder113/500x/63531113/x-x-everywhere-boxing-boxing-everywhere.jpg\r\n \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3316/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stub42": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3307", "title": "import urls for well known types are undocumented", "body": "https://developers.google.com/protocol-buffers/docs/reference/google.protobuf lists all the well known types, but the URLs needed to import them into your .proto file are a secret. The only one I can find any reference to is Any, import \"google/protobuf/any.proto\". Others like Empty or any of the wrappers are undocumented.\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AlbinoGeek": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3305", "title": "[gRPC] [C#] Hard to catch `NullReferenceExceptions` on sub-types, not initialized empty (should be structs?)", "body": "**I could easily be doing something wrong.**\r\n\r\nUsing Protobuf frequently in C# I wonder why a message containing other messages doesn't unmarshal with default values, sometimes leading to `NullReferenceException`s that are hard to diagnose (as you do things in `async` sometimes... where Exceptions can't easily be linked back to the line that caused them.)\r\n\r\n**Conditions:**\r\n- I am using gRPC with a Service\r\n- I am filling data on the Server in Golang\r\n  - Standard signatures like `Login(ctx context.Context, in *TestProto.AuthRequest) (*TestProto.AuthResponse, error)`\r\n- I am reading the data on the Client in C#\r\n  - Connection handled by `new Channel(\"ip:port\", ChannelCredentials.Insecure);`\r\n  - I keep the Channel around for a while, and use it multiple times a second -- is that correct?  Should I be shutting down and creating new channels?  Is there connection pooling implemented somewhere I'm missing?\r\n\r\n**What I have tried:**\r\n- I have made sure to fill all fields on the server.. debug printing, etc.\r\n\r\n**The Problem:**\r\n- Sometimes the sub-fields come in as nulls\r\n\r\n**Test Protocol:**\r\n\r\n```protobuf\r\nsyntax = \"proto3\";\r\n\r\nservice Test {\r\n  rpc Login (AuthRequest) returns (AuthResponse) {}\r\n}\r\n\r\nmessage AuthRequest {\r\n  string username = 1;\r\n  string password = 2;\r\n}\r\n\r\nmessage AuthResponse {\r\n  bool ok = 1;\r\n  uint16 identifier = 2;\r\n  Account account = 3;\r\n}\r\n\r\nmessage User {\r\n  uint16 identifier = 1;\r\n  repeated Character characters = 8;\r\n}\r\n\r\nmessage Character {\r\n  uint16 identifer = 1;\r\n  uint16 padding = 2;\r\n  string name = 3;\r\n  Vec2 position = 6;\r\n}\r\n\r\nmessage Vec2 {\r\n  float32 x = 1;\r\n  float32 y = 2;\r\n}\r\n```\r\n\r\n**Test Client Code:**\r\n\r\n```csharp\r\n    public async bool Login(string hashed) {\r\n      AuthResposne response = await AuthRequest(hashed);\r\n      // Attempt to do something with response.Account can sometimes cause an exception\r\n      // Attempt to iterate a non-null response.Account.Characters to find null Position .....\r\n      return Task.FromResult(response.ok);\r\n    }\r\n    \r\n    private async Task<AuthResponse> AuthRequest(TestProto.Test.TestClient c, string hashed)\r\n    {\r\n        var async = c.LoginAsync(new AuthRequest {\r\n            Login = Username,\r\n            Password = hashed\r\n        });\r\n\r\n        return await async.ResponseAsync;\r\n    }\r\n    \r\n    private async Task<bool> StartBackgroundTasl(Task t) {\r\n      try {\r\n        await t; // Always throws NullReferenceException, real exception in t.Exception\r\n      } catch (Exception e) {\r\n        AggregateException ae = null;\r\n        try {\r\n          ae = t.Exception; // Get the inner exception\r\n        } catch (NullReferenceException e) {} // Inner exception might not exist\r\n        if (ae != null) throw ae; // or ae.Flatten();\r\n        throw e; // If t.Exception was null ...\r\n      }\r\n    }\r\n    \r\n    // Usage: StartBackgroundTask(Login(hashed));\r\n    // Can be called in sync and goes background\r\n```\r\n\r\nI thought the Unmarshal was supposed to give me structs all the way down, with all their default values.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "FlorianWolters": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3303", "title": "\"Official\" Wireshark dissector", "body": "**Note:** I know this is not the best place to post this kind of request, but I do not know where to post this elsewhere. Hopefully other people are also interested in this.\r\n\r\n----\r\n\r\nI do wonder what tools the folks at Google use internally to debug and analyze the Protobuf messages transferred over the wire (if using network communication).\r\n\r\nThe defacto standard to do network analyzes is the network tool [Wireshark](https://wireshark.org). The functionality of Wireshark can be extended with a *Protocol Dissector* (i.e. a plug-in) to support a (custom) protocol.\r\n\r\nI've researched a bit and found the following dissectors for Protobuf:\r\n- [Wireshark Protobuf Dissector](https://github.com/128technology/protobuf_dissector)\r\n  Dissector written in Lua. Does support `proto2` and UDP (without any prefixing) only. Pretty clumsy usage and buggy visualization.\r\n- [Length Prefixed Protocol Buffer Dissector](https://github.com/othrayte/lppb)\r\n  Seems to add length prefix support to the Lua dissector in order to support TCP. Haven't tested it.\r\n- [sst-dissector](https://github.com/pathorn/sst-dissector)\r\n  Undocumented C dissector. Haven't tested it.\r\n- [protobuf-wireshark](https://code.google.com/archive/p/protobuf-wireshark)\r\n  The first C dissector around. Project seems dead. Haven't tested it.\r\n- [protobuf-wireshark (fork)](https://github.com/chrisdew/protobuf-wireshark)\r\n  See above.\r\n\r\nThere are plenty of requests for a working and user-friendly dissector on the WWW, e.g.:\r\n- [How to make Wireshark tool support Protocol Buffers?](https://ask.wireshark.org/questions/27378/how-to-make-wireshark-tool-support-protocol-buffers)\r\n- [Protocol Buffer Wireshark Plugin](https://ask.wireshark.org/questions/29203/protocol-buffer-wireshark-plugin)\r\n- [Wireshark dissector for a Google Protocol Buffer defined protocol](https://ask.wireshark.org/questions/23808/wireshark-dissector-for-a-google-protocol-buffer-defined-protocol)\r\n- [How to parse protobuf packets in Wireshark](https://stackoverflow.com/questions/42394911/how-to-parse-protobuf-packets-in-wireshark)\r\n\r\nI would be very interested in some kind of official Wireshark protocol dissector with the following features:\r\n1. Supports both `proto3` and `proto2`.\r\n2. Supports both UDP and TCP (see point 3). The port ranges for both protocols should be configurable with the GUI of Wireshark (i.e. when to activate the dissector).\r\n3. Supports the configuration of a custom prefix with *length-prefix framing*. The custom prefix is configured by:\r\n    1. The total length (in bytes) of the custom prefix.\r\n    2. The position of the length-prefix.\r\n    3. The length (in bytes) of the length-prefix.\r\n  That would allow to support TCP as well as custom protocols that define additional fields.\r\n4. Supports both generic decoding as well as specific decoding (with the help of provided `.proto` files).\r\n    1. *generic*: Displays a aessage as `[numeric field id:value]` pairs. This does not require the `.proto` file(s).\r\n    2. *specific*: Displays a message as `[field name:value]` pairs.  This requires the `.proto` file(s) for the specific protocol. The addition of `.proto` file(s) should be possible via the GUI of Wireshark and the directory path to the official Protobuf `.proto` files should be configurable as well (e.g. `$PROTOBUF_ROOT/include/google/protobuf`).\r\n\r\nAt the end of the day it would be very nice to have some kind of official protocol dissector [contributed](https://www.wireshark.org/docs/wsdg_html_chunked/ChSrcContribute.html) to Wireshark.\r\n\r\nAre there any efforts towards an official Protobuf dissector for Wireshark? What does the community think? Is this considered useful? Or did I overlook an already existing solution that satisfies the requirements stated above?", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3303/reactions", "total_count": 8, "+1": 8, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jskeet": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3286", "title": "FieldMask.ToString isn't appropriate for headers", "body": "Calling FieldMask.ToString returns a value wrapped in quotes, because it's a JSON value.\r\n\r\nThat's not appropriate for the X-Goog-FieldMask header... and the fact that it converts fields into camelCase may be inappropriate too (still checking).\r\n\r\nWe should make this easy.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/47b7d2c7cadf74ceec90fc5042232819cd0dd557", "message": "Add DiscardUnknownFields support for C#\n\nBy default, unknown fields are preserved when parsing. To discard\nthem, use a parser configured to do so:\n\nvar parser = MyMessage.Parser.WithDiscardUnknownFields(true);"}, {"url": "https://api.github.com/repos/google/protobuf/commits/31c54d1289f2ae44158eff631526762366ba1707", "message": "Regenerated code from previous C# codegen commit\n\nWith this in place, all tests should pass.\n\nFixes #3725."}, {"url": "https://api.github.com/repos/google/protobuf/commits/3e5bd2fd240a28d7a8bfab5447e664189e06434b", "message": "C# code generation changes to use bitwise comparisons for doubles"}, {"url": "https://api.github.com/repos/google/protobuf/commits/f3e9a65d758d47633a161e526b35dea22bac9a5c", "message": "Compare floating point values bitwise in C#\n\nThis is the manual code part of the Google.Protobuf library, and tests.\nSome tests will fail until codegen is changed and rerun."}, {"url": "https://api.github.com/repos/google/protobuf/commits/74f64b667cc558cdc6318275d640e742e7f9cd8b", "message": "Fix JsonTokenizer exception message"}, {"url": "https://api.github.com/repos/google/protobuf/commits/91ff83c024be36e2f2728c30cd7eedcec9220d1a", "message": "Remove non-C# options from C#-only test protos"}, {"url": "https://api.github.com/repos/google/protobuf/commits/8cf53f8dfca43b0347efcc1052033c96aa3f626c", "message": "MMinor fix-ups to C# tests from changes in earlier commits"}, {"url": "https://api.github.com/repos/google/protobuf/commits/b5cdf0eac6625f4958f4cd2355f85f8e6e1811c3", "message": "Regenerated test code for C#"}, {"url": "https://api.github.com/repos/google/protobuf/commits/aa77eab622fe0ccc6cf7ec8a3fce1005dd759562", "message": "Move C#-only test protos to csharp/protos\n\nunittest_proto3 had been changed in a very backward-incompatible\nway which was never going to work with C# as it imports proto2 messages.\n\nThis is now a copy of the old file, but with a package name change for\ncompatibility with the remaining files in src/google/protobuf.\n\nThe other moves are for files that are only used by C#."}, {"url": "https://api.github.com/repos/google/protobuf/commits/9a9a66e71557a5b19c96677eb26f97067c0a06d6", "message": "Run C# codegen when testing it\n\nThis will cause failures if shared protos change in an incompatible\nway."}, {"url": "https://api.github.com/repos/google/protobuf/commits/cbe250591fca9d2e776776be065a72c5550a5556", "message": "Fix merging with message-valued oneof\n\nIf messages A and B have the same oneof case, which is a message\ntype, and we merge B into A, those sub-messages should be merged.\n\nFixes #3200.\n\nNote that I haven't regenerated all the code, as some of the protos\nhave been changed, breaking generation."}, {"url": "https://api.github.com/repos/google/protobuf/commits/e8c9ae120985b4b6056762e23fea41b9b68dfa0e", "message": "Add parser settings WithXyz methods"}, {"url": "https://api.github.com/repos/google/protobuf/commits/a9854512532a42c174e1aa496d4bfe05b04645d0", "message": "Add JsonParser setting to ignore unknown field values\n\nNote that the default behavior is still to throw an exception; you\nneed to opt into ignoring unknown fields.\n\nFixes #2838."}], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4208", "title": "Update .NET SDK to 2.0.3", "body": "This will allow SourceLink as per #4179, and mean that we can use C#\r\n7.X language features in the library (but not in generated code).\r\n\r\nThis does not affect which platforms we're *targeting*, so end users\r\nwon't see any difference.\r\n\r\n(Will assign a reviewer when CI is happy.)", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/3794", "title": "Change C# reflection to avoid using expression trees", "body": "This should work on Unity, Mono and .NET 3.5 as far as I'm aware.\r\nIt won't work on platforms where reflection itself is prohibited,\r\nbut that's a non-starter basically.\r\n\r\nCreating a PR to start with, but I'd like to test it in other environments before merging.\r\nOnce this is in, we can look at potentially officially supporting .NET 3.5 and Unity (#644).", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/11915790", "body": "Thanks for spotting it - will add an issue now.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/11915790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/15145545", "body": "Yes, in https://github.com/jskeet/protobuf/commit/e94bdd9303db0ffba6fc380f3e5f138af91ff6be\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/15145545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/18319085", "body": "Well, there are a couple of options:\n- Use dotnet cli instead of xbuild/msbuild yourself; you could easily add a small piece of JSON to target net35 and define the DOTNET35 symbol\n- Generate the csproj file entirely, by just taking what you've got as a template and replacing the list of files with one you generate just from using find -name '*cs.'\n\nThe JSON you would need in project.json is simply:\n\n```\n\"net35\": { \"buildOptions\": [\"DOTNET35\"] }\n```\n\nI've validated that that builds for the main project; if you're running the unit tests as well, you may find things are slightly trickier, but I haven't looked into that.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/18319085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/18337736", "body": "I'm not putting the change in the repo as that would suggest we support Unity, which we emphatically _don't_ yet. My experience of the previous version supporting Unity was that it was a complete pain, with odd bugs from the extremely old runtime that was being used. It's possible that in the future we _may_ support Unity, but not yet.\n\n(Thanks for the correction for the define bit... that's what comes of me retyping instead of copying and pasting...)\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/18337736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/21584319", "body": "That was *always* a bug - `ByteString` is clearly intended to be immutable.\r\n\r\nYou could propose alternative ways of extracting the data in a way which is more efficient for your use case, but I really don't want to make mutable `ByteString`s available.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/21584319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/21584741", "body": "Put it this way: if you asked Microsoft to do something similar for System.String, do you think they would?\r\n\r\nYou could always call it by reflection if you want to be underhand.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/21584741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/21585019", "body": "So pass the `ByteString` to whatever needs it. That's easy, and you can do so safely precisely *because* it's immutable. You can parse another message directly from a `ByteString` if need be (IIRC), and if you need to write the `ByteString` to a stream, we could add *that* functionality safely if it's not already there. But I will continue to resist wrecking the guarantee of immutability that `ByteString` has always presented (even if it was broken in the previous library).", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/21585019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/22381112", "body": "Nope - it would do basically nothing.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/22381112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "kesinger": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3279", "title": "Python3: text_format.merge needs a check-and-decode step?", "body": "text_format.Parse has a check to ensure that it's been passed a string:\r\n\r\n    if not isinstance(text, str):\r\n        text = text.decode('utf-8')\r\n\r\nbut text_format.Merge does not, so if it gets passes a bytes object, it will fail at \r\n\r\n    text.split('\\n'),\r\n\r\nwith a TypeError:\r\n\r\n    TypeError: a bytes-like object is required, not 'str'\r\n\r\nAdding the same check as from text_format.Parse \"fixes\" the error.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Nukesor": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3276", "title": "[Python] TypeError: A Message class can only inherit from Message", "body": "Hi!\r\n\r\nI'm currently trying to run several Flask server instances with tensorflow inside of them.\r\nThe server instances are managed by an uWSGI emperor.\r\nAs long as I start the instance without the emperor, everything works perfectly fine:\r\n```\r\nuwsgi -s /tmp/solar.sock --manage-script-name --mount /=server:app --chown www-data --plugins python35 --venv ./venv\r\n```\r\nBut as soon as i try to launch it utilizing the emperor, I get this error during app initialization:\r\n```\r\nTraceback (most recent call last):\r\n  File \"./server/__init__.py\", line 6, in <module>\r\n    from server.predict_service import PredictService\r\n  File \"./server/predict_service.py\", line 1, in <module>\r\n    import tensorflow as tf\r\n  File \"/opt/apps/solar/venv/lib/python3.5/site-packages/tensorflow/__init__.py\", line 24, in <module>\r\n    from tensorflow.python import *\r\n  File \"/opt/apps/solar/venv/lib/python3.5/site-packages/tensorflow/python/__init__.py\", line 52, in <module>\r\n    from tensorflow.core.framework.graph_pb2 import *\r\n  File \"/opt/apps/solar/venv/lib/python3.5/site-packages/tensorflow/core/framework/graph_pb2.py\", line 10, in <module>\r\n    from google.protobuf import descriptor_pb2\r\n  File \"/opt/apps/solar/venv/lib/python3.5/site-packages/google/protobuf/descriptor_pb2.py\", line 1716, in <module>\r\n    __module__ = 'google.protobuf.descriptor_pb2'\r\nTypeError: A Message class can only inherit from Message\r\n```\r\nI really don't know what causes this to happen. I know that this is a rare setup, but I would really appreciate every help I could get on this topic.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rosun82": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3265", "title": "Java protobuf release 3.3.0 breaks normal protobuf promise", "body": "If a field is not filled, why isn't it defaults to the zero value of that type, as in all other languages?!!!\r\n\r\nWhat benefit does UNRECOGNIZED brings in?!!!", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ArnJac": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3257", "title": "protobuf-mode broken w/ emacs 24.3.1", "body": "The latest protobuf-mode.el from melpa (20170526.950) seems to be broken with\r\nemacs 24.3.1.\r\n\r\nEven though the compilation process ends with two warnings emacs says that it cannot load protobuf-mode.\r\n\r\nIn order to get a working protobuf-mode I had to download the previous tagged version of protobuf-mode.el and place it somewhere emacs can find it, e.g. ~/.emacs.d/lisp.\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ccl0326": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3247", "title": "In Java, shortDebugString is unfriendly with unicode, and printToUnicodeString it unfriendly with multiline.", "body": "Why not make shortDebugString compatible with unicode or add new helper function shortDebugUnicodeString?", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tomasreimers": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3245", "title": "Using JS typed arrays in JoinFloat", "body": "Hi, \r\n\r\nHas anyone thought of using JS typed arrays in the splitFloat and joinFloat methods for the JavaScript library (https://github.com/google/protobuf/blob/master/js/binary/utils.js#L388)? \r\n\r\nOne could imagine adding something like: \r\n\r\n```\r\njspb.utils.joinFloat64 = function(bitsLow, bitsHigh) {\r\n    if (window.Uint32Array) {\r\n        bytes = Uint8Array.of(bitsLow, bitsHigh)\r\n        data = new Float64Array(bytes.buffer)\r\n        return data[0];\r\n    }\r\n    // ...\r\n}\r\n```\r\n\r\nAnd vica-versa for the splitFloat method. This might increase readability (and depending on if it taps into the JS engine's native implementation, maybe even speed).\r\n\r\nHappy to write the PR, just curious if it would be useful / appreciated! \r\n\r\nLet me know,\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3245/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "agrabil": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3227", "title": "Make fails on Solaris 10 Sparc", "body": "Hello,\r\nTrying to build protobuf on Solaris 10 Sparc system.  I have used the following configure options:\r\n\r\n./configure CXXFLAGS=\"-D_GLIBCXX_USE_C99_MATH\" --disable-shared --prefix=/opt/protobuf\r\n\r\nGCC is version 4.9.0. When I run 'make', it fails with the following:\r\n\r\n```\r\nlibtool: compile:  g++ -std=c++11 -DHAVE_CONFIG_H -I. -I.. -D_REENTRANT -pthreads -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -D_GLIBCXX_USE_C99_MATH -m64 -MT google/protobuf/compiler/js/js_generator.lo -MD -MP -MF google/protobuf/compiler/js/.deps/js_generator.Tpo -c google/protobuf/compiler/js/js_generator.cc -o google/protobuf/compiler/js/js_generator.o\r\ng++ -o js_embed\r\ng++: fatal error: no input files\r\ncompilation terminated.\r\n*** Error code 1\r\nmake: Fatal error: Command failed for target `js_embed'\r\nCurrent working directory /opt/dev/work/build/protobuf-3.3.1/src\r\n*** Error code 1\r\nThe following command caused the error:\r\nfail= failcom='exit 1'; \\\r\nfor f in x $MAKEFLAGS; do \\\r\n  case $f in \\\r\n    *=* | --[!k]*);; \\\r\n    *k*) failcom='fail=yes';; \\\r\n  esac; \\\r\ndone; \\\r\ndot_seen=no; \\\r\ntarget=`echo all-recursive | sed s/-recursive//`; \\\r\ncase \"all-recursive\" in \\\r\n  distclean-* | maintainer-clean-*) list='gmock src conformance benchmarks' ;; \\\r\n  *) list='. src' ;; \\\r\nesac; \\\r\nfor subdir in $list; do \\\r\n  echo \"Making $target in $subdir\"; \\\r\n  if test \"$subdir\" = \".\"; then \\\r\n    dot_seen=yes; \\\r\n    local_target=\"$target-am\"; \\\r\n  else \\\r\n    local_target=\"$target\"; \\\r\n  fi; \\\r\n  (CDPATH=\"${ZSH_VERSION+.}:\" && cd $subdir && make  $local_target) \\\r\n  || eval $failcom; \\\r\ndone; \\\r\nif test \"$dot_seen\" = \"no\"; then \\\r\n  make  \"$target-am\" || exit 1; \\\r\nfi; test -z \"$fail\"\r\nmake: Fatal error: Command failed for target `all-recursive'\r\nCurrent working directory /opt/dev/work/build/protobuf-3.3.1\r\n*** Error code 1\r\nmake: Fatal error: Command failed for target `all'\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Spenhouet": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3223", "title": "Fatal error C1057 in multiple cc files", "body": "### System information\r\n- **OS Platform**: `Windows 10`\r\n- **Protobuf version**: 3.2.0\r\n- **TensorFlow version**: `v1.2.0-rc2`\r\n- **Bazel version**: `git/master`\r\n- **Python**: 3.6.1 x64\r\n- **Exact command to reproduce**: `bazel build -c opt --cpu=x64_windows_msvc --host_cpu=x64_windows_msvc --copt=-w --host_copt=-w tensorflow/tools/pip_package:build_pip_package`\r\n\r\n### Describe the problem\r\n\r\nI try to compile TensorFlow on Windows with Bazel (without GPU support). But i run into a error (see down below).\r\n\r\n### Error log\r\n```\r\nERROR: C:/users/spenh/appdata/local/temp/_bazel_spen/icnq02mb/external/protobuf/BUILD:623:1: C++ compilation of rule '@protobuf//:python/google/protobuf/pyext/_message.so' failed: msvc_cl.bat failed: error executing command external/local_config_cc/wrapper/bin/msvc_cl.bat /DOS_WINDOWS=OS_WINDOWS /DCOMPILER_MSVC /DNOGDI /DNOMINMAX /DPRAGMA_SUPPORTED /D_WIN32_WINNT=0x0600 /D_CRT_SECURE_NO_DEPRECATE /D_CRT_SECURE_NO_WARNINGS ... (remaining 42 argument(s) skipped): com.google.devtools.build.lib.shell.BadExitStatusException: Process exited with status 2.\r\nC:\\users\\spenh\\appdata\\local\\temp\\_bazel_spen\\icnq02mb\\execroot\\org_tensorflow\\external\\protobuf\\python\\google\\protobuf\\pyext\\message.cc(1064): error C2121: \"#\": ung\u00fcltiges Zeichen: m\u00f6glicherweise das Ergebnis einer Makroerweiterung\r\nC:\\users\\spenh\\appdata\\local\\temp\\_bazel_spen\\icnq02mb\\execroot\\org_tensorflow\\external\\protobuf\\python\\google\\protobuf\\pyext\\message.cc(1064): error C2059: Syntaxfehler: \"if\"\r\nTarget //tensorflow/tools/pip_package:build_pip_package failed to build\r\n```\r\nThe error seems to be in line 1064:\r\n\r\n```\r\n1056   if (PySlice_Check(slice)) {\r\n1057     from = to = step = slice_length = 0;\r\n1058     PySlice_GetIndicesEx(\r\n1059 #if PY_MAJOR_VERSION < 3\r\n1060         reinterpret_cast<PySliceObject*>(slice),\r\n1061 #else\r\n1062         slice,\r\n1063 #endif\r\n1064         length, &from, &to, &step, &slice_length);\r\n1065     if (from < to) {\r\n1066       min = from;\r\n1067       max = to - 1;\r\n1068     } else {\r\n1069       min = to + 1;\r\n1070       max = from;\r\n1071     }\r\n1072   } else {\r\n```\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lvht": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/3220", "title": "upgrade plugin.proto and protobuf/descriptor.proto to version 3", "body": "PHP code generation has been introduced in V3.0.0. And it seems that protobuf only support generating php code for generating php code.\r\n\r\nIf we transform this proto to version 3, we could generate php code, and make it is possible to write plugin by pure php code.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/3220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4191", "title": "PHP: disable unicode escape for json", "body": "Add the `JSON_UNESCAPED_UNICODE` options so that characters like **\u4e2d\u56fd** will not be escaped into **\\u4e2d\\u56fd** to improve serialize and transfer performance.", "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/4135", "title": "PHP: Add support for generating php code for plugin.proto", "body": "Generate php file for the **plugin.proto**, so that we can use php to develop protoc-gen-plugin.\r\n\r\nAlso fix the issue #3220\r\n\r\nAnd here is a demo,\r\n\r\n```php\r\n<?php\r\nrequire './vendor/autoload.php';\r\n\r\n$input = file_get_contents(\"php://stdin\");\r\n$request = new Google\\Protobuf\\Internal\\CodeGeneratorRequest;\r\n$response = new Google\\Protobuf\\Internal\\CodeGeneratorResponse;\r\n$request->mergeFromString($input);\r\n\r\n/** @var \\Google\\Protobuf\\Internal\\FileDescriptorProto $fs */\r\n$fs = $request->getProtoFile()[0];\r\n$package = $fs->getPackage();\r\n\r\n$f = new \\Google\\Protobuf\\Internal\\CodeGeneratorResponse_File();\r\n$f->setName(\"foo.php\");\r\n$f->setContent(\"<?php // $package\\n\");\r\n\r\n$response->setFile([$f]);\r\n\r\nfile_put_contents(\"php://stdout\", $response->serializeToString());\r\n```\r\n  ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dierksen": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/a721bf6d294915b412e4ba6b5d92a9b84c6bfef9", "message": "Migrate away from deprecated OSAtomic APIs. (#4184)\n\n* Migrate away from deprecated OSAtomic APIs."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "BSBandme": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/9f80df026933901883da1d556b38292e14836612", "message": "Merge pull request #4158 from BSBandme/FixBenchmarks\n\nFix java benchmark to use parser, fix cpp benchmark new arena to use \u2026"}, {"url": "https://api.github.com/repos/google/protobuf/commits/473a8109751123eafe9ff7932703cb12b26a893a", "message": "Update py_benchmark.py"}, {"url": "https://api.github.com/repos/google/protobuf/commits/fa60e550ec8ca140f60a3cb8f36fa41fc45acb27", "message": "Fix java benchmark to use parser, fix cpp benchmark new arena to use Reset, format some files"}, {"url": "https://api.github.com/repos/google/protobuf/commits/bab843b8b96757ed2138fdc01dc5d82d47a2239c", "message": "Merge pull request #4132 from BSBandme/JavaCaliperCounter\n\nJava caliper counter"}, {"url": "https://api.github.com/repos/google/protobuf/commits/195253c3f6e698fba8b58d7c810610dd86855d14", "message": "Add counter to Java benchmark"}, {"url": "https://api.github.com/repos/google/protobuf/commits/4adc5a48c07a13489670384ab584806534024a58", "message": "Merge pull request #4065 from BSBandme/python_benchmark_real\n\nAdd python benchmark"}, {"url": "https://api.github.com/repos/google/protobuf/commits/2fc69b1561e1feaa1cbc56d1617f949d13352b97", "message": "Add python benchmark"}, {"url": "https://api.github.com/repos/google/protobuf/commits/43caa38d6ed68129d28bf4528488e4f389a33b34", "message": "Merge pull request #4014 from BSBandme/JavaCaliper\n\nAdd caliper supported to java benchmark"}, {"url": "https://api.github.com/repos/google/protobuf/commits/aca6c155981859e99460835ccc791fac9d350b47", "message": "Fix some bug"}, {"url": "https://api.github.com/repos/google/protobuf/commits/a147a213764e0a34e0c0edf9fddaeb6aa608bd0d", "message": "Changed README"}, {"url": "https://api.github.com/repos/google/protobuf/commits/4b0209140ea3155b78960d2fe3f62062c1c098a6", "message": "add cpp"}, {"url": "https://api.github.com/repos/google/protobuf/commits/cd32aae377993b727447f1ba25bd186b530969cb", "message": "Merge branch 'master' of https://github.com/google/protobuf into JavaCaliper"}, {"url": "https://api.github.com/repos/google/protobuf/commits/75523ec0867969ce6a1bcb9d9a7e1b686747eb47", "message": "fix bugs"}, {"url": "https://api.github.com/repos/google/protobuf/commits/34843eddfe65686a86d12780d1ca709a997d83ad", "message": "Fix bugs"}, {"url": "https://api.github.com/repos/google/protobuf/commits/5e732e35c1aea3a00903aae50f63cf1cf9166833", "message": "Add caliper supported to java benchmark"}, {"url": "https://api.github.com/repos/google/protobuf/commits/173f3043d30317c16caa6a5c1e16db2540e8170c", "message": "Merge pull request #3926 from BSBandme/down_sync_benchmark\n\nSync benchmark changes from internal"}, {"url": "https://api.github.com/repos/google/protobuf/commits/1fd6c1761e7c70081af3b71a76a890002d4b578d", "message": "Fix bugs to pass tests"}, {"url": "https://api.github.com/repos/google/protobuf/commits/1c062a65af0fb439167d9cf81ef28c14c3836ace", "message": "Sync internal benchmark changes"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "acozzette": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/b77aa8011d450e314690e430ede85d4ab20abaf3", "message": "Merge pull request #4148 from datacompboy/patch-2\n\nAdd more tests to time_test"}, {"url": "https://api.github.com/repos/google/protobuf/commits/d4afdba83d19fded7822324a7f8e68648d296260", "message": "Merge pull request #4147 from datacompboy/patch-1\n\nFix ValidateDateTime: check day instead month"}, {"url": "https://api.github.com/repos/google/protobuf/commits/eca1d2a7113b3d57f900f69661342c0078c956c4", "message": "Merge pull request #4116 from amandeepgautam/master\n\nwhitelisting aix platform as it has sched_yield"}, {"url": "https://api.github.com/repos/google/protobuf/commits/1e418e4e54625777e903ea65b2dd290d5432180b", "message": "Merge pull request #4068 from wsw2016/fix_4032\n\nresolved issue 4032 and added a unit test"}, {"url": "https://api.github.com/repos/google/protobuf/commits/269884a1eb7a1d19d38cf8e61fa436ee8b7849f9", "message": "Merge pull request #4040 from bazurbat/3.5.x\n\nCreate containing directory before generating well_known_types_embed.cc"}, {"url": "https://api.github.com/repos/google/protobuf/commits/396336eb961b75f03b25824fe86cf6490fb75e3a", "message": "Merge pull request #4046 from acozzette/deprecated-valueof-issue-2054\n\nJava: generate an annotation to suppress deprecation warnings"}, {"url": "https://api.github.com/repos/google/protobuf/commits/03501110cca54d5a2a5dd5a7b1be9c32be889a89", "message": "Generate an annotation to suppress deprecation warnings\n\nThe valueOf method on enums is deprecated, but for compatibility reasons\nthe generated code has to keep using it. We can use an annotation to\nsuppress the deprecation warnings."}, {"url": "https://api.github.com/repos/google/protobuf/commits/00ac5c1ab6785d0dc2cc69211f55cd957bf82f3a", "message": "Merge pull request #4041 from acozzette/fix-license-issue-1775\n\nAdded our standard license header to structurally_valid.cc and its test"}, {"url": "https://api.github.com/repos/google/protobuf/commits/ecab9c65fbfd597f88e11b61c597b271c0b12ead", "message": "Added our standard license header to structurally_valid.cc and its test\n\nThis fixes issue #1775."}, {"url": "https://api.github.com/repos/google/protobuf/commits/618f06fc9cd7fd872de8977dfe40294cadb4af21", "message": "Merge pull request #4007 from graywolf/patch-1\n\n--pre is not necessary"}, {"url": "https://api.github.com/repos/google/protobuf/commits/a426833d1a64e23df69775d1abe5b87a2ea6bfdb", "message": "Merge pull request #4000 from Kwizatz/master\n\nUsing binary one's complement to negate an unsigned int"}, {"url": "https://api.github.com/repos/google/protobuf/commits/9b09a2af148044b5a0fd4c689430ffa63b8e2489", "message": "Merge pull request #4017 from acozzette/update-file-lists\n\nRan update_file_lists.sh to update Bazel and CMake file lists"}, {"url": "https://api.github.com/repos/google/protobuf/commits/0fcca8f91079ae75dafaaf39ab919b2b6906a3b4", "message": "Merge pull request #4018 from acozzette/android-portable-log2-floor\n\nUse the portable version of Log2Floor for Clang with older Android NDK versions"}, {"url": "https://api.github.com/repos/google/protobuf/commits/63a0afca7093d9c4e63dd27cb4dc1f1974d328a0", "message": "Use the portable version of Log2Floor for Clang with older Android NDK versions\n\nThis is necessary for avoiding a strange compiler error that we have\nalready run into with older versions of Clang on NaCl."}, {"url": "https://api.github.com/repos/google/protobuf/commits/609d752650b180fdbf189ff158bbc4f32a0554e2", "message": "Ran update_file_lists.sh to update Bazel and CMake file lists\n\nThis should fix Bazel builds, since those were missing a new file\n(implicit_weak_message.cc)."}, {"url": "https://api.github.com/repos/google/protobuf/commits/9021f623e1420f513268a01a5ad43a23618a84ba", "message": "Merge pull request #3988 from acozzette/down-integrate\n\nIntegrated internal changes from Google"}, {"url": "https://api.github.com/repos/google/protobuf/commits/e372df5c975dc9720c9252e9b0b25c03e7c4b713", "message": "Fixed failing JS tests"}, {"url": "https://api.github.com/repos/google/protobuf/commits/7bb8584f9d4114fda7360f9f677bcc04e718be18", "message": "Updated conformance failure lists"}, {"url": "https://api.github.com/repos/google/protobuf/commits/5d647e19e71ea46a31ae3825e3605d60b4b02489", "message": "Updated Makefile.am to add a new file to EXTRA_DIST"}, {"url": "https://api.github.com/repos/google/protobuf/commits/0ba8eea655a5e40d19ab95c773192b5d908c5a61", "message": "Merge branch 'master' into down-integrate"}, {"url": "https://api.github.com/repos/google/protobuf/commits/92a7e778e7394386f413cec28d67a07630f784b1", "message": "Integrated internal changes from Google"}, {"url": "https://api.github.com/repos/google/protobuf/commits/a711e3d5b4ee1dd7f9d21197dca8432a5819a64e", "message": "Merge pull request #3979 from acozzette/3.5.x-merge\n\nMerge 3.5.x branch into master"}, {"url": "https://api.github.com/repos/google/protobuf/commits/a27da093393d3dc7301d27fe328284335cb98528", "message": "Merge branch '3.5.x' into 3.5.x-merge"}, {"url": "https://api.github.com/repos/google/protobuf/commits/3c6fd3f7f9ebd5bdd909e0915f79f5a118773d46", "message": "Merge pull request #3960 from acozzette/libprotoc-export-fix\n\nAdded back in LIBPROTOC_EXPORT which was removed by mistake"}, {"url": "https://api.github.com/repos/google/protobuf/commits/1b1d1ea340c12c9fd030dac7581af4f30a850941", "message": "Added back in LIBPROTOC_EXPORT which was removed by mistake"}, {"url": "https://api.github.com/repos/google/protobuf/commits/34e30e5c1befb17c9307950b1aa58a3854e18121", "message": "Merge pull request #3962 from jleni/fix_dotnet\n\nUpgrading dotnet to 1.0.4"}, {"url": "https://api.github.com/repos/google/protobuf/commits/2fc7aea3602eac3c3eb8d82e274851621e7443de", "message": "Merge pull request #3791 from signalwerk/patch-1\n\nTo be clear that we set a new variable"}], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4209", "title": "Removed using statements from common.h", "body": "These statements pulled a bunch of symbols from the std namespace into\r\nthe global namespace. This commit removes all of them except for\r\nstd::string, which is a bit trickier to remove.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/25900070", "body": "@KindDragon Thanks for the heads-up, I've sent out #3960 which should fix this as soon it gets merged.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/25900070/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/26126515", "body": "@nlopezgi Sorry about that, I've just sent out pull request #4017 which should fix this.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/26126515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "datacompboy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/091eeb1261ebe6bc557ae9b353d37108c8149568", "message": "Update time_test.cc\n\nBetter test coverage for datetime validation."}, {"url": "https://api.github.com/repos/google/protobuf/commits/473c5cff764b879be1f4afefb71d6b8ba0b8a9d3", "message": "Fix ValidateDateTime: check day instead month\n\nFound with PVS-Studio static analyser, see \r\nhttps://www.viva64.com/en/b/0550/"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pherl": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/a3868af12be724f808faa21a29e7b4931e30bed1", "message": "Merge pull request #4131 from pherl/merge\n\nMerge 3.5.x branch into master"}, {"url": "https://api.github.com/repos/google/protobuf/commits/ec826c5a592126ddb6b12b47e6e1fb6232ce340d", "message": "Merge remote-tracking branch 'origin/3.5.x' into master"}, {"url": "https://api.github.com/repos/google/protobuf/commits/383a4941d5b1aa3c0afbdc24dd0e5d63d263fc3a", "message": "Merge remote-tracking branch 'origin/3.5.x' into master"}, {"url": "https://api.github.com/repos/google/protobuf/commits/39f577c38ec10b668408d4af3dacaec155a7f0c7", "message": "Merge pull request #4124 from pherl/nullptr\n\nremove nullptr"}, {"url": "https://api.github.com/repos/google/protobuf/commits/5b1caea024138236451d60d9df5416253f648fb1", "message": "Merge pull request #4090 from pherl/nopassword\n\nFix uploading binary wheel."}, {"url": "https://api.github.com/repos/google/protobuf/commits/4f3d8657c3914e5f2d5aa992e26f3e5c09326b84", "message": "remove nullptr"}, {"url": "https://api.github.com/repos/google/protobuf/commits/8fc40b5502f11b5619f17dc30d79e7144abf3b39", "message": "Fix uploading binary wheel.\n\nThe script now takes two prompt for user name and password. One single\ninput redirection no longer works."}, {"url": "https://api.github.com/repos/google/protobuf/commits/88e5573b9a8a5c4038f9db3633610f032aab277d", "message": "Merge pull request #4089 from pherl/nocache\n\nDisable pip cache when testing uploaded packages"}, {"url": "https://api.github.com/repos/google/protobuf/commits/7ad8e7ad596f56df53d910d91370885d6cacdcc8", "message": "Disable pip cache when testing uploaded packages\n\nOtherwise, pip complains \"cannot find a version satisfies the\nrequirement.\" I suspect it was due to caching issues. I usued to\nmanually add a `sleep 30` between the upload and the installation test\nwhich is quite unstable."}, {"url": "https://api.github.com/repos/google/protobuf/commits/106ffc04be1abf3ff3399f54ccf149815b287dd9", "message": "Merge pull request #4073 from pherl/changelog\n\nUpdate changelog for 3.5.1"}, {"url": "https://api.github.com/repos/google/protobuf/commits/d69f33304f0ccac668135875a830460ca8221bca", "message": "Merge pull request #4080 from pherl/arm64\n\nAdd support for Windows ARM64 build"}, {"url": "https://api.github.com/repos/google/protobuf/commits/b5f09c1ee0171f26aa050386a98a87a2721d1156", "message": "Merge pull request #4077 from mkamilov/master\n\nAdd support for Windows ARM64 build"}, {"url": "https://api.github.com/repos/google/protobuf/commits/7bf1e1919ad819a1db3c7245b6a8bf854d701b89", "message": "Update changelog"}, {"url": "https://api.github.com/repos/google/protobuf/commits/d106399d39a3a5719f1e3d8b5997a4437eb83af3", "message": "Merge pull request #4072 from google/jieluo\n\nCherrypick for csharp, including:"}, {"url": "https://api.github.com/repos/google/protobuf/commits/6c3c7f6d5d68433af01c5ca500978c2d69f15212", "message": "Merge pull request #4076 from pherl/stringback\n\nFix string::back() usage in googletest.cc"}, {"url": "https://api.github.com/repos/google/protobuf/commits/19d0e9934c997b1dc46ad539c37d67ea6c6fc33f", "message": "Fix string::back() usage in googletest.cc"}, {"url": "https://api.github.com/repos/google/protobuf/commits/62616e152268ccd8dc001b791d76862a92af7432", "message": "Update changelog"}, {"url": "https://api.github.com/repos/google/protobuf/commits/96810dea740df75e7a3ff65f11dab7f7383cef7f", "message": "Merge branch '3.5.x' of github.com:google/protobuf into changelog"}, {"url": "https://api.github.com/repos/google/protobuf/commits/eff55ece0813c16d318a80ec20c89d81bac34efc", "message": "Merge pull request #4074 from pherl/mapat\n\nReplace C++11 only method std::map::at"}, {"url": "https://api.github.com/repos/google/protobuf/commits/9ce29bd566e24a3df16abf0c9919b40d5d14a740", "message": "Merge pull request #4070 from pherl/3.5.x\n\nUpdate version number to 3.5.1"}, {"url": "https://api.github.com/repos/google/protobuf/commits/501093d778258197cb8eec10d31cc9497520e459", "message": "Replace C++11 only method std::map::at"}, {"url": "https://api.github.com/repos/google/protobuf/commits/7bd16064847c410c0f1e5169b8f494fee8b14c93", "message": "Update changelog for 3.5.1"}, {"url": "https://api.github.com/repos/google/protobuf/commits/050fc9a43717193ffbccbd8ca5d19e1e5648c815", "message": "Update version number to 3.5.1"}, {"url": "https://api.github.com/repos/google/protobuf/commits/1237c3f1f72ba0764801910ae2c284c8c2400b3a", "message": "Merge pull request #4045 from pherl/deprecate\n\nAdd deprecation annotation for oneof case."}, {"url": "https://api.github.com/repos/google/protobuf/commits/d971cbfc278993ae063fc7ff455c32443672024b", "message": "Merge pull request #4049 from pherl/py26\n\nRemove py2.6 support."}, {"url": "https://api.github.com/repos/google/protobuf/commits/acadade56ef2cb0950f4d324f233af5eaeaff262", "message": "Remove py2.6 support."}, {"url": "https://api.github.com/repos/google/protobuf/commits/594ec2262c30cb1bd19fc43c2799cfeca31603ac", "message": "Fix python descriptor test."}, {"url": "https://api.github.com/repos/google/protobuf/commits/22e1cfd84ac2e7a6e0ee1101d75673c13a801c03", "message": "Add deprecation annotation for oneof case."}, {"url": "https://api.github.com/repos/google/protobuf/commits/82724e21098fbd02893811c79db4e5e95310ba0f", "message": "Merge pull request #4042 from pherl/cpp_enum\n\nUse matching enum type for IsPOD."}, {"url": "https://api.github.com/repos/google/protobuf/commits/8521624e935925d60204ebecee319f1df7423b71", "message": "Merge pull request #4043 from pherl/flush\n\nExplicitly propagate the status of Flush()."}, {"url": "https://api.github.com/repos/google/protobuf/commits/6b01e6440cdac325bc131ec6713eab9d8307414a", "message": "Explicitly propagate the status of Flush().\n\nBefore the change, an implicit Flush() will be triggered in the\ndestructor of the input stream. However, the return code of Flush() is\nnot discarded. This change makes sure when Flush() fails, we will\nreturn false."}, {"url": "https://api.github.com/repos/google/protobuf/commits/7ef21dd81bb1841ea5fa44e9d26e2b23b1bf1468", "message": "Use matching enum type for IsPOD."}, {"url": "https://api.github.com/repos/google/protobuf/commits/0f9bfa8244fcb68f503c7c373651d4eb1180026f", "message": "Merge pull request #4016 from jquesnelle/string-access-ub\n\nfix undefined behavior in C++03"}, {"url": "https://api.github.com/repos/google/protobuf/commits/27e877fdaa5f051031d8d7e6500244855b0c608f", "message": "Merge pull request #2834 from aj-michael/master\n\nMake //:protobuf_python have correct __init__.py."}, {"url": "https://api.github.com/repos/google/protobuf/commits/1b5b3b28395fd04773589417dd1992098c08c2bb", "message": "Merge pull request #4013 from laszlocsomor/io_win32\n\nio_win32: support non-ASCII paths"}, {"url": "https://api.github.com/repos/google/protobuf/commits/f2127b667efd6d43d33d6d2d2be387991e394a30", "message": "Merge pull request #3416 from xiaoshuang-lu/PROTOBUF-3404\n\n[PROTOBUF-3404] add --with-zlib=PATH to configure.ac script"}, {"url": "https://api.github.com/repos/google/protobuf/commits/cf65a7946fb42e941708d10adbce69924c6d1ee0", "message": "Update version for 3.5.0.post1"}, {"url": "https://api.github.com/repos/google/protobuf/commits/f466709e7d3b542ea4cf98a957237c40aa0df69b", "message": "Merge pull request #3941 from google/anandolee-patch-2\n\nAdd _file_desc_by_toplevel_extension back"}, {"url": "https://api.github.com/repos/google/protobuf/commits/e99e5d093fd2cdb670c2b08b3f7d4bbb9759b7ac", "message": "Merge pull request #3895 from pherl/3.5.x\n\nAdd protobuf-all in post release"}, {"url": "https://api.github.com/repos/google/protobuf/commits/1ec45f81ef2df945a07dfb9404bf4f4a0a1081f2", "message": "Add protobuf-all in post release"}, {"url": "https://api.github.com/repos/google/protobuf/commits/d3537c24ffde7c28bd8a8abe576747613b8e3afc", "message": "Merge pull request #3834 from sviterok/patch-1\n\nFix a typo in WKT's test suite"}, {"url": "https://api.github.com/repos/google/protobuf/commits/0cd2ad11b8a114c3767aafe9912c09c89bfd0f3e", "message": "Update protoc-artfacts"}, {"url": "https://api.github.com/repos/google/protobuf/commits/2720cdc568f57bd3cbea0a2ac17ce38510aa36a6", "message": "Update README.md"}, {"url": "https://api.github.com/repos/google/protobuf/commits/4041600aa17563aead04ad2abf479b5a6834b4c7", "message": "Merge branch '3.5.x' of github.com:google/protobuf into 3.5.x"}, {"url": "https://api.github.com/repos/google/protobuf/commits/4493595f8c77e9d094351987111cbf4aa2246f37", "message": "Update release date"}, {"url": "https://api.github.com/repos/google/protobuf/commits/2761122b810fe8861004ae785cc3ab39f384d342", "message": "Merge pull request #3868 from pherl/3.5.x\n\nSupport win32 long path for cross compiled build"}, {"url": "https://api.github.com/repos/google/protobuf/commits/9c197b7ecba6019b7c81c673cf100b2fad4033ad", "message": "Support win32 long path for cross compiled build"}, {"url": "https://api.github.com/repos/google/protobuf/commits/fe2b4af3d1b421bd2354dbe59fab942c01ab2067", "message": "Merge pull request #3867 from jtattermusch/update_changelog\n\nUpdate changelog"}, {"url": "https://api.github.com/repos/google/protobuf/commits/966a9ed96a8c7374d73f80c00c91b995812c00ec", "message": "Merge pull request #3861 from jtattermusch/backport_3858\n\nBackport #3858 to 3.5.x branch"}, {"url": "https://api.github.com/repos/google/protobuf/commits/5eb717c3006ad7da9aa6e49d40328a3963ad22a3", "message": "Fix arm64 name"}, {"url": "https://api.github.com/repos/google/protobuf/commits/b879abc8116518821a0da6ac5b72f7b1fda34375", "message": "Supports Arm64 (aarch64) protoc artifacts"}, {"url": "https://api.github.com/repos/google/protobuf/commits/0971efb16e615e7c0f9edf03df00496a2a2955c9", "message": "Merge pull request #3854 from pherl/3.5.x\n\nFix Atomic32/AtomicWord on some platforms."}, {"url": "https://api.github.com/repos/google/protobuf/commits/181e284b55dd234320b0e4fd5fbc81a5dfa6b580", "message": "Fix Atomic32/AtomicWord on some platforms.\n\n- Removed the redefination in the atomicword_compat.h. Now Atomic32 will\nalwyas be intptr_t in 32bit platforms, the bridge is no longer needed.\n- Change NaCl 64bit to use intptr_t instead of int32 for Atomic32,\notherwise AtmoicWord APIs will miss the definations.\n\nAfter this change, the AtmoicWord will always be either Atomic32 or\nAtmoic64 depending on the platforms."}, {"url": "https://api.github.com/repos/google/protobuf/commits/1144768dd63effc560a3d64996398d149620b575", "message": "Merge pull request #3835 from pherl/3.5.x\n\nUpdate version number to 3.5.0"}, {"url": "https://api.github.com/repos/google/protobuf/commits/8a3c5cc992836815cc6fe4169450d8d9f4f63411", "message": "Fix java code example"}, {"url": "https://api.github.com/repos/google/protobuf/commits/ce2d5282b797372bb67eee318148e4c3be522f58", "message": "Changelog for 3.5.0"}, {"url": "https://api.github.com/repos/google/protobuf/commits/c258fb303a804241cb2678dc732ed870a0ee97c8", "message": "Merge pull request #3822 from mehrdada/update-benchmark-submodule\n\nUpdate google/benchmark submodule to v1.2"}, {"url": "https://api.github.com/repos/google/protobuf/commits/19080127104b24c3448bc8f9ecc736fd9967d9e3", "message": "Update generated descritpors."}, {"url": "https://api.github.com/repos/google/protobuf/commits/97dd175a917fcdf1a0e0421659498a974f3a464a", "message": "Update version number to 3.5.0"}, {"url": "https://api.github.com/repos/google/protobuf/commits/4526d8baa0fe1c866adab8066e59d15996c25d02", "message": "Merge pull request #3722 from timou/cmake-windows-clean\n\nSuppress VS2017 compiler/linker warnings"}, {"url": "https://api.github.com/repos/google/protobuf/commits/a08b03d4c00a5793b88b494f672513f6ad46a681", "message": "Add missing files"}, {"url": "https://api.github.com/repos/google/protobuf/commits/9aaa8e1e55012771acc46703a5c7538bb43060c1", "message": "Merge pull request #3804 from pherl/merge\n\nMerge 3.4.x into master before cutting 3.5.x"}, {"url": "https://api.github.com/repos/google/protobuf/commits/cdc0d9536a5c68510fde1e4c7d37fff18ecd0d6b", "message": "Merge remote-tracking branch 'origin/3.4.x' into master"}, {"url": "https://api.github.com/repos/google/protobuf/commits/cefa9d73e3ce62b080fda0b306bbeb67a6fc2efa", "message": "Merge pull request #3758 from spinorx/3.4.x\n\n[v3.4.x branch] Fix iOS cc_library build for protobuf."}, {"url": "https://api.github.com/repos/google/protobuf/commits/b189389e2f2ca01dd534a8e9ba3ac38ea45cdba6", "message": "Merge pull request #3757 from spinorx/master\n\nFix iOS cc_library build for protobuf."}, {"url": "https://api.github.com/repos/google/protobuf/commits/09e0dbcf8f8a078070921e18b0592dbe7f9628df", "message": "Merge pull request #3743 from Schtolc/master\n\nCodedInputStream::SetTotalBytesLimit description fix"}, {"url": "https://api.github.com/repos/google/protobuf/commits/2a142140453248fc49915c4a24561a84a24540ef", "message": "Merge pull request #3754 from toanju/gcc-fallthrough\n\nfix implicit fallthrough in gcc 7"}, {"url": "https://api.github.com/repos/google/protobuf/commits/07b9238a1c03ef0351bcb4ca57d773eb7b7c5824", "message": "Merge pull request #3770 from pherl/3.5-integrate\n\nIntegrate google internal changes for the up coming 3.5 release."}, {"url": "https://api.github.com/repos/google/protobuf/commits/2ee294d80b8d6841bcd1149f62180bb18d671033", "message": "Fix Java 1.6 compile"}, {"url": "https://api.github.com/repos/google/protobuf/commits/9c407a16e4b64e8329da8508a56dd4ba260ebcd5", "message": "Merge pull request #3751 from uykusuz/master\n\nfixes issue #3750"}, {"url": "https://api.github.com/repos/google/protobuf/commits/ca6187d5e76fee30d29d07a2c620421b90244bdd", "message": "Merge pull request #3578 from pherl/filedeprecation\n\nAdd @Deprecated annotation support for proto file."}, {"url": "https://api.github.com/repos/google/protobuf/commits/dedf9041c023d63fc74fb9386f9ea62e33cb16c9", "message": "Merge pull request #3764 from zearen/patch-1\n\nAdd the proto-lens Haskell library to the 3rd party doc."}, {"url": "https://api.github.com/repos/google/protobuf/commits/37f984f9dfecb2e248a7d145616a887f021d2baa", "message": "Merge pull request #3698 from hesmar/hesmar/fixProtocIncludeDirs\n\nprotobuf_generate: create include path only for proto files"}, {"url": "https://api.github.com/repos/google/protobuf/commits/3d6cc0e74b788b4a807d3d6d66694609870f37bb", "message": "Merge pull request #3641 from drivehappy/3.4.x_clang_cleanup_3\n\nClang warning cleanup for unused parameter."}, {"url": "https://api.github.com/repos/google/protobuf/commits/2e2614e4c4b13275a9eb792ac43e014b3e301637", "message": "Merge pull request #3706 from johanbrandhorst/patch-1\n\nAdd GopherJS protobuf and gRPC links"}, {"url": "https://api.github.com/repos/google/protobuf/commits/188755c065ef6bd416a4cd7a49a9c7974a8cd7ae", "message": "Fix JS conformance tests"}, {"url": "https://api.github.com/repos/google/protobuf/commits/1c682e0b0b33dd5982b2fb78c2f97005dd378b5d", "message": "Fix bazel build"}, {"url": "https://api.github.com/repos/google/protobuf/commits/ecf29571061337e6fbd70283f0a6ad0202e94b24", "message": "Update descriptor protos"}, {"url": "https://api.github.com/repos/google/protobuf/commits/30bfe36b6aabc970f8d700d037eb70a8a80cf336", "message": "Merge pull request #3736 from jleni/fix_rbpi\n\nFix: Truncated Message due to \"TypeError: unhashable type: 'bytearray'\""}, {"url": "https://api.github.com/repos/google/protobuf/commits/6b5912b1e31641a43bf8227fab81a95581701fe0", "message": "Merge branch 'master' of github.com:google/protobuf"}, {"url": "https://api.github.com/repos/google/protobuf/commits/1a7a7fca804afa1cf67f8be5e71092898ba40334", "message": "Merge from google internal"}, {"url": "https://api.github.com/repos/google/protobuf/commits/dc9190f2f5aa3a045b189281f6238cfd5e5006b3", "message": "Merge pull request #3769 from pherl/io_win32\n\nRemove C++11 only usages in io_win32 tests."}, {"url": "https://api.github.com/repos/google/protobuf/commits/cc58be617d2c2458bfd1288e8e961011ec34f7d6", "message": "Fix unsiged underflow"}, {"url": "https://api.github.com/repos/google/protobuf/commits/7dbee324074a23f92a7f5027d1aa91b64f1a83cf", "message": "Remove C++11 only usages in io_win32 tests."}, {"url": "https://api.github.com/repos/google/protobuf/commits/f850188e6e1021b4fe21ecb0aca548a54c272ce5", "message": "Merge pull request #3744 from fmarier/json-escaping-namespace\n\nMove namespace closing brace inside the header guard block"}, {"url": "https://api.github.com/repos/google/protobuf/commits/a632f0dbac406227fad0951262f3b6160eaabebe", "message": "Merge pull request #3739 from pherl/merge3.4\n\nMerge3.4"}, {"url": "https://api.github.com/repos/google/protobuf/commits/dd980ccf578892615a0090d6b5e7538142cb5690", "message": "Fix distcheck"}, {"url": "https://api.github.com/repos/google/protobuf/commits/de15e73d5862e8ac618bc7be90594adacbaa1ec6", "message": "Merge remote-tracking branch 'origin/3.4.x' into master"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/53773889", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/53773889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/53834580", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/53834580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54390943", "body": "Thanks for the fix.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54390943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55634789", "body": "Internally we have a subclass in the same package which is not opensourced. The ExtensionRegistry is not intended to be sub-classed by the users though.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55634789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55634789", "body": "Internally we have a subclass in the same package which is not opensourced. The ExtensionRegistry is not intended to be sub-classed by the users though.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55634789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63860088", "body": "For the copy right headers. I assume we should keep it as is. Should we add nano contributors to the protobuf contributors list? What about newly created files under the nano project?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63860088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63860139", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63860139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63863619", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63863619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64486891", "body": "Hmm, it seems to include the merge commit as well. Let me see if I can get rid of that..\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64486891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64497158", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64497158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64498457", "body": "I think we should use positive logic, e.g. --with-java, --with-python, etc. Not sure the current flag library can then accept --without-java, etc as negative values of the flags.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64498457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64712833", "body": "As the error message suggested, you need to set the store_unknown_fields option as the generator parameter.\n\nTry:\nprotoc --javanano_out=store_unknown_fields=true:. google/protobuf/descriptor.proto\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64712833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65326612", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65326612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65326880", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65326880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65326972", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65326972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65327056", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65327056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65327146", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65327146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/9929432", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/9929432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/9950693", "body": "@zsurocking  Should we re-enable the test?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/9950693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/12028721", "body": "Hmm, I didn't remember. The HashFcn, probably doesn't work as the key compare function either for std::map and std::set. Is this reported by some users?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/12028721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/15749782", "body": "Side notes for reviewers: @xfxyjwf \n\nIn the future we should separate those changes into several PRs. Updating maven dependencies require a maven local installation rebuild internally for tests. Mixing version update together with large file moves like this makes the internal test broken, and makes it harder to integrate changes from different repositories together.\n\nDue to the multiple repository issue, a general lesson learned is that we need to do multi-way sync before any large file moves change, and do another sync right after the file move to avoid any merging issues.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/15749782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/23647276", "body": "The 3.4 release header will stop compiling with libstdc++ headers on Mac which is only compatible with gcc-4.2.1 and does not support all the c++11 features we are using, namely std::forward.\r\n\r\nI'm wondering if we should just move on to use libc++ by default now", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/23647276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/23657288", "body": "Do you have any pointers to the complaints on depending on libc++? It's better to make sure we don't break them.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/23657288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/23781183", "body": "Can you also check kokoro/linux/python_compatibility? We are deprecating travis and switching to kokoro.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/23781183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/23987352", "body": "Hey Matt, do you mind test if you can use other macros like `__GLIBCXX__` instead of GCC versions?  Clang seems to be defining `__GNUC__` without defining `__GNUC__MINOR__` but it typically depend on a newer version of standard library which supports 64 bit integer hash (e.g. 20150123). Maybe worth tracking the version in which hash<long long int> was added in libstdc++?", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/23987352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/18376584", "body": "s/matchs/matches\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/18376584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/18376585", "body": "ensurEnumValueDescriptor?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/18376585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/26441460", "body": "The style guide actually recommends that all enum values should be defined in capitalized chars. This adds lots of false positives to the current working code.\n\nAlso, could you document in which condition we should set true/false for the 2nd parameter of this function?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/26441460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/26455575", "body": "Rename to EnumValueName. I think we should always mangle the name even if it's a nested enum value. This makes the mapping from the file-level definition to the imported constants in classless consistent.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/26455575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/26519849", "body": "Yes, the recommended way is to reference the nested enum from class scope,\nrather then using the underscore separated names. Also all the values\nshould be capitalized as suggested by the style guide. The conflicts should\nnot be common.\n\nOn Mon, Mar 16, 2015 at 10:58 AM cconroy notifications@github.com wrote:\n\n> In src/google/protobuf/compiler/cpp/cpp_helpers.h\n> https://github.com/google/protobuf/pull/228#discussion_r26510550:\n> \n> > @@ -74,6 +74,11 @@ string SuperClassName(const Descriptor\\* descriptor);\n> >  // anyway, so normally this just returns field->name().\n> >  string FieldName(const FieldDescriptor\\* field);\n> > \n> > +// Get the sanitized name that should be used for the  given enum in C++ code.\n> > +// The name is optionally mangled for reserved keyword collisions. (Nested\n> > +// names need not be mangled as they receive a prefix from the outer message type.)\n> > +string EnumName(const EnumValueDescriptor\\* enum_value, bool mangle);\n> \n> Are you sure you want it to always be mangled?\n> \n> That means we go from e.g. TestConflictingEnumNames_\n> NestedConflictingEnum_and to TestConflictingEnumNames_\n> NestedConflictingEnum_and_ ?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/protobuf/pull/228/files#r26510550.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/26519849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/26530412", "body": "nit: extra space between \"the\" and \"given\"\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/26530412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/26537205", "body": "This will likely to break existing clients, especially those all caps ones. I did a quick code search internally all the caps one are already being used as enum values: BOOL, BSD, YES, NO and SEL.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/26537205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/26537391", "body": "Also checked lower-cased words: id, out, self, nil, oneway, super are also used as field names, which will break clients if we put them here.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/26537391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/26538051", "body": "I'm a bit concerned that we will end up adding more and more keywords for other languages. There will be an official objective-c support release in a month or two. I think the need for linking in C++ messages should be significantly reduced.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/26538051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27927604", "body": "Could you list all the platforms we should support for now? Are there any cross-compilation available to reduce the release work?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27927604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27927731", "body": "Add some comments about this should be specified using command line flag.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27927731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28083774", "body": "Could you please also update the internal opensource instructions about updating the protoc artifacts and list the detailed steps about how to setp up the environment for those platforms? especially the ones on windows. Does the script handle the cross-compile for 32bit and 64bit now?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28083774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "thomasvl": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/4588e6e2b98671d544f7f2bb7372710beb7bdfcb", "message": "Force a copy when saving the NSData that came from another."}, {"url": "https://api.github.com/repos/google/protobuf/commits/156161dfcde38b72c55ead02cacff7087c93a4d8", "message": "Properly copy maps with string keys but pod values.\n\nAdd tests to cover all the common special casing in the runtime code to\nensure things come out correctly."}, {"url": "https://api.github.com/repos/google/protobuf/commits/860d693cf70f13d823ab8e6f9118d94485fa95bd", "message": "Add Xcode 9.2 to the testing support\n\nFixes #4060"}, {"url": "https://api.github.com/repos/google/protobuf/commits/716acc3b977202f74e8d5d51a300d0fcf85a582b", "message": "Remove Xcode directives on some configs.\n\nTravis changed their default image:\nhttps://blog.travis-ci.com/2017-11-21-xcode8-3-default-image-announce\n\nSo there is no need to set a specific image any more, and the non\napple language tests should be able to use the default images."}, {"url": "https://api.github.com/repos/google/protobuf/commits/baed06e69443613c531a3580315759c08db6667e", "message": "Small code reorder to maybe make #3893 happy.\n\nUse the ivar for the -open, so hopefully it lines up with the -close\nin dealloc and isn't seen as an unbalanced \"open\"."}, {"url": "https://api.github.com/repos/google/protobuf/commits/6700f41c4b699b0e31ab2bf90036c04273784fd8", "message": "Travis config cleanups and move ObjC to Xcode 9.1.\n\nStop having travis build the test matrix and make it explicit so extra\nsettings are only on the test that need the, this helps make the travis\nUI a little cleaner (linux hosted stuff doesn't list an Xcode version),\nas well as avoid unneeded requirements limiting the travis pool something\ncan run on.\n\nSmall improvements to objectivec/DevTools/full_mac_build.sh to avoid some\nrepeated scripting and hopefully make things more reliable work with Xcode\n9.x.\n\nDon't mark the iOS tests as able to fail, hopefully with the new settings\nthey are stable and won't give false signals.\n\nSimplify the case for xcode versions and fixup xcode 9.[0-1]."}, {"url": "https://api.github.com/repos/google/protobuf/commits/696653d246b2639a6d8b18f7887a6cb9ddaf1114", "message": "Merge pull request #3892 from sergiocampama/32bit\n\nFixes 32bit tests."}, {"url": "https://api.github.com/repos/google/protobuf/commits/cf685313f17bc62890fe36a8e52cc28ec40fb800", "message": "Merge pull request #3891 from thomasvl/travis_cleanups\n\nTravis cleanups"}, {"url": "https://api.github.com/repos/google/protobuf/commits/7417755e4066ff55f064984fc718826dd5f420ab", "message": "Merge pull request #3883 from dmaclach/map_optimizations\n\nReduce size of GPBDictionary by getting rid of class creation methods"}, {"url": "https://api.github.com/repos/google/protobuf/commits/6552c5af3fa067778ec5fa2b65c6b4784f79e4b6", "message": "Merge pull request #3884 from dmaclach/unsafe\n\nSimplify getter/setter method implementations"}, {"url": "https://api.github.com/repos/google/protobuf/commits/af5ad246176e6de8661b6a312a42c621c01736f5", "message": "Merge pull request #3882 from dmaclach/removeclass2\n\nRemove unreferenced 'GPBMessageSignatureProtocol' class."}, {"url": "https://api.github.com/repos/google/protobuf/commits/a839c67dfe6ea49ae86c75c7744e0fe3ec42f31e", "message": "Remove the allowed_failure for python_cpp as the bug was fixed."}, {"url": "https://api.github.com/repos/google/protobuf/commits/2e17639133ced527400330b1126f713aedc96729", "message": "Remove the ruby tests from travis configs.\n\nLooking at tarvis history for master, jruby doesn't look like it has passed\nin a really long time.  The other two tests have been failing for a few weeks.\nSince travis has limited osx hosts, seems better to just remove things we\naren't expecting to pass."}, {"url": "https://api.github.com/repos/google/protobuf/commits/c46571bc171334812553df7e48b8cd4bde433b07", "message": "Update some comments about testing."}, {"url": "https://api.github.com/repos/google/protobuf/commits/73e8c8aab9f1dd61f922a889abfc6b313a95b07a", "message": "Instead of listing and then excluding osx builds, just don't list them."}, {"url": "https://api.github.com/repos/google/protobuf/commits/239dba535c48b64769cdfdfcb18f771620ccbba9", "message": "Merge pull request #3839 from thomasvl/message_equality\n\nWhen comparing message, require them to have the same descriptor."}, {"url": "https://api.github.com/repos/google/protobuf/commits/1f57e540accbb36f350da3e8f341e67ab0188de9", "message": "When comparing message, require them to have the same descriptor.\n\nThis will cover someone subclassing the message, and also handles\nsomething crazy like someone comparing to a raw NSObject."}, {"url": "https://api.github.com/repos/google/protobuf/commits/ee8a0911cbaca2a1849a847bbdc523120d003a31", "message": "Merge pull request #3787 from sergiocampama/coverage\n\nImproves coverage of GPBCodedInputStream"}, {"url": "https://api.github.com/repos/google/protobuf/commits/d6c32a818fd8590e1758d1ed86107a967468d1b6", "message": "Merge pull request #3714 from thomasvl/objc_increase_test_coverage\n\nObjc increase test coverage"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/11367116", "body": "Why the double slashes in these paths, that seems wrong?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/11367116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/11367138", "body": "What made this seem needed?  Xcode should be using the directory the project is in as the current directory.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/11367138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/11367185", "body": "I thought the option wasn't supposed to be valid in a proto3 file?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/11367185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/11367347", "body": "What triggered these?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/11367347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/11367939", "body": "You can get these files in src too, it all depends on what you navigate to on the Mac when browsing the directory tree.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/11367939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/11368029", "body": "Did you happen to checkout through xcodes repository support?  in general we should need to exclude stuff in shared dirs, so you must have done something to set this up on the workspace.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/11368029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/18545480", "body": "No need for `@note` since it is a pain comment.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/18545480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/18545489", "body": "No need for `@name`\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/18545489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "v-silverfin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/8529f2aee33ae793c9ce362a45370b98f675370a", "message": "Resolved issue #3510. Malformed errorr messages replaced with meaningful description"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "matt-kwong": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/0b2be3caaf5ea6786b1b86e9a70c82d695535c1c", "message": "Shard 64-bit Linux languages into different Kokoro jobs"}, {"url": "https://api.github.com/repos/google/protobuf/commits/ae49cfd1a4da13e8fb17fadc6240621ce1e541bb", "message": "Collect xml results for Kokoro"}, {"url": "https://api.github.com/repos/google/protobuf/commits/6003a61255fe508924878ef0ce8207996e7b5d3c", "message": "Make Kokoro job pull Dockerimage from Dockerhub"}, {"url": "https://api.github.com/repos/google/protobuf/commits/8ac050fadd7d08eae525a5a227a1e87ea15d57fc", "message": "Migrate Jenkins jobs to Kokoro"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mkamilov": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/ad8a82ee7590fb4866d6fd5a410c393fca63e247", "message": "Add support for Windows ARM64 build"}, {"url": "https://api.github.com/repos/google/protobuf/commits/03fb09932b9882f896a5f20ecda71d194fa40504", "message": "Add support for Windows ARM64 build"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jtattermusch": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/426cf6f31ed5efae703d7a1f31edc841205414e2", "message": "Add auto-generated header to C# generated files (#4038)\n\n* Add auto-generated header to C# generated files\r\n\r\n* regenerate C# protos"}, {"url": "https://api.github.com/repos/google/protobuf/commits/07df2307b2f339e57b4e7f42b9f87bc1575a5ca1", "message": "update changelog"}, {"url": "https://api.github.com/repos/google/protobuf/commits/5f961914594abed32180d3c664cc04fe5f7b242c", "message": "ParseFrom<T> for array slice is missing"}, {"url": "https://api.github.com/repos/google/protobuf/commits/4a5e1bd043c8ed01b172ca0ad91af00ed45b0640", "message": "check already performed by MergeFrom"}, {"url": "https://api.github.com/repos/google/protobuf/commits/435f61102bf23b9c9be2592d27b8935a8717e610", "message": "allow message parsing from an array slice"}, {"url": "https://api.github.com/repos/google/protobuf/commits/ce0a53273a400369932ba788d17500336a6ecaad", "message": "Merge pull request #3858 from jtattermusch/parsing_from_slice\n\nC#: Allow message parsing from an array slice"}, {"url": "https://api.github.com/repos/google/protobuf/commits/30b6e543277901fb95373138d358ae5d53048977", "message": "ParseFrom<T> for array slice is missing"}, {"url": "https://api.github.com/repos/google/protobuf/commits/07542e78da48372c856c4b555698e5646919d764", "message": "check already performed by MergeFrom"}, {"url": "https://api.github.com/repos/google/protobuf/commits/0c874a6a1901d5c4ebb9d09f218eb9e348b7279c", "message": "allow message parsing from an array slice"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bazurbat": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/edcf15e7f4de104f39e5daa1909bfcc93642ad53", "message": "Create containing directory before generating well_known_types_embed.cc\n\nThis fixes the following build error:\n\noldpwd=`pwd` && cd .../protobuf/src && \\\n$oldpwd/js_embed google/protobuf/compiler/js/well_known_types/any.js google/protobuf/compiler/js/well_known_types/struct.js google/protobuf/compiler/js/well_known_types/timestamp.js > $oldpwd/google/protobuf/compiler/js/well_known_types_embed.cc\n/bin/bash: line 1: .../protobuf/target/src/google/protobuf/compiler/js/well_known_types_embed.cc: No such file or directory\nMakefile:8201: recipe for target 'google/protobuf/compiler/js/well_known_types_embed.cc' failed\n\nwhich is observed during the cross-compilation since the version 3.2."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jquesnelle": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/f5b086273aa2f5832f72e6b2aa755c0930dfaffa", "message": "use const char* instead of const std::string& in normalize()"}, {"url": "https://api.github.com/repos/google/protobuf/commits/b32c2a80e034e6132128bf12c6659c32cdcc786d", "message": "fix undefined behavior in C++03"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Kwizatz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/24493eef9395e5b832360e12efabf9c363c9cb15", "message": "Using binary one's complement to negate an unsigned int\n\nThis removes a Visual Studio warning:\n\nwarning C4146: unary minus operator applied to unsigned type, result\nstill unsigned."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "laszlocsomor": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/a3a1c93fb4bb204fd42cb91ac1053f93bec4da7a", "message": "io_win32_unittest: remove incorrect error check\n\nUnlike GetEnvironmentVariableW,\nGetCurrentDirectoryW doesn't set\nERROR_INSUFFICIENT_BUFFER."}, {"url": "https://api.github.com/repos/google/protobuf/commits/eb3bd6ec297b4dff3734c51a159713e559f5c2cf", "message": "io_win32_unittest: fix condition in GetCwdAsUtf8"}, {"url": "https://api.github.com/repos/google/protobuf/commits/3f1b1a6da5f1a778ccad46b6f340e82ad4c99209", "message": "io_win32_unittest: use CWD as last tempdir\n\nIf the test cannot find a temp directory by\nchecking environment variables, it will fall back\nto using the current working directory as the temp\ndirectory root.\n\nThis is what the test used to do as of commit\nhttps://github.com/google/protobuf/commit/6de51caed52d798815954646b230c5aef3e4d2fc\nand what was then changed by commit\nhttps://github.com/google/protobuf/pull/3978/commits/792d098769d8e000d8d474c8ffd201d2eabc2134"}, {"url": "https://api.github.com/repos/google/protobuf/commits/57a01c7fbe89ca540e32a02c1f46b9e0478b3a8f", "message": "io_win32: add more encoding-related tests"}, {"url": "https://api.github.com/repos/google/protobuf/commits/65da9fd97f67a9499771b6294cf017248ece5661", "message": "io_win32: support non-ASCII paths\n\nFixes https://github.com/google/protobuf/issues/3951"}, {"url": "https://api.github.com/repos/google/protobuf/commits/953a0253fc1bd69ae788bbcb672c4cdfe562b8cd", "message": "io_win32_unittest: make //:win32_test run again\n\nDo not use \"googletest.h\", apprently that leads to\nlinking errors on Windows which I couldn't figure\nout how to solve, and decided to just go with\nplain gTest instead.\n\nSee https://github.com/google/protobuf/issues/3951"}], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3985", "title": "BUILD,globs: ignore *.pb.{h,cc} in the source tree", "body": "The globs were picking up such files and created\r\ndependency cycles so I could no longer build\r\n//:protoc on Windows.\r\n\r\nThis is what happened:\r\n\r\n1. I built the tests with CMake. As part of that,\r\n   CMake generated header files in the source\r\n   tree, such as\r\n   \"src/google/protobuf/unittest_lite.pb.cc\"\r\n\r\n2. I attempted to build \"//:protoc\" with Bazel:\r\n\r\n2.1. As part of loading the BUILD file, Bazel\r\n     expanded glob() statements in the\r\n     \"protobuf\" cc_library's hdrs attribute.\r\n\r\n2.2. The result of glob() expansion is a list of\r\n     labels, and the expanded list included\r\n     \"src/google/protobuf/unittest_lite.pb.cc\"\r\n\r\n2.3. After glob() expansion, Bazel parsed all rule\r\n     definitions. It found the\r\n     \"cc_test_protos_genproto\" rule which\r\n     generates a file called\r\n     \"src/google/protobuf/unittest_lite.pb.cc\"\r\n\r\n2.4. Because Bazel can't tell from a label whether\r\n     it refers to a source file or a generated\r\n     file or a rule -- after all, srcs=[\"foo.cc\"]\r\n     could refer to either the source file\r\n     \"foo.cc\", or the generated file \"foo.cc\", or\r\n     the rule called \"foo.cc\" -- Bazel didn't\r\n     realise that it should depend on the source\r\n     file \"unittest_lite.pb.cc\", not on the output\r\n     file \"unittest_lite.pb.cc\". (Or that it\r\n     should error out because of the ambiguity.)\r\n\r\n2.5. Building the generated file\r\n     \"unittest_lite.pb.cc\" however involves\r\n     running the protocol compiler, which involes\r\n     building \":protoc\", which depends on the\r\n     \":protobuf\" rule, thus we now have a\r\n     dependency cycle.\r\n\r\n3. It made debugging more difficult that the\r\n   .gitignore file includes a pattern to match the\r\n   CMake-generated headers, so I didn't see any\r\n   new files in \"git status\", so I initially ruled\r\n   out globs as the source of the problem.\r\n\r\nTakeaway:\r\n- Bazel should error out if labels are ambiguous.\r\n- As a workaround, the glob() should use exclude\r\n  statements. This commit adds that.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/3984", "title": "Windows: expand wildcard arguments", "body": "Fixes https://github.com/google/protobuf/issues/3957", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "graywolf": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/0316ae802d643b2842dbf2c0089dade1559c6f06", "message": "--pre is not necessary\n\n--pre was not necessary to install google-protobuf when I tried it today (2017-12-06)."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fahhem": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/35119e39a07f426f3c48a1bfb41d862994223742", "message": "Add a check_protobuf_required_bazel_version() for use in WORKSPACEs"}], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3981", "title": "Handle srcs in generated files by cd'ing in and out", "body": "The downside is that a separate protoc call is made per file now, which is a small decrease in performance. An optimization can be made to combine all non-generated files into a single call.\r\n\r\nI tried a few approaches over the past 2 days, all of them failed for some reason or another (mostly because bazel is super uptight about things):\r\n* Explicitly create an intermediate file and move it (only for generated inputs): Fails because bazel refuses to let me create a `File()` that isn't relative to my package. protoc will output the file into `bazel-out/.../genfiles/bazel_out/.../genfiles/<path>/<filename>_pb2.py` but the closest I could get was a declared file (via `ctx.actions.declare_file()`) that was `bazel-out/.../genfiles/<path>/bazel_out/.../genfiles/<path>/...` and that's got <path> in there twice and you can't change the filename at all, ever, in any way, from Skylark.\r\n* A single protoc call. Figuring out where things are output and need to be moved to is a mess and you're better off with the performance hit if you don't want to mess up the sandbox too much.\r\n\r\nFixes #1314 and fixes #1313", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "haberman": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/0289dd8f90b79ad3d2376aadec4538f9ac8b0417", "message": "Merge pull request #2519 from rubynerd-forks/ruby-fix-repeated-message-type-field\n\nunwrap descriptor class before comparison of RepeatedField types"}], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2381", "title": "Ruby: assert_false -> assert.", "body": "assert_false fails sometimes for unknown reasons.\r\n\r\nReview to @xfxyjwf ", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/1938", "title": "Ruby: create forwarding headers to aid the foo.rb ->foo_pb.rb transit\u2026", "body": "\u2026ion.\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/1398", "title": "Enabled Jenkins testing for Ruby 1.9, 2.0, and 2.2.", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/595", "title": "Use Travis's container-based infrastructure for faster builds.", "body": "", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/64124461", "body": "Do you have a reference to what this is? I don't see any search results for it in any CVE database.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64124461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64259493", "body": "Did you mean to attach a patch or other information to this report?\n\nWithout more information I don't know what vulnerability you are describing or how to fix it.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64259493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65027069", "body": "Hi there, I'm closing this for lack of information. If you have information about a vulnerability in Protocol Buffers please send a detailed report and we will fix it as soon as possible.\n\nIf possible please report vulnerabilities in Google software to https://goo.gl/vulnz.\n\nThanks,\nJosh\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65027069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21631843", "body": "Thanks for the heads-up. I think Chris will follow up with a PR to rename this to something that doesn't collide with pre-existing work.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21631843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22564513", "body": "80 char\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22564513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22564889", "body": "I don't believe this should be necessary; in the absence of a start handler, the outer closure should get propagated.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22564889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22565109", "body": "You only appear to use upb_fielddef_type(mapdata->key_field), not the fielddef itself. Maybe just put the type in the handlerdata then? Also avoids issues around the lifetime of the fielddef.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22565109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22565171", "body": "Should we be ensuring that both key and value were seen?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22565171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22565202", "body": "symbolic constants for 1 and 2?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22565202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22565241", "body": "break? is this path tested? :)\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22565241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22565509", "body": "Probably worth adding some rationale: we don't use Ruby's Hash class because we want something strongly-typed. Could also use a bit of rationale of why we use upb_strtable instead of Hash as the internal implementation.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22565509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22565610", "body": "(I hate to say it after you've done all the work, but I can't help but wonder if an implementation that simply delegates to an internal Hash object would have comparable performance with much less implementation complexity. Though if I'm missing something please do let me know! :))\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22565610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22565742", "body": "Probably should refer to this as a Hash object (not hashmap).\n\nSeems like we should also support initialization with a Google::Protobuf::Map object?\n\nThough maybe it's too confusing if both Hash and Map are supported as initializers, but with different semantics (one copies, one references)?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22565742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22669933", "body": "It strikes me that this function is the equivalent of 3 or 4 lines of Ruby code, plus the special call to set the new message type as a map entry. I wonder if there is a way to implement it this way?\n\nI envision something like:\n\n  VALUE message_type = rb_eval(\n    \"if key_type == :float or key_type == :double or key_type == :enum or key_type == :message\\n\"\n    \"  raise 'Cannot add a map...'\\n\"\n    \"end\\n\"\n    \"add_message :MapEntry {\\n\"\n    \"  optional key_type, :key, 1\\n\"\n    \"  optional value_type, :value, 2\\n\"\n    \"}\");\n  upb_msgdef_setmapentry(ruby_to_Descriptor(message_type), true);\n\nDon't invest too much effort if this looks tricky, but if this were possible it would make the code a lot shorter, clearer, and more robust, since it would be expressed in terms of the DSL you already previous defined.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22669933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22670345", "body": "I think this needs to be GC-rooted somehow?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22670345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22671102", "body": "This is a bit unfortunate. Especially since offset calculation for the shim handlers have to do the same thing.\n\nWould it be a net win in terms of simplicity to make all offsets absolute?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22671102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22729867", "body": "I must be missing something; why can't you just do:\n\nnative_slot_init(self->key_type, buf);\nnative_slot_set(self->key_type, buf, key);\n*out_key = buf;\n*out_len = native_slot_size(self->key_type);\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22729867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22730526", "body": "It's probably worth noting some tradeoffs of this approach:\n- parsing doesn't have to create a Ruby string object\n- traversing a Map with string keys creates new strings every time: more copying, more garbage.\n\nWe may want to consider at some point whether string keys should store (or at least cache lazily-built) corresponding Ruby strings.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22730526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22730808", "body": "Why does this function exist if it always returns UINT64?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22730808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22734485", "body": "use upb_downcast_msgdef().\n\nBesides not requiring an explicit cast, it will assert that the cast is correct.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22734485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22734972", "body": "Should put this inside \"if (p)\"\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22734972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22832697", "body": "Maybe I spoke too soon -- is it the case that we always mark a descriptor that marks this?\n\nI leave it to you whether it's better to have typeclass_references or to rely on a proof of this sort. If we do the latter there should be a quick comment describing how we know this is rooted.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22832697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22833031", "body": "The last parameter can be NULL when you don't care about it.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22833031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22833088", "body": "Last parameter can be NULL.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22833088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22833223", "body": "present\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22833223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22833280", "body": "Would it be simpler to eliminate the value_typeclass parameter and have the user pass the typeclass here instead of :message/:enum?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22833280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22833308", "body": "Indicate whether the initial content map is copied or referenced.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22833308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22833405", "body": "ULL2NUM might be safer here (size_t is 64-bits on 64-bit platforms I believe).\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22833405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22833534", "body": "Is this necessary? If the two maps are the same size and all keys in m1 are known to be in m2, how could there be a key in m2 not in m1?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22833534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22897398", "body": "80 char\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22897398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22982818", "body": "More idiomatic to define:\n\nDescriptor.each_oneof { |oneof| }\n\n?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22982818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22982927", "body": "can we call this something else to distinguish it from a field tag number?\n\nDoes proto2 call it a discriminant or something like that?  \"Case\" would work too.\n\nAlso would it be more accurate to say \"place in case slot\"?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22982927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22983003", "body": "Convenient to reuse this number, but do we need a separate number space for members of the oneof that is denser/contiguous? Doesn't C++ have this?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22983003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22983501", "body": "A few convenience functions could clean up these functions a lot:\n\n  void *memory = field_offset(storage, layout, field);\n  uint32_t *oneof_case = case_offset(storage, layout, field);\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22983501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23552824", "body": "upb_downcast_fielddef() / UPB_UPCAST(). Should be safer than doing casts directly.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23552824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23555315", "body": "factor out into align_up funtion?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23555315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23555567", "body": "This seems wasteful. Very few oneofs will have more than 256 fields, and practically none will have more than 16k. Why allocate 4 whole bytes for this?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23555567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23555987", "body": "Move inside the if() below? Seems a little strange to create a variable whose contents might be junk data. Actually it might make more sense to lookup this value inside add_handlers_for_oneof_field().\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23555987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23557082", "body": "Move inside if() below.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23557082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23558261", "body": "Hmm, I'm not sure this analysis makes sense to me. You are worried about \"val\" being collected prematurely? This shouldn't be a risk because it is stored in a variable on the C stack, and the Ruby GC scans the C stack and registers.\n\nOn the other hand, I think these risks are real:\n1. you set the case indicating that it is a VALUE, but a GC occurs before you actually set the value, causing layout_mark() to follow the previous value (which might be an int64, float, etc) as if it was a VALUE. This is essentially a dereference of a junk value.\n2. you set the new case value to a non-VALUE value, causing the previous VALUE stored there to be collected, but then some early exit causes you to bail from actually setting the new value.\n\nSo it seems to me that the important invariant is: guarantee that setting of the oneof_case and setting of the value is atomic, with no calls into the Ruby interpreter in between. Calls into the Ruby interpreter are dangerous because they can cause GC and/or exceptions.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23558261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23558776", "body": "I notice you reuse old instances in the submsg handler. I don't have a strong opinion either way about whether we should reuse, but it seems like we should be consistent between strings and submessages unless there is a reason not to.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23558776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23558937", "body": "Oh wait, I guess there is a semantic difference here. Are repeated instances of oneof submessages meant to merge with earlier ones? In that case I see why there is the difference. I will try to make sure I address this in the conformance tests.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23558937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23951948", "body": "I would specifically mention here that the key invariant is that setting of data and case are atomic.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23951948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23952083", "body": "Define a constant for 0 (and use it everywhere 0 is being used for this purpose). Comment that 0 is safe because it's an invalid field number.\n\n(whoops, this comment should really be on line 92 below).\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23952083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23952342", "body": "Got it. At least add a comment that uint32_t is to match the value space of field numbers.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23952342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23952733", "body": "Mention this constraint in the body of native_slot_set() itself.\n\nAlternatively, you could even have a native_slot_set_value_and_case(type, typeclass, memory, val, casememory, caseval), which guarantees to write both memory/casememory or neither. Seems like it might be easier to reason about than an atomicity guarantee that is spread across two functions.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23952733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23959294", "body": "Use ONEOF_CASE_NONE and rm comment.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23959294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24702209", "body": "Add a quick comment about how we know this outlives the handlerdata.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24702209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24707082", "body": "Maybe simpler just to write:\n\nfor (size_t i = 0; i < current_size_; i++) {\n  Element\\* e = old_rep->elements[i];\n  e->Element::~Element();\n}\n\nAlso doesn't some of the code above have the same problem if new_size == 0 (that doesn't make a lot of sense to do, but it shouldn't trigger undefined behavior).\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24707082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22437764", "body": "Hmm, has proto3 support for Java not yet been implemented/released? For proto3, the semantics of enums are supposed to be open, but of course if protobuf-Java hasn't been augmented to support this yet then this won't work yet.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22437764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27610976", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27610976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27616135", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27616135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27616191", "body": "I agree with this in principle, but doing this would require a lot of work. I'd rather add this as a TODO for now.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27616191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27616882", "body": "I added a TODO and more explanation/background.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27616882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27617094", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27617094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27617122", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27617122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27617211", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27617211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27617814", "body": "Same as above, added TODO.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27617814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28116764", "body": "Exactly, the tests set it automatically when --cpp_implementation is specified:\nhttps://github.com/google/protobuf/blob/master/python/setup.py#L162\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28116764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28176356", "body": "I think DYLD_LIBRARY_PATH on OS X behaves like LD_LIBRARY_PATH on Linux? http://stackoverflow.com/questions/3146274/is-it-ok-to-use-dyld-library-path-on-mac-os-x-and-whats-the-dynamic-library-s\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28176356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28177045", "body": "I agree that these tests are obsolete and should be removed.\n\nHowever I would like to (not necessarily in this PR) to add two tests that verify we are testing the pure-Python and the C++ implementation, respectively. But to do that we'd need a way to conditionally run either one test or the other, depending on whether --cpp_implementation was specified or not. Do you know an easy way to do that?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28177045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28188273", "body": "I guess what I'm getting at is that it would be nice if the README didn't have to have an entire separate section to address OS X, brew, etc. Your caveat about Brew doesn't apply if the user sets DYLD_LIBRARY_PATH, right? Instead it could just say something like:\n\n```\n  You must make libprotobuf.so dynamically available. You can either\n  install libprotobuf you built earlier, or set LD_LIBRARY_PATH\n  (DYLD_LIBRARY_PATH on OS X):\n\n  $ export LD_LIBRARY_PATH=../src/.libs\n  $ export DYLD_LIBRARY_PATH=../src/.libs     # for OS X\n  or\n  $ (cd .. && make install)\n```\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28188273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28188285", "body": "Sounds good to me.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28188285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28285694", "body": "I would have expected a UPB_DEBUG_REFS build to catch this. I don't know if there's any easy way to do this, but if there was any way to test without NDEBUG defined, that would probably be a good idea.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28285694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28541570", "body": "Unfortunately we are in a position where we are tied to supporting 2.5 support for the foreseeable future. AppEngine has committed to supporting its 2.5 runtime for now, and the AppEngine runtime uses this protobuf implementation.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28541570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28610131", "body": "@tseaver You make a good point. I'm working with the AppEngine owners to see if they could just freeze their Python 2.5 runtime at the current version of protobuf. This would allow us to drop 2.5 and possibly 2.6 support in this repo.\n\nThe downside is that new features (like maps, JSON suport, etc) would not be available for Python 2.5. But I think this might be a necessary tradeoff. Maintaining 2.5 support in this repo has been an increasing burden.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28610131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "anuraaga": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/3e944aec9ebdf5043780fba751d604c0a55511f2", "message": "Add a UTF-8 decoder that uses Unsafe to directly decode a byte buffer."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Nayana-ibm": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/642e1ac635f2563b4a14c255374f02645ae85dac", "message": "Adding Release_CompareAndSwap 64-bit variant"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xiaoshuang-lu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/8ff22844568f5e093ed33edadb8bc0bf4c0dbc2c", "message": "[PROTOBUF-3404] add --with-zlib=PATH to configure.ac script"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jart": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/ac5371d13ed9dd3d19517e9008984f864af7cebf", "message": "Remove unhelpful build warnings\n\n-Wno-writable-strings removes 230 \"ISO C++11 does not allow conversion from\nstring literal to 'char *'\" warnings from TensorFlow test / build output.\nThese happen because pyext/ sources pass string literals to Python C API data\nstructures, e.g. PyGetSetDef, which for some reason were designed to not have\nthe const qualifier."}], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3387", "title": "Fix most Closure Compiler warnings", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "OEP": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/9935829a66ed6fb9e8f555fb29c218b86eb4aaee", "message": "Include .cc and .h files in source distribution"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dmaclach": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/2b3aa1c29460967848021e41a208085e76bc4232", "message": "Add Setter/Getter type verification. (#3880)\n\nAdd runtime asserts (that can be disabled in release) that verify\r\nthat the types being get/set for messages using the C Api match\r\nthe type in the descriptor for the field being get/set."}, {"url": "https://api.github.com/repos/google/protobuf/commits/8537f1e6d5477b83eb5a65334e9eddc6c35d5b58", "message": "Fix up warnings from Xcode 9.1 (#3887)\n\nFix up warnings from Xcode 9.1"}, {"url": "https://api.github.com/repos/google/protobuf/commits/8ae6844cf468d891cbca9976dfd160bd36e42cf5", "message": "codereview cleanup"}, {"url": "https://api.github.com/repos/google/protobuf/commits/4ba30923fabfca78a0d8cbef8e153bd2fb83ad17", "message": "code review cleanup"}, {"url": "https://api.github.com/repos/google/protobuf/commits/949596ea328978b4af38657d8831292b62b24686", "message": "Simplify getter/setter method implementations\n\nRemove unnecessary retain/releases for GPBFieldDescriptors when\ncreating implementations with blocks. The descriptors do not need\nto be memory managed because they are essentially global constructs\nthat are guaranteed to be around the lifetime of the app."}, {"url": "https://api.github.com/repos/google/protobuf/commits/9d7f3133722f5e35dbe915cd7b3aadb89f9986ad", "message": "Reduce size of GPBDictionary by getting rid of class creation methods"}, {"url": "https://api.github.com/repos/google/protobuf/commits/37a6672c3195ac9152ffda27c731440ba05bfb97", "message": "Remove unreferenced 'GPBMessageSignatureProtocol' class.\n\nRemove unreferenced 'GPBMessageSignatureProtocol' class that is just taking up\nspace in the Objective C runtime information by hanging the protocol it needs to\ndeclare off of GPBRootObject instead.\n\nSmall binary size reduction, but more importantly a removal of a class that\nappears to be unused when statically analyzed."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/65727006", "body": "Appears to need Gtest 1.7\n\ndiff --git a/autogen.sh b/autogen.sh\nindex c3e026d..b5a2840 100755\n--- a/autogen.sh\n+++ b/autogen.sh\n@@ -18,9 +18,11 @@ fi\n # Check that gtest is present.  Usually it is already there since the\n # directory is set up as an SVN external.\n if test ! -e gtest; then\n-  echo \"Google Test not present.  Fetching gtest-1.5.0 from the web...\"\n-  curl http://googletest.googlecode.com/files/gtest-1.5.0.tar.bz2 | tar jx\n-  mv gtest-1.5.0 gtest\n-  echo \"Google Test not present.  Fetching gtest-1.7.0 from the web...\"\n-  curl -O http://googletest.googlecode.com/files/gtest-1.7.0.zip\n-  unzip -q gtest-1.7.0.zip\n-  mv gtest-1.7.0 gtest\n-  rm gtest-1.7.0.zip\n  fi\n  \n  set -ex\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65727006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24117180", "body": "Make var name (dependency_manifest_name_) match argument name somewhat (dependency_out_name_?)\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24117180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24117404", "body": "Are we calling it a manifest, or dependency?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24117404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24117542", "body": "get rid of space on right hand side of *\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24117542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24117835", "body": "I thought we were avoiding unix specific I/O?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24117835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24117892", "body": "could probably use a const string &virtual_file here as well\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24117892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24117957", "body": "the option name has changed\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24117957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24117981", "body": "I assume you want to pass parsed_files by reference?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24117981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24117996", "body": "remove space on right of '*'\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24117996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24118078", "body": "this is the path to where the dependency file will be written.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24118078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24118187", "body": "normally we would wrap file_set.mutable_file() to the next line\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24118187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24118252", "body": "space before output_filename\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24118252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24118284", "body": "space before output_filename\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24118284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24118330", "body": "why are we copying dependency_manifest_name_ into output_filename?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24118330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24118483", "body": "understood, so in the error let's say 'generate a dependency file' instead of 'generate a manifest'\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24118483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24124448", "body": "Sorry.. I should be clearer in the comment it should be \"this is the path to the file where the dependency file will be written\". Because it is a path. It's not just a filename.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24124448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24126637", "body": "normally the file would be:\n\n```\n<outputfile1>; <outputfile2>; ... : <dependency1>; \\\\\n  <dependency2>;  \\\\\n  <dependency3>; \\\\\n ...\n```\n\nwhere for a main.c of:\n\n```\n#include \"main.h\"\n\nint main() {\n  return 0;\n}\n```\n\n```\ncc -MMD main.c\n```\n\nyou are going to get:\n\n```\nmain.o: main.c main.h\n```\n\nour code is not going to set &lt;outputfile&gt; correctly. I would expect for the cpp compiler that we would actually generate \n\n```\nfoo.pb.cc foo.pb.h: foo.proto\n```\n\nThoughts? I think the current code will actually work for my needs, but it is certainly not a correct solution as far as I can tell.\n\nI'm working from \"http://make.mad-scientist.net/papers/advanced-auto-dependency-generation/\".\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24126637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ijt": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/0d466884a294c602894237a0312b002a33f3623d", "message": "Update README.md: C extension works on PHP 7 (#3888)\n\nHere's the pull request that made it happen: https://github.com/google/protobuf/pull/2951"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sergiocampama": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/02129f0a87f272b49c4a880b483dd07ac0997db3", "message": "Fixes 32bit tests."}, {"url": "https://api.github.com/repos/google/protobuf/commits/b1f954e639f7cfd2c8768df62347f1e97a85aa7c", "message": "Improves coverage of GPBCodedInputStream"}], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2172", "title": "Remove missing static analyzer warning.", "body": "Is there any real problem in switching GOOGLE_CHECK for assert?\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/18545580", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/18545580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/comments/18545582", "body": "done, here and other places\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/18545582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Yangqing": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/cba18efe1861d1fc1eecd6dc2af86fc1f0d9922f", "message": "Allow one to omit building libprotoc and protoc binaries"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hchasestevens": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/3c331432b565b3cfb4c3659c285f6d969262777c", "message": "Add hypothesis-protobuf library to the 3rd party doc."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mehrdada": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/bb35f04fe6f0f05bc21e7fde624d8f0de29f6ef0", "message": "Update google/benchmark submodule to v1.2\n\nFixed some build issues on ppc64le architecture"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xuwei-k": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/05b56d01c1590bd93e2668c1f37856e6f9eb9c63", "message": "update joda-time javadoc url"}], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4205", "title": "fix typo in FieldMaskTree.java comment", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/2470", "title": "update ScalaPB url", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "signalwerk": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/44daa59e53eb32d1dce6720da3ec5c6dadc7307e", "message": "To be clear that we set a new variable"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "timou": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/a23669c2f613b95dfd675bba369106304ba7ba6a", "message": "Sort MSVC warning suppressions\n\nAdd brief documentation describing each warning suppression."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "spinorx": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/3130ce03fd0439e17d30b98833568a0eb9bc1a2b", "message": "Fix iOS cc_library build for protobuf.\n\nThe SDK and os versions were hard coded.  Archs were mixed up.\nBecause of this,  Was getting errors with latest SDK:\nclang: warning: no such sysroot directory: '/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.2.sdk/' [-Wmissing-sysroot]\nclang: warning: no such sysroot directory: '/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.2.sdk/' [-Wmissing-sysroot]\nclang: warning: no such sysroot directory: '/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.2.sdk/' [-Wmissing-sysroot]\nIn file included from external/com_google_protobuf/src/google/protobuf/io/printer.cc:35:\nIn file included from external/com_google_protobuf/src/google/protobuf/io/printer.h:40:\nIn file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/string:470:\nIn file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/string_view:171:\nIn file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__string:56:\nIn file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/algorithm:638:\nIn file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/cstring:61:\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/string.h:61:15: fatal error: 'string.h' file not found\n              ^~~~~~~~~~\n              1 error generated.\n\nCurrently none of these are needed when using bazel with https://github.com/bazelbuild/rules_apple.\n-target arm64-apple-ios is passed properly to clang.  So -arch armv7 etc are not needed.\nOS_IOS is not used anywhere.\nSources have:  GOOGLE_PROTOBUF_NO_THREADLOCAL defined in src/google/protobuf/stubs/platform_macros.h for iOS.  So __thread= is not needed.  In fact now that bazel is using C++11 by default,  __thread should ideally be moved to thread_local.\n-miphoneos-version-min is passed by rules_apple."}, {"url": "https://api.github.com/repos/google/protobuf/commits/16792c624003a33f350cac8f8d72731335d07fb9", "message": "Fix iOS cc_library build for protobuf.\n\nThe SDK and os versions were hard coded.  Archs were mixed up.\nBecause of this,  Was getting errors with latest SDK:\nclang: warning: no such sysroot directory: '/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.2.sdk/' [-Wmissing-sysroot]\nclang: warning: no such sysroot directory: '/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.2.sdk/' [-Wmissing-sysroot]\nclang: warning: no such sysroot directory: '/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.2.sdk/' [-Wmissing-sysroot]\nIn file included from external/com_google_protobuf/src/google/protobuf/io/printer.cc:35:\nIn file included from external/com_google_protobuf/src/google/protobuf/io/printer.h:40:\nIn file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/string:470:\nIn file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/string_view:171:\nIn file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__string:56:\nIn file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/algorithm:638:\nIn file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/cstring:61:\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/string.h:61:15: fatal error: 'string.h' file not found\n              ^~~~~~~~~~\n              1 error generated.\n\nCurrently none of these are needed when using bazel with https://github.com/bazelbuild/rules_apple.\n-target arm64-apple-ios is passed properly to clang.  So -arch armv7 etc are not needed.\nOS_IOS is not used anywhere.\nSources have:  GOOGLE_PROTOBUF_NO_THREADLOCAL defined in src/google/protobuf/stubs/platform_macros.h for iOS.  So __thread= is not needed.  In fact now that bazel is using C++11 by default,  __thread should ideally be moved to thread_local.\n-miphoneos-version-min is passed by rules_apple."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "toanju": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/37e112f45616a88d7904552fd2a7d9142d9f9a0b", "message": "fix implicit fallthrough in gcc 7\n\nfixes #3700"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "uykusuz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/be13314b2ac34993583dbb98c376eac5dd7237fc", "message": "fixes issue #3750\n\nIn protobuf-module.cmake: in addition to checking for release or debug\nvariants of protoc's location we should also check the configuration \"noconfig\"."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fmarier": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/5992e24e8a4ab76f4e451dea5ad01711a5b6cb82", "message": "Move namespace closing brace inside the header guard block"}], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3746", "title": "Add #include <vector> to work around problems on Android", "body": "Compiling Firefox with libc++ and GCC 4.9 on Android runs into a problem. The protobuf #includes and libc++ result in preprocessed code that looks something like:\r\n\r\n```\r\n/* via <iterator> */\r\n\r\nnamespace std {\r\nnamespace __1 {\r\n}\r\nusing namespace __1 __attribute__((__strong__));\r\n}\r\n\r\nnamespace std { namespace __1 {\r\ntemplate <class _Iter>\r\nclass __wrap_iter\r\n{\r\n  ...\r\n  template <class _Tp, class _Alloc> friend class vector;\r\n  ...\r\n};\r\n\r\n} // namespace __1\r\n} // namespace std\r\n```\r\n\r\n```\r\n/* via <vector> */\r\n\r\nnamespace std { namespace __1 {\r\n\r\ntemplate <class _Tp, class _Alloc>\r\nclass _LIBCPP_TYPE_VIS_ONLY vector : ...\r\n{ ... };\r\n\r\n} // namespace __1\r\n} // namespace std\r\n```\r\n\r\nand the problem is that GCC doesn't understand that the forward declaration of vector inside `__wrap_iter` is forward-declaring the actual vector class; it thinks it's declaring something else.\r\n\r\nHacking `<iterator>` to include `_LIBCPP_TYPE_VIS_ONLY` for the forward declaration doesn't help.  What does help is including `<vector>` earlier than `<iterator>`, so the `__wrap_iter` forward declaration picks up the correct definition of `std::vector`, and makes everything happy.\r\n\r\nThe patch originally comes from <https://bugzilla.mozilla.org/show_bug.cgi?id=1186561>.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rxbynerd": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/1e58006b3cca28d11bbc92074c10b3295330b2b9", "message": "test for field reassignment"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Schtolc": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/38fd94e184dfae01171a11fa1b7bb82ac9a72583", "message": "CodedInputStream::SetTotalBytesLimit description fix"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sgreenstein": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/68ee9162217867524a7649782c3610e70afdca68", "message": "Don't pass -lpthread and -lm on Windows\n\nThese flags are ignored by cl.exe and have no effect, but add noise to the build logs."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zearen": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/d2a5f8b31d22263ec3cd05a45b809838776304c3", "message": "Update third_party.md"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mapx": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4207", "title": "Update minimal Python version to 2.7", "body": "Python 2.6 is marked as dropped elsewhere.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shariat": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4204", "title": "remove bind for six", "body": "- removing bind is recommended \r\nhttps://docs.bazel.build/versions/master/best-practices.html#repository-rules\r\n\r\n- it conflicts with other external repos that have `@six` like `rules_docker`\r\n\r\nI recommend the rest of bind rules be removed as well.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alexey-malov": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4195", "title": "Adds an option in C++ JSON parser to ignore unrecognized enum values", "body": "This PR adds `JsonParseOptions::ignore_unknown_enum_values` option to treat unknown enum values as 0.\r\n\r\nFor example, if we have an application compiled with the following protobuf scheme:\r\n```\r\nsyntax = \"proto3\";\r\nenum ShapeType\r\n{\r\n    DEFAULT = 0;\r\n    RECTANGLE = 1;\r\n    ELLIPSE = 2;\r\n}\r\nmessage Shape\r\n{\r\n    ShapeType type = 1;\r\n}\r\n```\r\n\r\nIt will fail to parse the following JSON created with the newer version of an application:\r\n```json\r\n{\r\n  \"type\":\"ROUNDED_RECTANGLE\"\r\n}\r\n```\r\nIf you set the `ignore_unknown_enum_values` option to `true`, the application will be able to parse this JSON. The `Shape.type` field will be set to `DEFAULT` value (0). The application can handle this situation, for instance, by replacing a shape with one of the supported shape types.\r\nIf the `ignore_unknown_enum_values` option is `false`, the JSON parser will have existing behavior.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pcc": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4183", "title": "Add support for libc++ on Windows.", "body": "This disables a couple of workarounds which are only necessary with\r\nMSVC's standard library and cause problems with libc++.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "angusek": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4180", "title": "3.5.1.1", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ctaggart": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4179", "title": "enable source link for csharp", "body": "@jskeet Thanks for adopting SourceLink.Create.CommandLine in the [Google Cloud .NET tools](https://github.com/GoogleCloudPlatform/google-cloud-dotnet/blob/master/tools/Google.Cloud.Tools.ProjectGenerator/Program.cs#L83). SourceLink 2.7 helps add the portable pdb files to the nupkg as well.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gaffneyc": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4174", "title": "Ruby: Build packages for Ruby 2.5", "body": "Installing the gem on MacOS with Ruby 2.5 fails due to not having been\r\ncross compiled for 2.5.0.\r\n\r\nBased on [a commit to support 2.4.0](014a5507fb4b1ccc12f35ff313b8a04c05d69b7f)\r\n\r\nFixes #4098", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "OskarKinomoto": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4172", "title": "Add guards against bswap_XX redefnitions", "body": "Signed-off-by: Oskar S\u0301witalski <oskar.switalski@indoorway.com>", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4168", "title": "Use versions module from Skylib for version checking ", "body": "Many Bazel repositories implement their own version comparison functions - one implementation is now in [bazelbuild/bazel-skylib](https://github.com/bazelbuild/bazel-skylib/blob/master/lib/versions.bzl).\r\n\r\nFurther details: https://github.com/bazelbuild/bazel/issues/4433.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mike9005": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4167", "title": "Fix scope resolution for MessageExts in Ruby", "body": "Importing and building protobuf classes in Ruby implicitly depends on the namespace in which the protos in question have been placed. This isn't a problem for most use cases, but scope resolution breaks if used in a module also named `Google`. This PR updates the message class builder to access the`Google::Protobuf::MessageExts` from the outermost namespace as is expected.\r\n\r\nE.g. A simple proto message defined in `package foo.apis.google;` will result in generated code like this:\r\n```\r\nrequire 'google/protobuf'\r\n\r\nGoogle::Protobuf::DescriptorPool.generated_pool.build do\r\n  add_message \"foo.apis.google.Color\" do\r\n    optional :red, :float, 1\r\n  end\r\nend\r\n\r\nmodule Foo\r\n  module Apis\r\n    module Google\r\n      Color = Google::Protobuf::DescriptorPool.generated_pool.lookup(\"foo.apis.google.Color\").msgclass\r\n    end\r\n  end\r\nend\r\n```\r\nThis will fail on import with a `NameError: uninitialized constant Foo::Apis::Google::Protobuf`", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vastri": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4166", "title": "Make python_srcs target publicly visible", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "skebanga": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4145", "title": "Add TextFormat::Parser AllowUnknownField", "body": "As in [#2092](https://github.com/google/protobuf/pull/2092) which added `AllowUnknownField` support for Java, this does the same for C++.\r\n\r\nThe default behaviour of throwing an exception remains.\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sschuberth": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4142", "title": "Remove the executable bit from several source code files", "body": "This potenitally avoids compiler warnings.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "thisch": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4117", "title": "Add __init__.py files to compiler and util subpackages", "body": "The compiler and util subpackages are created by the build_py class in\r\nsetup.py. This has caused an issue in the protobuf package in\r\nconda-forge (https://github.com/conda-forge/protobuf-feedstock/issues/40). This\r\ncommit fixes this issue.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "code4ever": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4114", "title": "check null for reference type object before writeto can avoid many nullpointer exception", "body": "\u2026llpointer exception.\r\n\r\nSigned-off-by: code4ever <jessee_hustcs@126.com>", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "larrytin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4112", "title": "Support Conversion between JSON and message in Objective C", "body": "Fixes google/protobuf#1982\r\nFixes google/protobuf#1675\r\nFixes google/protobuf#3935", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cn007b": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4106", "title": "Improved install command.", "body": "Added `-y` flag to `sudo apt-get` command.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rogerhub": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4088", "title": "Add *_pb2_grpc.py files to py_proto_library outputs if gRPC is enabled.", "body": "I'm not sure how use_grpc_plugin=1 is supposed to work with the current build rule. It seems like the Python gRPC plugin generates *_pb2_grpc.py files, which are promptly thrown away by Bazel because they aren't listed in the outs. So, _PyOuts should have a use_grpc_plugin flag (just like _CcOuts, which strangely is currently unused).", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "epidemian": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4052", "title": "Ruby: make .to_json method play nice with builtin json module", "body": "Generated Ruby message objects implement a convenience `to_json` method that return a JSON-formatted string for that message.\r\n\r\nHowever, that `to_json` method doesn't play nice with native Ruby's [`json` module](http://ruby-doc.org/stdlib-2.4.0/libdoc/json/rdoc/JSON.html), specially in the case of nesting a protobuf message into a data structure like an Array or a Hash. Take this example program:\r\n\r\n```ruby\r\nrequire 'json'\r\nrequire 'google/protobuf'\r\n\r\nGoogle::Protobuf::DescriptorPool.generated_pool.build do\r\n  add_message 'MyMessage' do\r\n    optional :str, :string, 1\r\n  end\r\nend\r\n\r\nMyMessage = Google::Protobuf::DescriptorPool.generated_pool.lookup('MyMessage').msgclass\r\n\r\nmessage = MyMessage.new(str: 'foobar')\r\n\r\nputs(message.to_json) # => {\"str\":\"foobar\"}\r\nputs([message].to_json) # ArgumentError: wrong number of arguments (given 1, expected 0)\r\nputs({message: message}.to_json) # ArgumentError: wrong number of arguments (given 1, expected 0)\r\n```\r\n\r\nThis PR simply adds an optional argument to the `to_json` method of these generated classes. This argument is completely ignored, but makes it possible to nest protobuf objects into Ruby data structures and then serialize everything with a `to_json` call.\r\n\r\nWith this patch, the above code runs and yields:\r\n\r\n```\r\n{\"str\":\"foobar\"}\r\n[{\"str\":\"foobar\"}]\r\n{\"message\":{\"str\":\"foobar\"}}\r\n```\r\n\r\n\ud83d\ude38 ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "coryan": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3993", "title": "Include googletest as a submodule", "body": "This fixes #236.  Currently it patches googletest to support autoconf / automake builds, because google/googletest#776.  I have submitted google/googletest#1341 to fix that problem, but until it is accepted the patches work around the underlying googletest issue.\r\n\r\nThe builds with cmake and bazel do not need such hacks.\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lhecker": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3972", "title": "php: Added nanosecond support for Timestamp", "body": "This PR will add support for nanoseconds to the wellknown `Timestamp` type.\r\n\r\nI hope this PR fullfills all necessary preconditions to be merged, but if it doesn't (e.g. because the `Timestamp` class is generated automatically), I'd be glad to help get this feature implemented whatever is necessary for that to happen. \ud83d\ude42", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mairbek": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3939", "title": "Make cached hash value transient", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hjmallon": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3938", "title": "Squash CMake CMP0048 warnings when using add_subdirectory", "body": "CMP0048 warns about project_VERSION variables not being set in the NEW way. This happens when using protobuf as a submodule in a larger build. GTest and RE2 have adopted\r\nsimilar patches.\r\nSee https://cmake.org/cmake/help/v3.10/policy/CMP0048.html", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RicoAntonioFelix": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3914", "title": "Add support for the IncludeOS operating system", "body": "# Change\r\n* Add directory (src/includeos)\r\n* Add cmake script to build and install the C++ runtime library for [IncludeOS](https://github.com/hioa-cs/IncludeOS)\r\n* Add `README.md` document explaining the purpose of the includeos directory and its contents", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "duyouqian": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3909", "title": "Merge pull request #1 from google/master", "body": "pull new", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wijagels": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3901", "title": "Fix unused parameter warnings in generated code with arenas enabled", "body": "This only seems to affect code generated with `option cc_enable_arenas = true`.  All I did was update `cpp_message.cc` to exclude a parameter for `RegisterArenaDtor` if registration is a no-op.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lofcek": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3876", "title": "3.4.x", "body": "", "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/3863", "title": "Fix out-of-tree build for cmake", "body": "File well_known_types_embed.cc is generated in the same place where are source code and this does not allow us make our sources read-only", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "carusogabriel": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3853", "title": "Use PHPUnit\\Framework\\TestCase instead of PHPUnit_Framework_TestCase", "body": "I use the `PHPUnit\\Framework\\TestCase` notation instead of `PHPUnit_Framework_TestCase` while extending our TestCases. This will help us migrate to PHPUnit 6, that [no longer support snake case class names](https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-6.0.md#changed-1).", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "abacaphiliac": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3829", "title": "Update Composer config in PHP module", "body": "* Prevents installation of `phpunit/phpunit:^6` because the test cases in this project require `\\PHPUnit_Framework_TestCase` which was removed in v6.\r\n* Moves generated PHP classes for tests into autoload-dev so that they are not referenced in the dist autoload. I realize the published config is in the project root (meaning the generated classes would never be available in dist), but test dependencies are test dependencies after all.\r\n* Adds convenience Composer scripts to run protoc with and without grpc.", "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/3827", "title": "Adds Dockerfile to build Protobuf", "body": "Adds Dockerfile which creates a container to build Protobuf. Rather than worrying about Windows, OSX, or various Linux distros, developers *should* be able to quickly build Protobuf in a consistent cross-platform fashion. The build container installs dependencies required to build Protobuf and runs the configuration and make scripts unless the Docker CMD is overridden.\r\n\r\nI need some help:\r\nI ran through the config and make scripts successfully on my Mac, but `make` is failing on Ubuntu 16 and 14 (LTS) with the following error:\r\n\r\n```\r\ngoogle/protobuf/stubs/.libs/io_win32.o: file not recognized: File format not recognized\r\ncollect2: error: ld returned 1 exit status\r\nMakefile:2425: recipe for target 'libprotobuf.la' failed\r\nmake[2]: *** [libprotobuf.la] Error 1\r\nmake[2]: Leaving directory '/protobuf/src'\r\nMakefile:1545: recipe for target 'all-recursive' failed\r\nmake[1]: *** [all-recursive] Error 1\r\nmake[1]: Leaving directory '/protobuf'\r\nMakefile:1452: recipe for target 'all' failed\r\nmake: *** [all] Error 2\r\n```\r\n\r\nAny idea why this has happened? \r\n\r\nThank you for the consideration and assistance.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ras0219-msft": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3825", "title": "Add Vcpkg to C++ installation instructions for Windows", "body": "Fixes issue #1154 by noting that `vcpkg` contains protobuf. Potential improvements: also remark how to use `vcpkg` to get dependencies when building from source via CMake.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Carmot": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3812", "title": "Minor fixes in code improvements.", "body": "Unusued variables, variable assigned twice, conditions never met or always having the same value.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/25227801", "body": "https://github.com/google/protobuf/blob/23adfeb00327fbdccacc99806acb1a9a073bd8e0/src/google/protobuf/stubs/port.h#L460\r\n\r\nI know it is in this way to be easier to read the code, buy it doesn't make any sense to have two functions with exactly the same code. Just to point it out, it's not an issue.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/25227801/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/comments/25228144", "body": "139: map_iter->iter_ = new typename Map<Key, T>::const_iterator;\r\n140: --> GOOGLE_CHECK(map_iter->iter_ != NULL);\r\nLine 140 is not necessary unless you link against nothrownew.obj\r\nnew operator behavior is throwing an exception when an issue happens. Exception should be captured if the expected behavior is to tell someone. ", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/25228144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "au-phiware": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3797", "title": "ObjC: Implement KVO compliance.", "body": "Introduces a much used feature (personally speaking).", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "freepvps": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3724", "title": "C# map merge exception bug-fix", "body": "Merging of two maps with intersected keys throw exception\r\nI think, that it's not ok\r\nMaybe \"MergeFrom\" method for Map<> is a good idea?", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "EdSchouten": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3695", "title": "Prefer using compiler built-in endianness definitions.", "body": "In order to make Protobuf build and work on CloudABI, a sandboxed\r\nUNIX-like runtime environment, we have to extend the endianness\r\ndetection code. Instead of adding code specific to CloudABI, let's\r\nchange this to simply use definitions that are documented by GCC and\r\nClang, so that any other operating system/runtime may benefit.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zanker": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3693", "title": "When initializing a message, skip a field if value is nil", "body": "This is mostly in the same vein as https://github.com/google/protobuf/pull/3627 for Ruby.\r\n\r\nIt allows doing: `MyMessage.new(string_field: nil)` and `string_field` is treated as a default. It makes it easier to construct protos when you're building up the options across multiple files, or from JSON where a nil value isn't necessarily a bad thing.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rchav": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3689", "title": "Fix typo in message.h comment", "body": "ByteSize() to ByteSizeLong()", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pmoroney": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3669", "title": "rename duplicate testMessageSetNullFail function", "body": "the testMessageSetNullFail function was declared twice.\r\nSo I renamed one to testMessageSetNullFailMap", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RoelBlomjousDevelopment": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3664", "title": "Make sure pragma GCC diagnostic push / pop is only added for supported compilers", "body": "`#pragma GCC diagnostic push `and `#pragma GCC diagnostic pop` were added in [gcc 4.6](https://gcc.gnu.org/gcc-4.6/changes.html).", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "packetzero": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3643", "title": "for generated pb.cc files, avoid __FILE__ in VERIFY_VERSION macro call", "body": "Currently, whether generated .pb.cc files are built in release or debug mode, the source filenames are included as strings in the resulting binary.\r\n\r\nThis is because protoc-cpp adds a call to the GOOGLE_PROTOBUF_VERIFY_VERSION macro in the InitDefaultsImpl function of every generated C++ protobuf message file.  That macro contains the __FILE__ macro.  Therefore, if you have a source file named MySpecialMessage.pb.cc, runnings *strings* on the resulting .o or .a or executable will reveal all the source file names.  If you are using CMAKE for your build, it will include the absolute path of all .pb.cc files (e.g. \"/Users/bob/dev/blah/generated/MySpecialMessage.pb.cc\").\r\n\r\nThis change follows the behavior of the assert macro, which will omit __FILE__ when NDEBUG is defined.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pfhayes": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3614", "title": "Add _C_DESCRIPTOR_CLASS to DescriptorBase", "body": "Not necessarily advocating for this change, mostly asking as a question and thought this PR was perhaps the easiest way to answer\r\n\r\nWhy is `pyext._message.DescriptorBase` not a virtual subclass of `google.protobuf.descriptor.DescriptorBase` as the other descriptors are? I ran into this issue when migrating to the C++ runtime and observing that an `isinstance(d, DescriptorBase)` which previously passed no longer does", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zunger-humu": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3597", "title": "Calling reflected c'tors no longer breaks MergeFrom.", "body": "Hey everyone,\r\n\r\nI came across a nasty little bug with Python reflection, with a simple workaround. The problem can be triggered by a map whose value is a nested message.\r\n\r\n*Problem description:* Both the constructors of protoc-generated messages and of reflection-generated messages (GeneratedProtocolMessageType.__init__) set descriptor._concrete_class to themselves. Unfortunately, if you access a class both directly and through reflection, they try to do this to the same descriptor, and hilarity ensues.\r\n\r\nA way to manifest this problem is to print a protobuf (constructed normally) containing a map whose value is a nested (not foreign) type. When the printer reaches the map field, it will call value.GetEntryClass()(key=...) on the MapMessage object, which in turn calls descriptor._concrete_class(); the constructor then tries to MergeFrom on the output of that, merging the contents of the value field from the class being printed into what was made by the concrete class. But if the generated class has ever been constructed, descriptor._concrete_class() will now return one of *those*, and MergeFrom will throw a TypeError because it's trying to merge two different classes!\r\n\r\n*A hypothetical hard fix:* would be to have multiple concrete classes available in the descriptor and switch through them based on something or other.\r\n\r\n*A much easier fix:* There are really two bugs here: the fact that both classes are modifying the same descriptor, and the fact that MergeFrom is testing class match incorrectly. Specifically, MergeFrom should work fine if you are trying to merge a generated class into a compiled class or vice-versa. Therefore, a much better fix is to replace the isinstance() check on python_message.py:1212 with a check that also allows it to pass if the two classes are protos whose descriptor matches.\r\n\r\nThere do not appear to be any other points in the protobuf code that require such a change; the only other dubious uses of isinstance() are in the two equality checks (_AddEqualsMethod.__eq__ and _ExtensionDict.__eq__), where it's arguable that returning false when comparing generated and non-generated messages is reasonable. (Although you could argue the other way; proto equality has always been a contentious subject)\r\n\r\nThis pull request contains the fix and a unittest which reproduces the core issue.,", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jackwakefield": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3563", "title": "Correct PHP JSON_BIGINT_AS_STRING parameter and decode as an object", "body": "This fixes the placement of the `JSON_BIGINT_AS_STRING` option passed to `json_decode`, this is being passed as the `$assoc` parameter which decodes the JSON as an associative array.\r\n\r\nI've changed the JSON to be decoded as as object rather as an array. This fixes an issue where the keys to a Protobuf map could be a numerical string, which then become integers when decoded as an associative array causing `expected string`\r\n\r\n```php\r\n$data = '{\"1001\": true, \"foo\": true}';\r\n\r\nvar_dump(json_decode($data, true));\r\n// array(2) {\r\n//   [1001]=>\r\n//   bool(true)\r\n//   [\"foo\"]=>\r\n//   bool(true)\r\n// }\r\n\r\nvar_dump(json_decode($data));\r\n// object(stdClass)#1 (2) {\r\n//   [\"1001\"]=>\r\n//   bool(true)\r\n//   [\"foo\"]=>\r\n//   bool(true)\r\n// }\r\n```", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cclauss": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3507", "title": "import inspect", "body": "Inspect is used five times on line 65-74 without being imported.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "anuphalarnkar": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3506", "title": "Updated for supporting arch ppc64le", "body": "The files namely \"build-protoc.sh\" and \"build-zip.sh\" in sub-folder \"protoc-artifacts\" has been updated to support architecture PPC64LE.\r\nAfter this modification, I am able to successfully build for Power platform.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zsxsoft": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3491", "title": "Fix the PHP extension building in Windows", "body": "Instruction: Follow the guideline \"Building PECL extensions\" in https://wiki.php.net/internals/windows/stepbystepbuild, copy all files in ``php/ext/google/protobuf/`` to ``phpdev\\vc14\\x64\\pecl\\protobuf``, and configure with ``configure --disable-all --enable-cli --enable-protobuf=shared --disable-zts``\r\n\r\n![image](https://user-images.githubusercontent.com/2398785/29300267-0cc74368-81a7-11e7-842f-1da6e3aa2c88.png)\r\n\r\n![image](https://user-images.githubusercontent.com/2398785/29300216-c3c291d6-81a6-11e7-8a3d-3451b7d19346.png)\r\n![image](https://user-images.githubusercontent.com/2398785/29300278-108fa5c6-81a7-11e7-8806-271fa72c96e4.png)\r\n\r\n\r\n\r\nThis PR just fixed building on Windows, anyway, there're lots of warning when I compiling it and if I call any function like ``\\Google\\Protobuf\\Internal\\DescriptorPool::internalAddGeneratedFile``, it will still crash PHP.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "benley": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3428", "title": "Include __init__.py for google.* python namespacing in Bazel builds", "body": "Related to #1296: The issue seems to be fixed for consumers of the python protobuf package from pypi, but not for anyone getting it from here as a Bazel remote repository.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Fleshgrinder": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3364", "title": "Added Missing Module Reference", "body": "PHP expects a global reference to the module for static compilation.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RyanGordon": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3343", "title": "Add HHVM Tests", "body": "This is an attempt to add HHVM testing. We are currently blocked on waiting on Debian 9 packaging to be released by HHVM team sometime in the next few months.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gturri": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3292", "title": "Add Java insertion points for field modifiers", "body": "With those insertion points, we're able to implement a plugin that does what is\r\ndescribed on #2684. ie: with those patches, we're able to make a distinction\r\nbetween a field which has a default value and a field which isn't set.\r\n\r\nSaid differently, this is how we solve #1606 for Java", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/3291", "title": "Add C# insertion points for field modifiers", "body": "With those insertion points, we're able to implement a plugin that does what is\r\ndescribed on #2684. ie: with those patches, we're able to make a distinction\r\nbetween a field which has a default value and a field which isn't set.\r\n\r\nSaid differently, this is how we solve #1606 for C#", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "veerenmandalia": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3289", "title": "Add JsonFormat option to use unrecognized enum value when enum value is unknown", "body": "Instead of throwing a parse exception when a unknown enum value is seen, use the protobuf UNRECOGNIZED enum value.\r\n\r\nThis behavior can be enabled via `Parser.usingUnrecognizedEnumValue()`, similar to what `Parser.ignoringUnknownFields()` did for unknown fields.\r\nThis allows different parties to add new enum values without all parties needing to know about the value.\r\n\r\n[See Issue 3012](https://github.com/google/protobuf/issues/3012)\r\n\r\nSigned-off-by: Veeren Mandalia <veeren@postmates.com>", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DenKoren": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3248", "title": "Use mb_str* functions instead str*", "body": "This makes protobuf work with overloaded str* functions (when mbstring.func_overload PHP param is greater than 2)", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jynnantonix": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3205", "title": "Make sure directory exists for js well known types", "body": "If the build directory is not the same as the source directory then\r\nthe build fails because the google/protobuf/compiler/js directory\r\ndoesn't exist.  Make sure that it does.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gkelly": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3187", "title": "Remove the unused CollectMapInfo function", "body": "This has been unused since commit d36c0c5.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/3186", "title": "Remove unused output_file variable from js_embed", "body": "The js_embed tool outputs to stdout, so the output_file variable is\r\nunnecessary and unused.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gerboland": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3174", "title": "Use uint32 in GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET macro", "body": "This fixes compiler warnings about narrowing of int to uint32.\r\n\r\nOriginal fix e19f3b5e got lost, I suspect during 5a76e633.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "blacksagi": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3147", "title": "Jtattermusch patch 2", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "afpro": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3100", "title": "control RepeatedField memory growth on mobile platform", "body": "RepeatedField double memory usage while Reserve\r\nbut mobile platform is memory sensitive, and usually won't load\r\nvery large protobuf model\r\nso limit RepeatedField memory growth up to 1mb is acceptable", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rltvty": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3082", "title": "There is no need to adjust UInt32 values when php supports 8 byte integers", "body": "And the conversion actually causes an exception when calling `serializeToString()`\r\n\r\n```\r\nCaught an error, errno: 1024, msg: Output stream doesn't have enough buffer., /var/www/vendor/google/protobuf/php/src/Google/Protobuf/Internal/OutputStream.php:92\r\n```\r\n\r\nRemoving this line fixes the issue.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MarcusLongmuir": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3026", "title": "JS: Fix dot usage in filename alias", "body": "Fixes #1745. (`javascript generated code doesn't work when you use dot in a file name and include it`)\r\n\r\nReplaced dot (`.`) with `$`.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "axxapy": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3025", "title": "ObjectiveC: make file name same as class name when objc_class_prefix is set", "body": "There is no technical limitation but in general classes names and file names supposed to be the same in ObjC.\r\n\r\nThere is at least one case when it does not work without this fix:\r\nif there are messages with same names but in different packages, you can not put generated .h files into framework since it has plain file structure (no directories) for headers. So each file must have unique name.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "legrosbuffle": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3007", "title": "Make cpp generated enum bound constants constexpr when Options::proto_h", "body": "is specified.\r\n\r\nBefore:\r\n\r\nconstexpr const MyMsg_Enum MyMsg::Option1;\r\nconstexpr const MyMsg_Enum MyMsg::Option2;\r\nconst MyMsg_Enum MyMsg::Enum_MIN;\r\nconst MyMsg_Enum MyMsg::Enum_MAX;\r\nconst int MyMsg::Enum_ARRAYSIZE;\r\n\r\nAfter:\r\n\r\nconstexpr const MyMsg_Enum MyMsg::Option1;\r\nconstexpr const MyMsg_Enum MyMsg::Option2;\r\nconstexpr const MyMsg_Enum MyMsg::Enum_MIN;\r\nconstexpr const MyMsg_Enum MyMsg::Enum_MAX;\r\nconstexpr const int MyMsg::Enum_ARRAYSIZE;\r\n\r\nThis complements https://github.com/google/protobuf/pull/1260/", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vschs007": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3004", "title": "updated mox.py", "body": "> removed unnecessary spaces\r\n> more space efficient", "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/3003", "title": "updated it", "body": "removed unnecessary spaces", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "podsvirov": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2998", "title": "CMake: Android crosscompiling", "body": "Added protobuf_BUILD_PROTOC and protobuf_BUILD_LIBPROTOC\r\nadvanced options.\r\nFor Android system by default we only build libprotobuf-lite\r\nand libprotobuf.\r\n\r\nRelated links:\r\n* [CMake: Cross Compiling for Android](https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html#cross-compiling-for-android)", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Slonegg": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2980", "title": "changes for CMake to support cross-compilation", "body": "I'm working on GRPC and Protobuf for Android. Here are changes to build protobuf with CMake for Android. Instructions (MSVS + Ninja):\r\n\r\n1. Install [Android SDK](https://developer.android.com/studio/index.html)\r\n2. Install [Android NDK](https://developer.android.com/ndk/guides/index.html). Generally only NDK is necessary, SDK just may be useful for other purposes.\r\n3. Set environment variable `ANDROID_NDK=<NDK location>`\r\n4. Install [Ninja](https://github.com/ninja-build/ninja/releases). Just drop `ninja.exe` somewhere where it can be accessed from command line, for example, alongside cmake binaries.\r\n5. Build protobuf for host, because we will need protoc executable that we can run on host:\r\n```\r\n    mkdir _host_build\r\n    cd _host_build\r\n    \"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\vcvarsall.bat\" x86_amd64\r\n    cmake ../cmake -G Ninja -Dprotobuf_BUILD_TESTS=OFF\r\n    ninja\r\n```\r\n6. Build protobuf for android\r\n```\r\n    mkdir _android_build\r\n    cd _android_build\r\n    cmake ../cmake -G Ninja -DCMAKE_SYSTEM_NAME=Android -DCMAKE_SYSTEM_VERSION=21 -DCMAKE_ANDROID_ARCH_ABI=arm64-v8a -DCMAKE_ANDROID_STL_TYPE=gnustl_static -Dprotobuf_BUILD_TESTS=OFF -Dprotobuf_IMPORT_EXECUTABLES=../_host_build/protobuf_ImportExecutables.cmake\r\n    ninja\r\n```\r\n\r\nAlso should fix https://github.com/google/protobuf/issues/2719", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "devnexen": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2976", "title": "Memory leak fix since argv array could leak in this block.", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ckennelly": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2898", "title": "Avoid aliasing _has_bits_ during SerializeWithCachedSizes.", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/2852", "title": "Defer updating local _has_bits_ in MergeFrom.", "body": "This can save us up to 7 load/or/stores per 8 fields, as the compiler may assume that `&from` and `this` alias each other, so the local `_has_bits_` need to be reloaded with each field.\r\n\r\nThis extends #2850.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/2850", "title": "Avoid aliasing from._has_bits_ in MergeFrom", "body": "Self-`MergeFrom` has been forbidden since 40ee5517 via a `GOOGLE_CHECK`.  Since 5a76e633e, we use a `GOOGLE_DCHECK` to guard against it.  The compiler forces a reload of the `from._has_bits_` after every field is merged.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/2786", "title": "Avoid self-swap check when swapping repeated fields.", "body": "In generated code, we check for self-swap in Swap (and same Arena, for protos using Arenas) and then individually check each field for self-swap in `RepeatedField<T>::UnsafeArenaSwap`/`RepeatedPtrField<T>::UnsafeArenaSwap`.  If the first check has passed, the second (per-field) check will as well.\r\n\r\n  `this != other` implies `&(this->some_field_) != &(other->some_field_)`\r\n\r\n  for the same types of `this` and `other`.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/2771", "title": "Avoid aliasing RepeatedField<T>::Rep* during serialization.", "body": "This removes a load per element when a repeated primitive field by avoiding a reload of RepeatedField<T>::rep_.  This is also a data dependency for the subsequent (and remaining) load.\r\n\r\nFor fixed-sized fields, this extends the changes to SerializeWithCachedSizes in 7f3e23707 to SerializeWithCachedSizesToArray.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/2754", "title": "Eliminate distinction between scalar and repeated message field parsing.", "body": "Since the elimination of ExpectTag (5a76e633ea9b), the generated code is different while having the same functional behavior.  This shifts the recursion limit checks into CodedInputStream::DecrementRecursionDepthAndPopLimit (which is not inlined).", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/2615", "title": "Add support for table-driven parsing.", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "plemanach": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2890", "title": "Update Descriptor.cs", "body": "it will fix this issue  : https://github.com/google/protobuf/issues/2889", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yasushi-saito": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2864", "title": "Add -DHAVE_ZLIB to the bazel BUILD rule.", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Genmutant": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2842", "title": "Add property to the C#-JsonParser to ignore unknown fields during parsing", "body": "First version to fix #2838 . How should the JsonReplayTokenizer be handled?\r\n\r\nIt should ignore the object if it is unknown. To achieve this, the name and value is skipped if it is a simple value. If it is an array or dict, the tokens are read and discarded until the object is finished -> it has a lower remaining object-stack.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Dunemaster": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2811", "title": "Java: Mark sun.misc dependency as optional", "body": " Mark sun.misc dependency as optional (which it is).\r\nThe pull request makes protobuf 3 usage possible in osgi environments where sun.misc is not availabe (which is by default)", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aidan-plenert-macdonald": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2807", "title": "Better processing of strings with newlines", "body": "Fixes https://github.com/google/protobuf/issues/2798", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shashwata": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2800", "title": "Fix for issue #2166", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bopohaa": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2744", "title": "Fix Dispose null ref exception", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kvart2006": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2737", "title": "std corrections", "body": "Correcting \"naked\" map and  vector declarations to std::map and std::vector.\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Phineas": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2723", "title": "Update LICENSE Copyright Date to 2017", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dopuskh3": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2713", "title": "Add insertion points for field modifiers", "body": "Add the following insertion points:\r\n- field_modifier_scope_{before,after}:<fullname>.setField\r\n- field_modifier_scope_{before,after}:<fullname>.clearField\r\n- field_modifier_scope_{before,after}:<fullname>.clearOneOf\r\n- field_modifier_scope_{before,after}:<fullname>.setRepeatedField\r\n- field_modifier_scope_{before,after}:<fullname>.addRepeatedField\r\n- field_modifier_scope_{before,after}:<fullname>.set<capitalized_name>)\r\n- field_modifier_scope_{before,after}:<fullname>.set<capitalized_name>Bytes)\r\n- field_modifier_scope_{before,after}:<fullname>.add<capitalized_name>)\r\n- field_modifier_scope_{before,after}:<fullname>.addAll<capitalized_name>Bytes)\r\n\r\nTwo entry points are provided for each at scope start and end.\r\n\r\nGithub Issue: #2684", "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/2664", "title": "Implement nullable syntaxic sugar keyword", "body": "Implementation proposal for nullable keyword that convert a scalar field to a one-field oneof.\r\n\r\nIssue #1606 ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "0-wiz-0": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2680", "title": "NetBSD build fixes", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "udnaan": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2658", "title": "Fixes cmake build failure for js_embed step", "body": "This fixes an issue where js_embed generation step would fail since it cannot find js_embed binary.\r\n\r\nThe binary is correctly generated but since it is in the ${CMAKE_CURRENT_BINARY_DIR}, the system would be unable to find it.\r\n\r\nPerhaps it works for windows but it fails for *nix. ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "linluxiang": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2637", "title": "Add namespace for std::string in case ambiguous symbol error", "body": "The string argument has no namespace. It will cause \"ambiguous symbol\" compiling error in the situation that another \"string\" is defined in some other header files.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "FabioBatSilva": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2634", "title": "Add link to php - protobuf-php/protobuf", "body": "Add link to php implementation https://github.com/protobuf-php/protobuf", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fishercoder1534": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2555", "title": "update license to 2017", "body": "Happy New Year!", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rpavlik": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2531", "title": "Fix cmake module - quote output directory for generation", "body": "Just a small fix to the CMake module, quoting the executable as well as the output directory, in case there are spaces in those paths.\r\n\r\nMade on 3.0.x since that's what I assumed was a stable branch - not sure if the 3.1.x or 3.2.x branches I now see replace it or if all pulls should be against master, but this one is against 3.0.x since that's where I merged it personally and used it. Just a single commit so should be cherry-pickable.", "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/2530", "title": "Podsvirov CMake changes backported to 3.0.x", "body": "These are CMake changes, including an essential bugfix for `protobuf_MODULE_COMPATIBLE`, originally found in #1865 by @podsvirov - all I did was a `git rebase --onto` to get them on the 3.0.x branch.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dParadiz": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2526", "title": "Generating service interface with PHP generator", "body": "Service interface is now generated with PHP generator. This interface can than be implemented with ClientStub.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gkrasin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2507", "title": "Fix PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET for Clang 3.7.x and older.", "body": "In Clang older than 3.8, the compiler is not happy about _Pragma(\"clang diagnostic push\").", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "marcinwyszynski": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2478", "title": "Optional require_relative in Ruby generated code", "body": "This change allows instructing the Ruby compiler to use `require_relative` instead of `require` for imports.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "anoopsjohn": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2457", "title": "Issue#2456 : ByteInput-based CIS (Mirror of ByteOutput-based COS)", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "na-ka-na": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2441", "title": "Change StringOutputStream's interface for better performance.", "body": "This fixes major performance issue with JsonStringToMessage(). Current version\r\nof StringOutputStream is really slow outside Google. This is because\r\nSTLStringResizeUninitialized() is un-optimized (it has to zero out the\r\nre-sized bytes). And STLStringResizeUninitialized() is invoked\r\nrepeatedly everytime a token is written.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gerben-s": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2373", "title": "Down integrate", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "remohammadi": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2370", "title": "Fix go_package for descriptor.proto", "body": "To avoid `cannot find package \"google/protobuf\"` error", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tcwitte": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2310", "title": "Use require_relative in Ruby for imported definitions", "body": "A 'require' won't work because the file is not on the $LOADPATH.\r\n\r\nFor example, with these definitions in a.proto and b.proto:\r\nsyntax = \"proto3\";\r\nimport \"b.proto\";\r\nmessage A {\r\n\trepeated B b = 1;\r\n}\r\n\r\nsyntax = \"proto3\";\r\nmessage B {\r\n\tstring text = 1;\r\n}\r\n\r\nWhen did \"load 'a_pb.rb'\" I used to get:\r\na_pb.rb:6:in `require': cannot load such file -- b_pb (LoadError)", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "slavanap": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2304", "title": "Support hash computation for protobuf messages.", "body": "This pull request relates to following issue: https://github.com/google/protobuf/issues/2066\n\nIt adds hash computation support for `::google::protobuf::Message` class and for all generated classes for messages in C++ code.\n\nThis pull request is **a draft** because I need advise or help about how to\n1) write tests for added code (unfortunately, I'm not familiar with google test framework and have not written much tests in my life),\n2) change or regenerate .pb.h files within protobuf repository according changes in these files' generator.\n\nAnd of course I need a code review.\n\n@xfxyjwf \nWe can move discussion from issue ticket here, if you want.\nAnd sorry for the delay. Life is hard sometimes.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "peterebden": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2299", "title": "Fix for construction of messages in the C++ Python implementation.", "body": "Fixes the case where a message has a map field and the caller passes in a map container (e.g. from another message object) as a constructor argument. Currently the field is silently left empty.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "apollo-time": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2298", "title": "total_bytes_limit_ with size when size is bigger 64MB", "body": "Can't parse GraphDef from the given flat array that size is bigger than\n64MB.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "seishun": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2296", "title": "JavaScript: support using Uint8Array in toObject", "body": "Currently, `toObject` always outputs `bytes` fields as base64-encoded strings. This is understandable for proto3, which has a canonical JSON mapping, but isn't necessary for proto2. I propose using `Uint8Array` for `bytes` fields in proto2 when binary support is enabled.\n\nMy usecase is described [here](https://github.com/google/protobuf/issues/1591#issuecomment-239203004). In short: I want a way to convert Protobuf messages to plain JS objects without having to hard-code fields for each message I use. `toObject` works for me for the most part (pending #1951 and #1922), but I would prefer not to have to decode base64 back into a `Buffer` or `Uint8Array`.\n\nConsider this a feature request with proof-of-concept implementation attached.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/1951", "title": "JavaScript: Add protoc option to preserve field names in toObject", "body": "Currently, `toObject` returns an object with field names converted to camelCase. However, in some cases the original field names are preferable. This adds a `protoc` option `preserve_proto_fieldnames` that keeps them as-is, and also doesn't append \"List\" or \"Map\".\n\nI'll add tests if/when I get a go-ahead on the general idea (and perhaps some suggestion on how the test should work).\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/1922", "title": "JavaScript: Make implicit defaults consistent with explicit defaults in toObject", "body": "This was originally part of #1447, but it was decided to postpone this part. The relevant parts of the description of the previous PR follow.\n\nCurrently, the JS implementation treats proto2 fields with specified defaults differently from fields without specified defaults in `toObject`.\n\nConsider the following message definition:\n\n``` proto\nmessage Test {\n  optional string foo = 1;\n  optional string bar = 2 [default = \"\"];\n}\n```\n\nIf both `foo` and `bar` are unset, `toObject()` returns `{ foo: undefined, bar: \"\" }`.\n\nHowever, `foo` and `bar` should be equivalent when unset per the [spec](https://developers.google.com/protocol-buffers/docs/proto#optional) (which would be consistent with the other implementations). I propose to unify their behavior in the following way:\n\nIf both `foo` and `bar` are unset, `toObject()` returns `{}`. This is for two reasons: 1) putting the default value in the object would cause loss of presence information; 2) properties with `undefined` values don't carry any useful information and just add noise to the object.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/1832", "title": "JavaScript: Use strings for 64-bit ints to preserve precision", "body": "Currently the following happens:\n\n``` js\nC:\\Users\\Nikolai\\Downloads\\protobuf\\js>node\n> var u = require('./testbinary_pb')\nundefined\n> var t = new u.TestAllTypes();\nundefined\n> t.setOptionalSfixed64('76561197988007571')\nundefined\n> var bytes = t.serializeBinary()\n\n> var t2 = u.TestAllTypes.deserializeBinary(bytes)\n\n> t2.getOptionalSfixed64()\n76561197988007570\n>\n```\n\nThis fixes it by representing 64-bit ints as decimal strings:\n\n``` js\n$ node\n> var u = require('./testbinary_pb')\nundefined\n> var t = new u.TestAllTypes();\nundefined\n> t.setOptionalSfixed64('76561197988007571')\nundefined\n> var bytes = t.serializeBinary()\n\n> var t2 = u.TestAllTypes.deserializeBinary(bytes)\n\n> t2.getOptionalSfixed64()\n'76561197988007571'\n>\n```\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "belvedere-trading": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2295", "title": "Use user-supplied descriptor pools in FileDescriptor", "body": "FileDescriptor's **new** accepted a pool argument but did not\nhonor it. When using the C++ backend implementation, this causes\nproblems for those who need hot-reloading of Protobuf definitions.\n\nThis issue is addressed by honoring the pool argument if it is\nsupplied.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jdavidberger": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2262", "title": "Fixed issue in cmake; bool equality can't be tested with EQUAL", "body": "The current cmake package configuration relies on compatibility checks with booleans using EQUAL. As far as I can tell, CMAKE doesn't do the intuitive thing when comparing booleans with EQUAL expressions; something like:\n\n```\nSET(TESTA ON)\nSET(TESTB ON)\n\nIF(TESTA EQUAL TESTB)\n     message(\"Equal is true\")\nENDIF()\n\nIF(\"${TESTA}\" STREQUAL \"${TESTB}\")\n     message(\"Strequal is true\")\nENDIF()\n```\n\nwill only print the latter message. The change submitted just treats them like strings and it works as expected.\n\nThis seems to break any usages of find_package against the current version of protobuf; I suspect the reason no one has noticed is that until most distros have packages from v3 or higher, most people are just including it via add_subdirectory or the like. \n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mridulnagpal": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2260", "title": "Update autogen.sh", "body": "For the people who had installed gmock before had gmock named as googlemock-release-1.7.0 because they didn't rename it. Hence if now they have it they won't have to download gmock.zip again.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "muescha": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2259", "title": "third party: discontinued repo -> new repo (sergei-ivanov/maven-protoc-plugin -> xolstice/protobuf-maven-plugin)", "body": "https://github.com/sergei-ivanov/maven-protoc-plugin/ is discontinued and continued at https://github.com/xolstice/protobuf-maven-plugin\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mikemilici": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2242", "title": "2.7.0", "body": "testing a python protocol buffer conversion service\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rowillia": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2230", "title": "Fix instances of classes implementing `__eq__` but not `__hash__`", "body": "I've been working through looking at adopting Python 3, and I've been utilizing the -3 flag to help idenitfy issues with Python 3.\n\nHere's a quick write up I did last week:\n\nhttps://gist.github.com/rowillia/c0feed97c1863b2d8e5a3ed73712df65\n\nThe -3 flagged a few issues in protobuf worth fixing, namely around eq shadowing hash in PY3.\n\nFixing these issues will help make the -3 flag less noisey for folks running protobuf in production.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mickeyreiss": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2214", "title": "Add lossy64BitNumberRepresentations option to JsonFormat.Printer", "body": "Here's my WIP for addressing #1823. @xfxyjwf let me know if you'd be interested in accepting this or something similar, and I'd be happy to clean it up/fix tests, whatever it takes.\n\nI don't love this change on principle, but it will help my organization out with backwards compatibility.\n\nThanks!\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pcj": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2198", "title": "Adds a new import-mapping option to the js_generator.", "body": "This option is directly modeled after protoc-gen-go's ImportMap\n'Mfoo=bar' option, adapted for use in a commonjs context.  It enables\nthe caller to provide override values for 'require()' statements in\ngenerated code.  For example,\n'--js_out=Mexample/foo.proto=example-foo:outdir/ would generate\n`require('example-foo')` instead of `require('./example/foo_js.pb')`.\nMultiple 'M' options are allowed.\n\nThe main use case is to permit the use of module-names rather than\nfilenames for required files, allowing users to use the more flexible\nmodule loading schemes in lieu of hardcoded filenames.\n\nIt also fixes #1745 and provides a workaround for #1746.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "spacetourist": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2158", "title": "Update README.md", "body": "PHP specific links aren't up at this time\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vidbina": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2131", "title": "Added Dockerfile", "body": "The Dockerfile should provides an env that contains all deps. This should simplify setup for dev and test purposes.\n\nShall we setup an automated build for this on Docker hub?\n\n[![](https://images.microbadger.com/badges/image/vidbina/protobuf.svg)](https://microbadger.com/images/vidbina/protobuf)\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mazurkin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2121", "title": "issue-2108 [protoc/Java] Excessive copying on buildPartial()", "body": "Pull request for issue-2108: https://github.com/google/protobuf/issues/2108\n\nThe build() method call time is too high if a bean has too many fields and only some of these fields are set. \n\nThe reason of that because filed copying are outside bit check condition which differs from merge() method which is reverse for build().\n\nI see no any reason why someone really wants uninitialized fields to be copied on build()\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "miumok98": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2120", "title": "3.0.0 beta 4", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mjmdavis": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2118", "title": "Warn when objectivec compiled with ARC", "body": "Add an error and an explain how to fix it when objectivec generated files are compiled with ARC.\n\nThis could save some people a bit of time working out how to use this in their ARC enabled projects.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "khingblue": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/2065", "title": "Use global namespace to avoid ambiguity.", "body": "This aligns with other codes in ProtoBuf, for example:\n\n```\n::std::pair<bool, const uint8*>\nconst ::std::string& Any::type_url()\n```\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dmap": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1972", "title": "Add mechanism to allow runtime resolution of Any messages by their full type URL", "body": "Add an extension mechanism to the JsonFormat TypeRegistry so that callers can provide their own implementation to resolve Any message descriptors using the full type URL.\n\nThis extension comes in the form of a new `TypeResolver` interface, implementations of which can be supplied to a `TypeRegistry` to resolve the message Descriptor using the full type URL if the descriptor is not found in the registry's types map.\n\nThis gives users of the JsonFormat class the chance to actually resolve Any messages that utilise custom URL prefixes and dynamic resolution mechanisms.\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/1929", "title": "Update TextFormat to handle unknown Enum values", "body": "Currently `TextFormat.java` (and presumably the equivalent implementation in other languages) does not handle unknown enum values at all well.  When printed they produce a string value `UNKNOWN_ENUM_VALUE_NestedEnum_XXXX` which cannot then be parsed again.  So a perfectly valid proto3 message with an unknown enum value cannot be round tripped to a string a back again using `TextFormat`.\n\nI have updated the java `TextFormat` implementation to instead handle unknown Enum values in precisely the same way as they are handled by the `JsonFormat` implementation i.e. they are printed as simple number values and parsed successfully back to unknown Enum values for proto3 messages.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lukewink": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1952", "title": "Fixed wrong package being exported", "body": "The correct package is com.google.protobuf.nano\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Triztian": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1918", "title": "Exports `jspb.Map`; fix for Issue #1885", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "koubaa": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1839", "title": "Remove redundant symbol", "body": "Hello,\n\nMy organization is trying to begin using protobufs.  This PR is for a compilation issue that appears to be a bug in MSVC.  We include a header file (foo.h) that contains the lines:\n\nclass Element;\ntypedef class Element Element;\n\nWe are not at liberty to change this file and find a compilation error at the line which this PR changes.   The compiler error is as follows:\n\n> Protobuf\\3.0.0.b4\\cpp\\include\\google/protobuf/repeated_field.h(284): error C2027: use of undefined type 'Element'\n> 1>          path\\to\\foo.h(630) : see declaration of 'Element'\n> 1>          Protobuf\\3.0.0.b4\\cpp\\include\\google/protobuf/repeated_field.h(279) : while compiling class template member function 'void google::protobuf::RepeatedField<Element>::InternalDeallocate(google::protobuf::RepeatedField<Element>::Rep *,int)'\n> 1>          with\n> 1>          [\n> 1>              Element=google::protobuf::int32\n> 1>          ]\n> 1>          Protobuf\\3.0.0.b4\\cpp\\include\\google/protobuf/repeated_field.h(1298) : see reference to function template instantiation 'void google::protobuf::RepeatedField<Element>::InternalDeallocate(google::protobuf::RepeatedField<Element>::Rep *,int)' being compiled\n> 1>          with\n> 1>          [\n> 1>              Element=google::protobuf::int32\n> 1>          ]\n> 1>          caerep.property.pb.h(128) : see reference to class template instantiation 'google::protobuf::RepeatedField<Element>' being compiled\n> 1>          with\n> 1>          [\n> 1>              Element=google::protobuf::int32\n> 1>          ]\n> 1>Protobuf\\3.0.0.b4\\cpp\\include\\google/protobuf/repeated_field.h(284): error C2273: 'function-style cast' : illegal as right side of '->' operator\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "FredericJacobs": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1817", "title": "Add automake and libtool to the requirements.", "body": "Building without those dependencies fails on macOS. Added Homebrew instructions to install those dependencies.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cceckman": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1768", "title": "Add canonical Bazel workspace name.", "body": "c.f. google/protobuf#1767\n\nI didn't run buildifier on this because it produced a bunch of (ordering) diffs in other rules, and I wanted to keep this constrained.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "flatline": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1750", "title": "Remove arbitrary \"proto.\" namespace prefix for generated js", "body": "There is likely more that can be done to rectify this issue, but this was a simple fix to make package names match more or less what one would expect in the other generated languages such as C++.  There is a related issue in that passing a namespace_prefix overrides all generated namespaces, so that cross-namespace proto imports result in invalid generated code if the parameter is present.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "warrenfalk": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1694", "title": "Fix #1682 by adding CopyTo() overload to copy a subset of the byte array", "body": "Fix for #1682, adding a simple overload of CopyTo() which provides a mechanism for copying a subset of the byte array instead of the whole thing.\n\nAlso added test cases for overload and original implementation.\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/1687", "title": "Fix #1686: use $(SolutionDir) in csharp project instead of relative path", "body": "Use `$(SolutionDir)` in csharp project instead of assuming that solution is in parent directory.\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/1329", "title": "fix index out of range error in C# generation using msvc", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "abigailbunyan": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1670", "title": "Fix GoogleOnceInit signature discrepancy", "body": "When `GOOGLE_PROTOBUF_NO_THREAD_SAFETY` is defined, `GoogleOnceInit<Arg>` has a different signature than it otherwise would. This means that the repository cannot currently be built with that preprocessor definition. This fixes building by correcting the function signature.\n\nFixes #548\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tberghammer": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1668", "title": "Fix some unused parameter warnings", "body": "These files are included from the generated proto header files so they\nwill generate warnings for each user and preventing them from compiling\nwith -Werror.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yeswalrus": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1667", "title": "CMake Fix WITH_ZLIB", "body": "Examples currently fail with unknown target ZLIB::ZLIB when protobuf is built using protobuf_WITH_ZLIB.\n\nThis fix causes the examples to search for ZLIB when the above flag is set.\n\nParticularly helpful in conjunction with #1665 \n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/1656", "title": "CMake code generator function", "body": "Adds a documented, extensible function for generating source files from .proto files with simpler syntax than the legacy alternative.\n\nIn CMake 3+, takes advantage of the target_sources command to add the generated sources to a given target automatically. Otherwise appends to the given source file list.\n\nOptions are provided and parsed using cmake_parse_arguments rather than setting global variables.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/1654", "title": "CMake crosscompiling support", "body": "Adds support for cross-compiling to the config package.\n\nAdds 2 new import targets, protobuf::protoc-target and protobuf::protoc-host.\nBy default, they are both duplicates of the protobuf::protoc target.\n\nIf the user sets protobuf_PROTOC_HOST_LOCATION (marked as advanced when not cross-compiling), protobuf::protoc and protobuf::protoc-host are both redirected to point at the provided path, while protobuf::protoc-target will point at the version of protoc provided by the target library.\n\nThe protobuf_PROTOC_HOST_LOCATION  is verified by running `${protobuf_PROTOC_HOST_LOCATION} -version` and checking that the output meets the minimum required protoc version.\n#1609 Allows for #1585 to be resolved, but this does so in a more elegant (if non-standard) fashion.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "finap": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1660", "title": "Fix return type of the DeleteMapValue(const MapKey& map_key) function", "body": "The function fixed return value from size_type to bool.\nThe \"Map::erase(const key_type& key)\" function return type of size_type but the \"MapField<Key, T, kKeyFieldType, kValueFieldType, default_enum_value>::DeleteMapValue(const MapKey& map_key)\" function return type of bool.\n\nI use to Map for the proto message in UnrealEngine4 C++ project on Windows Platform.\nBut This project does compile to build error in Warning 4800.\nBecause the way UnrealEngine4 engine code is written about \"#pragma warning (error: 4800)\".\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "thesamet": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1650", "title": "Fix some deprecation warnings introduced in 3.0.0-beta-3", "body": "Replace writeRawVarint32 with writeUInt32NoTag.\nReplace computeRawVarint32Size with computeUInt32SizeNoTag.\n\nAddresses #1596\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "little-dude": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1590", "title": "python: remove extra dependencies for python 2.7", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "eiderman": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1539", "title": "Allow Python Protobufs to work with numpy int32/float", "body": "This change allows Python protobufs to accept any numeric type that follows the python numbers protocol. It also speeds up adding items to arrays.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Julia-Win": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1536", "title": "Revert \"Test redundant varint fields decoding in JS.\"", "body": "Reverts google/protobuf#1529\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "petewarden": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1500", "title": "Fixes for TensorFlow compilation and running problems", "body": "These are the changes I've found necessary to successfully build and run the top-of-tree protobuf with TensorFlow. I don't understand the intricacies of the Python importing changes, those fixes come from empirically trying different import paths until I found one that worked!\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jmuk": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1486", "title": "[Ruby] Add empty descriptor.rb", "body": "Google::Protobuf::Descriptor and related classed are defined\nin the C module, if the proto file imports\n'google/protobuf/descriptor.proto', the generated rb file\nstill contains a line of requiring 'google/protobuf/descriptor'\nwhich causes a LoadError.\n\nSince we don't need any additional definitions but want to\nprevent the laod error, simply an empty file is just fine.\n\nThis fixes #1481\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kkwteh": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1468", "title": "Option to preserve json field names for Python.", "body": "Mainly, I would just like some way to be able to preserve field names when going back and forth between protobuf messages and JSON. If this PR isn't appropriate, could you suggest some other way this feature might be implemented?\n\nCurrently field names are converted to and from camel case when converting protobuf message to JSON. This pull request adds an option to preserve the field names during the conversion process.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Photonios": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1448", "title": "Added options to CMake configuration to enable/disable certain compilers", "body": "Added option to enable/disable support for certain language compilers in `protoc`. This allows the user to disable support for compilers that they don't need. Most people will never need this. However, there's a group of users out there (myself included) who have Protobuf as a subtree in their repository and compile it from source every time (similar to how Chromium does this for third party dependencies). Disabling support for certain compilers reduces compile time.\n\nBy default, support for all languages is compiled. The following options have been added to the CMake configuration:\n\n```\n option(protobuf_WITHOUT_CPP_COMPILER \"Build without C++ compiler support\" ON)\n option(protobuf_WITHOUT_JAVA_COMPILER \"Build without Java compiler support\" ON)\n option(protobuf_WITHOUT_CSHARP_COMPILER \"Build without C# compiler support\" ON)\n option(protobuf_WITHOUT_OBJC_COMPILER \"Build without Objective-C compiler support\" ON)\n option(protobuf_WITHOUT_JAVANANO_COMPILER \"Build without Java Nano compiler support\" ON)\n option(protobuf_WITHOUT_JS_COMPILER \"Build without JavaScript compiler support\" ON)\n option(protobuf_WITHOUT_PYTHON_COMPILER \"Build without Python compiler support\" ON)\n option(protobuf_WITHOUT_RUBY_COMPILER \"Build without Ruby compiler support\" ON)\n```\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nmittler": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1436", "title": "include java_doc_comment.h in distribution", "body": "Fixes #1435\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/1140", "title": "Converting to JUnit4.", "body": "Also cleaning up a ton of warnings in the test code.\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/868", "title": "POC: Supporting zero-copy for writing", "body": "Added an Encoder interface implemented by CodedOutputStream and the\nnew ZeroCopyEncoder. Added an UnsafeByteString that wraps around a\nByteBuffer and allows access to the underlying buffer.\n\nCreated a JMH EncoderBenchmark that creates a simple protobuf initialized\nwith 10 ints, 10 small strings, and 10 small ByteStrings, as well as one\nByteString that varies in size between tests (SMALL=10, MEDIUM=1KB,\nLARGE=100KB, JUMBO=10MB). I also vary the internal buffer size used by\nboth encoders (SMALL=1KB, MEDIUM=4KB, LARGE=8KB).\n\n<!-- Reviewable:start -->\n\n[<img src=\"https://reviewable.io/review_button.png\" height=40 alt=\"Review on Reviewable\"/>](https://reviewable.io/reviews/google/protobuf/868)\n\n<!-- Reviewable:end -->\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/13687859", "body": "You mean creation of the `ByteBuffer`? Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/13687859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/13687872", "body": "You mean that I should get rid of the internal buffer altogether and write directly to Writer?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/13687872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/13687879", "body": "done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/13687879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/13688565", "body": "done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/13688565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "mjsteger": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1429", "title": "Fix delete_if for repeated_field, tests for same", "body": "delete_if was under the define_array_wrapper_method's, but this made it not evaluate blocks passed in correctly(as it would return an enumerator, and never reach evaluating the block), which is contrary to\nhow delete_if is implemented for arrays\n\nLet me know if you have any questions/tweaks.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xyzzyz": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1367", "title": "Remove static initializers from Status class.", "body": "Statically initialized Status objects are replaced with POD types, and\nan implicit conversion constructor is added to create Status instance\nfrom these.\n\nThis will result in an extra constructor call when using Status::OK and friends, and I'm not sure if this is desirable. Additionally, I think StatusPod type should be in a separate namespace, as I'm not sure we want to expose it as a part of protobuf interface.\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cgull": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1333", "title": "Replace ancient m4/acx_pthread.m4 with m4/ax_pthread.m4", "body": "This is a notional PR illustrating an issue we're having with Mosh on debian-sid; the root cause seems to lie with protobuf (though there are at least two bugs/changes elsewhere in the build chain that also contribute).\n\nProtobuf uses the very old, obsoleted-in-2009 `ACX_PTHREAD` macro to detect pthread libraries and set variables appropriately.  On Debian Sid (and probably nearly any modern Linux distro), `pkg-config --libs protobuf` returns `-lprotobuf -pthread -lpthread`.  Usage of `-lpthread` has been deprecated for a long, long time, but protobuf has been getting away with it until now.  Something has recently changed in sid's build toolchain or binutils or glibc so that the oddly-placed `-lpthread` combined with Mosh's aggressive full-RELRO hardening causes a failure in symbol resolution elsewhere in Mosh, causing `mosh-server` to segfault on an unresolved PLT entry for fork() at runtime.  By adopting the newer `AX_PTHREAD` macro from autoconf, we get a more-correct `-lprotobuf -pthread`, and mosh is happier.\n\nSee mobile-shell/mosh#727 and https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=817929 for much more discussion on the issue.\n\nI have no idea what the best path for protobuf's maintainers to fix this is, but this PR should illustrate the problem nicely.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bsilver8192": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1310", "title": "Expose a method to list only the extension fields", "body": "This is much faster than ListFields. ListFields was a performance\nbottleneck for my code.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gongsu832": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1293", "title": "Define all atomic functions for Atomic64 in atomicops_internals_generic_gcc.h", "body": "Hi, I was compiling on Linux s390x (IBM mainframe) and was getting undefined references to some atomic functions. It turns out that the #ifdef **LP64** part of atomicops_internals_generic_gcc.h doesn't have all the atomic functions defined for Atomic64. I added them and now the compilation finishes successfully and passes all 6 tests in \"make check\".\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gjasny": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1261", "title": "Disable thread local storage for OSX < 10.7", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "redivo": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1250", "title": "configure.ac: check if libatomic is needed", "body": "Compilation of protobuf for PowerPC and SPARC may fail due to missing\nreferences to __atomic_fetch_add_4 and __atomic_compare_exchange_4.\n\nThe __atomic_*() intrinsics for all sizes are provided by libatomic when\ngcc is >= 4.8. This can be achieved by adding this to configure.ac:\n\n```\nAC_SEARCH_LIBS([__atomic_fetch_add_4], [atomic])\n```\n\nSigned-off-by: Carlos Santos casantos@datacom.ind.br\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "il9ue": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1234", "title": "arena : add func to detect size_t overflow fast", "body": "Added `size_t` overflow check inside `NewBlock func`. Check if  `n` and `kHeaderSize` are overflowed before `size = kHeaderSize + n`\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "eyolfson": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1222", "title": "Remove const from AttachComments", "body": "AttachComments transitively modifies the location_ field. The location_ pointed to is used in the class and represents modified state in a const method, which may cause surprising results to callers.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bramp": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1182", "title": "Added the test_name to the Conformance Request.", "body": "This makes it easier to match up the failing test to their corresponding protobuf.\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "johnpmayer": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1181", "title": "Small documentation addition to building Visual Studio solutions", "body": "Add additional instructions for using different versions of Visual Studio\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "McDjuady": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1082", "title": "Fixed an issue where packageless protos would generate invalid java code (Fixes issue #891)", "body": "The old code always assuemd a dependency would also have a package. If this was not the case it would produce invalid java code in the form of\n\n``` java\n .{dependency}.getDescriptor()\n```\n\nThe new code checks if the dependency has a package and if not ommits the dot at the beginning\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "murgatroid99": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1074", "title": "Include protoc in Ruby Gem", "body": "This would make it so that a ruby user will have a one-step installation process to get both the ruby protobuf runtime and `protoc`. This would build protoc in the gem installation process, and expose it as `protoc.rb` (to avoid conflicting with any existing installation).\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stoneStyle": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/1012", "title": "Merge pull request #1 from google/master", "body": "sorry, not familiar with git , may be click a wrong button \n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "benbennett": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/987", "title": "Added a quicker way to build visual studio solution.", "body": "The command also works for other cmake generators\nbut needs tweeks to the --config /--target for respective generator.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "y-higuchi": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/951", "title": "javanano seems to be exporting wrong package", "body": "javanano is configured to export package com.google.protobuf, but it probably should be com.google.protobuf.nano\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wankai": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/928", "title": "change SourceTree to pure virtual", "body": "as TODO says, we'd better make SourceTree pure virtual.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mwildehahn": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/916", "title": "Support specifying the indent level when json dumping protobufs", "body": "I didn't keep the default of identing by 2 because I don't think its necessary.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mintyc": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/898", "title": "Hide unreferenced formal parameters to suppress warnings", "body": " (allows quiet build of apps using protobuf on VS2015 at warning level 4)\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aahlenst": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/887", "title": "Silence VS code analysis", "body": "Tools like StyleCop or StyleCopAnalyzers inspect the C# code generated by protoc (and show lots of warnings) if the generated files do not have an `<auto-generated>` header. I've changed the code generator so that such a header is generated. Example:\n\n```\n//------------------------------------------------------------------------------\n// <auto-generated>\n//     Generated by the protocol buffer compiler. DO NOT EDIT!\n//     source: contact.proto\n// </auto-generated>\n//------------------------------------------------------------------------------\n```\n\nThe style matches the headers that are generated by Microsoft tools like [DataSvcUtil](https://msdn.microsoft.com/en-us/library/ee383989%28v=vs.110%29.aspx).\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zrlk": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/858", "title": "Add support for annotating generated code", "body": "This changelist provides support for linking generated\ncode back to the generating .proto files. It does this\nwith a new message, GeneratedCodeInfo, that contains a\nlist of Annotations. An Annotation connects a range of\ngenerated source text to a logical path (the same path\nas is used in SourceCodeInfo) inside a filename-identified\nsource .proto.\n\nThis changelist extends io::Printer by adding the\ncapability to annotate its output. It does this by keeping\ntrack of the offsets into which substitution variables\nwere expanded after the last call to Print. For example,\nin EnumGenerator::GenerateDefinition:\n\n```\n  printer->Print(vars, \"enum $enumbase$ {\\n\");\n  printer->Annotate(\"enumbase\", descriptor_);\n```\n\nthe call to Printer::Annotate will create a new Annotation\nmessage that links the text range corresponding to the enum's\nname to the EnumDescriptor's path and defining file.\n\nThe GeneratedCodeInfo message is associated with an\nactual generated code file via a target-specific mechanism.\nFor C++, this changelist adds the annotate_headers flag\n(which enables writing the message for a .pb.h file to\na corresponding .pb.h.meta file) and the annotation_pragma_name\nand annotation_guard_name flags. These flags insert a\nguarded block into the .pb.h that looks like:\n\n```\n  #ifdef GUARD_NAME\n  #pragma pragma_name \"examples/addressbook.pb.h.meta\"\n  #endif  // GUARD_NAME\n```\n\nfor an invocation of the form:\n\n```\n  protoc --cpp_out=annotate_headers=true,annotation_pragma_name=pragma_name,annotation_guard_name=GUARD_NAME:tmp\n```\n\nThis allows tools that digest the generated code to tie the knot\nwith the original .proto files by matching up .proto file paths\nand Annotation paths with corresponding SourceCodeInfo paths.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "PetteriAimonen": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/811", "title": "Add protoc's search path to the plugin API.", "body": "ProtoC automatically searches for include files in the path\ngiven by -I command line option. Only the file name is given\nto the code generator plugins, not the full path.\n\nThis is fine in itself, but in order to find the actual file\nfor further analysis (e.g. custom formatting, comment or options processing)\nin a generator plugin, it needs to know the search path used\nby protoc. This commit adds that informaion to CodeGeneratorRequest.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "murraystokely": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/782", "title": "Add support for setting the unknown field and unknown enum behavior in text parsers.", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "thughes": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/712", "title": "Optionally build the protoc executable.", "body": "This is useful for platforms such as iOS and android where we don't run\nprotoc.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pbor": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/687", "title": "Fix compilation with older gcc", "body": "This fixes https://github.com/google/protobuf/issues/533\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stepancheg": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/676", "title": "Optimize CodedInputStream.readByteBuffer() for LiteralByteString", "body": "With this patch applied `CodedInputStream.readByteBuffer()` returns\n`ByteBuffer` wrapping array contained in `LiteralByteString`.  To\nensure that `LiteralByteString` is not modified, returned buffer\nis made readonly with `.asReadOnlyBuffer()` operation.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ennerf": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/545", "title": "JavaNano: improved encoding performance", "body": "Pull request for fixing #511 \n\nI've modified writeStringNoTag to work on byte[] and reverted writeRawLittleEndian32 to what it used to be. Note that I've left all the behavior the same as before, but I believe that the position() getter is a bit odd.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/187", "title": "Added accessors for nested messages in Javanano", "body": "This adds accessors for nested messages so that references can be kept in order to reduce garbage. This addresses Issue #167. \n\nNote that this changes the default behavior and breaks backwards compatibility. How do you normally handle this? Would this go into a separate branch first?\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "callpraths": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/513", "title": "protoc: Add options to redirect input/output to files.", "body": "When using protoc to encode/decode protobufs, the input/output was from\nstdin/stdout only. This patch adds command line flags to specify files to read\nthe protobuf from and and write the encoded/decoded protobuf to.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/485", "title": "Put .cs files into directories based on packages.", "body": "I expect you're still doing work around this area; this is a minimal-ish change that allows me to move forward with testing C# support.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cfallin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/409", "title": "Basic support for \"user-defined types\" in Ruby.", "body": "This PR is meant for discussion; probably DO NOT MERGE as-is.\n\nThis commit adds a notion of a \"UDT\", or \"user-defined type\", to the\nRuby C extension. A UDT is defined by a set of hooks attached to a\nmessage type, and it overlays a notion of \"user value\", an arbitrary\nRuby value, over the \"wire type\", or actual protobuf message that is\nbeing wrapped. When a UDT is parsed, a user-defined parse-time hook is\ninvoked that converts the wire type to the user value, and the user\nvalue is then the only value stored in memory. It is seen by and can be\nmanipulated by the user as desired. (A \"verify hook\" is invoked whenever\nthe user sets a UDT-typed field to a new value so the UDT implementer\nmay also enforce strong typing.) Finally, at serialize time, a\nuser-defined serialization hook is invoked to convert the user value\nback to a wire-type message that is then serialized to the wire.\n\nThe intent is for UDTs to serve as the basis for Well-Known Types\n(WKTs), as added in proto3. We should implement the UDT API in the JRuby\nextension as well, and then define UDT handlers for Date/Time, primitive\nwrappers, etc.\n\nThe implementation works by actually storing user values in VALUE slots\nwhere message references would have gone, and adding a\npost-parse/pre-serialize pass that converts all pointers in the message\ntree. The separate-pass approach is necessary at least at parse time\nbecause submessages may be amended by wire data an arbitrary number of\ntimes, so (for example) a streaming implementation that converts as soon\nas a submessage ends would not be sufficient: the user hook must see the\nentire submessage as it would be at the end of the parse. (Map fields\nare handled a little differently now, and we may want to refactor that.)\n\nBecause of the pre-pass at serialize time, a message deep copy is\nrequired whenever any UDT fields are transitively present anywhere in\nthe message tree. This is suboptimal, and a deeper integration into the\nserialization routines would avoid this, at the cost of additional\ncomplexity. The copy is at least avoided unless UDTs are introduced.\n\nAlso: modified RepeatedField and Map so that `nil` cannot be added when\nthe value type is a message type. This should have already been the case\nalready, but we had not implemented this typecheck.\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"35\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/google/protobuf/409)\n\n<!-- Reviewable:end -->\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/65875151", "body": "Ping @googlebot: made my Google org membership public, retry?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65875151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65879776", "body": "Ping @googlebot, CLA fixed now?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65879776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/10128970", "body": "Responded in issue #234. For proto3, this is correct: only message fields have `has_...()` methods. This was an intentional design decision by the proto3 design team. Note a few lines up that for proto1/proto2, all fields have `has_...()` methods.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/10128970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21410939", "body": "Done, thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21410939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21631926", "body": "Yes, PR coming for this.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21631926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22567094", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22567094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22567100", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22567100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22567106", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22567106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22567202", "body": "Proto3 behavior is that if the key or value is missing, it takes on its default value (i.e., consistent with the value that the field should have if the map-entry submessage were just an ordinary message). The `native_slot_init` calls above start the map-entry frame in that state, so I think this is what we want.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22567202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22567207", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22567207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22567279", "body": "Good catch! The code is actually just moved from the old handler setup, not modified in this PR, and works (and previously worked) -- I think because the `upb_handlers_setstartsubmsg` in the MESSAGE case below is harmless if called on a string field. Fixed, of course!\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22567279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22567340", "body": "Added some more explanatory text to this effect.\n\nOne of the reasons to use strtable here rather than a Ruby Hash object is that it allows us to use the `native_slot` abstraction (also used for singular and repeated fields), so the type-conversion (wrapping/unwrapping) and type-checking code is shared across all container types. Admittedly the key conversion code is more complex than I would like, though.\n\nI'm open to refactoring if we decide we'd rather simplify the implementation here.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22567340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22567383", "body": "Your last point (copy vs. reference semantics) is I think a reasonable argument for not supporting this case, although arguably, if the user explicitly passes a `RepeatedField` or `Map`, they know what they're doing. For simplicity I'll keep the uniform all-ctor-args-are-copied-from-native-Ruby-types for now and we can always add this support later.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22567383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22751076", "body": "I poked a bit at this but it seemed more complex and error-prone to construct a string of Ruby code than to just do the work in C. Totally agree that in principle it should be a simple layering, but I think in practice this is not too bad.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22751076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22751316", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22751316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22751329", "body": "Great idea, much simpler this way! I'm not sure why I didn't do this refactor previously.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22751329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22751351", "body": "Also a great point -- I missed this obvious re-use case. Fixed here and below for the integer/bool types.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22751351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22751360", "body": "Added a comment to this effect.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22751360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22751376", "body": "Trying to be overly-generic, I suppose -- removed and replaced with the constant at its two call-sites.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22751376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22751380", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22751380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22751405", "body": "Fixed this manually here and will send the change on the upb side as well (this is just the amalgamated source).\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22751405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22834075", "body": "I think that we actually do need `typeclass_references` -- the reason is that each `Descriptor` is rooted separately in the def --> Ruby object global map, and a given descriptor refers to its fields' typeclasses only on the upb side, not on the Ruby side. For now we would be fine because the global map is never trimmed, but if in the future we turn it into a true cache with eviction, we would be in trouble. (RepeatedField and singular fields don't run into this issue because they dynamically look up the typeclass when they need it via that global map.)\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22834075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22834224", "body": "This API is meant to be consistent with the field builder methods in the message definition DSL and with RepeatedField's constructor. We could switch these all to recognize classes (or strings, for pre-finalized build blocks) but to me that feels a little less consistent. It's also less visually distinct whether the field is an enum or message field. (Arguably the proto IDL also has that issue, but...) In practice, the user probably won't touch this constructor, so I think it's probably OK?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22834224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22834333", "body": "Excellent point! Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22834333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22834337", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22834337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22834346", "body": "Done (shallow-copied).\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22834346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22834349", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22834349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22834353", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22834353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22897798", "body": "Done (and others in this file). Sorry about that!\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22897798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22984627", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22984627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22984660", "body": "Renamed to `oneof_case_num` as a more fitting (IMHO) name, and made comments clearer.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22984660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22984726", "body": "C++ does create a separate ID space -- field indices into the oneof -- but it also exposes `[oneof_name]_case()` to the user, so the IDs may matter a bit more. We only use this internally, and never iterate through the space, so any number that is unique per field will do, I think, and absent any other requirements, it seems simpler to just use the tag number that's there? (Field index would also do just as well.)\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22984726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22984749", "body": "Done, thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22984749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23556651", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23556651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23556656", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23556656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23556856", "body": "In principle, I agree, but \"very few\" != \"none\", and a \"oneof case offset field size\" field in the descriptor would add additional complexity (and descriptor overhead). Yes, it would be per message type rather than per message instance, but I'm not sure the additional complexity is warranted... for what it's worth, the C++ implementation also just uses a uint32.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23556856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23556867", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23556867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23567696", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23567696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23567787", "body": "Excellent catch. I've simplified this based on the guarantee provided by `native_slot_set()` (not explicitly documented before) that all calls into the Ruby VM occur before the memory slot is altered. Based on this, we can set the oneof case immediately after `native_slot_set()` returns and be guaranteed that from the point of view of the Ruby VM, both the memory slot and the oneof case change atomically. Added a comment to explain.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23567787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23567995", "body": "Based on my understanding (from the generated C++ code), repeated instances of a oneof string field on the wire are parsed such that the last value wins; they are like singular (`optional`) fields in that regard. Repeated instances of a oneof submessage field on the wire are parsed such that, as long as no intervening other member of the same oneof occurs on the wire, submessage contents are merged together. They are also like singular (`optional`) fields in that regard.\n\nI'm not sure whether the original C++ implementation was explicitly based on these principles or if that's just the way it fell out, but I am guessing we should match it here :-)\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23567995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23958335", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23958335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23958350", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23958350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23958357", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23958357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23958374", "body": "Done -- took the latter approach.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23958374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23959521", "body": "Missed that one, sorry! Grepped for `oneof_case` and I don't think there are any more literal zeroes. Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23959521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24702718", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24702718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24708183", "body": "Careful! If `Element::~Element()` is not visible to the compiler, it implies a memory barrier, so the `old_rep->elements` fetch is not loop-invariant, so it can't be hoisted out of the loop. That's the reason for the `e` and `limit` pointers pre-computed above the loop. This code is _very_ sensitive for both code size and performance, so please verify equivalent machine code for types with nontrivial destructors.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24708183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24708245", "body": "(And to be clear, when I say \"memory barrier\" I mean \"barrier across which loads/stores can't be moved\", not a true hardware barrier.)\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24708245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22561997", "body": "Can we move this file to the jruby directory, as it's jruby-extension-specific?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22561997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22562017", "body": "Avoid long lines (wrap at 80 columns if possible)?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22562017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22562122", "body": "In the MRI extension we use an instance variable name without the leading \"@\", so that it's inaccessible from Ruby code -- can we do the same here?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22562122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22562202", "body": "Leftover debugging println?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22562202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22562338", "body": "Let's remove this debugging println as well -- the Ruby exception should be sufficient.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22562338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22562360", "body": "As a general comment -- can you put the copyright header at the top of each *.java file?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22562360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22562385", "body": "add call-seq documentation for resolve too?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22562385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22562404", "body": "add call-seq documentation for descriptor here.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22562404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22562485", "body": "The date here is in DD/MM/YY while the others are MM/DD/YY :-)\n\nCan we actually remove these \"Created by...\" comments? We totally give you credit and appreciate the huge contribution here but we usually don't have individual authorship comments on new classes that we add.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22562485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22562576", "body": "Add the call-seq documentation to all of the methods here?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22562576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22562690", "body": "The C extension returns an integer hash code, I think -- why return a hex string here?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22562690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22562940", "body": "Create only one newString(\"=\") object to reduce GC churn? Or even better, create a static string \"=\" and use it here?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22562940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22562984", "body": "Instead of printing the stack trace to the console, can we throw a Ruby exception here?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22562984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22563001", "body": "Likewise, re-throw a Ruby exception.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22563001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22563075", "body": "\\\"UTF-8\\\" or \\\"ASCII\\\" (insert the two extra quotes)\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22563075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22563898", "body": "Any reason for returning `this` rather than `nil`? In normal usage these methods shouldn't be chained -- the user just calls them in succession from the block given to add_message -- so I'd rather match the MRI extension's behavior here.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22563898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22563956", "body": "Is this a stale TODO? It seems you do this check above (getting the typeclass), unless I misunderstand the comment...\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22563956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22563998", "body": "This seems to be missing the type-checking behavior that the MRI extension has?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22563998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22564012", "body": "Likewise, typecheck the elements here.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22564012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22564102", "body": "Why are you adding 2^64 here?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22564102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22564159", "body": "You're doing some twos-complement magic here and it definitely needs a few comments to explain how you're encoding the values.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22564159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22610751", "body": "I see, I understand better what you're doing -- you're encoding a uint64 into an int64 -- but I think floating-point addition is the wrong way to go about this, as it's not bit-precise (a double has only 53 bits of mantissa, so you're losing 11 bits of precision). I think the right way is to use the `newBignum()` override that takes a `java.lang.BigInteger`, convert the `Long` into a `BigInteger` first, and add a `BigInteger` value that is 2^64 (you can construct one such value statically and use it for every call to this method).\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22610751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24547406", "body": "We shouldn't be modifying the checked-in generated-code -- actually this causes a failure of the Ruby code generator test (it's a golden file for comparison). Perhaps, as part of the temporary change, make a copy (generated_code_java.rb) and `require` one or the other from the test based on the platform?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24547406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24844820", "body": "Fix TODO?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24844820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24846510", "body": "Can you add some more detail here about running the tests under JRuby? We're trying to make the READMEs for each language detailed enough so that people without familiarity with each language's build system and tools can at least run the tests and generate a release. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24846510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24846616", "body": "Any particular reason for s/Int64/Int65/ ? It seems like a leftover from earlier changes?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24846616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "tseaver": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/360", "title": "#333: Don't regenerate protos at installation time.", "body": "Instead, adds a new 'generate_protos' distutils commmand which can be used to regenerate them when needed.\n\nFixes #333.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/62845023", "body": "Failed build:\n\n```\ng++ -DHAVE_CONFIG_H -I. -I..  -I../gtest/include -I../gtest/include  -pthread -Wall -Wwrite-strings -Woverloaded-virtual -Wno-sign-compare -g -DNDEBUG -MT google/protobuf/protobuf_test-drop_unknown_fields_test.o -MD -MP -MF google/protobuf/.deps/protobuf_test-drop_unknown_fields_test.Tpo -c -o google/protobuf/protobuf_test-drop_unknown_fields_test.o `test -f 'google/protobuf/drop_unknown_fields_test.cc' || echo './'`google/protobuf/drop_unknown_fields_test.cc\nIn file included from google/protobuf/drop_unknown_fields_test.cc:36:0:\n./google/protobuf/unittest_drop_unknown_fields.pb.h:49:64: error: \u2018INT32_MIN\u2019 was not declared in this scope\n./google/protobuf/unittest_drop_unknown_fields.pb.h:50:64: error: \u2018INT32_MAX\u2019 was not declared in this scope\n./google/protobuf/unittest_drop_unknown_fields.pb.h:72:94: error: \u2018INT32_MIN\u2019 was not declared in this scope\n./google/protobuf/unittest_drop_unknown_fields.pb.h:73:94: error: \u2018INT32_MAX\u2019 was not declared in this scope\n```\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/62845023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63328148", "body": "[This patch](https://gist.github.com/tseaver/a2f5a26256ab26638afe) fixes `make check` for me\n\nNote that the two header files are checked-in even though generated:  they needed to be re-generated after updating the code-generator.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63328148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63400491", "body": "I've signed both the individual CLA and the corporate one on behalf of my company, Agendaless Consulting, Inc.  @silvolu can confirm that I am currently on contract with Google, working on the https://github.com/GoogleCloudPlatform/gcloud-python project.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63400491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63484585", "body": "I'm +1 on @Kentzo's approach, and would volunteer to help review #66.  As @brettcannon says, avoiding 2to3 is pretty much the \"widely accepted\" best practice for libraries which need to support both Python2 and Python3:  e.g., see Lennart Regebro's excellent [outline of strategies](http://python3porting.com/strategies.html#python-2-and-python-3-without-conversion).\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63484585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63505080", "body": "@mrovner I thought the question was about keeping 2.6 support:  are you saying that we need to ship a protobuf that spans 2.5 through 3.4?\n\nWould bumping a major version to signal dropping 2.5 support while adding 3.x support be reasonable?  Users stuck on Python 2.5 would then stay with `protobuf 2.6.x`, while those who needed Py3k could move to `protobuf 2.7.x`.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63505080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63570263", "body": "@xfxyjwf done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63570263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64993066", "body": "That function should not be encoding literals as `latin` under Py3k, especially since they are going to be immediately decoded as `utf-8`.  Use of  `latin1` in anything but edgiest cases (decoding wonky / unknown data, or encoding for antique wire protocols) is a sign of papered-over trouble:  \"mojibake ahead\", it could read.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64993066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/8546305", "body": "According to http://stackoverflow.com/a/3233069, this needs to be preceded by `#define __STDC_LIMIT_MACROS` for standards-conforming compilers.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/8546305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/comments/16491845", "body": "This commit [breaks installation of `gcloud-python`](https://github.com/GoogleCloudPlatform/gcloud-python/issues/1570).\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/16491845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20477915", "body": "Done in 8b2aafe.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20477915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20510738", "body": "+1.  This kind of alternate block is typical for code which \"straddles\" Python2 and Python3.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20510738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20511079", "body": "I'm not sure why we need the `iteritems` at all, given that we are going to iterate the whole thing.  Even the `copy()` is unneded, as the loop body doesn't mutate the function's locals:\n\n```\nfor key, value in locals().items(): \n```\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20511079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20511152", "body": "Likewise, we can forego the `iteritems` here:\n\n```\nfor extension_name, extension_field in extension_dict.items():\n```\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20511152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20510673", "body": "+1.  Replacing the old, Python2-only 'ez_setup.py' with one from the setuptools bitbucket repo is definitely the Right Thing.  FTR, the permalink for \"latest and greatest\" `ez_setup.py` is:  https://bootstrap.pypa.io/ez_setup.py\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20510673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20511489", "body": "+1 for dropping support for Python < 2.6.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20511489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20512337", "body": "Why not use a bytes literal, given that the PR presumes we are dropping 2.5 support?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20512337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20512370", "body": "Likewise, bytes literals?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20512370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20512402", "body": "Bytes literal?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20512402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20512797", "body": "Would this benefit from using `six.reraise()` https://pythonhosted.org/six/#six.reraise ?  It would require passing in the `exc_type`, `exc_value`, and `exc_traceback`, but would allow preserving the original exception context.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20512797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20512833", "body": "bytes literals?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20512833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20512963", "body": "Use the `google.protobuf.internals.util.PY2`?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20512963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20513093", "body": "As with `cpp_message`, we should be able to just use `items()` instead of dancing around `iteritems()`.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20513093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20513201", "body": "Also, we should just be able to use `io.BytesIO` unconditionally in Python >= 2.6.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20513201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20513229", "body": "`io.BytesIO()`.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20513229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20513280", "body": "Why not `except struct.error as e:`?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20513280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20513414", "body": "bytes literal should be OK.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20513414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20513654", "body": "Is this change related to the Python3 port, or is it just ensuring better coverage of what the testcase name says it is about?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20513654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20513763", "body": "Necessary to support Python3.2, which doesn't have unicode literals.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20513763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20513842", "body": "Bytes literals should be OK.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20513842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20514096", "body": "Shouldn't this be bytes?  `MergeFromString()` and `ParseFromString()` both take serialized data.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20514096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20514246", "body": "`list(range(...))` shouldn't be needed inside `zip()`:  it will iterate the result of `range()` directly.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20514246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20514283", "body": "The `as` form should be preferred.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20514283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20514319", "body": "Bytes literals OK.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20514319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20514800", "body": "`io.BytesIO` should be preferred for Python >= 2.6.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20514800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20515719", "body": "Bytes literals should be OK.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20515719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21842372", "body": "Given that we rely on `setuptools` (boostrapping from `ez_setup.py` if it isn't present), we should be able to use its `find_packages()` rather than enumerating modules by hand.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21842372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28535873", "body": "FWIW, Nick Coghlan (RH employee, core CPython developer) [disagrees](http://www.curiousefficiency.org/posts/2015/04/stop-supporting-python26.html):  he even argues against keeping _2.6_ support.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28535873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28542206", "body": "ISTM to me that any apps conservative to be running on an eight-year old Python version (five years since its last security / bugfix release) should be _happy_ to stick with protobuf 2.6.x:  such developers should be running away from latest-and-greatest protobuf 3.x library.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28542206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "atombender": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/344", "title": "Ruby generator: Use 'require_relative' instead of 'require'.", "body": "This fixes the (bad) assumption that the currently evaluated module's parent directory is in `$LOADPATH` and that `require` thus would be able to resolve dependencies.\n\nNote that I'm not familiar enough with this project to know if `file->dependency(n)`\u00a0actually always returns a relative path. If it does, this will not work, but I can amend the patch if that's necessary.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "enjolras1205": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/252", "title": "add cpp benchmark", "body": "add cpp benchmark. consulted the java version.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vapier": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/235", "title": "protoc: Add options to redirect input/output to files.", "body": "When using protoc to encode/decode protobufs, the input/output was from\nstdin/stdout only. This patch adds command line flags to specify files to read\nthe protobuf from and and write the encoded/decoded protobuf to.\n\nRequest: https://code.google.com/p/protobuf/issues/detail?id=613\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ctiller": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/210", "title": "Fix undefined behavior", "body": "It's undefined behavior to dereference a NULL pointer, even if the value pointed to doesn't get used.\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24707498", "body": "I think you're right: will update.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24707498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "gpshead": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/53639155", "body": "internal/cpp_message.py is a leftover from the previous version that shouldn't exist anymore.\n\nthe code in internal/descriptor.py reads:\n\n  if api_implementation.Version() == 2:\n    from google.protobuf.pyext import _message\n  else:\n    from google.protobuf.internal import cpp_message\n\nwhich should really just be edited to avoid the version check and be \"from google.protobuf.pyext import _message\".  along will all other version checks using _message vs cpp_message in that file to get rid of cpp_message references all together.\n\nIf you set _both_ of the magic environment variables before any google.protobuf imports, it works:\n\ngreg:~/sandbox/python/protobuf/python$ LD_LIBRARY_PATH=../src/.libs/ PYT\nHONPATH=./ python\nPython 2.7.6 (default, Mar 22 2014, 22:59:56)  \n[GCC 4.8.2] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n> > > from google.protobuf.internal import api_implementation\n> > > api_implementation.Type()\n> > > 'python'\n> > > api_implementation.Version()\n> > > 1\n> > > from google.protobuf import descriptor\n\ngreg:~/sandbox/python/protobuf/python$ LD_LIBRARY_PATH=../src/.libs/ PYTHONPATH=./ python\nPython 2.7.6 (default, Mar 22 2014, 22:59:56)\n[GCC 4.8.2] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n> > > import os\n> > > os.environ['PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION_VERSION'] = '2'\n> > > os.environ['PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION'] = 'cpp'\n> > > from google.protobuf.internal import api_implementation\n> > > api_implementation.Type()\n> > > 'cpp'\n> > > api_implementation.Version()\n> > > 2\n> > > from google.protobuf import descriptor\n> > > descriptor._message\n> > > <module 'google.protobuf.pyext._message' from 'google/protobuf/pyext/_message.so'>\n\nthere is something IMNSHO weird going on with the setup.py and how it builds _message.so and apparently _moves it outside of the build/lib.\\* tree afterwards (WTF?). But given we want to revisit our entire setup.py for this anyways... i expect that to be untangled in the future.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/53639155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54351774", "body": "Blanket Python 3 support was unintentionally listed in these release notes. We need to fix that up for a 2.6.x release.  The code itself is ready with some 2to3 use, the setup.py and deps are not done yet.  Sorry about that!\n\nHere's my summary:\n- Support for Python 3 is _almost_ in place.  Our setup.py does not yet do the right thing for 2to3 conversions with Python 3 but for the adventurous, manually run the following files through 2to3 and it should work in Python 3.3+:\n\nprotobuf/descriptor.py\nprotobuf/internal/cpp_message.py\nprotobuf/internal/decoder.py\nprotobuf/internal/python_message.py\nprotobuf/internal/type_checkers.py\nprotobuf/internal/message_cpp2_test.py\nprotobuf/internal/message_factory_test.py\nprotobuf/internal/message_factory_cpp2_test.py\nprotobuf/internal/message_factory_python_test.py\nprotobuf/internal/message_python_test.py\nprotobuf/internal/message_test.py\nprotobuf/internal/reflection_cpp2_generated_test.py\nprotobuf/internal/reflection_python_test.py\nprotobuf/internal/reflection_test.py\nprotobuf/internal/test_util.py\nprotobuf/internal/text_format_test.py\nprotobuf/message_factory.py\nprotobuf/text_encoding.py\nprotobuf/text_format.py\n\nsetup.py also specifies an external dep on google-apputils needed in order to run the unittests. We need to push out an updated version of that with Python 3 support.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54351774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54352069", "body": "See my comment on https://github.com/google/protobuf/issues/7 with details for what remains to be done for this to work out of the box under Python 3. The setup code hasn't been updated for python 3 yet; the listed files in that issue need running through 2to3 as part of the process.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54352069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "dhirschfeld": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/54084220", "body": "I've submitted the form electronically so we'll see where we go from there...\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54084220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54084995", "body": "There are 2 implementations of `cpp_message`, one in [`internal`](https://github.com/google/protobuf/blob/a21bf2e6466095c7a2cdb991017da9639cf496e5/python/google/protobuf/internal/cpp_message.py) which @gpshead says in issue #2 should have been deleted.\n\nThere's a second implementation in [`pyext`](https://github.com/google/protobuf/blob/a21bf2e6466095c7a2cdb991017da9639cf496e5/python/google/protobuf/pyext/cpp_message.py) which seems to be a lightweight wrapper over the cpp `_message` module which seems to be required because its referenced in [`reflection.py`](https://github.com/google/protobuf/blob/a21bf2e6466095c7a2cdb991017da9639cf496e5/python/google/protobuf/reflection.py#L60).\n\nWithout specifying `cpp_message.py` in thge `py_modules` list neither `cpp_message.py`, _nor the `__init__.py`_ are copied to the `pyext` module hence `_message.pyd` isn't importable in the resulting package. if the second `pyext\\cpp_message.py` module isn't required perhaps the `__init__.py` will have to be specified to force it to appear in the resulting python package\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54084995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58998519", "body": "Is `gtest` available as a git repository in which case you could use a submodule?\n\n...just read your last paragraph! :stuck_out_tongue:\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58998519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "dragonsinth": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/54387312", "body": "Okay, thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54387312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "huahang": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/54397640", "body": "@xfxyjwf \n\nmy bad. it has been submitted as the following pull request:\n\nhttps://github.com/google/protobuf/pull/12\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54397640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54420272", "body": "Great! Thanks!\n:+1: \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54420272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54576145", "body": "@xfxyjwf\n\ndone\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54576145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "estekhin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/54419919", "body": "It is present in the maven central since September 4: http://search.maven.org/#artifactdetails%7Ccom.google.protobuf%7Cprotobuf-java%7C2.6.0%7Cbundle\n\nSeems like it was done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54419919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "brettcannon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/54480744", "body": "Any specific reason for wanting to use 2to3 instead of something like https://github.com/python-modernize/python-modernize to do the transition once?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54480744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54747937", "body": "By unifying the code base to work on both Python 2 and 3 it makes development easier and installation faster (unless you release separate Python 2 and 3 packages). By not having to wait for 2to3 you eliminate a compile step during development. As for installation, you can forgo that step entirely. Plus the coding practices used in converted source is more in line with modern best practices and syntax.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54747937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mrovner": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/54718106", "body": "It says\n\"Modernizes Python code for eventual Python 3 migration. Build on top of\n2to3\"\n\nand it's not apparent why it's better ;)\n\nAlso 2to3 support is in setuptools already.\n\nOn Thu, Sep 4, 2014 at 6:59 AM, Brett Cannon notifications@github.com\nwrote:\n\n> Any specific reason for wanting to use 2to3 instead of something like\n> https://github.com/python-modernize/python-modernize to do the transition\n> once?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/protobuf/issues/7#issuecomment-54480744.\n\n## \n\nThanks,\n--Mike\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54718106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/60406223", "body": "LGTM\n\nOn Thu, Oct 23, 2014 at 4:12 AM, Jakub Stasiak notifications@github.com\nwrote:\n\n> +1, would really like to see this merged\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/protobuf/pull/50#issuecomment-60223820.\n\n## \n\nThanks,\n--Mike\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/60406223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63504292", "body": "Yes, we still have 2.5 clients.\n\nOn Tue, Nov 18, 2014 at 8:53 AM, Ilya Kulakov notifications@github.com\nwrote:\n\n> @xfxyjwf https://github.com/xfxyjwf @mrovner\n> https://github.com/mrovner Do we still need to support Python 2.6 in\n> protobuf 2.6+ ?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/protobuf/pull/66#issuecomment-63503361.\n\n## \n\nThanks,\n--Mike\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63504292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "protobufel": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/54722164", "body": "It must be significant for OSGI uses, for others it's not.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54722164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54930258", "body": "Collections' modCount like? :)\n\nUnderstood!\n\nDavid\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54930258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55072001", "body": "1. Is there any ETA for the fix? This bug renders entire DynamicMessage unusable - any merge, build, clone, parse, etc. methods won't work in the presence of any repeated enum field!\n\nThe bug is a MAJOR one, a showstopper!\n\nThanks in advance,\nDavid\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55072001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55186915", "body": "Nope,  the merge uses setField, and the clone, new builder, and build, and\nthe rest use the merge!\n\nThis is really the showstopper! Update the tests and you'll see it!\n\nAlso, most of the users will care only about the Maven Central, so this\nminor emergency release could be done just for Java there.\nOn Sep 10, 2014 1:12 PM, \"xfxyjwf\" notifications@github.com wrote:\n\n> Sorry, we don't have an ETA for this. It should be fixed in the next minor\n> release which hasn't been scheduled yet.\n> \n> I believe most uses of DynamicMessage still work as we have unit-tests\n> covering DynamicMessage:\n> \n> https://github.com/google/protobuf/blob/master/java/src/test/java/com/google/protobuf/DynamicMessageTest.java\n> \n> Presumably these tests are not failing despite of the bug. In most places\n> we use addRepeatedField()/setRepeatedField() instead of setField() to\n> manipulate repeated fields. Users could use these methods as a workaround\n> as well.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/protobuf/issues/17#issuecomment-55175655.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55186915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55662518", "body": "I think it's a potential security risk; version 2.5.0 had this class final. Just raising question, if it is an oversight.  \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55662518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55834124", "body": "And here is the test for this case:\n\n``` java\n  @Test(expected = NullPointerException.class)\n  public void testPackedEnumFieldInProto() throws Exception {\n    final FileDescriptorProto.Builder protoBuilder = FileDescriptorProto.newBuilder()\n        .setName(\"test1.proto\");\n    protoBuilder.addEnumTypeBuilder()\n        .setName(\"Enum1\").addValueBuilder().setName(\"V1\").setNumber(1);\n    protoBuilder.addMessageTypeBuilder()\n        .setName(\"Message1\").addFieldBuilder().setName(\"field1\").setTypeName(\"Enum1\").setNumber(999)\n        .setLabel(Label.LABEL_REPEATED).getOptionsBuilder().setPacked(true);\n\n    // The buildFrom() will fail, but it shouldn't!\n    final FileDescriptor fileDescriptor = FileDescriptor.buildFrom(protoBuilder.build(), new FileDescriptor[0]);\n  }\n```\n\nor just remove (expected = NullPointerException.class) and see it fail!\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55834124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55834532", "body": "BTW, you're not seeing a lot of problems because the protoc does  a lot of cross-linking/name resolutions in protos for you already, so it gives you nice RESOLVED ones, and a lot of the Java \"build\" stuff, therefore, goes untested and problems are undetected!\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55834532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56121725", "body": "Here is the problem:\n\nmessage MessageMaxRange1 {\n    option message_set_wire_format = true;\n    extensions 1 to max;\n}\n\nWithout message_set_wire_format  everything's fine!\n\nThis is a protoc bug!... or Java's :) your turn!\n\nRegards,\nDavid\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56121725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55662518", "body": "I think it's a potential security risk; version 2.5.0 had this class final. Just raising question, if it is an oversight.  \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55662518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55834124", "body": "And here is the test for this case:\n\n``` java\n  @Test(expected = NullPointerException.class)\n  public void testPackedEnumFieldInProto() throws Exception {\n    final FileDescriptorProto.Builder protoBuilder = FileDescriptorProto.newBuilder()\n        .setName(\"test1.proto\");\n    protoBuilder.addEnumTypeBuilder()\n        .setName(\"Enum1\").addValueBuilder().setName(\"V1\").setNumber(1);\n    protoBuilder.addMessageTypeBuilder()\n        .setName(\"Message1\").addFieldBuilder().setName(\"field1\").setTypeName(\"Enum1\").setNumber(999)\n        .setLabel(Label.LABEL_REPEATED).getOptionsBuilder().setPacked(true);\n\n    // The buildFrom() will fail, but it shouldn't!\n    final FileDescriptor fileDescriptor = FileDescriptor.buildFrom(protoBuilder.build(), new FileDescriptor[0]);\n  }\n```\n\nor just remove (expected = NullPointerException.class) and see it fail!\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55834124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55834532", "body": "BTW, you're not seeing a lot of problems because the protoc does  a lot of cross-linking/name resolutions in protos for you already, so it gives you nice RESOLVED ones, and a lot of the Java \"build\" stuff, therefore, goes untested and problems are undetected!\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55834532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56121725", "body": "Here is the problem:\n\nmessage MessageMaxRange1 {\n    option message_set_wire_format = true;\n    extensions 1 to max;\n}\n\nWithout message_set_wire_format  everything's fine!\n\nThis is a protoc bug!... or Java's :) your turn!\n\nRegards,\nDavid\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56121725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56409229", "body": "I don't! What I am saying that protoc output is erroneous; could possibly used for malicious purposes and such. I am not suggesting that it's a security breach, but it is a bug.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56409229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58727308", "body": "I've looked at the pom in the distribution, there it's 2.6.0 :) Not a\nproblem if you're rebuilding from the branch, though.\nOn Oct 10, 2014 3:13 PM, \"Feng Xiao\" notifications@github.com wrote:\n\n> It's 2.6.1rc1 in the 2.6.1 branch:\n> https://github.com/google/protobuf/blob/2.6.1/java/pom.xml\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/protobuf/issues/47#issuecomment-58722886.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58727308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59155856", "body": "Use case, one of many: you have a nonnull field, parameter of type\nExtensionRegistry, empty registry would be its null-token. How then you\nrecognize it later? The registry could be also empty as described earlier.\n\nOr you've got a registry value, and if it is empty you do nothing,\notherwise some processing,  for example, reparsing/deserialization.\n\nThe feature is safe, and doesn't break anything!\nOn Oct 14, 2014 7:16 PM, \"Feng Xiao\" notifications@github.com wrote:\n\n> Can you expand on the reasons to check whether an ExtensionRegistry is\n> empty?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/protobuf/issues/52#issuecomment-59148852.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59155856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59438921", "body": "1. message.getSerializedSize() is expensive for non-empty messages; and it is awkward as well.\n2. In order for DynamicMessage  to have a singleton defaultInstance that can be compared with == you'll have to maintain internal thread-safe static Map<Descriptor, DynamicMessage> cache of defaults, which is relatively expensive.\n3. In all cases, the most universal, easy to implement, and easiest and most conventional to use is isEmpty(); or if to go a bit further, size() in terms of the total number of fields. It is as conventional, as the Collection API, well understood and widely used. \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59438921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59454066", "body": "I must add that the 2.6 introduced hack for a repeated custom option violates the following important invariant:\n\n``` java\n\n  @Test\n  public void testReserializationInvariant() throws Exception {\n    assertThat(reserializationInvariant(expectedFileDescriptor), is(equalTo(true)));  \n}\n\n  public boolean reserializationInvariant(final FileDescriptor file) {\n    final FileDescriptorProto expectedProtoWithUnknownFields = file.toProto();\n\n    final ExtensionRegistry registry = getRegistryFor(file);\n    final FileDescriptorProto actualProtoWithExtensions = FileDescriptorProto.parseFrom(\n        expectedProtoWithUnknownFields.toByteString(), registry);\n    final FileDescriptorProto actualProtoWithUnknownFields = FileDescriptorProto.parseFrom(\n        actualProtoWithExtensions.toByteString());\n    return actualProtoWithUnknownFields.equals(expectedProtoWithUnknownFields);\n  }\n\n```\n\nHere is the excerpt of diff between the original google/protobuf/unittest_custom_options.proto and its double serialization/deserialization:\n1. original:\n\n```\n\nmessage_type {\n  name: \"VariousComplexOptions\"\n  options {\n    7595468 {\n      7593951: 24\n    }\n    7633546: \"\\b\\263\\017\"\n    7636463: \"\\b\\t\"\n    7636463: \"\\023\\030\\026\\024\"\n    7636949: \"\\020\\333\\a\"\n    7636949: \"\\370\\346\\227\\035\\216\\005\"\n    7636949: \"\\n\\003\\b\\347\\005\"\n    7636949: \"\\n\\006\\330\\205\\236\\035\\317\\017\"\n    7636949: \"\\n\\b\\222\\365\\235\\035\\003\\b\\330\\017\"\n    7636949: \"\\302\\254\\227\\035\\003\\b\\345\\005\"\n    7636949: \"\\302\\254\\227\\035\\006\\330\\205\\236\\035\\316\\017\"\n    7636949: \"\\302\\254\\227\\035\\b\\222\\365\\235\\035\\003\\b\\311\\020\"\n    7636949: \"\\032\\003\\b\\301\\002\"\n    7636949: \"\\\"\\002\\be\"\n    7636949: \"\\\"\\003\\b\\324\\001\"\n    7646756: \"\\b*\"\n    7646756: \"\\330\\205\\236\\035\\304\\002\"\n    7646756: \"\\222\\365\\235\\035\\003\\b\\354\\006\"\n    7646756: \" c\"\n    7646756: \" X\"\n  }\n}\n\n```\n1. doubly serialized/deserialized:\n\n```\n\nmessage_type {\n  name: \"VariousComplexOptions\"\n  options {\n    7595468 {\n      7593951: 24\n    }\n    7633546: \"\\b\\263\\017\"\n    7636463: \"\\b\\t\\023\\030\\026\\024\"\n    7636949: \"\\n\\021\\b\\347\\005\\222\\365\\235\\035\\003\\b\\330\\017\\330\\205\\236\\035\\317\\017\\020\\333\\a\\032\\003\\b\\301\\002\\\"\\002\\be\\\"\\003\\b\\324\\001\\302\\254\\227\\035\\021\\b\\345\\005\\222\\365\\235\\035\\003\\b\\311\\020\\330\\205\\236\\035\\316\\017\\370\\346\\227\\035\\216\\005\"\n    7646756: \"\\b* c X\\222\\365\\235\\035\\003\\b\\354\\006\\330\\205\\236\\035\\304\\002\"\n  }\n}\n\n```\n\nIn other words, a doubly serialized/deserialized proto must be equal to its original form, i.e. proto equals doubly_serialized_deserialized(proto).\n\nAgain, the proto 2.6 hack is troublesome; instead, just introduce a repeated extension for custom options, the way it is done for a regular repeated extensions, for example:\n\n``` java\n\nextend google.protobuf.FileOptions {\n  repeated string  my_repeated_custom_option1 = 7736974;\n  repeated int my_repeated_custom_option2 = 7736975;\n  repeated Message1 my_repeated_custom_option3 = 7736976;\n  ...\n  optional string my_optional_custom_option1 = 7736977;\n}\n\n```\n\nAnd as a quick fix for now, for protobuf 2.6.1, disallow repeating optional custom options as it had always been prior 2.6.0. \n\nIn summary, as it is of now, in 2.6.0 and 2.6.1RC1, the repeating optional custom options is not a hack, but a bug.  \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59454066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59868596", "body": "Please disregard all this issue; look instead at issue #59. \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59868596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59870121", "body": "Is it possible to release 2.6.1 RC or final ASAP on Maven? The 2.6.0 in Java is a complete no-go!\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59870121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/60027403", "body": "Verified; it's alright! There are some insignificant JavaDoc warnings,\nthat's okay to address in the next minor release, don't worry about them.\nI'll file an issue about this soon.\n\nAll in all, it's fine for release on Maven! Please do it ASAP! My project\nis very much depends on the release!\n\nCordially,\nDavid\n\nOn Tue, Oct 21, 2014 at 4:24 PM, Feng Xiao notifications@github.com wrote:\n\n> Hi David,\n> I just published 2.6.1. Can you help verify whether the pom.xml is\n> correct? I'll upload it to Maven soon.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/protobuf/issues/14#issuecomment-60015112.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/60027403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63423386", "body": "ProtoBuf with Java EE7 Expression Language 3.0; pure Java ProtoBuf Parser and Builder.\n\nThis is the shortest I can come up with \ud83d\ude02 \n\nThank you so much for your prompt response and help!\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63423386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "phraktle": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/55115971", "body": "Filled out the CLA as requested. Will look into re-adding the method w/ the original signature shortly.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55115971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55129345", "body": "Do you think the original method should be marked @Deprecated ?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55129345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17883462", "body": "Removed use of StandardCharsets. Since String#getBytes(Charset) was introduced in jdk 1.6 (which is the whole point of this change), support for jdk 1.5 cannot be provided.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17883462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "edmonds": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/55512429", "body": "I should note, this PR is built on top of my previous PR (\"Remove GOOGLE_PROTOBUF_ARCH_PPC\") because it touches immediately adjacent sources lines in `platform_macros.h`.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55512429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55990224", "body": "Just submitted the CLA.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55990224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55990235", "body": "CLA was just submitted.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55990235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55990284", "body": "Sure, that's easier than any of the other options :-)\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55990284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56108879", "body": "Oops, this causes a build failure when compiling with non-Clang. I'll submit a new PR with the fix.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56108879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56119190", "body": "BTW, I've tested that this compiles on 8 different Debian platforms: {gcc,clang}/{amd64,i386,powerpc,ppc64el}.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56119190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56121739", "body": "Oh, I guess I misunderstood when you asked to have those two methods removed.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56121739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56122613", "body": "Actually, I just looked at the TSAN atomics implementation, and it uses a full `SEQ_CST` fence, which is the strongest memory model.\n\nhttps://github.com/google/protobuf/blob/master/src/google/protobuf/stubs/atomicops_internals_tsan.h#L109\n\nhttps://github.com/google/protobuf/blob/master/src/google/protobuf/stubs/atomicops_internals_tsan.h#L125\n\nChanging the generic atomics to match that would be trivial.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56122613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56123057", "body": "Note that if you merge this instead, it obsoletes PR #28.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56123057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55990224", "body": "Just submitted the CLA.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55990224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55512429", "body": "I should note, this PR is built on top of my previous PR (\"Remove GOOGLE_PROTOBUF_ARCH_PPC\") because it touches immediately adjacent sources lines in `platform_macros.h`.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55512429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55990235", "body": "CLA was just submitted.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55990235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56108879", "body": "Oops, this causes a build failure when compiling with non-Clang. I'll submit a new PR with the fix.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56108879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55990284", "body": "Sure, that's easier than any of the other options :-)\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55990284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56122613", "body": "Actually, I just looked at the TSAN atomics implementation, and it uses a full `SEQ_CST` fence, which is the strongest memory model.\n\nhttps://github.com/google/protobuf/blob/master/src/google/protobuf/stubs/atomicops_internals_tsan.h#L109\n\nhttps://github.com/google/protobuf/blob/master/src/google/protobuf/stubs/atomicops_internals_tsan.h#L125\n\nChanging the generic atomics to match that would be trivial.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56122613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56119190", "body": "BTW, I've tested that this compiles on 8 different Debian platforms: {gcc,clang}/{amd64,i386,powerpc,ppc64el}.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56119190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56121739", "body": "Oh, I guess I misunderstood when you asked to have those two methods removed.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56121739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56123057", "body": "Note that if you merge this instead, it obsoletes PR #28.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56123057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59423868", "body": "@craigcitro The Debian packaging for google-apputils-python is here: http://anonscm.debian.org/cgit/cloud/google-apputils-python.git. I've just updated it for 0.4.1 and uploaded it to the Debian archive.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59423868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64288425", "body": "If https://github.com/sabotage-linux/sabotage/blob/master/pkg/protobuf is correct, this is a report against protobuf 2.5.0, which pre-dates the generic architecture support in protobuf >= 2.6.0.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64288425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17763468", "body": "I copied the style from https://github.com/google/protobuf/blob/v2.6.0/src/google/protobuf/stubs/atomicops.h#L163, so there is already an instance of that construct in the code base :-)\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17763468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17763600", "body": "Also, I'm not quite sure what you're asking for. Do you want the end result to be a bare string constant, causing a syntax error, rather than using `#error` at all?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17763600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jaredgrubb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/55990671", "body": "Having such history is very helpful, and I'd ask you to rethink it. It's not too hard to bring in the branches from SVN. But I'll let this be unless you change your mind.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55990671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55990671", "body": "Having such history is very helpful, and I'd ask you to rethink it. It's not too hard to bring in the branches from SVN. But I'll let this be unless you change your mind.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55990671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cbsmith": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/56317187", "body": "This looks perfect. Small/compact/goes from \"not work\" to \"work\".\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56317187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56317187", "body": "This looks perfect. Small/compact/goes from \"not work\" to \"work\".\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/56317187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "psypuff": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/57929341", "body": "Yay, thanks! :+1: \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/57929341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59749433", "body": "Thanks Craig! :smile: \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59749433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dsrosario": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/58091037", "body": "Hello,\n\nJust sign the CLA electronically.\n\nRegards,\n\nDinis Ros\u00e1rio\n\n2014-10-06 19:47 GMT+01:00 Feng Xiao notifications@github.com:\n\n> Hi, please sign this Google CLA and let me know when you are done:\n> https://developers.google.com/open-source/cla/individual?csw=1\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/protobuf/pull/35#issuecomment-58071070.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58091037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "abuszta": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/58473498", "body": "Signed.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58473498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58687628", "body": "Ok, thanks. I wanted to be sure :)\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58687628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/18627145", "body": "Done :)\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/18627145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "worr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/58698740", "body": "I'm not sure that that's the right solution here. Technically, sched_yield is required on every platform _except_ Windows. It makes more sense to just disable the check on any Win32 platforms, rather than enable it only for Solaris. On non-Windows, non-Solaris systems, this guarantees the presence of `sched_yield`\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58698740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "georgevreilly": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/58700651", "body": "I had to downgrade my Brew installation of protoc to 2.5 because of this implicit dependency on an ancient version of python-dateutil. We're also using Boto, which requires a modern version of dateutil.\n\nSince the only reason that google-apputils is being used is to get `basetest`, which is used only in test code, can the requirement be extracted from setup.py and put into test-requirements.txt?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58700651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dhermes": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/58701286", "body": "@georgevreilly See https://github.com/craigcitro/apitools/pull/9\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58701286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59158802", "body": "w00t! I assume you're referring to: https://pypi.python.org/pypi/google-apputils/0.4.1\n\nHow does the Ubuntu / debian source process work?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59158802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "AngryGoatBoy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/58972940", "body": "I had the same issue. I found the following repository and it compiled fine for me. I have not verified the version yet..\nhttps://github.com/racker/protobuf\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58972940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "springmeyer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/58973724", "body": "In case it is helpful you can also work around this bug by just building a few targets `/target:libprotobuf-lite;libprotobuf;protoc`. Here is the full script that I use to build v2.5.0 (not yet updated to v2.6.0): https://github.com/BergWerkGIS/mapnik-dependencies/blob/windows/scripts/build_protobuf.bat\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/58973724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "craigcitro": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/59158274", "body": "... and we're fixed! i just pushed a new version of `google-apputils`, we should be up and running.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59158274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59158891", "body": "yep, just pushed the new release, and now this package can install with no trouble.\n\ni have no idea who/what controls the deb creation.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59158891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59449723", "body": "wooooo thanks @edmonds !\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59449723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "brianolson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/59302799", "body": "Yes, Python. Can we get a stable interface to the underlying operations in Python officially blessed?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59302799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hzeller": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/59304459", "body": "On 15 October 2014 09:20, Brian Olson notifications@github.com wrote:\n\n> Lots of applications want a stream of protobuf messages in a file or a\n> network stream.\n> \n> It could be as simple as exposing the internal utility functions to write\n> a varint to a stream.\n\nDoesn't CodedOutputStream already provide that ?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59304459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "johnbeard": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/59408219", "body": "@xfxyjwf, done!\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59408219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59894552", "body": "According to the 'Manage Agreements' page, I signed it (electronically) on Oct 16, 2014 05:55 PDT. \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59894552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "agoode": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/59684246", "body": "There is some info at http://upstream-tracker.org/versions/protobuf.html but it is incomplete. I filed an issue to get the protobuf status updated.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59684246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59758615", "body": "Here is the report. The soname change is necessary.\nhttp://upstream-tracker.org/compat_reports/protobuf/2.5.0_to_2.6.0/abi_compat_report.html\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59758615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "ari62": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/59844435", "body": "xfxyjwf, running make check on the 2.6.0 release package gives the same error:\n\n```\nMaking check in .\n/Applications/Xcode.app/Contents/Developer/usr/bin/make  check-local\nMaking lib/libgtest.a lib/libgtest_main.a in gtest\ndepbase=`echo src/gtest-all.lo | sed 's|[^/]*$|.deps/&|;s|\\.lo$||'`;\\\n    /bin/sh ./libtool  --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I./build-aux  -I. -I./include  -D_THREAD_SAFE  -DGTEST_HAS_PTHREAD=1 -g -DNDEBUG -MT src/gtest-all.lo -MD -MP -MF $depbase.Tpo -c -o src/gtest-all.lo src/gtest-all.cc &&\\\n    mv -f $depbase.Tpo $depbase.Plo\nlibtool: compile:  g++ -DHAVE_CONFIG_H -I. -I./build-aux -I. -I./include -D_THREAD_SAFE -DGTEST_HAS_PTHREAD=1 -g -DNDEBUG -MT src/gtest-all.lo -MD -MP -MF src/.deps/gtest-all.Tpo -c src/gtest-all.cc  -fno-common -DPIC -o src/.libs/gtest-all.o\nIn file included from src/gtest-all.cc:39:\nIn file included from ./include/gtest/gtest.h:57:\nIn file included from ./include/gtest/internal/gtest-internal.h:40:\n./include/gtest/internal/gtest-port.h:449:10: fatal error: 'tr1/tuple' file not found\n#include <tr1/tuple>  // NOLINT\n         ^\n1 error generated.\nmake[3]: *** [src/gtest-all.lo] Error 1\nmake[2]: *** [check-local] Error 2\nmake[1]: *** [check-am] Error 2\nmake: *** [check-recursive] Error 1\n\n```\n\nI'm on osX 10.9.4\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59844435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/60003343", "body": "I downloaded it from:\nhttps://github.com/google/protobuf/archive/v2.6.0.zip\nby choosing the 2.6.0 tag from the branches dropdown in github.\n I'm not sure what I should do with that zip, I'm on a mac and that zip contains a .exe.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/60003343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "edgeprod": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/59863020", "body": "This is resolved as of the current version of the code.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/59863020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jstasiak": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/60223820", "body": "+1, would really like to see this merged\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/60223820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jspal": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/60225204", "body": "Hello,\nFor sure.\n\nI\u2019d like to build a 32-bit version on Solaris.\nFor ./configure I\u2019m using:\n\n./configure CXX=CC CC=CC LDFLAGS=-L$PWD/src/solaris --disable-64bit-solaris --prefix=/alocation/google/protobuf32-2.6.1.1\n\nCC -> /opt/solstudio12.2/bin/CC\n\n$ CC \u2013V\nCC: Sun C++ 5.11 SunOS_i386 2010/08/13\n\nYour latest tarball gets further this time but now fails with:\n\n\"./google/protobuf/stubs/platform_macros.h\", line 90: Error: \",\" expected instead of \"\"Host platform was not detected as supported by protobuf\"\".\n\non compiling the first file, i.e.\nlibtool: compile:  CC -DHAVE_CONFIG_H -I. -I.. -D_REENTRANT -pthreads -g0 -xO3 -xlibmil -xdepend -xbuiltin -mt -compat=5 -library=stlport4 -library=Crun -template=no%extdef -DNDEBUG -c google/protobuf/stubs/atomicops_internals_x86_gcc.cc  -KPIC -DPIC -o google/protobuf/stubs/.libs/atomicops_internals_x86_gcc.o\n\nOn my hardware ( uname \u2013a -> SunOS ahost 5.10 Generic_150401-05 i86pc i386 i86pc  &  isainfo \u2013kv -> 64-bit amd64 kernel modules )\nthere\u2019s no predefined macro for sparc\nbut there is a predefined macro for sun  (and __sun)\n\nI\u2019m thinking the required resolved pre-processor directive for my 32-bit build should be:\n#define GOOGLE_PROTOBUF_ARCH_32_BIT 1\n\nRegards\n\nFrom: Feng Xiao [mailto:notifications@github.com]\nSent: 22 October 2014 19:47\nTo: google/protobuf\nCc: Spalek, John\nSubject: Re: [protobuf] protobuf-2.6.1.tar.gz missing solaris header (#63)\n\nOps.. I just checked-in some new tarballs, can you help check whether they work on solaris?\nhttps://github.com/google/protobuf/blob/fix/dist/protobuf-2.6.1.tar.gz\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/google/protobuf/issues/63#issuecomment-60134744.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/60225204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/60385363", "body": "The macros defined by compiler are:\nCC -xdumpmacros -E /dev/null\n#1 \"/dev/null\"\n\n#define **cplusplus 199711L\n#define __STDC** 0\n#define _WCHAR_T\n#define _BOOL 1\n#define __ARRAYNEW 1\n#define __DATE__ \"Oct 24 2014\"\n#define **TIME** \"13:48:15\"\n#define **LINE**\n#define **FILE**\n#define _SIGNEDCHAR_ 1\n#define **PRAGMA_REDEFINE_EXTNAME 1\n#define __asm asm\n#define __asm** asm\n#define **volatile volatile\n#define __volatile** volatile\n#define **attribute __attribute**\n#define **alignof** __alignof\n#define __SunOS_5_10 1\n#define __SUNPRO_CC 0x5110\n#define __unix 1\n#define __SVR4 1\n#define __sun 1\n#define __SunOS 1\n#define __i386 1\n#define __BUILTIN_VA_ARG_INCR 1\n#define unix 1\n#define sun 1\n#define i386 1\n#define __SUN_PREFETCH 1\n#define __SUNPRO_CC_COMPAT 5\n\nThat shows i386.  Which to me implies a 32-bit x86, which is odd since this is a 64-bit OS ( 64-bit amd64 kernel modules )\n\nMy attempt at a change to  \"google/protobuf/stubs/platform_macros.h\"  is:\n\n#elif defined(**pnacl**)\n#define GOOGLE_PROTOBUF_ARCH_32_BIT 1\n#elif defined(sun)\n#if defined(sparc)\n#define GOOGLE_PROTOBUF_ARCH_SPARC 1\n#endif\n#if defined SOLARIS_64BIT_ENABLED\n#define GOOGLE_PROTOBUF_ARCH_64_BIT 1\n#else\n#define GOOGLE_PROTOBUF_ARCH_32_BIT 1\n#endif\n#elif defined(**GNUC**)\n\ni.e. add a #elif for sun around existing sparc stuff, and default to GOOGLE_PROTOBUF_ARCH_32_BIT\n\nNow make gets further, until it hits the link error:\nUndefined                       first referenced\nsymbol                             in file\nconst char*google::protobuf::compiler::java::FieldTypeName(const google::protobuf::FieldDescriptor::Type) google/protobuf/compiler/java/.libs/java_extension.o\nld: fatal: symbol referencing errors. No output written to .libs/libprotoc.so.9.0.1\n\nYou need add const to the definition of:\nconst char\\* FieldTypeName(const FieldDescriptor::Type field_type) {\nat line 329 in  google/protobuf/compiler/java/ java_helpers.cc\n\nAlso to remove these warnings,\n\"./google/protobuf/descriptor.h\", line 373: Warning: Identifier expected instead of \"}\".\n\"./google/protobuf/descriptor.h\", line 392: Warning: Identifier expected instead of \"}\".\n\"./google/protobuf/descriptor.h\", line 403: Warning: Identifier expected instead of \"}\".\n\"./google/protobuf/wire_format_lite.h\", line 93: Warning: Identifier expected instead of \"}\".\n\"./google/protobuf/wire_format_lite.h\", line 116: Warning: Identifier expected instead of \"}\".\n\"./google/protobuf/wire_format_lite.h\", line 131: Warning: Identifier expected instead of \"}\".\n\"./google/protobuf/wire_format.h\", line 228: Warning: Identifier expected instead of \"}\".\n\"./google/protobuf/compiler/command_line_interface.h\", line 317: Warning: Identifier expected instead of \"}\".\nremove the trailing comma from the last enum in the list.\n\nThis now produces ./protoc, but this protoc fails to run due to compiling  with  -pthreads.  So I changed ./configure to\n\n./configure CXX=CC CC=CC PTHREAD_CFLAGS=-mt LDFLAGS=-L$PWD/src/solaris --disable-64bit-solaris --prefix=/alocation/google/protobuf32-2.6.1.1\n\nWhich now produces 32-bit binaries in src/.libs for protoc, libprotoc,so & libprotoc-lite.so\n\nNext:\nmake check fails with:\n$ make check\nMaking check in .\nmake  check-local\nMaking lib/libgtest.a lib/libgtest_main.a in gtest\nsource='src/gtest-all.cc' object='src/gtest-all.lo' libtool=yes \\\nDEPDIR=.deps depmode=none /bin/bash ./build-aux/depcomp \\\n/bin/bash ./libtool  --tag=CXX    --mode=compile CC -DHAVE_CONFIG_H  -I. -I./build-aux  -I. -I./include   -D_REENTRANT -mt -DGTEST_HAS_PTHREAD=1 -g0 -xO3 -xlibmil -xdepend -xbuiltin -mt -compat=5 -library=stlport4 -library=Crun -template=no%extdef  -DNDEBUG -c -o src/gtest-all.lo src/gtest-all.cc\nlibtool: compile:  CC -DHAVE_CONFIG_H -I. -I./build-aux -I. -I./include -D_REENTRANT -mt -DGTEST_HAS_PTHREAD=1 -g0 -xO3 -xlibmil -xdepend -xbuiltin -mt -compat=5 -library=stlport4 -library=Crun -template=no%extdef -DNDEBUG -c src/gtest-all.cc  -KPIC -DPIC -o src/.libs/gtest-all.o\n\"./src/gtest-printers.cc\", line 269: Error: Could not find a match for PrintAsStringLiteralTo needed in testing::internal::PrintCharsAsStringTo<char>(const char_, unsigned, std::ostream *).\n\"./src/gtest-printers.cc\", line 316:     Where: While instantiating \"testing::internal::PrintCharsAsStringTo<char>(const char_, unsigned, std::ostream _)\".\n\"./src/gtest-printers.cc\", line 316:     Where: Instantiated from non-template code.\n1 Error(s) detected.\n*_\\* Error code 1\n\nAt which point I give up for today.\n\nFrom: Feng Xiao [mailto:notifications@github.com]\nSent: 23 October 2014 19:45\nTo: google/protobuf\nCc: Spalek, John\nSubject: Re: [protobuf] protobuf-2.6.1 doesn't support Solaris on amd64. (#63)\n\nHmm, so the platform_macros.h header file only supports Solaris on sparc CPU. Could you help check which macro your compiler has defined and maybe send us a fix for this? I would think it should have defined the i386 macro but apparently it doesn't.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/google/protobuf/issues/63#issuecomment-60288810.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/60385363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61455091", "body": "Any news/help on this?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61455091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Kentzo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/60544472", "body": "I'm looking forward to integrate the whole set of changes needed to make python bindings fully python 3 compatible (see my diverged fork https://github.com/GreatFruitOmsk/protobuf-py3).\n\nWould be awesome if you guys help me there.\n\n@xfxyjwf I accepted that license.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/60544472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/62282452", "body": "@xfxyjwf Please see https://github.com/google/protobuf/pull/66\nIt's incomplete but please feel free to review and comment what is already done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/62282452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63503361", "body": "@xfxyjwf @mrovner Do we still need to support Python 2.5 in protobuf 2.6+ ?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63503361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63504497", "body": "@tseaver Please edit your reviews given that answer :)\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63504497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20519066", "body": "Could be a workaround for some bug in older Python?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20519066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20519218", "body": "I asked for the min supported Python, but never got a response.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20519218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28590385", "body": "Maybe it would be better to split python bindings into different projects: one for python 2.x one for 3.x and one for common parts?\n\nIt's ridiculous how much time was spent on such simple issue :) New features are not introduced that often to consider supporting separate projects an impossible task.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28590385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "apaprocki": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/61332450", "body": "I already had paper CLA/CCLAs signed in the past -- do I need to do it again in the electronic system?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61332450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61333641", "body": "Name, e-mail were the same -- the old paper forms did not ask for a GH username. I'll just fill out the newer electronic one so it won't be an issue going forward.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61333641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61333856", "body": "The electronic system had my old CLA:\n\n```\nGoogle Individual CLA   Andrew Paprocki Oct 13, 2012 13:15 PDT\n```\n\nbut my Github username was not part of the contact info. I just updated it.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61333856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/62498292", "body": "I removed the `EXPECT_EQ()` changes from the test drivers.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/62498292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/62616603", "body": "@xfxyjwf Updated as requested.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/62616603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/19732054", "body": "I put our name here because I saw that `atomicops_internals_generic_gcc.h` contained copyright by Red Hat. I can always change it -- just wanted to make sure I was doing the proper thing.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/19732054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/19732257", "body": "From what I see, `EXPECT_EQ` is provided by `gtest`, so it can't be changed.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/19732257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "paulito-bandito": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/61698924", "body": "So instead of using the source from Github, I downloaded the tar ball, and now autogen works correctly, but making fails:\n\nHere is the call to ./configure (which succeeds)\n\n``` javascript\nmanolo in ~/Downloads/protobuf-2.6.0 \no  ./configure \nchecking whether to enable maintainer-specific portions of Makefiles... no\nchecking build system type... i386-apple-darwin14.0.0\nchecking host system type... i386-apple-darwin14.0.0\nchecking target system type... i386-apple-darwin14.0.0\nchecking for a BSD-compatible install... /usr/bin/install -c\nchecking whether build environment is sane... yes\nchecking for a thread-safe mkdir -p... ./install-sh -c -d\nchecking for gawk... no\nchecking for mawk... no\nchecking for nawk... no\nchecking for awk... awk\nchecking whether make sets $(MAKE)... yes\nchecking for gcc... gcc\nchecking for C compiler default output file name... a.out\nchecking whether the C compiler works... yes\nchecking whether we are cross compiling... no\nchecking for suffix of executables... \nchecking for suffix of object files... o\nchecking whether we are using the GNU C compiler... yes\nchecking whether gcc accepts -g... yes\nchecking for gcc option to accept ISO C89... none needed\nchecking for style of include used by make... GNU\nchecking dependency style of gcc... gcc3\nchecking for g++... g++\nchecking whether we are using the GNU C++ compiler... yes\nchecking whether g++ accepts -g... yes\nchecking dependency style of g++... gcc3\nchecking how to run the C++ preprocessor... g++ -E\nchecking for grep that handles long lines and -e... /usr/bin/grep\nchecking for egrep... /usr/bin/grep -E\nchecking for AIX... no\nchecking for ANSI C header files... yes\nchecking for sys/types.h... yes\nchecking for sys/stat.h... yes\nchecking for stdlib.h... yes\nchecking for string.h... yes\nchecking for memory.h... yes\nchecking for strings.h... yes\nchecking for inttypes.h... yes\nchecking for stdint.h... yes\nchecking for unistd.h... yes\nchecking minix/config.h usability... no\nchecking minix/config.h presence... no\nchecking for minix/config.h... no\nchecking whether it is safe to define __EXTENSIONS__... yes\nchecking C++ compiler flags...... use default: -O2  -g -DNDEBUG\nchecking whether __SUNPRO_CC is declared... no\nchecking how to print strings... printf\nchecking for a sed that does not truncate output... /usr/bin/sed\nchecking for fgrep... /usr/bin/grep -F\nchecking for ld used by gcc... /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld\nchecking if the linker (/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld) is GNU ld... no\nchecking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm\nchecking the name lister (/usr/bin/nm) interface... BSD nm\nchecking whether ln -s works... yes\nchecking the maximum length of command line arguments... 196608\nchecking whether the shell understands some XSI constructs... yes\nchecking whether the shell understands \"+=\"... yes\nchecking how to convert i386-apple-darwin14.0.0 file names to i386-apple-darwin14.0.0 format... func_convert_file_noop\nchecking how to convert i386-apple-darwin14.0.0 file names to toolchain format... func_convert_file_noop\nchecking for /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld option to reload object files... -r\nchecking for objdump... no\nchecking how to recognize dependent libraries... pass_all\nchecking for dlltool... no\nchecking how to associate runtime and link libraries... printf %s\n\nchecking for ar... ar\nchecking for archiver @FILE support... no\nchecking for strip... strip\nchecking for ranlib... ranlib\nchecking command to parse /usr/bin/nm output from gcc object... ok\nchecking for sysroot... no\nchecking for mt... no\nchecking if : is a manifest tool... no\nchecking for dsymutil... dsymutil\nchecking for nmedit... nmedit\nchecking for lipo... lipo\nchecking for otool... otool\nchecking for otool64... no\nchecking for -single_module linker flag... yes\nchecking for -exported_symbols_list linker flag... yes\nchecking for -force_load linker flag... yes\nchecking for dlfcn.h... yes\nchecking for objdir... .libs\nchecking if gcc supports -fno-rtti -fno-exceptions... yes\nchecking for gcc option to produce PIC... -fno-common -DPIC\nchecking if gcc PIC flag -fno-common -DPIC works... yes\nchecking if gcc static flag -static works... no\nchecking if gcc supports -c -o file.o... yes\nchecking if gcc supports -c -o file.o... (cached) yes\nchecking whether the gcc linker (/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld) supports shared libraries... yes\nchecking dynamic linker characteristics... darwin14.0.0 dyld\nchecking how to hardcode library paths into programs... immediate\nchecking whether stripping libraries is possible... yes\nchecking if libtool supports shared libraries... yes\nchecking whether to build shared libraries... yes\nchecking whether to build static libraries... yes\nchecking how to run the C++ preprocessor... g++ -E\nchecking for ld used by g++... /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld\nchecking if the linker (/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld) is GNU ld... no\nchecking whether the g++ linker (/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld) supports shared libraries... yes\nchecking for g++ option to produce PIC... -fno-common -DPIC\nchecking if g++ PIC flag -fno-common -DPIC works... yes\nchecking if g++ static flag -static works... no\nchecking if g++ supports -c -o file.o... yes\nchecking if g++ supports -c -o file.o... (cached) yes\nchecking whether the g++ linker (/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld) supports shared libraries... yes\nchecking dynamic linker characteristics... darwin14.0.0 dyld\nchecking how to hardcode library paths into programs... immediate\nchecking for ANSI C header files... (cached) yes\nchecking fcntl.h usability... yes\nchecking fcntl.h presence... yes\nchecking for fcntl.h... yes\nchecking for inttypes.h... (cached) yes\nchecking limits.h usability... yes\nchecking limits.h presence... yes\nchecking for limits.h... yes\nchecking for stdlib.h... (cached) yes\nchecking for unistd.h... (cached) yes\nchecking for working memcmp... yes\nchecking for working strtod... yes\nchecking for ftruncate... yes\nchecking for memset... yes\nchecking for mkdir... yes\nchecking for strchr... yes\nchecking for strerror... yes\nchecking for strtol... yes\nchecking zlib version... ok (1.2.0.4 or later)\nchecking for library containing zlibVersion... -lz\nchecking for the pthreads library -lpthreads... no\nchecking whether pthreads work without any flags... yes\nchecking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE\nchecking if more special flags are required for pthreads... -D_THREAD_SAFE\nchecking whether to check for GCC pthread/shared inconsistencies... no\nchecking whether what we have so far is sufficient with -nostdlib... no\nchecking whether -lpthread saves the day... no\nconfigure: WARNING: Impossible to determine how to use pthreads with shared libraries and -nostdlib\nchecking the location of hash_map... <unordered_map>\nconfigure: creating ./config.status\nconfig.status: creating Makefile\nconfig.status: creating src/Makefile\nconfig.status: creating protobuf.pc\nconfig.status: creating protobuf-lite.pc\nconfig.status: creating config.h\nconfig.status: config.h is unchanged\nconfig.status: executing depfiles commands\nconfig.status: executing libtool commands\n=== configuring in gtest (/Users/manolo/Downloads/protobuf-2.6.0/gtest)\nconfigure: running /bin/sh ./configure '--prefix=/usr/local'  --cache-file=/dev/null --srcdir=.\nchecking for a BSD-compatible install... /usr/bin/install -c\nchecking whether build environment is sane... yes\nchecking for a thread-safe mkdir -p... build-aux/install-sh -c -d\nchecking for gawk... no\nchecking for mawk... no\nchecking for nawk... no\nchecking for awk... awk\nchecking whether make sets $(MAKE)... yes\nchecking for gcc... gcc\nchecking for C compiler default output file name... a.out\nchecking whether the C compiler works... yes\nchecking whether we are cross compiling... no\nchecking for suffix of executables... \nchecking for suffix of object files... o\nchecking whether we are using the GNU C compiler... yes\nchecking whether gcc accepts -g... yes\nchecking for gcc option to accept ISO C89... none needed\nchecking for style of include used by make... GNU\nchecking dependency style of gcc... gcc3\nchecking for g++... g++\nchecking whether we are using the GNU C++ compiler... yes\nchecking whether g++ accepts -g... yes\nchecking dependency style of g++... gcc3\nchecking build system type... i386-apple-darwin14.0.0\nchecking host system type... i386-apple-darwin14.0.0\nchecking how to print strings... printf\nchecking for a sed that does not truncate output... /usr/bin/sed\nchecking for grep that handles long lines and -e... /usr/bin/grep\nchecking for egrep... /usr/bin/grep -E\nchecking for fgrep... /usr/bin/grep -F\nchecking for ld used by gcc... /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld\nchecking if the linker (/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld) is GNU ld... no\nchecking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm\nchecking the name lister (/usr/bin/nm) interface... BSD nm\nchecking whether ln -s works... yes\nchecking the maximum length of command line arguments... 196608\nchecking whether the shell understands some XSI constructs... yes\nchecking whether the shell understands \"+=\"... yes\nchecking how to convert i386-apple-darwin14.0.0 file names to i386-apple-darwin14.0.0 format... func_convert_file_noop\nchecking how to convert i386-apple-darwin14.0.0 file names to toolchain format... func_convert_file_noop\nchecking for /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld option to reload object files... -r\nchecking for objdump... no\nchecking how to recognize dependent libraries... pass_all\nchecking for dlltool... no\nchecking how to associate runtime and link libraries... printf %s\n\nchecking for ar... ar\nchecking for archiver @FILE support... no\nchecking for strip... strip\nchecking for ranlib... ranlib\nchecking command to parse /usr/bin/nm output from gcc object... ok\nchecking for sysroot... no\nchecking for mt... no\nchecking if : is a manifest tool... no\nchecking for dsymutil... dsymutil\nchecking for nmedit... nmedit\nchecking for lipo... lipo\nchecking for otool... otool\nchecking for otool64... no\nchecking for -single_module linker flag... yes\nchecking for -exported_symbols_list linker flag... yes\nchecking for -force_load linker flag... yes\nchecking how to run the C preprocessor... gcc -E\nchecking for ANSI C header files... yes\nchecking for sys/types.h... yes\nchecking for sys/stat.h... yes\nchecking for stdlib.h... yes\nchecking for string.h... yes\nchecking for memory.h... yes\nchecking for strings.h... yes\nchecking for inttypes.h... yes\nchecking for stdint.h... yes\nchecking for unistd.h... yes\nchecking for dlfcn.h... yes\nchecking for objdir... .libs\nchecking if gcc supports -fno-rtti -fno-exceptions... yes\nchecking for gcc option to produce PIC... -fno-common -DPIC\nchecking if gcc PIC flag -fno-common -DPIC works... yes\nchecking if gcc static flag -static works... no\nchecking if gcc supports -c -o file.o... yes\nchecking if gcc supports -c -o file.o... (cached) yes\nchecking whether the gcc linker (/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld) supports shared libraries... yes\nchecking dynamic linker characteristics... darwin14.0.0 dyld\nchecking how to hardcode library paths into programs... immediate\nchecking whether stripping libraries is possible... yes\nchecking if libtool supports shared libraries... yes\nchecking whether to build shared libraries... yes\nchecking whether to build static libraries... yes\nchecking how to run the C++ preprocessor... g++ -E\nchecking for ld used by g++... /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld\nchecking if the linker (/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld) is GNU ld... no\nchecking whether the g++ linker (/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld) supports shared libraries... yes\nchecking for g++ option to produce PIC... -fno-common -DPIC\nchecking if g++ PIC flag -fno-common -DPIC works... yes\nchecking if g++ static flag -static works... no\nchecking if g++ supports -c -o file.o... yes\nchecking if g++ supports -c -o file.o... (cached) yes\nchecking whether the g++ linker (/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld) supports shared libraries... yes\nchecking dynamic linker characteristics... darwin14.0.0 dyld\nchecking how to hardcode library paths into programs... immediate\nchecking for python... /usr/bin/python\nchecking for the pthreads library -lpthreads... no\nchecking whether pthreads work without any flags... yes\nchecking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE\nchecking if more special flags are required for pthreads... -D_THREAD_SAFE\nchecking whether to check for GCC pthread/shared inconsistencies... no\nconfigure: creating ./config.status\nconfig.status: creating Makefile\nconfig.status: creating scripts/gtest-config\nconfig.status: creating build-aux/config.h\nconfig.status: build-aux/config.h is unchanged\nconfig.status: executing depfiles commands\nconfig.status: executing libtool commands\n```\n\nHere is the call to make (which fails)\n\n``` javascript\nmanolo in ~/Downloads/protobuf-2.6.0 \no  make\n/Applications/Xcode.app/Contents/Developer/usr/bin/make  all-recursive\nMaking all in .\nmake[2]: Nothing to be done for `all-am'.\nMaking all in src\ndepbase=`echo google/protobuf/stubs/atomicops_internals_x86_gcc.lo | sed 's|[^/]*$|.deps/&|;s|\\.lo$||'`;\\\n    /bin/sh ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I..    -D_THREAD_SAFE  -Wall -Wwrite-strings -Woverloaded-virtual -Wno-sign-compare -O2 -g -DNDEBUG -MT google/protobuf/stubs/atomicops_internals_x86_gcc.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/stubs/atomicops_internals_x86_gcc.lo google/protobuf/stubs/atomicops_internals_x86_gcc.cc &&\\\n    mv -f $depbase.Tpo $depbase.Plo\n../libtool: line 842: X--tag=CXX: command not found\n../libtool: line 875: libtool: ignoring unknown tag : command not found\n../libtool: line 842: X--mode=compile: command not found\n../libtool: line 1008: *** Warning: inferring the mode of operation is deprecated.: command not found\n../libtool: line 1009: *** Future versions of Libtool will require --mode=MODE be specified.: command not found\n../libtool: line 1152: Xg++: command not found\n../libtool: line 1152: X-DHAVE_CONFIG_H: command not found\n../libtool: line 1152: X-I.: command not found\n../libtool: line 1152: X-I..: command not found\n../libtool: line 1152: X-D_THREAD_SAFE: command not found\n../libtool: line 1152: X-Wall: command not found\n../libtool: line 1152: X-Wwrite-strings: command not found\n../libtool: line 1152: X-Woverloaded-virtual: command not found\n../libtool: line 1152: X-Wno-sign-compare: command not found\n../libtool: line 1152: X-O2: command not found\n../libtool: line 1152: X-g: command not found\n../libtool: line 1152: X-DNDEBUG: command not found\n../libtool: line 1152: X-MT: command not found\n../libtool: line 1152: Xgoogle/protobuf/stubs/atomicops_internals_x86_gcc.lo: No such file or directory\n../libtool: line 1152: X-MD: command not found\n../libtool: line 1152: X-MP: command not found\n../libtool: line 1152: X-MF: command not found\n../libtool: line 1152: Xgoogle/protobuf/stubs/.deps/atomicops_internals_x86_gcc.Tpo: No such file or directory\n../libtool: line 1152: X-c: command not found\n../libtool: line 1203: Xgoogle/protobuf/stubs/atomicops_internals_x86_gcc.lo: No such file or directory\n../libtool: line 1208: libtool: compile: cannot determine name of library object from `': command not found\nmake[2]: *** [google/protobuf/stubs/atomicops_internals_x86_gcc.lo] Error 1\nmake[1]: *** [all-recursive] Error 1\nmake: *** [all] Error 2\n```\n\nAny info would be most helpful. \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61698924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61700941", "body": "Though it's still a mystery as to why I can't do this on my mac, as a side-note, it seems you can install it via homebrew.  Found a little more out about it. Found this thread on Stackoverflow:\n\n> `https://stackoverflow.com/questions/21775151/installing-google-protocol-buffers-on-mac`\n> \n> There are some issues with building protobuf 2.4.1 from source on a Mac. There is a patch that also has to be applied. All this is contained within the homebrew protobuf241 formula, so I would advise using it.\n> \n> To install protocol buffer version 2.4.1 type the following into a terminal:\n> \n> `brew tap homebrew/versions`\n> `brew install protobuf241`\n> \n> If you already have a protocol buffer version that you tried to install from source, you can type the following into a terminal to have the source code overwritten by the homebrew version:\n> \n> `brew link --force --overwrite protobuf241`\n> \n> Check that you now have the correct version installed by typing:\n> \n> `protoc --version`\n> \n> It should display 2.4.1\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61700941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61701239", "body": "Also found this somewhat related post about using Mac pre-built binaries. Thought I would also post it here for developers that run into a similar issue. \n\n`https://code.google.com/p/protobuf/issues/detail?id=270`\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61701239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "abyss7": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/61840142", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/61840142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "dlitz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/62210109", "body": "@xfxyjwf Done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/62210109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "vlajos": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/62521201", "body": "I have signed it already.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/62521201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "N0rFych": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/62688670", "body": "I suggest adding info about autogen.sh to vsprojects/readme.txt\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/62688670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "thedrow": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/62927314", "body": "+1. You can at least create deb/rpm packages using fpm.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/62927314/reactions", "total_count": 1, "+1": 0, "-1": 1, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "xiaofeng-gg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/63413481", "body": "On Mon, Nov 17, 2014 at 4:28 PM, David Tesler notifications@github.com\nwrote:\n\n> Dear friends,\n> \n> Please add my project to your third-party/add-ons list, I call it Friends\n> of ProtoBuf!\n> \n> The project is located at https://github.com/protobufel/protobuf-el ,\n> very near you at GitHub :)\n> \n> I've implemented 100% ProtoBuf 2.6.1 compatible:\n> 1. Java .proto parser and \"canonical\"\n>    FileDescriptorProto/FileDescriptor/FileDescriptorSet(-s) builder (passes\n>    ALL ProtoBuf .proto(-s) tests)\n> 2. enhanced DynamicMessage/Builder combining all relevant features of\n>    the ProtoBuf's DynamicMessage.Builder and GeneratedMessage.Builder,\n>    including hierarchical sub-builders (passes ALL relevant, - and adapted, -\n>    original tests)\n> 3. Java JSR-341 Expression Language 3.0 with Protocol Buffers 2.6.1,\n>    including DynamicMessage/Builder and any GeneratedMessage/Builder\n> 4. CRUD queries with JSR-341 EL 3.0 and Protocol Buffers 2.6.1\n> \n> In addition, there is a very efficient file scanning and multi-root\n> resource processing, general use, library, and the Java extended regex\n> implementation.\n> \n> I know, this list of add-ons is on your Google Pages, so pardon me for\n> bothering you here :)\n> \n> Looking forward to be at your service, if I can.\n> \n> I can help add it to the third-party addons page (the other utilities\n> https://github.com/google/protobuf/wiki/Third-Party-Add-ons#Other_Utilities\n> section). Could you suggest a one-line description for your project?\n> \n> Sincerely,\n> your protobufel friend\n> David Tesler\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/protobuf/issues/85.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63413481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63535586", "body": "Added. Thanks for contributing to protobuf!\n\nOn Mon, Nov 17, 2014 at 9:06 PM, David Tesler notifications@github.com\nwrote:\n\n> ProtoBuf with Java EE7 Expression Language 3.0; pure Java ProtoBuf Parser\n> and Builder.\n> \n> This the shortest I can come up with\n> \n> Thank you so much for your print response and help!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/protobuf/issues/85#issuecomment-63423386.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63535586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64498763", "body": "Autoconf macro AC_ARG_WITH(java) will support both --with-java and\n--without-java. The latter will be interpreted as --with-java=no. It can\nalso differential the case of no flags being passed and let us choose what\nto do.\n\nOn Tue, Nov 25, 2014 at 4:51 PM, Jisi Liu notifications@github.com wrote:\n\n> I think we should use positive logic, e.g. --with-java, --with-python,\n> etc. Not sure the current flag library can then accept --without-java, etc\n> as negative values of the flags.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/protobuf/issues/107#issuecomment-64498457.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64498763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/12028904", "body": "Teboring sent a CL integrating the change back to google3 and I noticed\nthis change. Guess nobody are actually using this code path.\n\nOn Mon, Jul 6, 2015 at 5:08 PM, Jisi Liu notifications@github.com wrote:\n\n> Hmm, I didn't remember. The HashFcn, probably doesn't work as the key\n> compare function either for std::map and std::set. Is this reported by some\n> users?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/protobuf/commit/4065a31644cf44fd84cc30491a61c4e59d0f2e2a#commitcomment-12028721\n> .\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/12028904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21628976", "body": "On Tue, Dec 9, 2014 at 10:05 PM, krishnanm86 notifications@github.com\nwrote:\n\n> In src/google/protobuf/compiler/python/python_generator.cc\n> https://github.com/google/protobuf/pull/126#discussion-diff-21585640:\n> \n> > @@ -580,39 +580,34 @@ void Generator::PrintServiceDescriptor(\n> >    printer_->Print(\"])\\n\\n\");\n> >  }\n> > \n> > +\n> > +void Generator::printService(const ServiceDescriptor& descriptor, bool stub,bool cls) const{\n> > -   if (stub)\n> > -       printer_->Print(\n> \n> Would it be acceptable if I : 1) Fix the tabs/ other google casing issues\n> 2) Change the X into Symbol 3) Make the PrintService take just one string\n> parameter instead of multiple booleans?\n> \n> I suggest keeping the original two PrintServiceStub() PrintServiceClass()\n> method and extract the common part of these two methods to a\n> PrintDescirptorKeyAndModuleName() mehtod.\n> \n> \u2026 <#14a32cdc580b1f73_>\n> On Tue, Dec 9, 2014 at 11:34 PM, Feng Xiao notifications@github.com\n> wrote: In src/google/protobuf/compiler/python/python_generator.cc <\n> https://github.com/google/protobuf/pull/126#discussion-diff-21568852>: >\n> @@ -580,39 +580,34 @@ void Generator::PrintServiceDescriptor( >\n> printer_->Print(\"])\\n\\n\"); > } > > + > +void Generator::printService(const\n> ServiceDescriptor& descriptor, bool stub,bool cls) const{ > + if (stub) > +\n> printer_->Print( Google C++ Style Guide forbids the use of tab. Code should\n> be indented using spaces. \u2014 Reply to this email directly or view it on\n> GitHub https://github.com/google/protobuf/pull/126/files#r21568852.\n>  -- ----------------------------------------------------- I dare do all\n> that may become a man; Who dares do more, is none - Macbeth, twelfh night!\n> Regards Krishna\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/protobuf/pull/126/files#r21585640.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21628976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24214915", "body": "On Wed, Feb 4, 2015 at 2:33 PM, dmaclach notifications@github.com wrote:\n\n> In src/google/protobuf/compiler/command_line_interface_unittest.cc\n> https://github.com/google/protobuf/pull/193#discussion_r24126637:\n> \n> > -    \"syntax = \\\"proto2\\\";\\n\"\n> > -    \"message Foo {}\\n\");\n> > -  CreateTempFile(\"bar.proto\",\n> > -    \"syntax = \\\"proto2\\\";\\n\"\n> > -    \"import \\\"foo.proto\\\";\\n\"\n> > -    \"message Bar {\\n\"\n> > -    \"  optional Foo foo = 1;\\n\"\n> > -    \"}\\n\");\n> >   +\n> > -  Run(\"protocol_compiler --dependency_out=$tmpdir/manifest \"\n> > -      \"--test_out=$tmpdir --proto_path=$tmpdir bar.proto\");\n> >   +\n> > -  ExpectNoErrors();\n> >   +\n> > -  ExpectFileContent(\"manifest\",\n> > -                    \"$tmpdir/manifest: $tmpdir/foo.proto\\\\n\"\n> \n> normally the file would be:\n> ... : \\\n> \\\n> \\\n> ...\n> \n> where for a main.c of:\n> #include \"main.h\"\n> \n> int main() {\n> return 0;\n> }\n> \n> cc -MMD main.c\n> \n> you are going to get:\n> \n> main.o: main.c main.h\n> \n> our code is not going to set correctly. I would expect for the cpp\n> compiler that we would actually generate\n> \n> foo.pb.cc foo.pb.h : foo.proto\n> \n> Thoughts? I think the current code will actually work for my needs, but it\n> is certainly not a correct solution as far as I can tell.\n> \n> Protoc has one difference from gcc: protoc can generate different set of\n> files for different languages, where as gcc is tied to C/C++. This means\n> the output of protoc varies from language. And sometimes it's may not be\n> tied with any language at all. For example, users may just want to find all\n> imports of a certain .proto file and build a protodb for them. For this\n> reason I think it's better to avoid any language specific files in the\n> generated dependency file and make it a general purpose dependency file\n> that could be used for any language.\n\nI'm working from \"\n\n> http://make.mad-scientist.net/papers/advanced-auto-dependency-generation/\n> \".\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/protobuf/pull/193/files#r24126637.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24214915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "virtuald": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/63427233", "body": "Looking forward to python3 support!\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63427233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63922063", "body": "I would love to see a python 3 compatible official protobuf available by Christmas.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63922063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64992592", "body": "FWIW, using the current trunk of protobuf, the only change I had to make to the package after installation was change a number of str(\"\", \"utf-8\") references in descriptor_pb2.py. Oddly enough, the protobuf I have installed from homebrew (2.6.1) generates _pb2.py files with a function that looks like this:\n\n```\n_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))\n```\n\nAnd it uses that to encode strings instead like this:\n\n```\ndefault_value=_b(\"\").decode('utf-8')\n```\n\nSo.. not sure why the descriptor_pb2.py file is out of date. If someone could push those changes into that file, then I believe trunk would at least _work_ on python3 -- but obviously #66 would be even better. \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64992592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64993111", "body": "I installed the current trunk on OSX with python 3.4.2, and everything works fine.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64993111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64993250", "body": "So, I stand corrected. When I install protobuf properly, it installs/runs from trunk without any noticable problems now. Python 3.4.2 on OSX. Now someone just needs to push an updated package to pypi... :) \n\nIt would be nice to get better python3 support in trunk to support the edge cases properly, as @tseaver mentions. \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64993250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20697604", "body": "Might make more sense to move this block up to line 44, instead of having the if statement down here.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20697604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20697660", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20697660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "phansson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/63446842", "body": "@jspal  I notice you're compiling using the Solaris Studio compiler.  Try compiling using GNU C/C++ compiler instead.\n\nIf not installed then do as follows:\n\n```\npkg install pkg://solaris/developer/build/gnu-make\npkg install pkg://solaris/developer/gcc-45\npkg install pkg://solaris/system/header\npkg install pkg://solaris/developer/build/autoconf\npkg install pkg://solaris/developer/build/automake-110\n```\n\nActually not sure they are all needed for Protobuf.\n\nHere are some general guidelines (not specific to Protobuf). I've stolen them from [here](http://unix.stackexchange.com/questions/72882/solaris-development-host).\n\n#### General recommendations when building software packages on Solaris\n\nSo you grabbed a software package from the Internet and now want to build it on Solaris ? Here are some general recommendations:\n- Always use GNU tar to unpack, don't use Solaris' own tar. So do `gtar xf foo.tar` rather than `tar xf foo.tar` or whatever. Yes in 99.99% of the cases Solaris' tar will work just fine for you but there are some subtle differences between the two for example if the tar file contains soft links.\n- Use GNU make rather than Solaris' make For example when you are told to do this: `make all` then instead do `MAKE=gmake gmake all`.\n- You will generally have less trouble using GNU C/C++ to build rather than Solaris Studio because chances are that the makefiles and the compile options etc have only been tested with GNU C/C++ compiler.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63446842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Catstyle": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/63930531", "body": "i also encounter the same isuue, even thought i put \"../\" in include_dirs of setup.py, another error appear\ni am sure i had compiled protoc: \n./autogen.sh && ./configure && make && make check\nsudo make install && sudo ldconfig\n\ngoogle/protobuf/pyext/descriptor.cc: In function \u2018void google::protobuf::python::cdescriptor_pool::Dealloc(google::protobuf::python::PyDescriptorPool_)\u2019:\n`google/protobuf/pyext/descriptor.cc:250:8: warning: \u2018auto\u2019 will change meaning in C++0x; please remove it [-Wc++0x-compat]\ngoogle/protobuf/pyext/descriptor.cc:250:13: error: \u2018it\u2019 does not name a type\ngoogle/protobuf/pyext/descriptor.cc:253:3: error: expected \u2018;\u2019 before \u2018delete\u2019\ngoogle/protobuf/pyext/descriptor.cc:253:16: error: could not convert \u2018((self->google::protobuf::python::PyDescriptorPool::classes_by_descriptor != 0u) ? (self->google::protobuf::python::PyDescriptorPool::classes_by_descriptor->google::protobuf::hash_map<const google::protobuf::Descriptor_, _object_>::~hash_map(), operator delete(((void_)self->google::protobuf::python::PyDescriptorPool::classes_by_descriptor))) : 0)\u2019 from \u2018void\u2019 to \u2018bool\u2019\ngoogle/protobuf/pyext/descriptor.cc:254:60: error: expected \u2018)\u2019 before \u2018;\u2019 token\ngoogle/protobuf/pyext/descriptor.cc: In function \u2018const google::protobuf::Descriptor\\* google::protobuf::python::cdescriptor_pool::RegisterMessageClass(google::protobuf::python::PyDescriptorPool_, PyObject_, PyObject_)\u2019:\ngoogle/protobuf/pyext/descriptor.cc:303:3: warning: \u2018auto\u2019 will change meaning in C++0x; please remove it [-Wc++0x-compat]\ngoogle/protobuf/pyext/descriptor.cc:303:8: error: \u2018ret\u2019 does not name a type\ngoogle/protobuf/pyext/descriptor.cc:305:8: error: \u2018ret\u2019 was not declared in this scope\ngoogle/protobuf/pyext/descriptor.cc: In function \u2018PyObject_ google::protobuf::python::cdescriptor_pool::GetMessageClass(google::protobuf::python::PyDescriptorPool_, const google::protobuf::Descriptor_)\u2019:\ngoogle/protobuf/pyext/descriptor.cc:326:3: warning: \u2018auto\u2019 will change meaning in C++0x; please remove it [-Wc++0x-compat]\ngoogle/protobuf/pyext/descriptor.cc:326:8: error: \u2018ret\u2019 does not name a type\ngoogle/protobuf/pyext/descriptor.cc:327:7: error: \u2018ret\u2019 was not declared in this scope\ngoogle/protobuf/pyext/descriptor.cc:334:1: warning: control reaches end of non-void function [-Wreturn-type]\ngoogle/protobuf/pyext/descriptor.cc: At global scope:\ngoogle/protobuf/pyext/descriptor.cc:67:42: warning: \u2018google::protobuf::python::g_descriptor_pool\u2019 defined but not used [-Wunused-variable]\nerror: command 'gcc' failed with exit status 1`\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63930531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tuctboh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/63958076", "body": "Yes, make check is fine.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/63958076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64406991", "body": "Hi. Not sure what to do about that update... Does this mean you'll address it in Release 3.0.0, for now I just need to go without this test?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64406991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hepin1989": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/64010063", "body": "I am using that version 2.6.1 with netty 4.1.0 beta3,every thing is ok\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64010063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "srenault": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/64050374", "body": "Ok thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64050374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64258195", "body": "Ok, the complete proto definition is:\n\n```\nmessage Vertice {\n  required string id = 1;\n  required string name = 2;\n  repeated string edges = 3;\n  repeated StopTime stopTimes = 4;\n}\n\nmessage StopTime {\n  required string tripId = 1;\n  required string arrival = 2;\n  required string departure = 3;\n  required string stopId = 4;\n  required int32 pos = 5;\n}\n\nmessage CalendarDates {\n  repeated CalendarDate calendarDates = 1;\n}\n\nmessage CalendarDate {\n  required string serviceId = 1;\n  required string date = 2;\n  required int32 exceptionType = 3;\n}\n```\n\nHow I can help you to resolve this issue ?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64258195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64282348", "body": "Just to know; do you plan to work on this issue in next days. If not, perhaps you can guide me to a valid PR.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64282348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "whoooami": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/64144649", "body": "protoc --version\nlibprotoc 2.4.1\nI had make install it with https://github.com/google/protobuf/releases/download/2.6.1/protobuf-2.6.1.tar.bz2 .\nThank you!\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64144649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64309488", "body": "@xfxyjwf It works! really appreciate that! Thank you again!\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64309488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rofl0r": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/64295449", "body": "yay, that's good news. it seems to work at least on mips now.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64295449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "fizbin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/64440525", "body": "Closing to redo commit comment correctly.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64440525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64781343", "body": "Oh crud, I hadn't meant to update git with my work address. Yes, that's me too - I'll go sign the same CLA with my work account too.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64781343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64783014", "body": "Confirmed. Both fizbin@gmail.com and daniel.martin@crowdstrike.com are the same person (me).\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64783014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64784413", "body": "If it would be more convenient for me to close this request and reopen it with commits all authored by the same email address, let me know.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64784413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20992190", "body": "Right. Will do.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20992190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27922014", "body": "This can't be final any more because it isn't set from inside the `static {}` block directly. If your static block calls a static method, and that method sets then variable, then even if the method is `private static` and not called from anywhere else, the variable it sets can't be `static`.\n\nIf this is an issue, I may have a way to work around this. Will probably take until the weekend at least though.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27922014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27970132", "body": "The problem with that is that I _am_ Daniel Martin. I have two email addresses - with different Google accounts - and I've signed the CLA with both of them, pointing to the same github account. Apparently the CLA bot can't handle that, so I'll redo all the commits with the fizbin@gmail address.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27970132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Ang3lus": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/64457824", "body": "CLA submitted.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64457824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "googlebot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/64732166", "body": "CLAs look good, thanks!\n\n<!-- ok -->\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64732166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64781353", "body": "CLAs look good, thanks!\n\n<!-- ok -->\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64781353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64782929", "body": "We found a Contributor License Agreement for you (the sender of this pull request) and all commit authors, but as best as we can tell these commits were authored by someone else.  If that's the case,  please add them to this pull request and have them confirm that they're okay with these commits being contributed to Google.  If we're mistaken and you did author these commits, just reply here to confirm.\n\n<!-- need_author_consent -->\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64782929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64983124", "body": "CLAs look good, thanks!\n\n<!-- ok -->\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64983124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65014106", "body": "CLAs look good, thanks!\n\n<!-- ok -->\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65014106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65316444", "body": "CLAs look good, thanks!\n\n<!-- ok -->\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65316444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65325597", "body": "CLAs look good, thanks!\n\n<!-- ok -->\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65325597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65543142", "body": "Thanks for your pull request.\n\nIt looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA) at https://cla.developers.google.com/.\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check the [information on your CLA](https://cla.developers.google.com/clas) or see this help article on [setting the email on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\nOnce you've done that, please reply here to let us know.  If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65543142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65545537", "body": "CLAs look good, thanks!\n\n<!-- ok -->\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65545537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65873822", "body": "Thanks for your pull request.\n\nIt looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA) at https://cla.developers.google.com/.\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check the [information on your CLA](https://cla.developers.google.com/clas) or see this help article on [setting the email on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\nOnce you've done that, please reply here to let us know.  If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65873822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "nevillmo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/64739825", "body": "Thanks. Will waiting for your formal release.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/64739825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "MSumulong": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/65137092", "body": "I haven't worked with Qt under mobile platforms but I have gotten Qt and protobuf working on Linux and Windows platforms. These links have helped me tremendously: \n- https://vilimpoc.org/blog/2013/06/09/using-google-protocol-buffers-with-qmake/\n- https://github.com/bitcoin/bitcoin/blob/master/share/qt/protobuf.pri\n- http://code.google.com/p/ostinato/source/browse/protobuf.pri\n\nYou basically include a protobuf.pri file into your project.pro file by adding the following lines:\n\n```\nPROTOS = a.proto b.proto\ninclude(protobuf.pri)\n```\n\nThe protobuf.pri file would then use the protoc compiler to compile the .proto files for your C++ application to use.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65137092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "amoldeshpande": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/65150232", "body": "The new VS2010+ file extension is .vcxproj and is not compatible with VS2008 format .vcproj. I can pull support for the old compiler completely if you prefer.\nSorry about the temp files. I thought I removed them. Will fix that when I get home tonight.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65150232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65182975", "body": "ok, I only found the 6 generated files, and have deleted those.  Do you want me to nuke support for VS2008 as well ?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65182975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65295406", "body": "well, making a new directory for each new version of visual studio seemed worse to me, but I'll separate them and make new PR once i figure out how to do that in git.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65295406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65351220", "body": "ok, i've removed the 2013 project files. let me know where you want them checked in and i'll do that after you accept this set of code changes.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65351220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "williamkibira": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/65187364", "body": "Thanks for your reply Michael . I actually found a way to build the\nrequired libraries for Google Protocol buffers. I using an Android.mk file\nand config.h meant to be used to build libraries with the NDK, then i went\nahead and built the libraries .\n\nusing the flags / Directives for Qmake in my pro file , i was able to to\nlink the appropriate architectures .\n\nandroid{\nequals(ANDROID_TARGET_ARCH, armeabi){\n  LIBS += -L$$PWD/libs/android/armeabi-v7a -lprotobuf-2.5.0\n\n LIBS += -L$$PWD/libs/android/armeabi-v7a   -lgnustl_shared\n\n INCLUDEPATH += $$PWD/libs/android/armeabi-v7a\n\n DEPENDPATH += $$PWD/libs/android/armeabi-v7a\n\n}\n\n}\n\nI think i am going to write some sort of tutorial or information point , i\njust don't know where to put that information :( , have an application\nrunning for Android and i have it for three architectures x86, armeabi and\narmeabi-v7a\n\nOn Tue, Dec 2, 2014 at 12:24 AM, Michael B. Sumulong <\nnotifications@github.com> wrote:\n\n> I haven't worked with Qt under mobile platforms but I have gotten Qt and\n> protobuf working on Linux and Windows platforms. These links have helped me\n> tremendously:\n> \n>    -\n>    https://vilimpoc.org/blog/2013/06/09/using-google-protocol-buffers-with-qmake/\n> - https://github.com/bitcoin/bitcoin/blob/master/share/qt/protobuf.pri\n> - http://code.google.com/p/ostinato/source/browse/protobuf.pri\n> \n> You basically include a protobuf.pri file into your project.pro file by\n> adding the following lines:\n> \n> PROTOS = a.proto b.proto\n> include(protobuf.pri)\n> \n> The protobuf.pri file would then use the protoc compiler to compile the\n> .proto files for your C++ application to use.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/protobuf/issues/96#issuecomment-65137092.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65187364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Ivoz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/65225988", "body": "@gpshead would you be fine with only supporting python 2.6+? Current readme.txt mentions 2.4.\n\nSingle-source cross python support is, FTR, like 10x easier if you only support python 2.6+ and 3.3+.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65225988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21434625", "body": "Additionally, it would be great _not_ to encourage people to use `easy_install` anymore. It is entirely deprecated in deference to [pip](http://pip.pypa.io). For one thing, easy_install is completely unable to uninstall packages.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21434625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "VikramTiwari": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/65542729", "body": "Resolution for Mac:\nInstall protobuf module for python\n\nUsing easy install:\nsudo easy_install --upgrade protobuf\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65542729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65545534", "body": "Completed the CLA agreement as Individual\n\nThanks and Regards!\n\n---\n\nVikram Tiwari https://google.com/+VikramTiwari\n\nOn Thu, Dec 4, 2014 at 11:54 AM, googlebot notifications@github.com wrote:\n\n> Thanks for your pull request.\n> \n> It looks like this may be your first contribution to a Google open source\n> project, in which case you'll need to sign a Contributor License Agreement\n> (CLA) at https://cla.developers.google.com/.\n> \n> If you've already signed a CLA, it's possible we don't have your GitHub\n> username or you're using a different email address. Check the information\n> on your CLA https://cla.developers.google.com/clas or see this help\n> article on setting the email on your git commits\n> https://help.github.com/articles/setting-your-email-in-git/.\n> \n> Once you've done that, please reply here to let us know. If you signed the\n> CLA as a corporation, please let us know the company's name.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/google/protobuf/pull/118#issuecomment-65543142.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65545534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21356233", "body": "Ah! Sorry. My mistake. I raised the issue without going through complete project documentation. Thanks for the reference. :+1: \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21356233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "jcanizales": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/65736967", "body": "I'm confused: why does the makefile try to download a version of gtest that might or might not work, if the version that's supposed to work is already copied in the source tree it's trying to compile?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/65736967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/11466120", "body": "Unfortunately, Cocoapods gives trouble if the podspec isn't in the root of the repository. From my experience, at least it won't pick up the license file correctly, and it won't let dependent projects use the :git notation to refer to the library. On gRPC I had decided to stop fighting the tool and give it what it wanted: the podspec in the root of the repo.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/11466120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/comments/11468598", "body": "Done: sent PR #451.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/11468598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/comments/13012800", "body": "This is missing a comma at the end :)\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/13012800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "ellabeth6500": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/8670572", "body": "I speak norwegian. option:mulighet? to early.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/8670572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/comments/8672037", "body": "My computer i new. I can`t say yes or no! \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/8672037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/comments/8672049", "body": "I am studuing\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/8672049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "hassox": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/9017196", "body": "Is there any information on where to find the proto3 specification?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/9017196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/comments/9017271", "body": "I found https://github.com/google/protobuf/releases/tag/v3.0.0-alpha-1 but I'm wondering if there's any more information available. \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/9017271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/comments/9018166", "body": "thanks. Any idea of timeline or any discussion of extensions, map and any that I could get a look at earlier?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/9018166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/comments/9019923", "body": "kk thanks. It's a bit hard to plan for when there's no information out there :\\  Thankyou for the update though.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/9019923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "wilsonwen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/10114998", "body": "\u53ea\u662f\u56e0\u4e3a\u5728\u4eba\u7fa4\u4e2d\u591a\u770b\u4e86\u4f60\u4e00\u773c\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/10114998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "alfredkcp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/10125327", "body": "This line is incorrect for 3.0 and caused the issue 692 bug. The proper check should be about \"field->containing_oneof()\" because there will always be a has_() for each oneof.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/10125327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "lovesitdoll": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/10620435", "body": "lovesitdolls\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/10620435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "cnepveu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/10653512", "body": "\"Android\", me thinks.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/10653512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "onecityuni": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/10711246", "body": "J2me/MANIFEST. in\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/10711246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/comments/10711302", "body": "find_packages \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/10711302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/comments/10711321", "body": "== 0\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/10711321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "attilaolah": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/11087217", "body": "This seems to be what caused #333.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/11087217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "marrisan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/11437469", "body": "Leave a line note\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/11437469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "iphydf": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/11888901", "body": "Where is this GG_ULONGLONG defined? It's not defined anywhere is this repository.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/11888901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "mountgellert": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/11915105", "body": "I can see APTCA being removed as part of this checkin; any plans readding it?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/11915105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/comments/15145377", "body": "can you confirm it was added back?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/15145377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "sandeeprawat": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/12793669", "body": "Finally (y)\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/12793669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "louiscryan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/13671212", "body": "I know this is orthogonal but at some point IOException should die\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/13671212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/comments/13671268", "body": "for a ByteBuf impl we can use putInt if the Endian-ness matches, same for long\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/13671268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/comments/13671314", "body": "I suspect benchmarking will indicate that you can get rid of this\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/13671314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/comments/13671414", "body": "Potential optimization to use pre-computed table of int -> varint bytes. Possibly useful as most protobufs have a small no. of fields with low ordinals.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/13671414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/comments/13671420", "body": "Same note about int's here\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/13671420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/comments/13671442", "body": "static methods should move into the WireFormat class\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/13671442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/comments/13671469", "body": "Avoid object construction here if possible\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/13671469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/comments/13671487", "body": "Incurs object creation overhead :(\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/13671487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/comments/13672078", "body": "Some background reading....\n\nhttp://psy-lob-saw.blogspot.com/2012/12/encode-utf-8-string-to-bytebuffer-faster.html\n\nalso I believe the built in String.getBytes() encoding has gotten a lot faster in Java 8. Take a look at java.lang.StringCoding \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/13672078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "leif81": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/13828802", "body": "Oops, the commit message should have said PR #783 instead.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/13828802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "damienmg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/16349455", "body": "@davidzchen : I think this has broken the python test suite, can you have a look? http://ci.bazel.io/job/protobuf/92/\n\n/cc @philwo\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/16349455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/16365427", "body": "Thanks for tracking that!\n\nOn Fri, Feb 26, 2016 at 11:17 PM David Z. Chen notifications@github.com\nwrote:\n\n> I have root-caused the test failures. Interestingly, they are not caused\n> by this patch but by a bug in the Python launcher where it does not check\n> whether the file is a directory when looking for the python binary.\n> \n> The fix is simple. I have opened bazelbuild/bazel#981\n> https://github.com/bazelbuild/bazel/issues/981 for the bug.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/protobuf/commit/985c968443e5124327fb600a91856192df4476ac#commitcomment-16365245\n> .\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/16365427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/17065057", "body": "This change broke build with Bazel and sandboxing enabled, see http://ci.bazel.io/job/protobuf/136/ (bisected to find the culprit).\n\nThe exact log:\n\n```\n$ bazel build //:protoc\nINFO: Found 1 target...\nERROR: /usr/local/google/home/dmarting/toto/protobuf/BUILD:271:1: Linking of rule '//:protoc' failed: namespace-sandbox failed: error executing command <user_home>/.cache/bazel/_bazel_dmarting/c28d9280fb33934092856a1adca4fe91/protobuf/_bin/namespace-sandbox ... (remaining 13 argument(s) skipped).\nbazel-out/local_linux-fastbuild/bin/libprotoc_lib.a(java_generator_factory.pic.o): In function `google::protobuf::compiler::java::ImmutableGeneratorFactory::NewExtensionGenerator(google::protobuf::FieldDescriptor const*) const':\njava_generator_factory.cc:(.text+0x265): undefined reference to `google::protobuf::compiler::java::ImmutableExtensionLiteGenerator::ImmutableExtensionLiteGenerator(google::protobuf::FieldDescriptor const*, google::protobuf::compiler::java::Context*)'\nbazel-out/local_linux-fastbuild/bin/libprotoc_lib.a(java_message_lite.pic.o): In function `google::protobuf::compiler::java::ImmutableMessageLiteGenerator::Generate(google::protobuf::io::Printer*)':\njava_message_lite.cc:(.text+0x1b82): undefined reference to `google::protobuf::compiler::java::ImmutableExtensionLiteGenerator::ImmutableExtensionLiteGenerator(google::protobuf::FieldDescriptor const*, google::protobuf::compiler::java::Context*)'\njava_message_lite.cc:(.text+0x1b9b): undefined reference to `google::protobuf::compiler::java::ImmutableExtensionLiteGenerator::Generate(google::protobuf::io::Printer*)'\njava_message_lite.cc:(.text+0x1baa): undefined reference to `google::protobuf::compiler::java::ImmutableExtensionLiteGenerator::~ImmutableExtensionLiteGenerator()'\njava_message_lite.cc:(.text+0x1f41): undefined reference to `google::protobuf::compiler::java::ImmutableExtensionLiteGenerator::~ImmutableExtensionLiteGenerator()'\nbazel-out/local_linux-fastbuild/bin/libprotoc_lib.a(java_message_lite.pic.o): In function `google::protobuf::compiler::java::ImmutableMessageLiteGenerator::GenerateExtensionRegistrationCode(google::protobuf::io::Printer*)':\njava_message_lite.cc:(.text+0x394e): undefined reference to `google::protobuf::compiler::java::ImmutableExtensionLiteGenerator::ImmutableExtensionLiteGenerator(google::protobuf::FieldDescriptor const*, google::protobuf::compiler::java::Context*)'\njava_message_lite.cc:(.text+0x3961): undefined reference to `google::protobuf::compiler::java::ImmutableExtensionLiteGenerator::GenerateRegistrationCode(google::protobuf::io::Printer*)'\njava_message_lite.cc:(.text+0x396d): undefined reference to `google::protobuf::compiler::java::ImmutableExtensionLiteGenerator::~ImmutableExtensionLiteGenerator()'\njava_message_lite.cc:(.text+0x3a14): undefined reference to `google::protobuf::compiler::java::ImmutableExtensionLiteGenerator::~ImmutableExtensionLiteGenerator()'\ncollect2: error: ld returned 1 exit status\nTarget //:protoc failed to build\nUse --verbose_failures to see the command lines of failed build steps.\nINFO: Elapsed time: 28.883s, Critical Path: 27.78s\n```\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/17065057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "davidzchen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/16362977", "body": "Looking.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/16362977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/16365245", "body": "I have root-caused the test failures. Interestingly, they are not caused by this patch but by a bug in the Python launcher where it does not check whether the file is a directory when looking for the `python` binary.\n\nThe fix is simple. I have opened bazelbuild/bazel#981 for the bug.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/16365245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "tjrileywisc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/16552350", "body": "Hi, it looks like the tutorials [here](https://developers.google.com/protocol-buffers/docs/pythontutorial#writing-a-message) are out of date after this change. As the tutorial is written, there are Person messages not People messages. Found this trying to run the updated list_people.py from the github repo, so I saw a 'AddressBook has no attribute 'people'' error.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/16552350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "andrewharp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/16979819", "body": "I'm trying to update Tensorflow to use a newer version of protobuf, but am having some trouble with this commit.\n\nWith no other change than bumping our protobuf version up to this commit from the preceding, I get this error:\n\n```\n$ bazel build -c opt //tensorflow/core:core\nERROR: /tmp/tf-update-pb/tensorflow/tensorflow/core/BUILD:74:1: no such package '': BUILD file not found on package path and referenced by '//tensorflow/core:protos_all_cc'.\n```\n\nI then added:\n\n```\nnew_local_repository(\n  name = \"python\",\n  path = __workspace_dir__ + \"/google/protobuf/util/python\",\n)\n```\n\nto our WORKSPACE file, but this made no difference. Any ideas?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/16979819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "shinjiyu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/17246587", "body": "beta2's what's new doesn't contain this commit~~~~~\nso when I am trying  to compile pb with NDK  ,I don't what to deal with the micro  HAVE_PTHREAD.\n\nbtw  it should be \"-DHAVE_PTHREAD\"  not \"-DHAVE-PTHREAD\"   in the comment.~.>~\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/17246587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "hobein": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/18314102", "body": "Since you removed the csproj files and moved to .NET Core for building, how can we build the library for .net 3.5 in order to target Unity engine ?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/18314102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/comments/18332934", "body": "Thank you for your advises. I was able to generate the dll, and run the unit test in Visual Studio (not `dotnet test`)\nBy the way, the correct configuration to add to the JSON file is\n\n```\n\"net35\": { \"buildOptions\": { \"define\": [\"DOTNET35\"] } },\n```\n\nAs it seems to work well, why not putting this change in the official repository ?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/18332934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "sheffatguidance": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/18433805", "body": "Hi, I'm new to contributing back, so I don't know if this is the appropriate place to flag an error in the README write-up --please let me know if it isn't-- but I felt I should notify someone of some documentation that had me chasing my tail for a bit.\n\nThe example code under the \"API\" heading of the JS README indicates that `deserializeBinary` can be called directly on a Message variable; this does not appear to be the case.  After some digging in the test code (which thankfully was indicated in the README), I discovered that `deserializeBinary` was called more like this:\n\n> `var msg = new proto.jspb.test.TestProto3();`\n> \n> `// Set some fields on msg...`\n> \n> `var serialized = msg.serializeBinary();`\n> **`msg = proto.jspb.test.TestProto3.deserializeBinary(serialized);`**\n\nUpdating the README to reflect this --or updating the messages to behave as indicated in the current README-- might save some other users some trouble in the short-term, before the JS protobuf feature is ready and fully documented.\n\nApart from that hiccup, the alpha javascript release seems to be working very well!  Thanks so much to everyone involved in this project :smiley:\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/18433805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/comments/18436030", "body": "No problem!  The issue is at [https://github.com/google/protobuf/issues/1869](https://github.com/google/protobuf/issues/1869).\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/18436030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "aelam": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/20067488", "body": "If I have a pod which is dependent on protobuf. I have to need add a GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS in my podspec \r\nIt's a little unconvenient ", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/20067488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "paulb777": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/20112199", "body": "Why 7.1 and not 7.0?", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/20112199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "patspam": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/20868761", "body": "This is outside of DOTNET35 conditional compilation, but .NET 3.5 `System.IO.Stream' doesn't support CopyTo, which leads to:\r\n\r\n```\r\nByteString.cs(160,20): error CS1061: Type `System.IO.Stream' does not contain a definition for `CopyTo' and no extension method `CopyTo' of type `System.IO.Stream' could be found. Are you missing an assembly reference?\r\n```", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/20868761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "aaronhudon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/21584183", "body": "Jon, is there any way I can have you reconsider this decision?  I have numerous situations where the byte[] payload (not small) needs to handed off to another processor and a clone of the data is an unnecessary expense.  I made significant use of the \"Unsafe\" feature in v2 c# protobuf.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/21584183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/comments/21584701", "body": "Understood, but it seemed fair in the past to have the \"Unsafe\" scope for those needing the performance.\r\nI would be fine with a new namespace like **ByteString.TotallyUnsafeDontUseThisUnlessYouKnowWhatYourDoing**", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/21584701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/comments/21584924", "body": "Appreciate your replies.  I'll give this one more go (should have described the situation in more detail) and then move on.  The messages I am processing have embedded messages (bytes) that are being delegated.\r\n```\r\nmessage Request\r\n{\r\n    string target = 1;\r\n    uint32 service = 2;\r\n    bytes payload = 3;\r\n}\r\n```\r\n\r\nRecipient cracks into \"Request\", parses \"target\", \"service\" and then appropriately relays the \"payload\".  This is where I want to avoid cloning the payload - it's already been allocated and just needs to be sent along.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/21584924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/comments/22380901", "body": "Should we be concerned that this MemoryStream is not being disposed?\r\n`var memoryStream = new MemoryStream(capacity);`\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/22380901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jjpepper": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/21965548", "body": "Similar issue needs to be fixed in metadata_lite.h:170", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/21965548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "hhxsv5": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/21978814", "body": "About renaming encode/decode, do you have considered compatible strategies with lower version?", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/21978814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "geoffpike": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/22266642", "body": "Looks good to me.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/22266642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jpushpendradolphin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/22971753", "body": "nice concept", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/22971753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "zhangkun83": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/23656432", "body": "I think it's fine to drop support for 10.7, if it is what using libc++ implies.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/23656432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/comments/23657395", "body": "I found out the 10.7 incompatibility when I was trying this out on my old MacBook Air.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/23657395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27933625", "body": "Done.\nThe only cross-compilation that I have tested is building 32-bit artifact on 64-bit systems. Theoretically we can build Windows artifacts on Linux with the help of MinGW, but I have not tested it.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27933625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27933650", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27933650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27941467", "body": "I just added the options for cross-compiling for Windows on Linux. Unfortunately MinGW for Linux will add `libwinpthread-1.dll` dependency which cannot be removed. So we still have to build Windows artifacts on Windows.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27941467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27990371", "body": "The flag doesn't work for me :)\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27990371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "KindDragon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/25853053", "body": "Please rollback this changes and return here `LIBPROTOC_EXPORT`.  This breaks down `grpc`", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/25853053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "nlopezgi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/26118572", "body": "My protobuf bazel builds started failing with this CL. I run tests on both a debian8-clang and an ubuntu-gcc environments. Tests fail on both environments with a similar error message:\r\n\r\nMessage on debian8-clang (gcr.io/cloud-marketplace/google/clang-debian8)\r\nERROR: /protobuf/BUILD:473:1: Linking of rule '//:test_plugin' failed (Exit 1): clang failed: error executing command \r\n  (cd /root/.cache/bazel/_bazel_root/c10d995b71ee2cb34bd3247d67c66df9/execroot/com_google_protobuf && \\\r\n  exec env - \\\r\n    PWD=/proc/self/cwd \\\r\n  /usr/local/bin/clang -o bazel-out/k8-fastbuild/bin/test_plugin -pthread '-fuse-ld=gold' -B/usr/local/bin -B/usr/bin -Wl,-S -Wl,@bazel-out/k8-fastbuild/bin/test_plugin-2.params)\r\n\r\nUse --sandbox_debug to see verbose messages from the sandbox\r\nbazel-out/k8-fastbuild/bin/_objs/protobuf_lite/src/google/protobuf/repeated_field.pic.o:repeated_field.cc:function google::protobuf::internal::RepeatedPtrFieldBase::AddWeak(google::protobuf::MessageLite const*): error: undefined reference to 'typeinfo for google::protobuf::internal::ImplicitWeakMessage'\r\nbazel-out/k8-fastbuild/bin/_objs/protobuf_lite/src/google/protobuf/repeated_field.pic.o:repeated_field.cc:function google::protobuf::internal::ImplicitWeakMessage::ImplicitWeakMessage(): error: undefined reference to 'vtable for google::protobuf::internal::ImplicitWeakMessage'\r\n/usr/bin/ld.gold: the vtable symbol may be undefined because the class is missing its key function\r\nbazel-out/k8-fastbuild/bin/_objs/protobuf_lite/src/google/protobuf/repeated_field.pic.o:repeated_field.cc:function google::protobuf::internal::ImplicitWeakMessage::ImplicitWeakMessage(google::protobuf::Arena*): error: undefined reference to 'vtable for google::protobuf::internal::ImplicitWeakMessage'\r\n/usr/bin/ld.gold: the vtable symbol may be undefined because the class is missing its key function\r\nclang-6.0: error: linker command failed with exit code 1 (use -v to see invocation)\r\nTarget //:protobuf_test failed to build\r\n\r\n\r\nMessage on ubuntu-trusty-gcc (stock ubuntu:trusty with gcc + bazel installed):\r\nERROR: /project_src/BUILD:473:1: Linking of rule '//:test_plugin' failed (Exit 1): gcc failed: error executing command \r\n  (cd /root/.cache/bazel/_bazel_root/7e958634aed2e0b9513fa7cce861a282/execroot/com_google_protobuf && \\\r\n  exec env - \\\r\n    PWD=/proc/self/cwd \\\r\n  /usr/bin/gcc -o bazel-out/k8-fastbuild/bin/test_plugin -pthread '-fuse-ld=gold' -Wl,-no-as-needed -Wl,-z,relro,-z,now -B/usr/bin -B/usr/bin -pass-exit-codes -Wl,-S -Wl,@bazel-out/k8-fastbuild/bin/test_plugin-2.params)\r\nbazel-out/k8-fastbuild/bin/_objs/protobuf_lite/src/google/protobuf/repeated_field.pic.o:repeated_field.cc:function google::protobuf::internal::RepeatedPtrFieldBase::AddWeak(google::protobuf::MessageLite const*): error: undefined reference to 'typeinfo for google::protobuf::internal::ImplicitWeakMessage'\r\nbazel-out/k8-fastbuild/bin/_objs/protobuf_lite/src/google/protobuf/repeated_field.pic.o:repeated_field.cc:function google::protobuf::internal::ImplicitWeakMessage::ImplicitWeakMessage(): error: undefined reference to 'vtable for google::protobuf::internal::ImplicitWeakMessage'\r\n/usr/bin/ld.gold: the vtable symbol may be undefined because the class is missing its key function\r\nbazel-out/k8-fastbuild/bin/_objs/protobuf_lite/src/google/protobuf/repeated_field.pic.o:repeated_field.cc:function google::protobuf::internal::ImplicitWeakMessage::ImplicitWeakMessage(google::protobuf::Arena*): error: undefined reference to 'vtable for google::protobuf::internal::ImplicitWeakMessage'\r\n/usr/bin/ld.gold: the vtable symbol may be undefined because the class is missing its key function\r\ncollect2: error: ld returned 1 exit status\r\nTarget //:protobuf_test failed to build", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/26118572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/comments/26149970", "body": "thanks for the quick response, our builds are now green", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/26149970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Aque51": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/26517576", "body": "require to build software", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/26517576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "nsuke": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21159661", "body": "It's to retain constness of the generated string fields.\n\nI wondered why the original code attributed const to string fields as well as\nto message fields.\n\nAnd it seemed to me it was to prevent the other part of the generated code\nfrom calling non-const methods of those supposed-to-be-immune default instances'\nfields by mistake.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21159661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "krishnanm86": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21585640", "body": "Would it be acceptable if I :\n\n1) Fix the tabs/ other google casing issues\n2) Change the X into Symbol\n3) Make the PrintService take just one string parameter instead of multiple\nbooleans?\n\nOn Tue, Dec 9, 2014 at 11:34 PM, Feng Xiao notifications@github.com wrote:\n\n> In src/google/protobuf/compiler/python/python_generator.cc\n> https://github.com/google/protobuf/pull/126#discussion-diff-21568852:\n> \n> > @@ -580,39 +580,34 @@ void Generator::PrintServiceDescriptor(\n> >    printer_->Print(\"])\\n\\n\");\n> >  }\n> > \n> > +\n> > +void Generator::printService(const ServiceDescriptor& descriptor, bool stub,bool cls) const{\n> > -   if (stub)\n> > -       printer_->Print(\n> \n> Google C++ Style Guide forbids the use of tab. Code should be indented\n> using spaces.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/protobuf/pull/126/files#r21568852.\n\n## \n\n---\n\nI dare do all that may become a man; Who dares do more, is none - Macbeth,\ntwelfh night!\nRegards\n       Krishna\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21585640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "lukaszx0": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21608296", "body": "The name collides with already existing and maintained since 2011 project - https://github.com/localshred/protobuf. Can we change it to `google-protobuf` for example and host on rubygems.org?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21608296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "bf4": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21691190", "body": "Any reason not to check the exit code of this? `$?.success?`\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/21691190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "rgeary1": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23968097", "body": "Yes this should be file_set.  Originally I was calling GetSourceLocation, which is a private member of FileDescriptor.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/23968097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "isaiah": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22439090", "body": "You are correct, it's supported. I'll update the code.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22439090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22576277", "body": "I'll replace that with the copyright comment, this is intellij's default setting :)\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22576277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22576621", "body": "I don't really understands how it works, to turn a signed long to unsigned. Could you shed me some light here?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22576621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22625620", "body": "This is not allowed by jruby\n\n```\nNameError: `descriptor' is not allowable as an instance variable name\n      msgclass at com/google/protobuf/jruby/RubyDescriptor.java:148\n```\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/22625620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24851610", "body": "Seems like a unintentional change by vim keybinding, my fault.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/24851610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "cconroy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/26444148", "body": "Updated the match to be case sensitive and added a note in the header file about optional mangling.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/26444148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/26510550", "body": "Are you sure you want it to always be mangled?\n\nThat means we go from e.g. `TestConflictingEnumNames_NestedConflictingEnum_and` to `TestConflictingEnumNames_NestedConflictingEnum_and_` ?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/26510550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/26528650", "body": "@pherl I've updated to always mangle and renamed to `EnumValueName`\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/26528650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/26534877", "body": "fixed\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/26534877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/26537667", "body": "What if we put this behind a command line flag? `--objc-compatible` or some such?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/26537667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/26547420", "body": "Ah, in that case we can probably just wait for the official support. If the obj c compiler doesn't already have a keyword list, you might want to use this. I don't see objective C in the source tree?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/26547420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ejona86": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27676423", "body": "s/arhitecture/architecture/\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27676423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27983115", "body": "Just in case anyone wants to try to remove that dependency, I came across this:\nhttps://github.com/wkhtmltopdf/wkhtmltopdf/commit/64e3f87ea05303c6a0331c8b13eeeb92f60e3b3c\n\nWe may just need -static flag.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27983115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "tamird": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27701929", "body": "Good catch! Fixed.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27701929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27701948", "body": "Done - both are in `Internal` now\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/27701948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/26602907", "body": "missed a space\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/26602907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28184106", "body": "It does, but dyld (the OS X linker) links the full path at link-time, so\nDYLD_LIBRARY_PATH isn't needed in the simple case described here.\nOn Apr 10, 2015 4:11 PM, \"Joshua Haberman\" notifications@github.com wrote:\n\n> In python/README.md\n> https://github.com/google/protobuf/pull/276#discussion_r28176356:\n> \n> > -     To build the C++ implementation run:\n> > -     $ python setup.py build --cpp_implementation\n> > -     To build, test, and use the C++ implementation, you must first compile\n> > -     libprotobuf.so:\n> >   +\n> > -     $ (cd .. && make)\n> >   +\n> > -     On OS X:\n> \n> I think DYLD_LIBRARY_PATH on OS X behaves like LD_LIBRARY_PATH on Linux?\n> http://stackoverflow.com/questions/3146274/is-it-ok-to-use-dyld-library-path-on-mac-os-x-and-whats-the-dynamic-library-s\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/protobuf/pull/276/files#r28176356.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28184106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28184244", "body": "I'm not sure, Python is not my first language. For now, we're definitely\ntesting both in Travis, though the setup is a bit brittle.\n\nLet's move forward with this for now. Maybe open an inside an issue to\ntrack your suggestion?\nOn Apr 10, 2015 4:20 PM, \"Joshua Haberman\" notifications@github.com wrote:\n\n> In python/google/protobuf/internal/message_python_test.py\n> https://github.com/google/protobuf/pull/276#discussion_r28177045:\n> \n> > @@ -1,54 +0,0 @@\n> > -#! /usr/bin/python\n> \n> I agree that these tests are obsolete and should be removed.\n> \n> However I would like to (not necessarily in this PR) to add two tests that\n> verify we are testing the pure-Python and the C++ implementation,\n> respectively. But to do that we'd need a way to conditionally run either\n> one test or the other, depending on whether --cpp_implementation was\n> specified or not. Do you know an easy way to do that?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/protobuf/pull/276/files#r28177045.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28184244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28188397", "body": "Nah, that caveat still applies because DYLD_LIBRARY_PATH is not even\nconsulted when the full path of the library is linked in. I tried every\nvariation I could think of, and this is the only thing that worked. If you\nfind another solution, I'm all ears, really.\nOn Apr 10, 2015 7:39 PM, \"Joshua Haberman\" notifications@github.com wrote:\n\n> In python/README.md\n> https://github.com/google/protobuf/pull/276#discussion_r28188273:\n> \n> > -     To build the C++ implementation run:\n> > -     $ python setup.py build --cpp_implementation\n> > -     To build, test, and use the C++ implementation, you must first compile\n> > -     libprotobuf.so:\n> >   +\n> > -     $ (cd .. && make)\n> >   +\n> > -     On OS X:\n> \n> I guess what I'm getting at is that it would be nice if the README didn't\n> have to have an entire separate section to address OS X, brew, etc. Your\n> caveat about Brew doesn't apply if the user sets DYLD_LIBRARY_PATH, right?\n> Instead it could just say something like:\n> \n>   You must make libprotobuf.so dynamically available. You can either\n>   install libprotobuf you built earlier, or set LD_LIBRARY_PATH\n>   (DYLD_LIBRARY_PATH on OS X):\n> \n>   $ export LD_LIBRARY_PATH=../src/.libs\n>   $ export DYLD_LIBRARY_PATH=../src/.libs     # for OS X\n>   or\n>   $ (cd .. && make install)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/protobuf/pull/276/files#r28188273.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28188397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "traff": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28535165", "body": "If it's possible, let's better not drop 2.4 and 2.5. They are still used.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28535165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28543642", "body": "I'm PyCharm IDE lead and dev and just have checked the usage statistics for the 2014. Python 2.5 and Python 2.4 use 1.41% and 0.16% of PyCharm users respectively. So we probably will abandon supporting 2.4 soon, but 2.5 should be still supported. If protobuf will drop support for 2.5 we'll have to bundle 2 different versions and I doubt that it would be easy to match them with 2 different versions on Java side. So it could be quite a pain.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/28543642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}}}}