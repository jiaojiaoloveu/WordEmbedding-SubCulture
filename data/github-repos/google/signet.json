{"_default": {"1": {"belgoros": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/99", "title": "Faraday call fails behind a proxy", "body": "Hello, I've just had the same issue, - the same code works fine out of proxy but fails if there is proxy.\r\nHere is what the `env` command displays in the Terminal:\r\n```\r\nhttp_proxy=http://host-name.net:80\r\nHTTP_PROXY=http://host-name.net:80\r\nhttps_proxy=http://host-name.net:80\r\nHTTPS_PROXY=http://host-name.net:80\r\nno_proxy=127.0.0.1,localhost,10.1*.*.*,....some.others.sites.com\r\nNO_PROXY=127.0.0.1,localhost,10.1*.*.*,som.others.sites.com\r\n```\r\nHere is the error I get when trying to access Google APIs:\r\nIPAddr::InvalidAddressError (invalid address), see below function:\r\n```\r\ndef auth_client\r\n    Signet::OAuth2::Client.new(\r\n      authorization_uri: 'https://accounts.google.com/o/oauth2/auth',\r\n      token_credential_uri: 'https://www.googleapis.com/oauth2/v3/token',\r\n      client_id: ENV['GOOGLE_KEY'], client_secret: ENV['GOOGLE_SECRET'],\r\n      scope: 'email profile', redirect_uri: 'http://localhost:4200/oauth2callback'\r\n    ).tap do |client|\r\n      client.code = params['code']\r\n      client.fetch_access_token!\r\n    end\r\n  end\r\n```\r\nThe line that fails is:\r\n```\r\nclient.fetch_access_token!\r\n```\r\nHere are my settings:\r\n```\r\nruby 2.4.0\r\ngem 'google-api-client', '~> 0.19.3'\r\ngem 'jwt', '~> 2.1.0'\r\ngem 'signet', '~> 0.8.1'\r\ngem 'figaro', '~> 1.1.1'\r\nrails '5.1.4'\r\n```\r\nIf I unset the proxy setting, here is the error I have:\r\n```\r\nFaraday::ConnectionFailed (Failed to open TCP connection to www.googleapis.com:443 (No route to host - connect(2) for \"www.googleapis.com\" port 443)):\r\n```\r\nAny ideas on what is wrong here ? Thank you.\r\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/99/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "phallguy": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/90", "title": "Use case vs standard oauth2 gem", "body": "I apologize if this is covered elsewhere already but couldn't really find what I'm looking for. I'm doing some up-front research for a project trying to decide which dependencies to take on. The [oauth2](https://rubygems.org/gems/oauth2) gem from intridea has ben around for quite some time and is used by several other ruby projects when working with OAuth 2 APIs. \r\n\r\nWhy would a project use signet instead of the standard oauth2 gem?", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/90/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rusikf": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/88", "title": "Detect expired token", "body": "How to detect if user oauth2 offline token has been expired and refresh it ?", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/88/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/288963080", "body": "this still doesn't works,  @sqrrrl do you have any ideas for this critical bug?\r\nNow i set `authorization.expires_in = Time.now + 1_000_000` as suggested, but when it expires, it gives error again :worried: ", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/288963080/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rems75": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/87", "title": "Missing \"approval_prompt\" in authorization_uri", "body": "I wrote a Rails app synching with Google Calendar. I'm currently trying to obtain new refresh_tokens from the API as a bug prevented me from saving them in the first place.\r\nI am using approval_prompt: force (or prompt: consent I have tried both), the code is: \r\n   \r\n    google_client = Signet::OAuth2::Client.new({\r\n         client_id: ENV.fetch('GOOGLE_CLIENT_ID'),\r\n         client_secret: ENV.fetch('GOOGLE_CLIENT_SECRET'),\r\n         authorization_uri: 'https://accounts.google.com/o/oauth2/auth',\r\n         scope: Google::Apis::CalendarV3::AUTH_CALENDAR_READONLY,\r\n         redirect_uri: 'http://localhost:8000/google_calendar',\r\n         access_type: \"offline\",\r\n         approval_prompt: \"force\"\r\n      })\r\n\r\n    URI = google_client.authorization_uri.to_s\r\n\r\nThe URI does not contain the approval_prompt that I would expect (and when I add it manually, I do get prompted for consent). Am I missing something? ", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/87/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sporkmonger": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/84", "title": "Signet still uses client_id and client_secret parameters instead of Authorization header", "body": "\"Including the client credentials in the request-body using the two parameters is NOT RECOMMENDED and SHOULD be limited to clients unable to directly utilize the HTTP Basic authentication scheme (or other password-based HTTP authentication schemes).  The parameters can only be transmitted in the request-body and MUST NOT be included in the request URI.\"\r\n\r\nBack in draft 7 or so when Signet was originally written, it was the other way around, where `client_id` and `client_secret` were the recommended approach. However nowadays, lots of auth servers don't support these parameters (auth servers MAY support them) and Signet should switch to doing what the final RFC recommends.", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/84/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/51", "title": "Comparing signatures with `==` is bad security practice due to byte-wise short-circuit being a potential source of subtle timing attack.", "body": "If you compare user supplied signature to calculated signature using `==`, Ruby will helpfully abort the comparison early if you have a mismatch between the signatures. There's at least a few places in Signet that do this, with the OAuth 1 server code that @mechazoidal contributed being the most exposed to the issue. In a nutshell, you probably want a non-short-circuited equality check for that.\n\nRealistically, I doubt anyone could actually build an exploit for this in large part due to Ruby's wildly varying runtimes for web requests, but I don't really want to find out the hard way, so this should probably get eliminated as even a possibility, just in case.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/51/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/7", "title": "signet as Faraday middleware?", "body": "With the switch to Faraday, it might make sense to offer signet as Faraday middleware rather than acting as a front-end to it.  E.g.\n\n```\nclient = Signet::OAuth2::Client.new...\naccess_token = ... # get access token\n\nconn = Faraday.new do |builder|\n  builder. user Signet::OAuth2::Client, access_token\nend\n\nconn.get(...)\n```\n\n(Copied from @sqrrrl's issue on the original Signet project.)\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/7/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/e18bed664a80dad013196caae01c93c9e05674a3", "message": "Preparing for 0.5.1 release."}, {"url": "https://api.github.com/repos/google/signet/commits/f8fd709c811554d146d001fc088e7f8d8ce3882b", "message": "Merge pull request #38 from andirayo/master\n\n@sporkmonger:  Added function-paramter to wrapping function in OAuth2-Client"}, {"url": "https://api.github.com/repos/google/signet/commits/915b1a8c5af9c0762b2d4bfee06902cd44d3f071", "message": "Merge pull request #36 from krautcomputing/token_credential_uri_as_hash_fixed\n\nAllow token_credential_url to be set to a Hash"}, {"url": "https://api.github.com/repos/google/signet/commits/96788e3ac150f4b05a268a54e6f5711e5cb20777", "message": "Just allow Rubinius to fail"}, {"url": "https://api.github.com/repos/google/signet/commits/e5c8c50c3f93ee83b633e101ca0332bac06ee8b3", "message": "Hopefully resolves persistent Travis build failures"}, {"url": "https://api.github.com/repos/google/signet/commits/e3a43dc90e4fd0dabcc7049d92c3e7b424d30a41", "message": "Merge pull request #35 from djpate/master\n\nAllow out of band authorization value for `redirect_uri`."}, {"url": "https://api.github.com/repos/google/signet/commits/7145ff99f5c0d3f7fcee76a601a91cf725e1d625", "message": "Updated gem file list to explicitly exclude Gemfile.lock."}, {"url": "https://api.github.com/repos/google/signet/commits/b76d7c4c3c7bacfe22a198500e3befb70a5e5f67", "message": "OAuth 1 now uses 'initialize passes responsibility to update!' pattern."}, {"url": "https://api.github.com/repos/google/signet/commits/37ff340131499e17ccf3355eadef076a483f8835", "message": "Clients should be serializable with caution."}, {"url": "https://api.github.com/repos/google/signet/commits/c3efb8b68cfdca8a50a6435c401cfd0665500d1b", "message": "Allow Hash objects to be used to initialize the authorization URI.\n\nFixes google/google-api-ruby-client#82."}, {"url": "https://api.github.com/repos/google/signet/commits/f6f146bd9ef15a9d94686f71ef35dd26c7616b5e", "message": "Drop whitespace."}, {"url": "https://api.github.com/repos/google/signet/commits/792349046c4672c5dad9fed675568962198d113a", "message": "Merge pull request #29 from AnalogJ/pass_through_parameters\n\nAdded ability to pass though custom parameters"}, {"url": "https://api.github.com/repos/google/signet/commits/f84af074c32b240399a72252b44bdd4f3a94ad7a", "message": "Lazy sidestep to conflict in .gitignore."}, {"url": "https://api.github.com/repos/google/signet/commits/2f7a82b902d811ee8499a435bd04d0874edd8d37", "message": "Whitespace pedantry."}, {"url": "https://api.github.com/repos/google/signet/commits/815456157105e8028834592c66bdd8e05b46b58e", "message": "Whitespace pedantry."}, {"url": "https://api.github.com/repos/google/signet/commits/79b123345fe9d792b444f4badd1aee499ff0ed8d", "message": "Whitespace pedantry."}, {"url": "https://api.github.com/repos/google/signet/commits/03c462c8346ae45be8ec8047a563524d2fb6aa61", "message": "Merge pull request #26 from AnalogJ/master\n\nadded missing oauth1 signature methods"}, {"url": "https://api.github.com/repos/google/signet/commits/8bd2651cf4b795194412c59c798ff98a7110a4f5", "message": "Merge pull request #19 from wyaeld/master\n\nFix specs failing due to use of Time.round"}, {"url": "https://api.github.com/repos/google/signet/commits/8667b5e54e1f17425e32fcc11fb62d77430c4db8", "message": "Merge pull request #17 from sanemat/feature/rubygems\n\nUse https://rubygems.org instead of :rubygems as source"}, {"url": "https://api.github.com/repos/google/signet/commits/e542e4678c5b66bb24ba9f15d9aaf6ae28369742", "message": "Merge pull request #12 from brainopia/master\n\nAdd support for expires_at parameter"}, {"url": "https://api.github.com/repos/google/signet/commits/94e79fc0b2a0977d782d450596d702272c2c3f16", "message": "Merge pull request #15 from nevir/patch-1\n\nFull jruby and rubinius coverage"}, {"url": "https://api.github.com/repos/google/signet/commits/3489337512b08c353f73c564a2d790dbf6b40fe6", "message": "Merge pull request #16 from nevir/patch-2\n\nDrop sudo from gem install"}, {"url": "https://api.github.com/repos/google/signet/commits/c0c03f086c817216c004544a345ba474b808eb17", "message": "Merge pull request #13 from kossnocorp/patch-1\n\nFix README"}, {"url": "https://api.github.com/repos/google/signet/commits/9cab82d488838ef45df2c689d60b3dad356aa813", "message": "Merge pull request #10 from sanemat/fix/invalid-regex-encoding\n\nFix invalid regex encoding"}, {"url": "https://api.github.com/repos/google/signet/commits/a54efa91987336744cc369d24f640b4a9f6aa063", "message": "Merge pull request #9 from sanemat/feature/build-2-0-0\n\nAdd Ruby2.0.0 build in Travis-ci, and allowed to fail"}, {"url": "https://api.github.com/repos/google/signet/commits/abc8ea847e332ebff1d066134a2e6fe4ebed64a4", "message": "Merge pull request #8 from sanemat/fix/invalid-encoding\n\nAdd magic comment US-ASCII for Ruby2.0.0"}, {"url": "https://api.github.com/repos/google/signet/commits/f4531aba1e3e4cac563660d6cc4cca0e8a47fa56", "message": "Merge pull request #6 from rmacklin/master\n\nfixed \"already initialized constant\" warnings"}, {"url": "https://api.github.com/repos/google/signet/commits/f9db9d4e36b26312eebd3fde6b4f37fb6a6c122d", "message": "See if switching to JDK7 helps fix the build for JRuby."}, {"url": "https://api.github.com/repos/google/signet/commits/780311d28c3f217e5a4b504fee4f8455efd1b544", "message": "Resolved a few issues with overly strict dependency requirements."}, {"url": "https://api.github.com/repos/google/signet/commits/f59c3b8b667a056480a62f0680ec7356a85e4f1a", "message": "Updated version and CHANGELOG."}, {"url": "https://api.github.com/repos/google/signet/commits/271bd3b75bd25b47f0fba7cf60553e00485fa274", "message": "Signet doesn't need to use IDN in its tests. No point slowing down CI."}, {"url": "https://api.github.com/repos/google/signet/commits/92bac58cfb005d1ef95ea4b4b5f47e38a51d9eba", "message": "Updated RSpec dependency."}, {"url": "https://api.github.com/repos/google/signet/commits/76b75f7942cdd8d0452c633da7e04d171dd50159", "message": "Merge pull request #3 from yakimaherald/master\n\nAdd OAuth1::Server"}, {"url": "https://api.github.com/repos/google/signet/commits/26a784700229f19460ac1da7c9b3052b08d1ec46", "message": "Merge pull request #2 from sqrrrl/master\n\nImprovements for Faraday usage"}, {"url": "https://api.github.com/repos/google/signet/commits/b8c0eceefa0a16d98073c49d157d15276808dbec", "message": "Merge pull request #1 from sqrrrl/master\n\nFix for assertion profiles"}, {"url": "https://api.github.com/repos/google/signet/commits/e2e84cbaf1043a6eabac39f6122aa65951c03994", "message": "Merging."}, {"url": "https://api.github.com/repos/google/signet/commits/e36bf56cf3fe301fae5d42572e7a489072b6d27b", "message": "Added note to explain the response format."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/5426381", "body": "Is the issue that assertion/extension grant types may not require a client ID or secret?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/5426381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/5469858", "body": "OK, in that case, I suspect the checks for client ID and secret should be reintroduced, but restricted only to the scenarios where they would apply. So you probably need to check the grant type before doing the check.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/5469858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/7151336", "body": "Fixed in 7a22c04.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/7151336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/8307053", "body": "Yeah, that issue is happening on master right now.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8307053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/11660888", "body": "Gotcha. Merging...\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/11660888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/13322550", "body": "Is this a change to the JWT spec?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/13322550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/15369232", "body": "The Travis test failures look legit. Please resolve for 1.8.7 and 1.9.2.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/15369232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/15430252", "body": "Uh oh... That sounds like it'll be a pain to resolve.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/15430252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/15686872", "body": "Can you produce a minimal test case? I've been completely unable to duplicate this. And this seems like the kind of thing that would cause a billion test failures if it were happening in anything but the edgiest of edge cases... \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/15686872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16399991", "body": "Is there a place to file bugs against the API console?\n\nIt doesn't work with [Pow](http://pow.cx/). Reports 'OAuth 2 redirect URL \"https://example.dev/oauth2callback\" is invalid.'\n\nDiscovered while trying to hunt this bug down. :-)\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16399991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16401480", "body": "Actually, the Signet test cases catch this already.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16401480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16403888", "body": "As expected, this is turning out to be incredibly difficult to track down. :cry:\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16403888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16406037", "body": "Aha. That's why I can't find it. I already fixed it. And I believe you are correct that that is the commit that did it. The `gsub!` is the culprit I think. Regardless, it's resolved in 2.3.4.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16406037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16562566", "body": "Master is passing. I'll merge and update if the failures come back.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16562566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/17140782", "body": "@brainopia Could you look at this? I think you were the last person to do anything with `expires_at`.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/17140782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/23200086", "body": "What's the use case here? My general feeling is \"Plaintext considered harmful.\"\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/23200086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/23239126", "body": "Add tests and I'll merge it.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/23239126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/23425477", "body": "spec/\nOn Aug 27, 2013 10:27 AM, \"Jason Kulatunga\" notifications@github.com\nwrote:\n\n> Hey @sporkmonger https://github.com/sporkmonger sure I can definitely\n> add some tests to the Plaintext method. I'm just a little confused as to\n> where the current testing scaffolding is located... I took a look through\n> all the folders in the app and I didn't see anything related to testing.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/google/signet/pull/26#issuecomment-23354028\n> .\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/23425477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/23600171", "body": "Build failed in some environments on `Signet::OAuth1::RSASHA1`. Not really clear to me why, but haven't looked into it in depth. It does appear to be the same error across several environments.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/23600171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/23743439", "body": "No worries at all. Everybody starts somewhere; welcome to the community! Truth is, everyone does this differently, there are no strictly right answers, though `compat` directories are a fairly common convention. Keeping compatibility code separate makes it easier to remove once an older version becomes completely unsupported. Requiring code \"just-in-time\" minimizes memory footprint for parts of the code that go unused.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/23743439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/24698209", "body": "Sorry about that. Been distracted w/ other stuff. Merging now.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/24698209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/25053608", "body": "Oh yay, conflicts. :-)\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/25053608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/25053745", "body": "Nah, it's just `.gitignore`.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/25053745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/25053875", "body": "All set! Sorry it took me so long to get around to it. :-/\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/25053875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/25284865", "body": "Seems like a reasonable request. Patches welcome. :-)\n\nAddressable is already a dependency. Just detect that its form encoded (ideally by looking at the `Content-Type` header) and use `Addressable::URI.form_unencode`.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/25284865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/35699470", "body": "I keep an eye on it. It doesn't really need much in the way of updates for the most part.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/35699470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/35699519", "body": "Please squash commits.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/35699519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/35760682", "body": "Also FYI @sqrrrl\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/35760682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/35762316", "body": "I'm fine w/ the original commit, but the two that follow it shouldn't be part of this PR. I'm going to cherry-pick, so no action required here.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/35762316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/35763232", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/35763232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/35764619", "body": "I'd like to see tests for this.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/35764619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/35842410", "body": "FYI, you don't need to close the old PR when updating. Just make changes to the branch and the PR is automatically updated. Makes it a lot easier to see the history of the changes.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/35842410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/35850274", "body": "Well, in this case, the commit history isn't important and can be preserved to some extent if needed by merging the commit messages. It's the comment history on GitHub for the issue that's valuable (which can get lost when you jump over to a new PR).\n\n`git rebase -i HEAD~2` and then change `pick` to `squash` as needed or just `git commit --amend` after `git add`ing the changed files.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/35850274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/36721042", "body": "This is in addition to standard OAuth 2?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/36721042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/36721408", "body": "I'd recommend using this instead: http://developer.xero.com/code-samples/libraries/using-the-xero-api-with-ruby/\n\nThe impression I'm getting from their docs is that it's either/or, not both/and. If you're doing a \"private application\" using the self-signed certificate, that's not OAuth and Signet is not applicable.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/36721408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/36796179", "body": "A `Faraday::Request` is just a `Struct`. I think you can just edit the `request.options` variable directly.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/36796179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/39283026", "body": "This needs tests.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/39283026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/39669153", "body": "Agree that treating all options as `Symbol`s is probably a positive change, even if they originate from a parse of something.\n\nIt's probably useful, by the way, to reserve the word 'sanitize' for when you mean sanitizing input for security and use 'normalize' when you mean converting to a more regular format. Spent a few minutes trying to figure out where the security implications were of this change... :-P\n\nDrop the recursive normalization; only modify top-level keys and the change looks good. I still don't agree that this is too small to bother testing, but it certainly is too small to split hairs over.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/39669153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/39750485", "body": "I've changed my mind. There _will_ be tests or this change will _not_ be accepted. There's far too much stuff you're trying to affect at once at this point to not be testing this.\n\nAgreed that rampant `Symbol` conversion could be a potential problem from a DoS perspective, though it's unlikely to be a common attack vector. However, I'm not sure how I see that \"just have Addressable handle it\" is the solution at all here? White-listing this stuff is not Addressable's problem and if a white-list were a need, it should be as close to the location of maybe malicious input as possible rather than as far away as possible, which is what you're proposing. For all intents and purposes, Addressable is already white-listing here by doing look-ups for specific `Symbol` keys. It will not create new `Symbol`s beyond the ones it's looking for. Any `Symbol`-based GC DoS attack surface would have to come from elsewhere. In fact, `to_sym` appears once and only once in the entire `uri.rb` file and that occurrence would not be vulnerable to the attack you're describing.\n\nAdditionally, `HashWithIndifferentAccess` is not a core Ruby class. I absolutely will not introduce an ActiveSupport dependency under any circumstances. Its absence has been intentional from day one in order to ensure that google-api-client would work seamlessly with any Ruby web framework (past or future). Other libraries implement `HashWithIndifferentAccess`, but you then have to be careful not to break compatibility with ActiveSupport for the people who are using Rails (most everybody).\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/39750485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/39755049", "body": "I did not misunderstand your proposed change. My previous understanding of the change matches your expanded explanation.\n\nMy preference would be 1. I'd also suggest that the interfaces to all methods that are currently resulting in `String` keys landing downstream in Addressable's `new` method get better documented to clearly indicate what they accept and what they don't.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/39755049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/40528154", "body": "Not particularly, no.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/40528154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/45439135", "body": "Please provide test case.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/45439135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/45439191", "body": "@sqrrrl When you push releases, you need to make sure you use the `rake gem:release VERSION=x.y.z` command, not just `rake gem:package`.\n\nI've added the missing tags (0.4.4 and 0.4.5 were also missing).\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/45439191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/61989574", "body": "@sqrrrl I do still object to this PR, most particularly the recursive key normalization. My gut reaction is still \"This is going to be buggy with a side of unintended consequences\", particularly in the absence of proper test coverage to prove otherwise. This PR adds no new tests covering its functionality and only updates a tiny handful of existing ones. I assume because they broke when he made this change. I'm more than a little worried that it may break existing code in the wild as well. If anyone wants to at least add some tests to this, I'll stop being ornery about it, but I really don't think recursively converting hash keys is a good idea here. At least Ruby 2.2 is going to have `Symbol` garbage collection FWIW.\n\nThat said, I do think this is a real bug which should be fixed \u2013 I just don't think this is the right fix.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/61989574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/62209321", "body": "Yeah, we need to eject RCov and replace w/ Simplecov.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/62209321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/62408026", "body": "Assuming answer to question above is 'yes', LGTM.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/62408026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/62408236", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/62408236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/62505233", "body": "Sure, but is that a documentation bug or an implementation bug? I'd be interested to know what their API actually does.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/62505233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/62505554", "body": "Actually, it sounds like `jruby-20mode` was maybe just straight unsupported from day 1?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/62505554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/73603573", "body": "In terms of non-short-circuited equality operations you could use, assuming a signature of 'pretendsignature', you can safely abort if the supplied signature is the wrong length (invalid signature, no information revealed), and `zip` on the pair of `'pretendsignature'.unpack('C*')` and `supplied_signature.unpack('C*')`, doing a bitwise `|` `reduce` on the output of `a ^ b`, and indicating a match if the final output is zero.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/73603573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/73604621", "body": "The other, possibly easier and more readable option is to do a double HMAC \u2013 of both the calculated value and then the attacker supplied value.\n\nIf:\n`HMAC(m, k) == their_signature`\nThen the following is also true:\n`HMAC(HMAC(m, k), k) == HMAC(their_signature, k)`\n\nBut in the second scenario, the attacker no longer has any control whatsoever over the timing of the thing being compared and should be unable to take advantage of the short circuit, while also maintaining readability of the code.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/73604621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/73617605", "body": "Yup, that looks right to me. Also more readable than what I was suggesting by virtue of not using the inscrutable `unpack`.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/73617605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/4354794", "body": "@sqrrrl Anything else pending on signet you want me to get in before I cut a release?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/4354794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/comments/6594630", "body": "@jagwire I just pushed a release, but didn't see #41 until after I'd done so.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/6594630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/comments/8503371", "body": "I assume the parameters in the form encoded body and JSON body are equivalent and otherwise identical once parsed into a `Hash`?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/8503371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/comments/8513536", "body": "Travis doesn't seem to have the `jruby-20mode` binary available anymore?\n\nMight need to move it to the allowed failures portion of the build matrix.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/8513536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/comments/9664234", "body": "This potentially has a timing attack against it due to byte-wise short-circuit of `==`.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/9664234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/comments/9664253", "body": "This potentially has a timing attack against it due to byte-wise short-circuit of `==`.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/9664253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/comments/9664317", "body": "This potentially has a timing attack against it due to byte-wise short-circuit of `==`.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/9664317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/comments/9664329", "body": "This potentially has a timing attack against it due to byte-wise short-circuit of `==`.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/9664329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": []}, "seuros": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/77", "title": "Replace faraday with HTTPI", "body": "@sqrrrl  \nRecently i was updating an application that has the the adsword gem, and i noticed that this gem use a different http wrapper than the rest of google's gem.\n\nDo you think it make sense to replace Faraday with HTTPI  ? i could do it in the coming days.\n\nAlso travis is not configured for this project.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/77/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/19d386a603411f558461d654ec1b8ffbf0f6250c", "message": "version bump"}, {"url": "https://api.github.com/repos/google/signet/commits/459017fe0315922f2d74f16acabb72642c238ed8", "message": "Fix Licence"}, {"url": "https://api.github.com/repos/google/signet/commits/25dab938e1cb4663f3cf01306431de449477bed2", "message": "test latest version of ruby"}, {"url": "https://api.github.com/repos/google/signet/commits/590ddd5cf02c82ea45b9bab6475a9306e555bc00", "message": "there is no rails here."}, {"url": "https://api.github.com/repos/google/signet/commits/642a1d25abf586843d6b264c1ad8d7d269271f3d", "message": "remove compact folder"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tbem": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/75", "title": "After upgraded to 0.7.3 i started to get \"Missing token endpoint URI\" Error message", "body": "I guys, after updating the gem to 0.7.3, the auth stop working fine. \n\nWhat i'm doing is this:\n\n``` ruby\n    client = Signet::OAuth2::Client.new(access_token: token)\n\n    service = Google::Apis::PlusV1::PlusService.new\n\n    service.authorization = client\n\n    profile = service.get_person('me', fields: 'displayName,emails/value,image,gender,id')`\n\n```\n\nwhen the request is done it throughs  \"Missing token endpoint URI\"  this is working with the previous version. \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/75/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dbackeus": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/50", "title": "Gemspec dependency version conflict with code", "body": "In your gemspec you have specified JWT version ~>1.0 and faraday version ~>0.9.\n\nBut inside your oauth 2 client you override the dependencies with incompatible versions.\n\nEnd result is it's impossible to use the signet gem with Bundler, which will install the gemspeced dependencies and subsequently raise error when trying to initialize the oauth client:\n\n```\n/home/runner/.rbenv/versions/2.1.3/lib/ruby/gems/2.1.0/gems/bundler-1.7.11/lib/bundler/rubygems_integration.rb:266:in `block in replace_gem': can't activate jwt (~> 0.1.4), already activated jwt-1.2.0. Make sure all dependencies are added to Gemfile. (Gem::LoadError)\n    from /home/runner/mynewsdesk/vendor/bundle/ruby/2.1.0/gems/signet-0.4.5/lib/signet/oauth_2/client.rb:25:in `<top (required)>'\n```\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/50/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jagwire": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/41", "title": "TypeError (Can't convert Hash into String) OAuth2 client", "body": "While I thought it was to be fixed in c3efb8b68cfdca8a50a6435c401cfd0665500d1b I'm still seeing this issue at oauth_2/client.rb:258\n\nI'm merely following the example from: https://developers.google.com/drive/web/credentials\n\nPlease advise.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/41/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/6527628", "body": "Not to be annoying, but did a release ever get cut to include these changes? I still see 0.5.0 on RubyGems...\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/6527628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "sqrrrl": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/11", "title": "Update id_token to match spec", "body": "Minor fix required to the id_token validation. The audience (aud) may now be either a string or array, validation will need to be updated.\n\nAlso worth improving the validation in general to check issued & expiration times.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/11/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/d5d3445adc273d2d730923f999e8cc7c14d62f6a", "message": "Mark test as pending util test data can be verified"}, {"url": "https://api.github.com/repos/google/signet/commits/621515ddeec1dfb6aef662cdfaca7ab30e90e5a1", "message": "Merge pull request #89 from pkern/master\n\nAdd the configured scope to the access token request."}, {"url": "https://api.github.com/repos/google/signet/commits/3d19c17c0ecf598a652364be82fd4c30728a7e78", "message": "Merge pull request #76 from foxtacles/master\n\nAdd DateTime conversion"}, {"url": "https://api.github.com/repos/google/signet/commits/ede9ac4a9dd915ba23107dae98c0eada6cd98e33", "message": "Merge pull request #78 from seuros/master\n\nDrop old code and test in recent version of ruby."}, {"url": "https://api.github.com/repos/google/signet/commits/45660a6a12e3b83dee8710295a77854e82a9fc66", "message": "Merge pull request #79 from chutzimir/expires_at_should_be_updated\n\nThe \"expires_at\" attribute should also be recalculated on refresh"}, {"url": "https://api.github.com/repos/google/signet/commits/7ae73a5e2bdaf80eb6027972190bd60a4ef289c8", "message": "Merge pull request #85 from koic/integer_unification\n\nInteger Unification for Ruby 2.4.0+"}, {"url": "https://api.github.com/repos/google/signet/commits/92cce13573ecef916c25d7d0db30c40e3d76ddae", "message": "Release 0.7.3"}, {"url": "https://api.github.com/repos/google/signet/commits/2ec58a60760775983b2b22f6f6c9cdd477f5f284", "message": "Relax exception check"}, {"url": "https://api.github.com/repos/google/signet/commits/d9060814dbe95701c6890be6a4cac7af88adb759", "message": "Bump version"}, {"url": "https://api.github.com/repos/google/signet/commits/d711d32c543f66e7a4a94d3333a06c7cba6e3755", "message": "Fix expiry check when expires_at is nil. Assume expired"}, {"url": "https://api.github.com/repos/google/signet/commits/4cd847a8522b2d51f36ff9dd281030b87fa9793b", "message": "Remove oauth1 google service spec since no longer supported by google"}, {"url": "https://api.github.com/repos/google/signet/commits/b85ed32d4595e4428157bd9a5c73a214d01821a7", "message": "Merge pull request #71 from MikhailSamolinov/master\n\nSupport for unix timestamps normalization on 32-bit system"}, {"url": "https://api.github.com/repos/google/signet/commits/c37e87bd4abf0daba5d8713ec84712e6c436738b", "message": "Merge pull request #72 from ysksn/master\n\nRemove redundant code"}, {"url": "https://api.github.com/repos/google/signet/commits/3149127cc73cb1224bb764e96244009e81cdd73d", "message": "Release 0.7.2"}, {"url": "https://api.github.com/repos/google/signet/commits/957a60783fb18fe8cb2ae6d0e026afa8ed54bf41", "message": "Bump rev"}, {"url": "https://api.github.com/repos/google/signet/commits/4cfbdebc3f60396629fb5214e5fac32d0af341b9", "message": "Don't aassume faraday middleware :("}, {"url": "https://api.github.com/repos/google/signet/commits/6cb7c677c9e1e849647ceb1a09dc319073324428", "message": "Release 0.7.1"}, {"url": "https://api.github.com/repos/google/signet/commits/c2eb67606b933ccbdac69fd37e3ff19621576879", "message": "Merge branch 'master' of https://github.com/google/signet"}, {"url": "https://api.github.com/repos/google/signet/commits/7280db20e4c50a48b58c1992d033b56b7f528be4", "message": "Fix issue with date parsing"}, {"url": "https://api.github.com/repos/google/signet/commits/d99f0f936b8e2460cb1ea17b2600ee1a87e0680b", "message": "Merge pull request #68 from fdhadzh/master\n\nFix readme"}, {"url": "https://api.github.com/repos/google/signet/commits/923fc11c5a4cc3f031f890a8b6964d989cb65a55", "message": "Update CHANGELOG.md"}, {"url": "https://api.github.com/repos/google/signet/commits/dd545b17117923e9aa31db774b9e1d584fe75aae", "message": "Update bundler before running tests"}, {"url": "https://api.github.com/repos/google/signet/commits/ddfb319c1ffcf63859361acce9ec63669e1b8594", "message": "Release 0.7.0"}, {"url": "https://api.github.com/repos/google/signet/commits/4e1f81a9c25263e2ad6d2844773d964c8103f822", "message": "Update changelog"}, {"url": "https://api.github.com/repos/google/signet/commits/a51b7283349c68e608733a8fe7f7288992283bc8", "message": "undo apply!/apply"}, {"url": "https://api.github.com/repos/google/signet/commits/4bbbfcb29bdc3202e9c9d613b987448f598a146b", "message": "Allow hurley as a client"}, {"url": "https://api.github.com/repos/google/signet/commits/37a74ac96a455a158c79978dd588d8255e86f223", "message": "Make timestamp handling more consistent."}, {"url": "https://api.github.com/repos/google/signet/commits/c3b0702e4189c78f8dd95e4b38a2e55b48c7c65d", "message": "Update tests, temporarily disable ones hitting dead URLs"}, {"url": "https://api.github.com/repos/google/signet/commits/601c251da73d7db16fcb46bb15e4acc8371ef5cd", "message": "Merge branch 'master' of https://github.com/google/signet"}, {"url": "https://api.github.com/repos/google/signet/commits/8b8f02883dae0d66b47de95cbdc2cb58249ff696", "message": "Merge pull request #64 from shreeve/fix-deep_hash_normalize\n\nsimplify code and don't die if old_hash is nil"}, {"url": "https://api.github.com/repos/google/signet/commits/a8f38251eb1690debcceb96202043f5990ad15cb", "message": "Merge branch 'master' of https://github.com/google/signet"}, {"url": "https://api.github.com/repos/google/signet/commits/bc904e5fc920864b9c9ffb47501890de6ebb8c71", "message": "mend"}, {"url": "https://api.github.com/repos/google/signet/commits/70f120d2fe16202118f846b98482ef28d9869cb1", "message": "Update travis config"}, {"url": "https://api.github.com/repos/google/signet/commits/086216b080520aea46d035f3ef687a6de2955430", "message": "Don't override SSL env"}, {"url": "https://api.github.com/repos/google/signet/commits/03bdf5f9ffdc90570fc40caa352a9629d1a904d1", "message": "Merge pull request #60 from saiqulhaq/master\n\nremove duplicate variable"}, {"url": "https://api.github.com/repos/google/signet/commits/5dee66eb0b7dda35df7d9d901105d934ff844760", "message": "Merge pull request #61 from tylerholien/remove-unused-dependency\n\nThe extlib gem is never used, so remove it from the gemspec."}, {"url": "https://api.github.com/repos/google/signet/commits/7ab96ebbcb45f210c288bec2aeae519628481859", "message": "Release 0.6.1"}, {"url": "https://api.github.com/repos/google/signet/commits/47502a1e4d402b203f30a191637cd0263c9d0708", "message": "Update changelog"}, {"url": "https://api.github.com/repos/google/signet/commits/0fc197696c82da63bdb84d4240090b6bfc578356", "message": "Merge branch 'master' of https://github.com/google/signet"}, {"url": "https://api.github.com/repos/google/signet/commits/84ee2670f3c81d4e38eaa5f65403b4177149d582", "message": "Ignore nil scope when creating JWT"}, {"url": "https://api.github.com/repos/google/signet/commits/c6ff6bda127c858f3bb22b61ddeaf163da8fec5f", "message": "Merge pull request #47 from samuelreh/patch-1\n\nFix Signet::OAuth2::Client.new example arguments"}, {"url": "https://api.github.com/repos/google/signet/commits/c47bfe7250a0de47605b8afe22e3dca84ee821b9", "message": "Merge branch 'blowmage-fix-warnings'"}, {"url": "https://api.github.com/repos/google/signet/commits/c71ce98e5035ea11de4032cf12d40fa0a5bd9779", "message": "Resolve merge conflicts"}, {"url": "https://api.github.com/repos/google/signet/commits/be09df5aa5fa54872b993602f63aa62274674d33", "message": "Merge branch 'swifthand-oauth2-authorization-uri-error'"}, {"url": "https://api.github.com/repos/google/signet/commits/2f54b2e8b9192ecfd32007edff724c51882f125d", "message": "Merge branch 'oauth2-authorization-uri-error' of https://github.com/swifthand/signet into swifthand-oauth2-authorization-uri-error"}, {"url": "https://api.github.com/repos/google/signet/commits/1cac501f5e1893cef8924ed1c307dff8955d7099", "message": "Fix broken tests due to JWT library change, update specs to remove old .should syntax"}, {"url": "https://api.github.com/repos/google/signet/commits/e91ada7c5ba9fd1561c5f073f67dfd8bdd5d4a45", "message": "Merge pull request #58 from APMG/mac-sslfix\n\nAdd ssl path to allow mac clients to accomplish cert chain link"}, {"url": "https://api.github.com/repos/google/signet/commits/08961df954e8b53d3ae784f500f160b9900c6150", "message": "Update changelog"}, {"url": "https://api.github.com/repos/google/signet/commits/f5a0ff00b8428f76dcd42979c4f6c09fadf9b375", "message": "Merge branch 'momer-fix-url-options-format'"}, {"url": "https://api.github.com/repos/google/signet/commits/56c1ef7a3d193392cde425299f062ea5fec1a6ac", "message": "Resolve merge conflict"}, {"url": "https://api.github.com/repos/google/signet/commits/ecb5816f9806ee0462f95fb332f2bb5cf274df95", "message": "Merge pull request #46 from google/build_cleanup\n\nBuild cleanup"}, {"url": "https://api.github.com/repos/google/signet/commits/d2ed19785b2b5fc4ec4bc77f351cb1b772695714", "message": "Remove jruby-20mode"}, {"url": "https://api.github.com/repos/google/signet/commits/97356d42851e3dd5e3a2544125d8f8c8dddbe763", "message": "Treat 'expires' as equivalent to 'expires_in' for Facebook"}, {"url": "https://api.github.com/repos/google/signet/commits/fcdf3ade1e68a4acafe45f29b53ce273963e6386", "message": "Drop 1.8.7/1.9.2 from travis config"}, {"url": "https://api.github.com/repos/google/signet/commits/8577d6ec67bcf089c378b4cf7c927f48ac3d716a", "message": "Update JWT version + add support for form encoded responses (issue #27)"}, {"url": "https://api.github.com/repos/google/signet/commits/ba127da94eec11d8dc9a3849cd56a694000e0e7e", "message": "Build scripts"}, {"url": "https://api.github.com/repos/google/signet/commits/ce73a31f17b32efb40832cb838064cb48ad5b90b", "message": "Update depdencies & specs to match new syntax. Cleanup build tasks."}, {"url": "https://api.github.com/repos/google/signet/commits/34adecdc2663fdbfc7139d09be3a700a09ea6bd1", "message": "Merge pull request #21 from jayred/master\n\nMethod update! should not overwrite client properties not passed in options hash"}, {"url": "https://api.github.com/repos/google/signet/commits/22a70a9223ffc09d8af9b1199c8ac148a43f9553", "message": "Merge pull request #23 from cc/add-support-for-prompt-param\n\nMakes prompt=consent rather than approval_prompt=force by default and does not set a default prompt value if approval_prompt is passed."}, {"url": "https://api.github.com/repos/google/signet/commits/4532135f5c3c923e75c39fd1871a8937627ef182", "message": "Merge pull request #20 from sqrrrl/master\n\nUpdate to Faraday 0.9"}, {"url": "https://api.github.com/repos/google/signet/commits/b39c1c288f9fc0c6dc0f5b5a7a103a412959af16", "message": "resolve merge conflict"}, {"url": "https://api.github.com/repos/google/signet/commits/1a53a2b110b35111f2d0fdc8ab8148960600f4e3", "message": "Update to faraday 0.9"}, {"url": "https://api.github.com/repos/google/signet/commits/1c39f721f2ce77262aa55fb33f4df4d4c82396bd", "message": "Minor release for postmessage support"}, {"url": "https://api.github.com/repos/google/signet/commits/4a063c363940c95acfa9d91054a5c0e646198c1f", "message": "Minor doc fix"}, {"url": "https://api.github.com/repos/google/signet/commits/6e0ffb7f18b178e5f10925d9a392596a2ab715c9", "message": "Fix me being stupid and not running rake spec before committing"}, {"url": "https://api.github.com/repos/google/signet/commits/87a9b75dcb2813f0a2d9ed853124f325873f2d31", "message": "Redcarpet->kramdown"}, {"url": "https://api.github.com/repos/google/signet/commits/34f61415fe518a4f21322c5275c0cbe9e496e898", "message": "Fix doc generation, stray unicode chars"}, {"url": "https://api.github.com/repos/google/signet/commits/6ffa1327f022fcc961c593fd5910a540e8c0ca3a", "message": "Allow 'postmessage' as a valid redirect_uri for Google"}, {"url": "https://api.github.com/repos/google/signet/commits/cd7ea5b7c942f94c1b1f40d1e03628c5c988b50f", "message": "Fix test using obsolete service"}, {"url": "https://api.github.com/repos/google/signet/commits/ff97f1cefb4b3c945bdb8e536243a821761c1562", "message": "Merge branch 'master' of https://github.com/google/signet"}, {"url": "https://api.github.com/repos/google/signet/commits/8e88fcf866c93d37b04a1693a34e672a6b391d2b", "message": "Release 0.4.4"}, {"url": "https://api.github.com/repos/google/signet/commits/53b4ee4802f12d9e19e377b16b103508532d58f7", "message": "Add assertion profile support"}, {"url": "https://api.github.com/repos/google/signet/commits/487f2a0ad5ff73961d03ebf5d218c86917e478b3", "message": "Optimize processing when passing in Faraday::Request objects in the\nclients to avoid recreating. Don't force body to be string when\nadding the credentials unless necessary (e.g. OAuth 1.0 form post)\nto allow use of Faraday middleware and/or streaming of large uploads."}, {"url": "https://api.github.com/repos/google/signet/commits/38896198e48984b517a70e2f059cd8389e22305d", "message": "Fix assertion profiles -- remove constraint that requires client_id/client_secret, ensure extension parameters are included in token requests"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/5430024", "body": "Yes, the JWT assertion profile doesn't include either of them as parameters since its in the assertion itself. Even some of the other profiles like user credentials don't explicitly require the two be set.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/5430024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/5470968", "body": "Hmm, not sure the spec supports making these required in any circumstance.\n\nhttp://tools.ietf.org/html/draft-ietf-oauth-v2-25#section-2.3.1\n\n```\nAlternatively, the authorization server MAY support including the\nclient credentials in the request body using the following\nparameters:\nclient_id\n     REQUIRED.  The client identifier issued to the client during\n     the registration process described by Section 2.2.\nclient_secret\n     REQUIRED.  The client secret.  The client MAY omit the\n     parameter if the client secret is an empty string.\n\nIncluding the client credentials in the request body using the two\nparameters is NOT RECOMMENDED, and should be limited to clients\nunable to directly utilize the HTTP Basic authentication scheme (or\nother password-based HTTP authentication schemes).  The parameters\ncan only be transmitted in the request body and MUST NOT be included\nin the request URI.\n```\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/5470968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/13512945", "body": "Yes, see http://tools.ietf.org/html/draft-ietf-oauth-json-web-token-06#section-4.1.3\n\n\"aud\" may be either an array of string/uris or just a single string/uri.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/13512945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16405044", "body": "My hunch is it was introduced around https://github.com/sporkmonger/addressable/commit/2069f252a747b89adf70ba9673cb3e39789f1ff0\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16405044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/22609109", "body": "Need to sign the CLA before I can merge - https://developers.google.com/open-source/cla/individual\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/22609109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/61564054", "body": "Already have a local branch for updating dependencies, should have an updated version soon.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/61564054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/61740553", "body": "Closing as unable to reproduce. Outside the clock moving backwards (which shouldn't ever happen, even with NTP adjusting clocks) there's no explanation for this.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/61740553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/61910279", "body": "@sporkmonger  - Unless there are strong objections, I'm inclined to merge as-is. Given that none of the hashes in question are the result of parsing user data (there are _values_ that are user data, but keys are bounded to the developer using the API) there's not much value in adding additional checks to whitelist keys.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/61910279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/61910355", "body": "Closing since this is duplicate of #40 \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/61910355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/61910384", "body": "Closing since this is duplicate of #40\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/61910384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/62225590", "body": "Yeah, did that already in a separate branch. @sporkmonger - please review #46\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/62225590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/62452882", "body": "Made one small tweak, based on a similar check intridea's oauth2 gem does to treat expires and expires_in equivalent to each other. Facebook is a bit odd. They document two different response types:\n\nhttps://developers.facebook.com/docs/facebook-login/manually-build-a-login-flow/v2.2#exchangecode\nhttps://developers.facebook.com/docs/facebook-login/access-tokens\n\nThe first shows the url-encoded response with 'expires', the 2nd is a spec compliant JSON response.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/62452882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/65168615", "body": "Hesitant to include this as it is a non-standard parameter. It's already possible to include non-standard params in the options hash when calling authorization_uri\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/65168615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/65860687", "body": "Fixed. See #46 \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/65860687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/65860728", "body": "Closed, see #46 \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/65860728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/73607821", "body": "```\ndef safe_compare a, b\n  check = a.bytesize ^ b.bytesize\n  a.bytes.zip(b.bytes) { |x, y| check |= x ^ y.to_i }\n  check == 0\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/73607821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/154570609", "body": "Removed in next version :)\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/154570609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/154571507", "body": "FYI, merged another PR that fixes the nil hash. Closing\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/154571507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/155875857", "body": "Really don't want to get further into the habit of accepting params in multiple formats. Much rather fix the serialization to JSON to write the URL out as a string instead.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/155875857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/155950629", "body": "FWIW, in the process of updating google-api-ruby-client and google-auth-library-ruby for better 3-legged OAuth2 support. First part was already committed and web support is coming shortly. Those enhancements better define token storage and exclude writing fields like the URLs since they're config, not user data. In other words, it won't suffer this problem.\n\nKeep an on google-auth-library-ruby for the rest of the changes over the next couple of weeks.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/155950629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/162656263", "body": "Should be fixed in 0.7\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/162656263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/166166396", "body": "D'oh! Looks like the older versions of api client omit the form encoding middleware. Just pushed 0.7.2 which should fix the issue (doesn't assume the middleware exists for faraday)\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/166166396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/227215833", "body": "This is fixed by #71 \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/227215833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/227219265", "body": "Fixed by #71 \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/227219265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/309812636", "body": "Please include unit tests. Code looks fine, just want to make sure we have tests to avoid regressions.", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/309812636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/309813393", "body": "Merged #79 instead", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/309813393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/309815216", "body": "What provider are you connecting to that has an issue? I didn't write the original implementation, but from what I can tell the code looks correct as-is. See https://oauth.net/core/1.0/#anchor22\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/309815216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/310215508", "body": "Will cut a release shortly.", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/310215508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/310466507", "body": "Thinking about this more, I don't think we can add this feature safely.\r\n\r\nThis has the potential to break apps with existing tokens. Let's say an app has a bunch of existing tokens. They later add a new scope that they want new users to consent to and update their code to include the new scope, but don't necessarily want to force all users to reauth.\r\n\r\nAdding the new scope when initializing the client will break existing refresh tokens since they'd end up asking for more scopes than the token was originally authorized. The server is expected to reject the refresh in that case according to the spec.\r\n\r\nDevelopers would need to carefully track which scopes a token was authorized for and initialize the client appropriately. I think that's a bit too much of a behavior change to introduce.\r\n\r\nWe'd have to make this opt-in to avoid breaking existing apps.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/310466507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/4364757", "body": "Not at the moment :)\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/4364757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "sajithapps": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/81da2370274da791f9948c4ef18fe793bdfa6876", "message": "Fixing to_json to adopt calling with argument (#98)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/signet/pulls/comments/162779896", "body": "Yes thanks that works. Updating the PR.", "reactions": {"url": "https://api.github.com/repos/google/signet/pulls/comments/162779896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "dazuma": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/12c03757795b2fb342e59a1b0579ee53122e98fe", "message": "Update some dev gems"}, {"url": "https://api.github.com/repos/google/signet/commits/440b8357fe02151db031a4d5decb2540995d85ee", "message": "Update changelog and version for 0.8.1 release"}, {"url": "https://api.github.com/repos/google/signet/commits/cac065932ad3d537005f5d08273605182ce61a37", "message": "Recover support for Ruby 1.9.3 (#97)"}, {"url": "https://api.github.com/repos/google/signet/commits/2e22545cf2087813d34ee755455ed09af222b2a0", "message": "Update 0.8 changelog"}, {"url": "https://api.github.com/repos/google/signet/commits/2adc7bf601ad05effe84495fbae1aa1a43afc965", "message": "Made using the configured scope in token requests opt-in per discussion on PR #89"}, {"url": "https://api.github.com/repos/google/signet/commits/e4b6e76dd1f1def73d43be47113d97224918152e", "message": "Update changelog for 0.8.0 release"}, {"url": "https://api.github.com/repos/google/signet/commits/c50ab22074e7d23458d648b5d8b511e6dafd0bc0", "message": "Add bundler tasks"}, {"url": "https://api.github.com/repos/google/signet/commits/c6d09b7770e070c29e8d7c0edcd574b29e5a191d", "message": "Update ruby versions to test on travis"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/334264316", "body": "@rbpawle Sorry this fell off our radar. I'm going through and updating all the issues and PRs now. This one seems odd to me, and I wonder if the nil comparisons are a red herring. Can you provide more details on what kind of failures you're seeing (and if you're still seeing them)?", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/334264316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/335056526", "body": "@rbpawle Thanks for the update. Can you let me know what error is actually happening? (I'm having trouble reproducing it myself.)\r\n\r\nFor example, in the code you provided above...\r\n\r\n```ruby\r\nbegin\r\n  Signet::OAuth2::Client.new(expires_at: Time.now).expired?\r\nrescue Exception => e\r\n  puts e.inspect   # <-- I'd like to see this\r\n  puts e.backtrace.join \"\\n\"  # <-- and this\r\n  class Signet::OAuth2::Client\r\n    def expired?\r\n      return !self.expires_at.nil? && Time.now >= self.expires_at\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nAlso, what operating system (and version) are you using, and exactly which version of Ruby and which version of the signet gem?", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/335056526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/335057688", "body": "@jwg2s It shouldn't be locked to 0.9.x. It's dependency is `\"faraday\", \"~> 0.9\"`, which allows use of all later versions of faraday up to and including the latest 0.13.1. It just wouldn't pick up a faraday 1.0 (if that ever happens).", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/335057688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/335058277", "body": "@phallguy That's a good question that I don't have an answer to. Looking at the history on rubygems, it seems this gem and oauth2 were developed about the same time in 2010, so it may have been just a case of parallel development. All the Google API clients use signet. But I'm too new on the project to speak to any functionality/support differences. @sporkmonger Can you shed any more light on this?", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/335058277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/335220426", "body": "@koenrh I'm working on testing and coordinating releases with the other related libraries such as googleauth. We'll have a release in the next few days.", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/335220426/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/336517674", "body": "1.9 tests still pass on Travis.", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/336517674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/336523541", "body": "FYI per the comment above, I made this opt-in for the 0.8 release of signet. To activate this behavior, you need to pass `use_configured_scope: true` as an option.", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/336523541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/343777993", "body": "@TempestMia Actually, `~> 0.9` does allow all later 0.x. The \"twiddle-wakka\" operator means, the furthest-right field must be greater than or equal to, but the second-furthest-right field must be exactly equal. So in this case, it means \"0.x[.y]\" where x >= 9, i.e. the major version must be \"0\" but the minor version can be >= 9 (and any patch version can be whatever). Two fields like this is commonly used for semantic versioning because it matches the compatibility semantics of major and minor versions.\r\n\r\nWhat version dependency is failing for you?", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/343777993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/359063025", "body": "@sajithapps Thanks for this fix! Can you please sign the CLA (and then reply here to let googlebot know you've done so)", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/359063025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/signet/pulls/comments/162709138", "body": "It looks like the `json` library allows arbitrary numbers of arguments. Maybe better:\r\n\r\n```ruby\r\ndef to_json(*)\r\n```", "reactions": {"url": "https://api.github.com/repos/google/signet/pulls/comments/162709138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mvastola": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/2f30b67352f49f479ed8d326e7c72ebe86fa310f", "message": "Signet::OAuth2::Client#decoded_id_token should take optional (#96)\n\n&keyfinder block for JWT.decode\r\n\r\nCloses #95; Closes #96"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/336000573", "body": "I'm dumb and should really learn to search better before I post issues.\r\nFixed in c9d21b3; dup of #93.", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/336000573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/336003252", "body": "@googlebot I signed it!", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/336003252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/336004115", "body": "FYI, I think this is fixed via upgrading to `jwt` version `2.x`.\r\nSee https://github.com/jwt/ruby-jwt/commit/4bba232c540e19b1197d00c4885b0f5ca5c784ce", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/336004115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "EdwardBetts": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/416fccf13e9a772e5a7a773128e9037fc840d817", "message": "correct spelling mistake (#92)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jurriaan": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/c9d21b365d2b668c11a6b737f95236b70037c2e9", "message": "Support ruby-jwt 2.0 (#93)\n\n* Support ruby-jwt 2.0\r\n\r\nThis version of ruby-jwt requires specification of the algorithm (see\r\nhttps://github.com/jwt/ruby-jwt/pull/184) for more information.\r\n\r\n* Use specific version of JRuby to fix CI for now"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/330320287", "body": "@sqrrrl https://github.com/google/google-auth-library-ruby/pull/119 has just been merged. For google-auth-library-ruby to depend on jwt 2.0 this PR needs to be merged. It was failing on CI due to issues with JRuby so I pushed a fix for that too. ", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/330320287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/332265497", "body": "@hxiong388 https://github.com/google/google-auth-library-ruby depends on this library, can you make sure this gets merged somehow, so that it is possible to use ruby-jwt 2.0 with google-auth-library-ruby", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/332265497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "pkern": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/96ffadbd7897372b708ee0db1f47e7d24e35c678", "message": "Add the configured scope to the access token request."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/309304301", "body": "@sqrrrl would you mind taking a look?", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/309304301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/310021331", "body": "Fair enough. Done. (Confirmed without the patch that it failed and that it passed with the test.)", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/310021331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "koic": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/5e7b79b74d97fdf43e2ee513037d30afc1e102e2", "message": "Integer Unification for Ruby 2.4.0+"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/267829803", "body": "I signed it!", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/267829803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/293282280", "body": "Hi @sqrrrl, Thank you for your maintenance. If you don't mind, could you release a new version of signet containing this patch?\r\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/293282280/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "chutzimir": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/0e6090ca2cf2568d8450192af783f32170d23df1", "message": "The \"expires_at\" attribute should also be recalculated on refresh\n\nBy nil-ing the expires_at attribute, next time expires_at is accessed\nthrough the reader, it will get recalculated.\n\nAs it is currently, when refreshing the access_token, the issued_at,\nexpires_in would get updated, but expires_at may still indicate that the\ntoken has expired."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/241264129", "body": "Done, @googlebot,\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/241264129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "foxtacles": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/770dd9411cbfddaa136bc58af23a14cebfdfce5b", "message": "Merge remote-tracking branch 'upstream/master'"}, {"url": "https://api.github.com/repos/google/signet/commits/624d1794f9c7e7c6b17761069b1a34341e68e5ac", "message": "add DateTime conversion"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/227716418", "body": "I signed it!)\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/227716418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "ysksn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/c6dc4b72f35ea649a756f56cdb5c601a1584bc63", "message": "Require some files in order to pass each test individually"}, {"url": "https://api.github.com/repos/google/signet/commits/94e590d51bea9c2f21f4fa97e7fed7631a7e6850", "message": "Remove redundant code"}, {"url": "https://api.github.com/repos/google/signet/commits/65145199c1b95a7fe7ca97f315d5241c1ed2d976", "message": "Remove adding \"spec\" and \"lib\" paths because they already in $LOAD_PATH"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fdhadzh": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/172554ca1f851239f6b6c062229d5d24818d6a37", "message": "Fix readme"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/162643417", "body": "Ping @sqrrrl \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/162643417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "shreeve": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/de43f8515832639050c8384d0a7e05131189e91b", "message": "allow for old_hash to be nil and simplify code"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "saiqulhaq": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/af4bfef51efc401813df6ee3db6273a3f3510590", "message": "remove duplicate variable"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gambaroff": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/8945515ba056148b3f3e70fcf3c81ff630e5e26d", "message": "Add ssl path to allow mac clients to accomplish cert chain link"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/105749840", "body": "FYI build seems to have been broken prior to this PR.  So don't let this particular failed build scare you.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/105749840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/108620904", "body": "Is it for an installed application or for a server to server application? \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/108620904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/108729698", "body": "Sounds like you should go server-to-server route. I would not worry about the refresh token.\nrequire 'google/api_client'\nrequire 'yaml'\nopts = YAML.load_file(\"your-credentials.yml\")\nservice_account_email = opts['service_account_email']\nkey_file = opts['key_file']\nkey_secret = opts['key_secret']\n@profileID = opts['profileID'].to_s\n\n@client = Google::APIClient.new(\n    :application_name => opts['application_name'],\n    :application_version => opts['application_version'],\n)\nkey = Google::APIClient::KeyUtils.load_from_pkcs12(key_file, key_secret)\n\n@client.authorization =  Signet::OAuth2::Client.new(\n    :token_credential_uri => 'https://accounts.google.com/o/oauth2/token',\n    :audience => 'https://accounts.google.com/o/oauth2/token',\n    :scope => 'https://www.googleapis.com/auth/analytics.readonly',\n    :issuer => service_account_email,\n    :signing_key => key)\n@client\n\n@client.authorization.fetch_access_token!\nputs @client.authorization.fetch_access_token!\n\n@analytics ||= @client.discovered_api\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/108729698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "swifthand": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/7352ba230bc8014f147ae344a9a84eb0552e67e8", "message": "Fixes OAuth2 authorization_uri assignement error.\n\nFixing issue where options' keys are required to be passed as symbols, but which eventually causes an error when attempting to compare with string keys for URI query values."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/89394245", "body": "Worth pointing out that test failures are identical to [those errors currently on the master branch](https://travis-ci.org/google/signet) according to Travis. One does involve `lib/signet/oauth_2/client.rb` but not in a manner related to this pull request.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/89394245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "blowmage": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/c58272740f3fdfe6c106f7d8bad37b8b410711dd", "message": "Fix warning: shadowing outer local variable\n\nVersions of ruby deal with shadowing in different ways. Best to avoid it when possible.\n\nAddresses the following warnings:\n\nlib/signet/oauth_1/client.rb:982: warning: shadowing outer local variable - env\nlib/signet/oauth_2/client.rb:1144: warning: shadowing outer local variable - formatted_hash"}, {"url": "https://api.github.com/repos/google/signet/commits/1acde691df633fae4fd3d4fdb73399d96d0afe9e", "message": "Fix warning: instance variable not initialized\n\nInitialize the variables to avoid the warning.\n\nAddresses the following warnings:\n\nlib/signet/oauth_2/client.rb:238: warning: instance variable @authorization_uri not initialized\nlib/signet/oauth_2/client.rb:288: warning: instance variable @token_credential_uri not initialized\nlib/signet/oauth_2/client.rb:315: warning: instance variable @client_id not initialized\nlib/signet/oauth_2/client.rb:332: warning: instance variable @client_secret not initialized\nlib/signet/oauth_2/client.rb:350: warning: instance variable @scope not initialized\nlib/signet/oauth_2/client.rb:384: warning: instance variable @state not initialized\nlib/signet/oauth_2/client.rb:402: warning: instance variable @code not initialized\nlib/signet/oauth_2/client.rb:420: warning: instance variable @redirect_uri not initialized\nlib/signet/oauth_2/client.rb:444: warning: instance variable @username not initialized\nlib/signet/oauth_2/client.rb:463: warning: instance variable @password not initialized\nlib/signet/oauth_2/client.rb:482: warning: instance variable @issuer not initialized\nlib/signet/oauth_2/client.rb:520: warning: instance variable @principal not initialized\nlib/signet/oauth_2/client.rb:709: warning: instance variable @expires_in not initialized\nlib/signet/oauth_2/client.rb:732: warning: instance variable @issued_at not initialized\nlib/signet/oauth_2/client.rb:749: warning: instance variable @expires_at not initialized\nlib/signet/oauth_2/client.rb:751: warning: instance variable @issued_at not initialized"}, {"url": "https://api.github.com/repos/google/signet/commits/a1f3c76f64df713f3535704c2c1d6a7e72f8d8eb", "message": "Fix warning: assigned but unused variable\n\nThere are several places where varaibles are assigned but not used.\nThe variables can be replaced with _, or prepended with _ to avoid a warning.\nThe variable in the main signet.rb file was removed completely.\n\nAddresses the following warnings:\n\nlib/signet.rb:32: warning: assigned but unused variable - position\nlib/signet/oauth_1/client.rb:595: warning: assigned but unused variable - value\nlib/signet/oauth_1/client.rb:751: warning: assigned but unused variable - value\nlib/signet/oauth_1/client.rb:915: warning: assigned but unused variable - value\nlib/signet/oauth_1/server.rb:253: warning: assigned but unused variable - value\nlib/signet/oauth_1/server.rb:324: warning: assigned but unused variable - value\nlib/signet/oauth_1/server.rb:408: warning: assigned but unused variable - value\nlib/signet/oauth_2/client.rb:694: warning: assigned but unused variable - header"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/86257788", "body": "The specs are not passing for me, but with these changes I'm not seeing new failures or changes in the specs that are failing.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/86257788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/110148595", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/110148595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "samuelreh": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/703d6d7e108d94210d31212a8cedd21816c36ade", "message": "Fix Signet::OAuth2::Client.new example arguments"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "momer": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/92cf2e0009d9d371d0f6a43b867addfb365a1a80", "message": "Add more descriptive spec description"}, {"url": "https://api.github.com/repos/google/signet/commits/accff5aee45f41f3df2bfb67a46fcd4af382cdcf", "message": "Check that additional parameters coming in as string keys get parsed; and, added some tests to cover hash options in string format which is the use case for this PR."}, {"url": "https://api.github.com/repos/google/signet/commits/bd2c0325a1d392de8035ff9b3615175fc82deab4", "message": "Paranoid normalization of user input; less silent errors as Addressable would simply not append options if it receives any as string parameters rather than symbol parameters. Refactored the multiple Enum#inject()'s that were found on update\\! and update_token\\!. Test coverage is ample from the current suite in spec/signet/oauth2/client_spec.rb. All tests pass."}, {"url": "https://api.github.com/repos/google/signet/commits/d8c250182ef378bae2f3f94b0b71db27fba172cb", "message": "FIX: When building URIs via Hash, Addressable expects URI#new and URI#parse to provide hash keys as symbols. One example of a little known occurrence where this would cause an issue is accessing the Google API via Google::APIClient::FileStorage, which stores and retrieves files as JSON - the keys of which are loaded in by the Google-Api-Client gem as strings. Here, we ensure that our options meet the format Addressable expects. The authorization/credential_uri= methods have been cleaned up a bit as well."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/39643836", "body": "New changes below (rebased a small change).\n\n@sporkmonger Au contraire, mon ami: There is sufficient test coverage in the current oauth2/client_spec.rb. See my comments in that file for ref.\n\nAdditionally, rather than effect solely the two uri methods that were broken, I've refactored the oauth2 client to internally represent all options as symbols, reducing future issue potential for both end-users and maintainers of the gem. As a result, we were able to remove two Enum#inject() methods, which only sanitized input on the Client#update! and Client#update_token! methods and also provide sanitation to all other methods which receive options.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/39643836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/39669577", "body": "### Latest commit with your feedback is at the bottom of the comment chain.\n\n---\n\n@sporkmonger No can do on removing the recursion - Addressable requires that all keys are symbols for it to perform as expected. The entire reason for this change is that all of the other input we care about should be coming in as symbols (so that Addressable receives them this way). \n\nIf we removed recursion, then options which have values that are hashes of strings, which is a common use case (see [[1](https://github.com/google/google-api-ruby-client/blob/a49e63847551b2a97603b0ba19fe7ce60f062f59/lib/google/api_client/auth/file_storage.rb#L47-L49)] and the actual test I commented on in the commit across more than the example noted below), would remain as strings. Signet then hands off the hash to Addressable which ignores any and all values, since it itself does not normalize input, and silently returns an incorrect URI.\n\nThere are many test cases in the spec which pass in nested hashes (as the one I highlighted) with keys as strings, and spit out a hash with keys as strings when testing Addressable::URI#query_values.\n\nWithout recursion, there's no reason for the change; and, I go back to monkey-patching. I'll change the descriptions to reflect 'normalizing' semantics!\n\nReview my comments on the reasoning here: https://github.com/momer/signet/commit/d2a8cc31ebbd3d7dc579d3399bac96d1c5c66ee4#commitcomment-5921148\n\n---\n\n### Example Case:\n\nIn Google-Api-Client, the author expects Signet::OAuth2::Client (and subsequently Addressable) to handle input correctly [[1](https://github.com/google/google-api-ruby-client/blob/a49e63847551b2a97603b0ba19fe7ce60f062f59/lib/google/api_client/auth/file_storage.rb#L47-L49)], since Signet::OAuth2::Client's API handles options as a hash of string keys (to the extent that it even normalizes for this case) [[2](https://github.com/google/signet/blob/master/lib/signet/oauth_2/client.rb#L158)], [[3](https://github.com/google/signet/blob/master/lib/signet/oauth_2/client.rb#L157)].\n\nHowever, Signet::OAuth2::Client takes the options, and, without normalizing the input to the correct format that Addressable receives (symbols), sends it over to Addressable in order to build a URI [[4](https://github.com/google/signet/blob/master/lib/signet/oauth_2/client.rb#L274-L284)].\n\nThe combination of Signet::OAuth2::Client and Addressable has two issues, in my eyes, for developers who wish to use it: \n1. Signet::OAuth2::Client normalizes input to hashes with strings for keys, which a developer might reasonably expect should be the format of any options which should be in the form of a hash (ie: options[\"authorization_uri\"].\n2. Signet::OAuth2::Client does not normalize the format of those options to actually match the APIs it's using [[4](https://github.com/google/signet/blob/master/lib/signet/oauth_2/client.rb#L274-L284)].\n3. Addressable does not normalize its input to the expected format [[5](https://github.com/sporkmonger/addressable/pull/157)]\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/39669577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/39673779", "body": "Actually @sporkmonger - after discussing this with some folks, it's apparent that the changes maybe should not be made here, but in Addressable, since arbitrarily converting all input options as symbols may be dangerous in the case that the Ruby GC does not garbage collect symbols.\n\nSo, As Douwem on freenode proposed, we might look at addressing the common denominator, and implement either a hash with indifferent access here, or a normalize method with a whitelist for its options parameters in Addressable.\n\nNot to be a pain in your ass @sporkmonger , I just want to make a fix widely available that'll help keep these gems accessible!\n\nThoughts?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/39673779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/39679293", "body": "I've proposed a change to Addressable, again, at https://github.com/sporkmonger/addressable/pull/159 which would resolve this issue by putting the onus on Addressable to normalize options.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/39679293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/39754849", "body": "@sporkmonger I think you've misunderstood my proposed changes to Addressable. I proposed that it become agnostic about the format of the options sent to it, as seen in the commit: https://github.com/momer/addressable/blob/6b795bccf4a20c3f0cbf28f1a798995c804b38ac/lib/addressable/uri.rb#L816-L827\n\nI didn't propose that there was an existing DoS in the Addressable gem at all. What I did say about the Ruby GC was that it was brought to my attention that a nested hash proposal (as I implemented above) is actually vulnerable to this, and suggested that we find a different way to resolve the issue.\n\nI don't mind writing more tests, as the existing code base does not cover the cases that create this issue. This is easy to implement, as we can simply test the output of Addressable / various affected methods of whichever implementation, and provide input to the tests in both formats: hashes with keys as String, and hashes with keys as Symbol.\n\nThis is actually how I expanded the tests in https://github.com/momer/addressable/blob/6b795bccf4a20c3f0cbf28f1a798995c804b38ac/spec/addressable/uri_spec.rb#L232-L363\n\nMoreover, if you feel there is insufficient testing on the existing codebase elsewhere, such that changes to the format of the overall options parameter structure (which are Signet::OAuth2::Client wide, and not piecemeal) would cause silent failures, I can help write more tests.\n\nFor an explanation of why I decided to try each avenue, it was simply due to the case that there were three different, effective, resolution ideas that @DouweM and I had discussed. I don't propose that they're each @DouweM 's preference, as he already mentioned above that he prefers option 4.\n1. Convert specific hashes with a whitelist of keys matching Addressable's API to be of the format where keys are symbols (i.e: in order to prevent a possible DoS when converting the options in `authorization_uri=` to keys)\n   - Not implemented yet\n2. Convert all nested hashes to the format where keys are symbols. This is a possible DoS vector, albeit unlikely as you mentioned above.\n   - https://github.com/momer/signet/commit/bd2c0325a1d392de8035ff9b3615175fc82deab4\n3. Allow Addressable to be agnostic towards the format of its inputs, while whitelisting only those options which we expect. This prevents DoS, and makes Addressable more versatile.\n   -  https://github.com/momer/addressable/blob/6b795bccf4a20c3f0cbf28f1a798995c804b38ac/lib/addressable/uri.rb#L816-L827\n   - https://github.com/momer/signet/commit/d2a8cc31ebbd3d7dc579d3399bac96d1c5c66ee4\n4. Signet could pass a HashWithIndifferentAccess to Addressable.\n\nAgain, for a working example of the issue: https://github.com/momer/signet/commit/d2a8cc31ebbd3d7dc579d3399bac96d1c5c66ee4#commitcomment-5930816\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/39754849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/39755902", "body": "Sounds good @sporkmonger - thank you for keeping the discussion open. I should have some time today to send you over something to look at.\n\nAre there any specific areas of the codebase that you're concerned about being affected by the changes?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/39755902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/61930307", "body": "@sqrrrl Looking at this now, this issue still makes me feel uneasy. Due to the way the issue presents itself, as described [[0](https://github.com/google/signet/pull/40#issuecomment-39669577)], and the fact that there are so many input/option vectors, lends this patch to add fragile code in order to avoid breaking backwards compatibility. A more robust solution would be preferred, but as we went back and forth about which gem holds the responsibility for this issue, it would be tough to implement without restructuring the code.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/61930307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/61993112", "body": "@sporkmonger I'm inclined to think that you haven't look at the tiny changes I added to the spec. The only change added was to test that the internal representation of an option was indeed normalized to be symbol. \n\nhttps://github.com/momer/signet/blob/bd2c0325a1d392de8035ff9b3615175fc82deab4/spec/signet/oauth_2/client_spec.rb#L919-L944\n\nComments like \n\n> I assume because they broke when he made this change.\n\nare unappreciated as they imply that I'm trying to throw bugs into the code base, while the actual reasoning is clearly shown in the comments; and, it's plain that the comments reflect what is actually changed.\n\nWe can see that other tests still pass; and, any anxiety caused from this PR would likely be due to other features / options not being tested when previously implemented. That's fair enough, but after going back and forth on this, expending an additional X hours to ensure that every option of the affected methods has\n1. Good unit tests of its initial implementation\n2. Passes those previous implementation tests (presumably which include option passing...) and some additional tests on top of that which go beyond testing a method and its parameters to satisfy your concern\n\nmay be beyond scope for me or this PR.\n\nThe tl;dr here is that if the codebase's unit tests have been enough to alleviate your concerns to this point, but the fact that tests pass without additional coverage indicate that plain old test coverage of existing methods is lacking. I can agree that I haven't done a full audit on the specs to ensure all affected methods are tested, and will take a look this afternoon at code coverage.\n\nI can also definitely add in a test which covers the intended use case for the fix, which I think got lost in the various PRs.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/61993112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/62008771", "body": "Just for the sake of my own memory, this was initially patched with the fix proposed here - this is the monkey patch I'm using to get around the problem currently:\n\nhttps://github.com/momer/signet/commit/d8c250182ef378bae2f3f94b0b71db27fba172cb\n\nSo that when an option for `Signet::OAuth2::Client.new` was passed as is provided by Google-Api-Client (after `JSON.load`) like so:\n\n```\n    \"authorization_uri\"=>{\"scheme\"=>\"https\", \"user\"=>nil, \"password\"=>nil, \"host\"=>\"accounts.google.com\", \"port\"=>nil, \"path\"=>\"/o/oauth2/auth\", \"query\"=>nil, \"fragment\"=>nil}\n```\n\nthe keys would be converted to symbols so that Addressable will actually receive them.\n\nAn example failing situation in the (at the time) master branch due to the issue described - mismatching of input options and output to Addressable: https://github.com/momer/signet/blob/example-failing-test/spec/signet/oauth_2/client_spec.rb#L943-L984\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/62008771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/62018671", "body": "@sporkmonger I agree that a better fix is possible, but it would likely involve considerable restructuring. On master, option keys are normalized to string - so users reasonably expect that to be the case for all options including nested hashes. However, Addressable expects options to be passed as symbols, which is the crux of the issue. \n\nWhat do you propose?\n\nSide note: the CI build failed due to\n\n```\nrake aborted!\nNoMethodError: undefined method `rcov=' for #<RSpec::Core::RakeTask:0x7f8673dd3cd0>\n/home/travis/build/google/signet/tasks/spec.rake:27\n/home/travis/.rvm/gems/ruby-1.8.7-p374/gems/rspec-core-3.1.7/lib/rspec/core/rake_task.rb:108:in `call'\n/home/travis/.rvm/gems/ruby-1.8.7-p374/gems/rspec-core-3.1.7/lib/rspec/core/rake_task.rb:108:in `define'\n/home/travis/.rvm/gems/ruby-1.8.7-p374/gems/rspec-core-3.1.7/lib/rspec/core/rake_task.rb:107:in `__send__'\n/home/travis/.rvm/gems/ruby-1.8.7-p374/gems/rspec-core-3.1.7/lib/rspec/core/rake_task.rb:107:in `define'\n/home/travis/.rvm/gems/ruby-1.8.7-p374/bin/ruby_executable_hooks:15\nTasks: TOP => spec:normal\n(See full trace by running task with --trace)\n```\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/62018671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "andirayo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/340fd14c01438f3798c3e30846677fba498b288b", "message": "OAuth2 Client:\nWrapper refresh!() accepts same parameter as wrapped function fetch_access_token!().\nFor some services, it is necessary to send specific individual additional parameters when refreshing the access token, eg. Highrise expects the parameter \"type\" to be set to \"refresh\"."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "manuelmeurer": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/d7bb95081c0a039b23df77b7269bbca653816d20", "message": "Allow token_credential_url to be set to a Hash"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/32620088", "body": "Ping! :smile: \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/32620088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/35710489", "body": "Would be great to get the issues and PRs merged in or at least responded to. Cheers!\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/35710489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/35767693", "body": "Cheers!\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/35767693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/35830986", "body": "New PR: #36\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/35830986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/35843298", "body": "Yeah but I assumed you didn't want to have two commits for this one feature... there is now way to add another commit to a PR, squash it with a previous one, and keep the history, is there?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/35843298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "AnalogJ": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/9d95e599da892687b1bb3822534c2c4ec72e652f", "message": "update the test not to be dependent on the order of parameters."}, {"url": "https://api.github.com/repos/google/signet/commits/4aa2ba2b80d1f755015eb2e989d55d44dd496191", "message": "remove unneeded reference to Base64 library"}, {"url": "https://api.github.com/repos/google/signet/commits/d5aebd9d132ae789d5b5a73e376add55a73430eb", "message": "moved base64 ruby 1.8 compatibility method into compat folder"}, {"url": "https://api.github.com/repos/google/signet/commits/1bb080b197d76a6a60e710af5c3460307affb379", "message": "backported strict_encode64 method for ruby 1.8.7"}, {"url": "https://api.github.com/repos/google/signet/commits/6f6be5e12befb266d91d7005e0f2e5895b0405ec", "message": "changed test to use query string parameter hash instead of string (as order differs depending on rvm)"}, {"url": "https://api.github.com/repos/google/signet/commits/221832e5cb738da62644ebed60e66b207625f998", "message": "added tests for additional parameters."}, {"url": "https://api.github.com/repos/google/signet/commits/97cf359575a4a803d0641ea21c287bf6045220a1", "message": "Added ability to pass though custom parameters using the :additional_parameter option."}, {"url": "https://api.github.com/repos/google/signet/commits/a062df9e2a15a6af1af568c69213fa6602ad6e92", "message": "finished up the missing signatures by adding in RSA-SHA1 support."}, {"url": "https://api.github.com/repos/google/signet/commits/e61c40f46e5a7d049f0f7f9f0f9bec93d1acbc01", "message": "added plaintext rspec tests."}, {"url": "https://api.github.com/repos/google/signet/commits/6c3420eeff19f939571307ce9219e40a6144ebbf", "message": "added plaintext oauth1 signature method."}], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/39", "title": "added ability to access raw response parameters from credential.", "body": "Some oAuth1 services return the access token and secret with some additional meta data like `expiry` and `id` information which is currently inaccessible. I've added a `@raw` accessor to the credential class to allow developers to access additional metadata if needed. \n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/23200200", "body": "@sporkmonger , I completely agree with you, unfortunately there are some API's that only support PLAINTEXT, eg. [Freshbooks -Request Signing](http://developers.freshbooks.com/authentication-2/). Thankfully they follow the recommendation that SSL is used, but still..\n\nEither way, it's part of the [OAuth 1 Spec](http://tools.ietf.org/html/rfc5849#section-3.4.4) along with RSA signatures (which I also mentioned in issue #25) and should be implemented if you want signet to become the defacto replacement for the outdated OAuth gem. \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/23200200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/23460631", "body": "Hey @sporkmonger, I mimic'd the same tests you had written for the hmac-sha1 signature generator. Tell me if there's anything else you want me to do. The plaintext method is pretty basic, not much to test. \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/23460631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/23535475", "body": "Sigh. I realized too late that I was working with an older version of the OAuth draft. The @37signals api is using a Client Flow from an older version of the OAuth spec that has since been removed. I'll refactor the code so that it's more generic. Basically all I want to do is get the client to allow arbitrary parameters to be passed through \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/23535475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/23600339", "body": "Yeah, I saw that too, it looks like it might have something to do with the version of Ruby. Ruby 1.9+ introduced `strict_encode64`. When I have time I'll add an extension method for older versions. \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/23600339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/23728485", "body": "Hi Bob, sorry for the cowboy coding, I'm still pretty new to Ruby and I didn't really know where to put the compatibility code. Is there anything else that needs tweaking?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/23728485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/24343328", "body": "Thanks for the warm welcome :)\nIs there anything else I should tweak or fix for this pull-req?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/24343328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/24696476", "body": "hey @sporkmonger , sorry to keep badgering you.. any feedback on this pr?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/24696476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/24703890", "body": "Hey @sporkmonger , Can I get you to pull in another PR? :)\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/24703890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/25027473", "body": "Hey @sporkmonger , just reminding you about this PR. Thanks! :)\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/25027473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/25053638", "body": "Want me to rebase it?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/25053638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/25053905", "body": "hey, no worries. I really appreciate it :) \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/25053905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/25303817", "body": "Yeah, I've been putting off the Facebook API integration until I've had a bit more time. Once I get around to it, I'll send in a pull request for this. Thanks for pointing me towards Addressable, I'm already using it in another project, but I didn't know it could do that.  \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/25303817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/36772477", "body": "Hey @sporkmonger \nThanks for taking a look at their docs, but unfortunately they have a few different application types. The one we are using is a Partner application (http://developer.xero.com/documentation/advanced-docs/public-private-keypair/)\n\nPartner applications use standard oauth 1 with an RSA-SHA1 signature (which is working fine using the Signet library), but they do additional validation by requiring a client ssl certificate during the ssl handshake. They do list a wrapper gem called xerofier, but we've used the Signet gem to integrate with 12 other API's and I'd rather not use a completely different library unless I have to. \n\nBasically is there anyway to get the raw `Faraday:Request` object out and add the `:ssl` client options?\n\nthe `generate_temporary_credential_request` method seems to output a `Faraday:Request` however I'm not sure how to add the :ssl options after its been created.  http://rubydoc.info/gems/signet/0.5.0/Signet/OAuth1/Client:generate_temporary_credential_request\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/36772477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/39237536", "body": "notifying @sporkmonger\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/39237536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/39248220", "body": "ping @sporkmonger \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/39248220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jashenson": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/ee6ec4a40fe7cc4479279478a35f3ee200b2c068", "message": "Use .has_key? to check for passed options"}, {"url": "https://api.github.com/repos/google/signet/commits/e3662ff5bc490de32fe76bf4d577ac6fb5c71e8d", "message": "Normalize actions of update! and update_token!\n\nupdate! should not overwrite client properties with nil if those settings aren't passed in the options hash. This is the behavior in update_token!. This commit refactors update! to behave like update_token!."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/22609346", "body": "Submitted\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/22609346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/22672397", "body": "Great point. I've updated :update_token! and :update! to use has_key?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/22672397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "cc": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/1a90fdac2551c953a13c8a6c73f488f77ad016db", "message": "Removes default value for prompt and raises if setting both\nprompt and approval_prompt"}, {"url": "https://api.github.com/repos/google/signet/commits/376ece60f310fdd0c6ba1ad9103cb984dc38213e", "message": "Makes prompt=consent rather than approval_prompt=force by default and\ndoes not set a default prompt value if approval_prompt is passed."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/22605354", "body": "I was just trying to keep the same default behaviour but allow support for changing it but I agree that it isn't really for Signet to decide these defaults for you anyway so have removed. \n\nThe specs showing the default behaviour for access_type and response_type have been left in but maybe they could be removed? \n\nI also added a raise to fail fast if trying to request an authorization uri with both approval_prompt and prompt parameters.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/22605354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "wyaeld": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/f6666cbde5b44e2e8625d283f0b7e6c7fcde31de", "message": "switch to using rspecs be_within method for approximations, rather than using Time.round which is not supported in all Rubies"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sanemat": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/58641cf5fab3be30f7102bd84b42f7da1f38aa52", "message": "Use https://rubygems.org instead of :rubygems as source"}, {"url": "https://api.github.com/repos/google/signet/commits/36cf127fc949ac4c029a8d7be6f515d93af6da0a", "message": "Add ASCII-8BIT option to regexp encoding\n\nThis does not change behavior in signet, but fixes strange syntax\nerror in google-api-ruby-client:\nhttps://travis-ci.org/google/google-api-ruby-client/jobs/4052360"}, {"url": "https://api.github.com/repos/google/signet/commits/4efd7af09434b0ab1ab076de1a018b3dd3359ca6", "message": "Revert \"Add magic comment US-ASCII for Ruby2.0.0\"\n\nThis reverts commit 7c3194e69d8e49b7d32ba89f5a37d37ef3577f1d.\n\nThis is not correct solution"}, {"url": "https://api.github.com/repos/google/signet/commits/edfa697112fcfc88a79774ff7d63318ff23bf5b5", "message": "Add Ruby2.0.0 build in Travis-ci, and allowed to fail\n\nhttp://about.travis-ci.org/docs/user/build-configuration/#Rows-That-are-Allowed-To-Fail"}, {"url": "https://api.github.com/repos/google/signet/commits/7c3194e69d8e49b7d32ba89f5a37d37ef3577f1d", "message": "Add magic comment US-ASCII for Ruby2.0.0\n\nRuby2.0.0 default encoding is UTF-8 instead of US_ASCII"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/11660863", "body": "`\\xAA` is invalid encoding in UTF-8. This is ascii-8bit.\n\n```\n/Users/sane/work/ruby-study/signet/lib/signet.rb:22: invalid multibyte escape: /[\\s\\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]/ (SyntaxError)\ninvalid multibyte escape: /\\\\[\\s\\x21-\\x7E\\x80-\\xFF]/\ninvalid multibyte escape: /[\\s\\x21-\\x26\\x28-\\x5B\\x5D-\\x7E\\x80-\\xFF]/\ninvalid multibyte escape: /\\\\[\\s\\x21-\\x7E\\x80-\\xFF]/\n```\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/11660863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "nevir": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/a551fe72586692ae307ce432d8dc589076e68dad", "message": "Drop sudo from gem install"}, {"url": "https://api.github.com/repos/google/signet/commits/22be4102a50e6fedcc8aa2d92c13f2a0155c0bca", "message": "Full jruby and rubinius coverage\n\nAlso, making 2.0.0 a required version target now that it's released"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/16558827", "body": "@sporkmonger it looks like the 1.8 series test failures are [from `master`](https://travis-ci.org/google/signet/builds/5471849)\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16558827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "brainopia": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/67dbe6a43f023573a6d2e0355b1fbd7706336a3f", "message": "Update signet.gemspec"}, {"url": "https://api.github.com/repos/google/signet/commits/a8caaa57188d8b9c886cec9f1d16b6e338907357", "message": "Add support for expires_at parameter"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/17150195", "body": "@sporkmonger I've looked but I don't see any reason for such a sporadic behavior. The only suggestion to check if tests are ran in random order and if so can this fail be repeated using the same seed.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/17150195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "kossnocorp": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/d81290926de9f9388351054f19cf11f420af7335", "message": "Fix README"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rmacklin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/09f065fb01fd5e531e981d56db8eba0b9396e3a9", "message": "got rid of 'already initialized constant' warnings that appeared in ree-1.8.7"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/8304848", "body": "The failures on Travis CI are \"Signet::AuthorizationError: 464 Authorization failed. Server message: 465 Timestamp is too far from current time\" (only on some versions of ruby). They don't happen locally, so it looks like it might just be a clock issue.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8304848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/8318236", "body": "When I was tracking down the warnings, I commented out those 2 lines to make sure they were the cause. But I realized it was stupid to keep them commented out instead of just removing them. I've made the change in my fork (though I didn't make a new pull request).\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8318236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "mechazoidal": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/72d0b1eb4d635167efc7c44f978802af06e432e3", "message": "Instead of Booleans, return a Hash of the relevant info for token/resource requests."}, {"url": "https://api.github.com/repos/google/signet/commits/ecef06af7a092a5f91f8df17258d0754c5d0577b", "message": "touch up documentation"}, {"url": "https://api.github.com/repos/google/signet/commits/c7652989ac8e1446cd4eb68ca1262ebbd256be1b", "message": "Clean up formatting and docs"}, {"url": "https://api.github.com/repos/google/signet/commits/9f9f87e53cbe31852f216578b874c74daf46f562", "message": "clarify return value"}, {"url": "https://api.github.com/repos/google/signet/commits/1558101e087020f15869cf73e4057a0347d3ccba", "message": "Clarify method name"}, {"url": "https://api.github.com/repos/google/signet/commits/b100d65e2692b6e982cad313b1e545b21ea29b88", "message": "Clean up formatting"}, {"url": "https://api.github.com/repos/google/signet/commits/c1f9edcf285177f2a57d26b04d6a81de7ec490c3", "message": "finish API"}, {"url": "https://api.github.com/repos/google/signet/commits/f6f11bee9ba6048ce16a2380ffdc5e33af704110", "message": "Roughly finalize API, do some cleaning"}, {"url": "https://api.github.com/repos/google/signet/commits/e39608bd5bf713326ceaa3eafb3f9de5c9dd9326", "message": "Clarify wording"}, {"url": "https://api.github.com/repos/google/signet/commits/b9232f3862e6d93c87104175f3aa4e7199569a3a", "message": "Server should throw specific exception on malformed Authentication header(section 3.2)"}, {"url": "https://api.github.com/repos/google/signet/commits/44621a17061e7e695ee74c7de3563fda5a9b1e44", "message": "finish 2-legged spec"}, {"url": "https://api.github.com/repos/google/signet/commits/69bea50a7e4496c9ad711549a341c2d3ed453e16", "message": "Use user-supplied Procs in server instead of strings"}, {"url": "https://api.github.com/repos/google/signet/commits/90e631d3b875863acdec6d0124089713f1823667", "message": "Add changes from work(Gemfile, server class, version tweak)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sethladd": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/2afd9df9e6a8a32f95fe4b6e51e5b50224772903", "message": "Do not normalize the entire URI when creating the signature base string."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dmitchell": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/82", "title": "A null auth is expired", "body": "Wasn't refreshing the token if it had no issued at", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/260433083", "body": "I signed it\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/260433083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/260444214", "body": "Hmmm, your test requires that `expired?` should return `false` if there's no expiration, but the next method `expires_within?` follows the pattern that I thought `expired?` should follow. That is, it returns `true` always if `expires_at` is `nil`\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/260444214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rbpawle": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/81", "title": "Corrected '!= nil' to '!...nil?'", "body": "Since upgrading to Ruby 2.3 we've seen some failures inside the signet gem when calling the google-adwords-api gem which references signet. We've found that changing all '!= nil' statments to '!...nil?' statements fixes the problem.\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/334542859", "body": "no worries. this is the way we fixed it:\n\nrequire 'signet/oauth_2/client'\n\n\nbegin\n  Signet::OAuth2::Client.new(expires_at: Time.now).expired?\nrescue Exception => e\n  class Signet::OAuth2::Client\n    def expired?\n      return !self.expires_at.nil? && Time.now >= self.expires_at\n    end\n  end\nend\n\n\nhaven't seen any errors since. I have no idea why this would fix it, but\nmeh, decided not to mess with good enough.\n\nOn Wed, Oct 4, 2017 at 3:29 PM, Daniel Azuma <notifications@github.com>\nwrote:\n\n> @rbpawle <https://github.com/rbpawle> Sorry this fell off our radar. I'm\n> going through and updating all the issues and PRs now. This one seems odd\n> to me, and I wonder if the nil comparisons are a red herring. Can you\n> provide more details on what kind of failures you're seeing (and if you're\n> still seeing them)?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/signet/pull/81#issuecomment-334264316>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAzANJFrce6KBlZoDZa2qA1HfWl6CG_wks5so9yigaJpZM4KhkSF>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/334542859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "confiks": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/80", "title": "Don't doubly encode ampersand in OAuth1 plaintext signature method", "body": "I was having trouble connecting to an OAuth1 provider with the PLAINTEXT signature method using Signet. It seems that the ampersand in the signature is being doubly encoded, and that therefore my OAuth1 provider fails to accept the signature.\r\n1. The ampersand is first encoded in [plaintext.rb](https://github.com/google/signet/blob/master/lib/signet/oauth_1/signature_methods/plaintext.rb#L17).\r\n2. The signature value is then passed through `generate_temporary_credential_request` / `generate_token_credential_request` / `generate_authenticated_request` to [`generate_authorization_header`](https://github.com/google/signet/blob/master/lib/signet/oauth_1.rb#L217) where the value (the signature) is encoded again.\r\n\r\nI removed the encoding step in the generation of the signature itself, and let it be encoded properly in `generate_authorization_header`. I updated the plaintext test case accordingly. I'm wondering if this fix is correct and how the compatibility is for other providers, seeing that this library has been doing this for such a long time already.\r\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/252622000", "body": "I signed it!\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/252622000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/263879192", "body": "@sqrrrl Could this be reviewed and merged? Would love to drop my own repository.", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/263879192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "joncalhoun": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/63", "title": "Fixed issue #41 where redirect_uris couldn't be passed in as a hash", "body": "", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/139407998", "body": "This appears to still exist, at least when using this example: https://developers.google.com/api-client-library/ruby/auth/web-app#example\n\nIt looks like the line\n\n``` ruby\nsession[:credentials] = auth_client.to_json\n```\n\nresults in a redirect_uri that is a hash instead of a string. eg:\n\n``` json\n{\n  ...\n  \"redirect_uri\": {\n    \"scheme\": \"http\",\n    \"user\": null,\n    \"password\": null,\n    \"host\": \"localhost\",\n    \"port\": 3000,\n    \"path\": \"/oauth/callback\",\n    \"query\": null,\n    \"fragment\": null\n  },\n  ...\n}\n```\n\nSignet passes this redirect_uri hash directly to `Addressable::URI#parse` which doesn't support converting a hash to a URI. (see https://github.com/google/signet/blob/03bdf5f9ffdc90570fc40caa352a9629d1a904d1/lib/signet/oauth_2/client.rb#L447 and http://www.rubydoc.info/gems/addressable/Addressable/URI#parse-class_method)\n\nI believe this could be fixed by using `Addressable::URI`'s merge method, but you would have to symbolize the keys coming in, so something like:\n\n``` ruby\ndef redirect_uri=(new_redirect_uri)\n  new_redirect_uri = build_uri(uri)\n\n  #TODO - Better solution to allow google postmessage flow. For now, make an exception to the spec.\n  if new_redirect_uri == nil|| new_redirect_uri.absolute? || uri_is_postmessage?(new_redirect_uri) || uri_is_oob?(new_redirect_uri)\n    @redirect_uri = new_redirect_uri\n  else\n    raise ArgumentError, \"Redirect URI must be an absolute URI.\"\n  end\nend\n\ndef build_uri(uri)\n  if uri.is_a?(Hash)\n    uri_from_hash(uri)\n  else\n    Addressable::URI.parse(uri)\n  end\nend\n\ndef uri_from_hash(hash)\n  symbolized = {}\n  hash.each_key do |k|\n    symbolized[(k.to_sym rescue k)] = hash[k]\n  end\n  Addressable::URI.new.merge(symbolized)\nend\n```\n\nI'll turn this into a PR with tests and submit it for you to review.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/139407998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/139409821", "body": "Scratch that - this use case was handled in the authorization_uri setter. Using that solution.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/139409821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/143040621", "body": "Any update on this? The PR has been open for 2 weeks now with no response :(\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/143040621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/155895935", "body": "I can understand that. Is the intent to continue supporting this behavior in oauth_1 then? I ask because it appears to do this in at least 2 places where URIs are set.\n\nI had created this PR because the last time I attempted to use the [google-api-ruby-client](https://github.com/google/google-api-ruby-client) with the calendar API this caused some things to break. Ideally this would be fixed sooner rather than later so developers can utilize the library, so I suppose some options would be:\n1. Temporarily support this until the other lib gets updated. This may be annoying if other libraries using signet start to utilize it and break in the future though.\n2. Update the [google-api-ruby-client](https://github.com/google/google-api-ruby-client). I don't know the scope of this, so if you have any idea the feedback would be great.\n3. Something I am missing. Any other ideas?\n\nI'm happy to help with this, but I will need some guidance on how to proceed. Thanks! :smiley: \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/155895935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/155984007", "body": "Awesome, thanks for the update :)\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/155984007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "xelwarto": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/48", "title": "Changes to OAuth2 authentication JSON output", "body": "Example code located on the Google developers site for Ruby (https://developers.google.com/api-client-library/ruby/auth/web-app) utilizes the JSON output of the authentication information in a stored session for creating the OAuth2 client. While this works correctly for the first fetch of the access token, the JSON output does not provide adequate information regarding the expiration of the access token. With out the expiration information it is impossible to track and test for an expired access token in subsequent API executions. The changes in this PR add the **expires_in** and **issued_at** parameters to the JSON output which allows the client to properly track and verify if the access token has expired.\n\nAdditionally, while testing the creation of an OAuth2 client using the JSON output I came across an exception with how the authorization URI was being created. The following error was reported:\n\n```\n/usr/local/lib/ruby/gems/2.1.0/gems/addressable-2.3.6/lib/addressable/uri.rb:1579:in `sort!': comparison of Array with Array failed (ArgumentError)\n    from /usr/local/lib/ruby/gems/2.1.0/gems/addressable-2.3.6/lib/addressable/uri.rb:1579:in `query_values='\n    from /usr/local/lib/ruby/gems/2.1.0/gems/signet-0.6.0/lib/signet/oauth_2.rb:152:in `generate_authorization_uri'\n    from /usr/local/lib/ruby/gems/2.1.0/gems/signet-0.6.0/lib/signet/oauth_2/client.rb:263:in `authorization_uri'\n    from /usr/local/lib/ruby/gems/2.1.0/gems/signet-0.6.0/lib/signet/oauth_2/client.rb:853:in `to_json'\n```\n\nThe issue was the result of mismatched hash key types ... the resulting merge of the query_values hash had a mix of both Symbol and String key types. This PR includes changes to normalize the query_values hash before the merge.\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/70715998", "body": "The Signet library is failing to pass build due to changes to the JWT library. The following PR: https://github.com/progrium/ruby-jwt/pull/45 implements claim expiration enforcement and since the Signet test specs include an expired token the build fails with an exception ... \n\n```\nFailure/Error: expect(@client.decoded_id_token).to eq ({\n     JWT::ExpiredSignature:\n       Signature has expired\n     # ./lib/signet/oauth_2/client.rb:694:in `decoded_id_token'\n```\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/70715998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jdewyea": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/30", "title": "fix verify_request_components variable assignment", "body": "If `request` is an array, `verify_request_components` raises a `NoMethodError` when trying to access `request.method`.\n\nTo reduce the number of conditionals, this commit also makes the assumption that if `options[:adapter]` is supplied, we want to adapt the `request`.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "travisbot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/8283533", "body": "This pull request [fails](http://travis-ci.org/google/signet/builds/2338449) (merged 6b6d700e into bf0dec76).\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8283533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/8283708", "body": "This pull request [fails](http://travis-ci.org/google/signet/builds/2338517) (merged 9b2ae8ba into bf0dec76).\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8283708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/8284658", "body": "This pull request [fails](http://travis-ci.org/google/signet/builds/2338991) (merged 09f065fb into bf0dec76).\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8284658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pauljm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/21006111", "body": "The offending default is imposed here: https://github.com/google/signet/blob/4532135f5c3c923e75c39fd1871a8937627ef182/lib/signet/oauth_2/client.rb#L247\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/21006111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/22612691", "body": "Awesome. Thanks guys.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/22612691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "JuanitoFatas": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/22712131", "body": "Sorry this is duplicated to #10 .\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/22712131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "djpate": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/35699542", "body": "sorry about that I only meant the first commit to be included.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/35699542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/35700045", "body": "Ok should be good now.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/35700045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/35771961", "body": "I just renamed the method name to uri_is_oob? and allowed oob as a value.\n\nI'm not sure what the RFC is but right now it's impossible to use the google provided verification code without this fix. Their doc specify to not include a redirect_uri but then it returns missing parameter if we don't provide one.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/35771961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Etriaph": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/39644894", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/39644894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "DouweM": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/39679432", "body": "Just to clarify, my suggestion was to use a HashWithIndifferentAccess in Signet, not Addressable. It's up to Signet to provide Addressable with the data in the format it expects it, not up to Addressable to support all kinds of formats.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/39679432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "woohoou": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/61513231", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/61513231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "amalagaura": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/90749138", "body": "Probably related but on JRuby I am getting:\n\n`OpenSSL::X509::StoreError: setting default path failed: problem creating X509 Aux certificate: java.io.IOException: problem parsing cert: java.security.cert.CertificateParsingException: java.io.IOException: Duplicate extensions not allowed`\n\nJRuby has already loaded the certs but signet is also trying to do it. I don't have this problem with other libraries which do OAuth.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/90749138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/90751873", "body": "On a fresh Jruby 1.7.19 install I can only get Signet working if I remove the ssl_config.rb file. It looks like a hack which was maybe needed a few years ago.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/90751873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "fertobar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/96894109", "body": "update\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/96894109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jylitalo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/108721904", "body": "I have small ruby script that gets executed from command line, so I guess it falls into installed apps category. Script goes through number of files and local directory tree and determine, which images should be sent in through Picasa API. \nBased on my struggles with signet (and Google OAuth2 on that matter), I think the most confusing part of gist was that it doesn't tell you what steps you have to go through to get valid refresh_token.\nI think that is going to be my next challenge, since you can't use refresh token from OAuth2 playground.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/108721904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/108729482", "body": "So at the end it went something like this ... \noauth2_client = Signet::OAuth2::Client.new(\n       authorization_uri: \"https://accounts.google.com/o/oauth2/auth\",\n       token_credential_uri: \"https://accounts.google.com/o/oauth2/token\",\n       client_id: client_id,\n       client_secret: client_secret,\n       redirect_uri: redirect_uri,\n       scope: \"https://picasaweb.google.com/data/\",\n       expiry: 3600\n)\n\n# you probably don't need all those parameters, but ...\n\np oauth2_client.authorization_uri.to_s\n\n# visit to the given URL with browser, go through authentication to fetch the code\n\noauth2_client.code=code_from_browser\noauth2_client.refresh!\n\n# store the refresh_token into some configuration file etc., so that you can use the original gist in a future.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/108729482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "coderberry": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/114956754", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/114956754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bruzos": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/118005299", "body": "Same problem when using google-ruby-client  in service Google::Apis::AnalyticsV3::AnalyticsService with Rails 4.2.2 and ruby 2.2.1. but not in rails console\n\nThe problem appear when I do:\n\n```\nauth.update_token!({\n                    access_token: session[:gauth]['access_token'],\n                    refresh_token: session[:gauth]['refresh_token'],\n                    expires_in: session[:gauth]['expires_in'],\n                    issued_at: session[:gauth]['issued_at']\n                   })\n```\n\n'issued_at' is store at session var as string and signet wait for a Time object. I have solved it doing:\n\n```\n  auth.update_token!({\n                    access_token: session[:gauth]['access_token'],\n                    refresh_token: session[:gauth]['refresh_token'],\n                    expires_in: session[:gauth]['expires_in'],\n                    issued_at: Time.parse(session[:gauth]['issued_at'])\n                   })\n```\n\nMaybe a extra control at @issued_at could avoid the error.\n\n```\n   return (@issued_at.is_a? String ? Time.parse(@issued_at) : @issued_at ) + @expires_in\n```\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/118005299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "creddy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/140586109", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/140586109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Gataniel": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/144998437", "body": "This issue IMHO is in `google-adwords-api`. So you here is my PR fixing it https://github.com/Gataniel/google-api-ads-ruby/tree/fix-ads_common-saving-issued_at-as-a-string-instead-of-time\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/144998437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mad-raz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/148812700", "body": "closed in google/google-api-ruby-client#296\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/148812700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/148860677", "body": "Going through the developer documentation https://developers.google.com/identity/protocols/OAuth2ServiceAccount\nIn the required claims it's explicitly stated that\n\n> `exp`  The expiration time of the assertion, specified as seconds since 00:00:00 UTC, January 1, 1970. _This value has a maximum of 1 hour after the issued time._\n\nit's also mentioned one more time in the \"Handling the response\" section (towards the end)\n\n> Access tokens expire in one hour and can be reused until they expire.\n\nso I think this conclude that this is not an issue... it's the default (only) behaviour\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/148860677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/254506560", "body": "AFAIK, (and according to the documentation at that time) you cannot change the `expires_in` parameter (or at least use a value that is larger than `1.hour.from_now.to_i` )\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/254506560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "zinzinzan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/174711489", "body": "hi guys any advice comment? please\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/174711489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/176379142", "body": "thats right bignum is the output\n2.1.6 :001 > Time.now.to_i.class\n => Bignum \n2.1.6 :002 > \nwhere i add that code?? or what i do ?? ruby patch.rb? inside de root folder?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/176379142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/176486437", "body": "i edit the ruby class located in /home/<user>/.rvm/gems/ruby-2.1.6/gems/signet-0.7.2/lib/signet/oauth_2/client.rb\n\n when Fixnum\n          Time.at(time)\n        else\n\nto\n\nwhen Fixnum, Bignum\n          #Adding Bignum ^ here as timestamps like 1453983084 are bignums on 32-bit systems\n          Time.at(time)\n        else\n\nand it work thx nigga\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/176486437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "MikhailSamolinov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/176328701", "body": "@zinzinzan I think I just ran into this issue. Could please run `Time.now.to_i.class` in irb to confirm that it returns a Bignum on your system? Here is how it should look if we are talking about the same problem:\n\n```\nmikhail$ irb\nirb(main):001:0> Time.now.to_i.class\n => Bignum \n```\n\nI've opened a PR (#71) to address the issue. As a quick workaround, you can add [this patch](https://gist.github.com/MikhailSamolinov/635af4fc00e1b46bff04) to your project. In essence, it will replace original implementation of the `normalize_timestamp` with a new version that supports Bignums.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/176328701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/177296408", "body": "> i edit the ruby class located in /home//.rvm/gems/ruby-2.1.6/gems/signet-0.7.2/lib/signet/oauth_2/client.rb\n> where i add that code?? or what i do ?? ruby patch.rb? inside de root folder?\n\nWhile this certainly works, I'd not recommend this (more on this below).\n\nA better option is to place patches.rb with the rest of your code and add the following line at the very top of the quickstart.rb: `require 'patches.rb'`. This will fix the issue without breaking the rest of the system.\n\nNow on editing the ruby classes located in the gems folder. There are several critical issues with this approach which may or may not be important in your particular case:\n- Changes to files in the gem folder are local to your workstation, as a result things will stop working if you run your code somewhere else\n- New version of ruby or gem will also reset the changes and things will stop working all of a sudden\n- Your changes are **global** and affect all other ruby projects which is not good\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/177296408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/180308639", "body": "@alexander-js Yeah, tried that as well. Turned out that in some cases there is no 'issued_at' field in the credentials file and as a result, you can't reliably workaround the issue by patching it.\n\nSo far I haven't found anything better than [fixing normalize_timestamp at runtime](https://gist.github.com/MikhailSamolinov/635af4fc00e1b46bff04). Hopefully the PR #71 will be merged soon and there will be no need to hack the lib.\n\nHere is how my credentials file looks:\n\n```\ncat ~/.credentials/com.samolinov.pixtream\n---\ndefault: '{\n   \"client_id\":<redacted>,\n   \"access_token\":<redacted>,\n   \"refresh_token\":<redacted>,\n   \"scope\":[\n      \"https://www.googleapis.com/auth/calendar.readonly\"\n   ],\n   \"expiration_time_millis\":1453986354000\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/180308639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/180506520", "body": "@sqrrrl I just wanted to follow up on the status of the PR and see if you have any feedback or suggestions. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/180506520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "4lex-gs": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/180300916", "body": "Hi, I rewriting parts of \"issued_at\" on credential cache json file.\n\n```\ncredential = \"#{path}credential.json\"\n##\n# signet/client.rb:1172 Bignum is unsupport on normalize_timestamp.\n# 'issued_at' rewrite to Time Object String from Bignum.\nif File.exist?(credential)\n  json = JSON.load(File.read(credential))\n  issued = json[\"issued_at\"]\n  json[\"issued_at\"] = \"#{Time.at(issued)}\" if issued.is_a?(Bignum)\n  File.open(credential, \"w\"){|f| f.write JSON.dump(json) }\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/180300916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gimite": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/204716092", "body": "I encounter the same issue. Would be nice if this PR is merged.\n\nGoogle::Auth::UserAuthorizer is broken due to this bug. e.g., the sample code here doesn't work:\nhttps://github.com/google/google-auth-library-ruby#example-command-line\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/204716092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "h6y3": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/208163128", "body": "@MikhailSamolinov Thanks for figuring this out!  I was trying to figure out why my Raspberry Pi 3 couldn't host this code, but your patch completely addressed the issue.  Without this patch, this code doesn't work on 32 bit systems.  I'm blown away by how you figured this out - kudos to you.  I spent all afternoon debugging this!\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/208163128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dsisnero": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/221075630", "body": "Had this same issue on windows.  Please merge and update gem\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/221075630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "googlebot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/227716124", "body": "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/227716124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/227716424", "body": "CLAs look good, thanks!\n\n<!-- ok -->\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/227716424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/241240265", "body": "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/241240265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/241264132", "body": "CLAs look good, thanks!\n\n<!-- ok -->\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/241264132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/252620521", "body": "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/252620521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/252622009", "body": "CLAs look good, thanks!\n\n<!-- ok -->\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/252622009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/256451290", "body": "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/256451290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/260432486", "body": "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/260432486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/260433090", "body": "We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\n\n<!-- need_author_cla -->\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/260433090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/261666874", "body": "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/261666874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/261671706", "body": "CLAs look good, thanks!\n\n<!-- ok -->\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/261671706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/267828231", "body": "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/267828231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/267829804", "body": "CLAs look good, thanks!\n\n<!-- ok -->", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/267829804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/334542886", "body": "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.\n- In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.\n\n<!-- need_sender_cla -->", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/334542886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/336002840", "body": "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.\n- In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.\n\n<!-- need_sender_cla -->", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/336002840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/336003260", "body": "CLAs look good, thanks!\n\n<!-- ok -->", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/336003260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/357435657", "body": "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address on your commit.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot. The email used to register you as an authorized contributor must be the email used for the Git commit.\n- In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n\n<!-- need_sender_cla -->", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/357435657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/359162928", "body": "CLAs look good, thanks!\n\n<!-- ok -->", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/359162928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "whoteaches": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/229394459", "body": "@tbem not sure if you found an answer yet, but I did.\nhttps://github.com/google/google-api-ruby-client/issues/296\n\nThis works. Just replace .authenticate with .authorize.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/229394459/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "inket": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/231954956", "body": "@whoteaches Not sure what you mean since there's no `.authenticate` or `.authorize`\n\nA workaround for this issue is to supply an expiration date for the token:\n\n``` ruby\nauthorization = Signet::OAuth2::Client.new(access_token: access_token)\n\n# Signet 0.7.3 raises when the expiration date is nil,\n# so we set an arbitrary date in the future\nauthorization.expires_in = Time.now + 1_000_000\n```\n\nHere is the responsible commit: https://github.com/google/signet/commit/d711d32c543f66e7a4a94d3333a06c7cba6e3755\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/231954956/reactions", "total_count": 12, "+1": 9, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 3}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/254523323", "body": "@pitops Are you sure it's a valid access token? In any case, I don't think I can help with this issue as I only followed the trail until I found what caused the error, and now I remember nothing about how this works.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/254523323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pitops": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/254474680", "body": "this works for said error, but gives authentication error after that @inket \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/254474680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Maulik0923": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/254498918", "body": "How can i change expiry_in parameter?\n\nCan any one give me answer please??\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/254498918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "inopinatus": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/256843009", "body": "I have spent two hours today on \"why is it writing a new access token to my credential store on every freaking API call?!\"\n\nNow I know why.\nPlease merge this PR and release.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/256843009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kinsbrunner": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/261671703", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/261671703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/263732707", "body": "Hi,\r\nI was wondering to know when could this big-fix be reviewd and merged into the project?\r\nRegards.\r\nAlejandro.", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/263732707/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "BirknerAlex": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/283636727", "body": "Hello,\r\n\r\nusing a newer Graph Version fixed it. ", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/283636727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hsbt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/290605853", "body": "Any progress? I still faced a lot of warning messages.", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/290605853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "soylent": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/296448216", "body": "I think there is a better solution:\r\n\r\n```diff\r\ndef expires_in=(new_expires_in)\r\n  if new_expires_in != nil\r\n    @expires_in = new_expires_in.to_i\r\n    @issued_at = Time.now\r\n+   @expires_at = nil\r\n  else\r\n    @expires_in, @issued_at, @expires_at = nil, nil, nil\r\n  end\r\nend\r\n```\r\n\r\nDuplicates #79 ", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/296448216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "oholubyev": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/302037771", "body": "Having the same issue.  Would be nice to have some update.", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/302037771/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pjg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/307051003", "body": "I'm having a very similar issue, which manifests itself with the following error:\r\n\r\n```\r\n#<Signet::AuthorizationError: Authorization failed.\r\nServer message: { \"error\": \"unsupported_grant_type\", \"error_description\": \"Invalid grant_type: \" }>\r\n```\r\n\r\nFor me adding explicit (fake) `expires_in` fixes the issue (as described here: https://github.com/google/signet/issues/75#issuecomment-231954956)", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/307051003/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/22446586", "body": "This commit is causing this error while accessing Google APIs using `google-api-client`:\r\n\r\n```\r\nAuthorization failed.  Server message:\r\n{\r\n \"error\": \"unsupported_grant_type\",\r\n \"error_description\": \"Invalid grant_type: \"\r\n}\r\n```\r\n\r\nThe fix is to include the following in the authorization (example is in Rails):\r\n\r\n```\r\nauthorization = Signet::OAuth2::Client.new(...)\r\nauthorization.expires_in = 1.week.from_now\r\n```\r\n\r\nReference: https://github.com/google/signet/issues/75#issuecomment-231954956", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/22446586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "hashwin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/309710596", "body": "Any update on this? Would be great to clear out these warning messages associated with the google-api-ruby-client gem.", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/309710596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "willywg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/329323775", "body": "Same error here with Rails 3.2\r\n\r\nGem::LoadError: can't activate jwt (~> 0.1.4), already activated jwt-2.0.0. Make sure all dependencies are added to Gemfile.", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/329323775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hxiong388": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/332286381", "body": "@jurriaan Thanks for bringing this to my attention. I don't have collaborator privilege to this repo. We'll work something out internally.", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/332286381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "koenrh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/334938536", "body": "@dazuma Could you release a new version so we can use version 2 of the 'jwt' gem in libraries that are dependent on 'signet'? Thanks.", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/334938536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "TempestMia": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/342959865", "body": "@dazuma `\"faraday\", \"~> 0.9\"` looks like it'll only allow use of later versions of 0.9, i.e. 0.9.1, 0.9.9 etc, but not, say, 0.13.1.\r\n\r\nAlso, looked this up cause we're in the same boat :)  Want to use this gem but it has a lot of version-locked dependencies which would cause us to not be able to update.", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/342959865/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/343982907", "body": "@dazuma  I didn't realize it was depending on how far to the right you specify. TIL! Thanks!\r\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/343982907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "alauper": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/4302808", "body": "When do you plan on cutting a new gem version?  the latest on RubyGems (0.5.0) does not include these changes.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/4302808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "taka-oyama": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/6580080", "body": "+1. still seeing this error.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/6580080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jww": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/7630407", "body": "Any chance of breaking out the hashification occurring in the to_json serialization methods into their own to_hash methods? \n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/7630407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Ailenswpu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/18241429", "body": "@sqrrrl @sporkmonger \nI'm using signet for GooglePlay IAP verification on 2014, I can get  access_token from the code directly:\n\n``` ruby\n\n client =  Signet::OAuth2::Client.new(\n          token_credential_uri: 'https://accounts.google.com/o/oauth2/token',\n          audience: 'https://accounts.google.com/o/oauth2/token',\n          scope: 'https://www.googleapis.com/auth/androidpublisher',\n          issuer: 'example@developer.gserviceaccount.com',\n          signing_key: Google::APIClient::KeyUtils.load_from_pkcs12('some path'), 'notasecret'),\n        person: 'ailen@big-bang-games.com')\n        client.fetch_access_token!\n```\n\nhow can i do the same thing of the new version of signet?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/18241429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}}}}