{"_default": {"1": {"junyer": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/re2/commits/7cf8b88e8f70f97fd4926b56aa87e7f53b2717e0", "message": "Tweak the BUILD file formatting.\n\nChange-Id: I11b1c4b2bda836a9ea3afeb0cdf7aa9372eeaa13\nReviewed-on: https://code-review.googlesource.com/21991\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/715f0dcaafbeda5d9fef58194d9ce256f0317ecf", "message": "Just /source-charset:utf-8 didn't work. Try /utf-8.\n\nChange-Id: I90862237f38c70a04e16c96ce67bab11bf61718b\nReviewed-on: https://code-review.googlesource.com/21431\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/382394afe9d1b195dced96a56390bb36e240008c", "message": "Specify the source character set for MSVC.\n\nChange-Id: Ifdefb605b2a61cda57e4aac09bccccc9ab8fdb16\nReviewed-on: https://code-review.googlesource.com/21430\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/c7e077fb858086351783bb7dfac67bc180108ab5", "message": "Try to appease MSVC another way. Sigh.\n\nChange-Id: I1a42546a7a9cb6387f93dd591caee09ed0ca0871\nReviewed-on: https://code-review.googlesource.com/20990\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/86ba5d7bcc116638c6c3544aaa30870e799ba414", "message": "Address a couple of MSVC warnings.\n\nChange-Id: Ia55f897c09077f977d671d22ae3db4968bc2959b\nReviewed-on: https://code-review.googlesource.com/20970\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/cafe43c1f4a2579f8a721da0195b21cd6714ee66", "message": "Fix a silly off-by-one error.\n\nChange-Id: Id80d35f4b40558d57c111c2cee9900962b477571\nReviewed-on: https://code-review.googlesource.com/20950\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/97957299d1c9f7617cfe653f344536d733582d9e", "message": "Require Visual Studio 2015 or later.\n\nSomething about Visual Studio 2013 causes test failures,\nbut I currently have no idea what that could be because\nthere is no output from the failed tests whatsoever. :(\n\nChange-Id: Ic57cba54115ededa738ed42f4fffe5dd2d6350de\nReviewed-on: https://code-review.googlesource.com/20930\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/85094761c53c0b77cfa130bdfc639a067d2165ec", "message": "Try specifying Visual Studio 14 2015 instead.\n\nChange-Id: I0844855feb09d55ec9221febd06afa9acbc81979\nReviewed-on: https://code-review.googlesource.com/20910\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/6f3fb02d2e555c251d9e3cb20b124bd09be2e78f", "message": "Make CTest extra verbose temporarily.\n\nChange-Id: I068244af20db96c136774c516176ce788786ff20\nReviewed-on: https://code-review.googlesource.com/20890\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/34d77e910db221a6b13d6ffad95fcd8ec253fb6d", "message": "Make Regexp::FactorAlternation() not recursive.\n\nChange-Id: Ifb3b4188c87cd6e1dd7c5d6703feedae68462943\nReviewed-on: https://code-review.googlesource.com/20870\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/0ba62a2728aa932622a973e20bfb9e5914abd536", "message": "Tweak factoring code and comments for consistency.\n\nChange-Id: I7d9536583ef0ae0238a0e6c62fffd789bbeb5f08\nReviewed-on: https://code-review.googlesource.com/20790\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/7702b82824d5fb957902577d5b8f9b81f6d5c388", "message": "Split Regexp::FactorAlternationRecursive() into rounds.\n\nChange-Id: I78d5b4171cd95639ca538dc4bcd3afebdc67500c\nReviewed-on: https://code-review.googlesource.com/20772\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/05825be3c2004833d4c66bf0c91e0442f0cbe9b3", "message": "Fix the Regexp::FactorAlternation*() argument names.\n\nChange-Id: Ic6329dd93f5e9da2ac53b8b1862a3f38590c485c\nReviewed-on: https://code-review.googlesource.com/20771\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/39173d40079500ebad860585b66f6dc2228c3b89", "message": "Retire Regexp::FactorAlternationRecursive() round 4.\n\nIt is redundant: \"flattened\" bytecode achieves the same result!\n\nChange-Id: I8e54b3945da2a84d5cbb946cff0c1c9ccb6d184f\nReviewed-on: https://code-review.googlesource.com/20730\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/527356ff02d49913b363c569d51b7a2c3c5fcd7a", "message": "Write size_t{4} for brevity.\n\nChange-Id: Iaeddb3630ccb2d2d42f836fd713b238c675d1d1f\nReviewed-on: https://code-review.googlesource.com/20610\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/d587bbccca2e12df66e6669d40b07ad7f5026780", "message": "Adjust the comment to be about GCC 6.x (for x >= 1).\n\nFixes #102.\n\nChange-Id: I6fe7439236aa0d0061977627cf5afe398b218815\nReviewed-on: https://code-review.googlesource.com/20490\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/e9bacdd0a11c1a3ae488bb0a96097ceda462051f", "message": "Test past kFactorAlternationMaxDepth (8).\n\nChange-Id: Ic550f87b4f08509496f5a0a1f39101c6adef6f21\nReviewed-on: https://code-review.googlesource.com/20410\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/5185d85264d23cfae4b38e2703703e9a4c8e974c", "message": "Reduce the pattern size limit to 512 bytes when fuzzing.\n\nChange-Id: I03bf0d331101758481d61be5ac89e68ea1a2ef3b\nReviewed-on: https://code-review.googlesource.com/20350\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/782df0107b9e7448c195b60e370cec7b8dae60da", "message": "Make *Map and Entry private to PrefilterTree.\n\nChange-Id: I2cb2bb6ad20f0e13ffc5bed00e012aff544d3e45\nReviewed-on: https://code-review.googlesource.com/19730\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/ee52f030e7fed3fb0cfc5f41c367a898194cf776", "message": "Allow RE2::Set::Match() to output error information.\n\nChange-Id: Id249fbd13ada10432516461bc2be6b7287baf889\nReviewed-on: https://code-review.googlesource.com/19670\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/7fc014d45bb8e93c49dac28e356a8475e460835b", "message": "Sink the PrefilterTree *Map typedefs into the class.\n\nChange-Id: Iceb59c08bd9008eb38b3987f112b1d17704b9990\nReviewed-on: https://code-review.googlesource.com/19650\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/ea3ffa34d89a17685b98477e28aa03713f18de06", "message": "Oops, MaybeInitializeMemory() can't be static anymore.\n\nChange-Id: I857eb6c7bb816e7d824007e338ae2333fb7c8861\nReviewed-on: https://code-review.googlesource.com/19630\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/03ac475246c6f7ee844be5b32ff9576d72a473ab", "message": "Make SparseArray<> and SparseSet faster under MSan.\n\nChange-Id: I4e77261612e1dda2df1d73fff7023bb17921ba9c\nReviewed-on: https://code-review.googlesource.com/19611\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/fd505545bd166d62fc981412a683fe9311a2dabc", "message": "PrefilterTree needs the node map only during compilation.\n\nChange-Id: Iadf5eb015a8d5bb014e19f207aef13dd33dfa86c\nReviewed-on: https://code-review.googlesource.com/19610\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/26cd968b735e227361c9703683266f01e5df7857", "message": "Use StringPrintf() instead of std::to_string().\n\nAndroid NDK r15 lacks the latter...\n\nChange-Id: Iace89318c96065cd156aef5a6e6718edbffa1a6b\nReviewed-on: https://code-review.googlesource.com/19550\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/2c220e7df3c10d42d74cb66290ec89116bb5e6be", "message": "Expand the comment on the \\p and \\P limit.\n\nChange-Id: Ib2f359f8ecc4172754a2b02458fc64698e8c1daf\nReviewed-on: https://code-review.googlesource.com/18990\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/15af9e48d1d7e56c09e2242db85eee2537e74526", "message": "Crudely limit the use of \\p and \\P when fuzzing.\n\nChange-Id: I7456324a2a412971a584f380489a6cc207892224\nReviewed-on: https://code-review.googlesource.com/18890\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/2f2069113071c0a1ec426e2889cb070413aec50e", "message": "Revert \"Further reduce the maximum repeat count when fuzzing.\"\n\nThis reverts commit 5603c16a2d0b1a4f489df6e66ae3a27198d8d75a, which was\nintended to limit repetitions of Unicode character classes in regular\nexpressions generated by the RE2 fuzzer, but turned out to affect\nhuman-written regular expressions.\n\nChange-Id: I551739452060dc71409bae589c70f4902e9a11b7\nReviewed-on: https://code-review.googlesource.com/18590\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/70f66454c255080a54a8da806c52d1f618707f8a", "message": "Let's just call it \"PrefixSuccessor\".\n\nChange-Id: I009f8420bd2bae7aaf42f44d0599a3d80e09cee8\nReviewed-on: https://code-review.googlesource.com/18051\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/5603c16a2d0b1a4f489df6e66ae3a27198d8d75a", "message": "Further reduce the maximum repeat count when fuzzing.\n\nChange-Id: I532d213022f9e0564b971069514a8caeb72f438e\nReviewed-on: https://code-review.googlesource.com/18050\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/c7c25a09d4273740aee09e03dfa11e68cfb803f4", "message": "Attempt to free the memory allocated for elem_.\n\nChange-Id: I0d2c8078b3de88ee2e448d74fe01644c9437fcd9\nReviewed-on: https://code-review.googlesource.com/18030\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/4be7a14432ff0a2ed88fd884fd76a63f0a3a6127", "message": "Make the RE2 fuzzer set max_mem to 64MiB.\n\nSince none of the other limits are changing, the effect is to permit\nlarger DFA state caches. This is solely for the benefit of egregious\nregular expressions, which currently risk timeouts if they happen to\nincur excessive DFA state cache flushes.\n\nChange-Id: Id97f5669ea56ba4d92082e72c974932d6ce6ed53\nReviewed-on: https://code-review.googlesource.com/17990\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/476386d7529eb8356c2d07b3586ca845af9f73b4", "message": "Make RE2::Set support \"earliest match\".\n\nChange-Id: I8fc19b43bb5d4510fcfd53fc15c9d29c450e03c1\nReviewed-on: https://code-review.googlesource.com/17910\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/884287d109ec987e8029ae0a9cebe66223283998", "message": "Oops, Bazel wants a label for load().\n\nChange-Id: I84472420363087e0efa55c4066e32787a32eeb4c\nReviewed-on: https://code-review.googlesource.com/17870\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/5ca216da786eeac868eab15ec71bc3f6abae2ed3", "message": "Most of the tests are \"small\" according to Bazel.\n\nChange-Id: I2092399fb68a9cbb5da2131c16c005776a7946c1\nReviewed-on: https://code-review.googlesource.com/17850\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/ed5be2c865a5fa2b9d28284065807b5a6eea096a", "message": "Make RE2::Set sort the patterns before compiling.\n\nChange-Id: I44bc22b9eb6e5c294c26b0418dfc301110aa4904\nReviewed-on: https://code-review.googlesource.com/17830\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/3ebe734f3923542d270838896808139e87b3d4c2", "message": "Make RE2::Set force-enable the never_capture option.\n\nChange-Id: If1cfddd6cd9a756269609b26e0a3b20c7c130c4d\nReviewed-on: https://code-review.googlesource.com/17810\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/8f33ff2318166e9703a480b5d6281b98c39b7706", "message": "Make Compile() and CompileSet() more consistent.\n\nChange-Id: I9704162dacf6aa09b3883a937f466c9021ce3716\nReviewed-on: https://code-review.googlesource.com/17790\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/80cd2aa29375fad540185d5b3543f4f2e36faeed", "message": "Make DFA::PossibleMatchRange() use std::unordered_map<>.\n\nChange-Id: I6f3f13960b55e9d7de3e16ea0138249368af5246\nReviewed-on: https://code-review.googlesource.com/17770\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/450e672b68966dacb229eca053a4121d28332609", "message": "Don't use a SparseSet when matches aren't needed.\n\nChange-Id: I2092f2b238b2cafd9259655273f8aee15283ac02\nReviewed-on: https://code-review.googlesource.com/17630\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/16dd8856b79b3c6163a5b6da40aa45267031a79d", "message": "Use arrays for dense_ in SparseArray<> and SparseSet.\n\nThus providing constant-time allocation once again...\n\nChange-Id: I25dc799c1c57e65c0cfdccc0e65f7e963eba5c1b\nReviewed-on: https://code-review.googlesource.com/17510\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/f7ad022ea010f4f494983b8fd3d005424a0a3271", "message": "Improve the efficiency of RE2::Set match tracking.\n\nPreviously, RE2::Set match tracking worked by obtaining the match IDs\nfrom the kInstMatch instructions in the final DFA state at the end of\nthe input string, but that required each kInstMatch instruction to be\npropagated through intermediate DFA states. We can avoid most of that\ninefficiency by propagating the match IDs only to the next DFA state.\n\nChange-Id: I1340cb6d090b8ce5527eb34f6e2d382296185c47\nReviewed-on: https://code-review.googlesource.com/17470\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/295316b292e3b7638559ad4d2a95b497f3dfadc1", "message": "Make RE2::Set use a SparseSet internally.\n\nChange-Id: I204a0ff750caaff95f352b364ea18fc9abafd0e7\nReviewed-on: https://code-review.googlesource.com/17451\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/08b34f5718dd25e3ad89e9f7cac4780ed2f9a069", "message": "Tidy up some minor inconsistencies in the DFA code.\n\nChange-Id: Ia4b892b26f99c6624879635b6532f7fc96d28aef\nReviewed-on: https://code-review.googlesource.com/17450\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/fad97b7d64503a710482b2890e053224575d1f0d", "message": "Add another RE2::Set test case.\n\nChange-Id: I054581a278a6f3a0df47b881c32d52bfe31c9c9d\nReviewed-on: https://code-review.googlesource.com/17430\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/145ada40e1c9f96b9dadcd32444a42138f892a7d", "message": "Update Unicode data to 10.0.0.\n\nChange-Id: I131125569c991c32b332afc0e18dfb33a2155f7c\nReviewed-on: https://code-review.googlesource.com/17330\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/d2b639578a17f459ff90f4bf9b904f66c3ebb93d", "message": "Add Clang 5.0 to the Travis CI matrix.\n\nChange-Id: Idf299f63dfc7b95457158d2eb0a35598a3d0c8f4\nReviewed-on: https://code-review.googlesource.com/16810\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/69b61c1334e037470894d80328473efae1c6e08b", "message": "Avoid undefined behaviour for TestZeroFlags.\n\nFixes #155.\n\nChange-Id: I96513b777a29091e8cf84aa86a2339e538d6ef3e\nReviewed-on: https://code-review.googlesource.com/16390\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/c13ba9406205e2ee98e370b41f56aef74724bac3", "message": "Avoid undefined behaviour when calling memmove(3).\n\nFixes #154.\n\nChange-Id: Iafc986a11400f47f291fbd225464e2547fdee65e\nReviewed-on: https://code-review.googlesource.com/16370\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/adb56ff2f0330798a5dda9adf54c7e3fd3f43106", "message": "Fix the comments on ParseInteger().\n\nChange-Id: I7892c1b08d4a296f4712e1d4d26c456a45b181ee\nReviewed-on: https://code-review.googlesource.com/16190\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/1dac557a35f6b3ea4223274c9bd28b33c534f529", "message": "Reorder RE2::MaxSubmatch() and RE2::Rewrite().\n\nChange-Id: Ib1c6a4079749633027be6833b61811850b38b831\nReviewed-on: https://code-review.googlesource.com/16170\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/971f917a35125c6dcfabf099d5fe9a1e5c383265", "message": "Cygwin needs \"-std=gnu++11\" instead.\n\nFixes #150.\n\nChange-Id: Id067989ee58bc35c3f59a55b65f54f6e216166c1\nReviewed-on: https://code-review.googlesource.com/14570\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/8d17abaead38b656c5551db6f687dd0c7178cf15", "message": "Fix Clang APT sources for Travis CI.\n\nChange-Id: Ib9288292d63999afcee273475665427b334be787\nReviewed-on: https://code-review.googlesource.com/14473\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/350d61ae276108872e9fae5c46029b74fd229f3f", "message": "Initial Travis CI configuration.\n\nChange-Id: I9c9c2f2dd22a2e4649db80724101df2376c9e524\nReviewed-on: https://code-review.googlesource.com/14471\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/a810d718ac57e470f02a930168f5262d50edcf77", "message": "Improve the pointer-overflow bug fix.\n\nChange-Id: I07434e2a0a594516e478e414bf5479c28bc4ed71\nReviewed-on: https://code-review.googlesource.com/14274\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/b09f2b1aa82601f7b0f3ea95e48931f539561a42", "message": "Fix a typographical error.\n\nChange-Id: I94d226d246045141cb71b40d1f7520e35d2fbbf7\nReviewed-on: https://code-review.googlesource.com/14273\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/acd4b0c9cecc0982f9e968aa940ed4e62e957b6f", "message": "Fix the bug in the PCRE wrapper.\n\nChange-Id: I93961315fc51e90aaa9615004d5349835c1d9b82\nReviewed-on: https://code-review.googlesource.com/14272\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/29a884523b4c6ba6a196103d2c8dec40ad48c6f8", "message": "Tweak a comment.\n\nChange-Id: I41f30dd7f24546b84e2e844cd8c6df8797db2f6c\nReviewed-on: https://code-review.googlesource.com/14131\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/e27d671f9eecb5e9dfdc0f8b04c70ba3aae1b838", "message": "Tidy up the use of DFAStateCallback arguments. No, really.\n\nChange-Id: Ic9d4e6b16d2ce9b8139652781e70ea6fd96075ea\nReviewed-on: https://code-review.googlesource.com/14130\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/22fc950c75d238f8b2dcbc43d8a60573cad2b8d7", "message": "Tidy up the use of DFAStateCallback arguments.\n\nChange-Id: Idf0d13196914f164e6c213889fddb6083901d88e\nReviewed-on: https://code-review.googlesource.com/14031\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/5573670fc8f51affa5cc21371582e60ef3f2a68f", "message": "Fix pointer-overflow bugs found by UBSan.\n\nChange-Id: Ib726337108bfd589b17841fbf1ccfa9df19627e4\nReviewed-on: https://code-review.googlesource.com/14030\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/08cf8db47fd9b7fb4a5b8c82d83913064ed09413", "message": "Use nullptr instead of NULL to satisfy MSVC. Sigh.\n\nChange-Id: Ifb46bfd0e2f9713e6b12c4ed39391afaf4dddfd3\nReviewed-on: https://code-review.googlesource.com/13972\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/a89d455ee4a4592a734716e2251702fe232c29a2", "message": "Add callback support to Prog::BuildEntireDFA().\n\nChange-Id: I91a3ac23de4c4f7f31bd01180489fbcce33b8bff\nReviewed-on: https://code-review.googlesource.com/13971\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/8e007b144f009254a508a7f23c9292f35fce8e7c", "message": "Speed up DFA::BuildAllStates() by using the bytemap.\n\nChange-Id: Id81f67de1b0708817867b65b8e9f0a80e20c5c1c\nReviewed-on: https://code-review.googlesource.com/13970\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/b6e2ddf6c70156078099e5ef6b5c9c941a324b36", "message": "Restore limited support for Valgrind.\n\nFixes #147.\n\nChange-Id: I84d308546f5946f66deb85db0556deb20b19d9b6\nReviewed-on: https://code-review.googlesource.com/13950\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/7b88dbe0214f1e4d6b946a8fac2d9a09adb09143", "message": "Clarify that RequiredPrefix() \"zeroes\" its outputs.\n\nChange-Id: I24799d87302165d78eb61544efdcdd04c3d3b9e2\nReviewed-on: https://code-review.googlesource.com/13030\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/e7efc48dbbb878764af3df3a997535469186aecd", "message": "Disable various warnings that aren't particularly helpful.\n\nFixes #142.\n\nChange-Id: I5d30cefe506f6d192f028737c2853ea73c75d435\nReviewed-on: https://code-review.googlesource.com/12790\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/2d7109f9db8ad4960eb661a5c7a764657a4d3f82", "message": "Address another warning from MSVC.\n\nFor #142.\n\nChange-Id: I0379209185208ffcd7125292ca662878e48e37aa\nReviewed-on: https://code-review.googlesource.com/12710\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/1bcbb5f704bd59de4295daa92d42edae2545498f", "message": "Remove redundant lowercase check.\n\nChange-Id: I332ba23b4f9d4f65de0d27dd4ce906363d01049b\nReviewed-on: https://code-review.googlesource.com/12431\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/ade2c95963a1323c4cde4661dc178c9ced30056b", "message": "Avoid undefined behaviour in operator~.\n\nChange-Id: I4fba27cfc4c9c59e5d7a1fc6746639fd60ed0742\nReviewed-on: https://code-review.googlesource.com/12391\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/fa801215c0def8248059b2a629eaadb52154ea0f", "message": "Provide a CMake option similar to BUILD_TESTING, but just for RE2.\n\nFixes #138.\n\nChange-Id: Icd00147f1b62e3225fed8f7b239a3282a286a91c\nReviewed-on: https://code-review.googlesource.com/12331\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/580e53b741643e7cc91aae9fb951825c5309f20c", "message": "Address some clang-tidy gripes.\n\nChange-Id: I45b9570954c529feb618c9f7bf83f8f56802d3e0\nReviewed-on: https://code-review.googlesource.com/12250\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/6fb1186abebc9ed5abf7cfed0be2453cfbad9505", "message": "Check for sanitizers with __has_feature().\n\nChange-Id: Id9c3c182336dbcb74054bfa3cee906e422636cb8\nReviewed-on: https://code-review.googlesource.com/12231\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/2b16c27a821fee33b35cb0013121485681bd0a3d", "message": "Silence warnings about missing initializers for members of LazyRE2.\n\nFixes #137.\n\nChange-Id: I92ba9fda9285d434993a051e82de9a4c7b1be672\nReviewed-on: https://code-review.googlesource.com/11830\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/ae9cb49a2e2ba95de4f0c6ec5a8afd039996d2c7", "message": "Fix bytecode blowup due to wrong \"dominator roots\".\n\nChange-Id: Ia486dd78aeb09e51858bc318f1e9c3f6d09dd597\nReviewed-on: https://code-review.googlesource.com/11270\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/5446536ba7f5b9bb4c4bf46a12b3351ca98f23b8", "message": "Configure CI using CMake on macOS.\n\nChange-Id: I8e642f81c5bc7419124ab1f7d0b4d6642edd491f\nReviewed-on: https://code-review.googlesource.com/11211\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/e2deff36afd0a71adbf71cb11fba71ed2a407e4f", "message": "Optimise Regexp::StarPlusOrQuest() very slightly.\n\nChange-Id: I1ead691eef95d9f6fdb50777c1cd57df5b698465\nReviewed-on: https://code-review.googlesource.com/11210\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/14d0f1c4b0fb74aca53bccd8fe4c73c45383ef17", "message": "Squash *+, *?, +*, +?, ?* and ?+.\n\nChange-Id: Ied7dd7fb2e718cdf397b4dc4167ab622a9dbdc01\nReviewed-on: https://code-review.googlesource.com/11132\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/db20d46c05900a12539225fe800dd860b14e0061", "message": "Remove the half/third/quarter loop from the RE2 fuzzer.\n\nChange-Id: I7a5802035e8d13fbe1371c50f5cbfae7c99d0905\nReviewed-on: https://code-review.googlesource.com/11130\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/6b6354eb251df232f4992609f5cd766efb84a568", "message": "Improve the way that we fuzz RE2::GlobalReplace().\n\nChange-Id: I0626bc1c0ba69d6d6cba851714ca08d6ac2e15c3\nReviewed-on: https://code-review.googlesource.com/11093\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/193486d7164a40ce28d8ec64552df129c0558bad", "message": "Reduce the maximum repeat count when fuzzing.\n\nChange-Id: If033b4633da37c9a522df78259e082c644d88df8\nReviewed-on: https://code-review.googlesource.com/11092\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/a834dce68a013e6bcd885c6785d85d20e8d6e4da", "message": "rune_cache_ doesn't need to be a std::map<>.\n\nChange-Id: I05f3cf4841018a3f55d9c8ac86fdaada96e8e354\nReviewed-on: https://code-review.googlesource.com/11091\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/eb43800879a1d2505ae9c88a7eb70f55d75ea419", "message": "Set a fuzzer program size limit of 9999.\n\nChange-Id: Icf9da762ed34bcdd974378c7013e3d4d3e6cd9d4\nReviewed-on: https://code-review.googlesource.com/11090\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/7f673bef778cb1ed75c377529f591a9145760fd8", "message": "Improve some comments and readability.\n\nChange-Id: I104ce8b0917bf61e8b3f847411643dc55c794341\nReviewed-on: https://code-review.googlesource.com/11030\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/596d73e6084a88c5394724978b10680dc929d197", "message": "Tweak a couple of assert(3) calls.\n\nFixes #132.\n\nChange-Id: I0cf3b016fbf304ac53e04fc6b75a536cd9d755b1\nReviewed-on: https://code-review.googlesource.com/10950\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/f61ec5a3498a3ac0ff2749b4eeea24c0f1f6bf37", "message": "Address a warning from MSVC.\n\nChange-Id: I10556aefbb16f85442bbbf53d08c1fea40b5f7f2\nReviewed-on: https://code-review.googlesource.com/10894\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/eaf35ac9c2b069916be1f4084c659ad88dee174f", "message": "Make the RE2 fuzzer call RE2::GlobalReplace() conditionally.\n\nChange-Id: Iee9159c465c16f799133a0a504b8ffb5d963f335\nReviewed-on: https://code-review.googlesource.com/10893\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/aa627d9e7bb93778967e34cc015452ae453a4e78", "message": "Squash **, ++ and ?? during parsing.\n\nChange-Id: Ia227c64420f8fc75782638e80d2dafd6092183d2\nReviewed-on: https://code-review.googlesource.com/10892\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/7906344578cb22002cda5d6f7085d12959df2887", "message": "Fix bytecode blowup due to nested nullable subexpressions.\n\nThis bug was discovered by the LLVM fuzzer.\n\nChange-Id: I748a6ba1a7db4f9984acc7d354dfc6a662697714\nReviewed-on: https://code-review.googlesource.com/10891\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/d1715575ad9aafb116355f4233f7698f483bc081", "message": "Make the RE2 fuzzer ignore inputs larger than 1KiB.\n\nThe hope is to find a \"sweet spot\" for fuzzing: high coverage and high\nspeed. At the moment, we waste too much time on very large inputs that\ngive us very little.\n\nChange-Id: I94ee93f1d5293c63dc5fd749f47087cdc7acd43f\nReviewed-on: https://code-review.googlesource.com/10790\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/20f9edd42999c0337b568d16e0404870a991f01f", "message": "Oops, fix the bug in StringPiece::compare().\n\nChange-Id: Icfb03804a83ed2a8fd693baebf9c88562ae8094a\nReviewed-on: https://code-review.googlesource.com/10293\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/606f78e724b44f8204b3e106bcaf7c9aa3d51c65", "message": "Address undefined behaviour in StringPiece code.\n\nhttp://en.cppreference.com/w/c/string/byte/memcmp says: \"The behavior\nis undefined if access occurs beyond the end of either object pointed\nto by lhs and rhs. The behavior is undefined if either lhs or rhs is a\nnull pointer.\"\n\nFixes #129.\n\nChange-Id: Ibc73788dc7414c08fc1427d8dc06ad542de9798c\nReviewed-on: https://code-review.googlesource.com/10292\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/d8918e632f84576e3acad46d8280f4cc73fef2cd", "message": "Don't #include <sys/types.h> anymore.\n\nFixes #130.\n\nChange-Id: I8aa07691f40eaba44406a169004a16997f428337\nReviewed-on: https://code-review.googlesource.com/10290\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/09fc9ce11a634150a22d2a477ff7ba8866398a7a", "message": "Make SimplifyWalker::SimplifyRepeat() use Regexp::Concat().\n\nThis builds a two-level tree for very large numbers of\nsubexpressions. When min is greater than 65535 due to\ncoalescing, for example.\n\nThis bug was discovered by the LLVM fuzzer.\n\nChange-Id: I7e21d24f6546b9d8f3a3d844e0ed5c6af246aa1e\nReviewed-on: https://code-review.googlesource.com/9890\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/13fb267cf32c0b2a87ecf1bf72d89dec57ab0e36", "message": "Reduce the fuzzer program fanout limit to 9.\n\nChange-Id: I7bae28681165de0045a413d6fde69e058b17ba26\nReviewed-on: https://code-review.googlesource.com/9810\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/c4aa8c6372383b6bfcead32c5c694a8719643a4d", "message": "Flatten the kokoro/ directory structure. (2 of 2)\n\nChange-Id: Ie5a5ccd80d0339ddea2513d89487cfb0de04b5a3\nReviewed-on: https://code-review.googlesource.com/9491\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/c491a7128149448b39997d9922b27091c8c66d73", "message": "Flatten the kokoro/ directory structure. (1 of 2)\n\nChange-Id: I3affa082f79078c7dd40684e53b9705f06384641\nReviewed-on: https://code-review.googlesource.com/9490\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/170bda1eb39648ec63800e6720c1e2193a171cd3", "message": "Fix stack-use-after-scope bug found by ASan.\n\nChange-Id: I4bc8a42afc00b578583bbee52b719903d23720b2\nReviewed-on: https://code-review.googlesource.com/9475\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/4bb66d4f2fff9c5d4b0ef72634723180aba9f320", "message": "Callers must not expect RE2::Set match vectors to be sorted.\n\nChange-Id: I92e950075e73f2790cea80b5eb73b9133c18b229\nReviewed-on: https://code-review.googlesource.com/9474\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/97926eee04e21245052d4c7501a55d2a2e056ba8", "message": "The DLL conventionally goes into the bin/ directory.\n\nFixes #123.\n\nChange-Id: I2e45a6f96a7cf385b42bad8706b4cc8c40b5022e\nReviewed-on: https://code-review.googlesource.com/9410\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/d2402e7d972b97e96de163c189de252a457f9698", "message": "Install the DLL correctly. It's a RUNTIME target.\n\nFixes #123.\n\nChange-Id: I11588b539d9e1e0b37b90ebd176d7e40881cde9b\nReviewed-on: https://code-review.googlesource.com/9370\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/c964d9b07816f9b52ca692e23b8b3dba33beec54", "message": "Tidy up null StringPiece construction.\n\nChange-Id: I0e819fc553b4bdc77041567c5003fd4be0c417ce\nReviewed-on: https://code-review.googlesource.com/9050\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/b94b7cd42e9f02673cd748c1ac1d16db4052514c", "message": "Work around the GCC bug affecting flexible array members.\n\nFor #102.\n\nChange-Id: I0e4270f7e492a59b0ee43c523378b7b9d941f38a\nReviewed-on: https://code-review.googlesource.com/8492\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/002bf983f203b355873408ffe78bae4f28cf51d4", "message": "Ignore -Wmisleading-indentation in util/pcre.cc only.\n\nFixes #118.\n\nChange-Id: I8a626949666ae6dca3c86038a1698f9d817f974b\nReviewed-on: https://code-review.googlesource.com/7930\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/467cd1dcfd9b279a2cc3873356cd94584ce4866b", "message": "Remove the severity-related cruft in util/logging.h.\n\nFixes #117.\n\nChange-Id: I4aa6bb337e0d65e69ff64b18a0f610e206537ab4\nReviewed-on: https://code-review.googlesource.com/7830\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/6d5d18b44b89c8585cb79863c566974bf2b28991", "message": "Migrate to assert(3) in util/sparse_{array,set}.h.\n\nChange-Id: If732dca04de97c647887b337f6077df3f4f0bc46\nReviewed-on: https://code-review.googlesource.com/7793\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/7bab3dc83df6a838cc004cc7a7f51d5fe1a427d5", "message": "Make the dynamic binary tests work on Darwin.\n\nThanks to Ian Phillips for identifying the problem.\n\nChange-Id: Idf9bda6ebe7d492104542f4363b911a58d0dc569\nReviewed-on: https://code-review.googlesource.com/7593\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/4da516911cd1d52c65ccc9ec0a0273be12891386", "message": "Suppress a warning from MSVC in 32-bit mode.\n\nFixes #114.\n\nChange-Id: I371186fab00951ea52dd84878e21bb2e9142a756\nReviewed-on: https://code-review.googlesource.com/7592\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/d09247aa5097d84053e64ef7445246769b547683", "message": "Simplify Prog::GetDFA() a bit more.\n\nChange-Id: I862bbdc891cbfd51672f4624bc0f25906ee68564\nReviewed-on: https://code-review.googlesource.com/7533\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/da1249d9b5f34f3f8170d07ee5869b510eb477d0", "message": "Avoid heap allocations on the fast path for onces.\n\nCapturing anything (including `this') is convenient, but\nexpensive due to the overhead of std::function<> objects.\n\nChange-Id: Ibe8e91a1a09090d5abde1bb6d78d2617243045b9\nReviewed-on: https://code-review.googlesource.com/7532\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/d9e6245a6506876d2e9129eade0ed70f69ac456f", "message": "Use onces for lazy initialization of DFAs.\n\nChange-Id: I868967ebf2d477044e7317a536a5bb41ffd560bc\nReviewed-on: https://code-review.googlesource.com/7493\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/e5b8015fc59ff6be0f2a7b9bed42e3f6a1d83867", "message": "Use MSVC 2013 for continuous integration.\n\nWe claim to support it, so we should ensure\nthat we actually support it. ;)\n\nFixes #112.\n\nChange-Id: Ia1fd23eb0e6f83ead453306be0b203782d62fd1c\nReviewed-on: https://code-review.googlesource.com/7492\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/ff1290c064b047f68e18812c3455f7098eeda93b", "message": "Comment out use of noexcept and ref-qualification.\n\nMSVC 2013 does not support them and we don't need them,\nbut they can be restored someday.\n\nFixes #112.\n\nChange-Id: Ie7b46535419f6e05e864d1bf0f108c967af40f5e\nReviewed-on: https://code-review.googlesource.com/7491\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/2a160df458b65ab93ea3822d310a7636c1647cec", "message": "Tidy up logging some more in the filter code.\n\nChange-Id: I70e535a2853fdb9262db1b88c552bc3683ecc5a3\nReviewed-on: https://code-review.googlesource.com/7406\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/2ce1e01e947f44d0fdc496fa1fa258241968c9af", "message": "Oops, PrefilterTree::RegexpsGivenStrings() was overly strict.\n\nChange-Id: I5f7570fa715a82c2daefda8926921d8bd2150399\nReviewed-on: https://code-review.googlesource.com/7405\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/7d5708d488a7172d3f5a69f7aa4af6c467e5df87", "message": "Tidy up some uses of LOG(WARNING).\n\nChange-Id: I15b94ab5b542554ce3971684fc3d67c3b18f69fb\nReviewed-on: https://code-review.googlesource.com/7404\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/ec711bc5bff24dd17dab3bb1b41a8cf9532f437c", "message": "Tidy up the \"extra debugging\" knobs and their uses.\n\nChange-Id: I6325501283e1a8d7af65ebbc8ba9e9562f78e526\nReviewed-on: https://code-review.googlesource.com/7403\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/cec7f261c9e1118f5e63703b883c1a2cd761c8c3", "message": "Tidy up various uses of VLOG.\n\nChange-Id: I399d8d5abc21919080e7906652c34f42dcda078b\nReviewed-on: https://code-review.googlesource.com/7402\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/7f3e8fe2a0f1b9e126595493bcd5c9f6fd76b4bb", "message": "Change two uses of LOG(FATAL) to LOG(DFATAL) or DCHECK.\n\nChange-Id: I96a641172fc906cbe1c04c9c2782830f2254852e\nReviewed-on: https://code-review.googlesource.com/7401\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/259fab38d14b171a59b3c9af77257adefabd877f", "message": "Change two uses of CHECK to DCHECK.\n\nChange-Id: I8bfa2ccd43baba023f7ada5fcacd264f98800631\nReviewed-on: https://code-review.googlesource.com/7400\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/5f91c4c941ca7e3d003421be20c3f9083b9f1749", "message": "Allow MSVC users to build a DLL automagically.\n\nMany thanks to Richard Thiebaud for investigating this solution\nas well as various other possibilities along the way.\n\nFixes #66.\n\nChange-Id: I07d9a9eb675165d13c76b41372378f05fdb8f604\nReviewed-on: https://code-review.googlesource.com/7399\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/93583735faf4ca41c1e13ea302f61bc83e49b7bc", "message": "Remove the minloglevel knob.\n\nChange-Id: Ibeb6921ce62ae1dcf8ecd5d1321759ab274e278c\nReviewed-on: https://code-review.googlesource.com/7398\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/6c7b9aff768914e105d2bb0e6b1f092917c0c794", "message": "Consolidate the \"DFA out of memory\" logging.\n\nChange-Id: I3219bee79cd5fb1399499e7a6b97f04598049271\nReviewed-on: https://code-review.googlesource.com/7397\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/2a867b8e61247f99c5ac62c9085e2f51ea454098", "message": "Get rid of the __declspec(selectany) wrinkles.\n\nRichard Thiebaud mentioned that MSVC doesn't need them anymore.\n\nChange-Id: I8745b3043b005e04145f30cf1e748c7f2a46503f\nReviewed-on: https://code-review.googlesource.com/7392\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/1c68fd4b2bab5d6a29bc9b1c1ab07f39805c5b35", "message": "Make the re2_dfa_bail_when_slow knob not a flag.\n\nChange-Id: I2aa40ff2ba02b45a9573399977ce2ae515834947\nReviewed-on: https://code-review.googlesource.com/7380\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/dd4c06c59d7e02bb9606838b5d869ba978c4a4a8", "message": "Remove the trace_re2 knob and associated logging.\n\nChange-Id: Ie6c47de4f58c981fa78c93a6c99d341787faf4a5\nReviewed-on: https://code-review.googlesource.com/7379\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/6d7323b2f1136915f31803a9128dcc23b714e284", "message": "Tidy up FilteredRE2 and PrefilterTree a little.\n\nIn particular, change the filtered_re2_min_atom_len knob from a\nflag (i.e. a global variable) to a member variable whose value\nis received via a constructor argument.\n\nChange-Id: If192438403ac11652230312a1ce57d13346072cb\nReviewed-on: https://code-review.googlesource.com/7378\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/ac96aa4d699ba92e32a459c4e3fced53c3608d77", "message": "Tidy up a couple of DFA tests.\n\nChange-Id: I03dc85f66798ce2fd345c8f740e8ab16214c8ef7\nReviewed-on: https://code-review.googlesource.com/7377\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/797439308d3ce3083a79eac8e61d79dbb3e8fc1c", "message": "Add missing #include.\n\nFixes #111.\n\nChange-Id: I147026d6c708374faf5248385237e94e22ade863\nReviewed-on: https://code-review.googlesource.com/7373\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/78dd4fa1f86bafbf5a5eb006778d9e6e27297af6", "message": "Rename the CI scripts to mention the build tools.\n\nChange-Id: I97bdbe553b77eed8e7801eae27f5bdd118d6cd19\nReviewed-on: https://code-review.googlesource.com/7275\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/c5094dd2ab958d597120f382a5a25de794776b5b", "message": "Get test output on failure from Bazel.\n\nChange-Id: I963276be68d5521f933a2f4df07b020fd2d9b1cf\nReviewed-on: https://code-review.googlesource.com/7222\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/48ace72561ab570e99a615c69acf329cc8b7ebf4", "message": "MSVC fails the 6700000000081920.1 test now. Sigh.\n\nChange-Id: Ic49cb1f3a1720e896b8a25b8db3fd8265c7d7f3c\nReviewed-on: https://code-review.googlesource.com/7220\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/a7e89e66a8d0b06d686eaf60a90897f7f478893b", "message": "Get test output on failure from CTest.\n\nChange-Id: I3cec348d1bcd3179b6b89618b89b4be80a9d0e57\nReviewed-on: https://code-review.googlesource.com/7219\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/2bdacc6ef1c8acd389b67c978606018beb7af7f2", "message": "Tweak the CI script for Bazel on Ubuntu.\n\nChange-Id: I5287b1173c456ea966c0521df9622d67fab16c70\nReviewed-on: https://code-review.googlesource.com/7218\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/3ce40f00c48d8bbfac748c67af36ea63a960b74e", "message": "Tweak the CI script for CMake on Windows.\n\nChange-Id: I10f78c381c3aaf542952863ac6d6e9398d2fbb65\nReviewed-on: https://code-review.googlesource.com/7217\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/00b4a28feb7c706303babee93d733014739f3aa5", "message": "Configure CI using CMake on Windows.\n\nChange-Id: Ia0c4825c5133ee13f2f671bf0bab05e211877f9a\nReviewed-on: https://code-review.googlesource.com/7216\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/590ce737f232e9d71f8665466cddf9c851476f3a", "message": "Make `make test' work with CMake.\n\nChange-Id: Id2fe7b3746e6416ac24a09c73f716a7ce2507293\nReviewed-on: https://code-review.googlesource.com/7213\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/1c70f641ee176fe7bd048b3e05e440f918add03c", "message": "Configure CI using Bazel on Ubuntu.\n\nChange-Id: I4ae8d5d50fbc0e4eddc77220ffb6e072fe706a81\nReviewed-on: https://code-review.googlesource.com/7210\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/0a62bed537d4748f73c2f834f897f49d93e3c765", "message": "Oops, SparseSet::dense_ is just a vector of int.\n\nChange-Id: I1783d71f8dbdb851abe7c05faaedddd68faa26ba\nReviewed-on: https://code-review.googlesource.com/7171\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/62710da7b278e1788dbff9abae438d5fc6e77a4f", "message": "Require CMake version 2.8.12 or later.\n\nFixes #110.\n\nChange-Id: I64b92c56fd8b08365a0b1e9b64aa6410467eee1a\nReviewed-on: https://code-review.googlesource.com/7154\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/5c3804967254237dd1510ca2bef9588689958610", "message": "Simplify a few \"debug mode\" checks.\n\nChange-Id: Ia1b4933db43183f83d7fddc09e6b9a0dde81f4b0\nReviewed-on: https://code-review.googlesource.com/7153\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/6a6df532661ba68481acad3146839c72977a9f6e", "message": "Undo the nerfing of SparseArray<> and SparseSet.\n\nThe undefined behaviour still needs to be fixed, but\nthe performance degradation is too much at this point.\n\nChange-Id: I5a9dfe6cf9de96dade373b70ffb411f0ba28e861\nReviewed-on: https://code-review.googlesource.com/7152\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/22e082dd6a739b25f57ccb9e35b52f4f6d693710", "message": "Address one more warning from MSVC.\n\nChange-Id: Ia5d47bcfeaac002f520b5b6638bedfe28c430d26\nReviewed-on: https://code-review.googlesource.com/7012\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/046ac28de1cce0ab05918c3b4a6f00bc72df2428", "message": "Address some warnings from MSVC.\n\nFixes #109.\n\nChange-Id: Idd3181f928b193542cf4c597749c7d1e492c50a8\nReviewed-on: https://code-review.googlesource.com/7011\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/ce902a667c1eb80d7339c0ddddb8474b7340abd7", "message": "Tidy up various StringPiece usage.\n\nChange-Id: Ia95fdb24a497a2b31c0050b1fc7eecbe498f8f3a\nReviewed-on: https://code-review.googlesource.com/6976\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/3c186ec46aad3d2d284e72efe295d20cdeed6f10", "message": "Make string escaping use size_t.\n\nChange-Id: Ic05b73d1410c85f78cb151a8738aaf56a7cec654\nReviewed-on: https://code-review.googlesource.com/6975\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/9920a27d78bdc11b09d00f69c74971fc2ce02fe6", "message": "Migrate the RE2 API to size_t.\n\nFixes #107.\n\nChange-Id: I2d85bd40988ebcac33edc680a1f3ddccf631fc4c\nReviewed-on: https://code-review.googlesource.com/6974\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/52f3a17126f836377c8ca80d9dd78f7dd8be9d63", "message": "Migrate the Arg parsers to size_t.\n\nChange-Id: I6eb424c4ce71f810f00cf412e26bac52713ae9bf\nReviewed-on: https://code-review.googlesource.com/6973\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/070cf98c22ab87b115c68a87f99e24c1e1b098c6", "message": "Tidy up StringPiece and make it use size_t.\n\nChange-Id: Ife8344d95bd1d9dfff94cd57b3d59b9b9a0b7bc8\nReviewed-on: https://code-review.googlesource.com/6972\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/5b351a087497decfb4aa53e65a9baf845497931b", "message": "Use StringPiece::size() and StringPiece::ToString().\n\nChange-Id: I5833a681cc1e324a100b59b11c5e38f149346fe3\nReviewed-on: https://code-review.googlesource.com/6971\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/bd64bce7d2663de6d37aac3f41602f5179a6473c", "message": "Tidy up the kDefaultMaxMem definition.\n\nChange-Id: I78fbb6287df1a0d809cbe7ad9b0d9633912762c3\nReviewed-on: https://code-review.googlesource.com/6970\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/06c79cbc93796b2bda126be78b91b0aa3f5c9237", "message": "Just use _snprintf() and _vsnprintf() on MSVC.\n\nChange-Id: I419666f74e74b05d6c8209b2d7dcc751f34866ac\nReviewed-on: https://code-review.googlesource.com/6915\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/3ba4d7bd1128497f50841dde98558bf326b14e64", "message": "MSVC has strtof(3), strtoll(3) and strtoull(3) now.\n\nChange-Id: If834c329917d123f8afee2acdbe40a4d40f2b39a\nReviewed-on: https://code-review.googlesource.com/6914\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/37dd09aaa914d7eeeaff250108a88133b40168ad", "message": "Tidy up MSVC pragma warning disables.\n\nChange-Id: I3f6a9b481119cc479dcd0bb613bd9d8e97568220\nReviewed-on: https://code-review.googlesource.com/6913\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/5039db58b0f286be84ccd01fe1b362c72d3600b2", "message": "Get rid of simple uses of snprintf(3).\n\nChange-Id: Icfbe98b7ea0d64db3e934120f4a2966cb3f6ae19\nReviewed-on: https://code-review.googlesource.com/6912\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/f7ffaa4168785a661db694bb6c425584db331df7", "message": "Make `make install' work with CMake.\n\nChange-Id: Ie5dd1ac1cea3371e354bc190ff94bd235bd52f15\nReviewed-on: https://code-review.googlesource.com/6911\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/cc382ec83bfa956dc0afc4da210415f5a615314d", "message": "Remove the last #include directives from util/util.h.\n\nChange-Id: I3e1a7f3644cec27adcfbd6f806851ec0d9223b38\nReviewed-on: https://code-review.googlesource.com/6835\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/0a03443c954b07cfacf35f7074ac0ff330bab023", "message": "Update the disallowed copy/assign in the mutex code.\n\nChange-Id: I1fcc6af6b69f537f6528396e27f4d809fa432ee5\nReviewed-on: https://code-review.googlesource.com/6834\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/f408be0863f6ecc8cda0371581e7a748f4132ee9", "message": "Ditch the DISALLOW_COPY_AND_ASSIGN macro.\n\nChange-Id: Ib20ff382eee55eaef0d59f1af7e2f4571662f20e\nReviewed-on: https://code-review.googlesource.com/6833\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/95ce0ccb89ca37503a6dd8d032d45e330254aacf", "message": "Tidy up the string utilities.\n\nChange-Id: Ifd19a737b4a6a3e333aac64909a4694f7169786e\nReviewed-on: https://code-review.googlesource.com/6832\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/1e8fade960c4e594f69c8d2bca7f4eccf708a987", "message": "Replace the DFA state cache hash function.\n\nChange-Id: I43a8f84e733c062b968dc8f0a9f4b35f550be691\nReviewed-on: https://code-review.googlesource.com/6831\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/171254d89ef3e78b8c902335cd167f292a3f43d9", "message": "Avoid disagreeing with Perl/PCRE over \\v.\n\nChange-Id: Ic6f790a5f1bb355385cb789569d3afbb0ae1b9bb\nReviewed-on: https://code-review.googlesource.com/6830\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/ec8dfdfa39233663779f01935124ecc36e840a03", "message": "Make SparseSet resemble SparseArray<> more.\n\nChange-Id: I312e5f9bb89ca1bc97f6e8a7b81f3b61a1fe9d59\nReviewed-on: https://code-review.googlesource.com/6732\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/e1f172102a67d810d362fbca7eced914c3015da0", "message": "Refresh SparseArray<> from the Google copy.\n\nIn particular, it now initialises memory in\norder to avoid undefined behaviour.\n\nChange-Id: If4a1ecfdd5703e6e965f19de3459dfb2973f16d8\nReviewed-on: https://code-review.googlesource.com/6731\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/f439f24f4038bd97209500aba44c01bfa6890df1", "message": "Mention the R wrapper in the README file.\n\nFixes #105.\n\nChange-Id: I86ea45ddb1db0dd9f74f193974cfd5322121d9be\nReviewed-on: https://code-review.googlesource.com/6730\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/50ebfe54b4298c42598ad659baae40a32fd78088", "message": "Use either pthread_rwlock_t or std::mutex.\n\nThis simplifies util/mutex.h greatly while keeping\nreader/writer locks for those who already had them.\n\nChange-Id: Ia17c41db48c67b03ae5789a3adf0d6eaa3567aab\nReviewed-on: https://code-review.googlesource.com/6713\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/3a7b4b18f32b8cddf91ee7e8d1ad01745f0ecfe3", "message": "Use std::chrono::steady_clock for benchmarks.\n\nChange-Id: I56072ae0454cff98fde3854e441201de3f3f7baa\nReviewed-on: https://code-review.googlesource.com/6712\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/2b58ce70135d2aa16825dfa6aeea8236568e3f29", "message": "Switch to std::minstd_rand0.\n\nChange-Id: I75dd0a0043d6f89ea058b5bf69a6892fc4784033\nReviewed-on: https://code-review.googlesource.com/6711\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/3adae0cb0171b2974eef2738db019f49e39340e0", "message": "Make RE2::GlobalReplace() friendlier to UTF-8.\n\nFixes #104.\n\nChange-Id: I439034909011fcbde090dde502c619cfefe8f732\nReviewed-on: https://code-review.googlesource.com/6710\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/35febd432d9e6d8630845285c7f29eabd1df7beb", "message": "Make FindLSBSet() work on MSVC for x86, not just for x64.\n\nFixes #103.\n\nChange-Id: Iaf00ebfb166d7e70897dd540bb1f7065237b1168\nReviewed-on: https://code-review.googlesource.com/6690\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/71d6f77ec86c3d5e6f052690c37006b9fe692db9", "message": "Switch to std::thread. Simplify the DFA test cases.\n\nChange-Id: I172a1fa2a660afc077625d0b0b3ee53bf8f58688\nReviewed-on: https://code-review.googlesource.com/6637\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/77d9e6e8eb318bb808a8180004ec9361cf6083f7", "message": "Capture oldcolor by copy, not by reference.\n\nChange-Id: I36c52e5fa1ad8c0a6222a429fc6aae320db44ebf\nReviewed-on: https://code-review.googlesource.com/6636\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/ce6f2884c4b52509fd6c5d12b8f1c40587067784", "message": "Remove support for Valgrind. (Sanitizers FTW.)\n\nChange-Id: I8a96e750d3b5b9bbe233c213782edde70c1975eb\nReviewed-on: https://code-review.googlesource.com/6635\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/4ac2e8fb894f8de931cf39400999ce48834cbe97", "message": "Bump kStateCacheOverhead to 40 bytes.\n\nAlthough it is still entirely too empirical for my taste, this\ndoes seem to pull the heap growth closer to the memory budget.\n\nChange-Id: I51f592410956024f77989a4472336797e272ba26\nReviewed-on: https://code-review.googlesource.com/6634\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/b6ea0ff70f3cab401edad1613e71ef406a5dc108", "message": "Better yet, let's not use StringPrintf() there.\n\nChange-Id: Ie1d35babf0bcd21e5fd6de5df2b88d7200fd0d19\nReviewed-on: https://code-review.googlesource.com/5570\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/a27435b1dd985f89be19e2414220b743430dfdde", "message": "Fix a couple of format strings.\n\nChange-Id: Iae1fbf0565e4d2f7b5f322d4e0a29e0e920460b4\nReviewed-on: https://code-review.googlesource.com/5554\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/9e5fb2bc186d8f9566b66fb5fe683c721c7d924c", "message": "Tidy up some uses of types.\n\nChange-Id: I1107175085043160717d5049094e144736350fb0\nReviewed-on: https://code-review.googlesource.com/5553\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/52097f86c5595d7f5b2de52debf0a9973ad7b749", "message": "Don't assume that `long long' is exactly 64 bits.\n\nChange-Id: I450d35c01bbcba93fb5b33f21f15b5778a02fca4\nReviewed-on: https://code-review.googlesource.com/5552\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/d8778253872afdde9536565400d38bb4defeeb85", "message": "Use standard integer types.\n\nChange-Id: I5d9f2df5500ca53c856efe200c34e1d330261bd8\nReviewed-on: https://code-review.googlesource.com/5551\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/336696a60a9318a0519e5d623b3af8fc66d8509a", "message": "Get rid of using-directives.\n\nChange-Id: I36187cd0246a239a23c094d83bbc95ebb9699fee\nReviewed-on: https://code-review.googlesource.com/5550\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/6e74bfcaf447cf3ba44a67d70fe81c292f9b0ed4", "message": "Fix a comment about the maximum repeat count.\n\nChange-Id: I8f232681798fad75a196d35b54849fadf0b14efc\nReviewed-on: https://code-review.googlesource.com/5507\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/ead5eebb55702186ecf4ac30e851b4da472cd688", "message": "Retire uint in favour of uint32.\n\nChange-Id: I236bab7d151600e63de444fda513512d3daa0247\nReviewed-on: https://code-review.googlesource.com/5506\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/8ff753942b7c5177131345d4ef96bd3db6456c87", "message": "Ditch the COMPILE_ASSERT and ATTRIBUTE_UNUSED macros.\n\nChange-Id: I47ee9d9a202e6cfc59daea16c301e13a5e556533\nReviewed-on: https://code-review.googlesource.com/5505\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/5a7d2fd9956862c806f45ddeace9eccb28b1f353", "message": "Make the RE2 fuzzer ignore overly large inputs.\n\nChange-Id: I069a4d138cbe9313ee5402f268e8f732422ed5f8\nReviewed-on: https://code-review.googlesource.com/5504\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/8fe98fb939fd9605174b3782eeea89837cdd8ab2", "message": "Add a generic implementation of FindLSBSet().\n\nChange-Id: Ib95f149e5790d762667b6fbdb72353ae991c7dca\nReviewed-on: https://code-review.googlesource.com/5503\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/fb40e7d290b96b5c45d0e56e3c221752d5beb32d", "message": "Move util/bitmap.h to re2/bitmap256.h.\n\nChange-Id: I52c7e25c37b6134a78c10459bd97e7350b1ce25b\nReviewed-on: https://code-review.googlesource.com/5502\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/6bf3f71b1f65bc858f05da0c94d0b93a76e7f319", "message": "Fix testinstall.cc.\n\nChange-Id: Id1760addd0b55ccb6d6bb9c2c8ef10a874f9bcd3\nReviewed-on: https://code-review.googlesource.com/5444\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/ee55a8f64d253bdf5bfa98e8d09901a5fb9ee13c", "message": "Remove more #include directives from util/util.h.\n\nThis time, it was also necessary to remove using declarations,\nwhich meant adding \"std::\" to everything. I left std::string\nalone for now, but added a couple of TODOs for it.\n\nChange-Id: Idc45d6587be3ac3a2be1c9c941b4bad5b7a3fdb3\nReviewed-on: https://code-review.googlesource.com/5443\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/861ccbc9d66334d6eff8183d08f4ef504e055741", "message": "Remove unused flag from re2/testing/compile_test.cc.\n\nChange-Id: I3034b64991ab65ee82663b7cc09abf3e167743c8\nReviewed-on: https://code-review.googlesource.com/5442\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/0029946577cc5b848a3aea3751bfa42e76fb84c6", "message": "Start removing #include directives from util/util.h.\n\nOf course, this entails adding them to individual source files.\n\nChange-Id: Iafa89975cfa736ac4c63559ec5e8ec88d4d97eb4\nReviewed-on: https://code-review.googlesource.com/5441\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/a7a1743aaafc3f2ed0a90e7830b1680bf2f0acc8", "message": "Tidy up use of the LOGGING macro.\n\nChange-Id: I8802a3be562f301a0a8d4440f720182f554a2a6b\nReviewed-on: https://code-review.googlesource.com/5425\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/998584d67574c36b23625d11ff1d8b14d0db8ef9", "message": "Tidy up some forward declarations.\n\nChange-Id: I625fe935fbdbdffa05cfd6f02060e5b23a4190af\nReviewed-on: https://code-review.googlesource.com/5424\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/d29a86426b912530c8bab3724e8a7d429816fb80", "message": "Tidy up the canned parsers a little.\n\nChange-Id: Iacbb5e84333aadbdd58d4a8105bd183e33b0d6b6\nReviewed-on: https://code-review.googlesource.com/5394\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/384377f12178788b1d7e82a61470fb2b72f76f16", "message": "Retire RE2_HAVE_LONGLONG. C++11 has long long.\n\nChange-Id: If25893661bda6cbc71b45b443aee15125f27a9fc\nReviewed-on: https://code-review.googlesource.com/5393\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/89a5907d23e9e0a9d3eb28845a2d14005d8e9c73", "message": "Normalise all include guards.\n\nChange-Id: Ia0ba7c7a3d013038f3c86b4ec5455d8e0a9dccb3\nReviewed-on: https://code-review.googlesource.com/5392\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/8f8bb44754f8ca4401033a16f5e24c8e7d1c127a", "message": "Simplify some of the OnePass code.\n\nChange-Id: I9713a93602a63f2e93700eb33b9e65126e61b699\nReviewed-on: https://code-review.googlesource.com/5391\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/5835165db0e21d8281bbc4b912b34ba0f508616d", "message": "Curb Prog::IsOnePass()'s enthusiasm.\n\nChange-Id: Ie922b30c0a4e2c404da78b2287169e4351de5b42\nReviewed-on: https://code-review.googlesource.com/5333\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/5d48a260d7ae62ce9f17776ff1466a0dd4b31884", "message": "Use a dummy FALLTHROUGH_INTENDED macro.\n\nChange-Id: Ica8d62f65014a9e8e63a830e2f978ca5faf29621\nReviewed-on: https://code-review.googlesource.com/5323\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/d74eb1d0910a0a8be0faf68e3d35a45f8c869710", "message": "Tweak an edge case in DFA::AnalyzeSearchHelper().\n\nChange-Id: I8051d69a19616425c864a862090f701fdce0904c\nReviewed-on: https://code-review.googlesource.com/5322\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/0aefcfb4dc60f6d401482c62014eec5bd70cc225", "message": "char is distinct from signed char and unsigned char.\n\nChange-Id: I13f226d8192e3e9baafb4efa3c584c185c30f6f7\nReviewed-on: https://code-review.googlesource.com/5330\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/e85c8a92540ea2272ad638ac827ff039d1792e01", "message": "Fix the naming in re2_arg_test.cc.\n\nChange-Id: I9c7957f16f243221d031b122c3c72b6322857a6a\nReviewed-on: https://code-review.googlesource.com/5321\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/a5a6eeaa938136378a191124f94a6f15638e4db2", "message": "Add LazyRE2, a \"lazy static pointer\" helper.\n\nChange-Id: I7d268ed9709750bd910da3c48458c4faf9817291\nReviewed-on: https://code-review.googlesource.com/5320\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/3da6e061ca6c1449323dfbb23f39775e92cef63b", "message": "Oops, we can't just delete the State* here.\n\nChange-Id: I3bfcbb82a618e658faef098d45c95d65ff3331bd\nReviewed-on: https://code-review.googlesource.com/5256\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/bb58143e6b3196ccb8a3115d86a0dc73d9bceb3b", "message": "Simplify StateSet and DFA::ClearCache().\n\nChange-Id: Ifc1167504284189d203a2e84f667ba38070ff6ec\nReviewed-on: https://code-review.googlesource.com/5254\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/fb36443907c6f9816a00d16a4ba59ad4d098c949", "message": "Improve the bytemap computation one more time.\n\nChange-Id: Id157eef2a18d02c1e4d0ad689d090826f13a8cc0\nReviewed-on: https://code-review.googlesource.com/5252\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/f3705c6a2fac42066d7949efe1eb5c0acd3012f2", "message": "Avoid a couple of potential bugs.\n\nChange-Id: I287e14dd365f8d70b0d83359abd26ce3e9929a49\nReviewed-on: https://code-review.googlesource.com/5251\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/1051d1c4ac12ee9606d3d38ed26211a42c1905a5", "message": "Improve the bytemap computation some more.\n\nChange-Id: I319462fa445124228e55dabc7025948ccc92a486\nReviewed-on: https://code-review.googlesource.com/5250\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/bd963ac5a1a6368249a0b90ab21100091ae88d80", "message": "Add yet another test.\n\nChange-Id: I2a35f135b9ef95bfeb10148f7dc425f3f3854508\nReviewed-on: https://code-review.googlesource.com/5248\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/48dc259f95ae6c3ac9cc24a2018711b8f9c54c24", "message": "Fix an error from MSVC.\n\nChange-Id: I32b5e032f9c0c0da6075922afe99bfd864c1f166\nReviewed-on: https://code-review.googlesource.com/5246\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/636bc71728b7488c43f9441ecfc80bdb1905b3f0", "message": "Add another test with a FIXME.\n\nChange-Id: I8e73d06b7a0a7dbeae7b598bc644823a0fd42dfd\nReviewed-on: https://code-review.googlesource.com/5245\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/c8c6184d1dcfd5d97d4e6a7f48b8d889f1d45856", "message": "Tweak #include ordering.\n\nChange-Id: I779644d890bdcaead2a00c5de081da3f2cb04f70\nReviewed-on: https://code-review.googlesource.com/5244\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/53aeca28e03d8ddd8ab5dc23c578b6f32e3229fb", "message": "Don't inline the larger functions.\n\nChange-Id: I9cd75d9301c77b1bc1866d32b46915e91548cba6\nReviewed-on: https://code-review.googlesource.com/5243\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/eebe12ef967841d148f0f60120f638c7825bea7b", "message": "Improve the bytemap computation.\n\nChange-Id: Ie3c81a7f6621d1f9b84f807a2679df5c3cccf897\nReviewed-on: https://code-review.googlesource.com/5242\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/1d06d4b327923bf7ff5d55563fcde509c5da86d8", "message": "Fix a minor style issue. Add another test.\n\nChange-Id: I2b82cf5bec7c06926e54f98ee421a0bf57500329\nReviewed-on: https://code-review.googlesource.com/5241\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/65099976bd87b48f2c03dc4d7712b3fc1fdfa9d3", "message": "Factor out the bitmap code into a Bitmap256 class.\n\nChange-Id: I9ff8f4256cd7fbc83a3eb16dff68478b9963c6bd\nReviewed-on: https://code-review.googlesource.com/5240\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/619c6acf570482b9648d70075b0e10d2ea49d6a2", "message": "Fix a warning from MSVC.\n\nChange-Id: Ib42e2c57df960861872db0a2cde5684c72cd4b82\nReviewed-on: https://code-review.googlesource.com/5166\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/718df09610fee584c9038d8d519697e507e09c9b", "message": "Make the bytemap tests use DumpByteMap().\n\nChange-Id: Iec7ac8c6a39948843bfe1b30d9e58877059ca969\nReviewed-on: https://code-review.googlesource.com/5165\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/fd428f4b6527edbce7b353adf775e1429e3ce8d8", "message": "Prefer CPU time (when available) for benchmarks.\n\nChange-Id: Iaef04f155fb3bfa35b0945e7fd003f1343fdf34f\nReviewed-on: https://code-review.googlesource.com/5164\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/0bdee2788033a617bcb8a145bcf9f612098029a4", "message": "Rework Bitmap<> into ByteMapBuilder.\n\nChange-Id: Iceb65cffe7fa7a5742af0a41032fd6c092852dde\nReviewed-on: https://code-review.googlesource.com/5163\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/0fb79d769f5584c1089edece40dcfc43a1764aa7", "message": "Move Bitmap<> from prog.h to prog.cc.\n\nChange-Id: I9137b7aff73d9397df5728882c0e6d547d14920d\nReviewed-on: https://code-review.googlesource.com/5162\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/f257d5d045872368e3cd7e606fc581410f29d192", "message": "Stop MSVC from complaining about flexible array members.\n\nFixes #99.\n\nChange-Id: I44bd11902440bd0a74e22ac90aae0d9550dd056a\nReviewed-on: https://code-review.googlesource.com/5161\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/4f47841c3897b8d764e9f2a971078b514031acd6", "message": "Fix the DFA memory budget logic for RE2::Set.\n\nChange-Id: I10dafc05ba500e218cbb5dfe65c9297944eb7135\nReviewed-on: https://code-review.googlesource.com/5160\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/b34c0752a9fefb132583197552793a7395b9d3ef", "message": "Use flexible array members.\n\nThey are supported by GCC, Clang and MSVC and using them is better than\nusing arrays of size 1, which actually constitutes undefined behaviour!\n\nChange-Id: I8041d71ffcf7ee6481c000a81a26c0083b726b90\nReviewed-on: https://code-review.googlesource.com/4981\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/b246293a2ce5dbaf744185e0c58cabd235a473c1", "message": "Add zero-argument overload for Apply().\n\nFixes #98.\n\nChange-Id: If67db9730a80c36633fb739c86e058a8c8f92ce0\nReviewed-on: https://code-review.googlesource.com/4960\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/49337bd77880a59baa929497a88cacddde1eb9fa", "message": "Tweak a couple of things for style.\n\nChange-Id: I53aa400704a08b2ac453237afb388c9a2b0fbe17\nReviewed-on: https://code-review.googlesource.com/4910\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/1d0aa858315275e7d81a76e496dfead9fda96452", "message": "Don't waste time fuzzing high-fanout programs.\n\nChange-Id: If5d291acc390db7b1afcce61753dffd737feb672\nReviewed-on: https://code-review.googlesource.com/4902\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/c5f0094d79032d53b4aace38580ac3d6d6f460fd", "message": "Replace variadic_function.h with variadic templates.\n\nThis time, using forwarding references and not breaking SWIG.\n\nChange-Id: I4069ae960f2d8b1efb79e7cc6f7ba2a7a56d52c0\nReviewed-on: https://code-review.googlesource.com/4882\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/bfa5864478949b19e345fc8da15e681ee0326dac", "message": "Add a target for fuzzers like libFuzzer and AFL.\n\nFixes #64.\n\nChange-Id: If4f351c6642385308577b73c25ea1f1436214f58\nReviewed-on: https://code-review.googlesource.com/4851\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/901dde3a5f53e4b2c258dfd7a8f75da886baa7a9", "message": "Work around the weirdness of sed(1) on Darwin.\n\nFixes #94.\n\nChange-Id: I647f8d1e99f1b5c5f36b4ea08b4740d5519e0daf\nReviewed-on: https://code-review.googlesource.com/4850\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/5a1af4408aa094012f11f3013edfa8e165bb4c91", "message": "The SunOS linker does not support wildcards.\n\nFixes #93.\n\nChange-Id: I76c9db746b3e92bf9bc6faaa7a0c7bf4bf64cf3f\nReviewed-on: https://code-review.googlesource.com/4842\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/30200d436e2be163811126c5c2e355a3c207183f", "message": "Apply stack churn/size tweaks to Prog::IsOnePass().\n\nChange-Id: I46f449bb6564888aa1eb386bbb9171354c038d06\nReviewed-on: https://code-review.googlesource.com/4841\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/7534e4ee6819aa61274836f558ffbda7a24294ef", "message": "Revert \"Replace variadic_function.h with variadic templates.\"\n\nThis reverts commit f91e7e1bee9f68e4ef9ce49878647f85ed94a133.\n\nChange-Id: Id75e54fc86b4c54ffb85d6f0cc3546e418a2be81\nReviewed-on: https://code-review.googlesource.com/4820\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/f91e7e1bee9f68e4ef9ce49878647f85ed94a133", "message": "Replace variadic_function.h with variadic templates.\n\nChange-Id: I8e527268405169ea9234b55d9f64f9349164104c\nReviewed-on: https://code-review.googlesource.com/4792\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/9efd0dfacc81cc279e135a0e092ff5e9c1d20637", "message": "Fix bug in bytemap computation. Mea culpa.\n\nChange-Id: I2b85597c4c78d68be001576da314513970100633\nReviewed-on: https://code-review.googlesource.com/4766\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/5ff625f3aabac16667a71aad4b4ee14f9976d9b8", "message": "Compute the first byte once (lazily) per Prog.\n\nChange-Id: If7c44f3330865744e88a7959dcdef7f0b9eb97d3\nReviewed-on: https://code-review.googlesource.com/4765\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/565fcac8a79225d34f4573d15d103cca0992a27e", "message": "Consolidate bytemap logic into Prog::ComputeByteMap().\n\nChange-Id: I9740bba924632c869efc3c395295c86748994c62\nReviewed-on: https://code-review.googlesource.com/4764\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/6da1b835024f871834bca7c70ba1b0f9e1254c44", "message": "Move the bytemap dump code into Prog::DumpByteMap().\n\nChange-Id: I5f23ce1fa7d190917f94b8196cac458e7ec26fbd\nReviewed-on: https://code-review.googlesource.com/4763\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/aafe5abcb8a6b85965843c341fcc2f6d8e051d9a", "message": "std::unordered_set<> should work everywhere now.\n\nChange-Id: I34674db12cfad39e883da288058545a860f3c31d\nReviewed-on: https://code-review.googlesource.com/4762\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/33114d19ec3acc1bed077c7091b255cc1b021604", "message": "Get rid of Trim().\n\nChange-Id: I535347c72e5bf29ad3f20f44b74b90880813c336\nProg::Flatten() does the same thing when it finishes.\nReviewed-on: https://code-review.googlesource.com/4761\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/1699b78eefb878ccb4945cabc954aa7a751ded2f", "message": "Get rid of delete_dfa_.\n\nChange-Id: If0fb8c4cc48301b7c6c0a93c0fdbfdd5ce228483\nReviewed-on: https://code-review.googlesource.com/4722\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/aba62f89e67324c2c7d1046752eb7e253d5f6e2f", "message": "Get rid of unbytemap_.\n\nChange-Id: I686b617d374e5f39ad213c25f6d0d542c497c2e4\nReviewed-on: https://code-review.googlesource.com/4721\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/a476a9a4e66da2083f1f7182591a28b66d2f7cbb", "message": "Add a test for equivalence classes in Latin-1.\n\nChange-Id: I4093f530216a4a6cb93863a347638b9092719708\nReviewed-on: https://code-review.googlesource.com/4720\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/3cd171e4c90f32ee26d49635e17dfe716c575bcc", "message": "Fix a gap in the TestCompile.ByteRanges data.\n\nChange-Id: I64fcfb2d6fdf84ab104cb97dcca2e08d710b42e9\nReviewed-on: https://code-review.googlesource.com/4711\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/ac62674fa16b5a086f02dd208667ba65e22ec09d", "message": "Plumb more variables from Makefile to re2.pc.\n\nChange-Id: I35509c273b0bd90242db127121c71be1f628c06f\nReviewed-on: https://code-review.googlesource.com/4710\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/aef4f41af59fcebca38603b2387b318b04113f10", "message": "Enqueue only the ByteRange instructions that match.\n\nChange-Id: Ic9f6f6771ea8bee95cec11cc5df490137456fcd4\nReviewed-on: https://code-review.googlesource.com/4671\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/881b7b8985cd1814f253da38cea0208f67b48936", "message": "Make NFA threads shared and effectively immutable.\n\nInstead of copying threads all the time, the NFA execution engine now\nincrements reference counters in AddToThreadq() and decrements them in\nStep(). It now copies threads only when recording captures.\n\nTwiddling reference counters is cheaper than copying pointers because\nthere are at least two pointers for the zeroth submatch and, of course,\nthere may be arbitrarily many submatches.\n\nThis probably will not help much with memory footprint except when fanout\nis high, but seems like it will be friendlier in terms of cache effects.\n\nChange-Id: I90e9f6c0164cb4d06554ec16a89bc8ce76f500a3\nReviewed-on: https://code-review.googlesource.com/4670\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/3d95170fd4475cac23ec6c7a70dd8c6ba26cc5e3", "message": "Add casts for some conversions from size_t.\n\nFixes #89.\n\nChange-Id: If04a45034cce72b802f8090ac5585074bced685f\nReviewed-on: https://code-review.googlesource.com/4660\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/afff66f3e8079dfd9aca6e7085c025d6dfbccf2e", "message": "Don't reset match_[0]. It isn't necessary.\n\nChange-Id: I0a107ebaa00844e245fce632e370e47cd50d34cc\nReviewed-on: https://code-review.googlesource.com/4641\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/4137ddc41f725231acf03ccb544f71628c06401c", "message": "Remove redundant id from Thread.\n\nChange-Id: I22a7a2f66015e854d87637ada6218df9ed1d2f85\nReviewed-on: https://code-review.googlesource.com/4631\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/b3f77c59894a3c2ee3806d23eda4f34b36085011", "message": "Remove some unnecessary pointer save/restore logic.\n\nThere is no need to save t->capture[1] and then restore it to\nt->capture[0] (?!) when we do nothing else with t before freeing it.\n\nChange-Id: I2b09b99b3e00658ba4299433f60ced67ec8df448\nReviewed-on: https://code-review.googlesource.com/4604\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/4744450c4880b9445c57d9224495f0e8e29f1c4c", "message": "Allow BitState to use memchr(3) to find the first byte quickly.\n\nChange-Id: I0e06144ebff0c77ce4000b9787de130bea9e083b\nReviewed-on: https://code-review.googlesource.com/4541\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/b12a3243f318d046406e917022224b41f81697c4", "message": "Remove includes attributes that will break the build.\n\nWhile I'm here, tweak a few things to be consistent\nand/or more compact.\n\nChange-Id: I8a02ad1d5e2a894f5eaef597be4b237a23261bde\nReviewed-on: https://code-review.googlesource.com/4534\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/309a0151a4bac8bc6ff169d668b43231097f60fa", "message": "Keep count of lists and of instructions by opcode.\n\nThis enables us to calculate correctly the upper bound on the size of a\nDFA state. It also enables us to downsize safely the stacks preallocated\nby the DFA and NFA execution engines.\n\nChange-Id: I612ffbd37bbc9ee1237d693dd91a30cb9003e202\nReviewed-on: https://code-review.googlesource.com/4502\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/b2e685dad6642eacc5297b993d1d5e4b091e1e37", "message": "Add a benchmark with quite a high degree of fanout.\n\nChange-Id: I6dc42c506498dac3ab650cd55cc9e052a439c804\nReviewed-on: https://code-review.googlesource.com/4500\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/cd3c4ddb55a27971da1ef26a15026215c24e8f95", "message": "Fix the install tests after commit 908a6fa.\n\nChange-Id: I815890dcd393d294b4002454eaefc6b4f0be947a\nReviewed-on: https://code-review.googlesource.com/4484\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/47809655f03729c0c699784ce7212774f1963acf", "message": "Reduce stack push-pop churn during DFA and NFA execution.\n\nChange-Id: I992cd16d01faa2524aa8473155a25ff67d2a5dac\nReviewed-on: https://code-review.googlesource.com/4490\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/b1a37913e915410fd9617b24801cf040e85a27ad", "message": "Don't test the strtof(3) edge case on Cygwin and MinGW.\n\nFixes #85.\n\nChange-Id: Ia5994995a763695b869cab74f9dbc85541b6f71f\nReviewed-on: https://code-review.googlesource.com/4433\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/685670bb0a3401deb0590900f610b87c9bf6055b", "message": "Note that building a DLL is not currently supported.\n\nFixes #84.\n\nChange-Id: I5211a7b2323d0811dc1f8052ba62526133fa06d3\nReviewed-on: https://code-review.googlesource.com/4400\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/d96fd05385368a4ff3ee58e9809ba0fea672c071", "message": "Fix performance bug in Prog::Flatten().\n\nChange-Id: I64b0edac234de967f2fd582ec3527cdfe60d701b\nReviewed-on: https://code-review.googlesource.com/4359\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/526c396723c08548d5d9ee5cac045578ace17b6a", "message": "Avoid compilation crash in debug mode with insufficient memory.\n\nChange-Id: Ideda26ea0e9f801ad63c2959e4c07566246889ff\nReviewed-on: https://code-review.googlesource.com/4354\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/1f57ae42aeed22e5cf82375df0a67a4b34096a6e", "message": "Fix bug in match output for kManyMatch.\n\nChange-Id: I6030ff877ef21ca36a39015a1310e5d144ae7b96\nReviewed-on: https://code-review.googlesource.com/4352\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/8eb62351ad3eb464433bb9ef9bf149c5db879dc8", "message": "Call Prog::Flatten(). Migrate the execution engines.\n\nThis is the second half of the changes required for \"flattened\"\nbytecode. Which is to say, for Alt instruction elision.\n\nChange-Id: I67869c5cc9cea22514e995d4c7f29f0f6c647fc0\nReviewed-on: https://code-review.googlesource.com/4315\nReviewed-by: Russ Cox <rsc@swtch.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/f90793d44e1144233a712aa83f69f2ce950b7edf", "message": "Add a couple more cases to compile_test.\n\nChange-Id: I6f17f04301816ff603fb76acb0094af11700dd8b\nReviewed-on: https://code-review.googlesource.com/4314\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/f33e706e4251e3e8b09cdbc4c3138bea2e83c885", "message": "Add a benchmark for the AltMatch optimisation.\n\nChange-Id: I6e2fe8333f7a2bf097fba0dda2ada29c40f20be5\nReviewed-on: https://code-review.googlesource.com/4313\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/a3637a0986dca4c6c9a0c6f104deb8c9ba3452ad", "message": "Implement Prog::Flatten(), but don't wire it up yet.\n\nThis is the first half of the changes required for \"flattened\"\nbytecode. Which is to say, for Alt instruction elision.\n\nChange-Id: Iaa2b88f78367da60ff602841dd33e3b1d7c81af4\nReviewed-on: https://code-review.googlesource.com/4292\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/e37a0e81ffedb9c8e7fdd75a17736a30208545a7", "message": "Change the way that we test the static library.\n\nBefore, we produced a statically linked executable. Then it turned out\nthat statically linking libpthread is problematic. Now, we produce a\ndynamically linked executable, but linked against libre2.a explicitly.\n\nWe should also have been passing the `-std=c++11' flag.\n\nFixes #81.\n\nChange-Id: Id4361de1435a1b587f3f87dd4ce386c39cef61d6\nReviewed-on: https://code-review.googlesource.com/4312\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/737eeb193cb7a3218f763d8db6a7afca68d38b05", "message": "Minor tweaks to search_test.\n\nChange-Id: I6402dfb8a41f5ae422a4e086702910f62a95fc12\nReviewed-on: https://code-review.googlesource.com/4291\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/df7a2dc2e0b7b9e7bf0c84b677b53ae931283ea6", "message": "Allow RE2::Set::Match() to accept a null pointer.\n\nSome users simply want to know whether any regular expression in the set\nmatched, not which regular expression(s) matched. The DFA code already\ndoes the right thing when passed a null std::vector<int> pointer, so\nmake RE2::Set::Match() do it too.\n\nChange-Id: I3a6bfd4abb72c96a9e81340eb875ba9b41217eed\nReviewed-on: https://code-review.googlesource.com/4290\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/55b0708ccc5547ea852d3e12e84ff6aa5af92b6b", "message": "Tweak a couple of things for style.\n\nChange-Id: Icc58edb2540183135c0f502aace0191a075945b2\nReviewed-on: https://code-review.googlesource.com/4275\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/0c31e94bc0f8254fad960977d610b7560114ae34", "message": "Simplify some of the once-based code.\n\nChange-Id: I3eb2d7924e49b8be296c7386e66f34b0e35b495a\nReviewed-on: https://code-review.googlesource.com/4274\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/44c5d168e6e92bbdf3e81c1031e56e8081ed9f44", "message": "Remove the global mutex from the RE2 code.\n\nChange-Id: I1c7516f6222e193bf0546049de563fdf1eee5674\nReviewed-on: https://code-review.googlesource.com/4273\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/88d5583e96916aa16cc65bce909bb8cec98a3122", "message": "Remove the global mutex from the Regexp code.\n\nChange-Id: If13238283ae6f2bd3079df556aef7f5177dfff88\nReviewed-on: https://code-review.googlesource.com/4272\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/aa4b65ea514533cc525b01b2821c8621f893dbb2", "message": "Remove unused LinkerInitialized enum.\n\nChange-Id: Iab3bdcdb612de8d702b53003cfc19ad331dc07fe\nReviewed-on: https://code-review.googlesource.com/4271\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/62c40e99946b09e515b7aa1d8d75baa14287965e", "message": "Remove the global mutex from the Prefilter code.\n\nChange-Id: I13135752518862dc2f518a93b5d1cf6dfa144817\nReviewed-on: https://code-review.googlesource.com/4270\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/d36f207ec3663340c3111627d13d3359b73b9208", "message": "Require Visual Studio 2013 or later.\n\nChange-Id: I440bdc7126a5ea0762418181fc5b6a86df92d1aa\nReviewed-on: https://code-review.googlesource.com/4267\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/ce40fd612a0f9df3b7227a35f840238563f7a110", "message": "Fix a couple of warnings from MSVC.\n\nChange-Id: I7b67d47eb5028491279f543670262bf6d13693a9\nReviewed-on: https://code-review.googlesource.com/4237\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/88c1209b702f5bc8d6822f0bd4d29db6157271cb", "message": "Tidy up DFA deletion while fixing an error from MSVC.\n\nFixes #79.\n\nChange-Id: I7d3f7d9b9825e3bcb84bcb1d0f58ba29650026d1\nReviewed-on: https://code-review.googlesource.com/4234\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/72276a1197043d4359863463fa59fd701d732ae0", "message": "Require C++11 based on the compiler identified by CMake.\n\nChange-Id: I4997ebb7a32a59d2cf56181038990e70c0f95d2d\nReviewed-on: https://code-review.googlesource.com/4233\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/5e8da740f306a407e20a21aab8c491d2b0214603", "message": "Don't build the RE2.NULTerminated test with MinGW.\n\nChange-Id: I0e3502421a2346873e8857347257e837751b86dc\nReviewed-on: https://code-review.googlesource.com/4232\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/366f9203d0900f15f6214c92b554fc1de0305ae4", "message": "Use add_compile_options instead of add_definitions for CMake.\n\nChange-Id: If8c3c72c97d8e358d9181d37c4c066cba6db6f5a\nReviewed-on: https://code-review.googlesource.com/4231\nReviewed-by: Paul Wankadia <junyer@google.com>"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/89756960", "body": "`?` is the metacharacter that means zero or one, so `url` used as a regular expression will not match itself. Either pass `RE2::QuoteMeta(url)` instead of `url` or declare an `RE2::Options` object, call `set_literal(true)` on it, construct an `RE2` object with it and pass **that** instead of `url`.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/89756960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/89757277", "body": "Sorry, RE2 supports UTF-8 and Latin-1 only.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/89757277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/91277964", "body": "Fixed by e69f55cbdaa45e9fe5f8e4354146b3126ded2c11.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/91277964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/91278051", "body": "Fixed by e69f55cbdaa45e9fe5f8e4354146b3126ded2c11.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/91278051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/91317250", "body": "The `i`, `m` and `s` modifiers have been supported (and documented) for a long time. The `x` modifier could be supported someday, I guess, but it's arguably unnecessary in C++.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/91317250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/91318821", "body": "Considering the detailed comments in the test code, I'm wondering whether this could have been due to a compiler bug. What compiler version were you using?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/91318821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/91327354", "body": "Does `__*3re211StringPieceE` work better?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/91327354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/91328755", "body": "Since 59d96121fea1bab268b5969b2a7344f0bdfdaeb0, `libre2.symbols.darwin` lists `__ZN3re211FilteredRE2*` and `__ZNK3re211FilteredRE210AllMatches*`, but not `__ZNK3re211FilteredRE2*`. Does it need to be readded?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/91328755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/91338619", "body": "If you just want the submatches as strings, I'd suggest using `RE2::Match()` instead of fiddling around with `RE2::Arg` objects.\n\nPlease send mail to re2-dev@googlegroups.com if you have further questions. There are many people subscribed to the mailing list, but very few who triage the GitHub issues.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/91338619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/91346808", "body": "Please see https://github.com/google/re2/wiki/Contribute for instructions regarding contributions. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/91346808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/91346839", "body": "Please see https://github.com/google/re2/wiki/Contribute for instructions regarding contributions. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/91346839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/91346865", "body": "Please see https://github.com/google/re2/wiki/Contribute for instructions regarding contributions. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/91346865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/91347060", "body": "Please see https://github.com/google/re2/wiki/Contribute for instructions regarding contributions. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/91347060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/91440599", "body": "D'oh! What's in `obj/so/test/filtered_re2_test.log`?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/91440599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/94743581", "body": "It looks like that documentation link is supposed to take you to the RE2 syntax wiki page. Judging from https://github.com/golang/go/issues/10471, it will do so as of the next Go release. :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/94743581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/95398428", "body": "We use the wiki (https://github.com/google/re2/wiki) for our documentation. :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/95398428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/96587101", "body": "Thanks for the report! I'd been meaning to tidy this up for some time.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/96587101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/96912720", "body": "I've just committed 800c90aa250d56701444cf2f91785513dbd1641d to test the static library as well. I'll see whether I can reproduce the issue now.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/96912720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/96928892", "body": "Confirmed on Ubuntu 14.10.\n\nThe output of `strace(1)` indicates that something is sleeping on a futex and blocking indefinitely:\n\n```\n\u2026\nbrk(0xdef200)                           = 0xdef200\nbrk(0xdf0000)                           = 0xdf0000\nfutex(0x7bc4a0, FUTEX_WAKE_PRIVATE, 1)  = 0\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\nfutex(0xdd02f4, FUTEX_WAIT_PRIVATE, 0, NULL\n```\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/96928892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/96944069", "body": "```\n\u2026\n(gdb) bt\n#0  pthread_rwlock_wrlock () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_wrlock.S:85\n#1  0x0000000000445bce in Lock (this=0x7da2e8) at ./util/mutex.h:111\n#2  MutexLock (mu=0x7da2e8, this=<synthetic pointer>) at ./util/mutex.h:151\n#3  RunStateOnByteUnlocked (c=<optimised out>, state=0x7db370, this=0x7da2d0) at re2/dfa.cc:962\n\u2026\n```\n\nI have no idea what changed to break this. :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/96944069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/96946750", "body": "You can `#undef HAVE_RWLOCK` in `util/mutex.h` to work around this for now, but note that the DFA state cache uses read-write locks, so contention will have a greater effect on performance.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/96946750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/96963835", "body": "Interestingly, https://sourceware.org/git/?p=glibc.git;a=commit;h=b7aa8caacee9ec707835ee48d14ab46bfdbae4e9 removed `\u2026/x86_64/pthread_rwlock_wrlock.S` in mid June, so I'm not sure what code Ubuntu 14.10 is running...\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/96963835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/96990258", "body": "The assembly implementation appears not to have changed in any pertinent way for years, so I don't think glibc is the culprit. The problem also occurs with GCC 4.8.3 on Ubuntu 14.10, so I can't blame GCC 4.9.1 either.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/96990258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/97008721", "body": "I added some logging to `Mutex` in order to trace what's going on:\n\n```\n./util/mutex.h:111: 0xbaed40 pthread_rwlock_init(&mutex_, NULL)\n./util/mutex.h:111: 0xbaf198 pthread_rwlock_init(&mutex_, NULL)\n./util/mutex.h:113: 0xbaf198 pthread_rwlock_wrlock(&mutex_)\n./util/mutex.h:111: 0xbaf348 pthread_rwlock_init(&mutex_, NULL)\n./util/mutex.h:111: 0xbaf3a0 pthread_rwlock_init(&mutex_, NULL)\n./util/mutex.h:114: 0xbaf198 pthread_rwlock_unlock(&mutex_)\n./util/mutex.h:116: 0xbaf3a0 pthread_rwlock_rdlock(&mutex_)\n./util/mutex.h:113: 0xbaf348 pthread_rwlock_wrlock(&mutex_)\n./util/mutex.h:114: 0xbaf348 pthread_rwlock_unlock(&mutex_)\n./util/mutex.h:113: 0xbaf348 pthread_rwlock_wrlock(&mutex_)\n^C\n```\n\nI don't know why that last writer lock is waiting to be woken, but as I expected, RE2 doesn't seem to be doing anything wrong here.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/97008721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/97015729", "body": "```\n\u2026\n(gdb) bt\n#0  pthread_rwlock_wrlock () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_wrlock.S:34\n#1  0x00000000004224c1 in re2::Mutex::Lock (this=0x7e2218) at ./util/mutex.h:113\n#2  0x000000000044510b in MutexLock (mu=0x7e2218, this=<synthetic pointer>) at ./util/mutex.h:153\n#3  re2::Prog::GetDFA (this=0x7e21f0, kind=re2::Prog::kLongestMatch) at re2/dfa.cc:1815\n\u2026\n(gdb) bt\n#0  pthread_rwlock_wrlock () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_wrlock.S:34\n#1  0x00000000004224c1 in re2::Mutex::Lock (this=0x7e23c8) at ./util/mutex.h:113\n#2  0x000000000044ad48 in MutexLock (mu=0x7e23c8, this=<synthetic pointer>) at ./util/mutex.h:153\n#3  re2::DFA::AnalyzeSearchHelper (this=this@entry=0x7e23b0, params=params@entry=0x7fffffffd2c0, info=info@entry=0x7e2498, flags=flags@entry=5) at re2/dfa.cc:1683\n\u2026\n(gdb) bt\n#0  pthread_rwlock_wrlock () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_wrlock.S:34\n#1  0x0000000000449040 in Lock (this=0x7e23c8) at ./util/mutex.h:113\n#2  MutexLock (mu=0x7e23c8, this=<synthetic pointer>) at ./util/mutex.h:153\n#3  RunStateOnByteUnlocked (c=98, state=0x7e2830, this=0x7e23b0) at re2/dfa.cc:962\n\u2026\n```\n\nNote that `Mutex::Lock()` has a different address in the third stack trace. For some reason, this is happening when the `testinstall` binary is statically linked, but not when it is dynamically linked.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/97015729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/97022731", "body": "Mea culpa. I'd neglected to remove the logging from `Mutex`, so its code would have been quite a bit larger and thus a lot less likely to be inlined. :/\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/97022731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/97044771", "body": "Well, I've added more logging to `Mutex` in order to dump the `pthread_rwlock_t` internal state changes and now I'm thoroughly boggled...\n\nWhen dynamically linked, `pthread_rwlock_wrlock()` will set `__writer` and then `pthread_rwlock_unlock()` will reset that to `0`. All good.\n\nWhen statically linked, `pthread_rwlock_wrlock()` **_does not**_ set `__writer` and so `pthread_rwlock_unlock()` will decrement `__nr_readers`, which is unsigned and thus goes from `0` to `4294967295`. The second time around, `pthread_rwlock_wrlock()` will wait forever to be woken by a reader that never existed.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/97044771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/97067757", "body": "It finally occurred to me that `pthread_rwlock_wrlock()` must actually be setting `__writer` to `0` because the TID in the TLS is `0`, which I confirmed with some inline assembly.\n\n@isomer pointed me to https://gcc.gnu.org/ml/gcc-help/2010-05/msg00029.html, which suggests the use of `-Wl,--whole-archive -lpthread -Wl,--no-whole-archive` when linking. That worked for me, but YMMV and I still have no idea what changed in Ubuntu 14.10. :(\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/97067757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/97076150", "body": "GitHub lets you download archive \"snapshots\" at any point. For example, https://github.com/google/re2/archive/3fcb9b7.zip gives you the repository as at 3fcb9b7877a72649ab00b301a3c5ebbfc2335a49. Would that be sufficient? If not, we can probably reinstitute releases on an ad hoc basis. :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/97076150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/97077176", "body": "I'm pretty sure that I fixed this today with e7411ab1a03298449a958e65863a09325ec6d911.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/97077176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/97291029", "body": "Have you observed the problem on Ubuntu 15.04? If not, I can try to reproduce it \u2013\u00a0probably within the next week or two.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/97291029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/97292469", "body": "Fair enough. I'll cut a release after I've landed this next change that I'd like to get in. After that, I'll cut releases as often as seems appropriate. If you're watching the mailing list, please feel free to chime in whenever there's a fix or a feature that you're keen to pick up. :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/97292469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/97648556", "body": "Ouch. I wonder whether the TID in the TLS is garbage as opposed to `0`? Anyway, thanks for checking! I'll whip up a small test case \u2013\u00a0twiddling a read-write lock a few times should be sufficient, I guess \u2013\u00a0and file a bug over on Launchpad.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/97648556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/97648759", "body": "No worries. :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/97648759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/97653183", "body": "Do you capture into `StringPiece` objects? Given `StringPiece text` and `StringPiece argn`, the position of `argn` (i.e. within `text`) is `argn.data() - text.data()` and the length of `argn` is `argn.size()`. If nothing was captured, then `argn.data()` will be `nullptr`. Does that work for you?\n\nFWIW, the variadic functions take `const Arg* const args[]` and I would rather not spoil that. :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/97653183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/97705740", "body": "I've filed https://bugs.launchpad.net/ubuntu/+source/eglibc/+bug/1450355. I'll follow up there as needed, but there's nothing more that I can do here, so I'm going to close this issue.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/97705740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/97838269", "body": "I've cut https://github.com/google/re2/releases/tag/20150501. Enjoy!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/97838269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/97843679", "body": "The release spontaneously \"unpublished\" itself (i.e. reverted to draft) a couple of times for no apparent reason. :/\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/97843679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/98036779", "body": "It's still happening. I've contacted GitHub Support. My apologies for the hassle. :(\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/98036779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/98352206", "body": "Very much like `StringRef` in LLVM and `string_view` in some future C++ standard, a `StringPiece` object is just a subrange of an underlying `string` object. This means that capturing into `StringPiece` objects is faster than capturing into `string` objects because you point into the input string instead of copying parts of it. At the lowest level, `const char*` pairs identify the submatches, but those become `StringPiece` objects in due course. As such, RE2 never even knows the offsets, but they are easily computed with `argn.begin() - text.begin()` and `argn.end() - text.begin()`. All of this also means that `argn` and `text` point into the same input string. :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/98352206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/98425073", "body": "You have to ensure that the underlying `string` object outlives the `StringPiece` object. This is typically not a burden even in asynchronous code, but you would want to be very certain of your object lifetimes before doing something like storing `StringPiece` objects in STL containers on the heap, for example.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/98425073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/98433893", "body": "That reminds me of the Python `re` API in some ways. :)\n\nYou could ask whether anyone on re2-dev@googlegroups.com would prefer to use such a wrapper?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/98433893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/98435862", "body": "Okay, so this is (finally!) resolved. The problem was that I kept creating the release on GitHub, which then kept getting undone by our automation that mirrors from Gerrit. ;)\n\nI've cut https://github.com/google/re2/releases/tag/2015-05-01 and it's not going anywhere. Enjoy for really reals!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/98435862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/101532704", "body": "Oops, we should have been using `#if`, not `#ifdef`.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/101532704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/102300326", "body": "```\n  // The provided pointer arguments can be pointers to any scalar numeric\n  // type, or one of:\n  //    string          (matched piece is copied to string)\n  //    StringPiece     (StringPiece is mutated to point to matched piece)\n  //    T               (where \"bool T::ParseFrom(const char*, int)\" exists)\n  //    (void*)NULL     (the corresponding matched sub-pattern is not copied)\n```\n\nYou could also write something that uses that third option in order to compute the offsets. Each object would have to know `text.data()` and `text.size()`, of course, but that's easily handled with one or two constructor arguments. This is probably the best way to extend the capturing group mechanism with custom logic.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/102300326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/102300611", "body": "Ping! :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/102300611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/102300661", "body": "Ping! :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/102300661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/103303619", "body": "RE2 was designed and implemented with an explicit goal of being able to handle regular expressions from untrusted users without risk. One of its primary guarantees is that the match time is linear in the length of the input string. It was also written with production concerns in mind: the parser, the compiler and the execution engines limit their memory usage by working within a configurable budget \u2013\u00a0failing gracefully when exhausted \u2013\u00a0and they avoid stack overflow by eschewing recursion.\n\nP.S. You might find 7444e389c5a88c1a3a9d8dfd646391aa8e237aa1 interesting because it added an experimental feature for computing program fanout in order to help users estimate the match cost.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/103303619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/107773593", "body": "Yes, this is supported:\n\n```\n  // The string specification for this RE2.  E.g.\n  //   RE2 re(\"ab*c?d+\");\n  //   re.pattern();    // \"ab*c?d+\"\n  const string& pattern() const { return pattern_; }\n```\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/107773593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/108852396", "body": "It's true that the objects exist until program termination, but it's also true that their addresses are known \u2013 and needed \u2013 until program termination, so they aren't leaked. I'll admit that their lazy initialisation is kind of clunky, but we can't just use `std::call_once()` because that would require C++11.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/108852396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/108855436", "body": "`make distclean` will remove `re2/perl_groups.cc`, `re2/unicode_casefold.cc` and `re2/unicode_groups.cc`.\n\nRebuilding those files is already supported:\n\n```\n# To rebuild the Tables generated by Perl and Python scripts (requires Internet\n# access for Unicode data), uncomment the following line:\n# REBUILD_TABLES=1\n```\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/108855436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/108868626", "body": "You could generate a suppressions file for Valgrind?\n\nFor better or worse, RE2 has a lot of little tweaks like this that were measurably helpful when the code was written, so my inclination is to leave them there unless they are measurably harmful nowadays.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/108868626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/109159012", "body": "> ld: fatal: unrecognized option '--version-script=libre2.symbols'\n> ld: fatal: use the -z help option for usage information\n\nWhat linker are you using? And on what platform? We might need to handle another special case.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/109159012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/109718698", "body": "> gcc 4.8, and I hope the GNU linker. We\u2019re trying to be sure to get clear of the SolStudio food chain.\n\nhttp://www.everycity.co.uk/alasdair/2011/03/using-the-gnu-ld-linker-on-solaris/ suggests that you should be setting the `LD_ALTEXEC` environment variable in order not to use the Solaris linker. Please try that.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/109718698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/109720548", "body": "BTW, you should probably use `make clean`, not `make distclean`. The meaning of `\\s` in Perl changed slightly at some point, but RE2 will continue to use the original meaning, so test failures will occur if you simply regenerate `re2/perl_groups.cc`.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/109720548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/109721030", "body": "Addressed in #29.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/109721030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/109722027", "body": "@nico @tfarina Should I just `#define write _write` on Windows? Or would that break other builds?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/109722027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/109722337", "body": "Actually, that would break this code:\n\n```\nstd::ostream& operator<<(std::ostream& o, const StringPiece& piece) {\n  o.write(piece.data(), piece.size());\n  return o;\n}\n```\n\nI'll rephrase: Should I just call `_write` on Windows? ;)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/109722337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/110235342", "body": "There's only one call, so I'll just `#ifdef WIN32` the line itself.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/110235342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/110609618", "body": "If you do want to use the Solaris linker, http://stackoverflow.com/a/16797248 suggests that `libre2.symbols` might very well work as is!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/110609618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/110614135", "body": "Please pull in order to pick up d8f9ca3aa30bd72385f41ed98546c72c5ce84b04 and then see whether things work better for you. Be sure to try `make install` and `make testinstall` as well, but you might want to set `prefix` to something else first. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/110614135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/112295817", "body": "Sorry, I'd missed that!\n\n> Could this just call fprintf(stderr, ...)? Is that not done because\n> you want to print NULL bytes? In that case, could you call fwrite with\n> stderr? If it requires these conditionals to call write, maybe this\n> should just use standard c functions?\n\nNUL bytes should not be a problem because we should be using `CEscape()` whenever we might not have printable characters.\n\nGiven that the logging code uses `std::ostringstream` already, it's tempting to use `std::cerr` as well, but then `fprintf(stderr, \u2026);` has been used for debugging output in other places. Do you have any particular feelings about this, @rsc?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/112295817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/113871601", "body": "Fair enough. I ended up opting for `fwrite` because NUL-terminating the string looked a bit naff.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/113871601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/114717407", "body": "Indeed, the function takes an array of `RE2::Arg*`.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/114717407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/116273835", "body": "Would `(uint64)foldcase` be sufficient to satisfy MSVC?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/116273835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/116274321", "body": "Could you please suggest a tweak that will satisfy MSVC? There are a couple of options here, I think, but I'm unable to test them. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/116274321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/116478504", "body": "Closing due to inactivity.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/116478504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/116478519", "body": "Closing due to inactivity.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/116478519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/116479249", "body": "Ping! :)\n\nIs everything working with the Solaris linker now?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/116479249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/117447820", "body": "> I'm assuming that the behavior you're aiming for is that foldcase converts\n> to 1 when true, and 0 when false.\n\nThat's how the standard defines integral conversion/promotion from `bool`, I believe.\n\n> but for now, to organize my thoughts, I'll just say that there are a\n> lot of easily fixable WIN32 vs _WIN32 issues.\n\n`WIN32` might be a Chromium-ism. Can you confirm or deny that, @nico or @tfarina? And would simply changing to `_WIN32` break anything for you?\n\n> Related: /analyze says that the code ((uint64)next << 17) is dangerous\n> because the (uint64) cast happens after the shift.\n\nThat's not how the standard defines operator precedence. Is MSVC trolling? ;)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/117447820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/117563224", "body": "Ahh. Yes, the shifts of `lo` and `hi` definitely seem problematic now that I look at them. I'll just cast everything to `uint64` and that should take care of C4805 as well.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/117563224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/118266758", "body": "@nico Okay, thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/118266758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/121236080", "body": "I'm not sure that there's any reason why the file can't list both.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/121236080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/121471664", "body": "Yow. I really don't want to fork `libre2.symbols.darwin` just for one symbol. I'll try my original suggestion, which could conceivably export symbols that shouldn't be exported, but seems like the lesser of two evils.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/121471664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/121477783", "body": "After pawing through some mangling rules, I can make the entry more specific, so that's something...\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/121477783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/121481735", "body": "Great, thank you for verifying!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/121481735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/122249788", "body": "Thanks for the report and the patch! It'll be no effort to recreate the latter, obviously, and I'll want to write at least one test anyway, so don't worry about the contribution process. :)\n\nNote that `re_` is cleared during compilation, so I'll have to think about `Empty()` a bit more. I'm not sure that it's really necessary, but I'll try to find an elegant way to handle it. (From what I've seen, people tend to have more problems with \"overfilling\" an `RE2::Set`!)\n\nLooping in @rsc just in case he has any thoughts about this.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/122249788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/122251706", "body": "Thank you, that's great to hear. :)\n\nPlease file a separate bug about the Windows work. Some of it might have been covered by @ariccio recently, so if you haven't pulled in the last month or so, then you might like to do that first just in case.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/122251706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/123748267", "body": "Thanks for the suggestion to use POSIX options. I'm putting together a change that should hopefully make life slightly better for everyone.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/123748267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/123760448", "body": "You know, it's really quite tempting to ditch these \"security-enhanced\" functions...\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/123760448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/124354924", "body": "Thanks for the link! As per https://github.com/google/re2/wiki/Contribute, we use Gerrit for code reviews instead of GitHub pull requests, but rather than make you jump through those hoops, I've just committed this as 76a723e1bdf4a76fe8cf26a1077d9a7a48886388. :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/124354924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/124449972", "body": "> BTW, you should probably use make clean, not make distclean. The meaning of \\s in Perl changed slightly at some point, but RE2 will continue to use the original meaning, so test failures will occur if you simply regenerate re2/perl_groups.cc.\n\nThis was fixed in 6f4d540021e83d25f0a182bc56df55d86a87bffd. `make distclean` should do the needful.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/124449972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/124450042", "body": "Closing due to inactivity.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/124450042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/124454804", "body": "Do you have a test case that demonstrates the problem? It seems that compiling when empty does work and does match nothing: an alternation of zero expressions becomes a `kRegexpNoMatch` opcode. I'll commit the tests for the sake of improving coverage. :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/124454804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/124455766", "body": "Please reopen if there's still an issue from your perspective!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/124455766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/125477846", "body": "This is documented in `re2.h`:\n\n```\n    // The following options are only consulted when posix_syntax == true.\n    // (When posix_syntax == false these features are always enabled and\n    // cannot be turned off.)\n    //   perl_classes     (false) allow Perl's \\d \\s \\w \\D \\S \\W\n    //   word_boundary    (false) allow Perl's \\b \\B (word boundary and not)\n    //   one_line         (false) ^ and $ only match beginning and end of text\n```\n\n`posix_syntax` is false by default, so that is why you cannot disable `one_line` as per your example.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/125477846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/126203249", "body": "Thanks for the report!\n\nFortunately, it looks like `pthread_rwlock_init()` on Darwin has had a known issue for some years that popped up again in recent months:\n\nhttps://bugs.kde.org/show_bug.cgi?id=196528\nhttps://bugs.kde.org/show_bug.cgi?id=339780\nhttps://bugs.kde.org/show_bug.cgi?id=344686\nhttps://bugs.kde.org/show_bug.cgi?id=347151\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/126203249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/129296496", "body": "The compiled programs have 7103 instructions and 9 instructions, respectively, and this is simply because there are vastly more than 26 letters and 10 numbers in Unicode. You could conceivably experiment with more specific categories, but using Unicode\u00a0only when necessary seems like the preferable option.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/129296496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/138307741", "body": "Great, thanks for the pointer!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/138307741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/138311704", "body": "The RE2 `Makefile` contains this line:\n\n```\nprefix=/usr/local\n```\n\nYou can override that value by doing something like this in your `Makefile`:\n\n```\n        $(MAKE) -e prefix=$(YOURPREFIX) install\n```\n\nWill that suffice for your purposes?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/138311704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/140280022", "body": "Oops! Thanks for the report.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/140280022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/141134471", "body": "Thanks for the report, but this repository has neither `Android.mk` nor the logic in `util/util.h` that you showed. Are you working with the https://android.googlesource.com/platform/external/regex-re2/ repository? I'll ping danalbert@google.com for you, but that's as much as I'm able to help. :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/141134471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/143279033", "body": "There was a similar issue with `vsnprintf_s` a couple of months ago. I will fix this in much the same way and also switch to `_snprintf_s`.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/143279033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/143392399", "body": "Thanks, that's great news!\n\nAs of d9cc8e580e4ff2b38e7417b07f3d0215787a4619, CMake should see those macros defined:\n\n```\nif(WIN32)\n  add_definitions(-DUNICODE -D_UNICODE -DSTRICT -DNOMINMAX)\n  # Used in a couple of places.\n  add_definitions(-DCOMPILER_MSVC)\n\u2026\n```\n\nIt should also allow the tests to be built easily.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/143392399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/143939056", "body": "Ouch. Thanks for the report!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/143939056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/144936876", "body": "I wonder whether this could be caused by the definition of `WIN32_LEAN_AND_MEAN` in `util/mutex.h`, which is included by `util/util.h`. However, since nothing in `util/thread.h` needs anything in or via `util/util.h`, simply including it first seems like the straightforward solution.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/144936876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146080033", "body": "Building `util/pcre.cc` should work out of the box \u2013 even without PCRE available!\n\nWhat problems did you have when you tried to build it originally? Could you please paste the errors? Thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146080033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146082476", "body": "Windows doesn't have `gettimeofday(2)`, it seems, so I don't know why we were trying to use it. :)\n\nThanks for the suggested patch, but I've found an emulation of `clock_gettime(2)` for Windows that I can reuse.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146082476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146106856", "body": "Even better, https://msdn.microsoft.com/en-us/library/windows/desktop/dn553408.aspx has an example as well as lots of documentation.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146106856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146127252", "body": "The `LOG_0` issue seemed very strange at first, but it looks as though something in a Windows header file defines `ERROR` as `0` and so Google code typically has to kludge around that in various ways. :(\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146127252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146136300", "body": "Please pull b640119a425cd3edca0ed041d6ac37243e312a39 and let me know whether that improves matters!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146136300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146400168", "body": "> I'm not, with this or with the above, trying to say how to cure these compile errors. I'm just letting you know my results with these changes as an aid to finding and fixing the compile errors.\n\nYour doing so has been incredibly helpful and I'm very grateful. Kudos and then some!\n\nI see now that the macros rely on a language extension supported by GCC (https://gcc.gnu.org/onlinedocs/gcc/Statement-Exprs.html) and evidently not supported by MSVC, so changing them to functions is indeed the solution.\n\nThe issue with `mmap(2)` et al. can be avoided by simply not running the `RE2.NULTerminated` test on Windows. It doesn't add all that much value, IMO, unless there's a reason not to trust the numeric parsing code, which just uses standard library functions for converting strings to numbers anyway. :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146400168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146403381", "body": "5576fdf871ce30a84a334a8f5927e848aff09879 fixes `re2_test.cc`.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146403381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146415940", "body": "f7a87691544aa9dcd8703f8c11f78a2985287b8b fixed this a few days ago. Has a subsequent commit broken things again somehow?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146415940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146416845", "body": "Ahh. I think you meant `dfa_test.cc`?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146416845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146417706", "body": "No worries. :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146417706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146737247", "body": "`pcre_free` is the only symbol mentioned in the errors? That's quite bizarre. Due to my lack of Windows experience, I don't even know where to suggest looking first. (Ping, @ariccio!)\n\nHowever, PCRE is used for comparison only: submatches in tests, speed in benchmarks. I would like to see this problem fixed, of course, but I wouldn't lose too much sleep over it. :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146737247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146753754", "body": "FWIW, version 8.31 seems not to have this bug:\n\n```\n$ grep '\\<pcre_free\\>' /usr/include/pcre.h\nPCRE_EXP_DECL void  (*pcre_free)(void *);\nPCRE_EXP_DECL void  pcre_free(void *);\n$ \n```\n\nAs always, thanks for digging into this! I'll implement your solution.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146753754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146754695", "body": "It appears that a forward declaration of the `pcre` type is effectively impossible:\n\n```\nstruct real_pcre;                 /* declaration; the definition is private  */\ntypedef struct real_pcre pcre;\n```\n\nAs such, I don't think that working around the bug is feasible after all. :(\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146754695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146754788", "body": "> Version 8.35 does not have that bug either. I'll see if I can find where to report this bug to the PCRE project.\n\nFWIW, http://vcs.pcre.org/pcre/code/trunk/pcre.h.in?revision=1454&view=markup#l511 seems fine.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146754788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146754958", "body": "> How difficult would it be to add this as an option in CMAKE?\n\nThat should be easy enough.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146754958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146757452", "body": "If you pull 5eb0bdaf6197bb1d5cb88c3d0c7a3f5a0ee6db6c, you can run CMake with `-DUSEPCRE=y` and then MSVC should hopefully do the right thing. (I tested it both ways on Linux, at least, and it worked as intended.)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146757452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146759019", "body": "6d917e6623556351f0df507a8ca66aec83115cf1 is very slightly tidier.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146759019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147022903", "body": "No time was wasted, so no worries there. :)\n\n> Could USEPCRE be added to the options shown in pcre_gui?\n\nSorry, I'm not sure what pcre_gui is?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147022903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147027585", "body": "The PCRE errors from `random_test` are expected insofar as PCRE will run extremely slowly under various circumstances due to its backtracking behaviour:\n\n```\nE:\\src\\re2\\util\\pcre.cc:557: Exceeded match limit of 1000000 when matching '((?:a|(?:(?:(?:(?:(?:(?:(?:.*)\\C*).)*)\\C*)|(?:a*))(?:b|c))))' against text that is 13 bytes.\n```\n\nThe match limit is a coping strategy that lets PCRE abort a match that's taking an excessively long time.\n\nApart from that, what you're seeing are either chatty test logs or the expected results of certain test cases that provoke errors deliberately in order to check that those errors are handled correctly and gracefully.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147027585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147028733", "body": "Ouch! The \"BigFixed\" benchmarks are somewhat torturous, but I haven't seen them fail like this before. (Ping, @rsc.)\n\n`re2/dfa.cc` has a debugging knob:\n\n```\nstatic const bool DebugDFA = false;\n```\n\nCould you please set that to `true`, rebuild the benchmark project, run `regexp_benchmark.exe Search_BigFixed_CachedDFA` and report the output? (It will be rather voluminous, so either attach the file to this issue or simply email it to me.) Thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147028733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147028816", "body": "Great, thank you!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147028816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147028865", "body": "Ahh. Sure, I'll look into it shortly.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147028865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147036348", "body": "d10ed8f2303f6c7303f5472736e2f535249b0a75 added the option.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147036348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147185841", "body": "Sorry, the attachments don't appear to have made it through from email to GitHub. :(\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147185841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147265961", "body": "> Here's the last 5000 lines if this will help:\n\nAlas, GitHub truncated that at the 480th line. :(\n\nDo you want to try to email the file to junyer@google.com? (Since you have a Gmail account, that should hopefully Just Work\u2122.) If it's under 25MB, then you can attach it as per https://support.google.com/mail/answer/6584. If it's over 25MB, but under 15GB, then you can insert it using Drive as per https://support.google.com/mail/answer/2480713. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147265961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147549073", "body": "@rsc, do you happen to remember why `MakeText()` inserts `\\n` at all? Almost none of the benchmarks allow `.` to match `\\n`.\n\nAlso, I wonder if this is related to #59 in some way. At least, that might explain the mysterious match failure after ~100KiB. (Ping, @DThiebaud.)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147549073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147555613", "body": "Could you please pull 150d0aa788e8ce51f505652f863fc2651e0af358 and try again? I have a hunch that `\\n` characters in the generated input strings might have been causing this problem.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147555613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147575428", "body": "> I get build errors. Did someone else make another change? \n\nMea culpa. I committed 755dfa18436bbc7a62322b92da64fbdb0c40ff60 without reasoning about the header files on Windows. :(\n\n> With the changes I sent you, regexp_benchmark builds successfully and\n> runs to completion successfully.\n\nExcellent, thank you very much!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147575428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147593096", "body": "I don't know for sure that `WIN32_LEAN_AND_MEAN` is the problem. I also don't know very much about Windows and don't have a Windows machine on which to test these changes before committing them. :(\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147593096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147600053", "body": "For posterity, `\\n` characters were indeed the problem.\n\nConclusive debugging evidence courtesy of @DThiebaud:\n\n```\n@105098: (0000000001688BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@105099: (0000000001688BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@105100: (0000000001688BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@105101: (0000000001688BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 on 10[0x1] ->  [0]\nWorkqToCachedState  [0x1] -> DeadState\nE:\\src\\re2\\re2\\testing\\regexp_benchmark.cc:899: Check failed: (prog->SearchDFA(text, 0, anchor, Prog::kFirstMatch, 0, &failed, 0)) == (expect_match)\n```\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147600053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147602472", "body": "I suspect that we should include specific header files instead of relying on `windows.h` for everything. I could probably work out which ones by reading MSDN, but (again) would have no means of testing the change before committing it.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147602472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147614825", "body": "> PS: with the last change, a full build (of all projects) was success in\n> MSVC 2013 64-bit.\n\nIf I'm not mistaken, that means we're good for builds, tests and benchmarks! :)\n\n> I'm always happy to run Windows tests, but note I will be on vacation\n> the next two weeks.\n\nThanks, Dick. I'll have to look into \"continuous integration\" solutions eventually, I think, but now that we've reached this milestone, ad hoc testing is probably sufficient.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147614825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147910019", "body": "> I ran all the tests and regexp_benchmark for re2 built with MSVC 2013\n> 64-bit. All were successful.\n\nFantastic, thanks for the confirmation.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147910019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147929948", "body": "21621d9ac9fb0ee441b88767737891a89e70c96d was my attempt to fix that. `LONG` is supposed to work. :(\n\nFortunately, @randomascii has a change pending (https://code-review.googlesource.com/3590) that should solve this and also improve performance dramatically.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147929948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147934082", "body": "> I'm not sure its worth making a change for code we don't know if it's\n> wrong and can't test if it is. Should I close issue 62 (or do you want to?)\n\nLet's leave this issue open until the commit lands. I'll be happy as long as x86 and x64 are fine, but I'd certainly like to hear from anyone using ARM.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147934082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147942137", "body": "Yes, `__x86_64__` is a GNUism, I believe, and that definition of `WriteMemoryBarrier()` uses GNU inline assembly, so it would be a build-breaking bug if MSVC actually tried to compile it. :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147942137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/148999900", "body": "The regular expression causes an exponential blowup in DFA states, which the following table illustrates:\n\n| regular expression | DFA states |\n| --- | --- |\n| `[a-q][^u-z]{0}x` | 4 |\n| `[a-q][^u-z]{1}x` | 6 |\n| `[a-q][^u-z]{2}x` | 10 |\n| `[a-q][^u-z]{3}x` | 18 |\n| `[a-q][^u-z]{4}x` | 34 |\n| `[a-q][^u-z]{5}x` | 66 |\n| `[a-q][^u-z]{6}x` | 130 |\n| `[a-q][^u-z]{7}x` | 258 |\n| `[a-q][^u-z]{8}x` | 514 |\n| `[a-q][^u-z]{9}x` | 1026 |\n| `[a-q][^u-z]{10}x` | 2050 |\n| `[a-q][^u-z]{11}x` | 4098 |\n| `[a-q][^u-z]{12}x` | 8194 |\n| `[a-q][^u-z]{13}x` | 16386 |\n| `[a-q][^u-z]{14}x` | 32770 |\n| `[a-q][^u-z]{15}x` | 65538 |\n\nThe effect is that RE2 spends too much time populating the DFA state cache and too little time benefitting from it.\n\nNote that this is a problem with the regular expression, not with RE2. However, I suppose that the regular expression was chosen quite deliberately. :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/148999900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/149426121", "body": "I imagine that the much better performance of other engines is due to their looking for the `x` before matching the `[a-q][^u-z]{13}`. It's a neat trick, but antithetical to the principles underlying RE2. :/\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/149426121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/150727375", "body": "> Since this is an actual I/O, the fuzzing becomes very slow and verbose.\n> Is it possible to hide this logging under a flag?\n> Maybe RE2::Options::set_log_info(false), or something?\n\nI'm not sure that an option \u2013 with all of the requisite plumbing \u2013\u00a0is worthwhile. Unless @rsc vetoes the change, I'd prefer to emulate the `--minloglevel` flag, which seems like the simple and general solution.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/150727375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/150727715", "body": "Yes, you can simply assign to `re2::FLAGS_minloglevel`.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/150727715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/150741566", "body": "> The target function currently resides in the libfuzzer-bot git. \n> Would you like to have it in the re2 git instead? \n\nThanks, but I'm doubtful that moving it here would actually benefit either project. :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/150741566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/151364400", "body": "It is a goal to be generally faster \u2013\u00a0by virtue of not backtracking \u2013 and I believe that RE2 meets that goal. Indeed, you said \"in most cases re2 runs the fastest\" in your initial comment.\n\nIt is not a goal to be faster in all cases. RE2 guarantees linear-time performance, but the linear-time constant varies depending on the overhead entailed by safe handling of the regular expression. In a sense, RE2 is pessimistic whereas backtracking engines are optimistic, so it can be outperformed in various situations. Bear in mind that this is because RE2 has an explicit goal of being able to handle regular expressions from untrusted users without risk.\n\n(Ping, @rsc.)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/151364400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/151379373", "body": "Cool, thanks!\n\nYou should be able to generate a patch by executing `git diff` with standard output redirected to a file. Then you can just attach the file to this issue. I'll work through the changes. :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/151379373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/152193093", "body": "> Do the whitespace conventions for this project follow the Google coding conventions?\n\nYes, indents are two spaces and tabs should not be used. (Having said that, I'm aware that there are oddball files like `util/benchmark.cc` as well as lines here and there that use or at least contain tabs.)\n\n> Some functions defined in re2.h may more naturally take size_t rather than int arguments, but do we want to change them?\n\nThe answer is a resounding \"maybe\" \u2013 I'll have to consider each case very carefully and try to anticipate problems.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/152193093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/152392630", "body": "It turns out that CMake will do that automatically depending on the value of `BUILD_SHARED_LIBS`, so I just have to expose that as an option \u2013 and then stop forcing RE2 to be built as a static library. :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/152392630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/152393207", "body": "I tested it both ways on Linux, so it should hopefully Just Work\u2122 on Windows.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/152393207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/152440108", "body": "> As you can see, there is some complexity in this. I feel that #66 should remain closed. If someone wants the ability to create a DLL in windows, it should be a separate project.\n\nUsing a .def file would be unintrusive and also consistent with the use of the `libre2.symbols` file, but it looks as though wildcards are not supported, so I agree that this isn't worth the effort unless someone truly needs a DLL someday.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/152440108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/153241736", "body": "Looking at `re2/re2.cc`:\n\n```\n    74  re2/re2.cc:275:0\n```\n\nThis is `RE2::ProgramFanout()`, which you are not (yet?) using this time around.\n\n```\n    77  re2/re2.cc:354:0\n    78  re2/re2.cc:434:0\n```\n\nExercising `RE2::Extract()` will also exercise `RE2::MaxSubmatch()`.\n\n```\n    79  re2/re2.cc:485:0\n    80  re2/re2.cc:926:0\n```\n\nIt might be worth exercising `RE2::PossibleMatchRange()` and `RE2::CheckRewriteString()`.\n\n```\n    81  re2/re2.cc:964:0\n```\n\nThis and onwards are the argument parsers. Complete coverage of just the integral types would require exercising the cross product of types and bases.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/153241736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/153244007", "body": "Almost all of the output for `re2/parse.cc` is surprising to me. For example,\n\n```\n    46  re2/parse.cc:171:0\n    47  re2/parse.cc:179:0\n```\n\nThese are the `ParseState` constructor and destructor \u2013 RE2 cannot parse a regular expression without creating and destroying one of those objects!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/153244007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/153245816", "body": "```\n     1  re2/bitstate.cc:84:0\n     2  re2/bitstate.cc:87:0\n```\n\nThese are the `BitState` constructor and destructor.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/153245816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/153247513", "body": "There are similar oddities for other files such as `re2/dfa.cc`, but apart from that, the coverage of the compiler and the execution engines LGTM.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/153247513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/153247859", "body": "Is it possible that inlining could be causing this radar clutter?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/153247859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/155027204", "body": "LGTM. You might consider fuzzing `RE2::Set` and `FilteredRE2` if you are extremely keen, but the utility functions that I mentioned previously are more important, I think.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/155027204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/160017638", "body": "Could you please provide a full example that reproduces the bug? Thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/160017638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/160851441", "body": "Just a few more files to go. :)\n\nBTW, have you tried building with https://github.com/google/re2/blob/master/util/util.h#L73-L74 removed? If not, could you please try it and let me know whether they are hiding another slew of warnings? Thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/160851441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/161181952", "body": "> Would you like me to send you a list of where warning c4800 is generated?\n\nThanks!\n\n(For anyone else reading this, the list was provided via private mail.)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/161181952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/162276600", "body": "I believe that's everything, but I'll wait for you to confirm before I close this issue. Thanks! :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/162276600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/162390498", "body": "Once again, a milestone reached because of your contributions! Thank you very much. :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/162390498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/162734619", "body": "Great, thank you. :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/162734619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/163455305", "body": "Thanks for the patch! We use Gerrit, not pull requests, so I've submitted this change on your behalf. :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/163455305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/166801249", "body": "Thanks for the patch! We use Gerrit, not pull requests, so I've submitted this change on your behalf. :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/166801249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/166809722", "body": "According to the benchmarks that I just ran, a partial match with `AAA\\s+(\\d+)\\s+(FOO|BAR)` will be roughly three times faster than a full match with `.*?AAA\\s+(\\d+)\\s+(FOO|BAR).*`:\n\n```\nBM_Issue71_FullMatch     2000000               536 ns/op         195.54 MB/s\nBM_Issue71_PartialMatch 10000000               184 ns/op         569.38 MB/s\n```\n\nHowever, your time works out to 17 \u00b5s/op. Some of that will be due to the overhead of file I/O, but I'm not sure how much. Also, could you please just confirm that you compiled with at least `-O2` if not `-O3`?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/166809722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/166833370", "body": "> I've tried to use partial match, and in that cases it takes re2 only 8 seconds to complete the test.\n\nAssuming everything else remained the same, that works out to 800 ns/op, which sounds a lot more reasonable. Unfortunately, I still have no explanation for your previous time. :(\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/166833370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/167115765", "body": "Ahh. I had overlooked that your code was asking for two submatches. I reran the benchmarks and the speed of the full match is indeed consistent with your observed time:\n\n```\nBM_Issue71_FullMatch      100000             17928 ns/op           6.19 MB/s\nBM_Issue71_PartialMatch  5000000               528 ns/op         209.92 MB/s\n```\n\nFor the full match, RE2 uses the BitState execution engine. For the partial match, RE2 uses the DFA execution engine (forwards and backwards!) and then the OnePass execution engine. The latter might sound like more work, but RE2 is free to use `memchr(3)` to look for the first `A`, which is much faster than processing one byte at a time for the `.*?`.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/167115765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/167536396", "body": "RE2 builds cleanly with Visual Studio 2013 and Visual Studio 2015, I believe, so is it possible that Visual Studio 2008 differs from more recent versions in this regard? (Ping, @DThiebaud.)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/167536396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/167753909", "body": "> Has anyone thought about how old a version of MSVC we want to support for RE2?\n\nThat's a very good point. As long as we're willing to draw a line in the sand somewhere, we can then recast the question: what's the oldest version of Visual Studio that builds RE2 cleanly at (say) commit 7ae8845d4514ca7ddb5b8682d4f4cb3d3f1b16d0? 2008 won't fly, evidently, but what about 2010 and 2012? They have some support for C99 and C++11, I think, so would that address the problems with `stdint.h` and `unordered_set`?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/167753909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/168620911", "body": "RE2 defaults to UTF-8, so you will want to use Latin-1 instead:\n\n```\n    RE2 re(\"\\xA8\\xA9\\xAA\", RE2::Latin1);\n```\n\nThat should allow you to match arbitrary bytes.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/168620911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/168622693", "body": "Great, thanks for confirming.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/168622693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/174461751", "body": "Ouch! Are you able to build anything else? (Is RE2 the only thing that fails to build?)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/174461751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/174465979", "body": "Ahh. Very good. :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/174465979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/181779985", "body": "Sorry, we don't use pull requests. I'm more than happy to commit these changes on your behalf.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/181779985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/181781016", "body": "BTW, I suspect that this started now because 5e6ed7ed9fc51988c46548cad56759f3247ec476 fixed a bug that had prevented a large chunk of `Repetition.Capturing` from running previously. :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/181781016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/181784067", "body": "Fixed in 1add804ecc8011066980165bf823948bfaf6b455. My apologies for the unintended breakage!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/181784067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/182158988", "body": "0e4c660b14d462b0be29a44e7d317ffa5bc09863 should speed it up. Please let me know if there are still problems after that.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/182158988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/184062798", "body": "Sorry, we use Gerrit instead of pull requests. I've just committed 7490ce8bac03f4c3f86178f4754f3726204947cb to add a note to the README file. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/184062798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/185695797", "body": "CMake supports MinGW and MSYS, I believe, so please try using it to generate the appropriate files for your system.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/185695797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/google/re2/comments/11019905", "body": "D'oh! Fixed in a632405605966427baf5c059d7653c66353b52e6. Thanks for the report!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/comments/11019905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/comments/13449932", "body": "@DThiebaud Thanks! And if you pull d9cc8e580e4ff2b38e7417b07f3d0215787a4619, please feel free to try using CMake to generate an MSVC project. :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/comments/13449932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/comments/13450351", "body": "Our PCRE wrapper code has not seen much love over the years, but it should build even without PCRE present. (You have to build with `-DUSEPCRE` to make it actually use PCRE.) Joe Atzinger has reported success in the past, so there might be only a few wrinkles left to iron out. Please file bugs for any problems that you find!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/comments/13450351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/comments/13486457", "body": "Could you please paste the latest errors? The file names and line numbers will hopefully be helpful. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/comments/13486457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/comments/13558035", "body": "Great, thanks for confirming.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/comments/13558035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "rongjiecomputer": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/re2/commits/d66aaaa15d0817a92f74f75849f09eea8ecd0d93", "message": "[Bazel] Do not set -pthread etc. on Windows\n\nDoing the same thing as Tensorflow, Protobuf and GoogleTest.\n\n-\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/BUILD#L108\n- https://github.com/google/protobuf/blob/master/BUILD#L32\n- https://github.com/google/googletest/blob/master/BUILD.bazel#L39\n\nChange-Id: Ic6efc70a3021c00bb8a2200766a98266de747f26\nReviewed-on: https://code-review.googlesource.com/21970\nReviewed-by: Paul Wankadia <junyer@google.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hjmallon": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/re2/commits/d70e0af3869495867481de139de5dab3fd16988c", "message": "Avoid warning in CMake when using re2 as a subproject\n\nChange-Id: Iebd37f2367a29db386a20a7686b93c54c3b2c7cd\nReviewed-on: https://code-review.googlesource.com/18071\nReviewed-by: Paul Wankadia <junyer@google.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "legrosbuffle": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/re2/commits/d873b743f4ddd4c9d2156e8c34e47b682606d59f", "message": "Avoid another copy in RE2::PossibleMatchRange, and simplify the code.\n\nAgain, this improves the case when the prefix is a large proportion of\nmaxlen. Gains are ~20% in this case.\n\nBefore:\n\nBenchmark                    Time(ns)        CPU(ns)     Iterations\n-------------------------------------------------------------------\nPossibleMatchRange_Trivial       1158           1156         513274\nPossibleMatchRange_Complex       2593           2589         272939\nPossibleMatchRange_Prefix          71.1           71.0      9838330\nPossibleMatchRange_NoProg          71.3           71.2      9844569\n\nAfter:\nBenchmark                    Time(ns)        CPU(ns)     Iterations\n-------------------------------------------------------------------\nPossibleMatchRange_Trivial       1134           1132         617832\nPossibleMatchRange_Complex       2545           2542         276152\nPossibleMatchRange_Prefix          56.5           56.4     10000000\nPossibleMatchRange_NoProg          57.7           57.6     10000000\n\nChange-Id: Ie3c6c4ea0b4de3575675fbca4856734a5f5120cc\nReviewed-on: https://code-review.googlesource.com/17730\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/a6f63b88f24e470bb9d9401ec752a23f0ecc9535", "message": "Avoid one copy in RE2::PossibleMatchRange.\n\nThis improves cases when the prefix is a large proportion of maxlen.\nGains are ~9% in this case.\n\nBefore:\nBenchmark                    Time(ns)        CPU(ns)     Iterations\n-------------------------------------------------------------------\nPossibleMatchRange_Trivial       1154           1153         584387\nPossibleMatchRange_Complex       2606           2603         241309\nPossibleMatchRange_Prefix          82.3           82.2      9028120\nPossibleMatchRange_NoProg          74.9           74.8      8744089\n\nAfter:\nBenchmark                    Time(ns)        CPU(ns)     Iterations\n-------------------------------------------------------------------\nPossibleMatchRange_Trivial       1158           1156         513274\nPossibleMatchRange_Complex       2593           2589         272939\nPossibleMatchRange_Prefix          71.1           71.0      9838330\nPossibleMatchRange_NoProg          71.3           71.2      9844569\n\nChange-Id: I06bbdfd8bcaffad84825979e51b924f2cf2de2b7\nReviewed-on: https://code-review.googlesource.com/17690\nReviewed-by: Paul Wankadia <junyer@google.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ehsannas": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/re2/commits/4f18a245e5471d8efae21e01583a1ebbb2a36ac3", "message": "Do not build the test targets when asked not to.\n\nChange-Id: I0b458691183c8aac1e4e3065b44012aa41586698\nReviewed-on: https://code-review.googlesource.com/12631\nReviewed-by: Paul Wankadia <junyer@google.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dneto0": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/re2/commits/0952a446c972edcfc794dcea8e92713fa3cfc882", "message": "Set *current* CMake source dir as include dir\n\nAllows this project to be used in a third_party subdirectory of another\nCMake project.\n\nChange-Id: Ie5232d4ae49a08663fffd78c80c76d89fa9e89a1\nReviewed-on: https://code-review.googlesource.com/11594\nReviewed-by: Paul Wankadia <junyer@google.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zonr": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/re2/commits/ea073665db4975772558f58bd431d2afe2428e92", "message": "Refactor moving operator<<() for StringPiece under namespace re2.\n\nSo it can be found when it is used in another namespace via ADL\n(argument-dependent lookup). I.e., before this CL, the following program\nwon't compile:\n\n    $ cat foo.cpp\n    #include <iostream>\n    #include \"re2/stringpiece.h\"\n\n    namespace foo {\n\n    class SomeClassInFoo;\n    std::ostream& operator<<(std::ostream& out, const SomeClassInFoo&);\n\n    void bar(std::ostream& os, const re2::StringPiece& s) {\n      os << s;\n    }\n\n    }  // namespace foo\n\n    $ g++ -c foo.cpp\n    foo.cpp: In function 'void foo::bar(std::ostream&, const re2::StringPiece&)':\n    foo.cpp:10:4: error: no match for 'operator<<' (operand types are 'std::ostream {aka std::basic_ostream<char>}' and 'const re2::StringPiece')\n     os << s;\n        ^\n\nChange-Id: I8b6f92746fd8c8643c624371e67c1384a05916e0\nReviewed-on: https://code-review.googlesource.com/10291\nReviewed-by: Paul Wankadia <junyer@google.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "damienmg": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/re2/commits/fc5ff3ba083808ce7fe5977aaca3d01d9efdb88f", "message": "Correctly set testonly to test targets\n\ntestonly was not enforced in previous version of Bazel but this will\nbe fixed in the next version of Bazel. Correct it for re2.\n\nTested with `bazel build ...`\n\nTracking bug: bazelbuild/bazel#1967\n\nChange-Id: I880326e99bc8ed4904473dcf0939bd7ab3b41b26\nReviewed-on: https://code-review.googlesource.com/8610\nReviewed-by: John Cater <jcater@google.com>\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/baeed1cc46400b1d7888ee70f83c188ed43fefc0", "message": "Removes 'includes = [\".\"]' from BUILD file\n\nBazel automatically adds this include, so it is unneeded and has became\nan error rencently.\n\nChange-Id: Idb0f3732021035e9dc5ee82db47b1d97e2d84f30\nReviewed-on: https://code-review.googlesource.com/4520\nReviewed-by: Thiago Farina <tfarina@chromium.org>\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/5968df03326f7b0bf4ba0f5c5b93ed9467ddb700", "message": "Revert \"add regexp_benchmark target\"\n\nThis reverts commit d76eb213ec2644e7e0fde76278b64fb755eae921.\n\nThis commits break re2 built with bazel and sandboxing and is\nbased on an old unmaintained BUILD file for re2.\n\nChange-Id: I287db9a88334aac813bfe537c827214d16954417\nReviewed-on: https://code-review.googlesource.com/4440\nReviewed-by: Paul Wankadia <junyer@google.com>"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/181796125", "body": "Oh true, you use gerrit :) Thank you for the fix!\n\nOn Tue, Feb 9, 2016, 10:40 AM Paul Wankadia notifications@github.com\nwrote:\n\n> Closed #74 https://github.com/google/re2/pull/74.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/re2/pull/74#event-544097871.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/181796125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/181867201", "body": "FWIW exhaustive_test1 is still timing out: http://ci.bazel.io/job/re2/BAZEL_VERSION=HEAD,PLATFORM_NAME=linux-x86_64/72/console\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/181867201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/google/re2/comments/16916901", "body": "This change broke build with Bazel on sandboxed environment, see http://ci.bazel.io/job/re2/BAZEL_VERSION=HEAD,PLATFORM_NAME=linux-x86_64/115/console\n", "reactions": {"url": "https://api.github.com/repos/google/re2/comments/16916901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "cedk": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/re2/commits/004b150574442fc48582c40c2be769530fe4dda5", "message": "use sh instead of bash to run tests\n\nChange-Id: Ie70eed7575b3c0cf515dd2589272f7317734ebee\nReviewed-on: https://code-review.googlesource.com/5350\nReviewed-by: Paul Wankadia <junyer@google.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shahms": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/re2/commits/fc6337a382bfd4f7c861abea08f872d3c85b31da", "message": "Add a workspace name based on Bazel guidelines\n\nChange-Id: I387d2530b6fc45b4ab029c29b5387aeba0554a59\nReviewed-on: https://code-review.googlesource.com/5020\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/63e4dbd1996d2cf723f740e08521a67ad66a09de", "message": "Export the LICENSE file for bazel\n\nChange-Id: I4b5e79fcfd431dc4317279c33abdf7d6dfd2177b\nReviewed-on: https://code-review.googlesource.com/4243\nReviewed-by: Paul Wankadia <junyer@google.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jpmckinney": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/re2/commits/7ccc98ba468fff2413c0240295115955da42287d", "message": "Update link to Ruby wrapper\n\nrre2 was never released as a gem, is not maintained and hasn't been updated in six years, and doesn't install on some platforms.\n\nre2, on the other hand, is released as a gem, is maintained and doesn't have those platform issues.\n\nChange-Id: Ic5cd5787c2a71e7e84558581f8cd7807cad1a15a\nReviewed-on: https://code-review.googlesource.com/4610\nReviewed-by: Paul Wankadia <junyer@google.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tfarina": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/re2/commits/5f4c85528674a0f5f64b49efca0ffc3da480dbd1", "message": "Reland \"add regexp_benchmark target\"\n\nThis reverts commit 5968df03326f7b0bf4ba0f5c5b93ed9467ddb700.\n\nThis patch includes the fix for the following error that\ncaused it to be reverted by commit 5968df03326f:\n\nre2/testing/dump.cc:21:23: fatal error: util/test.h: No such file or\ndirectory\n #include \"util/test.h\"\n\nChange-Id: I6f3fff1de809e61c6a9da64e24b606d2921529fa\nReviewed-on: https://code-review.googlesource.com/4510\nReviewed-by: Damien Martin-guillerez <dmarting@google.com>\nReviewed-by: Paul Wankadia <junyer@google.com>"}, {"url": "https://api.github.com/repos/google/re2/commits/d76eb213ec2644e7e0fde76278b64fb755eae921", "message": "add regexp_benchmark target\n\nTested on Linux with the following command lines:\n\n$ bazel build //...\n$ bazel test //...\n$ bazel run //:regexp_benchmark\n\nChange-Id: I5872f0dd899c1c1c1f10c9d0f2fe13901b2c8e91\nReviewed-on: https://code-review.googlesource.com/4370\nReviewed-by: Paul Wankadia <junyer@google.com>"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/147591945", "body": "Shouldn't we fix the cause rather than workaround it? In Chromium we sort headers alphabetically, hence I got surprised when saw this change.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147591945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "lluixhi": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/re2/commits/908a6fa4f680002884065252fb8dee96a260cc4d", "message": "re2: Modify CXXFLAGS and LDFLAGS in Makefile.\n\nLDFLAGS and CXXFLAGS may be overridden by the environment when make\nis called.\n\nCreate RE2_LDFLAGS for LDFLAGS we don't want overridden. (placed\nbefore LDFLAGS in linking stage so -Wl,--as-needed does not\nremove LDICU).\n\nMove -pthread and -std=c++11 to RE2_CXXFLAGS.\n\nChange-Id: I5f06fa4e52e3c00fad500f2e5d3cc163c083ab79\nReviewed-on: https://code-review.googlesource.com/4483\nReviewed-by: Paul Wankadia <junyer@google.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rsc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/67669136", "body": "Perl does not interpret \\x in regexp replacement strings:\n\n```\ng% perl -e '$x=\"abc\"; $y=\"<\\\\x62>\"; $x =~ s/$x/$y/; print \"$x\\n\";'\n<\\x62>\ng%\n```\n\nIt does interpret \\x in ordinary strings but so does RE2's host language, C.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/67669136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/67682903", "body": "No ideas here.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/67682903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "suejb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/69459324", "body": "Any fix for this yet? I am experiencing the same issue on Yosemite.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/69459324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bjornbugge": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/75517930", "body": "I had the same problem.  It was fixed by adding __ZNK3re211FilteredRE2\\* to libre2.symbols.darwin, as mentioned in the thread https://code.google.com/p/re2/issues/detail?id=59\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/75517930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "evertheylen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/84382043", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/84382043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dolzenko": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/85073532", "body": "+1\n\nFor now one can use https://github.com/google/re2/blob/master/doc/syntax.txt instead.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/85073532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "andythiv": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/86740902", "body": "The same dead link is used in BigQuery's docs too:\nhttps://cloud.google.com/bigquery/query-reference#regularexpressionfunctions\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/86740902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hanwen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/88935925", "body": "(I'm assuming it's OK to send a fix directly.)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/88935925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "CodyMorris": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/91348379", "body": "Junyer, looks like re-adding __ZNK3re211FilteredRE2 lets me run `make testinstall` successfully, but then breaks `make test`\n\n`obj/so/test/filtered_re2_test     FAIL;`\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/91348379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jcoffland": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/95444581", "body": "Why did you closed the ticket?  The problem still stands.  It's not easy to find the documentation from the README which just refers to the GitHub page.  A simple fix would be to change the link in the README to point to the wiki.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/95444581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/97549901", "body": "@junyer, thanks that helps a lot.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/97549901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/98243425", "body": "That's interesting.  I'll try it out.  Seems a bit hackish though.  It would be nice if the API support this in a more direct manner.  For example, what guarantee do I have that `argn.data()` and `text.data()` point to the same array.  I believe you that this is the case but the API does not promise this which means it could change in the future.\n\nI don't see the advantage of `Arg` being passed as a constant, other than aesthetics.  Since the data the `Arg`s are pointing to is being changed it seems more logical to me that they are not constant since they are simply pointers to non-constant data anyway.  Making them non-constant and adding `start` and `end` members would provide a non-ambiguous way to pass back the match ranges.  Obviously it's up to you though.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/98243425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/98397452", "body": "Ok, I guess that makes sense.  What happens if the original data is deallocated?  You get a dangling pointer, right?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/98397452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/98431609", "body": "An interesting idea would be to add a function to the API which returns a `MatchResult` object.  Internally this object would allocate the necessary `Arg`s and gather the results.  Then you could query the `MatchResult` object by index or keyword and get the capture groups and be able to access their ranges.  All this could be implemented as a convenience on top of the current API.  It might work like this:\n\n```\nre2::MatchResult m = re2::ConvenientMatch(\"some text\", \"a regex\");\nif (m) {\n  string fullMatch = m.group(0);\n  string namedMatch = m.group(\"name\");\n\n  for (unsigned i = 1; i < m.size(); i++) {\n    const re2::Group &group = m.group(i);\n    std::cout << \"name=\" << group.name() << \" value=\" group.value()\n      << \" start=\" << group.start() << \" end=\" << group.end() << std::endl;\n  }\n}\n```\n\n`re2::Group` could be castable to `std::string` or `re2::StringPiece`.  You could also add an optional `flags` parameter to `re2::ConvenientMatch` to specify full, partial or other matches.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/98431609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/98440351", "body": "I've used the Python API a lot.  Emailing now.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/98440351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/102915627", "body": "@junyer, that would work but I guess I really want two things:\n1. Access to the range of the match group. (Which is already possible as pointed out above.)\n2. A way to easily deal with regex where I don't know beforehand what the match groups are.\n\nThis ticket deals with the former.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/102915627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mppf": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/97046207", "body": "Thanks for looking at it - it is bizarre. I'm just using the workaround of not passing --static... but this bug is probably worth reporting to Ubuntu, at some point in the investigation.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/97046207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/97423505", "body": "I can confirm that the problem still exists with Ubuntu 15.04 32- and 64-bit. However the bug behavior is different - the program core dumps instead of hanging. Removing --static or adding the  `-Wl,--whole-archive -lpthread -Wl,--no-whole-archive` both solve the problem.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/97423505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Dargish": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/97105191", "body": "That's nice to know. Having releases would be a bit of a more ideal solution though. It would keep the project in line with most of the projects that we use from Github. A release as well is a definite \"this works and has been tested\" as opposed to a commit which might not be as stable.\n\nIf you feel like making a release here, or even backporting previous releases on google code to github then we'd happily pick them up. If that's not something that you want to do right now then I'll look into using the archive like you say. Having a commit id like 3fcb9b7 as the version in our build system wouldn't be ideal though!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/97105191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/97377570", "body": "Thanks! I'll keep an eye on new releases and add them into our system as they come out :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/97377570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/97844126", "body": "That's odd, haven't had that problem with Github before. Goodluck figuring it out!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/97844126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/98473588", "body": "Thank you! I'll put it into our system :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/98473588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "nitindeokate99": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/107811254", "body": "Thanks a lot Junyer. this is helpful\n\n-Nitin\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/107811254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "marmeladema": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/108855803", "body": "Why close this \"bug\" ?\nI know that those objects are not really leaked but it is a bit annoying when you use memory leak tools like valgrind and co.\nAnd i don't really see the point in having global objects protected by a global mutex here but you're the maintainer :)\nPutting those three little objects in the re2 object seems wrong to you ?\n\nThanks anyway for answering, I will eventually fork it.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/108855803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "DrLou": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/109157450", "body": "With REBULD_TABLES=1, got a bit further; but now:\n\ng++ -o obj/so/re2/unicode_groups.o -fPIC  -Wall -O3 -g -pthread  -Wsign-compare -c -I.    -DNDEBUG re2/unicode_groups.cc\ng++ -shared -Wl,-soname,libre2.so.0,--version-script=libre2.symbols -pthread -o obj/so/libre2.so.0 obj/so/util/hash.o obj/so/util/rune.o obj/so/util/stringprintf.o obj/so/util/strutil.o obj/so/util/valgrind.o obj/so/re2/bitstate.o obj/so/re2/compile.o obj/so/re2/dfa.o obj/so/re2/filtered_re2.o obj/so/re2/mimics_pcre.o obj/so/re2/nfa.o obj/so/re2/onepass.o obj/so/re2/parse.o obj/so/re2/perl_groups.o obj/so/re2/prefilter.o obj/so/re2/prefilter_tree.o obj/so/re2/prog.o obj/so/re2/re2.o obj/so/re2/regexp.o obj/so/re2/set.o obj/so/re2/simplify.o obj/so/re2/stringpiece.o obj/so/re2/tostring.o obj/so/re2/unicode_casefold.o obj/so/re2/unicode_groups.o\nld: fatal: unrecognized option '--version-script=libre2.symbols'\nld: fatal: use the -z help option for usage information\ncollect2: error: ld returned 1 exit status\nmake: **\\* [obj/so/libre2.so] Error 1\nrm re2/unicode_groups.cc re2/unicode_casefold.cc\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/109157450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/109158151", "body": "then, make test:\n\nRunning debug binary tests.\n\nobj/dbg/test/charclass_test             FAIL; output in obj/dbg/test/charclass_test.log\nobj/dbg/test/compile_test               FAIL; output in obj/dbg/test/compile_test.log\n...\n(many more)\n\nin the charclass_test.log (example):\nsh: obj/dbg/test/charclass_test: No such file or directory\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/109158151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/109268025", "body": "Hello Paul,\n\nAnd thanks for getting back.\n\nI\u2019m building on OpenIndiana (illumos), hoping - ultimately - to make it a part of our distribution.\nIt\u2019s to be part of Sphinx  hopefully also headed to the distro!\n\ngcc 4.8, and I hope the GNU linker. We\u2019re trying to be sure to get clear of the SolStudio food chain.\n\nLet me know if I can offer any inputs.\n\nLou Picciano\n\nOn Jun 5, 2015, at 12:41 AM, Paul Wankadia notifications@github.com wrote:\n\n> ld: fatal: unrecognized option '--version-script=libre2.symbols'\n> ld: fatal: use the -z help option for usage information\n> \n> What linker are you using? And on what platform? We might need to handle another special case.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/109268025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/109270733", "body": "and then this is interesting:\n\n$ make LDFLAGS='-z'\ng++ -shared -Wl,-soname,libre2.so.0,--version-script=libre2.symbols -z -o obj/so/libre2.so.0 obj/so/util/hash.o obj/so/util/rune.o obj/so/util/stringprintf.o obj/so/util/strutil.o obj/so/util/valgrind.o obj/so/re2/bitstate.o obj/so/re2/compile.o obj/so/re2/dfa.o obj/so/re2/filtered_re2.o obj/so/re2/mimics_pcre.o obj/so/re2/nfa.o obj/so/re2/onepass.o obj/so/re2/parse.o obj/so/re2/perl_groups.o obj/so/re2/prefilter.o obj/so/re2/prefilter_tree.o obj/so/re2/prog.o obj/so/re2/re2.o obj/so/re2/regexp.o obj/so/re2/set.o obj/so/re2/simplify.o obj/so/re2/stringpiece.o obj/so/re2/tostring.o obj/so/re2/unicode_casefold.o obj/so/re2/unicode_groups.o\ng++: error: obj/so/libre2.so.0: No such file or directory\nmake: **\\* [obj/so/libre2.so] Error 1\n\nWhile the archive is being built - in obj/libre2.a\n\n> ld: fatal: unrecognized option '--version-script=libre2.symbols'\n> ld: fatal: use the -z help option for usage information\n> \n> What linker are you using? And on what platform? We might need to handle another special case.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/109270733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ariccio": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/109867278", "body": "Chromium's `logging.h` actually _does_ just `#define` a `_write`->`write` macro, but it `#undef _write`'s afterwards.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/109867278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/117025129", "body": "_probably_, but `static_cast<uint64>( foldcase )` would be better... or even `( (foldcase) ? 1ULL : 0ULL )`, which avoids casting, and might be more explicit.\n\nI'm assuming that the behavior you're aiming for is that `foldcase` converts to `1` when `true`, and `0` when false.\n\nI'll test and report back.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/117025129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/117030606", "body": "Complete and total sidenote: in `util.h`. the code:\n\n```\n#if !defined(WIN32)\n#include <sys/time.h>   // For gettimeofday\n#endif\n```\n\n[should](https://msdn.microsoft.com/en-us/library/b0084kay.aspx) be:\n\n```\n#if !defined(_WIN32)\n#include <sys/time.h>   // For gettimeofday\n#endif\n```\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/117030606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/117052594", "body": "I should really open a Pull Request/issue to improve compilation on MSVC, but for now, to organize my thoughts, I'll just say that there are a lot of easily fixable `WIN32` vs `_WIN32` issues.\n\n`static_cast<uint64>( foldcase )` fixes the warning, and so does `( (foldcase) ? 1ULL : 0ULL )`.\n\nRelated: `/analyze` says that the code `((uint64)next << 17)` is dangerous because the `(uint64)` cast happens **_after**_ the shift.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/117052594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/117481860", "body": "> That's how the standard defines integral conversion/promotion from bool, I believe.\n\nMe too, but I don't like relying on such things.\n\n> That's not how the standard defines operator precedence. Is MSVC trolling? ;)\n\nI may have misread it? It'd make more sense if it was referring to `lo` and `hi`, which are both 8 bit unsigned integers, yet `lo` is being shifted 9 bits left! That said, if instead of `((uint64)next << 17)` it was `(static_cast<uint64>(next) << 17)`, there'd be no question :)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/117481860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/117495466", "body": "I've manually \"unrolled\" the bit shifting, and can confirm that it's something weird going on with `lo` & `hi`.\n\nAll of the following produce [C6297](https://msdn.microsoft.com/en-us/library/9t02bbsx.aspx):\n\n```\n  const uint64 lo_left_nine = ( lo << 9 );\n  const uint64 hi_left_one  = ( hi << 1 );\n  const uint64 lo_left_nine_eight_c = ( lo << UINT8_C( 9 ) ); //to see if it's the 32-bit value of the integer literal\n  const uint64 hi_left_one_eight_c  = ( hi << UINT8_C( 1 ) );\n  const uint64 lo_left_nine_eight_c = ( lo << uint8( 9 ) );   //to see if it's the 32-bit value of the integer literal\n  const uint64 hi_left_one_eight_c  = ( hi << uint8( 1 ) ); \n```\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/117495466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/123931882", "body": ":)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/123931882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/124291786", "body": "Insofar as `_TRUNCATE` is concerned, I totally agree. It's annoying, and seems kinda silly - is there any actual use case for it??\n\n[Otherwise, they do actually improve things](https://randomascii.wordpress.com/2013/04/03/stop-using-strncpy-already/).  They are actually semi-standardized as part of the C11 standard's \"Annex K\", and it'd be _really nice_ if GCC/LLVM actually got around to supporting them.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/124291786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/150338677", "body": "Eeww. I'm surprised that I didn't notice this way back when I first built re2 with /analyze\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/150338677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "nico": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/112221130", "body": "I commented on the review but maybe you didn't see it: Could you use fwrite(stderr) instead of write(2)?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/112221130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/113298766", "body": "std::cerr requires including iostream which adds static intializers, so that's no good.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/113298766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/117722966", "body": "@junyer No, WIN32 isn't (just) a Chromium-ism. See the second answer in http://stackoverflow.com/questions/662084/whats-the-difference-between-the-win32-and-win32-defines-in-c . Both WIN32 and _WIN32 should work for us.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/117722966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "zhanxw": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/114716383", "body": "Still I cannot figure out why, but my tuition tells me allocating an array of RE2::Arg objects causes the problem. I tweak the code a bit, and it works now:\n\n```\n// old part, will crash\n{\nstd::string s;\nint i = 0;\nRE2::Arg* args = new RE2::Arg[2];\nargs[0] = &s;\nargs[1] = &i;\n\n/* the line below will crash, why? */\nif (RE2::FullMatchN(\"hello123436\", \"h(e)l+o([0-9]+)\", &args, 2)) {\n  std::cout << \"2. match\\n\";\n  std::cout << \"s = \" << s << \"\\n\";\n  std::cout << \"i = \" << i << \"\\n\";\n}\ndelete[] args;\n}\n\n// new part\n  {\n    std::string s;\n    int i = 0;\n    RE2::Arg** args = new RE2::Arg*[2];\n    args[0] = new RE2::Arg;\n    args[1] = new RE2::Arg;\n    *(args[0]) = &s;\n    *(args[1]) = &i;\n\n    if (RE2::FullMatchN(\"hello123436\", \"h(e)l+o([0-9]+)\", args, 2)) {\n      std::cout << \"2. match\\n\";\n      std::cout << \"s = \" << s << \"\\n\";\n      std::cout << \"i = \" << i << \"\\n\";\n    }\n    delete[] args;\n  }\n```\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/114716383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/114722810", "body": "@junyer I am clear now. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/114722810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "driskell": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/121232918", "body": "Homebrew manually applies patch to change back to `__ZlsRSoRKN3re211StringPieceE`:\n\nhttps://github.com/Homebrew/homebrew/blob/master/Library/Formula/re2.rb\n\nThis replaces matches in a file:\n\n```\ninreplace \"libre2.symbols.darwin\",\n                # operator<<(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, re2::StringPiece const&)\n                \"__ZlsRNSt3__113basic_ostreamIcNS_11char_traitsIcEEEERKN3re211StringPieceE\",\n                # operator<<(std::ostream&, re2::StringPiece const&)\n                \"__ZlsRSoRKN3re211StringPieceE\"\n```\n\nSo possibly yes it works better.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/121232918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "mistydemeo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/121467929", "body": "Thanks! I tried applying this patch, but it fails when linking using clang and libc++. The error:\n\n```\nclang++ -dynamiclib -pthread -exported_symbols_list libre2.symbols.darwin -o obj/so/libre2.so.0 obj/so/util/hash.o obj/so/util/rune.o obj/so/util/stringprintf.o obj/so/util/strutil.o obj/so/util/valgrind.o obj/so/re2/bitstate.o obj/so/re2/compile.o obj/so/re2/dfa.o obj/so/re2/filtered_re2.o obj/so/re2/mimics_pcre.o obj/so/re2/nfa.o obj/so/re2/onepass.o obj/so/re2/parse.o obj/so/re2/perl_groups.o obj/so/re2/prefilter.o obj/so/re2/prefilter_tree.o obj/so/re2/prog.o obj/so/re2/re2.o obj/so/re2/regexp.o obj/so/re2/set.o obj/so/re2/simplify.o obj/so/re2/stringpiece.o obj/so/re2/tostring.o obj/so/re2/unicode_casefold.o obj/so/re2/unicode_groups.o\nUndefined symbols for architecture x86_64:\n  \"operator<<(std::ostream&, re2::StringPiece const&)\", referenced from:\n     -exported_symbol[s_list] command line option\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nmake: *** [obj/so/libre2.so] Error 1\n```\n\nThis does work for me using GCC 5.1.0.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/121467929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/121481593", "body": "Can confirm this works with both libc++ and libstdc++ - thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/121481593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dascandy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/122249964", "body": "Thanks for RE2 by the way - I've used it for dascandy/bob on github as the basis for a build system, and it was the fastest regular expression matcher I could find that supported submatches. I think I also have some Windows support patches - do you want those too?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/122249964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ibukanov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/125483594", "body": "This is wrong repository, sorry\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/125483594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jefby": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/138399324", "body": "@junyer Yes, it can work.Thanks very much.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/138399324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "DanAlbert": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/141170070", "body": "The version of re2 in Android is only built using the NDK, and using gnustl. `_USING_LIBCXX` should be irrelevant here.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/141170070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cdottori": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/141371112", "body": "Many thanks anyway. I'll follow up with Dan then.\n\nCheers,\nChiara\n\nOn Thu, Sep 17, 2015 at 5:07 PM, Paul Wankadia notifications@github.com\nwrote:\n\n> Thanks for the report, but this repository has neither Android.mk nor the\n> logic in util/util.h that you showed. Are you working with the\n> https://android.googlesource.com/platform/external/regex-re2/ repository?\n> I'll ping danalbert@google.com for you, but that's as much as I'm able to\n> help. :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/re2/issues/50#issuecomment-141134471.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/141371112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/141419312", "body": "Hi Dan,\n\nthanks for your answer. To give you some context, I work in Intel and I've\ndiscovered via \"git blame\" that the buggy changes to util.h have been done\nby Intel folks -> I'll follow up with them then. :-)\n\nCheers and have a great day.\n\nChiara\n\nOn Thu, Sep 17, 2015 at 7:11 PM, Dan Albert notifications@github.com\nwrote:\n\n> The version of re2 in Android is only built using the NDK, and using\n> gnustl. _USING_LIBCXX should be irrelevant here.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/re2/issues/50#issuecomment-141170070.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/141419312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/141443831", "body": "All wrong. It was google folks.\n\nagutkin@google.com\npszczepaniak@google.com\nidh@google.com\n\nI'll follow up with them.\n\nBr,\nChiara\n\nOn Fri, Sep 18, 2015 at 12:05 PM, Chiara DM chiaradottorini@gmail.com\nwrote:\n\n> Hi Dan,\n> \n> thanks for your answer. To give you some context, I work in Intel and I've\n> discovered via \"git blame\" that the buggy changes to util.h have been done\n> by Intel folks -> I'll follow up with them then. :-)\n> \n> Cheers and have a great day.\n> \n> Chiara\n> \n> On Thu, Sep 17, 2015 at 7:11 PM, Dan Albert notifications@github.com\n> wrote:\n> \n> > The version of re2 in Android is only built using the NDK, and using\n> > gnustl. _USING_LIBCXX should be irrelevant here.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/google/re2/issues/50#issuecomment-141170070.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/141443831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "DThiebaud": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/143392141", "body": "With this fix, RE2 now builds cleanly for me using MSVC 2013. It requires macro definitions NOMINMAX and COMPILER_MSVC.  I can't test the build because the test doesn't build.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/143392141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/143922857", "body": "Oops--in thread.h, the \"#ifdef WIN32\" is actuarlly #ifdef _WIN32\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/143922857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/144931082", "body": "I still get the same problem:\n\n2>  threadwin.cc\n2>e:\\src\\re2\\util/thread.h(25): error C2146: syntax error : missing ';' before identifier 'pid_'\n2>e:\\src\\re2\\util/thread.h(25): error C4430: missing type specifier - int assumed. Note: C++ does not support default-int\n2>e:\\src\\re2\\util\\threadwin.cc(9): error C2065: 'pid_' : undeclared identifier\n2>e:\\src\\re2\\util\\threadwin.cc(17): error C2143: syntax error : missing ';' before '__cdecl'\n2>e:\\src\\re2\\util\\threadwin.cc(17): error C4430: missing type specifier - int assumed. Note: C++ does not support default-int\n2>e:\\src\\re2\\util\\threadwin.cc(25): error C2065: 'pid_' : undeclared identifier\n2>e:\\src\\re2\\util\\threadwin.cc(25): error C3861: 'CreateThread': identifier not found\n2>e:\\src\\re2\\util\\threadwin.cc(28): error C2065: 'pid_' : undeclared identifier\n2>e:\\src\\re2\\util\\threadwin.cc(28): error C3861: 'CloseHandle': identifier not found\n2>e:\\src\\re2\\util\\threadwin.cc(29): error C2065: 'pid_' : undeclared identifier\n2>e:\\src\\re2\\util\\threadwin.cc(36): error C2065: 'pid_' : undeclared identifier\n2>e:\\src\\re2\\util\\threadwin.cc(37): error C2065: 'pid_' : undeclared identifier\n2>e:\\src\\re2\\util\\threadwin.cc(37): error C3861: 'WaitForSingleObject': identifier not found\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/144931082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/144931314", "body": "This is with source cloned from \"git clone https://code.googlesource.com/re2\" as of 1:30 AM EDT on October 2.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/144931314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/144931724", "body": "As before, if I reverse the order of the lines \"#include <util/util.h>\" and \"#include <util/thread.h> in threadwin.cc, then threadwin.cc compiles cleanly.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/144931724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146090332", "body": "Compiling pcre.cc only, in project test, I get the following errors. \n\n1>------ Build started: Project: test, Configuration: Debug x64 ------\n1>  pcre.cc\n1>E:\\src\\orig\\re2\\util\\pcre.cc(66): error C2065: 'LOG_0' : undeclared identifier\n1>E:\\src\\orig\\re2\\util\\pcre.cc(66): error C2228: left of '.stream' must have class/struct/union\n1>          type is 'unknown-type'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(123): error C2059: syntax error : '{'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(123): error C2143: syntax error : missing ';' before '{'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(123): error C2143: syntax error : missing ';' before ')'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(132): error C2059: syntax error : '{'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(132): error C2143: syntax error : missing ';' before '{'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(132): error C2143: syntax error : missing ';' before ')'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(136): error C2065: 'LOG_0' : undeclared identifier\n1>E:\\src\\orig\\re2\\util\\pcre.cc(136): error C2228: left of '.stream' must have class/struct/union\n1>          type is 'unknown-type'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(368): warning C4267: 'argument' : conversion from 'size_t' to 'int', possible loss of data\n1>E:\\src\\orig\\re2\\util\\pcre.cc(377): warning C4267: 'argument' : conversion from 'size_t' to 'int', possible loss of data\n1>E:\\src\\orig\\re2\\util\\pcre.cc(466): error C2065: 'LOG_0' : undeclared identifier\n1>E:\\src\\orig\\re2\\util\\pcre.cc(466): error C2228: left of '.stream' must have class/struct/union\n1>          type is 'unknown-type'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(503): error C2059: syntax error : '{'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(503): error C2143: syntax error : missing ';' before '{'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(503): error C2143: syntax error : missing ';' before ')'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(541): error C2065: 'LOG_0' : undeclared identifier\n1>E:\\src\\orig\\re2\\util\\pcre.cc(541): error C2228: left of '.stream' must have class/struct/union\n1>          type is 'unknown-type'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(602): warning C4267: 'argument' : conversion from 'size_t' to 'int', possible loss of data\n1>E:\\src\\orig\\re2\\util\\pcre.cc(622): error C2065: 'LOG_0' : undeclared identifier\n1>E:\\src\\orig\\re2\\util\\pcre.cc(622): error C2228: left of '.stream' must have class/struct/union\n1>          type is 'unknown-type'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(633): error C2065: 'LOG_0' : undeclared identifier\n1>E:\\src\\orig\\re2\\util\\pcre.cc(633): error C2228: left of '.stream' must have class/struct/union\n1>          type is 'unknown-type'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(689): error C2059: syntax error : '{'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(689): error C2143: syntax error : missing ';' before '{'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(689): error C2143: syntax error : missing ')' before ';'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(689): error C2143: syntax error : missing ';' before ')'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(689): error C2059: syntax error : ')'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(689): error C2059: syntax error : 'else'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(690): error C2059: syntax error : 'return'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(696): error C2653: 'PCRE' : is not a class or namespace name\n1>E:\\src\\orig\\re2\\util\\pcre.cc(701): error C2653: 'PCRE' : is not a class or namespace name\n1>E:\\src\\orig\\re2\\util\\pcre.cc(707): error C2653: 'PCRE' : is not a class or namespace name\n1>E:\\src\\orig\\re2\\util\\pcre.cc(709): error C2061: syntax error : identifier 'StringPiece'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(713): error C2653: 'PCRE' : is not a class or namespace name\n1>E:\\src\\orig\\re2\\util\\pcre.cc(720): error C2653: 'PCRE' : is not a class or namespace name\n1>E:\\src\\orig\\re2\\util\\pcre.cc(759): error C2653: 'PCRE' : is not a class or namespace name\n1>E:\\src\\orig\\re2\\util\\pcre.cc(776): error C2653: 'PCRE' : is not a class or namespace name\n1>E:\\src\\orig\\re2\\util\\pcre.cc(799): error C2653: 'PCRE' : is not a class or namespace name\n1>E:\\src\\orig\\re2\\util\\pcre.cc(807): warning C4244: '=' : conversion from 'long' to 'short', possible loss of data\n1>E:\\src\\orig\\re2\\util\\pcre.cc(811): error C2653: 'PCRE' : is not a class or namespace name\n1>E:\\src\\orig\\re2\\util\\pcre.cc(817): error C2065: 'ushort' : undeclared identifier\n1>E:\\src\\orig\\re2\\util\\pcre.cc(817): error C2146: syntax error : missing ')' before identifier 'r'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(817): error C2059: syntax error : ')'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(817): error C2143: syntax error : missing ';' before 'return'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(817): warning C4552: '!=' : operator has no effect; expected operator with side-effect\n1>E:\\src\\orig\\re2\\util\\pcre.cc(819): warning C4244: '=' : conversion from 'unsigned long' to 'unsigned short', possible loss of data\n1>E:\\src\\orig\\re2\\util\\pcre.cc(823): error C2653: 'PCRE' : is not a class or namespace name\n1>E:\\src\\orig\\re2\\util\\pcre.cc(835): error C2653: 'PCRE' : is not a class or namespace name\n1>E:\\src\\orig\\re2\\util\\pcre.cc(841): error C2065: 'uint' : undeclared identifier\n1>E:\\src\\orig\\re2\\util\\pcre.cc(841): error C2146: syntax error : missing ')' before identifier 'r'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(841): error C2059: syntax error : ')'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(841): error C2143: syntax error : missing ';' before 'return'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(841): warning C4552: '!=' : operator has no effect; expected operator with side-effect\n1>E:\\src\\orig\\re2\\util\\pcre.cc(847): error C2653: 'PCRE' : is not a class or namespace name\n1>E:\\src\\orig\\re2\\util\\pcre.cc(856): error C2065: 'int64' : undeclared identifier\n1>E:\\src\\orig\\re2\\util\\pcre.cc(856): error C2146: syntax error : missing ';' before identifier 'r'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(856): error C2065: 'r' : undeclared identifier\n1>E:\\src\\orig\\re2\\util\\pcre.cc(860): error C2061: syntax error : identifier 'int64'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(864): error C2653: 'PCRE' : is not a class or namespace name\n1>E:\\src\\orig\\re2\\util\\pcre.cc(878): error C2065: 'uint64' : undeclared identifier\n1>E:\\src\\orig\\re2\\util\\pcre.cc(878): error C2146: syntax error : missing ';' before identifier 'r'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(878): error C2065: 'r' : undeclared identifier\n1>E:\\src\\orig\\re2\\util\\pcre.cc(882): error C2061: syntax error : identifier 'uint64'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(886): error C2653: 'PCRE' : is not a class or namespace name\n1>E:\\src\\orig\\re2\\util\\pcre.cc(928): error C2653: 'PCRE' : is not a class or namespace name\n1>E:\\src\\orig\\re2\\util\\pcre.cc(951): error C2653: 'PCRE' : is not a class or namespace name\n1>E:\\src\\orig\\re2\\util\\pcre.cc(952): error C2653: 'PCRE' : is not a class or namespace name\n1>E:\\src\\orig\\re2\\util\\pcre.cc(953): error C2653: 'PCRE' : is not a class or namespace name\n1>E:\\src\\orig\\re2\\util\\pcre.cc(954): error C2653: 'PCRE' : is not a class or namespace name\n1>E:\\src\\orig\\re2\\util\\pcre.cc(955): error C2653: 'PCRE' : is not a class or namespace name\ncompiling pcre.cc only, without USEPCRE, out of project test, with the unchanged clone from 2:20 EDT, I get the following:\n\n1>E:\\src\\orig\\re2\\util\\pcre.cc(956): error C2653: 'PCRE' : is not a class or namespace name\n1>E:\\src\\orig\\re2\\util\\pcre.cc(957): error C2653: 'PCRE' : is not a class or namespace name\n1>E:\\src\\orig\\re2\\util\\pcre.cc(958): error C2653: 'PCRE' : is not a class or namespace name\n1>E:\\src\\orig\\re2\\util\\pcre.cc(962): error C2059: syntax error : '}'\n1>E:\\src\\orig\\re2\\util\\pcre.cc(962): error C2143: syntax error : missing ';' before '}'\n========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146090332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146178509", "body": "Yes, this gets rid of the LOG_0 errors. I now get:\n\n1>------ Build started: Project: test, Configuration: Debug x64 ------\n1>  pcre.cc\n1>e:\\src\\orig\\re2\\util\\pcre.cc(123): error C2059: syntax error : '{'\n1>e:\\src\\orig\\re2\\util\\pcre.cc(123): error C2143: syntax error : missing ';' before '{'\n1>e:\\src\\orig\\re2\\util\\pcre.cc(123): error C2143: syntax error : missing ';' before ')'\n1>e:\\src\\orig\\re2\\util\\pcre.cc(132): error C2059: syntax error : '{'\n1>e:\\src\\orig\\re2\\util\\pcre.cc(132): error C2143: syntax error : missing ';' before '{'\n1>e:\\src\\orig\\re2\\util\\pcre.cc(132): error C2143: syntax error : missing ';' before ')'\n1>e:\\src\\orig\\re2\\util\\pcre.cc(368): warning C4267: 'argument' : conversion from 'size_t' to 'int', possible loss of data\n1>e:\\src\\orig\\re2\\util\\pcre.cc(377): warning C4267: 'argument' : conversion from 'size_t' to 'int', possible loss of data\n1>e:\\src\\orig\\re2\\util\\pcre.cc(503): error C2059: syntax error : '{'\n1>e:\\src\\orig\\re2\\util\\pcre.cc(503): error C2143: syntax error : missing ';' before '{'\n1>e:\\src\\orig\\re2\\util\\pcre.cc(503): error C2143: syntax error : missing ';' before ')'\n1>e:\\src\\orig\\re2\\util\\pcre.cc(602): warning C4267: 'argument' : conversion from 'size_t' to 'int', possible loss of data\n1>e:\\src\\orig\\re2\\util\\pcre.cc(689): error C2059: syntax error : '{'\n1>e:\\src\\orig\\re2\\util\\pcre.cc(689): error C2143: syntax error : missing ';' before '{'\n1>e:\\src\\orig\\re2\\util\\pcre.cc(689): error C2143: syntax error : missing ')' before ';'\n1>e:\\src\\orig\\re2\\util\\pcre.cc(689): error C2143: syntax error : missing ';' before ')'\n1>e:\\src\\orig\\re2\\util\\pcre.cc(689): error C2059: syntax error : ')'\n1>e:\\src\\orig\\re2\\util\\pcre.cc(689): error C2059: syntax error : 'else'\n1>e:\\src\\orig\\re2\\util\\pcre.cc(690): error C2059: syntax error : 'return'\n1>e:\\src\\orig\\re2\\util\\pcre.cc(696): error C2653: 'PCRE' : is not a class or namespace name\n1>e:\\src\\orig\\re2\\util\\pcre.cc(701): error C2653: 'PCRE' : is not a class or namespace name\n1>e:\\src\\orig\\re2\\util\\pcre.cc(707): error C2653: 'PCRE' : is not a class or namespace name\n1>e:\\src\\orig\\re2\\util\\pcre.cc(709): error C2061: syntax error : identifier 'StringPiece'\n1>e:\\src\\orig\\re2\\util\\pcre.cc(713): error C2653: 'PCRE' : is not a class or namespace name\n1>e:\\src\\orig\\re2\\util\\pcre.cc(720): error C2653: 'PCRE' : is not a class or namespace name\n1>e:\\src\\orig\\re2\\util\\pcre.cc(759): error C2653: 'PCRE' : is not a class or namespace name\n1>e:\\src\\orig\\re2\\util\\pcre.cc(776): error C2653: 'PCRE' : is not a class or namespace name\n1>e:\\src\\orig\\re2\\util\\pcre.cc(799): error C2653: 'PCRE' : is not a class or namespace name\n1>e:\\src\\orig\\re2\\util\\pcre.cc(807): warning C4244: '=' : conversion from 'long' to 'short', possible loss of data\n1>e:\\src\\orig\\re2\\util\\pcre.cc(811): error C2653: 'PCRE' : is not a class or namespace name\n1>e:\\src\\orig\\re2\\util\\pcre.cc(817): error C2065: 'ushort' : undeclared identifier\n1>e:\\src\\orig\\re2\\util\\pcre.cc(817): error C2146: syntax error : missing ')' before identifier 'r'\n1>e:\\src\\orig\\re2\\util\\pcre.cc(817): error C2059: syntax error : ')'\n1>e:\\src\\orig\\re2\\util\\pcre.cc(817): error C2143: syntax error : missing ';' before 'return'\n1>e:\\src\\orig\\re2\\util\\pcre.cc(817): warning C4552: '!=' : operator has no effect; expected operator with side-effect\n1>e:\\src\\orig\\re2\\util\\pcre.cc(819): warning C4244: '=' : conversion from 'unsigned long' to 'unsigned short', possible loss of data\n1>e:\\src\\orig\\re2\\util\\pcre.cc(823): error C2653: 'PCRE' : is not a class or namespace name\n1>e:\\src\\orig\\re2\\util\\pcre.cc(835): error C2653: 'PCRE' : is not a class or namespace name\n1>e:\\src\\orig\\re2\\util\\pcre.cc(841): error C2065: 'uint' : undeclared identifier\n1>e:\\src\\orig\\re2\\util\\pcre.cc(841): error C2146: syntax error : missing ')' before identifier 'r'\n1>e:\\src\\orig\\re2\\util\\pcre.cc(841): error C2059: syntax error : ')'\n1>e:\\src\\orig\\re2\\util\\pcre.cc(841): error C2143: syntax error : missing ';' before 'return'\n1>e:\\src\\orig\\re2\\util\\pcre.cc(841): warning C4552: '!=' : operator has no effect; expected operator with side-effect\n1>e:\\src\\orig\\re2\\util\\pcre.cc(847): error C2653: 'PCRE' : is not a class or namespace name\n1>e:\\src\\orig\\re2\\util\\pcre.cc(856): error C2065: 'int64' : undeclared identifier\n1>e:\\src\\orig\\re2\\util\\pcre.cc(856): error C2146: syntax error : missing ';' before identifier 'r'\n1>e:\\src\\orig\\re2\\util\\pcre.cc(856): error C2065: 'r' : undeclared identifier\n1>e:\\src\\orig\\re2\\util\\pcre.cc(860): error C2061: syntax error : identifier 'int64'\n1>e:\\src\\orig\\re2\\util\\pcre.cc(864): error C2653: 'PCRE' : is not a class or namespace name\n1>e:\\src\\orig\\re2\\util\\pcre.cc(878): error C2065: 'uint64' : undeclared identifier\n1>e:\\src\\orig\\re2\\util\\pcre.cc(878): error C2146: syntax error : missing ';' before identifier 'r'\n1>e:\\src\\orig\\re2\\util\\pcre.cc(878): error C2065: 'r' : undeclared identifier\n1>e:\\src\\orig\\re2\\util\\pcre.cc(882): error C2061: syntax error : identifier 'uint64'\n1>e:\\src\\orig\\re2\\util\\pcre.cc(886): error C2653: 'PCRE' : is not a class or namespace name\n1>e:\\src\\orig\\re2\\util\\pcre.cc(928): error C2653: 'PCRE' : is not a class or namespace name\n1>e:\\src\\orig\\re2\\util\\pcre.cc(951): error C2653: 'PCRE' : is not a class or namespace name\n1>e:\\src\\orig\\re2\\util\\pcre.cc(952): error C2653: 'PCRE' : is not a class or namespace name\n1>e:\\src\\orig\\re2\\util\\pcre.cc(953): error C2653: 'PCRE' : is not a class or namespace name\n1>e:\\src\\orig\\re2\\util\\pcre.cc(954): error C2653: 'PCRE' : is not a class or namespace name\n1>e:\\src\\orig\\re2\\util\\pcre.cc(955): error C2653: 'PCRE' : is not a class or namespace name\n1>e:\\src\\orig\\re2\\util\\pcre.cc(956): error C2653: 'PCRE' : is not a class or namespace name\n1>e:\\src\\orig\\re2\\util\\pcre.cc(957): error C2653: 'PCRE' : is not a class or namespace name\n1>e:\\src\\orig\\re2\\util\\pcre.cc(958): error C2653: 'PCRE' : is not a class or namespace name\n1>e:\\src\\orig\\re2\\util\\pcre.cc(962): error C2059: syntax error : '}'\n1>e:\\src\\orig\\re2\\util\\pcre.cc(962): error C2143: syntax error : missing ';' before '}'\n========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146178509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146182296", "body": "All the rest of the compile errors seem to be caused by the defines of pcre_free, pcre_compile, pcre_exec and pcre_full_info causing syntax errors. When I comment out the lines calling these, all compile errors go away.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146182296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146208962", "body": "Redefining pcre_free, pcre_compile, pcre_exec, and pcre_full_info as functions instead of macros makes pcre.cc compile cleanly without USEPCRE:\n\ndiff --git a/util/pcre.h b/util/pcre.h\nindex f8b4a1e..8384514 100644\n--- a/util/pcre.h\n+++ b/util/pcre.h\n@@ -171,7 +171,6 @@ namespace re2 {\n const bool UsingPCRE = false;\n struct pcre;\n struct pcre_extra { int flags, match_limit, match_limit_recursion; };\n-#define pcre_free(x) {}\n #define PCRE_EXTRA_MATCH_LIMIT 0\n #define PCRE_EXTRA_MATCH_LIMIT_RECURSION 0\n #define PCRE_ANCHORED 0\n@@ -180,9 +179,35 @@ struct pcre_extra { int flags, match_limit, match_limit_recursion; };\n #define PCRE_ERROR_MATCHLIMIT 2\n #define PCRE_ERROR_RECURSIONLIMIT 3\n #define PCRE_INFO_CAPTURECOUNT 0\n-#define pcre_compile(a,b,c,d,e) ({ (void)(a); (void)(b); _(c)=\"\"; *(d)=0; (void)(e); ((pcre_)0); })\n-#define pcre_exec(a, b, c, d, e, f, g, h) ({ (void)(a); (void)(b); (void)(c); (void)(d); (void)(e); (void)(f); (void)(g); (void)(h); 0; })\n-#define pcre_fullinfo(a, b, c, d) ({ (void)(a); (void)(b); (void)(c); *(d) = 0; 0; })\n+static int pcre_free(void *x) {\n-   return 0;\n  +}\n  +static pcre _pcre_compile(const char *a, int b, const char *_c, int *d, int e){\n-   (void)(a);\n-   (void)(b);\n-   *(c) = \"\";\n-   *(d) = 0;\n-   (void)(e);\n-   return ((pcre*)0);\n  +}\n  +static int pcre_exec(void *a, void *b, void *c, int d, int e, int f, void *g, int h){\n-   (void)(a);\n-   (void)(b);\n-   (void)(c);\n-   (void)(d);\n-   (void)(e);\n-   (void)(f);\n-   (void)(g);\n-   (void)(h);\n-   return 0;\n  +}\n  +static int pcre_fullinfo(pcre *a, void *b, int c, int *d){\n-   (void)(a);\n-   (void)(b);\n-   (void)(c);\n-   *(d) = 0;\n-   return 0;\n  +}\n  }  // namespace re2\n  #endif\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146208962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146367067", "body": "<sys/mman> is not Windows. If I add a replacement for this I found on the internet, all tests compile and all tests but re2_test pass. re2_test aborts on a memory error.\n\nI'm not, with this or with the above, trying to say how to cure these compile errors. I'm just letting you know my results with these changes as an aid to finding and fixing the compile errors.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146367067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146367155", "body": "Meant to say: sys/mman is not in Windows.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146367155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146417312", "body": "Yes, I meant dfa_test.cc  Sorry for the mistake.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146417312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146744821", "body": "Yes, pcre_free is the only symbol mentioned in the errors. I agree, it's quite bizarre. As far as I can see, pcre.c in the source code for pcre is the only place where pcre_free is defined.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146744821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146750608", "body": "I think I've found the cause of this. In <pcre.h> from pcre 8.37, the entry points for pcre are defined as:\n\nPCRE_EXP_DECL void _(_pcre_malloc)(size_t);\nvoid  (_pcre_free)(void *);\nPCRE_EXP_DECL void *(_pcre_stack_malloc)(size_t);\nPCRE_EXP_DECL void  (*pcre_stack_free)(void *);\netc.\nPCRE_EXP_DECL gets expanded to \"extern \"c\"\".  \n\nMultiple programs in RE2 directly or indirectly include \"util/pcre.h\" which includes <pcre.h>. and thus define pcre_free. Without an \"extern\" declaration, the MSVC linker doesn't like this. \n\nI consider this a bug in pcre 8.37; pcre_free should be defined with PCRE_EXP_DECL, same as the other PCRE entry points. If I make this correction and rebuild pcre.lib, the programs using pcre link okay in RE2.\n\nWe have an easy workaround.  Do not include <pcre.h> in \"util/pcre.h\". Instead, include it in pcre.cpp, which is the only program that calls the pcre C functions.\n\nShould I try committing the source code changes for this? Or should I show the diffs here and let one of the experienced developers on this project put the change in?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146750608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146751325", "body": "Should have said, do not include <pcre.h> in \"util/pcre.h\". Instead, include <pcre.h> in pcre.cpp since it's the only program that calls the PCRE C functions.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146751325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146754483", "body": "Version 8.35 does not have that bug either. I'll see if I can find where to report this bug to the PCRE project.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146754483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146754667", "body": "Does anyone know if there's a way to set the define for USEPCRE in the solution so it is applied to all 25 projects?\n\nHow difficult would it be to add this as an option in CMAKE?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146754667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146756645", "body": "Paul, you are right.  The pcre.h header must be included in util/pcre.h  I have the feeling that, with enough work, we could make it so that it doesn't need to be included, but this would be major work and source code change (assuming it's possible at all). It's not worth this for what is a PCRE bug that is easily corrected and has been fixed in their latest code. I'm closing this issue as satisfied.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146756645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146869684", "body": "I have to apologize to you. It appears that earlier, while, trying to resolve compile errors related to PCRE (since resolved), I experimentally removed the PCRE_EXP_DECL from pcre_free in the code for PCRE. There is no bug in PCRE, this was my mistake. I hope you haven't spent too much time on this bug.\n\nwith -DUSEPCRE=y, pcre and all test programs build successfully. I will run all the tests and let you know the results.\n\nCould USEPCRE be added to the options shown in pcre_gui?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146869684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/146956520", "body": "without pcre, compiled for debug, I get:\n\nSearch_BigFixed_CachedDFA/4K        5000        371539 ns/op      11.02 MB/s\nSearch_BigFixed_CachedDFA/8K        1000       1392339 ns/op       5.88 MB/s\nSearch_BigFixed_CachedDFA/16K        100      10482272 ns/op       1.56 MB/s\nSearch_BigFixed_CachedDFA/32K          1    2291044772 ns/op       0.01 MB/s\nSearch_BigFixed_CachedDFA/64K          1    7342244641 ns/op       0.01 MB/s\nE:\\src\\re2\\re2\\testing\\regexp_benchmark.cc:899: Check failed: (prog->SearchDFA(text, 0, anchor, Prog::kFirstMatch, 0, &failed, 0)) == (expect_match)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/146956520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147027697", "body": "On 10/09/2015 10:16 PM, Paul Wankadia wrote:\n\n> Sorry, I'm not sure what pcre_gui is?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/google/re2/issues/58#issuecomment-147022903.\n> \n> I meant cmake_gui. This is a graphical shell for cmake on Windows and \n> linux. It gives a list of all the options for a cmake project and lets \n> you set them in the gui. Under the current re2 pull, the gui does not \n> show the \"USEPCRE\" option. However, the gui lets you add the \"USEPCRE\" \n> option and then correctly generates the build code for whether the \n> option is selected or not. I suspect but don't know that making the gui \n> show the option without the user adding the option would be a simple change.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147027697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147027787", "body": "Thanks. I can thus report that building re2 with PCRE on MSVC 2013, PCRE \npasses all tests.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147027787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147072090", "body": "On 10/9/2015 11:30 PM, Paul Wankadia wrote:\n\n> Ouch! The \"BigFixed\" benchmarks are somewhat torturous, but I haven't \n> seen them fail like this before. (Ping, @rsc https://github.com/rsc.)\n> \n> |re2/dfa.cc| has a debugging knob:\n> \n> |static const bool DebugDFA = false; |\n> \n> Could you please set that to |true|, rebuild the benchmark project, \n> run |regexp_benchmark.exe Search_BigFixed_CachedDFA| and report the \n> output? (It will be rather voluminous, so either attach the file to \n> this issue or simply email it to me.) Thanks!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/google/re2/issues/59#issuecomment-147028733.\n> \n> Part 1of 3 of a bz2 file of the printout.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147072090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147072174", "body": "On 10/9/2015 11:30 PM, Paul Wankadia wrote:\n\n> Ouch! The \"BigFixed\" benchmarks are somewhat torturous, but I haven't \n> seen them fail like this before. (Ping, @rsc https://github.com/rsc.)\n> \n> |re2/dfa.cc| has a debugging knob:\n> \n> |static const bool DebugDFA = false; |\n> \n> Could you please set that to |true|, rebuild the benchmark project, \n> run |regexp_benchmark.exe Search_BigFixed_CachedDFA| and report the \n> output? (It will be rather voluminous, so either attach the file to \n> this issue or simply email it to me.) Thanks!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/google/re2/issues/59#issuecomment-147028733.\n> \n> Part 2 of 3 of bz2 file of the print.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147072174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147072223", "body": "On 10/9/2015 11:30 PM, Paul Wankadia wrote:\n\n> Ouch! The \"BigFixed\" benchmarks are somewhat torturous, but I haven't \n> seen them fail like this before. (Ping, @rsc https://github.com/rsc.)\n> \n> |re2/dfa.cc| has a debugging knob:\n> \n> |static const bool DebugDFA = false; |\n> \n> Could you please set that to |true|, rebuild the benchmark project, \n> run |regexp_benchmark.exe Search_BigFixed_CachedDFA| and report the \n> output? (It will be rather voluminous, so either attach the file to \n> this issue or simply email it to me.) Thanks!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/google/re2/issues/59#issuecomment-147028733.\n> \n> Part 3 of 3\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147072223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147256741", "body": "On 10/11/2015 7:50 AM, Paul Wankadia wrote:\n\n> Sorry, the attachments don't appear to have made it through from email \n> to GitHub. :(\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/google/re2/issues/59#issuecomment-147185841.\n> \n> Here's the last 5000 lines if this will help:\n\n@99363: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99364: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99365: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99366: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99367: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99368: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99369: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99370: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99371: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99372: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99373: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99374: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99375: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99376: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99377: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99378: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99379: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99380: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99381: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99382: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99383: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99384: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99385: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99386: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99387: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99388: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99389: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99390: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99391: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99392: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99393: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99394: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99395: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99396: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99397: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99398: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99399: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99400: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99401: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99402: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99403: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99404: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99405: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99406: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99407: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99408: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99409: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99410: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99411: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99412: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99413: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99414: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99415: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99416: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99417: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99418: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99419: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99420: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99421: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99422: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99423: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99424: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99425: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99426: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99427: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99428: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99429: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99430: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99431: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99432: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99433: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99434: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99435: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99436: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99437: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99438: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99439: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99440: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99441: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99442: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99443: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99444: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99445: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99446: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99447: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99448: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99449: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99450: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99451: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99452: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99453: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99454: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99455: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99456: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99457: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99458: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99459: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99460: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99461: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99462: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99463: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99464: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99465: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99466: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99467: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99468: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99469: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99470: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99471: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99472: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99473: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99474: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99475: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99476: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99477: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99478: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99479: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99480: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99481: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99482: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99483: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99484: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99485: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99486: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99487: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99488: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99489: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99490: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99491: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99492: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99493: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99494: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99495: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99496: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99497: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99498: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99499: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99500: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99501: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99502: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99503: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99504: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99505: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99506: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99507: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99508: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99509: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99510: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99511: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99512: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99513: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99514: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99515: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99516: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99517: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99518: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99519: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99520: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99521: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99522: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99523: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99524: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99525: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99526: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99527: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99528: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99529: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99530: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99531: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99532: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99533: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99534: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99535: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99536: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99537: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99538: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99539: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99540: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99541: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99542: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99543: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99544: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99545: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99546: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99547: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99548: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99549: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99550: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99551: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99552: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99553: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99554: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99555: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99556: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99557: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99558: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99559: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99560: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99561: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99562: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99563: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99564: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99565: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99566: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99567: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99568: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99569: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99570: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99571: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99572: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99573: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99574: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99575: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99576: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99577: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99578: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99579: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99580: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99581: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99582: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99583: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99584: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99585: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99586: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99587: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99588: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99589: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99590: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99591: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99592: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99593: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99594: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99595: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99596: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99597: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99598: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99599: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99600: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99601: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99602: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99603: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99604: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99605: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99606: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99607: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99608: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99609: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99610: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99611: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99612: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99613: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99614: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99615: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99616: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99617: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99618: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99619: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99620: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99621: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99622: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99623: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99624: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99625: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99626: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99627: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99628: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99629: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99630: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99631: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99632: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99633: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99634: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99635: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99636: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99637: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99638: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99639: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99640: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99641: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99642: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99643: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99644: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99645: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99646: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99647: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99648: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99649: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99650: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99651: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99652: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99653: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99654: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99655: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99656: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99657: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99658: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99659: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99660: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99661: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99662: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99663: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99664: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99665: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99666: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99667: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99668: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99669: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99670: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99671: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99672: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99673: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99674: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99675: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99676: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99677: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99678: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99679: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99680: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99681: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99682: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99683: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99684: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99685: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99686: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99687: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99688: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99689: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99690: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99691: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99692: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99693: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99694: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99695: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99696: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99697: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99698: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99699: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99700: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99701: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99702: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99703: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99704: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99705: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99706: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99707: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99708: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99709: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99710: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99711: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99712: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99713: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99714: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99715: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99716: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99717: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99718: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99719: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99720: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99721: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99722: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99723: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99724: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99725: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99726: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99727: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99728: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99729: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99730: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99731: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99732: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99733: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99734: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99735: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99736: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99737: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99738: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99739: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99740: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99741: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99742: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99743: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99744: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99745: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99746: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99747: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99748: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99749: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99750: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99751: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99752: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99753: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99754: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99755: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99756: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99757: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99758: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99759: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99760: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99761: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99762: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99763: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99764: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99765: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99766: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99767: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99768: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99769: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99770: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99771: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99772: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99773: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99774: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99775: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99776: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99777: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99778: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99779: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99780: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99781: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99782: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99783: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99784: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99785: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99786: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99787: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99788: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99789: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99790: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99791: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99792: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99793: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99794: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99795: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99796: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99797: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99798: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99799: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99800: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99801: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99802: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99803: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99804: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99805: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99806: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99807: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99808: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99809: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99810: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99811: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99812: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99813: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99814: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99815: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99816: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99817: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99818: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99819: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99820: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99821: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99822: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99823: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99824: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99825: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99826: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99827: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99828: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99829: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99830: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99831: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99832: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99833: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99834: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99835: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99836: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99837: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99838: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99839: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99840: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99841: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548,65549,65551,65552,65554,65555,65557,65558,65559,65561 flag=0\n@99842: (000000E5C6717BE0)65538,65539,65540,65542,65543,65545,65546,65548\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147256741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147559569", "body": "On 10/12/2015 8:27 PM, Paul Wankadia wrote:\n\n> Could you please pull 150d0aa \n> https://github.com/google/re2/commit/150d0aa788e8ce51f505652f863fc2651e0af358 \n> and try again? I have a hunch that |\\n| characters in the generated \n> input strings might have been causing this problem.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/google/re2/issues/59#issuecomment-147555613.\n> \n> I  am trying this now, will let you know the results.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147559569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147567888", "body": "On 10/12/2015 8:27 PM, Paul Wankadia wrote:\n\n> Could you please pull 150d0aa \n> https://github.com/google/re2/commit/150d0aa788e8ce51f505652f863fc2651e0af358 \n> and try again? I have a hunch that |\\n| characters in the generated \n> input strings might have been causing this problem.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/google/re2/issues/59#issuecomment-147555613.\n> \n> I get build errors. Did someone else make another change? To get the \n> source code this was compiled with, I ran:\n\ngit clone https://code.googlesource.com/re2\n\nbecause I had been playing around trying to make regexp_benchmark run \nfaster (by reducing iter in loops--didn't work).\n\nErrors:\n\n## 1>------ Build started: Project: benchmark, Configuration: Release x64 \n\n2>------ Build started: Project: re2, Configuration: Release x64 ------\n2>  dfa.cc\n2>E:\\re2\\re2/prog.h(99): warning C4244: 'return': conversion from \n'__int64' to 'int', possible loss of data\n2>E:\\re2\\util/atomicops.h(82): error C2065: 'LONG': undeclared identifier\n2>E:\\re2\\util/atomicops.h(82): error C2146: syntax error: missing ';' \nbefore identifier 'x'\n2>E:\\re2\\util/atomicops.h(82): error C2065: 'x': undeclared identifier\n2>E:\\re2\\util/atomicops.h(83): error C2065: 'x': undeclared identifier\n2>E:\\re2\\re2\\dfa.cc(1904): warning C4244: 'argument': conversion from \n'__int64' to 'int', possible loss of data\n2>E:\\re2\\re2\\dfa.cc(1906): warning C4244: 'argument': conversion from \n'__int64' to 'int', possible loss of data\n2>E:\\re2\\re2\\dfa.cc(1942): warning C4267: 'return': conversion from \n'size_t' to 'int', possible loss of data\n2>  re2.cc\n1>  benchmark.vcxproj -> E:\\re2\\bin15\\Release\\benchmark.lib\n2>E:\\re2\\util/atomicops.h(82): error C2065: 'LONG': undeclared identifier\n2>E:\\re2\\util/atomicops.h(82): error C2146: syntax error: missing ';' \nbefore identifier 'x'\n2>E:\\re2\\util/atomicops.h(82): error C2065: 'x': undeclared identifier\n2>E:\\re2\\util/atomicops.h(83): error C2039: 'InterlockedExchange': is \nnot a member of '`global namespace''\n2>E:\\re2\\util/atomicops.h(83): error C2065: 'x': undeclared identifier\n2>E:\\re2\\util/atomicops.h(83): error C3861: 'InterlockedExchange': \nidentifier not found\n2>E:\\re2\\re2/prog.h(99): warning C4244: 'return': conversion from \n'__int64' to 'int', possible loss of data\n2>E:\\re2\\re2\\re2.cc(378): warning C4267: 'argument': conversion from \n'size_t' to 'int', possible loss of data\n2>E:\\re2\\re2\\re2.cc(405): warning C4267: 'argument': conversion from \n'size_t' to 'int', possible loss of data\n2>E:\\re2\\re2\\re2.cc(405): warning C4244: 'argument': conversion from \n'__int64' to 'int', possible loss of data\n2>E:\\re2\\re2\\re2.cc(489): warning C4267: 'initializing': conversion from \n'size_t' to 'int', possible loss of data\n2>E:\\re2\\re2\\re2.cc(601): warning C4267: '=': conversion from 'size_t' \nto 'int', possible loss of data\n2>E:\\re2\\re2\\re2.cc(843): warning C4244: '=': conversion from '__int64' \nto 'int', possible loss of data\n2>  Generating Code...\n3>------ Build started: Project: regexp_benchmark, Configuration: \nRelease x64 ------\n3>LINK : fatal error LNK1181: cannot open input file 'Release\\re2.lib'\n========== Build: 1 succeeded, 2 failed, 1 up-to-date, 0 skipped ==========\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147567888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147574893", "body": "On 10/12/2015 8:27 PM, Paul Wankadia wrote:\n\n> Could you please pull 150d0aa \n> https://github.com/google/re2/commit/150d0aa788e8ce51f505652f863fc2651e0af358 \n> and try again? I have a hunch that |\\n| characters in the generated \n> input strings might have been causing this problem.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/google/re2/issues/59#issuecomment-147555613.\n> \n> With the changes I sent you, regexp_benchmark builds successfully and \n> runs to completion successfully.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147574893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147596819", "body": "On 10/13/2015 12:03 AM, Paul Wankadia wrote:\n\n> I don't know for sure that |WIN32_LEAN_AND_MEAN| is the problem. I \n> also don't know very much about Windows and don't have a Windows \n> machine on which to test these changes before committing them. :(\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/google/re2/issues/57#issuecomment-147593096.\n> \n> If we could figure out what caused the problem, we would fix it. I tried \n> and WIN_LEAN_AND_MEAN did not seem be the cause. Whatever is causing it \n> seems to be rather weird.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147596819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147605791", "body": "On 10/13/2015 1:09 AM, Paul Wankadia wrote:\n\n> I suspect that we should include specific header files instead of \n> relying on |windows.h| for everything. I could probably work out which \n> ones by reading MSDN, but (again) would have no means of testing the \n> change before committing it.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/google/re2/issues/57#issuecomment-147602472.\n> \n> possibly, but it can get tricky figuring out which headers rely on which \n> other readers. The entire build only takes about 5 minutes.\n\nPS: with the last change, a full build (of all projects) was success in \nMSVC 2013 64-bit.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147605791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147606338", "body": "On 10/13/2015 1:09 AM, Paul Wankadia wrote:\n\n> I suspect that we should include specific header files instead of \n> relying on |windows.h| for everything. I could probably work out which \n> ones by reading MSDN, but (again) would have no means of testing the \n> change before committing it.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/google/re2/issues/57#issuecomment-147602472.\n> \n> I'm always happy to run Windows tests, but note I will be on vacation \n> the next two weeks.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147606338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147755921", "body": "On 10/13/2015 2:05 AM, Paul Wankadia wrote:\n\n> ```\n> PS: with the last change, a full build (of all projects) was\n> success in\n> MSVC 2013 64-bit.\n> ```\n> \n> If I'm not mistaken, that means we're good for builds, tests and \n> benchmarks! :)\n> \n> ```\n> I'm always happy to run Windows tests, but note I will be on vacation\n> the next two weeks.\n> ```\n> \n> Thanks, Dick. I'll have to look into \"continuous integration\" \n> solutions eventually, I think, but now that we've reached this \n> milestone, ad hoc testing is probably sufficient.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/google/re2/issues/57#issuecomment-147614825.\n> \n> I ran all the tests and regexp_benchmark for re2 built with MSVC 2013 \n> 64-bit. All were successful.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147755921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147932427", "body": "On 10/14/2015 12:10 AM, Paul Wankadia wrote:\n\n> 21621d9 \n> https://github.com/google/re2/commit/21621d9ac9fb0ee441b88767737891a89e70c96d \n> was my attempt to fix that. |LONG| is supposed to work. :(\n> \n> Fortunately, @randomascii https://github.com/randomascii has a \n> change pending (https://code-review.googlesource.com/3590) that should \n> solve this and also improve performance dramatically.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/google/re2/issues/62#issuecomment-147929948.\n\nLooking at change set 2 of this, it will still use \"LONG\" and \n\"::InterlockedExchange\" for MSVC compiling for a target that is not x86 \nor x64. I don't know and can't test if MSVC not for these will accept \nthese words. For MSVC x86 or x64, the code with the change set will \ncompile okay.\n\nI'm not sure its worth making a change for code we don't know if it's \nwrong and can't test if it is. Should I close issue 62 (or do you want to?)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147932427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147932870", "body": "I have not tested this, but it looks like the function name should be \"InterlockedExchange\" for MSVC 32-bit and \"InterlockedExchange64\" for MSVC 64-bin.  There are standard MSVC defines for 64 bit: _M_X64 and _WIN64.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147932870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147934009", "body": "I was wrong about \"InterlockedExchange32\". Per https://msdn.microsoft.com/en-us/library/3b2e7499.aspx, \"long\" is 32 bits in 64-bit windows.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147934009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147934085", "body": "I meant \"wrong about 'InterlockedExchange64'\".\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147934085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147940219", "body": "The code in a clone of re2 done at about 1:00 does compile cleanly and recognize \"LONG\" and \"::interlocked_interchange\". This is very odd to me, because one or two days ago it didn't for me. (both times using MSVC 2013 with project files from CMAKE.\n\nFor Windows 64 bits, is atomicop.h supposed to use the the following code?\n\n: #elif defined(**x86_64**)\n\n// 64-bit implementations of memory barrier can be simpler, because\n// \"sfence\" is guaranteed to exist.\nstatic inline void WriteMemoryBarrier() {\n  **asm** **volatile**(\"sfence\" : : : \"memory\");\n}\n\nFor me it is not: Running in debug with a breakpoint set, it stops at ::InterlockedInterchanged in the lines:\n\n#elif defined(**windows**) || defined(_WIN32)\n\n#include <windows.h>\n\n// Windows\ninline void WriteMemoryBarrier() {\n  LONG x;\n  ::InterlockedExchange(&x, 0);\n}\n\nIs the the desired behavior?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147940219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147944472", "body": "Since atomicop.h with the latest changes does compile cleanly, I am closing this issue.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147944472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/147944805", "body": "Paul, you are right. Hacking atomicop.h so that windows uses the lines under **x86_64**,, the inline assemply does indeed break the compile.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147944805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/151947340", "body": "Replying to code reviews:\n\nIf I put in any reformatting changes, it was a mistake on my part, and I apologize.\n\nExperimenting, almost all the warnings come from assigning a size_t to an int. Almost all of the warnings can be eliminated without casts, by changing the associated int fields to size_t or ptrdiff_t, in ways that appear to be correct. 2 or 3 cases seem to correctly require a cast.\nIf anyone is interested, I can send them the diff of my experiments, which compile without errors but which I haven't checked for correctness or tested.\n\nDo the whitespace conventions for this project follow the Google coding conventions?\n\nSome functions defined in re2.h may more naturally take size_t rather than int arguments, but do we want to change them?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/151947340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/152408744", "body": "On 10/29/2015 10:23 PM, Paul Wankadia wrote:\n\n> I tested it both ways on Linux, so it should hopefully Just Work\u2122 on \n> Windows.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/google/re2/issues/66#issuecomment-152393207.\n\nI tried it in windows. It generates a dll ok but not generate the .lib \ncontaining the entry points. (This is the way it works in windows. You \nneed both a .dll file and a .lib file\n\nApparently, if there is no \"declspec _dllexport\", the .lib file is not \ngenerated.\n\nTo create a dll in windows, you need to use \"declspec _dllexport\" in the \nsource of the dll and \"declspec__dllimport\" in the source of programs \nthat call a dll. Typically, you end up with code similar to:\n\n#if defined(_WIN32) && defined (_DLL)\n#define DLLENTRY declspec(__dllexport)\n#elif defined(_WIN32)\n#define DLLENTRY declspec(__dllexport)\n#else\n#define DLLENTRY\n#endif\n\nthen put DLLENTRY before any function or variable you want to export.\n\nAnother option is to create a .def file that defines the functions and \nvariables you want to export.  This looks like this:\n\nLIBRARY   BTREE\nEXPORTS\n    Insert   @1\n    Delete   @2\n    Member   @3\n    Min   @4\n\nAs you can see, there is some complexity in this. I feel that #66 should remain closed. If someone wants the ability to create a DLL in windows, it should be a separate project.\n  If this is desired, I could do much of the work on this, but someone else would have to determine which functions in re2.h should be exported. (It appears that which functions are\nor are not declared static is a big clue.)\n\n#ifdef\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/152408744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/152509626", "body": "On 10/30/2015 2:17 AM, Paul Wankadia wrote:\n\n> ```\n> As you can see, there is some complexity in this. I feel that #66\n> <https://github.com/google/re2/issues/66> should remain closed. If\n> someone wants the ability to create a DLL in windows, it should be\n> a separate project.\n> ```\n> \n> Using a .def file would be unintrusive and also consistent with the \n> use of the |libre2.symbols| file, but it looks as though wildcards are \n> not supported, so I agree that this isn't worth the effort unless \n> someone truly needs a DLL someday.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/google/re2/issues/66#issuecomment-152440108.\n> \n> I think that a .def file still requires __declspec(dllimport) but I'm \n> not sure. I would have to experiment. Ideally if we ever have to do \n> this, we would have someone more experienced in creating DLL's on windows.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/152509626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/159387855", "body": "Attached are the changes needed to build re2 as a DLL under Windows using CMake to generate a .def file. Declaring dllimport and dllexport is still necessary for global variables; luckily, there are few of them.\n[diff.txt](https://github.com/google/re2/files/43146/diff.txt)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/159387855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/160884622", "body": "On 11/30/2015 11:42 PM, Paul Wankadia wrote:\n\n> Just a few more files to go. :)\n> \n> BTW, have you tried building with \n> https://github.com/google/re2/blob/master/util/util.h#L73-L74 removed? \n> If not, could you please try it and let me know whether they are \n> hiding another slew of warnings? Thanks!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/google/re2/issues/65#issuecomment-160851441.\n> \n> This increases the number of warnings from 43 to 97. :(\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/160884622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/160911959", "body": "On 11/30/2015 11:42 PM, Paul Wankadia wrote:\n\n> Just a few more files to go. :)\n> \n> BTW, have you tried building with \n> https://github.com/google/re2/blob/master/util/util.h#L73-L74 removed? \n> If not, could you please try it and let me know whether they are \n> hiding another slew of warnings? Thanks!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/google/re2/issues/65#issuecomment-160851441.\n\nTo get rid of warning c4800, coercing an int to bool does not get rid of \nthe error. In other words if you have:\n\nint i;\nbool b;\nb = i;\n\nchanging \"b = i\" to \"b = (bool)i\" does not get rid of the warning. To \nget rid of the warning, you need to change \"b = i\" to \"b = (i!=0)\"\n\nWould you like me to send you a list of where warning c4800 is generated?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/160911959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/162319705", "body": "On 12/6/2015 1:18 AM, Paul Wankadia wrote:\n\n> I believe that's everything, but I'll wait for you to confirm before I \n> close this issue. Thanks! :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/google/re2/issues/65#issuecomment-162276600.\n> \n> There is still one warning left:\n\n*Warning    C4244    '=': conversion from 're2::int64' to 'int', \npossible loss of data    benchmark E:\\src\\re2\\util\\benchmark.cc    129\n*\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/162319705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/162389366", "body": "Re2 and all the tests now build under MSVC 15 with no warnings and no errors.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/162389366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/162391111", "body": "On 12/6/2015 9:22 PM, Paul Wankadia wrote:\n\n> Once again, a milestone reached because of your contributions! Thank \n> you very much. :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/google/re2/issues/65#issuecomment-162390498.\n> \n> Thank you! I am currently running all the tests--I am confident they \n> will all pass. I will let you know when they finish.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/162391111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/162606575", "body": "All tests were passed for RE2 built with MSVC 2015.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/162606575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/167609685", "body": "On 12/28/2015 5:13 AM, Paul Wankadia wrote:\n\n> RE2 builds cleanly with Visual Studio 2013 and Visual Studio 2015, I \n> believe, so is it possible that Visual Studio 2008 differs from more \n> recent versions in this regard? (Ping, @DThiebaud \n> https://github.com/DThiebaud.)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/google/re2/issues/40#issuecomment-167536396.\n> \n> I will build the current RE2 to verify that no problem with VS2013 or \n> VS2015 has sneaked in. I have VS2008 so I will also see what I can find \n> out on this.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/167609685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/167665324", "body": "The current RE2 does, indeed, compile cleanly on VS2013 and VS2015. When I try to run CMAKE for VS2008 I get an error which I think is because I don't have VS2008 installed properly.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/167665324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/167711008", "body": " https://msdn.microsoft.com/en-us/library/d3xd30zz.aspx says: \"vsnprintf_s,_vsnprintf_s and _vsnwprintf_s return the number of characters written, not including the terminating null, or a negative value if an output error occurs. vsnprintf_s is identical to _vsnprintf_s. vsnprintf_s is included for compliance to the ANSI standard. _vnsprintf is retained for backward compatibility.\"\n\nThis is in the 2008 version of this page as well as the 2015 version of this page. I don't understand why ;you get different results with vsnprintf_s as opposed to _vsnprintf_s. \n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/167711008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/167711179", "body": "> Download the missing stdint https://github.com/CoDEmanX/re2win/blob/master/mswin/stdint.h and i>nclude the folder in the project.\n\nHow to I download this? (I don't know GIT very well.)\n\n> Install VC++ 2008 Feature Pack to fix fatal error C1083: Cannot open include file: unordered_set\n> Where can I find this?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/167711179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/167711516", "body": "Has anyone thought about how old a version of MSVC we want to support for RE2?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/167711516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/google/re2/comments/13444763", "body": "This looks good to me. I will test it.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/comments/13444763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/comments/13450186", "body": "When I tried to build with CMAKE, I couldn't build the tests. pcre.cc had dozens of compile errors. I suspect I'm doing something wrong. This was with MSVC 2015. I'll play with this more later.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/comments/13450186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/comments/13486161", "body": "This still gets similar compile errors as before. In threadwin.cc, if I change:\n# include \"util/util.h\"\n# include \"util/thread.h\"\n\n to \n# include \"util/thread.h\"\n# include \"util/util.h\"\n\nthen it compiles cleanly. It's as if the include of util.h prevents the include of windows.h in thread.h from working.. I don't know why this happens, but it happens on my PC>\n", "reactions": {"url": "https://api.github.com/repos/google/re2/comments/13486161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/comments/13557959", "body": "threadwin.cc compiles cleanly for me now.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/comments/13557959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "randomascii": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/147934595", "body": "The code compiles fine on Windows now. Since LONG is fixed size on Windows (always 32-bit, they don't dare ever change it) for x86, x64, and ARM it should be fine forevermore.\n\nI don't have an ARM machine handy but I could probably compile it for ARM, I think, although I'm confident that InterlockedExchange and LONG won't be issues.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/147934595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "crquan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/149267195", "body": "while is there a solution to fix this slow processing? @junyer could you re-open?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/149267195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/151306861", "body": "but does there exist a solution to be generally faster than default PCRE ? as it is mentioned in Russ's paper, is re2's goal to be that one to be faster in all cases?\nhttps://swtch.com/~rsc/regexp/regexp1.html\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/151306861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kcc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/150719003", "body": "@junyer , there are 3 instances of LOG(INFO) that the fuzzer finds very quickly:\n\n```\nre2/re2/dfa.cc:    LOG(INFO) << StringPrintf(\"DFA out of memory: prog size %d mem %lld\",\nre2/re2/dfa.cc:    LOG(INFO) << StringPrintf(\"DFA out of memory: prog size %d mem %lld\",\nre2/re2/dfa.cc:    LOG(INFO) << \"DFA memory cache could be too small: \"\n```\n\nSince this is an actual I/O, the fuzzing becomes very slow and verbose.\nIs it possible to hide this logging under a flag?\nMaybe RE2::Options::set_log_info(false), or something? \n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/150719003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/150725450", "body": "The [target function](https://github.com/google/libfuzzer-bot/blob/master/re2/re2_fuzzer.cc) currently resides in the libfuzzer-bot git. \nWould you like to have it in the re2 git instead? \nW'll need to make a few changes in it before it becomes stable. \n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/150725450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/150727513", "body": "-minloglevel will work fine if there is a way to set it from within the process (i.e. not from command line)\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/150727513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/153170151", "body": "> > Thanks, but I'm doubtful that moving it here would actually benefit either project. :)\n\nThe reason I suggested this is because I will not be fuzzing re2 indefinitely.\nThe bot itself is planned to be running forever, and so if the target function is in your hands \nyou can modify it to change what the bot is actually testing. \n\nAnyway. \nThe bot is up and running, I've also extended the target function. \nThe bot shows the current coverage info (the list of file locations of functions _not_ covered).\nE.g. from http://104.197.8.28/pass-2015-11-02-19-54-52.log :\n\n```\n    ...\n    22  re2/compile.cc:1098:0\n    23  re2/compile.cc:1104:0\n    24  re2/compile.cc:1146:0\n    25  re2/dfa.cc:502:0\n    26  re2/dfa.cc:518:0\n    ...\n```\n\nMay I ask you to look at the [target function](https://github.com/google/libfuzzer-bot/blob/master/re2/re2_fuzzer.cc) and at the recent coverage report to see if\nsome obvious big chunk of functionality is missing (not covered)? \n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/153170151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/153806121", "body": "@junyer yes, inlining is guilty in this imprecise coverage data. \nI've temporary switched the bot to O1, which is 2x slower, but does not suffer from inlining. \nMind having one more quick look, e.g. http://104.197.8.28/pass-2015-11-04-16-32-05.log?\nThis time there are fewer uncovered functions and only two from re2/parse.cc \n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/153806121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "marijnfs": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/160098144", "body": "Hi,\n\nI have found an error in my code, due to an uninitialized string a\nconstructor it probably got a random string to parse. So problem is\nsolved!\n\n-Marijn\n\nOn Thu, 2015-11-26 at 17:47 -0800, Paul Wankadia wrote:\n\n> Could you please provide a full example that reproduces the bug?\n> Thanks!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/160098144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "reillyeon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/163462743", "body": "I see this project uses Gerrit. I will submit the code review request there.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/163462743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "sklochkov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/166607660", "body": "In case it will help, this is the callgrind output for re2 processing first 10000 lines of the aforementioned test file.\n\nhttps://yadi.sk/d/wA1hI09omQKLi\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/166607660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/166831245", "body": "Hello Junyer,\n\nlibre2.so was compiled with -O2.\n\nI've tried to use partial match, and in that cases it takes re2 only 8 seconds to complete the test.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/166831245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "huxingyi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/167519443", "body": "Hello, I compile the source on vc++ 2008, still got this error\n\n```\nError   14  error C2660: 'vsnprintf_s' : function does not take 4 arguments\n```\n\non this line\n\n``` c++\nint result = vsnprintf(space, sizeof(space), format, backup_ap);\n```\n\nChange `#define vsnprintf vsnprintf_s` to `#define vsnprintf _vsnprintf_s` in `util/util.h` can fix this.\n\nI checked https://msdn.microsoft.com/en-us/library/d3xd30zz.aspx, and found only `_vsnprintf_s` have the scure template overload.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/167519443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/167669890", "body": "It's worth mentioning that to compile successfully on vs2008, I need do the following changes on re2:\n- Download the missing stdint `https://github.com/CoDEmanX/re2win/blob/master/mswin/stdint.h` and include the folder in the project.\n- Install `VC++ 2008 Feature Pack` to fix `fatal erro C1083: Cannot open include file: unordered_set`\n- Define NOMINMAX macro to fix `Illegal token on right side of ::`\n- Append `#define va_copy(dest, src) (dest = src)` to stdint.h(or other files)\n- I just need the library, not the whole tests, so I excluded the https://github.com/google/re2/blob/master/re2/set.cc, because there is also an compile error in it.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/167669890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/re2/issues/comments/167744647", "body": "wget this link: `https://raw.githubusercontent.com/CoDEmanX/re2win/master/mswin/stdint.h`\nI download `VC++ 2008 Feature Pack to fix` from here https://download.microsoft.com/download/a/c/a/acaf4f79-2210-4034-94bb-f7e15eb335f5/VC2008FeaturePack.exe \n\n> This is in the 2008 version of this page as well as the 2015 version of this page. I don't understand why ;you get different results with vsnprintf_s as opposed to _vsnprintf_s.\n\nMy Visual Studio 2008 Version:  Version 9.0.21022.8 RTM \n\n`C:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\include` (VC2008)\n\n``` cpp\n350 _Check_return_opt_ _CRT_INSECURE_DEPRECATE(vsnprintf_s) _CRTIMP int __cdecl vsnprintf(_Out_cap_(_MaxCount) char * _DstBuf, _In_ size_t _MaxCount, _In_z_ _Printf_format_string_ const char * _Format, va_list _ArgList);\n351 #if __STDC_WANT_SECURE_LIB__\n352 _Check_return_opt_ _CRTIMP int __cdecl vsnprintf_s(_Out_z_cap_(_DstSize) char * _DstBuf, _In_ size_t _DstSize, _In_ size_t _MaxCount, _In_z_ _Printf_format_string_ const char * _Format, va_list _ArgList);\n353 #endif\n\n```\n\nThis one is missing `__DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_3` which presented in vc2010.\n\n`D:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h` (VC2010 EXPRESS)\n\n``` cpp\n354 _Check_return_opt_ _CRT_INSECURE_DEPRECATE(vsnprintf_s) _CRTIMP int __cdecl vsnprintf(_Out_cap_(_MaxCount) char * _DstBuf, _In_ size_t _MaxCount, _In_z_ _Printf_format_string_ const char * _Format, va_list _ArgList);\n355 #if __STDC_WANT_SECURE_LIB__\n356 _Check_return_opt_ _CRTIMP int __cdecl vsnprintf_s(_Out_z_cap_(_DstSize) char * _DstBuf, _In_ size_t _DstSize, _In_ size_t _MaxCount, _In_z_ _Printf_format_string_ const char * _Format, va_list _ArgList);\n357 __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_3(int, vsnprintf_s, _Deref_post_z_ char, _Dest, _In_ size_t, _MaxCount, _In_z_ _Printf_format_string_ const char *, _Format, va_list, _Args)\n358 #endif\n\n```\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/167744647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "iaadoa": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/168621689", "body": "That works!  Thank you very much.\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/168621689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "matthewferguson694": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/174462729", "body": "Hmm, that is a good question, I have not tried to build anything else.\n\nI installed executed: yum install -y glibc-static libstdc++-static\n\nand then tried again:\n\n[root@roller re2]# make testinstall\ncp testinstall.cc obj\n(cd obj && g++ -I/usr/local/include -L/usr/local/lib testinstall.cc -lre2 -pthread -static -o testinstall)\n/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/libpthread.a(libpthread.o): In function `sem_open':\n(.text+0x682b): warning: the use of`mktemp' is dangerous, better use `mkstemp'\nobj/testinstall\nPASS\n(cd obj && g++ -I/usr/local/include -L/usr/local/lib testinstall.cc -lre2 -pthread -o testinstall)\nLD_LIBRARY_PATH=/usr/local/lib obj/testinstall\nPASS\n\nSo that looks a lot better!\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/174462729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Ratstail91": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/re2/issues/comments/185725472", "body": "I've been struggling all day with this repo, and nothing has come of it. Is a simple Regex parser so much to ask?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/issues/comments/185725472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "zenvendof": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/re2/comments/11017352", "body": "This breaks OS X (tested on Yosemite) throwing error:\n\nmake testinstall\ncp testinstall.cc obj\n(cd obj && c++ -I/usr/local/include -L/usr/local/lib testinstall.cc -lre2 -pthread -static -o testinstall)\nld: library not found for -lcrt0.o\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nmake: **\\* [testinstall] Error 1\n\nMy research tells me OS X doesn't like static linking :-P.....  may want to condition it as exclusion in Darwin....\n\nI commented it out and it test ok:\n\nmake testinstall\ncp testinstall.cc obj\n# (cd obj && c++ -I/usr/local/include -L/usr/local/lib testinstall.cc -lre2 -pthread -static -o testinstall)\n# obj/testinstall\n\n(cd obj && c++ -I/usr/local/include -L/usr/local/lib testinstall.cc -lre2 -pthread -o testinstall)\nLD_LIBRARY_PATH=/usr/local/lib obj/testinstall\nPASS\n", "reactions": {"url": "https://api.github.com/repos/google/re2/comments/11017352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "cypro666": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/re2/comments/15694741", "body": "call ::memset or std::copy is better?\n", "reactions": {"url": "https://api.github.com/repos/google/re2/comments/15694741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "H2CO3": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/re2/comments/20451862", "body": "Awesome, thanks!\r\n", "reactions": {"url": "https://api.github.com/repos/google/re2/comments/20451862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "lwerdna": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/re2/comments/20925694", "body": "would be cool to see an example image produced by this gnuplot support", "reactions": {"url": "https://api.github.com/repos/google/re2/comments/20925694/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}}}}