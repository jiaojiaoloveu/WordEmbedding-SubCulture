{"_default": {"1": {"FireballDWF": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/4072", "title": "make deps fails when attempted on ClearLinux", "body": "$ make deps\r\nTraceback (most recent call last):\r\n  File \"./tools/get_platform.py\", line 210, in <module>\r\n    familyAction()\r\n  File \"./tools/get_platform.py\", line 182, in familyAction\r\n    family, osType = _platform()\r\nTypeError: 'NoneType' object is not iterable", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/4072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pirxthepilot": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/4071", "title": "Minor OS version not detected in CentOS 7", "body": "Looks like osquery is not able to detect the minor version of CentOS 7:\r\n\r\n```\r\n$ cat /etc/redhat-release\r\nCentOS Linux release 7.4.1708 (Core)\r\nosquery> select * from os_version;\r\n+--------------+----------+-------+-------+-------+-------+----------+---------------+----------+\r\n| name         | version  | major | minor | patch | build | platform | platform_like | codename |\r\n+--------------+----------+-------+-------+-------+-------+----------+---------------+----------+\r\n| CentOS Linux | 7 (Core) | 7     | 0     | 0     |       | centos   | rhel fedora   |          |\r\n+--------------+----------+-------+-------+-------+-------+----------+---------------+----------+\r\n```\r\n\r\nGot the same results on osquery versions `2.10.2`, `2.11.0` and `2.11.2`.\r\n\r\nPossibly related to #3753?", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/4071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sanghyunhong": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/4070", "title": "\"docker_container_processes\" Not Showing Anything.", "body": "Hello, \r\n\r\nI have been running OSQuery on my EC2 instances in AWS as well as on my Mac laptop, and I am running at least three containers per host. However, I cannot get anything from the command 'select * from docker_container_processes where id = <container_id>' in the OSQueryi.\r\n\r\nCan you look at this issue as soon as possible, since I think it's the critical?\r\n\r\nS.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/4070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "geekscrapy": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/4069", "title": "\"Recursive\" searches on results", "body": "Looking for a way to perform recursive searches on results. End result is to have a query which will provide file table results for values in services.path and/or services.module_path columns. We're intending to use OSQuery as a snapshotting tool, but not for continious monitoring. Therefore we need to collect everything we want to in one go, then analyse later.\r\n\r\nAn example of this is to enumerate all .services and upon each of the services.path results, query the path column with the .file table. Hence the recursion.\r\n\r\nFor example given the following query:\r\nSELECT file.filename, file.uid, file.gid FROM file INNER JOIN services ON file.path=services.path;\r\n\r\nWhilst this provides some output when the services.path is soley a path to a binary, when it contains command arguments or environment variables that row is ignored. For example, this is completly useless with the services.module_path column where most of the values start %systemroot%.\r\n\r\nHow may I go about doing this internally? Could a table be created in which if JOINed upon it would parse the input, expand the path (if environment variables are used) and allow you to then JOIN with another table, like .file?", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/4069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/4067", "title": "Use of decorators with the shell", "body": "Are decorators currently implemented with the shell? I'm looking for the decorator to be present with each query result when running a pack, or even the same type of output (including the pack name, hostIdentifier calendar time etc.) when running queries from the shell.\r\n\r\nTIA", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/4067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "theopolis": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/4059", "title": "Build version 2.11+ on FreeBSD", "body": "FreeBSD's port is a little behind. Here are the things we need to get it going again.\r\n\r\n1. The `rocksdb-lite` port will need the following environment variables defined when building. `USE_RTTI=1`, `DISABLE_JEMALLOC=1`.\r\n2. The `cpp-netlib` and `linenoise-ng` ports are no longer needed, `asio` is no longer needed either, if it is used.\r\n3. The thrift library should be at version `0.11` or greater, it may be way behind, at something like `0.9.3` or `0.10.0`.\r\n\r\n/cc @lxcode ", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/4059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/4038", "title": "deps: Be on the lookout for a new version of librpm for OpenSSL support", "body": "The current version of librpm (4.14) only supports NSS or BeeCrypt, and we use BeeCrypt.\r\n\r\nThe version in `master` has added support for OpenSSL.\r\n\r\nhttps://github.com/rpm-software-management", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/4038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3999", "title": "tables: Report process limits on darwin and linux", "body": "This seems easy on Linux, the `/proc/PID/limits` reports hard and soft limits for each process. These are usually defined by `/etc/security/limits.conf` but a process may also use the C APIs/syscalls.\r\n\r\nThese are the limits reported by `ulimit` too.\r\n\r\nI am not sure how to report this information on Darwin. \r\n\r\nThe system may also have hard limits, so another non-user or non-system table may be needed.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3998", "title": "sql: getQueryColumns fails on UNIONed aggregation columns", "body": "Check out the following behavior:\r\n```\r\n>>> i.client.getQueryColumns('SELECT count(1) as c from time union select count (1) as c from time');\r\nExtensionResponse(status=ExtensionStatus(message=u'OK', code=0, uuid=0), response=[{u'c': u'UNKNOWN'}])\r\n>>> i.client.getQueryColumns('SELECT seconds from time union select seconds from time');\r\nExtensionResponse(status=ExtensionStatus(message=u'OK', code=0, uuid=0), response=[{u'seconds': u'INTEGER'}])\r\n>>> i.client.getQueryColumns('SELECT count(1) as c from time');\r\nExtensionResponse(status=ExtensionStatus(message=u'OK', code=0, uuid=0), response=[{u'c': u'BIGINT'}])\r\n```\r\n\r\nThe failing query:\r\n\r\n```sql\r\nSELECT count(1) as c from time union select count (1) as c from time\r\n```\r\n\r\nThis API is very important and is used to determine the types for data. This is a complex use case but is practical (aka we have scheduled queries). We'll need to enhance the SQLite virtual machine parsing to determine the types.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3881", "title": "curl table should use default \"osquery/\" + kVersion for UAS", "body": "We have a symbol: `kTLSUserAgentBase` that could be externed in the `http_client` header. Most things should use the form `osquery/VERSION` for the user agent string.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3823", "title": "macOS: investigate process_file_events subscriber table availability", "body": "I'm seeing lots of warnings for `Subscriber table missing: process_file_events` on Darwin deployments with 2.9.0.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3801", "title": "Windows 2008R2 builds failing in Jenkins: osquery_utils.ps1", "body": "See: https://jenkins.osquery.io/job/osqueryMasterBuildWindows2008R2/631/console\r\n\r\n```\r\nC:\\jenkins\\workspace\\osqueryMasterBuildWindows2008R2>tools\\make-win64-dev-env.bat\r\n[+] Provisioning a Win64 build environment for osquery\r\n => Verifying script is running with Admin privileges\r\n[+] Success -- provisioning osquery from C:\\jenkins\\workspace\\osqueryMasterBuildWindows2008R2\r\n => Attemping to detect presence of chocolatey...\r\n[*] Chocolatey is already installed.\r\n => Determining whether winflexbison is already installed...\r\n[*] winflexbison  already installed.\r\n => Determining whether cppcheck is already installed...\r\n[*] cppcheck  already installed.\r\n => Determining whether 7zip.commandline is already installed...\r\n[*] 7zip.commandline  already installed.\r\n => Determining whether vswhere is already installed...\r\n[*] vswhere  already installed.\r\n => Determining whether cmake.portable is already installed...\r\n[*] cmake.portable  already installed.\r\nException calling \"Start\" with \"0\" argument(s): \"Cannot start process because \r\na file name has not been provided.\"\r\nAt C:\\jenkins\\workspace\\osqueryMasterBuildWindows2008R2\\tools\\provision\\chocola\r\ntey\\osquery_utils.ps1:128 char:3\r\n+   $p.Start()\r\n+   ~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\r\n    + FullyQualifiedErrorId : InvalidOperationException\r\n \r\nException calling \"WaitForExit\" with \"0\" argument(s): \"No process is \r\nassociated with this object.\"\r\nAt C:\\jenkins\\workspace\\osqueryMasterBuildWindows2008R2\\tools\\provision\\chocola\r\ntey\\osquery_utils.ps1:129 char:3\r\n+   $p.WaitForExit()\r\n+   ~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\r\n    + FullyQualifiedErrorId : InvalidOperationException\r\n \r\nYou cannot call a method on a null-valued expression.\r\nAt C:\\jenkins\\workspace\\osqueryMasterBuildWindows2008R2\\tools\\provision\\chocola\r\ntey\\osquery_utils.ps1:130 char:3\r\n+   $stdout = $p.StandardOutput.ReadToEnd()\r\n+   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException\r\n    + FullyQualifiedErrorId : InvokeMethodOnNull\r\n \r\nYou cannot call a method on a null-valued expression.\r\nAt C:\\jenkins\\workspace\\osqueryMasterBuildWindows2008R2\\tools\\provision\\chocola\r\ntey\\osquery_utils.ps1:131 char:3\r\n+   $stderr = $p.StandardError.ReadToEnd()\r\n+   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException\r\n    + FullyQualifiedErrorId : InvokeMethodOnNull\r\n \r\n[-] Python major version != 2.7\r\n[*] Python not found. Installing.\r\n => Determining whether python2 is already installed...\r\n[*] python2  already installed.\r\n => Attempting to install Python packages\r\n[-] ERROR: failed to find python at False\r\nBuild step 'Execute Windows batch command' marked build as failure\r\n```", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3801/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3786", "title": "deps: Move regular expression handling to re2", "body": "The `boost::regex` methods have known weaknesses. We should move to `re2`.\r\n\r\nThis is a potential Hacktober task, but it'll required adapting all `boost::regex` callsites and adding the new library to our formula and choco packages so maybe those can be broken into separate tasks.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3581", "title": "Write failure-case mocks for AWS/EC2 API tests", "body": "When running in AWS/EC2 the APIs return success. When they are running in Vagrant they may produce errors. We should remove confusion by testing the failure-cases when running in Jenkins.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3441", "title": "ASAN on FreeBSD: may detect issue with processes", "body": "I suspect there's an issue with the `processes` table on FreeBSD. I noticed a flaky test that crashed when the scheduler tried to use the table.\r\n\r\nI cannot get ASAN or TSAN to work on FreeBSD 11.0 with `clang38` or `clang40`:\r\n\r\n**ASAN**:\r\n```\r\n[vagrant@ /vagrant]$ SKIP_LLDPD=1 SKIP_TSK=1 SKIP_YARA=1 SKIP_AWS=1 SKIP_BENCHMARKS=1 SKIP_TESTS=1 \\\r\n  gmake sanitize VERBOSE=1 -j4\r\n```\r\n\r\n```\r\n[vagrant@ /vagrant]$ ./build/freebsd11.0/osquery/osqueryi\r\n==6003==AddressSanitizer CHECK failed: /wrkdirs/usr/ports/devel/llvm40/work/compiler-rt-4.0.1.src/lib/asan/asan_posix.cc:111 \"((0)) == ((pthread_key_create(&tsd_key, destructor)))\" (0x0, 0x4e)\r\n    <empty stack>\r\n```\r\n\r\n**TSAN**:\r\n```\r\n[vagrant@ /vagrant]$ SANITIZE_THREAD=1 SKIP_LLDPD=1 SKIP_TSK=1 SKIP_YARA=1 SKIP_AWS=1 SKIP_BENCHMARKS=1 SKIP_TESTS=1 \\\r\n  gmake sanitize VERBOSE=1 -j4\r\n```\r\n\r\n```\r\n[vagrant@ /vagrant]$ ./build/freebsd11.0/osquery/osqueryi\r\nThreadSanitizer: failed to create thread key\r\n```", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3420", "title": "carver: Additional unit tests may depend on other tests", "body": "On FreeBSD, when the `Carver` tests are run first:\r\n```\r\n+ build/freebsd11.0/osquery/osquery_additional_tests\r\n[==========] Running 135 tests from 24 test cases.\r\n[----------] Global test environment set-up.\r\n[----------] 1 test from CarverTests\r\n[ RUN      ] CarverTests.test_carve_files_locally\r\nWARNING: Logging before InitGoogleLogging() is written to STDERR\r\nW0619 01:12:19.045497 148987904 tls.cpp:110] Cannot read TLS server certificate(s): /etc/ssl/certs.pem\r\nW0619 01:12:19.075630 148987904 tls_enroll.cpp:75] Failed enrollment request to https:// (Request error: Connection refused) retrying...\r\nW0619 01:12:20.139104 148987904 tls.cpp:110] Cannot read TLS server certificate(s): /etc/ssl/certs.pem\r\nW0619 01:12:20.160056 148987904 tls_enroll.cpp:75] Failed enrollment request to https:// (Request error: Connection refused) retrying...\r\nW0619 01:12:24.169687 148987904 tls.cpp:110] Cannot read TLS server certificate(s): /etc/ssl/certs.pem\r\nW0619 01:12:24.190764 148987904 tls.cpp:110] Cannot read TLS server certificate(s): /etc/ssl/certs.pem\r\nW0619 01:12:24.211493 148987904 tls_enroll.cpp:75] Failed enrollment request to https:// (Request error: Connection refused) retrying...\r\nW0619 01:12:25.249680 148987904 tls.cpp:110] Cannot read TLS server certificate(s): /etc/ssl/certs.pem\r\nW0619 01:12:25.270656 148987904 tls_enroll.cpp:75] Failed enrollment request to https:// (Request error: Connection refused) retrying...\r\nW0619 01:12:29.319743 148987904 tls.cpp:110] Cannot read TLS server certificate(s): /etc/ssl/certs.pem\r\n[       OK ] CarverTests.test_carve_files_locally (10310 ms)\r\n[----------] 1 test from CarverTests (10310 ms total)\r\n\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3352", "title": "Use millisecond precision for event-based table's time", "body": "The event-based tables need higher precision time than a second.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3247", "title": "virtual table: HECI client UUIDs and ME/AMT version details", "body": "See: https://github.com/chipsec/chipsec/issues/212\r\n\r\nAnd check out `intelmetool`: https://github.com/zamaudio/intelmetool", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3246", "title": "flaky test: TLSConfigTests.test_retrieve_config", "body": "Several hosts in CI will hit:\r\n```\r\n[----------] 3 tests from TLSConfigTests\r\n[ RUN      ] TLSConfigTests.test_retrieve_config\r\n-- [DEBUG] Starting TLS/HTTPS server on TCP port: 29498\r\n-- [DEBUG] RealSimpleHandler::post /enroll\r\n127.0.0.1 - - [03/May/2017 20:39:05] \"POST /enroll HTTP/1.1\" 200 -\r\n-- [DEBUG] Request: {u'enroll_secret': u'this_is_a_deployment_secret', u'host_identifier': u'osx12-2.local'}\r\n-- [DEBUG] Replying: {u'node_key': u'this_is_a_node_secret'}\r\n-- [DEBUG] Shutting down HTTP server via timeout (10) seconds.\r\nunknown file: Failure\r\nC++ exception with description \"map::at:  key not found\" thrown in the test body.\r\n[  FAILED  ] TLSConfigTests.test_retrieve_config (21152 ms)\r\n```\r\n\r\nExample: https://jenkins.osquery.io/job/osqueryPullRequestOSX/780/", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3147", "title": "Event publisher max rate limits", "body": "The event publishers need an abstraction for rate-limiting. There is a potential for an explosion of events/s that can cause the osquery backing storage to thrash.\r\n\r\nThis somewhat similar to the `syslog` rate limit: https://github.com/facebook/osquery/blob/master/osquery/events/linux/syslog.cpp#L156 it may be possible to refactor that into a method exposed by the Publisher, and then apply the checks uniformly.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3121", "title": "Darwin virtual table memory leaks: augeas, sip_config, disk_encryption, certificates", "body": "There are some memory leaks in the Darwin virtual tables:\r\n\r\n```\r\n\u00bb ./tools/analysis/profile.py --leaks\r\nAnalyzing leaks in query: SELECT * FROM certificates;\r\n  definitely:  3606 leaks for 351520 total leaked bytes. \r\nAnalyzing leaks in query: SELECT * FROM sip_config;\r\n  definitely:  63 leaks for 10304 total leaked bytes. \r\nAnalyzing leaks in query: SELECT * FROM disk_encryption;\r\n  definitely:  1 leak for 16 total leaked bytes. \r\nAnalyzing leaks in query: SELECT * FROM augeas;\r\n  definitely:  1 leak for 1536 total leaked bytes. \r\n```", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3057", "title": "Rename distributed to \"live\"", "body": "The terms distributed and adhoc are used to describe the same set of features. From the client perspective there is nothing distributed about adhoc queries, perhaps everything should be renamed adhoc within the codebase?", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/2808", "title": "Extend OS X crashes to Linux", "body": "The `crashes` table on OS X needs to be ported to Linux.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/2807", "title": "Additional internal and side-loaded Chrome extensions", "body": "I see at least the internal PDF reader as a Chrome extension on my Linux machine, that is not reported in the `chrome_extensions` table. Side-loaded, or developer extensions, are not included either.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/2770", "title": "build: Investigate installing cclash on Windows build hosts", "body": "Project: https://github.com/inorton/cclash\r\n\r\nFrom the documentation it seems we can integrate this very easily.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/2687", "title": "shell: the JSON mode only returns TEXT types", "body": "The `osqueryi` `--json` or `.mode json` mode should return actual JSON, respecting the literal types returned by the query expression.\n\n```\n/tmp \u00bb python\nPython 2.7.12 (default, Jul  1 2016, 15:12:24) \n[GCC 5.4.0 20160609] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import osquery\n>>> i = osquery.SpawnInstance()\n>>> i.open()\n>>> i.client.query(\"select * from system_info\")\nExtensionResponse(status=ExtensionStatus(message='OK', code=0, uuid=0), response=[{'cpu_subtype': '78', 'cpu_physical_cores': '4', 'physical_memory': '20783439872', 'cpu_logical_cores': '4', 'hostname': 'laptop2', 'hardware_version': '', 'hardware_vendor': '', 'hardware_model': '', 'cpu_brand': 'Intel(R) Core(TM) i7-6600U CPU @ 2.60GHz', 'cpu_type': '6', 'computer_name': 'laptop2', 'hardware_serial': '', 'uuid': ''}])\n>>> i.client.getQueryColumns(\"select * from system_info\")\nExtensionResponse(status=ExtensionStatus(message='OK', code=0, uuid=0), response=[{'hostname': 'TEXT'}, {'uuid': 'TEXT'}, {'cpu_type': 'TEXT'}, {'cpu_subtype': 'TEXT'}, {'cpu_brand': 'TEXT'}, {'cpu_physical_cores': 'INTEGER'}, {'cpu_logical_cores': 'INTEGER'}, {'physical_memory': 'BIGINT'}, {'hardware_vendor': 'TEXT'}, {'hardware_model': 'TEXT'}, {'hardware_version': 'TEXT'}, {'hardware_serial': 'TEXT'}, {'computer_name': 'TEXT'}])\n>>> i.client.getQueryColumns(\"select 1 from system_info\")\nExtensionResponse(status=ExtensionStatus(message='OK', code=0, uuid=0), response=[{'1': 'INTEGER'}])\n>>> \n------------------------------------------------------------\n/tmp \u00bb osqueryi --json \"select * from system_info\"\n[\n  {\"computer_name\":\"laptop2\",\"cpu_brand\":\"Intel(R) Core(TM) i7-6600U CPU @ 2.60GHz\",\"cpu_logical_cores\":\"4\",\"cpu_physical_cores\":\"4\",\"cpu_subtype\":\"78\",\"cpu_type\":\"6\",\"hardware_model\":\"\",\"hardware_serial\":\"\",\"hardware_vendor\":\"\",\"hardware_version\":\"\",\"hostname\":\"laptop2\",\"physical_memory\":\"20783439872\",\"uuid\":\"\"}\n]\n```\n\nThanks for reporting @scudette, this is definitely a bug we can and need to fix.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/2424", "title": "Windows: release tests for assuring static linking", "body": "In OS X and Linux we have: https://github.com/facebook/osquery/blob/master/tools/tests/test_release.py\n\nWe need to adapt this to Windows to assure:\n1. The queries in all packs that apply to Windows are run.\n2. There are no \"new\" instruction sets used that may not be available on all hosts osquery is deployed on.\n3. There are not dynamic links that are not included in the OS by default.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/2364", "title": "Additional error reporting for TLS cert validation falures", "body": "The current error message: \"verify failed\" is inadequate.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2364/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/619", "title": "[master task] SQL tables requests and roadmap", "body": "This issue is tracking requested virtual tables. If you would like to suggest a new table or discuss the need for a new table please comment on this issue. If you would like to implement one of the tables or need a focused discussion please open a separate issue dedicated to that virtual table.\r\n\r\nThis issue tracks requested/planned additions to the available SQL tables in osquery. If you would like to suggest/discuss a new SQL table please comment on this issue. If you would like to implement one of the tables or need a focused discussion please open a separate issue dedicated to that table.\r\n#### Shared (cross-platform) tables:\r\n- [ ] Exported NFS shares (linux, ~~OS X~~)\r\n- [ ] Binary \"strings\" for a specific path\r\n- [x] ~~MDNS settings/cache~~\r\n- [x] FDE status (fdesetup/~~Filevault on OS X~~) Issue: #913, PR: #913\r\n- [x] Network settings (~~forwarding~~/promisc/~~nameservers~~)\r\n- [x] ~~Browser plugins/extensions~~\r\n- [ ] Unpacked / developer-mode chrome extensions\r\n- [x] ~~osquery-IO utilization~~\r\n- [x] sleuth kit timeline\r\n- [ ] log files (apache logs, system logs, etc)\r\n- [ ] shared memory (~~linux~~, OS X (zpages))\r\n- [x] ~~process memory maps~~ (~~linux~~, ~~OS X~~)\r\n- [x] ~~group membership~~\r\n- [x] general systems information (#1447)\r\n- [x] timezone in time table (#1547)\r\n- [ ] configured printers (#1566)\r\n- [ ] static or DHCP indicator for `interface_addresses` (#1575)\r\n- [ ] `file_regex` table for applying greps across selected file targets (#1692)\r\n- [ ] `ssdeep` support in hashing table (#1775)\r\n- [ ] User entries in the sudoers file (#2024)\r\n#### OS X Tables:\r\n- [x] Crashed process reports\r\n- [x] Package install history (/Library/Receipts/InstallHistory.plist) (#1922)\r\n- [x] Wifi saved info and details (/Library/Preferences/SystemConfiguration/com.apple.airport.preferences.plist)\r\n- [x] ~~xattr \"wherefrom\" for downloaded items in select directories~~ GH-653\r\n- [ ] EAPO Client module (/Library/Preferences/SystemConfiguration/com.apple.network.eapolclient.configuration.plist)\r\n- [X] ~~Managed client information panes~~\r\n- [ ] packet/pf/bp firewall (#1521)\r\n- [x] ~~defaults read table with path to plist trigger~~\r\n- [x] ~~blessed boot directory/file using nvram settings~~ (available as `kernel_info`)\r\n- [x] ~~Block devices (parity with Linux)~~\r\n- [x] macho signature (joinable, like file/hash) GH-800\r\n- [x] more signature (and signer) details for machos and related signed blobs  #(#1770)\r\n- [x] ~~authorization DB config~~\r\n- [ ] macports packages\r\n- [ ] kernel_extension_plugins and FileSystem-based extensions\r\n- [ ] `interface_details` service order & primary interface indicator (#1568)\r\n- [ ] Gatekeeper entitlements status (#2042)\r\n#### Linux Tables:\r\n- [x] iptables\r\n- [x] /boot directory/configuration\r\n- [ ] TPM information\r\n- [ ] bonds #1173\r\n- [ ] Fedora's DNF (yum replacement) #1515 \r\n#### Deep systems/esoteric tables:\r\n- [x] EFI platform metadata (OS X: #1317)\r\n- [x] Bootloader metadata, GUID-PT/paths, etc.\r\n- [ ] EFI/UEFI variables\r\n- [ ] EDID information\r\n- [ ] Supported/attached bus information\r\n- [x] ~~DMI/SMBIOS data~~\r\n- [x] ~~ACPI tables~~\r\n- [ ] BIOS Extensions\r\n- [x] SMC information\r\n- [ ] memory regions (~~linux~~, OS X)\r\n- [ ] memory locking MSRs\r\n#### Existing table additions:\r\n\r\nTables that exist, but need hi-priority columns.\r\n- [ ] rpm_packages: add package signatures\r\n- [x] processes/file: on OS X display binary signature\r\n- [ ] Add support for reading fish history in `shell_history` table (#1417)\r\n- [ ] add \"focused\" attribute to `application_usage` on OS X (#1315)\r\n- [x] add kext signature to `kernel_extensions` table on OS X (#1462)\r\n#### Existing table modifications (column depredations/aliases)\r\n- [x] `on_disk` in the `processes` table should be `path_exists` or `binary_exists` (#1661)\r\n#### Kernel-introspection-enabled tables:\r\n\r\nTables that use the OS X kernel extension or the not-yet-developed Linux kernel module. In some cases the BSD audit framework can suffice.\r\n- [x] Process start/stop\r\n- [ ] Select system calls tables\r\n- [x] Socket opens\r\n#### Low-priority recommendations:\r\n- [ ] High-IO/performance processes/executables\r\n#### Anti-pattern tables:\r\n\r\n These are tables that are not appropriate for osquery as it exists today. This does not mean these tables are forever blacklisted, but they require considerable discussion or are more appropriate as modules or extensions and not as part of the core tables.\r\n- Browser (chrome, firefox, safari) history (#22, #1691) this is very private information\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/619/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/3decac948ec173fb2009113bccf52f7ab37afd99", "message": "tables: Remove ptree from table plugins (#4075)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/967910c6bf008afff0e05b1347d8857a3daa80da", "message": "deps: Use librpm 4.14.1 without beecrypt (#4073)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/483fbbb594fe7172d6c008e1a018eb9c107ba99e", "message": "query: Force query results into proper order (#2947)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/90a737ead7c7aa7ef62cc67085844aaff611703b", "message": "Replace most of boost::property_tree with rapidjson (#3910)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/fad4a748c06d3a1350b60f025be54f91987e3e15", "message": "tables: Add cpu_microcode to system_info (#4028)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/597b60d5ebd29e5fc350f167be728802e0dfcd07", "message": "website: Upload dark version of logo for README (#4065)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/e8c0601ffe92ad9f4704fe69e8523beb80c79b5a", "message": "tables: Parse interface flags from sysfs on Linux (#4063)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/181d2f9dbc8ab4e45d2b208150738e7e3b75d383", "message": "build: Fix OSQUERY_BUILD_SHARED linkage (#4062)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/3591d221e81c1d263ef2814fbaa5fad0d70fe7ee", "message": "tables: Add pcid to cpuid table (#4061)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/193de0c818f90a70d291bb6d85d3ebf179d7d069", "message": "deps: Improve native (non-deps) builds (#4060)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/82235e3c1317dafa8fcef69ee11faf9d2edeb910", "message": "deps: Build linenoise locally (third-party) (#4058)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/8272c028ddc1e2b10dd3492e879d52d85d602f84", "message": "macOS: Link with no-weak-imports (#4056)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/541f28d397531926532eacd0f8d2518c396a37c7", "message": "deps: Build librdkafka 0.11.3 without clock_gettime (#4054)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/adad4ee8deb726d43626cd85f92c4f679a31eea7", "message": "build: Set default macOS SDK to 10.11 (#4053)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/b8a25429a5e2094f2bb23b3a1a01e4029c7275f6", "message": "tables: Remove apt-pkg linking on Linux (#4049)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/687070352d1d9c72abb81840cca0d9ba3000f844", "message": "website: Add 2.11.2 release (#4050)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/f2f6b8d5f4d47e51eb2bc3eec810bf44c7e531f2", "message": "vagrant: Add win10 target for Vagrant (#4040)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/5777efffb4c2a75339e6fa541b9c2be3ba9667b2", "message": "deps: Add SKIP_DEPS control to CMake (#4036)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/de19f0b6c2cf97dc978b8ca32b7f44ce518079e3", "message": "tables: Replace apt_sources with crude string parsing (#4034)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/00040c6c1a7abbe8ed2ff3549eef8bb4a986b97d", "message": "feature: URI parsing from folly (#4035)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/551e1043b4a5d1032a1599b7b24844c3cf2fd647", "message": "tests: Interrupt subprocesses of test_osqueryd (#4032)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/ecf06772c838559b89724b6a7c2fac3ea4648aa5", "message": "windows: deps: Install thrift module on Windows only (#4033)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/c4c5385253f7c86d3e84667b8207abaf0d93478a", "message": "deps: Rebuild all dependencies for Darwin and Linux (v5) (#4025)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/32847baec75b0d16fa7a10866f729aab3edfb482", "message": "tests: Allow VERBOSE_TEST=1 to run verbose ctest (#4023)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/ec4cad5604b51a05d9066826ec8de028ec4ff440", "message": "tables: Fix Bookmark and Alias path extraction (#4022)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/b86b8c0ba3466032251a78e77e1b66728b151410", "message": "rocksdb: Decrease max open database files to 128 from 256 (#4021)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/5efb0bd09a9d90e0480d01bfaeb7251aef5e6445", "message": "Set minimum NOFILE limit to 1024 (#4020)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/489ec3fc59d8cedc45cbc6392b7ff1c9f2f79903", "message": "deps: Update Linux and macOS boost to 1.66 (#4018)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/776846a73747bc00916e4e7bfb59a0f7f5ff9992", "message": "deps: Use beast v124 APIs (#4016)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/b1f2888c8f101f1941a4377635e35f0b4ad9980e", "message": "deps: Fix symlink check in thrift 0.11 (#4017)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/56f9072cb6217d6b9c57c375d85d3acb8795cd88", "message": "deps: Build for thrift 0.11.0 (#4013)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/0ec2cc370546eac0b4bd865e986c6f5d7fc3f1bb", "message": "website: Add 2.11.0 release (#4011)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/f6d077cbf7e1f60eef06ccdaf568f25971d178e9", "message": "license: Change license to Apache 2.0 and GPLv2 (#4007)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/222f40f2d38d0fe24f29fcb526d1ddc5fe82439e", "message": "hash: Use the hash-cache by default and document flags (#4006)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/e71390ca82acccace47c186dcc0004303f13cf11", "message": "config: Allow scheduled queries to set blacklist=false (#4005)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/33ab8b6e5d748198ebf4c0702e076f97581c657a", "message": "config: Inspect blacklisted queries (#4004)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/a6998b75180b87cda416557a90eb6a567fb26006", "message": "extensions: watchdog: Opt-in to monitor extension performance (#4003)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/f7be9fae71d0e1208901b3dd30c2a7940368d416", "message": "ux: The ephemeral flag should disable the database (#4002)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/70a214b8a64c0a17cce63d231b6814f56986f57a", "message": "logger: Remove invalid assumptions about status logging (#4001)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/2c8813a1506b73d5a58593da0db7429f69fbc999", "message": "logger: wel: codemod the generated WEL header into plugins (#4000)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/cdadfd7df67cc020f9ab7ca55c5620d12ebaae15", "message": "deps: Include script to auto-build bottles (#3992)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/a073bdc8385681747056bdb1bc2bd69aa7a3207f", "message": "docs: Add short debugging note for events in osqueryi (#3993)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/90ae0c87e77e8e939ac62b27b58486add371811b", "message": "deps: Update librdkafka 0.11.1 bottle hashes (#3987)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/d72d43af86cbd82357092bc09a3f8d4203432125", "message": "deps: Update db, librpm, and zstd libs for Linux and Darwin (#3980)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/e8cd9f139bf93ce274478c9647aeaa109c2b827c", "message": "deps: Label licenses for library formulas (#3976)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/13dfd0148c1f30f03f5c942cd65908dc16d4e75c", "message": "audit: Force include and source files to be 100644 (#3971)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/03984bc9a9f266821240ecc56aad359f42d9e2b9", "message": "watcher: Use min for delay max and delay current (#3969)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/ee17e7e6f031430ae630ab7be69dd5f20c690ad9", "message": "extensions: Fix path quotes on Windows (#3965)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/bfb4061f39f11895d79c61190027892f6bcdc4a1", "message": "remote: Remove legacy OpenSSL SSL symbol defines (#3961)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/1cedf8d57310b4ac3ae0a39fe33dce00699f4a3b", "message": "tables: Add basic Intel ME table returning version (#3956)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/3ad5267642cd5ada44383d5ec664ae9ac3fccd5c", "message": "[Fix #3941] Stop renaming worker and extension argv[0] (#3943)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/80cebc8318202d772ac5dc0de05b5c7b56efa50a", "message": "extensions: Add 5min timeouts for read and send client calls (#3847)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/120c0ee62e36ef5dce583d36e1ff8aa9f6df15eb", "message": "Stop latent autoloaded extensions and apply an initial delay (#3944)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/16d92d1dc662f9dfd18186c9c58ab03f5d1a148e", "message": "docs: Remove quotes from flags documentation (#3937)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/523ad777a86c09eccf0d821b8a92172159d970e0", "message": "[Fix #3931] Remove removed results correctly (#3938)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/3f1a90c56b402e0e091c0d33314fc9635c1628c5", "message": "website: Update building osquery blog article with office hours (#3933)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/5ad0e599fc27d657df0675852f20b8cef51f9e69", "message": "website: Small blog post about community efforts (#3932)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/d34d62186d8cd822e6b13ce0f5d38d794ec5ea96", "message": "website: Add 2.10.2 release (#3925)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/6aa127dcde8b38711891d6b51e8196feec9b0291", "message": "packages: Use source repo git describe for packages (#3914)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/5245f7bcf3e87568d4f57f08dc4faf47c501f1c5", "message": "tables: Refactor ssl_cert into curl_certificate (#3903)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/8597db5f116905128b1610f52c273c51d918ba64", "message": "tables: Move the curl table to all platforms (#3904)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/a7c2669ba319534b618a01221889a64809290328", "message": "tidy: Improve clang-tidy (modernize) list of checks and run across codebase (#3870)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/9422a9f6316e05bc31a2b193304ea4c9868bf98e", "message": "release: Update website release to 2.10.0 (#3895)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/e3b80ea232e19e718dd71813b769c227f8ae955d", "message": "release: Do not install rpm for macOS release (#3885)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/4aa3db30ca06b6ada9d9a29123bf391b036c2ffc", "message": "[Fix #3859] Lock every access to SQLiteDBInstance::db (#3883)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/5a5e467e96c38687a61425aca5c9213c42cc2eb0", "message": "release: Add sign_release script (#3875)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/9b3d02ff2f8e0749cedd8cd5428ab19734a0095e", "message": "remote: Various refactors for the http_client (#3882)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/361de3e5bd6bf2968a6b1afe9f642eb796cdcbed", "message": "deps: If DEPS_DIR exists and is a git checkout assume Homebrew (#3880)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/a9456bd932734c02c05be57954a1682120b890dc", "message": "beast: Place boost beast into third-party (#3876)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/f080d3fae1c8ea2f4e5570312a5a292d3a1885fd", "message": "vagrant: Use quarterly packages on FreeBSD (#3874)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/aa7f7dee688a9f03282672c5fafd6a59c5713fe4", "message": "logger: Port status serialization to rapidjson (#3742)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/a1992c24aa1ab3ccffdce2085b66f387d92d5c15", "message": "release: Make build_release idempotent (#3867)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/845b1f046848a150c298bdd3b80f7e6adfa51119", "message": "deps: Use persistent LVM source url (#3868)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/9ec85f01e70fa89acddbd2b8513b0ac4f9dba5df", "message": "deps: Install librpm on macOS (#3863)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/210af254b1f52bd987c3c574a3489118e6b57261", "message": "Fix extended_schema on Windows (#3856)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/979cd4e5d101be7aefd8f4edddf258da1c1d9307", "message": "[Fix #3831] Apply per-DB instance attach locking (#3862)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/54a8de8b6d8cb5c34a5e2a8b6d7e949018588bd8", "message": "tables: Add default values for POSIX os_version (#3848)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/72d84f902949f9b5786c86545249c1acfdb5ca6c", "message": "tables: Use FQDN for POSIX system_info hostname (#3846)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/418973f3334118617f099a90e7da7f324323b1e1", "message": "Add logger_snapshot_event_type flag for snapshot events (#3838)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/676430b0196d2b265a286e9364d4330b282d04b8", "message": "[Fix #3831] Do not lock kAttachMutex within shell callbacks (#3837)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/869ac6fe5ea0b804fb7fce78c47dd93f6558c018", "message": "website: Prevent readthedocs from a 301 to http (#3836)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/cccd27273a2dedebe6a8701853bef77862a9731f", "message": "tables: Add dropTo with string UID and GID params (#3832)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/e88f7a25508dea298d328fc6fc43180dcca57a51", "message": "deps: Tap homebrew-core manually and fix initial sysprep (#3834)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/437accd0ef6e1793b7dc87a7eb1185c370ee43aa", "message": "website: Point docs link to readthedocs (#3833)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/101ea332a27e26046cbfd0376dadd3ac4dc9d4d6", "message": "[Fix #3824] Do not lock registry addExternal calls (#3830)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/d341d92ce43ffe18416005f9f7919c76d81b03dc", "message": "release: Add build release script (#3804)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/2b4a46ead5e7f61e898b7e7488741e0301d4dd94", "message": "release: Add commit schema script (#3802)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/d106647c7f8db57f24471e5e5d38ac29afa03879", "message": "tables: Require explicit requests for query results caching (#3805)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/6db57de94c8e9e4eb086c2a19e873841b2e98a55", "message": "gtest: Fix tuple breakage on CentOS (#3809)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/0104cd1b763a5eb327f38a2bc3bbf7df6207af0b", "message": "fuzz: Use example queries as input to make fuzz (#3795)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/d791a144c293f5ae3888007a0c3d6d94c805514a", "message": "tables: Add exception handling within constraints matching (#3792)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/0885e6b1b3cebb21b32bd8e14d8d3ac896ff3e5f", "message": "website: Add 2.9.0 schema (#3794)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/32391e708b507da6b1ab9d679a8e8ea64a7a6323", "message": "deps: Bump librpm revision for new libxml2 version 2.9.5 (#3793)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/41c540ea141288942efc740d4da4cffd823ed96e", "message": "security: Update SECURITY.md with recent merges (#3787)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/32ca65e1fe3b2ad76c391cd8371231d41cd4dde2", "message": "[#3765] Drop privileges to the parent path not referred path (#3782)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/8535c8b52c5911d83f44be1ae59aa7c0a13a24dd", "message": "[Fix #3765] Drop privileges to the user in the safari_extensions search (#3783)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/278955df785f1c0db8f247dd6f266a8b00728a7e", "message": "[Fix #3762] Use DropPrivileges helper within known_hosts table (#3781)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/6bdb140d51bdf320db79ab8f89b875910f790eaf", "message": "deps: Update bottles for glog gflags libmagic aws-sdk-cpp (#3780)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/65ae070369e89df401da319bea5fbb1622943d9d", "message": "deps: Update libarchive formula to version 3.3.2 (#3770)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/0852d0ea08bccbf2351edd8cfec68aa180ece360", "message": "deps: Improve provision bottling scripts (#3779)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/3bafda3fc0eecb2603ee19436d9d596fe7d5c28c", "message": "deps: Update augeas formula to version 1.8.1 (#3767)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/8f5de02ba8061a24758c2e2231f86b7d653a862a", "message": "deps: Update libcryptsetup formula to version 1.7.5 (#3772)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/c5b0651cd4ae4f0ce8c6db082d4ba04e18467a35", "message": "deps: Update librdkafka to version 0.11.0 (#3776)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/11341ad91429460e558ff192a632cf43d82af84f", "message": "Add SECURITY.md security issues tracker (#3766)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/2dc164045808544403cc5860c8f22d9490cd98fe", "message": "deps: Update libxml2 to version 2.9.5 (#3775)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/9f011d28fe36b4aaf4d2ed3c1a136b3a70dcf24e", "message": "deps: Update libgcrypt to version 1.8.1 (#3773)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/2efff6f8eb462850be6039fdb91554c3672eb027", "message": "deps: Update libmagic to version 5.32 (#3774)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/cc2f7e3be0669a935f022810f6b4c85c8a10b83e", "message": "deps: Update aws-sdk-cpp formula to version 1.2.7 (#3768)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/d5904ddf00b99324cdf1db19f3c4d654ab6ec38b", "message": "deps: Update glog formula to version 0.3.5 (#3769)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/3d93c81706f8ba383935ff114675b9ca5c95c760", "message": "deps: Update gflags formula to version 2.2.1 (#3771)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/fc834a22d75e0f6b22a1b1745fc1088366de780f", "message": "website: Fix redirects with /osquery using empty baseurl (#3758)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/9e779a56e607ade210e06f15a019436e9f732157", "message": "website: Render 2.8.0 schema and add schema scrollTo (#3752)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/195690d6d1e79d7fa402073525f4f8849d61552f", "message": "release: Add 2.8.0 hashes and new_release script (#3745)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/82773e83f5359f5adee60009da7ef711058af18d", "message": "[Fix #3717] Check crypt API values before constructing strings (#3746)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/29f5dfb369a359c44b73b0faae3d380f313ffd9e", "message": "logger: Add benchmarks for status logging (#3741)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/32ec05c3c0cc252723e20766539bcc6c762a52da", "message": "flags: Add helper method to get an Int32 flag value (#3739)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/b425ca2da4b193a3e32fde4204df77c9790dd69e", "message": "website: Add static files and security assessment (#3738)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/916f13ccc4b88ed9e9f8eeb670e84e1d74a3a630", "message": "website: Fix missing redirects for tables and packs (#3737)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/9d33261767d1f57df0469dbea10e38fec0e4eb45", "message": "tables: alf_services should not be hardcoded (#3695)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/988afd0aa991fb3adb580c8c66d1d19b8da5970b", "message": "filesystem: Use fs::path for PlatformFile ctor (#3720)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/e471e5032db3d07fbfc7794bf33db0de3d1e54aa", "message": "website: Add Jekyll CI checks using html-proofer (#3729)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/1576c4076b1578d4540bc01a2b032e56cf555ade", "message": "website: Add the packs view (#3728)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/8d8e724941061f7861b50fff5ccf8feeadfe9f8b", "message": "website: Add github buttons and footer links (#3723)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/ed69fda9a0e04952b791532362b0bb99652d0000", "message": "website: Include redirects fix schema sorting add old schema (#3722)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/0824d5545cb5824ccd7466e91fb4a583814675c1", "message": "website: Remove home link and change schema URL to osquery/osquery-site (#3721)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/706d2f3965b0a644b6f2a449a039da398cec84c4", "message": "website: Add initial osquery.io redesign (#3713)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/2cb56a43a8bf327be56121d414db5fe158d7acef", "message": "deps: Add bottles for librdkafka (#3711)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/39f487e6870db0d3ab996b8e95faac3177aea57c", "message": "Refactor authorizations tables (#3691)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/46348dd9f5051ea11ce08b670cd9fa69e53a99df", "message": "readme: Add callout for osquery devteam recruiting (#3693)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/812dbc5080e4644641815cb4a1a526358aa2e483", "message": "[Fix #2400] Use PackageKit to enumerate packages (#3685)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/83f8a4e92c299509d20ef77dc1bd731cd52c8862", "message": "preferences: Report both Current Host and Any Host (#3681)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/862fb5764782ee463283e66f6e6fc712b3a292a6", "message": "[Fix #3140] Use IODeviceTree:/ for hardware fields (#3680)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/450ed6742208fdfa0a1e9bc842ac478bc573068f", "message": "watcher: Add more details to the utilization limits docs (#3677)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/49bb0ecc492c1c29cb699915a4d742cfe8a41ded", "message": "process: Aesthetic changes to process and process_ops (#3678)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/19930bfed3f3a768453b0f540e4101ca881f9640", "message": "logger: Reconfigure verbosity with logger_min_level (#3676)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/c1ad74cbe795ba84e5af41e49f094d37c2067a58", "message": "enroll: Add host_details to TLSEnrollPlugin (#3675)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/360d9fd5162b22f5866149151daa4a8b344cb8dd", "message": "cmake: Do not use target LOCATION property (#3674)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/c2bcc459d31f3ad66427a07b2687425e4cafe10c", "message": "[Fix #3466] Link shared object builds correctly (#3673)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/8dc4268761c8304a3fdab20f26f777b8cb86d3a8", "message": "kernel: Disable kernel support by default (#3672)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/e49119423855e85074038f0c374297dbfa624370", "message": "enroll: Fix bug in CMake that removed enroll tests (#3671)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/4d631edac61c057857b595ea28352502151f5b3c", "message": "rocksdb: Remove manual flush (#3663)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/061dfeecb268bd71b613b3ed978959a156105bf3", "message": "tests: Improve permissions tests as root (#3665)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/e83c1dc4b6e33dda3df9322d36a8b4142042c63c", "message": "packages: Fix debug info break from binary unification (#3662)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/e86470c96b2460b19b3f3fde52e1e395f76b887c", "message": "[Fix #3625] Use readlink and add test for listening_ports (#3661)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/16b40138feb0c4d2f8509bf80227f5fe4de77cd5", "message": "rocksdb: Flush all column families and set max files (#3638)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/205da3c69864df3c98293104343e3a7cd0c329bd", "message": "rocksdb: Implement a 'backup' and recover feature for RocksDB (#3635)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/ae12cf35d86e42516f26cefa23bc6e7e7dc7c221", "message": "bottles: boost cmake asio cpp-netlib rocksdb and libaptpkg (#3630)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/e748f38a06151e0269d48748c97edb227835bd88", "message": "deps: Finish removal of snappy and lz4 dependencies (#3618)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/f29de27649db683ae1ef0084d28aca8886737fc6", "message": "Combine osqueryi and osqueryd into single binary (#2742)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/15485e3eb013f755fc943c9a48851996929bf917", "message": "deps: Update cmake to version 3.9.1 (#3616)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/e4bbf0607453dec0cdf4a3bed43870c02cea902d", "message": "codemod: Refactor query functions out of database (#3615)"}], "pull_requests": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/4076", "title": "build: Reduce compile time by 20%", "body": "This is a roll up of refactors. It includes several reorganizations that lead to a 40k reduction in include file reads per-build (just core, not including tests).\r\n\r\nThis is accomplished through 3 significant changes:\r\n- The \"plugin\" structures and classes are separated from the \"registry\" factory.\r\n- Mutexes and locking are not in \"core\" includes anymore.\r\n- The \"table\" headers is greatly reduced, no longer including ptree or lexical casting.\r\n\r\nThe last part, removal of lexical casting, is substituted with the C++11 string-to-number literal methods. These can except but for the most part the lexical casting was not catching exceptions so I've chosen to keep the callsites as dangerous as I found them.\r\n\r\nI also noticed a lack of doube conversion need. This is concerning as I've seen a few columns use double-type values. Sooner rather than later we should work on preserving the value types for each type row.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/4074", "title": "packages: Install osqueryi as a symlink", "body": "The osquery shell is just a copy of `osqueryd` within the build directory. We are currently installing this copied binary into packages then onto the target host. This results is large packages.\r\n\r\nWe can use a symlink instead on POSIX systems.", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51880708", "body": "https://github.com/facebook/osquery/pull/44\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51880708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52349339", "body": "I'll suggest another vtable with the entire route table for the host. If there are routes with GWs then their MAC can be included too.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52349339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52349975", "body": "This is a complicated virtual table. Each browser (Firefox, Chrome, Safari) has WebApps, Extensions, and Plugins. WebApps may be native code, extensions are typically browser-JS-only and plugins are DEFINITELY native code. In each browser the definitions/storage/config for these is different. The table could include: browser, type, <extension_detail 0, 1, 2, 3, 4...> OR there could be a different table for each browser, or type for that matter?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52349975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52350975", "body": "Right, essentially the information provided by netstat.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52350975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/69861677", "body": "We can revisit a more-forensics use osquery for after-action/response needs. Collecting this information regularly is not recommended. \n\nUsing a master task of issues: https://github.com/facebook/osquery/issues/619\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/69861677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52349975", "body": "This is a complicated virtual table. Each browser (Firefox, Chrome, Safari) has WebApps, Extensions, and Plugins. WebApps may be native code, extensions are typically browser-JS-only and plugins are DEFINITELY native code. In each browser the definitions/storage/config for these is different. The table could include: browser, type, <extension_detail 0, 1, 2, 3, 4...> OR there could be a different table for each browser, or type for that matter?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52349975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/69861710", "body": "Using a master task of issues: https://github.com/facebook/osquery/issues/619\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/69861710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/69861730", "body": "Using a master task of issues: https://github.com/facebook/osquery/issues/619\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/69861730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/69861755", "body": "Using a master task of issues: https://github.com/facebook/osquery/issues/619\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/69861755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/69861774", "body": "Using a master task of issues: https://github.com/facebook/osquery/issues/619\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/69861774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52350975", "body": "Right, essentially the information provided by netstat.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52350975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52888026", "body": "Roger, will do, thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52888026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53012690", "body": "Changed networking.cpp/h to osquery/tables/networking/utils.cpp/h.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53012690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53012007", "body": "Are these files auto-generated? (nit) why are there spacing inconsistencies? \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53012007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53143997", "body": "These various casting errors are from the \".table\" casting. Changing >31bit number from type int to type std::string should fix them.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53143997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53144031", "body": "How about adding another column that specifies where each CA comes from? There are several locations of `.keychain` files on OSX (`/System/Library/Keychains, /Library/Keychains, ~/Library/Keychains`), and these are just search paths for the keychains. So installing a trusted CA should be identified by it's keychain name/path. And, given the nature of keychains you will only introspect into the running-as user. \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53144031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54101471", "body": "Simple double-type-description memory leak from (#87).\n\n```\n--4546-- ./build/tools/run:\n--4546-- dSYM directory is missing; consider using --dsymutil=yes\nCould not create logging file: No such file or directory\nCOULD NOT CREATE A LOGGINGFILE 20140901-183050.4546!I0901 18:30:50.981273 24085264 run.cpp:17] Executing: select * from nvram;\nI0901 18:30:52.554558 24085264 run.cpp:23] Query succedded\n==4546== \n==4546== HEAP SUMMARY:\n==4546==     in use at exit: 332,978 bytes in 1,350 blocks\n==4546==   total heap usage: 8,448 allocs, 7,098 frees, 1,816,071 bytes allocated\n==4546== \n==4546== 2,088 (16 direct, 2,072 indirect) bytes in 1 blocks are definitely lost in loss record 822 of 837\n==4546==    at 0x6DFB: malloc (in /usr/local/Cellar/valgrind/3.9.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)\n==4546==    by 0x16CDFE6: _nc_table_new (in /usr/lib/system/libsystem_notify.dylib)\n==4546==    by 0x16CDA78: __token_table_add_block_invoke (in /usr/lib/system/libsystem_notify.dylib)\n==4546==    by 0x144E28C: _dispatch_client_callout (in /usr/lib/system/libdispatch.dylib)\n==4546==    by 0x144E1FB: dispatch_once_f (in /usr/lib/system/libdispatch.dylib)\n==4546==    by 0x16CB8A6: token_table_add (in /usr/lib/system/libsystem_notify.dylib)\n==4546==    by 0x16CB6B2: notify_register_check (in /usr/lib/system/libsystem_notify.dylib)\n==4546==    by 0x152EA15: notify_register_tz (in /usr/lib/system/libsystem_c.dylib)\n==4546==    by 0x152E54A: tzsetwall_basic (in /usr/lib/system/libsystem_c.dylib)\n==4546==    by 0x152E707: _st_tzset_basic (in /usr/lib/system/libsystem_c.dylib)\n==4546==    by 0x152FD60: localtime_r (in /usr/lib/system/libsystem_c.dylib)\n==4546==    by 0x3D2E26: google::(anonymous namespace)::LogFileObject::Write(bool, long, char const*, int) (in /usr/local/Cellar/glog/0.3.3/lib/libglog.0.dylib)\n==4546== \n==4546== 2,242 (16 direct, 2,226 indirect) bytes in 1 blocks are definitely lost in loss record 825 of 837\n==4546==    at 0x6DFB: malloc (in /usr/local/Cellar/valgrind/3.9.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)\n==4546==    by 0x16CDFE6: _nc_table_new (in /usr/lib/system/libsystem_notify.dylib)\n==4546==    by 0x16CDA63: __token_table_add_block_invoke (in /usr/lib/system/libsystem_notify.dylib)\n==4546==    by 0x144E28C: _dispatch_client_callout (in /usr/lib/system/libdispatch.dylib)\n==4546==    by 0x144E1FB: dispatch_once_f (in /usr/lib/system/libdispatch.dylib)\n==4546==    by 0x16CB8A6: token_table_add (in /usr/lib/system/libsystem_notify.dylib)\n==4546==    by 0x16CB6B2: notify_register_check (in /usr/lib/system/libsystem_notify.dylib)\n==4546==    by 0x152EA15: notify_register_tz (in /usr/lib/system/libsystem_c.dylib)\n==4546==    by 0x152E54A: tzsetwall_basic (in /usr/lib/system/libsystem_c.dylib)\n==4546==    by 0x152E707: _st_tzset_basic (in /usr/lib/system/libsystem_c.dylib)\n==4546==    by 0x152FD60: localtime_r (in /usr/lib/system/libsystem_c.dylib)\n==4546==    by 0x3D2E26: google::(anonymous namespace)::LogFileObject::Write(bool, long, char const*, int) (in /usr/local/Cellar/glog/0.3.3/lib/libglog.0.dylib)\n==4546== \n==4546== LEAK SUMMARY:\n==4546==    definitely lost: 32 bytes in 2 blocks\n==4546==    indirectly lost: 8,256 bytes in 6 blocks\n==4546==      possibly lost: 0 bytes in 0 blocks\n==4546==    still reachable: 2,323 bytes in 10 blocks\n==4546==         suppressed: 322,367 bytes in 1,332 blocks\n==4546== Reachable blocks (those to which a pointer was found) are not shown.\n==4546== To see them, rerun with: --leak-check=full --show-leak-kinds=all\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54101471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54576613", "body": "Along with writing vtables, developers will write dispatch modules. These modules will be responsible for interacting with the OS API. They will be written OS-dependent and API-call dependent and may yield the example dispatch struct as described above to a queue. They may\" also apply logic and call subscribed vtables directly. \n\nA set of dispatch-event yielding entrypoints called by the OS API that produce the events to a queue along with a dispatch servicing thread that calls the subscribed vtables seems like the ideal setup. \n\nDispatchServiceThread:\n\n```\nevent = DispatchQueue.yield_event()\nif system_not_taxed\n  foreach subscriber in dispatch_subscribers[event.dispatch_type]\n    subscriber(event)\ndestroy(event)\n```\n\nSpawned EventCallbackThread:\n\n```\nevent = CreateEventLogic();\nevent.dispatch_type = MyDispatchType;\nDispatchQueue.add_event(event);\n```\n\nThe `DispatchServiceThread` might be several threads each servicing a separate priority `DispatchQueue`. There may also be separate `DispatchQueue`s for each `dispatch_type`, and parallelization is performed by `dispatch_type`. Parallelization by vtable may be possible with a wrapper function responsible for memory of the event. \n\nNow, there are very few userland OS event callback APIs that would compliment the query-time row generation tables existing today.\n\nWhat about events that exist only in kernel-land (aka syscalls)? \n\nOSQuery will need assistance from a kernel module/extension (module). This kernel module will act as the OS API mentioned above and generate information similar to the `EventCallbackThread`, but will act in tandem with a userland event entry point responsible for producing to the queue. This ensures safe memory copying and allows the kernel module to pass as little information as possible. The kernel module(s) may also be developed or maintained outside of OSQuery. \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54576613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55514466", "body": "Considering most of the use cases and discussions we've had, the event/dispatch framework will focus on the **Event** portion while leveraging a more-general **Dispatch** API that focuses on osquery concurrencies.\n\nAn **Event** will be identified by a _type_ e.g., FS, Network, Hardware, Syscall-_type_. The supported types are modular and should leverage the osquery plugin API. osquery will support core types but one may extend the types (or add additional types) without changing core functionality. Sounds general, high level, lofty and potentially the result of over engineering? It isn't!\n\nLet's consider osquery use, scale, and events simultaneously by considering how you respond to FS and Network events.\n\nFor the FS on OSX and Linux there are several event frameworks; Linux includes _inotify_ and _fanotify_, OSX has _FSEvents_. _inotify_ allows the caller to monitor a directory or file (an inode) for changes providing a cookie/context for high level changes like move. The monitoring is **NOT** applied recursively, if it was, then a find-seek-read of each inode would tax the hardware and cycles-time immensely. _fanotify_ can be applied recursively, but monitors for attribute changes before they are applied to the FS, it will not create events for moves and deletes. _FSEvents_ is wrought from magic and accomplishes both, very cool!\n\nFor most basic use cases of monitoring the FS in an event-style mode from an OS querying perspective, recursive monitoring is a must. A combination of _inotify_ and _fanotify_ is clutch; adding recursive logic to _inotify_ is trivial as long as exceptions are handled and basic recursive methods are managed alongside FS operational race-condition gotchas. BUT let's agree that recursively monitoring _a million_ directory inodes insane. Ok, so then a single requirement for an osquery table wanting to monitor `fs://`will drive the framework to a halt. \n\nNow let's consider basic uses cases for monitoring the network with one caveat, full pcap is out of scope. _libpcap_ and _BPF_ are the basis for sniffing packets and configuring the snooper. Three interesting tables may be \"all ARP packets parsed\", \"all TCP SYN packets logged\", and \"netflow\". The same scale issue from the FS monitoring exists: sessionizing TCP on a pegged 10G link or on an aggregation host is insane. \n\nNow where are we? At a simple requirement. Just like we can: NOT schedule inappropriate queries, and create profiles for acceptable query use on system, we should choose to NOT turn on inappropriate event monitoring. And just because monitoring an entire network fileserver's exported FS is insane, monitoring changes in `/etc` is still useful/desired. \n\nA general way of defining an **Event** in osquery language is a must. A general way of configuring event-_type_ monitoring and applying table logic to monitoring requirements is a must. And lastly, event types should have toggles to disable them completely. A kernel module/extension providing global syscall usage is very very optional. :wink: \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55514466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55514770", "body": "Architecture proposal v2:\n\nWe begin with an **EventType** interface and an **EventFactory** utility.\n\n```\nEventFactory {\n  create_event_type(EventTypeID type, &EventType);\n  add_monitor(EventTypeID type, Monitor monitor);\n  [...]  # house cleaning methods\n}\n\nEventType {\n  create_monitor(Monitor monitor);\n  static configure();\n  static set_up();\n  static tear_down();\n  [...]  # optional OSAPI event specific entrypoints, etc.\n  vector<Monitor> monitors;\n}\n```\n\nAlong with the event factory utility, each event serves as a _monitor factory_. Developers and osquery core will create most table specific event monitors that include event specific context details. These **MonitorContexts** allow the event to reconfigure, or change, what it monitors. For a highly taxed or otherwise large FS, the system owner disables the full FS monitor and related tables and the event framework is never configured to monitor the FS root. Great! For _inotify_ and _fanotify_ this quite directly means, not adding inode monitor sockets for `fs://`. For network capture, and a network capture-related limitation, this means applying a _BPF_ that is most-specific to the monitors requested. \n\nThe **Monitor** and **MonitorContext**\n\n```\nMonitor {\n  MonitorContext context;\n  bool (*callback) (EventID id, EventContext context, time);\n}\n\nMonitorContext {\n  #  purely an interface\n  #  configuration parameters specific to event\n}\n```\n\nRecap:\n1. An event type is created when osquery instantiates or as the result of a plugin load.\n2. Monitors are specific to an event type. They are subject to disabling/enabling via a configuration and may also be included in a plugin.\n3. When a monitor is added, the event type may choose to reconfigure.\n4. There is optional setup/tear down logic an event can rely on if reconfiguring doesn't make sense.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55514770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55514999", "body": "These **MonitorContext** and **EventType** creatures are very smart.\n\nWhen an event is generated by the **EventType** as the result of an OSAPI callback, a `select` returning, or a \"it really makes sense to poll on this, I promise\" loop, it is the event type's responsibility to alert the monitors. It is safe to assume each event type is doing this generation in a thread dedicated to the type or in a thread created as the result of an OSAPI \"callin\". \n\nWhat does \"alert the monitors\" mean? \n1. Assemble an **EventContext** with details related to the event that just happened.\n2. ...\n3. Call the function the **Monitor** included, which hopefully inserts data into a backing store.\n\nIn more detail:\nThe **EventType** must loop through the its monitors and call them within its own thread of execution or **Dispatch** them appropriately. The appropriateness is the responsibility of the event developer, assume most events will act on transient memory/application state where dispatching does not make sense. Conversely, the event type may choose to copy would-be transient memory and pass a `shared_ptr` to each dispatched monitor.\n\nBut we're not finished. Here's a question: the \"alerting the monitor\" may mean two things:\n1. Using information stored in the **MonitorContext** to evaluate the event against criterion that the monitor expects e.g., only file modifications in `/etc` or `fork` syscalls.\n2. Passing an **EventContext** to EVERY monitor and asking the monitor to apply it's criterion selfishly.\n\nMore clearly: since monitors can change the scale/scope of events the event type is generating, where does it make sense to apply filtering logic? Consider from the perspective of a monitor developer and the power of filtering logic in the form of a struct. And we may always choose are own adventure.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55514999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55515118", "body": "In summary:\n\nA **EventFactory** manages **EventTypes** that respond to **Monitor** requests by a **MonitorModule** [1] that use a **MonitorContext** to define what, and receive an **EventContext** upon an event happening; the context is augmented if needed then stored in **RocksDB** along with a time, index, and **MonitorModuleID**. A virtual table generator selects and returns data from the backing store at query time normally. \n\n[1] There's probably a better name than **MonitorModule**\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55515118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56111103", "body": "This basic framework (v2) is implemented with this PR: #147. \n\nWe're welcome to some suggestions for testing, PoC usage implementations!\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56111103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54581819", "body": "I'm not debugging, just saying \"good job\" to you :)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54581819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54601500", "body": "Na, 4.8.2, the error is because gcc on Linux uses stdlibc++ by default. \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54601500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54601597", "body": "and....\n\n```\n[ 98%] Built target results_tests\nmake[3]: Leaving directory `/mnt/hgfs/reed/git/github/osquery-linux/build'\n[100%] Built target daemon\nLinking CXX executable run\nmake[3]: Leaving directory `/mnt/hgfs/reed/git/github/osquery-linux/build'\n[100%] Built target run\nmake[2]: Leaving directory `/mnt/hgfs/reed/git/github/osquery-linux/build'\nmake[1]: Leaving directory `/mnt/hgfs/reed/git/github/osquery-linux/build'\nreed@win8-vm:~/git/github/osquery-linux$ ls build/osquery/osquery*\nbuild/osquery/osqueryd  build/osquery/osqueryi\nreed@win8-vm:~/git/github/osquery-linux$ \n```\n\nFinal deps:\n\n```\napt-get install build-essential cmake python-pip python-dev\npip install -r ./requirements.txt\ngit submodule update --init\napt-get install libboost1.55-all-dev libgflags-dev libgoogle-glog-dev libsnappy-dev libbz2-dev libreadline-dev\n```\n\nDiff coming tomorrow morning. :+1: \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54601597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54660734", "body": "Getting closer with the most recent commit. It can be merged, some things to note:\n1. The diff uses `./darwin` where appropriate. The most important change is in `./osquery/tables/system` which now includes platform-dependent subdirectories. There's optional logic cleanups in CMakeList.txt files for better platform-dependent source file globbing. Suggestion: move `./osquery/tables/generated` into the `./build` dir.\n2. The other tables directories do not yet include platform-specific directories.\n   \n   There is another bug:\n\n```\nreed@win8-vm:~/git/github/osquery-linux$ ./build/osquery/osqueryi\n[...]\nConnected to a transient in-memory database.\nUse \".open FILENAME\" to reopen on a persistent database.\nosquery> .tables\ntemp.fs    temp.hash\nosquery> \n*** Error in `./build/osquery/osqueryi': free(): invalid pointer: 0x0000000001ae50f8 ***\nAborted\nreed@win8-vm:~/git/github/osquery-linux$\n```\n\nBut now, to build on linux or osx:\n\n```\nmake -j5\nmake distclean\n# switch to alternate OS\nmake -j5\n```\n\nSuggestion (included in diff): the jobserver size should be specified on the command line instead of hardcoded to avoid annoying size warnings during build for single-core machines, such as my linux VM. :)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54660734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54690725", "body": "Example: \n\n```\nLinking CXX executable osqueryd\ncd /home/reed/git/github/osquery-linux/build/osquery && /usr/bin/cmake -E cmake_link_script CMakeFiles/daemon.dir/link.txt --verbose=1\nclang++       CMakeFiles/daemon.dir/main/daemon.cpp.o  -o osqueryd  -L/usr/local/lib -rdynamic libosquery.a devtools/libosquery_devtools.a -lreadline scheduler/libosquery_scheduler.a core/libosquery_core.a tables/libosquery_tables.a core/libosquery_core.a tables/libosquery_tables.a filesystem/libosquery_filesystem.a -lboost_program_options logger/libosquery_logger.a database/libosquery_database.a config/libosquery_config.a -lboost_filesystem -lgflags -lboost_system -lboost_thread ../third-party/gtest-1.7.0/libgtest.a -lpthread -lbz2 -lglog -lrocksdb -lsnappy -lz ../third-party/sqlite3/libosquery_sqlite.a -ldl -lpthread -Wl,-whole-archive tables/libosquery_tables.a -Wl,-no-whole-archive -Wl,-rpath,/usr/local/lib: \ntables/libosquery_tables.a(registry.cpp.o):(.bss+0x8): multiple definition of `osquery::tables::hash_table'\ntables/libosquery_tables.a(registry.cpp.o):(.bss+0x8): first defined here\ntables/libosquery_tables.a(registry.cpp.o): In function `osquery::tables::attachVirtualTables(sqlite3*)':\n/home/reed/git/github/osquery-linux/osquery/tables/registry.cpp:(.text+0x0): multiple definition of `osquery::tables::attachVirtualTables(sqlite3*)'\ntables/libosquery_tables.a(registry.cpp.o):/home/reed/git/github/osquery-linux/osquery/tables/registry.cpp:(.text+0x0): first defined here\ntables/libosquery_tables.a(registry.cpp.o):(.bss+0x0): multiple definition of `osquery::tables::fs_table'\ntables/libosquery_tables.a(registry.cpp.o):(.bss+0x0): first defined here\ntables/libosquery_tables.a(filesystem.cpp.o): In function `sqlite3_filesystem_create':\n/home/reed/git/github/osquery-linux/osquery/tables/manual/filesystem.cpp:(.text+0x0): multiple definition of `sqlite3_filesystem_create'\ntables/libosquery_tables.a(filesystem.cpp.o):/home/reed/git/github/osquery-linux/osquery/tables/manual/filesystem.cpp:(.text+0x0): first defined here\ntables/libosquery_tables.a(hash.cpp.o): In function `sqlite3_hash_create':\n/home/reed/git/github/osquery-linux/osquery/tables/manual/hash.cpp:(.text+0x0): multiple definition of `sqlite3_hash_create'\ntables/libosquery_tables.a(hash.cpp.o):/home/reed/git/github/osquery-linux/osquery/tables/manual/hash.cpp:(.text+0x0): first defined here\ntables/libosquery_tables.a(etc_hosts.cpp.o): In function `osquery::tables::parseEtcHostsContent(std::string const&)':\n/home/reed/git/github/osquery-linux/osquery/tables/networking/etc_hosts.cpp:(.text+0x73): undefined reference to `osquery::core::split(std::string const&, std::string const&)'\n/home/reed/git/github/osquery-linux/osquery/tables/networking/etc_hosts.cpp:(.text+0x157): undefined reference to `osquery::core::split(std::string const&)'\ntables/libosquery_tables.a(etc_hosts.cpp.o): In function `osquery::tables::genEtcHosts()':\n/home/reed/git/github/osquery-linux/osquery/tables/networking/etc_hosts.cpp:(.text+0x608): undefined reference to `osquery::fs::readFile(std::string const&, std::string&)'\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nmake[3]: *** [osquery/osqueryd] Error 1\nmake[3]: Leaving directory `/mnt/hgfs/reed/git/github/osquery-linux/build'\nmake[2]: *** [osquery/CMakeFiles/daemon.dir/all] Error 2\nmake[2]: Leaving directory `/mnt/hgfs/reed/git/github/osquery-linux/build'\nmake[1]: *** [all] Error 2\nmake[1]: Leaving directory `/mnt/hgfs/reed/git/github/osquery-linux/build'\nmake: *** [build] Error 2\nreed@win8-vm:~/git/github/osquery-linux$ \n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54690725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54691641", "body": "http://www.cmake.org/Wiki/CMake/Tutorials/Object_Library\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54691641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54696996", "body": "This is an example of a working implementation: https://github.com/facebook/osquery/commit/8a5b8ac473e94e4d4ce38cae281da67c55d65893\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54696996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54843665", "body": "Moving build process to something that can compile/link statically and dynamically https://github.com/facebook/osquery/pull/114\n\nThis will need a review to potentially move tables (or the core tables) out of the shared/linked lib.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54843665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57108193", "body": "Seeing some potentially-related CMake error output:\n\n```\n$ make build\nmkdir -p build\ncd build && cmake .. && make --no-print-directory test\n-- Boost version: 1.55.0\n-- Thrift version 0.9.1\n-- Found readline library\n-- Found RocksDB\n-- Found components for DL\nCMake Warning (dev) at osquery/CMakeLists.txt:226 (ADD_CUSTOM_TARGET):\n  Policy CMP0037 is not set: Target names should not be reserved and should\n  match a validity pattern.  Run \"cmake --help-policy CMP0037\" for policy\n  details.  Use the cmake_policy command to set the policy and suppress this\n  warning.\n\n  The target name \"package\" is reserved or not valid for certain CMake\n  features, such as generator expressions, and may result in undefined\n  behavior.\nThis warning is for project developers.  Use -Wno-dev to suppress it.\n$ cmake --version\ncmake version 3.0.2\n\nCMake suite maintained and supported by Kitware (kitware.com/cmake).\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57108193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57185440", "body": "This is NOT the same CMake issue that was fixed by upgrading to >3.0. Should we add an ignore for this policy CMP0037?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57185440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57227505", "body": "Can CMake introspect on it's version before it adds an ignore line? Or are the ignores and \"that sort of stuff\" prescanned by CMake? If there's no way to check the version and ignore if the policy doesn't exist, or tell CMake to \"ignore\" unknown policy ignores then keeping the warning to support Travis and \"only be a warning = more text output\" for developers works.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57227505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54877681", "body": "What version of CMake?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54877681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54894735", "body": "CMake version >2.8.8 is required to support the OBJECT library keyword.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54894735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54920948", "body": "Honestly, I just love that pic\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54920948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54926232", "body": "https://github.com/facebook/osquery/commit/80ac7297320ed980e97f56d6505da675944809dd\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54926232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54925583", "body": "Good reference for potential additional columns: https://gitorious.org/procps/procps/source/eae9b671c034e3ab112c805f421a12db767e6a86:proc/readproc.h\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54925583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56421424", "body": "As a closet grep -r'er I support moving the generated to build. Practically, it'll prevent folks from accidentally submitting diffs/reviews/commits, help code-indexing, and generally be more intuitive. \n\n+1 In support of moving them to build.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56421424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56686090", "body": "I ran into the issue again last night, a seg fault when creating any DB instance. I'll investigate more later, but it's safe to say this is way edge.\n\nSent from my Android\n\n> On Sep 24, 2014, at 2:09 AM, Mike Arpaia notifications@github.com wrote:\n> \n> This was fixed in the PR to statically link RocksDB I believe.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56686090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56733175", "body": "`EventFactory` and each `EventModule` use the same flow and should be ported too.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56733175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56740540", "body": "I'm not sure what you mean? Are WiFi creds stored in the NVRAM on OSX?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56740540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56767554", "body": "Interesting, the variables are populated via an IOKit API call. It could be as simple as an overlooked secondary API or they are specifically blocked for normal incantations.\n\nSent from my Android\n\n> On Sep 24, 2014, at 6:46 PM, Mike Arpaia notifications@github.com wrote:\n> \n> I showed osquery to a guy from apple today and he commented that WiFI creds are stored in NVRAM, which is how you can access them from recovery mode. We ran a query against the NVRAM table and they weren't there.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56767554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56916413", "body": "![thefuck](https://cloud.githubusercontent.com/assets/981645/4415659/0a72cb70-4530-11e4-8c34-8b0f575d5c7c.png)\n\nBeautiful! \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56916413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57003361", "body": "On every commit? Is this a thing projects normally do? Can it be limited to tag?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57003361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57004220", "body": "This data is in the \"NVRAM\" that's queryable using the nvram tool on OSX. We'll eventually write tools to dump all of the low-level information on OSX which will include SMC and potentially the WiFi creds. \n\nTL;DR this is not a bug.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57004220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57065353", "body": "This (#174) doesn't include process IDs, but that'll take A LOT of code and thought. ;)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57065353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57065513", "body": "Yeah good question/though. For Linux specifically we have two userland options: DTrace, LTTng. DTrace is ported second-handedly from the Sun/BSD DTrace and includes a specific license that taints the kernel when you modprobe, so lack of support/use + jank edge cases make this a poor solution. LTTng is unique to Linux, not used very much, but in my experience very light and robust. \n\nWe have a third non-trival option, write a trampoline-style hooking architecture/API as a kernel module specifically for osquery. @astanway, what do you think about us all writing a kernel module? And then duplicating the functionality on OSX too?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57065513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57093267", "body": "Kernel modules needs to be implemented: https://github.com/facebook/osquery/blob/master/osquery/tables/system/linux/kernel_modules.cpp\n\nWhat's the issue with processes?\n\nSent from my Android\n\n> On Sep 28, 2014, at 3:13 AM, Mike Arpaia notifications@github.com wrote:\n> \n> Needs triage. @theopolis have you noticed this?\n> \n> osquery> select \\* from kernel_modules;\n> osquery> select \\* from processes limit 5;\n> \n> +--------------+------------+------------+-----+---------+---------------+----------------+-----------+-------------+------------+--------+\n> | name         | path       | cmdline    | pid | on_disk | resident_size | phys_footprint | user_time | system_time | start_time | parent |\n> +--------------+------------+------------+-----+---------+---------------+----------------+-----------+-------------+------------+--------+\n> | init         | /sbin/init | /sbin/init | 1   | 1       | 2940          | 33636          | 40        | 74          | 4          | 0      |\n> | kthreadd     |            |            | 2   | -1      | 0             | 0              | 0         | 0           | 4          | 0      |\n> | ksoftirqd/0  |            |            | 3   | -1      | 0             | 0              | 0         | 16          | 9          | 2      |\n> | kworker/0:0  |            |            | 4   | -1      | 0             | 0              | 0         | 0           | 9          | 2      |\n> | kworker/0:0H |            |            | 5   | -1      | 0             | 0              | 0         | 0           | 9          | 2      |\n> +--------------+------------+------------+-----+---------+---------------+----------------+-----------+-------------+------------+--------+\n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57093267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57096453", "body": "For `DBHandle` the destructor is deleting DB instances, handles. Is there ever an instance during the application run where this is needed? If so it should be in some sort of method facility. Using a singleton flow the `~` shouldn't do anything.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57096453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57107954", "body": "After talking with @marpaia it seems like the `DBHandle` concept isn't complete. The vision is to manage multiple (optimized) DB handles. Perhaps a DBHandleFactory class should exist that allows the caller to specify how they'd like their handle to exist (lifetime of app, lifetime of callers, or within scope). The Factory will exist as a singleton (lifetime of app) and facilitate the safety around accessing handles and instances. \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57107954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57108193", "body": "Seeing some potentially-related CMake error output:\n\n```\n$ make build\nmkdir -p build\ncd build && cmake .. && make --no-print-directory test\n-- Boost version: 1.55.0\n-- Thrift version 0.9.1\n-- Found readline library\n-- Found RocksDB\n-- Found components for DL\nCMake Warning (dev) at osquery/CMakeLists.txt:226 (ADD_CUSTOM_TARGET):\n  Policy CMP0037 is not set: Target names should not be reserved and should\n  match a validity pattern.  Run \"cmake --help-policy CMP0037\" for policy\n  details.  Use the cmake_policy command to set the policy and suppress this\n  warning.\n\n  The target name \"package\" is reserved or not valid for certain CMake\n  features, such as generator expressions, and may result in undefined\n  behavior.\nThis warning is for project developers.  Use -Wno-dev to suppress it.\n$ cmake --version\ncmake version 3.0.2\n\nCMake suite maintained and supported by Kitware (kitware.com/cmake).\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57108193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57185440", "body": "This is NOT the same CMake issue that was fixed by upgrading to >3.0. Should we add an ignore for this policy CMP0037?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57185440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55518672", "body": "Notes: the tar.gz and 1.9.{1,2} and master are not working on Ubuntu 12.04. There are various complaints in the aclocal, autoconf, autoheader build/configure process. \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55518672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55519022", "body": "I'm sure I can get it to build, but it would be nice if we could lean on someone to get a deb into a ppa or universe/multiverse.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55519022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55519121", "body": "Confirmed fails with automake < 1.12, setting Ubuntu's min-dist = trusty solves the problem. :+1: \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55519121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56733175", "body": "`EventFactory` and each `EventModule` use the same flow and should be ported too.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56733175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57096453", "body": "For `DBHandle` the destructor is deleting DB instances, handles. Is there ever an instance during the application run where this is needed? If so it should be in some sort of method facility. Using a singleton flow the `~` shouldn't do anything.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57096453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57107954", "body": "After talking with @marpaia it seems like the `DBHandle` concept isn't complete. The vision is to manage multiple (optimized) DB handles. Perhaps a DBHandleFactory class should exist that allows the caller to specify how they'd like their handle to exist (lifetime of app, lifetime of callers, or within scope). The Factory will exist as a singleton (lifetime of app) and facilitate the safety around accessing handles and instances. \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57107954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57674419", "body": "The next step here is considering Config, Logger and EventModule/EventType(s).\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57674419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55840907", "body": "Consider NOT installing librocksdb during make, maybe to a relative libs directory instead of /usr/local/lib.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55840907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56079567", "body": "What do you think of using something friendlier than ints, a string, to identify the event type. It looks cleaner, reads clearer, and avoids additional register/deregister macros.\n\nDocblocks will come with the async and the example usage. I'm not convinced the API is whole yet. \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56079567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56110395", "body": "The EventFactory class can now be accessed completely statically. During the few callsites that will use the factory this enforces the global-state affect types and monitors will have on osquery.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56110395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56345227", "body": "The INotifyEventType is not feature complete as there's no EventModule using it. Also note, there's an empty FSEvents Event Type.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56345227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56421424", "body": "As a closet grep -r'er I support moving the generated to build. Practically, it'll prevent folks from accidentally submitting diffs/reviews/commits, help code-indexing, and generally be more intuitive. \n\n+1 In support of moving them to build.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56421424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56686090", "body": "I ran into the issue again last night, a seg fault when creating any DB instance. I'll investigate more later, but it's safe to say this is way edge.\n\nSent from my Android\n\n> On Sep 24, 2014, at 2:09 AM, Mike Arpaia notifications@github.com wrote:\n> \n> This was fixed in the PR to statically link RocksDB I believe.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56686090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/69684760", "body": "I just had a read of that article and I don't this it's the droids we're looking for. :)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/69684760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56740540", "body": "I'm not sure what you mean? Are WiFi creds stored in the NVRAM on OSX?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56740540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56767554", "body": "Interesting, the variables are populated via an IOKit API call. It could be as simple as an overlooked secondary API or they are specifically blocked for normal incantations.\n\nSent from my Android\n\n> On Sep 24, 2014, at 6:46 PM, Mike Arpaia notifications@github.com wrote:\n> \n> I showed osquery to a guy from apple today and he commented that WiFI creds are stored in NVRAM, which is how you can access them from recovery mode. We ran a query against the NVRAM table and they weren't there.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56767554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57004220", "body": "This data is in the \"NVRAM\" that's queryable using the nvram tool on OSX. We'll eventually write tools to dump all of the low-level information on OSX which will include SMC and potentially the WiFi creds. \n\nTL;DR this is not a bug.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57004220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/facebook/osquery/comments/7375763", "body": "In the API it looks like this will throw an exception on non-valid JSON. Add a [isValidJSONObject](https://developer.apple.com/library/ios/documentation/foundation/reference/nsjsonserialization_class/Reference/Reference.html#//apple_ref/occ/clm/NSJSONSerialization/isValidJSONObject:) call before?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7375763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/7393388", "body": "For loop is useless if this fails, works though.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7393388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/7393428", "body": "Is there a way to \"discover\" this list of services at querytime?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7393428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/7397506", "body": "Nit, iterator variable name could be more descriptive.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7397506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/7397519", "body": "This list _might_ be important later, can it be more accessible? How about kHomeDirSearchPaths ;)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7397519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/7397542", "body": "From every app bundle and then Info.plist I've seen this will work. Just wondering if there's some documentation from Apple confirming this? \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7397542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/7409263", "body": "Nit, should there be a NL here?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7409263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/7409274", "body": "Nit, can this location (/Library/LaunchAgents) be somewhere easier to audit/change?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7409274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/7684573", "body": "This outcome is something like:\n\n```\nreed@win8-vm:~/git/github/osquery-linux$ ls -l ./build/osquery/\ntotal 5\ndrwxr-xr-x 1 329559041 1876110778      306 Sep  5 17:33 CMakeFiles\n-rw-r--r-- 1 329559041 1876110778     2805 Sep  5 17:25 cmake_install.cmake\ndrwxr-xr-x 1 329559041 1876110778      238 Sep  5 17:33 config\ndrwxr-xr-x 1 329559041 1876110778      204 Sep  5 17:33 core\n-rw-r--r-- 1 329559041 1876110778      460 Sep  5 17:25 CTestTestfile.cmake\ndrwxr-xr-x 1 329559041 1876110778      204 Sep  5 17:33 database\ndrwxr-xr-x 1 329559041 1876110778      238 Sep  5 17:33 devtools\ndrwxr-xr-x 1 329559041 1876110778      204 Sep  5 17:33 examples\ndrwxr-xr-x 1 329559041 1876110778      238 Sep  5 17:33 filesystem\n-rw-r--r-- 1 329559041 1876110778     3078 Sep  5 17:26 libosquery.a\n-rw-r--r-- 1 329559041 1876110778 12490976 Sep  5 17:33 libosquery_sparse.a\ndrwxr-xr-x 1 329559041 1876110778      204 Sep  5 17:33 logger\n-rw-r--r-- 1 329559041 1876110778    11203 Sep  5 17:25 Makefile\n-rwxr-xr-x 1 329559041 1876110778  4308050 Sep  5 17:33 osqueryd\n-rwxr-xr-x 1 329559041 1876110778  4284756 Sep  5 17:33 osqueryi\ndrwxr-xr-x 1 329559041 1876110778      204 Sep  5 17:33 scheduler\ndrwxr-xr-x 1 329559041 1876110778      204 Sep  5 17:33 tables\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7684573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/7709546", "body": "The darwin `processes.cpp` needs to be updated too.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7709546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/7883961", "body": "unwind? ![notsureaboutthisone](https://cloud.githubusercontent.com/assets/981645/4367311/66ee67d8-42d3-11e4-8952-b0f44be0a4a8.gif)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7883961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/7964940", "body": "Interested in comments on this workflow (removing the TestPath within main), as a cleanup.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7964940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/7964961", "body": "This is moved to a `destroy` method that is never called. It COULD be called as a cleanup when the daemon or shell is exiting. I'd imagine if the app is managing multiple `DBHandle` instances then a \"recycle\" or similar convention could be used. \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7964961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8283167", "body": "Think it's worth `trim`ing the beginning/end of each `split` line?\n\n```\n _launchservicesd:*:239:239:_launchservicesd:/var/empty:/usr/bin/false                               \n```\n\nCan you sense the whitespace?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8283167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8302107", "body": "Here's a small change that should work nicely with both systems. `view.column`, `table.column`\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8302107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8355976", "body": "Solid, but, osquery should avoid \"shelling out\" to commands and parsing the stdout/stderr. Is it possible to parse the information using net-related OS X C/C++ APIs? The Linux implementation that uses `/proc` is awesome!\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8355976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8399206", "body": "Where are the release, source, and size columns?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8399206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8399207", "body": "If these error logs are no longer needed, just nix the code instead of commenting it out. :)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8399207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8608958", "body": "Why compare to 1? `if (exists.ok()) {` is super clear.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8608958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8608963", "body": "Can a brother get clear/concise flag names? `pidfile` is a file with a pid in it!\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8608963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8608984", "body": "We're using boost lexical cast for all the tables, is there a reason we're not here? I think `stoi` is really simple, should we opt for simplicity over consistency? \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8608984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8609006", "body": "Didn't know you could do this, very useful!\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8609006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8609020", "body": "Do we really need an INFO here? This is expected/normal behavior with no actionable information. Maybe debug at best?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8609020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8609192", "body": "We do lexical cast to ints or long long ints in the generate tables. :)\n\nEither way, stoi does look pretty.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8609192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8792181", "body": "Definitely, thanks for catching this!\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8792181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/9061638", "body": "This code is getting a bit stale. :( Any plans on completing FreeBSD implementations? Is there anything we can do to improve or help out? \n\nI'm thinking we can add a FreeBSD build slave to Jenkins and try to recruit 1 or 2 more FreeBSD developers. But if we'll need someone to take point on support, which @marpaia or myself cannot do right now unfortunately. \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/9061638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/9079696", "body": "Awesome! Thanks @lwhsu, looking forward to more FreeBSD support. I'll work on getting a build slave shortly.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/9079696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/9527208", "body": "Use your setup and a mkdir to make something in /tmp that matches.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/9527208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/9527210", "body": "Same with above, do NOT use / in unittests please!\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/9527210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/9527285", "body": "I don't think touching /tmp in tests is janky. We touch is all sorts and must touch it for rocksDB testing. I like testing double here, use /tmp instead of removing please :+1: \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/9527285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/9614240", "body": "If the original constants aren't used to create the directory structure you can rm them: https://github.com/facebook/osquery/blob/f9d310a6c4d55b2eac61859aea4db293f7927186/osquery/filesystem/filesystem_tests.cpp#L29-L31\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/9614240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/12032529", "body": "Last two nits: `char weekday[10] = {0};`\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/12032529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/12032533", "body": "And: `char iso_8601[21] = {0};`\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/12032533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/12240352", "body": "In #1356: @mcarpenter, looks like this was my mistake when I tried (failed) at refactoring this code. \n\nIt should be an easy fix to change this back to nul delimiting.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/12240352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/13967343", "body": "I don't think this is a fix. Just remove the \"(BE CAREFUL)\" if that is causing an unescaped error. \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/13967343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/16527619", "body": "This should use a `UNION` instead of an `OR`. The next release (with SQLite 3.12.0) will support `OR`. :D\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/16527619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/17945207", "body": "@fuzzball5000, we missed the fact that you changed the permissions on this file. :'( I filed #2176 to make sure that doesn't happen again, but currently this breaks `make package`.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/17945207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/18018819", "body": "@artemdinaburg you should add indents here.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/18018819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/18018821", "body": "Please remember to indent if wrapping existing code in conditional logic.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/18018821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/18018823", "body": "@artemdinaburg, this isn't very helpful. If adding a `TODO` please include an issue.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/18018823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/18070885", "body": "This move of `.spec` files causes the query profiling to miss all POSIX-tables, meaning the release/regression tests will silently say everything's OK even if there's a fault/exception in a table. We will need to update `./tools/profile.py` to handle this refactor.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/18070885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/18293058", "body": "This is for newer kernels, 4.0+ (a config option I believe, may be available earlier).\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/18293058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/19512821", "body": "I'm trying to track down a regression in the TLS logger resulting in POST requests being interpreted as GETs. Flagging this as a potential root cause.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/19512821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/19626612", "body": "Fixed a typo, made a typo ;)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/19626612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/22298694", "body": "Do not do this! Declare the symbols in the header, but place the constructor/assignment use in an implementation file.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/22298694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/22298726", "body": "Why?", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/22298726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/22298727", "body": "Why?", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/22298727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/23783282", "body": "w.r.t #3584, this may be the source. If one required message for `socket_events` is dropped then no rows will be populated.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/23783282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/26382640", "body": "We do, but it's on a non-blocking build in Jenkins, so we find it after the fact :P", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/26382640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16215222", "body": "If Apple decides to add additional (string)proc/(int)state pairs for new applications will this table change? Not sure about SQLite's best practices or your goal here, but wouldn't a alf_service table (name, proc, state) pair be easier to extend?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16215222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16431019", "body": "The forward declare allows the proceeding global map to reference the prototype from the pair typedef. The definition/declaration could be combined and moved before the map but it would look dirty.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16431019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18363638", "body": "Not sure what you mean by space widths?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18363638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18363681", "body": "Private works for anyone, `/tmp` should be a symlink to `/private/tmp`\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18363681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18363764", "body": "Definitely needs testing, the API assures you that control of the context param is handled by the FSEventStream, nothing about the paths lists from what I can see.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18363764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19699386", "body": "I would suggest removing iface from either and then joining using the `interface_details` table if you want interface information (like the name) using `mac`. \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19699386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19699423", "body": "`sscanf` I couldn't tell you off the top of my head why/if this is scary. But we've been using boost's string manipulation libs for most stuff already. If you prefer a `split` then grabbing the ip/mac by index of the split it could be a cleaner read.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19699423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19699450", "body": "Check out: https://github.com/facebook/osquery/blob/master/osquery/tables/networking/utils.cpp#L88 for a mac address representation.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19699450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20207326", "body": "I want all the errors swallowed! But really there's only a possibility of an invalid read or unhanded formatting of the blacklist. For both the function should call foul and pass.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20207326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20207356", "body": "I'm up for that, after a cursory look it wasn't obvious how that would work.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20207356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20484631", "body": "When does this cause an exception?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20484631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20407724", "body": "I like using `__FreeBSD__`, but a just as a note, I'd like recommendations on a standard osquery OS/DISTRO determination name scheme throughout python (gen___.py), bash (provision.sh), CMake, and C/C++. Right now you can use APPLE/LINUX/CENTOS/UBUNTU/FREEBSD in both CMake and C/C++. In C/C++ the output from lib.sh's OS and DISTRO are defined by CMake. We should set a DARWIN to be consistent on Apple/OSX.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20407724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20407729", "body": "Is this file not included/working right now?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20407729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20407732", "body": "Does this CMake list \"osquery_tables_freebsd\" exist yet?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20407732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20407747", "body": "Is there a minimum version for this command? If it fails (or is not included in the distro) do we not care if osquery builds? Most likely not, right?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20407747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "reedloden": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/4042", "title": "Add additional OS X malware/adware from EtreCheck", "body": "https://github.com/etresoft/EtreCheck has a pretty long list of OS X malware/adware, and I don't think `osx-attacks.conf` covers it all. Should see what needs to be added.\r\n\r\nhttps://github.com/etresoft/EtreCheck/blob/master/EtreCheck/adware.plist", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/4042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/4041", "title": "Add unwanted Safari extensions pack", "body": "Similar to https://github.com/facebook/osquery/blob/master/packs/unwanted-chrome-extensions.conf, should have an `unwanted-safari-extensions.conf`.\r\n\r\nGood starting place:\r\nhttps://github.com/etresoft/EtreCheck/blob/0f66005ad3b16981eadf00d5841982e8494d8d32/EtreCheck/adware.plist#L5-L19", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/4041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/6b6723110f2e3129df63e809075ede6a3c100f51", "message": "tables: Add linux shadow table (#3902)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/osquery/comments/26351990", "body": "Yikes. Can we have a linter that checks for valid SQL format?", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/26351990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "NickTitle": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/4030", "title": "Include HMAC of each added/removed row's content in diff q logs?", "body": "We are using diff q logs to keep track of device state over time in a data store. In my implementation, I decorate result rows with hashes so that it's simple to upsert/update/delete without searching for rows that match these +/- logs to add/delete.\r\n\r\nAdditionally, this hash serves as decent primitive lookup key, rather than querying by the whole set of matching fields. For example, if you see a rogue process disappear in result logs for a process query, you can use the same hash to look back when it was added.\r\n\r\nDo you think it would be useful to include this in the logs themselves?", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/4030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rodionos": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/4026", "title": "Identify Linux servers that require Spectre/Meltdown upgrade", "body": "Service Providers started releasing [notes](https://wiki.hetzner.de/index.php/Spectre_and_Meltdown/en) on Spectre and Meltdown issues. \r\n\r\nIt's early in the process, however is there a way using osquery to check if these attacks have taken place?\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/4026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "muffins": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3996", "title": "tests: Integration and unit tests for Windows Event Log plugin", "body": "#3887 brings the capability for osquery to log directly to the Windows Event Log. This capability is pretty neat, but it living in core requires we build out testing around this capability for stability of the core platform. Let's use this issue to track building out both integration and unit tests around this capability. ", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3959", "title": "windows: provisioning still fails if multiple Python installations exist", "body": "our provisioning scripting has issues if Python either already exists on the system, or is not present in the default path. The attempt to install python is fine but adding to our system path is failing.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3954", "title": "extensions: Windows extensions either go away or do not start from cold boot", "body": "There seems to be some stability issues around Windows C++ extensions. We've seen first hand that extensions seem to \"disappear\", and go away after starting properly. Further, it was mentioned in the #windows slack that it seems that extensions _might_ be failing to start alongside the Windows service from Cold Boot.\r\n\r\nLet's use this issue to track robustness and stability issues around osquery extensions on Windows to ensure this feature is robustly supported, and not causing issues.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3890", "title": "tables: PE Header Metadata table", "body": "Virtual Table to parse out PE and Rich Header metadata information.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3890/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3797", "title": "docs: formal documentation of the file carving capability", "body": "Now that the file carver is a little more stable, and an integral part of osquery, we need a bit of documentation around it's use and how to setup and best utilize it.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3668", "title": "tables: extend user_groups table to windows", "body": "we have the `user_groups` table on posix, but we need to extend this table to Windows.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3627", "title": "tables: Extend `startup_items` table logic to Linux", "body": "Currently this is just a stub table, but it'd be super nice to have the logic extend to pull some generic Linux startup item locations. Either that or let's assess the value of having the table exist in it's current form on linux, which is just a stub table.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3394", "title": "windows: PR #3384 Follow Up", "body": "PR #3384 addressed a few issues with how Windows deals with random numbers used for our thrift extension sockets. I'm not 100% pleased with this approach however, as it brings in seeding random immediately before use as `srand` isn't a thread safe function on Windows. A more potentially correct method here might be making use of `rand_s` from the Windows Crypto APIs, however this might be _too_ heavy lifting.\r\n\r\nOf higher concern is how Windows deals with `pid_t` values. A `pid` on Windows is a `DWORD`, which is just `#defined` to be an `unsigned int`. We're _attempting_ to join this with the posix concept of an `int`, which is capable of being in the range of `[-1,INT_MAX)`.  This leaves us with `[INT_MAX, UINT_MAX)` worth of `pid` values that could potentially super-duper-break things in the event that a `pid` value on Windows is greater than `INT_MAX`.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3326", "title": "windows: Extended crashes table to Windows", "body": "It would be nice if the posix `crashes` table was extended to support Windows crash dumps as well.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/2939", "title": "tests: Add integration test for Windows event log pub/sub", "body": "This issue will rely on us getting integration tests up for Windows. Once that's complete it'd be nice if we had a full integration test that would write an event to the Windows event log, and then verify that we get that event fully parsed in the subscriber table `winndows_events`", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/2845", "title": "windows: refactor process_open_ports virtual table", "body": "The current implementation of the `process_open_ports` virtual table on Windows contains quite a bit of code duplication. The functionality should be abstracted and templated so as to avoid the code duplication, and hopefully achieve a better implementation.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/2791", "title": "windows: Update processes table to contain s{u,g}id, and e{u,g}id values", "body": "Now that the Users table is populating the `uid` and `gid` values, let's pull these into the processes table.\r\n\r\nWe'll need to pull in the `euid` and `suid` values for each process. This data should be attainable from polling the current running Token.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/2568", "title": "deployment/documentation: Write up example Chef/Puppet deployment recipes", "body": "At Facebook, we use Chef for our internal deployments of osquery. Let's whip up some good example Chef Recipe scripts that should help get people started on deployment of osquery to their organizations. Additionally, a few folks in the slack have made mention that the current [Puppet module](https://github.com/BIAndrews/puppet-osquery) is some what dated. Let's take some time to get this up and running to.\r\n\r\nTo approach this issue, you'll likely want to roll out a few virtual machines and setup either a Chef or a Puppet server, and then test developing the Chef/Puppet scripts used to install, configure, and maintain osquery on said virtual machines.\r\n\r\nPing @poppyseedplehzr (or thor in the slack) for any details or questions!\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/2567", "title": "windows: process_events and file_events", "body": "We need to get `process_events` and `file_events` ported over to Windows. As a start let's get the subscriber/tables implemented so we can turn back on some of our tests, [as discussed in this thread](https://github.com/facebook/osquery/pull/2563).\n\nGoing forward we'll need to get the publishers online and functional.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2567/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/2495", "title": "windows: Anti-Virus application logs virtual table", "body": "Our analysts are hoping that we can make use of osquery to parse some Anti-Virus application logs for hits, misses, or just any useful data. This might make a good generic table if we can find a uniform way for the application logs to be parsed, however I'm doubting they'll all be that uniform. We may still be able to extract some similar characteristics for various vendors.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/1943", "title": "Adding event subscriber for Application Usage Times, looking for comments about NSWorkspace Observers", "body": "I've been working with @theopolis on adding a subscriber to application event feed data in OS X, however we've been having trouble figuring out how to get observer methods subscribed to the NSWorkspace notification center in objective c++. I through this question out in the slack and  @arubdesu mentioned that @russellhancox may possibly have some ideas?\n\nThe initial commit of the [fork is here](https://github.com/PoppySeedPlehzr/osquery/commit/583251ce82f93e84b1d7e3638fb747b7eaf5f826) \n\nAnother note, most of what we've currently got has been an attempt to mimic how the crankd script is registering observers for application events, but we can't seem to get it working as they did.\n\nAny suggestions would be much appreciated :smile: \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/1943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/d73222326f41f83092aee186ff06b93f7f800f3a", "message": "tables: updating row description for kva_speculative_info (#4044)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/21b257beb6842a0befffe5a76ac56f6d19fda69a", "message": "deps: Updating windows to boost 1.66.0 (#4031)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/85133d8ad0da5bbe9e36e292ec151019a6d84707", "message": "tables: adding windows table for KVA and speculative exec info (#4027)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/1dd6e1e6939b4b5123fff061f5819ee7cf847beb", "message": "ux: adding verbosity if osquery fails to read system uuid (#3989)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/9726d41c7cbf73a974657b3ef9646b9ec059310e", "message": "build: adding helper function to add paths to SYSTEM path (#3986)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/6d576e93d81e29f51466eb74263d76794ffc17e5", "message": "events: removing newline from windows event log lines (#3985)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/1097827ca26918262eccb176fdfe3751058d9c60", "message": "daemon: set service status to SERVICE_STOPPED on exit (#3973)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/61c404efdd2ed53bb10cb2d482d5d39e01fc3376", "message": "[Fix #3964] Returning exit code in powershell build script (#3972)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/6068d610684b37f92b13ea3197e7d0efa0b42080", "message": "tables: adding intel_me_info virtual table on Windows (#3960)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/1239c8ccc5b10a13922916ce80f8b1066c837963", "message": "tables: expanding windows programs table to encompass apps without GUID (#3945)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/3d7f7cf0378acc6be830fa2e5d54b260ee188d41", "message": "tables: adding type column to users table to differentiate local users (#3946)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/cb401f9dedc92ce211271e3f09ee9ec7aab0b227", "message": "tables: adding certificate store to the cert path for Windows table (#3947)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/ec2fc1a0c1d6b7bba4efa30bc8b98d7f2cfb5be6", "message": "deployment: allowing for extra files to be bundled (#3936)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/582f638706b4fe5b95323d3e57ca8ad6f9f69cc6", "message": "deploy: allowing for MSI packages to upgrade previous installers (#3927)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/e43cb5f6fb2660773f8724a00db65d7ef6722d57", "message": "packs: fixing malformed win attack pack (#3928)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/f7fe7861e2c737bf9f8f6e8b2add4fdbbff23f15", "message": "docs: Adding details on installing osquery on Windows as a service (#3705)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/da5106f78c3182e88e9fb0e4bc7c09e234ffc667", "message": "packs: updating query versions in windows attack packs (#3926)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/573cf5fc113cf0e38e8a63767627998c67b51a19", "message": "tables: porting the ssl cert to Windows (#3894)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/b1355c44416604e1523b4af588b81c4f8fd9dc5b", "message": "tables: Adding a Named Pipes table for Windows (#3893)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/04225dd7db4c2a774345f45fdc066ec01b7bf575", "message": "build: installing Windows 10 SDK during provisioning (#3866)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/45bafdbe51161591dad6f93c24fadc7f0502217c", "message": "tables: adding windows physical disk perfmon table (#3865)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/4bac1d67f53a52e5b7bdb033a2bbdf6dfd0bbecd", "message": "[Fix #3861] build: adding checks to vswhere usage to find msbuild tools (#3864)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/3a37ece9f122fe8a7bb0d79b7ef3a5995010a21c", "message": "build: removing excess verbosity from powershell build script (#3854)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/40af17ec41db12669cc113bf4aa7ea4080fcf6b1", "message": "[Fix #3567] Adding powershell build script to handle multiple VS installs (#3852)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/ef25873f9284da1d654fd894fba8833e11af740c", "message": "provision: Python path sometimes not getting set on Windows (#3844)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/80d41ff7685bb4a46c054122c0611b0b50a70ccf", "message": "filesystem: allowing currently executing user to own binary (#3835)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/c494bc56ae45e4a92d6fc089c6c00588a916b848", "message": "windows: relax \"safe\" permissions for binary execution (#3727)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/b4380854c9df64301c62dfc628f24645152dd0c3", "message": "website: removing offending character for site build (#3822)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/7b321cef60dc6ea0c0e202baccb35c2d0cef184e", "message": "[Fix #3756] Fixing windows hashes table (#3798)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/0c2fc6583ebf6ea622c6e65be1bde1fdce6d38c8", "message": "build: adding logic to discern python path on windows (#3791)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/fc4ee471ff660632671ce537bd9a3336578afa24", "message": "build: fixing start-osqueryprocess cmdlet (#3788)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/6a79b5659c0c07c2d3505c89b7f0109262eeec4f", "message": "[#3763] binding sql parameters before querying in registry table (#3785)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/e7c45a790d0d167583882094bc055b98dd279800", "message": "deps: bumping aws-sdk-cpp to 1.2.7 on windows (#3784)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/764a7df5e04f029e910c22195c09ab3acf041fe8", "message": "deps: Bumping windows gflags to 2.2.1 (#3777)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/038869feb4624aa1f1408c9869e8522074d8fe33", "message": "deps: Bumping windows glog to 0.3.5 (#3778)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/cdd57dc9005462a5a1da1b3d9afaef68a51b5aa7", "message": "typo: fixing spelling on choco deployment package (#3724)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/34bb5a0361631893ab44ee9c161edee07ad75b42", "message": "deploy: updating chocolatey deployment script with license and validations (#3719)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/4ac3f426562b19547b9132a3d9976756205ab15f", "message": "[Fix #3619] Better shutdown logic for Windows service controller (#3698)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/2520edca73866846282fff7ab07a02491b865135", "message": "tables: porting python_packages to Windows (#3702)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/3d27bfa6c2b9223a15610c1b971caa7419163e82", "message": "packs: fixing backdoored python pack (#3707)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/777f6e09e7a5eb29d25c3a3f0e420695223761f3", "message": "packs: adding checks for known bad python packages (#3700)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/fa78d5db01ad89135106632a8427a993b6afab24", "message": "[Fix #3683] Setting interface id for interface_addresses (#3684)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/0a496d4c1db98865a23de75f1c50259506b5b110", "message": "deps: building portable rocksdb libs (#3690)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/e252645d1691ef60a0b38eba8e122026f99fa4b7", "message": "deployment: small fix to osquery utils Start-Process cmdlet (#3687)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/072e73b54d1274f1816b6917d774dcdbf8ded239", "message": "shell: ensuring shell does not access stop event (#3664)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/11acc7d64f47ff688799b1da976ec810560abb30", "message": "deps: bumping rocksdb to 5.7.1 on Windows (#3640)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/093d1337c15c8e4024a34aec9cdb6f0a8edf5280", "message": "deps: fixing up aws-sdk-cpp choco build script (#3648)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/002f2cb873fb4d3e6037248052711978ca4ade83", "message": "deploy: Adding binary version and publisher information (#3629)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/2a317ce17f810dfa1bd942d3ded4b74ae624950b", "message": "worker: shutdown safely on Windows only if not worker (#3628)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/3c782051eb3e5ca026ad304c26462a31168be6e9", "message": "tables: adding chocolatey packages virtual table (#3612)"}], "pull_requests": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/3583", "title": "carver: adding dynamic block retry", "body": "This updates the carver block POST logic to retry POSTing blocks that fail up to `carver_max_block_retries=3` times. We still need integration tests for the carver logic, which I have en-route, but I'm not sure I'll have them done and ready before we tag a new release. Below is a sample of testing the carves with our setup:\r\n```\r\n/tmp \u276f unzip 10000000_226051611257155_5300564889708789760_n.zip\r\nArchive:  10000000_226051611257155_5300564889708789760_n.zip\r\n[10000000_226051611257155_5300564889708789760_n.zip] s2AGDs password:\r\n  inflating: s2AGDs\r\n/tmp \u276f tar -xvf s2AGDs\r\nx big3.bin\r\n/tmp \u276f shasum -a big3.bin\r\nValue \"big3.bin\" invalid for option a (number expected)\r\nType shasum -h for help\r\n/tmp \u276f shasum -a 256 big3.bin                                                                                                                 \r\n\r\n19637a00559c22bac79a282e00c8c877a03a2fe2bdc79dc7209f15bd4e291e1f  big3.bin\r\n/tmp \u276f shasum -a 256 ~/Downloads/big3.bin\r\n19637a00559c22bac79a282e00c8c877a03a2fe2bdc79dc7209f15bd4e291e1f  /Users/thor/Downloads/big3.bin\r\n```", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/osquery/comments/22127463", "body": "Ah!  Thanks for the reminder :) I did indeed see it and fixed the issue in #3277. Thanks again!", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/22127463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "clong": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3990", "title": "Increase in osqueryd crashes after upgrade to 2.10.2", "body": "After monitoring our graph of crashes by application, we saw a fairly sharp increase in osqueryd crashes after upgrading to 2.10.2. There are two specific crashes that are occurring across our entire Mac fleet:\r\n\r\nOsquery Version: 2.10.2\r\nOSX Version 10.12.6\r\n\r\n**Crash 1**\r\nException Type: EXC_CRASH (SIGABRT)\r\nRegisters:\r\n```\r\nrax:0x0000000000000000   \r\nrbx:0x0000000000000006 \r\nrcx:0x000070000d012a28 \r\nrdx:0x0000000000000000   \r\nrdi:0x0000000000001e0b \r\nrsi:0x0000000000000006 \r\nrbp:0x000070000d012a50   \r\nrsp:0x000070000d012a28 \r\nr8:0x0000000000000000 \r\nr9:0x0000000000989680   \r\nr10:0x0000000008000000 \r\nr11:0x0000000000000206 \r\nr12:0x000070000d012be0   \r\nr13:0x0000000000000030 \r\nr14:0x000070000d014000 \r\nr15:0x0000000000000008   \r\nrip:0x00007fff92dbdd42 \r\nrfl:0x0000000000000206 \r\ncr2:0x000000000457d000\r\n```\r\nStack Trace: \r\n```\r\n0   libsystem_kernel.dylib 0x00007fff92dbdd42 __pthread_kill + 10\r\n```\r\n\r\n---\r\n\r\n**Crash 2**\r\nException Type: EXC_BAD_ACCESS   (SIGSEGV)\r\nRegisters:\r\n```\r\nrax:0x0000000000000018\r\nrbx:0x000070000e57fa01\r\nrcx:0xffffffffffffffff\r\nrdx:0x000000000000000c\r\nrdi:0x000070000e57f990\r\nrsi:0x0000000000000000\r\nrbp:0x000070000e57fd60\r\nrsp:0x000070000e57f968\r\nr8:0x0000000000000000\r\nr9:0x0000000000000100\r\nr10:0x0000000000000100\r\nr11:0xffffffff00000000\r\nr12:0x000070000e57fa38\r\nr13:0x0000000000000000\r\nr14:0x0000000000000000\r\nr15:0x000070000e57fe20\r\nrip:0x00007fffbd42a84d\r\nrfl:0x0000000000010246\r\ncr2:0x0000000000000000\r\n```\r\nStack Trace: \r\n```\r\n0 libc++.1.dylib   0x00007fffbd42a84d std::__1::basic_string<char,   std::__1::char_traits<char>, std::__1::allocator<char>   >::basic_string(std::__1::basic_string<char,   std::__1::char_traits<char>, std::__1::allocator<char> >   const&, unsigned long, unsigned long, std::__1::allocator<char>   const&) + 23\r\n```\r\n\r\nHappy to provide any other info that might assist in debugging this!", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3957", "title": "Windows: Service should fail to start if encountering fatal error", "body": "The windows service for osquery will start, even when certain \"fatal\" conditions occur. \r\n\r\nFor example, even if the daemon reports:\r\n`E1122 10:34:19.965873  7876 init.cpp:603] [Ref #1629] osqueryd initialize failed: Could not initialize database`\r\n\r\nThe service will start \"successfully\" and not report any problems.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/0bfba4ff7423f783de385ff5ee16abc84831c121", "message": "Adding OSX detection for HiddenLotus (#3982)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/93850b69f9662b3b1506410e302e04804ab00c8b", "message": "Adding detection for new \"Symantec\" Proton variant (#3952)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/8e10156a1f501ecc773af51b9d9dec905b56e983", "message": "Creating a windows-hardening pack and moving queries there (#3935)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/6fc5916a73bd123bc539c783ae6eb7318c1de982", "message": "Adding queries to windows-attacks, fix version, nits (#3922)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/5c25184c15752b83af42d5958488816903264a3d", "message": "packs: Adding a pack for unwanted chrome extensions (#3889)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/4375495cb453f4e2ffc1263cf55ec897d6a4f2b0", "message": "Detect Proton.C variant detection from Elmedia Player (#3858)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/97318f0f63ab990b41c08b1b45872cd48bde11c5", "message": "Add more to resources.yml (#3821)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/65b12c75404c80280b826d0fb1a4bb20623ef106", "message": "manage-osqueryd.ps1: Fix for -args parameter (#3757)"}], "pull_requests": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/4068", "title": "Updating build docs to include make packages", "body": "The package instructions are located on the custom-packages page, but I think it's likely people will want to know how to do this while building from source", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pmav99": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3988", "title": "osqueryi and non-latin characters", "body": "OS: Windows 2012\r\n```\r\nPS C:\\Users\\Administrator> osqueryi --version\r\nosqueryi.exe version 2.10.2\r\n```\r\nI installed the greek and the french spellchecking tools for microsoft office but when I run the following query:\r\n```select name from programs where name LIKE '%Microsoft Office%'```\r\nthe greek spellchecker appears as ??? (the french is gibberish too, but that can be fixed by e.g. changing the codepage):\r\n```\r\nPS C:\\Program Files\\Conmon\\Conmon Agent\\embedded> chcp 437\r\nActive code page: 437\r\nPS C:\\Program Files\\Conmon\\Conmon Agent\\embedded> osqueryi --json \"select name from programs where name LIKE '%Microsoft\r\n Office%'\"\r\n[\r\n  {\"name\":\"???a?e?a ???ss???? e?????? t?? Microsoft Office 2013 - ????????\"},\r\n  {\"name\":\"Outils de v\u0398rification linguistique 2013 de Microsoft Office\u00e1- Fran\u03c4ais\"}\r\n]\r\n```\r\n```\r\nPS C:\\Program Files\\Conmon\\Conmon Agent\\embedded> chcp 1252\r\nActive code page: 1252\r\nPS C:\\Program Files\\Conmon\\Conmon Agent\\embedded> osqueryi --json \"select name from programs where name LIKE '%Microsoft\r\n Office%'\"\r\n[\r\n  {\"name\":\"???a?e?a ???ss???? e?????? t?? Microsoft Office 2013 - ????????\"},\r\n  {\"name\":\"Outils de v\u00e9rification linguistique 2013 de Microsoft Office - Fran\u00e7ais\"}\r\n]\r\n```", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "straffin": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3949", "title": "Windows: osqueryd \"--install\" switch creates pathless service, doesn't run", "body": "Running `osqueryd.exe --install` creates an \"osqueryd\" service with an ImagePath of `osqueryd.exe --flagfile=\\ProgramData\\osquery\\osquery.flags` which then fails due to osqueryd.exe not being in the path. \r\nInstalling via chocolatey with the `--params='/InstallService'` flag creates a service with an ImagePath of `C:\\ProgramData\\osquery\\osqueryd\\osqueryd.exe --flagfile=\\ProgramData\\osquery\\osquery.flags` which runs successfully. \r\n`osqueryd.exe --install` should either add osqueryd.exe to the path or (better) create the ImagePath with the fill path to osqueryd.exe intact.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "groob": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3942", "title": "macOS preferences not checking the by-host level(part 2) ", "body": "This is a followup from #3501, which looked fixed in #3681 but values are still not reported correctly. \r\n\r\nTake this domain/key as an example:\r\n\r\n`com.apple.notificationcenterui` / `doNotDisturb`\r\n\r\nThe `doNotDisturb` key will flip to true/false depending on the notification center flag. \r\n<img width=\"181\" alt=\"screenshot 2017-11-17 18 21 16\" src=\"https://user-images.githubusercontent.com/1526945/32973180-203010a8-cbc4-11e7-9d9b-0855701cb2b0.png\">\r\n\r\nI can observe this change with CFPreferences by using \r\n```\r\n    from Foundation import (CFPreferencesSetValue,\r\n                            kCFPreferencesCurrentUser,\r\n                            kCFPreferencesCurrentHost,\r\n                            CFPreferencesSynchronize,\r\n                            CFPreferencesCopyAppValue)\r\n    from SystemConfiguration import SCDynamicStoreCopyConsoleUser\r\n    cfuser = SCDynamicStoreCopyConsoleUser(None, None, None)\r\n    consoleUser = cfuser[0]\r\n    userUID = pwd.getpwnam(consoleUser).pw_uid\r\n    os.setuid(userUID)\r\n    bundleID = 'com.apple.notificationcenterui'\r\n    doNotDisturb = CFPreferencesCopyAppValue('doNotDisturb', bundleID)\r\n\r\n```\r\n or the handy script form the original issue\r\n\r\n```\r\npython fancy_defaults_read.py com.apple.notificationcenterui doNotDisturb\r\ndoNotDisturb: True\r\nType: boolean\r\nDefined: /Users/victor/Library/Preferences/ByHost/com.apple.notificationcenterui.xxxx.plist\r\n```\r\n\r\nNow If I run `osqueryi` as myself, I also get the value as true\r\n```\r\nosquery> select * from preferences where domain=\"com.apple.notificationcenterui\" AND key=\"doNotDisturb\" and username=\"victor\";\r\n+--------------------------------+--------------+--------+-------+--------+----------+---------+\r\n| domain                         | key          | subkey | value | forced | username | host    |\r\n+--------------------------------+--------------+--------+-------+--------+----------+---------+\r\n| com.apple.notificationcenterui | doNotDisturb |        | true  | 0      | victor   | current |\r\n+--------------------------------+--------------+--------+-------+--------+----------+---------+\r\n```\r\n\r\nbut running as root shows the incorrect value. \r\n\r\n```\r\n~ \u276f\u276f\u276f sudo osqueryi\r\nUsing a virtual database. Need help, type '.help'\r\nosquery> select * from preferences where domain=\"com.apple.notificationcenterui\" AND key=\"doNotDisturb\" and username=\"victor\";\r\n+--------------------------------+--------------+--------+-------+--------+----------+---------+\r\n| domain                         | key          | subkey | value | forced | username | host    |\r\n+--------------------------------+--------------+--------+-------+--------+----------+---------+\r\n| com.apple.notificationcenterui | doNotDisturb |        | false | 0      | victor   | current |\r\n+--------------------------------+--------------+--------+-------+--------+----------+---------+\r\n```", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3118", "title": "Add TLS health status to osquery", "body": "What's a good way of checking that osquery is running healthy and able to communicate with a remote host?\r\nOne solution I have is to enable `--verbose` logging and watch for the timestamps in the log. But that seems a bit janky, and the log output with `--verbose` does not display any information if the request to a TLS server was not successful. \r\n\r\n_Background_:\r\nWhen osquery runs on an endpoint, an admin might want to monitor the status of each agent and do some sort of remediation/alerting if the binary is unhealthy. \r\n\r\nInternally, we, and many other admins use tools like https://github.com/google/macops-planb to healthcheck the agents we deploy, and begin a remediation process if the agent has entered a bad state.  \r\nThis seems to be a somewhat difficult task if we want to ensure that osquery is successfully communicating with a TLS remote. \r\n\r\n_Proposal_:\r\nAdd a few fields to `osquery_info` or `osquery_schedule` that provide health status information. \r\nHere's a few ideas that would help:\r\n\r\n```\r\nsudo osqueryi --line 'select * from osquery_info';\r\n...    \r\nstart_time = 1490844844\r\nlast_tls_request_time = 1490844982\r\nlast_tls_response_status = 200\r\ntls_config_refresh_state = accelerated\r\n```\r\n\r\nThoughts? \r\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/2987", "title": "signature table performance too slow ", "body": "Running the following query brings my mac to it's knees for about 5 minutes\r\n```\r\nselect * from apps a JOIN signature s where s.path = a.path AND s.signed = 0;\r\n```\r\nIt looks like getting the `cdhash` value performance could be improved a bunch. For comparison, I ran google's santa app, which generates sha1 and sha256 for the app and got much better performance with santa.\r\n\r\nosqueryi:\r\n```\r\ntime osqueryi --line 'select * from signature where path = \"/Applications/Numbers.app\"'\r\n           path = /Applications/Numbers.app\r\n         signed = 1\r\n     identifier = com.apple.iWork.Numbers\r\n         cdhash = aea7989b4878a797baec0f286b20218535c060b6\r\nteam_identifier = K36BKF7T3D\r\n      authority = Apple Mac OS Application Signing\r\nosqueryi --line   2.88s user 1.14s system 226% cpu 1.778 total\r\n```\r\n\r\nsantactl\r\n```\r\n~ \u276f\u276f\u276f time santactl fileinfo /Applications/Numbers.app\r\nPath                 : /Applications/Numbers.app/Contents/MacOS/Numbers\r\nSHA-256              : ca594e223e4ca6a7c81205775e46909f0c95737a39544a1e4d46b87edc0ff892\r\nSHA-1                : 75f7dfe1ea1b3e0921ace0bb389fb46b8faf610c\r\nBundle Name          : Numbers\r\nBundle Version       : 4052\r\nBundle Version Str   : 4.0.5\r\nType                 : Executable (x86-64)\r\nCode-signed          : Yes\r\nRule                 : Whitelisted (Unknown)\r\nSigning Chain:\r\n     1. SHA-256             : 61977d6006459c4cefe9b988a453589946224957bfc07b262cd7ca1b7a61e04e\r\n        SHA-1               : b93bdaaaf1a8846b34ba32332635cb2b84853da8\r\n        Common Name         : Apple Mac OS Application Signing\r\n        Organization        : Apple Inc.\r\n        Organizational Unit : null\r\n        Valid From          : 2016/01/07 02:10:02 -0500\r\n        Valid Until         : 2023/02/06 19:00:00 -0500\r\n\r\n     2. SHA-256             : ce057691d730f89ca25e916f7335f4c8a15713dcd273a658c024023f8eb809c2\r\n        SHA-1               : ff6797793a3cd798dc5b2abef56f73edc9f83a64\r\n        Common Name         : Apple Worldwide Developer Relations Certification Authority\r\n        Organization        : Apple Inc.\r\n        Organizational Unit : Apple Worldwide Developer Relations\r\n        Valid From          : 2013/02/07 16:48:47 -0500\r\n        Valid Until         : 2023/02/07 16:48:47 -0500\r\n\r\n     3. SHA-256             : b0b1730ecbc7ff4505142c49f1295e6eda6bcaed7e2c68c5be91b5a11001f024\r\n        SHA-1               : 611e5b662c593a08ff58d14ae22452d198df6c60\r\n        Common Name         : Apple Root CA\r\n        Organization        : Apple Inc.\r\n        Organizational Unit : Apple Certification Authority\r\n        Valid From          : 2006/04/25 17:40:36 -0400\r\n        Valid Until         : 2035/02/09 16:40:36 -0500\r\n\r\nsantactl fileinfo /Applications/Numbers.app  0.51s user 0.04s system 95% cpu 0.580 total\r\n```\r\n\r\nThe value of the cdhash and the SHA1 from `santactl fileinfo` don't seem to match. \r\n\r\nIt would be nice if we could improve the performance of this table and document why these sha's are different. \r\n\r\n//cc @tburgin @arubdesu ", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/ddd463419afd8f2624dc5a6d2be9543cf9200251", "message": "website: Add community links to kolide blog (#3901)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "marpaia": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3940", "title": "[RFC] Discussion about 3.0.0 breaking changes", "body": "As discussed in today's (Nov 17, 2017) osquery office hours, if we had the opportunity to cut a new major version and make some breaking changes, what would be on our shortlist of things that we could change that would make working with osquery more intuitive. This issue serves as a forum that allows people from throughout the community to discuss what changes they would like to see. I will continuously edit the description of this issue with ideas that need more discussion, ideas that people are largely in support of, and ideas that people are largely opposed to.\r\n\r\nWhen someone proposes an idea below, please consider reacting to the comment with \ud83d\udc4d or :-1: based on how you feel about such a change being introduced into osquery.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3930", "title": "[RFC] Osquery Website Redesign", "body": "In an effort to make the https://osquery.io a fun, beautiful website for the osquery community, we have been reasoning about and planning a redesign of the website that is tailored to a set of specific requirements that embody the openness that is so critical to the DNA of the osquery project.\r\n\r\nThe following issue outlines the requirements of the website redesign, which were enumerated by talking to stakeholders throughout the osquery community. Also included are an enumeration of \"MVP\" features (get these out quickly and #shipit) and \"Post-MVP\" features (features that don't currently exist on the website that will improve the communities ability to collaborate).\r\n\r\nFinally, the actual designs of the new osquery site are included as well. Please note that the copy and the text in the buttons are subject to change, the designs are more of a visual representation of page structure. Scroll down to the end of this document to see all of them and comment on this issue with your feedback if you have concerns about the usability of the application that we can address!\r\n\r\n## Requirements\r\n\r\n### Openness of data, accessible to contribute to\r\n\r\nThe site should be interactive and fun to use, but not at the expense of making the data that powers the website feel opaque. Whenever possible, ensure that data (schema specifications, blog content, etc) can be statically compiled into included JSON files and, most importantly, easily updated via a GitHub PR from a member of the osquery community.\r\n\r\n### Minimize hosting, maximize usability\r\n\r\nThe site should continue to be as static as possible. It should, however, also easily support effective interaction with APIs if such features become necessary or desired. Additionally, you should be able to browse the site easily in adverse network conditions.\r\n\r\nTo this end, we will be creating the site with React as a [Progressive Web App](https://developers.google.com/web/progressive-web-apps/). The documentation for the [Create React App](https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#making-a-progressive-web-app) project say the following about Progressive Web Apps:\r\n\r\nProgressive Web Apps are faster and more reliable than traditional web pages, and provide an engaging mobile experience:\r\n\r\n- All static site assets are cached so that your page loads fast on subsequent visits, regardless of network connectivity (such as 2G or 3G). Updates are downloaded in the background.\r\n- Your app will work regardless of network state, even if offline. This means your users will be able to use your app at 10,000 feet and on the subway.\r\n- On mobile devices, your app can be added directly to the user's home screen, app icon and all. You can also re-engage users using web push notifications. This eliminates the need for the app store.\r\n\r\n### Beautiful, useful user experience\r\n\r\nThe site should be static, it should be progressive, it should be easy to contribute to, but it also must be beautiful, fun, and useful! We should take the requisite steps and spend time to create a beautiful application user-experience for the osquery community. Emphasis will be spent on effective web design and usability. If the application does not feel usable once the site starts to come to life, please provide feedback early and often!\r\n\r\n## Development Plan\r\n\r\nThe plan for the redesign is for work to happen in the open. Development will take place in the [osquery/osquery-site](https://github.com/osquery/osquery-site) repo. When the new site is deployable, we will ship it and host it at https://beta.osquery.io. When the site is feature complete and adding value, we will cut it over to https://osquery.io.\r\n\r\nWe will be creating several GitHub issues in the `osquery-site` repo, so be sure to \"Watch\" that repo if you're interested in keeping up with development.\r\n\r\n## MVP Features\r\n\r\nWe are limiting the MVP feature-set to the following features.\r\n\r\n- Homepage\r\n- Osquery Schema Browser\r\n- Downloads Page\r\n- Blog\r\n\r\nA first implementation of the website containing just the above pages will be used as a minimum cut-off point to make sure we're shipping early and often.\r\n\r\n## Post-MVP Features\r\n\r\nOnce \"MVP\" features are developed and shipped, development will begin on the following additional features:\r\n\r\n- Integrated Wiki (deprecating https://osquery.readthedocs.io)\r\n- Integrated Query Pack intelligence sharing\r\n\r\nThese features represent functionality not currently offered by the website, but we believe that features will add value to the osquery community and add utility to the osquery project as a whole\r\n\r\n## Designs\r\n\r\n### Home Page\r\n\r\n![osquery-io-again-again](https://user-images.githubusercontent.com/927168/32960580-a66cf290-cb82-11e7-98f3-3acaf1788a8b.png)\r\n\r\n### Schema Browser\r\n\r\n![osqueryio-schema-flatter](https://user-images.githubusercontent.com/927168/32960586-ad3b16f6-cb82-11e7-8ac9-389ebbed911f.png)\r\n\r\n### Downloads Page\r\n\r\n![osqueryio-downloads-new](https://user-images.githubusercontent.com/927168/32963758-3852655e-cb8e-11e7-94a9-e3658ca6a88e.png)\r\n\r\n### Pack Sharing\r\n\r\n![osqueryio-packs-revised](https://user-images.githubusercontent.com/927168/32960594-b89de820-cb82-11e7-8bf7-a3d9efc908aa.png)\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3930/reactions", "total_count": 6, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/4077", "title": "Tool to generate table schema JSON for the new website", "body": "This is the script I used to generate the new website json documents (which can be found on GitHub [here](https://github.com/osquery/osquery-site/tree/develop/src/data/osquery_schema_versions)). Having it as a standalone script made it easier to regenerate version across git history.", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/facebook/osquery/issues/comments/50915164", "body": "Working on this here: https://github.com/facebook/osquery/pull/1\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/50915164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/50923432", "body": "In addition, some places to check on OS X:\n- /Library/StartupItems/\n- /System/Library/StartupItems/\n- /Library/ScriptingAdditions/\n- /Library/Internet Plug-Ins/\n- /Applications/Mail.app/Contents/PlugIns/\n- /var/root/\n- /Library/Scripts/Folder Action Scripts\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/50923432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/50925022", "body": "I like this a lot. I want a `select * from running_processes` vtable anyway; adding the parent-child relationship is a nice additional touch.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/50925022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/50925110", "body": "May share functionality with https://github.com/facebook/osquery/issues/7\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/50925110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/50926405", "body": "Java, the gift that keeps on giving.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/50926405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/50946795", "body": "Obviously there would be nothing stopping another organization from grabbing the code, modifying it and building those tables back into the daemon. I'm not really concerned with this though, because that would take conscious effort to violate privacy and, at that point, you're probably a wanker anyway.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/50946795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51398469", "body": "@zwass unfortunately no, you can't say \"this needs to be changed and approved in order to be committed\". The way this is usually solved in practice is only project owners can push to a repo, so only they can merge \"approved\" PRs.\n\nGenerally, a \"lgtm\" or something is needed before merging.\n\nAlso, I don't think you can comment on multiple lines on a PR. It auto-adds the above 10 or so lines, so I would just comment on the last line that you'd want to comment on.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51398469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51398835", "body": "alternatively, I use the tags pretty heavily for PRs. We could say if you want to \"request changes\", you could do one of the following:\n- remove the \"ready for review\" tag and add the \"in progress\" tag back. I can then change it to \"ready for review\" once I've address all comments\n- create some new tags to mimic phabricator style such as \"needs revision\", \"approved\", etc\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51398835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51410537", "body": "```\n[marpaia-mbp1] osquery (processes_table) ./build/osqueryi\nosquery> SELECT name, pid, parent FROM processes LIMIT 10;\nosqueryi|27378|24170\nosqueryi|26755|1\nmdworker|25755|360\nGoogle Chrome H|25655|813\nmdworker|24979|360\nmdworker|24978|360\nmdworker|24823|360\nmdworker|24816|1\nzsh|24170|8400\ncom.apple.iClou|23441|1\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51410537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51410915", "body": "the `processes` table has a `parent` column which has the pid of the parent (which should also exist in the `processes` table with additional info.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51410915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51527056", "body": "Went over this PR with Anton IRL in the DEFCON suite. :+1: \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51527056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51881291", "body": "This is awesome. The only nit is there's a few varying formats for if statements. Can you use\n\n``` cpp\nif (val) {\n  return;\n}\n\nif ((val1) && (val2)) {\n  return;\n}\n```\n\nSo a space after the `if`and before the `{` and none on the ends of the parens, even if there's nesting.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51881291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51998567", "body": ":+1: thanks for doing this!\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51998567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52016876", "body": "#29 \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52016876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52016993", "body": "Including files from https://github.com/petroules/CocoaBackports/tree/master/CocoaBackports because `[[NSProcessInfo processInfo] operatingSystemVersion]` isn't available until 10.10.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52016993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52091176", "body": "This should be good to go.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52091176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52350307", "body": "IMO, it would be nice to have one table with a `browser` column and have the implementation normalize the implementation details.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52350307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52350625", "body": "ala `netstat`?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52350625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52527084", "body": "This looks great. Awesome job with the memory management, especially on CFNumberCreate (and it's callers). Might be worth adding a comment or something on CFNumberCreate illustrating that it's return value must be released.\n\nOther than that, Can you change the `/* C style strings in your code */` to `// C++ style strings`? It seems like you've already ran it through clang-format.\n\nThanks for this, it's great work.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52527084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52669183", "body": "![image](https://cloud.githubusercontent.com/assets/927168/3970068/89d7003e-27c6-11e4-94a4-0a5d26d76048.png)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52669183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52707908", "body": "you're awesome.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52707908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52729107", "body": "https://github.com/facebook/osquery/issues/59\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52729107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/69882974", "body": "tracking in #619 \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/69882974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/50926405", "body": "Java, the gift that keeps on giving.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/50926405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52350307", "body": "IMO, it would be nice to have one table with a `browser` column and have the implementation normalize the implementation details.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52350307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/62840950", "body": "Hey @wizzat, should I close this issue or put it up for grabs?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/62840950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/50946795", "body": "Obviously there would be nothing stopping another organization from grabbing the code, modifying it and building those tables back into the daemon. I'm not really concerned with this though, because that would take conscious effort to violate privacy and, at that point, you're probably a wanker anyway.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/50946795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54782622", "body": "Closing this until libtsk becomes a requirement for osquery\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54782622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51398469", "body": "@zwass unfortunately no, you can't say \"this needs to be changed and approved in order to be committed\". The way this is usually solved in practice is only project owners can push to a repo, so only they can merge \"approved\" PRs.\n\nGenerally, a \"lgtm\" or something is needed before merging.\n\nAlso, I don't think you can comment on multiple lines on a PR. It auto-adds the above 10 or so lines, so I would just comment on the last line that you'd want to comment on.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51398469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51398835", "body": "alternatively, I use the tags pretty heavily for PRs. We could say if you want to \"request changes\", you could do one of the following:\n- remove the \"ready for review\" tag and add the \"in progress\" tag back. I can then change it to \"ready for review\" once I've address all comments\n- create some new tags to mimic phabricator style such as \"needs revision\", \"approved\", etc\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51398835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51410537", "body": "```\n[marpaia-mbp1] osquery (processes_table) ./build/osqueryi\nosquery> SELECT name, pid, parent FROM processes LIMIT 10;\nosqueryi|27378|24170\nosqueryi|26755|1\nmdworker|25755|360\nGoogle Chrome H|25655|813\nmdworker|24979|360\nmdworker|24978|360\nmdworker|24823|360\nmdworker|24816|1\nzsh|24170|8400\ncom.apple.iClou|23441|1\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51410537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51527056", "body": "Went over this PR with Anton IRL in the DEFCON suite. :+1: \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51527056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52091176", "body": "This should be good to go.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52091176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51881291", "body": "This is awesome. The only nit is there's a few varying formats for if statements. Can you use\n\n``` cpp\nif (val) {\n  return;\n}\n\nif ((val1) && (val2)) {\n  return;\n}\n```\n\nSo a space after the `if`and before the `{` and none on the ends of the parens, even if there's nesting.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51881291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51998567", "body": ":+1: thanks for doing this!\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51998567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56918797", "body": "## Before\n\n```\nosquery> select name, program || program_arguments as executable from launchd limit 5;\nname          executable\n------------  -------------------\nbootps.plist  /usr/libexec/bootpd\ncom.apple.af  /System/Library/Fil\ncom.apple.af  /System/Library/Fil\ncom.apple.Ai  /usr/libexec/AirPla\ncom.apple.ai  /usr/libexec/wps\nosquery> .tables\ntemp.alf                  temp.etc_hosts            temp.listening_ports\ntemp.alf_exceptions       temp.interface_addresses  temp.nvram\ntemp.alf_explicit_auths   temp.interface_details    temp.osx_version\ntemp.alf_services         temp.kextstat             temp.processes\ntemp.apps                 temp.last                 temp.routes\ntemp.ca_certs             temp.launchd              temp.time\n```\n\n## After\n\n```\nosquery> select name, program || program_arguments as executable from launchd limit 5;\n\n+----------------------------------+-------------------------------------------------------------------------------+\n| name                             | executable                                                                    |\n+----------------------------------+-------------------------------------------------------------------------------+\n| bootps.plist                     | /usr/libexec/bootpd                                                           |\n| com.apple.afpfs_afpLoad.plist    | /System/Library/Filesystems/AppleShare/afpLoad                                |\n| com.apple.afpfs_checkafp.plist   | /System/Library/Filesystems/AppleShare/check_afp.app/Contents/MacOS/check_afp |\n| com.apple.AirPlayXPCHelper.plist | /usr/libexec/AirPlayXPCHelper                                                 |\n| com.apple.airport.wps.plist      | /usr/libexec/wps                                                              |\n+----------------------------------+-------------------------------------------------------------------------------+\nosquery> .tables\n  => alf\n  => alf_exceptions\n  => alf_explicit_auths\n  => alf_services\n  => apps\n  => ca_certs\n  => etc_hosts\n  => interface_addresses\n  => interface_details\n  => kextstat\n  => last\n  => launchd\n  => listening_ports\n  => nvram\n  => osx_version\n  => processes\n  => routes\n  => time\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56918797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52016876", "body": "#29 \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52016876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52016993", "body": "Including files from https://github.com/petroules/CocoaBackports/tree/master/CocoaBackports because `[[NSProcessInfo processInfo] operatingSystemVersion]` isn't available until 10.10.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52016993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52350625", "body": "ala `netstat`?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52350625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52527084", "body": "This looks great. Awesome job with the memory management, especially on CFNumberCreate (and it's callers). Might be worth adding a comment or something on CFNumberCreate illustrating that it's return value must be released.\n\nOther than that, Can you change the `/* C style strings in your code */` to `// C++ style strings`? It seems like you've already ran it through clang-format.\n\nThanks for this, it's great work.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52527084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52707908", "body": "you're awesome.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52707908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52669183", "body": "![image](https://cloud.githubusercontent.com/assets/927168/3970068/89d7003e-27c6-11e4-94a4-0a5d26d76048.png)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52669183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52729107", "body": "https://github.com/facebook/osquery/issues/59\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52729107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52872658", "body": "The directory `osquery/tables/manual` is for handmade virtual tables that don't use gentables.py to generate the backing code. It's generally regarded as where tables go if gentable.py doesn't support it's functionality. Can you move the code from `osquery/tables/manual` to `osquery/tables/networking`?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52872658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52872986", "body": "Other than the comments above, this LGTM. Feel free to merge after you make those quick edits. Nice work!\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52872986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53118799", "body": "osquery.pkgproj is autogenerated by the packages tool. \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53118799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53320243", "body": "@theopolis that sounds like a neat idea. does this all still hold true when the running-as user is root?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53320243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54099354", "body": "duplicate of #7 \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54099354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53621623", "body": "It seems as though it's consistently leaking 32 bytes per query, which isn't HORRIFIC by any means.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53621623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53676838", "body": "This analysis should be ran again once #75 is solved. Until then, I'm going to assign this to me.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53676838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53954312", "body": "This still exists:\n\n```\n[marpaia-mbp] osquery (launchdaemon) * valgrind --tool=memcheck --leak-check=yes --suppressions=osquery.supp ./build/tools/run --query=\"select * from nvram;\"\n\n==72691== 320 bytes in 10 blocks are definitely lost in loss record 704 of 825\n==72691==    at 0x70BC: malloc_zone_malloc (in /usr/local/Cellar/valgrind/3.9.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)\n==72691==    by 0x9F3FEC: _CFRuntimeCreateInstance (in /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation)\n==72691==    by 0x9F655F: __CFStringCreateImmutableFunnel3 (in /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation)\n==72691==    by 0x9F5C0C: CFStringCreateWithCString (in /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation)\n==72691==    by 0x1001C4850: osquery::tables::genVariable(void const*, void const*, void*) (in ./build/tools/run)\n==72691==    by 0xA33935: __CFDictionaryApplyFunction_block_invoke (in /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation)\n==72691==    by 0xA338FB: CFBasicHashApply (in /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation)\n==72691==    by 0xA3384C: CFDictionaryApplyFunction (in /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation)\n==72691==    by 0x1001C6C4F: osquery::tables::genNVRAM() (in ./build/tools/run)\n==72691==    by 0x10017960F: osquery::tables::nvramFilter(sqlite3_vtab_cursor*, int, char const*, int, Mem**) (in ./build/tools/run)\n==72691==    by 0x1002954B3: sqlite3VdbeExec (in ./build/tools/run)\n==72691==    by 0x10020FE1C: sqlite3Step (in ./build/tools/run)\n==72691==\n==72691== LEAK SUMMARY:\n==72691==    definitely lost: 1,360 bytes in 11 blocks\n==72691==    indirectly lost: 4,160 bytes in 4 blocks\n==72691==      possibly lost: 0 bytes in 0 blocks\n==72691==    still reachable: 2,323 bytes in 10 blocks\n==72691==         suppressed: 324,913 bytes in 1,317 blocks\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53954312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54101599", "body": "#87\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54101599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53676773", "body": "This is probably a result of #75. That task should be considered blocking to this one, as solving that task may very well solve this task as well.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53676773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53955318", "body": "fixed in https://github.com/facebook/osquery/commit/0e806eff839fb9e06062880b70245b92e9f15e0b#diff-d41d8cd98f00b204e9800998ecf8427e\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53955318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53675512", "body": "Issue is also present in `valgrind --tool=memcheck --leak-check=yes ./build/osquery/database/query_tests`\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53675512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53826592", "body": "``` cpp\n#include \"osquery/database.h\"\n\nusing namespace osquery::db;\n\nint main(int argc, char *argv[]) {\n  for (int i = 0; i < 5; ++i) {\n    auto db = DBHandle::getInstance();\n  }\n  return 0;\n}\n```\n\n```\n==3556== 8 bytes in 1 blocks are definitely lost in loss record 4 of 272\n==3556==    at 0x6DFB: malloc (in /usr/local/Cellar/valgrind/3.9.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)\n==3556==    by 0x45028D: operator new(unsigned long) (in /usr/lib/libc++.1.dylib)\n==3556==    by 0x1047AD: rocksdb::InitModule() (comparator.cc:78)\n==3556==    by 0x8498D5: __pthread_once_handler (in /usr/lib/system/libsystem_pthread.dylib)\n==3556==    by 0x831155: _os_once (in /usr/lib/system/libsystem_platform.dylib)\n==3556==    by 0x849874: pthread_once (in /usr/lib/system/libsystem_pthread.dylib)\n==3556==    by 0x167A8A: rocksdb::port::InitOnce(_opaque_pthread_once_t*, void (*)()) (port_posix.cc:133)\n==3556==    by 0x104796: rocksdb::BytewiseComparator() (comparator.cc:82)\n==3556==    by 0x130FD8: rocksdb::ColumnFamilyOptions::ColumnFamilyOptions() (options.cc:33)\n==3556==    by 0x10007B71D: rocksdb::Options::Options() (in ./build/tools/test)\n==3556==    by 0x100076164: rocksdb::Options::Options() (in ./build/tools/test)\n==3556==    by 0x100073AF5: osquery::db::DBHandle::DBHandle(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool) (in ./build/tools/test)\n==3556==\n==3556== 2,048 bytes in 1 blocks are definitely lost in loss record 266 of 272\n==3556==    at 0x74F9: calloc (in /usr/local/Cellar/valgrind/3.9.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)\n==3556==    by 0x68C00A: strerror (in /usr/lib/system/libsystem_c.dylib)\n==3556==    by 0x108E57: rocksdb::(anonymous namespace)::PosixEnv::RenameFile(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) (slice.h:39)\n==3556==    by 0xFFEF7: rocksdb::CreateLoggerFromOptions(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, rocksdb::Env*, rocksdb::DBOptions const&, std::__1::shared_ptr<rocksdb::Logger>*) (auto_roll_logger.cc:106)\n==3556==    by 0x6A04E: rocksdb::SanitizeOptions(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, rocksdb::DBOptions const&) (db_impl.cc:252)\n==3556==    by 0x6A269: rocksdb::DBImpl::DBImpl(rocksdb::DBOptions const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) (db_impl.cc:303)\n==3556==    by 0x8135F: rocksdb::DB::Open(rocksdb::DBOptions const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<rocksdb::ColumnFamilyDescriptor, std::__1::allocator<rocksdb::ColumnFamilyDescriptor> > const&, std::__1::vector<rocksdb::ColumnFamilyHandle*, std::__1::allocator<rocksdb::ColumnFamilyHandle*> >*, rocksdb::DB**) (db_impl.cc:4724)\n==3556==    by 0x1000742CF: osquery::db::DBHandle::DBHandle(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool) (in ./build/tools/test)\n==3556==    by 0x100073903: osquery::db::DBHandle::DBHandle(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool) (in ./build/tools/test)\n==3556==    by 0x1000747ED: osquery::db::DBHandle::getInstance(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool) (in ./build/tools/test)\n==3556==    by 0x10007474F: osquery::db::DBHandle::getInstance() (in ./build/tools/test)\n==3556==    by 0x1000047D2: main (in ./build/tools/test)\n==3556==\n==3556== LEAK SUMMARY:\n==3556==    definitely lost: 2,056 bytes in 2 blocks\n==3556==    indirectly lost: 6,240 bytes in 6 blocks\n==3556==      possibly lost: 0 bytes in 0 blocks\n```\n\nThis is interesting because this leak only occurs once, regardless of how many times you open a RocksDB handle. Perhaps this is a global startup type of thing?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53826592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53827168", "body": "``` cpp\n#include <string>\n#include <vector>\n\n#include <glog/logging.h>\n\n#include \"osquery/database.h\"\n\nusing namespace osquery::db;\n\nint main(int argc, char *argv[]) {\n  google::InitGoogleLogging(argv[0]);\n  auto db = DBHandle::getInstance();\n  std::vector<std::string> scan_results;\n  auto s = db->Scan(kQueries, scan_results);\n  if (!s.ok()) {\n    printf(\"An error occured during scan\\n\");\n  } else {\n    for (const auto& result : scan_results) {\n      printf(\"[+] %s\\n\", result.c_str());\n    }\n  }\n  google::ShutdownGoogleLogging();\n  return 0;\n}\n```\n\n```\n==5316== 8 bytes in 1 blocks are definitely lost in loss record 4 of 286\n==5316==    at 0x6DFB: malloc (in /usr/local/Cellar/valgrind/3.9.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)\n==5316==    by 0x45028D: operator new(unsigned long) (in /usr/lib/libc++.1.dylib)\n==5316==    by 0x1047AD: rocksdb::InitModule() (comparator.cc:78)\n==5316==    by 0x8498D5: __pthread_once_handler (in /usr/lib/system/libsystem_pthread.dylib)\n==5316==    by 0x831155: _os_once (in /usr/lib/system/libsystem_platform.dylib)\n==5316==    by 0x849874: pthread_once (in /usr/lib/system/libsystem_pthread.dylib)\n==5316==    by 0x167A8A: rocksdb::port::InitOnce(_opaque_pthread_once_t*, void (*)()) (port_posix.cc:133)\n==5316==    by 0x104796: rocksdb::BytewiseComparator() (comparator.cc:82)\n==5316==    by 0x130FD8: rocksdb::ColumnFamilyOptions::ColumnFamilyOptions() (options.cc:33)\n==5316==    by 0x10007B44D: rocksdb::Options::Options() (in ./build/tools/test)\n==5316==    by 0x100075E94: rocksdb::Options::Options() (in ./build/tools/test)\n==5316==    by 0x100073825: osquery::db::DBHandle::DBHandle(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool) (in ./build/tools/test)\n==5316==\n==5316== 2,048 bytes in 1 blocks are definitely lost in loss record 278 of 286\n==5316==    at 0x74F9: calloc (in /usr/local/Cellar/valgrind/3.9.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)\n==5316==    by 0x68C00A: strerror (in /usr/lib/system/libsystem_c.dylib)\n==5316==    by 0x108662: rocksdb::(anonymous namespace)::PosixEnv::GetChildren(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >*) (env_posix.cc:97)\n==5316==    by 0x6BAD6: rocksdb::DBImpl::FindObsoleteFiles(rocksdb::DBImpl::DeletionState&, bool, bool) (db_impl.cc:585)\n==5316==    by 0x6E1F4: rocksdb::DBImpl::DeleteObsoleteFiles() (db_impl.cc:761)\n==5316==    by 0x81C99: rocksdb::DB::Open(rocksdb::DBOptions const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<rocksdb::ColumnFamilyDescriptor, std::__1::allocator<rocksdb::ColumnFamilyDescriptor> > const&, std::__1::vector<rocksdb::ColumnFamilyHandle*, std::__1::allocator<rocksdb::ColumnFamilyHandle*> >*, rocksdb::DB**) (db_impl.cc:4792)\n==5316==    by 0x100073FFF: osquery::db::DBHandle::DBHandle(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool) (in ./build/tools/test)\n==5316==    by 0x100073633: osquery::db::DBHandle::DBHandle(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool) (in ./build/tools/test)\n==5316==    by 0x10007451D: osquery::db::DBHandle::getInstance(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool) (in ./build/tools/test)\n==5316==    by 0x10007447F: osquery::db::DBHandle::getInstance() (in ./build/tools/test)\n==5316==    by 0x10000404F: main (in ./build/tools/test)\n==5316==\n==5316== 2,088 (16 direct, 2,072 indirect) bytes in 1 blocks are definitely lost in loss record 281 of 286\n==5316==    at 0x6DFB: malloc (in /usr/local/Cellar/valgrind/3.9.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)\n==5316==    by 0x824FE6: _nc_table_new (in /usr/lib/system/libsystem_notify.dylib)\n==5316==    by 0x824A78: __token_table_add_block_invoke (in /usr/lib/system/libsystem_notify.dylib)\n==5316==    by 0x5A528C: _dispatch_client_callout (in /usr/lib/system/libdispatch.dylib)\n==5316==    by 0x5A51FB: dispatch_once_f (in /usr/lib/system/libdispatch.dylib)\n==5316==    by 0x8228A6: token_table_add (in /usr/lib/system/libsystem_notify.dylib)\n==5316==    by 0x8226B2: notify_register_check (in /usr/lib/system/libsystem_notify.dylib)\n==5316==    by 0x685A15: notify_register_tz (in /usr/lib/system/libsystem_c.dylib)\n==5316==    by 0x68554A: tzsetwall_basic (in /usr/lib/system/libsystem_c.dylib)\n==5316==    by 0x685707: _st_tzset_basic (in /usr/lib/system/libsystem_c.dylib)\n==5316==    by 0x686D60: localtime_r (in /usr/lib/system/libsystem_c.dylib)\n==5316==    by 0x10D32F: rocksdb::PosixLogger::Logv(char const*, __va_list_tag*) (posix_logger.h:84)\n==5316==\n==5316== 2,242 (16 direct, 2,226 indirect) bytes in 1 blocks are definitely lost in loss record 282 of 286\n==5316==    at 0x6DFB: malloc (in /usr/local/Cellar/valgrind/3.9.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)\n==5316==    by 0x824FE6: _nc_table_new (in /usr/lib/system/libsystem_notify.dylib)\n==5316==    by 0x824A63: __token_table_add_block_invoke (in /usr/lib/system/libsystem_notify.dylib)\n==5316==    by 0x5A528C: _dispatch_client_callout (in /usr/lib/system/libdispatch.dylib)\n==5316==    by 0x5A51FB: dispatch_once_f (in /usr/lib/system/libdispatch.dylib)\n==5316==    by 0x8228A6: token_table_add (in /usr/lib/system/libsystem_notify.dylib)\n==5316==    by 0x8226B2: notify_register_check (in /usr/lib/system/libsystem_notify.dylib)\n==5316==    by 0x685A15: notify_register_tz (in /usr/lib/system/libsystem_c.dylib)\n==5316==    by 0x68554A: tzsetwall_basic (in /usr/lib/system/libsystem_c.dylib)\n==5316==    by 0x685707: _st_tzset_basic (in /usr/lib/system/libsystem_c.dylib)\n==5316==    by 0x686D60: localtime_r (in /usr/lib/system/libsystem_c.dylib)\n==5316==    by 0x10D32F: rocksdb::PosixLogger::Logv(char const*, __va_list_tag*) (posix_logger.h:84)\n==5316==\n==5316== 10,808 bytes in 1 blocks are possibly lost in loss record 286 of 286\n==5316==    at 0x6DFB: malloc (in /usr/local/Cellar/valgrind/3.9.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)\n==5316==    by 0x6854F6: tzsetwall_basic (in /usr/lib/system/libsystem_c.dylib)\n==5316==    by 0x685707: _st_tzset_basic (in /usr/lib/system/libsystem_c.dylib)\n==5316==    by 0x686D60: localtime_r (in /usr/lib/system/libsystem_c.dylib)\n==5316==    by 0x10D32F: rocksdb::PosixLogger::Logv(char const*, __va_list_tag*) (posix_logger.h:84)\n==5316==    by 0x105218: rocksdb::Log(rocksdb::Logger*, char const*, ...) (env.h:600)\n==5316==    by 0x6A6E3: rocksdb::DBImpl::DBImpl(rocksdb::DBOptions const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) (db_impl.cc:4938)\n==5316==    by 0x8135F: rocksdb::DB::Open(rocksdb::DBOptions const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<rocksdb::ColumnFamilyDescriptor, std::__1::allocator<rocksdb::ColumnFamilyDescriptor> > const&, std::__1::vector<rocksdb::ColumnFamilyHandle*, std::__1::allocator<rocksdb::ColumnFamilyHandle*> >*, rocksdb::DB**) (db_impl.cc:4724)\n==5316==    by 0x100073FFF: osquery::db::DBHandle::DBHandle(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool) (in ./build/tools/test)\n==5316==    by 0x100073633: osquery::db::DBHandle::DBHandle(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool) (in ./build/tools/test)\n==5316==    by 0x10007451D: osquery::db::DBHandle::getInstance(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool) (in ./build/tools/test)\n==5316==    by 0x10007447F: osquery::db::DBHandle::getInstance() (in ./build/tools/test)\n==5316==\n==5316== LEAK SUMMARY:\n==5316==    definitely lost: 2,088 bytes in 4 blocks\n==5316==    indirectly lost: 10,538 bytes in 13 blocks\n==5316==      possibly lost: 10,808 bytes in 1 blocks\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53827168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53830090", "body": "Created https://gist.github.com/marpaia/3e89a650f4a06c542f79 and asked someone from the RocksDB team to take a look at it: https://facebook.com/groups/rocksdb/permalink/725020457546572/\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53830090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53840951", "body": "False positives apparently\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/53840951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56703482", "body": "@astanway https://github.com/facebook/osquery/blob/master/osquery/events/events_tests.cpp\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56703482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54580703", "body": "This is awesome. Can you run `valgrind --tool=memcheck --leak-check=yes --suppressions=osquery.supp ./build/tools/run --query=\"select * from last;\"` from the root of the repo to make sure that your table doesn't introduce any memory leaks? \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54580703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54582548", "body": "(y) awesome. LGTM!\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54582548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54582573", "body": "When you're ready, please merge this PR, delete the branch and close #7.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54582573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54581795", "body": "Looks like a permissions error. The user that you're running this as can't seem to access /usr/local\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54581795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54582341", "body": "I wouldn't actually say this is a good job, it doesn't look like anything actually compiled other than sqlite and gtest. What version of gcc do you have installed here? It's saying that -stdlib=libc++ isn't valid, so I would venture to guess that you have <= 4.6.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54582341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54602072", "body": "![image](https://cloud.githubusercontent.com/assets/927168/4162572/e0430f6c-34dc-11e4-9b80-e6cc705d0b89.png)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54602072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54660775", "body": "![image](https://cloud.githubusercontent.com/assets/927168/4169455/9dd454b0-3527-11e4-937f-e3c438fc9bf8.png)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54660775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54781029", "body": "@theopolis I'm assigning this to you since you're the knowledge lead on the current state of osquery's linux build state.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54781029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54692798", "body": "what columns are you thinking for this table?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54692798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54692834", "body": "should this be merged with #104?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54692834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54695646", "body": ":+1: I dig it!\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54695646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54780517", "body": "This is blocked by #103 \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54780517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55434232", "body": "Closing this for now until I work on this again.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55434232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56632011", "body": "Punting on this.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56632011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/63233842", "body": "Moving conversation to #302\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/63233842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57112321", "body": "That was the cmake policy that i was previously ignoring that you said brew update fixed? This should just be a warning though.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57112321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57112345", "body": "It's because we manually define \"make package\" and it's reserved, but that's actually \"the right\" thing to do.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57112345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57225472", "body": "Sure, but the reason why I took the ignore for that policy was because travis builds failed because the version of cmake didn't have that policy, so it didn't know what it was when it was being ignored. Might be worth considering.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57225472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57238984", "body": "there's definitely a way to conditionally add functionality based on the cmake version. Check out http://www.cmake.org/Wiki/CMake_Useful_Variables#System_.26_Compiler_Information\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57238984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/59310481", "body": "This is done.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/59310481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54872365", "body": "https://github.com/osquery/third-party/commit/414ab7df32981f1455b43837a224aa8cc6da8e56\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54872365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54872697", "body": "I updated the third-party commit for the branch in https://github.com/facebook/osquery/commit/72ce1e586a95e8f3994e8fc528f3ecb7624a90aa\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54872697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54875125", "body": "Rebased and stood up a vagrant VM. Get the following errors (on linux):\n\n```\ncd build && cmake .. && make\n-- Configuring done\nCMake Error at third-party/sqlite3/CMakeLists.txt:1 (ADD_LIBRARY):\n  Cannot find source file:\n\n    OBJECT\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_config>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_core>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_database>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_devtools>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_filesystem>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_logger>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_registry>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_scheduler>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_tables>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_sqlite>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_tables_linux>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/config/CMakeLists.txt:\n  Cannot find source file:\n\n    OBJECT\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/config/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_core>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/config/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_sqlite>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/config/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_registry>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/config/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_config>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/core/CMakeLists.txt:\n  Cannot find source file:\n\n    OBJECT\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/core/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_core>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/core/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_database>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/core/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_sqlite>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/core/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_registry>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/database/CMakeLists.txt:\n  Cannot find source file:\n\n    OBJECT\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/database/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_core>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/database/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_database>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/database/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_sqlite>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/database/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_registry>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/devtools/CMakeLists.txt:\n  Cannot find source file:\n\n    OBJECT\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/filesystem/CMakeLists.txt:\n  Cannot find source file:\n\n    OBJECT\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/filesystem/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_core>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/filesystem/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_filesystem>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/logger/CMakeLists.txt:\n  Cannot find source file:\n\n    OBJECT\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/logger/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_core>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/logger/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_database>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/logger/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_logger>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/registry/CMakeLists.txt:\n  Cannot find source file:\n\n    OBJECT\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/scheduler/CMakeLists.txt:\n  Cannot find source file:\n\n    OBJECT\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/tables/CMakeLists.txt:\n  Cannot find source file:\n\n    OBJECT\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/tables/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_core>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/tables/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_sqlite>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/tables/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_registry>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/tables/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_filesystem>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/tables/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_tables>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\nCMake Error in osquery/tables/CMakeLists.txt:\n  Cannot find source file:\n\n    $<TARGET_OBJECTS:osquery_tables_linux>\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\n  .hxx .in .txx\n\n\n-- Build files have been written to: /vagrant/build\nmake: *** [build] Error 1\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54875125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54906377", "body": "Can you add the 2.8.8 requirement to the root CMakeLists.txt?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54906377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54906389", "body": "Otherwise, feel free to merge\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54906389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54931777", "body": "-_-\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54931777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54932153", "body": "This is awesome. Can you add an \"on_disk\" column, of type int, which is a bool indicating wether or not the process path exists on disk?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54932153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55012195", "body": "I don't understand. Isn't \"path\" one of your columns? If so, which your spec says it is, you could just do: https://github.com/facebook/osquery/blob/master/osquery/tables/system/processes.cpp#L100-108\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55012195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55033439", "body": "I'm assuming you ran this through valgrind and made sure you weren't leaking. LGTM!\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55033439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55033465", "body": "Merge at will.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55033465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56439183", "body": "Appropriately labeling. This will require a modification to \n- tools/gentable.py \n- tools/gentables.py\n- osquery/tables/CMakeLists.txt\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56439183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56567903", "body": "The logging file issue is being tracked here: https://github.com/facebook/osquery/issues/130. It's nothing to worry about.\n\nAny idea why com.oracle.java.Java-Updater.plist and homebrew.mxcl.rabbitmq.plist would exist on disk but not actually exist? \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56567903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56584665", "body": "Aha, looks like osquery doesn't handle symlinks properly. Nice find. I'm going to rename this issue to reflect that since #130 is already tracking the log permissions issue.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56584665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56603192", "body": "If you specify an int and give osquery a string, then the underlying platform will automatically make your value a \"-1\", which might be why you were never seeing any new data?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56603192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56615065", "body": "#150 \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56615065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56631635", "body": "Resolution is that, while we provide a script to help get your dependencies installed, we're not in the systems administrations business and leave resolving dependency conflicts to the user.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56631635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56631850", "body": "Added the thrift thread manager in #134. Renaming this to better represent the current task at hand.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56631850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56631968", "body": "This is going perfectly. Closing this out in the meanwhile.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56631968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56632011", "body": "Punting on this.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56632011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56632081", "body": "After looking into fbthrift, the dependency on folly alone is enough to make me want to stay away. Punting for now.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56632081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56632203", "body": "I'm going to unmilestone this until it becomes more actionable.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56632203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56643813", "body": "This was fixed in the PR to statically link RocksDB I believe.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56643813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56703482", "body": "@astanway https://github.com/facebook/osquery/blob/master/osquery/events/events_tests.cpp\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56703482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56761814", "body": "Closed in #165 \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56761814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56763817", "body": "I showed osquery to a guy from apple today and he commented that WiFI creds are stored in NVRAM, which is how you can access them from recovery mode. We ran a query against the NVRAM table and they weren't there.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56763817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56763862", "body": "I'm going to reopen since there's still a bunch of stuff in https://github.com/facebook/osquery/blob/master/include/osquery/events.h which isn't commented.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56763862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56767812", "body": "+1 big fan\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56767812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56854561", "body": "@sroberts can you run \"file\" on the offending files and paste the output here?\n\nWhen I do it, I get:\n\n```\n[marpaia-mbp] osquery (master) file /Library/LaunchAgents/com.oracle.java.Java-Updater.plist\n/Library/LaunchAgents/com.oracle.java.Java-Updater.plist: broken symbolic link to /Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Resources/com.oracle.java.Java-Updater.plist\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56854561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56855054", "body": "When I run:\n\n```\nosquery> select name from launchd limit 1;\nW0925 10:32:25.918228 1887642384 launchd.cpp:135] Error parsing /Library/LaunchDaemons/com.oracle.java.Helper-Tool.plist: File not found\nW0925 10:32:26.041718 1887642384 launchd.cpp:135] Error parsing /Library/LaunchAgents/com.oracle.java.Java-Updater.plist: File not found\n```\n\nBut they're actually legitimate errors which indicate something wrong with the perceived configuration of your operating system. \n\nI think this should stay the way it is. Perhaps the UEX of displaying the error could be different? @theopolis? @sroberts?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56855054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56857675", "body": "Do you still have your logs from this @astanway?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56857675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56866819", "body": "and it just stops running after that?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56866819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56870201", "body": "I changed the \"name\" column of the processes table to be an int (but it obv gets a string). The warning log is full of warnings, but everything seems to be working fine. I just get logs like this:\n\n```\n{\"diffResults\":{\"added\":[{\"name\":\"-1\",\"path\":\"\\/Users\\/marpaia\\/git\\/osquery\\/build\\/osquery\\/osqueryd\",\"pid\":\"70795\"}        ],\"removed\":[{\"name\":\"-1\",\"path\":\"\\/Users\\/marpaia\\/git\\/osquery\\/build\\/osquery\\/osqueryd\",\"pid\":\"70670\"}        ]},\"name\":\"processes\",\"hostname\":\"marpaia-mbp.local\",\"calendarTime\":\"Thu Sep 25 12:23:31 2014\",\"unixTime\":\"1411673011\"}\n```\n\nNotice how \"name\" is \"-1\".\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56870201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56873059", "body": "Gave it:\n\n```\nstd::string namer;\nr[\"name\"] = namer;\n```\n\nSame results\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56873059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56876452", "body": "Perhaps it was your table that was causing the crash? I'm going to close this for now. If you run into this again, I encourage you to open a reproduction Pull Request that we can look into.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56876452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56882128", "body": "Since those logs are actually relevant, I'm going to close this for now. If you think of a better way that we should message that error, we can re-open and re-explore the issue.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56882128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56882418", "body": "@theopolis and I have discussed this at length. The reason why table type is higher level than OS is because we want to promote the concept or writing cross platform tables. Ideally, your table spec should be in tables/specs/x/ and your implementation file shouldn't be in an operating system specific directory. This way, you can use preprocessor directives to enable the usage of OS specific APIs, while offering the tables across OS's.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56882418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56882821", "body": "Still not able to reproduce. Check out this diff for my repro attempt: https://github.com/facebook/osquery/pull/176/files\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56882821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56918797", "body": "## Before\n\n```\nosquery> select name, program || program_arguments as executable from launchd limit 5;\nname          executable\n------------  -------------------\nbootps.plist  /usr/libexec/bootpd\ncom.apple.af  /System/Library/Fil\ncom.apple.af  /System/Library/Fil\ncom.apple.Ai  /usr/libexec/AirPla\ncom.apple.ai  /usr/libexec/wps\nosquery> .tables\ntemp.alf                  temp.etc_hosts            temp.listening_ports\ntemp.alf_exceptions       temp.interface_addresses  temp.nvram\ntemp.alf_explicit_auths   temp.interface_details    temp.osx_version\ntemp.alf_services         temp.kextstat             temp.processes\ntemp.apps                 temp.last                 temp.routes\ntemp.ca_certs             temp.launchd              temp.time\n```\n\n## After\n\n```\nosquery> select name, program || program_arguments as executable from launchd limit 5;\n\n+----------------------------------+-------------------------------------------------------------------------------+\n| name                             | executable                                                                    |\n+----------------------------------+-------------------------------------------------------------------------------+\n| bootps.plist                     | /usr/libexec/bootpd                                                           |\n| com.apple.afpfs_afpLoad.plist    | /System/Library/Filesystems/AppleShare/afpLoad                                |\n| com.apple.afpfs_checkafp.plist   | /System/Library/Filesystems/AppleShare/check_afp.app/Contents/MacOS/check_afp |\n| com.apple.AirPlayXPCHelper.plist | /usr/libexec/AirPlayXPCHelper                                                 |\n| com.apple.airport.wps.plist      | /usr/libexec/wps                                                              |\n+----------------------------------+-------------------------------------------------------------------------------+\nosquery> .tables\n  => alf\n  => alf_exceptions\n  => alf_explicit_auths\n  => alf_services\n  => apps\n  => ca_certs\n  => etc_hosts\n  => interface_addresses\n  => interface_details\n  => kextstat\n  => last\n  => launchd\n  => listening_ports\n  => nvram\n  => osx_version\n  => processes\n  => routes\n  => time\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56918797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57019542", "body": "Yeah, we can do whatever we want\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57019542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57065911", "body": "LTTng looks really cool. @theopolis does it have feature parity / offer similar capabilities as DTrace on OS X? Could we maybe integrate each of them for each platform?\n\nLTTng seems to be able to do kernel tracing from it's userspace binary: https://lttng.org/files/doc/man-pages/man1/lttng.1.html\n\nHow do they do that? Do they load a kernel module? Or are they just making the most of userspace APIs?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57065911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57112321", "body": "That was the cmake policy that i was previously ignoring that you said brew update fixed? This should just be a warning though.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57112321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57112345", "body": "It's because we manually define \"make package\" and it's reserved, but that's actually \"the right\" thing to do.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57112345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55520795", "body": "so it'll work on the vagrant vm?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55520795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56632081", "body": "After looking into fbthrift, the dependency on folly alone is enough to make me want to stay away. Punting for now.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56632081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/62678273", "body": "Closing as I think we're done with this.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/62678273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55508404", "body": "#139\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55508404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55865366", "body": "#145 \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55865366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55865315", "body": "feel free to merge if you want, but `make deps` is going to go away when #145 is done (tomorrow hopefully).\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55865315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55930256", "body": "Theoretically, if you wanted this, you're just a Logger plugin away (one C++ function that sends a string somewhere). Check out the docs: https://github.com/facebook/osquery/blob/master/include/osquery/logger/plugin.h\n\nMore than the engineering effort involved (which is minimal), I have reservations about supporting this because of the operability/reliability questions that it leaves open. Let's assume that every time a result is logged, it is sent over async UDP (or TCP, doesn't matter). Consider the following:\n- What happens if the backend briefly goes down or a request gets lost in the tubes? With scribe, logstash, splunk, etc. there's buffering and retry's built in.\n- What happens if you scale post the point of what you can ingest on one machine? This is a big one. Your environment would have to be tiny for all of your requests to be handled by one instance.\n- If you needed to scale this, how do you load balance? HAProxy? F5's? Client-side round robin?\n\nI'm not religiously against this feature existing, although it should be worth noting that we spent a lot of time considering creating a thrift service internally to digest osquery logs and ultimately decided it wasn't a good idea, for a variety of reason, some of which are mentioned above. In order to support it, we'd basically have to turn osqueryd into a superset of scribed. And why would we do that when we can just use scribed?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55930256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55945829", "body": "My main concern is that I'm uncertain if we would want to encourage a solution which is unscalable though. Why not just configure syslogd and forward the logs to a central log host?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55945829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55994454", "body": "Can you add docblocks to all of the instance methods with @param and @return for all of the return types and parameters? If you want to merge and then comment it all later, that's cool too.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55994454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/67588618", "body": "@maus- do you have any interest in contributing that init script into github.com/facebook/osquery? looks awesome\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/67588618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56417831", "body": "@theopolis thoughts? I kind of like them where they are, because I often browse the generated tables while writing code.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56417831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56439183", "body": "Appropriately labeling. This will require a modification to \n- tools/gentable.py \n- tools/gentables.py\n- osquery/tables/CMakeLists.txt\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56439183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56417684", "body": "This is a non-configurable \"feature\" of Google Logging (https://code.google.com/p/google-glog/). Our options here are either:\n- submit a patch to glog\n- stop using glog\n\nI'm going to mark this as \"wontfix\" for now, as I have no plans to patch this and not using glog would be too large of an undertaking for right now.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56417684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56643813", "body": "This was fixed in the PR to statically link RocksDB I believe.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56643813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56567903", "body": "The logging file issue is being tracked here: https://github.com/facebook/osquery/issues/130. It's nothing to worry about.\n\nAny idea why com.oracle.java.Java-Updater.plist and homebrew.mxcl.rabbitmq.plist would exist on disk but not actually exist? \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56567903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56584665", "body": "Aha, looks like osquery doesn't handle symlinks properly. Nice find. I'm going to rename this issue to reflect that since #130 is already tracking the log permissions issue.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56584665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56854561", "body": "@sroberts can you run \"file\" on the offending files and paste the output here?\n\nWhen I do it, I get:\n\n```\n[marpaia-mbp] osquery (master) file /Library/LaunchAgents/com.oracle.java.Java-Updater.plist\n/Library/LaunchAgents/com.oracle.java.Java-Updater.plist: broken symbolic link to /Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Resources/com.oracle.java.Java-Updater.plist\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56854561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56855054", "body": "When I run:\n\n```\nosquery> select name from launchd limit 1;\nW0925 10:32:25.918228 1887642384 launchd.cpp:135] Error parsing /Library/LaunchDaemons/com.oracle.java.Helper-Tool.plist: File not found\nW0925 10:32:26.041718 1887642384 launchd.cpp:135] Error parsing /Library/LaunchAgents/com.oracle.java.Java-Updater.plist: File not found\n```\n\nBut they're actually legitimate errors which indicate something wrong with the perceived configuration of your operating system. \n\nI think this should stay the way it is. Perhaps the UEX of displaying the error could be different? @theopolis? @sroberts?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56855054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56882128", "body": "Since those logs are actually relevant, I'm going to close this for now. If you think of a better way that we should message that error, we can re-open and re-explore the issue.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56882128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56603192", "body": "If you specify an int and give osquery a string, then the underlying platform will automatically make your value a \"-1\", which might be why you were never seeing any new data?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56603192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56857675", "body": "Do you still have your logs from this @astanway?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56857675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56866819", "body": "and it just stops running after that?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56866819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56870201", "body": "I changed the \"name\" column of the processes table to be an int (but it obv gets a string). The warning log is full of warnings, but everything seems to be working fine. I just get logs like this:\n\n```\n{\"diffResults\":{\"added\":[{\"name\":\"-1\",\"path\":\"\\/Users\\/marpaia\\/git\\/osquery\\/build\\/osquery\\/osqueryd\",\"pid\":\"70795\"}        ],\"removed\":[{\"name\":\"-1\",\"path\":\"\\/Users\\/marpaia\\/git\\/osquery\\/build\\/osquery\\/osqueryd\",\"pid\":\"70670\"}        ]},\"name\":\"processes\",\"hostname\":\"marpaia-mbp.local\",\"calendarTime\":\"Thu Sep 25 12:23:31 2014\",\"unixTime\":\"1411673011\"}\n```\n\nNotice how \"name\" is \"-1\".\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56870201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56873059", "body": "Gave it:\n\n```\nstd::string namer;\nr[\"name\"] = namer;\n```\n\nSame results\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56873059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56876452", "body": "Perhaps it was your table that was causing the crash? I'm going to close this for now. If you run into this again, I encourage you to open a reproduction Pull Request that we can look into.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56876452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56882821", "body": "Still not able to reproduce. Check out this diff for my repro attempt: https://github.com/facebook/osquery/pull/176/files\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56882821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56615065", "body": "#150 \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56615065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/60473518", "body": "maybe tables too?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/60473518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56763862", "body": "I'm going to reopen since there's still a bunch of stuff in https://github.com/facebook/osquery/blob/master/include/osquery/events.h which isn't commented.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56763862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56763817", "body": "I showed osquery to a guy from apple today and he commented that WiFI creds are stored in NVRAM, which is how you can access them from recovery mode. We ran a query against the NVRAM table and they weren't there.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56763817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/facebook/osquery/comments/7710265", "body": "What do you mean?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7710265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8302948", "body": "what does a log sting look like out of this?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8302948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8352339", "body": "sigh, clang-format, we need to change `make format` to https://llvm.org/svn/llvm-project/cfe/trunk/tools/clang-format/git-clang-format one day soon. do you mind git reseting / git checkouting this file so that it doesn't get committed in this commit?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8352339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8352359", "body": "literally the first do/while in the codebase :) I was just chatting with someone last week about how it was surprising that we didn't have a do/while yet!\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8352359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8609139", "body": "exists.ok() evaluates to true if exists.ok() == 0 though\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8609139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8609144", "body": "we lexical cast int's to strings, not strings to ints, which is what this is\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8609144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8609145", "body": "i can change it though, it doesn't matter to me\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8609145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8609148", "body": "fair, i'll RM it\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8609148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8919904", "body": "thoughts on a timeout here? for the event that something were to cause recv to return 0 forever (could that ever happen?)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8919904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8919911", "body": ":tada: :tada:\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8919911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/9546232", "body": "RIP Tomcat </3\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/9546232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/13484410", "body": "forever lulz\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/13484410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15909325", "body": "Nope\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15909325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15909667", "body": "Ah, I see what you're saying. Yeah, I want there to literally be `{}` in the rendered code.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15909667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16098574", "body": "Can you remove the commented out includes?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16098574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16098837", "body": "I'm not really sure how cryptic the API that uses this as a callback is, but if it's rather straightforward to execute this with test data, it would be nice to have a test for it.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16098837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16192134", "body": "Ran into some issues that caused me to do this yesterday: http://stackoverflow.com/questions/25276107/nspropertylistserialization-propertylistwithdata-fails-with-binary-plist\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16192134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16192420", "body": "Yeah, system LaunchDaemons are pretty consistent.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16192420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16127205", "body": "Because I want the string to be blank in the event that no linked against kexts are found and this loop isn't entered.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16127205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16127269", "body": "No, because I'm passing linked_against as an arg. It's like the Python equivalent of:\n\n``` python\ns = \"%s>\" % s\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16127269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16131323", "body": "updated the diff\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16131323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16195282", "body": "if `dependencies != NULL` then `assert(linked_count != 0)`\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16195282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16195584", "body": "Fixed in https://github.com/facebook/osquery/commit/347319e583acf97a7ae69c90bbfb5055355ae69d\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16195584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16222785", "body": "to be safe, one should go and make sure this can't throw / catch an exception if necessary.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16222785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16222802", "body": "if the path is correct but the type is incorrect, is `pt::ptree_bad_path` the exception that's thrown?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16222802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16222805", "body": "same as line 46\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16222805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16222818", "body": "same as line 46\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16222818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16222827", "body": "same as line 46\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16222827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16222842", "body": "same as line 46\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16222842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16222853", "body": "move this one to the end of the list because it's last in alphabetical order\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16222853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16222868", "body": "change this to `process`\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16222868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16222875", "body": "underscores\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16222875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16227649", "body": "Change this error message\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16227649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16311895", "body": "`kAppsInfoPlistTopLevelStringKeys`\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16311895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16312021", "body": "`results.push_back(parseInfoPlist(path, tree));`\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16312021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16311817", "body": "`std::copy` \"throws if either an element assignment or an operation on iterators throws.\"\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16311817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16368408", "body": "can you turn this into:\n\n``` cpp\n#include <CoreFoundation/CFArray.h>\n#include <CoreFoundation/CoreFoundation.h>\n#include <Security/Security.h>\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16368408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16368479", "body": "Do you think forward declaring functions is worth it when you can just move your functions around?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16368479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16368560", "body": "Did clang-format add a space between that `!` and the `CFStringGetString`? If so, gross, but ok. If not, let's get that outta there.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16368560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16368630", "body": "same as above\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16368630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16369110", "body": "can you turn this into:\n\n``` cpp\n#include <iomanip>\n#include <string>\n\n#include <stdio.h>\n#include <stdlib.h>\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16369110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16369683", "body": "I have a function that returns a cstring from a CFString. We should probably add these utilities to core.h & core/test.cpp inside of an ifndef APPLE or something.Then we should write some tests for it.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16369683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16369759", "body": "This looks like it would be pretty easy to throw together a test for this by supplying a static value for kid.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16369759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16369847", "body": "Similarly testable.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16369847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16369876", "body": "Similarly testable.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16369876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16369939", "body": "This should be pretty straightforward to write a test for. Feel free to throw some certificate text in a raw string in core/test_util if you need.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16369939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16369983", "body": "perhaps a comment reminding users of this function to CFRelease the returned CFNumberRef\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16369983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16370025", "body": "Can you remove the space between the function name and the parens?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16370025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16370120", "body": "If you write a test case for the function above, you can probably re-use the SecCertificateRef. Also, should this be const ref?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16370120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16370217", "body": "const?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16370217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16370245", "body": "const?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16370245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16370272", "body": "const?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16370272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16370311", "body": "const?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16370311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16439086", "body": "(y)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16439086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16429592", "body": "Can you reorg these to be alphabetical in the following stanzas:\n- Specific implementation file's header (N/A here)\n- C++ headers\n- C headers\n- Boost headers\n- third-party headers\n- other osquery headers\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16429592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16429698", "body": "Can you change these comments to be `// C++ style` instead of `/* C style */`\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16429698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16458459", "body": "const?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16458459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16458460", "body": "const?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16458460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16458490", "body": "nit, but `const auto& route_type`\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16458490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16518280", "body": "Can you reverse the order of these such that iomanip is first?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16518280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16518292", "body": "Is this an error case? Might be nice to have a `LOG(ERROR)` here if so.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16518292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16518318", "body": "if you have a char[5], fill it up with \"foo\" and create a string out of it like this, the resulting string will be `\"foo  \"`. Do we want to trim surrounding whitespace? If so, boost/algorithm/trim.hpp (or something) has a nice trim function that I've used in another table for exactly this reason (kextstat maybe?)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16518318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16803518", "body": "this has to be changed back before merged\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16803518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16803579", "body": "change this to be Program key with just the daemon path. Default paths should be used.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16803579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16803593", "body": "Add a few example queries\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16803593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16803639", "body": "make this take the query from stdin\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16803639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/17333068", "body": "is this the same on centos and ubuntu?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/17333068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/17333080", "body": "this doesn't exist?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/17333080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/17494675", "body": "@lbrandy thanks for taking a look! yes, c++11 is definitely a requirement. You're totally right about the static instantiation of Dispatcher. One of the big reason why I would want to use a shared_ptr here is that the two other singletons in osquery also use shared_ptr, so I'd rather not have divergent patterns throughout the codebase at one time. Are there any unique advantages to using the above example that you could shed light on (ie- performance)? If so, I'd rather go ahead with this commit and then submit a diff after it lands converting _all_ of the singletons at once.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/17494675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/17708769", "body": "nit: can you make this event_types_ (https://our.intern.facebook.com/intern/wiki/index.php/CppStyle)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/17708769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/17708779", "body": "Can you const& the auto?\n\n`for (const auto& it = monitors.begin(); it != monitors.end(); it++) {`\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/17708779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/17708784", "body": "Can a homie get a s/NULL/nullptr/g\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/17708784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/17708800", "body": "You can remove this and just add `auto` to line 58\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/17708800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/17708833", "body": "I would say const& on the auto, but I'm uncertain if tearDown modifies the map? if not const&, then definitely &.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/17708833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/17708909", "body": "I wouldn't be completely against a macro like: `auto status = REGISTER_EVENT_TYPE(TestEventType);`\n\nAlso, it would be cool if you could make the ID thing (0 in this case) a virtual static member of the EventType base class so that\n- you don't have to pass it around to create a new one\n- you don't have to keep track of what int is what\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/17708909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/17931966", "body": "s/boost::make_shared/std::make_shared/g\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/17931966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/17932042", "body": "std::vectorstd::unique_ptr<std::thread> mayhaps?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/17932042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18121595", "body": "yessssss\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18121595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18360891", "body": "I seriously hope that they thought of this, but it might be worth checking out how adding CFString's onto a vector effects the reference count of the CFString. AFAIK, vector::push_back always calls the copy constructor of whatever you're pushing back.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18360891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18360960", "body": "should there be a return here? Otherwise you're going to use stream_ in 3 lines.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18360960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18361252", "body": "Do you need both `friend class FSEventsTests;` as well as `FRIEND_TEST`?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18361252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18361300", "body": "Does /private only work if you run the tests as root?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18361300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18361431", "body": "so much win.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18361431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18361454", "body": "sup with the differences in space widths here vs in green, red, lightred?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18361454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18366081", "body": "![screen shot 2014-10-02 at 1 37 48 pm](https://cloud.githubusercontent.com/assets/927168/4497924/fcada106-4a73-11e4-8106-e2275c99ae54.png)\n\nThe tab width is different in different functions.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18366081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18359118", "body": "This is why the build is failing. librt doesn't exist on OS X apparently. Why was this added?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18359118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18359180", "body": "Why are you compiling cmake with gcc?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18359180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18359236", "body": "can you break this out into a `install_boost` function?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18359236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18359305", "body": "Same here. Now that this is sufficiently complex, can you make a `install_gflags` function for this?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18359305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18359767", "body": "Yeah, I would say that we should try to stick to a single compiler as much as possible. If this is as simple as just moving \"package clang-3.4\" up a few lines to before the \"install_cmake\" line, then i'd say YOLO, go for it.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18359767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18374079", "body": "change this to fi.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18374079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18374123", "body": "ixnay this fi\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18374123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18474282", "body": "you can source lib.sh for these funcitons\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18474282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18474321", "body": "is you source lib.sh, you can do `if [[ \"$OS\" = \"darwin\" ]]; then` here (and substitute \"ubuntu\" and \"centos\" as appropriate. \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18474321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18474371", "body": "All of these would be the same on all platforms, except for this. on linux, it's libosquery.so instead of dylib.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18474371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18565036", "body": "can you change this comment block to be doxygen-esque:\n\n```\n/**\n * @brief deallocate the space allocated by readproc if the passed rbuf was NULL\n *\n * @param p The rbuf to free (or whatever this is)\n */\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18565036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18565051", "body": "I'm not a huge fan of the `_symbol` thing. Can this be named something more indicative of what it's doing? Why did you have to rewrite this? Was there a memory leak or something?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18565051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18565069", "body": "can you use C++ comments here:\n\n```\n    // ptrs are after strings to avoid copying memory when building them\n    // so free is called on the address of the address of strvec[0]\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18565069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18565077", "body": "nit style thing, but can you use braces for your if's, even though it's just one statement\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18565077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18565087", "body": "This line seems to be indented differently than the others\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18565087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18565109", "body": "What would happen if you left off the `.x86_64` here? Does it install a different package architecture?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18565109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18565124", "body": "RocksDB doesn't compile with clang on CentOS? If so, can you file an issue with https://github.com/facebook/rocksdb?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18565124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19689569", "body": "can you make this `const std::string kXattrQuarantine = \"com.apple.quarantine\";`\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19689569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19689599", "body": "can you move `Row r` into the loop\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19689599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19689618", "body": "this might read easier if you used `auto` to infer the type here\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19689618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19689747", "body": "maybe a `LOG(INFO)` or `LOG(WARNING)` here?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19689747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19694365", "body": "can you add a const here?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19694365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19694379", "body": "\\+ newline after this\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19694379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19689895", "body": "can you remove the whitespace after `#define` here?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19689895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19700975", "body": "can you change this to `osquery::Status parseAliasData(const std::string& data, std::string& filepath) {`\n\nif the path exists you can do `return Status(0, \"OK\")` and set filepath and if the data doesn't have what you need you can return `return Status(1, \"No file\")` or something \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19700975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583822", "body": "What was the motivation for this change?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583847", "body": "I would rather this accept a std::string and have the implementation call `.c_str()` on it\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583857", "body": "this column is indented more than the others\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583861", "body": "can you remove these comments?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583867", "body": "can you add a newline above this map definition?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583907", "body": "This is interesting. It's a bit different from how this is done in other parts of the codebase (https://github.com/facebook/osquery/blob/master/osquery/tables/system/darwin/apps.cpp#L36) but i don't hate it.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583911", "body": "@theopolis ?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583914", "body": "remove newline please :)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583949", "body": "can you move this to `osquery/core` or something? also, there are more users on the system that may not have homedirs in `/Users`. For example:\n\n```\nosquery> select username, directory from users where directory != '/var/empty';\n\n+----------------+-----------------------+\n| username       | directory             |\n+----------------+-----------------------+\n| _amavisd       | /var/virusmails       |\n| _astris        | /var/db/astris        |\n| _clamav        | /var/virusmails       |\n| _cyrus         | /var/imap             |\n| _geod          | /var/db/geod          |\n| _locationd     | /var/db/locationd     |\n| _lp            | /var/spool/cups       |\n| _networkd      | /var/networkd         |\n| _nsurlsessiond | /var/db/nsurlsessiond |\n| _postfix       | /var/spool/postfix    |\n| _securityagent | /var/db/securityagent |\n| _teamsserver   | /var/teamsserver      |\n| _usbmuxd       | /var/db/lockdown      |\n| _uucp          | /var/spool/uucp       |\n| _www           | /Library/WebServer    |\n| admin          | /Users/admin          |\n| cpe            | /private/var/cpe      |\n| daemon         | /var/root             |\n| marpaia        | /Users/marpaia        |\n| root           | /var/root             |\n+----------------+-----------------------+\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583974", "body": "please use `LOG(ERROR)` instead of `std::cerr`\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583980", "body": "this shouldn't be in  here, it should be a legitimate unit test: https://github.com/facebook/osquery/wiki/unit-tests\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583984", "body": "Again, unit test\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583991", "body": "remove newline\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583995", "body": "remove newline\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583999", "body": "`LOG(ERROR)` instead of `std::cerr`\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19583999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584007", "body": "use `for (const auto& it : row)`\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584010", "body": "remove commented code\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584017", "body": "use `LOG(ERROR)` instead of `std::cerr`\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19701059", "body": "No need to respond to all of the comments, they go away when you edit the code that has been commented on.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19701059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19694689", "body": "can you run clang-format on these files?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19694689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19694732", "body": "can you make these `std::string` instead of `char*`?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19694732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19694759", "body": "can you change these to C++ comments (`// foobar`) instead of C comments (`/* foobar */`)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19694759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19694771", "body": "prefer C++ comments please\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19694771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19694779", "body": "prefer C++ comments please\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19694779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19701204", "body": "nit, but sup with the space after the (\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19701204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19701207", "body": "maybe toss these in a vector and foreach by reference through them?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19701207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19701208", "body": "same with headerGet\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19701208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19701214", "body": "not sure what these are. maybe more descriptive variable names?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19701214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19695188", "body": "can you run clang-format on this?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19695188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19695207", "body": "please use `snprintf` instead of `sprintf`\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19695207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19695236", "body": "can you please do this with a std::string instead of mallocing a char*?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19695236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19695245", "body": "always prefer `nullptr` to `NULL`\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19695245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19695312", "body": "if this `if` isn't hit, will this leak?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19695312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19695327", "body": "nullptr please :)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19695327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19695339", "body": "would nullptr work here?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19695339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19695366", "body": "nullptr please :)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19695366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19695404", "body": "is there a way to support the iface column here to and merge these into 1 spec file?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19695404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19695423", "body": "can you put this inside the osquery::tables namespace?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19695423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19700954", "body": "Can you key the path off of the current path of the binary? For example, since this builds into `build/darwin/osquery/filesystem/darwin` can you put the plist in `tools/` and do like `$CURRENT_PATH/../../../../tools/test_binary.plist` or something.\n\nAlso, please commit the test plist.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19700954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19701007", "body": "boom, missed that, cool\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19701007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19760830", "body": "Changed it to use std::find, but the time complexity is the same: http://www.cplusplus.com/reference/algorithm/find/\n\nI'll add a comment to the header declaration.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19760830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19760950", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19760950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19775436", "body": "Sorry for missing this last time, can you change the signature of this to `void add_address(struct rt_msghdr *rtm, QueryData& results)`. Note the difference in the type of `results`. Generally, for C++ values, prefer references to pointers. Then you'll have to change `results->push_back(r);` to `results.push_back(r);`\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19775436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19775465", "body": "Like I said above, once you change results to be a reference instead of a pointer, you can change `results->push_back(r);` to `results.push_back(r);`\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19775465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19775529", "body": "this will be used in the resulting dataset, right? I would opt to leave it blank if it can't be computed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19775529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19775589", "body": "Are you just reading file content here? If so, you should check out https://github.com/facebook/osquery/blob/master/include/osquery/filesystem.h#L26\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19775589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19775628", "body": "As per @theopolis' comment, it's probably best to omit iface and merge these into one spec in `osquery/tables/specs/x/`\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19775628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19770255", "body": "Can you add braces to the if statements? I know it's not necessary, so more for consistent style\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19770255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19776190", "body": "Can you trim these down so that there's no whitespace on the edges. That happens when you convert fixed length char*'s to std::string's. Check out https://github.com/facebook/osquery/blob/6dee18c29c989b0810a9bc9fa953dc7540f634a5/osquery/tables/system/darwin/kextstat.cpp#L52-L53 for an example.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19776190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584087", "body": "can you run clang-format on this when you get a chance\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584127", "body": "I'd prefer if this returned an `osquery::Status` instead of throwing. We try not to throw unless we ABSOLUTELY have to.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584128", "body": "same here with the throw\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584135", "body": "const int?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584139", "body": "can you break these up onto multiple lines?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584150", "body": "I'm not really sure what this all is supposed to be doing. the APIs aren't that clear. can we get some doxygen comments for each of the functions and maybe some inline comments for the complex bits? at first glance, `while(1)` looks scary.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584155", "body": "Can you use `LOG(ERROR)` instead of `std::cout`\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584181", "body": "I'm pretty anti `using`. Can we not import the whole namespace here?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584197", "body": "can you move this initialization into the for loop?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584200", "body": "silly nit, but can you do `err == -1` here instead?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584209", "body": "Are you free'ing this?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584224", "body": "can you remove this and use `auto` when you populate the var for the first time?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584240", "body": "this is unnecessary if you do `char* foo = (char*)malloc(1337);`\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584250", "body": "this too\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19584250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19818407", "body": "What's up with `.find(\"self\")`?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19818407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19818668", "body": "More of an information question, genuinely uncertain.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19818668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20203763", "body": "I'm assuming this will get hit if there's no blacklist? If so, can you catch IOError explicitly so that this doesn't accidentally swallow another error?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20203763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20203770", "body": "rm the pass?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20203770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20203779", "body": "Do we not want to prefix the var in the generated C++ with an underscore or something to get rid of reserved keywords?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20203779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20309956", "body": "Brute*\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20309956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20457232", "body": "Can you run clang-format on this?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20457232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20457256", "body": "Can you change these to be all-lowercase snake case?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20457256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20458702", "body": "If this is a big blocker, don't worry about it. Just make your if statements have no newline before the bracket, and we'll take care of the rest after merging.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20458702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20484682", "body": "if something went wrong with the population of handles_, it could perhaps? more defensive coding than anything else really.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20484682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20411580", "body": "You could probably let this fall down into the else, since this sets the same flags (except for the FREEBSD flag, but since `${CMAKE_SYSTEM_NAME}` is already \"FreeBSD\", you can always set `FREEBSD` out of band if you need to.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20411580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "cryps1s": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3924", "title": "Include root/default namespace for wmi tables", "body": "The current WMI tables only look at the root/subscription namespace for consumers, filters, and bindings. Attackers, however, can also use the root/default namespace for their persistence. \r\n\r\nCan we please update the following tables to also look in the root/default namespace: \r\n\r\n- wmi_cli_event_consumers\r\n- wmi_event_filters\r\n- wmi_filter_consumer_binding\r\n- wmi_script_event_consumers\r\n\r\nSource: \r\nhttps://gist.github.com/mattifestation/e55843eef6c263608206", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "keeleysam": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3923", "title": "aws kinesis max record size can be too much for slow connections", "body": "I fly a lot, which means I experience a lot of internet connections which are fairly stable but have a lot of latency, jitter, packet loss, etc.  Basically these connections can range anywhere from something like dialup with low latency but limited bandwidth to 4G like connections but with high latency.\r\n\r\nThe kinesis plugins don't like this when there's a lot to send up, and I end up seeing things like this in my logs:\r\n\r\n```\r\nI1114 08:03:23.299619 153759744 scheduler.cpp:135] Found results for query: pack_mac_os_x_asl\r\nE1114 08:03:44.971904 150003712 aws_util.cpp:207] Exception making HTTP request to URL (https://firehose.us-east-1.amazonaws.com): std::exception\r\nE1114 08:03:46.869402 150540288 aws_util.cpp:207] Exception making HTTP request to URL (https://kinesis.us-east-1.amazonaws.com): std::exception\r\nE1114 08:04:01.052817 150003712 aws_util.cpp:207] Exception making HTTP request to URL (https://firehose.us-east-1.amazonaws.com): std::exception\r\nE1114 08:04:02.936187 150540288 aws_util.cpp:207] Exception making HTTP request to URL (https://kinesis.us-east-1.amazonaws.com): std::exception\r\nI1114 08:04:15.411522 150003712 aws_log_forwarder.h:217] aws_firehose: Successfully sent 500 out of 500 log records\r\nE1114 08:04:19.054230 150540288 aws_util.cpp:207] Exception making HTTP request to URL (https://kinesis.us-east-1.amazonaws.com): std::exception\r\nI1114 08:04:33.451310 150540288 aws_log_forwarder.h:217] aws_kinesis: Successfully sent 500 out of 500 log records\r\nE1114 08:04:41.840770 150003712 aws_util.cpp:207] Exception making HTTP request to URL (https://firehose.us-east-1.amazonaws.com): std::exception\r\nI1114 08:04:55.824175 150003712 aws_log_forwarder.h:217] aws_firehose: Successfully sent 500 out of 500 log records\r\nE1114 08:05:02.480053 150540288 aws_util.cpp:207] Exception making HTTP request to URL (https://kinesis.us-east-1.amazonaws.com): std::exception\r\nI1114 08:05:14.894963 150003712 aws_log_forwarder.h:217] aws_firehose: Successfully sent 252 out of 252 log records\r\nE1114 08:05:18.534128 150540288 aws_util.cpp:207] Exception making HTTP request to URL (https://kinesis.us-east-1.amazonaws.com): std::exception\r\nE1114 08:05:34.713716 150540288 aws_util.cpp:207] Exception making HTTP request to URL (https://kinesis.us-east-1.amazonaws.com): std::exception\r\n```\r\n\r\nEventually the logs get uploaded, but osquery spends a lot of time trying to upload blobs of data which are going to error out, and then retrying over and over which eats up the limited bandwidth where it shouldn't be doing this.\r\n\r\nI think that osquery should catch this exception and back off on the number of records during this time so they go through successfully.\r\n\r\nFrom my extremely unscientific observations, I've never seen any bundle of under 50 records error out, but on poor connections the bundles in the hundreds error out at least 90 percent of the time.\r\n\r\nThis would also probably apply to people tethering on their phones and in other poor internet situations.\r\n\r\nOn a good connection, the current batching works just fine, so I wouldn't want to cap it at 50 instead of 500 as that has implications on the other end.\r\n\r\ncc @jacknagz @mimeframe \r\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/58af0b7477db763a821ecdae289396f0e39f7ded", "message": "Add version to usb_devices table (#3840)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ricardobruno": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3920", "title": "Files Open with Write Permissions Trigger \"UPDATED\" Action When No Changes Are Made", "body": "Hello Everyone,\r\nIt's a special day! After years of being an Open Source user, today is the first time I'm posting a public GitHub issue to an Open Source project. I'm still figuring out how to best contribute, so please be nice! ;-)\r\n\r\n**Issue Summary:**\r\nIn the Linux Operating System, if a file is open with a file descriptor that has write permissions, upon closing that file, an `UPDATED` action event is triggered in osquery, even though there were no changes made to the original file. This issue can generate numerous false positive osquery `UPDATED` alerts in certain environments.\r\n\r\n\r\n**Detailed Description:**\r\nWhen a file is opened with write permissions, and closed, the current behavior of `inotify` in the Linux Kernel is to trigger an `IN_CLOSE_WRITE` event. That occurs even when no changes are made to that file.\r\nThe current behavior of [osquery inotify.cpp / kMaskActions](https://github.com/facebook/osquery/blob/inotify-noise-reduction/osquery/events/linux/inotify.cpp#L36-L46) is to map these`IN_CLOSE_WRITE` events to `UPDATED`, relying on the `IN_CLOSE_WRITE` event as if it was an authoritative indicator of file changes.\r\n\r\nThe [Linux Kernel Header for inotify](https://github.com/torvalds/linux/blob/master/include/uapi/linux/inotify.h#L33) describes the `IN_CLOSE_WRITE` event as writable file was closed, but it doesn't go as far as saying that the file was modified:\r\n```C\r\n#define IN_CLOSE_WRITE\t\t0x00000008\t/* Writtable file was closed */\r\n```\r\nThis behavior results in numerous false positive events, as applications open files with write permissions, and close these files without any modification.\r\nI'm not sure how to best solve this, so I'm posting here hoping to get some smart eyes on it.\r\nThough I have limited expertise in this codebase, I would be happy to help further review, and validate this issue, and hopefully come up with a solution.\r\n\r\n**Keywords:**\r\n```\r\nduplicate events\r\ninaccurate UPDATE events\r\ninotify\r\nkMaskActions\r\nIN_MODIFY\r\nIN_CLOSE_WRITE\r\n```\r\n \r\n**Tested osquery Version:**\r\n```\r\n$ rpm -q osquery\r\nosquery-2.6.1-1.linux.x86_64\r\n\r\nosquery> select version,build_platform,build_distro  from time, osquery_info;\r\n+---------+----------------+--------------+\r\n| version | build_platform | build_distro |\r\n+---------+----------------+--------------+\r\n| 2.6.1   | ubuntu         | xenial       |\r\n+---------+----------------+--------------+\r\n```\r\n**Operating System Information:**\r\n```\r\n$ cat /etc/redhat-release\r\nCentOS Linux release 7.3.1611 (Core)\r\n\r\n$ cat /proc/version\r\nLinux version 3.10.0-514.26.2.el7.x86_64 (builder@kbuilder.dev.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-11) (GCC) ) #1 SMP Tue Jul 4 15:04:05 UTC 2017\r\n```\r\n\r\n**Script to Reproduce Events:**\r\n(*) Requires the `pyinotify` module: (`pip install pyinotify`)\r\n```python\r\n#!/usr/bin/env python\r\nimport os\r\nimport time\r\nimport pyinotify\r\n\r\n\r\ndef get_inotify_events(notifier):\r\n    \"\"\"Retrieves acumulated inotify watched events\"\"\"\r\n    assert notifier._timeout is not None, 'Notifier must have a short timeout'\r\n    notifier.process_events()\r\n    # loop in case more events show up while processing\r\n    while notifier.check_events():\r\n        notifier.read_events()\r\n        notifier.process_events()\r\n\r\n\r\ndef main():\r\n    \"\"\" Main Program Handler \"\"\"\r\n\r\n    # Sample file to be watched\r\n    filename = \"/tmp/testopenrw-nowrites.txt\"\r\n    file = open(filename, \"a+\")\r\n    file.close()\r\n\r\n    # Creates New Instance of WatchManager to Store Events Being Watched\r\n    watch_manager = pyinotify.WatchManager()\r\n\r\n    # Add a new watch specific to FILENAME for ALL_EVENTS\r\n    watch_manager.add_watch(filename, pyinotify.ALL_EVENTS)\r\n\r\n    # Associate WatchManager with a Notifier to report and process events\r\n    notifier = pyinotify.Notifier(watch_manager, timeout=3)\r\n\r\n    number_of_attempts = 5\r\n    print(\"Opening %s with RW, and closing without changes %s times...\" % (\r\n                                             filename, number_of_attempts))\r\n    for count in range(number_of_attempts):\r\n        print (\"\\nOpening file(rw), closing file(no writes) #%s\" % (count+1))\r\n        file = open(filename, \"r+\")\r\n        stattest = os.stat(filename)\r\n        print(\"%s\" % (stattest))\r\n        file.close()\r\n        time.sleep(1)\r\n        get_inotify_events(notifier)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n**Script Output:**\r\n```\r\n # python testopenrw-nowrites.py\r\nOpening /tmp/testopenrw-nowrites.txt with RW, and closing without changes 5 times...\r\n\r\nOpening file(rw), closing file(no writes) #1\r\nposix.stat_result(st_mode=33188, st_ino=6928449, st_dev=51713L, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=1510347872, st_mtime=1510347872, st_ctime=1510347872)\r\n<Event dir=False mask=0x20 maskname=IN_OPEN name='' path=/tmp/testopenrw-nowrites.txt pathname=/tmp/testopenrw-nowrites.txt wd=1 >\r\n<Event dir=False mask=0x8 maskname=IN_CLOSE_WRITE name='' path=/tmp/testopenrw-nowrites.txt pathname=/tmp/testopenrw-nowrites.txt wd=1 >\r\n<Event dir=False mask=0x20 maskname=IN_OPEN name='' path=/tmp/testopenrw-nowrites.txt pathname=/tmp/testopenrw-nowrites.txt wd=1 >\r\n<Event dir=False mask=0x10 maskname=IN_CLOSE_NOWRITE name='' path=/tmp/testopenrw-nowrites.txt pathname=/tmp/testopenrw-nowrites.txt wd=1 >\r\n\r\nOpening file(rw), closing file(no writes) #2\r\nposix.stat_result(st_mode=33188, st_ino=6928449, st_dev=51713L, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=1510347872, st_mtime=1510347872, st_ctime=1510347872)\r\n<Event dir=False mask=0x20 maskname=IN_OPEN name='' path=/tmp/testopenrw-nowrites.txt pathname=/tmp/testopenrw-nowrites.txt wd=1 >\r\n<Event dir=False mask=0x8 maskname=IN_CLOSE_WRITE name='' path=/tmp/testopenrw-nowrites.txt pathname=/tmp/testopenrw-nowrites.txt wd=1 >\r\n<Event dir=False mask=0x20 maskname=IN_OPEN name='' path=/tmp/testopenrw-nowrites.txt pathname=/tmp/testopenrw-nowrites.txt wd=1 >\r\n<Event dir=False mask=0x10 maskname=IN_CLOSE_NOWRITE name='' path=/tmp/testopenrw-nowrites.txt pathname=/tmp/testopenrw-nowrites.txt wd=1 >\r\n\r\nOpening file(rw), closing file(no writes) #3\r\nposix.stat_result(st_mode=33188, st_ino=6928449, st_dev=51713L, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=1510347872, st_mtime=1510347872, st_ctime=1510347872)\r\n<Event dir=False mask=0x20 maskname=IN_OPEN name='' path=/tmp/testopenrw-nowrites.txt pathname=/tmp/testopenrw-nowrites.txt wd=1 >\r\n<Event dir=False mask=0x8 maskname=IN_CLOSE_WRITE name='' path=/tmp/testopenrw-nowrites.txt pathname=/tmp/testopenrw-nowrites.txt wd=1 >\r\n<Event dir=False mask=0x20 maskname=IN_OPEN name='' path=/tmp/testopenrw-nowrites.txt pathname=/tmp/testopenrw-nowrites.txt wd=1 >\r\n<Event dir=False mask=0x10 maskname=IN_CLOSE_NOWRITE name='' path=/tmp/testopenrw-nowrites.txt pathname=/tmp/testopenrw-nowrites.txt wd=1 >\r\n\r\nOpening file(rw), closing file(no writes) #4\r\nposix.stat_result(st_mode=33188, st_ino=6928449, st_dev=51713L, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=1510347872, st_mtime=1510347872, st_ctime=1510347872)\r\n<Event dir=False mask=0x20 maskname=IN_OPEN name='' path=/tmp/testopenrw-nowrites.txt pathname=/tmp/testopenrw-nowrites.txt wd=1 >\r\n<Event dir=False mask=0x8 maskname=IN_CLOSE_WRITE name='' path=/tmp/testopenrw-nowrites.txt pathname=/tmp/testopenrw-nowrites.txt wd=1 >\r\n<Event dir=False mask=0x20 maskname=IN_OPEN name='' path=/tmp/testopenrw-nowrites.txt pathname=/tmp/testopenrw-nowrites.txt wd=1 >\r\n<Event dir=False mask=0x10 maskname=IN_CLOSE_NOWRITE name='' path=/tmp/testopenrw-nowrites.txt pathname=/tmp/testopenrw-nowrites.txt wd=1 >\r\n\r\nOpening file(rw), closing file(no writes) #5\r\nposix.stat_result(st_mode=33188, st_ino=6928449, st_dev=51713L, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=1510347872, st_mtime=1510347872, st_ctime=1510347872)\r\n<Event dir=False mask=0x20 maskname=IN_OPEN name='' path=/tmp/testopenrw-nowrites.txt pathname=/tmp/testopenrw-nowrites.txt wd=1 >\r\n<Event dir=False mask=0x8 maskname=IN_CLOSE_WRITE name='' path=/tmp/testopenrw-nowrites.txt pathname=/tmp/testopenrw-nowrites.txt wd=1 >\r\n<Event dir=False mask=0x20 maskname=IN_OPEN name='' path=/tmp/testopenrw-nowrites.txt pathname=/tmp/testopenrw-nowrites.txt wd=1 >\r\n<Event dir=False mask=0x10 maskname=IN_CLOSE_NOWRITE name='' path=/tmp/testopenrw-nowrites.txt pathname=/tmp/testopenrw-nowrites.txt wd=1 >\r\n```\r\n\r\n**Sample OS Query logs from /var/log/osquery/osqueryd.results.log:**\r\n```json\r\n{\r\n  \"name\": \"file_events\",\r\n  \"hostIdentifier\": \"ip-10-150-145-77\",\r\n  \"calendarTime\": \"Fri Nov 10 21:05:10 2017 UTC\",\r\n  \"unixTime\": \"1510347910\",\r\n  \"epoch\": \"0\",\r\n  \"decorations\": {\r\n    \"host_uuid\": \"---redacted host_uuid---\",\r\n    \"username\": \"---redacted username---\"\r\n  },\r\n  \"columns\": {\r\n    \"action\": \"CREATED\",\r\n    \"atime\": \"1510347872\",\r\n    \"category\": \"tmp\",\r\n    \"ctime\": \"1510347872\",\r\n    \"gid\": \"0\",\r\n    \"hashed\": \"1\",\r\n    \"inode\": \"6928449\",\r\n    \"md5\": \"d41d8cd98f00b204e9800998ecf8427e\",\r\n    \"mode\": \"0644\",\r\n    \"mtime\": \"1510347872\",\r\n    \"sha1\": \"da39a3ee5e6b4b0d3255bfef95601890afd80709\",\r\n    \"sha256\": \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\r\n    \"size\": \"0\",\r\n    \"target_path\": \"\\/tmp\\/testopenrw-nowrites.txt\",\r\n    \"time\": \"1510347872\",\r\n    \"transaction_id\": \"0\",\r\n    \"uid\": \"0\"\r\n  },\r\n  \"action\": \"added\"\r\n} {\r\n  \"name\": \"file_events\",\r\n  \"hostIdentifier\": \"ip-10-150-145-77\",\r\n  \"calendarTime\": \"Fri Nov 10 21:05:10 2017 UTC\",\r\n  \"unixTime\": \"1510347910\",\r\n  \"epoch\": \"0\",\r\n  \"decorations\": {\r\n    \"host_uuid\": \"---redacted host_uuid---\",\r\n    \"username\": \"---redacted username---\"\r\n  },\r\n  \"columns\": {\r\n    \"action\": \"UPDATED\",\r\n    \"atime\": \"1510347872\",\r\n    \"category\": \"tmp\",\r\n    \"ctime\": \"1510347872\",\r\n    \"gid\": \"0\",\r\n    \"hashed\": \"1\",\r\n    \"inode\": \"6928449\",\r\n    \"md5\": \"d41d8cd98f00b204e9800998ecf8427e\",\r\n    \"mode\": \"0644\",\r\n    \"mtime\": \"1510347872\",\r\n    \"sha1\": \"da39a3ee5e6b4b0d3255bfef95601890afd80709\",\r\n    \"sha256\": \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\r\n    \"size\": \"0\",\r\n    \"target_path\": \"\\/tmp\\/testopenrw-nowrites.txt\",\r\n    \"time\": \"1510347872\",\r\n    \"transaction_id\": \"0\",\r\n    \"uid\": \"0\"\r\n  },\r\n  \"action\": \"added\"\r\n} {\r\n  \"name\": \"file_events\",\r\n  \"hostIdentifier\": \"ip-10-150-145-77\",\r\n  \"calendarTime\": \"Fri Nov 10 21:05:10 2017 UTC\",\r\n  \"unixTime\": \"1510347910\",\r\n  \"epoch\": \"0\",\r\n  \"decorations\": {\r\n    \"host_uuid\": \"---redacted host_uuid---\",\r\n    \"username\": \"---redacted username---\"\r\n  },\r\n  \"columns\": {\r\n    \"action\": \"UPDATED\",\r\n    \"atime\": \"1510347872\",\r\n    \"category\": \"tmp\",\r\n    \"ctime\": \"1510347872\",\r\n    \"gid\": \"0\",\r\n    \"hashed\": \"1\",\r\n    \"inode\": \"6928449\",\r\n    \"md5\": \"d41d8cd98f00b204e9800998ecf8427e\",\r\n    \"mode\": \"0644\",\r\n    \"mtime\": \"1510347872\",\r\n    \"sha1\": \"da39a3ee5e6b4b0d3255bfef95601890afd80709\",\r\n    \"sha256\": \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\r\n    \"size\": \"0\",\r\n    \"target_path\": \"\\/tmp\\/testopenrw-nowrites.txt\",\r\n    \"time\": \"1510347873\",\r\n    \"transaction_id\": \"0\",\r\n    \"uid\": \"0\"\r\n  },\r\n  \"action\": \"added\"\r\n} {\r\n  \"name\": \"file_events\",\r\n  \"hostIdentifier\": \"ip-10-150-145-77\",\r\n  \"calendarTime\": \"Fri Nov 10 21:05:10 2017 UTC\",\r\n  \"unixTime\": \"1510347910\",\r\n  \"epoch\": \"0\",\r\n  \"decorations\": {\r\n    \"host_uuid\": \"---redacted host_uuid---\",\r\n    \"username\": \"---redacted username---\"\r\n  },\r\n  \"columns\": {\r\n    \"action\": \"UPDATED\",\r\n    \"atime\": \"1510347872\",\r\n    \"category\": \"tmp\",\r\n    \"ctime\": \"1510347872\",\r\n    \"gid\": \"0\",\r\n    \"hashed\": \"1\",\r\n    \"inode\": \"6928449\",\r\n    \"md5\": \"d41d8cd98f00b204e9800998ecf8427e\",\r\n    \"mode\": \"0644\",\r\n    \"mtime\": \"1510347872\",\r\n    \"sha1\": \"da39a3ee5e6b4b0d3255bfef95601890afd80709\",\r\n    \"sha256\": \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\r\n    \"size\": \"0\",\r\n    \"target_path\": \"\\/tmp\\/testopenrw-nowrites.txt\",\r\n    \"time\": \"1510347873\",\r\n    \"transaction_id\": \"0\",\r\n    \"uid\": \"0\"\r\n  },\r\n  \"action\": \"added\"\r\n} {\r\n  \"name\": \"file_events\",\r\n  \"hostIdentifier\": \"ip-10-150-145-77\",\r\n  \"calendarTime\": \"Fri Nov 10 21:05:10 2017 UTC\",\r\n  \"unixTime\": \"1510347910\",\r\n  \"epoch\": \"0\",\r\n  \"decorations\": {\r\n    \"host_uuid\": \"---redacted host_uuid---\",\r\n    \"username\": \"---redacted username---\"\r\n  },\r\n  \"columns\": {\r\n    \"action\": \"UPDATED\",\r\n    \"atime\": \"1510347872\",\r\n    \"category\": \"tmp\",\r\n    \"ctime\": \"1510347872\",\r\n    \"gid\": \"0\",\r\n    \"hashed\": \"1\",\r\n    \"inode\": \"6928449\",\r\n    \"md5\": \"d41d8cd98f00b204e9800998ecf8427e\",\r\n    \"mode\": \"0644\",\r\n    \"mtime\": \"1510347872\",\r\n    \"sha1\": \"da39a3ee5e6b4b0d3255bfef95601890afd80709\",\r\n    \"sha256\": \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\r\n    \"size\": \"0\",\r\n    \"target_path\": \"\\/tmp\\/testopenrw-nowrites.txt\",\r\n    \"time\": \"1510347874\",\r\n    \"transaction_id\": \"0\",\r\n    \"uid\": \"0\"\r\n  },\r\n  \"action\": \"added\"\r\n} {\r\n  \"name\": \"file_events\",\r\n  \"hostIdentifier\": \"ip-10-150-145-77\",\r\n  \"calendarTime\": \"Fri Nov 10 21:05:10 2017 UTC\",\r\n  \"unixTime\": \"1510347910\",\r\n  \"epoch\": \"0\",\r\n  \"decorations\": {\r\n    \"host_uuid\": \"---redacted host_uuid---\",\r\n    \"username\": \"---redacted username---\"\r\n  },\r\n  \"columns\": {\r\n    \"action\": \"UPDATED\",\r\n    \"atime\": \"1510347872\",\r\n    \"category\": \"tmp\",\r\n    \"ctime\": \"1510347872\",\r\n    \"gid\": \"0\",\r\n    \"hashed\": \"1\",\r\n    \"inode\": \"6928449\",\r\n    \"md5\": \"d41d8cd98f00b204e9800998ecf8427e\",\r\n    \"mode\": \"0644\",\r\n    \"mtime\": \"1510347872\",\r\n    \"sha1\": \"da39a3ee5e6b4b0d3255bfef95601890afd80709\",\r\n    \"sha256\": \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\r\n    \"size\": \"0\",\r\n    \"target_path\": \"\\/tmp\\/testopenrw-nowrites.txt\",\r\n    \"time\": \"1510347875\",\r\n    \"transaction_id\": \"0\",\r\n    \"uid\": \"0\"\r\n  },\r\n  \"action\": \"added\"\r\n} {\r\n  \"name\": \"file_events\",\r\n  \"hostIdentifier\": \"ip-10-150-145-77\",\r\n  \"calendarTime\": \"Fri Nov 10 21:05:10 2017 UTC\",\r\n  \"unixTime\": \"1510347910\",\r\n  \"epoch\": \"0\",\r\n  \"decorations\": {\r\n    \"host_uuid\": \"---redacted host_uuid---\",\r\n    \"username\": \"---redacted username---\"\r\n  },\r\n  \"columns\": {\r\n    \"action\": \"UPDATED\",\r\n    \"atime\": \"1510347872\",\r\n    \"category\": \"tmp\",\r\n    \"ctime\": \"1510347872\",\r\n    \"gid\": \"0\",\r\n    \"hashed\": \"1\",\r\n    \"inode\": \"6928449\",\r\n    \"md5\": \"d41d8cd98f00b204e9800998ecf8427e\",\r\n    \"mode\": \"0644\",\r\n    \"mtime\": \"1510347872\",\r\n    \"sha1\": \"da39a3ee5e6b4b0d3255bfef95601890afd80709\",\r\n    \"sha256\": \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\r\n    \"size\": \"0\",\r\n    \"target_path\": \"\\/tmp\\/testopenrw-nowrites.txt\",\r\n    \"time\": \"1510347876\",\r\n    \"transaction_id\": \"0\",\r\n    \"uid\": \"0\"\r\n  },\r\n  \"action\": \"added\"\r\n}\r\n```\r\n\r\n**Additional Information:**\r\nThe [inotify FAQ](http://inotify.aiken.cz/?section=inotify&page=faq&lang=en) goes over why we need to track both `IN_MODIFY`, and `IN_CLOSE_WRITE` events. \r\nI don't see any mention in the FAQ that `IN_CLOSE_WRITE` will also be raised when a writable file is closed without modifications.\r\n\r\n**Notes / Ideas / Possible Workarounds:**\r\n- This seems to be a combination of something bubbling up from the upstream Linux Kernel implementation of inotify, along with osquery's reliance certain assumptions of the inotify behavior.\r\n- On the osquery side, I've seen hundreds of thousands of these `UPDATED` events, some with completely the same exact message, and others with just the timestamp changed even though no changes were made.\r\n- There may be a workaround in creating a sql query that would minimize the display repeated false positive events.\r\n- Figure out additional logic that would compare a `IN_CLOSE_WRITE` event with a previous similar event, if any, and determine whether there was an actual change. If there was an actual change the `IN_CLOSE_WRITE` reference in [osquery inotify.cpp kMaskActions](https://github.com/facebook/osquery/blob/inotify-noise-reduction/osquery/events/linux/inotify.cpp#L36-L46) would conditionally map to something like `UPDATED` if a change can be confirmed, or `CLOSED` if no change was made.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dcode": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3916", "title": "More robust support for Kafka producer", "body": "librdkafka has pretty robust support for the Kafka protocol, but the current configuration options available in osquery are quite limiting. Namely, it'd be nice to have SSL and SASL support. I think one of the easiest ways to support this would be to offer passthrough of librdkafka options like several other tools do (e.g. kafkacat, https://github.com/edenhill/kafkacat/blob/master/kafkacat.c#L930).\r\n\r\nAdditionally, librdkafka has pretty good error handling that you could pass through to the user in the same way that you do with existing configuration options. You could just loop over the options (like here: https://github.com/facebook/osquery/blob/master/osquery/logger/plugins/kafka_producer.cpp#L163-L171).\r\n\r\nLastly, when you compile librdkafka, it'd be great if you could link libsasl. My use-case is >20,000 endpoints that are all kerberized...ideally I'd like to have them push to a kafka cluster (which they already do) over TLS that is authenticated via kerberos. For now, it's plaintext kafka, which is less than ideal.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "echeng622": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3915", "title": "Windows SQL error: Failed to expand globs: Failed to open registry handle", "body": "When running this command:\r\n>SELECT name, startup_items.path, hash.md5 FROM startup_items LEFT JOIN hash ON startup_items.path = hash.path;\r\n\r\nIt returns the correct results, but also gives an error:\r\n>I1108 13:57:42.863242  8108 registry.cpp:569] Failed to expand globs: Failed to open registry handle\r\n\r\n\r\nOS & Version:\r\n>osquery 2.9.0 using SQLite 3.19.3\r\n>Windows 10 VM", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fincham": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3912", "title": "The chrome_extensions table doesn't seem to find extensions in Chromium", "body": "Hi all,\r\n\r\nOn my Debian stretch and Ubuntu xenial machines this plugin returns empty even though Chromium is installed.\r\n\r\nI assume it's looking in the wrong place in the filesystem.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "qxsomeone": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3896", "title": "can I change the timezone displayed in osquery.results.log?", "body": "{\"name\":\"logged_in_users\",\"hostIdentifier\":\"vulnerabilityverify2test-vbj01c-1\",\"calendarTime\":\"Mon Oct 30 03:00:41 2017 UTC\",\"unixTime\":\"1509332441\",\"epoch\":\"0\",\"counter\":\"807\",\"columns\":{\"host\":\"172.20.0.233\",\"pid\":\"2301\",\"time\":\"1509332151\",\"tty\":\"pts\\/0\",\"type\":\"user\",\"user\":\"root\"},\"action\":\"added\"}\r\n\r\nif I want to change the \"calendarTime\":\"Mon Oct 30 03:00:41 2017 UTC\" to GMT+08:00 ,what should I do? thanks.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "javuto": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3891", "title": "Snapshot empty results return empty string and not empty list", "body": "### Context\r\n\r\nWhen running a snapshot query, the field `snapshot` usually returns a list of the columns queried. But if the results are empty, the return value in JSON is a empty string `\"\"` instead of an empty list `[]`, so further processing of the logs can be problematic.\r\n\r\n### Steps to reproduce\r\n\r\nHaving a linux system with osquery 2.9.0 installed from the deb package:\r\n```\r\nroot@vagrant:~# osqueryi -version\r\nosqueryi version 2.9.0\r\n```\r\n\r\nUsing this sample configuration in `/etc/osquery/osquery.conf`:\r\n```\r\n{\r\n  \"options\": {\r\n    \"config_plugin\": \"filesystem\",\r\n    \"logger_plugin\": \"filesystem\",\r\n    \"logger_path\": \"/tmp/osquery\",\r\n    \"database_path\": \"/tmp/osquery/osquery.db\",\r\n    \"utc\": \"true\"\r\n  },\r\n  \"schedule\": {\r\n    \"testing_bug\": {\r\n      \"query\": \"SELECT path FROM file WHERE directory = '/tmp/osquery/testing_bug/';\",\r\n      \"snapshot\": true,\r\n      \"interval\": \"10\"\r\n    }\r\n  }\r\n}\r\n```\r\nThe results of the snapshot query show the field `snapshot` to be an empty string:\r\n```\r\nroot@vagrant:~# cat /tmp/osquery/osqueryd.snapshots.log | tail -1\r\n{\"snapshot\":\"\",\"action\":\"snapshot\",\"name\":\"testing_bug\",\"hostIdentifier\":\"vagrant\",\"calendarTime\":\"Thu Oct 26 18:27:55 2017 UTC\",\"unixTime\":\"1509042475\",\"epoch\":\"0\",\"counter\":\"0\"}\r\n```\r\nAnd if I generate data that is not emtpy, it shows as a list:\r\n```\r\nroot@vagrant:~# touch /tmp/osquery/testing_bug/lol\r\nroot@vagrant:~# cat /tmp/osquery/osqueryd.snapshots.log | tail -1\r\n{\"snapshot\":[{\"path\":\"\\/tmp\\/osquery\\/testing_bug\\/lol\"}],\"action\":\"snapshot\",\"name\":\"testing_bug\",\"hostIdentifier\":\"vagrant\",\"calendarTime\":\"Thu Oct 26 18:28:58 2017 UTC\",\"unixTime\":\"1509042538\",\"epoch\":\"0\",\"counter\":\"0\"}\r\n```\r\n\r\nIdeal outcome is that the empty field would be an empty list `\"snapshot\":\"[]\"`\r\n\r\nSimilar behavior can be seen in the field `diffResults` but I haven't managed to reproduce it yet. \r\nI believe the problem can be isolated in the usage of ptree when the results get serialized, in `osquery/core/query.cpp`.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3891/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/f256c3a75c3e825ec59c35a2a24d4866a7f618c6", "message": "Pointing tables/schema documentation to new locations (#3878)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/72be785f1b2c1ca56d95685a24684483e552435f", "message": "provision: Exiting with a message if DEPS_DIR exists (#3877)"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54561209", "body": "This addresses issue #7 \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54561209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54582011", "body": "Here it is:\n\n$ valgrind --tool=memcheck --leak-check=yes --suppressions=osquery.supp ./build/tools/run --query=\"select \\* from last;\"\n==64879== Memcheck, a memory error detector\n==64879== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.\n==64879== Using Valgrind-3.9.0 and LibVEX; rerun with -h for copyright info\n==64879== Command: ./build/tools/run --query=select\\ *\\ from\\ last;\n==64879==\n==64879== WARNING: Support on MacOS 10.8/10.9 is experimental and mostly broken.\n==64879== WARNING: Expect incorrect results, assertions and crashes.\n==64879== WARNING: In particular, Memcheck on 32-bit programs will fail to\n==64879== WARNING: detect any errors associated with heap-allocated data.\n==64879==\n--64879-- ./build/tools/run:\n--64879-- dSYM directory is missing; consider using --dsymutil=yes\nCould not create logging file: No such file or directory\nCOULD NOT CREATE A LOGGINGFILE 20140904-204624.64879!I0904 20:46:24.932832 24425232 run.cpp:17] Executing: select \\* from last;\nI0904 20:46:30.310756 24425232 run.cpp:23] Query succedded\n==64879==\n==64879== HEAP SUMMARY:\n==64879==     in use at exit: 336,357 bytes in 1,341 blocks\n==64879==   total heap usage: 97,428 allocs, 96,087 frees, 16,171,958 bytes allocated\n==64879==\n==64879== LEAK SUMMARY:\n==64879==    definitely lost: 0 bytes in 0 blocks\n==64879==    indirectly lost: 4,096 bytes in 2 blocks\n==64879==      possibly lost: 0 bytes in 0 blocks\n==64879==    still reachable: 6,033 bytes in 11 blocks\n==64879==         suppressed: 326,228 bytes in 1,328 blocks\n==64879== Reachable blocks (those to which a pointer was found) are not shown.\n==64879== To see them, rerun with: --leak-check=full --show-leak-kinds=all\n==64879==\n==64879== For counts of detected and suppressed errors, rerun with: -v\n==64879== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 201813 from 178)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54582011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54583686", "body": "GO GO GO GO!\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54583686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54694054", "body": "You would prefer a single vtable for users and groups? It makes sense actually, colums could be: gid, uid, user, group, info, shell, home\nNot sure if providing if the user has password in /etc/shadow is useful, we can just add it\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54694054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18359681", "body": "Because clang is not installed yet. I can try install clang first and just use it without gcc...\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18359681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18615387", "body": "The problem here was he function \"freeproc\" being in procps3 but not in previous versions, and no other way to check when building osquery, so the solution is to add the function to the actual code and call our own function. Using just free may cause leaks.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18615387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18615439", "body": "I just checked and we can remove the .x86_64 so it will be valid too for 32 bit systems\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/18615439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "npratley": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3740", "title": "Add an selinux_events table", "body": "When process auditing is enabled on Linux, SELinux events, which are normally logged by auditd to /var/log/audit/audit.log, are lost. It would be great if these events could be handled by osquery and put in an selinux_events table.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mattjane-okta": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3718", "title": "Add decorators to distributed queries", "body": "Decorators are (typically) information I'd like to have included in each query, regardless of if its regularly scheduled or distributed.  This is especially important for long-term storage of distributed queries, where you may want to keep a history record of what \"special\" queries you ran against a given box.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rhonnava": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3706", "title": "osquery still all logs to fleet manager after buffered_log_max is set", "body": "When using TLS log plugin to log events into a central fleet manager, if the fleet manager goes down for sometime and comes back up again, there will be suddenly gush of logs being logged into the fleet manager (the backed up logs on each of the nodes running osqueryd daemons) which could bring it down again, especially in an environment managing a large number of nodes. Even if buffered_log_max is set all the logs are attempted again and then logs are purged in the local database. (going by the implementation in BufferedLogForwarder::check()). It would help to have a --force option to clean up the logs piled up on the osquery end and not attempt to send it.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "erdarun": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3692", "title": "File events exclude_paths not working with hidden(dot) files and temporary(tilde) files at all depth levels", "body": "We want exclude_paths to skip all hidden(.)/temporary(~) files under \"/usr/bin/\" or \"/usr/sbin/\" at every depth.\r\n\r\neg: /usr/bin/.123, /usr/bin/folder/.123, /usr/bin/folder/folder/.123, etc ... \r\n\r\nI have tried exclude_paths with following patterns,\r\n\r\n```\r\n\"file_paths\": {\r\n    \"user\": [\r\n      \"/usr/sbin/%%\",\r\n      \"/usr/bin/%%\"\r\n    ]\r\n},\r\n\"exclude_paths\": {\r\n    \"user\": [\r\n      \"/usr/sbin/.%\", \r\n      \"/usr/bin/.%\", \r\n      \"/usr/sbin/%~\", \r\n      \"/usr/bin/%~\"\r\n      \"/usr/bin/temp/\"\r\n    ]\r\n  }\r\n```\r\n\r\n**/usr/bin/.% or /usr/sbin/.%** exhibits 3 different behaviours\r\n\r\n- All the file changes of /usr/bin/ & /usr/sbin/ changes not monitored for file events\r\n\r\n- Everything is monitored even hidden(dotted) files\r\n\r\n- Only hidden(dotted) files are monitored\r\n\r\n**/usr/bin/%~ or /usr/sbin/%~** doesn't skip file events for temporary files like ending with tilde symbol\r\n\r\n**/usr/bin/temp/** folder files are ignored as expected\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "doe-john": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3649", "title": "pack's queries unable to select from views on macos", "body": "Found issue while executing scheduled queries from packs using views. Steps to reproduce:\r\n\r\n1. create view v_process from processes table in osquery.conf\r\n```\r\n\"views\": {\r\n    \"v_process\": \"SELECT * FROM processes;\"\r\n  }\r\n```\r\n2.  create pack `pack` with scheduled query `get_processes`\r\n``` \r\n{\r\n  \"queries\": {\r\n    \"get_processes\" : {\r\n      \"query\": \"SELECT * FROM v_process\",\r\n      \"interval\": 300\r\n    }\r\n  }\r\n}\r\n```\r\n3. get an error\r\n`E0905 15:10:49.021666 259887104 scheduler.cpp:79] Error executing scheduled query pack_pack_get_processes: Error running query: no such table: v_process`\r\n\r\nAlso checked on debian and ubuntu, everything is ok. So seems problem only on macos. Views work correctly if queries placed in osquery.conf and not in separate pack file. And it doesn't work if views placed alongside with queries in pack file.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "thedrow": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3609", "title": "Roadmap to C++17", "body": "GCC already [supports everything](https://gcc.gnu.org/projects/cxx-status.html#cxx1z) C++17 has introduced. Clang's [implementation is still partial but nearly complete](https://clang.llvm.org/cxx_status.html#cxx17).\r\nThe C++17 standard is not yet finalized so this issue is not very urgent.\r\nAt some point, I think we should drop older C++ versions.\r\n\r\nWe should devise a plan to upgrade our compilers and test osquery that is compiled with `-std=c++1z`.\r\nContributors should review code and add TODOs where code can be optimized to use the new C++ features.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3608", "title": "QueryResults and Row are polymorphic/templated", "body": "As evident by https://github.com/facebook/osquery/pull/3607/files#diff-6969dd080e64e82d3068b136bb67d57aR27 QueryResults is not flexible enough.\r\nSince we know the exact amount of results ahead of time we can use an `std::array` to return them.\r\nInstead we require a vector which is not necessary and wastes precious CPU cycles on heap allocations.\r\nFurthermore, this issue is related to #3606 since we want to provide table implementors with the flexibility to choose the appropriate containers for their tables and rows.\r\n\r\nI'd prefer a way to template the type of QueryResults and Row but if there is no choice we can use polymorphism to provide this flexibility.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3606", "title": "Investigate using persistent & immutable data structures", "body": "[Immer](https://sinusoid.es/immer/index.html) is a C++ library that provides persistent and immutable data structures.\r\nQueryResults could benefit from these kind of data structures since we only insert new data and never modify previously inserted data.\r\nImmer does not provide a map data type as of yet but https://github.com/arximboldi/immer/issues/7 is tracking the progress of implementation.\r\nIf any of you have ideas where else we can benefit from persistent & immutable data structures I'd love to hear about it.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3605", "title": "Link with jemalloc by default", "body": "jemalloc is a much more effiecient allocator and since we have some threads it will improve the overall performance of osquery.\r\njemalloc 5.0 dropped support for valgrind so we'd need to adjust our profiling tools.\r\njemalloc is not supported on Windows as far as I know so we'd need to make jemalloc an optional dependency that is only linked to osquery on POSIX systems.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3381", "title": "Set packs using the Remote Settings API", "body": "The Remote Settings API only allows to either schedule queries to be executed immediately or using the schedule.\r\nYou cannot activate or deactivate query packs using the Remote Settings API AFAICT.\r\nThis feature should be supported.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3293", "title": "One-shot queries on boot", "body": "Currently if a user wants to report something when OSQuery is started he/she needs to send a distributed query after osqueryd enrolls to the server.\r\nIt can be useful to add one-shot queries to the schedule that will be executed as soon as the schedule is read and parsed.\r\nThis is a good usecase for tables like system information, kernel version or other immutable data that is reported once anyway in snapshot mode.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/2636", "title": "Remote Settings Protocol is not RESTful", "body": "Currently we transmit the enrollment secret as part of the request's body and report authorization errors using the response's body.\nWe also identify nodes by a \"node_key\" which is reported during enrollment.\nI think we are reinventing the wheel here and it's completely unnecessary.\nWe can use the OAuth2 protocol for enrollment and the bearer token for node identification.\nThat way, the protocol will be more easily understood and implemented using known and already implemented mechanisms such as OAuth2 servers. The rest of the protocol can build on top of it using the HTTP statuses defined by OAuth2 to report authorization errors.\n\nThe enrollment process will simply be an OAuth2 `client_credentials` grant which will be exchanged for an OAuth2 `Bearer token`.\n\nMoreover, requests should not be retried when the server report 4xx status codes since the server reports the request as invalid for any reason.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/2190", "title": "Add journald logger", "body": "journald is part of the systemd stack and is widely used for system logging and log forwarding.\nI think we should add a logger plugin for it.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/595fd11284d8e6d49cf0191beae61e54eef059ec", "message": "tables: augeas: Remove trailing slash from /files prefix (#3967)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/6aa2648472d7584957d0d58db488400d8f257ee4", "message": "Augeas table performance imporvements (#3911)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/1cfe9bb5288d94667525860ef63b489ddd270097", "message": "Known hosts table performance improvements (#3679)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/1dcd3773f2a4bae98d0c32649528630489d76088", "message": "Load average table performance improvements (#3607)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/68358065", "body": "Oh yes, it slipped through. Sorry.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/68358065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/68358244", "body": "If len > 0 then the matches array is filled. I can add an assertion that matches is not NULL if len is above zero if needed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/68358244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/68359777", "body": "We can also report an error if `len < 0`. What's the API to do so?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/68359777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/68506107", "body": "CLion added this automatically. Not sure if it's required for the augeas tests to run.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/68506107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/69002608", "body": "Is it multiline? I thought it just concats the error message.\nI think we need to report what went wrong.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/69002608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/69002791", "body": "libfa is part of libaugeas and it won't link without it.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/69002791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/69002881", "body": "libaugeas requires it on Linux (at least on Ubuntu). No idea why though.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/69002881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jaredledvina": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3468", "title": "Flag to purge existing audit rules on startup", "body": "Currently, it appears that osqueryd will load the following rules:\r\n```\r\n# auditctl -l\r\n-a always,exit -S execve\r\n-a always,exit -S bind\r\n-a always,exit -S connect\r\n```\r\n\r\nHowever, we've seen that if there are existing rules loaded, when starting osquery they aren't purged causing some inconsistencies across our systems. With other applications that use the kernel audit functionality, we've had the following bit in the `audit.rules`:\r\n```\r\n# cat /etc/audit/rules.d/audit.rules\r\n\r\n# This file contains the auditctl rules that are loaded\r\n# whenever the audit daemon is started via the initscripts.\r\n# The rules are simply the parameters that would be passed\r\n# to auditctl.\r\n\r\n# First rule - delete all\r\n-D\r\n\r\n.....continue on to rules....\r\n```\r\n\r\nCould osqueryd have an optional flag that would configure it to purge all existing rules from the system on start? \r\n\r\nCurrent `osquery.flags` config:\r\n```\r\n# cat /etc/osquery/osquery.flags\r\n--disable_audit=false\r\n--audit_allow_config=true\r\n--audit_persist=true\r\n--audit_allow_sockets\r\n--logger_plugin=syslog\r\n--events_max=100000\r\n--watchdog_memory_limit=350\r\n--events_expiry=1\r\n```\r\n\r\nRunning OSQuery 2.5.0 on CentOS release 6.9 (Final) and CentOS Linux release 7.3.1611 (Core)\r\n\r\nHappy to provide any details I might have missed above! \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mew1033": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3372", "title": "Allow more complicated output with --json", "body": "Here's an example query (with a `LIMIT 1` to only see one process):\r\n\r\n    SELECT t.iso_8601 AS _time,\r\n           p.name AS process,\r\n           p.pid AS process_id,\r\n           p.cmdline,\r\n           p.cwd,\r\n           p.on_disk,\r\n           p.resident_size AS mem_used,\r\n           p.parent,\r\n           g.groupname,\r\n           g.gid AS group_id,\r\n           u.username AS USER,\r\n           u.uid AS user_id,\r\n           eu.username AS effective_username,\r\n           eg.groupname AS effective_groupname,\r\n           p.path,\r\n           h.md5,\r\n           h.sha1,\r\n           h.sha256,\r\n          (SELECT json_group_array(json_object('fd',pof.fd, 'path',pof.path))\r\n           FROM process_open_files AS pof\r\n           WHERE pof.pid=p.pid\r\n           GROUP BY pof.pid) AS openfiles\r\n    FROM processes AS p\r\n    LEFT JOIN users AS u ON p.uid=u.uid\r\n    LEFT JOIN users AS eu ON p.euid=eu.uid\r\n    LEFT JOIN groups AS g ON p.gid=g.gid\r\n    LEFT JOIN groups AS eg ON p.gid=eg.gid\r\n    LEFT JOIN hash AS h ON p.path=h.path\r\n    LEFT JOIN time AS t\r\n    WHERE parent IS NOT 2\r\n      AND (process NOTNULL\r\n           OR parent NOTNULL) LIMIT 1;\r\n\r\nRun this with --json and this is the output I get:\r\n\r\n    [\r\n      {\r\n        \"USER\": \"root\",\r\n        \"_time\": \"2017-06-01T17:34:43Z\",\r\n        \"cmdline\": \"/sbin/init\",\r\n        \"cwd\": \"/\",\r\n        \"effective_groupname\": \"root\",\r\n        \"effective_username\": \"root\",\r\n        \"group_id\": \"0\",\r\n        \"groupname\": \"root\",\r\n        \"md5\": \"177d0701225011e4daca0be3f49eb5d7\",\r\n        \"mem_used\": \"940000\",\r\n        \"on_disk\": \"1\",\r\n        \"openfiles\": \"[{\\\"fd\\\":0,\\\"path\\\":\\\"/dev/null\\\"},{\\\"fd\\\":1,\\\"path\\\":\\\"/dev/null\\\"},{\\\"fd\\\":2,\\\"path\\\":\\\"/dev/null\\\"}]\",\r\n        \"parent\": \"0\",\r\n        \"path\": \"/sbin/init\",\r\n        \"process\": \"init\",\r\n        \"process_id\": \"1\",\r\n        \"sha1\": \"16338f95b772078cf5b81145d81fa00a5a5d4895\",\r\n        \"sha256\": \"903789c5f25b7098f0fa6d0b25f1b97e6823671317cfda8f5ea915de6a04cf87\",\r\n        \"user_id\": \"0\"\r\n      }\r\n    ]\r\n\r\nMakes sense. The \"openfiles\" column includes a string that is the json representation of all the open files. However, what I actually want is this:\r\n\r\n    [\r\n      {\r\n        \"USER\": \"root\",\r\n        \"_time\": \"2017-06-01T17:34:43Z\",\r\n        \"cmdline\": \"/sbin/init\",\r\n        \"cwd\": \"/\",\r\n        \"effective_groupname\": \"root\",\r\n        \"effective_username\": \"root\",\r\n        \"group_id\": \"0\",\r\n        \"groupname\": \"root\",\r\n        \"md5\": \"177d0701225011e4daca0be3f49eb5d7\",\r\n        \"mem_used\": \"940000\",\r\n        \"on_disk\": \"1\",\r\n        \"openfiles\": [\r\n          {\r\n            \"fd\": 0,\r\n            \"path\": \"/dev/null\"\r\n          },\r\n          {\r\n            \"fd\": 1,\r\n            \"path\": \"/dev/null\"\r\n          },\r\n          {\r\n            \"fd\": 2,\r\n            \"path\": \"/dev/null\"\r\n          }\r\n        ],\r\n        \"parent\": \"0\",\r\n        \"path\": \"/sbin/init\",\r\n        \"process\": \"init\",\r\n        \"process_id\": \"1\",\r\n        \"sha1\": \"16338f95b772078cf5b81145d81fa00a5a5d4895\",\r\n        \"sha256\": \"903789c5f25b7098f0fa6d0b25f1b97e6823671317cfda8f5ea915de6a04cf87\",\r\n        \"user_id\": \"0\"\r\n      }\r\n    ]\r\n\r\nI want the \"openfiles\" object to be a list of other objects. This is quite easy to represent in json, but I have no idea how to represent it in SQL. I suspect it's not possible.\r\n\r\nOne option I've toyed with is creating a wrapper function that converts specific columns from a json string to actual json (string to python object in python).", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mime-frame": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3327", "title": "bug: syslog - Received fewer fields than expected in line", "body": "**What**\r\n\r\nWe just started getting errors like the following: `Received fewer fields than expected in line: 95871+00:00\",\"i-82c5b41b\",\"6\",\"authpriv\",\"CRON[17240]:\",\" pam_unix(cron:session): session opened for user root by (uid=0)\"`\r\n\r\nRunning osquery v2.4.2, utilizing rsyslog + the `syslog` table.\r\n\r\nRelevant line provided in the error:\r\n\r\nhttps://github.com/facebook/osquery/blob/master/osquery/events/linux/syslog.cpp#L173\r\n\r\nRelevant supporting code: \r\n\r\nhttps://github.com/facebook/osquery/blob/master/osquery/events/linux/syslog.cpp#L187-L213\r\n\r\n**Impact**\r\n\r\nUnknown\r\n\r\n**Number of impacted machines**\r\n\r\nLess than a dozen", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3327/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3223", "title": "Package query profiler into osqueryctl", "body": "From: @jacknagz \r\n\r\nIt would be extremely useful to package in the query profiler into `osqueryctl`\r\n\r\nWe noticed a set of roles that were eating up more memory/cpu than others, but we had no easy way to just profile the config for that specific role. As a result, we had to clone the facebook/osquery repo, install some python deps, and do a one-off. I found that was really helpful in identifying which query was taking up more CPU/MEM than on other roles", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3223/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3105", "title": "last - return delta (change) vs. all results", "body": "https://osquery.io/docs/tables/#last\r\n\r\nHave `last` return the delta/differential vs. the entire results each time", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3104", "title": "shell_history - return delta (change) vs. all results", "body": "https://osquery.io/docs/tables/#shell_history\r\n\r\nHave `shell_history` return the delta/differential vs. the entire results each time\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "guillemj": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3323", "title": "deb_packages is not (or should not be) Linux specific", "body": "Hi!\r\n\r\nJust found out about this project (via LWN), and while checking it out noticed the deb_packages \"module\" which sits under a linux hierarchy. But strictly speaking dpkg is not Linux-specific, it is being used in many POSIX-like OSes, some of which use it as their primary package manager. See the list of porting targets https://wiki.debian.org/Teams/Dpkg/Porting, and of known downstreams https://wiki.debian.org/Teams/Dpkg/Downstream (not all of which use it as their primary package manager though).\r\n\r\nOf course the path to the database is hardcoded and will not work on several of those systems, so besides moving it from linux to osix, you should probably change the  dpkg_db_set_dir() call to pass a NULL which will make it use the default or get it from the DPKG_ADMINDIR environment variable if set.\r\n\r\nBTW, I'm interested in general in current pain points with the libdpkg API, so if you have any issues, I'd like to know to try to make it easier for external parties to use. :)\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "spasam": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3255", "title": "sudoers implementation does not process #include and #includedir directives", "body": "sudoers implementation should iterate through directories and files specified using **#include** and **#includedir** \r\n\r\nOtherwise the contents of the table are misleading and incomplete.\r\n\r\nFollowing text copied from Ubuntu 16.04 sudoers man page:\r\n\r\n**Including other files from within sudoers**\r\n\r\nIt is possible to include other sudoers files from within the sudoers file currently being parsed using the #include and #includedir directives.\r\n\r\nThis can be used, for example, to keep a site-wide sudoers file in addition to a local, per-machine file.  For the sake of this example the site-wide sudoers file will be /etc/sudoers and the per-machine one will be /etc/sudoers.local.  To include /etc/sudoers.local from within /etc/sudoers we would use the following line in /etc/sudoers:\r\n\r\n         #include /etc/sudoers.local\r\n\r\nWhen sudo reaches this line it will suspend processing of the current file (/etc/sudoers) and switch to /etc/sudoers.local.  Upon reaching the end of /etc/sudoers.local, the rest of /etc/sudoers will be processed.  Files that are included may themselves include other files.  A hard limit of 128 nested include files is enforced to prevent include file loops.\r\n\r\nIf the path to the include file is not fully-qualified (does not begin with a \u2018/\u2019, it must be located in the same directory as the sudoers file it was included from.  For example, if /etc/sudoers contains the line:\r\n\r\n         #include sudoers.local\r\n\r\nthe file that will be included is /etc/sudoers.local.\r\n\r\nThe file name may also include the %h escape, signifying the short form of the host name.  In other words, if the machine's host name is \u201cxerxes\u201d, then\r\n\r\n         #include /etc/sudoers.%h\r\n\r\nwill cause sudo to include the file /etc/sudoers.xerxes.\r\n\r\nThe #includedir directive can be used to create a sudoers.d directory that the system package manager can drop sudoers file rules into as part of package installation.  For example, given:\r\n\r\n         #includedir /etc/sudoers.d\r\n\r\nsudo will read each file in /etc/sudoers.d, skipping file names that end in \u2018~\u2019 or contain a \u2018.\u2019 character to avoid causing problems with package manager or editor temporary/backup files.  Files are parsed in sorted lexical order.  That is, /etc/sudoers.d/01_first will be parsed before /etc/sudoers.d/10_second.  Be aware that because the sorting is lexical, not numeric, /etc/sudoers.d/1_whoops would be loaded after /etc/sudoers.d/10_second.  Using a consistent number of leading zeroes in the file names can be used to avoid such problems.\r\n\r\nNote that unlike files included via #include, visudo will not edit the files in a #includedir directory unless one of them contains a syntax error.  It is still possible to run visudo with the -f flag to edit the files directly, but this will not catch the redefinition of an alias that is also present in a different file.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/f60e900b9a411668551d50522bb00593875a5f76", "message": "Upgrade OpenSSL to 1.0.2m and cacert PEM file to latest (#3981)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/1c141995a361893f678b6bf4cfc07d57b9e0ab50", "message": "Kafka SSL support (#3921)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/40eaddb088bd91af2d3bd2058b27628d042acbaf", "message": "build: Add OSQUERY_NOSUDO to build without sudo (#3789)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/97b2c3e76d96175555f9cdb192ee14a74ab554a4", "message": "website: Split example SQL (#3730)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/b6e50c505043f2ae92926210b6b4b0bd97a8f314", "message": "Avoid unnecessary ptree allocation. (#3726)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/7df1f699431ae81b510791d87a57da84f90bc371", "message": "Vagrant tweaks and SuSE support (#3714)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/168cb327f245bd520d326fcbf612678059547a0d", "message": "Add official vagrant targets for ubuntu/centos. (#3712)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/6fab8b60839d8c640fc3826e97c8cf2950f1d89e", "message": "logging: adding \"counter\" to differentiate initial results (#3651)\n\nWhen setting up alerts for differential logs data you might want to skip the\r\ninitial added records. counter can be used to identify if the added records\r\nare all records from initial query of if they are new records. For initial\r\nquery results that includes all records counter will be \"0\". For subsequent\r\nquery executions counter will be incremented by 1. When epoch changes, counter\r\nwill be reset back to \"0\"."}, {"url": "https://api.github.com/repos/facebook/osquery/commits/863cd72e17388d3950d999a94b1fde8b9b58ddc3", "message": "AWS code refactoring. (#3660)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/140623264", "body": "Ok. I will add it back. I guess that makes `package git` redundant then? Because `make sysprep` will fail with `Problem: cannot find 'git'` before it can install it", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/140623264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/141520478", "body": "What about add() for bool/double value? May be there are only couple of places they might be relevant!", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/141520478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/150452380", "body": "@theopolis Thanks for your comments. I was modeling these configuration properties after:\r\nhttps://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md\r\n\r\nSome one opened a issue about supporting SASL and other options. Possible values supported by librdkafka are: plaintext, ssl, sasl_plaintext, sasl_ssl. Until SASL support is built into librdkafka formula we won't be able to add these extra options. Hence I left this as string instead of boolean.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/150452380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/150452455", "body": "What about using these values as default and letting user override them if necessary?", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/150452455/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/150452901", "body": "I would have preferred to just take any kafka_* CLI option and pass it directly to librdkafka (after converting underscore to period). That way users can add whatever they want. But I didn't see a easy way to do this with gflags.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/150452901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/150453279", "body": "Yes, I think that should be default value. But I am guessing some of the users are probably using self signed certificates. So might want to override the value. Do you want them to update certs.pem? Or should we keep this option for overriding?", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/150453279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/151606437", "body": "Add version?", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/151606437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/154546068", "body": "@diptanu How is this better (or possibly worse) than container cp (get file) option? /var/lib/dpkg/status seem to contain all the necessary information!", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/154546068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/154818829", "body": "@diptanu Thanks. If the plan is to supporting additional containers etc, wouldn't it be better to rename: docker_deb_packages -> container_packages (one table for both deb/rpm etc and not be tied to docker)\r\n\r\nI haven't spent time looking into the details of nsOp/fork. What happens to connections to TLS server, currently executing queries, handles to glog/rocksdb etc? This would pose problems, if the forked process starts reporting query results etc.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/154818829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "chilcote": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3233", "title": "Network proxies", "body": "Need to report on any proxies configured (macOS).  There does not seem to be an item in any table for this. Is this in the cards?", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stouset": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3232", "title": "Integration with `mdfind` / Spotlight on macOS", "body": "It would be very useful to have a table that allows querying Spotlight (possibly via `mdfind`) on macOS boxes.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "thomasareed": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3212", "title": "osqueryd misses changes if directories do not exist at start", "body": "On macOS Sierra (10.12), create an osquery.conf file with the following contents:\r\n\r\n```\r\n{\r\n  \"schedule\": {\r\n    \"file_events\": {\r\n      \"query\": \"select * from file_events;\",\r\n      \"removed\": false,\r\n      \"interval\": 10\r\n    }\r\n  },\r\n  \"file_paths\": {\r\n    \"test\": [\r\n      \"/foo/bar/%\"\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nStart osqueryd.\r\n\r\nIf the /foo/bar/ path exists, any changes in bar will be logged as expected.\r\n\r\nHowever, if either foo or bar is missing at the time osqueryd launched, and then the full /foo/bar/ path is created after osqueryd is running, then any changes in bar after that point are not logged, unless osqueryd is terminated and relaunched.\r\n\r\nExpected behavior: After the path is created, changes should be logged, without needing to restart osqueryd. From testing, this appears to be how osqueryd functions on Linux.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "obelisk": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3164", "title": "Eschewing boost::ptree and moving to RapidJSON", "body": "boost::ptree is slow, clunky and doesn't suit our use case very well anymore. ptree will happily generate the invalid JSON seen below given the right input to the property tree. This is not the fault of property trees really, but in the fact that they are meant to be a very generic container, more generic than JSON would normally allow.\r\n```json\r\n{\r\n    \"\" : {},\r\n    \"\" : {}\r\n}\r\n```\r\nThe solution proposed is to move to a native JSON library, of which there are many, but this is a prototype for RapidJSON. The referenced branch in my own fork of osquery ports `acceptWork` in a transparent method (the entire method has its code altered and the normal code path uses this updated function) and the `serializeQueryResults` call chain in a non transparent manner (osquery is unaffected, it is only utilized by the benchmarks).\r\n\r\nIf we decide to go ahead with this it will be a major API change, with many code mods across the code base. Tests will need to be rewritten, functions will have their prototypes changed, and future pull requests that use ptrees will be looked at with suspicion.\r\n\r\nTo ease this transition, it has been suggested to create osquery::JSONObject as a wrapper around raw RapidJSON documents. This hasn't been done yet but you can see how it would work, just replace every instance of ptree or rapidjson::Document with osquery::JSONObject. This will also help people navigate using RapidJSON's default move constructors (as opposed to copy constructors) without leaving dangling pointers or having things erroneously freed.\r\n\r\nFinally let's talk about speed. RapidJSON is much faster than boost::ptree. This is partly because ptree was never designed for JSON parsing and output meaning it has weaker guarantees to use but also that RapidJSON was designed to be fast. Below is a table comparing the existing `serializeQueryResults` code path and the prospective RapidJSON one.\r\n\r\n\r\n| Test Case | CPU(ns) boost::ptree | CPU(ns) rapidjson::Document | Improvement \r\n| ------------- |-------------:| -----:| ---:|\r\n| DB_serialize_column_order/1/1  | 3493 | 871 | 4.01 |\r\n| DB_serialize_column_order/10/10      | 224234      |   14049 | 15.96 |\r\n| DB_serialize_column_order/10/100 | 2250971      |    128016 | 17.58 |\r\n| DB_serialize_column_order/100/100 | 23099589      |    1388649 | 16.63 |\r\n\r\nTo close, I'm putting this up as an RFC to see what people think and gather input about the coming transition. Here is a [link](https://github.com/facebook/osquery/compare/master...jedi22:move_to_rapidjson) to my branch comparing it to master.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3164/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 2, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3016", "title": "Process open sockets sometimes has duplicate entries", "body": "```\r\n+-------+----+--------+--------+----------+----------------------------------------+------------------------------+------------+-------------+------+\r\n| pid   | fd | socket | family | protocol | local_address                          | remote_address               | local_port | remote_port | path |\r\n+-------+----+--------+--------+----------+----------------------------------------+------------------------------+------------+-------------+------+\r\n| 91425 | 3  |        | 10     | 6        | 2620:XXX | 2401:YYY | 59303      | 22          |      |\r\n| 91425 |    | 4      | 0      | 0        |                                        |                              | 0          | 0           |      |\r\n| 91425 | 3  |        | 10     | 6        | 2620:XXX | 2401:YYY | 59303      | 22          |      |\r\n+-------+----+--------+--------+----------+----------------------------------------+------------------------------+------------+-------------+------+\r\n```\r\n\r\nIt's unclear why this is happening especially because the fd is colliding", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/fa8d267ad852a34225220e5223c5ef9c748c2e6a", "message": "Fix a crash in the extended_attributes table (#4051)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/099fb39af7c642548744fc87deafc93ad4961079", "message": "Add signing functionality to make_osx_package (#4045)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/7c95e985517558fefebfbe0ba8bb03192177946a", "message": "Fix Ryzen Core Count (#3432)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/a73233263b03753dd96d16bf70c1f1619b68467c", "message": "Renaming the key_events table to user_interaction_events and adding mouse down (#3951)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/c3a2171ebcc92fb3bbe3b94b8ab83916cd1ca275", "message": "Tighten up the event tapping code (#3917)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/beca5e68e97c5ff411b082fe871c69edcba1e641", "message": "Require root permissions to start the event tapping framework (#3849)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/9d90ef0969bb65a7304bb8b72413b56609253d9a", "message": "Fix the memory leak in the macOS certificates table (#3843)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/9ab7233f7e1e41b3a993b51ee82471e0dfe066fe", "message": "Fixes a small data race in disk arbitration (#3841)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/cd88cecc9a53f852bca98d95d937576a29fb3e91", "message": "Publisher and Table for Event Tap Capture (KeyDown) (#3829)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/7750fa8ee5ff4388a553cea8be9012f4758bc09d", "message": "deps: Remove snappy and lz4 (#3545)"}], "pull_requests": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/3256", "title": "Signing for OnDemand (ad-hoc) queries", "body": "Adding the ability to sign queries for particular hosts and have an optional counter so queries cannot be replayed at a later date. You can get information about the current state of strict mode using the new table `osquery_strict_mode`. If a query that requires signing is successfully run, the counter is incremented. You can either keep track of this on the backend, or issue a query to host itself to pull back the current counter value.\r\n\r\nI've also updated the test_http_server to support optional query signing and a helper script to generate signatures for the protected tables in the osquery configuration.\r\n\r\nIn previous versions of this diff, osquery would warn you if it wasn't starting in strict mode, this has been changed in favour of a table that you can query against to know if it's enabled on a host.\r\n\r\nHere is an example of the configuration blob to configure strict_mode\r\n```json\r\n\"strict_mode\" : {\r\n    \"public_key\" : \"MFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAEuN+ZqVndrMy5npAg6TJP6LtdZBeGmICRKD4uluz9C3MdqXbe1PMqFYovXVHrlNbdv+E9/Bqbub+ITB+4zpnAGg==\",\r\n    \"protected_tables\" : [\"osquery_info\", \"osquery_flags\"],\r\n    \"protected_tables_signature\" : \"MEUCIQCfbuYrDi2eB0ANpVgAO27i+9Nr0ex476jA8FerWf2JbgIgTIkp7m3fzS1uAfHAnFttU/nLhSCsHk+W3WCZ+iK9jDI=\",\r\n    \"uuid_signing\" : \"true\",\r\n    \"counter_mode\" : \"false\"\r\n  }\r\n```\r\nThe configuration sets the pub key and requires signatures for OnDemand queries containing the tables `osquery_info` or `osquery_flags`. It also requires that the signature for that query also contain the UUID of the machine, preventing taking one signature and running it on another machine.\r\n\r\nIf you are using discovery queries for OnDemand, those will also require signatures and will also increase the query count when successfully executed.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/osquery/comments/9527268", "body": "I was advised by @marpaia not to touch the filesystem in my tests because it is janky. This was a work around we agreed on.\n\nI'm removing the double %% test which I think is taking most of the time for the test.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/9527268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "adent": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3152", "title": "Enhancement request - Windows Free disk space", "body": "Can Windows free disk (partition) space please be made available in osquery. \r\nOne possible way is to use WMI which allows for FreeSpace to be obtained from Win32_LogicalDisk. \r\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stephane-martin": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3055", "title": "Completeness of process_open_sockets and listening_ports with Linux containers ?", "body": "Hello,\r\n\r\nI have a Linux server that only runs a few processes as a host, with all the real stuff happening in containers (Docker and LXC).\r\n\r\nThe containers have their own namespaced network. Communication with host is classically done with some bridge interfaces and veth.\r\n\r\nFor example, the host has a \"real\" internet interface eth0 (176.X.Y.Z) and a bridge interface 'brweb' (10.100.1.1). Inside the \"nginx\" container there is a namespaced eth0 interface (10.100.1.2), and there an nginx process listens on 10.100.1.2:443. The host eth0 and the container eth0 are linked through a veth.\r\n\r\nWhen i run osqueryi on the host, it looks like `process_open_sockets` and `listen_ports` do not contain information about processes that are run inside the containers. So `listen_ports` does not give anything listening on port 443 and `process_open_sockets` does not show the nginx process. \r\n\r\nIs it the intended behaviour ? How can get network info about the processes run inside containers ?\r\n\r\nTested on Ubuntu Xenial, with kernels 4.4.X, and (sudo) osqueryi 2.3.2.\r\n\r\nThanks ! ", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stachdude": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3027", "title": "windows: Yara virtual table support", "body": "Is more of a question than issue - any plans on adding yara to windows build any time soon ?", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3027/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "headmin": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/2990", "title": "add the darwin profiles table to default osquery", "body": "I wonder why the table for darwin profiles is not included in default osquery.\r\nwould love to see that included.\r\n\r\nhttps://github.com/andrew-d/osquery-profiles", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2990/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/2868", "title": "Darwin apps table inconsistent results", "body": "We noticed apps info collected by osqueryd (with TLS server) will return inconsistent results on darwin (macOS 10.12.1, 10.12.2, 10.11.6).\r\n\r\nWe tested osquery 2.1.2 and osquery 2.2.0 here. TLS Server is Zentral - queries as regular queries and distributed queries show the problem, issue also reproducible with `osqueryi` run locally.  \r\n\r\nThe query we use  is:\r\n\r\n```bash\r\nSELECT bundle_identifier AS bundle_id, bundle_name, bundle_version, bundle_short_version AS bundle_version_str, path AS bundle_path FROM apps WHERE bundle_name LIKE '%%';\r\n```\r\n\r\nOf course with the query above many results on apps are returned - but some are missing. \r\nOne could speculate this could be related to the LaunchServices API used (that could be inconsistent) for the apps table, i.e. in this code block https://github.com/facebook/osquery/blob/master/osquery/tables/system/darwin/apps.mm#L243\r\n\r\nIn our extended tests we compared the query results utilizing  `osqueryi` run as USER and as ROOT - we noticed here again *root* osqueryi results could be different to the *user*  osqueryi results.\r\n\r\nA short test we inspect LaunchServices DB with  `lsregister -dump` as root, stunningly we could see results of those missing apps are visible in the dump, not sure how osquery fails to collect from there (could be skipping LaunchServices as in the code above). \r\n\r\n`sudo /System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -dump` \r\n\r\nWhat could we further test to provide more information or adjust on the query to get consistent apps inventory via osquery? \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/81491317", "body": "@theopolis done\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/81491317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "iBigQ": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/2903", "title": "Order of columns when serialized", "body": "I have an extension code similar to:\r\n```\r\nstd::string query = \"SELECT name, major FROM os_version\";\r\nQueryData results;\r\nauto status_query = queryExternal(query, results);\r\n\r\nQueryLogItem item;\r\nitem.name = \"foo\";\r\nitem.identifier = \"bar\";\r\nitem.time = osquery::getUnixTime();\r\nitem.calendar_time = osquery::getAsciiTime();\r\nitem.snapshot_results = results;\r\nstd::string json;\r\nserializeQueryLogItemJSON(item, json);\r\n```\r\n\r\nThe resulting json string is:\r\n```\r\n{\r\n\"snapshot\":\r\n      [\r\n      {\"major\":\"18\",\"name\":\"Linux Mint\"}\r\n      ],\r\n      \"action\":\"snapshot\",\r\n      \"name\":\"foo\",\r\n      \"hostIdentifier\":\"bar\",\r\n      \"calendarTime\":\"Wed Jan 11 15:34:29 2017 UTC\",\"unixTime\":\"1484148869\"\r\n}\r\n```\r\n\r\nAs you can see, the requested order was (name, major), but it is the reverse in the json string. I was expecting the json string to be in the same order. Is there anything wrong with my code maybe?\r\nThis is critical to me, as I use this string to feed the logger with and expect the result columns to match the request order.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/3919", "title": "Bro integration 2.10.0", "body": "Make the bro integration branch to be based on the latest stable osquery version (2.10.0)", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/3732", "title": "Update Broker Version", "body": "Update to new broker version\r\n\r\n- [x] Write new formulas for caf and broker\r\n- [x] Use new broker API in osquery\r\n- [x] Pass osquery tests\r\n- [x] Use new broker API in bro scripts\r\n- [x] Integration tests\r\n\r\nTODO:\r\n\r\n- [ ] Update bro-osquery (bro scripts) and installation guide\r\n- [ ] Link specific git commit in formulas once caf and broker are released\r\n- [ ] Set correct version in formulas", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/3453", "title": "Connection events from conntrack", "body": "This adds a new event publisher named `conntrack` that uses the netfilter subsystem of netlink to retrieve status changes of network connections. \r\nThe table `connection_events` tags connections (IP and port combinations of source and destination) with labels NEW, UPDATE or DESTROYED. Connections are matched with /proc/net/<protocol> to find the corresponding inode and /proc/<pid>/fd is browsed to find the respective PID.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cyberallday": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/2754", "title": "windows: Mutexes Virtual Table", "body": "Please add a table for querying Windows mutexes.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yying": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/2744", "title": "More debugging statements in verbose mode", "body": "Currently, there are still some `try`/`catch` blocks that ignore raise exceptions. For example: https://github.com/facebook/osquery/blob/master/osquery/config/config.cpp#L387\r\n\r\nThere should instead transition over to these: https://github.com/facebook/osquery/blob/master/osquery/config/config.cpp#L249", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mtmcgrew": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/2689", "title": "make hardware_events table in windows", "body": "The hardware_events table is only on posix machines. We should also have it on Windows!\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/2629", "title": "Parsing of windows shortcut files", "body": "We should have a table that parses shortcuts and parses out the information of where the shortcut points to. It could be its own table or extra columns in the file table. \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/2384", "title": "Create a prefetch table for windows", "body": "http://www.forensicswiki.org/wiki/Prefetch\nhttp://www.forensicswiki.org/wiki/Windows_Prefetch_File_Format\n\nIt would be great to create a table with some of this info http://www.swiftforensics.com/2013/10/windows-prefetch-pf-files.html\n\nfilename, file path, last execution time, etc.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19560317", "body": "What is \"foo\", could a more descriptive variable be used?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19560317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19560383", "body": "The \"arp\" field contains the MAC address of the remote machine in the arp table. A better name might be \"mac\"\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19560383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "friedbutter": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/2649", "title": "Add virtual table for Windows to list Browser Helper Objects", "body": "We should enumerate the BHO list. \n\n> The relevant registry key is: HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Browser Helper Objects.  If this key exists and there are CLSID\u2019s listed underneath it, then Internet Explorer uses that information to create an instance of each object.  The CLSID of the object must be listed as a subkey and not a named value.  These registry keys can be created manually although the self-registration of the BHO may create the registry key as well.  Again, it\u2019s important to note that multiple copies of the BHO are loaded if you explicitly open new instances of Internet Explorer.  Opening a new window from IE is different than launching a new instance of iexplore.exe.  When you open new windows from Internet Explorer, each window is duplicated in a new thread without originating a new process \u2013 and therefore without reloading BHO\u2019s.  By comparison, Windows File Explorer will load a separate BHO instance for each new window that is created.\n\nRef: https://en.wikipedia.org/wiki/Browser_Helper_Object\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/osquery/comments/17029180", "body": "Some IOCs from [here](https://objective-see.com/blog/blog_0x0E.html): \n\n> The /Library/Preferences/com.common.plist file \n> The /etc/pf_proxy.conf file \n> The /etc/change_net_settings.sh file \n> The /Library/<companyname>/ directory \n> Connections to/from the following domains:\n>   *.93a555685cc7443a8e1034efa1f18924.com\n>   *.trkitok.com\n>   *.aa625d84f1587749c1ab011d6f269f7d64.com\n>   *.2ff328dcee054f2f9a9a5d7e966e3ec0.com\n>   *.aae219721390264a73aa60a5e6ab6ccc4e.com\n>   Search-quick.com\n>   Trovi.com \n> \n> 85846678ad4dbff608f2e51bb0589a16 - installer\n> 70772fccaec011be535d1f41212f755f - proxy\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/17029180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "svmastersamurai": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/2574", "title": "windows: Slow queries on process table", "body": "Thanks for getting the Windows version out the door at last! Just wanted to report that querying the process table is pretty slow in the current build compared to native queries via `Powershell` or `WMIC`:\n\n``` shell\nPS C:\\programdata\\osquery> measure-command { & .\\osqueryi.exe 'select * from processes;' --json }\n\n\nDays              : 0\nHours             : 0\nMinutes           : 0\nSeconds           : 14\nMilliseconds      : 544\nTicks             : 145445951\nTotalDays         : 0.000168340221064815\nTotalHours        : 0.00404016530555556\nTotalMinutes      : 0.242409918333333\nTotalSeconds      : 14.5445951\nTotalMilliseconds : 14544.5951\n```\n\nHere is the WInXP naive old-hat way to get the process table:\n\n``` shell\nPS C:\\programdata\\osquery> measure-command { & wmic PROCESS }\n\n\nDays              : 0\nHours             : 0\nMinutes           : 0\nSeconds           : 3\nMilliseconds      : 624\nTicks             : 36248542\nTotalDays         : 4.19543310185185E-05\nTotalHours        : 0.00100690394444444\nTotalMinutes      : 0.0604142366666667\nTotalSeconds      : 3.6248542\nTotalMilliseconds : 3624.8542\n```\n\nThe slightly better WMI queries are faster\n\n``` shell\nPS C:\\programdata\\osquery> measure-command { Get-WmiObject -Query 'Select * From Win32_Process' }\n\n\nDays              : 0\nHours             : 0\nMinutes           : 0\nSeconds           : 0\nMilliseconds      : 103\nTicks             : 1036293\nTotalDays         : 1.19941319444444E-06\nTotalHours        : 2.87859166666667E-05\nTotalMinutes      : 0.001727155\nTotalSeconds      : 0.1036293\nTotalMilliseconds : 103.6293\n```\n\nWhile the new hotness CIM Queries are slightly quicker\n\n``` shell\nPS C:\\programdata\\osquery> measure-command { Get-CimInstance -Query 'SELECT * From CIM_Process' }\n\n\nDays              : 0\nHours             : 0\nMinutes           : 0\nSeconds           : 0\nMilliseconds      : 97\nTicks             : 973313\nTotalDays         : 1.12651967592593E-06\nTotalHours        : 2.70364722222222E-05\nTotalMinutes      : 0.00162218833333333\nTotalSeconds      : 0.0973313\nTotalMilliseconds : 97.3313\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aursulis": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/2569", "title": "Should not use ANSI Windows APIs", "body": "Classes like `PlatformFile` (and numerous others) use ANSI versions of Windows APIs.\nAn example from https://github.com/facebook/osquery/blob/master/osquery/filesystem/windows/fileops.cpp#L389:\n\n``` c++\n  handle_ = ::CreateFileA(path.c_str(),\n                          access_mask,\n                          0,\n                          security_attrs.get(),\n                          creation_disposition,\n                          flags_and_attrs,\n                          nullptr);\n```\n\nThis will mean that they don't support filenames with Unicode characters that are not in the range of the current ANSI code page. Similar implications for other APIs. Files enumerated through `FindFirstFileA` will have such characters replaced with a question mark, etc.\n\nBasically, no new Windows program should be using the A APIs. All they do anyway is convert their arguments to UTF-16 wide types (according to the current code page) and call the W version of the API.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2569/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Chaz6": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/2553", "title": "Support for ssl root ca certificate store information", "body": "Please consider implementing support for providing information about the installed root CA certificates.\n\nHere are my suggestions for a name and fields:-\n\nTable name: ca_certificates\nFields: filename, fingerprint, fingerprint_algorithm,trust_websites, trust_emails, trust_code, name, valid_from, valid_to, serial_number, subject, friendly_name, issuer, certificate_purposes, extended_validation_policy_oids, ocsp_urls, \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tedkol": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/2539", "title": "windows: Escaping of '\\' in registry table queries is inconsistent.", "body": "Create a key in the registry, perhaps:\n`HKLM:SYSTEM\\CurrentControlSet\\Services\\tedkol foo REG_SZ 'bar'`\n\nQuery the key in osqueryi:\n\n```\nosquery> select * from registry where hive like 'HKEY_LOCAL_MACHINE' and key = 'SYSTEM\\\\CurrentControlSet\\\\Services\\\\tedkol';\n+--------------------+---------------------------------------------+---------------------------------------------+------+--------+------+------------+\n| hive               | key                                         | subkey                                      | name | type   | data | mtime      |\n+--------------------+---------------------------------------------+---------------------------------------------+------+--------+------+------------+\n| HKEY_LOCAL_MACHINE | SYSTEM\\\\CurrentControlSet\\\\Services\\\\tedkol | SYSTEM\\\\CurrentControlSet\\\\Services\\\\tedkol | foo  | REG_SZ | bar  | 1475014767 |\n+--------------------+---------------------------------------------+---------------------------------------------+------+--------+------+------------+\nosquery> select * from registry where hive like 'HKEY_LOCAL_MACHINE' and key = 'SYSTEM\\CurrentControlSet\\Services\\tedkol';\n+--------------------+------------------------------------------+------------------------------------------+------+--------+------+------------+\n| hive               | key                                      | subkey                                   | name | type   | data | mtime      |\n+--------------------+------------------------------------------+------------------------------------------+------+--------+------+------------+\n| HKEY_LOCAL_MACHINE | SYSTEM\\CurrentControlSet\\Services\\tedkol | SYSTEM\\CurrentControlSet\\Services\\tedkol | foo  | REG_SZ | bar  | 1475014767 |\n+--------------------+------------------------------------------+------------------------------------------+------+--------+------+------------+\nosquery>\n```\n\nBoth queries match where only one should. \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "arubdesu": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/2403", "title": "darwin - discrepancy between authorization database rules contents and osquery output", "body": "Currently, even when run as root, osquery only returns 157 results on my system. The rules db actually contains 169 rules. I've listed the rules osquery did not return in its results below\n\n``` txt\nauthenticate\ncom.apple.CoreRAID.admin\ncom.apple.ZFSManager\ncom.apple.dt.Xcode.LicenseAgreementXPCServiceRights\ncom.apple.familycontrols.loginwindow.override\ncom.apple.familycontrols.override\ncom.apple.iCloud.passwordReset # duplicate-looking, but different case from \"com.apple.icloud.passwordreset\" rule\ncom.apple.wifi\ncom.apple.wireless-diagnostics\nsystem.install.iap-software\n```\n\nThere are also third-party apps listed when I check Apple's db directly that don't appear in the osquery output: com.bombich.ccc.helper and com.macromates.textmate.openfile are two.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/2397", "title": "Table request: pam.d conf files", "body": "As per this POC extension, https://gist.github.com/arubdesu/9b9b9277c8a8ffa106c39b628f774840 all pam.d confs would be important to capture for the purpose of ensuring consistent values are set. The man page is pretty illustrative of what columns would be titled, but I shortened 'args' for all trailing options.\n\nFor other POSIX systems I covered the case that there are symlinks, but otherwise haven't tested this.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/2322", "title": "darwin - sysprefs-listed application layer firewall exceptions not reflected in table ", "body": "steps to repro: `osqueryi --line \"select * from alf_explicit_auths\"`\nexpected: a combination of the output from `/usr/libexec/ApplicationFirewall/socketfilterfw --listapps`, an example of which is \n\n```\nALF: total number of apps = 3 \n1 :  /Users/abanks/Library/Application Support/Dropbox/Dropbox.app \n     ( Allow incoming connections ) \n2 :  /System/Library/CoreServices/RemoteManagement/ARDAgent.app \n     ( Allow incoming connections ) \n3 :  /Library/Application Support/Citrix/NetScaler Gateway.app \n     ( Allow incoming connections )\n```\n\nand also something like the cleaned-up output from `/usr/libexec/ApplicationFirewall/socketfilterfw -l`, which is loosely categorized in the sysprefs/security GUI as 'remote login' and 'remote management' listings. Instead, osquery lists:\n\n```\nprocess = org.python.python.app\nprocess = com.apple.ruby\nprocess = com.apple.a2p\nprocess = com.apple.javajdk16.cmd\nprocess = com.apple.php\nprocess = com.apple.nc\nprocess = com.apple.ksh\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/1762", "title": "group membership (discussion)", "body": "There's an existing master task on #619 under Shared (cross platform) tables for group membership. To expand on scenarios/actionable criteria worth collecting, just sticking to the native local directory service, it would be vital to know who is in the admin group, and further to know(/potentially use as a foreign key?) nested groups - e.g., `staff` and or `netaccounts` in the `_lpadmin` group, to allow 'standard' (non-admin) users to print on Darwin. There is also a system ssh group, com.apple.access_ssh (whose GID has varied through different OS releases) that it is a common pattern to nest the admin group in.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/1762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jacknagz": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/2152", "title": "feature request: (cross-platform) services table", "body": "Per the conversations in the Slack channel earlier, a table for running/installed `services` would be a valuable component into process insight.  Proposed columns:\n\n| `name` | `status` | `pid` |\n\nThe equivalent commands for linux and os x are: `service --status-all` and `launchctl list`.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/2152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "anoop2811": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/1969", "title": "Osqueryd seems to be missing alerting on updates to nested folders that were moved into the watch file_paths", "body": "As part of our testing, we wanted the FIM functionality to properly alert on changes that are made to a directory tree which was created outside of watch directory but subsequently moved into it. However when we tested, the sub directory thats under watch and holds the nested tree does not produce any alerts for files added/changed at any depth while inside the watched file path. The osquery.conf looks like this:\n\n```\n{\n  \"schedule\": {\n    \"file_events\": {\n      \"query\": \"select * from file_events;\",\n      \"removed\": false,\n      \"interval\": 30\n    }\n  },\n  \"file_paths\": {\n    \"test\": [\n      \"/test/subdir_test/%%\"\n    ]\n  }\n}\n```\n\ndo the following to make sure alerts are showing in the /var/log/messages file\n\n```\ntouch /test/subdir_test/hi1.txt\n```\n\ndo the following to see the alerts do not show up in the /var/log/messages\n\n```\ncd /test  (note, we are not in the watched dir which is /test/subdir_test)\nmkdir -p subdir1/subdir2/subdir3\nmv subdir1 subdir_test (At this point you would get at alert in the logs to the file moved event)\ntouch subdir_test/subdir1/hi2.txt\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/1969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Happy-Dude": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/1945", "title": "Table(s) for guest virtual machine details and configuration", "body": "In an incident response setting, I found it difficult to correlate guest virtual machine log entries (DHCP, IP, MAC, packet captures, etc.) to an actual host system and user.\n\nWould it be possible for osquery to gather some of the basic system information for us? I'm not sure where the \"library\" listing of virtual machines are stored, but if possible, can osquery parse that information, and gather configuration information from the corresponding config files?\n\nThat would certainly make it easier to correlate which hosts these guests are being launched from and with what virtual hardware settings (MAC, virtual disk location + size, shared folders, etc.). Anything for VirtualBox, VMware, KVM, Xen, qemu would be awesome.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/1945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "djahandarie": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/1921", "title": "iptables: Show per-rule packet/byte counts instead of per-policy counts", "body": "Right now, the `iptables` table has `packets` and `bytes` columns. Confusingly (to me), all the rows in my output had the same values for these columns.\n\nAfter looking through [osquery/tables/networking/linux/iptables.cpp](https://github.com/facebook/osquery/blob/master/osquery/tables/networking/linux/iptables.cpp), I realized that these columns do not correspond to the per-rule counters you see next to each rule when you run `iptables -L -v`, but instead the _policy_ counters.\n\nIt looks like the iptables API does expose a function to get the per-rule counters:\n\n[struct ipt_counters *iptc_read_counter(const ipt_chainlabel chain, unsigned int rulenum, iptc_handle_t *handle);](http://www.tldp.org/HOWTO/Querying-libiptc-HOWTO/qfunction.html#AEN588)\n\nI'm not sure if showing the policy counters instead of the per-row counters is considered a bug, but if the iptables table is intended to show information for rules, it's odd that it's showing information for policies instead. Either way, it would be very nice to have the per-rule counters accessible somehow.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/1921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/1919", "title": "Expose netstat statistics", "body": "On Linux, netstat provides all sorts of interesting information:\n\n```\n$ netstat -s\nIp:\n    19839951 total packets received\n    13 forwarded\n    0 incoming packets discarded\n    19837728 incoming packets delivered\n    17086380 requests sent out\n    142 outgoing packets dropped\n    1657 dropped because of missing route\nIcmp:\n    3807 ICMP messages received\n    868 input ICMP message failed.\n    ICMP input histogram:\n        destination unreachable: 2672\n        timeout in transit: 1119\n        echo requests: 10\n        echo replies: 3\n        timestamp request: 2\n        address mask request: 1\n    3299 ICMP messages sent\n    0 ICMP messages failed\n    ICMP output histogram:\n        destination unreachable: 3040\n        echo request: 3\n        echo replies: 10\n        timestamp replies: 2\nIcmpMsg:\n        InType0: 3\n        InType3: 2672\n        InType8: 10\n        InType11: 1119\n        InType13: 2\n        InType17: 1\n        OutType0: 10\n        OutType3: 3040\n        OutType8: 3\n        OutType14: 2\n        OutType69: 244\nTcp:\n    73234 active connections openings\n    58048 passive connection openings\n    5191 failed connection attempts\n    2446 connection resets received\n    62 connections established\n    19414831 segments received\n    16880653 segments send out\n    3006 segments retransmited\n    53 bad segments received.\n    8627 resets sent\nUdp:\n    621133 packets received\n    2633 packets to unknown port received.\n    0 packet receive errors\n    463229 packets sent\n    SndbufErrors: 142\nUdpLite:\nTcpExt:\n    1 invalid SYN cookies received\n    10 packets pruned from receive queue because of socket buffer overrun\n    29 ICMP packets dropped because they were out-of-window\n    70611 TCP sockets finished time wait in fast timer\n    2 packets rejects in established connections because of timestamp\n    125841 delayed acks sent\n    262 delayed acks further delayed because of locked socket\n    Quick ack mode was activated 1832 times\n    200296 packets directly queued to recvmsg prequeue.\n    22793 bytes directly in process context from backlog\n    1215542 bytes directly received in process context from prequeue\n    13358392 packet headers predicted\n    389 packets header predicted and directly queued to user\n    1613519 acknowledgments not containing data payload received\n    2523377 predicted acknowledgments\n    819 times recovered from packet loss by selective acknowledgements\n    Detected reordering 1 times using time stamp\n    1 congestion windows fully recovered without slow start\n    1 congestion windows partially recovered using Hoe heuristic\n    51 congestion windows recovered without slow start by DSACK\n    571 congestion windows recovered without slow start after partial ack\n    TCPLostRetransmit: 17\n    742 timeouts after SACK recovery\n    487 fast retransmits\n    21 forward retransmits\n    8 retransmits in slow start\n    245 other TCP timeouts\n    TCPLossProbes: 1088\n    TCPLossProbeRecovery: 796\n    21 SACK retransmits failed\n    41 packets collapsed in receive queue due to low socket buffer\n    1832 DSACKs sent for old packets\n    1 DSACKs sent for out of order packets\n    394 DSACKs received\n    50 DSACKs for out of order packets received\n    493 connections reset due to unexpected data\n    623 connections reset due to early user close\n    150 connections aborted due to timeout\n    15 times unabled to send RST due to no memory\n    TCPDSACKIgnoredNoUndo: 311\n    TCPSpuriousRTOs: 156\n    TCPSackMerged: 58\n    TCPSackShiftFallback: 3643\n    TCPRetransFail: 347\n    TCPRcvCoalesce: 1863244\n    TCPOFOQueue: 137215\n    TCPOFOMerge: 1\n    TCPChallengeACK: 54\n    TCPSYNChallenge: 53\n    TCPSpuriousRtxHostQueues: 35\n    TCPAutoCorking: 91497\n    TCPFromZeroWindowAdv: 1\n    TCPToZeroWindowAdv: 1\n    TCPWantZeroWindowAdv: 9\n    TCPSynRetrans: 345\n    TCPOrigDataSent: 5704022\nIpExt:\n    InNoRoutes: 44\n    InMcastPkts: 6788\n    OutMcastPkts: 493\n    InBcastPkts: 60015\n    OutBcastPkts: 74\n    InOctets: 60325691028\n    OutOctets: 30947862892\n    InMcastOctets: 1639451\n    OutMcastOctets: 57774\n    InBcastOctets: 7549024\n    OutBcastOctets: 3670\n    InNoECTPkts: 32738574\n    InECT0Pkts: 93\n```\n\nIt would be lovely to have this information available via osquery.\n\nI'm particularly interested in things like `368644 segments retransmited` (sourced from `/proc/net/netstat`).\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/1919/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pathcl": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/1759", "title": "pid connection state mac os x", "body": "Hello!\n\nIs there a way to get a socket state on Mac OS X? as in linux: LISTEN, ESTABLISHED, FIN_WAIT, etc. I've looked into [0] and listening_ports table without finding any clue.\n\n[0] https://osquery.io/docs/packs/#incident-response_open_sockets\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/1759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "marcopashkov": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/1424", "title": "building osquery on the raspberry pi 2 (ARMv7) - ubuntu MATE", "body": "Hi,\n\nI was trying to get `osquery` running on my `raspberry pi 2`. It all seems to come down to the `ARM` processor architecture. As far as I can tell `osquery` only supports `x86-64` and `i386`. Do you plan to support ARM processors at some point?\n\nThe error messages that I get are:\n- `g++: error: unrecognized argument in option \u2018-march=x86-64\u2019`\n- `g++: error: unrecognized argument in option \u2018-mtune=i386\u2019`\n- `CMake will not be able to correctly generate this project. Call Stack (most recent call first): CMakeLists.txt:16 (project)`\n\nWhat dependencies require non-ARM processors and is there a way you know of to compile OSQuery for ARM?\n\nThank you!\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/1424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alessandrogario": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/44e03bada9150c31e52dcbd04fc24630660dd1b3", "message": "process_file_events: Add fields euid and egid and cleanup logs"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/02caa9577412af1a1d0ee1c1fa6bd2cc35e30ca2", "message": "audit: Rename audit_fim_events to process_file_events"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/4a478f1ea17093d317d4f04ec3502cf3a4058add", "message": "audit: Ignore operations on PF_NETLINK sockets"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/8829c9f0de43e67eb4ab0fa41dc152ad86933a4f", "message": "audit: Improve responsiveness when terminating and set name"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/d72779c784d677d7494b629bf72d276227c35174", "message": "Update column names, add switch to clear Audit config on startup (#3611)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/9c0bd4abfb6122b85e7c37d69330de2c2f043185", "message": "audit-based file integrity monitoring (#3492)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/e859276739b48447d937b2eb810630f2b9a7e548", "message": "logging: Adds Windows Event Log support (#3887)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/58fa4a68993c5a030b68c0f5349d8b7c93d4866b", "message": "Verbose logging when spawning services (#3689)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/e888f3e8e893b8bb1207369abce3477539518659", "message": "tables: Authenticode verification support for Windows (#3716)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/0130928a249139771048311e1cb99703e58f7065", "message": "aws_firehose: Add missing newline separator between each log line. (#3743)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/641aa0321e94c05012ef61bb1d0fa0305b474098", "message": "aws_kinesis/aws_firehose: Be more verbose when complete failures occur. (#3710)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/6489c8b050f98eeafcb9bb306d325c5cfddb79fd", "message": "logging: Add Firehose/Kinesis support to Windows (#3641)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/a3e4310188c5213b295c76fbb9ddffedd2bf3a8e", "message": "Fix 3568: Kinesis/Firehose record size check failure (#3599)"}], "pull_requests": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/4024", "title": "List all sockets (host and containers) in process_open_sockets", "body": "This PR modifies the process_open_sockets to actually show all sockets active inside all processes (both on the host and inside containers). A new column named \"net_namespace\" has been added, showing the network namespace that owns each socket.\r\n\r\nI would like to make one last change: turn the protocol and family column types from integer to text, and use the actual protocol and family labels rather than numbers (which should make the table mor readable).", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/4019", "title": "Port the 'services' table to Linux", "body": "This PR adds support for enumerating SysVinit, Upstart (Ubuntu 14.04, CentOS 6) and Systemd services.\r\n\r\nI would like some feedback on this PR, since it makes use of a system library that may or may not be installed by default (libsystemd-dev on Ubuntu).\r\n\r\nRight now I'm using a define in \"osquery/tables/system/linux/services.cpp\" to decide whether to enable or disable systemd support (when it is active, it will disable Upstart and SysVinit).\r\n\r\nI would really love to remove this limitation, any suggestion on how we can deal with the systemd library?", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dallendoug": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/bf0eb6f36fae168e482534ddf8a2217600ef4205", "message": "added IOCs to query for OSX_MaMi malware (#4055)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "exFill": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/979330efbb935c5e1f576da09ebb6ead92a6b857", "message": "Fix on_disk detection for Linux (#4047)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bschmoker": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/966854028f7dda2eeea07c21b6abaca40689ee28", "message": "docs: typo in mac setup instructions (#4010)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kukfa": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/6ddbdc0feabeb91fdc85cba61a5d743cbeab19d5", "message": "tables: Implemented Windows crashes table (#3696)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "uptycs-nishant": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/1acc7b91ef5ddae228aaa1b435406a96e0075b8b", "message": "Reducing memory footprint of osquery by achieving zero-copy (#3977)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/473920d601a627b85cb6c770132b739e594d2e38", "message": "Removing cpp-netlib name references (#3978)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/9d46d9cb5f591eb3865d00209d6fc526e9f2ab2d", "message": " http_client: Fix for issue-3953 (#3958)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/bd28a4598e8a2272e583fd590ad95cb34761b637", "message": "Conditionally adding port along with host name as host header value (#3899)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/efe32b45d570379cf2f40194822e0e82d6387dd6", "message": "Fix for issue-3853: using higher precision arithmetic (#3892)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/d8b700ab7479a9e0eb4e15d99d24896d82a52a5b", "message": "Implementing http_client based on boost.beast and adding proxy support to tls logger (#3623)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/aa594aa731ad81a7dd021fd8927697dc5c556180", "message": "[Fix #3760] Fixing ConstraintList::literal_matches function (#3816)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/d2576e576bcdd91969e688bb8eaede5e5bea876c", "message": "[Fix #3699] Reporting mode as octal string (#3825)"}], "pull_requests": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/3948", "title": "TLS persistent transport support", "body": "With TLS persistent transport support, once a secured connection is established it can be used to send multiple HTTPS requests to TLS server.  \r\n\r\nIntroducing two new flags -\r\n    --tls_persist_transport                   Persistent TLS transport\r\n    --tls_persist_transport_timeout VALUE     Persistent TLS transport timeout in seconds(default 3600 seconds)\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/3482", "title": "Forwarding events to tls logger, by-passing schedule query layer", "body": "This change enables the event subscribers to push the events to log/buffer forwarder, by-passing the expensive processing of schedule query layer.\r\nPlease see how to use this functionality in the updated docs of this patch.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tbroadley": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/f5c6113fc4ca8158416ee9099aa144f10b5aee3c", "message": "docs: fix typos (#4015)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "UntilDoomsday": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/9c4c52962ddbc440229bb19177f5375097824cb5", "message": "docs: added note about fim file replacement (#4008)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "skogtwin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/3e83bfbe4aa7490415fa343b3c1d5e81eb8f5eea", "message": "Persistent hashing of `hash' virtual table (#3814)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bmoylan": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/9f62c04f15784e04ae14720c6b83618df6b90c1e", "message": "docs: Document --host_identifier=specified CLI option (#3974)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tcrayford": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/fb354b7d222779621fca0a53d199d60c88ccca64", "message": "only daemon-reload if systemd is running (#3979)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fiorix": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/5ffe9e91d1ba6186af87df61dcea76ea286c5ed9", "message": "build: Allow building as non-root on MacOS via pip user switch (#3968)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mike-myers-tob": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/b79c0e262199115f9966238b9768b93c462b38e8", "message": "Local Groups table for Windows (#3855)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/1d927ba9e528d26162bf8acd6a65159de2c502b9", "message": "build: Add guard around call to Visual C env bat files (#3851)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/65c89929837765fad8fd61bbbecd178ef1383494", "message": "Add new blog post about osquery's use for examining Authenticode (#3817)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "isairamm": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/4d4a84e370950f8e80395f98c6156ffe10369579", "message": "packs: Query to identify ccleaner malware (#3790)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "msekletar": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/66977bf116bc80f8979b157b09c3990ebc50fd6a", "message": "Print correct address family id for AF_UNIX sockets (#3909)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "micheal-o": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/9fd2be038c6f5b26c31762ca2d973b1b9ff443e0", "message": "Virtual table: Iptables port feature #3621 (#3897)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/ff1ae545e8fd4c426dbea885ba7d0e3115aded3f", "message": "tables: SSL cert table for posix #3811  (#3839)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/702203086f88931e32a4a582edc79d4a33d44798", "message": "Convert Linux process_events mode column to octal (#3800)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/f2cc194f6f96125cc44be6464677c38257263389", "message": "Windows attacks query pack (#3754)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "arrjay": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/47a236ead460431a0ed2c4c5b6fb01a6cd1f324a", "message": "add post-installation script to reload systemd unit files on upgrade"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "magicansk": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/8bf2d9e592b22aa38ca7b60c7c56a77a8da2c911", "message": "docs: Update process-auditing yara and debugging"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "andy152": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/0af1a6606c412d5470b8284e7358500a875d48d9", "message": "tables: Added macOS firewall applications to the alf_exceptions tables (#3884)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tomdev": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/fe98652348eb4dbeea4aa611117d41f9e5d76259", "message": "documentation: Fix typos (#3886)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "discentem": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/1eb70e563a906f322d7f9e6d1a767f4c0330ea3f", "message": "removal instructions for osquery on macOS (#3872)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "clintharrison": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/39cfe35b6da5195723edac11d35e00b0a396371e", "message": "Support date type in OS X Preferences table (#3585) (#3845)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tonylambiris": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/d8dddacb31fc40e49697db923e7b4b9efbdf5889", "message": "Fixes compilation issues with latest master branch (#3826)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "GarretReece": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/0615372d026f67e8262ec66c92c36eb923c374db", "message": "Implement a logical_drives table for windows (#3818)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "allanliu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/6ff22d8065d8b049f1a934ac4ee58bfc34259214", "message": "tests: include posix table tests into OSQUERY_TABLE_TEST (#3819)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/1cd4ed949f9077c66ecf374bd63d2c6a0a0e6e7b", "message": "kafka logger: Kafka producer implemented as a Logger plugin (#3155)"}], "pull_requests": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/3563", "title": "ipmi tables: initial IPMI table implementations", "body": "This PR consists of the initial table implementations for `ipmi_mc`, `ipmi_fru`, `ipmi_lan`, and `ipmi_threshold_sensors`.  It utilizes OpenIPMI as the client to the system's IPMI interface.  The implementation uses OpenIPMI in a single threaded manor,  therefore all IPMI related calls are executed within a single thread.  In order for OpenIPMI to read available threshold sensors, it needs to be in the \"fully up\", which takes in the magnitude of minutes (up to ~5m within our infrastructure).  To get around this, the implemented `IPMIClient` is lazily loaded on the first query attempt to any of the ipmi tables, and kept as a singleton obj throughout the lifecycle of the process.  Because of the variability in how long it takes to reach this state, and an optional configuration parameter is exposed: \r\n```json\r\n{\r\n  \"options\": {\r\n    ...\r\n  },\r\n  \"packs\": {\r\n    \"some-system-snapshot\": {\r\n      \"queries\": {\r\n         ...\r\n      }\r\n    }\r\n  },\r\n  \"ipmi\": {\r\n     \"timeout\": 180000\r\n  }\r\n}\r\n```\r\n\r\nIf not configured, the timeout duration default to 3 minutes.  In the event that the timeout deadline has been exceeded and the condition the client accepts as \"fully up\" is not reached, the client considers the system to not to be in a working ipmi state, and will not attempt to initialize again for the lifecycle of the process.  So far,  I have not observed anything within our infra without some kind of intervention that osquery has no control over. ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "larryprice": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/35839fd5e2891ba28dfa886154b651de9c1763cb", "message": "Get all required attributes in one shot during brew install. (#3808)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "naunga": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/c769aefcff06c05eb23e4d0a9db331fb01ca0680", "message": "The curl command as given results in a 302. Added -L to the command so the redirect is followed. (#3807)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mjalkio": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/a3f6341e62597700034041519da28090b84e5f9e", "message": "website: Add previous version downloads (#3799)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zwass": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/b19b6db61ed75b01f3b7b89a2edd37b80efd8136", "message": "Detect disk encryption status on macOS 10.13 High Sierra (#3748)"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51394517", "body": "Is there any way that I can indicate approval/request revision?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51394517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51408470", "body": "lgtm\n\ndoes it work?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51408470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51411154", "body": "Added one more comment, and lgtm.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51411154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52088012", "body": "Given your example, looks like ARC will handle deallocating those ObjC objects. lgtm\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52088012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51411154", "body": "Added one more comment, and lgtm.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51411154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51394517", "body": "Is there any way that I can indicate approval/request revision?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51394517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51408470", "body": "lgtm\n\ndoes it work?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51408470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52088012", "body": "Given your example, looks like ARC will handle deallocating those ObjC objects. lgtm\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52088012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15909348", "body": "Oh I see this is a literal `{}`. The template language uses `{{}}`\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15909348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15910128", "body": "I prefer `[](const string &s) { return s == \"\"; }` but no big.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15910128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15910141", "body": "Word, I missed that.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15910141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16186147", "body": "Raw strings to the rescue here :)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16186147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16187183", "body": "Maybe I'm missing something here, but why not use the simpler solution from (http://stackoverflow.com/a/2912614/491710)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16187183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16187249", "body": "```\nstd::string errorMessage([[error localizedFailureReason] UTF8String]);\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16187249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16187317", "body": "This probably needs to be freed\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16187317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16187329", "body": "Needs to be freed?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16187329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16187339", "body": "similar here as 31.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16187339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16187355", "body": "Needs to be freed?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16187355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16187422", "body": "Is this guaranteed to be present on every system this might be building on?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16187422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16192754", "body": "Ah I see.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16192754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16073138", "body": "inline or macro? But it probably doesn't really matter.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16073138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16073656", "body": "Why not just set it equal to \"<\"?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16073656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16073706", "body": "```\nchar linked_against[512] = \"\";\n```\n\nthen you don't need the memset because the compiler will add the null byte.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16073706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16073867", "body": "Does this do what you intend? Won't each successive call to `snprintf` blow away the results of the previous?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16073867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16073927", "body": "Is there memory that needs to be freed at the end of this? All the `*Ref` stuff? It wasn't immediately clear to me by googling.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16073927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16184861", "body": "Right, I just had the dumb there.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16184861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16185153", "body": "This code will set the string to `<>` if the loop isn't entered, is that what you want? This line is exactly equivalent to\n\n```\nlinked_against = \"<\";\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16185153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16185307", "body": "To be sure, if `dependencies` is null, we want `linked_against` to be the empty string, but if `dependencies` is not null and `linked_count == 0`, we want `linked_against` to be `<>`? I have no problem with that, but want to make sure that's what you intend.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16185307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16185616", "body": "These are definitely necessary to correspond with the `malloc`s above. Do we need to do some sort of freeing for, for example, the `CFArrayCreateMutableCopy()` on line 125? That is almost certainly dynamically allocating memory. I'm not sure we can trust any of these `CF*` functions not to dynamically allocate memory, as IIRC Objective C uses refcounting to prevent memory leaks.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/16185616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901284", "body": "Why is this var name upper?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901421", "body": "Comment should be updated to explain what this means, or just eliminated.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901595", "body": "Why not std::unordered_set?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901615", "body": "Why not std::unordered_map?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901699", "body": "Is this zeroing necessary? Won't `proc_listpids` null terminate the array correctly?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901713", "body": "Same here re zeroing\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901776", "body": "And here\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901873", "body": "It's not intuitive to me why you set it like this, but it seems like you've thought it out...\n\n(Is there any way to comment on multiple lines?)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19700913", "body": "Not thrilled with this relative path, but some of the binary in the file was causing clang to choke if I put it in a string.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19700913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19700991", "body": "Yes, and the test plist is committed (see below).\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19700991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "dlobutters": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/2b82381203b6b37771ff20508a22ddf3c3161e73", "message": "Fixed hardware_serial (#3622)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fntneves": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/20ef4ee8e2230e02eb013fbc436b68493c7996f3", "message": "Fix IPv6 socket's family in socket events (#3759)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "securityclippy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/76e904941e6500d302abdc9654d0f2ad8ef1d3aa", "message": "soften language to not enabled rather than failed (#3744)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maus-": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/96d9f2693d518be4225d3a5b89c6ae4ab867d67b", "message": "Updated to scope all users by default (#3736)"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/osquery/issues/comments/67585263", "body": "+1 To this so I can avoid adding trailing ampersands on my init scripts.\n\nhttps://gist.github.com/maus-/3d10b7d11e674f030aee#file-osquery-L52\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/67585263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/67602507", "body": "Absolutely! It needs some more baking but I'll throw it your way as soon as its done. \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/67602507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "terracatta": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/02bbd83ce3d6cfa027bea257d736bf84339b8693", "message": "Add last_opened_time to apps table (#3715)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "thomas-maurice": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/210712ba6055bfb040fb649e5cd6422e6e0a4742", "message": "[usb_devices] fallback to ID_MODEL if ID_MODEL_FROM_DATABASE is absent (#3686)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lxcode": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/2f60dd0fd3ef5df9d19368c0d17d96990d088d1a", "message": "FreeBSD: Avoid clash with rapidjson (#3634)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/61e9f38f57fd89e86827f56c340206f1b57c6dfc", "message": "Add Jenkins status for FreeBSD (#3636)"}], "pull_requests": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/3697", "title": "Add OpenBSM support for FreeBSD.", "body": "This is copied wholesale from Darwin, save for adding includes for socket.h and in.h. Someday we should figure out a way to deduplicate.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Atyansh": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/68b1de153d19ea70b82b0a75ca1ffb37be467cad", "message": "tables: Adding posix curl virtual table (#3596)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zcatbear": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/4046", "title": "Add in support for flagfile switches when building", "body": "We always package with a custom flagfile. This adds in support (but not required) switches for flagfiles as well as support for custom TLS certificates in the linux package. ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "diptanu": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/3983", "title": "Added support for listing debian packages in running docker containers", "body": "This PR adds a new table `docker_container_deb_packages` which shows Debian packages in a running container. The implementation for this table is done in a generic manner by switching into the container's namespace and using the dpkg C lib to extract package metadata, so this could be extended to any other container implementation, such as ocid/lxc/rkt in the future.\r\n\r\nThe following could be improved -\r\na. Add an abstraction like Folly's Scope_Exit to remove redundant clean ups like closing file descriptors.\r\nb. Use some form of Expected<T> in place of Status where we expect to return Exceptions \r\nc. Possibly better abstractions to make the table implementation cleaner.\r\n\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/154517814", "body": "@theopolis @muffins Are we doing C++17 yet? I think if-expressions are a C++1z extension.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/154517814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/154797766", "body": "@spasam This implementation could be extended in the future to any other container implementation, and not just Docker. Also, even if we just wanted to do docker, copying files to a temp location every time we have to do this sounds messy. Also, not sure how that would look like for other package managers like RPM which behind the scenes use the Berkley DB, we will have to copy the entire database outside the container. ", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/154797766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/154807917", "body": "So I am guessing the action item for me here is to log any errors from close.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/154807917/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/154863870", "body": "We are not doing any form of exec or subprocess here, so I don't see how the process can have any un-controlled behaviour such as the one you are describing? But, it would be good if you can spend some time looking at the code and think about possible thread models.\r\n\r\nOn the topic of extending the logic to other containers, I don't intend to implement this for anything other than Docker right now, but I will add support for reporting rpm packages soon. I meant to say that, this construct of using a `NamespaceOps` to introspect other namespaces could be used if we decided to add support for other types of containers in the future. The logic for each container types would be slightly different, like in the case of Docker we use the docker api to first get the main pid of the container, for LXC we will have to use liblxc or something similar to get the parent pid, etc.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/154863870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/155369198", "body": "Done", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/155369198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/156492547", "body": "@marpaia Yeah right now not a goal to add other container runtimes, but if we keep it generic then we will have to force users to add additional Where clauses like `WHERE docker_container_id=2121` or `WHERE lxc_container_name=foo`. Totally depends on what user experience we want from this.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/156492547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/156502823", "body": "No, it doesn't. However I am open to making `id` an optional constraint.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/156502823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/157597722", "body": "`string()` returns `const char*` so we need to explicitly cast to `std::string` for getting the basic_string methods like `empty`, `find`, etc", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/157597722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/157881781", "body": "We will have to reset `varbuf` too before we continue, so leaving the logic to what it was before since it's cleaner to just skip the lines which are empty and resetting the `varbuf` after all the operations.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/157881781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/157888430", "body": "Well, if the container is running and we don't get the Pid of the container then it means our implementation is probably broken or something wrong with docker.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/157888430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/157897335", "body": "Looks like the API explicitly expects `char*`, and also the size of the buffer. So having a dynamically growing buffer won't help much, since the API expects a fixed size buffer. I am using std::vector instead of char* but even then we need the constant, to create a fixed size vector.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/157897335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/157906555", "body": "Added", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/157906555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/158132634", "body": "@muffins That's a good catch. The reason why this was working, was because the logic was working - after waitid returns success and we made it wait again, it would return an error because that pid was collected by the kernel. Missed the break, fixed.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/158132634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "cmc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/osquery/issues/comments/60474065", "body": "Body file format is a good starting place. http://wiki.sleuthkit.org/index.php?title=Body_file - with the option to convert unix timestamps to human readable and sort. This is typically two seperate activities in practice (create bodyfile -> convert to timeline). We should be able to select between timeframes. We might need to cache timelines somehow as they take some time to generate.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/60474065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "vmauge": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/osquery/issues/comments/60899323", "body": "It seems that downloads download done with firefox are not store in the quarantine database.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/60899323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/62843618", "body": "On the Mac version, we need to extend the switch case to support other file types : pipe, kqueue, unix, shm, ... \n\n```\n$ build/darwin/osquery/osqueryi  \"select file_type,count(1) from process_open_files group by file_type;\"\n\n+-----------+----------+\n| file_type | count(1) |\n+-----------+----------+\n|           | 7722     |\n| TCP       | 57       |\n| TCP6      | 2        |\n| UDP       | 9        |\n| UDP6      | 2        |\n| file      | 1792     |\n+-----------+----------+\n$ lsof | awk '{print $5}' | sort | uniq -c | sort\n   1 TYPE\n   3 IPv6\n   4 PSXSHM\n   7 PSXSEM\n  10 systm\n  57 IPv4\n  64 PIPE\n 125 KQUEUE\n 175 DIR\n 184 unix\n 366 CHR\n2712 REG\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/62843618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19671301", "body": "Can you add a field to store the type of file ? This should match your different switch case (file, tcp, udp, ...)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19671301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20203843", "body": "```\n/Users/vmauge/osquery/osquery/tables/system/suid_bin.cpp:55:13: warning: & has lower precedence than ==; == will be evaluated first [-Wparentheses]\n  if (perms & 04000 == 04000) {\n```\n\nWe need to add parenthesizes around to avoid issue. \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20203843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20203884", "body": "This need to be moved inside the try/catch.\n\n```\nosquery> select * from suid_bin;\nlibc++abi.dylib: terminating with uncaught exception of type boost::filesystem::filesystem_error: boost::filesystem::status: Bad file descriptor: \"/dev/fd/3\"\nAbort trap: 6\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20203884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "wizzat": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/osquery/issues/comments/60814538", "body": "lsof source for OSX: http://www.opensource.apple.com/source/lsof/lsof-52/lsof/\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/60814538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/60984359", "body": "Perhaps more interesting, because it relies on libproc: https://github.com/u35tpus/iosrep/tree/master/lsof/dialects/darwin/libproc\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/60984359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/62842760", "body": "Ack, I forgot to do the Linux half of this. Let me take a look at this tomorrow morning and I'll tell you then.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/62842760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/60819302", "body": "OSX source: http://www.opensource.apple.com/source/adv_cmds/adv_cmds-138.1/ps/\nLinux Source: http://procps.sourceforge.net/\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/60819302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/60903755", "body": "As it turns out: Linux was infinitely easier than OSX due to libproc not exposing environment variables on a process level. Instead, we had to use some \"backdoor\" sysctl functions that ps relies on. The linux port was able to use procfs and went very smoothly.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/60903755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/60985237", "body": "Fixed in #270 \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/60985237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/facebook/osquery/comments/8348262", "body": "make format did this.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8348262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19681455", "body": "Sure!\n\nOn Fri, Oct 31, 2014 at 8:01 AM, Vincent Maug\u00e9 notifications@github.com\nwrote:\n\n> In osquery/tables/system/darwin/processes.cpp:\n> \n> > @@ -210,24 +145,225 @@ void genProcessEnv(int pid,\n> >      std::string value = itr->substr(idx + 1);\n> >      env[key] = value;\n> >    }\n> > +\n> > -  return env;\n> >   +}\n> >   +\n> >   +struct OpenFile {\n> \n> Can you add a field to store the type of file ? This should match your\n> different switch case (file, tcp, udp, ...)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/osquery/pull/308/files#r19671301.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19681455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247460294", "body": "@yying updated the pull request - [view changes](https://github.com/facebook/osquery/pull/2469/files/c0b1a61c0ce4d70225874b0cb6272c0ff9f530b0..8ba6b7a0dc31411078e1414bdb24f6c27a0af381)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247460294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247510476", "body": "@yying updated the pull request - [view changes](https://github.com/facebook/osquery/pull/2469/files/aa121edad2757774bd02cc491ca112db8527bdbc..bb99bff57306eba60d3b31ec584f53c63e779a1c)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247510476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247610202", "body": "@yying updated the pull request - [view changes](https://github.com/facebook/osquery/pull/2469/files/bb99bff57306eba60d3b31ec584f53c63e779a1c..8358e67eb9d2019d4a34a466a133b412f35e1803)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247610202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247638765", "body": "@yying updated the pull request - [view changes](https://github.com/facebook/osquery/pull/2469/files/8358e67eb9d2019d4a34a466a133b412f35e1803..a150ba9e4a43f3887a8c36b55f91589b8772b39a)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247638765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/248045489", "body": "@yying updated the pull request - [view changes](https://github.com/facebook/osquery/pull/2469/files/a150ba9e4a43f3887a8c36b55f91589b8772b39a..9708281f5a57c8dc0a2afff10167b954d29e738e)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/248045489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/248105955", "body": "@yying updated the pull request - [view changes](https://github.com/facebook/osquery/pull/2469/files/9708281f5a57c8dc0a2afff10167b954d29e738e..b53eeeb5df1309620863f6c3f8c1b13cb28e4511)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/248105955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/248392621", "body": "@yying updated the pull request - [view changes](https://github.com/facebook/osquery/pull/2469/files/b53eeeb5df1309620863f6c3f8c1b13cb28e4511..2cea2f205718d4d711fdc294cd630c4a62fec859)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/248392621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/248416265", "body": "@yying updated the pull request - [view changes](https://github.com/facebook/osquery/pull/2469/files/2cea2f205718d4d711fdc294cd630c4a62fec859..235222008d5c3766dad8a24523e2cc614d17e0fe)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/248416265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247721694", "body": "@PoppySeedPlehzr updated the pull request - [view changes](https://github.com/facebook/osquery/pull/2470/files/864f9dc73a331b601a948b975afe7c697c3b4371..decff81c3549b95ec86791559b719c2ff8496cdc)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247721694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247658852", "body": "@yying updated the pull request - [view changes](https://github.com/facebook/osquery/pull/2471/files/ed4bad52f732282ddad1fdb25f0c071d1c258216..e85ca0e938d18d266a61061b83e6406567fd3461)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247658852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/248133108", "body": "@yying updated the pull request - [view changes](https://github.com/facebook/osquery/pull/2471/files/78d171f0aefb38abe789e4e1fdd2d738e6cc2c31..d568eadbc43489d36b24a598ddf415e91731fd9e)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/248133108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247517941", "body": "@theopolis updated the pull request - [view changes](https://github.com/facebook/osquery/pull/2473/files/af882192e092181c76e5cf73a04fc309e90c3a1d..54d6f6826d7117c00f0f9b55a45b2053fe73b307)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247517941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247540309", "body": "@theopolis updated the pull request - [view changes](https://github.com/facebook/osquery/pull/2473/files/54d6f6826d7117c00f0f9b55a45b2053fe73b307..88fc7b22ec90dc3a7fd7ff6174883032466c8c84)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247540309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247540442", "body": "@theopolis updated the pull request - [view changes](https://github.com/facebook/osquery/pull/2473/files/88fc7b22ec90dc3a7fd7ff6174883032466c8c84..87f2437a04b061f51d08304b83b19a50bd52c543)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247540442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247623000", "body": "@theopolis updated the pull request - [view changes](https://github.com/facebook/osquery/pull/2473/files/87f2437a04b061f51d08304b83b19a50bd52c543..749edbd71ef5e1b9a2aa975cc219e7672edf7efe)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247623000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247633136", "body": "@theopolis updated the pull request - [view changes](https://github.com/facebook/osquery/pull/2473/files/749edbd71ef5e1b9a2aa975cc219e7672edf7efe..30cafc1ab37dcfb13d2145059d1724be3c45653e)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247633136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247634381", "body": "@theopolis updated the pull request - [view changes](https://github.com/facebook/osquery/pull/2473/files/30cafc1ab37dcfb13d2145059d1724be3c45653e..97df4fbb84bb1c49bd7489761d64f6e8d99f1084)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247634381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247635455", "body": "@theopolis updated the pull request - [view changes](https://github.com/facebook/osquery/pull/2473/files/97df4fbb84bb1c49bd7489761d64f6e8d99f1084..d20f7b1ee89e2b3617188026f517bf9ca99b2536)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247635455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247643121", "body": "@theopolis updated the pull request - [view changes](https://github.com/facebook/osquery/pull/2473/files/d20f7b1ee89e2b3617188026f517bf9ca99b2536..c977cfaf75bfd0a45fa18965db1288d526369c20)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247643121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247656228", "body": "@theopolis updated the pull request - [view changes](https://github.com/facebook/osquery/pull/2473/files/c977cfaf75bfd0a45fa18965db1288d526369c20..70ed94075c7f2b2803907a11de59ffad94d1704e)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247656228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247666052", "body": "@theopolis updated the pull request - [view changes](https://github.com/facebook/osquery/pull/2473/files/70ed94075c7f2b2803907a11de59ffad94d1704e..57f55e060f728ea78f46f82e42edf92eb964350e)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/247666052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/248065924", "body": "@zwass updated the pull request - [view changes](https://github.com/facebook/osquery/pull/2475/files/94e93afbedd60aaf85933e74d099448de9d6d0c5..0ff93f1faaac87ed7b66b611cc99576bd475fcee)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/248065924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/248144349", "body": "@theopolis updated the pull request - [view changes](https://github.com/facebook/osquery/pull/2476/files/1571e89dac57f7ce033245eb1979cee06492bdc1..0250157638af9fc5398687e21d21958b8f4fb168)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/248144349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/248204829", "body": "@PoppySeedPlehzr updated the pull request - [view changes](https://github.com/facebook/osquery/pull/2478/files/29e094bbcb25dc26dfcce6f07fcae006eb796159..42d7b86b2d5edbeafc1902c72ed6254929c26d49)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/248204829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/248353420", "body": "@PoppySeedPlehzr updated the pull request - [view changes](https://github.com/facebook/osquery/pull/2478/files/42d7b86b2d5edbeafc1902c72ed6254929c26d49..2a51b06a2e3ac24308c7669f0fb98574d1c16c89)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/248353420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/248198583", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/248198583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/248466655", "body": "@hackgnar updated the pull request - [view changes](https://github.com/facebook/osquery/pull/2485/files/2fc4dd26724e0da779f581a1a3b3a4818843b918..636c050c649e0afd9a4202eb5aa7931e3ea54965)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/248466655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/248983686", "body": "@PoppySeedPlehzr updated the pull request - [view changes](https://github.com/facebook/osquery/pull/2488/files/c09bb30ee99708b0c7f3d48e6171c1e11967f0b0..e1fd046ad2696d05dab08a718818ac39f826ad44)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/248983686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/248675182", "body": "@theopolis updated the pull request - [view changes](https://github.com/facebook/osquery/pull/2493/files/6c4fe80d853d9c326d23dfb27007933847eceff2..d44e2c5c25a9f2c91a7b2f4abb0c624c63bd3cde)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/248675182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/248745436", "body": "@PoppySeedPlehzr updated the pull request - [view changes](https://github.com/facebook/osquery/pull/2500/files/fc19d74d6fcc7d0606b325ae13e5d91d1a7e7953..a80044228be330fb167e535fe2cca57f482e69ae)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/248745436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sroberts": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56576432", "body": "Looks like it's an alias in both cases:\n- `lrwxr-xr-x   1 root  wheel   104 Mar  8  2013 com.oracle.java.Java-Updater.plist -> /Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Resources/com.oracle.java.Java-Updater.plist`\n- `lrwxr-xr-x  1 sroberts  cloakproxy  61 Dec 12  2013 /Users/sroberts/Library/LaunchAgents/homebrew.mxcl.rabbitmq.plist -> /opt/boxen/homebrew/opt/rabbitmq/homebrew.mxcl.rabbitmq.plist`\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56576432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56873220", "body": "Ahhh intresting. The linked file is there, but the thing it's linked to is gone, so it fails to follow it.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56873220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56891556", "body": ":metal:\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56891556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56576432", "body": "Looks like it's an alias in both cases:\n- `lrwxr-xr-x   1 root  wheel   104 Mar  8  2013 com.oracle.java.Java-Updater.plist -> /Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Resources/com.oracle.java.Java-Updater.plist`\n- `lrwxr-xr-x  1 sroberts  cloakproxy  61 Dec 12  2013 /Users/sroberts/Library/LaunchAgents/homebrew.mxcl.rabbitmq.plist -> /opt/boxen/homebrew/opt/rabbitmq/homebrew.mxcl.rabbitmq.plist`\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56576432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56873220", "body": "Ahhh intresting. The linked file is there, but the thing it's linked to is gone, so it fails to follow it.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56873220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56891556", "body": ":metal:\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56891556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/42367728", "body": "@theopolis Makes sense to me. I kept it simple, but didn't check out the spec. Certainly should have.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/42367728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/49112233", "body": "Tight code is tight! I can certainly tweak that. \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/49112233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/49112506", "body": "Ahhh sorry, I was trying to be complete and making sure that stuff was captured in case it was useful later. I went back and forth about checking for the secrets path. I can think of pros and cons. What's your take?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/49112506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "astanway": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56605021", "body": "Not really sure. It ends up just crashing the daemon straight up, not printing a -1 to the table.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56605021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56681944", "body": "Any chance for a small example demonstrating the API usage?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56681944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56764985", "body": "+1, looking forward to this\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56764985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56859733", "body": "There are no interesting logs (my table is called socket_inode):\n\nI0925 18:09:22.850921  2818 daemon.cpp:17] Listing all plugins\nI0925 18:09:22.851269  2818 daemon.cpp:19] Logger plugins:\nI0925 18:09:22.851404  2818 daemon.cpp:21]   - filesystem\nI0925 18:09:22.851483  2818 daemon.cpp:24] Config plugins:\nI0925 18:09:22.851552  2818 daemon.cpp:26]   - filesystem\nI0925 18:09:22.851614  2818 daemon.cpp:29] Event Types:\nI0925 18:09:22.851671  2818 daemon.cpp:31]   - INotifyEventType\nI0925 18:09:22.851722  2818 daemon.cpp:34] Event Modules:\nI0925 18:09:22.951056  2820 scheduler.cpp:60] osquery::initializeScheduler\nI0925 18:09:23.024814  2820 scheduler.cpp:19] launchQueries: 22\nI0925 18:09:23.024979  2820 scheduler.cpp:22] executing query: SELECT \\* from socket_inode;\nI0925 18:09:23.025208  2820 registry.cpp:20] Attaching virtual table: socket_inode\nI0925 18:09:23.025953  2820 registry.cpp:20] Attaching virtual table: kernel_modules\nI0925 18:09:23.026238  2820 registry.cpp:20] Attaching virtual table: routes\nI0925 18:09:23.026521  2820 registry.cpp:20] Attaching virtual table: processes\nI0925 18:09:23.026754  2820 registry.cpp:20] Attaching virtual table: time\nI0925 18:09:23.026975  2820 registry.cpp:20] Attaching virtual table: etc_hosts\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56859733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56868433", "body": "Yep. Can you replicate by giving bad data to a QueryResult?\n\nOn Thu, Sep 25, 2014 at 3:00 PM, Mike Arpaia notifications@github.com\nwrote:\n\n> and it just stops running after that?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/osquery/issues/156#issuecomment-56866819.\n\n## \n\nAbe Stanway\nabe.is\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56868433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56870990", "body": "Try giving it an uninitialized string?\n\nOn Thu, Sep 25, 2014 at 3:24 PM, Mike Arpaia notifications@github.com\nwrote:\n\n> I changed the \"name\" column of the processes table to be an int (but it\n> obv gets a string). The warning log is full of warnings, but everything\n> seems to be working fine. I just get logs like this:\n> \n> {\"diffResults\":{\"added\":[{\"name\":\"-1\",\"path\":\"\\/Users\\/marpaia\\/git\\/osquery\\/build\\/osquery\\/osqueryd\",\"pid\":\"70795\"}        ],\"removed\":[{\"name\":\"-1\",\"path\":\"\\/Users\\/marpaia\\/git\\/osquery\\/build\\/osquery\\/osqueryd\",\"pid\":\"70670\"}        ]},\"name\":\"processes\",\"hostname\":\"marpaia-mbp.local\",\"calendarTime\":\"Thu Sep 25 12:23:31 2014\",\"unixTime\":\"1411673011\"}\n> \n> Notice how \"name\" is \"-1\".\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/osquery/issues/156#issuecomment-56870201.\n\n## \n\nAbe Stanway\nabe.is\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56870990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56878331", "body": "Specifically, this kills it:\n\n```\nstd::string fail;\nr[\"column\"] = boost::lexical_cast<std::string>( fail );\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56878331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57064975", "body": "What we we thinking about tailoring the event framework to handle this? We'll need to register another EventType, but I'm at a loss for kernel APIs that will let us monitor syscalls which won't have severe performance impacts.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57064975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57065218", "body": "The best I can come up with, apart from ptrace, is some kind of kernel module that futzes with the syscalls table, almost like a rootkit...\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57065218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57065783", "body": "LTTng - never heard of that, but it looks promising. I tend to think writing a minimal kernel module from scratch is the way to go, though. We could feasibly patch the kernel and replace the syscalls table with one of our own that issues some kind of async callback every time something is called? That sounds slightly ridiculous, no? Sounds possible from an implementation standpoint, but all bets are off re: perf\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/57065783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55927679", "body": "If this is enabled, the log format should be some compressed format, not JSON. Thrift is the house flavor, so not opposed to that.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55927679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55940766", "body": "All valid points (with the added note that single instance ingress is also a problem with logstash and friends, which also aggregate to a single host or set of hosts fronted by round-robin). \n\nIt's mainly a UX concern - install and adoption can be much, much easier when you don't _also_ have to install a full logstash stack to make decent use of this. Is that worth the fragility and failure mode of a broken network connection that is handled by logging and forwarding? Probably not in production, but in dev environments and/or small setups, it could come in handy.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/55940766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56605021", "body": "Not really sure. It ends up just crashing the daemon straight up, not printing a -1 to the table.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56605021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56859733", "body": "There are no interesting logs (my table is called socket_inode):\n\nI0925 18:09:22.850921  2818 daemon.cpp:17] Listing all plugins\nI0925 18:09:22.851269  2818 daemon.cpp:19] Logger plugins:\nI0925 18:09:22.851404  2818 daemon.cpp:21]   - filesystem\nI0925 18:09:22.851483  2818 daemon.cpp:24] Config plugins:\nI0925 18:09:22.851552  2818 daemon.cpp:26]   - filesystem\nI0925 18:09:22.851614  2818 daemon.cpp:29] Event Types:\nI0925 18:09:22.851671  2818 daemon.cpp:31]   - INotifyEventType\nI0925 18:09:22.851722  2818 daemon.cpp:34] Event Modules:\nI0925 18:09:22.951056  2820 scheduler.cpp:60] osquery::initializeScheduler\nI0925 18:09:23.024814  2820 scheduler.cpp:19] launchQueries: 22\nI0925 18:09:23.024979  2820 scheduler.cpp:22] executing query: SELECT \\* from socket_inode;\nI0925 18:09:23.025208  2820 registry.cpp:20] Attaching virtual table: socket_inode\nI0925 18:09:23.025953  2820 registry.cpp:20] Attaching virtual table: kernel_modules\nI0925 18:09:23.026238  2820 registry.cpp:20] Attaching virtual table: routes\nI0925 18:09:23.026521  2820 registry.cpp:20] Attaching virtual table: processes\nI0925 18:09:23.026754  2820 registry.cpp:20] Attaching virtual table: time\nI0925 18:09:23.026975  2820 registry.cpp:20] Attaching virtual table: etc_hosts\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56859733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56868433", "body": "Yep. Can you replicate by giving bad data to a QueryResult?\n\nOn Thu, Sep 25, 2014 at 3:00 PM, Mike Arpaia notifications@github.com\nwrote:\n\n> and it just stops running after that?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/osquery/issues/156#issuecomment-56866819.\n\n## \n\nAbe Stanway\nabe.is\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56868433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56870990", "body": "Try giving it an uninitialized string?\n\nOn Thu, Sep 25, 2014 at 3:24 PM, Mike Arpaia notifications@github.com\nwrote:\n\n> I changed the \"name\" column of the processes table to be an int (but it\n> obv gets a string). The warning log is full of warnings, but everything\n> seems to be working fine. I just get logs like this:\n> \n> {\"diffResults\":{\"added\":[{\"name\":\"-1\",\"path\":\"\\/Users\\/marpaia\\/git\\/osquery\\/build\\/osquery\\/osqueryd\",\"pid\":\"70795\"}        ],\"removed\":[{\"name\":\"-1\",\"path\":\"\\/Users\\/marpaia\\/git\\/osquery\\/build\\/osquery\\/osqueryd\",\"pid\":\"70670\"}        ]},\"name\":\"processes\",\"hostname\":\"marpaia-mbp.local\",\"calendarTime\":\"Thu Sep 25 12:23:31 2014\",\"unixTime\":\"1411673011\"}\n> \n> Notice how \"name\" is \"-1\".\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/osquery/issues/156#issuecomment-56870201.\n\n## \n\nAbe Stanway\nabe.is\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56870990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56878331", "body": "Specifically, this kills it:\n\n```\nstd::string fail;\nr[\"column\"] = boost::lexical_cast<std::string>( fail );\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56878331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56764985", "body": "+1, looking forward to this\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56764985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19643171", "body": "Yeah, agreed. Apparently (although haven't actually seen it in practice) the sendmsg requests can come back as multiple netlink messages - not sure the best way to get them all. @theopolis thoughts?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19643171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19643634", "body": "@theopolis actually, looks like you do some netlink stuff in routes.cpp - if we can just put the remote port, local port, and inode in the routes table and piggyback onto that logic, then we don't even need to add this port_inode table.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19643634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19826531", "body": "Ah, I think this is leftover from when I was trying to also put syscall stuff here. Something about the process (osquery) looking at it's own /proc data and continuing to recursively open zillions of file descriptors. No longer needed, will remove.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19826531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "lbrandy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/osquery/comments/7766837", "body": "heh @ this. This can probably be slightly clarified to use lambdas, again assuming C++11, instead of needing boost::bind and the dummy functions. \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7766837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/17491129", "body": "Do you actually want/need a shared_ptr? Could it be...\n\n```\nDispatcher& Dispatcher::getInstance() {\n  static Dispatched d;\n  return d;\n}\n```\n\nAlso it's worth pointing out that this (either version) is only threadsafe in C++11. Does this project have that requirement? \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/17491129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/17491129", "body": "Do you actually want/need a shared_ptr? Could it be...\n\n```\nDispatcher& Dispatcher::getInstance() {\n  static Dispatched d;\n  return d;\n}\n```\n\nAlso it's worth pointing out that this (either version) is only threadsafe in C++11. Does this project have that requirement? \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/17491129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "eastebry": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/osquery/comments/8019574", "body": "Does this dependency need to be added to tools/provision.sh as well?\n\nEdit: just saw your last commit. Nevermind!\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8019574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8787105", "body": "I'm occasionally seeing some segfaults going through `getHostIdentifier`. I didn't see these earlier; could this line be causing a scoping issue?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8787105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "pstorralba": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/osquery/comments/8356103", "body": "I would like to change the OS X implementation, but I couldn't find any\nnetwork API to do it. Pointers are welcome!\n\nOn Wed, Oct 29, 2014 at 11:21 AM, Teddy Reed notifications@github.com\nwrote:\n\n> Solid, but, osquery should avoid \"shelling out\" to commands and parsing\n> the stdout/stderr. Is it possible to parse the information using\n> net-related OS X C/C++ APIs? The Linux implementation that uses /proc is\n> awesome!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/osquery/commit/c660f077d1cef578f5f3381553dce46fdc249a89#commitcomment-8355976\n> .\n## \n\n\"Las monta\u00f1as no son estadios donde satisfacer nuestra ambici\u00f3n de logros,\nson las catedrales donde practicar nuestra religi\u00f3n.\"\nAnatoli Bukr\u00e9yev\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8356103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19692738", "body": "Thanks for all the good feedback!!\n\nAll the changes are now ready for review.\n\nOn Fri, Oct 31, 2014 at 12:55 PM, Mike Arpaia notifications@github.com\nwrote:\n\n> In osquery/tables/system/darwin/quarantine.cpp:\n> \n> > -   boost::split(values, value, boost::is_any_of(\";\"));\n> > -   boost::trim(values[2]);\n> >   +\n> > -   r[\"path\"] = filePath;\n> > -   r[\"creator\"] = values[2];\n> >   +\n> > -   results.push_back(r);\n> > -   free(value);\n> > -      }\n> > -    } catch (...) {\n> > -      // handle invalid files like /dev/fd/3\n> > -    }\n> > -    try {\n> > -      ++it;\n> > -    } catch (std::exception &ex) {\n> > -      it.no_push(); // handle permission error.\n> \n> maybe a LOG(INFO) or LOG(WARNING) here?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/osquery/pull/310/files#r19689747.\n\n## \n\n\"Las monta\u00f1as no son estadios donde satisfacer nuestra ambici\u00f3n de logros,\nson las catedrales donde practicar nuestra religi\u00f3n.\"\nAnatoli Bukr\u00e9yev\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19692738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19561337", "body": "Thanks for notes. Fixed both in a new commit in the arp branch.\n\nThe 'foo' var was just a place holder to ignore de field. Should it had to\nbeen clearer.\n\nOn Wed, Oct 29, 2014 at 11:20 AM, mtmcgrew notifications@github.com wrote:\n\n> In osquery/tables/specs/x/arp.table:\n> \n> > @@ -0,0 +1,7 @@\n> > +table_name(\"arp\")\n> > +schema([\n> > -    Column(name=\"ip\", type=\"std::string\"),\n> > -    Column(name=\"arp\", type=\"std::string\"),\n> \n> The \"arp\" field contains the MAC address of the remote machine in the arp\n> table. A better name might be \"mac\"\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/osquery/pull/271/files#r19560383.\n\n## \n\n\"Las monta\u00f1as no son estadios donde satisfacer nuestra ambici\u00f3n de logros,\nson las catedrales donde practicar nuestra religi\u00f3n.\"\nAnatoli Bukr\u00e9yev\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19561337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "TonyFo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/osquery/comments/8390111", "body": "Samsung\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8390111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "citylights": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/osquery/comments/8401419", "body": "How dose this work? ?????\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8401419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jfunction": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/osquery/comments/8778428", "body": "I'm guessing around line 146 of osquery/tables/system/linux/processes.cpp should be changed as well? Though I'm not truly sure why the INTEGERs where made into TEXTs. Reason being, running on my Ubuntu 14.04 I get:\n\n``` bash\nosquery> select name, user_time from processes order by user_time desc limit 10;\n\n+-----------------+-----------+\n| name            | user_time |\n+-----------------+-----------+\n| indicator-print | 9         |\n| glib-pacrunner  | 9         |\n| avahi-daemon    | 86        |\n| ibus-ui-gtk3    | 838       |\n| upstart-udev-br | 8         |\n| uml_switch      | 8         |\n| dconf-service   | 8         |\n| indicator-sessi | 8         |\n| gvfs-udisks2-vo | 8         |\n| pulseaudio      | 762       |\n+-----------------+-----------+\n```\n\nSo instead I must do:\n\n``` bash\nosquery> select name, user_time from processes order by cast(user_time as unsigned) desc limit 10;\n\n+----------------+-----------+\n| name           | user_time |\n+----------------+-----------+\n| firefox        | 142731    |\n| VirtualBox     | 20890     |\n| Xorg           | 19241     |\n| compiz         | 15009     |\n| osqueryi       | 6169      |\n| gnome-terminal | 3332      |\n| VBoxSVC        | 2995      |\n| ibus-daemon    | 2834      |\n| VirtualBox     | 2731      |\n| VBoxXPCOMIPCD  | 1142      |\n+----------------+-----------+\n```\n\nIncidentally, I noticed wired_size not mentioned in linux processes.cpp? Is this unsupported on linux and is there a standard way of making unsupported collumns explicit? For example, a /x/foo.table file can have columns a,b,c but a,b supported on linux and a,c on mac. Is there some way to \"hide\" b/c on mac/linux respectively?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8778428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "lwhsu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/osquery/comments/9061837", "body": "Yes the FreeBSD implementation is in progress (but slow, I'm really sorry about that.)\n\nThanks for the offer, a FreeBSD build slave is a big help, and it's nice to have more people interested to join.  I'll also try to recruit some FreeBSD friends.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/9061837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20409479", "body": "I also like a more standard and conststent way in osquery.\nSo do you recommend changing to this?\n\n``` c\n#ifndef FREEBSD\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20409479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20409488", "body": "No, it's just a placeholder to prevent going to the else() part.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20409488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20409497", "body": "FreeBSD specific table implementations are still under the way.\nCurrently define it as an empty list for not using osquery_tables_linux.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20409497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20409512", "body": "Oh right, this command is newly added to 10.0-RELEASE.  Since we're mostly in userland, replace to `uname -r` is fine.  I am working under 10.0-RELEASE and soon transfer to 10.1-RELEASE, I haven't tested under old versions.  I plan to do that after osquery is fully working under FreeBSD 10.x\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20409512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20413201", "body": "Sounds like a good idea, I define `LINUX` in top level CMakeLists.txt , which will be pushed later.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20413201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20413210", "body": "Yes, the only difference is compiler flags are different (`-stdlib=libc++`)\nI've rearrange this a little bit.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20413210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20413215", "body": "Yes, make(1) under BSDs is actually bmake, and GNU make is installed from ports as gmake.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20413215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20413228", "body": "I'd like to.  I see we use .a for some libraries and .so for others, is there any specific reason we need to have those libraries statically linked?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20413228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20413252", "body": "I've never used CPack, just did a quick search and it seems not.  I've changed this to `IF(LINUX)`.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20413252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20413310", "body": "So you recommend finishing the dependency installation part before merging?  Fair enough.  I submit this pull request before having tables under `spec/x` finished just because I found we have some clean up in the build infrastructure last week, which made some conflicts and I don't want to go through the build scripts 3rd times :)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20413310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20409479", "body": "I also like a more standard and conststent way in osquery.\nSo do you recommend changing to this?\n\n``` c\n#ifndef FREEBSD\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20409479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20409488", "body": "No, it's just a placeholder to prevent going to the else() part.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20409488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20409497", "body": "FreeBSD specific table implementations are still under the way.\nCurrently define it as an empty list for not using osquery_tables_linux.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20409497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20409512", "body": "Oh right, this command is newly added to 10.0-RELEASE.  Since we're mostly in userland, replace to `uname -r` is fine.  I am working under 10.0-RELEASE and soon transfer to 10.1-RELEASE, I haven't tested under old versions.  I plan to do that after osquery is fully working under FreeBSD 10.x\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20409512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mofarrell": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/osquery/comments/11888942", "body": "nit:  load the kext on the target/vm\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/11888942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "mchugh19": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/osquery/comments/17274357", "body": "@himanshudas @theopolis \nruby1.8-dev does not exist in Debian jessie. Please advise\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/17274357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "fuzzball5000": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/osquery/comments/17945342", "body": "Ah cr@p, apologies! \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/17945342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/18145583", "body": "https://github.com/facebook/osquery/pull/2223 \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/18145583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "xuwancai": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/osquery/comments/18293016", "body": "hi, this line only generate a log line?  the result is error ? When i finding the change , I read dmidecode.c, but dmidecode do not limit it. \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/18293016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/18877835", "body": "However, when i test osquery in some system, i find that the smbios in /sys/firmware/efi/systab is like smbios=0xc899d000. in this case, this function cannot get smbios data, but dmicode can; Also in function readFromAddress , the size maybe lower than 0xFFF0, so i think maybe \"for (offset = 0; offset <= 0xFFF0 && offset <=size ; offset += 16)\" is a good choose.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/18877835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "leanderson41": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/osquery/comments/18888755", "body": "Help\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/18888755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/18888758", "body": "Help\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/18888758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "xiangfan-ms": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/osquery/comments/22112259", "body": "A kind reminder, '-fpermissive' in GCC/Clang has the opposite meaning to '/permissive-' in MSVC (note the extra '-' at the end).\r\n\r\nGCC/Clang use strict mode by default, so you don't want to add -fpermissive.\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/22112259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/22125217", "body": "@poppyseedplehzr \r\nin case you didn't see my previous comment :-)", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/22125217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "alex": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19760377", "body": "This is going to result in quadratic behavior when building up a dataset; probably not a big deal for listening sockets, but if someone reuses this for something else, it might have unexpected performance implications, maybe there should be a note in the header?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19760377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19760377", "body": "This is going to result in quadratic behavior when building up a dataset; probably not a big deal for listening sockets, but if someone reuses this for something else, it might have unexpected performance implications, maybe there should be a note in the header?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19760377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jiripospisil": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20059191", "body": "This is not correct. The internal type should be `char[]`, not `char`. That way, `std::unique_ptr` will use the proper deleter when destroying dynamic arrays. \n\nAlso I wonder whether the whole seek&buffer dance is actually necessary. You could read the contents of the file to a temporary `std::string` (with `std::istream_iterator` via its constructor taking iterators) and, if successful, move-assign the temporary to the `content` out variable.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20059191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20059198", "body": "The destructor of `file_h` should take care of closing the underlying file on its own.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20059198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20059191", "body": "This is not correct. The internal type should be `char[]`, not `char`. That way, `std::unique_ptr` will use the proper deleter when destroying dynamic arrays. \n\nAlso I wonder whether the whole seek&buffer dance is actually necessary. You could read the contents of the file to a temporary `std::string` (with `std::istream_iterator` via its constructor taking iterators) and, if successful, move-assign the temporary to the `content` out variable.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20059191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20059198", "body": "The destructor of `file_h` should take care of closing the underlying file on its own.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20059198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "lutter": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/150365308", "body": "`aug_close` is perfectly happy with a `nullptr` ...", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/150365308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "mjpieters": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/104287604", "body": "Should this perhaps be named `executionTimeout` instead? As it is a maximum time limit, not a fixed amount of time.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/104287604/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "mathieuk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/37133639", "body": "I checked:\n- libboost on wheezy is 1.49. Build system expects libboost-atomic which is seemingly a c++11 thing for which wheezy does not have the right compiler by default. It seems we'll need to build this for wheezy. Jessie has libboost 1.55 which does have libboost-atomic.\n- cmake in wheezy is 2.8.9, build system expects 2.8.12 or better. Jessie has 3.0.x.\n- gflags and snappy are available in wheezy - with static libraries.\n- Thrift and Yara are not available in wheezy, but Yara is 3.1.0 available in Jessie \n\nI'll try some builds with changed scripts that reflect the above. \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/37133639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/37133650", "body": "That might've worked, but condition_variable only bugs out on building rocksdb which isn't in this cmake harness. I'll leave this in as is for now. \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/37133650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/37133911", "body": "Jessie has yara 3.1.0 which doesn't completely jive with the code in osquery:\n\n```\n/vagrant/osquery/tables/other/yara_utils.cpp:47:67: error: invalid conversion from 'void (*)(int, const char*, int, const char*, void*)' to 'YR_COMPILER_CALLBACK_FUNC {aka void (*)(int, const char*, int, const char*)}' [-fpermissive]\n\n\n   yr_compiler_set_callback(compiler, YARACompilerCallback, nullptr);\n\n```\n\n(and some apparent variations on that regarding)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/37133911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "martin-majlis": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19700985", "body": "It looked to me that create is in fact open where instead of path to file is \":memory:\".\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19700985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19701044", "body": "There is a function in Objective-C++ (users.mm) which is retrieving all users. But I don't know Objective-C++ - so I have used this simplification to somehow continue. It should be replaced with some better function.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19701044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19701054", "body": "It's just for debugging.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19701054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19701076", "body": "It's not unit test.\nI was trying to debug why is opening real SQLite database from disk failing. It works  with this in-memory.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19701076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "akshaydixi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19701589", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19701589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19701608", "body": "Done. Ran clang-format-3.4 \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19701608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "polachok": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19782097", "body": "Pardon my ignorance, but what happens? Do you mean that std::string is padded with whitespace to the length of char[] buffer? I can't reproduce this behaviour.\nOTOH,\n\n```\nstorage7 : ~ [0] # cat /sys/block/sda/device/vendor | hexdump -C                                                                                                                                                                              \n00000000  41 54 41 20 20 20 20 20  0a                       |ATA     .|\n00000009\n```\n\ntrim added in \nhttps://github.com/LTD-Beget/osquery/commit/cbc21390479b1ac34a9ceeef524d9312bca805f9\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/19782097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mgoffin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20458399", "body": "Ugh, evidently clang-format doesn't come with clang on OSX and you need to manually install it. Would explain why `make format` didn't do anything :) I'll get on it!\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/20458399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}