{"_default": {"1": {"bedge": {"issues": [{"url": "https://api.github.com/repos/facebook/sparts/issues/109", "title": "No flask inregration?", "body": "Would be nice to use with existing flask apps that need additional services.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fmoo": {"issues": [{"url": "https://api.github.com/repos/facebook/sparts/issues/107", "title": "Flaky daemonize test", "body": "test_daemon.py is failing sporadically on my linux desktop:\n\n```\n===================================================================================================== FAILURES ======================================================================================================\n___________________________________________________________________________________________ SimpleTestCase.test_daemonize ___________________________________________________________________________________________\n\nself = <tests.test_daemon.SimpleTestCase testMethod=test_daemonize>\n\n    def test_daemonize(self):\n        if not HAS_DAEMONIZE:\n            raise Skip(\"need `daemonize` for this test case\")\n\n        def daemon_helper():\n            time.sleep(100)\n            self.fail()\n\n        with NamedTemporaryFile() as tf:\n            # Fork so daemonizing the current process does not mess up with the\n            # test suite.\n            child_pid = os.fork()\n            if child_pid == 0:\n                try:\n                    daemon.daemonize(daemon_helper, name='sparts_unittest',\n                                     pidfile=tf.name, logger=self.logger)\n                except SystemExit:\n                    # Catch the daemonize library's attempt to sys.exit()\n                    pass\n            else:\n\n                def checkdaemon():\n                    try:\n                        return daemon.status(tf.name, self.logger)\n                    except ValueError:\n                        return False\n\n                # Eliminate the race condition waiting for\n                # daemonize.Daemonize() to create *and* write the pid to the\n                # pidfile.\n                timer.run_until_true(checkdaemon, timeout=1.0)\n\n                self.assertTrue(daemon.status(tf.name, self.logger))\n>               self.assertTrue(daemon.kill(tf.name, self.logger))\n\ntests/test_daemon.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/lib/python2.7/tempfile.py:427: in __exit__\n    self.close()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <closed file '<fdopen>', mode 'w+b' at 0x7f03d84dfed0>\n\n    def close(self):\n        if not self.close_called:\n            self.close_called = True\n            self.file.close()\n            if self.delete:\n>               self.unlink(self.name)\nE               OSError: [Errno 2] No such file or directory: '/tmp/tmpRNzIO8'\n\n/usr/lib/python2.7/tempfile.py:418: OSError\n----------------------------------------------------------------------------------------------- Captured stderr call ------------------------------------------------------------------------------------------------\nDEBUG:TestService:All tasks started\nDEBUG:TestService:VService Active.  Awaiting graceful shutdown.\n============================================================================================== short test summary info ==============================================================================================\nFAIL tests/test_daemon.py::SimpleTestCase::test_daemonize\nSKIP [1] /home/pete/src/sparts/tests/test_fb303.py:13: Skip: thrift is required to run this test\nSKIP [1] /home/pete/src/sparts/tests/thrift/test_compiler.py:12: Skip: Unable to find thrift binary on this system\nSKIP [1] /home/pete/src/sparts/tests/thrift/test_client.py:11: Skip: Need thrift language bindings to run this test\nSKIP [1] /home/pete/src/sparts/tests/tasks/thrift/test_multiplexed.py:18: Skip: Need thrift language bindings to run this test\nSKIP [1] /home/pete/src/sparts/tests/tasks/test_thrift.py:15: Skip: Need thrift language bindings to run this test\n============================================================================ 1 failed, 70 passed, 5 skipped, 2 warnings in 4.91 seconds =============================================================================\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/99", "title": "Race condition in failed process handling", "body": "... causes TestSelectTask.test_popen_communicate_fail to be flaky\n\n```\n=================================== FAILURES ===================================\n__________________ TestSelectTask.test_popen_communicate_fail __________________\n\nself = <tests.tasks.test_select.TestSelectTask testMethod=test_popen_communicate_fail>\n\n\u001b[1m    def test_popen_communicate_fail(self):\u001b[0m\n\u001b[1m        future = self.task.popen_communicate(\u001b[0m\n\u001b[1m>           'false', shell=True)\u001b[0m\n\ntests/tasks/test_select.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsparts/tasks/select.py:146: in popen_communicate\n\u001b[1m    h = ProcessCommunicateHandler(proc, self)\u001b[0m\nsparts/tasks/select.py:265: in __init__\n\u001b[1m    self.future.set_running_or_notify_cancel()\u001b[0m\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Future at 0x7f44c23c3690 state=finished raised ProcessFailed>\n\n\u001b[1m    def set_running_or_notify_cancel(self):\u001b[0m\n\u001b[1m        \"\"\"Mark the future as running or process any cancel notifications.\u001b[0m\n\u001b[1m    \u001b[0m\n\u001b[1m            Should only be used by Executor implementations and unit tests.\u001b[0m\n\u001b[1m    \u001b[0m\n\u001b[1m            If the future has been cancelled (cancel() was called and returned\u001b[0m\n\u001b[1m            True) then any threads waiting on the future completing (though calls\u001b[0m\n\u001b[1m            to as_completed() or wait()) are notified and False is returned.\u001b[0m\n\u001b[1m    \u001b[0m\n\u001b[1m            If the future was not cancelled then it is put in the running state\u001b[0m\n\u001b[1m            (future calls to running() will return True) and True is returned.\u001b[0m\n\u001b[1m    \u001b[0m\n\u001b[1m            This method should be called by Executor implementations before\u001b[0m\n\u001b[1m            executing the work associated with this future. If this method returns\u001b[0m\n\u001b[1m            False then the work should not be executed.\u001b[0m\n\u001b[1m    \u001b[0m\n\u001b[1m            Returns:\u001b[0m\n\u001b[1m                False if the Future was cancelled, True otherwise.\u001b[0m\n\u001b[1m    \u001b[0m\n\u001b[1m            Raises:\u001b[0m\n\u001b[1m                RuntimeError: if this method was already called or if set_result()\u001b[0m\n\u001b[1m                    or set_exception() was called.\u001b[0m\n\u001b[1m            \"\"\"\u001b[0m\n\u001b[1m        with self._condition:\u001b[0m\n\u001b[1m            if self._state == CANCELLED:\u001b[0m\n\u001b[1m                self._state = CANCELLED_AND_NOTIFIED\u001b[0m\n\u001b[1m                for waiter in self._waiters:\u001b[0m\n\u001b[1m                    waiter.add_cancelled(self)\u001b[0m\n\u001b[1m                # self._condition.notify_all() is not necessary because\u001b[0m\n\u001b[1m                # self.cancel() triggers a notification.\u001b[0m\n\u001b[1m                return False\u001b[0m\n\u001b[1m            elif self._state == PENDING:\u001b[0m\n\u001b[1m                self._state = RUNNING\u001b[0m\n\u001b[1m                return True\u001b[0m\n\u001b[1m            else:\u001b[0m\n\u001b[1m                LOGGER.critical('Future %s in unexpected state: %s',\u001b[0m\n\u001b[1m>                               id(self.future),\u001b[0m\n\u001b[1m                                self.future._state)\u001b[0m\n\u001b[1m\u001b[31mE               AttributeError: 'Future' object has no attribute 'future'\u001b[0m\n\n.eggs/futures-2.2.0-py2.7.egg/concurrent/futures/_base.py:500: AttributeError\n----------------------------- Captured stderr call -----------------------------\nDEBUG:TestService:All tasks started\nDEBUG:TestService:VService Active.  Awaiting graceful shutdown.\nINFO:TestService:Waiting for tasks to shutdown gracefully...\nDEBUG:TestService:Waiting for <sparts.tasks.select.SelectTask object at 0x7f44c23b5fd0> to stop...\nDEBUG:TestService.SelectTask:Thread SelectTask exited\n=========================== short test summary info ============================\nFAIL tests/tasks/test_select.py::TestSelectTask::test_popen_communicate_fail\nSKIP [1] /home/travis/build/facebook/sparts/tests/tasks/test_dbus.py:12: Skip: dbus support is required to run this test\n\u001b[1m\u001b[31m================ 1 failed, 71 passed, 1 skipped in 6.05 seconds ================\u001b[0m\ntravis_time:end:1aface40:start=1427833958142321795,finish=1427833992678561482,duration=34536239687\n\u001b[0K\n\u001b[31;1mThe command \"python setup.py test\" exited with 1.\u001b[0m\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/99/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/94", "title": "Support persistence in PollerTask", "body": "Add a flag that will enable writing fetched values to disk, restore on startup.\n\nadd a validate hook to verify the contents in case the format changed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/94/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/93", "title": "gflags support", "body": "It's common to use py wrapped cpp libraries that use gflags.\n\nBuild a bridge to expose any gflags defined in this way theough argparse, and preferably the options interfaces as well\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/93/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/92", "title": "Support for triggering in-thread execution of `PeriodicTask`", "body": "Maybe called `trigger()`?\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/92/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/90", "title": "Switch from `six` to `python-future`", "body": "`six` is nice, but `python-future` provides more compatibility (e.g., backports), useful for obsoleting some other modules/dependencies like ordereddict, and futures\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/90/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/85", "title": "-W (--warnings) option with default to error", "body": "Support a flag like python's -W\n\nDefault should be -Werror instead of -Wdefault\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/85/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/82", "title": "Thrift usage statistics", "body": "fbthrift's python implementation provides `TProcessorEventHandler` hooks; this allows us to monitor thrift server method usage and errors, and potentially even call duration.\n\nLet's figure out how to get this functionality for sparts, either by switching to fbthrift, conditionally using the API (if present), or emulating it with some kind of dynamic TProcessor subclass or wrapper.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/82/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/81", "title": "thrift libraries incompatible with py3k", "body": "Currently, sparts' thrift support depends on [apache thrift](https://github.com/apache/thrift), which (to my knowledge) does not generate py3k compatible code.\n\n[fbthrift](github.com/facebook/fbthrift)'s compiler is capable of generating py3k compatible code, but (a) its different command line arguments are incompatible with `sparts.thrift.compiler` and (b) the fbthrift Python bindings are not appropriately packaged (e.g., on pypi)\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/81/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/80", "title": "Unittest logspew in tests/tasks/test_tornado.py with python-3.4", "body": "Since effectively enabling -Wall in unit test runs, the following logs appear when running: `py.test tests/tasks/test_tornado.py` with python-3.4.0.\n\n```\nException ignored in: <_io.FileIO name=11 mode='wb'>\nResourceWarning: unclosed file <_io.FileIO name=11 mode='wb'>\nException ignored in: <_io.FileIO name=10 mode='rb'>\nResourceWarning: unclosed file <_io.FileIO name=10 mode='rb'>\n```\n\nThis does not repro with python 3.3.5:\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/80/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/79", "title": "Automatic man-page generator", "body": "Provide some hooks to generate a man page file for the configured arguments and docstrings.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/79/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/77", "title": "Enable OSX travis support", "body": "Might be tricky since we build the thrift compiler from source\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/77/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/73", "title": "Rate limit helpers / hooks for QueueTask", "body": "", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/73/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/71", "title": "Declarative, bindable events", "body": "We use `threading.Event()`s in a couple of places in code.  Making these `_Bindable` class attributes will allow us to define them declaratively and enable them to be more easily exported.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/71/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/69", "title": "Published documentation", "body": "As part of the build process, publish documentation.  Possibly to https://pythonhosted.org/ ?\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/69/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/63", "title": "Auto-Reconnect support for ThriftClient", "body": "If we're re-using the client and it gets timed out, let's reconnect automatically.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/63/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/61", "title": "Fb303++", "body": "fb303 only provides so much extra value.  A base sparts service can build on top of this:\n- clearWarnings, getWarnings\n- exportedValues\n- getTaskTracebacks\n- getMemTypeStats\n- getCpuUsage\n- remote/local debug hooks\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/61/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/58", "title": "Unittests for dbus", "body": "", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/58/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/54", "title": "Make it easier / better to work with tornado web", "body": "Tornado's http object model is fairly verbose.  On top of that, it's not super easy to transparently integrate in a way that results in good monitoring / metrics\n\nDo something about this.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/54/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/52", "title": "CronTask", "body": "Like PeriodicTask, but supporting cron spec.  Maybe a parent class of Periodic?\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/52/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/49", "title": "Thread safe counters", "body": "Currently they're not really thread safe\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/49/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/48", "title": "Infinite windows for samples", "body": "Add ability for samples to export an \"infinite\" time window.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/48/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/42", "title": "Allow setting per-task log levels", "body": "", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/42/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/41", "title": "Thrown TryLater should support a delay/backoff", "body": "Right now, TryLater's work or periodic and queue executions by re-running and/or re-inserting the work into the queue instantly.\n\nSupport setting an attribute on TryLater() that contains the time to wait in ms before trying again.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/41/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/39", "title": "inotify task", "body": "A common use case is watching a directory / tree for changes and acting on changes.\n\ninotify (e.g., pyinotify) is the proper way of handling this.\n\nCreate a task for monitoring a filesystem path for changes.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/39/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/35", "title": "Configuration helpers", "body": "Support auto-configuration (e.g., of command line arguments' defaults) in a sensible and/or intuitive way.\n\nThat is, provide some API for a service to specify that it should have its configuration auto-loaded from some well-defined set of locations.  This should use well-known native or opensource APIs.\n\nThe configuration should be in a format that is intuitive to read/set-up but should also be comprehensive.  Ultimately, it should translate to specifying defaults for command line arguments (e.g., sparts \"options\").\n\nWhen running with -h, the %(default)s in the helptext should reflect the results of found configuration files.  Additionally there should be some log message or stderr output that indicates what configuration file is being used during startup.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/35/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/34", "title": "scribe integration?", "body": "Support logging messages directly to scribe.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/34/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/28", "title": "Documentation", "body": "generate proper pydocs for everything.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/28/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/26", "title": "Log Tailer task", "body": "Task for tailing log files in real-time\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/26/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/24", "title": "Isolated / subprocess workers", "body": "By default, workers run in child threads.  Provide hooks to allow child tasks to run in a child process, \"isolated\" from other processes / tasks.\n\nHandle this gracefully in queue tasks.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/24/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/19", "title": "Add runit --install/--uninstall to VService options", "body": "Add an --install option that creates the necessary directories to bootstrap the service into runit.\n\n--uninstall removes the directories\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/19/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/facebook/sparts/commits/c03df928677444ad638d10fa96f4144ca4d644e1", "message": "Merge pull request #110 from tiagmoraismorgado/patch-1\n\nfixing minor spelling typos"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/046ea44920f90e494a81e2a21bd8a27577e12fe2", "message": "Merge pull request #108 from djipko/master\n\nQueuTask: prevent unhandled exception from tearing the main loop down"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/abd52e9c11bd4ddb1172fb4eee409c9653deb568", "message": "Attempt to fix race in SelectTask\n\nLet's mark the future as running as soon as we create it.  By the time\nProcessStreamHandler() is instantiated, the caller has passed us an\nalready running Popen, so it doesn't make much sense to create the\nadapter before setting this.\n\nThis should fix #106 and #99"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/591fa3c18a129112d565c5a28f78c270f397aa6e", "message": "Officially add 3.5 support"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/3ad41380cb17493a3b63648c75d3d522bdf58016", "message": "Remove python 3.2 support"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/9a51c65377510d459ca757b7cdb5a7c51f8225a1", "message": "Merge pull request #104 from chantra/fix_nargs\n\n[option] handle nargs properly"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/e4ea791b566d0f33660fde8b3f22a11da9427b8c", "message": "More thrift.compiler tweaks\n\n- whitespace fix\n- use six.iteritems instead of .iteritems() method\n- explicitly pass mode='w' when writing to NamedTemporaryFile for importThriftStr"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/46804af8c730ff3165fcce0408e1a12d5920b5fb", "message": "Make compiler.{get|require}_executable public\n\nSome internal functions in thrift.compiler are reusable in unit tests.\nExplicitly expose them and use them."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/f52d73ad775d0062e665a5647f6d808bcaabae9f", "message": "Version bump to 0.7.3"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/53307a2c35a1351a69606290693ce9ef777995eb", "message": "Correctly skip test_multiplexed when thrift bindings not present"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/e5f869066501d429618e82725c04c8bd1b627fbd", "message": "Fix bug in file unittest exposed by mock changes\n\nPreviously, Mock was returning a mock object on accesses to all\nundefined attributes, so when calling `assert_called`, we'd get\nback a mock object which is implicitly True.\n\nNewer versions of mock seem to correctly raise an AttributeError,\nso we need to use the correct function."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/9906c90b2c5455ffc7702c8cb99cf8cde55a3bd8", "message": "Include TMultiplexedServer, CppServer CHANGES"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/ca0037e4e7d5983017c169a3d8ae0a5d7a31cddf", "message": "Add a test case to verify Multiplexed server/client functionality"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/2e999a817fbe4867151640b828c7010bcf6354ae", "message": "[thrift] Add more useful error for multiple processors when MULTIPLEX=False\n\nSuggest setting MULTIPLEX = True on your server"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/e7b956fa16e575ac58f9d703334c13dff4956259", "message": "TMultiplexed{Service|Protocol} Proof of Concept\n\nFixes #102"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/f1187e90c611a1bc64aa3cc26d0898e86a44db67", "message": "Some comment updates in ThriftServerTask"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/c7a26a1798dc56f7eab849be0f5ccff9dd2231bd", "message": "Initial version of TCppServer-based ThriftServerTask"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/421d29f9108537fa492950f8e8ca2b9c2bc2dbea", "message": "Prefer thrift1 (fbthrift) compiler when available"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/267db13f50da433cb0a28bb1e2c47deb788c53be", "message": "Refactor sparts/tasks/thrift.py into submodules"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/e4e2ac67b1b74925c5d4effac955db1dafb549a9", "message": "Updated CHANGES.txt for recent changes"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/7b7eee3493ffd806fb148794c984a7892f156eaf", "message": "ThriftClient should throw during constructor on invalid module\n\nWhen the compiled thrift module is passed instead of the service module,\nthrow in the constructor with a helpful error message."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/84dd4b80716c406b03d6843b7431e21920e4ff05", "message": "Fix sparts.thrift.compiler convenience compile method"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/a95c6b430cbeea5262de58e74f6ef6733daf2cd5", "message": "Merge pull request #101 from bboozzoo/bboozzoo/sdist-license\n\nmanifest: add manifest"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/042c8b1282d5da4714dfe9f8cef3e8db13c1024b", "message": "Set Twisted maxversion <15.2 for py3.2\n\nEven though Twisted doesn't seem to officially support python3.2,\nTwisted-15.2 explicitly breaks the parts of Twisted that we're using\nin sparts.\n\nSet a max version for now, but we should consider disabling the Twisted\nbits entirely for 3.2 in the long-term."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/44f599a6cf4dc76f2edf2916b29e06fbda18dabb", "message": "Handle missing directories in DirectoryWatcherTask more gracefully\n\nInstead of crashing on ENOENT, catch it and log a warning.\n\nA new test case verified we no longer break.\n\nFixes #56"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/232860ae7ff226d3171d2af669b8d6d3f3b95f58", "message": "Add test case for #56"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/2c24edd094ebdb7abeeccdf31ca137dc8709e74f", "message": "Update tests/tasks/test_file.py to use NamedTemporaryDirectory\n\n...instead of mkdtemp directly.\n\nTests still pass."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/9896be9f573045eff1770f0fbac1bd2f4a17c1d5", "message": "Added readfilebytes and writefilebytes\n\nThese methods are like readfile and writefile, but don't treat the\noutput/input as unicode respectively."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/71819a9d568d19a0b947a0631fd0ae5625b0bc05", "message": "Play more nicely with test frameworks that hijack sys.stdout\n\nSome test frameworks replace sys.stdout with a StringIO.  StringIO\ndoesn't have an `encoding` attribute.  In this case, fall back to\nsys.getdefaultencoding()"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/bf5a259e9f7e8baa48f24163035644b43980dcfd", "message": "Update patent grant: http://fb.me/patents2"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/044dc154bb3684411384f2d3f124cc03e5f2e3f2", "message": "More tweaks to setup.py to better support py3k"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/128cf9c2f82b00cb2d8648033970870c73641f02", "message": "setup.py: ignore empty lines"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/888e86118a4b3890aaa58c5850dde5046b36afc2", "message": "Version bump to 0.7.2 for release\n\nAlso updated CHANGES (adding another note about dbus stability)"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/d33542f3b5ae140431e33fa233f8fd5c4ea09841", "message": "Merge pull request #98 from bboozzoo/bboozzoo/dbus-threading-fixes-for-upstream\n\ndbus: multithreading fixes"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/4a02ed72d0aa319373fa774f86734e774ef1e0de", "message": "Updated CHANGES to include dbus system bus support"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/0a45d168dec817c35e264302d1bffde486c73031", "message": "Merge pull request #97 from bboozzoo/bboozzoo/dbus-system-bus\n\nSupport for DBus system bus and a couple of test cases"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/7751c3a49bab20522242571e384f1756c26fc329", "message": "Updated six dependency to require >= 1.5.0\n\nFixes #96"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/002cc33b6eecb39559be0a23ccc9db556cf986a5", "message": "Fix race condition in unittest\n\nFixes #95"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/ba31bb03a6092e5d2ce91350e13ac4b480dda4fd", "message": "Update CHANGES.txt"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/d44b1ff609e15e9654ad42eabfbbf934e405c732", "message": "TryLater(..., after=seconds)\n\nAdd support for a new kwarg for TryLater, `after` seconds.  This will\nenable you to, instead of retrying your work immediately, wait `after`\nseconds before trying again."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/417987467e7c622dfff1b9c9e81b374ae09a9f42", "message": "Remove unnecessary property kwargs\n\nNot sure why there are *args and **kwargs on this property.\nRemove them."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/4cf32c4033c87dc6c8235498afe34200e93fd561", "message": "Merge remote-tracking branch 'origin/master'"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/13ed7122992e306f7057bcd49d456193b037385a", "message": "dbus: Disable FB303 autoregister if thrift isn't installed\n\nAllow dbus integration (e.g., for signal handling) even if thrift isn't available."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/1ab84da37a3b414eb32ae58973a73730aac84a51", "message": "Update compiler.py"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/99581d8cb1c7f9e3036118ace4c96795eb661aac", "message": "PeriodicTask.execute_async()\n\nAdd a new method, execute_async() to PeriodicTask (and subclasses).\nThis method returns a future that completes or raises when the\ncorresponding task's execute() method completes or raises respectively."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/7f35fb0244853dfdb85dbfa1c24d635de5e7fcc3", "message": "Don't replace \"_\" with \"-\" in option internals\n\nThe replacement logic in callers, etc has been reworked since the\ninitial implementation.\n\nI've added test cases for all known expected use-cases, so there\nshouldn't be any surprises here.\n\nFixes #91"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/a3b353e374c4d6cb9de8f1c1360af84e745222cd", "message": "Add test cases to catch #91"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/dff8105e64943c69ab955a38c49186590d13bbb2", "message": "Allow unittests to set custom command line args"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/ca1a7c47c1587d779d2ccf6e528aa25bb7e3d663", "message": "setup.py: Fail upload command on uncommitted changes\n\nAllow untracked files for now.  Fail on any uncommitted change.\n\nFixes #89"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/692f3c5f722cf4ae46a05fa6f04d9d1935327344", "message": "Updated to latest fmoo/thrift fork\n\nThis gets .gitignore changes to hide python build artifacts"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/35b53736ddb2c876c374610c565c8506b5de1817", "message": "Revbump to 0.7.1\n\nAlso rename 0.7.0 in CHANGES.txt to 0.7.1, since 0.7.0 is broken due to\na dirty checkout"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/6728f3da1cbf9a27c3f105f51a786dcc0a55e4c0", "message": "VService.DEFAULT_LOGFILE, --logfile option logs to file instead of stdout\n\nProvide some hooks to allow sparts to log to a file instead of stderr."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/c17e8892e32e5ecaa931651e8ba3900ab7901ee7", "message": "CHANGES.txt for recent bugfix"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/cc1c818088945096d59b52a0344aae691ee0786b", "message": "Use wait() instead of poll() during subprocess shutdown\n\nThere is a race condition between the output pipes being closed by the\nchild and python updating the returncode on the Popen object.  Let's use\nwait() instead of poll() to avoid this and not get a called process\nfailure.\n\nShould fix #88"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/78de03c72395b0a907c694d5ba520fc5765de253", "message": "sparts-0.7.0: Updated CHANGES.txt, version, etc\n\nLet's do a new release with the specialized queue tasks and UI task."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/370fb8fd002202aec13b7a92dd586c2b5351b19c", "message": "sparts.tasks.tui.UITask\n\nBarebones sparts wrapper to bootstrap an NPyScreenApp.  To use it, simply\noverride appStart to do something like:\n\n  self.app.registerForm('main', self.make_form())\n  self.app.setNextForm('main')\n\nIf the form exits, the service will shutdown gracefully."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/fb249195621d50eee2bca4b9a1c07e17486e29b6", "message": "Do hyphen substitution on entire option name\n\nCurrently, we only replace/replace hyphens in the option name (suffix).\nNormalize the rest as (which can be set by OPT_PREFIX) as well.\n\nAdd a unittest to verify the functionality\n\nFixes #87"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/d3b83d8ff36cd6047c8cfb2cde6a0c4e677c7d4d", "message": "Comment/remove spammy debug messages\n\nThese were useful for testing, but aren't so much anymore.  Remove or\ncomment them out."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/78da5531573b8e746d982cd733f37dc8624a5ee1", "message": "SelectTask.popen_communicate\n\nImplement a couple of more wrapper objects for making working with\nsubprocesses easier.\n\nThe best way to go about this is with:\n\n`SelectTask.popen_communicate(...)`\n\nThe args/kwargs to this function are identical to those of Popen.\nstdout/stderr are implicitly set to PIPE.  A `Future` is returned and\na CommandResult object (with stdout, stderr attributes) returned on\nsuccess. FailedCommand is thrown on error (with a CommandResult instance\naccessible via the .result attribute)"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/f41e639f49704e91bae78f50a98b14a5ad68f61a", "message": "PeriodicTask: Improve error message when misused\n\nFirst, init the stop_event before verifying the interval option.  This\nway, if we crash during init, we don't also crash during shutdown\nSecondly, add a message to the INTERVAL failure assert indicating that\nINTERVAL must be specified or --{}-interval must be set."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/e16f3e78176af18f167132354eb0b47248e5710c", "message": "Fix SelectTask unittest on py3k"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/06445fd366f1e1b903a8ac5406f5b57e97be359a", "message": "SelectTask: Allow customizable decoder\n\nSet the default from stdout.  This helps more of the unittests to pass\non py3k"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/556e573a6207f3e54ec222915329b1483a39edd5", "message": "SelectTask: configure a default logger"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/baeb6491c536635e574192d5fdd436ae87dd26e3", "message": "Updated CHANGES to include a note about Popen helpers"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/22e8e5373339198061e0bdd439bcb8a9ac832466", "message": "Fix SelectTask for py3"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/450eb8aee6d3638d6a5211e6c5ae1fa8ff8d1b9b", "message": "Add unittests for SelectTask, ProcessStreamHandler"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/ad083bac7ce3aa66b11e23977f6fee83977ad60b", "message": "sparts.tasks.select.ProcessStreamHandler\n\nImplement `ProcessStreamHandler`, a helper class for interfacing Popen\nobjects with a SelectTask"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/f441f90886716c4e0cae5966317e63776c69a14a", "message": "SelectTask: Plug memory clean shutdown leak\n\nClose the control pipes on runloop exit"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/f4cf12b0740f2b7ad5fcb1af31726f5a5c2144ee", "message": "SelectTask: some of these should be docstrings"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/142625aa454bb8093cbc4ebd0a039a40a9bc5748", "message": "SelectTask: test case, bugfixes\n\n- rename \"execute\" to \"except\".\n- bugfix: During the last refactor, forgot to send the control NEWFD on\nnewly registered/unregisted fds\n- Add a test case.  Verifies read/write signals, but not except events"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/e49fea6400334f7d18ae43110f76dfa68e5a4698", "message": "Updated CHANGES.txt for latest features"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/61595dc9be200315b69891e9543f717fccf715ed", "message": "Explicit register/unregister select APIs per event mode\n\nInstead of registering and unregistering an fd to every operation\n(read, write, execute), require the caller to explicitly register\na callback for an fd and an operation."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/e0ccd9044db8390b81ff607c6792fdf8cbcd7a02", "message": "Merge branch 'travis' into select"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/68f5a8072810c965588a90d0abbc05a85f63d54e", "message": "Fix clowny unittest failure.\n\nPython 2.6's ContextManager __exit__ doesn't always return values\nof `exc_value` properly when raising from C extensions.  Let's patch\naround it in the test for now."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/07e5d862334c0aa4b58bb7f0e16a19a3cbe4f9f7", "message": "Use assertEqual in new unittest instead of assertEquals"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/71ac224b456abe5058431bb8cf8599a5127fcd40", "message": "DeprecationWarning in assertEquals for <py3k unittests\n\nThis will make it impossible to write unittests that spew/fail in py3+"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/721c77a8d38d08ed2f381df83c495a3f45eeafb9", "message": "SelectTask: Initial Prototype\n\nBasically works, but not a fan of the lack of callback mechanisms"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/209ba0031ab4a11c7250e1b23a5b1762de632c49", "message": "Also port pre_install steps to .travis-pre-install.sh"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/c9022d9adc7907d6bf6c228e74f082769269e24a", "message": "Add .travis-install to better handle conditional install instructions"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/7b572ff649f16e3a946cb509708b65174d76a36c", "message": "fileutils: set_nonblocking\n\nAdd a helper function (and test) to set nonblocking mode on file\ndescriptors."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/addbe5b9fedf01fc7b2c208213c40d1c1a3bedf8", "message": "install requires `futures` for py<3.2, not just tests."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/57956ca5216221552a400ec4159aa3a9d5e001bd", "message": "Skip v6 addresses in fb303 unittest for python 2.6\n\nWe know this case is broken, so skip it.\n\nThis should finally fix the build."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/c0c9b4cc56abbb190b415fe85d71f00067277c22", "message": "Assert check in ThriftClient on py26 with v6 IPs.\n\nurlparse doesn't like URLs with IPv6 addresses in them prior to python\n2.7.  Let's blow an assert with a meaningful error message instead of\nan obtuse parse error."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/dca9c612f18fff35bed0e723d0fec4f8d0852da2", "message": "More import hijinx\n\n- For fb303 test, wrap the NBServer task with the ImportError check.\n- Use __import__(module) instead of `imp` internals."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/86888ee2f1810125be3d4210e438ac7f99f1c020", "message": "Semi-revert of fb2e3ca79b768d6e87136b2b506d2d782de575ae\n\nHAS_THRIFT (and `imp` in general) doesn't seem to play very nicely\nwith `setup()`-installed packages in python2.6.\n\nLet's just use traditional imports for now instead."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/cc89b3677674ab040dd0ed893fd574034107453f", "message": "Only require external `mock` for python < 3.3\n\nIn `sparts.deps` use `unittest.mock` for newer pythons."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/a30f3ed834f714dd6da73a8ad8b0cf4ca6228157", "message": "thrift.compiler: compatibility with fbthrift\n\nfbthrift's compiler doesn't provide a -out flag.  It instead, provides a\nlegacy -o flag which inserts all the objects into a subdirectory named\ngen-{blah}, where blah is the language (e.g., gen-py).\n\nSo, update the code to use -o and add paths relative to a gen-py\nsubdirectory.\n\nVerified with both fbthrift and opensource thrift.\n\nNote: one unittest still fails by default with fbthrift because the\ngenerated python fb303 sources committed to sparts were built using\napache thrift, which is incompatible with fbthrift's python libraries."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/0d90a1926fe62ae473f2c70e11eb095c19442abd", "message": "Fail with more intuitive error message on py2.6 without unittest2\n\nIf you try to run py.test on py2.6 without unittest2, you'll get error\nmessages about missing SkipTest in the unittest module.\n\nassert earlier and bail if unittest2 is not found in that scenario."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/291a70ae11f19e42f6c667a7c93f5b6508800909", "message": "Fix captureWarnings build breakage\n\nCopy captureWarnings from Python-2.7, to `sparts.compat`.  Use it if it's\nnot available in `logging`.\n\nFixes #84"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/3cff8fe1f23a09996d0b9f7f3c7bde0b6240080b", "message": "UniqueQueue should not dequeue work until after execute funishes\n\nAs-is, UniqueQueueTask doesn't play nicely with long-running execute\nmethods since queue.get() removes the object from the unique \"seen\" set\nat dequeue time.  This diff refactors the Queue Task to do the\nfollowing:\n\n- Enables `explicit_unsee` mode in UniqueQueueTask's UniqueQueue.\n- Moves work completion handling scenarios (success, unhandled error,\nand trylater) in QueueTask to separate functions, sharing a common `work_done`.\n- Tracks whether the dequeued work was \"raw\" vs. already having an\nExecuteContext.\n- Uses all of the above to appropriately \"unsee\" the work after execution,\neven in the edge case where \"TryLater\" is thrown on \"raw\" dequeued work."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/3e115e2725ca60f50ab668625ec8c3bd20fd0b22", "message": "Add some more strict execution controls around file tests\n\nMaybe fixes #83;  replace the Mock we're using to wrap the stat results\nwith a NonCallableMock.  Explicitly call execute() before stat.  And\nverify that stat is returning the proper results."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/8818d7495867457be266ea83437f6470096254b0", "message": "UniqueQueue: add an `explicit_unsee` attribute.\n\nIn addition to the `silent` mode, add an `explicit_unsee` mode to UniqueQueue.\n\nBy default, `explicit_unsee` is False, and tems are unseen as soon as\nthey are popped from the queue.\n\nThe problem is that for certain applications, we want to keep the item\nas seen until `task_done()` is called.  Since task_done doesn't take an\nargument, we add a new function, `unsee(item)` to facilitate this\nbehavior.\n\nUnittests updated to verify behavior."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/ebb9ae4954c14fd4088d18525af72d8adaa39de9", "message": "setup.py: Updated to most recent LICENSE\n\nEven though we updated the LICENSE, headers, etc, several version ago, the\nsetup.py still lists sparts as ISCL instead of BSD+.  Fix."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/71f9bf22da3ae39faafab9a6ab19d336df1f1a5e", "message": "setup.py: Use a NAME constant instead of hardcoded \"sparts\""}, {"url": "https://api.github.com/repos/facebook/sparts/commits/be8efa05831b395791c4844e89d7601b210e9f19", "message": "sparts.daemon: Allow daemonize() to handle extra kwargs\n\nPass extra kwargs to the underlying Daemonize() constructor."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/1e7fc0cedcf97478e1c767bfc924897dcbb1489c", "message": "vservice:  Capture warnings via logging by default"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/5dd9912eeae8edd682b03fe65364c9106195b3e6", "message": "assertEquals -> assertEqual\n\nThis fixes a deprecation warning in py34"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/5e46c2ab219b9972ecdb0e53dca11bb443d97a71", "message": "UniqueQueue should raise `Duplicate` by default\n\nA member variable `silent` has been added to control whether the Queue\nshould silently discard duplicates instead of raising."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/5594fb1542e03177a66adbab46d4e0505fa40c6c", "message": "sparts.tasks.queue: New PriorityQueueTask, UniqueQueueTask\n\nInitial versions.  UniqueQueue has some race conditions wrt reliable\ndeferred/future processing that need to be addressed in a better way."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/fb2e3ca79b768d6e87136b2b506d2d782de575ae", "message": "Prefer HAS_THRIFT from sparts.deps"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/84f47522adf060bac0e225f468e4da016a63ad1b", "message": "Render ipv6 `host` values correctly for THttpClient\n\nUpdate the getConnectURI method for the thrift client to properly render\nhost values that are v6 addresses.\n\nUpdated the fb303 unittest to catch this and verify the fix."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/53946688902aff82f7a5cc967ce32b1eed380fe5", "message": "sparts.thrift.client: Use non-deprecated API for THTTPClient"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/e3ecc5d5f41020bc60eee7f9ff13768354632d03", "message": "sparts.tests: all warnings raised during unittests should fatal"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/0ad933c27d853d0381d4f60eb2f5856b0ab8d1f0", "message": "UniqueQueue should track discards\n\nA basic counter for tracking purposes"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/04165f4ce417433e4cd6940661642f208634368a", "message": "sparts.collections.UniqueQueue\n\nAdd a UniqueQueue subclass of Queue for keeping track of lots of things\nand silently discards duplicates."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/f6e8638e420790f51bd66d01918918275fbde56d", "message": "sparts.collections: PriorityQueue implementation\n\nThis diff introduces a new module, sparts.collections.  Its first member\nis PriorityQueue, a queue.Queue subclass that maintains items in sorted\norder, using the builtin heapq module"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/567ccea933181dfb7c3d80e1de5e2acf96aefd1b", "message": "Use __future__/absolute imports in some common sparts modules"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/f1f1f30db32dae919cdd8fe78ce4320e2c82c6b7", "message": "Allow ExecuteContexts to be compared"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/fef9d3d8ce1559f7f99960ff7750f33c1847a224", "message": "Fix bug in intitialization when daemonize is not installed\n\nUnittesting didn't catch this because it runs with all optional\ndependencies installed.\n\nAlso, version bump to 0.6.1"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/3f72b733019a7df60ab274d77277786e37175dbc", "message": "Add `map()` and `submit()` to QueueTask\n\nThis adds two new helper methods for interfacing with QueueTask,\n`map()`, and `submit()`.\n\n`submit()` inserts a piece of work into the QueueTask's queue, and\nreturns a future that will either return a result or raise when\nthe task's execute() function successfully completes (or fails) the work.\n\n`map()` takes an array of work/items, and an optional `timeout`, and\nreturns the `result`s for all the futures generated by submitting them\nas work.  The `timeout` is applied to the delay for each individual\npiece of work.\n\nFixes #45"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/c545f59785f3bbd2e291bb1b59a574956169a924", "message": "Updated CHANGES, bump to 0.6.0"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/1102416a6451f97f30e6ff6cf62302e7f47352c7", "message": "Merge remote-tracking branch 'origin/master' into daemonization"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/d5b6404e28a24da1053b6fbeb384a87a3b33d964", "message": "Uniitest to verify sparts.daemon functionality\n\nTest basic daemonization, status, kill operations with production APIs.\n\nVerified on py34 and py27"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/23fff3c662ca853805b352934c9443d67d64a2d2", "message": "sparts.timer.run_until_true\n\nAdd a new method to sparts.timer to run some function until it returns\nTrue.  Takes another parameter, timeout, that, if reached and the function\nhas not yet returned true, will raise an Exception."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/dba2a523140bbca97f40cb4fd624eff403a8ad9b", "message": "Add setup.cfg settings for setuptools-pep8"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/e0f26c088faeae5a7ffaf4beae7ae7708bf74b19", "message": "Refactor @agargiulo's changes into sparts.daemon module"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/5042fe2429122d37537bfc71c2876d99b6e78cfa", "message": "Updated CHANGES for daemonize changes"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/4c6e661e6268fd7b33023b61af1c65d4d47d2491", "message": "ExportedValues API\n\nThis is a popular API like counters, but for arbitrary data.\n\nThe current implementation is only on VService, but I could see this\nbeing useful to be implemented more like Counters.\n\nThat said, I'd like to clean up the counters/options/etc implementation\nbefore introducting other things that might look more like them.\n\nTest Plan: Added some new unittests to test_vservice to make it work\nproperly."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/a2e5ce4c1da6a80a0d5665a9d5aff4ddaeff35f9", "message": "py3k fb303 compatibility\n\nEven though thrift doesn't support py3k, let's use six's iteritems\ninstead of iteritems directly."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/5a59d876abcd5fe2c4f010545f7b2f421da997cf", "message": "fb303.getCpuProfile takes a duration in seconds as a parameter."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/042b2d883c23bb289febd4f03c99dba18e3571d4", "message": "Better support for multi-TServerSocket\n\nSome thrift implementations have support for multiple handles per\nTServerSocket.  Let's use that API if the old ones are not available."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/eca242ab3038bbee3d01c0c07170c560ba190c95", "message": "Updated CHANGES for recent changes"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/f773b404c10af24477de733a42ed9c06bc93296d", "message": "Improve support for v6 thrift hosts."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/f4d9c17eefc494c848c6cd5c52cea53b21c73b7c", "message": "TServerSocket API compatibility with fbthrift"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/d363d425a346b32ab2424377d94433ccfa99183a", "message": "Fix test failures from fb303 implementation breakage\n\nNow that we verify method implementations, this test is failing since\nour fb303 handler doesn't implement getCpuProfile.  Let's implement it\n\nFixes #17"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/d715dec923821b7e72c1d8ea1cb5145c8c1489d3", "message": "ThriftHandlerTask verifies MODULE.Iface is implemented\n\nIn initTask(), ThriftHandlerTask will now verify that it implements all\nthe methods on MODULE.Iface."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/32abd8278742869f14713dc054df797b8b532c72", "message": "Make unittests more resilient if setup fails gracefully"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/ea7e69a445072c8b0ab795b67485acb81da25724", "message": "Updated CHANGES.txt"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/ade926e7d7e7f4ad0dbaa429e5a293984cc02325", "message": "NamedTemporary refactor\n\nSplit NamedTemporaryDirectory common functionality into a base class,\n`NamedTemporary`."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/57d1c77fc35097f25595272c5393af52f8115757", "message": "Add http-based thrift support to sparts.thrift.client\n\n- Add PATH class attribute to client classes\n- Default TRANSPORT to TBufferedProtocol when using http client\n- Add path kwarg to client consturctor\n- Add a unittest to cover http client/server code\n\nFixes #62"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/166de040802b487bded459034d3e0a4fae46f168", "message": "Compare paths in ctx tests better\n\nUse os.path.relpath when comparing paths.\n\nTMPDIR on OSX refers to a path that is a child of a symlink.  As a\nresult, the os.chdir() will work, but os.getcwd() will be different\nafterwards.\n\nFixes #68"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/6716170ff928f4439998ab954dd4dceee7256074", "message": "Add additional trove classifiers for other py3k builds"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/a73930dbb4710d6e7a397fba6dd0d2e885209429", "message": "rename `sparts.counters.Callback` to `sparts.counters.CallbackCounter`"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/60195096008df454fbab3ad364eab1941e1338e5", "message": "Add other py3k builds for travis"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/d6d01e82a59df6465389da9dc96a2e54a7b0e35f", "message": "Updated CHANGES.txt for recent changes"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/819c444b8ded5fe60174f872685debc4f17f4159", "message": "Add queue_depth Callback counter to QueueTask\n\nUpdated a unittest to confirm.\n\nFixes #50"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/91394e9c8b6e60cbcff184ba7c83b7026f4d2955", "message": "Add a new `Callback` counter to `sparts.counters`\n\nCallback counters take a positional argument, `callback`, which is\ninvoked every time getvalue() is called.\n\nThis counter type can not (currently) be used declaratively, so you will\nhave to register it manually during initTask, e.g.:\n\n  self.counters['my_counter'] = counters.Callback(lambda: len(self.items))"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/fe189e89eced141ffec1ee402747f8ca72f1ee65", "message": "Workaround to better non-declarative counters\n\nIf a counter is instantiated non-declaratively (e.g., during initTask),\nthe options dictionary won't be configured in a way that can access it\nby direct indexing.\n\nWe'll hack in a workaround for now:  If the object isn't directly\nindexed in the counters dictionary, try to find the child with a name\nspecified by the first '.' partition, and get the counter from it.\n\nThis will work for counters that do not register child namespaces, but not\n`sample()`-type counters, for example."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/ec82ed3e455b5663b4cf7cf18080b7e5268b4609", "message": "Merge branch 'travis'"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/e742fcf716ac6d64b1b60c67e02ad2f65cfa956d", "message": "Deprecate .travis requirements files\n\nInstead, just mark all travis dependencies in setup.py's `tests_require`"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/f1e566b0b5a75e86c43590a7f0ab16b86d8321fb", "message": "Add basic perf and event counters to QueueTask\n\nUse timers in ExecuteContext to implement basic performance counters for\nexecute duration.  Also, add global counters for basic execution\nscenarios (completed, unhandled, trylater).\n\nPartly fixes #50"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/987e5982ba7e6c0546a91e04174754319d4c8baa", "message": "ExecuteContext should track execution time by default\n\nFixes #47"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/e3389f0abd01ada9f6e4fc88b60fca2fd7edcc25", "message": "Use Timer class in PeriodicTask, unittests"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/53819c3779dd5c579c2bab4b9f48d1bb0c513d13", "message": "sparts.timer: Add a module with some timing helpers.\n\nI've seen a common pattern that involves a timer that implements the\ncontext manager protocol and provides timing information.  I'd like to\nuse this for tracking samples in `VTask`s, `ExecuteContext`s, and in\nother places without defining the same sets of variables over and over.\n\nNew unittests pass"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/13efde7802bb91a1af2520d6a9f800dcd2bf6172", "message": "Add futures support to QueueTask\n\nExecuteContext now supports a `future` keyword argument.  This will get\nmarked as running() when the first execute() attempt begins.\n\nIf the work generates an unhandled exception, it will set an exception\non the future (so result() will raise).  If the work completes, result\nwill return the return value of your QueueTask's defined execute method.\n\nThis change adds the `futures` python module as a test dependency for all\npython < 3.2"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/ffe751544f5c563907b7d073c81733242a0d4948", "message": "Make deferred QueueTask exceptions thread-safe\n\nInstead of using a member variable and method on the QueueTask, register\na locally defined list with the deferred errback (which moves to the\nExecuteContext instead), and don't re-raise if errback completes\nwithout adding the error to the list.\n\nFixes #70"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/e2c9bb066982ca06a9ac3a4542cde2d35968efd4", "message": "Add Twisted-14.0+ to travis builds for 3.3\n\nTwisted-14.0 adds support for py3k.  Let's add it to travis so our\ncontbuild gets coverage of the applicable modules."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/b73e19f3277ea407fb51411842059ed8d3dcb193", "message": "Fix py3k build\n\nBy using six.string_types instead of basestring builting.  Improve Twisted\ncompatibility, similarly"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/4e5b2e6587df951fb785c5857e5dc746939278b9", "message": "Tasks API refactor\n\nThis diff refactors a bunch of the task registration, initialization, and\ncustom accessor logic into a new class, `Tasks`, an instance of which is\naccessible on the service instance, via the `tasks` attribute.\n\nThis makes accessing required tasks more natural.  Instead of:\n\n  self.service.requireTask(FooTask)\n\nYou can now also do (preferred):\n\n  self.service.tasks.FooTask\n\nOr:\n\n  self.service.tasks.require(FooTask)\n\nFixes #72"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/be443ca05d1492f2035f1f7320e263d03c93d7dc", "message": "Rev bump (0.5.1)"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/ab0f6e4f02dcff8a162272b13db320724b44bb3b", "message": "Add branch analysis to .coveragerc"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/9ddc456108eeb981cd0bdbbd74b6955397554063", "message": "Allow specifying a custom env to twisted commands"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/cf71ad19f96039f03382597ceee8cc15ea444f31", "message": "NamedTemporaryDirectory.makedirs()\n\nAPI for safely making named subdirectories inside a tempdir."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/bca021d81afbef6e029038065162631ef3d0e64a", "message": "Hack to prevent option defaults from being stomped\n\nIf an option is explicitly typed, but no default is provided, then it's\npossible for it to return an invalid or misbehainvf value in some contexts\n(e.g., returning the string \"None\" instead of the NoneType instance)\n\nLong term, the option values should be stored inside the bound\ndescriptors, that will know whether the default value was overridden,\nbut for now, simply special case `None`"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/b1d1e3edfa157c810a5d950309250b736a332b1d", "message": "Fix dbus task shutdown race condition\n\nIf stop runs before start finishes, you can get in a state where this\ndel() throws and the shutdown hangs.  Fix this."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/fe2ff7e584262809831b56e068c6bcee46404c97", "message": "Fix race condition in thrift startup\n\nChange ThriftHandlerTask.processor from being assigned during initTask()\nto a property that lazily instantiates the actual processor.  This fixes\na potential race condition between the server and handler task(s)."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/994a8a12e9551be47978e6859325db8f11e9fd27", "message": "Thrift abstraction cleanup\n\nRemove an extra unnecessary level of abstraction from the thrift logic.\n\nThis should make it easier to implement thrift services.\n\nWhile in there, I fixed #65, but may have broken it for dbus.  I'll have\nto re-write a bunch more of this when I switch out the option\nimplementation."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/b31a22317c5aa7fd8929323e1105aba9f2b65c4b", "message": "irc channel ##sparts -> #sparts"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/04d73c807c31c660b6993e622d6d8065eed37d1c", "message": "Update CHANGES for development release"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/21415fe9196f9ce735f9c2f5621b16814af0e580", "message": "Updates to setup.py to point to facebook/\n\nAnd add classifier for python 2.6"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/63114ddf3f94e487b56c12cba437f4b5a3ee87f6", "message": "Don't use upstream FacebookBase\n\nThis isn't actually being used as sparts is re-implementing this\nelsewhere in a more compatible way.  Remove."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/55b79078e1f477997b0a63cac0ef728b10607561", "message": "Add .coveragerc"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/8e72849e8e54ff0ca72aa30aae63b6f15909f237", "message": "More counter unittests"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/a810005234856b3d285170d2feb4d2efbd92f36b", "message": "Update CONTRIBUTING.rst\n\nFix restructured text for later sections"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/7279d8fd64b09e2dc80b91c54cd458faf0efd069", "message": "Updated CHANGES"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/eaabbf16bd849a7f63b54c4424dc36640fad3ccc", "message": "Use six.next(iter) instead of iter.next()\n\npy3k counter compatilibity.\n\nI love travis-ci"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/a3d79e11fea266a2996b588a9cbbe6272722ea8b", "message": "Fix a bug caught by counter unittesting\n\nIf we let all samples expire, then it will erroneously attribute the\nlast sample to the last window."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/5c4307e9d1c02a340a19adca7f5e3673490e9ac9", "message": "Add a unit test to verify counter functionality"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/1d69326e3fc71d673d4142d0c4d129ec2118b326", "message": "Move counters from sparts.sparts to sparts.counters"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/a8b296ba5fb9018eb22d9166f9adc5e3f7203e2e", "message": "Skip thrift compiler tests for py3k, missing binary"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/8e53ca6c26d86e228893db215c428cf03dffbe06", "message": "sparts.thrift.compiler: py26 compatiblity\n\nimplement a crummy `check_output` in sparts.compat if it's not available\nin `subprocess`"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/11bab1cf9777d1d44126c64469c5e4f6b8503bf9", "message": "readfile/writefile py3k compatibility.\n\nJust assume everything we want is UTF-8 already"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/72ccf26f19e9c74d7f532796c23c735d309c0d55", "message": "A wide variety of improvements to the thrift compiler wrapper\n\nThis is a partial rewrite of the compile context to support some future\nplanned features.  It also adds some basic unittests for this old and\nnew functioanlity.\n\n- CompileContext.__init__(..., debug=False, ...).  Pass debug=True to\n  persist any temporary files or directories.\n- Use ctx.module_snapshot() to keep dynamically generated imports from\n  polluting the global module cache\n- Remove crazy dependency resolution, and crazy context manager bungling\n  in favor of a more simple approach: compile the code with \"-r\" and without.\n  The output dir generated with \"-r\" is added to the module path before\n  generating the module.  The output dir generated without \"-r\" is used during\n  the module generation traversal.\n- CompileContext.makeTemporaryIncludeDir(): returns a NamedTemporaryDirectory\n  containing symlinks to all explicit .thrift file and string dependencies.\n- CompileContext.addIncludeDir(path): adds a -I `path` to thrift compiles.\n- CompileContext.addDependentFilePath(path): if `path` is path/to/foo.thrift,\n  symlinks to {tmpdir}/foo.thrift prior to compilation.\n- CompileContext.addDependentFileContents(self, name, contents): saves\n  `contents` to {tmpdir}/`name` prior to compilation.\n- CompileContext.importThriftStr(contents): Let's you compile a raw string\n  containing a thrift idl into a thrift module."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/c6fb60f5249e79ac92b4e1392c89bcdee8ddf30e", "message": "Add some new fileutils helpers, and a unittest\n\nNamedTemporaryDirectory has been improved to:\n- add `.symlink(path, dst)`, to symlink `dst` to the path inside the\n  temporary directory.\n- add `.path(relpath)`, to get the abspath `relpath` relative to\n  `self.name`.  This removes a lot of `os.path.join()` calls"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/8d416c3a1110e9ed1a3c8ec424931109ea20df2c", "message": "Add and improve some context helpers\n\n- `ctx.chdir`: Temporarily `os.chdir(path)` to some new directory\n- `ctx.snapshot_modules`: Clear module cache for new modules\n  on context exit\n- `ctx.add_path`: now has an optional `index` arg, that will cause\n  it to use list.insert(`index`, ...) instead of list.append(...)"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/4eed3420e720b2be3901832dc7646051c928c630", "message": "Move BaseTestCase, etc to sparts.tests.base"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/25bfbef11111d12faa8c56d78d1080f559dcefb7", "message": "Handle string args to CommandTask better\n\nIf a string is passed instead of an array, split on whitespace.\n\nThis makes things like t.run(\"sleep 5\") actually work\n\nCheck-in a demo app to showcase the functionality as well"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/71c9767d56fc47418fb80dbf85b49439fc1d5e53", "message": "Rev bump to 0.5.0\n\nUpdated CHANGES.txt and sparts.__version__"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/60e76135a2e15524938f3dde81b601836be4ffa8", "message": "Make base-dbus task LOOPLESS instead of child"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/830bb441b135da99beb08a8c968fd7f456bdb474", "message": "Add a lot off comments.\n\nAlso, reorder some methods to put the more useful (either\nto-be-overridden, or providing a public API) ones near the top\n\nIn some cases, rename a method or two."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/90b6dffb3788042451983a3606769ff6b442b72a", "message": "Deprecate several `getTaskOption` callsites"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/74692c0566c39f0f3f6359d5ed7379fa88af1a50", "message": "Add more docs"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/738e846e71f87cf546e6a5ac890e3998b3ac2e73", "message": "Use absolute imports in test_fb303\n\nIf we add tests in tests/thrift, this will conflict otherwise"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/0da9f8e2f8e1e65655a088b23244c7d52d6965f2", "message": "sparts.fileutils.NamedTemporaryDirectory\n\nA little bit more flexible than ctx.tempdir, NamedTemporaryDirectory\nprovides the following extra functionality:\n\n- a `name` attribute, which refers to the full temporary path created\n- ContextManager protocol, similar to ctx.tempdir, but the obj is returned\n- implicit cleanup on dereference (via `__del__`)\n- `readfile(relpath)` returns the contents at `relpath` to `self.name`\n- `writefile(relpath, contents)` writes `contents` at `relpath` to `self.name`"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/4489eb6d6c9ffe3cacdba6398903429a20f9c316", "message": "travis install the thrift-compiler"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/3ed3cd54d97ab150cb7884466255a3016cba6558", "message": "Update to latest external thrift"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/8366dde4f89d1738c037e36b33d42cc626d42c2f", "message": "Regenerated FB303 using newer thrift compiler"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/547e4f90cc9f81ac319f547c8c97f9c23388bc35", "message": "Add *.egg to .gitignore\n\nBuild artifacts from setup and test"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/c2d97301b7fb9d2949d1ad08d8f1de3fcebe1e8f", "message": "Add some missing copyright headers"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/b4c693c59fe3f2385c4922c8356d3b433a1fe6dd", "message": "sparts.thrift.compiler: compile .thrift files on the fly\n\nThis change adds some new functionality to sparts: the ability to\ncompile .thrift files into python modules more directly.  This can be done\nwith the compile() function in `sparts.thrift.compiler`.   compile()\nreturns a dynamically-generated module object, which contains all of the\nattributes of the ttypes.py and constants.py files, as well as all\ndeclared thrift `service`s as attributes on the file.\n\nFor example, if foo.thrift contains `service FooService {...}`, a\nthrift client can be generated totally on the fly in this way:\n\n  from sparts.thrift import compiler, client\n\n  foo = compiler.compile('foo.thrift')\n  foo_client = client.ThriftClient(module=foo.FooService, ...)\n\nIt even supports inheritance (E.g., `service Foo extends FB303 {...}`),\nSince dependent modules are generated and cached in a way that makes\nthem easier to import, this should make it easier to define your own\nservices that extend some common base functionality."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/d7b7a3a52906b027e62bd4d93e707bad6a3758e5", "message": "Add context helpers\n\nThis change adds a new module sparts.ctx with some useful functionality,\nsuch as self-cleaning tempdir and temporary PYTHONPATH modification.\n\nThe latter is not threadsafe"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/b8268964dd3b014c2d1142c1a5d5b767991af7e9", "message": "Python 2.6 compatibility\n\npython 2.6 requires unittest2 and orderreddict in order to work"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/979b61cf80aa7b9eaad8cca627e1b15506d54091", "message": "Fix py2.6 OrderedDict compat"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/17efc89227780ba34e460e5749d28f2100a25d29", "message": "Update thrift submodule to latest version"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/001feb0b01202f1247bfb86966f606ed5f57ef07", "message": "Fix flaky file update test on python3.3\n\nPython3.3 introduces a stat cache for os.stat() calls, which can cause\nthis test to fail.\n\nSolve this by mocking the task.stat method to return a mocked stat object\nthat returns a different mtime/atime without actually needing to call\nos.utime or actually re-stat the file."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/e8ef2c2bafddbe205ed85028a31743724f2e2763", "message": "Show more detailed pytest summary"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/6c68c49d7afd2422f9876b2d1f9437242ff212eb", "message": "Depend on `six` for py3k compatilibity"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/48a21daaad88817a332756e87b2772654304a59b", "message": "Add missing __init__.py"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/47ac17f98b5499f49e78128fd72a7b9c28aa2bed", "message": "Move thrift.ThriftClient to thrift.client.ThriftClient"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/e8d27a7f6e1a707e49c51920c8d3c27c7b65e876", "message": "Add thrift to 2.7 requirements"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/56b22cd17de46483078a85e25d46c422aa5f2e47", "message": "Add python-3.3 build"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/1baf0be3b7aa4bc99bd6d557052f557b2f190784", "message": "irc notifications for travis"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/79370e4e1165e806740c65cf50c7b0483ed6608b", "message": "version-specific travis requirements"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/6ddfb6b7cb9495f490a4407de797b54535666acb", "message": "Tornado py3k compatibility"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/0094d03767a40ba1df3cbe432916f2b6e55c6e10", "message": "Use new-style octal literals for py3k comaptibility\n\ne.g., 0oXXX instead of 0XXX"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/520644d2663f45397b2ba7c617b26e38a946b066", "message": "Update classifiers to enable py3k compatiblity.\n\nAlso, enable travis builds\n\nNote: Sparts is currently only minimally supported on py3k.\nMany of its features are dependant on other libraries that are not yet\nsupported."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/1856065da682a0c30e6e28d64133cebd3f476100", "message": "py3k unittest compatibility re: PEP-420\n\nPython 3.3 adopted PEP-420.  This means that the thrift/ directory in\nthe repository root was getting imported in this unittest, and the task\nwas not getting skipped properly.\n\nMore specifically import the thrift.server module, so we don't\nincorrectly allow this test to run in py3.3+"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/f5700d43188cd711a308f851e7355ad2e856df96", "message": "py3k Queue -> queue compatibility"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/20c10e8e0c316de2c19932ad81ee6080571c15fc", "message": "Remove unittest2 unit test dependency.\n\nNewer versions of python have a good enough builtin `unittest` module,\nand unittest2 is not py3k-compatible."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/26966014d62bcc6db096f98897b24f04018ab2fa", "message": "py3k xrange compatibility"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/d2e9c2a787c1acbfd667b8f84ba4637be0bb6e02", "message": "Skip deferred queue task test if twisted is not installed"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/bf8f162515b581217641578fe22ca8e12ab2e989", "message": "Use print_function from __future__ where possible"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/4efad14025a3fafe52e341f65a624d3fa4fef501", "message": "py3k-compatible metaclass declarations"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/4b32d2327d95a89f382d8f8ff8ef2760c88e9f6d", "message": "Add compat module for py3k compatibility"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/bd56f16bd4c7dbba2802e04bde2ece67bb057d0b", "message": "FacebookDbusService -> FB303DbusService"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/14fac719445ac0c72f21bb76dc82d64b039c529f", "message": "Update to standard FB BSD + Patents License"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/c6eb9cf8a8940c2e208eecb9d23872fe4d5a9247", "message": "Update runit.py to handle flags ordering better."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/eeb8ede432a401f18d724071c271a33c6a908c11", "message": "Clean up some bits from the previous diff (and options in general)\n\n- Fix naming convention on named_tuple instances\n- Move named_tuple class declarations outside of method implementations\n- Simplify args to _loptName; there is nothing that passes a list.\n- Eliminate need for main kwarg to _prepareForArgumentParser, since we\ncan just define the `_loptName()` classmethod on VService and use that"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/40df516f6ccbc1a233a691a5fbd540b240880dfc", "message": "Fix accidental un-propertization of mock module on tests"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/5b2de34de0a9b52d656170780efbe8d25a9ddde5", "message": "Document new thrift client more thoroughly"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/a75a9c11f1bf6fa802b743e71b4647f572e7b071", "message": "Add an fb303 client/server test.\n\nThis test case verifies a lot of functionality that was previously\nuntested, including:\n\n- Basic ThriftProcessorTask functionality\n- Fb303::getStatus()\n- Basic NBServerTask functionality\n- Basic ThriftClient functionality\n\nFixes #59"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/3b34714e16ebbf57af91e0fdd52c6d8adfe98654", "message": "Implement an easy-to-use thrift client wrapper.\n\nLike writing thrift server code, writing thrift client code requires a\nlot of boilerplate, and the core thrift libraries omit a lot of\nbasic functionality.\n\nThis diff adds a new module, sparts.thrift, defining `ThriftClient`\n\nThe preferred way to use ThriftClient is to use its class methods, such\nas `for_hostport(host, port, **kwargs)` or `for_localhost(port, **kwargs)`.\n\nWhile ThriftClient is flexible enough to be used directly, it is\nencouraged to subclass it in order to reduce the number of required\ncreation arguments."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/4db3d782719330d7555552bd68861906a818e958", "message": "Add register / clear warnings API\n\nAlso add a unit test.\n\nFixes #51"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/71e922663f8f0f4111bd6a4b7087baa775d031f6", "message": "DirectoryWatcher (/dev/) example."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/8304ef012c51e9eadfa761ba73d450ff4b261196", "message": "Actually call preprocessOptions...\n\nWhen committing the initial refactor, I forgot to include this.  Oops."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/466e1ceb14f0bfc6d58b39244d2c2013ba8e2d5f", "message": "VTask::initTaskThread() to do per-thread Task-specific init"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/3923a73adc28bfb0d8c8834278950ab648e48f88", "message": "Reorder some imports"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/858d716dd0ad328a0d65465d5916290a03276811", "message": "Documentation and API consistency\n\nAdd docstrings to tons of things.  Also, prepend \"_\" to many methods\nthat are meant to be internal/private only."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/80a406557e9b7e249d35e21aa1bf1a72a38b351e", "message": "Some initialization refactoring\n\n- Refactor local task resolution into a separate classmethod,\n`resolveDependencies`\n- Move runit-install and task list option handlers into a separate\nmethod, `preprocessOptions`.  This is now before `createTasks()`\nin the initialization flow.\n- Simplify `createTasks()` to only handle task creation logic"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/40212976734e20aeb3be64f1109bd73127727f03", "message": "Move initService() call to just before Task Creation\n\nThis makes a little bit more sense than in the constructor.\n\nIf we put this in the constructor, then initService() is called even\nbefore action-oriented command line options  have been called\n(E.g., --tasks (list) or --install)"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/97b562a0ab1fb1be379c5941abeb1f45861d49ce", "message": "Add an initService() on VService\n\nThis makes it easier to do VService-subclass-specific initialization."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/99f1d43d0b0c169e955e0519965a2b4668c355bd", "message": "Handle ENOENT on stat() calls in DirectoryWatcherTask\n\nFixes #57"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/4312b75172adffe73f0099690a174c921999b28b", "message": "Updated CHANGES.txt to 0.4.2 in preparation of 0.4.1 release"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/27d18abb9dd84ce2ac347150c5fc6c332b450a71", "message": "Use pytest for unit tests."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/78757da192032e6252f51f66a598537441823b58", "message": "Make file test case pass more quickly\n\nExplicitly pass a probably different mtime/atime for the utime call in\norder to try to force an update sooner.\n\nThere's a small chance this could break things if the tmpfs doesn't\nproperly support utime, but that's highly unlikely."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/bceb007dbd724003b671466ef0ee1210920b129b", "message": "Make PeriodicTask test much faster\n\nbefore each test was taking ~500ms.  Now, both combined take 120ms.\n\nDo this by explicitly tracking threads and polling the counter after\nsleeping intervals of 100ms (and allowing for up to 3.0s to run) instead\nof sleeping 500ms and *hoping* enough iterations had happened."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/7efbe15cdfad8d4a0d94f4711314c4d53031933d", "message": "Faster QueueTask shutdown, better CPU usage\n\nCurrently, QueueTask polls the queue every 600ms, and checks for\nshutdown events in-between.  This causes each queuetask-based test case\nto take 600ms.\n\nInstead of relying on the poll timeout, insert a sentinel object into\nthe queue on shutdown.  Check for the sentinel object, reinsert it, and\nbreak if it's detected, so multi-worker queues can also shut down\ngracefully.\n\nAs a result, I've decreased the polling interval from 600ms to 1.0s.  We\ncan probably increase this further, but will hold off for now unless\nsomeone really needs this later on.\n\nI've observed test case duration dropped from 600ms per test case to\n12ms per test case."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/3fedeea929fa975631dc0ecf36a891afec8f1c23", "message": "Wrap os.stat in a method in DirectoryWatcher\n\nSo we can make this more easily mockable."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/aa9dd40f2a5466d87d8a158949016d3ca73d341a", "message": "Make test_file run faster\n\nWe only need the sleep in the modify test, not in the create test.  Move\nthis there."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/23458764d9646f9448067c76fbe1c9bf1e115c2a", "message": "I fail at writing code\n\nReturn the mock after import, not after raising the exception...\n/facepalm"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/2934f9f012b34542491122c1f65d25d8d253f90e", "message": "Encourage use of `mock` in unittests...\n\n... by exporting the mock module as a property of the base test case.\nIf mock isn't installed, the test case will be skipped."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/9be3f5f5f0771293abbc484c0b92f5a0915f7872", "message": "Make test case accessible on instantiated service"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/afe86b8f8dd50c25bac40ce39844cc9755a00efa", "message": "More graceful test skipping\n\nCreate a skip exception compatible with both pytest and unittest2.\nUse this to skip tests as appropriate"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/8674306d1a33274fafc48b59777e458c2822a089", "message": "Import unittest2 as unittest and use this by default"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/424af272084b2730ee8c20e88aedf6499a2bdd4e", "message": "Merge pull request #53 from joeldodge79/test_base_teardown\n\nMisc base test tweaks"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/733a25cf26fcf7b44002f6f1cf324557fc12db59", "message": "Updated changelog"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/7fedd3436b40c53d3e81582a8bbdf38918c9e653", "message": "Merge pull request #46 from joeldodge79/nbservertask_shutdown_bug\n\nStop NBServerTask properly"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/b2460057ce1fb85b68b25abfe8f670969ba97ea3", "message": "Update changelog to reflect important bugfix"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/3caba3450a8b6dcd54ca6144710bf0b1d971e16c", "message": "Remove trailing whitespace"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/79390fbdcb9eb19574e55fc2b68b3485f8583b6c", "message": "PeriodicTask.execute_duration{->_ms}\n\nexecute_duration is more useful in milliseconds"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/f707ac4558c55497dd47b614241a0cb63aa07748", "message": "Use a partial function instead of lambda for sparts objects\n\nlambdas bind more loosely than partial function.  Fix this."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/cede5105284ace3edf2e0a85de45669e6cce05a7", "message": "Add file module for watching directory contents"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/be6456c2ac0331ab9e009ff8d43381ae08e50cab", "message": "Add a `running` property to vtask instances"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/daf1f409bb7fc2506967f0758f792d8538e1b023", "message": "Bump version"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/914c0039efdeada65f9b62ee1c8f432df238469a", "message": "Bump to 0.4.0,  Add changes from recent commits"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/0c796c17dcf898adf73591d331909ba219210752", "message": "Fail hard on unhandled exceptions.\n\nAfter trying the alternatives:  (1) ignore-and-continue (e.g., for\nPeriodicTask, QueueTask) or (2) die-and-continue (e.g., thread stops)\n\nThey both are less than ideal.  The default should be to kill the whole\nprogram on exceptions.  This is the easiest way to encourage service\nowners to fix broken services or tasks, and/or to be more resilient\nof transient error scenarios.\n\nFixes #36"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/037e5e03896866574c53d3074d5e1a8cb093ed77", "message": "Significantly change vservice shutdown procedure\n\nCurrently VService.stop() is a blocking call.  It signals to the tasks\nthat they should stop, and then blocks, waiting for them to stop.\n\nLet's change that for now.  There are three functions now:\n\n.stop() - Signal that the service and tasks should stop\n._wait() - Wait (polling) for the tasks to shutdown\n.join() - (unused) Call join() on all the threads.\n\nFixes #37"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/bde1ca52610792ea698760145ccdac3d69aeb51a", "message": "Provide some hooks for graceful reactor shutdown\n\nProvide some hooks to allow tasks that depend on twisted reactor task to\nshutdown gracefully"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/9180834103e08eb47bdf455c27734eb9cf21dd08", "message": "Add helper \"bound_v*_addrs\" properties to http task\n\nIn case you need to get the bound adds by ip version.."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/sparts/issues/comments/9840610", "body": "Twisted.mail provides an IMAP server implementation.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/9840610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/9853424", "body": "I renamed this to keep just the service framework.  Invalid.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/9853424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/9853428", "body": "I renamed this to keep just the service framework. Invalid.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/9853428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10047344", "body": "that wasn't so bad.\n\nfixed by 6b6f1350494cabb5782be058a2eff60279e8d07c\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10047344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10048364", "body": "implemented via 5d0f6744eeaece6663f062e3bc04a878b0aa815b\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10048364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10048470", "body": "http://nagios.sourceforge.net/docs/3_0/pluginapi.html\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10048470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10050420", "body": "Done in 4a9079882ac7ff36aecb0559c0615573e21484cc\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10050420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10050652", "body": "done.  Also added TryLater support.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10050652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10077610", "body": "This is almost ready for primetime (see my \"dbus\" branch).  I'm having trouble with signal handling after restarting the server once due to some weird interactions with the glib / gobject MainLoop.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10077610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10077642", "body": "This is also for compatibility with fb303.\n\nWant to make it declarative, like with \"options\"\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10077642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10113577", "body": "Done and pushed\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10113577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10265101", "body": "https://github.com/fmoo/facebook-dbus\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10265101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/22370337", "body": "Fixed by 4db3c5447be3891e0beecc8e5ba17ead422e9ff5\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/22370337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/22579802", "body": "--install is done, but this still needs --uninstall.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/22579802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/22580070", "body": "This should possibly depend on / subclass #38 \n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/22580070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39630181", "body": "Can you rebase?  I just made a couple of refactors to the initialization flow in 80a406557e9b7e249d35e21aa1bf1a72a38b351e, 40212976734e20aeb3be64f1109bd73127727f03, and 97b562a0ab1fb1be379c5941abeb1f45861d49ce\n\nAlso, I messed up and forgot to commit 8304ef012c51e9eadfa761ba73d450ff4b261196\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39630181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39699640", "body": "I've merged / tweaked most of the commits except for the (last) vfb303 bugfix because I believe I'm (ab)using it in the dbus implementation and casting to str() will eliminate the native types / variant support.\n\nThat might be fine, but I should change the method from variant to str.  There might need to be some changes to the corresponding `setOption()` path if I do that though.\n\nI'll take another look at it tomorrow night.\n\nI don't think dbus works well on anything other than Linux\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39699640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39774227", "body": "I cut #65 to fix the getOption thing long term.  I'll close this out.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39774227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39791195", "body": "Looks good!\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39791195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39802897", "body": "oops!\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39802897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39802997", "body": "Deadlocks (or rather, unexpected blocking) can occur if you set the queue size too low and do a blocking queue.put() in a place where you are not expecting to block.\n\nIt's a good way to put backpressure on other tasks, but will require folks to take care is all.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39802997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40174166", "body": "landed python 3.3 for core sparts and tornado.\n\nthrift or twisted support are currently not working.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40174166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40176637", "body": "Seeing similar issues with getCounter for a nonexistent value:\n\n```\nTraceback (most recent call last):\n  File \"/home/pete/src/sparts/externals/thrift/lib/py/thrift/server/TNonblockingServer.py\", line 54, in run\n    processor.process(iprot, oprot)\n  File \"/home/pete/src/sparts/sparts/fb303/FacebookService.py\", line 509, in process\n    self._processMap[name](self, seqid, iprot, oprot)\n  File \"/home/pete/src/sparts/sparts/fb303/FacebookService.py\", line 572, in process_getCounter\n    result.success = self._handler.getCounter(args.key)\n  File \"/home/pete/src/sparts/sparts/vfb303.py\", line 66, in getCounter\n    raise ValueError(\"%s is None\" % (name))\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40176637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40310999", "body": "basically done\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40310999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40455915", "body": "Added unittests with 5c4307e9d1c02a340a19adca7f5e3673490e9ac9\nFixed and verified py3k compatibility with eaabbf16bd849a7f63b54c4424dc36640fad3ccc\nFixed a bug that I missed in the original implementation with a3d79e11fea266a2996b588a9cbbe6272722ea8b\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40455915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40455992", "body": "Fixed with b8268964dd3b014c2d1142c1a5d5b767991af7e9\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40455992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40456153", "body": "Warnings API verified in 4db3d782719330d7555552bd68861906a818e958\ngetStatus verified in a75a9c11f1bf6fa802b743e71b4647f572e7b071\n\nStill need to verify options/counters API\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40456153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40674618", "body": "We already have maximum queue size, but rate-based, non-blocking rate limiting would be good.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40674618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40674811", "body": "Going to take a peek at this today.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40674811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40728537", "body": "https://pypi.python.org/packages/source/s/sparts/sparts-0.4.1.tar.gz#md5=1199617312122aae5ab9047ffd26814d\n\nAll the releases are git tags, so after cloning and/or fetch --tags, a\n\n  git checkout 0.4.1\n\nShould do the trick\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40728537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40728669", "body": "Does that work?  Did I break something on master?\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40728669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40732721", "body": "I spent a couple of hours on this last night, and it's turning into a near rewrite of the options, counters, and/or tasks base class code.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40732721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40783101", "body": "Yes, it will be the first release under facebook/.  You might need a clean checkout to develop on top of it though.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40783101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40789958", "body": "0.5.0 is out\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40789958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/41975978", "body": "python-dbus doesn't ship with a setup script, so it will be slightly complicated to integrate with travis-ci\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/41975978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/42646312", "body": "merged as d382d1a5692d45f448096c2d3b18368d43a6882f\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/42646312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/45167539", "body": "getMemTypeStatus -- objgraph.typestats()\ngetCpuUsage -- psutil.Process(...).get_cpu_percent(interval=0)\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/45167539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/45274100", "body": "I've used this before, with moderate success: https://pypi.python.org/pypi/crontab/0.18\n\ntricky part will be trying to refactor/reuse code appropriately from `PeriodicTask`\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/45274100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/46397753", "body": "@agargiulo - I'm ok picking up https://github.com/thesharp/daemonize as a dependency here.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/46397753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/46637271", "body": "@agargiulo - Good catch.\n\nYeah, just do a separate pull request to add a `*flags`, argument to the end of the Option constructor.  Save that as a member, and append it to the initialization args.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/46637271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/46902825", "body": "@chantra - even though the vservice signal handler takes priority, shouldn't the atexit.register()'ed method execute eventually and clean up the file then as well?\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/46902825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/46923375", "body": "We discussed this on irc.\n\nFor unittests, you will probably need to create a different unittest object per test case, and rely on command line overrides for the pid files. \n\nFeel free to override/modify the base classes setup/teardown logic if you need to.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/46923375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/47853080", "body": "A CallableCounter was added in 91394e9c8b6e60cbcff184ba7c83b7026f4d2955, (see usage in `QueueTask`), but due to restrictions in the current implementation, these types of counters can't be defined declaratively.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/47853080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/47853156", "body": "Partially done by 5594fb1542e03177a66adbab46d4e0505fa40c6c, needs some more work/refactoring to eliminate various types of race conditions.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/47853156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/51106358", "body": "This is working fine for me\n\n``` python\n\nfrom sparts.tasks.queue import QueueTask\nfrom sparts.vservice import VService\n\nclass FooTask(QueueTask):\n    WORKERS = 1\n\n    def initTask(self):\n        super(FooTask, self).initTask()\n\nFooTask.register()\nVService.initFromCLI()\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/51106358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/51108038", "body": "Ah, I can repro this if I set OPT_PREFIX to something with a \"-\" in it (per #87).  In that case, self.workers returns None, which is not an int.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/51108038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/51109530", "body": "It looks like we're incorrectly substituting\u00a0\"-\" with OPT_PREFIX.\n\nquick workaround is to remove the \"-\".  I wouldn't replace it with \"_\" because we're (possibly) incorrectly substituting that to \"-\"\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/51109530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/51120856", "body": "Yeah, it works at the moment, but I might have to break it with the fix for handling \"-\" properly.  I haven't looked too closely at the code yet, but it's slightly less risk to avoid the separator entirely.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/51120856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/52365604", "body": "it looks like ordereddict is provided, but futures are not.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/52365604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/54377364", "body": "This method should return a `Future` object that can be blocked on until execution completes.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/54377364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/55358166", "body": "Fixed by 99581d8cb1c7f9e3036118ace4c96795eb661aac\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/55358166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/55440698", "body": "My mistake, 99581d8cb1c7f9e3036118ace4c96795eb661aac only implements the future portion of it;  it doesn't trigger async execution.  The remaining part should be easy to implement.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/55440698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/56433797", "body": "Though there are plenty of open source Python solutions that expose gflags-like global option declaration, it looks like there's no solution for shared library/extension dependencies that leverage `libgflags` proper.\n\nFor fun a week ago I implemented a proof of concept in cython that solves this, but we have an internal solution that uses boost::python that is more well-tested and complete that I'd like to open source instead.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/56433797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/59672428", "body": "Not really important, and greenlets don't like when you interface with them from other threads anyway.  Going to close this out until someone actually needs it.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/59672428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/86878734", "body": "Ok, done.  Do we need a (0.7.2) release to pin atc to?\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/86878734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/87863900", "body": "Awesome.  I added a note to CHANGES.txt (4a02ed72d0aa319373fa774f86734e774ef1e0de) to note support for the feature.\n\nDo you need a new release soon or are you ok working off of master?\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/87863900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/88249321", "body": "Looks like `SelectTask` has an unrelated race condition in the future handling logic on Popen failures.  I just opened #99 to address this.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/88249321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/109010014", "body": "Nobody is really asking for this.  If someone needs it, please reopen or open a new issue. \n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/109010014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/109010480", "body": "Nobody is really asking for this.  If you need this or something like it, please open a new task. \n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/109010480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/109010713", "body": "We don't have a use case for this yet.  will send a or or open a new task if this comes up. \n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/109010713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/109010965", "body": "I think this is basically done now.  If you run into issues, please open a new task. \n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/109010965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/109011731", "body": "Nobody is asking about this, so I'll close.\n\nIf anyone wants to implement or share their implementation, I'll be happy to look and merge if possible. \n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/109011731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/109012534", "body": "Iirc, this has been implemented for one of PeriodicTask or QueueTask, but not both. \n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/109012534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/109013074", "body": "This is pretty nasty to implement.  Current recommendation is to call shutdown and let the parent (e.g., runit, etc) restart. \n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/109013074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/109014376", "body": "This is a bit out of scope and will likely be extremely difficult to implement considering the architectures of kazoo, gevent, and sparts. \n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/109014376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/118635226", "body": "Should be fixed by 042c8b1282d5da4714dfe9f8cef3e8db13c1024b\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/118635226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/120737323", "body": "Let me know if you need a new release for this, or if it can wait a few weeks/months for a new release with some features.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/120737323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/128917518", "body": "Unfortunately, qt's threading model just doesn't play nicely with sparts.\n\nWhile glib/gtk is less python/user friendly, we've had much more success with it.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/128917518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/146292253", "body": "Twisted is optional.  Also, if I recall correctly, twisted-13+ works with Python 3.3 and above. \n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/146292253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/146292413", "body": "@ryanrhee - does Apache thrift support Python 3 also?  Or is it just fbthrift?\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/146292413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/220509765", "body": "So, there's no guarantee that the person who created the future is going to wait for the result, but I think this is the right tradeoff in behavior.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/220509765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/251476355", "body": "Last time I looked at this, getting flask run inside of sparts seemed to be impossible due to implementation specifics/limitations of the main flask engine.\n\nThere's also so many different ways of running flask (debug server, uwsgi, etc), that I'm not sure which would be best to support.\n\nAnother option might be to try to run sparts inside of flask instead of vice versa, but I'm not sure what that might look like.\n\nDo you have any thoughts on what an ideal API would look like for integrating sparts with flask for you?\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/251476355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/317954008", "body": "Yeah, it's been a while since the tests have been run.  I suspect they're\r\njust broken on master due to travis internal changes.", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/317954008/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/11361721", "body": "Can you call this option, attribute, etc \"max_items\" instead of \"max_qsize\"?\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/11361721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/11361793", "body": "Better help text would be ideal as well.  Something like:\n\n``` python\n  help=\"Set a bounded queue length.  This may \"\n       \"cause unexpected deadlocks. [%(default)s]\"\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/11361793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27424569", "body": "minor nit,  it's not clear from `getBus` that this is instantiating a new private Bus (vs. returning the existing local).  Also prefer an underscore prefix for things that are not meant to be called externally.\n\nCall this `_makeBus` or `_getNewBus` or `_createBus` instead (I like `_makeBus` the most)\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27424569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27425056", "body": "You shouldn't need to specify `name=...` in your option.\n\nEDIT: Is there some issue with overrides not working if you don't specify the name?\nIn general we prefer to do this with class attributes, e.g., in the parent set `USE_SYSTEM_BUS=False`, then in the parent option, set `default=(lambda cls: cls.USE_SYSTEM_BUS)`\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27425056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27425615", "body": "Will this test fail if two tests are run at the same time (and try to grab the same bus name from the SessionBus)?\n\nMight be worth appending a random 64-bit number + timestamp to the end of the `BUS_NAME` to avoid this.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27425615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27425661", "body": "Remove trailing whitespace.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27425661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27527810", "body": "I'm thinking something like this might be cleaner / more easier to reuse:\n\n``` python\ndef asyncRun(self, cb, *args, **kwargs):\n\n    def _future_execute(f, cb, *args, **kwargs):\n        try:\n            # Only execute `cb` if the future wasn't cancelled\n            if f.set_running_or_notify_cancel():\n                f.set_result(cb(*args, **kwargs))\n        except Exception as e:\n            f.set_exception(e)\n\n    def _future_cancel(f, handle):\n        if f.cancelled():\n            glib.source_remove(handle)\n\n    f = Future()\n    handle = glib.idle_add(partial(_future_execute, f, cb, *args, **kwargs))\n    f.add_done_callback(partial(_future_cancel, f, handle))\n    return f\n```\n\nThis seems good because:\n- The caller can choose to call `f.result()` on their own,  with or without a timeout as desired\n- Callers don't have to implement future semantics in their callbacks or wrapping cb with the try:/except: blocks. \n- It support callers cancelling the idle-added function with native glib apis to remove the event source id as appropriate as well.\n- It allows for **kwargs as well as *args since the wrapped callback passed to glib is a partial\n\nThoughts?\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27527810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27722078", "body": "Move this comment to inside `_asyncStopCb`\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27722078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27722239", "body": "Is there a way to leave this in DBusMainLoopTask?  Dependency resolution should force its' initTask() to execute first before any other tasks' (who might depend on it?) \n\nInitializing stuff like this in module scope is problematic for a variety of reasons and I'd like to avoid it if possible.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27722239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/63987900", "body": "Add a comment above, like:\n\n``` python\n# For future-based work, let's allow the submitter to handle the exception\n# gracefully.  Since we can't know if that was successful, just assume the\n# exception will be handled (or re-raised) by someone awaiting the future.\n# This isn't guaranteed, but is a reasonable assumption.\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/63987900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "chantra": {"issues": [{"url": "https://api.github.com/repos/facebook/sparts/issues/105", "title": "test_tornado's test_execute_async flaky", "body": "It seems this test may be flaky given that it succeeded on all other python flavors.\nhttps://travis-ci.org/facebook/sparts/jobs/119671018\n\n```\ntests/tasks/test_settaskoption.py ..\ntests/tasks/test_tornado.py .\n=================================== FAILURES ===================================\n________________________ TestMyTask.test_execute_async _________________________\nself = <tests.tasks.test_periodic.TestMyTask testMethod=test_execute_async>\n    def test_execute_async(self):\n        f = self.task.execute_async()\n        res = f.result(3.0)\n        self.assertNotNone(res)\n        self.assertGreater(res, 0)\n\n        # Verify exception path\n        self.task.fail_async = True\n        with self.assertRaises(Exception) as ctx:\n            # Call this twice, since there's a race condition where setting\n            # fail_async and getting the future from execute_async is called\n            # when execute is between the self.fail_async check and the return\n            self.task.execute_async().result(1.0)\n>           self.task.execute_async().result(1.0)\nE           AssertionError: Exception not raised\ntests/tasks/test_periodic.py:60: AssertionError\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/facebook/sparts/commits/b5a36a57bd130aa5c3238f21d84a11cb41ced3ef", "message": "[travis] Force running in containers, not VM\n\n* Add support for IPv6 loopback\n* speed up test spin up"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/b4ef9548d9cc8ef2af999b8940928462ad4bca6f", "message": "[tests] Fix test_daemon to not abort the rest of the test suite\n\nIf we do not fork within the test where we daemonize, the current\nprocess will get daemonize and the test suite will stop."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/5b8c061c4c2d1597d261d9e61b8cc256bdc93450", "message": "Enforce Twisted<15.5.0 for python 2.6\n\n15.5.0 is the last release supporting python 2.6 [0]... but actually\ndoesn't support it [1].\nLet's make it <15.5.0\n[0] https://twistedmatrix.com/trac/browser/tags/releases/twisted-15.5.0/NEWS?format=raw\n[1] https://twistedmatrix.com/trac/browser/tags/releases/twisted-15.5.0/twisted/__init__.py#L16"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/825a4861f6f6801e719a0c78a6a3777915c0213f", "message": "[option] handle nargs properly\n\nFixes #103"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/sparts/issues/comments/46890163", "body": "the issue is that there is 2 signal handlers for the same signal. Only the last one will ever be called (which is the one from vservice).\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/46890163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/46905875", "body": "oh yeah, that's right\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/46905875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/87109159", "body": "no, not worth a new release. I just wanted to flag it as a dependency.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/87109159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/203539894", "body": "https://github.com/facebook/sparts/blob/master/sparts/sparts.py#L85 is causing the issue\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/203539894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "tmm2018": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/sparts/commits/d07245547373db3a51079d5d446c949b3a729bf8", "message": "fixing minor spelling typos"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "djipko": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/sparts/commits/15037b273fa17532fa79d73d66f4d3407706aca8", "message": "QueuTask: prevent unhandled exception from tearing the main loop down\n\nPrior to this patch - raising an exception inside an execute() of a\nqueued\ntask when using futures instead of deferreds, would tear down the whole\nservice thread. This is almost certainly not what we want.\n\nThe cleanest way to fix this seems to be in the ExecutionContext, where\nwe consider an exception handled if it's set on a future, and let the\nsubmitter worry about it."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/64010354", "body": "Will do - thanks! In case of QueueTask - this decision makes sense since submit() returns a future instance so it's basically a part of it's public API.\n\nAlso in QueueTask.map() we rely on the future to throw to the caller as we call result() on it.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/64010354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "bboozzoo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/sparts/commits/0de788eedabe4e4b671bb9fda945f723a6b9daa4", "message": "manifest: add manifest\n\nAdding MANIFEST so that both LICENSE and PATENTS will be picked up for\nsource dist. Although not required this is generally useful when\npackaging for Linux distributions.\n\nSigned-off-by: Maciek Borzecki <maciek.borzecki@gmail.com>"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/980cea761655a0e585899aa36e1b125c4198b330", "message": "dbus: init glib threading during DBusMainLoopTask init\n\nSigned-off-by: Maciek Borzecki <maciek.borzecki@gmail.com>"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/749f0dbf575798148b28fc3ba32fb10f8b7b98d7", "message": "dbus: move commented out bus.close() to asyncStopCb\n\nSigned-off-by: Maciek Borzecki <maciek.borzecki@gmail.com>"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/6c0eb183855322a17fd1667252009c774dcbc300", "message": "dbus: more tests for DBusTask.asyncRun()"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/79b924725834e7cb87fc5904bcaff48e457b7035", "message": "dbus: refactor asyncRun to return Future()"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/6c3858afbd9ac1f8fbe1b945f228890a9caacbd0", "message": "setup: whitespace cleanup"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/3e66e76e5dafbed9a2c33eee6d9b600466766bfc", "message": "dbus: refactor tests to make passive checks\n\nTo avoid direct calls to dbus, make passive checks for class field\nthat is set only if the service failed to acquire the desired name."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/6b28c340d16abc824ec6e804a81bbc202f6a48f7", "message": "dbus: pass service start() and stop() handling through the main loop\n\nThe main loop used by dbus connection is spinning in separate thread in\nwhich the DBusMainLoopTask is running. DBus bindings are not\nthread-safe, and the loop has already started (DBusMainLoopTask is a\nprerequisite for DBusServiceTask). The only safe way to make dbus calls\nis by passing them through the thead in which the loop is being run.\n\nNote that in typical dbus applications most of dbus calls is done before\nthe main loop starts or the calls are performed within the callbacks in\nthe main loop. The only way to reproduce this is to use idle callback\nthat can be added in a thread-safe manner."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/8ab6fcd587ca9cad6554a62272fd87515de99bf2", "message": "dbus: cleanup loop quitting\n\nReleasing a reference to the main loop just after quit may give\nunexpected results as the actual Glib g_main_loop_quit() does not wait\nfor the loop to finish. However, the loop may be safely cleaned up after\nrun() returns."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/5a0cf00b78ac943fea78d3e8f4b882a74e618406", "message": "dbus: DBusTask.asyncRun() helper\n\nAdding DBusTask.asyncRun() helper method for running a callback within\nthe context of thread running the main loop (an in fact within the main\nloop). The method should be used to run any GLib-depending\nnon-thread-safe code, such as dbus calls."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/95c4123bee2a908ba2d3b94d4d1ad24805b292d9", "message": "dbus: init threading support before any other code"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/79f31b6bac6055e8add9e7588d32425a972ea813", "message": "dbus: skip FB303 in demo code if import failed\n\nFB303 depends on Thrift. The demo code exits with ImportError if Thrift\nis not available."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/1445e40c40de8c335f026ca852b238032d0ec1dc", "message": "dbus: append random number to test service name"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/ccb1b3e1175bf92509dcf32030dcb7228a578b46", "message": "dbus: USE_SYSTEM_BUS class attribute"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/1d16f9292cc445c63fb4483e5e226a12a210f205", "message": "dbus: rename getBus to _makeBus"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/183f65497637da84c303313c60c6d048d37c42af", "message": "dbus: remove trailing whitespace in tests"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/bf028eddf34e0863715ee3089833e39949a27b40", "message": "dbus: skip dbus tests if dbus module cannot be imported\n\nDBus support modules are usually provided by host system stack. Skip the\ntest if dbus cannot be imported."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/6d24dedb75718647af98547e9b367a5bb9200f03", "message": "dbus: minimal test case for dbus tasks"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/c4fdca7b2526f0d4d1a02ed10549b8a2a5c10d31", "message": "dbus: support for system bus\n\nDBus task can automatically try to obtain a name on a system bus if\n--dbus-system-bus is passed in command line. Optionally one can override\nDBusTask.getBus() method to return the desired dbus.Bus object."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/sparts/issues/comments/88013714", "body": "I've temporarily deb-packaged current master but it would be great if you could do a release.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/88013714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/88149610", "body": "Hang on with the release. There seems to be a problem related to accessing dbus/glib structures from multiple threads. I'll try to dig deeper and post patches. It'd be good to have it fixed before the release.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/88149610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/120750883", "body": "On Sun, Jul 12, 2015 at 6:18 PM, Peter Ruibal notifications@github.com\nwrote:\n\n> Let me know if you need a new release for this, or if it can wait a few\n> weeks/months for a new release with some features.\n> \n> There is no hurry. Once you do a 0.7.3 release at some point in the future,\n> I'll just update the Yocto recipe to pull the new version form PyPI.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/120750883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27426455", "body": "Ok, `_makeBus` seems like a good name\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27426455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27427125", "body": "Good catch.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27427125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27550432", "body": "Fair points. I'll update the code and push patches.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27550432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27729231", "body": "> Initializing stuff like this in module scope is problematic for a variety of reasons and I'd like to avoid it if possible.\n\nOk. I guess anyone using the old glib bindings would call threads_init() somewhere at the beginning of the program anyway, so it's fine to move these changes back to where they were originally.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27729231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "hobson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/sparts/issues/comments/12531178", "body": "`pip install sparts` worked for me on Ubuntu 12.04.\n\n`pip freeze` below for reference:\n\n```\nargparse==1.2.1\ndistribute==0.6.24\nsparts==0.2.2.1\nwsgiref==0.1.2\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/12531178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "joeldodge79": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39687487", "body": "@fmoo rebased and split apart the commits.\n\nI was manually testing get/setOption with demo/tnonblock_thrift.py and that seemed to work fine (after a bugfix):\n\n```\n> ./sparts/gen/fb303/FacebookService-remote -H localhost:33333 -f getOptions\n{ 'dryrun': 'True',\n  'level': 'DEBUG',\n  'tasks': '__None__',\n  'thrift_host': '0.0.0.0',\n  'thrift_port': '0',\n  'thrift_threads': '10'}\n> ./sparts/gen/fb303/FacebookService-remote -H localhost:33333 -f setOption dryrun ''\nNone\n> ./sparts/gen/fb303/FacebookService-remote -H localhost:33333 -f getOptions\n{ 'dryrun': 'False',\n  'level': 'DEBUG',\n  'tasks': '__None__',\n  'thrift_host': '0.0.0.0',\n  'thrift_port': '0',\n  'thrift_threads': '10'}\n# now added \"foo = counter(default='asdf') to the service\n> ./sparts/gen/fb303/FacebookService-remote -H localhost:33333 -f getOptions\n{ 'dryrun': 'True',\n  'foo': 'asdf',\n  'level': 'INFO',\n  'tasks': '__None__',\n  'thrift_host': '0.0.0.0',\n  'thrift_port': '33333',\n  'thrift_threads': '10'}\n> ./sparts/gen/fb303/FacebookService-remote -H localhost:33333 -f setOption foo qewr\nNone\n> ./sparts/gen/fb303/FacebookService-remote -H localhost:33333 -f getOptions\n{ 'dryrun': 'True',\n  'foo': 'qewr',\n  'level': 'INFO',\n  'tasks': '__None__',\n  'thrift_host': '0.0.0.0',\n  'thrift_port': '33333',\n  'thrift_threads': '10'}\n```\n\n I spent some time trying to get demo/dbus_service.py to launch on my machine (laptop osx 10.9.2) and got to the point where this was happening:\n\n```\n> PYTHONPATH='/Users/joeldodge/joel_sparts:/Users/joeldodge/joel_sparts/externals/thrift/lib/py/src' python demo/dbus_service.py\nDynamic session lookup supported but failed: launchd did not provide a socket path, verify that org.freedesktop.dbus-session.plist is loaded!\nERROR:MyDBusService:Unexpected Exception during init\nTraceback (most recent call last):\n  File \"/Users/joeldodge/joel_sparts/sparts/vservice.py\", line 204, in _runloop\n    instance._startTasks()\n  File \"/Users/joeldodge/joel_sparts/sparts/vservice.py\", line 118, in _startTasks\n    t.start()\n  File \"/Users/joeldodge/joel_sparts/sparts/tasks/dbus.py\", line 144, in start\n    self.bus = dbus.SessionBus(private=True)\n  File \"/Users/joeldodge/joel_sparts/sparts-venv/lib/python2.7/site-packages/dbus/_dbus.py\", line 211, in __new__\n    mainloop=mainloop)\n  File \"/Users/joeldodge/joel_sparts/sparts-venv/lib/python2.7/site-packages/dbus/_dbus.py\", line 100, in __new__\n    bus = BusConnection.__new__(subclass, bus_type, mainloop=mainloop)\n  File \"/Users/joeldodge/joel_sparts/sparts-venv/lib/python2.7/site-packages/dbus/bus.py\", line 122, in __new__\n    bus = cls._new_for_bus(address_or_type, mainloop=mainloop)\nDBusException: org.freedesktop.DBus.Error.NoMemory: Not enough memory\nINFO:MyDBusService:Received graceful shutdown request\nDEBUG:MyDBusService:VService Active.  Awaiting graceful shutdown.\nTraceback (most recent call last):\n  File \"demo/dbus_service.py\", line 16, in <module>\n    MyDBusService.initFromCLI()\n  File \"/Users/joeldodge/joel_sparts/sparts/vservice.py\", line 187, in initFromCLI\n    instance = cls.initFromOptions(ns, name=name)\n  File \"/Users/joeldodge/joel_sparts/sparts/vservice.py\", line 197, in initFromOptions\n    return cls._runloop(instance)\n  File \"/Users/joeldodge/joel_sparts/sparts/vservice.py\", line 209, in _runloop\n    instance._wait()\n  File \"/Users/joeldodge/joel_sparts/sparts/vservice.py\", line 165, in _wait\n    t.stop()\n  File \"/Users/joeldodge/joel_sparts/sparts/tasks/dbus.py\", line 158, in stop\n    del(self.dbus_service)\nAttributeError: dbus_service\n```\n\nI guess I could try to run it on a centos box in EC2 but before I do that could you give me some instruction on how I'd test it? While familiar with thrift rpc I don't know anything about dbus.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39687487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39735874", "body": "awesome! I don't need the getOption fix any time soon, just needed to hack it for manual testing. should I close this PR?\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39735874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39743154", "body": "@fmoo here's what I'm doing in my service:\n\nread some messages off an aws sqs queue (up to 10 at a time) with a PeriodicTask (interval 0). Iterate through them and use a blocking put on my QueueTask's queue. That iteration of adding to the queue will only go as fast as the workers can pull stuff off. If the workers get backed up, I'll have up to 10 messages in memory but won't pick up anymore from sqs till I have capacity to process them. The real choke point is a downstream api call to a system that can get way bogged down.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39743154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39796272", "body": "@fmoo I don't see this commit in master, were u gonna merge?\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39796272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39811121", "body": "got it (that's exactly what I'm doing with it). I thought you meant something scarier\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39811121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40027068", "body": "This is ok with me.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40027068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40745641", "body": "perfect, just ignorance on my part. will 0.5.0 be available on pypi soonish?\n\nOn Thu, Apr 17, 2014 at 8:43 AM, Peter Ruibal notifications@github.comwrote:\n\n> Does that work? Did I break something on master?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/fmoo/sparts/issues/74#issuecomment-40728669\n> .\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40745641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/42562613", "body": "@fmoo I added a couple of commits with the last one being probably the simplest direct test of `setTaskOption`. I joined #sparts so feel free to ping me there if that would be easier\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/42562613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/facebook/sparts/comments/6045511", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/comments/6045511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/11101423", "body": "not too sure how this plays with the stuff in `BaseSpartsTestCase.tearDown` but since you wrote it @fmoo I figured I'd run it by you first. If you're not sure either then I'll investigate more fully. In any case, I ran these tests in a virtualenv w/out unittest2 installed and they seemed to work as expected\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/11101423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/11365550", "body": "will do\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/11365550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/11365555", "body": "will do. deadlocks how?\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/11365555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "biesnecker": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/sparts/issues/comments/45206526", "body": "Supporting all of the Periodic use cases would be hard (fractional seconds, and periods that don't divide evenly into a 60/3600/86400/etc seconds are the two that come to mind). The other way around, though, would be relatively straightforward -- the challenge would mostly be dynamically deciding how long to sleep on every iteration. \n\nI think this is where I'm going to start forking and pulling :-)\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/45206526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "agargiulo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/sparts/issues/comments/46621660", "body": "Not sure if this should be lumped in here, or if it's worth looking into at all as a separate issue, but there isn't a way to pass flags to argparse at the moment. For example:\n\n``` python\nfoo = option(\n    name='foo',\n    help='some option'\n)\n```\n\nwill produce the following help message:\n\n```\noptional arguments:\n  --foo FOO        some option\n```\n\nbut there isn't a way to have:\n\n``` python\nfoo = option(\n    flags=['-f', '--foo'],\n    help='some option'\n)\n```\n\nto produce:\n\n```\noptional arguments:\n  -f, --foo FOO\ufeff\ufeff    some option\n```\n\nThat being said, you can't have `-p, --pidfile` only `--pidfile` right now if that's important to you.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/46621660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/46886427", "body": "The latest two commit should fix most (if not all) of the comments you left me. There appear to be some odd things happening with daemonize. \n1. The PID file isn't being removed, but there is [code](https://github.com/thesharp/daemonize/blob/master/daemonize.py#L53-L59) in `exit()` that should be calling `os.remove()`. It appears that the logging is happening, but the file is still there in the end.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/46886427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/46935714", "body": "wow, github _really_ didn't like the force push all that much.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/46935714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/51092294", "body": "``` python\nERROR:sparts.tasks:Error creating task, FooTask\nTraceback (most recent call last):\n  File \"/usr/local/venv/lib/python2.7/site-packages/sparts/vtask.py\", line 289, in init\n    t.initTask()\n  File \"foo.py\", line 22, in initTask\n    super(FooTask, self).initTask()\n  File \"/usr/local/venv/lib/python2.7/site-packages/sparts/tasks/queue.py\", line 35, in initTask\n    super(QueueTask, self).initTask()\n  File \"/usr/local/venv/lib/python2.7/site-packages/sparts/vtask.py\", line 57, in initTask\n    for i in xrange(self.workers):\nTypeError: an integer is required\n```\n\n``` python\nclass FooTask(QueueTask):\n    WORKERS = 1\n\n    def initTask(self):\n        super(FooTask, self).initTask()\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/51092294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/51100312", "body": "For reference, arguments passed into `PeriodicTasks` work fine\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/51100312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/51112002", "body": "Using an underscore works fine, actually.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/51112002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/317947028", "body": "I wonder why the tests fail when all you changed was the README", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/317947028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/facebook/sparts/comments/6782000", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/comments/6782000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "zhangxiaang": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/sparts/issues/comments/122641743", "body": "@chantra my 'six' version is lower than 1.5\nthen how can i update 'six' to 1.5 or Higher\uff1f\nthank u very much!\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/122641743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/122643990", "body": "..thanks!!!\ni have resolved it by \n\n```\nsudo pip install six --upgrade\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/122643990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694414", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694415", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694416", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694418", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694420", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694421", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694423", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694426", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694427", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694429", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694431", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694432", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694432/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694433", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694435", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694436", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694437", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694438", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694439", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694440", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694442", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694443", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694445", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/127694445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ryanrhee": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/sparts/issues/comments/146289542", "body": "Tornado works with Py3.\nThere's also Py3 Thrift.\nI can see an argument for dropping Twisted support.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/146289542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/146300631", "body": "oh it may just be fbthrift - not sure.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/146300631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "facebook-github-bot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/sparts/issues/comments/317250188", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla. **If you are contributing on behalf of someone else (eg your employer)**, the individual CLA may not be sufficient and your employer may need the corporate CLA signed.\n\nIf you have received this in error or have any questions, please contact us at cla@fb.com. Thanks!", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/317250188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}}}}