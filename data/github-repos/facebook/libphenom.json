{"_default": {"1": {"teraPacket": {"issues": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/84", "title": "compile error with the latest libphenom and concurrencyKit", "body": "I got the following compile error when doing `./autogen.sh; ./configure; make`.\r\nI did a git clone on this repo and the github repo on concurrencyKit.\r\n\r\nAny ideas?  Thanks.\r\n```\r\nlibtool: compile:  gcc -DHAVE_CONFIG_H -Ithirdparty/ck/include -Iinclude -I. -DPHENOM_IMPL=1 -Werror -m64 -fno-omit-frame-pointer -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 -D__x86_64__ -I/usr/local/include -std=gnu1x -pedantic -Wall -Wextra -Wno-declaration-after-statement -W -Wundef -Wendif-labels -Wshadow -Wpointer-arith -Wcast-align -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes -Wno-nested-externs -Winline -Wdisabled-optimization -fstrict-aliasing -pipe -Wno-parentheses -O2 -g -gdwarf-2 -MT corelib/libphenom_la-counter.lo -MD -MP -MF corelib/.deps/libphenom_la-counter.Tpo -c corelib/counter.c  -fPIC -DPIC -o corelib/.libs/libphenom_la-counter.o\r\nIn file included from include/phenom/counter.h:81:0,\r\n                 from corelib/counter.c:17:\r\ninclude/phenom/defs.h:368:41: error: static assertion failed: \"counter_iterator_definition_bad\"\r\n #  define ph_static_assert(expr, msg)   _Static_assert(expr, #msg)\r\n                                         ^\r\ncorelib/counter.c:170:1: note: in expansion of macro 'ph_static_assert'\r\n ph_static_assert(sizeof(struct ph_counter_scope_iterator)\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/84/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bfontaine": {"issues": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/82", "title": "Tag a (stable) release?", "body": "Hello,\n\nIt\u2019d be very helpful if you could tag a release so we know the code there is stable and can be used. I work on [Homebrew](http://brew.sh/) and we provide a way to install `libphenom` but we rely on the git HEAD so can\u2019t provide checksums and can\u2019t ensure users will always get the same code depending on the time they install it, making it harder for us to debug issues.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/82/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kev009": {"issues": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/48", "title": "tests/timer failures on FreeBSD", "body": "I haven't dug into this yet.  I'm not getting these consistently, sometime the run will be successful.  The affinity failed message is always present (\"nbio\" and \"job\" in the message were added by me).\n\n<pre>\n1387793688.893 err: /1 nbio failed to set thread 0x80240e200 affinity\n1387793688.893 err: /2 nbio failed to set thread 0x80280e200 affinity\n1387793688.893 err: /3 nbio failed to set thread 0x802c0e200 affinity\n1387793688.894 err: /4 nbio failed to set thread 0x80300e200 affinity\n1387793688.894 err: /5 nbio failed to set thread 0x80340e200 affinity\n1387793688.894 err: /6 nbio failed to set thread 0x80380e200 affinity\n1387793688.894 err: /7 nbio failed to set thread 0x803c0e200 affinity\n1387793688.894 err: /8 nbio failed to set thread 0x80400e200 affinity\n1387793688.894 err: /9 nbio failed to set thread 0x80440e200 affinity\n1387793688.894 err: /10 nbio failed to set thread 0x80480e200 affinity\n1387793688.894 err: /11 nbio failed to set thread 0x804c0e200 affinity\n1387793688.895 err: dns/13 job failed to set thread 0x80540e200 affinity\n1387793688.895 err: dns/12 job failed to set thread 0x80500e200 affinity\n1387793688.893 err: phenom:sched/0 nbio failed to set thread 0x80209a200 affinity\n#     Failed test (tests/timer.c:record_tick() at line 38)\n#     Failed test (tests/timer.c:record_tick() at line 38)\n# Looks like you failed 2 tests of 8.\n# ELAPSED: 749ms\n\n1..8\nok 1 - PH_OK == ph_nbio_init(0)\nok 2 - PH_OK == ph_job_init(&timer)\nok 3 - PH_OK == ph_job_set_timer_at(&timer, last_tick)\nok 4 - 100ms resolution: diff=106\nok 5 - 100ms resolution: diff=106\nnot ok 6 - 100ms resolution: diff=213\nnot ok 7 - 100ms resolution: diff=214\nok 8 - PH_OK == ph_sched_run()\n</pre>\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/48/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/facebook/libphenom/commits/ee340daf0c3e3f9cccd19ec1d0d89330aae14aee", "message": "Make _XOPEN_SOURCE definition agree with _POSIX_C_SOURCE for POSIX 2008 env\n\nTreat Solaris as POSIX 2001 as their check is not additive\n\nAddresses https://github.com/facebook/libphenom/pull/47"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/be110fbfa83bb997e0fa5bf08325f804e4300ee6", "message": "Fix a couple unused param warnings found by clang on FreeBSD"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/26933282", "body": "I've been brainstorming some uses of libphenom that I can use in anger.  Will get back to you :)\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/26933282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31049927", "body": "CLA signed\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31049927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31104522", "body": "Not sure this is needed after https://github.com/facebook/libphenom/pull/47.  I will recheck on my FreeBSD 9.2 box tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31104522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31110849", "body": "Actually AI_V4MAPPED should probably just go away on all platforms.. but I need some sleep to make sure I'm not missing something.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31110849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31141488", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31141488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31141792", "body": "We could push some of the other ifdefs at the top of this file out to autoconf with AC_USE_SYSTEM_EXTENSIONS.  Probably do it as defs.h as an AC_CONFIG_HEADER if we want to install public env requirements.  What do you think?\n- http://groups.crossroads.io/groups/crossroads-dev/messages/topic/63rLvX7axltxCZZFAhQiQF\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31141792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31142182", "body": "Seeing it on HW too with Westmere timers.  It's easy to trigger by making all the cores busy.\n\nIt does seem to be hitting the code you identified.  Any intuition on a fix?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31142182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31142507", "body": "I agree in principle, I'd like to see ck become a first class lib.\n\nI could do a --with-system-ck using autoconf for distros and people properly packaging if you want to keep the vendoring until the API stabilizes a bit.  I'll ping Samy and see what the weather map looks like to see if this is necessary.\n\n76056ca should be useful regardless.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31142507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31143763", "body": "After some more thought I'd rather spend effort on unbundling.  Can you come up with a punch list of any fixes needed by the ck build?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31143763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31146888", "body": "Agreed.  Closing, I will investigate the other change with low priority.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31146888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31153772", "body": "Documenting for others, when running https://gist.github.com/kev009/8106940 I see at least 1 ms precision using kqueue which seems to match OS X using timerwheel.  Looking into the second bullet.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31153772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31894053", "body": "I'm working on porting a basic example like https://github.com/nikhilm/uvbook/blob/master/code/uvwget/main.c to libphenom.  I'll add a link to my results here when ready.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31894053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/40864812", "body": "I think this can just be closed.  I'll submit more PRs if I find anything in the other libs that I can't live without.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/40864812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/40931740", "body": "The top level readme still refs cares.  Definitely interested in getdnsapi at some point.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/40931740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/58716997", "body": "@erikarn it looks a lot better in the happy case, within 1ms.\n\n@wez in some unhappy case, it seems to be getting chucked into a different schedule (see final run).  Any thoughts?\n\n```\nFreeBSD kev-ws-aurora 11.0-CURRENT FreeBSD 11.0-CURRENT #0 r272152: Thu Sep 25 22:00:23 MST 2014     root@kev-ws-aurora:/usr/obj/usr/src/sys/AURORA  amd64\n\n1..8\nok 1 - PH_OK == ph_nbio_init(0)\nok 2 - PH_OK == ph_job_init(&timer)\nok 3 - PH_OK == ph_job_set_timer_at(&timer, last_tick)\nok 4 - 100ms resolution: diff=104\nok 5 - 100ms resolution: diff=106\nok 6 - 100ms resolution: diff=106\nnot ok 7 - 100ms resolution: diff=210\nok 8 - PH_OK == ph_sched_run()\n1..8\nok 1 - PH_OK == ph_nbio_init(0)\nok 2 - PH_OK == ph_job_init(&timer)\nok 3 - PH_OK == ph_job_set_timer_at(&timer, last_tick)\nok 4 - 100ms resolution: diff=104\nok 5 - 100ms resolution: diff=101\nok 6 - 100ms resolution: diff=103\nok 7 - 100ms resolution: diff=107\nok 8 - PH_OK == ph_sched_run()\n1..8\nok 1 - PH_OK == ph_nbio_init(0)\nok 2 - PH_OK == ph_job_init(&timer)\nok 3 - PH_OK == ph_job_set_timer_at(&timer, last_tick)\nok 4 - 100ms resolution: diff=106\nok 5 - 100ms resolution: diff=106\nok 6 - 100ms resolution: diff=103\nok 7 - 100ms resolution: diff=100\nok 8 - PH_OK == ph_sched_run()\n1..8\nok 1 - PH_OK == ph_nbio_init(0)\nok 2 - PH_OK == ph_job_init(&timer)\nok 3 - PH_OK == ph_job_set_timer_at(&timer, last_tick)\nok 4 - 100ms resolution: diff=106\nok 5 - 100ms resolution: diff=107\nok 6 - 100ms resolution: diff=106\nok 7 - 100ms resolution: diff=100\nok 8 - PH_OK == ph_sched_run()\n1..8\nok 1 - PH_OK == ph_nbio_init(0)\nok 2 - PH_OK == ph_job_init(&timer)\nok 3 - PH_OK == ph_job_set_timer_at(&timer, last_tick)\nok 4 - 100ms resolution: diff=107\nok 5 - 100ms resolution: diff=107\nok 6 - 100ms resolution: diff=106\nnot ok 7 - 100ms resolution: diff=213\nok 8 - PH_OK == ph_sched_run()\n\n\nFreeBSD kev-ws-aurora 11.0-CURRENT FreeBSD 11.0-CURRENT #0 r272902: Fri Oct 10 13:22:55 MST 2014     root@kev-ws-aurora:/usr/obj/usr/src/sys/AURORA  amd64\n\n\n$ ./timer.t\n1..8\nok 1 - PH_OK == ph_nbio_init(0)\nok 2 - PH_OK == ph_job_init(&timer)\nok 3 - PH_OK == ph_job_set_timer_at(&timer, last_tick)\nok 4 - 100ms resolution: diff=100\nok 5 - 100ms resolution: diff=100\nnot ok 6 - 100ms resolution: diff=136\n#     Failed test (tests/timer.c:record_tick() at line 38)\nnot ok 7 - 100ms resolution: diff=63\n#     Failed test (tests/timer.c:record_tick() at line 38)\nok 8 - PH_OK == ph_sched_run()\n\n1..8\nok 1 - PH_OK == ph_nbio_init(0)\nok 2 - PH_OK == ph_job_init(&timer)\nok 3 - PH_OK == ph_job_set_timer_at(&timer, last_tick)\nok 4 - 100ms resolution: diff=100\nok 5 - 100ms resolution: diff=100\nok 6 - 100ms resolution: diff=100\nok 7 - 100ms resolution: diff=99\nok 8 - PH_OK == ph_sched_run()\n\n1..8\nok 1 - PH_OK == ph_nbio_init(0)\nok 2 - PH_OK == ph_job_init(&timer)\nok 3 - PH_OK == ph_job_set_timer_at(&timer, last_tick)\nok 4 - 100ms resolution: diff=100\nok 5 - 100ms resolution: diff=99\nnot ok 6 - 100ms resolution: diff=139\n#     Failed test (tests/timer.c:record_tick() at line 38)\nnot ok 7 - 100ms resolution: diff=160\n#     Failed test (tests/timer.c:record_tick() at line 38)\nok 8 - PH_OK == ph_sched_run()\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/58716997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/60012705", "body": "@erikarn I think the other failures are related to load/power management.  Not sure if there is a bug report or feature request there?\n\nBut I think this can be closed out for phenom.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/60012705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/127775064", "body": "worst bot evar\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/127775064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/comments/5289555", "body": "\"The equivalent to this should also be applied to the other nbio implementations.\"\nShould there be issues created for this?  Seems like an easy thing to lose track of.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/comments/5289555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "wez": {"issues": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/27", "title": "add libcurl integration using curl_multi_socket_action", "body": "Make it easy to create a multi-handle that is wired up to our event handling.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/27/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/26", "title": "profile and optimize find_record", "body": "Throwing this one out there for folks that want to dive in.\n\nIn the bufq API we have `ph_bufq_consume_record` which searches the bufq for a matching record delimiter.\n\nFor many internet protocols this delimiter is CRLF.  For many other applications, we're likely to be looking for LF.\n\nThere are a couple of optimizations that could be investigated.\n- Can we accelerate the `memmem` call using the `sse3_memchr` function from here? http://repnop.org/carte/snippets/simd/.  The performance.data file indicates that this performs consistently better than the darwin libc.  To adopt this, we'd need to detect sse3 either at runtime or compile time\n- are there specializations of `sse3_memchr` that can be made for detecting CRLF?\n- are there specializations of string matching algorithms with a constant, known needle that we could use?\n- is there a more efficient way to match needles across the \"straddle\" point in cases where the delimiter straddles discontiguous memory regions?\n- for long records, we make repeated calls and search across the same memory regions repeatedly.  We can surely cache the last searched offset and improve efficiency.  We'd need to make sure that we invalidate this offset in the appropriate circumstances (mostly when we've consumed past that point)\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/26/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/1", "title": "Add BSER load/dump support for variants", "body": "BSER is a local-IPC only serialization format for dynamic data:\nhttps://github.com/facebook/watchman/blob/master/BSER.markdown\n\nAdding support for this to Phenom requires adding load/dump APIs similar to the JSON load/dump API.\n\nIt also means adding API support for \"Array of Templated Objects\".  In Watchman, this is achieved simply by storing the template definition as a special property of the object type.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/1/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/facebook/libphenom/commits/b93da641dd8f678b49692bcdfb6407bea7bdbca3", "message": "Bump up minimum CK version to 0.5.0"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/8bb10c25bbcb8fc68aa67e949399c84aa1e93050", "message": "mechanical change to allow compilation with CK 0.5.x"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/c371263ec2df0d485a2c5e0bbefda2a94c89f707", "message": "linting: Default to pwd if the .git dir is missing\n\nThe cause of the build failure in https://github.com/facebook/libphenom/issues/72\nis that the brew build checks out the repo without the .git dir.\n\nThe linter is looking to make paths relative to the root, and it was\nfinding the .git dir to determine where the root was.  Without the git\ndir being present, it ends up being relative to `/` and fails the build\nbecause the include guards don't match that scheme.\n\nIf the .git dir is missing, we'll now just assume that we're being run\nfrom the root, which is the only way that this script is run in\nlibphenom."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/3da7cc622b6a33a0c6522e826804953b67bb36a1", "message": "Re-point travis to the CK repo"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/01c39330cd856b8ab05a3799ebbc30a34994e09a", "message": "Make epoll_ctl errors fatal errors\n\nWe see this every so often and they result in a bad state, so it is\nbest to terminate."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/4eebc82ec0969ed3c9852bd50cd3dd1af150cecf", "message": "libphenom: test and fix bufq ad-hoc size buf\n\nSummary:\nThe bug was caused by calling `select_size` to determine which\nof the pre-defined buffer buckets to use and passing the result down\nto the buffer constructor, which itself calls `select_size`.\n\nIf the desired buffer to be appended is larger than 64k, we'll try to use a\nsingle ad-hoc buffer that exactly matches the size to be appended.  In this\ncase, `select_size` will return zero.\n\nWhen `select_size` is called with 0 as the size, it will pick a default size of\n8192 bytes.  When calling `ph_bufq_append` with a len > 64k we actually end up\nallocating 8192 bytes instead and end up writing only 8192 but recording the original size,\nand subsequently read off the end of the buffer space :-(\n\nIn the environment where this was detected, ASAN didn't catch the invalid\nmemory accesses.\n\nThe resolution is to simply pass the length down to the buf constructor\nfunction; the intermediate assignment to the `buflen` is not needed and is a\nremnant of an earlier incarnation of this function.\n\nTest Plan:\nAdded a unit test to verify memory integrity with a range of buffer sizes.\n\n```\nbrew install concurrencykit  # or otherwise install locally\n./autogen.sh\n./configure\nmake check\n```"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/18cefb23a97befdccede96a88a1cd6b48cef253b", "message": "Remove ares from pkg-config deps"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/93f9015d2aaa1a7253bbbd3e9fa9c2aa8a3c02e6", "message": "Fixup install rule for ck unbundling\n\nAlso add `make install` to travis to try to catch this sort of issue\nfaster in the future."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/d929042db682b5d297df1e417b7dbc162f45e3af", "message": "update readme about CK dependency"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/2203f9e3a3de1b94c0b5db0bb217c25a92db9bb8", "message": "Fixup travis build for CK upgrade\n\nBump the CK version that we pull in for travis builds.\n\nCan't use unlikely in this code branch, because the code branch is already\nunlikely and the code size would grow:\n\n```\nthirdparty/ck/include/ck_ring.h:243:1: error: inlining failed in call to 'ck_ring_enqueue_spmc': call is unlikely and code size would grow [-Werror=inline]\ncorelib/job.c:539:12: error: called from here [-Werror=inline]\n```"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/95f47d376ce6663ffd9932452a5d7417fdd64771", "message": "remove ares from travis build config too"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/e2894dff7ae11cdc3a18dd6d818de370b664844f", "message": "Remove libcares support\n\nSee https://github.com/facebook/libphenom/issues/57 for context\n\nThe future is most likely http://getdnsapi.net/"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/6e88a904cf0fae84d2d0c81ca123a4fc9702f3ae", "message": "Fix up travis build for unbundled CK\n\nSince we don't bundle the library, we need to fetch and build it as part\nof the travis run."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/bc0153bff605b52f6c2301fddf652dcef48ca3b0", "message": "Allow listeners to opt out of SSL_CTX_free for ph_sock_t\n\nSummary: SSL server contexts are relatively more expensive to create\nthan client contexts because they have to load certificates, keys and\nperhaps also DH parameters for PFS.  The unilateral SSL_CTX_free in\nsock_dtor forces a more expensive (and likely blocking!) operation for\nthese sorts of contexts.\n\nThis diff allows disabling the the SSL_CTX_free; when disabled, the\napplication is solely responsible for managing the lifetime of the\nSSL_CTX associated with the SSL object that was enabled on the sock\nobject.\n\nI've modified `examples/echo.c` to show how to use it in this fashion\nfor listeners.  The `sclient` example code remains unchanged.\n\nAddresses https://github.com/facebook/libphenom/issues/58"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/5ba4197e20594e9755f81b67a64a639757d8e4db", "message": "Make it clearer that you need defs.h first\n\nAddresses https://github.com/facebook/libphenom/pull/55"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/af1a10049cc43dc62901c904f23108518a6566c7", "message": "disable fini routines by default\n\nAdded an --enable-placate-valgrind configure switch to turn them back\non.\n\nThey're problematic (read: unsafe) if you have C++ code that triggers\nduring global destruction and calls into libphenom.  They only exist\nso that valgrind doesn't report leaks, so let's turn them off by\ndefault."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/202b74dcc8eb4a64ad55256a7601d65dce5b892b", "message": "improve handling in a couple more edge cases\n\nNo reason to roll back a partial operation on a bufq when the API\nprovides a mechanism for indicating a partial.\n\nTreat EINTR and EINPROGRESS similarly to EAGAIN for fd operations."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/f02e0c00aa14946bed7846929d7f7bb6ff5e3774", "message": "avoid looping on error\n\nI saw some cases where we'd get stuck looping after hitting a broken\npipe.  If we detect an error, avoid triggering the speculative\nread/write logic that was recently added for ssl enabled sockets"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/a2792b97295a80b0af428e3d38ea47a4ee5c267d", "message": "fix my lint error"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/59d630992d684b4c3e6fcdf7c83aac1f9dae7cb1", "message": "handle more wakeup edge cases\n\nDo a better job at handling edge cases where we can try to operate\non a job that has been scheduled for deferred free.\n\nWe do this by performing more sanity checks for the pending-free state\nto avoid enqueuing more work that will likely trigger post-free\n\nNote that this was deployed in concert with setting\n$.nbio.max_per_wakeup = 1 to reduce the chances that we try to operate\non a stale view of the event state (the wakeups were across threads)."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/7d90f782d045c8c049eaa3cf5560e070941e916a", "message": "Remove hyperthreading check on Linux\n\nThis has been made obsolete by the thread affinity controls\nfor thread pools, and in fact gets in the way of managing\naffinity directly because of the way we mod the assignment\nover the number of detected physical cores."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/6439a96646c74e86ed90c97bebf53f7faa8139dd", "message": "sock: fixup stuck SSL sessions, tidy up free and affinity\n\n* For async connects, round-robin over the emitters for the completion\n  callback for better distribution.  You may use the new\n  ph_thread_emitter_affinity() function to obtain an affinity value\n  for the currently executing thread.  This is useful in cases where\n  you create a job for a connected socket and want to maintain\n  affinity with the connection callback thread (this is usually\n  desirable in order to minimize the chance that you schedule the\n  same fd in two different epoll instances on different threads)\n\n* For longer lived SSL sessions and/or systems under load with a\n  large number of concrrent SSL sessions, we observed that we could\n  get stuck pending read with partial data in the read buffer.\n  The data was actually read and staged somewhere in the SSL internals.\n  Avoid getting stuck by performing a speculative read after a dispatch;\n  if the read buffer size changed then we make another pass through\n  the dispatch callback.  This looks fugly and can bias towards\n  hot sessions, but works well in practice thus far."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/c0d37781a7cd6b1cd36f532ae2e317259ee501ad", "message": "extend epoch around the full set of events from epoll\n\nThe observation was that a mixture of timer and fd events coming back in\na batch would operate on the same job; one would cause the underlying\ndata to be ph_job_free()'d and reaped by the time the second one was\ndispatched.\n\nThe equivalent to this should also be applied to the other nbio\nimplementations.\n\nAlso: fix missing mask assignment in the removal case."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/ce09a6e82092201dd4e41e8953da45354917da96", "message": "avoid fault when printf'ing a null ph_string_t"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/e9011b35593f54fcf3e8684b69ce77509e2e130d", "message": "add assertion to catch a double ph_job_free()"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/0e79792700cd3c4392a30e004b07758be50857d7", "message": "prevent invalid free when using string slices\n\nI think I must have thought that the INVALID value was -1... :-/\n\nWithout this fix, the revised unit test will fault"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/b8b394543fc56201a3d7a11e5f9a03eb3af7f0de", "message": "fixup osx and solaris builds to match epoll changes\n\nMoral equivalent of the epoll.c changes in\n37f54141e7739f8825c751708fd04f5974fb53ed\n\nWithout this, iobasic.t will fail on OSX.  Solaris doesn't seem to care,\nbut we should make the equivalent change for consistency."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/e486ef426f1af668869900e982d13d314b45cccb", "message": "Be more aggressive at applying nbio masks\n\nIf we are the target emitter, there is no reason to defer applying\ntimer or epoll settings because we won't see the results of these\nchanges until we unwind back up the stack; the purpose of deferring\nchanges is so that the target nbio or thread pool won't start until\nafter the current dispatch has unwound enough such that we avoid\nbugs where the target thread completes before the originating thread\nhas finished revising its state to receive completion notification."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/588925f05328ccf8b45b07bb0156dffd43c7a2c0", "message": "Downgrade ssl errors to INFO level\n\nA surprising number of SSL/TLS enabled services on the public internet\nhave broken configurations (ranging from invalid certs, to \"bad\" cipher\nselections).\n\nAvoid making noise in the log stream when these are encountered.\n\nWe probably should have a way to tap into the underlying SSL error stack\nin case there are interesting things that could be done at a high layer\nin the stack, but for most practical purposes all we care about is that\nan error was found."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/7bf51e4465f47b22c41c64108f803cf2c2a9937c", "message": "For short writev results, update bufq rpos correctly\n\nWe were moving rpos to the end unconditionally.  Is situations where\nthe data is large and a short writev result is encountered, we'd believe\nthat we had sent all the data that was there when we actually had not.\n\nManifestations would be missing chunks of data in the worst case, or\nstalled sessions in the best case (due to protocol mismatch)"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/b0eff23ae652e4205fd584bc58e37088c23c06f4", "message": "Fixup some lint checks\n\nThese weren't visible on my other system"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/37f54141e7739f8825c751708fd04f5974fb53ed", "message": "Conservative edge case hunt\n\nI've been hunting down some weird edges this past week.\nThis commit is a bit of a lump of multiple pieces thrown together;\nsorry.\n\njob.c/common.c: Mildly gross check to see if we are pending apply or\npending wakeup in the deferred free routine.  If we are, re-defer and\nfree later.\n\nmemory.c: In tracking down what turned out to be a memory corruption\nissue in a client of the library, needed to see which memtypes were\nat fault in some of our abort cases, so introduce memory_panic as a\nmeans for showing them.  The memtype paramter is typically optimized\naware making it impossible to debug sanely via coredump.  We can't\nsimply use ph_panic() in here as this may need to allocate memory\nand cause a double fault.\n\nepoll.c: don't inspect kmask as a means to avoid epoll_ctl syscalls.\nRelax the panic condition.  In the hunt this past week, it looked\nlike were not applying our changes to epoll in a timely fashion.\nThis change raises the volume of epoll_ctl syscalls that we make as\na conservative measure to ensure that the correct state is applied.\nIt may be that we don't need to be so aggressive, but for now, we\nknow that this results in correct operation.\n\nsocket.c: be more aggressive at pumping data into the appropriate bufqs.\nWe saw what looked like stalled sessions (perhaps due to the reasons\nmentioned above for epoll.c) so we wanted to ratchet things up a bit.\nAlso: when suspended, don't try to operate on bufqs when we get\nsignalled.\n\nssl_stream.c: if someone tries to use us after we've been closed,\nindicate an EBADF error rather than segv."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/6fcffba5a8f89f8b2bb3a6e509d0092a8bf0e376", "message": "Ensure that we remove a timer prior to manipulation\n\nIn some cases, I've seen the timerwheel cascade fault with an invalid\ntimer pointer.\n\nThe theory is that we're disabling but not removing some timers either\nat all, or in time for the cascade to trigger and then we get tripped up\nover our bad state.\n\nThis diff ensures that we remove the timer from its containing wheel\nbefore we either arrange to cancel to reschedule it out later."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/48bd43ddb8b156f4fd883eecf732c204048a1239", "message": "Fix false affinity error on FreeBSD\n\nIt was succeeding but we were claiming failure\n\nReported in https://github.com/facebook/libphenom/issues/48"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/77d29f26c4dfb22e5867ecbebf4b073eef487e0b", "message": "Remove usage of AI_V4MAPPED\n\nThis caused our tests to fail on FreeBSD and doesn't really add any\nvalue.\n\nAddresses https://github.com/facebook/libphenom/issues/49"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/c2f3484e3f6a9a4f01ad755bf1eb03d8e78753f6", "message": "add pending jobs counter to thread pools"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/a847705381a0c74efad34e8f356e2e212bf8ec69", "message": "add \"collector\" callbacks for idle threads\n\nDetails in the header docs.\n\nTested this by adding a collector to examples/echo and observing it\nget called every 5 seconds for the scheduler thread and dns threads.\n\nIf I connect to the echo server and interact with it, the collector\nfor the scheduler thread is delayed by my interaction before resuming\nevery 5 seconds."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/2771014b4178e116a82f8d66216aa5b0023dadb2", "message": "fix size calculation for hash tables\n\nAddresses https://github.com/facebook/libphenom/issues/44\n\nThe problem was that the compiler was producing int32_t sized results\nwhen figuring out sizes and offsets.  Combine this with a large number\nof elements (large enough to overflow 32-bits) and the table would be\nallocated smaller than we needed.\n\nThis solves the problem in the fewest keystrokes by promoting the\nsize of a couple of fields to 64-bit, but has the side effect of\nchanging the size of the hashtable struct."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/6f6c1a82fdc74e5d3446549e67498baacb93990f", "message": "Expand thread affinity support\n\nDetails on usage are in the docs.  This diff is mostly a fairly\nsimple refactor of the affinity setting routines and some parsing\nof configuration parameters."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/21e66657cc4ceb603bcb212c1221dfff36170eea", "message": "increase size of circular log buffer"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/fef94b26abbfb9745a00e828b72aec8f4c54afb9", "message": "coalesce pings when queueing affine function calls"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/7c83f8283659a7d051c107bbd368b6f36f124b34", "message": "gimli: show deferred items for threads in the trace"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/379c4fa762384e26ca6b12d049f92de06a8fe17c", "message": "timer: make sure emitters catch up their timers\n\nIf a dispatch takes longer than 100ms, an emitter will start to\nfall behind on timer dispatches.  Make sure we catch up each time\nwe dispatch a timer trigger."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/06f4e0a6d645f4e6df1deda2d202e30cf90c6b60", "message": "Add ph_nbio_queue_affine_func(), ph_job_wakeup()\n\nThis reinstate some of the affine dispatch functionality from an earlier\nincarnation of phenom.  This allows executing an application defined\ncallback function in the context of a specific emitter thread (selected\nusing the emitter_affinity value).\n\nA trivial example of its use is seen in examples/sclient.c where we\nread a line from stdin, mutate the state associated with a sock object,\nand then wake it up so that it can send out that data.\n\nAnother use case is scheduling a periodic job, but causing it to\ntrigger immediately in response to some other stimulus."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/52dd10aec41a17c8427c197b96fa214a93c4e3ab", "message": "add <phenom/feature_test.h> to detect configure time features\n\nThis is distinct from the generate bucket-of-HAVE_XXX stuff that\nwe accumulate in configure, because we want to be deliberate about\nwhat we put into the global C namespace"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/99206cff12129e8932c2e7aa550555b4b88cb6af", "message": "make libcares optional\n\nHad a couple of folks run into problems with this dependency, and it\nisn't so critical that this needs to be a hard requirement.\n\nAlso handle being built against older versions of the library such\nas those on Ubuntu 10.04.\n\nWill likely need to evolve a nicer feature test system for the headers\nto deal with this functionality not being present in the library."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/2864ff2250ed9ac8b344685215eb6a4418ba1fbd", "message": "make sure we remove our timer when we free a job\n\nWe've seen a couple of timer related faults; on further inspection,\nwe weren't ever explicitly removing a timer when we freed a job.\n\nThis amends ph_job_free to disable a timer at the point where the\nfree is deferred, and then remove the item from the wheel during the\ndtor (this latter is a blocking operation)."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/234de68a0147311d8893952fe4f10887945d2117", "message": "fun with stdio buffering"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/3370574d07bdddd3542ef51889aec13050cf5516", "message": "fixup stream.t on some platforms\n\nlibphenom.a isn't guaranteed to be present now that we're using libtool,\nso use aclocal.m4 instead (>300k)"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/49527e8bffc040ab025fbe0c8a69aafea9d75aa6", "message": "add gimli tracer module support\n\nMoves a couple of private types into internal headers and build a shared object\nthat the gimli glider debugger can load to extract more human readable\ninformation about a faulting process (see below for example of how it renders\nwhen run against the echo server example).\n\nSince the glider module itself uses libphenom, and the glider module has to be\na shared object, we also need to build a shared object for libphenom.\n\nThis requires the current HEAD version of gimli, but only if you enable gimli\nsupport during configure.\n\nAdds a circular log buffer so that we can capture some recent error state in\nthe trace files produced by gimli too.\n\n```\n$ glider `pgrep -x phenom:sched`\n\n...\n\nCOUNTERS\n                                   bytes  oom  allocs  frees\n              memory.ares.channel     88    0       1      0\n                memory.ares.query      0    0       0      0\n               memory.ares.socket      0    0       0      0\n                memory.buffer.16k      0    0       0      0\n                memory.buffer.32k      0    0       0      0\n                memory.buffer.64k      0    0       0      0\n                 memory.buffer.8k      0    0       0      0\n             memory.buffer.object      0    0       0      0\n              memory.buffer.queue      0    0       0      0\n          memory.buffer.queue_ent      0    0       0      0\n              memory.dns.addrinfo      0    0       0      0\n        memory.example.echo_state      0    0       0      0\n                 memory.hook.hook      8    0       1      0\n                memory.hook.unreg      0    0       0      0\n        memory.socket.connect_job      0    0       0      0\n           memory.socket.listener    656    0       2      0\nmemory.socket.resolve_and_connect      0    0       0      0\n               memory.socket.sock      0    0       0      0\n             memory.stream.string      0    0       0      0\n             memory.string.string     40    0       1      0\n           memory.threadpool.pool    832    0       1      0\n           memory.variant.variant      0    0       0      0\n\n                                   bytes  oom  allocs  frees  realloc\n       memory.ares.query_response      0    0       0      0        0\n               memory.ares.string      0    0       0      0        0\n              memory.buffer.vsize      0    0       0      0        0\n                memory.dns.string      0    0       0      0        0\n           memory.hashtable.table   3136    0       3      0        0\n                 memory.hook.head      0    0       0      0        0\n               memory.hook.string     19    0       1      0        0\n             memory.stream.stream      0    0       0      0        0\n        memory.threadpool.ringbuf   8480    0       2      0        0\n             memory.variant.array      0    0       0      0        0\n              memory.variant.json      0    0       0      0        0\n\n                                   dispatched  timer_ticks  timer_busy\n                          iosched         120          118           0\n\n                                   dispatched  consumer_sleep  producer_sleep\n                   threadpool.dns           0               6               0\n\nRECENT LOGS\n1384727716.988 err: phenom:sched/0 will listen on [::]:8080\n```"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/5c1795401d62d9d259a9bee266a517934621ac95", "message": "Allow overriding the PYTHON at make time\n\nThis is useful in some automated build environments where we are\nsensitive to python versions and where we don't care about the lint\nresults."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/716adb01aef29a17fd489e8cb4ae8864ededcee7", "message": "Add test for bufq straddle when searching for delimiters\n\nAnd fix bug..."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/852b19faecccecc667d99c09b990a8dc82485252", "message": "tidy up return values for this ares call"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/bc9b8bd9d22d94813a86978d14e3206baf2f03a7", "message": "fixup string stream seek position\n\nTwo issues addressed here:\n\n* json dumping to a string was overwriting rather than appending to the\n  stream\n* Boundary check for string streams meant that you couldn't set the seek\n  position to append"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/10dbc30d2c6e4a5f730eb48b4707baa0a54b88c1", "message": "fix issue with stack -> heap growable strings\n\nWhoops; we weren't copying the original buffer over when we were\ndoing our initial allocation.\n\nThis meant that we'd end up with random string contents if the\nstring was non-zero in length prior to the append that put us\nover the stack allocation size."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/09944d8cf1e83efbcaf275142c3b1bc3af7ecbe8", "message": "Fixup constant name for docs"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/af1e7dd6dadd20a8f12bf381a07ec5b53e5d5d1e", "message": "Fix build on Mavericks\n\n(Suppress more deprecation stuff in the openssl headers)"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/7081dc3c00d7e6acf12fe6bddcf0176ea3e93ae9", "message": "whoops, one more pthread_getname_np\n\nhttps://github.com/facebook/libphenom/issues/38"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/143bd9b5ea5e78ecd100a96792d0e44bccbb5750", "message": "Detect pthread_getname_np in configure\n\nAddresses https://github.com/facebook/libphenom/issues/38"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/50be7bd7004844111174b840e7fd05096f7d9e97", "message": "Raise default max dns timeout to 60 seconds\n\n5 was too short, leading to spurious false timeouts on successive\nqueries."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/86a69d878b835f94307ef9c19f6f836047410c96", "message": "actually reap after idling in worker threads\n\nWe don't exit this loop unless we have a job or unless we're shutting\ndown, so we should reap inside it."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/3d2ac590c257b740a30c5d3a77deb559dbedf7c4", "message": "Fix an issue with deferred memory reclamation\n\nThread pool workers would only poll for reclamation while busy.\nIf a thread falls idle before an epoch ends, then its memory\nwon't get reclaimed until that thread wakes up to process work\nlater on.\n\nThis diff introduces a maximum wait of 5000 milliseconds (configurable)\nfor worker threads; if the worker idles for this period, we'll wake\nup and poll for memory to reclaim."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/74faec25ab670e29470c374948d0e0c84dc33208", "message": "fix ph_assert expr\n\nWhoops..."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/cfae96c2770228995f9b6b3905d47af03d429b41", "message": "augment thread name in ph_log\n\nIn environments where we're mixing libphenom with other systems (such as\nthrift dispatchers), we may invoke logging from a thread that doesn't\nhave phenom TLS.  In that case we want to print out a more meaningful\nname.\n\nThis is two-pronged: when setting up phenom TLS, try to copy the\nname from the system.\n\nWhen logging, if we don't have phenom TLS, use the name and the thread\nid.  We try to get the LWPid from the system if we can."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/370ed3b4a5c69a51807a8727006ae603c6e7bad9", "message": "[lint] use a more active mode of speech\n\nIt may be lint, but I'm not going to take code that doesn't match\nthe styling, and the build will fail if you don't address it,\nso make the output more commanding."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/5c59fbba544c3b4c841851e6f0788abe7968c436", "message": "[docs] fixup parameter names\n\nresolves https://github.com/facebook/libphenom/issues/36"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/e774550542a518b809a53ea6c0f7edb022ae569d", "message": "add PH_STRING_DECLARE_STATIC_CSTR\n\nComplements PH_STRING_DECLARE_STATIC but can be used with char pointers\nand not just string literals."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/7b50834e17b0a8c30277561fa135edf5f23f80b7", "message": "Add ph_job_dispatch_now\n\nThis executes a job right now on the calling context.\nThis is useful for passing \"closures\" around and signalling completion."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/d9619578d1eead9fb11432572fd7b9a92ddc45f8", "message": "build in parallel on travis hosts\n\nShould speed up the clang-analyze portion of the build there"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/0667f67f73caf6023d757171ccfe55b117fb1873", "message": "Add compiler option to enable address sanitizer\n\nDefault to enabling this for travis builds.  I don't think we\nneed to have with/without modes for it, at least not explicitly...\nThe gcc version available in the travis environment doesn't support\nit, so we should only see it when we use clang there."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/9ae39bc0d8db177774a1a9804f984f7ec4db4108", "message": "add PH_STRING_DECLARE_STATIC"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/9e71a80f47e46493430181dec9df9fa85c6e7d70", "message": "Add checks for select and stdio usage\n\nAlso: redundant return statements at the bottom of void functions."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/a36575d4e50ab74f7519eb377bed60d15f4dd56d", "message": "add clang-analyze target for enabling static analysis\n\nWe run this in the travis builds, but we don't make things fatal because\nthe false positive rate is > 50%.\n\nIt did find a couple of real issues in the buf code though, so it's\nworth keeping"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/2f1cd27550a04ebd36b1785dd6179bb975784a88", "message": "Modify cpplint to more closely approximate libphenom style\n\nTidy up some lint issues that it found and make lint issues that it\ndiscovers be classed as broken build issues.  This will allow us to\nproceed with pretty strict rules, and will help avoid making a bunch\nof seemingly pedantic comments on incoming pull requests.\n\nPipe this into `arc lint` too, for folks running arcanist (you get nicer\ncontext displays with arc lint)."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/a5e8e080b25d74281e69a6f32c49dc984cfe0527", "message": "Add cpplint.py\n\nWe'll tweak this to match the libphenom styling; this is the unmodified\nversion."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/7c4f63b444e21072210d0a1d0a518a30b528a312", "message": "add explicit clear_timer function"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/9c446f7e22c8d28262729a0cc89c991b37d7f6c7", "message": "add ph_stm_readahead()\n\nRequests that we fill up our buffer.  Useful in situations where\nyou are willing to block now if it will help you avoid blocking\nin a different context.  For example: you are in a thread pool now\nbut will be executing NBIO later."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/d63b1044ee99ff3cd8e0ac15697ad117c56b9e2d", "message": "call ph_stm_flush() as part of ph_stm_close()\n\nyou know, it might be important to actually write that data out."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/d43de0ea81d24f99890f0896579a6afc0f6942aa", "message": "add unistd.h for SEEK_SET"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/2c6eb33359e82de30299783e23cbe95cb75af08c", "message": "add ph_stm_copy()\n\nAnother one that I always end up wanting/needing.\n\nAlso: tweak the test harness to make it clearer when the plan is messed\nup by colorizing things... and also have it detect bogus printf\nformatting."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/8b0d40129938abfde09df960c7904cc01fca18d3", "message": "rampage against automake: move aux dir\n\nThe new test-driver stuff that lands in the top level is rage inducing\nwhen it comes to tab completion.  Move it aside!"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/004baaa6c5f49d39441759b9c7c8768ab9fdc6b7", "message": "fixup c++ compilation\n\nand add some docs for the job template stuff"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/388360b3b8bbbe6f31c211906c608bd2908f118d", "message": "add ph_thread_pool_signal_stop()\n\nThis allows tearing down the threads when they are no longer required.\nThis doesn't free the underlying pool (it's considered permanent)"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/59f0167d4dcf3884df21a944d73151ae1fe2fec1", "message": "add helper for getting at a c-string rendition of a ph_string_t\n\nDocs explain it; we prefer to copy (or not copy if possible) to the\nstack over using the heap.  The rationale is that most of the strings\nwe'll pass to c-string APIs will be small enough that stack will be\nappropriate; my immediate use case is passing strings to posix APIs\nfor use as filenames."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/4ffab02cfe242f25de26b0bcebb30102f0723240", "message": "more crosslinks for variant docs"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/ce76ff757ae6e593fe36256b48ed81d65594810d", "message": "improve cross-links in the variant docs"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/09570f3d043e3d3c413c7eaadc2a188190a0f572", "message": "pretty print json for the docs\n\nNot sure if this was breaking gh-pages or if something else broke it\naround the same time... but having put this code together, might\nas well check it in now."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/20d22c50dd5e57f59d445e502794138143c77d5a", "message": "fixup doc entry name matching\n\nAdding `PH_` for macros meant that struct ph_job was being mislabeled\nas a PH_STAILQ_ENTRY.  Make the title check prefer `struct`s that start\nthe line.  This duplicates a later rule that matches `struct` anywhere\nin the line because it is late and I'm too lazy to check to see what\nmight be affected if I remove the latter."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/d7be502ef6398c5ee2171d0315135335a0e5901c", "message": "fix potential use-after-free with ares\n\nNoticed this while digging into\nhttps://github.com/facebook/libphenom/issues/29:\n\n```\n==26939== Invalid write of size 8\n==26939==    at 0x10000AFD8: ph_job_set_nbio (in ./tests/dns.t)\n==26939==    by 0x10000388B: sock_state_cb (in ./tests/dns.t)\n==26939==    by 0xCD79: ares__close_sockets (in /usr/local/Cellar/c-ares/1.10.0/lib/libcares.2.dylib)\n==26939==    by 0xD976: ares__destroy_servers_state (in /usr/local/Cellar/c-ares/1.10.0/lib/libcares.2.dylib)\n==26939==    by 0xD871: ares_destroy (in /usr/local/Cellar/c-ares/1.10.0/lib/libcares.2.dylib)\n==26939==    by 0x100003AC7: do_ares_fini (in ./tests/dns.t)\n==26939==    by 0x100001C0F: ph_library_teardown (in ./tests/dns.t)\n==26939==    by 0x2FC524: __cxa_finalize (in /usr/lib/system/libsystem_c.dylib)\n==26939==    by 0x2FE68A: exit (in /usr/lib/system/libsystem_c.dylib)\n==26939==    by 0x2667E7: start (in /usr/lib/system/libdyld.dylib)\n==26939==  Address 0x100105950 is 16 bytes inside a block of size 120 free'd\n/*\n==26939==    at 0x75B8: free (in /usr/local/Cellar/valgrind/HEAD/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)\n==26939==    by 0x100009DB7: ph_mem_free (in ./tests/dns.t)\n==26939==    by 0x1000038A6: sock_state_cb (in ./tests/dns.t)\n==26939==    by 0xCD79: ares__close_sockets (in /usr/local/Cellar/c-ares/1.10.0/lib/libcares.2.dylib)\n==26939==    by 0xD976: ares__destroy_servers_state (in /usr/local/Cellar/c-ares/1.10.0/lib/libcares.2.dylib)\n/*\n==26939==    by 0xD871: ares_destroy (in /usr/local/Cellar/c-ares/1.10.0/lib/libcares.2.dylib)\n==26939==    by 0x100003AC7: do_ares_fini (in ./tests/dns.t)\n==26939==    by 0x100001C0F: ph_library_teardown (in ./tests/dns.t)\n==26939==    by 0x2FC524: __cxa_finalize (in /usr/lib/system/libsystem_c.dylib)\n==26939==    by 0x2FE68A: exit (in /usr/lib/system/libsystem_c.dylib)\n==26939==    by 0x2667E7: start (in /usr/lib/system/libdyld.dylib)\n```\n\nI only saw it once, so seems hard to trigger, but nonetheless:\nSwitch to using a job template and SMR to address this."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/66a16e7e6c4933421ca60b87391b6d7f9b6c046e", "message": "add null ptr check in ph_string_equal_cstr\n\nSee https://github.com/facebook/libphenom/issues/29 for context"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/3612c82170df75a959e6c464c49840ebc3223adf", "message": "Consolidate counter and thread TLS data, revise init\n\nTackle a couple of things:\n\n* Both threads and counters had their own copies of code to manage\n  allocations and TLS data; consolidate it into one\n* Resolve some initialization issues\n* Addresses https://github.com/facebook/libphenom/issues/11 by\n  removing the dependency on ph_mem_alloc for ph_thread_t data\n\nThis gives us better defined initialization semantics both within\nthe library and for the client applications that consume it.\n\nIt also reduces some boilerplate with pthread_once and the (albeit\nvery very small) overhead that introduced into the various call sites.\n\nThe new initialization approach uses the `constructor` attribute of\ngcc to cause a shim function to run prior to `main`.  This shim function\nregisters the true constructor/destructor functions and arranges for\nthem to run at `ph_library_init` time.\n\nUsing the linker to manage construction means that we'll only pull\nin the pieces that are used in the application.\n\ngcc supports specifying priorities for constructors but this isn't\navailable to all systems (notably Solaris)."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/4fe1692013051701b40c20c1f2e5022990100a4d", "message": "affinity: make listener round-robin the accepted sock"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/d5409e06373f68ec908381f86130641b82f23584", "message": "some gccs barf on pragma diagnostic push\n\nSo let's just be explicit about what we want to happen"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/3a80820a3edfa80273e3415d9f859280ac4d9ba4", "message": "Fixup build on kssl enabled platforms"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/07cd4ef81f472e76d81037cd0656c41de16cb08a", "message": "ensure that inttypes.h exports PRIxXX"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/007fc36b5e7266b3a51b2cc52290135ebbe30a4b", "message": "add ph_string_append_str"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/4004c02f57861388222e0d73dae1132a9849f049", "message": "Add OpenSSL support to ph_sock_t\n\nAddresses https://github.com/facebook/libphenom/issues/20\n\nSince SSL carries around a lot of state, we chose to implement the\nbulk of the logic in ph_sock_t.\n\nThis commit adds some connectors for BIO->ph_stream_t and so on;\nthese exist to facilitate the ph_sock_t implementation and have\nsome limitations (such as missing read primitives) in some cases.\n\nWe choose to provide just enough infrastructure for you to build\nyour protocol on top of ph_sock_t.  In particular, you need to provide\nthe SSL context and object management.\n\nWe may evolve this over time to add more convenience functions.\n\nThis commits augments the echo example to demonstrate how to enable\nSSL for a listener, and adds a very simple sclient example that shows\nhow to build an SSL client.\n\nAlso: fixup an issue with bufq's where gc can leave them completely\nempty of spare buffers."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/0d8723cd0fccb94e8a9f3292bddc8549adb3ff3a", "message": "add emitter affinity\n\nAddresses the bulk of https://github.com/facebook/libphenom/issues/21\nI'm punting on mutiplexing scheduler threads on emitters for now,\nsimply because the current epoll() syscall implementation is a\nlimiting factor.\n\nThis commit does a couple of things:\n\n* Factors the various system dependent emitter code out into files\n  of their own\n* Factors the emitters so that we can set up multiple emitters\n* Create one emitter per scheduler thread\n* Increases the size of the emitter event buffer; previously, we\n  would collect only a single event at a time in order to be fairer\n  to the rest of the scheduler threads.  Since jobs are now affine,\n  we no longer have this concern.  (This comes at the cost of a slow\n  job delaying all the other jobs with the same affinity)\n* Adds `emitter_affinity` to the job struct; this can be used to\n  set the affinity of the job (surprise!)\n* Set emitter_affinity in iopipes.c\n* Fixup the Illumos build\n\nThe affinity change gives us almost linear scaling of the dispatch\nrate in iopipes.t as we raise the number of scheduler threads;\npreviously, we'd see a drop-off as we passed HT and socket boundaries\ndue to cache coherency traffic overheads."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/7068b7b463c91f3edab220fedcfd73452ac0c043", "message": "update quick start\n\n* make sure they `make install`\n* make sure they're using optimization\n\nalso: advertise the IRC channel"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/3d05d804ed1e73f4ee9ef285892f11df0927860d", "message": "Add an echo server example\n\nAddresses (at least in part!)\nhttps://github.com/facebook/libphenom/issues/10"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/b00674ade800ad1a8a216435138fd39b5bb6f618", "message": "fix build on 32-bit systems\n\nAddresses https://github.com/facebook/libphenom/issues/13\nThe underlying issue is that 32-bit systems don't have 64-bit CAS\nprimitives so we need to size our ring bits to the system pointer\nsize instead.\n\nI did some light testing of this by amending tpool.t to use 64 threads\nand it seemed to work (the concern would be whether we overflow\nMAX_RINGS)"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/c902bc37f2de33876f1ac27c048a5f3e721564d2", "message": "fixup quickstart example\n\nAlso advertise the cares dependency in the pkg-config file so that\nwe can use the simple compiler invocation I've just added to the docs."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/e810f4dddbc8d4ee04771d269de22aa83bf0e50e", "message": "Don't leak bufs and streams in the debug console\n\nThere's some slight irony in that checking the memory usage could leak\nmemory."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/2df1452eb3336feafeae8002b461aeeea63c97d3", "message": "nbio scheduler adjustments for OSX\n\n- Don't treat EV_EOF as an error condition.  It can be asserted even\n  when there is data pending read in the kernel buffer; if the remote\n  does SHUT_RD but is still connected we'll get EV_EOF.\n  Instead, we detect EOF by attempting to read.  Adjust debug_console\n  accordingly.\n\n- Because of this difference, the socket dispatcher will attempt queue\n  up an nbio mask manipulation for read, then queue up a subsequent\n  clearing of the mask during free.  Our STAILQ stuff will corrupt\n  the list if you attempt a double insert and this leads to badness.\n  So we need to use a flag to determine if we have a pending item."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/a96b180d98d9f805b5a531d8503b117789e646ae", "message": "fix runtime assert to assert if !expr...\n\nwelp, that's a bit embarrasing.  Also print out a more meaningful\nmessage."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/663def5bf527d634f284cc0740ad576627d03216", "message": "Allow json parser to indicate whether a failure is transient"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/a728f7f33e5d62f2d4d71e29cf9169d1f835ac6d", "message": "add note about autoconf and automake\n\nSee https://github.com/facebook/libphenom/issues/14"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/83c88b0b4fb0a7fbc4defa98fe119a4a0f607399", "message": "use a smaller font for scale.png\n\nMakes it easier to read off the numbers when we go as high as 100k"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/3bd71be7ded8a78a179af4aa53a37a50a4611d58", "message": "tidy up gimli heartbeat\n\nJust use a simpler approach of triggering a barrier on a set interval,\nthen pinging the heartbeat afterwards."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/7a57cd2574c7d11b400b898a3eedd29197ad79f0", "message": "Make it easier to bench and chart iopipes.t\n\nRelatively quick and dirty PHP script to drive iopipes.t with varying\nparameters and collect it into a csv.\n\nThanks to Samy Al Bahra for the `R' script"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/2f9290b1321fb84fc31189eed3110c390025011a", "message": "update ignores for newer automake test suite artifacts\n\nI updated my autotools and have a bunch of new generated bits to ignore"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/ae1968f3f35cd70077d177aafe489b80efbda327", "message": "more work towards https://github.com/facebook/libphenom/issues/6\n\nI could only get this to repro with clang built using homebrew,\nand it triggered rarely.\n\nThis is a continuation of the prior fix attempt, which \"fixes\"\nthings by not triggering the barrier call from inside the TLS\ndtor.\n\nThis introduces the possibility of a resource leak on thread shutdown\nif the thread is not one spawned by the phenom thread functions\ndirectly, so we'll need to do some follow-up work on this."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/b23ae9e4edebc4bf503f0a977bf3532d6008f34f", "message": "address https://github.com/facebook/libphenom/issues/7\n\nUse a good old fashioned #define instead of an inline to\navoid this compiler bug:\n\n```\ncorelib/variant/json-dump.c: In function \u2018dump_string\u2019:\ncorelib/variant/json-dump.c:34: error: inlining failed in call to \u2018dump\u2019: call is unlikely and code size would grow\ncorelib/variant/json-dump.c:151: error: called from here\nmake: *** [corelib/variant/libphenom_a-json-dump.o] Error 1\n```"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/75a11cb7fc73c649d56267a39177025c03977da0", "message": "address https://github.com/facebook/libphenom/issues/6\n\nWhat was going on here was a bit tricky; I'm not entirely sure why\nthis only triggered with clang on OSX.\n\nI could reproduce a very similar stack trace reasonably often with\ndns.t\n\nThe sequence of operations was this:\n\nA DNS worker thread finished:\n\n- the counter TLS key was destroyed, tearing down the epoch_record\n  associated with that thread\n- the ph_thread TLS key was destroyed.  There were deferred items\n  to be reclaimed (scheduled with ph_thread_epoch_defer) and these\n  were dispatched now in the TLS dtor.  This in turn called\n  ph_mem_free(), which in turn wants to update memory counters.\n- The counter subsystem noticed that it didn't have a counter head\n  for this thread (we tore it down already) so attempted to recycle\n  and register a new head.  At some point in this process, the\n  memory in the ph_thread_t for the current got corrupted.\n\nWe can avoid this by having our spawned threads trigger an explicit\nbarrier before they exit; this will cause the deferred memory to\nget freed and counters updated before we land in the TLS dtor code.\n\nWe might just be dodging a problem here; if the dtors allocate memory\nwe'll also trigger code to establish counter heads.  We'll probably\nrevisit this issue again in the future."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/ffda5bcf759274ca05fc375e582fd9bf162fc6b6", "message": "add travis build status icon"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/f3450e7249a3fdc31161e9de2fe1da063c419841", "message": "Fixup build with clang 3.2\n\nhttps://travis-ci.org/facebook/libphenom/jobs/11442675#L383"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/bb8fc815b1a7c330f2ae9394f1a08b9377912470", "message": "fixup compilation and build with clang"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/4840489f1691e1232e065507985097a5feec7780", "message": "kick travis"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/2c307fb103fbd5743260bb2fd723ec76457bf7d8", "message": "take a stab at travis-CI integration"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/ca4dbd4c09924fdf1ef170e958e23aaea4543493", "message": "typo"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/9e5de95cd155a7dbeac7b06df41326e80b440baa", "message": "couple of doc tweaks"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/11a7ecdc18fcf819622d2038774af0b48c0eddcd", "message": "we're not 1.0 yet, dial it back to 0.1"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/4e4827748fbaf8b3c620d92814caff232bfa0f45", "message": "add a note on how to get a hold of the code"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/0d968be0bb59c1ad41146400b49bea74ce94b57c", "message": "couple of adjustments for watchman"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/dfdc5c2826943153580f708c52c77a6190d75a1e", "message": "tidy up our namespace\n\nDon't install or export the defines we detect during configure.\nInstead, for the one thing that we do need to export, put that\ninto a pkg-config file"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/3bb36c3d9b95e07d0984cc00611f7fa595f1f14c", "message": "Sync up with imminent CK 0.3 release\n\nThis is current with 1237681a71ed24a9f66ccd541605bd14cd5d6253\nin CK master; we were previously floating between releases.\n\nThis adds arm support to CK, but libphenom itself needs to recognize\narm before it can be used."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/7644196fc8f2ae133e2b81c85e742074c9fcd4b6", "message": "add gimli heartbeat support"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/c9d9965cf67368af39baf6bbc673a2cfa8bce656", "message": "resolve the gcc optimization bug during thread boot"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/011a0067d8af8d59ae3f2562b34c381a979ff172", "message": "Rename to libPhenom"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/cb8b1749c825a1974d906869cef1d35dadc271e4", "message": "change counter separator to '.'\n\nThis improves compatibility with some other infra that we talk to\ninternally."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/6f6eeb9118d187da77fb2e2268638928bccb9183", "message": "s/unused_parameter/ph_unused_parameter/\n\nWas originally intended to be an implementation detail, but\nwe're using it in timerwheel.h"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/724594f2ecb61abf426d34250e6c1cc6e4fda8bc", "message": "also install the CK headers\n\nfixup mkdir_p portability w/ other versions of automake"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/125fd041f701c1f8a253b5a940f525904ac19233", "message": "install headers during `make install`"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/45b3e3308865a30b7a034e6fb1e8670ee249795d", "message": "only look for libevent if asked\n\nonly run php to build docs if we found it"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/4d4eb1fd5b3f53114e061e8d32c1448104030a82", "message": "make it easier to build docs for the web site"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/2f7267e0844aaaa560baf04969dfd74838d91c4d", "message": "doc update"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/bfe0c16584660a77e569958ed6766056e9743f42", "message": "free everything in iopipes.t"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/f9eb28dfe60b86672b3abf21f9972e5f26980b07", "message": "Add hook facility, allow hooking logging\n\nHook facility allows runtime definition of hookpoints.  Each hook has\na unique name and can have 0 or more subscribers bound to it.\nSimilar in some ways to the glib signal mechanism, but much simpler.\n\nDefault logging can be turned off and replaced with a hook\nimplementation."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/3c17ce9f0ea5e2e087f88b7ff551f181b1a82ea7", "message": "add runtime assertions"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/cf82ea5bf5b2256a83ad3b44041e016f17c9519c", "message": "add ph_static_assert support"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/223302c0a701b1479097d6acc0f32760b9b7d6fd", "message": "use gcc builtin for offsetof, if available"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/e2a834b2b1a3373f877ddb445df6cb0cb725c634", "message": "add simple configuration API, using JSONPath syntax\n\nAdd a relatively simplistic configuration API that uses the psuedo\nspecification that is JSONPath for referencing a location in an\nobject tree using a simple path notation.\n\nAdjust some API functions to use the API to set their values."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/38130a11d479a742512f6a579fe0a7a8ecc111c3", "message": "Add super simple debug \"console\"\n\nAllows very simple interrogation of system state using a one shot\ninvocation:\n\n```echo memory | nc -UC /tmp/phenom-debug-console```\n\nor\n\n```echo counters | nc -UC /tmp/phenom-debug-console```"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/a687e2ce9fb7681c6648a6791dd87a6ae4f9a188", "message": "add sock_free API\n\nAlso add a printf renderer for bufs."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/cb736971dd4be240a4714a1871abb3c36400441a", "message": "add simple listener API"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/0adffbf8e2d011f77c80486279101eec025841af", "message": "Allow registering formatters for our printf"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/12a9cc717c0bfcbe46bbbe732d95a9708c8b29a2", "message": "add socket object API\n\nThis helps in constructing clients"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/78e7e85cec028e4ad0cdf584612e76b6d0ab3c96", "message": "add ph_stm_writev, remember need_mask\n\nThe need mask will be useful later, when SSL support is added, so\nthat we can tell if we need to be read/write to service a logic\nread or write operation."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/a68f3ec4d6df93fe95a3150134b02fc94c6ae05e", "message": "add ph_dns_channel_gethostbyname()"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/deaa86f9a4070ac49b2db884fd952d882ec1a157", "message": "Add buffer API"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/b8c52987ea6c41d9d288d9da39cce76d0e50001c", "message": "hopefully this resolves the va_list passthru stuff\n\nVisited this a couple of times already; it seems like we must pass\nthe address of the va_list through, regardless of platform, but that\nwe must also va_copy the address that we pass through so that it is\nin a deterministic state--seems like the optimizer can break it\nfor us in some cases if we don't va_copy."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/c04d49624d13e922f43d9fa6ffb92742346e71a1", "message": "always want dwarf debug info"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/5748084933309d3c75ed81b0d743b93289a78fa2", "message": "add async connect function"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/65b81b86d22fec4c4bc00e55a925f29ccd21eebd", "message": "take a stab at using epoch based reclamation\n\nProvides a facility integrated into our thread layer.\nWorkers and NBIO threads start implicit epochs on each\ndispatch, and poll to reclaim between dispatches.\n\nJobs are the first objects to be tracked in this way."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/b5ecc5f5fd39b3033934b784a836a203e5931760", "message": "fixup pkg-config usage and rpath for osx"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/117c1d98c66077b5d626ea9306b90b996c21a557", "message": "Fixup pkg-config usage so that we set the rpath\n\nNeeded for systems where the library is somewhere outside of the default\npath"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/3399f295591031e6f9c3bcd6442932f5ad24d3dc", "message": "Add async DNS resolution facilities\n\nPaving the way to async connection functionality"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/2bd38a08566a05484e54a8b6e54d5d72b377684b", "message": "add simple async getaddrinfo API"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/1ffa66737058d681fa06e291939e73a6d4b2cdd7", "message": "add sockaddr type"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/e06ab14b0344fdc5bcaa6309e6ee9c97885b7cae", "message": "Fixup docs search\n\nHash can be an empty string and jquery doesn't like searching for that"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/4e70c5219db5ce3628fe004866bf6c4879f5c3ce", "message": "fixup build on centos 5\n\nCompiles and runs properly on my centos5 machine"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/07b55a276df3e58c3c134f2c8a6a6539e8eb676d", "message": "Centralize initialization to ph_library_init()\n\nYou still need to invoke ph_nbio_init() with your desired number\nof schedulers.  Will ultimately add a variation on this that will\nconsume some kind of standardized configuration file.\n\ncloses issue #5"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/d1160beea866e777d72a4f43733df2d614e2721d", "message": "docs: add note about how to get access to the docs\n\nLots of docs you can read if only you knew how..."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/2af407b194249f001e4e95ebbe0a523e0546c06c", "message": "variant: add pack/unpack API\n\nModeled closely after the Jansson library equivalents, but tweaked\nto accomodate our ph_string_t type."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/99f6b548aa5024655c8d77ae657e398a65fd408b", "message": "variant: add ph_var_equal"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/240fa7c256a3d8ed2b9ccfcce0611163cc41d080", "message": "json: add dump support\n\nWe can now dump variants as JSON text.\n\nOther semi-related tweaks:\n\n- Allow ph_mem_free() of a NULL pointer (NOP)\n- Colorize TAP output when session is interactive\n- Fix positioning issue with string streams"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/eb45e03b72ec3657dfb3d9fd4a33199365c1b79b", "message": "Add json loading\n\nThis is a port of the jansson JSON parser that targets the\nphenom variant layer."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/a9fa46bca4d05dbba513b9dfb922af60bb3bfcfc", "message": "Add string stream"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/6b4fded150f45842262d8584fb2ea83cf3257f76", "message": "Add simple UTF-8 and UTF-16 string support\n\nThis is intended to support serialization to/from JSON and is not\nto be construed as full unicode support by any stretch of the\nimagination."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/c0afec171aef1632e00fced50cd9f87970dd7a91", "message": "wip: variant"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/b2a82bae6a3c05e02902e448c8b828456913d3db", "message": "add some docs for defs.h"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/b6c51c128a8920d3ef112f73572acd4499666971", "message": "Add a hashtable facility\n\nConsidering this v1 of the hash table facility.\nI usually implement open hashing and there may be some tweaking\nwe can do for the probing in this implementation.\n\nDocumentation included in the header file.\n\nAlso tweak the doc processing to support Phabricator \"Remarkup\" inspired\ncounter-examples and notes."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/e17e918db75f9c1f0bdb1bb17a10f456d0a31d1c", "message": "more doc work\n\nAdd access to the header files via a Headers dropdown.\n\nTighten up the styling of the search typeahead; also attempt to show\nexcerpts of the matching docs in the typeahead."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/a5d5a632e9aa4d83fe5ae3322eb18f0c6cb4e026", "message": "docs: make one html file to rule them all\n\nThis embraces javascript and sticks all the generated docs in one html\nfile.  Despite the summary, the html file is actually a fairly small\nstatic shell that loads the declmap file, computes a full text search\nindex and dynamically renders markdown.\n\nThe topics have been moved into a drop down menu because they take up\ntoo much horizontal space.\n\nA search box has been added that uses the bootstrap typeahead to call\ninto the lunr client side search engine and suggests the correct\ndocument locations.\n\nSwitching topics munges the DOM and applys the markdown from the new\ntopic.\n\nJust start typing while the page is focused and you'll jump to the\nsearch bar and activate the typeahead.\n\nYou can explicitly focus the typeahead by using the '/' key.\n\nRemoved the individual generated html and markdown files."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/95eb710140f99ef230f0f5dee43a018a8d291cbe", "message": "Tweak timerwheel docs, add toggle header file section to docs"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/d043545373d6fddda521c2582231e530dee3c2b0", "message": "auto-linkify function names in docs\n\nIf we see something like `foo()` and `foo` is in our list of titles\ncomputed when we built the docs, swap that out for a hyperlink to the\nappropriate doc."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/3b901f3d660c66f0696e1096ca91272b7768e94c", "message": "fix doc id generation for headings with spaces"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/c4f32b113532c3f10efad83bf4355173fe9c7ddd", "message": "Add ph_string_XXX suite of functions\n\nDocs are inline in the header file.\n\nTook the opportunity to increase the memtype id of the first valid\nmemtype to make it easier to implement some of the string functions,\nas we are slightly evil and abuse negative memtype values.  Since 0\ndoesn't have a valid negative value, we need to ensure that the first\nmemtype is not zero.  We also want to avoid flipping the invalid memtype\nvalue (-1) to 1, so our first valid memtype value is 2.\n\nRealized that we might as well just redefine PH_MEMTYPE_INVALID to 0."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/2c8d57a0d392002090055af9f3e605cbe27f48a4", "message": "tidy up some doc formatting issues"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/09a764445ba545ba80e68f7ebd0fdf93c231946c", "message": "Revise doc styling a bit more\n\nFixup scrollspy offset too"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/2e681e5027233b324c9502ff4fcbc35a34c311a9", "message": "debug sidenav css issues"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/c54b09af96683568d60088427b8fb8f094ccb9b8", "message": "Fixup doc extraction and tweak doc comments"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/a1bda985c0aab37e70698a19707d40d8058fc841", "message": "Pull the js/css we use for docs down locally and use those"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/4eace1f08a1e459147c0798552631aa3b03139c3", "message": "fixup decl detection\n\nImprove some of the docs a bit more"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/89aa3af65c8eb9332a563f12409ad4410c3310c8", "message": "Add the readme to the html content we produce for docs"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/3faf5afccb72d5a07436e29ef2aedb41caacbed4", "message": "reinstate sidenav id"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/c7c6f8ba19690a4b558a4b8769dd3c262397e185", "message": "Pull some of the doc bits into the tree\n\nThis allows us to produce a TOC within the pages.\n\nAdd doc build to the makefile."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/f89cfcd13a69bfc215c2070cb9e36ed9eb867a73", "message": "let's also emit some HTML and use strapdown to render it"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/efff73816be0f07c5f56d0be23242cfd0eb21b92", "message": "tidy up counter docs"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/8a7fa3c2ab694b0494116ad2334bbad586601ba9", "message": "Combine epoch and counter heads into one struct\n\nThis saves a TLS key and \"solves\" the TODO for recycling heads by\nhaving that handled by the epoch recycling functionality.\n\nRemove the barrier calls in the TLS dtor as these can cause deadlock\non scheduler shutdown, and the memory associated with them should be\nsufficiently small that we don't really care about getting that\nback any time soon; much rather leave it hanging around for another\nthread to recycle and use later, assuming that this thread spawn/exit\npattern is common in the applications that opt to use it, even if\nwe'd prefer that the application use a set of long-lived threads anyway."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/478a45b0dae90b5f86aebc40af5d37f69ae8885e", "message": "sweep counter init back into the pthread_once function\n\nYou have to define at least one counter before using the other\nfunctions, and we define counters when we init the memory subsystem\nso this seems safe enough to me."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/a24234497e30b091c649d3b6c154d6c72e213807", "message": "Fixup compilation on OSX\n\nNeed to always set the TLS for the epoch record otherwise our dtor\nwon't get called.\n\nRename some internal functions that will never be exported out of\nthis file."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/e5d9ed440c3bfd41d7c1ec20b6a111981b9b3249", "message": "Remove doxygen thingy, replace with markdown extraction\n\nI don't really like the very bitty and disjoint nature of doxygen,\nso here's how we're doing docs:\n\nBy convention, each header file begins with a section of markdown\ntext enclosed in a C-style docblock region (enclosed in /** */).\nThis is intended to describe in broad terms the facilities provided\nby that file and give some general examples.\n\nThen, each declaration in the header is prefixed with a docblock\ncomment that contains documentation for that declaration.\n\nThe convention for these is that the first line of the docblock is\nthe abbreviated summary description of the thing and the remainder\ndocument it in more detail.\n\nThe mkdoc.php script walks over the header files and produces a series\nof reasonably formatted markdown files in the docs dir which you are\nthen free to consume using tools of your choice.\n\nThe end result should be something reasonably well consumable by\nhumans."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/a0ec09fbb62a3d0904b1765cf5abee87fabc5b33", "message": "Add very preliminary doxygen configuration\n\nJust run `doxygen` to build html docs; they land in docs/html"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/a0fcb2ceefb7056563f43492e7797934a4fa7044", "message": "track some missing CK files"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/41b6106f04fe62cb1d86c9682ded55ab3be980a9", "message": "Streamline nbio scheduling a bit\n\nAdd a libevent comparison option to iopipes.t (-e) so that it is simpler\nto gut check against it. Couple of numbers are included at the bottom of\nthis commit message; TL;DR is that we're a bit faster because we're\ndoing overall less book keeping per event.\n\nAdding scheduler threads doesn't improve performance as linearly as we\nsee with the pure thread pool dispatch in tpool.t, which isn't\nsurprising, but it does seem to level off pretty rapidly with a small\nhandful of threads for the iopipes workload.\n\nFor kqueue, twist the deferred event scheduling code path so that we can\nbatch the EV_SET operations into one kevent() syscall.  This makes a big\ndifference and is worth the complexity.\n\n- Remove some sanity checks from the hot ph_job_set_nbio() function;\n  they slow it down.\n\n- Keep track of what we believe the kernel state of our descriptors to\n  be in the scheduling mechanism so that we can avoid making syscalls.\n\nSome numbers; single core only because that's all we can meaningfully\nuse to compare against libevent here.  Adding more cores (raising the -c\nnumber) can increase overall events/s but we observe a decrease in\nevents/s/core for the iopipes.t workload.\n\nThe OSX and Linux boxes used to prepare these numbers are different\nmachines.\n\nOSX/phenom:\n\n```\n./tests/bench/iopipes.t -n 1024 -c 1\nOver 0.995s, fired 505,155 events/s\n```\n\nOSX/libevent:\n\n```\n./tests/bench/iopipes.t -n 1024 -c 1 -e\nOver 1.004s, fired 471,385 events/s\n```\n\nLinux/phenom:\n\n```\n./tests/bench/iopipes.t -n 1024 -c 1\nOver 0.996s, fired 366,624 events/s\n```\n\nLinux/libevent:\n```\n./tests/bench/iopipes.t -n 1024 -c 1 -e\nOver 1.004s, fired 264,129 events/s\n```"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/0912af72e4875bccb593d6fc543fd490dec67aa0", "message": "Add nbio benchmarking tool\n\nAlso add some counters in the scheduler so that we can collect this\ndata via counter-blocks and avoid additional counter overheads."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/52bd552bcd3528eaa0ba4b6c00189e6b5a36e752", "message": "simplify timer and nbio jobs\n\nI didn't like the owner and versioning thing; it was too complex.\nThis simplifies timer processing by making the following observations:\n\nMost timers on IO jobs are for timeout events, and those are typically\nfar enough in the future that repeated remove/insert operations on\nan active fd are likely to compute the same bucket in the wheel.\n\nIn addition, timeout triggers are pretty rare compared to actual IO\ndispatches anyway.\n\nRather than force the sequence:\n\n```\ndescriptor_ready:\n  lock_wheel()\n  remove_timer()\n  unlock_wheel()\n  dispatch_event()\n  lock_wheel()\n  add_timer()\n  unlock_wheel()\n```\n\nwe can use:\n\n```\ndescriptor_ready:\n  disable_timer()\n  dispatch_event()\n  enable_timer()\n```\n\nwhere the disable_timer function is a single CAS operation and needn't\nblock any other dispatching threads.  This minimizes wheel locks to\nthe timer dispatcher itself, or situations where the timer is newly\nadded, being completely removed, or is re-bucketed.\n\nAs another nod to avoid racy situations, this adds an additional\nbefore_dispatch callback in the timer_tick routine that allows the\ndriver of the wheel to opt out of dispatching just-in-time or, as\nwired up in nbio.c, disable the IO portion of the event in the kernel."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/c2753c2154a0cffc0bd70e8f28dd0ea884aab4fd", "message": "Add thread pools\n\nThis is a pretty big commit due to a bunch of tuning and\nexperimentation guided by some long cache profiling runs.\n\nMore details on the thread pool implementation can be found in both\njob.c and job.h.\n\ntpool.t is able to sustain a rate in excess of 40mm jobs per second per\ncore with a linear relationship to the number of physical cores.\nWe observe this trailing off as virtual cores are used; results were\nobserved on a 16 core (32 with HT enable) system.  Performance rapidly\nreduced to half the jobs-per-second-per-core once we passed 16 cores.\n\n* Reduced contention for ph_counter.  We no longer use ck_sequence\n  for counters as it introduced a number of expensive atomics that\n  we don't strictly need in our use case.  We still follow the\n  spirit of the sequence operation but the strength of the published\n  counters is a bit \"weaker\" in return for increased throughput.\n\n* Replaced ph_time_t with a regular timeval.  This resolves some\n  resolution issues with time math (signed 64-bit was not enough).\n\n* Expended ph_log() to include a higher resolution timestamp,\n  a readable level label and intelligently handle trailing newlines.\n  In addition, we print the thread name and tid.\n\n* Runs clean under valgrind --leak-check=full.  This is managed using\n  atexit() to force destroy a number of key structures that wouldn't\n  otherwise get destroyed.\n\n* ph_num_cores() - returns the number of physical cores (not\n  hyperthreads).  We use this to size the scheduler pool size and also\n  a pool size in the tpool.t test case."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/9c04a70f1e9bb7c7fcced5941bb9f6d978a89f7a", "message": "Fix compile warning"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/3c126249ecfd83634a8b798859670d185cd64b32", "message": "Update CK to 0.2.18 (actually 3ca7072c146b62dd8)"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/673fb2bf490ec3b7dde37985df5571542fb9338b", "message": "simplify work into jobs\n\nRemove affinity; I wasn't happy with the amount of work we needed\nto do under the covers to make that work."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/448b54836b28eb21504115426b799bc4a63f323c", "message": "log stacktrace on ph_panic()"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/8589f78c19c7afcb9b0ec802d0eb1d5c4542d8e7", "message": "make timer.t pass on solaris under arc unit\n\nDigging into this showed that our `Pv%s%p recursive format expansion\nstuff wasn't quite right on solaris.\n\nIntroduce a macro to correctly(?) pass the va_list down.  I think\nthis is a bit sketchy but seems to work out ok.  I wouldn't be\nsurprised if this needs revisiting again in the future."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/a2029a1a2e5add814de7ee4c6089f5ac23845f77", "message": "add basic stream implementation\n\nBorrows some techniques from the stdio implementation in the MIT\nlicensed musl libc."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/bee70be54a032d238e1963d86d66becbad619510", "message": "fix compile on osx"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/d897528086fa283e7c97219fec380b4362a95e6f", "message": "Expand readme very slightly"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/a33a409f1fa7e363c380f119ce4a02281bd15512", "message": "Disable DEFAULT_INCLUDES in automake\n\nThis causes some conflict issues because it seems to generate\n-Iinclude/phenom and that places headers like phenom/queue.h\nahead of the system queue.h and so on."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/afbf85da8c220fd1650d5d8de72f8abaf0679500", "message": "re-namespace from phenom_ -> ph_ ; life is too short"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/46fb35af3f584783ac13aa2a4311faad4d64b3bc", "message": "refactor some build bits; now builds and passes on OpenBSD 5.2"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/40fd49f28035cd5ecd525a0f95d2bbd4acd3e9b8", "message": "use the ck hash set instead of the hash table for counter scopes\n\nI'm told that these will support MPMC without needing a write lock,\nand that the APIs are moving more in this direction."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/27a95fdc040c2370a5ddfc4405bab0d6b7b7be65", "message": "Now compiles and passes tests on fbsd 9.1"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/4f7e8d95a2ad7844d0f3995a6d02a678192861bd", "message": "use __thread for counter.c\n\nAlso add some branch prediction hints"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/c366528de1e79244fa041e4d9aa7efebe38af45c", "message": "only memset thread if we have __thread\n\nWe may be able to eliminate it completely if the system guarantees\nthat it is initialized to zero.\n\nIn the non __thread case we allocate and zero the memory."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/95bdd668fa16318c1a55713f2e7f250b694c053a", "message": "always include debug info in the build"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/58a759e8f6fb47baa2708f03451dab04b2e5d758", "message": "augument test runner to support code coverage\n\nThis adds code coverage information collected via callgrind + dwarfdump.\nThis also adds primitive support for defaulting to similar sounding\ntests when running arc unit."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/c851cee996a83562ab73c83eb9be91133fbca9d9", "message": "fix non-solaris build"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/1ff9659ef8c0ecf3577e21656465283776716756", "message": "on solaris, use port_send() instead of a trigger fifo\n\nNot sure how this compares perf wise, but seems like it might be\na little more efficient... need to benchmark it really; should be\nfairly easy to switch between the two when we're ready for that."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/f3b20bb528424b97471164d62f76265c273d1ac6", "message": "perror -> phenom_log"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/f446cd8c57efe89f7e15393308afbc1c5f62d562", "message": "we now build and pass tests on illumos"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/adb862552f51e6cb47291d91867f37fd2a1630eb", "message": "add basic test for fd io"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/99fb2557059d447eb9b82dab8f2294b63233d952", "message": "name the scheduler threads for easier debugging"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/01b9ea05daa8b8252d74208cb8e78d4fc5c192c5", "message": "add asprintf style functions"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/f9d090a575a89dc7d13cc6f639fb13d5a177be53", "message": "Add \"`Pv%s%p\" format option for passing thru fmt + va_list"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/2993fdbb7c206edb1076af3a7c6cc14ba58604b2", "message": "initial commit"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24565604", "body": "Do you only see this with clang?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24565604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24567938", "body": "I think https://github.com/facebook/libphenom/commit/75a11cb7fc73c649d56267a39177025c03977da0 will get you up and running\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24567938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24568507", "body": "That's a weird one; the call isn't actually marked as likely or unlikely; sounds like a compiler bug.\nI think you told me your kernel version and not your distro version; can you provide the output from:\n\n```\ncat /etc/redhat-release\ngcc -v\n```\n\nCan you also check to see if you have any pending updates to install?\n\nRemoving the inline is the way to resolve it in this case, although I'd probably go with changing it to a define if this is a mainstream version of gcc with no easy upgrade path.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24568507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24569903", "body": "Thanks; reproduced on CentOS 6.3, fixed in https://github.com/facebook/libphenom/commit/b23ae9e4edebc4bf503f0a977bf3532d6008f34f\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24569903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24636564", "body": "Thanks for diving in!\n\nph_socket_connect() shouldn't close() the socket because it doesn't create it.\nThe idea is that the ph_socket_connect_func that you provide will take care of releasing that resource when it notices that the connect failed.\n\nHow are you triggering this code path?  Perhaps we're missing the close in a different spot (maybe connected_sock?)\n\nAlso, before I can accept a pull request from you, I need to confirm that you've signed our CLA--take a look at http://facebook.github.io/libphenom/#README--Contributing for more details.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24636564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24637359", "body": "ae1968f3f35cd70077d177aafe489b80efbda327 should help with this\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24637359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24637926", "body": "You need to install c-ares; this is mentioned in the System Requirements section of the docs:\nhttp://facebook.github.io/libphenom/\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24637926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24640911", "body": "Thanks!\nWe prefer to have a linear history, so I applied your changes using:\n\n```\n$ hub am https://github.com/facebook/libphenom/pull/8\n$ git rebase -i 'HEAD^^^^'\n```\n\nand used 'fixup' to squash them together\n\nThe result is 6bcb020c5801af990cb80b43cfb424a1debff176\n\nthanks for your contribution!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24640911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24685838", "body": "I'll close this crash issue, and open a separate one to track the potential leak; thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24685838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24716538", "body": "Thanks for diving in!\n\nThe Solaris FILE limitation is one I feel quite strongly about.  Also: using the posix functions direct avoids some additional heap overhead that we just don't need in this case.\n\nOne thing I had in mind in this area is factoring this code out into a linux specific utility function called something like `ph_procfs_get_int` that takes a path relative to /proc and extracts an int64_t value.\n\nOne last thing: before I can accept a pull request from you, I'll need you to sign our CLA; http://facebook.github.io/libphenom/#README--Contributing has more details on this\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24716538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24744569", "body": "Please share:\n- Which OS/Distribution you're using (eg: Ubuntu 12.04)\n- `uname -a` (so we know which architecture you're using)\n- `gcc -v` (so we know which compiler you're using)\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24744569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24744643", "body": "You need to install autoconf and automake\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24744643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24757260", "body": "We have other ways to accept the CLA (I can send you a PDF via email), so don't let the online form stop you :-)\n\nRegarding your company: if your contribution is trivial enough that your employer wouldn't be concerned about it, then I don't see why they'd have an objection to you signing the CLA as an individual contributor; the CLA basically says that you have the right to contribute the code you're contributing and that you grant us the rights to use it.  IANAL, so you should do what you need to do to make sure you understand it! :)\n\nLet me know how you'd like to proceed!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24757260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24787955", "body": "Added a note in the docs to make this clearer\nhttps://github.com/facebook/libphenom/commit/a728f7f33e5d62f2d4d71e29cf9169d1f835ac6d\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24787955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24866799", "body": "This is an issue with 32-bit platforms.  I can take a look at making this work, but recommend that you consider installing and using a 64-bit system if possible.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24866799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24867345", "body": "Should be resolved by: https://github.com/facebook/libphenom/commit/b00674ade800ad1a8a216435138fd39b5bb6f618\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24867345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24870684", "body": "I just added https://github.com/facebook/libphenom/commit/3d05d804ed1e73f4ee9ef285892f11df0927860d to help with this\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24870684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24875934", "body": "Regarding the compilation error, try turning on optimization:\n\n```\ngcc -O2 -o main main.c `pkg-config libphenom --cflags --libs`\n```\n\nI'll update the README to add the make install step and add the compiler flag.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24875934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24887274", "body": "Thanks for diving in!  Also: thanks for adding tests :)\n\nI'd like to understand the use case a bit better; can you describe the problem scenario you're working to avoid here?  Are you aiming to avoid heap fragmentation or allocator contention?  Can you tell me a bit more about a specific issue you've hit where you've needed this?\n\nHave you considered using an alternative general purpose allocator such as jemalloc, or using a slab allocator such as https://github.com/MessageSystems/umem?  Both of these perform bucketing to reduce the contended allocator sections, and both of these can replace all malloc usage in your program.\n\nOne thing we should be careful about is how this performs and scales; can you try adapting tpool.c into a benchmark for this?  I think you can have the `busyjob` function allocate and free the memtype and then sample the memory counters for it at the bottom and print out the allocation/free rates.  It would be interesting to vary the number of jobs and the num_cores value we pass in here:\n\n```\notherpool = ph_thread_pool_define(\"other\", NUM_BUSY_JOBS, num_cores);\n```\n\nWhat I'm thinking is that, at least in the umem allocator, there is allocator level machinery to reduce cross-cpu contention.  By adding the pre-allocation feature in libphenom we'd be taking on some of that burden so we should make sure that we understand how well that works.  You should compare a memtype with preallocation to one without.  You probably should also make the preallocation size configurable in the benchmark too, as I suspect the performance characteristics will vary if we can satisfy most requests in the preallocated region vs. outside it.\n\nAPI wise, I think I'd prefer that the pre-allocation quantity be a field in the memtype definition struct; that way we can pre-allocate once at definition time and avoid placing restrictions or limitations on calling the preallocation function (it becomes effectively a static or part of initialization).\n\nOne last thing: per http://facebook.github.io/libphenom/index.html#README--Contributing I'll need you to sign our CLA before I can apply your work to our tree.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24887274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24893471", "body": "re: jemalloc (and umem): it exports malloc/free/realloc symbols, so you should be able to just add -ljemalloc to your link line and make use of it.  Alternatively, you can LD_PRELOAD=libjemalloc.so to force it in ahead of the regular allocator.\n\nDo you have a system with multiple cores to test this on?  I think the biggest difference will be when there are multiple threads contending over the same mem type.\n\nI'm not 100% sure about the CLA; I'll check with folks tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24893471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24893961", "body": "Updated the readme in https://github.com/facebook/libphenom/commit/7068b7b463c91f3edab220fedcfd73452ac0c043\nthanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24893961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24894583", "body": "I think you're about to discover some of the challenges of allocator design :-)\n\nYou should try to avoid introducing a single lock as that will become a bottleneck.\n\nOne suggestion (inspired by umem): during init, allocate an array of ph_num_cores() rings.  Then you can hash `ph_thread_self()->tid % ph_num_cores()` to identify the ring slot for the current thread.  You'd protect enqueues to the ring with a spinlock, but dequeues can proceed without locking.   This will distribute contention across the rings.  It's not perfect because it is still possible for two threads to hash to the same slot -- ideally we'd want to hash by the current cpu number but there is no cheap or race free way to determine this (we could migrate to another CPU at any point) but it is probably good enough for us in most cases, because we automatically set CPU affinity for worker threads based on the `tid` anyway.\n\nIt also changes the likelihood that any given thread will obtain preallocated memory because it causes memory to accrete on specific ring slots.  If the workload is not evenly distributed among the slots, you don't gain the perf increase.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24894583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24895155", "body": "Try it out and see how it goes :)\n\nSome not-so-light reading here: http://queue.acm.org/detail.cfm?id=2492433\nWhile the bitmap approach may not have any explicit contention or locking, you may run into unexpected contention from the underlying cache coherency protocols where the bitmap is accessed by multiple CPUs on different sockets on the hardware.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24895155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24936557", "body": "Just out of interest, which platform was this on?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24936557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24936862", "body": "I mean, which OS, distro, version and so on... we develop primarily on Linux and haven't hit this so far.  I'm curious about the differences between your system and our primary platforms.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24936862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24936880", "body": "Can you also show the error that you saw?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24936880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24937963", "body": "What if you build it using the recommended build line from the readme?\n\n```\ngcc -O2 -o echo echo.c `pkg-config libphenom --cflags --libs`\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24937963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24938510", "body": "OK, got it: when we build it via our makefile, we set -DPHENOM_IMPL=1 and that causes unistd.h to be included.\nThanks for working through this with me :)\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24938510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24939013", "body": "FWIW, I also needed stdlib.h to make this build nicely:\n\n```\ndiff --git a/examples/echo.c b/examples/echo.c\nindex c6648f8..6def14a 100644\n--- a/examples/echo.c\n+++ b/examples/echo.c\n@@ -23,6 +23,8 @@\n #include \"phenom/listener.h\"\n #include \"phenom/socket.h\"\n #include <sysexits.h>\n+#include <unistd.h>\n+#include <stdlib.h>\n\n /* Implements an echo server.\n  * It reads CRLF separated lines and repeats them back to you with a prefix\n```\n\nIf you'd like to update your diff to have both, and then sign our CLA (see http://facebook.github.io/libphenom/index.html#README--Contributing) I can apply your commit to our tree.\n\nAlternatively, I can just push my local version that credits you in the commit message; I'm happy to do either; let me know which you'd prefer!\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24939013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24962502", "body": ":+1: \nI look forward to the results of the benchmarks; you can find me on IRC if you want to chat in realtime\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24962502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24976634", "body": "Thanks!\napplied these commits using `hub am https://github.com/facebook/libphenom/pull/17`\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24976634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24977035", "body": "Have you read the CK docs for these functions?\nhttp://concurrencykit.org/doc/ck_pr_fence_load.html\n\nIn thread creation, since we use __thread where available, we don't know the memory location of the ph_thread_t until the target thread has started, and then only that thread knows its location.\n\nWe want to pass that location back to the creating thread which needs to wait for it to show up.  We're busy waiting for the value, but need to ensure that store of the pointer completes and is observed properly by the creating thread, hence the fence operations.\n\nYou might find this article useful: http://queue.acm.org/detail.cfm?id=2492433\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24977035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25011321", "body": "Whoops!  Thanks!  We should really have some test coverage for buffers :-/\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25011321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25011800", "body": "applied using `hub am https://github.com/facebook/libphenom/pull/19`; thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25011800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25062543", "body": "Thanks for picking up the TODO.\n\nSome comments inline, but see below:\n\nThis isn't thread safe.  In the scenario where we are running multiple threads and both are registering memtypes and we cross the memtype size threshold, we'll race and probably lose a memtype.  In addition, if another thread is accessing `memtypes` concurrently with this operation, the `realloc` call can free the memory out from under the other thread.\n\nI don't want to add any locks in these allocator routines because that will introduce a perf bottleneck.\n\nThis is a bit of a thorny problem because the allocator is relatively low level.\n\nI'm inclined to say that we don't want to grow the memtypes array at those TODO sites; the alternative is to replace them with an error message that suggests that `memory_init` function be changed to double the memtypes_size if someone hits that limit.\n\nI think that 1024 is a pretty large number for these, so this doesn't feel terrible.\n\nYou might think that we should make this a config option; one problem with that is that our config system depends on our allocator and we can't load the config until the allocator is ready.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25062543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25063232", "body": "Some work towards this here:\nhttps://github.com/facebook/libphenom/commit/0d8723cd0fccb94e8a9f3292bddc8549adb3ff3a\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25063232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25096596", "body": "You can do this today like this:\n\n```\nph_string_append_buf(a, b->buf, b->len);\n```\n\nbut I can see that it would be nice to have a convenience function for this\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25096596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25186672", "body": "Couple of asks and we can this pulled in:\n- Could you adopt the ph_panic suggestion I made above?\n- I think you can tackle the `ph_memtype_register_block` case similarly:\n\n```\nmt = ck_pr_faa_int(&next_memtype, num_types);\n if (mt >= memtypes_size) {\n   ph_panic(\"You need to recompile libphenom with memtypes_size = %d\", 2 * memtypes_size);\n}\n```\n\nI think this is enough of an edge case that I don't mind that this has the side effect of incrementing next_memtype unconditionally.\n\nLastly: in order to take your efforts into our tree, I need you to sign our CLA per\nhttp://facebook.github.io/libphenom/index.html#README--Contributing\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25186672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25187929", "body": "https://github.com/facebook/libphenom/commit/007fc36b5e7266b3a51b2cc52290135ebbe30a4b\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25187929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25255177", "body": "I'm not quite sure I understand your question; In the revision I linked to, it shows how I added a function that you can use now like this:\n\n```\nph_string_append_str(a, b);\n```\n\nDocs are here: http://facebook.github.io/libphenom/index.html#string--ph_string_append_str\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25255177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25311555", "body": "Thanks; just a couple more minor comments, and also: I need you to sign the CLA so that I can get this applied to the tree.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25311555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25311637", "body": "Regarding SSE detection, we could use more of @sbahra's work from here: http://repnop.org/cpuid.html\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25311637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25311818", "body": "last bit in 4fe1692013051701b40c20c1f2e5022990100a4d\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25311818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25331083", "body": "3612c82170df75a959e6c464c49840ebc3223adf tackles this.  There may be a delay in reclamation of data created by short lived threads... that use case is one that should be avoided if you can.  If we find that we really need to support that and have reclamation be faster on average, we may want to look into having a thread speculatively recycle epoch records and issue a barrier on them periodically.  I don't think it's worth tackling now, so let's close this issue as good enough and we can revisit if something more urgent comes up.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25331083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25331265", "body": "applied using `hub am https://github.com/facebook/libphenom/pull/25/`; thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25331265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25338750", "body": "Can you run the test under gdb?\n\n```\n$ gdb ./tests/dns.t\n(gdb) run\n```\n\nThen when it faults:\n\n```\nthread apply all bt full\n```\n\nBecause of the way that the test works, I need to see the output from the test too, to see where it is failing.\nIt should look something like this:\n\n```\n$ ./tests/dns.t\n1..18\nok 1 - info->result == t->result\nok 2 - a.test.phenom.wezfurlong.org -> [127.0.0.4]:80\nok 3 - info->result == t->result\nok 4 - aaaa.test.phenom.wezfurlong.org -> [::a:a:a:a]:80\nok 5 - info->result == t->result\nok 6 - bbbb.test.phenom.wezfurlong.org: expected fail: 'nodename nor servname provided, or not known' got 'nodename nor servname provided, or not known'\nok 7 - expected aaaa lookup to succeed: Successful completion\nok 8 - aaaa.test.phenom.wezfurlong.org == aaaa.test.phenom.wezfurlong.org\nok 9 - right addr\nok 10 - expected mx lookup to succeed: Successful completion\nok 11 - resp->num_answers 2 == 2 2\nok 12 - a.test.phenom.wezfurlong.org == a.test.phenom.wezfurlong.org\nok 13 - 10 10 == resp->answer[0].priority 10\nok 14 - b.test.phenom.wezfurlong.org == b.test.phenom.wezfurlong.org\nok 15 - 20 20 == resp->answer[1].priority 20\nok 16 - expected a lookup to succeed: Successful completion\nok 17 - a.test.phenom.wezfurlong.org == a.test.phenom.wezfurlong.org\nok 18 - right addr\n# ELAPSED: 101ms\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25338750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25338848", "body": "Couple of things:\n- Can you give me an example URL in the docs that demonstrates the issue?\n- Can you wrap that code so it fits in less than 80 characters?\n- Your name in the commits shows up as Administrator, can you fix that to reflect who you are? ;-)\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25338848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25339120", "body": "What does this output for you?\n\n```\nhost bbbb.test.phenom.wezfurlong.org\n```\n\nand:\n\n```\nping6 bbbb.test.phenom.wezfurlong.org\n```\n\nin the gdb session, when it faults, can you do this:\n\n```\nframe 2\nprint *info\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25339120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25339415", "body": "The good news is that this is just the test case being unhappy.\n\nThe bad news is that your system resolver is returning invalid information about `bbbb.test.phenom.wezfurlong.org` (it has no DNS entries: you should not be seeing the 220.250.64.23 result), and this is what is confusing the test.\n\nI'd be concerned about bogus data coming back from my DNS if I were you; are you using a service like OpenDNS that might munge the results?\n\nI think this code change will avoid the segfault, but the test will still fail because of your faulty DNS:\n\n```\n$ git diff\ndiff --git a/corelib/string.c b/corelib/string.c\nindex 233de87..6e65824 100644\n--- a/corelib/string.c\n+++ b/corelib/string.c\n@@ -221,7 +221,13 @@ bool ph_string_equal(const ph_string_t *a, const ph_string_t *b)\n\n bool ph_string_equal_cstr(ph_string_t *a, const char *b)\n {\n-  uint32_t len = strlen(b);\n+  uint32_t len;\n+\n+  if (b == NULL) {\n+    return false;\n+  }\n+\n+  len = strlen(b);\n\n   if (len != a->len) {\n     return false;\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25339415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25339569", "body": "That IP seems very sketchy:\n\n```\n$ curl 'http://220.250.64.23'\n<html>\n<head>\n<meta http-equiv=\"refresh\" content=\"0; url=http://59.151.106.150\" />\n</head>\n<body>\n</body>\n</html>\n\n$ curl -v http://59.151.106.150\n* About to connect() to 59.151.106.150 port 80 (#0)\n*   Trying 59.151.106.150...\n* connected\n* Connected to 59.151.106.150 (59.151.106.150) port 80 (#0)\n> GET / HTTP/1.1\n> User-Agent: curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8y zlib/1.2.5\n> Host: 59.151.106.150\n> Accept: */*\n>\n< HTTP/1.1 200 OK\n< Server: nginx\n< Date: Mon, 30 Sep 2013 06:12:51 GMT\n< Content-Type: text/html\n< Content-Length: 270\n< Last-Modified: Wed, 26 Jun 2013 01:29:04 GMT\n< Connection: keep-alive\n< Accept-Ranges: bytes\n<\n<html>\n<meta http-equiv=\"Content-Language\" content=\"zh-CN\">\n<meta HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=gb2312\">\n<meta http-equiv=\"refresh\" content=\"0.1;url=http://59.151.88.32/index.php?source=unicomdns\">\n<title></title>\n</head>\n<body>\n</body>\n</html>\n* Connection #0 to host 59.151.106.150 left intact\n* Closing connection #0\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25339569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25340277", "body": "ah, makes sense :)\nI pushed 66a16e7e6c4933421ca60b87391b6d7f9b6c046e for the null pointer check\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25340277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25382829", "body": "Ah, well, you'd need to fork the repo, make changes to your repo, push those changes to github and make a pull request\nTake a look at https://help.github.com/articles/fork-a-repo\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25382829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25383922", "body": "Thanks; almost there... the source for this is on master in `docs/phenom.js`.  This gets built by `php mkdoc.php` when you build libphenom.  Can you revise this pull request to reference the source and not the generated branch and I'll get it applied?\n\nThanks again!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25383922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25411596", "body": "Yep; see comments there; I'll close this one\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25411596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25415713", "body": "Cherry picked and squashed as f19444dc4b4206b033f1242bcc9b23f552af44d7\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25415713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25780942", "body": "Thanks!\n\nThere are a couple of issues with this pull request; I'll add some inline comments for the stylistic parts, but the biggest issue is that you need to re-sync your branch with facebook:master because you're far enough behind that neither github nor travis (which builds and runs tests for you and reports on them here in the pull request) can automatically handle your diff.\nWhat most folks do is make a separate branch for their pull request; that way the master branch in your fork can track the \"official\" master branch here more easily.  Take a read through https://help.github.com/articles/using-pull-requests for more info on this.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25780942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25825765", "body": "Your master branch is still lagging behind.  I think you need to do something like this:\n\n```\n$ git checkout master\n$ git pull https://github.com/facebook/libphenom.git master\n```\n\nto re-sync with the mainline.\n\nThen, make sure you have run:\n\n```\n$ ./autogen.sh\n$ ./configure\n$ make check\n```\n\nand that it completes without errors, then update your pull request.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25825765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25836995", "body": "I'm going to close this out so that I don't keep checking to see what the status is; I'd be happy to help you get the CLA resolved, and we can track your contribution with a separate pull request for the `ph_procfs_get_int` function or whatever else you cook up.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25836995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25837575", "body": "[weird: I thought I'd already submitted a comment on this one, so trying again]\n\nI've seen bstring before; there are elements of the same approach in the `ph_string_t` type and API, but one of the principle differences is that libphenom wants to avoid going to the heap allocator if possible, and if we do hit it, we want to track those allocations via memtypes.\n\nI don't think it makes sense to just take on the bstring guts (I think we're pretty similar anyway), and I find the naming of the bstring API functions to be pretty obtuse, but we could probably do with adding more string manipulation functions to libphenom.\n\nI'd like to re-interpret this issue as \"add more string manipulation APIs\" and ask you to help cook up the list of missing and useful functions; make sense?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25837575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25841806", "body": "Let's close this one in favor of https://github.com/facebook/libphenom/pull/33\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25841806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25911929", "body": "Git can be pretty difficult... this still isn't in a state where we can apply it because it has merge conflicts from the f2ad24da6cfd9fd3943200c2f40a1c2107aba64d commit on your master branch.\n\nI think the easiest thing to do is to delete your fork and re-fork the facebook/libphenom repo, then create a branch with your changes in it and submit the pull request.\n\nI'd also like you to add a test assertion that the string gets reversed to tests/string.c; for example create a string \"hello\", reverse it and assert that it is now \"olleh\".\n\nThanks for sticking with it!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25911929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25912157", "body": "closing in favor of https://github.com/facebook/libphenom/pull/34\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25912157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25984966", "body": "Getting closer! There's a build problem (see link to travis above).  There's also some whitespace/formatting issues that you should see get reported as a build problem when you run make (you need to have python installed locally for those to show up), and that should also get displayed on the travis build status once you've amended the header file to fix the issue above.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25984966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25985039", "body": "Closing in favor of https://github.com/facebook/libphenom/pull/35\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25985039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/26068180", "body": "Please address these issues; they should reproduce for you if you run make:\nhttps://travis-ci.org/facebook/libphenom/jobs/12372141#L535\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/26068180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/26068473", "body": "Thanks; good eye :)\nresolved in https://github.com/facebook/libphenom/commit/5c59fbba544c3b4c841851e6f0788abe7968c436\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/26068473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/26203153", "body": "We use Travis CI to build and run the test suite for all pull requests.  The build for this one is failing; the details are in the link I posted above and I'm including them here:\n\n```\ncorelib/string.c:467:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\ncorelib/string.c:468:  Missing space before {  [whitespace/braces] [5]\ncorelib/string.c:471:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\ncorelib/string.c:472:  Mismatching spaces inside () in while  [whitespace/parens] [5]\ncorelib/string.c:472:  Missing space before {  [whitespace/braces] [5]\ncorelib/string.c:478:  redundant return statement at the end of a void function  [readability/braces] [4]\n```\n\nYou should see these when you run make; if you don't, you should install `python` then re-run configure.\n\nWe treat these as a build error so that the build can tell you about stylistic problems that need to be fixed before we'll take the change.  We don't have a documented style guide (maybe we should?) but it seems simpler to automate the enforcement and saves us from writing a style guide and saves folks from reading it and further saves us from \"picking on\" specific parts of your pull request that don't conform.\n\nThe issues it raises are largely to do with the whitespace in your commits; whitespace is important for two reasons:\n- using it well aids in readability and cognition when glancing over the code, conversely, using it poorly is a hindrance\n- whitespace impacts diffing and merging tools.  Extraneous spaces can cause automated merges to fail and require manual intervention when managing code changes\n\nThe \"redundant return statement\" should just be removed.\n\nAlso: I really want to see a corresponding test for your string reversing function; I mentioned this on one of your earlier pull requests; it should be a trivial couple of lines you can add to `tests/string.c`.  We have these sorts of tests to help catch regressions that might occur later when someone refactors or changes something.  Hopefully it's pretty clear how to do that, but I'm happy to expand on how that works if you're unsure.\n\nThanks again; we're really close to getting this applied!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/26203153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/26203189", "body": "closing in favor of https://github.com/facebook/libphenom/pull/37\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/26203189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/26920289", "body": "143bd9b5ea5e78ecd100a96792d0e44bccbb5750 should take care of this\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/26920289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/26920414", "body": "sorry, 7081dc3c00d7e6acf12fe6bddcf0176ea3e93ae9 :)\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/26920414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/27633844", "body": "What OS and Distribution are you using?\nDo you need to install an openssl development package too?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/27633844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/27633860", "body": "Presumed fixed; closing due to lack of feedback\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/27633860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/28413540", "body": "See this: http://stackoverflow.com/a/3975683/149111\nHave you tried:\n\n`sudo apt-get install libssl-dev`\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/28413540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/28413943", "body": "Why can't you install libc-ares?  What's your use-case?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/28413943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/28462596", "body": "Not at this time, no: it is required to build.  You can install it and not use it.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/28462596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/28509838", "body": "Duplice of #40 \n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/28509838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/28509924", "body": "What version of gcc do you have?  Can you install a newer version of GCC?\n\nTry using the --enable-lenient configure flag\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/28509924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/29141230", "body": "trying to build and use your own OpenSSL library is a bad idea.  I'm not going to troubleshoot problems with your own OpenSSL build.\n\nI downloaded Ubuntu 10.04 32-bit and tried to build libphenom.\nI had to install the following packages:\n\n```\nsudo apt-get install git-core automake libtool libc-ares-dev pkg-config libssl-dev\n```\n\nI ran into an issue with the version of cares being too old on this system, so I pushed 99206cff12129e8932c2e7aa550555b4b88cb6af to handle that more gracefully.\n\nlibphenom builds and passes its tests successfully on this system.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/29141230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/29141262", "body": "_please_ stop opening multiple issues for the same problem.\nDuplicate of #39 \n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/29141262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/29141267", "body": "_please_ stop opening multiple issues for the same problem.\nDuplicate of #39 \n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/29141267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/29141285", "body": "FWIW, I just pushed 99206cff12129e8932c2e7aa550555b4b88cb6af which makes libcares optional\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/29141285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/29369335", "body": "Can you provide a `bt full`?  Curious about the value of `elem`.\n\nCould you reduce this problem to a test case?  For example, can you modify tests/hashtable.c so that it reproduces this problem and then paste your modified version of that file?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/29369335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/29412409", "body": "Resolved by the attached commit; thanks for reporting this!\n\nAlso note: the hash table will work more efficiently for you if you call `ph_ht_init` and tell it that you have such a large number of items.  You're hinting at 10k items but are really storing a massive amount; what happens at runtime is that each time the table starts to get full, it will be rebuilt at twice the size and rehashed.  If there are many powers-of-2 between 10k and the end number of elements then it will rebuild and rehash that many times.\n\nIf you don't know the final size at the time that you call `ph_ht_init()`, but find out a bit later on, you can call `ph_ht_grow` (http://facebook.github.io/libphenom/#hashtable--ph_ht_grow) to provide a new hint and have the table resize just once and then your inserts will take less time compared to not providing this hint.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/29412409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31133788", "body": "I'm closing this pull request due to inactivity.  If you've got time to address the issues and resubmit, that would be great!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31133788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31134960", "body": "Solaris (or more specifically, Illumos, but basically the same) yields this:\n\n```\nIn file included from /usr/include/sys/types.h:33:0,\n                 from include/phenom/defs.h:55,\n                 from thirdparty/tap/tap.c:28:\n/opt/gcc-4.6.3/lib/gcc/i386-pc-solaris2.11/4.6.3/include-fixed/sys/feature_tests.h:360:2: error: #error \"Compiler or options invalid for pre-UNIX 03 X/Open applications        and pre-2001 POSIX applications\"\n```\n\nThis environment only goes as far as `_XOPEN_VERSION=600`; if the value is higher, it doesn't consider that XPG6 is supported and raises that error.\n\nLooks like Solaris only goes as far as `_POSIX_C_SOURCE=200112L`\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31134960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31135496", "body": "This patch on top of this pull request makes things happy on my Illumos VM, and builds and runs on Darwin and Linux; can you verify on FreeBSD and then amend your pull request? Thanks!\n\n```\ndiff --git a/include/phenom/defs.h b/include/phenom/defs.h\nindex f0bddb3..006f215 100644\n--- a/include/phenom/defs.h\n+++ b/include/phenom/defs.h\n@@ -33,9 +33,14 @@\n # define _REENTRANT\n #endif\n #define __EXTENSIONS__ 1\n-#define _XOPEN_SOURCE 700\n #define _BSD_SOURCE\n+#ifdef __sun__\n+#define _XOPEN_SOURCE 600\n+#define _POSIX_C_SOURCE 200112L\n+#else\n+#define _XOPEN_SOURCE 700\n #define _POSIX_C_SOURCE 200809\n+#endif\n #define _GNU_SOURCE\n #define _DARWIN_C_SOURCE\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31135496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31136017", "body": "big diff!  I'm leaning more to unbundling CK from the tree than adopting a different way to track the branch; when I originally pulled it in to the tree it was because it was easier to deal with some build integration problems, but I think that CK has made progress in that area now.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31136017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31136226", "body": "Regardless of the status of #47, I think this pull request is righteous\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31136226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31136390", "body": "Thanks!\n\nApplied using:\n\n`hub am https://github.com/facebook/libphenom/pull/45`\n\nhttps://github.com/facebook/libphenom/commit/be110fbfa83bb997e0fa5bf08325f804e4300ee6\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31136390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31136589", "body": "Cygwin isn't a priority for libphenom at this time so we're not going out of our way to reproduce and resolve this.  We'll happily take patches to improve the port on this platform, but are not going to any significant efforts to make that happen.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31136589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31138403", "body": "Doesn't hurt anything to remove it, so I killed it; thanks :)\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31138403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31139816", "body": "I see these occasional timer interval failures in my fbsd VM and had chalked them up to VM timing issues.\nThe problem that the test is detecting is that we're late in dispatching something that should trigger approximately every 100ms.\n\nI don't know (because I haven't delved in!) whether this lateness is due to timer granularity in the system, or whether the timer is being rolled into the next 100ms window by the `Ensure that we never schedule in the past` logic in `timerwheel.c`.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31139816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31143668", "body": "I haven't run into `AC_USE_SYSTEM_EXTENSIONS` before.  I think integrating it could be slightly tricky because the defines need to be set before making any other includes.  We have `include/phenom/feature_test.h` for some features we detect at configure time; if we can persuade the relevant extensions to show up there (we defer all the others to autoheader and I'm not sure how/if we can put them in one and not the other), we could then include that at the top of `include/phenom/defs.h` unconditionally.\n\nI think we roll that into a separate pull request as a nice to have, or maybe just leave things be, as what we have now that we've applied your patch, works on the major platforms that most people care about.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31143668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31145022", "body": "Instrumenting shows this:\n\n```\n./tests/timer.t\n1..8\nok 1 - PH_OK == ph_nbio_init(0)\nok 2 - PH_OK == ph_job_init(&timer)\nok 3 - PH_OK == ph_job_set_timer_at(&timer, last_tick)\n1387834193.788 err: phenom:sched/0 timer=0x7fffffffd648 due={1387834193,788433} next={1387834193,888433}\n1387834193.788 err: phenom:sched/0 due < next so make due = next\n1387834193.788 err: phenom:sched/0 diff=0 (bucket 0)\n1387834193.897 err: phenom:sched/0 tick\nok 4 - 100ms resolution: diff=109\n1387834193.897 err: phenom:sched/0 timer=0x800a6d088 due={1387834198,788433} next={1387834193,988433}\n1387834193.897 err: phenom:sched/0 diff=48 (bucket 0)\n1387834193.897 err: phenom:sched/0 timer=0x7fffffffd648 due={1387834193,997860} next={1387834193,988433}\n1387834193.897 err: phenom:sched/0 diff=0 (bucket 0)\n1387834194.008 err: phenom:sched/0 tick\nok 5 - 100ms resolution: diff=110\n1387834194.008 err: phenom:sched/0 timer=0x7fffffffd648 due={1387834194,108020} next={1387834194,88433}\n1387834194.008 err: phenom:sched/0 diff=1 (bucket 0)\n1387834194.117 err: phenom:sched/0 tick\n1387834194.227 err: phenom:sched/0 tick\nnot ok 6 - 100ms resolution: diff=219\n#     Failed test (tests/timer.c:record_tick() at line 38)\n1387834194.227 err: phenom:sched/0 timer=0x7fffffffd648 due={1387834194,327806} next={1387834194,288433}\n1387834194.227 err: phenom:sched/0 diff=1 (bucket 0)\n1387834194.336 err: phenom:sched/0 tick\n1387834194.447 err: phenom:sched/0 tick\nnot ok 7 - 100ms resolution: diff=219\n#     Failed test (tests/timer.c:record_tick() at line 38)\nok 8 - PH_OK == ph_sched_run()\n# Looks like you failed 2 tests of 8.\n# ELAPSED: 660ms\n```\n\nlooks like both of the late cases are when `diff > 0` in `compute_list`\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31145022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31148188", "body": "I'm not 100% clear on why this isn't behaving.  My best guess is that we're hitting a combination of factors:\n- kqueue seems consistently 10ms late in my VM (maybe relevant: http://unix.derkeiler.com/Mailing-Lists/FreeBSD/hackers/2012-07/msg00307.html)\n- the due time for timeouts is based off `ph_time_now`, which is the current `gettimeofday` from the scheduler wakeup, and NOT the wheel tick times that the wheel intervals are based on\n- If the timer due time is sufficiently far away from the wheel due time, and kqueue is late, we could miss a tick and roll into the next one\n\nI tried making the kevent setup for the timer use 1/2, 1/4, 1/8th granularities to make sure that we're waking up often enough, and they all tend to miss the precise due time, even when `diff==0`, and we can still be late.\n\nIt's also possible that the timerwheel code is subtly wrong, but it is weird that we only see these failures on freebsd\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31148188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31149038", "body": "The code we have in-tree matches http://concurrencykit.org/cgit/cgit.cgi/ck/commit/?id=1237681a71ed24a9f66ccd541605bd14cd5d6253\n\nAny differences we have are encapsulated in the logic that we use to configure CK in configure.ac; I think we \"just\" need to remove the code that sets up CK and replace it with code that extracts the relevant compilation flags from its .pc file.\n\nIf anything we need is missing from the .pc file, we'll need to get that added in the upstream CK before we can unleash the upgrade on folks.\n\nBig API changes in CK could be an issue with distros; I noticed that homebrew now has a CK recipe.  @sbahra may need to get more aggressive at bumping those more significant version numbers to reduce pain and/or allow multiple versions to co-exist.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31149038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/32551493", "body": "I'm going to close this pull request since we agreed that we want to move towards unbundling\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/32551493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/33158580", "body": "Can you expand on how this is used?  When it comes to application specific helpers like this, I generally think that it is best that we have some explicit function calls to manage the data; that makes it easier to discover and learn how to use it because it is easier to add a function to the docs.\n\nIs the data effectively a constant struct that you initialize and pass in at `ph_listener_new` time?  Is it expected to be mutated throughout the lifetime of the process?\n\nWondering if we should label this as `acceptor_data` and add `ph_listener_(get|set)_acceptor_data()` accessors for it.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/33158580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/33159207", "body": "That would be great; also great to include some docs with the declaration of the accessor functions in the header file, and super extra points for including an example of creating a listener and setting the data, then consuming it in the acceptor function\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/33159207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/33160254", "body": "in the header docs is best, because that will show up at http://facebook.github.io/libphenom when we build and push the docs.\n\nTake a look at http://facebook.github.io/libphenom/#string--ph_string_iterate_utf8_as_utf16 for an example; the source for that is in `string.h`\n\nThe docs should build locally as part of `make` if you have PHP available; you can then open docs/index.html in a browser to see how they look\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/33160254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/34295591", "body": "Sorry; I missed that you updated this.  Looks good except for one tiny nit; we're using `type *var` rather than `type* var` throughout the rest of the codebase; please tweak to match, and I'll land this :-)\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/34295591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35162329", "body": "What benefits would we observe vs. the burden of pulling in and maintaining an external autoconf library?\nWhat we have right now works well on the platforms that are currently supported\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35162329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35163099", "body": "I have reservations about doing this globally because it often makes their consumption a bit more difficult / tedious from C++, particularly where we're really defining bit fields or masks, but would welcome patches to tidy up the more obviously self-contained parts\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35163099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35163460", "body": "A lot of autoconf is geared up for systems that are no longer in common use.  If we had a large community of users of those systems for libphenom it would be worth the effort to revisit and improve the configuration scripts, but given that that is not currently the case, and that what we have at the moment appears to be sufficient for the major platforms, I don't see a need to change this in the immediate future\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35163460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35174233", "body": "Sorry for the delay; pulled in via `hub am https://github.com/facebook/libphenom/pull/50`.\nThanks for your contribution!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35174233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35174420", "body": "`tests/dns.c` successfully exercises DNS resolution in a test program.  Phenom is largely built around having a running IO scheduler; building subsystems to work in both blocking and non-blocking modes just for testing purposes seems like extra effort that may not have a lot of pay-off.\n\nI'd be happy to chat about how you're testing and how else you'd like to use these things to see if there are better ways or some adjustments we could make to facilitate that\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35174420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35174496", "body": "I'm not 100% sold on stopping and re-starting the scheduler; unlike other eventing libraries, phenom has more of a global view of the world with its scheduler guts and assumes that the scheduler will be running for the life of the program.  Other libraries don't manage so holistically and need to provide more explicit control of the scheduler loop.\n\nThere are pro's and con's to both approaches.\n\nPer my comments in #52, I don't think this architecture gets in the way of testing but I'm likely missing something about your approach that we should discuss :)\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35174496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35423242", "body": "Can you share the errors that you hit without these changes?\nMy ubuntu vm is 12.04 and I haven't needed these yet, so I suspect that something else might be up (maybe compiler or glibc version or something)\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35423242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35424694", "body": "src/http.c isn't part of libphenom... try moving the phenom includes to the top of that file?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35424694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35426395", "body": "Are you building using `pkg-config libphenom --cflags`?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35426395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35434190", "body": "The intent is that you `#include <phenom/defs.h>` as the first include so that you can correctly configure the compilation environment.  You shouldn't need to manually include stdint.h or any of the other includes that it pulls in.\nWe should make this clearer in the docs; it is implied in the example at http://facebook.github.io/libphenom/index.html#README--Quick-Start-for-using-the-library but we could do with making that more prominent\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35434190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35434746", "body": "We say it here, but you have to know that you want to read it to discover it ;-)\nhttp://facebook.github.io/libphenom/index.html#defs\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35434746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35435276", "body": "Applied via `hub am https://github.com/facebook/libphenom/pull/56`; thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35435276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/36707878", "body": "Closing this until we hit a situation where we need to revisit.  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/36707878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/36708046", "body": "Could probably do more in terms of docs, but at least we've made a start with the above commit\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/36708046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/36708075", "body": "I think this is good; closing out\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/36708075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/36708095", "body": "I think we're good here too\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/36708095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/36708145", "body": "are you considering submitting some patch(es) to this effect, or should I close this issue?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/36708145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/39047678", "body": "In making this change, I realized that it is still convenient to free this for clients, so I'm making it an option that you can set on the sock; the default is preserve backwards compatible behavior.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/39047678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/39863658", "body": "See also https://github.com/facebook/libphenom/pull/46 in which we thought that it would make sense to unbundle CK to make this a bit easier, or at least, make these pull requests smaller and easier to review :-)\n\nDo you have the cycles to do the unbundling?  I think the ideal path forward here is:\n1. Put up an unbundling pull request that just removes the bundled CK library, and revises the configure script to locate CK via pkg-config.  It should also check the version of CK to make sure it is compatible (sounds like < 0.3.3).  I think this one is conceptually a simple diff, maybe just a bit fiddly (obtain the \"older\" CK, install it somewhere like /tmp/ck-0.3.X, then tweak configure to use that one)\n2. Put up a separate pull request that handles the upgrade in CK version and the ck_ring or other API changes\n\nI'm on PTO for a bit so will be online sporadically, but I'm happy to assist with this when I get my hands on a keyboard; that probably means mostly reviewing things but depends on how badly I suffer coding withdrawal ;-)\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/39863658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/39863961", "body": "Regarding benchmarks, there's `tests/bench/run-pipes.php` that repeatedly runs some benchmarks with varying concurrency and records the data then produces some nice charts using `R`.  You can use that with the before/after to see if there are obvious regressions.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/39863961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/39864128", "body": "and thanks for looking at this! :)\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/39864128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/40862781", "body": "I've been playing with this tonight; it looks good; thanks for doing this!\n\nI think we need the changes in this gist thought to wrap things up:\n\nhttps://gist.github.com/wez/11076200\n\nWhat this does:\n- Remove the `--enable-rtm` configure arg (was overlooked in your main patch)\n- Adds a `pkg_config_libs` function that should be used to obtain the --libs from pkg_config (see below)\n- Augments the travis scripts to download and install CK 0.3.2\n\nThe `pkg_config_libs` function does some mild trickery to make the rpath work sanely for folks that have installed libs outside of the default load or search paths; this is really just a slight refactoring of the equivalent logic I had in place for libc-ares.  I've needed this in the past but haven't been able to prove that this is strictly needed in my linux VM as it appears to default to static linkage... when linking against the .so, it is desirable to bake the rpath in so that we don't need to set LD_LIBRARY_PATH to find CK.\n\nThis all stemmed from having this problem on OS/X; the solution for OS/X is different because we would need to modify CK to set the `install_name` to use a prefix of `@rpath` (or just set it to the full install location).  Since we can't go back in time and fix that for CK 0.3.2, I installed CK globally to test this and ignored the problem for now.\n\nThe travis stuff is untested on travis, but seems to work in my ubuntu VM; to test it locally:\n\n```\n./travis/deps.sh\n./travis/run.sh\n```\n\nDo you think you could amend the gist into your pull request and update it?\n\nThat should trigger a travis build so we can prove that this is all good; travis is supposed to show that we're green on the pull requests, but for whatever reason, it doesn't show that the build is bad on this request.\n\nThe pull request page itself shows that the commits so far don't build though:\n\nhttps://travis-ci.org/facebook/libphenom/pull_requests\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/40862781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/40873140", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/40873140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/40876730", "body": "Tested the travis build bits part of this myself: looks good here:\nhttps://travis-ci.org/facebook/libphenom/jobs/23342467\nI'll take your changes and push them with tweaks; thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/40876730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/40876855", "body": "closing in favor of #60 \n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/40876855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/40876890", "body": "Pushed; thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/40876890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/40878519", "body": "Thanks!  I pushed this change and the corresponding adjustment to the travis deps, and took care of the -Werror=inline bit that I mentioned above\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/40878519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/40878964", "body": "Removed.  I'll defer the getdnsapi side of this for now, and revisit if/when there is more interest.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/40878964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/40880450", "body": "Thanks for keeping me honest :-)\n\nI just looked through this and it turns out that we already did this for kqueue anyway, so there is no additional work required.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/40880450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/40951187", "body": "applied via `hub am`, landed as 99abee7da7b66091a03234c4bd2d83d82312f50a\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/40951187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/45977052", "body": "Pushed as 883c11fd83fc3d2bcf496dd8d07d497c24cacb43\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/45977052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/50294739", "body": "Hi Jonathan,\n\nThanks :-)\n\nWe use jemalloc exclusively in our primary use of libphenom; we use jemalloc as a malloc replacement so no hooks are necessary; `malloc(3C)` and so on are the jemalloc versions of those functions.\n\nHookable allocators can add complexity and overheads that often prove to be more trouble than they're worth.\n\nFor example: having two different allocators in the same process space, especially modern caching allocators, makes it more difficult to for either of them to recognize low memory conditions and return memory to the system, or to make theoretically \"free\" memory that is cached in one allocator available to the other one.\n\nAnother source of issues with mingling allocators is ensuring that they are atomically applied early enough.  For example, if the hook is simply a couple of global function pointers that can be changed at runtime, any memory allocations or frees that occur across the boundary of changing those functions becomes potentially dangerous: freeing memory across the boundary with the wrong allocator can lead to heap corruption or segfaults.  The risk of this is higher if the application uses ctor/dtors to register initialization and finalization functions per source module (as libphenom does), because the ctors can run in an unpredictable order, and have dependencies that require allocating memory.\n\nI'm not opposed to this kind of thing, having wished that many libraries made this more transparent in the past, but want to make sure that the end goal can't be more easily accomplished elsewhere in the application before taking this complexity into libphenom.\n\nSo, with that big fat disclaimer out of the way: I welcome your feedback on making libphenom better for your use-case, especially if you're willing to lay down code too.  Before we get to coding, can you tell me a bit more about how you're using jemalloc and why using it as a global malloc replacement doesn't work for you?  How do you envision the allocator override working?\n\nThanks!\n\n--Wez.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/50294739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/50295612", "body": "Sorry for the overly long delay in responding.\n\nWe haven't gotten around to writing the code that checks and enforces this limit yet.  If you've got some spare cycles and want to submit a pull request, I'd be happy to review and work through getting it into libphenom.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/50295612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/51232277", "body": "We chatted about this on IRC, I'm just leaving some summary info here in case others stumble across this and wonder about the resolution.\n\nThe assert is most likely triggered by the unconditional 50ms scheduled disconnect job.  The recommended approach for this is to move to a `WRITING` state when you know that you are waiting for the write buffer in the sock to drain.\n\nYou can check to see if it has drained using logic like this in your sock callback function:\n\n```\nif (state == WRITING && ph_bufq_len(sock->wbuf) == 0) {\n  // We have drained our write buffer\n}\n```\n\nif you want to detect when you can safely tear down the sock and have other dependent/related jobs that might be in flight, particularly if you are using `ph_sock_wakeup` to chain them together, you will want to use logic like this:\n\n```\nif (state == WRITING && ph_bufq_len(sock->wbuf) == 0) {\n  // We have drained our write buffer, is it safe to shutdown?\n  if (!ph_job_has_pending_wakeup(&sock->job)) {\n     // We know that we have no other work in flight and that we are done sending\n     // all of our data, so we can tear things down\n     ph_sock_shutdown(sock, PH_SOCK_SHUT_RDWR);\n     ph_sock_enable(sock, false);\n     ph_sock_free(sock);\n     return;\n  }\n}\n```\n\nRegarding this particular example of sending a payload to the client, I recommend avoiding creating additional timers; you don't really need them here and the workload is begging to run in a thread pool instead, so that the local file io doesn't block the nbio scheduler threads and impact overall service throughput.\n\nHere's how I would approach this use case; in your sock dispatcher function, the logic would be something like this:\n\n```\nif (state == READ_REQUEST) {\n   if (read_and_parse_request(...)) {\n      // we know enough to dispatch it\n      file_read_job = ph_job_alloc(&file_read_def);\n      file_read_job->data = {whatever state we need};\n      // disable the sock events while we wait for the file io stuff to complete\n      ph_sock_enable(sock, false);\n      ph_job_set_pool(file_read_job, file_read_pool);\n      return;\n   }\n   // need more data\n   return;\n}\nif (state == WRITE_QUEUED) {\n   // we're waking up after the file read job is done.  Let's make sure\n   // we're properly enabled\n   ph_sock_enable(sock, true);\n   state = WRITING;\n}\n\nif (state == WRITING) {\n   // Stuff I pointed out above\n}\n```\n\nthe file_read_def should be a thread pool job definition; you should pre-create the thread pool\nduring application initialization:\n\n```\nstruct ph_job_def file_read_def = {\n   do_file_read,\n   ...\n};\n\n// These are application defaults for the queue size and number of threads,\n// they can be overridden at deploy time using the json configuration file\nfile_read_pool = ph_thread_pool_define(\"fileread\", 10240, 8);\n```\n\nand in do_file_read:\n\n```\nstatic void do_file_read(ph_job_t *job, ph_iomask_t why, void *data) {\n   request_state *reqstate = data;\n\n   ph_stream_t *f = ph_stm_file_open(.....);\n   ph_stm_printf(reqstate->sock->stream, \"stuff\");\n\n   ph_stm_close(f);\n\n   reqstate->state = WRITE_QUEUED;\n\n   ph_sock_wakeup(reqstate->sock);\n\n  // we're done with this file read job\n  ph_job_free(job);\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/51232277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/53101070", "body": "applied using `hub am https://github.com/facebook/libphenom/pull/69`, thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/53101070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/54073434", "body": "Hi Jonathan,\nNo problem re: delay, just glad that you solved this and happy to have helped :-)\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/54073434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/56237007", "body": "Won't fix, sorry, it's not worth the effort\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/56237007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/62762650", "body": "Hi @mattus, thanks for contributing!\n\nPlease review and sign the CLA (details in the comment above) and we can get this taken in and pushed.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/62762650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/62841286", "body": "are you building that from a homebrew recipe?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/62841286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/62842194", "body": "Can you include the actual commands that are being used to build this?\ncloning and build works fine here.\nThe error message is that the linter thinks that the include guards don't match; looks like something clever might be going on with the cwd when make is run, but I can't reproduce and resolve the issue without knowing how it is really being invoked.\n\na workaround is likely `make PYTHON=true` to cause the linter to appear to pass\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/62842194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/62910058", "body": "I pushed a commit to address this.  What was happening is that brew was removing the .git dir and that confused the linter about where the root of the repo was.  If I copy your formula locally, I can `brew install --HEAD libphenom` with it  (actually, I changed it to only run the lint step as it was quicker, and that was all that I tested)\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/62910058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/63149582", "body": "Thanks!\n\nPushed as 7360fea43b49fd89a1a8c02e3f41eefa383b81c1 and 22d5c0952b60be40073b0dd1874a37f6cf55b4eb\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/63149582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/78081803", "body": "Hi @tyrellj, thanks for your interest!\n\nThe counter stuff works by keeping counter updates local to each thread.  Each thread-local counter bump also increments a thread local sequence number.\n\nWhen a reader thread wants to consume the current counter value, it samples the sequence number of a given thread local counter block before it fetches the counts (non-atomically), and then compares the sequence number again at the end.  If there is an inconsistency it means that the counter was bumped during the fetch and will need to be re-fetched.\n\nThis technique is similar to sequence locks (http://concurrencykit.org/doc/ck_sequence.html) except that counter updates don't have a write-begin; in practice, the stronger atomics of ck_sequence imposed a performance hit and were not necessary; since the overall sum of counters across threads is an approximation anyway, it is acceptable if we rarely read an individual counter value during a modification cycle and don't notice that the sequence number was bumped.\n\nWe moved away from directly using ck_sequence in c2753c2154a0cffc0bd70e8f28dd0ea884aab4fd due to strong evidence of a perf gain in some heavy profiling runs.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/78081803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/85166663", "body": "Thanks!\nApplied via `hub am https://github.com/facebook/libphenom/pull/74` and pushed to the gh-pages branch\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/85166663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/94478589", "body": "Can you include a paste of the build output?  If it loops forever it will be a big paste, so please just collect one loop of it (enough that we can see where it starts to repeat).\n\nIt's unlikely that the build is really looping, but perhaps more likely that you are using a networked filesystem and the clocks on your build host and on the system hosting the filesystem are out of sync, causing `make` to try to build it again.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/94478589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/101807964", "body": "We just pushed 4d56a10b2c7f36a169400a85dbb76397bc1f11d5 to tackle a slightly different but related issue.  I'm not sure if this covers exactly the case that you're experiencing, but it may be helpful.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/101807964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/127779519", "body": ":-/\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/127779519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/128032171", "body": "We're definitely open to hooking this up, but don't have immediate plans to do so.  Patches are welcomed!  I'm going to close this issue in the meantime\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/128032171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/128032509", "body": "https://github.com/facebook/libphenom/commit/4d56a10b2c7f36a169400a85dbb76397bc1f11d5 made the situation here a bit better, but we haven't gone for the super low level aspect of this.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/128032509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/140968108", "body": "Take a look at the requirements section of the docs for a list of dependencies and a link to Concurrency Kit:\n\nhttp://facebook.github.io/libphenom/#README--System-Requirements\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/140968108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/157221643", "body": "Good catch!  Would you like to submit a short PR to remove it?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/157221643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/157230458", "body": "Thanks!\nApplied via `hub am https://github.com/facebook/libphenom/pull/78` as 6f4094821ef32a27d79ee2b9b11a42631728c1e7\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/157230458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/157230486", "body": "Looks perfect; thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/157230486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/175923692", "body": "Pushed as d187b1163ee9ed05f632dff014e6aff014055963 and 6c14c49bd5e864285cb496c6e0c207d9ca6599cc\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/175923692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/325422269", "body": "I don't believe that anyone has done any work to get this building with CK > 0.5.0.\r\n\r\nIf you just want to get things to compile, I'd suggest checking out the older branch/tag of concurrencykit.\r\n\r\nIf you'd like to submit a PR to adjust libphenom to use the current CK version, that would be welcomed!", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/325422269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/comments/5291391", "body": "I'm going to make a pass to follow-up for the other platforms in the near future; if you want to file an issue to keep me honest, feel free :)\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/comments/5291391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6425024", "body": "I think this should be:\n\n```\n}\nif (status != 0 && rac->s != -1) {\n  close(rac->s);\n}\n```\n\nso that we catch both connection errors and allocation failures and clean up the socket in both cases\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6425024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6453127", "body": "We can't use FILE in phenom: Solaris FILE's can only represent fds whose value fits in 8bits and we're intended to run with many thousands.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6453127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6453164", "body": "fscanf (you'd probably switch this to sscanf due to the FILE comment above) has much more overhead than strtol.\nIf you want to cover this case off, I'd be amenable to a pull request that handles the various error scenarios.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6453164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6453223", "body": "I meant: handles the various error scenarios in strtol, rather than switch to the scanf family of functions\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6453223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6505912", "body": "rather than hard-coding to 8, please make this align to `CK_MD_CACHELINE`.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6505912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6505918", "body": "I think we can just put these fields in `struct mem_type` and save some extra de-referencing, both cognitive and in terms of CPU activity.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6505918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6505938", "body": "prefer `ph_panic` instead of `abort` so that we can capture both a human generated reason and a stack trace\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6505938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6505958", "body": "make sure you apply this same logic (eg: discounting the number of bytes allocated to 0) in the free code too, otherwise the bytes counter will skew\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6505958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6505961", "body": "fixup the number-of-bytes adjustment to 0 down here if this is in our preallocated region\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6505961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6564126", "body": "in the event that realloc() fails, this will wipe out the memtypes array and lead to a crash.\nThe safe pattern is to use a temporary variable and do something like this:\n\n```\nuint32_t newsize = memtypes_size * 2;\nstruct mem_type *newtypes = realloc(memtypes, newsize * sizeof(*memtypes));\nif (newtypes) {\n    memtypes = newtypes;\n    memtypes_size = newsize;\n    return true;\n}\nreturn false;\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6564126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6564128", "body": "let's have this return a boolean to indicate success/failure\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6564128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6564139", "body": "can we do something like `UINT_MAX / 2` instead of the hard-coded value here?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6564139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6564156", "body": "indentation seems weird; should be 4 spaces\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6564156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6564158", "body": "indentation here too\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6564158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6645691", "body": "Can you use `ck_pr_faa_8` (see http://concurrencykit.org/doc/ck_pr_faa.html) and then make this like the other checks in the rest of this pull request?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6645691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6645694", "body": "please wrap this to 80 characters :-)\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6645694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6645695", "body": "same comment here about line length!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6645695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6673311", "body": "if we're generating the right stuff in the php, do we need this in the JS?\nI'd prefer to have just one place that canonicalizes the data and it feels like that should be in mkdoc.php\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6673311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6673371", "body": "should this just be:\n\n```\n   'raw_content' => htmlspecialchars($incfile, ENT_QUOTES, 'utf-8'),\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6673371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789058", "body": "The prototype and a documentation comment need to go in `include/phenom/string.h`; this is needed for two reasons:\n- The compilation flags for libphenom are intentionally very strict: without a function prototype in the header, the build won't succeed.  Function prototypes are very important on 64-bit platforms, as they affect register allocation and missing prototypes can result in broken executables\n- The docs on the website are built from the documentation comments in the header.  Without the docs, it is difficult for folks to discover and use your new API functions.\n\nTake a look at the other docs in `include/phenom/string.h` for examples on the convention and styling of docs\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789061", "body": "Returning the string itself isn't especially useful in procedural code, so I'd rather that this simply have a `void` return type\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789065", "body": "please remove this blank line: the opening brace on its own line is enough of a visual break\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789068", "body": "prefer whitespace around operators:\n\n```\n  uint32_t i = 0;\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789072", "body": "space around operators here too.  The parenthesis are redundant, so please remove them:\n\n```\n  uint32_t j = str->len - 1;\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789076", "body": "space after the if and around operators, but no redundant space.  Pull the opening brace up to this line (provided it fits in 80 characters):\n\n```\n  if (str->len == 0) {\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789082", "body": "remove parentheses from the return statement; prefer this:\n\n```\n    return str;\n```\n\nhowever, if we're making this a void function, that line is simply `return;`\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789083", "body": "whitespace and brace placement:\n\n```\n  while (i < j) {\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789086", "body": "remove redundant blank line\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789093", "body": "whitespace around operators for these next few lines:\n\n```\n    str->buf[i] = str->buf[j];\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6860745", "body": "this line is associated with `ph_string_printf` above; by putting ph_string_reverse in the middle of this declaration, the build is unhappy:\nhttps://travis-ci.org/facebook/libphenom/jobs/12314709#L379\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6860745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/11394915", "body": "I think this one is better expressed as `while (ph_unlikely(!ck_ring_enqueue(`\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/11394915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/13738786", "body": "facepalm\nGood catch :-)  Was that the root cause of the issue we discussed on IRC?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/13738786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "tyrellj": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/libphenom/commits/d187b1163ee9ed05f632dff014e6aff014055963", "message": "fix warning for implicit declaration of function 'ph_snprintf' in tests/buf.c"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/6c14c49bd5e864285cb496c6e0c207d9ca6599cc", "message": "Mark static assert type as unused."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/6f4094821ef32a27d79ee2b9b11a42631728c1e7", "message": "Cleanup leftover ph_stm_init() prototype.\n\nThe method was removed in commit 07b55a27.\n\nfixes issue #77."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/78069388", "body": "I think I see now. I believe the seq number is mainly for dealing with multiple counter updates (via ph_counter_block_bulk_add). If ph_counter_block_add was modified to increment before and after, there might still be some strange behavior with 3 threads, instead of 2.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/78069388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/78208600", "body": "Thanks for the reply and your time. I missed the thread-local nature of the blocks, but I think I have a good understanding of the counters now. I think this library is pretty cool and I'm enjoying reading through it.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/78208600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/157229136", "body": "This is my first pull-request, so please let me know if there's anything I should do or do differently. \n\nI also signed the CLA.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/157229136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/157230608", "body": "Thank you\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/157230608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "richardjrossiii": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/libphenom/commits/4d56a10b2c7f36a169400a85dbb76397bc1f11d5", "message": "Added support for buffer queue max_record_size.\n\nSummary: Added max_record_size for buffer queues to limit memory and CPU usage when scanning extremely large buffers in an append -> consume_record loop.\n\nTest Plan: Create a new buffer queue, note that it will truncate itself after exceeding its max record size limit and set errno to EOVERFLOW.\n\nReviewers: wez\n\nReviewed By: wez\n\nDifferential Revision: https://phabricator.fb.com/D2046371\n\nTasks: 4455985\n\nSignature: t1:2046371:1431547070:fe2b6de6deffbf1d901199ed8584f792199f4bf7"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pcaneill": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/libphenom/commits/38811e3a44f62ee78deb1a04d8a154460487f4a9", "message": "docs/phenom: minor add some missing semicolons and variable declaration"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mattus": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/libphenom/commits/7360fea43b49fd89a1a8c02e3f41eefa383b81c1", "message": "fixed: l_isxdigit macro should only allow hexadecimal characters"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/22d5c0952b60be40073b0dd1874a37f6cf55b4eb", "message": "new test case around unicode escaping in json parser"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/62856705", "body": "Hi @wez,\n\nSorry for the delay, was just running the CLA past the legal team.\n\nCheers,\n\nMatt\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/62856705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "sbahra": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/libphenom/commits/5c8704755e21861ed555d3d379cd9ef04f62aa95", "message": "corelib/counter: Correctly handle NULL case."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/c432aa6b49859a47bce3aaf3f59153235a22ef28", "message": "corelib/counter: Fix ck_malloc wrapper functions.\n\nReturn NULL on allocation failure and do not ignore\ndeferral flag. This avoids unnecessary deferrals if\npossible."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/c0f43f628470a104fbfcea2c96588616a12a5e22", "message": "build: Update CK to something more recent.\n\nNext step is to fix the actual integration so it's less\nof a headache for the Phenom team."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31578246", "body": "Yeah, once I hit 1.0, I'll have to start caring about this. It's getting close, probably sometime soon after I dump ck_ht.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/31578246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/39995072", "body": "sbahra: bspang: Can you do another run to sanity check the results please? I don\u2019t see how the CK upgrade would have done that.\n[1:44pm] bspang: it's whatever is in the libphenom repo \n[1:44pm] bspang: sbahra: I can\n[1:44pm] sbahra: bspang: It has been a while since I dug into libphenom internals, is the dependency primarily on ck_ring? How about ck_hs and ck_ht?\n[1:44pm] bspang: my best guess for the reason is that my change dramatically increases the size of the job struct: https://github.com/fastly/libphenom/commit/42454c174ff4907a4b3b58ba9140a5cf0c1b0c0b#diff-87be9f758996a8c4d713359838e99528R98\n[1:44pm] sbahra: That would be good, because the data does look a bit noisy.\n[1:45pm] bspang: I haven't tried with an array of pointers, but I suspect that'd be better\n[1:45pm] sbahra: The job struct or the queue?\n[1:46pm] bspang: I'm not sure about the rest of what libphenom uses\n[1:46pm] bspang: the job struct\n[1:46pm] sbahra: Where is that? Because I only see you changing ph_thread_pool size.\n[1:47pm] bspang: line 98 in job.h in that diff I linked\n[1:47pm] sbahra: That\u2019s ph_thread_pool, not the actual dispatched job.\n[1:48pm] sbahra: struct ph_thread_pool { [\u2026] void _buffers[MAX_RINGS+1]; }\n[1:48pm] bspang: oh hrm\n[1:48pm] bspang: interesting, I'll re-run the benchmarks\n[1:48pm] bspang: maybe on an actual computer\n[1:48pm] sbahra: Ok. That would be good!\n[1:49pm] sbahra: So, if you still see a regression, I can work with you on fixing that.\n[1:49pm] sbahra: It seems fast path is actually better according to your performance, but scalability is worst. If that is truly the case, it could be a function of how you\u2019re allocating things and your memory allocator.\n[1:50pm] sbahra: Also, you only have 4 cores on your laptop, no Bruce?\n[1:50pm] bspang: cool, thanks\n[1:50pm] bspang: yeah, only four cores\n[1:50pm] sbahra: Because at 4 cores, performance appears better in fact.\n[1:50pm] sbahra: Right, it doesn\u2019t make sense to test past 4 cores so much in this.\n[1:50pm] sbahra: You will have *a lot_ of jitter.\n[1:50pm] sbahra: That noise is difficult to isolate.\n[1:50pm] sbahra: According to this, there is actually a performance improvement with number of cores.\n[1:51pm] sbahra: So, I would also re-run up to the number of physical cores on your box.\n[1:51pm] bspang: good call\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/39995072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/141535217", "body": "Should be available in recent Fedora as well, going into RHEL soon\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/141535217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "abelmathew": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/libphenom/commits/883c11fd83fc3d2bcf496dd8d07d497c24cacb43", "message": "Correctly set EVFILT_WRITE for nbio emitters when using kqueue.\n\nSummary: Fixes a typo in corelib/nbio/kqueue.c:ph_nbio_emitter_apply_io_mask\nthat incorrectly set EVFILT_READ when the mask parameter specified interest in\nwrite events."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/13753722", "body": "Actually, you ended up being right. The client was closing the connection. Thanks again for help. \n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/13753722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "saghul": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/libphenom/commits/99abee7da7b66091a03234c4bd2d83d82312f50a", "message": "update readme about c-ares dependency"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/56236936", "body": "@dhobsd this seems to be a bot posting the same comments on multiple projects. I suggest you ignore it and lock this issue.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/56236936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "brucespang": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/libphenom/commits/01b3837258eaf5e86d833c5985a94ce71129d663", "message": "Upgrade concurrency-kit to 0.4.1\n\nThis includes a breaking api change for ck_ring (introduced in ck\n0.3.3). Applications that use both libphenom and ck_ring will need to\nmodify their use of ck_ring."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/31803b9acee83e22cb81fc579211cc0b39d33762", "message": "Remove thirdparty/ck references in Makefile"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/18e1a9a0346f6104bdd31519fb1544949eb70bfa", "message": "Use pkg-config to build concurrency-kit"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/6008e942802c9166d525ba4bd308de8712e0eedc", "message": "Remove bundled ck"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/9386edfa3ba58149ad3f685bcfd315e2b679f558", "message": "Mention that the DNS thread pool is a part of the scheduler"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/6523eaacdb4cca228d6a9d61c6617cba1b002db4", "message": "Mention that restarting the scheduler is unsupported"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/aa81addccce73dcdfa94dc0e6c34f783c98013f4", "message": "match pointer formatting"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/c62a102c6b775aed0a78e3d4c2d011917e759714", "message": "reorder acceptor_data, since I was seeing inexplicable segfaults with the previous order"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/3568daa4753864848fe88bfe3f40bdecff56f5eb", "message": "add accessors and documentation for listener data"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/34d355403c4fc661c31636e97bcbd827e502a3c5", "message": "Add data pointer to listener struct.\n\nThis allow us to preserve more state about the listener object when we handle an accept than was previously doable."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/33158951", "body": "The structure is initialized at startup, around the same time that ph_listener_new is called. It does not change during the lifetime of the process.\n\nThat naming makes sense, and it would be good to have accessors. I can update the pull request, if you'd like.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/33158951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/33159789", "body": "Will do. Would you prefer the example to be in the header documentation or `examples/`?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/33159789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/34296110", "body": "Ah, so you are! I think I've got them all changed, please let me know if I've missed something.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/34296110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35327515", "body": "Thanks for merging this!\n\n> On Feb 15, 2014, at 5:13 PM, Wez Furlong notifications@github.com wrote:\n> \n> Closed #50.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35327515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35327845", "body": "It seems very reasonable to have DNS use the scheduler, it just took an unfortunate amount of time to figure out that DNS wasn't working because I hadn't started the scheduler. I'll create a pull request to improve the documentation. \n\n> On Feb 15, 2014, at 5:23 PM, Wez Furlong notifications@github.com wrote:\n> \n> tests/dns.c successfully exercises DNS resolution in a test program. Phenom is largely built around having a running IO scheduler; building subsystems to work in both blocking and non-blocking modes just for testing purposes seems like extra effort that may not have a lot of pay-off.\n> \n> I'd be happy to chat about how you're testing and how else you'd like to use these things to see if there are better ways or some adjustments we could make to facilitate that\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35327845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35327960", "body": "Seems reasonable. I can add some documentation/assertions that make it clear that restarting the scheduler is not possible. \n\nI did figure out how to yet things properly though. Running the scheduler in one thread and tests in another seems to work very well. \n\n> On Feb 15, 2014, at 5:28 PM, Wez Furlong notifications@github.com wrote:\n> \n> I'm not 100% sold on stopping and re-starting the scheduler; unlike other eventing libraries, phenom has more of a global view of the world with its scheduler guts and assumes that the scheduler will be running for the life of the program. Other libraries don't manage so holistically and need to provide more explicit control of the scheduler loop.\n> \n> There are pro's and con's to both approaches.\n> \n> Per my comments in #52, I don't think this architecture gets in the way of testing but I'm likely missing something about your approach that we should discuss :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35327960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35424081", "body": "Sure:\n\n```\nIn file included from src/http.c:4:\nlibphenom/include/phenom/log.h:113: error: expected declaration specifiers or \u2018...\u2019 before \u2018va_list\u2019\nIn file included from libphenom/include/phenom/json.h:20,\n                 from src/http.c:5:\nlibphenom/include/phenom/defs.h:36:1: error: \"_BSD_SOURCE\" redefined\nIn file included from /usr/include/assert.h:37,\n                 from src/http.c:1:\n/usr/include/features.h:179:1: error: this is the location of the previous definition\nIn file included from libphenom/include/phenom/json.h:20,\n                 from src/http.c:5:\nlibphenom/include/phenom/defs.h:42:1: error: \"_POSIX_C_SOURCE\" redefined\nIn file included from /usr/include/assert.h:37,\n                 from src/http.c:1:\n/usr/include/features.h:210:1: error: this is the location of the previous definition\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35424081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35426103", "body": "If I move the phenom includes to the top of the file, then it complains because uint8_t is not defined. If I include stdint.h before log.h, it fails because stdint.h defines `_BSD_SOURCE` and `_POSIX_C_SOURCE`. To get it to work, I had to put the phenom includes at the top of the file, and switch the order of json.h and log.h.\n\nIt seems bad that we have to fiddle with include orders and always put phenom first to get it to compile.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35426103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35433223", "body": "I wasn't, but I added it it in and it didn't change anything.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35433223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35434351", "body": "Oh cool, that makes sense! It would definitely be nice to have that in the docs.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35434351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/39914567", "body": "Sounds good, thanks for the feedback! I definitely have time to work on this.\n\nI've create PR #60 to do the unbundling. I'll have another pull request soon with the api change.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/39914567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/39914643", "body": "With regard to using the correct ck version, I've had luck with checking out 0.3.2 in the ck git repo and building from source.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/39914643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/39919009", "body": "I've created PR #61 for the changes to libphenom's use of ck_ring. I'm going to close this pull request, since we're now tracking it in the other two.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/39919009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/39920818", "body": "For reference, here are the graphs from the libphenom benchmarks. These were run on my macbook as I was doing other things, so they're probably not too trustworthy.\n\n### ck-0.3.1\n\n![scale](https://cloud.githubusercontent.com/assets/113292/2651264/b0006680-bf87-11e3-884b-ef11ce9e4aa9.png)\n![sockets](https://cloud.githubusercontent.com/assets/113292/2651263/b0003b06-bf87-11e3-9bd9-dc2367a24f5a.png)\n\n### ck-0.4.1\n\n![scale](https://cloud.githubusercontent.com/assets/113292/2651266/b6c42560-bf87-11e3-8895-6e665e726a58.png)\n![sockets](https://cloud.githubusercontent.com/assets/113292/2651267/b6c4b8fe-bf87-11e3-9486-e4f6ce009f7d.png)\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/39920818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/40004686", "body": "Here are the benchmark results from server with two Xeon X5650s (6 cores each) and 48GB of ram, running ubuntu 12.04 with the 3.8.0-35-generic kernel. Both ck and libphenom were built with gcc 4.6.3-1ubuntu5. These benchmarks were the only thing running on the box.\n\n## 0.3.1\n\n![sockets](https://cloud.githubusercontent.com/assets/113292/2660045/0d173cb6-c01b-11e3-9130-7393c74456c1.png)\n![scale](https://cloud.githubusercontent.com/assets/113292/2660044/0d16d442-c01b-11e3-990f-d6350bc64aaf.png)\n\n## 0.4.1\n\n![scale](https://cloud.githubusercontent.com/assets/113292/2660051/133ec3b6-c01b-11e3-9b2d-803ac8ccc2fb.png)\n![sockets](https://cloud.githubusercontent.com/assets/113292/2660052/134cf74c-c01b-11e3-9968-7f6ae42ad536.png)\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/40004686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/40880159", "body": "Great, thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/40880159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "deepak1556": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/libphenom/commits/f19444dc4b4206b033f1242bcc9b23f552af44d7", "message": "auto generation of proper tags\n\nFor context, see:\n\nhttps://github.com/facebook/libphenom/pull/28\nhttps://github.com/facebook/libphenom/pull/30"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25357681", "body": "url - http://facebook.github.io/libphenom/#hdr.defs.h also other header pages too (dns.h etc).\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25357681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25411134", "body": "#30 is this ok ? thanks for the notes. \n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25411134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6673436", "body": "oops, sorry.. this isnt needed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6673436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6673601", "body": "cool! this should do it. thanks didnt knw abt that function.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6673601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "wilsonwen": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/libphenom/commits/bcd585b03a2f968855764cd467354963e08c5141", "message": "fix line wrapping & use ck_pr_faa_8"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/06317880e22156836492312bcbe8f32405e614b7", "message": "Fix thread-unsafe bug."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/3a1f3a824cc10095bef6eb4331e8b538625089fe", "message": "It's not thread safe.\n\nUse concurrency kit cas to make thread safe."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/19415c7df23026b81ce9c3eae0a78356ae52311c", "message": "'Slot' should be put before the compare expression to guarantee thread safe."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24973732", "body": "close\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24973732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25056666", "body": "look forward to it\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25056666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25066949", "body": "Thanks for your patience.\n\nIt seems like I am not familiar withe the source here. I will review that again.\nThanks again.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25066949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6566125", "body": "By the way, is this line thread-safe?\nWhat if two threads happen to get this line while next_memtype equals to 1022, then they both return false.\nAfter that ,memtypes may overflow.\n\nIs that right?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6566125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jsavolainen": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/libphenom/commits/889334016ea490e8cfdd437268c7a9f24254bb78", "message": "Fixed bug when reading data from buffer queue with more than one buffers"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "flowly": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/libphenom/commits/6bcb020c5801af990cb80b43cfb424a1debff176", "message": "Fix bug: close socket when connect failed"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24568922", "body": "The source is the newest, there is nothing to update. \n\ncat /etc/redhat-release\uff1a\nRed Hat Enterprise Linux Server release 6.2 (Santiago)\n\ngcc -v\nUsing built-in specs.\nTarget: x86_64-redhat-linux\nConfigured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-languages=c,c++,objc,obj-c++,java,fortran,ada --enable-java-awt=gtk --disable-dssi --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-1.5.0.0/jre --enable-libgcj-multifile --enable-java-maintainer-mode --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --disable-libjava-multilib --with-ppl --with-cloog --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux\nThread model: posix\ngcc version 4.4.6 20110731 (Red Hat 4.4.6-3) (GCC) \n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24568922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24638624", "body": "Yes, it is more reasonable close() the socket in connected_sock. \n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24638624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6425147", "body": "It looks better. \n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6425147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "dhobsd": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/libphenom/commits/1f3460cd172624a6c3af3dbbe1d89aeaf756a7dd", "message": "Clean-up and comment hashset allocation strategy"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/a1d73104ccc8ec7ce3670a129f9f3ccf9981c7b9", "message": "Clean up epoch atexit, always free atexit.\n\nThis atexit stuff only exists to placate valgrind, so I don't think we\nneed to care about dangling references."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/8a0d20d3770d166571da2705f2db5cb0f86c0b08", "message": "Free properly when refusing to install a same-named counter"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/77302e0204a515427cde1eb08c0af62ca6475995", "message": "Cleanup hash, tls, and epoch management.\n\n 1. Use uint64_t instead of unsigned long for hash.\n 2. Create some inline functions for accessing the counter head as\n    well as epoch records (which are recycled or created on demand\n    the first time they are needed.)\n 3. Add a TLS destructor routine for epoch records that executes a\n    barrier section and unregisters itself."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/9ee8b08e40a041a7a215e565c910447faa31b3c0", "message": "Follow-on fixes from last commit."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/4ea5d7895f3af67bf87eb6cfd20f05d1d4167f26", "message": "Fix stylistic nit-bits around hash usage.\n\n 1. Clean up integration of murmur with phenom\n 2. Prefer memcmp for bytes over strcmp (locale issues, hooray)"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/509c4259bc08e8b3568ba59e5777e4fb55e16b79", "message": "Several changes:\n\n 1. Finish conversion to ck_hs from ck_ht.\n 2. Add epoch-based SMR around hash set probes\n 3. Wire up scope removal from hashset when no references exist"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/a191fc1071369feb04365e894735bbe383f46a75", "message": "Move counter system fully over to ck_hs."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/e334cff5477197fcec091d4f78f38f1e9f85825b", "message": "Don't ignore all .in files."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25389632", "body": "- We can probably accelerate memmem with an SSE version when searching for power-of-two sized strings. Otherwise, I think memmem will be faster.\n- We can specialize sse3_memchr for CRLF and friends, but at this point, we may as well just use the \"memmem\" version since these are all powers of two.\n- I don't understand what you mean by \"constant, known needle\"\n- For discontiguous buffers, I think we likely need to fill up a \"stitch\" space of 16 or 32 bytes depending on whether we're using xmm or ymm. I'm not sure whether that copy would invalidate performance gains; on the other hand, I don't see a way around a copy when searching for substrings longer than a byte long.\n\nI think in either case, @sbahra's SSE string code / CPUID code is a good starting point for this.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25389632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/29437608", "body": "Yes\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/29437608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/56235513", "body": "The convention in libphenom is to use quoted pathnames for includes intended to build inside the package and angle brackets for external includes (libc and 3rd party libraries that are assumed to be installed to be able to build).\n\nThis convention helps clarify intent in what file is used when building and protects against using system-installed include files of the same name. This allows you to build libphenom on a machine that has libphenom installed (for instance).\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/56235513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/56235991", "body": "Regardless of what the tooling decides to do, this is the convention used by libphenom to express where it intends to find header files. It seems to work. Are you having real trouble with libphenom resolving the wrong header, experiencing slow builds due to header resolution problems, or is this effectively an issue to paint the bikeshed pink?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/56235991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/56239510", "body": "For posterity, it's worth pointing out that both mechanisms resolve include files in an implementation-defined manner, so changing this wouldn't actually improve security, reduce build time, or fix header resolution in any meaningful way. Since implementations tend to search system include paths first for angle-bracket headers, it is likely that making these changes would actually break the software instead of fix it.\n\nMentioning because whether or not this is a troll or a bot (or a troll controlling a bot), a newbie may benefit from understanding why such a decision is not worth the effort.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/56239510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "udaykkumar": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/libphenom/pulls/86", "title": "--max-version for ck can now be at 0.6.0", "body": "[#84](https://github.com/facebook/libphenom/issues/84)", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jbergstroem": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24631508", "body": "Can only reproduce this with clang. Thought it was some kind of optimisation error (auto\\* seems to imply `CFLAGS=-O2`), but that doesn't seem to be the case either. Here's the latest bt from b23ae9e4edebc4bf503f0a977bf3532d6008f34f:\n\n```\nStarting program: /Users/jbergstroem/Work/libphenom/tests/iobasic.t\n1..13\nok 1 - PH_OK == ph_nbio_init(0)\nok 2 - PH_OK == ph_job_init(&pipe_job)\nok 3 - 0 == ph_pipe(pipe_fd, PH_PIPE_NONBLOCK)\nok 4 - set up ping\nok 5 - 100ms resolution: diff=100\nok 6 - 1 == read(pipe_fd[0], &buf, sizeof(buf))\nok 7 - 100ms resolution: diff=101\n\nProgram received signal EXC_BAD_ACCESS, Could not access memory.\nReason: KERN_INVALID_ADDRESS at address: 0x0000000000000004\n[Switching to process 10997 thread 0x10b]\n0x000000010002678f in ck_epoch_synchronize (global=0x100034710, record=0x0) at thirdparty/ck/src/ck_epoch.c:395\n395     record->epoch = delta;\n(gdb) bt\n#0  0x000000010002678f in ck_epoch_synchronize (global=0x100034710, record=0x0) at thirdparty/ck/src/ck_epoch.c:395\n#1  0x000000010002694d in ck_epoch_barrier (global=0x100034710, record=0x0) at thirdparty/ck/src/ck_epoch.c:403\n#2  0x0000000100014705 in ph_thread_epoch_barrier () at corelib/thread.c:353\n#3  0x0000000100014175 in ph_thread_boot (arg=0x101184ab8) at corelib/thread.c:223\n#4  0x0000000100127772 in _pthread_start ()\n#5  0x00000001001141a1 in thread_start ()\n```\n\nFeel free to ping me at IRC (jbergstroem@freenode) if you want to chat.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24631508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24640559", "body": "(confirmed that it does)\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24640559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "lpereira": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24728919", "body": "I wasn't aware about the Solaris case.\n\nYes, I know about the overhead (on Linux at least, it calls `fstat()`, `mmap()`, etc), but given that this should be called just once, I don't think that's really a problem; but then, I don't know how this is being used inside your infrastructure :)\n\nI do like the `ph_procfs_get_int()` suggestion.\n\nHowever, I won't be able to sign the CLA as that requires me to have a Facebook account (which I deleted a few weeks ago). Also, my company lets me contribute to open source without bureaucracy from their part as long as the contributions are trivial -- I don't know, however, if I'd have to consult legal before signing a CLA.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24728919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24953116", "body": "I'm checking with legal, will get back as soon as I know what I can do.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24953116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Bumanji": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24863375", "body": "The same error happened in my computer.\nOS:Ubuntu 12.04\nuname -a\nLinux bruce-desktop 3.5.0-40-generic #62~precise1-Ubuntu SMP Fri Aug 23 17:59:10 UTC 2013 i686 i686 i386 GNU/Linux\ngcc -v\ngcc version 4.6.3 (Ubuntu/Linaro 4.6.3-1ubuntu5)\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24863375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "maiah": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24876091", "body": "It worked! This is very quick response and resolution. And now I need to know that \"-O\" option.\nBTW, thanks for updating README.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24876091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "maz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24889325", "body": "In terms of my use case, I was planning on preallocating client states to cut down on the number of system calls required by the memory allocator to increase the number of pages the program is assigned, in addition to reducing heap fragmentation. My guess, and I can write a benchmark to test this, is that if the number of clients/items increases very quickly, it will be faster to preallocate.\nIn terms of the API, originally I did have an additional field in the `ph_memtype_def` struct to indicate how many items ought to be preallocated. However, since this ended up breaking other parts of the library, I decided against it. However, if this function does end up getting included in the library, it would make sense to make it a field in the struct.\nIn terms of the CLA, I'm under 18, so should I or one of my parents sign the CLA, or is there some other legal process that I should go through?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24889325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24893306", "body": "Additionally, I'm unsure as to how I could switch libphenom to use jemalloc, without modifying the source code since, I think, it'd require including jemalloc.h, telling jemalloc.h to mangle `malloc()` and friends, and implementing a new version of `strdup()` which uses jemalloc instead of the glibc allocator. \n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24893306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24894263", "body": "My mac has 4 cores, so I can run benchmarks on that. For the specific use case I mentioned, preallocating client states, since only one thread can `accept()` at a time, there will be one reader and many writers (of the free queue). So, the main point of contention will be when client states are `ph_mem_free()`'d, when clients are closed (following the echo example). I think, then, that the ring queue system should work well with long-running connections, but will experience issues with many short connections, since that involves the most freeing.\nAdditionally, it appears that concurrency kit's ring queue system does not allow concurrent enqueuing, only concurrent dequeuing. So I'll need to replace the queue system before running any benchmarks (since it will not function at the present).\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24894263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24894971", "body": "I was thinking of using a bitmap to indicate which items are currently in use. By performing atomic test and set/reset operations, I should be able to mark items without contention. Beyond that, by using an atomic counter, containing the number of presently in-use preallocated items, I should be able to reduce the number of searches when all items are in use. Additionally, I can have a pointer act as a hint to where the program should check for free items next. Because false positives are unacceptable, and false negatives acceptable (since they'll only result in an unnecessary call to the memory allocator), I don't think I'll need any locks.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24894971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24962398", "body": "Given the issues with this pull request, I think that it makes more sense for benchmark some potential solutions, and submit pull requests based off the result of the benchmark.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24962398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mayflaver": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24936708", "body": "linux\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24936708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24937140", "body": "gcc -o echo.c echo -lphenom -lcares\n\necho.c:149:22: error: \u2018optarg\u2019 undeclared (first use in this function)\necho.c:149:22: note: each undeclared identifier is reported only once for each function it appears in\necho.c:155:21: error: \u2018STDERR_FILENO\u2019 undeclared (first use in this function)\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24937140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24938078", "body": "ok, thanks\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24938078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24938295", "body": "\u279c  examples git:(master) \u2717 gcc -O2 -o echo echo.c `pkg-config libphenom --cflags --libs`\ngcc -O2 -o echo echo.c `pkg-config libphenom --cflags --libs`\n\necho.c: In function \u2018main\u2019:\necho.c:143:3: warning: implicit declaration of function \u2018getopt\u2019 [-Wimplicit-function-declaration]\necho.c:149:22: error: \u2018optarg\u2019 undeclared (first use in this function)\necho.c:149:22: note: each undeclared identifier is reported only once for each function it appears in\necho.c:152:9: warning: implicit declaration of function \u2018atoi\u2019 [-Wimplicit-function-declaration]\necho.c:155:21: error: \u2018STDERR_FILENO\u2019 undeclared (first use in this function)\necho.c:161:9: warning: implicit declaration of function \u2018exit\u2019 [-Wimplicit-function-declaration]\necho.c:161:9: warning: incompatible implicit declaration of built-in function \u2018exit\u2019 [enabled by default]\necho.c:173:5: warning: incompatible implicit declaration of built-in function \u2018exit\u2019 [enabled by default]\n\nsame error\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24938295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24970140", "body": "I have digitally signed the Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24970140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "sakky11": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25250677", "body": " ss\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25250677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25353783", "body": "No wez,u got it wrong.Right now you are the author of this function,but if i want a function to be committed to libPhenom with my name as the author,what should i do??I am a newbie to Github.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25353783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/26193236", "body": "I am still not getting what are these issues,please guide me,what should i do now?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/26193236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/28287944", "body": "1.I am using ubuntu 10.04\n2.Yes,I have installed openssl package.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/28287944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/28885742", "body": "While installing,it is still giving me following error,please guide.\n\nsakky@ubuntu:~/libphenom-master$ make check\ngcc  -m32 -march=i686 -msse -msse2 -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 -I/home/sakky/include      -D__x86__=1 -std=gnu99     -pedantic -Wall -Wextra -Wno-declaration-after-statement     -W -Wundef -Wendif-labels -Wshadow -Wpointer-arith -Wcast-align     -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes     -Wno-nested-externs -Winline -Wdisabled-optimization     -fstrict-aliasing -pipe -Wno-parentheses -O2 -g -gdwarf-2   -o examples/echo examples/examples_echo-echo.o libphenom.a libtap.a -lrt -lpthread  -L/home/sakky/lib -lcares   -Wl,-rpath=/home/sakky/lib   -lssl -lcrypto  \n/home/sakky/lib/libssl.a(ssl_algs.o): In function `SSL_library_init':\nssl_algs.c:(.text+0x1e): undefined reference to`EVP_idea_cbc'\ncollect2: ld returned 1 exit status\nmake: **\\* [examples/echo] Error 1\n\nsakky@ubuntu:~/libphenom-master$ make check install\ngcc  -m32 -march=i686 -msse -msse2 -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 -I/home/sakky/include      -D__x86__=1 -std=gnu99     -pedantic -Wall -Wextra -Wno-declaration-after-statement     -W -Wundef -Wendif-labels -Wshadow -Wpointer-arith -Wcast-align     -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes     -Wno-nested-externs -Winline -Wdisabled-optimization     -fstrict-aliasing -pipe -Wno-parentheses -O2 -g -gdwarf-2   -o examples/echo examples/examples_echo-echo.o libphenom.a libtap.a -lrt -lpthread  -L/home/sakky/lib -lcares   -Wl,-rpath=/home/sakky/lib   -lssl -lcrypto  \n/home/sakky/lib/libssl.a(ssl_algs.o): In function `SSL_library_init':\nssl_algs.c:(.text+0x1e): undefined reference to`EVP_idea_cbc'\ncollect2: ld returned 1 exit status\nmake: **\\* [examples/echo] Error 1\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/28885742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "agreatfool": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25338891", "body": "It's a bit long :)\n\n```\nGNU gdb 6.3.50-20050815 (Apple version gdb-1824) (Thu Nov 15 10:42:43 UTC 2012)\nCopyright 2004 Free Software Foundation, Inc.\nGDB is free software, covered by the GNU General Public License, and you are\nwelcome to change it and/or distribute copies of it under certain conditions.\nType \"show copying\" to see the conditions.\nThere is absolutely no warranty for GDB.  Type \"show warranty\" for details.\nThis GDB was configured as \"x86_64-apple-darwin\"...Reading symbols for shared libraries ..... done\n\nwarning: .o file \"/Users/jonathan/prog/cpp/facebook/libphenom/libphenom.a(libphenom_a-string.o)\" more recent than executable timestamp in \"/Users/jonathan/prog/cpp/facebook/libphenom/tests/dns.t\"\n\nwarning: Could not open OSO file /Users/jonathan/prog/cpp/facebook/libphenom/libphenom.a(libphenom_a-string.o) to scan for pubtypes for objfile /Users/jonathan/prog/cpp/facebook/libphenom/tests/dns.t\n\nStarting program: /Users/jonathan/prog/cpp/facebook/libphenom/tests/dns.t\nReading symbols for shared libraries ++++............................... done\n1..18\nok 1 - expected a lookup to succeed: Successful completion\nok 2 - a.test.phenom.wezfurlong.org == a.test.phenom.wezfurlong.org\nok 3 - right addr\nok 4 - expected aaaa lookup to succeed: Successful completion\nok 5 - aaaa.test.phenom.wezfurlong.org == aaaa.test.phenom.wezfurlong.org\nok 6 - right addr\nok 7 - expected mx lookup to succeed: Successful completion\nok 8 - resp->num_answers 2 == 2 2\nok 9 - a.test.phenom.wezfurlong.org == a.test.phenom.wezfurlong.org\nok 10 - 10 10 == resp->answer[0].priority 10\nok 11 - b.test.phenom.wezfurlong.org == b.test.phenom.wezfurlong.org\nok 12 - 20 20 == resp->answer[1].priority 20\nok 13 - info->result == t->result\nok 14 - a.test.phenom.wezfurlong.org -> [127.0.0.4]:80\nok 15 - info->result == t->result\nok 16 - aaaa.test.phenom.wezfurlong.org -> [::a:a:a:a]:80\nnot ok 17 - info->result == t->result\n#     Failed test (tests/dns.c:check_addrinfo_result() at line 46)\n\nProgram received signal EXC_BAD_ACCESS, Could not access memory.\nReason: KERN_INVALID_ADDRESS at address: 0x0000000000000000\n[Switching to process 19782 thread 0x1403]\n0x00007fff89863670 in strlen ()\n\n(gdb) thread apply all bt full\n\nThread 7 (process 19782):\n#0  0x00007fff90fd36d6 in __workq_kernreturn ()\nNo symbol table info available.\n#1  0x00007fff89877f1c in _pthread_workq_return ()\nNo symbol table info available.\n#2  0x00007fff89877ce3 in _pthread_wqthread ()\nNo symbol table info available.\n#3  0x00007fff89862191 in start_wqthread ()\nNo symbol table info available.\n\nThread 6 (process 19782):\n#0  0x00007fff90fd36d6 in __workq_kernreturn ()\nNo symbol table info available.\n#1  0x00007fff89877f1c in _pthread_workq_return ()\nNo symbol table info available.\n#2  0x00007fff89877ce3 in _pthread_wqthread ()\nNo symbol table info available.\n#3  0x00007fff89862191 in start_wqthread ()\nNo symbol table info available.\n\nThread 5 (process 19782):\n#0  0x00007fff90fd3d16 in kevent ()\nNo symbol table info available.\n#1  0x00007fff8cb1bdea in _dispatch_mgr_invoke ()\nNo symbol table info available.\n#2  0x00007fff8cb1b9ee in _dispatch_mgr_thread ()\nNo symbol table info available.\n\nThread 4 (process 19782):\n#0  0x00007fff90fd30fa in __psynch_cvwait ()\nNo symbol table info available.\n#1  0x00007fff89879fb9 in _pthread_cond_wait ()\nNo symbol table info available.\n#2  0x000000010000c517 in wait_pool [inlined] () at /Users/jonathan/prog/cpp/facebook/libphenom/corelib/job.c:173\n    me = (ph_thread_t *) 0x1006004e0\n    cblock = (ph_counter_block_t *) 0x100600960\n#3  0x000000010000c517 in worker_thread (arg=0x10080fe00) at job.c:338\n    me = (ph_thread_t *) 0x1006004e0\n    cblock = (ph_counter_block_t *) 0x100600960\n#4  0x000000010000e0c3 in ph_thread_boot (arg=0x10080fe80) at thread.c:196\n    me = (ph_thread_t *) 0x1006004e0\n    retval = (void *) 0x10080fe00\n#5  0x00007fff89875772 in _pthread_start ()\nNo symbol table info available.\n#6  0x00007fff898621a1 in thread_start ()\nNo symbol table info available.\n\nThread 3 (process 19782):\n#0  0x00007fff89863670 in strlen ()\nNo symbol table info available.\n#1  0x000000010000cd95 in ph_string_equal_cstr (a=0x100584d20, b=0x0) at string.c:224\n    len = 4294967295\n#2  0x0000000100001942 in check_addrinfo_result (info=0x1003065e0) at dns.c:54\n    sa = {\n  family = 2 '\\002',\n  sa = {\n    sa = {\n      sa_len = 16 '\\020',\n      sa_family = 2 '\\002',\n      sa_data = \"\\000P\ufffd\ufffd@\\027\\000\\000\\000\\000\\000\\000\\000\"\n    },\n    nix = {\n      sun_len = 16 '\\020',\n      sun_family = 2 '\\002',\n      sun_path = \"\\000P\ufffd\ufffd@\\027\", '\\0' <repeats 97 times>\n    },\n    v4 = {\n      sin_len = 16 '\\020',\n      sin_family = 2 '\\002',\n      sin_port = 20480,\n      sin_addr = {\n        s_addr = 390134492\n      },\n      sin_zero = \"\\000\\000\\000\\000\\000\\000\\000\"\n    },\n    v6 = {\n      sin6_len = 16 '\\020',\n      sin6_family = 2 '\\002',\n      sin6_port = 20480,\n      sin6_flowinfo = 390134492,\n      sin6_addr = {\n        __u6_addr = {\n          __u6_addr8 = '\\0' <repeats 15 times>,\n          __u6_addr16 = {0, 0, 0, 0, 0, 0, 0, 0},\n          __u6_addr32 = {0, 0, 0, 0}\n        }\n      },\n      sin6_scope_id = 0\n    }\n  }\n}\n    str = {\n  ref = 1,\n  mt = 0,\n  len = 18,\n  alloc = 128,\n  buf = 0x100584db8 \"[220.250.64.23]:80\",\n  slice = 0x0,\n  onstack = true\n}\n#3  0x000000010000c46c in worker_thread (arg=0x10080fe00) at job.c:413\n    me = (ph_thread_t *) 0x101000000\n    cblock = (ph_counter_block_t *) 0x101000480\n#4  0x000000010000e0c3 in ph_thread_boot (arg=0x0) at thread.c:196\n    me = (ph_thread_t *) 0x101000000\n    retval = (void *) 0x10080fe00\n#5  0x00007fff89875772 in _pthread_start ()\nNo symbol table info available.\n#6  0x00007fff898621a1 in thread_start ()\nNo symbol table info available.\n\nThread 2 (process 19782):\n#0  0x00007fff90fd3d16 in kevent ()\nNo symbol table info available.\n#1  0x000000010000bc71 in ph_nbio_emitter_run (emitter=0x1008356c8, thread=0x100501eb0) at kqueue.c:151\n    max_chunk = 1024\n#2  0x000000010000b442 in sched_loop (arg=0x1008356c8) at common.c:198\n    me = (ph_thread_t *) 0x100600000\n#3  0x000000010000e0c3 in ph_thread_boot (arg=0x4) at thread.c:196\n    me = (ph_thread_t *) 0x100600000\n    retval = (void *) 0x1008356c8\n#4  0x00007fff89875772 in _pthread_start ()\nNo symbol table info available.\n#5  0x00007fff898621a1 in thread_start ()\nNo symbol table info available.\n\nThread 1 (process 19782):\n#0  0x00007fff90fd3d16 in kevent ()\nNo symbol table info available.\n#1  0x000000010000bc71 in ph_nbio_emitter_run (emitter=0x100833400, thread=0x7fff5fbff830) at kqueue.c:151\n    max_chunk = 1024\n#2  0x000000010000b442 in sched_loop (arg=0x100833400) at common.c:198\n    me = (ph_thread_t *) 0x100303ad0\n#3  0x000000010000b5bf in ph_sched_run () at common.c:258\n    res = (void *) 0x10001f480\n    me = (ph_thread_t *) 0x100303ad0\n#4  0x000000010000122d in main (argc=3, argv=0x1008354c8) at dns.c:188\nNo locals.\n(gdb)\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25338891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25339155", "body": "$ host bbbb.test.phenom.wezfurlong.org\nbbbb.test.phenom.wezfurlong.org has address 220.250.64.23\nHost bbbb.test.phenom.wezfurlong.org not found: 3(NXDOMAIN)\nHost bbbb.test.phenom.wezfurlong.org not found: 3(NXDOMAIN)\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25339155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25339177", "body": "$ ping6 bbbb.test.phenom.wezfurlong.org\nping6: getaddrinfo -- nodename nor servname provided, or not known\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25339177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25339213", "body": "```\nok 16 - a.test.phenom.wezfurlong.org -> [127.0.0.4]:80\nnot ok 17 - info->result == t->result\n#     Failed test (tests/dns.c:check_addrinfo_result() at line 46)\n\nProgram received signal EXC_BAD_ACCESS, Could not access memory.\nReason: KERN_INVALID_ADDRESS at address: 0x0000000000000000\n[Switching to process 19864 thread 0x1403]\n0x00007fff89863670 in strlen ()\n(gdb) frame 2\n#2  0x0000000100001942 in check_addrinfo_result (info=0x1003065e0) at dns.c:54\n54      ok(ph_string_equal_cstr(&str, t->expect),\n(gdb) print *info\n$1 = {\n  job = {\n    data = 0x1003065e0,\n    callback = 0x100002cf0 <dns_addrinfo>,\n    q_ent = {\n      stqe_next = 0x0\n    },\n    in_apply = false,\n    mask = 0 '\\0',\n    kmask = 0,\n    emitter_affinity = 0,\n    fd = -1,\n    timer = {\n      t = {\n        le_next = 0x0,\n        le_prev = 0x0\n      },\n      list = 0x0,\n      due = {\n        tv_sec = 0,\n        tv_usec = 0\n      },\n      enable = 0\n    },\n    pool = 0x10080fe00,\n    epoch_entry = {\n      function = 0,\n      stack_entry = {\n        next = 0x0\n      }\n    },\n    def = 0x10001f5c0\n  },\n  node = 0x1003066d0 \"bbbb.test.phenom.wezfurlong.org\",\n  service = 0x100306700 \"80\",\n  hints = {\n    ai_flags = 0,\n    ai_family = 0,\n    ai_socktype = 0,\n    ai_protocol = 0,\n    ai_addrlen = 0,\n    ai_canonname = 0x0,\n    ai_addr = 0x0,\n    ai_next = 0x0\n  },\n  result = 0,\n  ai = 0x102500000,\n  arg = 0x10001f480,\n  func = 0x1000017f0 <check_addrinfo_result>\n}\n(gdb)\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25339213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25339697", "body": "OK, thank you very much for your help. Good to hear it's not the issue of the code. Since I'm in Shanghai China, any problem of the network is NOT surprising, you know, hahaha.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/25339697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/26035466", "body": "Same issue of the \nhttp://facebook.github.io/libphenom/index.html?#counter--ph_counter_block_add\nhttp://facebook.github.io/libphenom/index.html?#counter--ph_counter_scope_get\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/26035466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "wjgu1007": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/28359703", "body": "the c-ares lib just use for dns.right?\nand i did't want to use dns feature,so how could i modify the configure file?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/28359703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/28450915", "body": "I can install the lib c-ares.but i did't want to install it in my system.as i know ,there are some unsecurity bugs in it .So could i just use libphenom without c-ares?\nmany thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/28450915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "maczpc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/29372992", "body": "my modified in tests/hashtable.c  :\n\n// if (howmany > 1000) {\n    // need to fix the format to allow for this many\n  //  abort();\n  // }\n\nload_data(&ht, 100000000);\n\nCore was generated by `/data1/hadoop/pengcheng/libphenom/tests/.libs/lt-hashtable.t'.\nProgram terminated with signal 11, Segmentation fault.\n#0  find_new_slot (ht=0x7fffe1db7c30, size=268435456) at corelib/hash/table.c:187\n\nwarning: Source file is more recent than executable.\n187         if (elem->status == PH_HT_ELEM_EMPTY) {\nMissing separate debuginfos, use: debuginfo-install glibc-2.12-1.47.el6.x86_64 keyutils-libs-1.4-3.el6.x86_64 krb5-libs-1.9-22.el6.x86_64 libcom_err-1.41.12-11.el6.x86_64 libselinux-2.0.94-5.2.el6.x86_64 openssl-1.0.0-20.el6.x86_64 zlib-1.2.3-27.el6.x86_64\n(gdb) bt\n#0  find_new_slot (ht=0x7fffe1db7c30, size=268435456) at corelib/hash/table.c:187\n#1  rebuild_table (ht=0x7fffe1db7c30, size=268435456) at corelib/hash/table.c:212\n#2  0x00007f0b1a40fd3c in ph_ht_insert (ht=0x7fffe1db7c30, key=0x7f0b0a5b2010, value=0x7f0b0a5b2010, flags=0)\n    at corelib/hash/table.c:245\n#3  0x0000000000403bbc in load_data (ht=0x7fffe1db7c30, howmany=100000000) at tests/hashtable.c:33\n#4  0x0000000000404e73 in main (argc=1, argv=0x7fffe1db7d58) at tests/hashtable.c:147\n(gdb) p elem\n$1 = (struct ph_ht_elem *) 0x7f0b4a5b1034\n(gdb) p *elem\nCannot access memory at address 0x7f0b4a5b1034\n(gdb) p *ht\n$2 = {nelems = 67108864, table_size = 134217728, elem_size = 20, mask = 134217727, kdef = 0x7f0b1a61e7a0, vdef = 0x7f0b1a61e7d0,\n  table = 0x7f09aa6e6020 \"\"}\n(gdb) quit\n\nThanks very much!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/29372992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/29374022", "body": "this bt full\n\nProgram terminated with signal 11, Segmentation fault.\n#0  find_new_slot (ht=0x7fffe1db7c30, size=268435456) at corelib/hash/table.c:187\n\nwarning: Source file is more recent than executable.\n187         if (elem->status == PH_HT_ELEM_EMPTY) {\nMissing separate debuginfos, use: debuginfo-install glibc-2.12-1.47.el6.x86_64 keyutils-libs-1.4-3.el6.x86_64 krb5-libs-1.9-22.el6.x86_64 libcom_err-1.41.12-11.el6.x86_64 libselinux-2.0.94-5.2.el6.x86_64 openssl-1.0.0-20.el6.x86_64 zlib-1.2.3-27.el6.x86_64\n(gdb) bt full\n#0  find_new_slot (ht=0x7fffe1db7c30, size=268435456) at corelib/hash/table.c:187\n        pos = 134217729\n        elem = 0x7f0b4a5b1034\n#1  rebuild_table (ht=0x7fffe1db7c30, size=268435456) at corelib/hash/table.c:212\n        src = <value optimized out>\n        dest = <value optimized out>\n        table = 0x7f0aaa5b1020 \"\"\n        mask = 268435455\n        i = <value optimized out>\n        done = <value optimized out>\n#2  0x00007f0b1a40fd3c in ph_ht_insert (ht=0x7fffe1db7c30, key=0x7f0b0a5b2010, value=0x7f0b0a5b2010, flags=0)\n    at corelib/hash/table.c:245\n        elem = 0x7f0a1b9e5408\n#3  0x0000000000403bbc in load_data (ht=0x7fffe1db7c30, howmany=100000000) at tests/hashtable.c:33\n        data = 0x7f0aea5b2010\n        i = 67108864\n        oiter = {slot = 3789257648, size = 32767, slots = 0x7f0b1a3f7f09 \"H\\205\\300t\\004\\360\\377@\\004\\311\\303fff.\\017\\037\\204\"}\n        **func** = \"load_data\"\n#4  0x0000000000404e73 in main (argc=1, argv=0x7fffe1db7d58) at tests/hashtable.c:147\n        ht = {nelems = 67108864, table_size = 134217728, elem_size = 20, mask = 134217727, kdef = 0x7f0b1a61e7a0,\n          vdef = 0x7f0b1a61e7d0, table = 0x7f09aa6e6020 \"\"}\n        a = 0x2208270\n        b = 0x2208180\n        oiter = {slot = 2, size = 2, slots = 0x0}\n        iter = {slot = 32768, size = 32768}\n        **func** = \"main\"\n(gdb)\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/29374022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/29433849", "body": "You're welcome. Thank you for your advice.\nIs libphenom used in  production environment ?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/29433849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "lvshaco": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/30056847", "body": "\u6765\u4fe1\u6536\u5230\uff0c\u8c22\u8c22\n\u6765\u81ea\u65b0\u6d6a\u90ae\u7bb1\u624b\u673a\u7f51\u9875\u7248\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/30056847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "elfring": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35162534", "body": "Will your desire increase for the reuse of \"known\" configuration scripts in the future?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/35162534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/56235693", "body": "There are different opinions about the handling of the involved implementation-defined behaviour.\n- Will header files be also searched outside the specified include directories if double quotes are used for the discussed preprocessor statement?\n- Is there a speed difference measurable if a file is not found there and the search will be retried with \"the angle brackets inclusion method\"?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/56235693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/56236306", "body": "I would generally prefer to exclude the potential for the inclusion of header files from unexpected directories. Can such a security detail become a bit more important?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/56236306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tobz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/51332161", "body": "Also for anyone who stumbles here, this is my resulting code after changing the original approach to be more state machine like + using a thread pool over a timer: https://gist.github.com/tobz/95fa46cf36e50d1cdda2\n\nIt properly disconnects now and supports thousands of requests per second without any double frees or segfaults or what have you. :)\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/51332161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jonathanmarvens": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/54044020", "body": "Hi, @wez!\n\nI apologize for the really really long delay to actually reply back. I've been really busy this past month :( . That's probably more of an excuse than anything, though.\n\nThanks so much for the detailed response. I really value and appreciate you putting your time into that!\nSo, I took your suggestion and we actually ended up just hooking up **jemalloc** globally. Everything is fine. It turns out my main worries about hooking it up globally were both superficial and due to not fully understanding how **jemalloc** hooks itself up in the system.\n\nAgain, thanks so much for your time and suggestions. Had you not questioned that, I likely wouldn't have gone that route. I also managed to learn a few things because of this ... which is always a good thing, I think :smile:.\n\nI hope you're well!\nThanks!\n\n\\- Jonathan\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/54044020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "waywardmonkeys": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/56028138", "body": "That document has moved to https://github.com/facebook/watchman/blob/master/docs/BSER.markdown\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/56028138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "erikarn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/58525837", "body": "I think this was just fixed in FreeBSD-HEAD in r272528. Is anyone able to re-test it?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/58525837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/60012881", "body": "You can file a FreeBSD bug if you can reproduce a timer problem with power\nmanagement. :)\n\n-a\n\nOn 21 October 2014 15:59, Kevin Bowling notifications@github.com wrote:\n\n> @erikarn https://github.com/erikarn I think the other failures are\n> related to load/power management. Not sure if there is a bug report or\n> feature request there?\n> \n> But I think this can be closed out for phenom.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/libphenom/issues/48#issuecomment-60012705.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/60012881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "facebook-github-bot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/62258101", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/62258101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/62857284", "body": "Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/62857284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/320149471", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla. **If you are contributing on behalf of someone else (eg your employer)**, the individual CLA may not be sufficient and your employer may need the corporate CLA signed.\n\nIf you have received this in error or have any questions, please contact us at [cla@fb.com](mailto:cla@fb.com?subject=CLA%20for%20facebook%2Flibphenom%20%2383). Thanks!", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/320149471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/354047163", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla. **If you are contributing on behalf of someone else (eg your employer)**, the individual CLA may not be sufficient and your employer may need the corporate CLA signed.\n\nIf you have received this in error or have any questions, please contact us at [cla@fb.com](mailto:cla@fb.com?subject=CLA%20for%20facebook%2Flibphenom%20%2385). Thanks!", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/354047163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/354048809", "body": "Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/354048809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "DomT4": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/62885264", "body": "> are you building that from a homebrew recipe?\n\nYeah, one I wrote nonetheless. [This one](https://github.com/Homebrew/homebrew-headonly/blob/master/libphenom.rb).\n\nNothing more complicated than `git clone && ./autogen.sh && ./configure --prefix=/path/to/dir --disable-dependency-tracking && make && make check && make install`.\n\nNothing weird or unusual.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/62885264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/62885453", "body": "The only Homebrew-related differences here are: 1) The OpenSSL directory is preprended to the `$PATH` because we keep it locked away to avoid conflicting with the OS X native OpenSSL. 2) We use a more modern libtool than Apple ships.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/62885453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/62933799", "body": "Thanks Wez, That did the trick. I'd presume this happens because Homebrew does the `git clone` element in `/Library/Caches/Homebrew` but does the building in `/tmp`, so perhaps the `.git` directory gets left behind as part of that directory switch. Closing as fixed, Appreciate your time.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/62933799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "allspace": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/95603446", "body": "Maybe you are right. I cannot reproduce this issue now. Please close it. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/95603446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/127693306", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/127693306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/127693466", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/127693466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/127693468", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/127693468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/127693469", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/127693469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/127693474", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/127693474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "wuchuguang": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/140945710", "body": "checking for pkg-config... /usr/bin/pkg-config\nPackage ck was not found in the pkg-config search path.\nPerhaps you should add the directory containing `ck.pc'\nto the PKG_CONFIG_PATH environment variable\nNo package 'ck' found\nconfigure: error: ck is required\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/140945710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}}}}