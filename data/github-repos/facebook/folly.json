{"_default": {"1": {"JohnSmithyy": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/738", "title": "make check failed", "body": "```\r\nMakefile:1797: recipe for target 'range_test' failed\r\nmake[3]: *** [range_test] Error 1\r\nmake[3]: Leaving directory '/home/ashazar/folly/folly/test'\r\nMakefile:2950: recipe for target 'check-am' failed\r\nmake[2]: *** [check-am] Error 2\r\nmake[2]: Leaving directory '/home/ashazar/folly/folly/test'\r\nMakefile:2163: recipe for target 'check-recursive' failed\r\nmake[1]: *** [check-recursive] Error 1\r\nmake[1]: Leaving directory '/home/ashazar/folly/folly/test'\r\nMakefile:2316: recipe for target 'check-recursive' failed\r\nmake: *** [check-recursive] Error 1\r\n```\r\n\r\nAnyone have a solution to this?\r\n\r\nI'm running Ubuntu 16.04. ", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maikel": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/737", "title": "Poly does not work with noexcept methods", "body": "The `folly/Poly.md` document does not mention `noexcept` at all. Consider this example\r\n\r\n```\r\n#include <folly/Poly.h>\r\n#include <iostream>\r\n\r\nstruct IDrawable {\r\n  template <typename Base> struct Interface : Base {\r\n    void draw(std::ostream& out) const /* noexcept */ {\r\n      folly::poly_call<0>(*this, out);\r\n    }\r\n  };\r\n\r\n  template <typename T> using Members = folly::PolyMembers<&T::draw>;\r\n};\r\n\r\nstruct Circle {\r\n  void draw(std::ostream& out) const /* noexcept */ { out << \"Cirlce.\\n\"; }\r\n};\r\n\r\nusing Drawable = folly::Poly<IDrawable>;\r\n\r\nint main() {\r\n  Drawable obj = Circle{};\r\n  obj.draw(std::cout);\r\n}\r\n```\r\n\r\nUncommenting any `noexcept` breaks on my machine (using clang from 2017-11-25 and folly from 2017-12-25)\r\n\r\nI attached the error message for uncommenting `Circle::draw`'s  `noexcept` specifier.\r\n\r\n[error.log](https://github.com/facebook/folly/files/1639659/error.log)", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ZaMaZaN4iK": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/734", "title": "Conan package for Folly", "body": "Hello,\r\nDo you know about [Conan](https://github.com/conan-io/conan)?\r\n[Conan](http://docs.conan.io/en/latest/) is modern dependency manager for C++. And will be great if your library will be available via package manager for other developers.\r\n\r\n[Here](https://github.com/bincrafters/conan-templates) you can find example, how you can create package for the library. \r\n\r\nIf you have any questions, just ask :-)", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mkudrnac": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/732", "title": "One little goto \ud83e\udd96", "body": "https://github.com/facebook/folly/blob/e7f26d60480810d6c2b724130e35761d75af33fc/folly/String.cpp#L47\r\n\r\n![main-qimg-ed4254c72d3c84c43bef0d32b7ff4172](https://user-images.githubusercontent.com/12230741/34783624-5d2f7bfa-f62c-11e7-9691-5afb55ce78c3.png)\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MacroKnow": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/730", "title": "My system time is wrong ,when I make it,it endless loop.", "body": "eg:my system time is  Thurs Jan  5 20:36:04 CST 2017 ,and I preparing install version is v2018.01.01.00 .\r\nautoreconf -ivf \r\n./configure\r\nmake \r\n\r\nthen endless loop\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "suspend0": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/728", "title": "Thanks & Happy New Year!", "body": "All folly committers:\r\n\r\nThank you for releasing and maintaining this library. We use a ton of this code. Personally, I have learned a lot by reading it. The effort that goes into the code itself, as well as the management of this OSS project, communication, and issue handling is all top notch and very much appreciated.\r\n\r\nThanks!\r\nDarren.\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/folly/pulls/comments/73794296", "body": "After seeing your comment, I gave this a shot, but wasn't successful.  The best I could come up with is below, but in the meantime I did find this commit https://github.com/facebook/folly/commit/9fc18f0ac3b21dc2abb5700fba9fc0c27ffd190d#diff-0aeb0bf602d25a066eb2233e06c4a981R48 in which you move away from C++11.  \n\nMy PR is based on the condition that C++11 is supported, but if it's not (and that's totally reasonable) then I'm happy to withdraw the PR\n\n-> typename std::result_of&lt;Function(Subclass::DataType&)&gt;::type\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/73794296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "shadowwalker2718": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/725", "title": "`make check` failed", "body": "```\r\nmake[3]: Entering directory '/opt/share/folly/folly/test'\r\nmake[3]: 'libfollytestmain.la' is up to date.\r\nmake[3]: 'libgtest.la' is up to date.\r\nmake[3]: 'foreach_benchmark' is up to date.\r\nmake[3]: 'benchmark_test' is up to date.\r\nmake[3]: 'concurrent_skiplist_benchmark' is up to date.\r\nmake[3]: 'conv_benchmark' is up to date.\r\nmake[3]: 'sorted_vector_types_test' is up to date.\r\nmake[3]: 'foreach_test' is up to date.\r\nmake[3]: 'hash_test' is up to date.\r\nmake[3]: 'timeout_queue_test' is up to date.\r\nmake[3]: 'conv_test' is up to date.\r\nmake[3]: 'expected_test' is up to date.\r\n/bin/bash ../libtool  --tag=CXX   --mode=link g++  -std=gnu++1y -g -O2 -lboost_context -lboost_program_options -lboost_thread -lboost_filesystem -lboost_system -lboost_regex -lpthread -lboost_chrono  -lssl -lcrypto  -o range_test RangeTest.o libfollytestmain.la -lbz2 -llzma -lz -lsnappy -llz4 -ldl -levent -ldouble-conversion -lglog -lgflags \r\nlibtool: link: g++ -std=gnu++1y -g -O2 -o .libs/range_test RangeTest.o  ./.libs/libfollytestmain.a /opt/share/folly/folly/init/.libs/libfollyinit.so /opt/share/folly/folly/.libs/libfolly.so -lboost_context -lboost_program_options -lboost_thread -lboost_filesystem -lboost_system -lboost_regex -lpthread -lboost_chrono -lssl -lcrypto -lbz2 -llzma -lz -lsnappy -llz4 -ldl -levent -ldouble-conversion -lglog -lgflags\r\nRangeTest.o: In function `testing::IsEmptyMatcher::gmock_Impl<folly::Range<int const*> const&>::FormatDescription[abi:cxx11](bool) const':\r\n/opt/share/folly/folly/test/gtest/googlemock/include/gmock/gmock-more-matchers.h:48: undefined reference to `testing::internal::FormatMatcherDescription(bool, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)'\r\n/opt/share/folly/folly/test/gtest/googlemock/include/gmock/gmock-more-matchers.h:48: undefined reference to `testing::internal::FormatMatcherDescription(bool, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)'\r\ncollect2: error: ld returned 1 exit status\r\nMakefile:1770: recipe for target 'range_test' failed\r\nmake[3]: *** [range_test] Error 1\r\nmake[3]: Leaving directory '/opt/share/folly/folly/test'\r\nMakefile:2911: recipe for target 'check-am' failed\r\nmake[2]: *** [check-am] Error 2\r\nmake[2]: Leaving directory '/opt/share/folly/folly/test'\r\nMakefile:2131: recipe for target 'check-recursive' failed\r\nmake[1]: *** [check-recursive] Error 1\r\nmake[1]: Leaving directory '/opt/share/folly/folly/test'\r\nMakefile:2302: recipe for target 'check-recursive' failed\r\nmake: *** [check-recursive] Error 1\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Vxider": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/711", "title": "Disable test", "body": "Hi,\r\n    I'am trying to cross compile folly to other platform, how can I disable test in `configure`?\r\nHere is my error:\r\n```\r\n./configure --enable-static --disable-shared --with-PACKAGE=MPMCQueue --with-boost=/home/vxider/local/boost --host=x86_64 \r\n\r\n...\r\nconfigure: error: cannot run test program while cross compiling\r\nSee `config.log' for more details\r\n...\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RcRonco": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/700", "title": "Compression namespace", "body": "Hi,\r\nWhen compression moved from ```io``` to its own folder the namespace still stayed ```folly::io```, which is quite confusing.\r\nMaybe it should be in its own namespace or in the ```folly``` namespace, or even return the ```compression``` into ```io``` folder.\r\n\r\nIn compression [Utils.h](https://github.com/facebook/folly/blob/master/folly/compression/Utils.h#L30) the namespace ```folly::io::compression``` exists, refactoring the namespaces of the compression folder will make it more consistent, I don`t mind to do it.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/652", "title": "redefinition of 'mallocx'", "body": "Hi,\r\nIm working on project using FBVector and FBString and while trying to compile with jemalloc i get errors like: ```redefinition of 'mallocx' as different kind of symbol```, while defining ```USE_JEMMALOC```.\r\nwithout defining ```USE_JEMMALOC``` the function ```folly::usingJEMalloc()``` return false.\r\n\r\nIm using mac osx sierra\r\nApple LLVM version 8.1.0\r\njemalloc 5.0.1\r\nfolly - latest from brew\r\n\r\nI tried solutions from this issue without success #635 \r\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tlanwairen123": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/699", "title": "folly configure checking whether the Boost::Context library is available... no", "body": "i try build the folly. there have an error for configure for checking whether the Boost::Context library is available... no\r\nI have install boost and boost_context\uff0chow can i Solve the problem\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yangxingpping": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/698", "title": "win ProducerConsumerQueue", "body": "Installing from vcpkg. Compiling failed when I am try to run ProducerConsumerQueue,with error C2327,C2065. folly::ProducerConsumerQueue<int>::writeIndex is not type name, nor enum.\r\nwriteIndex_ is not declared. It seems like vc++ does not support assign array size with sizeof(writeIndex_).", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "newpoo": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/696", "title": "Can we add a callback parameter to IOBuf::wrapBuffer()?", "body": "IOBuf can inform clients when there is no any IOBuf objects refer to the buffer?\r\nSo clients know that it's safe to release the buffer now.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "conqer": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/694", "title": "Streaming Promise", "body": "Would it make sense to create a construct StreamingPromise that can `setValue` multiple times? The use case is that when the call site is something like:\r\n\r\n`\r\nserviceProxy.getResponse().then([](const ResponsePart&  response)\r\n{\r\n    //  Do something with partial response\r\n});\r\n\r\n`\r\n\r\nIt would be great to have the `ServiceProxy::getResponse` return a `Future` that can be set multiple times by the `Promise` that was created the first time it was called.\r\n\r\nIs this the limitation of the Future/Promise paradigm or would it be a good idea to support something like 'StreamingPromise' ?", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kelu27": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/690", "title": "Undefined reference", "body": "I'm building folly for mcrouter on ubuntu:16.04:\r\nHere is my error with your last commit https://github.com/facebook/folly/commit/69d97159209c5a77fdf7805155738604233d0b8a:\r\n\r\n`folly/folly/.libs/libfolly.so: undefined reference to folly::AsyncSocketException::getMessage(folly::AsyncSocketException::AsyncSocketExceptionType, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)'`", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "guodongxiaren": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/687", "title": "dyld: Library not loaded: libboost_context.dylib", "body": "./generate_fingerprint_tables\r\ndyld: Library not loaded: libboost_context.dylib\r\n  Referenced from: /Users/jelly/Documents/Source/folly/folly/./generate_fingerprint_tables\r\n  Reason: image not found\r\nmake[2]: *** [FingerprintTables.cpp] Trace/BPT trap: 5\r\nmake[1]: *** [all-recursive] Error 1\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "samdasnake": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/684", "title": "Error with 'libfollybenchmark.la' during make", "body": "I am receiving the following error when I run `make install` to install folly.  I am running Ubuntu 16.04.  Here are the error messages I receive.\r\n`/usr/bin/ld: /usr/local/lib/libdouble-conversion.a(double-conversion.cc.o): relocation R_X86_64_32 against '.bss' can not be used when making a shared object; recompile with -fPIC\r\n/usr/local/lib/libdouble-conversion.a: error adding symbols: Bad value\r\ncollect2: error: ld returned 1 exit status\r\nlibtool:   **_error: error: relink 'libfollybenchmark.la' with the above command before installing it_**\r\nMakefile:1316: recipe for target 'install-libLTLIBRARIES' failed\r\nmake[2]: *** [install-libLTLIBRARIES] Error 1`\r\n\r\nI have tried to install folly directly as well as with the fblualib install_all.sh script.  In both cases I received this same error message.  Does anyone know how I can resolve this issue?  Thanks!", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/684/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jrch2k10": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/682", "title": "MPMCQueue.h is broken on Xcode 9 and Archlinux GCC 7/Clang 6 and maybe other", "body": "Hi, guys\r\n\r\nI've been trying to use folly and wangle  but MPMCQueue.h fail to compile on any compiler I've tried so far.\r\n\r\nArchLinux Gcc 7 and Clang 5/6\r\nMacOS 10.13 + Xcode 9\r\n\r\nI'm missing something or is a known issue?\r\n\r\nBtw there is no code in that file just the basic includes from one of the examples\r\n\r\nTyVM for your time\r\n```\r\nIn file included from /Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/PentaProto/src/asyncserver.cpp:1:\r\nIn file included from /Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/PentaProto/include/asyncserver.hpp:4:\r\nIn file included from /Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/PentaProto/include/asyncsocketclient.hpp:4:\r\nIn file included from /Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/PentaProto/include/Threadpool.hpp:4:\r\nIn file included from /Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/PentaProto/include/libpentaprotocol_global.hpp:100:\r\nIn file included from /Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/Apple/include/wangle/service/ExecutorFilter.h:19:\r\nIn file included from /Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/Apple/include/wangle/service/Service.h:22:\r\nIn file included from /Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/Apple/include/wangle/bootstrap/ServerBootstrap.h:19:\r\nIn file included from /Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/Apple/include/wangle/bootstrap/ServerBootstrap-inl.h:27:\r\nIn file included from /Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/Apple/include/wangle/concurrent/IOThreadPoolExecutor.h:19:\r\nIn file included from /Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/Apple/include/folly/executors/IOThreadPoolExecutor.h:20:\r\nIn file included from /Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/Apple/include/folly/executors/ThreadPoolExecutor.h:23:\r\nIn file included from /Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/Apple/include/folly/executors/LifoSemMPMCQueue.h:20:\r\n/Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/Apple/include/folly/MPMCQueue.h:269:16: error: expected unqualified-id\r\n    Slot* slots;\r\n               ^\r\n/Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/Apple/include/folly/MPMCQueue.h:275:58: error: expected expression\r\n      while (UNLIKELY(!trySeqlockReadSection(state, slots, cap, stride))) {\r\n                                                         ^\r\n/Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/Apple/include/folly/MPMCQueue.h:278:57: error: expected expression\r\n      maybeUpdateFromClosed(state, ticket, offset, slots, cap, stride);\r\n                                                        ^\r\n/Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/Apple/include/folly/MPMCQueue.h:279:28: error: expected ',' or ']' in lambda capture list\r\n      if (LIKELY(slots[this->idx((ticket - offset), cap, stride)].mayEnqueue(\r\n                           ^\r\n/Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/Apple/include/folly/MPMCQueue.h:286:29: error: use of undeclared identifier 'head'\r\n      auto avail = std::max(head, offset) + cap;\r\n                            ^\r\n/Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/Apple/include/folly/MPMCQueue.h:299:53: error: expected expression\r\n    this->enqueueWithTicketBase(ticket-offset, slots, cap, stride,\r\n                                                    ^\r\n/Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/Apple/include/folly/MPMCQueue.h:305:16: error: expected unqualified-id\r\n    Slot* slots;\r\n               ^\r\n/Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/Apple/include/folly/MPMCQueue.h:310:56: error: expected expression\r\n    while (UNLIKELY(!trySeqlockReadSection(state, slots, cap, stride))) {\r\n                                                       ^\r\n/Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/Apple/include/folly/MPMCQueue.h:315:55: error: expected expression\r\n    maybeUpdateFromClosed(state, ticket, offset, slots, cap, stride);\r\n                                                      ^\r\n/Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/Apple/include/folly/MPMCQueue.h:316:53: error: expected expression\r\n    this->dequeueWithTicketBase(ticket-offset, slots, cap, stride, elem);\r\n                                                    ^\r\n/Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/Apple/include/folly/MPMCQueue.h:352:55: error: expected expression\r\n      if (UNLIKELY(!trySeqlockReadSection(state, slots, cap, stride))) {\r\n                                                      ^\r\n/Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/Apple/include/folly/MPMCQueue.h:359:57: error: expected expression\r\n      maybeUpdateFromClosed(state, ticket, offset, slots, cap, stride);\r\n                                                        ^\r\n/Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/Apple/include/folly/MPMCQueue.h:360:28: error: expected ',' or ']' in lambda capture list\r\n      if (LIKELY(slots[this->idx((ticket - offset), cap, stride)].mayEnqueue(\r\n                           ^\r\n/Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/Apple/include/folly/MPMCQueue.h:390:29: error: use of undeclared identifier 'head'\r\n      auto avail = std::max(head, offset) + cap;\r\n                            ^\r\n/Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/Apple/include/folly/MPMCQueue.h:418:55: error: expected expression\r\n      if (UNLIKELY(!trySeqlockReadSection(state, slots, cap, stride))) {\r\n                                                      ^\r\n/Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/Apple/include/folly/MPMCQueue.h:425:57: error: expected expression\r\n      maybeUpdateFromClosed(state, ticket, offset, slots, cap, stride);\r\n                                                        ^\r\n/Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/Apple/include/folly/MPMCQueue.h:449:47: error: expected expression\r\n        if (trySeqlockReadSection(state, slots, cap, stride)) {\r\n                                              ^\r\n/Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/Apple/include/folly/MPMCQueue.h:454:57: error: expected expression\r\n      maybeUpdateFromClosed(state, ticket, offset, slots, cap, stride);\r\n                                                        ^\r\n/Users/junior/Desarrollo/PentaSoftAdvancedCommPlatform/Apple/include/folly/MPMCQueue.h:466:55: error: expected expression\r\n      if (UNLIKELY(!trySeqlockReadSection(state, slots, cap, stride))) {\r\n                                                      ^\r\nfatal error: too many errors emitted, stopping now [-ferror-limit=]\r\n2 warnings and 20 errors generated.\r\nmake[2]: *** [CMakeFiles/PentaProtocolServer.dir/PentaProto/src/asyncserver.cpp.o] Error 1\r\nmake[1]: *** [CMakeFiles/PentaProtocolServer.dir/all] Error 2\r\nmake: *** [all] Error 2\r\n```", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "capsocrates": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/679", "title": "asm command does not compile in MSVC", "body": "This code\r\n[`    asm volatile(\"\" ::\"m\"(ptr) : \"memory\");`](https://github.com/facebook/folly/blob/94b8816bbdca38914030842554cc955caee59063/folly/Malloc.h#L193)\r\nIntroduced in [this commit](https://github.com/facebook/folly/commit/610c11630a3cbccdc2be0a91b5a6c2f934af3f55) does not compile in MSVC.\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/24281653", "body": "This breaks MSVC builds that do not have the `/await` flag turned on.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/24281653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/comments/24283716", "body": "This is still broken on MSVC.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/24283716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/comments/24307607", "body": "Thanks for fixing this.\r\nAlternative fix:\r\n> #if FOLLY_HAVE_LIBZ\r\n> namespace zlib = folly::io::zlib;\r\n> #endif", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/24307607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "ArntWork": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/678", "title": "Readme.md wrong for Linking non-default boost libraries?", "body": "The instructions say ./configure --with-boost=$BOOST_ROOT/lib but while trying it on ubuntu 16.04 with latest boost,  we needed ./configure --with-boost=$BOOST_ROOT  (so without the /lib at the end). With /lib it says it cannot find a version of boost context.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "KindDragon": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/677", "title": "Issues with Visual C++ compiler", "body": "- [x] [folly/Malloc.h(193)](https://github.com/facebook/folly/blob/271977282fe30d3c351b5e8a6f1692d743996ed1/folly/Malloc.h#L193): error C2059: syntax error: 'volatile'  PR #688\r\n- [x] [folly/detail/Crc32cDetail.cpp(208)](https://github.com/facebook/folly/blob/271977282fe30d3c351b5e8a6f1692d743996ed1/folly/detail/Crc32cDetail.cpp#L208): [fatal error C1009: compiler limit: macros nested too deeply](https://github.com/facebook/folly/commit/74102328f60e450de7d1dab40d1772f82549fd96#commitcomment-23423375)\r\n- [x] [folly/executors/NamedThreadFactory.h(38)](https://github.com/facebook/folly/blob/271977282fe30d3c351b5e8a6f1692d743996ed1/folly/executors/NamedThreadFactory.h#L37-L38): error C2665: 'folly::setThreadName': none of the 2 overloads could convert all the argument types\r\n- [x] folly can't link with static libraries https://gist.github.com/KindDragon/c4e6414bd60242d317bb0387a82dce61#file-package-x64-windows-static-rel-out-log-L2291 PR #693\r\n- [x] [folly/futures/Future-inl.h(242)](https://github.com/facebook/folly/blob/fbc4c23895b0ee3874d9a36401d580a2a8957ba9/folly/futures/Future-inl.h#L242): error C2244: 'folly::SemiFuture<T>::SemiFuture': unable to match function definition to an existing declaration\r\n- [x] [folly/io/async/AsyncSocket.cpp(1589)](https://github.com/facebook/folly/blob/1b0dfd663244c1d743052072a507f1b9e1f88d05/folly/io/async/AsyncSocket.cpp#L1589): error C2039: 'Control': is not a member of 'msghdr'. Win10 SDK define MSG_ERRQUEUE too https://naughter.wordpress.com/2017/07/16/changes-in-the-windows-v10-0-16232-sdk-compared-to-windows-v10-0-15063-sdk-part-one/ PR #689\r\n- [x] [folly/io/async/AsyncSocket.cpp(939)](https://github.com/facebook/folly/blob/master/folly/io/async/AsyncSocket.cpp#L937-L946): error C2065: 'SOL_IP': undeclared identifier\r\n- [x] [folly/stats/Histogram.cpp(43)](https://github.com/facebook/folly/blob/1b0dfd663244c1d743052072a507f1b9e1f88d05/folly/stats/Histogram.cpp#L38-L43): error C5037: 'folly::detail::HistogramBuckets<__int64,folly::detail::Bucket<T>>::getPercentileBucketIdx': an out-of-line definition of a member of a class template cannot have default arguments with [T=int64_t] MSVC 2017U4 PR #691\r\n- [x] [folly/synchronization/CallOnce.h(86)](https://github.com/facebook/folly/blob/a447cb9ebc32100b18c0e3fc75bf5882db4857e3/folly/synchronization/CallOnce.h#L86): error C2988: unrecognizable template declaration/definition. CallOnce.h(98): note: see reference to class template instantiation 'folly::detail::once_flag<Mutex>' being compiled https://github.com/facebook/folly/commit/b529367b595dd4da7e70569cbea36d30ace4fa39#commitcomment-25665382\r\n- [x] [folly\\Random.cpp(43)](https://github.com/facebook/folly/blob/a447cb9ebc32100b18c0e3fc75bf5882db4857e3/folly/Random.cpp#L43): error C2672: 'folly::detail::once_flag<folly::SharedMutex>::{dtor}': no matching overloaded function found\r\n\r\n/cc @Orvid ", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/22042052", "body": "Hi. This trick doesn't work anymore with CMake 3.8", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/22042052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/22059164", "body": "> CMake doesn't let you require the 64-bit hosted toolchain\r\n\r\nYou can try workaround and call `set _ISNATIVEENVIRONMENT=true` \r\n before calling CMake https://gitlab.kitware.com/cmake/cmake/issues/15622 or with CMake 3.8 you can use `<toolset>,host=x64`", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/22059164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/22059340", "body": "Have you tried building folly.dll or only a static library?", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/22059340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/22059658", "body": "> I'd need to do a lot of decorating or hook up CMake's auto-export stuff to support it as a shared library.\r\n\r\nYou can try also use [`CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS` ](https://cmake.org/cmake/help/v3.7/variable/CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS.html)", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/22059658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/22061019", "body": "> Yeah, that's known, I just have to figure out how to fix it..\r\n\r\nWhy not just export `folly_base` too?", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/22061019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/22062870", "body": "JFYI This my PR to support `folly` in vcpkg https://github.com/Microsoft/vcpkg/pull/1054\r\nI am patching `CMakeLists.txt` to export also `folly_base`", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/22062870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/22841310", "body": "MSVC return error: \r\n```\r\nfolly-2017.06.26.01\\folly\\experimental\\logging\\LogStreamProcessor.cpp(98): error C2039: 'category': is not a member of 'folly::XlogFileScopeInfo'\r\n```", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/22841310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/22893070", "body": "Hi.\r\n\r\nThis change causes MSVC 2017 error:\r\n```\r\nfolly/Optional.h(298): error C2462: 'folly::Optional<Value>::StorageTriviallyDestructible': cannot define a type in a 'new-expression'\r\nfolly/Optional.h(337): note: see reference to class template instantiation 'folly::Optional<Value>' being compiled\r\nfolly/Optional.h(325): error C2462: 'folly::Optional<Value>::StorageNonTriviallyDestructible': cannot define a type in a 'new-expression'\r\n```\r\n/cc @Orvid", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/22893070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/22893110", "body": "Hi.\r\n\r\nThis change causes MSVC 2017 errors:\r\n```\r\nfolly-master\\folly\\portability\\SysUio.cpp(77): error C2039: 'sockets': is not a member of 'folly::portability'\r\nfolly-master\\folly/portability/Unistd.h(59): note: see declaration of 'folly::portability'\r\nfolly-master\\folly\\portability\\SysUio.cpp(130): note: see reference to function template instantiation 'ssize_t doVecOperation<true>(int,const iovec *,int)' being compiled\r\nfolly-master\\folly\\portability\\SysUio.cpp(77): error C3083: 'sockets': the symbol to the left of a '::' must be a type\r\nfolly-master\\folly\\portability\\SysUio.cpp(77): error C2039: 'is_fh_socket': is not a member of 'folly::portability'\r\nfolly-master\\folly/portability/Unistd.h(59): note: see declaration of 'folly::portability'\r\nfolly-master\\folly\\portability\\SysUio.cpp(77): error C3861: 'is_fh_socket': identifier not found\r\n```\r\n/cc @Orvid", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/22893110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/22896873", "body": "Thank you", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/22896873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/22898406", "body": "Cool, thanks", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/22898406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/22939778", "body": "If you remove `noexcept(noexcept(::new (nullptr) Value(std::declval<Args&&>()...)))` it's compile\r\nMaybe just add `#ifndef _MSC_VER` to it", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/22939778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/23423036", "body": "Can't compile with MSVC because of this changes\r\n/cc @Orvid \r\n\r\n```\r\nD:\\Work\\vcpkg\\buildtrees\\folly\\src\\folly-2017.07.31.00\\folly/Launder.h(40): error C2338: folly::launder is not implemented for this environment\r\nD:\\Work\\vcpkg\\buildtrees\\folly\\src\\folly-2017.07.31.00\\folly/Optional.h(313): note: see reference to function template instantiation 'T *folly::launder<Value>(T *) noexcept' being compiled\r\n        with\r\n        [\r\n            T=std::string,\r\n            Value=std::string\r\n        ]\r\n```", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/23423036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/23423375", "body": "MSVC return error:\r\n```\r\nD:\\Work\\vcpkg\\buildtrees\\folly\\src\\folly-2017.07.24.00\\folly\\detail\\Crc32cDetail.cpp(206): fatal error C1009: compiler limit: macros nested too deeply\r\n```\r\n/cc @Orvid ", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/23423375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/23425170", "body": "I don't know much about `BOOST_PP_REPEAT_FROM_TO`", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/23425170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/24334522", "body": "MSVC `error C2059: syntax error: 'volatile'` #677", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/24334522/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/facebook/folly/pulls/comments/119452232", "body": "You right", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/119452232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/119452606", "body": "Can I move `project()` above this `if`?", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/119452606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/119458010", "body": "Ahh. ok", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/119458010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/145280508", "body": "Ok", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/145280508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/147285030", "body": "I returned it", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/147285030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "smellyfis": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/671", "title": "folly v2017.09.11.00 does not pick up libunwind reference", "body": "I am using Gentoo and am trying to build an updated folly ebuild (installation stuff) and autotools did not put in the -lunwind for the linker and I got several unrecognized symbols related. when I added \"-lunwind\" to every libfolly*_LDFLAGS I was able to link properly. I do not generally use autotools so I don't know where it is needed to be placed to pick up that flag dynamically, but i see there is something checking for it in configure.ac.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "navidR": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/669", "title": "Change default build system to CMake", "body": "Considering how it is easy to build applications and libraries using CMake, I created this issue to track this problem of \"when CMake will be available for *nix (and all other) platforms?\"\r\n\r\nRight now CMake support is only available on Windows platform.\r\n\r\nLet me give you an instance, I am building a complex Android application. Most of the networking and file system (while being multi threaded) logic is in NDK and I am using 8,9 different library. Compiling those libraries with Autotools is just like hell (therefore it is totally okay to call it Autohell). But just look at this link and see how it is easy to compile C++ project for NDK : \r\nhttps://developer.android.com/ndk/guides/standalone_toolchain.html\r\n\r\nIf you are not familiar with programming in NDK, I have to say compiling and setting up toolchain and required stuff is way complicated than your actual project (figure of speech), while with CMake and CMake support from Google, it is just adding two or three flags and then compiling your library to whatever arch and API level you are targeting. Folly and Wangle are very useful libraries. The only barrier for me to migrate our company C++/NDK to Folly is Autotools (consider how difficult it is to set up continuous integration for NDK and Autotools).", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/669/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "D-PorcoRosso": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/667", "title": "Fatal signal 6 (SIGABRT)", "body": "Hi:\r\n\r\nI wrote my jni library and integrated prebuild OpenSSL 1.0.2j to verify files signature correctness.\r\n\r\n\bAnd I exploded my jni library (as an aar file) into application project which used react-native, and run application, the native crash happened.\r\n\r\nCrash log as following text, do you have any idea about this crash?\r\n\r\nA/ReactNativeJNI: Check failed: 0 \r\n                                                                      \r\n--------- beginning of crash\r\nA/libc: Fatal signal 6 (SIGABRT), code -6 in tid 13774 (FinalizerDaemon)\r\n                                                            \r\n                                                            [ 08-29 16:23:49.846   571:  571 W/         ]\r\n                                                            debuggerd: handling request: pid=13763 uid=10288 gid=10288 tid=13774\r\n08-29 16:23:50.000 14901-14901/? A/DEBUG: *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\r\n08-29 16:23:50.000 14901-14901/? A/DEBUG: Build fingerprint: 'google/sailfish/sailfish:7.1.2/NJH47F/4146041:user/release-keys'\r\n08-29 16:23:50.000 14901-14901/? A/DEBUG: Revision: '0'\r\n08-29 16:23:50.001 14901-14901/? A/DEBUG: ABI: 'arm'\r\n08-29 16:23:50.001 14901-14901/? A/DEBUG: pid: 13763, tid: 13774, name: FinalizerDaemon  >>> com.xxxxxxxxx.xxxxxxxxx <<<\r\n08-29 16:23:50.001 14901-14901/? A/DEBUG: signal 6 (SIGABRT), code -6 (SI_TKILL), fault addr --------\r\n08-29 16:23:50.039 14901-14901/? A/DEBUG: Abort message: 'Check failed: 0 '\r\n08-29 16:23:50.039 14901-14901/? A/DEBUG:     r0 00000000  r1 000035ce  r2 00000006  r3 00000008\r\n08-29 16:23:50.039 14901-14901/? A/DEBUG:     r4 eb31f978  r5 00000006  r6 eb31f920  r7 0000010c\r\n08-29 16:23:50.039 14901-14901/? A/DEBUG:     r8 d1840e18  r9 d183e17e  sl 59a52495  fp d184ff7c\r\n08-29 16:23:50.039 14901-14901/? A/DEBUG:     ip 0000000b  sp eb31f250  lr edfa05c7  pc edfa2e30  cpsr 600f0010\r\n08-29 16:23:50.061 14901-14901/? A/DEBUG: backtrace:\r\n08-29 16:23:50.062 14901-14901/? A/DEBUG:     #00 pc 00049e30  /system/lib/libc.so (tgkill+12)\r\n08-29 16:23:50.062 14901-14901/? A/DEBUG:     #01 pc 000475c3  /system/lib/libc.so (pthread_kill+34)\r\n08-29 16:23:50.062 14901-14901/? A/DEBUG:     #02 pc 0001d635  /system/lib/libc.so (raise+10)\r\n08-29 16:23:50.062 14901-14901/? A/DEBUG:     #03 pc 00019181  /system/lib/libc.so (__libc_android_abort+34)\r\n08-29 16:23:50.063 14901-14901/? A/DEBUG:     #04 pc 00017048  /system/lib/libc.so (abort+4)\r\n08-29 16:23:50.064 14901-14901/? A/DEBUG:     #05 pc 0000864b  /data/app/com.xxxxxxxxx.xxxxxxxxx-1/lib/arm/libglog.so\r\n08-29 16:23:50.064 14901-14901/? A/DEBUG:     #06 pc 00009a63  /data/app/com.xxxxxxxxx.xxxxxxxxx-1/lib/arm/libglog.so (_ZN6google10LogMessage4FailEv+10)\r\n08-29 16:23:50.064 14901-14901/? A/DEBUG:     #07 pc 0000bd47  /data/app/com.xxxxxxxxx.xxxxxxxxx-1/lib/arm/libglog.so (_ZN6google10LogMessage9SendToLogEv+246)\r\n08-29 16:23:50.064 14901-14901/? A/DEBUG:     #08 pc 00009897  /data/app/com.xxxxxxxxx.xxxxxxxxx-1/lib/arm/libglog.so (_ZN6google10LogMessage5FlushEv+102)\r\n08-29 16:23:50.064 14901-14901/? A/DEBUG:     #09 pc 0000bf7f  /data/app/com.xxxxxxxxx.xxxxxxxxx-1/lib/arm/libglog.so (_ZN6google15LogMessageFatalD2Ev+2)\r\n08-29 16:23:50.065 14901-14901/? A/DEBUG:     #10 pc 000108dd  /data/app/com.xxxxxxxxx.xxxxxxxxx-1/lib/arm/libfolly_json.so (_ZN5folly7dynamic7destroyEv+88)\r\n08-29 16:23:50.065 14901-14901/? A/DEBUG:     #11 pc 00010863  /data/app/com.xxxxxxxxx.xxxxxxxxx-1/lib/arm/libfolly_json.so (_ZNSt12_Destroy_auxILb0EE9__destroyIPN5folly7dynamicEEEvT_S5_+16)\r\n08-29 16:23:50.065 14901-14901/? A/DEBUG:     #12 pc 00010873  /data/app/com.xxxxxxxxx.xxxxxxxxx-1/lib/arm/libfolly_json.so (_ZNSt6vectorIN5folly7dynamicESaIS1_EED2Ev+8)\r\n08-29 16:23:50.065 14901-14901/? A/DEBUG:     #13 pc 000108a3  /data/app/com.xxxxxxxxx.xxxxxxxxx-1/lib/arm/libfolly_json.so (_ZN5folly7dynamic7destroyEv+30)\r\n08-29 16:23:50.065 14901-14901/? A/DEBUG:     #14 pc 0003256f  /data/app/com.xxxxxxxxx.xxxxxxxxx-1/lib/arm/libreactnativejnifb.so\r\n08-29 16:23:50.065 14901-14901/? A/DEBUG:     #15 pc 00032907  /data/app/com.xxxxxxxxx.xxxxxxxxx-1/lib/arm/libreactnativejnifb.so\r\n08-29 16:23:50.065 14901-14901/? A/DEBUG:     #16 pc 0001df6b  /data/app/com.xxxxxxxxx.xxxxxxxxx-1/lib/arm/libreactnativejnifb.so (_ZNSt14_Function_baseD2Ev+12)\r\n08-29 16:23:50.065 14901-14901/? A/DEBUG:     #17 pc 00032981  /data/app/com.xxxxxxxxx.xxxxxxxxx-1/lib/arm/libreactnativejnifb.so\r\n08-29 16:23:50.065 14901-14901/? A/DEBUG:     #18 pc 00032a99  /data/app/com.xxxxxxxxx.xxxxxxxxx-1/lib/arm/libreactnativejnifb.so\r\n08-29 16:23:50.065 14901-14901/? A/DEBUG:     #19 pc 0001df6b  /data/app/com.xxxxxxxxx.xxxxxxxxx-1/lib/arm/libreactnativejnifb.so (_ZNSt14_Function_baseD2Ev+12)\r\n08-29 16:23:50.065 14901-14901/? A/DEBUG:     #20 pc 0001e009  /data/app/com.xxxxxxxxx.xxxxxxxxx-1/lib/arm/libreactnativejnifb.so\r\n08-29 16:23:50.065 14901-14901/? A/DEBUG:     #21 pc 0001df6b  /data/app/com.xxxxxxxxx.xxxxxxxxx-1/lib/arm/libreactnativejnifb.so (_ZNSt14_Function_baseD2Ev+12)\r\n08-29 16:23:50.065 14901-14901/? A/DEBUG:     #22 pc 0001df7f  /data/app/com.xxxxxxxxx.xxxxxxxxx-1/lib/arm/libreactnativejnifb.so\r\n08-29 16:23:50.065 14901-14901/? A/DEBUG:     #23 pc 0001df9d  /data/app/com.xxxxxxxxx.xxxxxxxxx-1/lib/arm/libreactnativejnifb.so\r\n08-29 16:23:50.065 14901-14901/? A/DEBUG:     #24 pc 0000afed  /data/app/com.xxxxxxxxx.xxxxxxxxx-1/lib/arm/libfb.so (_ZN8facebook3jni6detail10HybridData16setNativePointerESt10unique_ptrINS1_15BaseHybridClassESt14default_deleteIS4_EE+112)\r\n08-29 16:23:50.065 14901-14901/? A/DEBUG:     #25 pc 0000b05b  /data/app/com.xxxxxxxxx.xxxxxxxxx-1/lib/arm/libfb.so\r\n08-29 16:23:50.065 14901-14901/? A/DEBUG:     #26 pc 00a9a657  /data/app/com.xxxxxxxxx.xxxxxxxxx-1/oat/arm/base.odex (offset 0xa30000)", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "4a616d6573205265696c6c79": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/666", "title": "Folly fails to compile with redefinition error", "body": "Configure/Make output:\r\n```\r\nfun@woodhouse:\\~/fboss/external/folly/folly$ autoreconf -ivf && ./configure\r\nautoreconf: Entering directory `.'\r\nautoreconf: configure.ac: not using Gettext\r\nautoreconf: running: aclocal --force -I m4\r\nautoreconf: configure.ac: tracing\r\nautoreconf: running: libtoolize --copy --force\r\nlibtoolize: putting auxiliary files in AC_CONFIG_AUX_DIR, 'build-aux'.\r\nlibtoolize: copying file 'build-aux/ltmain.sh'\r\nlibtoolize: putting macros in AC_CONFIG_MACRO_DIRS, 'm4'.\r\nlibtoolize: copying file 'm4/libtool.m4'\r\nlibtoolize: copying file 'm4/ltoptions.m4'\r\nlibtoolize: copying file 'm4/ltsugar.m4'\r\nlibtoolize: copying file 'm4/ltversion.m4'\r\nlibtoolize: copying file 'm4/lt~obsolete.m4'\r\nautoreconf: running: /usr/bin/autoconf --force\r\nautoreconf: running: /usr/bin/autoheader --force\r\nautoreconf: running: automake --add-missing --copy --force-missing\r\nconfigure.ac:32: installing 'build-aux/compile'\r\nconfigure.ac:27: installing 'build-aux/missing'\r\nMakefile.am: installing 'build-aux/depcomp'\r\nautoreconf: Leaving directory `.'\r\nchecking for a BSD-compatible install... /usr/bin/install -c\r\nchecking whether build environment is sane... yes\r\nchecking for a thread-safe mkdir -p... /bin/mkdir -p\r\nchecking for gawk... no\r\nchecking for mawk... mawk\r\nchecking whether make sets $(MAKE)... yes\r\nchecking whether make supports nested variables... yes\r\nchecking build system type... x86_64-pc-linux-gnu\r\nchecking host system type... x86_64-pc-linux-gnu\r\nchecking how to print strings... printf\r\nchecking for style of include used by make... GNU\r\nchecking for gcc... gcc\r\nchecking whether the C compiler works... yes\r\nchecking for C compiler default output file name... a.out\r\nchecking for suffix of executables...\r\nchecking whether we are cross compiling... no\r\nchecking for suffix of object files... o\r\nchecking whether we are using the GNU C compiler... yes\r\nchecking whether gcc accepts -g... yes\r\nchecking for gcc option to accept ISO C89... none needed\r\nchecking whether gcc understands -c and -o together... yes\r\nchecking dependency style of gcc... gcc3\r\nchecking for a sed that does not truncate output... /bin/sed\r\nchecking for grep that handles long lines and -e... /bin/grep\r\nchecking for egrep... /bin/grep -E\r\nchecking for fgrep... /bin/grep -F\r\nchecking for ld used by gcc... /usr/bin/ld\r\nchecking if the linker (/usr/bin/ld) is GNU ld... yes\r\nchecking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B\r\nchecking the name lister (/usr/bin/nm -B) interface... BSD nm\r\nchecking whether ln -s works... yes\r\nchecking the maximum length of command line arguments... 1572864\r\nchecking how to convert x86_64-pc-linux-gnu file names to x86_64-pc-linux-gnu format... func_convert_file_noop\r\nchecking how to convert x86_64-pc-linux-gnu file names to toolchain format... func_convert_file_noop\r\nchecking for /usr/bin/ld option to reload object files... -r\r\nchecking for objdump... objdump\r\nchecking how to recognize dependent libraries... pass_all\r\nchecking for dlltool... no\r\nchecking how to associate runtime and link libraries... printf %s\\n\r\nchecking for ar... ar\r\nchecking for archiver @FILE support... @\r\nchecking for strip... strip\r\nchecking for ranlib... ranlib\r\nchecking command to parse /usr/bin/nm -B output from gcc object... ok\r\nchecking for sysroot... no\r\nchecking for a working dd... /bin/dd\r\nchecking how to truncate binary pipes... /bin/dd bs=4096 count=1\r\nchecking for mt... mt\r\nchecking if mt is a manifest tool... no\r\nchecking how to run the C preprocessor... gcc -E\r\nchecking for ANSI C header files... yes\r\nchecking for sys/types.h... yes\r\nchecking for sys/stat.h... yes\r\nchecking for stdlib.h... yes\r\nchecking for string.h... yes\r\nchecking for memory.h... yes\r\nchecking for strings.h... yes\r\nchecking for inttypes.h... yes\r\nchecking for stdint.h... yes\r\nchecking for unistd.h... yes\r\nchecking for dlfcn.h... yes\r\nchecking for objdir... .libs\r\nchecking if gcc supports -fno-rtti -fno-exceptions... no\r\nchecking for gcc option to produce PIC... -fPIC -DPIC\r\nchecking if gcc PIC flag -fPIC -DPIC works... yes\r\nchecking if gcc static flag -static works... yes\r\nchecking if gcc supports -c -o file.o... yes\r\nchecking if gcc supports -c -o file.o... (cached) yes\r\nchecking whether the gcc linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes\r\nchecking whether -lc should be explicitly linked in... no\r\nchecking dynamic linker characteristics... GNU/Linux ld.so\r\nchecking how to hardcode library paths into programs... immediate\r\nchecking whether stripping libraries is possible... yes\r\nchecking if libtool supports shared libraries... yes\r\nchecking whether to build shared libraries... yes\r\nchecking whether to build static libraries... yes\r\nchecking for g++... g++\r\nchecking whether we are using the GNU C++ compiler... yes\r\nchecking whether g++ accepts -g... yes\r\nchecking dependency style of g++... gcc3\r\nchecking how to run the C++ preprocessor... g++ -E\r\nchecking for ld used by g++... /usr/bin/ld -m elf_x86_64\r\nchecking if the linker (/usr/bin/ld -m elf_x86_64) is GNU ld... yes\r\nchecking whether the g++ linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes\r\nchecking for g++ option to produce PIC... -fPIC -DPIC\r\nchecking if g++ PIC flag -fPIC -DPIC works... yes\r\nchecking if g++ static flag -static works... yes\r\nchecking if g++ supports -c -o file.o... yes\r\nchecking if g++ supports -c -o file.o... (cached) yes\r\nchecking whether the g++ linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes\r\nchecking dynamic linker characteristics... (cached) GNU/Linux ld.so\r\nchecking how to hardcode library paths into programs... immediate\r\nchecking for gcc... (cached) gcc\r\nchecking whether we are using the GNU C compiler... (cached) yes\r\nchecking whether gcc accepts -g... (cached) yes\r\nchecking for gcc option to accept ISO C89... (cached) none needed\r\nchecking whether gcc understands -c and -o together... (cached) yes\r\nchecking dependency style of gcc... (cached) gcc3\r\nchecking if g++ supports C++1y features without additional flags... yes\r\nchecking if g++ supports C++1y features with -std=c++1y... yes\r\nchecking if g++ supports C++1y features with -std=gnu++1y... yes\r\nchecking whether -Wshadow-local and -Wshadow-compatible-local are supported... no\r\nchecking for main in -lgflags... yes\r\nchecking for gflags viability... yes\r\nchecking for pkg-config... /usr/bin/pkg-config\r\nchecking pkg-config is at least version 0.9.0... yes\r\nchecking for GFLAGS... no\r\nconfigure: gflags.pc not found, treating as legacy dependency\r\nchecking for main in -lglog... yes\r\nchecking for glog viability... yes\r\nchecking for GLOG... yes\r\nchecking for pkg-config... /usr/bin/pkg-config\r\nchecking whether compiling and linking against OpenSSL works... yes\r\nchecking for OPENSSL... yes\r\nchecking for boostlib >= 1.51.0... yes\r\nchecking whether the Boost::Context library is available... yes\r\nchecking for exit in -lboost_context... yes\r\nchecking whether the Boost::Program_Options library is available... yes\r\nchecking for exit in -lboost_program_options... yes\r\nchecking whether the Boost::Thread library is available... yes\r\nchecking for exit in -lboost_thread... yes\r\nchecking whether the Boost::Regex library is available... yes\r\nchecking for exit in -lboost_regex... yes\r\nchecking whether the Boost::System library is available... yes\r\nchecking for exit in -lboost_system... yes\r\nchecking whether the Boost::Filesystem library is available... yes\r\nchecking for exit in -lboost_filesystem... yes\r\nchecking whether the Boost::Chrono library is available... yes\r\nchecking for exit in -lboost_chrono... yes\r\nchecking for python... /usr/bin/python\r\nchecking for python version... 2.7\r\nchecking for python platform... linux2\r\nchecking for python script directory... ${prefix}/lib/python2.7/dist-packages\r\nchecking for python extension module directory... ${exec_prefix}/lib/python2.7/dist-packages\r\nchecking for ANSI C header files... (cached) yes\r\nchecking features.h usability... yes\r\nchecking features.h presence... yes\r\nchecking for features.h... yes\r\nchecking malloc.h usability... yes\r\nchecking malloc.h presence... yes\r\nchecking for malloc.h... yes\r\nchecking bits/functexcept.h usability... yes\r\nchecking bits/functexcept.h presence... yes\r\nchecking for bits/functexcept.h... yes\r\nchecking bits/c++config.h usability... yes\r\nchecking bits/c++config.h presence... yes\r\nchecking for bits/c++config.h... yes\r\nchecking double-conversion/double-conversion.h usability... yes\r\nchecking double-conversion/double-conversion.h presence... yes\r\nchecking for double-conversion/double-conversion.h... yes\r\nchecking for ceil in -ldouble-conversion... yes\r\nchecking for event_set in -levent... yes\r\nchecking for EVENT... yes\r\nchecking for an ANSI C-conforming const... yes\r\nchecking for inline... inline\r\nchecking for size_t... yes\r\nchecking whether time.h and sys/time.h may both be included... yes\r\nchecking for working volatile... yes\r\nchecking for __int128... yes\r\nchecking for __int128 type traits... yes\r\nchecking for pthread_spinlock_t... yes\r\nchecking for ifunc support... yes\r\nchecking for final and override support... yes\r\nchecking for libc++... no\r\nchecking for c++11 atomic support without GNU Atomic library... yes\r\nchecking for main in -ldl... yes\r\nchecking for liblinux-vdso support... yes\r\nchecking for usable std::is_trivially_copyable... yes\r\nchecking gflags namespace... gflags\r\nchecking for weak symbol support... yes\r\nchecking for wchar support... yes\r\nchecking for unaligned access support... yes\r\nchecking for vsnprintf reporting bad format strings... no\r\nchecking for library containing cplus_demangle_v3_callback... -liberty\r\nchecking for library containing clock_gettime... none required\r\nchecking for pthread_atfork support... yes\r\nchecking for XSI style strerror_r support... no\r\nchecking for ext/random and __gnu_cxx::sfmt19937... yes\r\nchecking for VLA (variable-length array) support... yes\r\nchecking for malloc_size... no\r\nchecking for malloc_usable_size... yes\r\nchecking for memrchr... yes\r\nchecking for pipe2... yes\r\nchecking for preadv... yes\r\nchecking for pwritev... yes\r\nchecking lz4.h usability... yes\r\nchecking lz4.h presence... yes\r\nchecking for lz4.h... yes\r\nchecking for LZ4_decompress_safe in -llz4... yes\r\nchecking snappy.h usability... yes\r\nchecking snappy.h presence... yes\r\nchecking for snappy.h... yes\r\nchecking for main in -lsnappy... yes\r\nchecking zlib.h usability... yes\r\nchecking zlib.h presence... yes\r\nchecking for zlib.h... yes\r\nchecking for main in -lz... yes\r\nchecking lzma.h usability... yes\r\nchecking lzma.h presence... yes\r\nchecking for lzma.h... yes\r\nchecking for main in -llzma... yes\r\nchecking zstd.h usability... no\r\nchecking zstd.h presence... no\r\nchecking for zstd.h... no\r\nchecking bzlib.h usability... no\r\nchecking bzlib.h presence... no\r\nchecking for bzlib.h... no\r\nchecking linux/membarrier.h usability... yes\r\nchecking linux/membarrier.h presence... yes\r\nchecking for linux/membarrier.h... yes\r\nchecking libdwarf/dwarf.h usability... no\r\nchecking libdwarf/dwarf.h presence... no\r\nchecking for libdwarf/dwarf.h... no\r\nchecking dwarf.h usability... no\r\nchecking dwarf.h presence... no\r\nchecking for dwarf.h... no\r\nchecking that generated files are newer than configure... done\r\nconfigure: creating ./config.status\r\nconfig.status: creating Makefile\r\nconfig.status: creating io/test/Makefile\r\nconfig.status: creating libfolly.pc\r\nconfig.status: creating test/Makefile\r\nconfig.status: creating test/function_benchmark/Makefile\r\nconfig.status: creating experimental/Makefile\r\nconfig.status: creating experimental/io/test/Makefile\r\nconfig.status: creating experimental/logging/Makefile\r\nconfig.status: creating experimental/logging/example/Makefile\r\nconfig.status: creating experimental/symbolizer/Makefile\r\nconfig.status: creating init/Makefile\r\nconfig.status: creating stats/test/Makefile\r\nconfig.status: creating config.h\r\nconfig.status: config.h is unchanged\r\nconfig.status: executing folly-config.h commands\r\nconfig.status: creating folly-config.h - prefix FOLLY for config.h defines\r\nconfig.status: folly-config.h is unchanged\r\nconfig.status: executing depfiles commands\r\nconfig.status: executing libtool commands\r\nfun@woodhouse:\\~/fboss/external/folly/folly$ make\r\nmake  all-recursive\r\nmake[1]: Entering directory '/home/fun/fboss/external/folly/folly'\r\nMaking all in .\r\nmake[2]: Entering directory '/home/fun/fboss/external/folly/folly'\r\ndepbase=`echo Assume.lo | sed 's|[^/]*$|.deps/&|;s|\\.lo$||'`;\\\r\n/bin/bash ./libtool  --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H   -I./.. -pthread -I/usr/include    -std=gnu++1y -g -O2 -MT Assume.lo -MD -MP -MF $depbase.Tpo -c -o Assume.lo Assume.cpp &&\\\r\nmv -f $depbase.Tpo $depbase.Plo\r\nlibtool: compile:  g++ -DHAVE_CONFIG_H -I./.. -pthread -I/usr/include -std=gnu++1y -g -O2 -MT Assume.lo -MD -MP -MF .deps/Assume.Tpo -c Assume.cpp  -fPIC -DPIC -o .libs/Assume.o\r\nlibtool: compile:  g++ -DHAVE_CONFIG_H -I./.. -pthread -I/usr/include -std=gnu++1y -g -O2 -MT Assume.lo -MD -MP -MF .deps/Assume.Tpo -c Assume.cpp -o Assume.o >/dev/null 2>&1\r\ndepbase=`echo Checksum.lo | sed 's|[^/]*$|.deps/&|;s|\\.lo$||'`;\\\r\n/bin/bash ./libtool  --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H   -I./.. -pthread -I/usr/include    -std=gnu++1y -g -O2 -MT Checksum.lo -MD -MP -MF $depbase.Tpo -c -o Checksum.lo Checksum.cpp &&\\\r\nmv -f $depbase.Tpo $depbase.Plo\r\nlibtool: compile:  g++ -DHAVE_CONFIG_H -I./.. -pthread -I/usr/include -std=gnu++1y -g -O2 -MT Checksum.lo -MD -MP -MF .deps/Checksum.Tpo -c Checksum.cpp  -fPIC -DPIC -o .libs/Checksum.o\r\nlibtool: compile:  g++ -DHAVE_CONFIG_H -I./.. -pthread -I/usr/include -std=gnu++1y -g -O2 -MT Checksum.lo -MD -MP -MF .deps/Checksum.Tpo -c Checksum.cpp -o Checksum.o >/dev/null 2>&1\r\ndepbase=`echo ClockGettimeWrappers.lo | sed 's|[^/]*$|.deps/&|;s|\\.lo$||'`;\\\r\n/bin/bash ./libtool  --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H   -I./.. -pthread -I/usr/include    -std=gnu++1y -g -O2 -MT ClockGettimeWrappers.lo -MD -MP -MF $depbase.Tpo -c -o ClockGettimeWrappers.lo ClockGettimeWrappers.cpp &&\\\r\nmv -f $depbase.Tpo $depbase.Plo\r\nlibtool: compile:  g++ -DHAVE_CONFIG_H -I./.. -pthread -I/usr/include -std=gnu++1y -g -O2 -MT ClockGettimeWrappers.lo -MD -MP -MF .deps/ClockGettimeWrappers.Tpo -c ClockGettimeWrappers.cpp  -fPIC -DPIC -o .libs/ClockGettimeWrappers.o\r\nlibtool: compile:  g++ -DHAVE_CONFIG_H -I./.. -pthread -I/usr/include -std=gnu++1y -g -O2 -MT ClockGettimeWrappers.lo -MD -MP -MF .deps/ClockGettimeWrappers.Tpo -c ClockGettimeWrappers.cpp -o ClockGettimeWrappers.o >/dev/null 2>&1\r\ndepbase=`echo concurrency/CacheLocality.lo | sed 's|[^/]*$|.deps/&|;s|\\.lo$||'`;\\\r\n/bin/bash ./libtool  --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H   -I./.. -pthread -I/usr/include    -std=gnu++1y -g -O2 -MT concurrency/CacheLocality.lo -MD -MP -MF $depbase.Tpo -c -o concurrency/CacheLocality.lo concurrency/CacheLocality.cpp &&\\\r\nmv -f $depbase.Tpo $depbase.Plo\r\nlibtool: compile:  g++ -DHAVE_CONFIG_H -I./.. -pthread -I/usr/include -std=gnu++1y -g -O2 -MT concurrency/CacheLocality.lo -MD -MP -MF concurrency/.deps/CacheLocality.Tpo -c concurrency/CacheLocality.cpp  -fPIC -DPIC -o concurrency/.libs/CacheLocality.o\r\nlibtool: compile:  g++ -DHAVE_CONFIG_H -I./.. -pthread -I/usr/include -std=gnu++1y -g -O2 -MT concurrency/CacheLocality.lo -MD -MP -MF concurrency/.deps/CacheLocality.Tpo -c concurrency/CacheLocality.cpp -o concurrency/CacheLocality.o >/dev/null 2>&1\r\ndepbase=`echo detail/Futex.lo | sed 's|[^/]*$|.deps/&|;s|\\.lo$||'`;\\\r\n/bin/bash ./libtool  --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H   -I./.. -pthread -I/usr/include    -std=gnu++1y -g -O2 -MT detail/Futex.lo -MD -MP -MF $depbase.Tpo -c -o detail/Futex.lo detail/Futex.cpp &&\\\r\nmv -f $depbase.Tpo $depbase.Plo\r\nlibtool: compile:  g++ -DHAVE_CONFIG_H -I./.. -pthread -I/usr/include -std=gnu++1y -g -O2 -MT detail/Futex.lo -MD -MP -MF detail/.deps/Futex.Tpo -c detail/Futex.cpp  -fPIC -DPIC -o detail/.libs/Futex.o\r\nlibtool: compile:  g++ -DHAVE_CONFIG_H -I./.. -pthread -I/usr/include -std=gnu++1y -g -O2 -MT detail/Futex.lo -MD -MP -MF detail/.deps/Futex.Tpo -c detail/Futex.cpp -o detail/Futex.o >/dev/null 2>&1\r\ndepbase=`echo detail/IPAddress.lo | sed 's|[^/]*$|.deps/&|;s|\\.lo$||'`;\\\r\n/bin/bash ./libtool  --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H   -I./.. -pthread -I/usr/include    -std=gnu++1y -g -O2 -MT detail/IPAddress.lo -MD -MP -MF $depbase.Tpo -c -o detail/IPAddress.lo detail/IPAddress.cpp &&\\\r\nmv -f $depbase.Tpo $depbase.Plo\r\nlibtool: compile:  g++ -DHAVE_CONFIG_H -I./.. -pthread -I/usr/include -std=gnu++1y -g -O2 -MT detail/IPAddress.lo -MD -MP -MF detail/.deps/IPAddress.Tpo -c detail/IPAddress.cpp  -fPIC -DPIC -o detail/.libs/IPAddress.o\r\nlibtool: compile:  g++ -DHAVE_CONFIG_H -I./.. -pthread -I/usr/include -std=gnu++1y -g -O2 -MT detail/IPAddress.lo -MD -MP -MF detail/.deps/IPAddress.Tpo -c detail/IPAddress.cpp -o detail/IPAddress.o >/dev/null 2>&1\r\ndepbase=`echo detail/StaticSingletonManager.lo | sed 's|[^/]*$|.deps/&|;s|\\.lo$||'`;\\\r\n/bin/bash ./libtool  --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H   -I./.. -pthread -I/usr/include    -std=gnu++1y -g -O2 -MT detail/StaticSingletonManager.lo -MD -MP -MF $depbase.Tpo -c -o detail/StaticSingletonManager.lo detail/StaticSingletonManager.cpp &&\\\r\nmv -f $depbase.Tpo $depbase.Plo\r\nlibtool: compile:  g++ -DHAVE_CONFIG_H -I./.. -pthread -I/usr/include -std=gnu++1y -g -O2 -MT detail/StaticSingletonManager.lo -MD -MP -MF detail/.deps/StaticSingletonManager.Tpo -c detail/StaticSingletonManager.cpp  -fPIC -DPIC -o detail/.libs/StaticSingletonManager.o\r\nlibtool: compile:  g++ -DHAVE_CONFIG_H -I./.. -pthread -I/usr/include -std=gnu++1y -g -O2 -MT detail/StaticSingletonManager.lo -MD -MP -MF detail/.deps/StaticSingletonManager.Tpo -c detail/StaticSingletonManager.cpp -o detail/StaticSingletonManager.o >/dev/null 2>&1\r\ndepbase=`echo detail/ThreadLocalDetail.lo | sed 's|[^/]*$|.deps/&|;s|\\.lo$||'`;\\\r\n/bin/bash ./libtool  --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H   -I./.. -pthread -I/usr/include    -std=gnu++1y -g -O2 -MT detail/ThreadLocalDetail.lo -MD -MP -MF $depbase.Tpo -c -o detail/ThreadLocalDetail.lo detail/ThreadLocalDetail.cpp &&\\\r\nmv -f $depbase.Tpo $depbase.Plo\r\nlibtool: compile:  g++ -DHAVE_CONFIG_H -I./.. -pthread -I/usr/include -std=gnu++1y -g -O2 -MT detail/ThreadLocalDetail.lo -MD -MP -MF detail/.deps/ThreadLocalDetail.Tpo -c detail/ThreadLocalDetail.cpp  -fPIC -DPIC -o detail/.libs/ThreadLocalDetail.o\r\nIn file included from ./../folly/Foreach.h:320:0,\r\n                 from ./../folly/detail/ThreadLocalDetail.h:30,\r\n                 from detail/ThreadLocalDetail.cpp:16:\r\n./../folly/Foreach-inl.h:222:6: error: redefinition of 'template<class Sequence, class Func, folly::for_each_detail::EnableIfAcceptsTwoArguments<Sequence, Func>* <anonymous> > void folly::for_each_detail::for_each_range_impl(Sequence&&, Func&)'\r\n void for_each_range_impl(Sequence&& range, Func& func) {\r\n      ^~~~~~~~~~~~~~~~~~~\r\n./../folly/Foreach-inl.h:215:6: note: 'template<class Sequence, class Func, folly::for_each_detail::EnableIfAcceptsThreeArguments<Sequence, Func>* <anonymous> > void folly::for_each_detail::for_each_range_impl(Sequence&&, Func&)' previously declared here\r\n void for_each_range_impl(Sequence&& range, Func& func) {\r\n      ^~~~~~~~~~~~~~~~~~~\r\n./../folly/Foreach-inl.h:236:6: error: redefinition of 'template<class Sequence, class Func, folly::for_each_detail::EnableIfAcceptsOneArgument<Sequence, Func>* <anonymous> > void folly::for_each_detail::for_each_range_impl(Sequence&&, Func&)'\r\n void for_each_range_impl(Sequence&& range, Func& func) {\r\n      ^~~~~~~~~~~~~~~~~~~\r\n./../folly/Foreach-inl.h:215:6: note: 'template<class Sequence, class Func, folly::for_each_detail::EnableIfAcceptsThreeArguments<Sequence, Func>* <anonymous> > void folly::for_each_detail::for_each_range_impl(Sequence&&, Func&)' previously declared here\r\n void for_each_range_impl(Sequence&& range, Func& func) {\r\n      ^~~~~~~~~~~~~~~~~~~\r\n./../folly/Foreach-inl.h:315:6: error: redefinition of 'template<class Sequence, class Func, folly::for_each_detail::EnableIfAcceptsOneArgument<Sequence, Func>* <anonymous> > void folly::for_each_detail::for_each_tuple_impl(Sequence&&, Func&)'\r\n void for_each_tuple_impl(Sequence&& seq, Func& func) {\r\n      ^~~~~~~~~~~~~~~~~~~\r\n./../folly/Foreach-inl.h:303:6: note: 'template<class Sequence, class Func, folly::for_each_detail::EnableIfAcceptsTwoArguments<Sequence, Func>* <anonymous> > void folly::for_each_detail::for_each_tuple_impl(Sequence&&, Func&)' previously declared here\r\n void for_each_tuple_impl(Sequence&& seq, Func& func) {\r\n      ^~~~~~~~~~~~~~~~~~~\r\nMakefile:1902: recipe for target 'detail/ThreadLocalDetail.lo' failed\r\nmake[2]: *** [detail/ThreadLocalDetail.lo] Error 1\r\nmake[2]: Leaving directory '/home/fun/fboss/external/folly/folly'\r\nMakefile:2013: recipe for target 'all-recursive' failed\r\nmake[1]: *** [all-recursive] Error 1\r\nmake[1]: Leaving directory '/home/fun/fboss/external/folly/folly'\r\nMakefile:1195: recipe for target 'all' failed\r\nmake: *** [all] Error 2\r\nfun@woodhouse:\\~/fboss/external/folly/folly$\r\n```\r\n\r\nG++ version info:\r\n```\r\nfun@woodhouse:\\~/fboss/external/folly/folly$ g++ --version\r\ng++ (Debian 6.3.0-18) 6.3.0 20170516\r\nCopyright (C) 2016 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n```", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bilosikia": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/665", "title": "ubuntu 17.04 make error", "body": "i have installed all the packages.how can i deal with this?\r\ndetail/Crc32cDetail.cpp: In function \u2018uint64_t folly::crc32_detail::CombineCRC(long unsigned int, uint64_t, uint64_t, uint64_t, const uint64_t*)\u2019:\r\ndetail/Crc32cDetail.cpp:153:31: error: \u2018_mm_cvtsi128_si64\u2019 was not declared in this scope\r\n   crc0 = _mm_cvtsi128_si64(res);\r\n                               ^\r\ndetail/Crc32cDetail.cpp:155:34: error: \u2018_mm_crc32_u64\u2019 was not declared in this scope\r\n   crc2 = _mm_crc32_u64(crc2, crc0);\r\n                                  ^\r\ndetail/Crc32cDetail.cpp: In function \u2018void folly::crc32_detail::triplet_loop(long unsigned int, uint64_t&, const unsigned char*&, long unsigned int)\u2019:\r\ndetail/Crc32cDetail.cpp:48:52: error: \u2018_mm_crc32_u64\u2019 was not declared in this scope\r\n   crc##0 = _mm_crc32_u64(crc##0, *(buf##0 + offset)); \\\r\n                                                    ^\r\ndetail/Crc32cDetail.cpp:201:9: note: in expansion of macro \u2018CRCtriplet\u2019\r\n         CRCtriplet(crc, next, -128);\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shaneknapp": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/662", "title": "unable to compile folly on ubuntu 16.04 LTS", "body": "i've gone through the installation instructions, installed all of the recommended packages, but building folly fails on the first make.\r\n\r\ni have a hand-rolled boost installation (1.6.2) installed in my homedir, which i compiled w/C++14 support.\r\n\r\n```\r\nsknapp@amp-jenkins-staging-master:~/incoming/folly/folly$ uname -a\r\nLinux amp-jenkins-staging-master 4.4.0-91-generic #114-Ubuntu SMP Tue Aug 8 11:56:56 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\nsknapp@amp-jenkins-staging-master:~/incoming/folly/folly$ gcc --version\r\ngcc (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609\r\nCopyright (C) 2015 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\nsknapp@amp-jenkins-staging-master:~/incoming/folly/folly$ ./configure --with-boost=$HOME/boost --prefix=/home/eecs/sknapp/thrift &> configure.out\r\nsknapp@amp-jenkins-staging-master:~/incoming/folly/folly$ grep boost configure.out\r\nchecking for boostlib >= 1.51.0... yes\r\nchecking for exit in -lboost_context... yes\r\nchecking for exit in -lboost_program_options... yes\r\nchecking for exit in -lboost_thread... yes\r\nchecking for exit in -lboost_regex... yes\r\nchecking for exit in -lboost_system... yes\r\nchecking for exit in -lboost_filesystem... yes\r\nchecking for exit in -lboost_chrono... yes\r\n```\r\n\r\nlooks cromulent, right?  well...\r\n\r\n```\r\nsknapp@amp-jenkins-staging-master:~/incoming/folly/folly$ make\r\nmake  all-recursive\r\nmake[1]: Entering directory '/home/eecs/sknapp/incoming/folly/folly'\r\nMaking all in .\r\nmake[2]: Entering directory '/home/eecs/sknapp/incoming/folly/folly'\r\n/bin/bash ./libtool  --tag=CXX   --mode=link g++  -std=gnu++1y -g -O2 -lboost_context -lboost_program_options -lboost_thread -lboost_filesystem -lboost_system -lboost_regex -lpthread -lboost_chrono  -lssl -lcrypto  -o generate_fingerprint_tables build/GenerateFingerprintTables.o libfollybase.la -llzma -lz -lsnappy -llz4 -liberty -ldl -levent -ldouble-conversion -lglog -lgflags\r\nlibtool: link: g++ -std=gnu++1y -g -O2 -o generate_fingerprint_tables build/GenerateFingerprintTables.o  ./.libs/libfollybase.a -lboost_context -lboost_program_options -lboost_thread -lboost_filesystem -lboost_system -lboost_regex -lpthread -lboost_chrono -lssl -lcrypto -llzma -lz -lsnappy -llz4 -liberty -ldl -levent -ldouble-conversion -lglog -lgflags\r\n/usr/bin/ld: cannot find -lboost_context\r\n/usr/bin/ld: cannot find -lboost_program_options\r\n/usr/bin/ld: cannot find -lboost_thread\r\n/usr/bin/ld: cannot find -lboost_filesystem\r\n/usr/bin/ld: cannot find -lboost_system\r\n/usr/bin/ld: cannot find -lboost_regex\r\ncollect2: error: ld returned 1 exit status\r\nMakefile:1662: recipe for target 'generate_fingerprint_tables' failed\r\nmake[2]: *** [generate_fingerprint_tables] Error 1\r\nmake[2]: Leaving directory '/home/eecs/sknapp/incoming/folly/folly'\r\nMakefile:1997: recipe for target 'all-recursive' failed\r\nmake[1]: *** [all-recursive] Error 1\r\nmake[1]: Leaving directory '/home/eecs/sknapp/incoming/folly/folly'\r\nMakefile:1191: recipe for target 'all' failed\r\nmake: *** [all] Error 2\r\n```\r\n\r\n(everything up until this point seems to compile normally)\r\n\r\ni've tried manually setting --with-boost-libdir, updating LD_LIBRARY_PATH, etc etc but i always get the same failure.\r\n\r\nany ideas?", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/folly/pulls/comments/134890677", "body": "done", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/134890677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "hrjaco": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/655", "title": "FutureTimekeepr threads runs forever", "body": "We have a thrift server built on top of fbthrift. We uses future's delayed() function to implement speculative request failover. But after we enable speculative request failover, we noticed that our server cannot be stopped correctly.\r\n\r\nAfter we stop the server, we noticed that our server's main function reaches the end, but the `FutureTimekeepr` still runs, which causes the process not stopped. If we do not enable speculative failover(FutureTimekeepr won't exist), our server can be stopped correctly.\r\n\r\nI noticed the FutureTimekeepr thread is used as a singleton inside ThreadWheelTimekeeper. Any idea why its destructor is not called even after main function reaches the end? thanks!", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ahundt": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/648", "title": "correcting version of glog expected by folly", "body": "I'm trying to coordinate the correction of an inconsistency between three tools, folly, glog, and homebrew, so please bear with me.\r\n\r\nfolly appears to expect a dynamic library for glog named:\r\n\r\n```\r\n  /usr/local/opt/glog/lib/libglog.0.dylib\r\n```\r\n\r\nHowever, this does not appear to be the correct filename for various versions and methods of installing of glog, depending on how it was compiled. This inconsistency between glog and folly causes the homebrew install of folly to fail. I'd like to resolve this inconsistency so all the utilities work together correctly. Thanks for your consideration! :-)\r\n\r\nEquivalent issues on the other projects:\r\nhttps://github.com/google/glog/issues/196\r\nhttps://github.com/Homebrew/homebrew-core/pull/14379", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "molele2": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/646", "title": "I build folly for centos7,It have most error", "body": "I have vm centos 7 \r\nyum -y install gcc gcc-c++ autoconf autoconf-archive automake boost-devel libtool lz4-devel lzma-devel snappy-devel zlib-devel glog-devel scons libtool gtest-devel gflags-devel\r\n\r\nThe error content blew:\r\n\r\nibtool: link: ar cru .libs/libfollybase.a .libs/Conv.o .libs/Demangle.o detail/.libs/RangeCommon.o .libs/EscapeTables.o .libs/Format.o .libs/FormatArg.o .libs/FormatTables.o .libs/MallctlHelper.o portability/.libs/BitsFunctexcept.o .libs/String.o .libs/Unicode.o   .libs/libfollybase.lax/libfollybasesse42.a/libfollybasesse42_la-ChecksumDetail.o .libs/libfollybase.lax/libfollybasesse42.a/libfollybasesse42_la-Crc32cDetail.o .libs/libfollybase.lax/libfollybasesse42.a/libfollybasesse42_la-RangeSse42.o \r\nlibtool: link: ranlib .libs/libfollybase.a\r\nlibtool: link: rm -fr .libs/libfollybase.lax\r\nlibtool: link: ( cd \".libs\" && rm -f \"libfollybase.la\" && ln -s \"../libfollybase.la\" \"libfollybase.la\" )\r\n/bin/sh ./libtool  --tag=CXX   --mode=link g++  -std=gnu++1y -g -O2 -lboost_context -lboost_program_options -lboost_thread -lboost_filesystem -lboost_system -lboost_regex -lpthread -lboost_chrono   -lssl -lcrypto    -o generate_fingerprint_tables build/GenerateFingerprintTables.o libfollybase.la -lbz2 -lzstd -llzma -lz -lsnappy -llz4 -ldl -levent -ldouble-conversion -lglog -lgflags \r\nlibtool: link: g++ -std=gnu++1y -g -O2 -o generate_fingerprint_tables build/GenerateFingerprintTables.o  ./.libs/libfollybase.a -lboost_context -lboost_program_options -lboost_thread -lboost_filesystem -lboost_system -lboost_regex -lpthread -lboost_chrono -lssl -lcrypto /usr/local/lib/../lib64/libstdc++.so -lm -lbz2 -lzstd -llzma -lz -lsnappy -llz4 -ldl -levent -ldouble-conversion -lglog -lgflags -Wl,-rpath -Wl,/usr/local/lib/../lib64 -Wl,-rpath -Wl,/usr/local/lib/../lib64\r\nbuild/GenerateFingerprintTables.o: In function `std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* google::MakeCheckOpString<unsigned int, unsigned long long>(unsigned int const&, unsigned long long const&, char const*)':\r\n/usr/include/glog/logging.h:672: undefined reference to `google::base::CheckOpMessageBuilder::NewString[abi:cxx11]()'\r\n./.libs/libfollybase.a(Conv.o): In function `std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* google::MakeCheckOpString<unsigned long, unsigned long>(unsigned long const&, unsigned long const&, char const*)':\r\n/usr/include/glog/logging.h:672: undefined reference to `google::base::CheckOpMessageBuilder::NewString[abi:cxx11]()'\r\n./.libs/libfollybase.a(Format.o): In function `std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* google::MakeCheckOpString<int, int>(int const&, int const&, char const*)':\r\n/usr/include/glog/logging.h:672: undefined reference to `google::base::CheckOpMessageBuilder::NewString[abi:cxx11]()'\r\ncollect2: error: ld returned 1 exit status\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tdauth": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/639", "title": "README of futures is missing collectAnyWithoutException()", "body": "A simple explanation could be added to https://github.com/facebook/folly/blob/master/folly/futures/README.md\r\n\r\nOtherwise, it might get overlooked.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/586", "title": "folly::window() provides no version with iterators", "body": "Hey,\r\nI just played around with folly:window() and other than the README states there is no version for a pair of iterators?\r\nIs this intentional or just missing?", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/555", "title": "Clang crash", "body": "Actually it is a bug in Clang, I guess but I cannot register at https://bugs.llvm.org/enter_bug.cgi anymore and maybe this helps you anyway.\r\n\r\n```\r\nScanning dependencies of target futuresfolly\r\n[ 81%] Building CXX object folly/CMakeFiles/futuresfolly.dir/folly.cpp.o\r\n#0 0x7ff3131b8327 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/usr/lib64/llvm/libLLVM-3.7.so+0x510327)\r\n#1 0x7ff3131b7881 (/usr/lib64/llvm/libLLVM-3.7.so+0x50f881)\r\n#2 0x7ff312884a00 __restore_rt (/lib64/libpthread.so.0+0x10a00)\r\n#3 0x55c95ebbb94d (/usr/bin/clang+0x10e894d)\r\n#4 0x55c95ebc2f8f (/usr/bin/clang+0x10eff8f)\r\n#5 0x55c95ebc330e (/usr/bin/clang+0x10f030e)\r\n#6 0x55c95ebc1b93 (/usr/bin/clang+0x10eeb93)\r\n#7 0x55c95ebc1aed (/usr/bin/clang+0x10eeaed)\r\n#8 0x55c95ebc283b (/usr/bin/clang+0x10ef83b)\r\n#9 0x55c95ebc2bb8 (/usr/bin/clang+0x10efbb8)\r\n#10 0x55c95ebc6029 (/usr/bin/clang+0x10f3029)\r\n#11 0x55c95ebbca93 (/usr/bin/clang+0x10e9a93)\r\n#12 0x55c95ebbe13f (/usr/bin/clang+0x10eb13f)\r\n#13 0x55c95ebbff1d (/usr/bin/clang+0x10ecf1d)\r\n#14 0x55c95ebbfdfd (/usr/bin/clang+0x10ecdfd)\r\n#15 0x55c95ebc0118 (/usr/bin/clang+0x10ed118)\r\n#16 0x55c95ebc58d7 (/usr/bin/clang+0x10f28d7)\r\n#17 0x55c95e0e52a9 clang::CodeGen::CodeGenModule::getMangledName(clang::GlobalDecl) (/usr/bin/clang+0x6122a9)\r\n#18 0x55c95e0f0ec3 clang::CodeGen::CodeGenModule::EmitGlobal(clang::GlobalDecl) (/usr/bin/clang+0x61dec3)\r\n#19 0x55c95e0f1918 clang::CodeGen::CodeGenModule::EmitTopLevelDecl(clang::Decl*) (/usr/bin/clang+0x61e918)\r\n#20 0x55c95e076e0f (/usr/bin/clang+0x5a3e0f)\r\n#21 0x55c95e064074 (/usr/bin/clang+0x591074)\r\n#22 0x55c95e6a9315 clang::Sema::InstantiateFunctionDefinition(clang::SourceLocation, clang::FunctionDecl*, bool, bool) (/usr/bin/clang+0xbd6315)\r\n#23 0x55c95e6a9bfb clang::Sema::PerformPendingInstantiations(bool) (/usr/bin/clang+0xbd6bfb)\r\n#24 0x55c95e6a9347 clang::Sema::InstantiateFunctionDefinition(clang::SourceLocation, clang::FunctionDecl*, bool, bool) (/usr/bin/clang+0xbd6347)\r\n#25 0x55c95e6a9bfb clang::Sema::PerformPendingInstantiations(bool) (/usr/bin/clang+0xbd6bfb)\r\n#26 0x55c95e6a9347 clang::Sema::InstantiateFunctionDefinition(clang::SourceLocation, clang::FunctionDecl*, bool, bool) (/usr/bin/clang+0xbd6347)\r\n#27 0x55c95e6a9bfb clang::Sema::PerformPendingInstantiations(bool) (/usr/bin/clang+0xbd6bfb)\r\n#28 0x55c95e6a9347 clang::Sema::InstantiateFunctionDefinition(clang::SourceLocation, clang::FunctionDecl*, bool, bool) (/usr/bin/clang+0xbd6347)\r\n#29 0x55c95e6a9bfb clang::Sema::PerformPendingInstantiations(bool) (/usr/bin/clang+0xbd6bfb)\r\n#30 0x55c95e6a9347 clang::Sema::InstantiateFunctionDefinition(clang::SourceLocation, clang::FunctionDecl*, bool, bool) (/usr/bin/clang+0xbd6347)\r\n#31 0x55c95e6a9bfb clang::Sema::PerformPendingInstantiations(bool) (/usr/bin/clang+0xbd6bfb)\r\n#32 0x55c95e31099a clang::Sema::ActOnEndOfTranslationUnit() (/usr/bin/clang+0x83d99a)\r\n#33 0x55c95e25f118 clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&) (/usr/bin/clang+0x78c118)\r\n#34 0x55c95e25431b clang::ParseAST(clang::Sema&, bool, bool) (/usr/bin/clang+0x78131b)\r\n#35 0x55c95e064d81 clang::CodeGenAction::ExecuteAction() (/usr/bin/clang+0x591d81)\r\n#36 0x55c95deae4ce clang::FrontendAction::Execute() (/usr/bin/clang+0x3db4ce)\r\n#37 0x55c95de81381 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) (/usr/bin/clang+0x3ae381)\r\n#38 0x55c95de67ae1 clang::ExecuteCompilerInvocation(clang::CompilerInstance*) (/usr/bin/clang+0x394ae1)\r\n#39 0x55c95de612b8 cc1_main(llvm::ArrayRef<char const*>, char const*, void*) (/usr/bin/clang+0x38e2b8)\r\n#40 0x55c95de5dbf2 main (/usr/bin/clang+0x38abf2)\r\n#41 0x7ff31174d580 __libc_start_main (/lib64/libc.so.6+0x20580)\r\n#42 0x55c95de60179 _start (/usr/bin/clang+0x38d179)\r\nStack dump:\r\ncompiling folly.cpp (clang)\r\n1.\t<eof> parser at end of file\r\n2.\t/home/tamino/thesis/futures/build/folly/folly-prefix/src/folly/folly/futures/Future-inl.h:1365:1: instantiating function definition 'retryingPolicyCappedJitteredExponentialBackoff'\r\n3.\t/home/tamino/thesis/futures/build/folly/folly-prefix/src/folly/folly/futures/Future-inl.h:1308:1: instantiating function definition 'retryingPolicyCappedJitteredExponentialBackoff'\r\n4.\t/home/tamino/thesis/futures/build/folly/folly-prefix/src/folly/folly/futures/Future-inl.h:1275:1: instantiating function definition 'retryingPolicyCappedJitteredExponentialBackoff'\r\n5.\t/home/tamino/thesis/futures/build/folly/folly-prefix/src/folly/folly/futures/Future.h:193:22: instantiating function definition 'then'\r\n6.\t/home/tamino/thesis/futures/build/folly/folly-prefix/src/folly/folly/futures/Future.h:495:3: instantiating function definition 'thenImplementation'\r\n7.\t/home/tamino/thesis/futures/build/folly/folly-prefix/src/folly/folly/futures/Future.h:495:3: LLVM IR generation of declaration 'folly::Future<folly::Unit>::thenImplementation'\r\n8.\t/home/tamino/thesis/futures/build/folly/folly-prefix/src/folly/folly/futures/Future.h:495:3: Mangling declaration 'folly::Future<folly::Unit>::thenImplementation'\r\nclang: error: unable to execute command: Segmentation fault (core dumped)\r\nclang: error: clang frontend command failed due to signal (use -v to see invocation)\r\nclang version 3.7.0 (tags/RELEASE_370/final)\r\nTarget: x86_64-redhat-linux-gnu\r\nThread model: posix\r\nclang: note: diagnostic msg: PLEASE submit a bug report to http://llvm.org/bugs/ and include the crash backtrace, preprocessed source, and associated run script.\r\nclang: note: diagnostic msg: \r\n********************\r\n\r\nPLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:\r\nPreprocessed source(s) and associated run script(s) are located at:\r\nclang: note: diagnostic msg: /tmp/folly-ef0157.cpp\r\nclang: note: diagnostic msg: /tmp/folly-ef0157.sh\r\nclang: note: diagnostic msg: \r\n\r\n********************\r\n```\r\n\r\nI am building folly in CMake using this CMakeLists.txt:\r\n```\r\ninclude(ExternalProject)\r\n\r\nExternalProject_Add(\r\n    gtest\r\n    GIT_REPOSITORY https://github.com/google/googletest.git\r\n    INSTALL_COMMAND \"\" # Disable install step\r\n    UPDATE_COMMAND \"\" # Doesn't change often\r\n    #CONFIGURE_COMMAND \"\" # skip\r\n    #BUILD_COMMAND \"\" # skip\r\n    LOG_DOWNLOAD ON\r\n    LOG_CONFIGURE ON\r\n    LOG_BUILD ON\r\n)\r\n\r\n# See https://github.com/facebook/folly/blob/master/README.md for all dependencies which have to be installed on Fedora as well.\r\nfind_package(gflags REQUIRED)\r\n#find_package(glog REQUIRED)\r\n\r\nset(folly_DIR \"${CMAKE_BINARY_DIR}/folly/folly-prefix/src/folly/folly\")\r\nset(folly_LIB_DIR \"${CMAKE_BINARY_DIR}/folly\")\r\n\r\nExternalProject_Add(folly\r\nGIT_REPOSITORY https://github.com/facebook/folly\r\nGIT_TAG \"v2016.12.19.00\" # use a stable version\r\nINSTALL_COMMAND \"\"\r\n# CC=\"/usr/bin/clang\" CXX=\"/usr/bin/clang++\"\r\nCONFIGURE_COMMAND cd \"${folly_DIR}\" && autoreconf -ivf && ./configure #--prefix=\"${folly_LIB_DIR}\"\r\nBUILD_COMMAND cd \"${folly_DIR}\" && make -j4\r\nDEPENDS gtest\r\n)\r\n\r\ninclude_directories(\"${folly_DIR}/futures/\" \"${CMAKE_BINARY_DIR}/folly/folly-prefix/src/folly\")\r\nlink_directories(\"${folly_LIB_DIR}\")\r\n\r\nadd_executable(futuresfolly folly.cpp)\r\n```\r\n\r\nI've tried it without the GIT_TAG specification as well. Even if it is a Clang bug maybe something could be done about it. I am using Fedora and the installed Clang package. If there would be an official folly-dev package, I would use it instead.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fredemmott": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/634", "title": "Define OPENSSL_NO_SSL2 on 1.1+", "body": "", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/13523205", "body": "We will be pulling in what we need for MSVC 2015 Update 1, which is not final yet. We expected this to be significantly less than is needed for the current MSVC release.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/13523205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "choeger": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/632", "title": "json serialization broken for 4byte UTF-8 sequences?", "body": "The following test program bugs me. As it is, it prints garbage (the last cout). But if I remove the \"skip_invalid_utf8\" option, it works just fine. I am pretty confident that there is no invalid utf8, so what is going on here? In particular, why does parsing work fine, printing also, but not serialization?\r\n\r\n```\r\n#include <iostream>\r\n#include <string>\r\n#include <folly/dynamic.h>\r\n#include <folly/json.h>\r\n\r\nint main() {\r\n    const std::string test = \"\\xf0\\x90\\x8c\\xbc\"; // 'Valid 4 Octet Sequence'\r\n\r\n    std::cout << \"std::string: \" << std::endl;\r\n    std::cout << test << std::endl;\r\n\r\n    folly::json::serialization_opts opts;\r\n    opts.skip_invalid_utf8 = true; // commenting works ?\r\n\r\n    const auto d = folly::parseJson(\"\\\"\" +  test + \"\\\"\", opts);\r\n\r\n    std::cout << \"folly::dynamic: \" << std::endl;\r\n    std::cout << d << std::endl;\r\n\r\n    const auto r = folly::json::serialize(d, opts);\r\n    std::cout << \"folly::json: \" << std::endl;\r\n    std::cout << r << std::endl;\r\n}\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/folly/pulls/640", "title": "Handle 4-byte unicode code points", "body": "fixes #632\r\n\r\nSigned-off-by: Christoph H\u00f6ger <christoph.hoeger@celeraone.com>", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xnhp0320": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/630", "title": "need to state out the building machine needs at least 2G memory ", "body": "Otherwise will cause g++ fail to make check ....", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "selcouthlyBlue": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/626", "title": "Failed make", "body": "I encountered this error after executing the configure script then using the makefile\r\n\r\n`libtool: link: /usr/bin/gcc-6 -std=gnu++1y -g -O2 -o generate_fingerprint_tables build/GenerateFingerprintTables.o  ./.libs/libfollybase.a -lboost_context -lboost_program_options -lboost_thread -lboost_filesystem -lboost_system -lboost_regex -lpthread -lboost_chrono -lssl -lcrypto -lbz2 -lzstd -llzma -lz -lsnappy -llz4 -liberty -ldl -levent -ldouble-conversion -lglog -lgflags\r\n/usr/bin/ld: build/GenerateFingerprintTables.o: undefined reference to symbol '_ZNSt16invalid_argumentD2Ev@@GLIBCXX_3.4.15'\r\n//usr/lib/x86_64-linux-gnu/libstdc++.so.6: error adding symbols: DSO missing from command line`\r\n\r\nHow do I solve this? I looked everywhere for the solution and none of 'em work D:\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "XinnuoXu": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/625", "title": "unsupported reloc 42 against global symbol _ITM_registerTMCloneTable", "body": "## gcc (GCC) 5.4.0\r\n\r\n/usr/bin/ld.gold: error: /cm/shared/easybuild/apps/compiler/GCCcore/5.4.0/lib/gcc/x86_64-unknown-linux-gnu/5.4.0/crtbeginS.o: unsupported reloc 42 against global symbol _ITM_deregisterTMCloneTable\r\n/usr/bin/ld.gold: error: /cm/shared/easybuild/apps/compiler/GCCcore/5.4.0/lib/gcc/x86_64-unknown-linux-gnu/5.4.0/crtbeginS.o: unsupported reloc 42 against global symbol _ITM_registerTMCloneTable\r\n/usr/bin/ld.gold: error: /cm/shared/easybuild/apps/compiler/GCCcore/5.4.0/lib/gcc/x86_64-unknown-linux-gnu/5.4.0/crtbeginS.o: unsupported reloc 42 against global symbol _Jv_RegisterClasses\r\n/cm/shared/easybuild/apps/compiler/GCCcore/5.4.0/lib/gcc/x86_64-unknown-linux-gnu/5.4.0/crtbeginS.o(.text+0x1e): error: unsupported reloc 42\r\n/cm/shared/easybuild/apps/compiler/GCCcore/5.4.0/lib/gcc/x86_64-unknown-linux-gnu/5.4.0/crtbeginS.o(.text+0x6b): error: unsupported reloc 42\r\n/cm/shared/easybuild/apps/compiler/GCCcore/5.4.0/lib/gcc/x86_64-unknown-linux-gnu/5.4.0/crtbeginS.o(.text+0xeb): error: unsupported reloc 42\r\ncollect2: error: ld returned 1 exit status\r\nmake[2]: *** [libfolly.la] Error 1\r\nmake[2]: Leaving directory `/home/xxu/torch/folly/folly'\r\nmake[1]: *** [all-recursive] Error 1\r\nmake[1]: Leaving directory `/home/xxu/torch/folly/folly'\r\nmake: *** [all] Error 2", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ecnalubma": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/615", "title": "support -fno-exceptions", "body": "Hello,\r\n\r\nI'd like to ask the folly developers to consider supporting builds with -fno-exceptions. Some folly components do this already, but many don't. It would be nice to have this configurable at build-time, but I don't see a flag to do this.\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "louwers": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/614", "title": "Can't link folly, \"undefined reference to `boost::re_detail_106400::cpp_regex_traits_implementation<char>::transform\"", "body": "Whenever I try to link folly I get the following error:\r\n\r\n```\r\n/usr/lib/gcc/x86_64-pc-linux-gnu/5.4.0/../../../../lib/libfolly.so: undefined reference to `boost::re_detail_106400::cpp_regex_traits_implementation<char>::transform(char const*, char const*) const'\r\n/usr/lib/gcc/x86_64-pc-linux-gnu/5.4.0/../../../../lib/libfolly.so: undefined reference to `boost::re_detail_106400::cpp_regex_traits_implementation<char>::transform_primary(char const*, char const*) const'\r\ncollect2: error: ld returned 1 exit status\r\n```\r\n\r\nIn installed folly on an unsupported distribution (Arch Linux), but still I wonder if anyone knows what the cause could be. Maybe it's the fact that boost was compiled with (I believe) g++ 7 and folly with g++ 5 (since [folly doesn't compile with g++ 7](https://github.com/facebook/folly/issues/607)).", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Candy710": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/613", "title": "autoreconf -ivf error", "body": "I follow the steps and occured this error,how can solve it?thank you very much.\r\n\r\n\r\n\r\n\r\n\r\n#\r\n\r\n1. linuxidc@www:~/folly/folly$ autoreconf -ivf\r\n2. autoreconf: Entering directory `.'\r\n3. autoreconf: configure.ac: not using Gettext\r\n4. autoreconf: running: aclocal --force -I m4\r\n5. autoreconf: configure.ac: tracing\r\n6. autoreconf: running: libtoolize --copy --force\r\n7. libtoolize: putting auxiliary files in AC_CONFIG_AUX_DIR, \r\n8. libtoolize: copying file `build-aux/ltmain.sh'\r\n9. libtoolize: putting macros in AC_CONFIG_MACRO_DIR, `m4'.\r\n10. libtoolize: copying file `m4/libtool.m4'\r\n11. libtoolize: copying file `m4/ltoptions.m4'\r\n12. libtoolize: copying file `m4/ltsugar.m4'\r\n13. libtoolize: copying file `m4/ltversion.m4'\r\n14. libtoolize: copying file `m4/lt~obsolete.m4'\r\n15. autoreconf: running: /usr/bin/autoconf --force\r\n16. autoreconf: running: /usr/bin/autoheader --force\r\n17. autoreconf: running: automake --add-missing --copy --force-missing\r\n18. stats/test/Makefile.am:6: warning: variable 'libgtest_la_SOURCES' is defined but no program or\r\n19. stats/test/Makefile.am:6: library has 'libgtest_la' as canonical name (possible typo)\r\n20. test/Makefile.am:99: warning: variable 'thread_id_test_SOURCES' is defined but no program or\r\n21. test/Makefile.am:99: library has 'thread_id_test' as canonical name (possible typo)\r\n22. test/Makefile.am:100: warning: variable 'thread_id_test_LDADD' is defined but no program or\r\n23. test/Makefile.am:100: library has 'thread_id_test' as canonical name (possible typo)\r\n24. autoreconf: Leaving directory `.'\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "anhldbk": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/612", "title": "About NotificationQueue", "body": "I'm trying to use the queue on Ubuntu Linux, but it does NOT work as I expected. Here the code which I modified from the [NotificationQueue tests](https://github.com/facebook/folly/blob/master/folly/io/async/test/NotificationQueueTest.cpp). I expect to have the MESSAGE printed out, but it's not. Would you please tell me what wrong is? Thanks in advance.\r\n\r\n```cpp\r\n#include <iostream>\r\n#include <folly/io/async/NotificationQueue.h>\r\n#include <folly/io/async/ScopedEventBaseThread.h>\r\nusing namespace std;\r\nusing namespace folly;\r\ntypedef NotificationQueue<int> IntQueue;\r\n\r\nclass QueueConsumer : public IntQueue::Consumer {\r\npublic:\r\n\r\n    QueueConsumer() {\r\n    }\r\n\r\n    void messageAvailable(int&& value) noexcept override {\r\n        cout << \"!> Message \" << value << endl; // --> MESSAGE\r\n        messages.push_back(value);\r\n        if (fn) {\r\n            fn(value);\r\n        }\r\n    }\r\n\r\n    std::function<void(int) > fn;\r\n    std::deque<int> messages;\r\n};\r\n\r\nclass QueueTest {\r\npublic:\r\n\r\n    explicit QueueTest(uint32_t maxSize, IntQueue::FdType type)\r\n    : queue(maxSize, type) {\r\n    }\r\n\r\n    void sendOne() {\r\n        // Create a notification queue and a callback in this thread\r\n        EventBase eventBase;\r\n\r\n        QueueConsumer consumer;\r\n        consumer.fn = [&](int value) {\r\n            // Stop consuming after we receive 1 message\r\n            cout << \"Hello value = \" << value << endl;\r\n            consumer.stopConsuming();\r\n        };\r\n        consumer.startConsuming(&eventBase, &queue);\r\n\r\n        // Start a new EventBase thread to put a message on our queue\r\n        ScopedEventBaseThread t1;\r\n        t1.getEventBase()->runInEventBaseThread([&] {\r\n            cout << \"!> Put a message\" << endl;\r\n            this->queue.putMessage(5);\r\n        });\r\n\r\n        // Loop until we receive the message\r\n        eventBase.loop();\r\n    }\r\n\r\n    IntQueue queue;\r\n\r\n};\r\n\r\nint main(void) {\r\n    QueueTest qt(5, IntQueue::FdType::EVENTFD);\r\n    qt.sendOne();\r\n    return 0;\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jack17529": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/605", "title": "Warnings during installation in Ubuntu 16.04", "body": "libtool: warning: relinking 'libfollybenchmark.la'\r\n\r\nlibtool: warning: relinking 'libfollysymbolizer.la'\r\n\r\nlibtool: warning: relinking 'libfollyinit.la'\r\n\r\nI think installation process is slow that's why, I am getting these.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xuxilei": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/598", "title": "compiler error:  gflags invalid", "body": "[root@localhost folly]# ./configure\r\n\r\nchecking for a BSD-compatible install... /usr/bin/install -c\r\n\r\nchecking whether build environment is sane... yes\r\n\r\nchecking for a thread-safe mkdir -p... /usr/bin/mkdir -p\r\n\r\nchecking for gawk... gawk\r\n\r\nchecking whether make sets $(MAKE)... yes\r\n\r\nchecking whether make supports nested variables... yes\r\n\r\nchecking build system type... x86_64-unknown-linux-gnu\r\n\r\nchecking host system type... x86_64-unknown-linux-gnu\r\n\r\nchecking how to print strings... printf\r\n\r\nchecking for style of include used by make... GNU\r\n\r\nchecking for gcc... gcc\r\n\r\nchecking whether the C compiler works... yes\r\n\r\nchecking for C compiler default output file name... a.out\r\n\r\nchecking for suffix of executables...\r\n\r\nchecking whether we are cross compiling... no\r\n\r\nchecking for suffix of object files... o\r\n\r\nchecking whether we are using the GNU C compiler... yes\r\n\r\nchecking whether gcc accepts -g... yes\r\n\r\nchecking for gcc option to accept ISO C89... none needed\r\n\r\nchecking dependency style of gcc... gcc3\r\n\r\nchecking for a sed that does not truncate output... /usr/bin/sed\r\n\r\nchecking for grep that handles long lines and -e... /usr/bin/grep\r\n\r\nchecking for egrep... /usr/bin/grep -E\r\n\r\nchecking for fgrep... /usr/bin/grep -F\r\n\r\nchecking for ld used by gcc... /usr/bin/ld\r\n\r\nchecking if the linker (/usr/bin/ld) is GNU ld... yes\r\n\r\nchecking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B\r\n\r\nchecking the name lister (/usr/bin/nm -B) interface... BSD nm\r\n\r\nchecking whether ln -s works... yes\r\n\r\nchecking the maximum length of command line arguments... 1572864\r\n\r\nchecking whether the shell understands some XSI constructs... yes\r\n\r\nchecking whether the shell understands \"+=\"... yes\r\n\r\nchecking how to convert x86_64-unknown-linux-gnu file names to x86_64-unknown-linux-gnu format... func_convert_file_noop\r\n\r\nchecking how to convert x86_64-unknown-linux-gnu file names to toolchain format... func_convert_file_noop\r\n\r\nchecking for /usr/bin/ld option to reload object files... -r\r\n\r\nchecking for objdump... objdump\r\n\r\nchecking how to recognize dependent libraries... pass_all\r\n\r\nchecking for dlltool... no\r\n\r\nchecking how to associate runtime and link libraries... printf %s\\n\r\n\r\nchecking for ar... ar\r\n\r\nchecking for archiver @FILE support... @\r\n\r\nchecking for strip... strip\r\n\r\nchecking for ranlib... ranlib\r\n\r\nchecking command to parse /usr/bin/nm -B output from gcc object... ok\r\n\r\nchecking for sysroot... no\r\n\r\nchecking for mt... no\r\n\r\nchecking if : is a manifest tool... no\r\n\r\nchecking how to run the C preprocessor... gcc -E\r\n\r\nchecking for ANSI C header files... yes\r\n\r\nchecking for sys/types.h... yes\r\n\r\nchecking for sys/stat.h... yes\r\n\r\nchecking for stdlib.h... yes\r\n\r\nchecking for string.h... yes\r\n\r\nchecking for memory.h... yes\r\n\r\nchecking for strings.h... yes\r\n\r\nchecking for inttypes.h... yes\r\n\r\nchecking for stdint.h... yes\r\n\r\nchecking for unistd.h... yes\r\n\r\nchecking for dlfcn.h... yes\r\n\r\nchecking for objdir... .libs\r\n\r\nchecking if gcc supports -fno-rtti -fno-exceptions... no\r\n\r\nchecking for gcc option to produce PIC... -fPIC -DPIC\r\n\r\nchecking if gcc PIC flag -fPIC -DPIC works... yes\r\n\r\nchecking if gcc static flag -static works... no\r\n\r\nchecking if gcc supports -c -o file.o... yes\r\n\r\nchecking if gcc supports -c -o file.o... (cached) yes\r\n\r\nchecking whether the gcc linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes\r\n\r\nchecking whether -lc should be explicitly linked in... no\r\n\r\nchecking dynamic linker characteristics... GNU/Linux ld.so\r\n\r\nchecking how to hardcode library paths into programs... immediate\r\n\r\nchecking whether stripping libraries is possible... yes\r\n\r\nchecking if libtool supports shared libraries... yes\r\n\r\nchecking whether to build shared libraries... yes\r\n\r\nchecking whether to build static libraries... yes\r\n\r\nchecking for g++... g++\r\n\r\nchecking whether we are using the GNU C++ compiler... yes\r\n\r\nchecking whether g++ accepts -g... yes\r\n\r\nchecking dependency style of g++... gcc3\r\n\r\nchecking how to run the C++ preprocessor... g++ -E\r\n\r\nchecking for ld used by g++... /usr/bin/ld -m elf_x86_64\r\n\r\nchecking if the linker (/usr/bin/ld -m elf_x86_64) is GNU ld... yes\r\n\r\nchecking whether the g++ linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes\r\n\r\nchecking for g++ option to produce PIC... -fPIC -DPIC\r\n\r\nchecking if g++ PIC flag -fPIC -DPIC works... yes\r\n\r\nchecking if g++ static flag -static works... no\r\n\r\nchecking if g++ supports -c -o file.o... yes\r\n\r\nchecking if g++ supports -c -o file.o... (cached) yes\r\n\r\nchecking whether the g++ linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes\r\n\r\nchecking dynamic linker characteristics... (cached) GNU/Linux ld.so\r\n\r\nchecking how to hardcode library paths into programs... immediate\r\n\r\nchecking for gcc... (cached) gcc\r\n\r\nchecking whether we are using the GNU C compiler... (cached) yes\r\n\r\nchecking whether gcc accepts -g... (cached) yes\r\n\r\nchecking for gcc option to accept ISO C89... (cached) none needed\r\n\r\nchecking dependency style of gcc... (cached) gcc3\r\n\r\nchecking if g++ supports C++1y features without additional flags... no\r\n\r\nchecking if g++ supports C++1y features with -std=c++1y... yes\r\n\r\nchecking if g++ supports C++1y features with -std=gnu++1y... yes\r\n\r\nchecking whether -Wshadow-local and -Wshadow-compatible-local are supported... no\r\n\r\nchecking for main in -lgflags... yes\r\n\r\nchecking for gflags viability... no\r\n\r\nconfigure: error: \"gflags invalid, see config.log for details\"\r\n\r\n \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sunheehnus": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/591", "title": "vfork option doesn't work", "body": "Hi folly team,\r\n    I find that v_fork doesn't really work on Linux. I use the code like the example.\r\n```\r\nSubprocess proc(\r\n      std::vector<std::string>{\"/bin/true\"},\r\n      Subprocess::Options().useCloneWithFlags(SIGCHLD | CLONE_VFORK));\r\n```\r\n\r\n\r\n\r\nWhen I open subprocess on a very large-mem process, the OS almost hang there, and perf said copy_range_pages takes 20% CPU, IMHO, the vfork doesn't really work. Am I missing something?\r\n\r\nThanks very much", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dsbaby": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/583", "title": "make fail  about OpenSSL", "body": "The following error occurred during make. Please help. I am using master on Ubuntu 12.04.5. thanks~\r\n\r\nu++1y -g -O2 -MT io/ShutdownSocketSet.lo -MD -MP -MF io/.deps/ShutdownSocketSet.Tpo -c io/ShutdownSocketSet.cpp -o io/ShutdownSocketSet.o >/dev/null 2>&1\r\ndepbase=`echo io/async/AsyncPipe.lo | sed 's|[^/]*$|.deps/&|;s|\\.lo$||'`;\\\r\n        /bin/bash ./libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H   -I./.. -pthread -I/usr/include   -I/opt/local/include  -std=gnu++1y -g -O2 -MT io/async/AsyncPipe.lo -MD -MP -MF $depbase.Tpo -c -o io/async/AsyncPipe.lo io/async/AsyncPipe.cpp &&\\\r\n        mv -f $depbase.Tpo $depbase.Plo\r\nlibtool: compile:  g++ -DHAVE_CONFIG_H -I./.. -pthread -I/usr/include -I/opt/local/include -std=gnu++1y -g -O2 -MT io/async/AsyncPipe.lo -MD -MP -MF io/async/.deps/AsyncPipe.Tpo -c io/async/AsyncPipe.cpp  -fPIC -DPIC -o io/async/.libs/AsyncPipe.o\r\nIn file included from /usr/include/openssl/ssl.h:1365:0,\r\n                 from ./../folly/portability/OpenSSL.h:36,\r\n                 from ./../folly/io/async/ssl/OpenSSLPtrTypes.h:22,\r\n                 from ./../folly/io/async/AsyncTransport.h:25,\r\n                 from ./../folly/io/async/AsyncPipe.h:18,\r\n                 from io/async/AsyncPipe.cpp:16:\r\n./../folly/portability/OpenSSL.h:100:29: error: expected unqualified-id before 'const'\r\n int TLS1_get_client_version(const SSL*);\r\n                             ^\r\n./../folly/portability/OpenSSL.h:100:29: error: expected ')' before 'const'\r\n./../folly/portability/OpenSSL.h:100:29: error: expected ')' before 'const'\r\nmake[2]: *** [io/async/AsyncPipe.lo] error 1\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "abhiguru": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/582", "title": " SEGV folly::AsyncTimeout::libeventCallback", "body": "==4304==ERROR: AddressSanitizer: SEGV on unknown address 0x7f613d00001f (pc 0x7f61178fec05 bp 0x000000000000 sp 0x7ffc0c629fa0 T0)\r\n    #0 0x7f61178fec04 in folly::AsyncTimeout::libeventCallback(int, short, void*) io/async/AsyncTimeout.cpp:160\r\n    #1 0x7f610b17241f in event_base_loop (/usr/lib/x86_64-linux-gnu/libevent-2.0.so.5+0xd41f)\r\n    #2 0x7f611792f4ff in folly::EventBase::loopBody(int) io/async/EventBase.cpp:313\r\n    #3 0x7f61179312c5 in folly::EventBase::loopForever() io/async/EventBase.cpp:443\r\n    #4 0x55af2e28f588 in main /home/abhinav/ws/videoproc/main.cpp:220\r\n    #5 0x7f6111f6c3f0 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x203f0)\r\n    #6 0x55af2e1afce9 in _start (/home/abhinav/ws/videoproc/build/videoproc+0x2c5ce9)\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "CodeMasterYi": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/574", "title": "autoreconf error", "body": "MacOS 10.12.4\r\nusing port install\r\ndependencies are installed\r\ncd folly/folly\r\nautoreconf ***    \r\n\r\n\r\nthen :\r\nm4/fb_check_pkg_config.m4:8: FB_CHECK_PKG_CONFIG is expanded from...\r\nconfigure.ac:145: the top level\r\nconfigure.ac:172: warning: PKG_PROG_PKG_CONFIG is m4_require'd but not m4_defun'd\r\nm4/fb_check_pkg_config.m4:8: FB_CHECK_PKG_CONFIG is expanded from...\r\nconfigure.ac:172: the top level\r\nconfigure:17179: error: possibly undefined macro: AC_MSG_NOTICE\r\n      If this token and others are legitimate, please use m4_pattern_allow.\r\n      See the Autoconf documentation.\r\nautoreconf: /opt/local/bin/autoconf failed with exit status: 1", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "KamalGalrani": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/573", "title": "Makefile: recipe for target 'io/async/AsyncPipe.lo' failed", "body": "The following error occurred during make. Please help. I am using master on Ubuntu 16.04.\r\n\r\n```\r\nlibtool: compile:  g++ -DHAVE_CONFIG_H -I./.. -pthread -I/usr/include -std=gnu++1y -g -O2 -MT io/async/AsyncPipe.lo -MD -MP -MF io/async/.deps/AsyncPipe.Tpo -c io/async/AsyncPipe.cpp  -fPIC -DPIC -o io/async/.libs/AsyncPipe.o\r\nIn file included from ./../folly/io/async/AsyncTransport.h:25:0,\r\n                 from ./../folly/io/async/AsyncPipe.h:18,\r\n                 from io/async/AsyncPipe.cpp:16:\r\n./../folly/io/async/ssl/OpenSSLPtrTypes.h:69:67: error: template argument 2 is invalid\r\n     folly::static_function_deleter<EVP_MD_CTX, &EVP_MD_CTX_destroy>;\r\n                                                                   ^\r\n./../folly/io/async/ssl/OpenSSLPtrTypes.h:70:55: error: \u2018EvpMdCtxDeleter\u2019 was not declared in this scope\r\n using EvpMdCtxUniquePtr = std::unique_ptr<EVP_MD_CTX, EvpMdCtxDeleter>;\r\n                                                       ^\r\n./../folly/io/async/ssl/OpenSSLPtrTypes.h:70:70: error: template argument 2 is invalid\r\n using EvpMdCtxUniquePtr = std::unique_ptr<EVP_MD_CTX, EvpMdCtxDeleter>;\r\n                                                                      ^\r\nMakefile:1720: recipe for target 'io/async/AsyncPipe.lo' failed\r\nmake[2]: *** [io/async/AsyncPipe.lo] Error 1\r\nmake[2]: Leaving directory '/media/singularity/79a936c8-ef9b-4376-bf5a-8b65f78dbd49/ai/lucida/lucida/tools/fbthrift/thrift/build/deps/folly/folly'\r\nMakefile:1813: recipe for target 'all-recursive' failed\r\nmake[1]: *** [all-recursive] Error 1\r\nmake[1]: Leaving directory '/media/singularity/79a936c8-ef9b-4376-bf5a- 8b65f78dbd49/ai/lucida/lucida/tools/fbthrift/thrift/build/deps/folly/folly'\r\nMakefile:1092: recipe for target 'all' failed\r\nmake: *** [all] Error 2\r\n```", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/573/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "olk": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/572", "title": "using private boost.context API?", "body": "Hi,\r\nI'm wondering why you still use the private fcontext-API from boost.context.\r\nYou should consider to switch to one of the public APIs, like: callcc()/continuation or execution_context<>. The benfit is that the public APIs remain stable while the fcontext-API might change if necessary. Addtionally, the public APIs prevent the user for resuming an invalid/terminated or already running context + stack management.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "castleshi": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/571", "title": "Bits.cpp:48: Error: invalid instruction suffix for `popcnt'", "body": "Hi all! I got error when I run \"make\" under folly/folly, and dont know how to solve it!\r\n\r\ncastle@bogon:~/work/install/folly/folly$ make\r\nmake  all-recursive\r\nmake[1]: Entering directory '/home/castle/work/install/folly/folly'\r\nMaking all in .\r\nmake[2]: Entering directory '/home/castle/work/install/folly/folly'\r\ndepbase=`echo Bits.lo | sed 's|[^/]*$|.deps/&|;s|\\.lo$||'`;\\\r\n/bin/bash ./libtool  --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H   -I./.. -pthread -I/usr/include  -I/opt/local/include  -std=gnu++1y -g -O2 -MT Bits.lo -MD -MP -MF $depbase.Tpo -c -o Bits.lo Bits.cpp &&\\\r\nmv -f $depbase.Tpo $depbase.Plo\r\nlibtool: compile:  g++ -DHAVE_CONFIG_H -I./.. -pthread -I/usr/include -I/opt/local/include -std=gnu++1y -g -O2 -MT Bits.lo -MD -MP -MF .deps/Bits.Tpo -c Bits.cpp  -fPIC -DPIC -o .libs/Bits.o\r\nBits.cpp: Assembler messages:\r\nBits.cpp:48: Error: invalid instruction suffix for `popcnt'\r\nMakefile:1706: recipe for target 'Bits.lo' failed\r\nmake[2]: *** [Bits.lo] Error 1\r\nmake[2]: Leaving directory '/home/castle/work/install/folly/folly'\r\nMakefile:1798: recipe for target 'all-recursive' failed\r\nmake[1]: *** [all-recursive] Error 1\r\nmake[1]: Leaving directory '/home/castle/work/install/folly/folly'\r\nMakefile:1089: recipe for target 'all' failed\r\nmake: *** [all] Error 2\r\n\r\nany hints?\r\nP.S. \r\ngcc version 5.4.0\r\nUbuntu 16.04.2 LTS  i686", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/571/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "grahamc": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/570", "title": "configure does not correctly test for boost, resulting in mystery error", "body": "```\r\nconfigure:17897: checking for boostlib >= 1.51.0\r\nconfigure:17977: clang++ -c -std=gnu++1y -g -O2   conftest.cpp >&5\r\nconfigure:17977: $? = 0\r\nconfigure:17979: result: yes\r\nconfigure:18158: checking whether the Boost::Context library is available\r\nconfigure:18196: clang++ -c -std=gnu++1y -g -O2   conftest.cpp >&5\r\nconfigure:18196: $? = 0\r\nconfigure:18211: result: yes\r\nconfigure:18371: error: Could not find a version of the library!\r\n```\r\n\r\nNote the absence of the `-l`.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/570/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "markhu": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/564", "title": "failed under CentOS6 due to gflags invalid", "body": "Unsure if this is a CentOS6 issue, or a gflags issue:\r\n```\r\nfolly (master) $ ./configure\r\n...\r\nchecking for main in -lgflags... yes\r\nchecking for gflags viability... no\r\nconfigure: error: \"gflags invalid, see config.log for details\"\r\n```\r\n\r\nDoes `folly` need a particular version of `gflags` ?  I grabbed the latest from https://github.com/gflags/gflags which was version 2.2.0 at the time. Also tried going back to 2.0 and 1.7 to no avail.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "breznak": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/553", "title": "[Enhancement] ProducerConsumerQueue : add methods how to handle capacity overflows", "body": "I'm not sure if this functionality still belongs to the scope of this class, or if some other provides it? \r\n\r\nUse-case:\r\nThe queue has a limited capacity, so add() can fail, I use several (useful?) modes that handle the situation of overflowing. \r\n\r\nModes:\r\n- `ERR` - fail on `write()` when max cap. cap reached\r\n- `PRUNE` - drop all/portion of (oldest) data, see #551 \r\n- `SLICE` - seamless mode where oldest element is popped and the new is added on top. \r\n\r\nWith #552 this will make the queue fool-proof from both sides adding/removing elements. \r\n\r\nI can submit a PR if accepted. ", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/552", "title": "[Bug] ProducerConsumerQueue: crash on (empty) popFront()", "body": "The crash occurs on `popFront()` even thoug I checked that `assert(!isEmpty())` before calling popFront. There are parallel reads/writes/removes to the queue. \r\n\r\nThe crash output:\r\n```\r\nmerQueue.h:127: void folly::ProducerConsumerQueue<XX>::popFront() [T = XX]: Assertion `currentRead != writeIndex_.load(std::memory_order_acquire)' failed.\r\n```\r\n(XX is a simple struct)\r\n\r\nSteps to reproduce: \r\nA similar, simplified program:\r\n```\r\nq = ProducerConsumerQueue(1000);\r\n\r\n//thread 1\r\nwhile(true) {\r\n  q.write(1);\r\n  sleep(random_time);\r\n}\r\n\r\n//thread 2\r\nwhile(!q.isEmpty()) {\r\n  q.popFront();\r\n  this_thread.yield();\r\n}\r\n```\r\n\r\nWhy I use something (ugly) as thread 2-cleaner is the lack of \"clear()\" method, see #551 ", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/551", "title": "[new feature] add ProducerConsumerQueue clear() functionality", "body": "Implement efficient and thread-safe `clear()` function, that will drop all the queued data and make `isEmpty() == true`. \r\n\r\nUse-case: \r\nin my application, when the queue becomes full, I can simply discard all the data. \r\n\r\nBonus points:\r\nimplement `clear(size_t numToRemove)` which removes up-to N oldest elements from the queue. ", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "YongTingDDak": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/546", "title": "Make error in Ubuntu 16.04", "body": "I Tried to make folly, but it doesnt work this message\r\n\r\n```\r\nlibtool: compile:  g++ -DHAVE_CONFIG_H -I./.. -pthread -I/usr/include -I/usr/local/include -I/usr/local/boost_1_63_0 -std=gnu++1y -g -O2 -MT io/async/AsyncSSLSocket.lo -MD -MP -MF io/async/.deps/AsyncSSLSocket.Tpo -c io/async/AsyncSSLSocket.cpp  -fPIC -DPIC -o io/async/.libs/AsyncSSLSocket.o\r\n## # **io/async/AsyncSSLSocket.cpp:180:12: error: aggregate \u2018BIO_METHOD {anonymous}::sslBioMethod\u2019 has incomplete type and cannot be defined\r\n BIO_METHOD sslBioMethod; // error\r\n            ^**\r\nio/async/AsyncSSLSocket.cpp: In member function \u2018void folly::AsyncSSLSocket::attachSSLContext(const std::shared_ptr<folly::SSLContext>&)\u2019:\r\nio/async/AsyncSSLSocket.cpp:484:7: error: invalid use of incomplete type \u2018SSL {aka struct ssl_st}\u2019\r\n   ssl_->initial_ctx = sslCtx;\r\n       ^\r\nIn file included from /usr/local/include/openssl/crypto.h:31:0,\r\n                 from /usr/local/include/openssl/bio.h:20,\r\n                 from /usr/local/include/openssl/asn1.h:16,\r\n                 from ./../folly/io/async/ssl/OpenSSLPtrTypes.h:21,\r\n                 from ./../folly/io/async/AsyncTransport.h:25,\r\n                 from ./../folly/io/async/AsyncSocket.h:26,\r\n                 from ./../folly/io/async/AsyncSSLSocket.h:23,\r\n                 from io/async/AsyncSSLSocket.cpp:17:\r\n/usr/local/include/openssl/ossl_typ.h:144:16: note: forward declaration of \u2018SSL {aka struct ssl_st}\u2019\r\n typedef struct ssl_st SSL;\r\n                ^\r\nio/async/AsyncSSLSocket.cpp: In member function \u2018void folly::AsyncSSLSocket::detachSSLContext()\u2019:\r\nio/async/AsyncSSLSocket.cpp:503:11: error: invalid use of incomplete type \u2018SSL {aka struct ssl_st}\u2019\r\n   if (ssl_->initial_ctx) {\r\n           ^\r\nIn file included from /usr/local/include/openssl/crypto.h:31:0,\r\n                 from /usr/local/include/openssl/bio.h:20,\r\n                 from /usr/local/include/openssl/asn1.h:16,\r\n                 from ./../folly/io/async/ssl/OpenSSLPtrTypes.h:21,\r\n                 from ./../folly/io/async/AsyncTransport.h:25,\r\n                 from ./../folly/io/async/AsyncSocket.h:26,\r\n                 from ./../folly/io/async/AsyncSSLSocket.h:23,\r\n                 from io/async/AsyncSSLSocket.cpp:17:\r\n/usr/local/include/openssl/ossl_typ.h:144:16: note: forward declaration of \u2018SSL {aka struct ssl_st}\u2019\r\n typedef struct ssl_st SSL;\r\n                ^\r\nio/async/AsyncSSLSocket.cpp:504:22: error: invalid use of incomplete type \u2018SSL {aka struct ssl_st}\u2019\r\n     SSL_CTX_free(ssl_->initial_ctx);\r\n                      ^\r\nIn file included from /usr/local/include/openssl/crypto.h:31:0,\r\n                 from /usr/local/include/openssl/bio.h:20,\r\n                 from /usr/local/include/openssl/asn1.h:16,\r\n                 from ./../folly/io/async/ssl/OpenSSLPtrTypes.h:21,\r\n                 from ./../folly/io/async/AsyncTransport.h:25,\r\n                 from ./../folly/io/async/AsyncSocket.h:26,\r\n                 from ./../folly/io/async/AsyncSSLSocket.h:23,\r\n                 from io/async/AsyncSSLSocket.cpp:17:\r\n/usr/local/include/openssl/ossl_typ.h:144:16: note: forward declaration of \u2018SSL {aka struct ssl_st}\u2019\r\n typedef struct ssl_st SSL;\r\n                ^\r\nio/async/AsyncSSLSocket.cpp:505:9: error: invalid use of incomplete type \u2018SSL {aka struct ssl_st}\u2019\r\n     ssl_->initial_ctx = nullptr;\r\n         ^\r\nIn file included from /usr/local/include/openssl/crypto.h:31:0,\r\n                 from /usr/local/include/openssl/bio.h:20,\r\n                 from /usr/local/include/openssl/asn1.h:16,\r\n                 from ./../folly/io/async/ssl/OpenSSLPtrTypes.h:21,\r\n                 from ./../folly/io/async/AsyncTransport.h:25,\r\n                 from ./../folly/io/async/AsyncSocket.h:26,\r\n                 from ./../folly/io/async/AsyncSSLSocket.h:23,\r\n                 from io/async/AsyncSSLSocket.cpp:17:\r\n/usr/local/include/openssl/ossl_typ.h:144:16: note: forward declaration of \u2018SSL {aka struct ssl_st}\u2019\r\n typedef struct ssl_st SSL;\r\n                ^\r\nio/async/AsyncSSLSocket.cpp: In member function \u2018bool folly::AsyncSSLSocket::isServerNameMatch() const\u2019:\r\nio/async/AsyncSSLSocket.cpp:553:9: error: invalid use of incomplete type \u2018SSL_SESSION {aka struct ssl_session_st}\u2019\r\n   if(!ss->tlsext_hostname) {\r\n         ^\r\nIn file included from ./../folly/io/async/ssl/OpenSSLPtrTypes.h:30:0,\r\n                 from ./../folly/io/async/AsyncTransport.h:25,\r\n                 from ./../folly/io/async/AsyncSocket.h:26,\r\n                 from ./../folly/io/async/AsyncSSLSocket.h:23,\r\n                 from io/async/AsyncSSLSocket.cpp:17:\r\n/usr/local/include/openssl/ssl.h:228:16: note: forward declaration of \u2018SSL_SESSION {aka struct ssl_session_st}\u2019\r\n typedef struct ssl_session_st SSL_SESSION;\r\n                ^\r\nio/async/AsyncSSLSocket.cpp:556:37: error: invalid use of incomplete type \u2018SSL_SESSION {aka struct ssl_session_st}\u2019\r\n   return (tlsextHostname_.compare(ss->tlsext_hostname) ? false : true);\r\n                                     ^\r\nIn file included from ./../folly/io/async/ssl/OpenSSLPtrTypes.h:30:0,\r\n                 from ./../folly/io/async/AsyncTransport.h:25,\r\n                 from ./../folly/io/async/AsyncSocket.h:26,\r\n                 from ./../folly/io/async/AsyncSSLSocket.h:23,\r\n                 from io/async/AsyncSSLSocket.cpp:17:\r\n/usr/local/include/openssl/ssl.h:228:16: note: forward declaration of \u2018SSL_SESSION {aka struct ssl_session_st}\u2019\r\n typedef struct ssl_session_st SSL_SESSION;\r\n                ^\r\nio/async/AsyncSSLSocket.cpp: In member function \u2018const char* folly::AsyncSSLSocket::getSSLCertSigAlgName() const\u2019:\r\nio/async/AsyncSSLSocket.cpp:877:31: error: invalid use of incomplete type \u2018X509 {aka struct x509_st}\u2019\r\n     int nid = OBJ_obj2nid(cert->sig_alg->algorithm);\r\n                               ^\r\nIn file included from /usr/local/include/openssl/crypto.h:31:0,\r\n                 from /usr/local/include/openssl/bio.h:20,\r\n                 from /usr/local/include/openssl/asn1.h:16,\r\n                 from ./../folly/io/async/ssl/OpenSSLPtrTypes.h:21,\r\n                 from ./../folly/io/async/AsyncTransport.h:25,\r\n                 from ./../folly/io/async/AsyncSocket.h:26,\r\n                 from ./../folly/io/async/AsyncSSLSocket.h:23,\r\n                 from io/async/AsyncSSLSocket.cpp:17:\r\n/usr/local/include/openssl/ossl_typ.h:119:16: note: forward declaration of \u2018X509 {aka struct x509_st}\u2019\r\n typedef struct x509_st X509;\r\n                ^\r\nMakefile:1703: recipe for target 'io/async/AsyncSSLSocket.lo' failed\r\nmake[1]: *** [io/async/AsyncSSLSocket.lo] Error 1\r\nmake[1]: Leaving directory '/home/lab-com/folly-master/folly'\r\nMakefile:1795: recipe for target 'check-recursive' failed\r\nmake: *** [check-recursive] Error 1\r\n\r\n========================================================================\r\n```\r\nit has error in AsyncSSLSocket.cpp i cannot solve this problem. help plz", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Markvy": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/543", "title": "Vector documentation improvement suggestion", "body": "I have a few quibbles with the following page\r\n\r\nhttps://github.com/facebook/folly/blob/master/folly/docs/FBVector.md#memory-handling\r\n\r\nFirst, it says that \"it can be mathematically proven that a growth factor of 2 is rigorously the worst possible because it never allows the vector to reuse any of its previously-allocated memory\".  This doesn't sound right.  After all, a growth factor of 10 also doesn't allow the vector to reuse memory; how is 2 any worse than 10?\r\n\r\nLater, we have \"But any number smaller than 2 guarantees that you'll at some point be able to reuse the previous chunks.\"  This is false.  In fact, 1,5 is barely small enough.  The real cutoff happens at Fibonacci numbers, I think.  That is, if the vector grows at the rate of Fibonacci numbers, (where fib(0) = 0 and fib(1) = 1, and the initial array has size fib(2)) then using the well known identity that sum(fib(j) for j in 2..n) equals fib(n+2) - 2.  So, at the time that you are copying an array of size fib(n+1) into a fresh array of size fib(n+2), all the space that you freed from your old arrays is not enough: you fall short by two elements.  The growth rate for Fibonacci is roughly 1.618033988749895.  I don't know how to prove that things work fine as long as you use something smaller, but a short Python script I wrote to simulate this backs me up (in addition to it making intuitive sense).\r\n\r\nHope this helps.  It's your documentation of course, and if you think this is not worth fixing, it's your call :)", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "oranger34": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/535", "title": "failed in configure, saying google-gflags library is not installed.", "body": " checking for main in -lgflags... no\r\nconfigure: error: Please install google-gflags library\r\n\r\nwhat shall I do to change the default path of gflags?\r\n\r\nbrew list gflags\r\n/usr/local/Cellar/gflags/2.2.0/bin/gflags_completions.sh\r\n/usr/local/Cellar/gflags/2.2.0/include/gflags/ (4 files)\r\n/usr/local/Cellar/gflags/2.2.0/lib/libgflags.2.2.0.dylib\r\n/usr/local/Cellar/gflags/2.2.0/lib/libgflags_nothreads.2.2.0.dylib\r\n/usr/local/Cellar/gflags/2.2.0/lib/cmake/ (4 files)\r\n/usr/local/Cellar/gflags/2.2.0/lib/pkgconfig/gflags.pc\r\n/usr/local/Cellar/gflags/2.2.0/lib/ (4 other files)", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "anoidgit": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/533", "title": "make check fail with ubuntu 16.04", "body": "make[3]: Entering directory '/media/Storage/workspace/folly/folly/test'\r\nmake[3]: *** No rule to make target 'gtest-1.7.0/src/gtest-all.cc', needed by 'gtest-1.7.0/src/libfollytestmain_la-gtest-all.lo'\u3002 \u505c\u6b62\u3002\r\nmake[3]: Leaving directory '/media/Storage/workspace/folly/folly/test'\r\nMakefile:2550: recipe for target 'check-am' failed\r\nmake[2]: *** [check-am] Error 2\r\nmake[2]: Leaving directory '/media/Storage/workspace/folly/folly/test'\r\nMakefile:1854: recipe for target 'check-recursive' failed\r\nmake[1]: *** [check-recursive] Error 1\r\nmake[1]: Leaving directory '/media/Storage/workspace/folly/folly/test'\r\nMakefile:1765: recipe for target 'check-recursive' failed\r\nmake: *** [check-recursive] Error 1\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pengweichu": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/529", "title": "When will folly support VS ?", "body": "Hello, I really would like to use folly in my project, when will it support Windows ?\r\n\r\nThanks", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yunjing": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/526", "title": "JSON serialization does not handle emoji?", "body": "`folly::json::serialize` failed with error `folly::decodeUtf8 encoding length maxed out` with given a `dynamic` object with emoji string \"\\xf0\\x9f\\x91\\xB8\".\r\n\r\nI am no expert on unicode, but the [code](https://github.com/facebook/folly/blob/master/folly/json.cpp#L80) seems to be ignoring the 4th byte. Is this a bug or am i doing anything wrong?", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stanislashzc": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/521", "title": "Can't compile folly on Ubuntu 16.04, error with double_conversion head file", "body": "After I configure folly and run make, it comes with this issue:\r\n/bin/bash ./libtool  --tag=CXX   --mode=link g++  -std=gnu++1y -g -O2 -lboost_context -lboost_program_options -lboost_thread -lboost_filesystem -lboost_system -lboost_regex -lpthread -lboost_chrono  -lssl -lcrypto  -o generate_fingerprint_tables build/GenerateFingerprintTables.o libfollybase.la -llzma -lz -lsnappy -llz4 -liberty -ljemalloc -levent -ldouble-conversion -lglog -lgflags \r\nlibtool: link: g++ -std=gnu++1y -g -O2 -o generate_fingerprint_tables build/GenerateFingerprintTables.o  ./.libs/libfollybase.a -lboost_context -lboost_program_options -lboost_thread -lboost_filesystem -lboost_system -lboost_regex -lpthread -lboost_chrono -lssl -lcrypto -llzma -lz -lsnappy -llz4 -liberty -ljemalloc -levent -ldouble-conversion -lglog -lgflags\r\n./.libs/libfollybase.a(Conv.o): In function `double_conversion::StringToDoubleConverter::StringToDouble(char const*, int, int*) const':\r\n/usr/local/include/double-conversion/double-conversion.h:506: undefined reference to `double_conversion::StringToDoubleConverter::StringToIeee(char const*, int, int*, bool) const'\r\n/usr/local/include/double-conversion/double-conversion.h:506: undefined reference to `double_conversion::StringToDoubleConverter::StringToIeee(char const*, int, int*, bool) const'\r\ncollect2: error: ld returned 1 exit status\r\nMakefile:1456: recipe for target 'generate_fingerprint_tables' failed\r\nmake[2]: *** [generate_fingerprint_tables] Error 1\r\nmake[2]: Leaving directory '/home/padl/data_1/software/folly-2016.11.21.00/folly'\r\nMakefile:1736: recipe for target 'all-recursive' failed\r\nmake[1]: *** [all-recursive] Error 1\r\nmake[1]: Leaving directory '/home/padl/data_1/software/folly-2016.11.21.00/folly'\r\nMakefile:1063: recipe for target 'all' failed\r\nmake: *** [all] Error 2\r\n\r\nwhy it says undefined reference to `double_conversion::StringToDoubleConverter::StringToIeee(char const*, int, int*, bool) const'?\r\ngcc version is 5.4.0 for Ubutun 16.04.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "helloleef": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/516", "title": "folly::detail::AccessSpreader<std::atomic>::getcpuFunc Not Found ", "body": "link libfolly.a , g++6.2 ,  Error info is  \r\n\r\nfolly/detail/CacheLocality.h:256: undefined reference to `folly::detail::AccessSpreader<std::atomic>::getcpuFunc`\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "BAILOOL": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/515", "title": "Problem installing folly", "body": "I get the following error on Ubuntu 14.04 LTS:\r\n\r\n```\r\nchecking double-conversion/double-conversion.h usability... yes\r\nchecking double-conversion/double-conversion.h presence... yes\r\nchecking for double-conversion/double-conversion.h... yes\r\nchecking for ceil in -ldouble-conversion... no\r\nconfigure: error: Please install double-conversion library\r\n```\r\n\r\nHowever, double-precision library is installed. Is there any solution?", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vjon": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/511", "title": "Add \"libgtest-dev\" as a dependency", "body": "I think it would be a nice usability improvement if Google Test was setup as a Git submodule for this repository, as opposed to the current method of unzipping the source to folly/test. It would also have the side benefit of aligning the project structure with some other Facebook projects (e.g. osquery also depends on Google Test v1.7.0, and tracks it as a submodule).\r\n\r\nIf there's interest in this potential enhancement, I can whip up a commit for review.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "junhua": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/503", "title": "error in ubuntu 16.10 while doing make", "body": "Error message:\n\n`j@jeph:~/Downloads/folly/folly$ make\nmake  all-recursive\nmake[1]: Entering directory '/home/j/Downloads/folly/folly'\nMaking all in .\nmake[2]: Entering directory '/home/j/Downloads/folly/folly'\n/bin/bash ./libtool  --tag=CXX   --mode=link g++  -std=gnu++1y -g -O2 -lboost_program_options -lboost_thread -lboost_filesystem -lboost_system -lboost_regex -lpthread -lboost_chrono  -lssl -lcrypto  -o generate_fingerprint_tables build/GenerateFingerprintTables.o libfollybase.la -llzma -lz -lsnappy -llz4 -liberty -ljemalloc -levent -ldouble-conversion -lglog -lgflags\nlibtool: link: g++ -std=gnu++1y -g -O2 -o generate_fingerprint_tables build/GenerateFingerprintTables.o  ./.libs/libfollybase.a -lboost_program_options -lboost_thread -lboost_filesystem -lboost_system -lboost_regex -lpthread -lboost_chrono -lssl -lcrypto -llzma -lz -lsnappy -llz4 -liberty -ljemalloc -levent -ldouble-conversion -lglog -lgflags\nbuild/GenerateFingerprintTables.o: In function`std::string\\* google::MakeCheckOpString<int, unsigned long long>(int const&, unsigned long long const&, char const_)':\n/usr/include/glog/logging.h:672: undefined reference to `google::base::CheckOpMessageBuilder::NewString()'\n./.libs/libfollybase.a(Conv.o): In function`std::string_ google::MakeCheckOpString<unsigned long, unsigned long>(unsigned long const&, unsigned long const&, char const_)':\n/usr/include/glog/logging.h:672: undefined reference to `google::base::CheckOpMessageBuilder::NewString()'\n./.libs/libfollybase.a(Format.o): In function`std::string_ google::MakeCheckOpString<int, int>(int const&, int const&, char const_)':\n/usr/include/glog/logging.h:672: undefined reference to `google::base::CheckOpMessageBuilder::NewString()'\ncollect2: error: ld returned 1 exit status\nMakefile:1421: recipe for target 'generate_fingerprint_tables' failed\nmake[2]: *_\\* [generate_fingerprint_tables] Error 1\nmake[2]: Leaving directory '/home/j/Downloads/folly/folly'\nMakefile:1690: recipe for target 'all-recursive' failed\nmake[1]: **\\* [all-recursive] Error 1\nmake[1]: Leaving directory '/home/j/Downloads/folly/folly'\nMakefile:1035: recipe for target 'all' failed\nmake: **\\* [all] Error 2`\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "larryxiao": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/502", "title": "ubuntu 14.04 dependency of pkg-config?", "body": "i didn't have problem installing folly before on ubuntu 14.04\n\nbut on a new install on ubuntu 14.04, after installing the dependencies\n\n`autoreconf -ivf` reports: `error: possibly undefined macro: AC_MSG_NOTICE`\nwhich can be solved by installing pkg-config as discussed in http://stackoverflow.com/questions/8811381/possibly-undefined-macro-ac-msg-error\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/502/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mohnishkodnani": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/499", "title": "compilation failure ubuntu 16.04 and gcc latest branch", "body": "For fun I was trying to compile folly with gcc-7 latest snapshot. I get the below error.  Any hints on how to fix ?\n\nIn file included from ./../folly/futures/Future.h:506:0,\n                 from ./../folly/futures/Barrier.h:22,\n                 from futures/Barrier.cpp:17:\n./../folly/futures/Future-inl.h:242:6: error: prototype for 'decltype (((folly::Future<T>_)this)->.folly::Future<T>::then(forward<Arg>(arg), (forward<Args>)(folly::Future::then::args)...)) folly::Future<T>::then(Executor_, Arg&&, Args&& ...)' does not match any in class 'folly::Future<T>'\n auto Future<T>::then(Executor\\* x, Arg&& arg, Args&&... args)\n      ^~~~~~~~~\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Dionis-mgn": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/498", "title": "FBVector breakes std::string (clang 3.8.0)", "body": "Hi guys!\n\nI built my app using clang 3.8.0 and got segfault.\n\n[Code to reproduce](https://gist.github.com/Dionis-mgn/bb67335ac419099635ef62c781f0cd4a)\n\nI investigated this issue little bit and discovered this sequence:\n- FBVector allocates chunk for two elements\n- FBVector emplaces string into back\n  - std::string stores data in this chunk (data length is small enough)\n  - std::string stores pointer to this data (pointer to this chunk + some offset). std::string uses this pointers in cases when it isn't able to store data in itself.\n- FBVector emplaces second string using the same mechanism\n- FBVector emplaces third string\n  - FBVector allocates new chunk\n  - FBVector **moves data from old chunk to new one using std::memcpy**. So, data \"moved\" as supposed but pointer \"moved\" to. And points to old chunk.\n  - FBVector frees old chunk an constructs string in new one\n- FBVector destroys all strings\n  - std::string tries to free data stored by pointer and... segfaults\n\nIt is really strange that std::string still tries to free heap even when string is short. In case of strings longer than 16 chars all works just fine: std::string uses heap and pointer points to external (to FBVector) memory area. So, maybe it is more libc++ issue, not FBVector.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "marksweiss": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/491", "title": "folly::to<int_32t>(double) throws loss of precision exceptions", "body": "Here is a brief, reproducible code fragment example, written using `gtest` and `glog` syntax. It passes.\n\n```\nTEST_F(Test, TestCrashFollyConv) {\n  double y = 1.1;\n  int32_t x = (int32_t)y;\n  ASSERT_TRUE(x == 1);\n  x = floor(y);\n  ASSERT_TRUE(x == 1);\n  bool folly_threw = false;\n  try {\n    x = folly::to<int32_t>(y);\n  } catch (std::exception& e) {\n    LOG(ERROR) << \"CAUGHT ERROR IN folly::to<int32_t>(double): \" << e.what();\n    folly_threw = true;\n  }\n  ASSERT_TRUE(folly_threw);\n}\n```\n\nInformally experimenting it appears an arbitrary number of `double` values fail to cast, raising this same error.\n\nOf course there are multiple workarounds, such as `floor()` and `ceil()` in `cmath` specifically for this purpose. But the docs for `Conv` specifically claim \"converts anything to anything\" so I'm reporting it.\n\nTaking a look at the code, float to int comparisons use lookup tables per digit that throw out of range exceptions if a position in the table is reached that doesn't match an expected position that would yield a digit. This is possibly the culprit, as under some failure scenarios I saw `std::range_error` raised, and in some saw the error message `to<>: loss of precision when converting 1.1 to type i` \n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aggarwaa": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/414", "title": "folly readRawHugePageSizes() blatantly relies on the presence of hugepages configuration", "body": "https://github.com/facebook/folly/blob/d9e0b59db5fce150845190686bf681b715e418ae/folly/experimental/io/HugePages.cpp#L73-L87\n\nLine 78 implicitly relies on the existence of hugepages on a linux system. So, if you use any of the functions that end up calling readRawHugePageSizes() and the system doesn't have huge pages configured (/sys/kernel/mm/hugepages doesn't exist), the program dies with an uncaught exception along the lines of:\n\n`E0518 21:29:39.141229 12462 configprocessor.cc:695] XXXXXXXXXXXXXXXX: boost::filesystem::directory_iterator::construct: No such file or directory: \"/sys/kernel/mm/hugepages\"`\n\nAt a minimum, there needs to be error checking/exception handling here.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "atuljangra": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/360", "title": "Improve the documentation so that people can see and use this really good library", "body": "Currently the landing page of this repo doesn't say much about what this library is?\nAgreed that it is a utility library, but just stating \"Folly is an open source C++ library developed and used by Facebook\" is bad documentation.\nMaybe we should get https://github.com/facebook/folly/blob/master/folly/docs/Overview.md this out or add more documentation on the landing page. This can be brief and point to more in-depth documentation available in /docs/.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jprjr": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/310", "title": "Compile fails on musl libc (Subprocess.h)", "body": "Hi there -\n\nI'm working on getting hhvm running on a musl-based Linux distro, and I'm getting an error when compiling folly:\n\n```\n[  3%] Building CXX object third-party/folly/CMakeFiles/folly.dir/src/folly/Subprocess.cpp.o\nIn file included from /builddir/hhvm-HHVM-3.9.0/third-party/folly/src/folly/Subprocess.cpp:21:0:\n/builddir/hhvm-HHVM-3.9.0/third-party/folly/folly/Subprocess.h: In static member function 'static folly::Subprocess::Options folly::Subprocess::pipeStdin()':\n/builddir/hhvm-HHVM-3.9.0/third-party/folly/folly/Subprocess.h:361:49: error: expected unqualified-id before '(' token\n   static Options pipeStdin() { return Options().stdin(PIPE); }\n                                                 ^\n/builddir/hhvm-HHVM-3.9.0/third-party/folly/folly/Subprocess.h: In static member function 'static folly::Subprocess::Options folly::Subprocess::pipeStdout()':\n/builddir/hhvm-HHVM-3.9.0/third-party/folly/folly/Subprocess.h:362:50: error: expected unqualified-id before '(' token\n   static Options pipeStdout() { return Options().stdout(PIPE); }\n                                                  ^\n/builddir/hhvm-HHVM-3.9.0/third-party/folly/folly/Subprocess.h: In static member function 'static folly::Subprocess::Options folly::Subprocess::pipeStderr()':\n/builddir/hhvm-HHVM-3.9.0/third-party/folly/folly/Subprocess.h:363:50: error: expected unqualified-id before '(' token\n   static Options pipeStderr() { return Options().stderr(PIPE); }\n                                                  ^\nthird-party/folly/CMakeFiles/folly.dir/build.make:767: recipe for target 'third-party/folly/CMakeFiles/folly.dir/src/folly/Subprocess.cpp.o' failed\nmake[2]: *** [third-party/folly/CMakeFiles/folly.dir/src/folly/Subprocess.cpp.o] Error 1\nCMakeFiles/Makefile2:176: recipe for target 'third-party/folly/CMakeFiles/folly.dir/all' failed\nmake[1]: *** [third-party/folly/CMakeFiles/folly.dir/all] Error 2\nMakefile:116: recipe for target 'all' failed\nmake: *** [all] Error 2\n```\n\nI believe the error is that `stdin`, `stdout`, and `stderr` are all macros which are being expanded.\n\nglibc defines `stdin stdout stderr` as:\n\n```\nextern struct _IO_FILE *stdin;\nextern struct _IO_FILE *stdout;\nextern struct _IO_FILE *stderr;\n#define stdin stdin\n#define stdout stdout\n#define stderr stderr\n```\n\nmusl libc defines them as:\n\n```\nextern FILE *const stdin;\nextern FILE *const stdout;\nextern FILE *const stderr;\n#define stdin  (stdin)\n#define stdout  (stdout)\n#define stderr  (stderr)\n```\n\nSo when compiling, lines [361-363](https://github.com/facebook/folly/blob/master/folly/Subprocess.h#L361-L363) are expanded to:\n\n```\nstatic Options pipeStdin() { return Options().(stdin)(PIPE); }\nstatic Options pipeStdout() { return Options().(stdout)(PIPE); }\nstatic Options pipeStderr() { return Options().(stderr)(PIPE); }\n```\n\nWhich leads to the above error.\n\nI believe ISO C defines that `stdin`, `stdout`, and `stderr` are supposed to be macros. LLVM had some similar problem here: http://lists.cs.uiuc.edu/pipermail/llvm-commits/Week-of-Mon-20130506/173690.html - this post describes what `stdin` `stdout` and `stderr` are supposed to be better than I could.\n\nI'm not sure what the right way to fix this is - maybe something like `#undef stdin` (etc) towards the beginning of the code, then redefine it towards the end?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lichray": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/134", "title": "Allow user code to create an invalid future", "body": "Like to have a public ctor\n\n```\nFuture(std::nullptr_t);\n```\n\nOtherwise when a user needs to define a future and to use it right after the definition, the future always needs to be initialized to a value or an exception.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/72486246", "body": "Really problem is that on Fedora > 18 and FreeBSD, -pthread flag is needed for the configure script to find `pthread_yield`.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/72486246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/72486873", "body": "Suggest the following fix:\n\n``` diff\ndiff --git a/folly/detail/IPAddress.h b/folly/detail/IPAddress.h\nindex f255229..f6db412 100644\n--- a/folly/detail/IPAddress.h\n+++ b/folly/detail/IPAddress.h\n@@ -46,7 +46,8 @@ extern \"C\" {\n #include <folly/Conv.h>\n #include <folly/Format.h>\n\n-#if defined(__APPLE__) && !defined(s6_addr16)\n+#if defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__) || \\\n+    defined(__APPLE__)\n # define s6_addr16 __u6_addr.__u6_addr16\n #endif\n\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/72486873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76993059", "body": "I'm always conservative, but I don't mind.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76993059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "smunaut": {"issues": [{"url": "https://api.github.com/repos/facebook/folly/issues/108", "title": "Allow selection of SSL Context based on target IP in addition to SNI", "body": "Basically I want to be able to select a context based on the IP the client connected to when it provided no SNI information.\n\nThe setup is as follow:\n- The server is configured with several loopbacks interface in several range.\n- The network gear will route any packet  for those range to the main server IP.\n- This basically allows the server to easily have 100's of IPs without having to configure a distinct interface for each.\n\nIf the client sends SNI info, then of course we use that. Unfortunately, there is still quite a bit of clients that don't especially in enterprise environment or when using client libraries (like python only added SNI _very_ recently), so to still support those, we assign a distinct IP to each of our customer that has a custom domain and we use the target IP as a fallback.\n\nUnfortunately, in folly (and proxygen which is what I'd like to use) all of this is kind of hidden away in the Acceptor SSLContextManager, it evens extract the domains name directly from the certs.\n\nThe least intrusive way I can see to support this would be to add a mapping from IP -> DN in the SSL Context Manager where a user can manually fill a map and then in the ServerNameCallbackResult, if there is no SNI, then lookup if the is a IP -> DN mapping and use that.\n\nIf I write such a thing, would it be admissible for merging or is this something you just don't want ?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "magedm": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/73fbda10ad950396a9869ebc60df8f2ef52cd5f8", "message": "Fix integer sign consistency.\n\nSummary: Keeping all variables that interact with hazptr_domain::rcount_ signed int to avoid conversion errors.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6754593\n\nfbshipit-source-id: e283f127a112a529a0e98eb82b6061b44aa9d2ca"}, {"url": "https://api.github.com/repos/facebook/folly/commits/2d80d4e0d0ea2f473639de5adfd24d22577a3a33", "message": "UnboundedQueue: Use hazptr_obj_batch\n\nSummary: Manage retirement of removed segments using hazptr_obj_batch in order to reduce the chances of fragmenting related segments across thread local lists of retired objects of many threads, which could lead to unnecessarily high memory usage.\n\nReviewed By: djwatson\n\nDifferential Revision: D6686697\n\nfbshipit-source-id: 0d786c0f9e0bac2c44183ed3da21619e1feb3d52"}, {"url": "https://api.github.com/repos/facebook/folly/commits/028415ba5c1fee579d249a97dd49752fe3c7348b", "message": "Add hazptr_obj_batch\n\nSummary: Provide capability for custom batching retirement of objects, for example object that belong to the same data structure, to avoid the risk fragmenting related objects across thread local lists of retired objects of many threads, which could lead to unnecessarily high memory usage.\n\nReviewed By: djwatson\n\nDifferential Revision: D6686603\n\nfbshipit-source-id: fadcade73e71170ef1bcec221c4da6f4ddeecff5"}, {"url": "https://api.github.com/repos/facebook/folly/commits/4591832b4885f166236acee689dd2b11e3b3135b", "message": "UnboundedBlockingQueue: Adjust segment size\n\nSummary: Adjust the segment size of the `UnboundedQueue` to 64 instead of 256, a size more suitable for CPUThreadPoolExecutor::CPUTask elements.\n\nReviewed By: djwatson\n\nDifferential Revision: D6665918\n\nfbshipit-source-id: c34c4fa936ee5c6d6a3dd4489129c936369f3980"}, {"url": "https://api.github.com/repos/facebook/folly/commits/42452e30b5695dbd38e2a0b3083e594945fb9876", "message": "Add threshold for thread local retired objects\n\nSummary: Change the threshold for pushing privately held retired object to the domain to a moderate constant instead of using the threshold for bulk reclamation which is too high for this purpose.\n\nReviewed By: djwatson\n\nDifferential Revision: D6665904\n\nfbshipit-source-id: 0b090884843b0296a93af7994f7183f41c00000e"}, {"url": "https://api.github.com/repos/facebook/folly/commits/9cb500221e2d70d8bdba2f368e4d438c97a48a9e", "message": "Test UnboundedBlockingQueue in ThreadPoolExecutorTest\n\nSummary: Test UnboundedBlockingQueue for the case in D3527722\n\nReviewed By: ot\n\nDifferential Revision: D6587163\n\nfbshipit-source-id: 1465991018187c5f841e6e3e7a11676390e2f8f2"}, {"url": "https://api.github.com/repos/facebook/folly/commits/f4d97dc69a38d8fde40d90724455522774df77a3", "message": "UnboundedQueue: Change try_dequeue variants to fail only if the queue is empty\n\nSummary:\nThe current semantics of try_dequeue variants can cause problems in cases where based on external dependencies the consumer is guaranteed that the queue is not empty and depends on the success of try_dequeue. See https://github.com/facebook/wangle/commit/abd07a06cae09efcd4347a9a019d59ae8a013c3f\n\nThis diff changes the semantics so that try_dequeue operations fail only if the queue is empty.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6586156\n\nfbshipit-source-id: 25d6085e28d3e24034ecf6a8bafab51c95464b01"}, {"url": "https://api.github.com/repos/facebook/folly/commits/124efa238dc51b331457c940e17aa9cb7c47a92e", "message": "UnboundedQueue: Fix advanceHead\n\nSummary:\nWithout the fix multiple consumers may update head concurrently and cause it to lag. If this persists until the destruction time of the queue, some segments may be incorrectly retired twice.\n\nThe fix is to wait for head to advance to the current segment first before advancing head to the next segment.\n\nReviewed By: djwatson\n\nDifferential Revision: D6588135\n\nfbshipit-source-id: 3e916441bff5ad3f27de418601990c59a0b89bc2"}, {"url": "https://api.github.com/repos/facebook/folly/commits/a123a11e30026dd9883f16fa3ad1baa2d9ecfeec", "message": "Fix comments in UnboundedQueue and DynamicBoundedQueue\n\nSummary: Fix typos and wording in comments.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6584559\n\nfbshipit-source-id: b4b72f6c25c9f9e6fb3f2fbee69eea4a39b5c004"}, {"url": "https://api.github.com/repos/facebook/folly/commits/17c08956e0c46684e3a3a9d3b5e9bc733a09c0ea", "message": "Dynamic Bounded Queue\n\nSummary:\nDynamicBoundedQueue supports:\n- Dynamic memory usage that grows and shrink in proportion to the number of elements in the queue.\n- Adjustable capacity that helps throttle pathological cases of producer-consumer imbalance that may lead to excessive memory usage.\n- The adjustable capacity can also help prevent deadlock by allowing users to temporarily increase capacity substantially to guarantee accommodating producer requests that cannot wait.\n- SPSC, SPMC, MPSC, MPMC variants.\n- Blocking and spinning-only variants.\n- Inter-operable non-waiting, timed until, timed for, and waiting variants of producer and consumer operations.\n- Optional variable element weights.\n\nReviewed By: djwatson\n\nDifferential Revision: D6462123\n\nfbshipit-source-id: 5c7a7d88c3fa273211702af9ff78f6302afd2276"}, {"url": "https://api.github.com/repos/facebook/folly/commits/d5b67c256c7423d74f4794d7fe421ed239807be4", "message": "UnboundedQueue: Use alignas instead of FOLLY_ALIGNED\n\nSummary: Use alignas instead of FOLLY_ALIGNED\n\nReviewed By: Orvid\n\nDifferential Revision: D6554984\n\nfbshipit-source-id: 5b11ac387faa137aa8dd0c35b6e9bb999cf0bf2d"}, {"url": "https://api.github.com/repos/facebook/folly/commits/87cfad8e3c9f67cbf764aa7b81685427a5d1d2e0", "message": "UnboundedBlockingQueue: Remove extra include\n\nSummary: Remove include not needed after recent change\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6529608\n\nfbshipit-source-id: 904072084e180125d68bd1ef6e4dffb2939cd1eb"}, {"url": "https://api.github.com/repos/facebook/folly/commits/b782340cfac92c0793644599046036678f54bb7e", "message": "UnboundedQueue: Add LgAlign template parameter - Refactor code\n\nSummary:\n- Add a template parameter, LgAlign, to control memory usage. The parameter is used in DynamicBoundedQueue.\n- Refactor code.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6508015\n\nfbshipit-source-id: 6e17b1d8fd900595147dc4217e04d379a13fbdf8"}, {"url": "https://api.github.com/repos/facebook/folly/commits/a91971707da2903e1d28a58ac18ae369df7fbf53", "message": "FlatCombining: Use SaturatingSemaphore instead of multi-poster and non-blocking Baton\n\nSummary: Use SaturatingSemaphore instead of multi-poster and non-blocking Baton, in preparation for restoring Baton to being single-poster and with blocking wait().\n\nReviewed By: davidtgoldblatt\n\nDifferential Revision: D6510619\n\nfbshipit-source-id: eed87beabc1b698080b8e41c746d570d30804ce7"}, {"url": "https://api.github.com/repos/facebook/folly/commits/9a8218df9c4f07c4390bd039a2605e33ec2eaf47", "message": "Unbounded queue\n\nSummary:\nUnboundedQueue supports:\n- SPSC, MPSC, SCMP, MPMC\n- Non-waiting, waiting, and timed consumer operations.\n- Producers never wait or fail (unless out-of-memory).\n- Memory usage grows and shrinks dynamically\n\n```\n/// UnboundedQueue supports a variety of options for unbounded\n/// dynamically expanding an shrinking queues, including variations of:\n/// - Single vs. multiple producers\n/// - Single vs. multiple consumers\n/// - Blocking vs. spin-waiting\n/// - Non-waiting, timed, and waiting consumer operations.\n/// Producer operations never wait or fail (unless out-of-memory).\n///\n/// Template parameters:\n/// - T: element type\n/// - SingleProducer: true if there can be only one producer at a\n///   time.\n/// - SingleConsumer: true if there can be only one consumer at a\n///   time.\n/// - MayBlock: true if consumers may block, false if they only\n///   spins. A performance tuning parameter.\n/// - LgSegmentSize (default 8): Log base 2 of number of elements per\n///   segment. A performance tuning parameter. See below.\n///\n/// When to use UnboundedQueue:\n/// - If a small bound may lead to deadlock or performance degradation\n///   under bursty patterns.\n/// - If there is no risk of the queue growing too much.\n///\n/// When not to use UnboundedQueue:\n/// - If there is risk of the queue growing too much and a large bound\n///   is acceptable, then use DynamicBoundedQueue.\n/// - If the queue must not allocate on enqueue or it must have a\n///   small bound, then use fixed-size MPMCQueue or (if non-blocking\n///   SPSC) ProducerConsumerQueue.\n///\n/// Template Aliases:\n///   USPSCQueue<T, MayBlock, LgSegmentSize>\n///   UMPSCQueue<T, MayBlock, LgSegmentSize>\n///   USPMCQueue<T, MayBlock, LgSegmentSize>\n///   UMPMCQueue<T, MayBlock, LgSegmentSize>\n///\n/// Functions:\n///   Producer operations never wait or fail (unless OOM)\n///     void enqueue(const T&);\n///     void enqueue(T&&);\n///         Adds an element to the end of the queue.\n///\n///   Consumer operations:\n///     void dequeue(T&);\n///         Extracts an element from the front of the queue. Waits\n///         until an element is available if needed.\n///     bool try_dequeue(T&);\n///         Tries to extracts an element from the front of the queue\n///         if available. Returns true if successful, false otherwise.\n///     bool try_dequeue_until(T&, time_point& deadline);\n///         Tries to extracts an element from the front of the queue\n///         if available until the specified deadline.  Returns true\n///         if successful, false otherwise.\n///     bool try_dequeue_for(T&, duration&);\n///         Tries to extracts an element from the front of the queue\n///         if available for for the specified duration.  Returns true\n///         if successful, false otherwise.\n///\n///   Secondary functions:\n///     size_t size();\n///         Returns an estimate of the size of the queue.\n///     bool empty();\n///         Returns true only if the queue was empty during the call.\n///     Note: size() and empty() are guaranteed to be accurate only if\n```\n\nReviewed By: djwatson\n\nDifferential Revision: D6157613\n\nfbshipit-source-id: db423f86d1d0604d22f6b9c71ea0ed08be32e2a1"}, {"url": "https://api.github.com/repos/facebook/folly/commits/644a73aada5984d2c125d505a21a00174ba4f185", "message": "Saturating semaphore\n\nSummary:\nSaturatingSemaphore is a flag that allows:\n- multiple concurrent posters\n- multiple concurrent waiters\n- idempotent posting\n- non-destructive waiting\n- blocking and spinning\n- pre-block spin time control\n\n```\n/// SaturatingSemaphore is a flag that allows concurrent posting by\n/// multiple posters and concurrent non-destructive waiting by\n/// multiple waiters.\n///\n/// A SaturatingSemaphore allows one or more waiter threads to check,\n/// spin, or block, indefinitely or with timeout, for a flag to be set\n/// by one or more poster threads. By setting the flag, posters\n/// announce to waiters (that may be already waiting or will check\n/// the flag in the future) that some condition is true. Posts to an\n/// already set flag are idempotent.\n```\n\nReviewed By: djwatson\n\nDifferential Revision: D6379704\n\nfbshipit-source-id: 59aed76caa2d159639e75425a778a9c63f18f375"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yfeldblum": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/e52b296424c9441b5595906674045e04c6ccf24a", "message": "Remove unsafe tag and add presorted tag\n\nSummary:\n[Folly] Remove `unsafe` tag and add `presorted` tag.\n\nThere are varieties of unsafety, so let us be more explicit about which variety of unsafety is invoked in each case.\n\nDifferential Revision: D6758520\n\nfbshipit-source-id: d198a3c7601971460f91acc7787c9da02ae283c0"}, {"url": "https://api.github.com/repos/facebook/folly/commits/729928e79412a160f8192e27d25dfe8f30d6984f", "message": "Use MemoryIdler in SaturatingSemaphore\n\nSummary:\n[Folly] Use `MemoryIdler` in `SaturatingSemaphore`.\n\nAs is used in `Baton`.\n\nAnd merge the two invocations of `futexWait` and `futexWaitUntil` - `futexWaitUntil` also tests for the max-deadline internally.\n\nReviewed By: djwatson\n\nDifferential Revision: D6720045\n\nfbshipit-source-id: a48187a6c866dbf99bb5c7283e0288b939bef2e5"}, {"url": "https://api.github.com/repos/facebook/folly/commits/9938799b6d3d06c444e3fb03ca6a780e3b6a5f8c", "message": "Handle max deadlines in Futex\n\nSummary:\n[Folly] Handle max deadlines in `Futex`.\n\nSome of the synchronization code internally treats deadlines which are equivalent to `time_point::max()` for the same clock as a sentinel value indicating a deadline at infinity, or equivalently the lack of a deadline.\n\nCare must be taken when converting between clocks to translate a deadline at infinity for one clock to the deadline at infinity for the other clock.\n\nReviewed By: nbronson\n\nDifferential Revision: D6720021\n\nfbshipit-source-id: cfc230dd2d8db55297385a4afcb6d87ae4221840"}, {"url": "https://api.github.com/repos/facebook/folly/commits/f57db69787a7b3f7450c157e40e137d793c0b9fa", "message": "Fix copyright line in folly/synchronization/test/ParkingLotBenchmark.cpp\n\nSummary: [Folly] Fix copyright line in `folly/synchronization/test/ParkingLotBenchmark.cpp`.\n\nReviewed By: andrewjcg\n\nDifferential Revision: D6758502\n\nfbshipit-source-id: cae2a79940c7c9cc58c29977141199ab1e902081"}, {"url": "https://api.github.com/repos/facebook/folly/commits/6374f552672fe630d7060937593c1982be448b87", "message": "Improve SingletonThreadLocal performance\n\nSummary:\n[Folly] Improve `SingletonThreadLocal` performance.\n\nBy explicitly controlling inlining behavior.\n\nThe ctor is definitionally cold - once per process - so outline.\n\n`get` is hot so inline. Uncached `get` is cold - once per thread - so outline uncached.\n\nReviewed By: djwatson\n\nDifferential Revision: D6736662\n\nfbshipit-source-id: 4cd77c7772b46e2e3c6b2a3dc071b2b06522979e"}, {"url": "https://api.github.com/repos/facebook/folly/commits/61cdb3dc27700545a65062e174d1b7f1ac15f088", "message": "Fix Build: folly/synchronization/test/ParkingLotBenchmark.cpp (sign-compare, unused-variable)\n\nSummary: [Folly] Fix Build: `folly/synchronization/test/ParkingLotBenchmark.cpp` (`sign-compare`, `unused-variable`).\n\nReviewed By: djwatson\n\nDifferential Revision: D6733586\n\nfbshipit-source-id: 04b82110e8e0b655e6b3994dbca3bd0b4bd57eef"}, {"url": "https://api.github.com/repos/facebook/folly/commits/cf930032da9b0796d96c14c3b4446a75477c1ef3", "message": "Revert D6725091: [Folly] Use thread-local in RequestContext::getStaticContext\n\nSummary:\nThis reverts commit 9979f39677284b1051cb109b461097495d77ca17\n\nbypass-lint\n\nAn infra SEV is better than not reverting this diff.\nIf you copy this password, see you in SEV Review!\ncause_a_sev_many_files\n\nDifferential Revision: D6725091\n\nfbshipit-source-id: f1e3c80c869aa47684f5fbe79528e68174dee568"}, {"url": "https://api.github.com/repos/facebook/folly/commits/6746259314362d89f3d1d1dbfdf00c9fe18de202", "message": "Use thread-local in RequestContext::getStaticContext\n\nSummary:\n[Folly] Use thread-local in `RequestContext::getStaticContext`.\n\n`folly::SingletonThreadLocal` uses `folly::ThreadLocal`. However, `static FOLLY_TLS` (`static __thread`) is always faster than `folly::ThreadLocal` for thread-local singletons for which iteration is not required.\n\nReviewed By: djwatson\n\nDifferential Revision: D6725091\n\nfbshipit-source-id: 9979f39677284b1051cb109b461097495d77ca17"}, {"url": "https://api.github.com/repos/facebook/folly/commits/1aabda15e688be7a21874c1c8f5252b898bdb312", "message": "Fix missing WaitOptions symbol in autotools build\n\nSummary:\n[Folly] Fix missing `WaitOptions` symbol in autotools build.\n\nCloses #736.\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D6724950\n\nfbshipit-source-id: 54ac0d1a743aa38fe1a7a2bdce585fced18c5a44"}, {"url": "https://api.github.com/repos/facebook/folly/commits/cd1bdc912603c0358ba733d379a74ae90ab3a437", "message": "Fix copyright lines\n\nSummary: [Folly] Fix copyright lines based on file histories.\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D6720312\n\nfbshipit-source-id: c70a667a1977e70e2d4451ea624f96163982f681"}, {"url": "https://api.github.com/repos/facebook/folly/commits/e092e957b750dbf24de247b0794cd4b0bb9bfdaf", "message": "Convert newlines in folly/portability/PThread.cpp\n\nSummary:\n[Folly] Convert newlines in `folly/portability/PThread.cpp`.\n\n```\ndos2unix folly/portability/PThread.cpp\n```\n\nReviewed By: meyering\n\nDifferential Revision: D6720343\n\nfbshipit-source-id: b92122b4a7012d7f8d73d293af51b4fcc868c582"}, {"url": "https://api.github.com/repos/facebook/folly/commits/47b2f8dfdc39b149accf9ae830551eee670d98d1", "message": "Promote aligned_malloc and aligned_free\n\nSummary:\n[Folly] Promote `aligned_malloc` and `aligned_free` from `namespace folly::detail` to `namespace folly`.\n\nAnd move them from `folly/portability/Memory.h` to `folly/Memory.h`.\n\nDifferential Revision: D6153394\n\nfbshipit-source-id: eef314d2bc171910ea3c8403da9e9e1d1858ce15"}, {"url": "https://api.github.com/repos/facebook/folly/commits/fd5eeb5f4bb9ad55172e9454f726667e3c325000", "message": "Unsafe pre-sorted construction for sorted-vector containers\n\nSummary:\n[Folly] Unsafe pre-sorted construction for sorted-vector containers.\n\nIf the backing container type can be constructed directly in sorted order or can be determined in advance to be in sorted order, then a special constructor can help code take advantage of this condition by avoiding an extra invocation of `std::sort`.\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D6708379\n\nfbshipit-source-id: 25d886b0814dc9230c6046ed1e7f199fac47754e"}, {"url": "https://api.github.com/repos/facebook/folly/commits/b1fe65ff984c0bee2ea0dcdb4aded475b5463315", "message": "MemoryIdler::futexWaitUntil\n\nSummary:\n[Folly] `MemoryIdler::futexWaitUntil`.\n\nAdds `MemoryIdler::futexWaitUntil` that works like `Futex::futexWaitUntil`, in a similar way that `MemoryIdler::futexWait` works like `Futex::futexWait`.\n\nRemoves the ability to customize the idle-timeout clock for `MemoryIdler::futexWait` as a side-effect; the idle-timeout is now a pure duration. Now, the clock used with the idle-timeout is the same as the normal deadline clock, so the idle-timeout clock can be set for `MemoryIdler::futexWaitUntil` by providing a deadline with that clock type. This normally would not matter, but it affects the unit-tests.\n\nReviewed By: djwatson\n\nDifferential Revision: D6681679\n\nfbshipit-source-id: e3cf6e71d7530c5877a834b318b423eb91f71eb9"}, {"url": "https://api.github.com/repos/facebook/folly/commits/653053aa7a270129b35d405e3d196210c44ec6e2", "message": "Cut the ScopeGuard alias now that we have auto\n\nSummary:\n[Folly] Cut the `ScopeGuard` alias now that we have `auto`.\n\nThis form works because of hidden lifetime extension:\n```lang=c++\nfolly::ScopeGuard guard = folly::makeGuard([] { /*...*/ });\n//  ...\n//  guard falls out of scope\n```\nBut this form would not work correctly:\n```lang=c++\nfolly::ScopeGuard guard = folly::makeGuard([] { /*...*/ });\nstd::async(std::launch::async, [guard = std::move(guard)] {});\n```\nBecause `folly::ScopeGuard` is an rvalue-reference-to-base.\nWe have `auto`, so just remove `folly::ScopeGuard`. This form works correctly:\n```lang=c++\nauto guard = folly::makeGuard([] { /*...*/ });\nstd::async(std::launch::async, [guard = std::move(guard)] {});\n```\n\nReviewed By: igorsugak\n\nDifferential Revision: D6690070\n\nfbshipit-source-id: 54e32b300d36fce4eb95a59f1828819afe312ec0"}, {"url": "https://api.github.com/repos/facebook/folly/commits/e61c21509306b8bad35427a3a768347d51c25e66", "message": "Move ScopeGuardImpl and ScopeGuardImplBase into the detail namespace\n\nSummary:\n[Folly] Move `ScopeGuardImpl` and `ScopeGuardImplBase` into the `detail` namespace.\n\nLet them be marked as private implementation details.\n\nReviewed By: andrewjcg\n\nDifferential Revision: D6665317\n\nfbshipit-source-id: 03e8fee6a16338395ec92c582613b053bd9f74ec"}, {"url": "https://api.github.com/repos/facebook/folly/commits/5277a636b62a8f9c80756012de9bae80358ee30e", "message": "Stop using ScopeGuardImpl in DynamicParser\n\nSummary:\n[Folly] Stop using `ScopeGuardImpl` in `DynamicParser`.\n\n`ScopeGuardImpl` is an impl type that should not be treated as public.\n\nReviewed By: igorsugak\n\nDifferential Revision: D6689835\n\nfbshipit-source-id: aea6c985e40887594c0aeb0c0948fa77c149a89b"}, {"url": "https://api.github.com/repos/facebook/folly/commits/7bf1486094cccb266e789a378d8e5f91e3cb7780", "message": "folly::Init, RAII variant of folly::init\n\nSummary:\n[Folly] `folly::Init`, RAII variant of `folly::init`.\n\nUse it in `main` used by unit-tests.\n\nReviewed By: ot\n\nDifferential Revision: D6566358\n\nfbshipit-source-id: fb8e5a18fc43eb65e2cbeb070d97094bd413bb96"}, {"url": "https://api.github.com/repos/facebook/folly/commits/dcf8a19c8d08d7e730d3862c88396fdcdfa2813f", "message": "Let Futex import base-class ctors\n\nSummary:\n[Folly] Let `Futex` import base-class ctors.\n\nRather than needing to define ctors and inherit `boost::noncopyable`.\n\nReviewed By: WillerZ\n\nDifferential Revision: D6674054\n\nfbshipit-source-id: 59e0a4815682b227346954fe47c6eda49e3ad62f"}, {"url": "https://api.github.com/repos/facebook/folly/commits/e7f26d60480810d6c2b724130e35761d75af33fc", "message": "Tweak FutexResult comments\n\nSummary: [Folly] Tweak `FutexResult` comments.\n\nReviewed By: nbronson\n\nDifferential Revision: D6673979\n\nfbshipit-source-id: 1777311cd93d5a83432c4ebb48a8432a1c504ca9"}, {"url": "https://api.github.com/repos/facebook/folly/commits/e229101b0e2fc1d9ccfbcb10be991cb62e19d32d", "message": "Futex::futexWait returns FutexResult\n\nSummary: [Folly] `Futex::futexWait` returns `FutexResult`.\n\nReviewed By: nbronson\n\nDifferential Revision: D6673871\n\nfbshipit-source-id: 378c69d8362970e985da31e31d8e9b0179d2917f"}, {"url": "https://api.github.com/repos/facebook/folly/commits/8bfee85eb0e54a346a8c2fe1ac8b474303b754b0", "message": "Support for all clock types in Futex\n\nSummary:\n[Folly] Support for all clock types in `Futex`.\n\nOnly `system_clock` and `steady_clock` remain optimal as before, but at least let `Futex` work, even if non-optimally, for all clock types.\n\nReviewed By: nbronson\n\nDifferential Revision: D6673741\n\nfbshipit-source-id: 0a0f778f61b71bea76e12b7fab478e33ce3bbaae"}, {"url": "https://api.github.com/repos/facebook/folly/commits/0a6bc82e3b9ef8eb49dec6fa7208719ee32990af", "message": "Use ptr-to-const in Futex\n\nSummary: [Folly] Use ptr-to-`const` in `Futex`.\n\nReviewed By: igorsugak\n\nDifferential Revision: D6673723\n\nfbshipit-source-id: b828c2284b40ec8166e823eca7725beccd330f87"}, {"url": "https://api.github.com/repos/facebook/folly/commits/b67b22f4e27773e2e2c155a3629ff8d468bb1286", "message": "Fix some copyright lines in folly/detail/ and folly/test/\n\nSummary: [Folly] Fix some copyright lines in `folly/detail/` and `folly/test/`.\n\nDifferential Revision: D6673878\n\nfbshipit-source-id: 6c060a974bb4d40d0f24a44ebddddf892805c65e"}, {"url": "https://api.github.com/repos/facebook/folly/commits/2ac160c2a7e6fcf12a0db18093fa39e8f01ffc48", "message": "Baton support for wait-options\n\nSummary: [Folly] Baton support for wait-options\n\nReviewed By: nbronson\n\nDifferential Revision: D6591168\n\nfbshipit-source-id: beca8422ac0daa572fb43c371923a86f199999f9"}, {"url": "https://api.github.com/repos/facebook/folly/commits/3579ddb46bf91312e7c1d24389ad60fd96fad776", "message": "Timed wait operations for spin-only Baton\n\nSummary:\n[Folly] Timed wait operations for spin-only `Baton`.\n\nEnables `try_wait_for` and `try_wait_until` for `Baton</* MayBlock = */ false, /*...*/>`.\n\nReviewed By: nbronson\n\nDifferential Revision: D6672153\n\nfbshipit-source-id: 95da07260b21c2b88b8f7bf81cbfcbe5f5099ac0"}, {"url": "https://api.github.com/repos/facebook/folly/commits/1374bb3aba58bb6b76f172ab97e5ed8c59c4a60c", "message": "Remove gcc-v4.7 support from MemoryIdler\n\nSummary:\n[Folly] Remove gcc-v4.7 support from `MemoryIdler`.\n\nAs of gcc-v4.8, `std::is_trivial<std::chrono::duration<Rep, Period>>::value` holds. We no longer need any extra support.\n\nReviewed By: meyering\n\nDifferential Revision: D6673517\n\nfbshipit-source-id: f28b2d126f113547ebf36c85f9fa37a5d944d65b"}, {"url": "https://api.github.com/repos/facebook/folly/commits/7462c4c257f640552f3b5f18da178c04cdf61e1f", "message": "Terminal comma for FutexResult enumerators\n\nSummary: [Folly] Terminal comma for `FutexResult` enumerators. Style nit.\n\nReviewed By: meyering\n\nDifferential Revision: D6673523\n\nfbshipit-source-id: abf9f4d3e99bf9a6d3042a49252b1b1190e69b9f"}, {"url": "https://api.github.com/repos/facebook/folly/commits/46563373196cb85c0b8130149bfa2abedaa2b0c5", "message": "Use auto for scope-guard locals v.s. folly::ScopeGuard\n\nSummary: Use `auto` for scope-guard locals v.s. `folly::ScopeGuard`.\n\nReviewed By: igorsugak, meyering\n\nDifferential Revision: D6664915\n\nfbshipit-source-id: ea239b712f3f9dc7ef81105aaf82f4b36bc07db5"}, {"url": "https://api.github.com/repos/facebook/folly/commits/881088fc0341608999b30d8d06573b86f37daa42", "message": "Synchronized::exchange\n\nSummary:\n[Folly] `Synchronized::exchange`, for assigning a new value and returning the old value.\n\n(Note: this ignores all push blocking failures!)\n\nDifferential Revision: D6653482\n\nfbshipit-source-id: 68f4bd330bc2cf37bb92aff98b8ce3221334112e"}, {"url": "https://api.github.com/repos/facebook/folly/commits/18b6a2dd5e494d89ff670a5a7bc186d89a8690a5", "message": "Fix copyright lines in folly/synchronization/Baton.h\n\nSummary: [Folly] Fix copyright lines in `folly/synchronization/Baton.h`.\n\nReviewed By: meyering\n\nDifferential Revision: D6665595\n\nfbshipit-source-id: 84aa0c475f01c858d543a047103437c083b3a4ed"}, {"url": "https://api.github.com/repos/facebook/folly/commits/5cb23840adceb1c5f4d960967c9a66374a858b9e", "message": "Cut glog include from folly/synchronization/RWSpinLock.h\n\nSummary: [Folly] Cut `glog` include from `folly/synchronization/RWSpinLock.h`.\n\nReviewed By: meyering\n\nDifferential Revision: D6659300\n\nfbshipit-source-id: 0f1b79d98be0656694f57667252a16acd54e2414"}, {"url": "https://api.github.com/repos/facebook/folly/commits/5be3abd7102a288a53125d0e77f8ae06288df78e", "message": "Move folly/RWSpinLock.h to folly/synchronization/\n\nSummary: [Folly] Move `folly/RWSpinLock.h` to `folly/synchronization/`.\n\nReviewed By: elsteveogrande\n\nDifferential Revision: D6659265\n\nfbshipit-source-id: 307723e22f42ceb104f26657aed8b34f7e183afb"}, {"url": "https://api.github.com/repos/facebook/folly/commits/183fc6b43d058291c122d74be121098a8cadd188", "message": "Extract WaitOptions\n\nSummary:\n[Folly] Extract `WaitOptions` from `SaturatingSemaphore`.\n\nThis type may prove useful in the future for a variety of similar cases, and so does not need to be locked up inside `SaturatingSemaphore`.\n\nAdditionally:\n* Extract and redraft a comment from `Baton`.\n* Rename `pre_block` to `spin_max`.\n\nReviewed By: djwatson, aary\n\nDifferential Revision: D6632875\n\nfbshipit-source-id: 6b7faeeb6e1ac2011a037c2b560def0ee2e9f3d4"}, {"url": "https://api.github.com/repos/facebook/folly/commits/f6ed4a26c0f3e6ba12788206e54add9db18e4dd6", "message": "Move folly/BitIterator.h to folly/container/\n\nSummary: [Folly] Move `folly/BitIterator.h` to `folly/container/`.\n\nReviewed By: djwatson\n\nDifferential Revision: D6648357\n\nfbshipit-source-id: 5617e3210f58435fcbf3ef07fa745da47dbce475"}, {"url": "https://api.github.com/repos/facebook/folly/commits/d41f4cc9159534057382a982cb68eeed3f4db6cb", "message": "Move InPlaceConstruction test in folly/test/SynchronizedTest.cpp\n\nSummary: [Folly] Move `InPlaceConstruction` test in `folly/test/SynchronizedTest.cpp`.\n\nDifferential Revision: D6653481\n\nfbshipit-source-id: f0eadfd6c2f41e9f597a666d01e40d5553447c70"}, {"url": "https://api.github.com/repos/facebook/folly/commits/7ce61a15fcaa6d8b8d8dabedaa05f31048421cd3", "message": "Fix copyright lines for folly/Synchronized.h\n\nSummary: [Folly] Fix copyright lines for `folly/Synchronized.h`.\n\nReviewed By: meyering\n\nDifferential Revision: D6664326\n\nfbshipit-source-id: 71a0fc17358e41dfc751b8bcb0736c288975a4a0"}, {"url": "https://api.github.com/repos/facebook/folly/commits/92d510df9827c34f0384cd289c957a6983ce8f4a", "message": "Avoid allocs in dtors in futures collect\n\nSummary:\n[Folly] Avoid allocs in dtors in futures `collect`.\n\n`CollectContext`, a detail helper type, allocates storage for a results vector in its dtor. This is an awkward situation and should be avoided.\n\nReviewed By: ericniebler\n\nDifferential Revision: D6649299\n\nfbshipit-source-id: 87746fcc78fa080f63505d7bb864aca6c4a3d7cb"}, {"url": "https://api.github.com/repos/facebook/folly/commits/661c75b6e80e470548de41c4ab4a289a8d0711a8", "message": "Remove SingletonVault C bindings\n\nSummary: [Folly] Remove `SingletonVault` C bindings. They are not generally needed.\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D6632104\n\nfbshipit-source-id: 3aecb35277bc76a2171487404d6994a5ea296afc"}, {"url": "https://api.github.com/repos/facebook/folly/commits/43523e0ce6bfe87a6576fb1bb50337afe0114eb5", "message": "Use member-invoke traits in LockTraits\n\nSummary:\n[Folly] Use member-invoke traits in `LockTraits`.\n\nV.s. spelling out the SFINAE manually.\n\nReviewed By: Orvid\n\nDifferential Revision: D6637380\n\nfbshipit-source-id: 212e0cc5e54503b31e458b6bda93b2a3b24e6c59"}, {"url": "https://api.github.com/repos/facebook/folly/commits/1a50cb78590fabf164630808f1be23a9bef6bcc7", "message": "invoke and member-invoke tweaks\n\nSummary:\n[Folly] `invoke` and member-`invoke` tweaks.\n\n* Direct `static_cast` v.s. `std::forward` is okay.\n* Implement member-`invoke` in terms of `invoke` and extract most of it to a helper type, minimizing the code directly generated by the preprocessor.\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D6644119\n\nfbshipit-source-id: e58a83d7ff2dd71b0377d864ef089c34e0239c8d"}, {"url": "https://api.github.com/repos/facebook/folly/commits/228c05ff964352538798bee101d6bf32d7940897", "message": "Add ColdClassTest.cpp to oss builds\n\nSummary: [Folly] Add `ColdClassTest.cpp` to oss builds.\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D6648831\n\nfbshipit-source-id: f8d8a727d63e4e8b83391db454de990027f1bad4"}, {"url": "https://api.github.com/repos/facebook/folly/commits/337e3b8a157210eea33c88361b5e4c45a5efc462", "message": "Fix copyright lines for Bits.h and move BitsBenchmark.cpp\n\nSummary: [Folly] Fix copyright lines for `Bits.h` and move `BitsBenchmark.cpp`.\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D6648828\n\nfbshipit-source-id: 5eed558ac2d47a1497d64173bc84a4ca27d79764"}, {"url": "https://api.github.com/repos/facebook/folly/commits/454829ac74176c4caf834ebd2b5c8a941fdf9d7f", "message": "Fix some copyright lines in folly/\n\nSummary:\n[Folly] Fix some copyright lines in `folly/`.\n\n(Note: this ignores all push blocking failures!)\n\nReviewed By: Orvid\n\nDifferential Revision: D6648215\n\nfbshipit-source-id: 6fc446028ff79aa44116424e86ad454077717f8e"}, {"url": "https://api.github.com/repos/facebook/folly/commits/52a77c35cbee7a84392acb735dbd1ed34c655824", "message": "Fix some copyright lines in folly/lang/\n\nSummary:\n[Folly] Fix some copyright lines in `folly/lang/`.\n\n(Note: this ignores all push blocking failures!)\n\nReviewed By: Orvid\n\nDifferential Revision: D6648214\n\nfbshipit-source-id: fa2afdb8369252b74b914622ad39f7f27261d2c1"}, {"url": "https://api.github.com/repos/facebook/folly/commits/52dc008c3f191850cc1d0466e71459dad33e835f", "message": "Fix some copyright lines in folly/experimental/symbolizer/\n\nSummary:\n[Folly] Fix some copyright lines in `folly/experimental/symbolizer/`.\n\n(Note: this ignores all push blocking failures!)\n\nReviewed By: Orvid\n\nDifferential Revision: D6648183\n\nfbshipit-source-id: 36f9df5af91400a37dfa5ee2b209ffd47d5069df"}, {"url": "https://api.github.com/repos/facebook/folly/commits/b2ae6ce3b6fc237e85cc988ad4a47a8453250b88", "message": "constexpr_pow\n\nSummary:\n[Folly] `constexpr_pow`.\n\nThe power function. Initially, supports nonnegative integers only.\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D6646376\n\nfbshipit-source-id: 33a5a45f496b6f3be52d0cd7e3a5f2cd7edb3026"}, {"url": "https://api.github.com/repos/facebook/folly/commits/4753aa16c88d615936a0d9b035d18ed2b2c804bc", "message": "Give detail functions in ConstexprMath.h decorated names\n\nSummary:\n[Folly] Give detail functions in `ConstexprMath.h` decorated names.\n\nSo that other code also in `namespace folly::detail` which invokes the non-detail functions will result in ambiguity.\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D6646313\n\nfbshipit-source-id: 679e4cfe1c90f494acacef8b2a38a453db4d79d5"}, {"url": "https://api.github.com/repos/facebook/folly/commits/56d54ca2b245f0f102aeabdec4c20326cdf5abe6", "message": "Shift monotonic_coarse_clock into Chrono.h and rename it to coarse_steady_clock\n\nSummary: The rename is to bring it closer in line with the naming conventions in the standard library, and the move is because it doesn't make sense to have clocks defined in stop_watch.\n\nReviewed By: Orvid\n\nDifferential Revision: D6329551\n\nfbshipit-source-id: 09d9a48eb47b8fd3761a1bd4350d9ca748fe1f96"}, {"url": "https://api.github.com/repos/facebook/folly/commits/da2c859c9c8ce594b8760aae290503e2a33cef7f", "message": "Include synchronization/SaturatingSemaphore.h in the makefile\n\nSummary:\nIt was missing, so it wasn't being installed.\n\nFixes https://github.com/facebook/folly/issues/727\n\nReviewed By: Orvid\n\nDifferential Revision: D6642322\n\nfbshipit-source-id: 70c10e1265410f73b6c0cd759ce51a5176bfef83"}, {"url": "https://api.github.com/repos/facebook/folly/commits/651b5bd9595baf178193d598c3da9c3e981a46e9", "message": "Tweaks to folly::call_once and folly::once_flag\n\nSummary:\n[Folly] Tweaks to `folly::call_once` and `folly::once_flag`.\n\nIn particular:\n* Move the template class out of `detail`.\n* Add parameterization by the atomic type.\n* Expand the comments.\n\nReviewed By: Orvid\n\nDifferential Revision: D6637250\n\nfbshipit-source-id: 3806580ca0badf8464f637750c4873b2aba9f916"}, {"url": "https://api.github.com/repos/facebook/folly/commits/db0ea224863ae8ffe332b19b44526ad6ff045ea7", "message": "Namespacing and comments in folly/Likely.h\n\nSummary:\n[Folly] Namespacing and comments in `folly/Likely.h`.\n\nThis adds `FOLLY_LIKELY` and `FOLLY_UNLIKELY`.\n\nReviewed By: Orvid\n\nDifferential Revision: D6636136\n\nfbshipit-source-id: da93220201cabca91b4477ab98269a0febb735db"}, {"url": "https://api.github.com/repos/facebook/folly/commits/af28f1184cd85cebf83b4d473170535479c29928", "message": "Tweaks to AtomicStruct\n\nSummary: [Folly] Tweaks to `AtomicStruct`.\n\nReviewed By: Orvid\n\nDifferential Revision: D6636432\n\nfbshipit-source-id: 274c118a732287219c569d7d3f4e170f275518f1"}, {"url": "https://api.github.com/repos/facebook/folly/commits/d0956208d06806377b05e4daef5450603ce4ad63", "message": "Remove folly/detail/UncaughtExceptionCounter.h\n\nSummary:\n[Folly] Remove `folly/detail/UncaughtExceptionCounter.h`.\n\nIt's a thin and unnecessary shell around `folly/UncaughtExceptions.h`.\n\nReviewed By: Orvid\n\nDifferential Revision: D6636260\n\nfbshipit-source-id: cdf6fa5fefc9fd69586c1c4c1a8443c5e8543b1c"}, {"url": "https://api.github.com/repos/facebook/folly/commits/3b8919b3c4121090183b40cd3fbcdeb81bf47645", "message": "constexpr_log2_ceil\n\nSummary: [Folly] `constexpr_log2_ceil`, like `constexpr_log2` but rounding up.\n\nReviewed By: Orvid\n\nDifferential Revision: D6636433\n\nfbshipit-source-id: a10f031cc9c91cfeba7b74bbf143895a311ca772"}, {"url": "https://api.github.com/repos/facebook/folly/commits/e50d7df41cf5371584281bbf4208fd8c54bbf7f5", "message": "Move folly/detail/Sleeper.h to folly/synchronization/detail/\n\nSummary: [Folly] Move `folly/detail/Sleeper.h` to `folly/synchronization/detail/`.\n\nReviewed By: Orvid\n\nDifferential Revision: D6636459\n\nfbshipit-source-id: e0b37459fe721c96837b653e652c1bc6bfeb5dce"}, {"url": "https://api.github.com/repos/facebook/folly/commits/3764ca2b6e84a6a3614943b7df00646677dc1bea", "message": "Format digits10\n\nSummary: [Folly] Format `digits10`.\n\nReviewed By: Orvid\n\nDifferential Revision: D6636190\n\nfbshipit-source-id: 6e6b834f6c9070d58f8e2b085b09df8b857fe878"}, {"url": "https://api.github.com/repos/facebook/folly/commits/078d29f70bac3893084ae1183560a29c8afdb028", "message": "Move folly/AtomicStruct.h to folly/synchronization/\n\nSummary: [Folly] Move `folly/AtomicStruct.h` to `folly/synchronization/`.\n\nReviewed By: Orvid\n\nDifferential Revision: D6636072\n\nfbshipit-source-id: 87098e25fc40d0d60b4a657ba395418388e170fc"}, {"url": "https://api.github.com/repos/facebook/folly/commits/c2d5c9043cbf92da12a996be80a94ed57c96a9aa", "message": "Remove unused boost dep from Conv.h\n\nSummary: [Folly] Remove unused `boost` dep from `Conv.h`.\n\nReviewed By: Orvid\n\nDifferential Revision: D6636040\n\nfbshipit-source-id: 77dbfcf95f68c05346bce52d1a965e465c2efe3b"}, {"url": "https://api.github.com/repos/facebook/folly/commits/963dc51a8d63a91b2aaa179d9bc7f5d06c62d97d", "message": "Update homebrew script to use gtest 1.8.0\n\nSummary:\n[Folly] Update homebrew script to use gtest 1.8.0, to be consistent with the docs.\n\nCloses #722.\n\nReviewed By: Orvid\n\nDifferential Revision: D6633606\n\nfbshipit-source-id: 5e9a5790100fe7a408be7a9a77c847bece91d405"}, {"url": "https://api.github.com/repos/facebook/folly/commits/9fef1cd9f2684c7c86ec9f051a0042ab48c690fb", "message": "Move expensive Singleton code to .cpp\n\nSummary:\n[Folly] Move expensive `Singleton` code to `.cpp`.\n\nIncluding string manipulation, `ostream::operator<<` operations, `throw` statements, etc,\n\nReviewed By: ot\n\nDifferential Revision: D6632052\n\nfbshipit-source-id: 82e0033d5042b02951cf3b05c55cf62c97cc2b6d"}, {"url": "https://api.github.com/repos/facebook/folly/commits/e951fd70de9f2348962f2c512721d8eae89a77d2", "message": "Namespace portability symbols better in Singleton.cpp\n\nSummary: [Folly] Namespace portability symbols better in `Singleton.cpp`.\n\nReviewed By: Orvid\n\nDifferential Revision: D6631290\n\nfbshipit-source-id: eb802ace6a9bf704e011eb44710922c997a9cd8e"}, {"url": "https://api.github.com/repos/facebook/folly/commits/c98de6b2ecb4b4855fe6ce152329dc74eaae4710", "message": "Fix the assumption in the propagate_const test about local layout\n\nSummary: [Folly] Fix the assumption in the `propagate_const` test about local layout.\n\nReviewed By: aary\n\nDifferential Revision: D6624962\n\nfbshipit-source-id: 6871dc20f2b5ec2d1a86f520030c7cda8a225958"}, {"url": "https://api.github.com/repos/facebook/folly/commits/8091d7199edecafa678d009b82f04c36dd8ce9a7", "message": "Kill FOLLY_ALIGNED etc\n\nSummary:\n[Folly] Kill `FOLLY_ALIGNED` etc.\n\n`alignas` is standardized as of C++11. Let us just use that.\n\nReplace:\n* `FOLLY_ALIGNED` with `alignas`\n* `FOLLY_ALIGNED_MAX` with `alignas(folly::max_align_v)`\n* `FOLLY_ALIGN_TO_AVOID_FALSE_SHARING` with `alignas(folly::hardware_destructive_interference_size)`\n\nBecause where `alignas` may be placed is more restrictive than where attributes may be placed, we also need to move these directives in some cases on top of doing the replacement.\n\nReviewed By: Orvid\n\nDifferential Revision: D6555167\n\nfbshipit-source-id: 4b05b570bace3f8c0fe810b6dd58781dd45757f4"}, {"url": "https://api.github.com/repos/facebook/folly/commits/1166fe0e3deb1548ef173f8952fc8fd7225ee8fd", "message": "Fix Build: propagate_const under GCC\n\nSummary: [Folly] Fix Build: `propagate_const` under GCC.\n\nReviewed By: aary\n\nDifferential Revision: D6609722\n\nfbshipit-source-id: 47d8b0f2d54e0e5834383ea64c93af30927c921d"}, {"url": "https://api.github.com/repos/facebook/folly/commits/5ad17f0715288d08e0db580c90b7bf8716ddfd99", "message": "Add hardware_destructive_interference_size\n\nSummary:\n[Folly] Add `hardware_destructive_interference_size` and `hardware_constructive_interference_size` to `folly/lang/Align.h`.\n\nAs backports from C++17. Which may require keeping, depending on how stanard libraries choose to implement these.\n\nAnd replace `CacheLocality::kFalseSharingRange` with `hardware_destructive_interference_size`.\n\nReviewed By: ot\n\nDifferential Revision: D6554817\n\nfbshipit-source-id: bff49f5ca8b01d38fa806076f99201355df76cd9"}, {"url": "https://api.github.com/repos/facebook/folly/commits/d1ef992fcda7e916a82fd342226aa39c508c885f", "message": "propagate_const\n\nSummary: [Folly] `propagate_const`, backported from C++ Library Fundamentals TS v2.\n\nReviewed By: ericniebler\n\nDifferential Revision: D6589681\n\nfbshipit-source-id: cdc8981d17938b99afe60e2baefff7deb5316612"}, {"url": "https://api.github.com/repos/facebook/folly/commits/58399f25e774f06b3048eb7cde4302b917848d19", "message": "Switch the Baton template params\n\nSummary: [Folly] Switch the `Baton` template params for consistency with `SaturatingSemaphore`.\n\nReviewed By: davidtgoldblatt\n\nDifferential Revision: D6591060\n\nfbshipit-source-id: 44d6243d3185d95364a27e497216cc02fb3bc2e8"}, {"url": "https://api.github.com/repos/facebook/folly/commits/7fc3f9174951941df7a7a32acf320185716c26a6", "message": "Baton::ready, a const variant of try_wait\n\nSummary: [Folly] `Baton::ready`, a `const` variant of `try_wait`.\n\nReviewed By: djwatson\n\nDifferential Revision: D6508064\n\nfbshipit-source-id: ba458577574ba58165408a93238da7eb09adf1e6"}, {"url": "https://api.github.com/repos/facebook/folly/commits/ca3dd9ce41c991e36f34f86b018d73077f4a509c", "message": "Group the fields of UnboundedQueue\n\nSummary:\n[Folly] Group the fields of `UnboundedQueue`.\n\nInto helper structures which are organized by, and aligned by, access.\n\nThis is all compiled away and has no runtime cost.\n\nReviewed By: magedm\n\nDifferential Revision: D6555031\n\nfbshipit-source-id: 94424747bf76a0a9a2bd59b6a94749efb391d6a7"}, {"url": "https://api.github.com/repos/facebook/folly/commits/8b3a565d0077e92d94c49425850babc65ce1766d", "message": "Fix folly::max_align_v for Clang on ARMv7\n\nSummary:\n[Folly] Fix `folly::max_align_v` for Clang on ARMv7.\n\nThere is some problem with computing the correct result of `alignof` for a compound `union` POD type, because why wouldn't there be. The result *should* just be the max of the `alignof` of the type of each field if each field is default aligned - but not on some platforms! So we must compute the max directly.\n\nReviewed By: mzlee, Orvid\n\nDifferential Revision: D6573548\n\nfbshipit-source-id: 512a255fda64795104d71fde14372befa3bf41e4"}, {"url": "https://api.github.com/repos/facebook/folly/commits/6ae2206d4a23d683877e33919a469abfdfc411e5", "message": "Let Baton methods be noexcept\n\nSummary: [Folly] Let `Baton` methods be `noexcept`.\n\nReviewed By: djwatson\n\nDifferential Revision: D6508057\n\nfbshipit-source-id: 2138a228d8291e79e9368cb77b0f63f4412524dc"}, {"url": "https://api.github.com/repos/facebook/folly/commits/c5a4f4c8d0097e02c380967fc7a3a2b39bb78a53", "message": "Use explicit memory order in Baton::post\n\nSummary: [Folly] Use explicit memory order in `Baton::post`.\n\nReviewed By: djwatson\n\nDifferential Revision: D6502268\n\nfbshipit-source-id: a379ea711f165e3645ac2127a49824f46225b80a"}, {"url": "https://api.github.com/repos/facebook/folly/commits/82d8337f03e90168bba5b66f9383228863661e70", "message": "Fix AsyncSocketTest.WriteErrorCallbackBytesWritten\n\nSummary:\n[Folly] Fix `AsyncSocketTest.WriteErrorCallbackBytesWritten`.\n\nThanks to congestion, especially when the tests are run concurrently, the expectations in the test were too restrictive.\n\nIf only 20KB are read, it is possible that only 20KB are acknowledged. The expectation was that if 20KB are read and the recv buffer and send buffer are both 8KB and 24KB are written then all 24KB are acknowledged, but congestion control disagrees.\n\nIt is possible that any number of bytes are written to the send buffer, from 28KB up to 40KB. And we have to explicitly wait for 28KB to be written even to know that (otherwise we only know that 20KB are written).\n\nDifferential Revision: D6550804\n\nfbshipit-source-id: 100d086972c1526b909da0dbb6e609c144d7b17b"}, {"url": "https://api.github.com/repos/facebook/folly/commits/8fba851f4a8ec48fb3605e7f75f802bbdc2dcb4f", "message": "constexpr_ceil\n\nSummary: [Folly] `constexpr_ceil`, an integral rounding-up util.\n\nReviewed By: Orvid\n\nDifferential Revision: D6558042\n\nfbshipit-source-id: 6b42add9bf2e3605baf71391130c2a2c88cc4385"}, {"url": "https://api.github.com/repos/facebook/folly/commits/9b2b633c860eebda93c28ae387c50f1f81e29211", "message": "Move max_align_v and max_align_t to folly/lang/Align.h\n\nSummary:\n[Folly] Move `max_align_v` and `max_align_t` to `folly/lang/Align.h`.\n\nAnd drop the macro `FOLLY_ALIGNED_MAX` - just use `alignas(max_align_v)` instead.\n\nReviewed By: Orvid\n\nDifferential Revision: D6554677\n\nfbshipit-source-id: cacb335b141623506a41e95e0740613374279c6f"}, {"url": "https://api.github.com/repos/facebook/folly/commits/0a1444e778c15825978bf917f087367406cfd6f9", "message": "Remove unused #include <string.h> from folly/Portability.h\n\nSummary: [Folly] Remove unused `#include <string.h>` from `folly/Portability.h`.\n\nReviewed By: Orvid\n\nDifferential Revision: D6557374\n\nfbshipit-source-id: 369ef0b622dc057e882ed0f4ad25b47fa3f05100"}, {"url": "https://api.github.com/repos/facebook/folly/commits/a674aa6cee470969ddecd340154002cf1d3efc1c", "message": "Switch to the try_wait_for and try_wait_until Baton APIs\n\nSummary: Switch to the `try_wait_for` and `try_wait_until` `Baton` APIs.\n\nReviewed By: davidtgoldblatt\n\nDifferential Revision: D6532103\n\nfbshipit-source-id: aa3ce64152d167bb9c9cb1f266be0f9f8bd498f5"}, {"url": "https://api.github.com/repos/facebook/folly/commits/c01c18b26eded07d11079a77d3df36a57fd4bf16", "message": "Assorted tweaks to folly/String.h\n\nSummary:\n[Folly] Assorted tweaks to `folly/String.h`.\n\n* Use `void_t` in the definition of `IsConvertible`.\n* Remove `AllConvertible`. Callers can use `StrictConjunction` instead.\n* Move the `static_assert`s from the header to the source file.\n\nReviewed By: andrewjcg, ot\n\nDifferential Revision: D6501515\n\nfbshipit-source-id: 472ecf23bf7f06be211480b0aceea95f7e60dc21"}, {"url": "https://api.github.com/repos/facebook/folly/commits/a279ea6be94882796226128e48da4b431e80ab17", "message": "folly::fibers::Baton API consistency with folly::Baton\n\nSummary:\n[Folly] `folly::fibers::Baton` API consistency with `folly::Baton`.\n\nSpecifically, the suite of `wait`, `try_wait`, `try_wait_for`, and `try_wait_until` members and member templates.\n\nHold onto the `timed_wait` members for now, but mark them deprecated.\n\nAdditionally, for consistency, offer main-context function params consistently for all `try_wait_for`, `try_wait_until`, and both variants of `timed_wait`.\n\nReviewed By: andriigrynenko\n\nDifferential Revision: D6531145\n\nfbshipit-source-id: 960fba48716b12b0ef53262786eacab88d8b2375"}, {"url": "https://api.github.com/repos/facebook/folly/commits/712b8b8de747960ceeceedfd3a18ee23a0c03a80", "message": "Remove multi-poster support from Baton\n\nSummary:\n[Folly] Remove multi-poster support from `Baton`.\n\nCode which needs multi-poster support may use `SaturatingSemaphore` instead.\n\nReviewed By: magedm\n\nDifferential Revision: D6529661\n\nfbshipit-source-id: d9dc053ca984ef3a404e9361910b0044817d4905"}, {"url": "https://api.github.com/repos/facebook/folly/commits/015306906e2811cc0cf3dab0c4142d45434a2801", "message": "Fix signed integer overflow in StaticTracepointTest.cpp\n\nSummary:\n[Folly] Fix signed integer overflow in `StaticTracepointTest.cpp`.\n\nIt is undefined behavior and is caught by UBSAN in some test runs.\n\nReviewed By: Orvid\n\nDifferential Revision: D6528445\n\nfbshipit-source-id: e4a199e9005b57bcd93c8c4b69f37ccb1e072bdf"}, {"url": "https://api.github.com/repos/facebook/folly/commits/bca34971c398bb8f5f258dba57206068bfd29937", "message": "Split Baton wait methods into fast and slow paths\n\nSummary:\n[Folly] Split `Baton` wait methods into fast and slow paths.\n\nForce-inline the fast paths, and force-outline the slow paths.\n\nReviewed By: magedm\n\nDifferential Revision: D6501992\n\nfbshipit-source-id: 611e26b3cfeef01eb8d3a3500ae3ebc26bee6e86"}, {"url": "https://api.github.com/repos/facebook/folly/commits/2d3c33462242cada87a857143101cd99cd94b8f8", "message": "Fix UBSAN failure in RangeTest.cpp with libstdc++-v4.9\n\nSummary:\n[Folly] Fix UBSAN failure in `RangeTest.cpp` with `libstdc++-v4.9`.\n\nThe implementation of `std::array` in `libstdc++-v4.9` has undefined behavior in the case of the zero-length array - dereferencing (but immediately taking the address again) of `nullptr`. This is fixed in `libstdc++-v5`.\n\nReviewed By: ot\n\nDifferential Revision: D6528614\n\nfbshipit-source-id: 26be6bdc28d9e6dc6e6293a4d4ecffd769c01413"}, {"url": "https://api.github.com/repos/facebook/folly/commits/b92bbedce7866bf3760863604e1af1e8e42db24a", "message": "replace std::dequeue with UMPMCQueue in UnboundedBlockingQueue\n\nSummary: As above. Thanks magedm for giving us this beautiful piece of equipment!\n\nReviewed By: magedm\n\nDifferential Revision: D6488661\n\nfbshipit-source-id: 95aa9646ca1ea937bb1d055e9baa037896c3161e"}, {"url": "https://api.github.com/repos/facebook/folly/commits/35054c8b8eefa0abaded33ff4150d195c9bf0e80", "message": "Move folly/Bits.h to folly/lang/\n\nSummary: [Folly] Move `folly/Bits.h` to `folly/lang/`.\n\nReviewed By: phoad, Orvid\n\nDifferential Revision: D6495547\n\nfbshipit-source-id: a93159321df8277f8a4b4f10a5e4e0fc58cb6022"}, {"url": "https://api.github.com/repos/facebook/folly/commits/39018ad5c77c53156cb7cd672c05a19fb75a6af7", "message": "Fix crash in exception_wrapper::get_exception<>\n\nSummary:\n[Folly] Fix crash in `exception_wrapper::get_exception<>`.\n\nWhen the contained object is unthrown and does not inherit `std::exception`, `get_exception` templated over a type that does not inherit `std::exception` must throw and catch internally and may then return a pointer to the internally thrown object, which has since been deallocated.\n\nAttempting to dereference that pointer is undefined behavior is correctly caught by ASAN as heap-use-after-free.\n\nFix it by storing objects not inheriting `std::exception` using only the `std::exception_ptr` representation.\n\nAs a downside, we no longer get the small-object optimization or the non-throwing optimization for objects which do not inherit `std::exception`. But this is not likely to be terribly concerning in practice.\n\nReviewed By: ericniebler\n\nDifferential Revision: D6504911\n\nfbshipit-source-id: 0065de911733b5cab87be55e7e4e47f0a9c09140"}, {"url": "https://api.github.com/repos/facebook/folly/commits/a335700fba3a818043d53de320711dc97b680894", "message": "Use simpler tags for ctor dispatch in exception_wrapper\n\nSummary:\n[Folly] Use simpler tags for ctor dispatch in `exception_wrapper`.\n\nThe tags do not need to be `std::integral_constant`, but can just be arbitrary empty types.\n\nAlso format the usage sites of the tags.\n\nReviewed By: ericniebler\n\nDifferential Revision: D6506417\n\nfbshipit-source-id: 377359086d94fc1a8bf8eebf6f8b058ff544829f"}, {"url": "https://api.github.com/repos/facebook/folly/commits/cc9ce0e1e7d84db3ccb553cc8c75e179459ef42f", "message": "Rename Baton::timed_wait to try_wait_for and try_wait_until\n\nSummary:\n[Folly] Rename `Baton::timed_wait` to `try_wait_for` and `try_wait_until`.\n\nFor consistency with `std::timed_mutex`'s suite of `lock` member functions, as well as `SaturatingSemaphore` and others.\n\nReviewed By: davidtgoldblatt\n\nDifferential Revision: D6493714\n\nfbshipit-source-id: 566c6d5dc0f6db4a0308cbd1972d53794f898383"}, {"url": "https://api.github.com/repos/facebook/folly/commits/b3dc093ef094d6d97c10755e60392124828c5103", "message": "Move folly/Baton.h to folly/synchronization/\n\nSummary: [Folly] Move `folly/Baton.h` to `folly/synchronization/`.\n\nReviewed By: phoad, Orvid\n\nDifferential Revision: D6490282\n\nfbshipit-source-id: 66e2d25ffe3275d576b97b81c1987709000f6649"}, {"url": "https://api.github.com/repos/facebook/folly/commits/af89b48f87cb786cccd8b96fa07bf68307bc0e95", "message": "Use boost::filesystem::current_path in ChangeToTempDir\n\nSummary:\n[Folly] Use `boost::filesystem::current_path` in `ChangeToTempDir`.\n\nIt will report failures noisily.\n\nReviewed By: pixelb\n\nDifferential Revision: D6493243\n\nfbshipit-source-id: 423dc0e3a46781e9af42fee69060d31085f1a7c6"}, {"url": "https://api.github.com/repos/facebook/folly/commits/6786799608b6ef203db9d7e880b99d0bc7330ede", "message": "Add missing check against SemiFuture in FutureBase ctor\n\nSummary: [Folly] Add missing check against `SemiFuture` in `FutureBase` ctor.\n\nReviewed By: LeeHowes\n\nDifferential Revision: D6469021\n\nfbshipit-source-id: 0ca31461afee4bf64725e065a8cb4d5e933d2013"}, {"url": "https://api.github.com/repos/facebook/folly/commits/48d3f5e1691033d00ecc2ef0c3ced83ce148705a", "message": "Let SaturatingSemaphore::try_wait be non-const and add ready\n\nSummary:\n[Folly] Let `SaturatingSemaphore::try_wait` be non-`const` and add `ready`.\n\nFor internal API consistency.\n\nReviewed By: magedm\n\nDifferential Revision: D6450089\n\nfbshipit-source-id: 65b9b723672521710a69719b192eb2922a27b778"}, {"url": "https://api.github.com/repos/facebook/folly/commits/96ac8f8ff0c9bc9446eede119fdfee0fe7feaba3", "message": "Some fixes for custom conversions of enums\n\nSummary:\n[Folly] Some fixes for custom conversions of enums.\n\nOf note, `to` was defined for enum -> all conversions, including enum -> string conversions, but we actually want enum -> string conversions to be done via ADL-discovered toAppend.\n\nReviewed By: ot\n\nDifferential Revision: D6411250\n\nfbshipit-source-id: 852b64309e6adf1c68e5153635cb29632e2d86d4"}, {"url": "https://api.github.com/repos/facebook/folly/commits/73c52b9f7d7dc1db75838b33064a4f7e4a5b2e51", "message": "Synchronize coupled caches in folly::threadlocal_detail::StaticMeta\n\nSummary:\n[Folly] Synchronize coupled caches in `folly::threadlocal_detail::StaticMeta`.\n\nThe caches should be set together, and only together, because they are coupled. This prevents bugs where one function that sets one cache but not the other cache is inlined into the caller in one module, and another function that reads both caches is inlined into the caller in another module.\n\nReviewed By: djwatson\n\nDifferential Revision: D6435175\n\nfbshipit-source-id: 846c4972b40e525f2c04da6e6609c2ad54f674c0"}, {"url": "https://api.github.com/repos/facebook/folly/commits/327ee770028d0e28e51958eb0c635342407b6b06", "message": "Remove some custom test main()'s in folly/experimental/symbolizer/\n\nSummary:\n[Folly] Remove some custom test `main()`'s in `folly/experimental/symbolizer/`.\n\nIn one of the two cases, we need to do some extra work to give `ElfFile` knowledge of the program path.\n\nReviewed By: ot, Orvid, philippv, luciang\n\nDifferential Revision: D6420517\n\nfbshipit-source-id: 11c694a8342abb6fff05c368f3cda2e6287ccb4b"}, {"url": "https://api.github.com/repos/facebook/folly/commits/c45f2aa595428c80bbd34b70925c236f83dc6231", "message": "QueuedImmediateExecutor tweaks\n\nSummary:\n[Folly] `QueuedImmediateExecutor` tweaks.\n\n* Add a leaky meyers singleton instance.\n* Make the thread-local queue an instance variable. Callers which want the singleton thread-local queue can use the singleton executor instance instance, for the same effect.\n* Simplify the body of `add`, and perform the thread-local lookup only once per invocation.\n\nReviewed By: djwatson\n\nDifferential Revision: D6399067\n\nfbshipit-source-id: 03904885a70c4b943141bd83868414d27232fd6a"}, {"url": "https://api.github.com/repos/facebook/folly/commits/3c9a6e9a15092db11c543c8bae51957b176fcedd", "message": "No need for a wrapping structure for posixTimeToDuration\n\nSummary:\n[Folly] No need for a wrapping structure for `posixTimeToDuration`.\n\nWe can just use a variant of tag dispatch. In this variant, we pass to `posixTimeToDuration` a default-initialized value of the desired return type and we write overload templates for each possible variant. The argument is used purely for overload resolution and return type deduction, not for its runtime value. It is slightly different from tag dispatch because we do not use separate types which are purely tag types.\n\nReviewed By: simpkins\n\nDifferential Revision: D6371572\n\nfbshipit-source-id: 1987dee31fceec8733caa61495e96489dbf1ca39"}, {"url": "https://api.github.com/repos/facebook/folly/commits/76cae471730faf4fcdaa4b3a6df35727910932f7", "message": "Fix wrong source name in tests Makefile\n\nSummary:\n[Folly] Fix wrong source name in tests `Makefile.am`.\n\nCloses #714.\n\nReviewed By: Orvid\n\nDifferential Revision: D6340209\n\nfbshipit-source-id: 88da57fb4d663071eb578efec50c7e162b0c03d1"}, {"url": "https://api.github.com/repos/facebook/folly/commits/5008d56a42c87a4027bbe94a9afb7b2ddc0d9075", "message": "Extra expectations for ADL toAppend\n\nSummary: [Folly] Extra expectations for ADL `toAppend`.\n\nReviewed By: Orvid\n\nDifferential Revision: D6330547\n\nfbshipit-source-id: d1363280f097f860883ba84d6cfe7caa4e4cf9de"}, {"url": "https://api.github.com/repos/facebook/folly/commits/5b125edc4a4765eeb8a230122673ed5f963d3db9", "message": "Fix some declared tests not being included in Makefile TESTS list\n\nSummary: [Folly] Fix some declared tests not being included in `Makefile` `TESTS` list.\n\nReviewed By: pixelb\n\nDifferential Revision: D6307755\n\nfbshipit-source-id: 8853d8fce25768ff17f9b1e53b1fbba0aa213691"}, {"url": "https://api.github.com/repos/facebook/folly/commits/0f14503ec3cee25f5425588c83347794c9afb429", "message": "Backport C++17 container access functions: size, empty, data\n\nSummary: [Folly] Backport C++17 container access functions: `size`, `empty`, `data`.\n\nReviewed By: Orvid\n\nDifferential Revision: D6301986\n\nfbshipit-source-id: 65c31df68b7743d5ed4a2cf2419586b862683c48"}, {"url": "https://api.github.com/repos/facebook/folly/commits/98c488e23b44105d0e1a5b1d5cd7dea10b5843d5", "message": "Add makeSemiFuture declarations to helpers.h\n\nSummary:\n[Folly] Add `makeSemiFuture` declarations to `helpers.h`.\n\nFor consistency with the `makeFuture` declarations that are also there. Definitions for both are found in `Future-inl.h`.\n\nReviewed By: LeeHowes\n\nDifferential Revision: D6281826\n\nfbshipit-source-id: 4b22dd9086d05dbdebba358c6f569a772017949a"}, {"url": "https://api.github.com/repos/facebook/folly/commits/67811c1b1209adff20d3bb40fa82039101e0ae9a", "message": "Fix folly/test/Makefile.am\n\nSummary:\n[Folly] Fix `folly/test/Makefile.am`.\n\nCloses #709.\n\nReviewed By: meyering\n\nDifferential Revision: D6282009\n\nfbshipit-source-id: 0f2a992e92d4b94a535f29341920c9f2959819d7"}, {"url": "https://api.github.com/repos/facebook/folly/commits/3066914f085865bc104192f3431315be6ea9012a", "message": "In SemiFuture members, fix DCHECK of pointer types\n\nSummary:\n[Folly] In `SemiFuture` members, fix `DCHECK` of pointer types.\n\nUse `nullptr !=` to avoid ` error: ISO C++ forbids comparison between pointer and integer`.\n\nCloses #708.\n\nReviewed By: Orvid\n\nDifferential Revision: D6277832\n\nfbshipit-source-id: 8f65065d5347c6ac407b99cb780c38935e901362"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/12552372", "body": "@Orvid - Can you please check this against MSVC and let me know if this helps?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/12552372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/12577338", "body": "Thank you!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/12577338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/15941116", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/15941116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/20376019", "body": "Yep, in #536.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/20376019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/23130502", "body": "Should be fixed with f0dfe0f699c68867eccde9dda9fe1617ef31303e.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/23130502/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/24040629", "body": "Wow, thanks!", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/24040629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/26954179", "body": "\ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/26954179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35941055", "body": "Is this behavior of `CryptAcquireContext` specified or documented somewhere?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35941055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/72876827", "body": "Not `cstdlib`?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/72876827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/72877015", "body": "Ah, so that we can implicitly convert to `complex<intptr_t>`.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/72877015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/72865343", "body": "Other compilers don't know about this pragma. \n\nhttps://github.com/facebook/folly/blob/v2016.07.29.00/folly/Portability.h#L136-L159\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/72865343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/72865411", "body": "If you are trying to build without VLAs, what about unsetting `FOLLY_HAVE_VLA` instead?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/72865411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/73795049", "body": "Folly code uses the subset of C++14 that is supported by GCC 4.8.\n\nThis particular case can be tweaked to build with C++11 by adding a return type before the opening brace, using either `decltype` or `std::result_of`. Both would work.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/73795049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/94262568", "body": "It is undefined behavior to use `defined` in the definition of a preprocessor symbol.\r\n\r\nThis form is, if less elegant, at least defined behavior:\r\n\r\n```\r\n#if defined(OPENSSL_IS_BORINGSSL) || \\\r\n    (OPENSSL_VERSION_NUMBER >= 0x1000200fL && \\\r\n     !defined(OPENSSL_NO_TLSEXT))\r\n#define FOLLY_OPENSSL_HAS_ALPN 1\r\n#else\r\n#define FOLLY_OPENSSL_HAS_ALPN 0\r\n#endif\r\n```\r\n\r\nSame for `FOLLY_OPENSSL_HAS_SNI` below.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/94262568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/94262771", "body": "This is causing build failures. Looks like this is only in BoringSSL. Needs a guard.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/94262771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105751744", "body": "Mind splitting this out into a separate PR?", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105751744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/106711203", "body": "This looks like falsely-passing tests. It would be better if these tests were never run. This can be accomplished by computing the list of codec types to instantiate test cases for. I think you can use a `vector` returned from some computation as an argument to `INSTANTIATE_TEST_CASE_P`.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/106711203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/106711396", "body": "Why is this file different from `folly/test/.gitignore`?", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/106711396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/107273998", "body": "Remove `static` here - otherwise this will be incorrect if called twice.\r\n\r\nAlternatively, fix the function to memoize the result while being safe to call twice, but that is a bit more work and not necessary in unit-tests.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/107273998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/107275320", "body": "`reserve` and `shrink_to_fit` may be useful for efficiency in production code, but these are unit-tests. Likewise for `supportedCodecs`.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/107275320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/108001872", "body": "Since this is an example of hazard pointers, not an example of optimal API design for avoiding accidental copies, this is fine.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/108001872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/113591911", "body": ":+1:", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/113591911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/123568454", "body": "Only this one is a real typo. All of the others appear to be artifacts of the chosen horizontal ruler, which the changes then violate.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/123568454/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/128877578", "body": "Style nit. Please leave two groups of includes as before, separated by a blank line. This added include should be in the first group.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/128877578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129435967", "body": "Style nit: `typename... Ts` v.s. `typename ...Ts`. We would like Folly to be `clang-format`-clean.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129435967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129436125", "body": "Add `StrictDisjunction`, which should probably exist anyway, and then have `IsOneOf` be defined in terms of that?", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129436125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129439860", "body": "Ah! Right.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129439860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129441074", "body": "It would still be cleaner to define `IsOneOf` here in terms of `StrictDisjunction`, rather than using double-`Negative` here.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129441074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129724670", "body": "@ericniebler - Which of these should be aliases, if any?", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129724670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129727798", "body": "I'm not seeing that? https://godbolt.org/g/enCFGG", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129727798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129727995", "body": "Asking @ericniebler because this could affect other code in folly which he knows about which actually depends on the current deferred evaluation semantics of `StrictConjunction`.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129727995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/133128567", "body": "Make it more \"correct\" by moving `#if FOLLY_SSE_PREREQ(4, 2)` above to before the `namespace ... {` lines? And then correspondingly move the `#endif`, `#else`, etc.?", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/133128567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/134882976", "body": "This bit is not actually correct - the repo may be cloned to any place, not only to a directory named `folly`.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/134882976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/141379149", "body": "This is fine - thanks for checking.\r\n\r\nNote that this forces the two arguments to have the same type, rather than allowing both arguments to be cast implicitly to a third type.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/141379149/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "simpkins": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/f3585b2209c2a7e5a471c13efb4a58debd963842", "message": "remove unused include in Demangle.cpp\n\nSummary: folly/memory/Malloc.h was included but not needed.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6757598\n\nfbshipit-source-id: 241b939724b21a94739e14335ddfaadfcd00dda3"}, {"url": "https://api.github.com/repos/facebook/folly/commits/0eca7c9ffdf87a8a5a11858879b2f726ef9cb64a", "message": "cmake: remove the check preventing cmake on non-Windows platforms\n\nSummary:\nI believe the CMake build scripts have a similar level of functionality to the\nautoconf-based build scripts even on Linux these days.  This lets users use\nCMake on Linux and Mac, rather than directing them to autoconf instead.\n\nReviewed By: meyering\n\nDifferential Revision: D6745366\n\nfbshipit-source-id: 0361eecead55ee06269192eee8d2e7286eb182b8"}, {"url": "https://api.github.com/repos/facebook/folly/commits/2e5089d514ad890d04d9243c14db91a7c4814583", "message": "cmake: mark the compression tests as slow\n\nSummary:\nThe compression test code has a large number of parameterized tests that run\nwith a large number of parameter combinations.  These tests take many minutes\nto run.\n\nReviewed By: meyering\n\nDifferential Revision: D6745364\n\nfbshipit-source-id: dac5d5eb4a786da7be453742fac5f92a9740e468"}, {"url": "https://api.github.com/repos/facebook/folly/commits/5a4772681d6b4f86b4b92ff90a4ecc464134ddae", "message": "cmake: enable running the tests\n\nSummary:\nCMake 3.9+ includes built-in support for gtest.  This updates the CMake build\nscripts to make use of this if the GoogleTest module is available.\n\nReviewed By: meyering\n\nDifferential Revision: D6745369\n\nfbshipit-source-id: 1ef978874b9a0ef2cc5f48ab1c7a0b55d0f1155e"}, {"url": "https://api.github.com/repos/facebook/folly/commits/b50a3dd838801676f9f5a3d5f0b9a094a8175d72", "message": "cmake: build as many source files as possible\n\nSummary:\nThe CMakeLists.txt file finds the sources and headers for the main folly\nlibrary by finding all *.cpp and *.h files, and then excluding specific ones.\n\nThe CMakeLists.txt file was originally written for Windows builds, and it was\nhard-coded to exclude a number of files that do not build on Windows.   This\nupdates the file to properly check for the dependencies, and build these files\nif their required third-party dependencies are available.\n\nReviewed By: meyering\n\nDifferential Revision: D6745368\n\nfbshipit-source-id: 3ee04d54147a68c482aab50d30bc9fe2a4134eef"}, {"url": "https://api.github.com/repos/facebook/folly/commits/3e00e4620a8b42641147336cbffdb098850e0cf4", "message": "cmake: add more checks for folly-config.h generation\n\nSummary:\nUpdate the CMake build files to perform additional checks to set configuration\nmacros in folly-config.h\n\nI believe this should largely bring the CMake build on-par with (or even better\nthan) the autoconf build scripts.  I believe that the CMake build scripts now\nperform all of the checks necessary to set macros in folly-config.h correctly.\n\nThe autoconf-based configure script also appears to have a number of bugs:\nin several places it accidentally uses different macro names than the ones\nchecked in the source code.  Some of it's checks are also broken, and fail to\ndetect features correctly due to compilation errors in the check.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6735699\n\nfbshipit-source-id: 5ce48f1deddd63c9d52fcccd5d5ccf6ca35e9a0d"}, {"url": "https://api.github.com/repos/facebook/folly/commits/b0ab09d8df51de1c7040b78742617ef6466b002a", "message": "demangle: remove an old TODO comment\n\nSummary:\nBoth the autoconf and cmake build scripts check for\n`cplus_demangle_v3_callback()` and define\n`FOLLY_HAVE_CPLUS_DEMANGLE_V3_CALLBACK` appropriately.\n\nReviewed By: meyering\n\nDifferential Revision: D6745365\n\nfbshipit-source-id: 3020593c60a21568781b835490b8d64913366cb9"}, {"url": "https://api.github.com/repos/facebook/folly/commits/e96129da65d3ad2b20aae5a2bf2d22d2d72b8feb", "message": "cmake: fix the test builds\n\nSummary:\n- Fix the locations of some tests that have been moved.\n- Remove some tests that have been deleted.\n- Comment out some tests that depend on parts of folly that are not currently\n  built by the CMake build scripts.\n- Fix a build error in CompressionTest.cpp if FOLLY_HAVE_LIBZ is not defined.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6735700\n\nfbshipit-source-id: 89f60751fa7079b2c609d23d85fbed2a0f317b55"}, {"url": "https://api.github.com/repos/facebook/folly/commits/6c511999f92066ed84778bca4491c8d139a3195d", "message": "fix a multiline comment warning\n\nSummary:\nDeterministicScheduleTest.cpp contained several single-line C++ comments that\nended in a trailing backslash.  This makes the preprocessor treat the following\nline as a comment as well, even if it does not start with `//`.  Newer versions\nof gcc emit warnings about this.\n\nThis changes the comment in DeterministicScheduleTest.cpp to use `/* */` to\navoid this issue.\n\nReviewed By: siyengar\n\nDifferential Revision: D6735672\n\nfbshipit-source-id: 162c735507a643ce0dbee58f1f054865237e1eba"}, {"url": "https://api.github.com/repos/facebook/folly/commits/bdd9360c598d80d524de6780cd5be65af56d98fd", "message": "fix some bugs in AsyncSSLSocketTest\n\nSummary:\nA couple of the test functions in AsyncSSLSocketTest maintained two EventBase\nobjects and alternated looping between them.  In some cases it would call\nEventBase::loopOnce() even when there was no work to do.  This call normally\nblocks until an event is ready.  This happened to work when using libevent1,\nbut this appears mostly accidental: with libevent1 EVLOOP_ONCE causes the loop\nto break out even after an \"internal\" I/O event; in libevent2 EVLOOP_ONCE only\nbreaks out after a non-internal event has occurred:\nhttps://github.com/libevent/libevent/commit/0617a818204397790e5e4c9bcb9e91ae5ea7817a\n\nIn these tests it turns out that the internal EventBase NotificationQueue\nalways gets triggered the very first time loopOnce() is called, preventing\nthese tests from hanging when using libevent1.\n\nThis fixes the hang when using libevent2 by removing the initial loopOnce()\ncalls that potentially have nothing to do.  This also consolidates the 2\nEventBase objects into one to avoid having to alternate loopOnce() calls\nbetween them without knowing which one actually has work to do.\n\nThis also fixes an issue where the code never checked the return value of\n`recv()`\n\nReviewed By: yfeldblum, siyengar\n\nDifferential Revision: D6735669\n\nfbshipit-source-id: 5f36106a08866aa8908e82263f83a606399cdf79"}, {"url": "https://api.github.com/repos/facebook/folly/commits/7da4ef82aee382777bb50aadd4af14a482739d10", "message": "suppress warnings in tests for deprecated functions\n\nSummary:\nUpdate ShellTest and PromiseTest to suppress warnings about using deprecated\nfunctions in the tests for those functions.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6735670\n\nfbshipit-source-id: 89edcb49d1eff3132398aaef88f5a5cae82e3557"}, {"url": "https://api.github.com/repos/facebook/folly/commits/19db503e08e4ea46a8b4d9a272605006b6245f88", "message": "cmake: fix path to FindGLog.cmake\n\nSummary:\nThe cmake files refer to this package as \"FindGLog\", but the file name on disk\nincorrectly had the 'L' lower cased.  This worked on case-insensitive file\nsystems, but caused cmake to fail when used on a case-sensitive file system.\n\nThis diff fixes the file name to match the name used in the cmake files.  This\nis also more consistent with the existing \"FindGFlags\" and \"FindGMock\"\npackages.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6710439\n\nfbshipit-source-id: 19f6824ef6793e505b5a0080c0fefe0b145a41c3"}, {"url": "https://api.github.com/repos/facebook/folly/commits/337e897a2510b8f1291c6be95b3eb18f0c80cb68", "message": "cmake: remove DOS-style line endings\n\nSummary:\nA number of the files in CMake/ had inconsistent line-endings.  This updates\nfiles using DOS-style CRLF line endings to just use CR instead.  On Windows,\ngit is capable of automatically changing CR to CRLF when checking out the\nrepository working directory.\n\nReviewed By: meyering\n\nDifferential Revision: D6714717\n\nfbshipit-source-id: 82adccf4e522d38fd1cb420869f62e52dbd6c5f1"}, {"url": "https://api.github.com/repos/facebook/folly/commits/b22d1721ed9c062e22b33936e13b39ed1507391a", "message": "cmake: add checks to generate folly-config.h correctly\n\nSummary:\nAdd proper checks to detect and set the values in folly-config.h correctly.\nPreviously the code simply hard-coded values that were appropriate for Windows.\n\nThis does not yet define all of the settings produced by the autoconf build,\nbut it lets the CMake-based build largely succeed on Linux systems.\n\nReviewed By: meyering\n\nDifferential Revision: D6710437\n\nfbshipit-source-id: 80490080ee6322995b740ac2a15181d220c6874a"}, {"url": "https://api.github.com/repos/facebook/folly/commits/03957924ccf4e32d0fbc4dc3198da3249f57b890", "message": "cmake: set compiler flags for non-Windows platforms\n\nSummary:\nUpdate CMakeLists.txt to check the current platform, and to set compiler flags\ncorrectly.  It now uses flags for Microsoft Visual Studio on Windows, and flags\nfor gcc or clang on all other platforms.  Previously it unconditionally used\nMSVC flags.\n\nReviewed By: meyering\n\nDifferential Revision: D6710435\n\nfbshipit-source-id: dbae3097bcadf1ee4a25879dd7770603387c0e4d"}, {"url": "https://api.github.com/repos/facebook/folly/commits/3d9eb7ffc32c2f5f878bb4aee61d30cb8c62a146", "message": "cmake: support using a separate build directory\n\nSummary:\nFix rules in the CMakeLists.txt file that generate source files to first create\ntheir output directory if necessary.  This allows the build to succeed when\nbuilding with a separate build output directory, rather than placing build\nartifacts in the source tree itself.\n\nReviewed By: meyering\n\nDifferential Revision: D6710436\n\nfbshipit-source-id: 786a65a37a70833e7e4a5affe4df292626dbb591"}, {"url": "https://api.github.com/repos/facebook/folly/commits/ab21322d7285494f5c4609b3b549fe707a1c54e7", "message": "cmake: fix error message on non-Windows platform\n\nSummary:\nBuilding folly with cmake is only supported on Windows for now.  This fixes\ncmake on non-Windows platforms to fail with a helpful message telling people to\nuse autoconf.  This message was in place before, but was after an MSVC version\ncheck preventing it from appearing.\n\nReviewed By: meyering\n\nDifferential Revision: D6707328\n\nfbshipit-source-id: a28a07ab0da41d605b11d93bba40f33520c5f57e"}, {"url": "https://api.github.com/repos/facebook/folly/commits/79a92dfdb43fefd774ea8f51bd6b9a2b9d0ce137", "message": "logging: fix build error when using gcc with -Wmissing-braces\n\nSummary:\nSince std::array is actually a struct containing an array it technically\nrequires double braces around its initializer.  The language allows eliding\nthese braces, and clang doesn't complain about only using a single brace, but\ngcc does when using `-Wmissing-braces`.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6695289\n\nfbshipit-source-id: 913fcfbea4164a02d001bd2344e340c0b6ee62aa"}, {"url": "https://api.github.com/repos/facebook/folly/commits/d056738b3ff6750deb9f7184e35ba284d0a27042", "message": "logging: include file name suffixes in XLOG() category names\n\nSummary:\nUpdate `getXlogCategoryNameForFile()` to keep the file name suffix (e.g., `.h`\nor `.cpp`) in the category name.  Previously the code had stripped this out.\nHowever it seems worth leaving it in:\n- This makes it possible to independently control log levels for messages from\n  the header file vs the cpp file.\n- This makes the category name logic slightly easier to explain to users.\n\nThe documents I added in D6525997 already describe this new category name\nselection behavior.  This change updates the code to match the documented\nbehavior.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6690464\n\nfbshipit-source-id: 9af6b549d084bd900f788a08e9213e82579b664a"}, {"url": "https://api.github.com/repos/facebook/folly/commits/59f59178ba38bc793f809d21fc532e160ae5e34b", "message": "logging: add numbered INFO* log level values\n\nSummary:\nDefine INFO0 through INFO9 levels for users that want to have finer-grained\ncontrol over info log messages.\n\nThis also renumbers the DBG log levels slightly so that there are exactly 1000\nlevels between each major log level step.  This renumbering change should not\naffect any code behavior, since these level values are primarily used in memory\nand aren't saved persistently anywhere.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6690466\n\nfbshipit-source-id: acd499cff6830a1d1b579f295bd4b2bac93b5ada"}, {"url": "https://api.github.com/repos/facebook/folly/commits/24d6b776bc7f5608d7e553f361eb79f2dcf6d7f7", "message": "logging: rename the `DEBUG` log level to `DBG`\n\nSummary:\nI ran into some open source projects that define `DEBUG` as a preprocessor\nmacro on the compiler command line.  (They effectively defined it as the\nopposite of `NDEBUG`.)  Doing some Google searches revealed that there are a\nnumber of projects that appear to use this as a macro.\n\nTherefore this diff renames the `DEBUG` log level enum value to `DBG` to avoid\npotentially conflicting with projects that do use `DEBUG` as a macro name.\n\nI did keep the behavior that `logLevelToString()` returns \"DEBUG\" for an input\nof `LogLevel::DBG`.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6690465\n\nfbshipit-source-id: 35bb1698afb45eb670e60c192f21390cbf09331d"}, {"url": "https://api.github.com/repos/facebook/folly/commits/6283c759b82a2a5764ef77c025aee1d40a77a839", "message": "logging: minor clean up in Logger.h\n\nSummary:\nUpdate the comment describing the Logger class, and remove a `clang-format off`\nsince recent versions of `clang-format` appear to do a good job formatting this\nmacro.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6525996\n\nfbshipit-source-id: 6abbb3740afb53feb2418ca890cd78af1eb5f7a2"}, {"url": "https://api.github.com/repos/facebook/folly/commits/7fb9d9fd95490f2a5fbdd0d7bb8a44e5b95f2c48", "message": "logging: add more documentation\n\nSummary: Add several new documents describing the behavior of the folly logging library.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6525997\n\nfbshipit-source-id: 8ba2ff99c70c7566987b3da321526a16755e72bf"}, {"url": "https://api.github.com/repos/facebook/folly/commits/e67115846d699e1c149f5ed2b106b72c78dd40ce", "message": "logging: use raw string literals in config tests\n\nSummary:\nUpdate string literals with escaped quotes and backslashes to use raw string\nliteral syntax instead.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6501426\n\nfbshipit-source-id: 557366f86b360596b13148d03fd33c7df5c3f890"}, {"url": "https://api.github.com/repos/facebook/folly/commits/171c36527455c2709be57f2ccc41218d45689411", "message": "logging: allow partial updates to log handler settings\n\nSummary:\nThis updates the LogHandlerConfig code to allow changing the settings on an\nexisting log handler without listing all of its existing options from scratch.\n\nThis also changes the syntax of the basic log handler configuration string to\nuse a colon to separate the log handler name+type from the options list.  In\nother words, rather than specifying `default=stream,stream=stderr,async=true`\nyou now say `default=stream:stream=stderr,async=true`.\n\nThe primary motivation for this change is to make it easy for users to switch\nthe async setting for the default log handler on or off.  Callers can now\nspecify `default:async=true` to easily enable async mode on the default log\nhandler without having to completely re-list the full settings for the default\nhandler.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6494228\n\nfbshipit-source-id: 52a296f800a5456f0c3aa10546298139c8db52fc"}, {"url": "https://api.github.com/repos/facebook/folly/commits/9e1a1ce16ace21118f180ae28ade5ead129093d4", "message": "logging: split FileHandlerFactory into two classes\n\nSummary:\nSplit FileHandlerFactory into separate FileHandlerFactory and\nStreamHandlerFactory classes, where FileHandlerFactory only handles logging to\nfiles by path name, and StreamHandlerFactory only supports logging to stdout or\nstderr.\n\nThe primary motivation for this is to allow logging to stdout or stderr in some\ncases without allowing arbitrary files to be opened by FileHandlerFactory.\nThis can be achieved now by registering StreamHandlerFactory but not\nFileHandlerFactory.  This makes it safer to allow controlling logging\nconfiguration via command line flags even in setuid binaries.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6494226\n\nfbshipit-source-id: a3ec371ca4266424d07dff20be18e6e13c057593"}, {"url": "https://api.github.com/repos/facebook/folly/commits/f805cad2ece30186014139b1a1dc71aa09a352c4", "message": "logging: add a StandardLogHandlerFactory helper class\n\nSummary:\nThis moves some of the FileHandlerFactory code out into a new\nStandardLogHandlerFactory helper class.  This will make it easier in the future\nto add new LogHandlerFactory implementations that create StandardLogHandler\nobjects.\n\nIn particular, I plan to use this soon to split FileHandlerFactory into two\nseparate classes: one for writing to files on disk and a separate class for\nwriting to stdout or stderr.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6494227\n\nfbshipit-source-id: 52e24250d020d21a5395d2a68fa5bd40bb32fbd4"}, {"url": "https://api.github.com/repos/facebook/folly/commits/20272b4ec1c1ac41cc6bd408b8c454794873d4fb", "message": "add makeSystemError*() helper functions\n\nSummary:\nAdd makeSystemError() helper functions that are similar to the existing\nthrowSystemError() functions but just return the exception rather than throwing\nit.  This is helpful for callers using folly::Expected or folly::Future, where\nthey need to return an exception type rather than throwing it.\n\nThis also includes comments about the fact that this code is using the wrong\nerror category.  The C++ standard indicates that std::generic_category() for\nPOSIX errno values.  I am not fixing this as part of this diff, since this\nchange has the potential to break existing users, and would need a fair amount\nof testing first.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6456771\n\nfbshipit-source-id: 4724b51b8d4a7f513ae70ea1b0c4f0516cfc205f"}, {"url": "https://api.github.com/repos/facebook/folly/commits/ad993b99e320a3e16d1671efe38052f0df203eb4", "message": "logging: fix compilation error on older C++ compilers\n\nSummary:\nAdd an explicit `std::move()` around the return value of\n`logConfigToDynamic()`.  This explicit move is required pre-C++14,\nbut is not required after DR 1579:\nhttp://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1579\n\nNewer versions of g++ and clang no longer require the move.  However gcc\nversions earlier than 5.0 do require it.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6466447\n\nfbshipit-source-id: 1b15934490d4966e9b3e5612e0e2ecbb43c979ca"}, {"url": "https://api.github.com/repos/facebook/folly/commits/6072ce3be8548bae30fdd48afe67e986074f5a5b", "message": "logging: update initialization code to use the new LogConfig logic\n\nSummary:\nReplace the initLoggingGlogStyle() function with a more generic initLogging()\nfunction that accepts a log config string to be parsed with parseLogConfig().\n\nReviewed By: bolinfest, yfeldblum\n\nDifferential Revision: D6342086\n\nfbshipit-source-id: fb1bffd11f190b70e03e2ccbf2b30be08d655242"}, {"url": "https://api.github.com/repos/facebook/folly/commits/730db44fc0c60c573111449ac7213303f7ed223d", "message": "implement chrono conversions for unusual duration types\n\nSummary:\nImplement conversions between std::chrono::duration and POSIX-style time\nstructures even when neither the numerator nor the denominator of the duration\nratio are 1.\n\nBoth of these are done by first converting to an intermediate type where the\nnumerator is 1, and then using the conversion routines for that case.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6366647\n\nfbshipit-source-id: 8f9495fb4101cac6d8b4cf0353a679107007b298"}, {"url": "https://api.github.com/repos/facebook/folly/commits/153c4233eff35be3bd9728c969bd22f59ac6051b", "message": "logging: add a LogConfig::update() method\n\nSummary:\nAdd a method for merging the settings from two LogConfig objects.\nThis allows LogConfig objects to be merged before applying them to the\nLoggerDB.  The effects are the same as two sequential LoggerDB::updateConfig()\ncalls, but without having to apply the intermediate state to the LoggerDB.\n\nReviewed By: bolinfest\n\nDifferential Revision: D6342085\n\nfbshipit-source-id: 0f8a1b7d8d195a80bc74342444dd3152d331fcb6"}, {"url": "https://api.github.com/repos/facebook/folly/commits/b26334e5f85126a4ebe1c514d4790b98f2c2bbe1", "message": "logging: add an assert for the FLAG_INHERIT bit\n\nSummary:\nAdd a static_assert() to check that the FLAG_INHERIT bit does not conflict with\nvalid LogLevel values.\n\nReviewed By: bolinfest\n\nDifferential Revision: D6341242\n\nfbshipit-source-id: cec284623c8a612a3c54f1b593d169310790616e"}, {"url": "https://api.github.com/repos/facebook/folly/commits/89353dca07263ccb9d78e618584f94daa25c371a", "message": "logging: remove comment about LogLevel::ERROR\n\nSummary:\nThe logging code used to support a LogLevel::ERROR value on non-Windows\nplatforms.  I removed it in D5288600 to make all platforms consistent, but I\nforgot to remove this comment describing it.\n\nReviewed By: bolinfest\n\nDifferential Revision: D6341244\n\nfbshipit-source-id: 054427d342066f354c859b12611b907dc2d4fa35"}, {"url": "https://api.github.com/repos/facebook/folly/commits/01d4b7d6db80480e2977fcfa35775506ca5de41f", "message": "logging: add LoggerDB::updateConfig() and resetConfig()\n\nSummary: Add methods for applying config changes from a LogConfig object to the LoggerDB.\n\nReviewed By: bolinfest\n\nDifferential Revision: D6200564\n\nfbshipit-source-id: a25eb99e84b2885bf6853e2222db0d7432a6c37b"}, {"url": "https://api.github.com/repos/facebook/folly/commits/b6e14b7b1823915a6891bd2fa622bca8f4c61004", "message": "logging: add a LoggerDB::getConfig() method\n\nSummary: Add a method to get the current LogConfig state from the LoggerDB.\n\nReviewed By: bolinfest\n\nDifferential Revision: D6200596\n\nfbshipit-source-id: 3bc57d498a5d25d19099d861376d71ea9f7e4039"}, {"url": "https://api.github.com/repos/facebook/folly/commits/2fa201bf02cf80f9f2031b4bba70e3413da37efb", "message": "logging: don't clamp the log level to DFATAL in debug builds\n\nSummary:\nRemove the logic that clamps the log level to DFATAL in debug builds.\n\nThis behavior logically makes some sense, but results in subtle and potentially\nconfusing behavior changes.  It seems confusing that after calling\n`setLevel(LogLevel::MAX_LEVEL)` on a log category, calling `getLevel()` on that\nobject would return `DFATAL` rather than `MAX_LEVEL`.  We also weren't clamping\nthe level to DFATAL consistently: `setLevel()` would clamp the value, but on\nconstruction the initial level was still set to MAX_LEVEL rather than DFATAL.\nThis resulted in some issues when implementing `LoggerDB::getConfig()` since we\ncould not consistently detect if a log category was using the default level\nsettings.  Rather than fix this inconsistency it seems better to simply remove\nthis clamping behavior.\n\nThis means that it is possible for users to disable DFATAL log messages even in\ndebug builds if they really want to.  Previously this was only allowed in\nrelease builds.  This protection doesn't really seem all that\nvaluable--presumably most developers won't really want to do this, and if they\nreally do request this configuration it doesn't seem all that bad to honor it.\n\nReviewed By: bolinfest, yfeldblum\n\nDifferential Revision: D6200569\n\nfbshipit-source-id: 83ef8e2e4d3b61bc5b105038cbe3132979e9ac67"}, {"url": "https://api.github.com/repos/facebook/folly/commits/95d9935053bd95825ecd84fd647d697df1113daf", "message": "logging: add a LogHandler::getConfig() method\n\nSummary:\nAdd a method to LogHandler to return its current configuration.  This will\nmake it possible to query the LoggerDB for its current configuration state.\n\nReviewed By: bolinfest\n\nDifferential Revision: D6200563\n\nfbshipit-source-id: 2b8b9752bbeb26c8aac28d1a73b7e2312fd198c8"}, {"url": "https://api.github.com/repos/facebook/folly/commits/ae69959c3e3fc4dc0bff389bd24255f07072b336", "message": "logging: add a LogHandler registry to LoggerDB\n\nSummary:\nUpdate the LoggerDB to track a list of LogHandlers by name, and\nLogHandlerFactories by handler type.\n\nThis will be needed to support updating the LoggerDB configuration from a\nLogConfig object.\n\nReviewed By: bolinfest\n\nDifferential Revision: D6200562\n\nfbshipit-source-id: e365b4e0df65aa5aaa34e118eb3cee9c9c45cb05"}, {"url": "https://api.github.com/repos/facebook/folly/commits/70230b7a106820807c8d74fcf3d21ebab3442fbb", "message": "logging: add a FileHandlerFactory class\n\nSummary:\nAdd a new LogHandlerFactory interface for creating LogHandler objects from a\nLogHandlerConfig.\n\nAlso add an initial FileHandlerFactory implementation capable of creating\nLogHandler objects that write to a file descriptor.\n\nReviewed By: bolinfest\n\nDifferential Revision: D6200567\n\nfbshipit-source-id: 14b86fc14ad475223aa4b57d45c40638b48c7594"}, {"url": "https://api.github.com/repos/facebook/folly/commits/d017a3ffa0acf3389a1ee585a035c01cd9e51d07", "message": "logging: convert assert() checks to FOLLY_SAFE_DCHECK()\n\nSummary:\nReplace all assert() checks in the folly logging code with\nFOLLY_SAFE_DCHECK().\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6422885\n\nfbshipit-source-id: 5cb12dd59f2fe5d346f15b9d317abede8654a879"}, {"url": "https://api.github.com/repos/facebook/folly/commits/db13010c1338d471c713a652e0940afba627b8bc", "message": "logging: fix unused variable warning in non-debug builds\n\nSummary:\nUse FOLLY_SAFE_DCHECK() rather than assert() to avoid compiler errors about\nthis variable being unused in builds where assert() statements are disabled.\n\nReviewed By: bolinfest, yfeldblum\n\nDifferential Revision: D6421978\n\nfbshipit-source-id: ab1019fa1fa420856e1bf3bc39c441662c4efd75"}, {"url": "https://api.github.com/repos/facebook/folly/commits/8af0eef96d6b2a2d3ea4e5bd6cf6ccd841fca14b", "message": "logging: add a LogConfig class and parsing code\n\nSummary:\nAdd a new LogConfig class to represent the current configuration state of the\nLoggerDB.  This also includes code to parse config strings in both JSON and a\nsimpler more human-writable format (intended primarily for use in command line\narguments).\n\nI generally expect the human-writable format to be used mainly to configure log\nlevels.  It also supports configuring log handler details as well, but the\nformat for this data is slightly more cumbersome and will probably be harder\nfor people to easily remember.\n\nThe parsing code is intentionally kept as part of the 'init' library rather\nthan the core 'logging' library so that other libraries that simply wish to log\nmessages do not need to depend on it.  For instance, this would allow the folly\nJSON library to use the logging library without causing a circular dependency.\n\nReviewed By: bolinfest\n\nDifferential Revision: D6200560\n\nfbshipit-source-id: e4e3c7f941808251b6c7bcbbdac0210118675fb0"}, {"url": "https://api.github.com/repos/facebook/folly/commits/dc91b004d384ba57887b38d4668845bffee0ba08", "message": "implement to() conversions for std::chrono to timespec/timeval\n\nSummary:\nAdd folly::to() conversions to convert between std::chrono::duration or\nstd::chrono::time_point types and struct timespec or struct timeval types.\n\nTo conform to the behavior of the existing arithmetic-to-arithmetic\nconversions, this code performs proper overflow checking and throws a\n`ConversionError` on overflow.  This unfortunately does make the code rather\ncomplicated compared to a non-checking implementation.\n\nConversions between some unusual duration types is not implemented yet, and\nwill fail at compile time if someone tries to use it.  This happens for\ndurations where neither the numerator nor the denominator of the ratio is 1.\nFor instance, 7/13ths of a second.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6356700\n\nfbshipit-source-id: 9dce8ab8f32d8c18089f32c7176a8abf3c3f11f7"}, {"url": "https://api.github.com/repos/facebook/folly/commits/b010847b060f99a988069ca387416a08e9dc221e", "message": "add EXPECT_THROW_RE() and EXPECT_THROW_ERRNO() test macros\n\nSummary:\nAdd EXPECT_THROW_RE() and EXPECT_THROW_ERRNO() macros to folly/test/TestUtils.h\nThese allow more precise checks than the basic EXPECT_THROW() macro provided as\npart of gtest.\n\nThese macros are being moved into folly from Facebook's eden repository\n(https://github.com/facebookexperimental/eden)\nThis will allow us to use them in folly tests and in other projects that depend\non folly.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6301760\n\nfbshipit-source-id: 1f434fb5bc9b7859f763171264fb0b2e1b4bda62"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nbronson": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/e3d4b1ba20bcc2393eb3fb0fbc4bae9d68968093", "message": "remove closure from assert\n\nSummary:\nSomebody reported compilation issues with the closure in post()'s\nassert, resulting in \"error: lambda-expression in unevaluated context\".\nWhile I haven't been able to reproduce the problem locally, it is easy\nenough to work around in this case.\n\nReviewed By: djwatson, mcallahan\n\nDifferential Revision: D6759739\n\nfbshipit-source-id: 9f8082a1e20cd9ddf626cb176542e4e861a7e702"}, {"url": "https://api.github.com/repos/facebook/folly/commits/879a247afb1b651c8e8aff9ac19435360ed67d3e", "message": "better error handling in MemoryIdler for inside jails\n\nSummary:\n/proc may be unavailable in restricted environments, which can\ncause pthread_getattr_np to fail.  This diff adds checking to the return\ncode from that function.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6473789\n\nfbshipit-source-id: de016d32f29edf8410808dfb491987692f39e768"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "LeeHowes": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/20808864dfde991fd740e6caefe632d4bf244d69", "message": "Add TimedDrivableExecutor to folly.\n\nSummary: Adds a TimedDrivableExecutor implementation of DrivableExecutor that adds a driveUntil method. driveUntil is as drive, except that it takes a timepoint and will stop driving after that time to allow callers to time out more easily.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6658320\n\nfbshipit-source-id: a75145748e78497ce107ae152f25729547883835"}, {"url": "https://api.github.com/repos/facebook/folly/commits/ff18deaf720fbe59551a7ff275b09003a61c4351", "message": "Make consistent set of get and getTry methods on SemiFuture.\n\nSummary: Complete set of get and getVia methods including addition of a result operation on FutureBase that provides functionality of the old getTry on Future by returning a Try by reference.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6640056\n\nfbshipit-source-id: 3ac01f7bc4b128e641f08d9a99280a18ffce82f9"}, {"url": "https://api.github.com/repos/facebook/folly/commits/cadfe2cdced5c15f1a3e836dba01e931d09d2763", "message": "Add getVia and getTryVia to SemiFuture.\n\nSummary: Add getVia and getTryVia to SemiFuture to allow driving chains of work conveniently in the current thread.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6631898\n\nfbshipit-source-id: 324ef342a44d4ef502188b3cffde17103f0e6cb2"}, {"url": "https://api.github.com/repos/facebook/folly/commits/5b6406296f4de1ed198531c7a95ac78c6ba7fc4f", "message": "Move getTry to subclasses.\n\nSummary:\nMove getTry from FutureBase to Future and SemiFuture.\n\nMake SemiFuture version move the result out for consistency with get.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6638561\n\nfbshipit-source-id: 551c0f06ed52ef6d8976a5971a5e90b3ab793da0"}, {"url": "https://api.github.com/repos/facebook/folly/commits/d0da61c285f373e3105729687af246458893d96e", "message": "Add continuation to semifuture return test.\n\nSummary: Add more detail to testing return of SemiFuture from a continuation to ensure correct behaviour.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6637565\n\nfbshipit-source-id: 096a7ca140e6bdef7baab6725e86d25cf79742d8"}, {"url": "https://api.github.com/repos/facebook/folly/commits/7acba7e1a0a75d22087647b3e9e830c9b0e8d41e", "message": "Add deprecation comments to folly::makeFuture.\n\nSummary:\nTo ensure that we do not end up with continuable futures without attached executors we should deprecate folly::makeFuture. In most cases folly::makeSemiFuture is adequate here.\n\nThis diff only adds comments to dissuade future use.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6628800\n\nfbshipit-source-id: c2b91df351cc5980c1bfb752f7536d320ef8168a"}, {"url": "https://api.github.com/repos/facebook/folly/commits/a5b5328336d1d59c52bb505ed14820cdb7e14fbf", "message": "Add getSemiFuture to folly::SharedPromise\n\nSummary: Adds getSemiFuture functionality to folly::SharedPromise. Implements getFuture in terms of this, using folly::InlineExecutor to ensure that there is no change of behaviour.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6628723\n\nfbshipit-source-id: 0ce7c7773b9290998ce87f84fa5d82ba957f0313"}, {"url": "https://api.github.com/repos/facebook/folly/commits/fb2a27a30f30b5d612ea4728f9216b127ba0145d", "message": "Ensure that returning a semifuture from a continuation works correctly.\n\nSummary: Returning a SemiFuture from a continuation should work by correctly checking the types and returning a folly::Future on the same executor as the original future that .then was applied to.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6597273\n\nfbshipit-source-id: cf2016a344d4b29f1d31c1da20c89df5b4cfe64e"}, {"url": "https://api.github.com/repos/facebook/folly/commits/48b9743d001e6c3dd3e66ef1dac702c9794833d7", "message": "Add getSemiFuture to folly::Promise\n\nSummary: Also deprecates folly::getFuture function.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6594299\n\nfbshipit-source-id: 67435f35dca660da049cd8c505ee9a21424c0d2b"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wez": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/a578696f04cfa0bd609ea09323153de1aa67e446", "message": "reuse more of Cursor to avoid future issues\n\nSummary:\nFollowing on from D6755842; we don't have to repeat as\nmuch of the internals of `readFixedString`, so... don't!\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6756062\n\nfbshipit-source-id: db3e4fd62e48bf155a656ee57df84274021027f7"}, {"url": "https://api.github.com/repos/facebook/folly/commits/93f4d05d584569bdede7e2d124a21c31559ea93e", "message": "fixup decode logic for fragmented IOBufs\n\nSummary:\nD6635325 exposed a long standing issue with the way\nthat we were consuming Cursor::length, so let's fix it up!\n\nMore details are in the new unit test for this!\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D6755842\n\nfbshipit-source-id: f8b20406c32682892791e7375be577d54d52e0ad"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "spalamarchuk": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/4bfbe0a10e914c3626e16cfdb9e87508e63b065f", "message": "Add DCHECKs for checking that underlying IOBuf wasn't modified\n\nSummary: Appending/prepending to IOBuf while iterating over it with Cursor is unsafe. This diff adds DCHECKs to catch such cases.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6735060\n\nfbshipit-source-id: 7799facc52c53fabd83756ecb26a18c4ebd69677"}, {"url": "https://api.github.com/repos/facebook/folly/commits/86cefd11d497791f00769e69fba550f710906527", "message": "Properly handle appending to the tail of the chain\n\nSummary: Currently appending to the tail of the chain would cause the cursor advancing to the beginning of the chain, which is not correct, instead we should advance to the tail.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6734999\n\nfbshipit-source-id: b8b2585e0475b656f7b6bf4ed39686e2ccb2e432"}, {"url": "https://api.github.com/repos/facebook/folly/commits/afde52ff7655ba79759eafdbee14b3fe47428fce", "message": "Track absolute position of the cursor\n\nSummary:\nStart tracking the position of the cursor from the head of IOBuf chain. This comes at almost no cost (one arithmetic operation on IOBuf advance).\n\nThe main use case for this cursor is Thrift deserialization code. It allows us to stop accumulating `xfer` on every single byte/field/element write and instead get it from Cursor in the end (when we're exiting Thrift code).\nThis allows achieving ~10% better performance of deserialization.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6646813\n\nfbshipit-source-id: 8f796854a24a411698e96afe037695e816813022"}, {"url": "https://api.github.com/repos/facebook/folly/commits/2c730d6fe79b5642133c55545c4ed7570ce2abb9", "message": "Improve fast path of Cursor\n\nSummary:\nThis change simplifies the fastpath by reducing it to bare minimum (i.e. check length, load data) and removes indirection to IOBuf.\nAdditionally it adds `skipNoAdvance` method to have 1-instruction skip.\n\nDisassembly of `read<signed char>` is over 35 instructions (just hot path). With this change it's doesn to 8.\nDisassembly after:\n  Dump of assembler code for function folly::io::detail::CursorBase<folly::io::Cursor, folly::IOBuf const>::read<unsigned char>():\n     0x000000000041f0f0 <+0>:     mov    0x18(%rdi),%rax\n     0x000000000041f0f4 <+4>:     lea    0x1(%rax),%rcx\n     0x000000000041f0f8 <+8>:     cmp    0x10(%rdi),%rcx\n     0x000000000041f0fc <+12>:    ja     0x41f105 <folly::io::detail::CursorBase<folly::io::Cursor, folly::IOBuf const>::read<unsigned char>()+21>\n     0x000000000041f0fe <+14>:    mov    (%rax),%al\n     0x000000000041f100 <+16>:    mov    %rcx,0x18(%rdi)\n     0x000000000041f104 <+20>:    retq\n     0x000000000041f105 <+21>:    jmpq   0x41f110 <folly::io::detail::CursorBase<folly::io::Cursor, folly::IOBuf const>::readSlow<unsigned char>()>\n\nWith this diff Thrift deserialization becomes ~20% faster (with prod workloads).\n\nThrift benchmark:\nBefore:\n  ============================================================================\n  thrift/lib/cpp2/test/ProtocolBench.cpp          relative  time/iter  iters/s\n  ============================================================================\n  BinaryProtocol_read_Empty                                   12.98ns   77.03M\n  BinaryProtocol_read_SmallInt                                20.94ns   47.76M\n  BinaryProtocol_read_BigInt                                  20.86ns   47.93M\n  BinaryProtocol_read_SmallString                             34.64ns   28.86M\n  BinaryProtocol_read_BigString                              185.53ns    5.39M\n  BinaryProtocol_read_BigBinary                               67.34ns   14.85M\n  BinaryProtocol_read_LargeBinary                             62.23ns   16.07M\n  BinaryProtocol_read_Mixed                                   58.74ns   17.03M\n  BinaryProtocol_read_SmallListInt                            89.99ns   11.11M\n  BinaryProtocol_read_BigListInt                              39.92us   25.05K\n  BinaryProtocol_read_BigListMixed                           616.20us    1.62K\n  BinaryProtocol_read_LargeListMixed                          83.49ms    11.98\n  CompactProtocol_read_Empty                                  11.28ns   88.67M\n  CompactProtocol_read_SmallInt                               19.15ns   52.22M\n  CompactProtocol_read_BigInt                                 26.14ns   38.25M\n  CompactProtocol_read_SmallString                            31.04ns   32.22M\n  CompactProtocol_read_BigString                             184.55ns    5.42M\n  CompactProtocol_read_BigBinary                              69.73ns   14.34M\n  CompactProtocol_read_LargeBinary                            64.39ns   15.53M\n  CompactProtocol_read_Mixed                                  58.73ns   17.03M\n  CompactProtocol_read_SmallListInt                           76.50ns   13.07M\n  CompactProtocol_read_BigListInt                             25.93us   38.56K\n  CompactProtocol_read_BigListMixed                          623.15us    1.60K\n  CompactProtocol_read_LargeListMixed                         80.57ms    12.41\n  ============================================================================\n\nAfter:\n  ============================================================================\n  thrift/lib/cpp2/test/ProtocolBench.cpp          relative  time/iter  iters/s\n  ============================================================================\n  BinaryProtocol_read_Empty                                   10.40ns   96.17M\n  BinaryProtocol_read_SmallInt                                15.14ns   66.03M\n  BinaryProtocol_read_BigInt                                  15.19ns   65.84M\n  BinaryProtocol_read_SmallString                             25.19ns   39.70M\n  BinaryProtocol_read_BigString                              172.85ns    5.79M\n  BinaryProtocol_read_BigBinary                               56.88ns   17.58M\n  BinaryProtocol_read_LargeBinary                             56.77ns   17.61M\n  BinaryProtocol_read_Mixed                                   43.98ns   22.74M\n  BinaryProtocol_read_SmallListInt                            58.19ns   17.19M\n  BinaryProtocol_read_BigListInt                              19.75us   50.63K\n  BinaryProtocol_read_BigListMixed                           440.20us    2.27K\n  BinaryProtocol_read_LargeListMixed                          56.94ms    17.56\n  CompactProtocol_read_Empty                                   9.35ns  106.93M\n  CompactProtocol_read_SmallInt                               13.07ns   76.49M\n  CompactProtocol_read_BigInt                                 18.23ns   54.87M\n  CompactProtocol_read_SmallString                            25.61ns   39.05M\n  CompactProtocol_read_BigString                             174.46ns    5.73M\n  CompactProtocol_read_BigBinary                              59.77ns   16.73M\n  CompactProtocol_read_LargeBinary                            60.81ns   16.44M\n  CompactProtocol_read_Mixed                                  42.70ns   23.42M\n  CompactProtocol_read_SmallListInt                           66.89ns   14.95M\n  CompactProtocol_read_BigListInt                             25.08us   39.87K\n  CompactProtocol_read_BigListMixed                          427.93us    2.34K\n  CompactProtocol_read_LargeListMixed                         56.11ms    17.82\n  ============================================================================\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6635325\n\nfbshipit-source-id: 393fc1005689042977c03f37f5a898ebe7814d44"}, {"url": "https://api.github.com/repos/facebook/folly/commits/fd0b3090840d742492793fe306185550f0300283", "message": "Fix DCHECKs in IOBufQueue\n\nSummary: glog actually tries to pull srtings from these pointers when the checks fail, which obfuscates the error\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6506886\n\nfbshipit-source-id: 0283e02aecaa248b84fca1433d3f29f92c37b2e6"}, {"url": "https://api.github.com/repos/facebook/folly/commits/64072ab5f788cd1081bdd98ba6dbaabbcd1fafbd", "message": "Improve QueueAppender/IOBufQueue performance\n\nSummary:\nCurrently QueueAppender needs to follow a chain of 4 indirections (QueueAppender->IOBufQueue->IOBuf(head)->IOBuf(tail)->data).\nThis diff adds a cache of writable tail range in IOBufQueue and allows it to be placed externally.\n\nBefore this diff on hot path QueueAppender::write<signed char> was ~167 bytes of code (with majority being actually executed), after this diff it's down to ~30 bytes:\n  0x0000000000419d10 <+0>:     mov    (%rdi),%rax\n  0x0000000000419d13 <+3>:     cmp    %rax,0x8(%rdi)\n  0x0000000000419d17 <+7>:     je     0x419d28 <folly::io::QueueAppender::write<signed char>(signed char)+24>\n  0x0000000000419d19 <+9>:     mov    %sil,(%rax)\n  0x0000000000419d1c <+12>:    addq   $0x1,(%rdi)\n  0x0000000000419d20 <+16>:    retq\n  0x0000000000419d21 <+17>:    nopl   0x0(%rax)\n  0x0000000000419d28 <+24>:    movsbl %sil,%esi\n  0x0000000000419d2c <+28>:    jmpq   0x419ca0 <folly::io::QueueAppender::writeSlow<signed char>(signed char)>\n\nWith this diff, Thrift serialization performance is improved up to 2x with production workloads (2x for compact, 3x for binary).\n\nThrift benchmark output:\nBefore:\n  ============================================================================\n  thrift/lib/cpp2/test/ProtocolBench.cpp          relative  time/iter  iters/s\n  ============================================================================\n  BinaryProtocol_write_Empty                                  58.05ns   17.23M\n  BinaryProtocol_write_SmallInt                               75.17ns   13.30M\n  BinaryProtocol_write_BigInt                                 74.60ns   13.41M\n  BinaryProtocol_write_SmallString                            85.12ns   11.75M\n  BinaryProtocol_write_BigString                             802.96ns    1.25M\n  BinaryProtocol_write_BigBinary                             174.69ns    5.72M\n  BinaryProtocol_write_LargeBinary                           171.81ns    5.82M\n  BinaryProtocol_write_Mixed                                 130.97ns    7.64M\n  BinaryProtocol_write_SmallListInt                          123.99ns    8.06M\n  BinaryProtocol_write_BigListInt                             40.72us   24.56K\n  BinaryProtocol_write_BigListMixed                          784.78us    1.27K\n  BinaryProtocol_write_LargeListMixed                         98.84ms    10.12\n  CompactProtocol_write_Empty                                 64.38ns   15.53M\n  CompactProtocol_write_SmallInt                              76.74ns   13.03M\n  CompactProtocol_write_BigInt                                83.62ns   11.96M\n  CompactProtocol_write_SmallString                           86.05ns   11.62M\n  CompactProtocol_write_BigString                            786.18ns    1.27M\n  CompactProtocol_write_BigBinary                            184.91ns    5.41M\n  CompactProtocol_write_LargeBinary                          182.12ns    5.49M\n  CompactProtocol_write_Mixed                                120.89ns    8.27M\n  CompactProtocol_write_SmallListInt                         119.74ns    8.35M\n  CompactProtocol_write_BigListInt                            43.76us   22.85K\n  CompactProtocol_write_BigListMixed                         595.90us    1.68K\n  CompactProtocol_write_LargeListMixed                        72.80ms    13.74\n  ============================================================================\nAfter:\n  ============================================================================\n  thrift/lib/cpp2/test/ProtocolBench.cpp          relative  time/iter  iters/s\n  ============================================================================\n  BinaryProtocol_write_Empty                                  65.97ns   15.16M\n  BinaryProtocol_write_SmallInt                               72.31ns   13.83M\n  BinaryProtocol_write_BigInt                                 72.67ns   13.76M\n  BinaryProtocol_write_SmallString                            77.56ns   12.89M\n  BinaryProtocol_write_BigString                             782.07ns    1.28M\n  BinaryProtocol_write_BigBinary                             179.69ns    5.57M\n  BinaryProtocol_write_LargeBinary                           182.62ns    5.48M\n  BinaryProtocol_write_Mixed                                  91.62ns   10.92M\n  BinaryProtocol_write_SmallListInt                           96.22ns   10.39M\n  BinaryProtocol_write_BigListInt                             19.65us   50.90K\n  BinaryProtocol_write_BigListMixed                          245.69us    4.07K\n  BinaryProtocol_write_LargeListMixed                         46.56ms    21.48\n  CompactProtocol_write_Empty                                 74.44ns   13.43M\n  CompactProtocol_write_SmallInt                              80.35ns   12.45M\n  CompactProtocol_write_BigInt                                85.30ns   11.72M\n  CompactProtocol_write_SmallString                           82.61ns   12.10M\n  CompactProtocol_write_BigString                            784.77ns    1.27M\n  CompactProtocol_write_BigBinary                            193.20ns    5.18M\n  CompactProtocol_write_LargeBinary                          192.53ns    5.19M\n  CompactProtocol_write_Mixed                                 99.78ns   10.02M\n  CompactProtocol_write_SmallListInt                         104.77ns    9.54M\n  CompactProtocol_write_BigListInt                            25.62us   39.03K\n  CompactProtocol_write_BigListMixed                         272.42us    3.67K\n  CompactProtocol_write_LargeListMixed                        38.32ms    26.09\n  ============================================================================\n\nQueueAppender Benchmark output (although not very representative due to a tight loop):\nBefore:\n  ============================================================================\n  folly/io/test/QueueAppenderBenchmark.cpp        relative  time/iter  iters/s\n  ============================================================================\n  write_uint8                                                 10.50us   95.20K\n  write_uint16                                                 5.48us  182.49K\n  write_uint32                                                 2.73us  366.22K\n  push_64b                                                     9.77us  102.36K\n  push_1024b                                                 112.87us    8.86K\n  append                                                      64.21us   15.57K\n  preallocate_postallocate_1b                                 16.34us   61.19K\n  preallocate_postallocate_4b                                 15.56us   64.26K\n  preallocate_postallocate_32b                                22.17us   45.11K\n  preallocate_postallocate_256b                              149.55us    6.69K\n  ============================================================================\n\nAfter:\n  ============================================================================\n  folly/io/test/QueueAppenderBenchmark.cpp        relative  time/iter  iters/s\n  ============================================================================\n  write_uint8                                                  8.86us  112.81K\n  write_uint16                                                 3.91us  255.68K\n  write_uint32                                                 2.08us  481.78K\n  push_64b                                                     8.24us  121.39K\n  push_1024b                                                 115.50us    8.66K\n  append                                                      67.52us   14.81K\n  preallocate_postallocate_1b                                 13.86us   72.17K\n  preallocate_postallocate_4b                                 11.67us   85.71K\n  preallocate_postallocate_32b                                20.35us   49.14K\n  preallocate_postallocate_256b                              148.57us    6.73K\n  ============================================================================\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6427749\n\nfbshipit-source-id: 8495cc74b6106b15d201e37533ae4c0a1abc9d74"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "djwatson": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/a4306bcdf04c95f321a96ab9b0f29de1c1e678f1", "message": "Loop Time\n\nSummary:\nOnly do the exponential loop smoothing once every 10ms.\nIf we need it before then, do it linearly.\n\nAlso, remove one of the now()s by only calling it once.\n\nReviewed By: bmaurer, yfeldblum\n\nDifferential Revision: D6690047\n\nfbshipit-source-id: 8267c01064aabc17cb8e86eb888e6120c99a129f"}, {"url": "https://api.github.com/repos/facebook/folly/commits/8893b8bcd26b41471e77c6882d77404c9a617176", "message": "parkinglot benchmark\n\nSummary: Add benchmark vs. futex\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6639280\n\nfbshipit-source-id: 9735444a7f48011f31603159561675d472cc4411"}, {"url": "https://api.github.com/repos/facebook/folly/commits/3d2b926a9897457fab52e96768ed9fca2c6dd3f3", "message": "Relax stop_ memory order\n\nSummary: stop_ can be relaxed everywhere, it implies only an asynchronous signal, not any sort of memory barrier.\n\nReviewed By: davidtgoldblatt\n\nDifferential Revision: D6690079\n\nfbshipit-source-id: 6f193204e1619f9a8adf81db2d46d05954bfbf85"}, {"url": "https://api.github.com/repos/facebook/folly/commits/ee1a988dbb1648c25d1cf1c40eafbf2e7bff81b4", "message": "use in futex\n\nSummary: Use new ParkingLot API in futex.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6595853\n\nfbshipit-source-id: 7024ac1d3e0c5958a651a3e33c1427038bbe7808"}, {"url": "https://api.github.com/repos/facebook/folly/commits/6824c36bf128aa415a802b66e93a5019b8e16c25", "message": "Add a check if max atomic_shared_ptrs is reached.\n\nSummary:\nBatching reference counts reduces the maximum number of atomic_shared_ptrs\navailable to the system (and also shared_ptrs).\n\nAdd a check, test, and some comments about it.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D5916291\n\nfbshipit-source-id: 0bbf7b43284d94a304201219883c82b3654c1585"}, {"url": "https://api.github.com/repos/facebook/folly/commits/84ad2a4d4b52b0207b35f35c54702cb87189fe4d", "message": "synchronization/ParkingLot\n\nSummary:\nA ParkingLot API inspired by linux futex syscall, and WebKit's parkingLot.\n\nExtends the futex interface with lambdas, such that many different sleeping abstractions\ncan be built.\n\nReviewed By: yfeldblum, aary\n\nDifferential Revision: D6581826\n\nfbshipit-source-id: dba741fe4ed34f27bfad5f5747adce85741441e0"}, {"url": "https://api.github.com/repos/facebook/folly/commits/a807bde9b3f486c77996e717f5154f60f50fe95f", "message": "Fix erase in Iterate (2)\n\nSummary:\nPreviously D6579707.\n\nCorrectly advance to next item if we erase the current element.  Corner cases were slightly off if we were at the end of a hash chain.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6603518\n\nfbshipit-source-id: acb959e5bcd5da1c3df642b75985d464fdd3b23d"}, {"url": "https://api.github.com/repos/facebook/folly/commits/74502e3cc02daef719f6255cc55a7bebe0772a26", "message": "Fix ThreadLocal races\n\nSummary:\nI misread the ThreadLocal docs, thread destruction functions do *not* grab the accessAllTHreads_ lock\nunless you use *strict* mode, and even then, it is only a read lock.\n\nEasy enough to make the thread-destruction global bits to be atomic / use folly::Synchronized.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6592905\n\nfbshipit-source-id: 4ae600dff4c8c04751483a452ca7c07ef3f26380"}, {"url": "https://api.github.com/repos/facebook/folly/commits/f885995c00a27e0e440c0e5cb66ec3298fc507d4", "message": "RCU\n\nSummary: This adds an RCU implementation, matching http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0461r1.pdf as closely as pratical.  This implementation does not require thread registration or quiescence.\n\nReviewed By: magedm\n\nDifferential Revision: D6330631\n\nfbshipit-source-id: 2c729f3a4c0f151cde5d9a599ecd2a2c20c7da55"}, {"url": "https://api.github.com/repos/facebook/folly/commits/d7629090e2c23da58ffc8977b22ccb17a25ae51c", "message": "bitreverse\n\nSummary:\nAdds a bitreverse function to Bits.h\n\nAFAIK there is no great way to do this on x86, takes ~4-5ns.\narm has a single instruction we can drop in in the future.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6459283\n\nfbshipit-source-id: 129db196b2fac95386f601ae57843aa87523b915"}, {"url": "https://api.github.com/repos/facebook/folly/commits/7acf192db1befc5a54c8a77e2450176fe587fa1f", "message": "add AtFork::unregisterHandler\n\nSummary: Adds an AdFork::unregisterHandler command, such that we can register and unregister fork handlers.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6439796\n\nfbshipit-source-id: b710152f8cf98371c330b484cd5fe42de44e74ac"}, {"url": "https://api.github.com/repos/facebook/folly/commits/f089f1fde3ef52161c6630e8b0e78004af6161ae", "message": "Move threadlocal_detail::Atfork to its own file\n\nSummary: As title\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6440723\n\nfbshipit-source-id: 3168d7bb616ae0ff3fe42f7584c5a255c4953875"}, {"url": "https://api.github.com/repos/facebook/folly/commits/0fd994133fbaafa1e4b6c86f5c14a101f2086e8c", "message": "Use hazptr_local and hazptr_array\n\nSummary: Use newest hazptr hotness in concurrenthashmap.  Shaves ~10% off of the single-thread find performance.\n\nReviewed By: magedm\n\nDifferential Revision: D6259947\n\nfbshipit-source-id: 7ecf99d38fdf8e311fca3313137e0fca5af3f165"}, {"url": "https://api.github.com/repos/facebook/folly/commits/dc4be288a0cd5b88beb4f8c1b5d74d98791d43c9", "message": "Add a fast path to folly::ThreadLocal\n\nSummary:\nCurrently folly::ThreadLocal[Ptr] is pretty heavy-weight for a get():\n\n1) call instance(), take a static init guard, branch\n2) call getThreadEntry, check if thread_local is not null, branch\n3) check if id < threadEntry->capacity, branch\n4) Finally, return threadEntry->elements[id]\n\nIf we have real thread_locals, we can do better by caching the capacity directly,\ncombining all three checks:\n\n1) checkif id < threadLocalCapacityCheck, branch.  If not, do slow path.\n2) return threadEntry->elements[id].  Threadentry is never null if capacity > 0, and\n    instance() setup work is called during the first getThreadEntry call when threadlocalcapacity == 0.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6379878\n\nfbshipit-source-id: 4fc7564bbb2f319d65875124026aef28d910ef06"}, {"url": "https://api.github.com/repos/facebook/folly/commits/65d63573f08eef7b847ebf38ec74d52a61d3b936", "message": "improve ThreadLocalBenchmark\n\nSummary:\nBenchmark appears to be memory bound, and is affected by different cpus.\nAdd a new benchmark that does more work.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6380904\n\nfbshipit-source-id: 5cfbaab70379aa4a2923d957e1147d8486deeff7"}, {"url": "https://api.github.com/repos/facebook/folly/commits/29b40639ed7b6b3c47f8c5bafe15265f8c484ef8", "message": "fix hazptr_array move\n\nSummary: Broken, found via build failures in D6259947\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6374215\n\nfbshipit-source-id: 3a438b5416683c602966c2f029c6b7787acdccaa"}, {"url": "https://api.github.com/repos/facebook/folly/commits/7046d43c7e3c18ebc28c62141b8e1eefabce5323", "message": "Add free-function retire\n\nSummary:\nAdds a hazptr_retire and domain::retire methods to hazptr.  They both allocate memory instead of inheriting.\n\nThis will make implementation of google's cell proposal trivial, vs. D4754972 which felt overwraught.\n\nhttp://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0561r0.html\n\nReviewed By: magedm\n\nDifferential Revision: D6361162\n\nfbshipit-source-id: 9f259f434139f960483b2ab7c5190d3807edcf52"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/42587716", "body": "It is generated from ./configure. \n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/42587716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/56067681", "body": "merged, thanks\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/56067681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/59967568", "body": "Yes, you could definitely do this with folly/io/async/ and thrift/lib/cpp/async.  We're actively moving all the libevent-type async wrappers out of thrift and in to folly, so eventually thrift won't be required.  The thrift server itself doesn't currently support UDP at all anyway.\n\nAnother possibility is boost::asio.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/59967568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/62427759", "body": "Closing this. I believe folly does now use a system double-conversion - gtest shouldn't be installed, and is only required when doing make test\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/62427759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/62748200", "body": "likely mcrouter doesn't need sconstruct for double conversion anymore, as it is an official ubuntu package now.  Open a mcrouter ticket?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/62748200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/63717448", "body": "Nope, folly will never work on 32bit, there are several 64-bit specific code sections. Sorry\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/63717448/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/63717487", "body": "fixed\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/63717487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/63717518", "body": "fixed\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/63717518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/63717664", "body": "fxied\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/63717664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/63847029", "body": "Looks like this was fixed already\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/63847029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/63847090", "body": "What is this used for?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/63847090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/63847146", "body": "already merged\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/63847146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/66641691", "body": "a similar patch was merged, thanks\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/66641691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/72723227", "body": "Yea, something seems wrong with the configure script that tries to detect this\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/72723227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/73124543", "body": "Tagged\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/73124543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/85092256", "body": "libiberty on your system appears to not be compiled with PIC support?  We're happy to take a patch to fix it if you have one, but we only have cycles to verify that ubuntu works out of the box.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/85092256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/folly/pulls/comments/107994098", "body": "should be add(T&& v)?  ", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/107994098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "plapukhov": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/9bf260657e140cace3cab8850d6a40fac3a5cd93", "message": "add tryCreateNetwork()\n\nSummary: Add non-throwing version of createNetwork(), and rework existing code to throw exceptions based on error codes returned by non-throwing version.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6705425\n\nfbshipit-source-id: 268ff64c36e7cceeea3463248d18b7b2cb81390e"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "meyering": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/492fad43a76506407008a5394511daf6bba5bccc", "message": "define SKIP_IF\n\nSummary:\nFinding ourselves writing too many identical \"if (expr) SKIP << ...\" statements,\nthis change factors out/encapsulates the functionality.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6727531\n\nfbshipit-source-id: 703abcd5d8c30a6ebab94327a12da4f2d1f7ff74"}, {"url": "https://api.github.com/repos/facebook/folly/commits/a447cb9ebc32100b18c0e3fc75bf5882db4857e3", "message": "folly/fibers/test/FibersTest.cpp: accommodate ASAN's detect_stack_use_after_return=1\n\nSummary:\nWith ASAN enabled (actually, only with ASAN *and* its detect_stack_use_after_return=1 option),\nthe addTaskFinally test would fail.  This adapts to accommodate the larger stack offsets.\nAlso, use EXPECT_GT and EXPECT_LT rather than EXPECT_TRUE.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6353666\n\nfbshipit-source-id: 39e04caffa7b24cde97c749686c7e651a071dcec"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aleivag": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/d7b6ad4972b288f90bf57d7597103c44c244decd", "message": "allow command to accept \"--\" separator\n\nSummary:\nCurrently NestedCommandLineApp does not support `--` to indicate that the following arguments should be parsed as arguments, not nested commands or options.\nThis diff fix that by whitelisting any argument given after \"--\"\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6721144\n\nfbshipit-source-id: 38a850b6ea803dc758c5fe65a21575e5faeac35b"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "davidtgoldblatt": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/98d1077ce0603b0713353d638cb1436a28827af6", "message": "Add Tearable, for concurrently-modified non-atomic objects.\n\nSummary:\nThis adds the Tearable class template, which holds storage for an\narbitrarily-sized object that can be concurrently read or written without any\nexternal synchronization.\n\nReviewed By: yfeldblum, djwatson\n\nDifferential Revision: D6422334\n\nfbshipit-source-id: ee3853bbd393ac8e30dca6439c61606cc5495f92"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ot": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/489eeb1c2459073d09151b359109369e3f395d06", "message": "Change the enumerate() example to bind the proxy by reference\n\nSummary:\nWhen compiling without optimizations binding the proxy by\nreference is slightly faster (no differences in opt mode), so change\nthe documentation to recommend this syntax.\n\nThe proxy can still be bound by `auto`, `const auto`, and `const\nauto&`, in all case behaving as expected and with no overhead in opt\nmode. Added a test to make sure these all work.\n\nReviewed By: yfeldblum, luciang\n\nDifferential Revision: D6688958\n\nfbshipit-source-id: 7c6b460a01708786bda7614546fa2e1667f27299"}, {"url": "https://api.github.com/repos/facebook/folly/commits/66c782bb73c911a99dc7e41f8aa9659515e3a20b", "message": "Improve performance of enumerate() with optimization disabled\n\nReviewed By: yfeldblum, WillerZ\n\nDifferential Revision: D6682606\n\nfbshipit-source-id: 5a203a849e96d3020cf9ad2669451122954c2199"}, {"url": "https://api.github.com/repos/facebook/folly/commits/cfc602df8f8691d73fddea64f5bdc147a0f5c9b0", "message": "Make global executors shutdown-safe\n\nSummary:\nThe `get*Executor()` APIs don't check whether the singletons\nhaven't been destroyed already. Add a check and allow to return\n`nullptr` during shutdown.\n\nAlso do a general clean up of the code, there was no reason to use\nthree independent singletons (non-atomically destroyed) for each\nexecutor.\n\nReviewed By: philippv, luciang\n\nDifferential Revision: D6589486\n\nfbshipit-source-id: 20fb835db7e446bd811bbd6d5ddbc41db9e98b54"}, {"url": "https://api.github.com/repos/facebook/folly/commits/13e576ac96bfc04b412d8fc54ad5abe6f2552986", "message": "Add folly::hasher support for floating point types\n\nSummary:\nMove `folly::hasher` closer to feature parity with `std::hash`.\nThis is in order to replace some instances of `folly::hash::hash_combine(...)` with `folly::Hash()(...)` (`std::hash` is the identity for integers, which makes it an unsafe default for more sophisticated hash data structures, including open-addressing hash tables).\n\nThe implementation is similar to `libstdc++`'s implementation, in that we handle separately the `0` case, because `0` and `-0` have different binary representations but are equal according to `operator==`, and hash the bytes otherwise. It is probably a little faster than `libstdc++`'s implementation, that delegates a out-of-line Murmur hash routine for arbitrary buffers, while this uses a minimal inlineable machine word hashing routine.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6410713\n\nfbshipit-source-id: 86d9e4ed8da04fffe283949825852e539ec7d5cf"}, {"url": "https://api.github.com/repos/facebook/folly/commits/0f122a828426d5347e8b0ce78967e8c81001b906", "message": "Revert D6366352: [folly] Split get_default() into two for deferred default construction\n\nSummary:\nThis reverts commit db55b944ca63e565997094c11b90c4ebe98531ce\n\nbypass-lint\n\nDifferential Revision: D6366352\n\nfbshipit-source-id: e25906409186b077ef9117aa524cc7c86314ae12"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/folly/pulls/comments/75609683", "body": "Nice catch!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/75609683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "drilibo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/80d1c0e1cbe69db643502682522f813e1d73e693", "message": "Fixing typo in sorted_vector_types.h\n\nSummary:\ntitle\n\nCreated from Diffusion's 'Open in Editor' feature.\n\n(Note: this ignores all push blocking failures!)\n\nReviewed By: Sushisugre\n\nDifferential Revision: D6688367\n\nfbshipit-source-id: 6e2f2d3fcb897fe78c1caef841515856b1f2bd42"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chadaustin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/3df176287c46e280f8d4be3b8dc1674fef8cdeb7", "message": "test that _sp includes nul bytes\n\nSummary:\nD6617812 wants to build a StringPiece from a literal with an\nembedded nul. Add a test to verify that _sp is suitable for this use\ncase.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6651024\n\nfbshipit-source-id: be4fb875762829fdb61c57fa72954fef286e9df0"}, {"url": "https://api.github.com/repos/facebook/folly/commits/9df5dacf85c3bfcb7db3b5a250c820fdca226d17", "message": "test that the value remains alive even if the .then callback takes no arguments\n\nSummary:\nIt was not clear to me, if a callback takes no arguments, the\nunderlying value is guaranteed to be alive during the execution of the\ncallback, so I wrote these tests.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6594921\n\nfbshipit-source-id: 6a658afc1bf4d29eaa9c62269ddc21c7f897ad01"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ngoyal": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/5eda66501c6a6f2194b1a15a2f7f0e0625d86197", "message": "Use local error buffer in readStoreFromBuffer\n\nSummary: ERR_error_string will use a static buffer if none is provided.  This is unsafe in threaded envs when we build a string out of it later.  Switch this to use ERR_error_string_n\n\nReviewed By: yfeldblum, knekritz\n\nDifferential Revision: D6664958\n\nfbshipit-source-id: 2071347373ac61ebc28296fa66845cd718172b5e"}, {"url": "https://api.github.com/repos/facebook/folly/commits/79c30edd275d3f2b17c56c1194cc330489593b75", "message": "Add utility to create stores\n\nSummary: Add methods to create a X509StoreUniquePtr from a ca file or buffer.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6662538\n\nfbshipit-source-id: 646f61596f2787756b2fa5998a43f36d75a91d90"}, {"url": "https://api.github.com/repos/facebook/folly/commits/3764b633f977129f8ee3bca60db7c5d1bb969eec", "message": "Fix case where ssl cert does not match key\n\nSummary: In some cases, SSLContextManager seg faults if a cert and key do not match.  This guards against that case when strictSSL = false, and throws a more useful error in the cases when SSL is required.\n\nReviewed By: xybu\n\nDifferential Revision: D6513964\n\nfbshipit-source-id: 8e63a22b346fd3f2a30d558a3659ab6794c7a105"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mingtaoy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/64c5a21374fa65e4179b3f165c269f4bf1534dba", "message": "Clarify folly::ssl::init documentation\n\nSummary: Adds wording indicating that it is safe to call this function multiple times.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6625530\n\nfbshipit-source-id: 2305f7b8e3451a6663003d23230b22c6f65a3729"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aary": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/e14ef53297ff23a1f3b1b01716708a416b080141", "message": "Added remove_cvref\n\nSummary:\nstd::remove_cvref is like std::decay, but without the function to\npointer and array to pointer decays\n\nBackport of http://en.cppreference.com/w/cpp/types/remove_cvref\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6639513\n\nfbshipit-source-id: 2a5e252678aacc09acf6ce4565872e7efb9b48f3"}, {"url": "https://api.github.com/repos/facebook/folly/commits/3c127a77f9b9fb201f98da646bbe0ea06cd6d55b", "message": "folly::Indestructible interface improvement\n\nSummary:\nAs it stands the user cannot use initializer list constructors in the\nunderlying type, this fixes that and provides a good interface change.\nThis allows them to use list initialization, which works with initializer\nlists\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6620994\n\nfbshipit-source-id: c29199f97b434d84dd8d4cee2f00c5eccb316166"}, {"url": "https://api.github.com/repos/facebook/folly/commits/22df45211b731dd86b1dbfaab9417b41376a51c8", "message": "Returning reference to *this from propagate_const\n\nSummary: As title\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6620395\n\nfbshipit-source-id: 477aae84b2bbde2e79d46ae93c285909b56f575e"}, {"url": "https://api.github.com/repos/facebook/folly/commits/5a07e203d79324b68d69f294fa38e43b9671e9b1", "message": "Split get_default() into two for deferred default construction and added forwarding to speed up default element construction with rvalues\n\nSummary:\nAs it stood currently folly::get_default() would unnecessarily\nconstruct a value into the third parameter, which was unnecessary in the code\npath where the element was found in the map.  Also the default value can be\nforwarded to the return type in the code path where the element is not found\nand an rvalue parameter is passed as the default value\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6390315\n\nfbshipit-source-id: ef692b827d5a36751b4eb1e12042869e8fbba2e5"}, {"url": "https://api.github.com/repos/facebook/folly/commits/d4d49d6c7ab3bf9ae03b0154e0471bfb56e1c2de", "message": "Split get_default() into two for deferred default construction\n\nSummary:\nAs it stood currently folly::get_default() would unnecessarily\nconstruct a value into the third parameter, which was unnecessary in the fast\npath where the element was found in the map\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6366352\n\nfbshipit-source-id: db55b944ca63e565997094c11b90c4ebe98531ce"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "anakryiko": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/5d64a503ffc312886d23b22ad12df87bbc8f9a32", "message": "Fix crashing on corrupted ELF binaries with invalid offsets in ELF header.\n\nSummary:\nThere are cases where ELF binaries are running fine, but have slightly\ncorrupted ELF headers, e.g., with section headers offset pointing beyond boundaries\nof file. I'm guessing this is due to running strip or objdump with either some\nparticular combination of flags or some due to buggy version of those tools. This\nchange prevents from crashing on such files.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6616027\n\nfbshipit-source-id: 8cb3ac4475a51d1f1045c395977a6a77fbefffb2"}, {"url": "https://api.github.com/repos/facebook/folly/commits/eb7bc45f22e034751a76bf02445c669471e60780", "message": "Store filename and provide detailed message on data access assertion failure.\n\nSummary:\nIt looks like not having offset/size/filename information is way more\nharmful, than storing filename just for the sake of this error message.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6536616\n\nfbshipit-source-id: 469fbdf1deedd76ebd79cf98716c2c269cb10e4d"}, {"url": "https://api.github.com/repos/facebook/folly/commits/4c6781bf95a7e5e0af802e162f4cb3b310203bf4", "message": "Add unit tests for opening non-ELF files.\n\nSummary:\nJust testing that ElfFile returns expected error code and message for\nnon-ELF files.\n\nDepends on D6410210\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6418365\n\nfbshipit-source-id: aaab3b9f3ca1a12d384ae98a1772b7f640115192"}, {"url": "https://api.github.com/repos/facebook/folly/commits/36ac103264634cafe2944c33a9677ce9a8b2ac2d", "message": "Fix ElfFile crashing when opening short (<64 bytes) files.\n\nSummary:\nElfFile in init() assumes file is long enough to contain complete\nElfHeader, which is 64 bytes long. This is not true for valid non-ELF files like\nshort scripts. They shouldn't cause crash.\n\nReviewed By: myreg\n\nDifferential Revision: D6410210\n\nfbshipit-source-id: 28fd017d8de17c431d7d006a1655ade8a95994bd"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yzheng624": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/67300dac6ed429facd7c6f5e03b7c245e32f8383", "message": "Add readWithPriority to PriorityMPMCQueue\n\nSummary: Add readWithPriority to PriorityMPMCQueue\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6606604\n\nfbshipit-source-id: 07382e3c6d0f53a8727c059410c0577cf0aac82c"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dustinpho": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/a72e79039d4f2b20cd4a75736fbb3346a4ec62d5", "message": "Secure RNG utilities\n\nSummary: Adding secure RNG utility functions (rand32, rand64, oneIn, randDouble01, randDouble).\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6551975\n\nfbshipit-source-id: 720d138de1329669b1a15eb3e9cb3fe91ce982a4"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Orvid": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/3975849d4447642d6c476d430b8842bfd9b7b5b9", "message": "Remove the folly/Assume.h shim\n\nSummary: The shim existed so that hhvm-third-party could be updated, and it has been, so it's time to remove the shim.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6590439\n\nfbshipit-source-id: 3e1b039c1df6cf1e74102f7b7b26aa90fae31ec0"}, {"url": "https://api.github.com/repos/facebook/folly/commits/4cbf7a642550f823e34eee832ffd9052f148864d", "message": "Explicitly refer to the std::chrono namespace to avoid conflicts with the folly::chrono namespace\n\nSummary:\nThis is a hard requirement due to an upcoming change in Folly.\n\nThe codemod was only run on files that referenced the `std::chrono` namespace with an unqualified `chrono` and also used both the `std` and `folly` namespaces.\n```\nfbgr -sl \"[^:]chrono::\" | xargs grep -l \"using namespace std;\" | xargs grep -l \"using namespace folly;\" | xargs sed -r -i 's/([^:])chrono::([a-z])/\\1std::chrono::\\2/g'\n```\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6547864\n\nfbshipit-source-id: 4a8230d311edbaa173722a09b2773e8d053fae7e"}, {"url": "https://api.github.com/repos/facebook/folly/commits/f5edd7dcaf8308a946d3843940e2f7a5f40ca44f", "message": "Work around a bug in MSVC name lookup within templated friend contexts\n\nSummary: MSVC has a bug that causes it to think that `once_flag` in this context resolves to the `using` statement further up, rather than `detail::once_flag`.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6376501\n\nfbshipit-source-id: 481dbd75ed21f3d519bd920258fa743f314668ad"}, {"url": "https://api.github.com/repos/facebook/folly/commits/7add1bfc2793618eeae9ad68142f5376887dbb05", "message": "Minor tweak to the wording of the vcpkg section\n\nSummary:\nThe commands as they were previously would attempt to install Folly as 32-bit, which would fail.\nAlso removes an extra `-` in the link's url.\n\nCloses: https://github.com/facebook/folly/issues/713\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6327981\n\nfbshipit-source-id: ced8c86948b8be5c1dd88e14d6c3a77fc783aac9"}, {"url": "https://api.github.com/repos/facebook/folly/commits/21e85af2c838fc1420a77d1ce2199c01858c18b0", "message": "Minor tweaks to the wording of a couple of errors in the CMake build\n\nSummary:\nTweak the wording of a couple error messages to make them clearer.\nAlso disable the 'digraphs not supported' warning, as none of our supported compilers actually interpret digraphs in any of our supported build configurations.\n\nCloses: https://github.com/facebook/folly/issues/706\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6299715\n\nfbshipit-source-id: 7c847ac859e082aea711f6751f626b4b43886da4"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/11849195", "body": "While doing my port to Windows I've realized that this misses the use of pause in [detail/AtomicHashUtils.h](https://github.com/facebook/folly/blob/master/folly/detail/AtomicHashUtils.h#L33), which, although it does fall back to not using a pause, should be calling the functions added in this instead.\n\nAlso, is there an actual difference between `asm(\"pause\")` and `asm volatile(\"pause\")`?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/11849195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/12576669", "body": "MSVC is fine with this way of doing it.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/12576669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/12577942", "body": "At least, I thought that was the case, apparently I forgot where this was actually used when I tested it, as MSVC is giving me errors about this now :(\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/12577942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/12578031", "body": "I guess an `#ifdef` for MSVC is needed after all.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/12578031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/13505592", "body": "With the PRs I have open currently, MSVC 2015 can be used for the pieces of Folly that HHVM uses. There is no build system in place for MSVC in the main Folly repo.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/13505592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/13506496", "body": "As long as it's not one of the files removed in [HHVM's CMake file](https://github.com/hhvm/hhvm-third-party/blob/master/folly/CMakeLists.txt#L47) for Folly, then it should be supported. (I just realized I apparently have a PR for that that I haven't submitted, as `Subprocess.cpp` is not supported under MSVC) \n\nFor template matching with Format.h under MSVC, there is a fix in [Folly #305](https://github.com/facebook/folly/pull/305/files#diff-9cf63f8fda0a99aa4270be1c2b36f425R777) to help with that.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/13506496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/13507610", "body": "For everything to compile, you need more than just that PR. HHVM builds Folly via CMake, which generates the project file, so the project file I pass along would be of limited use.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/13507610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/13528454", "body": "Update 1 will only be able to eliminate some of the changes, most of them will still be needed. Most of the changes which are #287, are because Windows is not a Posix system, and, as such, doesn't implement a Posix API. There used to be a posix compatibility layer that you could enable in Windows itself, but that wouldn't be able to compile from Visual Studio, nor would it even be using a version of GCC that even supports `constexpr`. The SUA layer was deprecated with Windows 7, and removed in later versions. #287 is implementing the pieces of the Posix API that HHVM uses and that MSVC doesn't implement.\n\nAlso, all of the current PRs I have open are needed to compile under MSVC, the [msvc-current](https://github.com/Orvid/folly/tree/msvc-current) branch of my Folly repo should be able to compile, as it's the state of my current tree.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/13528454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/13531960", "body": "Well, I can't just do a comparison, as it isn't a fork of the main Folly repo, but one thing I can see that you did is try to build without pthreads. [GerHobbelt/pthread-win32](https://github.com/GerHobbelt/pthread-win32) is the PThread implementation I use.\n\nAlso, you added a `unistd.h` header. That's not needed, as `FilePortability.h` replaces `unistd.h` and a few other headers. The same goes for the `CPortability.h` and `SocketPortability.h` headers. \n\nAny particular reason you've disabled the winsock include in `WindowsPortability.h`? `timespec` is defined in there.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/13531960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/16870826", "body": "If my understanding of [strndup](http://linux.die.net/man/3/strndup) is right, `len` is the total number of bytes, including the null terminator. `neededLen` here is the size without the null terminator.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/16870826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/16924772", "body": "I landed a diff to fix this earlier today.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/16924772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/18221173", "body": "Yep, and was already in the process of landing when you asked. It has landed as 82142aa36bdaf2560958014fbe766dd9db60ab69.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/18221173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/19150549", "body": "How did we manage that?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/19150549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/19151136", "body": "I would suspect you're building against an older version of Folly, as, if Wangle didn't build, most of our internal stuff wouldn't be able to either.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/19151136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/19154328", "body": "The function is there in the current version of Folly:\nhttps://github.com/facebook/folly/blob/master/folly/io/async/AsyncSocket.h#L446\n\nAnd Wangle's reference is correct:\nhttps://github.com/facebook/wangle/blob/master/wangle/acceptor/Acceptor.cpp#L241-L252\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/19154328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/19399056", "body": "Feel free to open a PR for this.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/19399056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/22058339", "body": "Yeah, that's known, I just have to figure out how to fix it... And also file a bug report upstream because they just killed the only way I had to get a decent link time for HHVM, as CMake doesn't let you require the 64-bit hosted toolchain, so the 32-bit hosted linker simply doesn't have enough address space to be able to link the >4gb of input libraries all at once, so it goes through an absurdly slow path turning a 5 minute link into a 45 minute link :( :( :(\r\n\r\nIn this case, I probably just need to go poking around with object libraries to make it work correctly, but blargh :(", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/22058339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/22059399", "body": "At the moment Folly is only supported as a static library. I'd need to do a lot of decorating or hook up CMake's auto-export stuff to support it as a shared library. There are also certain things that simply don't translate from linux like they'd need to in order to work right in a shared library context. Singletons are that way IIRC.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/22059399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/22059855", "body": "That's exactly what I'd have to hook up. There's also the static data, which I can probably get MSVC itself to export, though I've not actually tried the switch to see if it actually works. It exists, but isn't documented anywhere :)\r\n\r\nThat still leaves the places where it's expected that a single instance of static local variables in certain templates will ever exist, which is a lot harder to do with PE on Windows and Mach-O on OSX than it is with ELF on Linux.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/22059855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/22301039", "body": "For reference, this is the line that was causing an issue. It was being generated as:\r\n```\r\n-D\"_Has_AUTO_PTR_ETC=1\\\"\r\n```", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/22301039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/22895950", "body": "Looking.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/22895950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/22896025", "body": "-_- I failed to transfer the include I added when I put up the diff internally... Fix incoming.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/22896025/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/22897805", "body": "Fixed in 7afad29326e5f3796ce645bf5b60b4273d8bcaf8", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/22897805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/22939811", "body": "We can get MSVC to behave by outlining the determination of it's `noexcept`'ness into a constexpr function which is enough to get it working. I'm just trying to figure out the exact situation that's causing it so I can report the bug upstream.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/22939811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/23423162", "body": ":( I missed that this had added a reference to launder... ", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/23423162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/23423741", "body": "lol. This should be trivially fixable by splitting it into two instantiation ranges.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/23423741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/24283896", "body": "Yep, I have diffs up internally to fix it. ", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/24283896/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/24284356", "body": "Yep, I'm already working on fixing it :)\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/24284356/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/24330648", "body": "It isn't needed at all, as the only reference is already within the `folly::io` namespace.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/24330648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/facebook/folly/pulls/comments/31406356", "body": "This doesn't quite seem right. Shouldn't it be the other way around?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/31406356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/31406413", "body": "This should be `#if defined(FOLLY_X64)`, which is what normally wraps the pause calls.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/31406413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/34205254", "body": "If this weren't in the C portability header, that would be true, but, as it is in the C portability header, I have kept the file compilable as C. I could do an `#ifdef` for C++ for that though.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/34205254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/34208884", "body": "`FindClose` is indeed what I want, as this is closing the find handle, not a normal handle.\n\nThis returns an int because the standard `closedir` API returns an int. I've added a check for errors on the `FindClose` call, but I won't be marking the function for analysis, as this is intended as a functional portability mechanism, not an extensive API.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/34208884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35586726", "body": "I can certainly do that. My goal with the port was to make as few changes as possible to the code that effects more than just MSVC, which is why I only enabled it for MSVC at the moment.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35586726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35595243", "body": "Yes.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35595243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35594701", "body": "Yes, it is. Looks like it happened when I was extracting the changes into separate PRs.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35594701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35611429", "body": "This is the most permissive license of a proper implementation of this that I could find. It should be the same as the rest of the file, unless I missed something? Re-implementing it is possible, as trying to work around not having it will be more of a pain, as it's used in a few spots in HHVM.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35611429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35709264", "body": "RTM is the release version, it isn't  a prerelease, but there is a good chance that these will be fixed in an update, which is why these are set to go away when the update is released. This is basically future-proofing, as the eventual goal is to remove them completely. \n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35709264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35719969", "body": "I don't typically see `32-bit` as `32-`, even when referenced immediately before `64-bit`. Normally it's just `32`. The same case can be made for `little-`.\n\nEdit:\nJust realized you were making this consistent with the doc-comment, perhaps someone else has an idea over which is better?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35719969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35819217", "body": "That was actually deliberate, and is a result of my own personal form of insanity. As the impact of a second call to `CryptoAcquireContext` is minimal on resource usage, basically just incrementing a reference count, and as `cryptoProv` will be entirely written from a single instruction, there is no possibility of getting part of one thread's info and part of another's. It's perfectly fine for a second thread to be trying to initialize the provider at the same time, that's why it's setting initialized after the provider has been acquired.\n\nIf it's preferred to use a mutex though, I can certainly do that?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35819217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/36029523", "body": "I believe my thought process on that might have come from the way `CryptReleaseContext` is documented. Either way, I've switch this to a proper mutex instead.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/36029523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/36861321", "body": "Have an extra space here\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/36861321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/37140972", "body": "As a side note, what's up with the quotes in this? Why are the opening quotes backticks, but the closing quotes just single quotes?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/37140972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/37260897", "body": "As a random note, GCC does support [Function Multiversioning](https://gcc.gnu.org/onlinedocs/gcc/Function-Multiversioning.html) which would allow this check to be done at runtime rather than compile-time.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/37260897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38266916", "body": "This needs to be wrapped in a `#ifndef _MSC_VER`, because MSVC defines this differently, and doing this will break it.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38266916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/39001478", "body": "Only reason I put it in the root is that it's where the other portability headers will be from #287.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/39001478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/39001542", "body": "I'd ask that of whatever inside std::function is allowing me to get a `void (*)(evutil_socket_t, short, void*)` out of it. All I know is that it does run correctly.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/39001542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/39001719", "body": "I can certainly do that. It's only written this way because I dislike long ternary statements. Also, the cast is needed, as `INVALID_HANDLE_VALUE` is a `HANDLE`, which doesn't implicitly convert to an `intptr_t`.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/39001719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38988342", "body": "It's a utf8 string literal, added as part of c++11, and the only way to get msvc to allow codepoints over ff in a narrow string literal.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38988342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38988462", "body": "Because MSVC is dumb and this condition doesn't work if it's T2.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38988462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/36140515", "body": "Unfortunately it does still need it. I believe that is the version number for the RTM release, so the comment must not have gotten updated. \n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/36140515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38987216", "body": "Ah, woops, hadn't realized that slipped into this PR. It's from #263, which hasn't been merged yet.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38987216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38987254", "body": "See reply above. \n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38987254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38986326", "body": "There are no newer versions currently.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38986326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38986619", "body": "As soon as a newer version is released that fixes these, I fully intend to remove the workarounds.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38986619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38986884", "body": "I'm not certain,  but I believe this is due to MSVC not yet supporting expression SFINAE. Whatever the actual reason MSVC doesn't like the sizeof on an invalid type.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38986884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35820254", "body": "With the windows implementation of pthread, it defines `pid_t` as a `void*`, and `getpid()` returns an `int`. MSVC doesn't like this implicit construction of a pointer from a raw integer and produces an error. Explicitly casting it solves the problem.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35820254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35828342", "body": "Personal habit.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35828342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/37811282", "body": "I'll go with pthread_zero then. I believe I have an additional bit locally for this, and I need to implement a hasher for it for std::hash, as HHVM uses pthread_t as a key.\n\nAlso, I can't do constexpr because the struct doesn't define a constexpr constructor.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/37811282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/37811369", "body": "This is what I need to relocate for proper hashing support.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/37811369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/39001763", "body": "Looks like I messed up when I typed up the posix side of the API.... I'll go through and make sure they all get set to socklen_t where they should be.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/39001763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/39001980", "body": "For the wrappers to work correctly, as I have to implement `close` in a way that also supports socket handles, I need to make sure the defines that remap them to `_*` versions are not used. Those defines are disabled by defining `__STDC__`, however, if I were to define that for everything, I would need a whole lot more wrappers, because that define would disable just about every standard C function if it's not prefixed with an underscore. This means that I have to define it for a select few files. If `__STDC__` is already defined however, I don't need to redefine it. Having the include in multiple places is shorter than wrapping the def/udef pair.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/39001980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/39002006", "body": "I assume there's some way to disable this one? I need that symbol to be named that way.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/39002006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/39002049", "body": "Most of the folly port was written before I got Visual Studio setup to show me a line at 80 columns, so there's going to be a lot of this. I'll go back through and deal with them.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/39002049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/39002146", "body": "Alright, will add the ignores, because that using is needed for this to play nice. Without that using, every single call to any of the socket portability functions would have to be prefixed with `fsp::`. In fact, that is how I originally wrote it, before getting tired of having to change everything and realizing I can just get the compiler to resolve to the correct overload of the function.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/39002146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/39002152", "body": "Not sure how I missed adding the license, woops.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/39002152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/39002236", "body": "All of the portability headers were originally written to be header-only, which meant that the CPortability functions needed to only use C, however I split the bodies out when I started the second port, because otherwise I ended up having to do a recompile of most of HHVM if I changed the body of one of these functions.\n\nAs this is now able to use C++, I'll replace these with `nullptr`.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/39002236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/56054631", "body": "I've had this comment sitting on the Phabricator for a while now, but you probably never saw it:\n\nIf this specifically needs Update 1 or greater, you want _MSC_FULL_VER <= 190023506. All you're doing here is checking that it's MSVC 2015.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/56054631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/60097167", "body": "At the very least, the trailing whitespace here needs to go away.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/60097167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/71198657", "body": "This probably still needs to be here :P\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/71198657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/72454319", "body": "This change was already made.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/72454319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/72871541", "body": "We have that warning enabled enabled even internally. Completely unsetting it will cause it to no longer compile. It has to be set to either 0 or 1.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/72871541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/72871671", "body": "We have those, but we actually only use it in a couple of places. I added them but never got around to switching everything over to them.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/72871671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/73725875", "body": "This check would currently disable this code under MSVC 2015 :(\n\n~~What specifically about it is causing the problem in C++11 mode?~~\nActually, looking at it I see the issue. It needs the trailing `decltype` added.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/73725875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/76683300", "body": "Ideally we should have an alias for this in the GFlags portability header so we continue to work with older versions of GFlags.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/76683300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/79082017", "body": "Any reason we can't just add `/usr/include/libdwarf/` as an extra include path? That would mean these macro checks aren't needed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/79082017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/79082676", "body": "As long as we're poking at this, could you kill the checks for `libelf.h`? We unconditionally reference it as `elf.h` when we `#include` it.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/79082676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/79090045", "body": "What I meant was adjusting the checks so they only check for `elf.h` not `libelf.h`.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/79090045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/79264574", "body": "Make this just `#else`, otherwise it will silently not include `dwarf.h` at all. It's much clearer what an issue is when it says it can't find the header rather than not finding the symbols.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/79264574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/81626957", "body": "It would be better to check for the existence of `clock_gettime` in the configure script rather than inline. \n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/81626957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/81818848", "body": "This needs to also adjust the configure check for `HAVE_BOOST_CONTEXT` to only define it if it's <= v1.60\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/81818848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/88527021", "body": "> @yfeldblum:\n> Would prefer to have this split across lines, one entry per line.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/88527021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/88527491", "body": "> @yfeldblum:\n> Seems like `make check` is missing?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/88527491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/102351663", "body": "Forwarding internal feedback from @igorsugak:\r\n\r\n> Let's unpack it into googletest directory. And update the other part of the patch to remove the version number from the header path please.\r\n> `mv googletest-release-1.8.0 googletest)`", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/102351663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/103290691", "body": "Via @igorsugak:\r\n\r\n> Just one more thing. Would you include these via -isystem? That will prevent warnings from googletest showing up in folly builds, which is what we do internally.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/103290691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/103290902", "body": "Via @igorsugak:\r\n> And here: `s/-I/-isystem /`", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/103290902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105985645", "body": "Via @yfeldblum:\r\n> Can we avoid the preprocessor? Can this be done with another technique, like computing at compile time (post-preprocessor) or at runtime for each expectation whether that statement needs to be run?\r\n\r\nHere and wherever possible.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105985645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105985864", "body": "Via @yfeldblum:\r\n> Remove this file?", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105985864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/106530366", "body": "I might look at adding them directly to the root `.gitignore` eventually, but for now this is fine. :)", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/106530366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/106713990", "body": "Seeing this after the rebase, this entire file should just be removed, as it no longer does anything useful.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/106713990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105987394", "body": "Via @yfeldblum:\r\n> Missing an include guard (`#pragma once` preferably) and a license header.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105987394/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105987574", "body": "Via @yfeldblum:\r\n> Style. If the arguments must be broken across lines, then each one goes on its own line, and each one is indented +4. Here and elsewhere.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105987574/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105987895", "body": "Via our internal linter:\r\n> Single-argument constructor `IOStreamBuf(const folly::IOBuf* head)` may inadvertently be used as a type conversion constructor. Prefix the function with the `explicit` keyword to avoid this, or add an `/* implicit */` comment to suppress this warning.\r\n\r\nIn this case, marking it as `explicit` is the correct solution.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105987895/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105988061", "body": "Via @yfeldblum:\r\n> Style. Prefer const-on-the-right in new code. `IOStreamBuf const&`. Here and elsewhere.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105988061/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105988301", "body": "Via @yfeldblum:\r\n> Style. `, ` (with space) between template arguments. Here and elsewhere.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105988301/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105988433", "body": "Via @yfeldblum:\r\n> Need only `override`, not also `virtual`. Here and elsewhere.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105988433/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105988804", "body": "Via @yfeldblum:\r\n> Style. Include with the full include path, ie. `folly/io/IOStreamBuf-inl.h`.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105988804/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105988999", "body": "Via @yfeldblum:\r\n> Style. `if` requires `{}`. Here and elsewhere.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105988999/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105989160", "body": "Via @yfeldblum:\r\n> Can also use `std::find_if` here.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105989160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105989534", "body": "Via @yfeldblum:\r\n> This is very long. At the very least, split it into three private member functions for the three possible values of `way`, since the implementations for the three code paths share no code.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105989534/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105989663", "body": "Via @yfeldblum:\r\n> Can drop the first entry to the next line, for style.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105989663/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/116585396", "body": "This is currently being defined by the CMake build system because it's a requirement for any external code using the library to do the same, otherwise any Windows header included before this will break the assumptions of this code.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/116585396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/116637471", "body": "You need quite a few other defines to prevent a lot of other warnings being generated if you want to use more than a select few parts of Folly. See https://github.com/facebook/folly/blob/master/CMake/FollyCompiler.cmake#L226-L232\r\n\r\nIn theory, some of them can be shifted into here, but some extra work will be required to shift the rest, along with more beyond that to deal with the defines to keep it from warning on all of the use of the non-underscore-prefixed version of a lot of functions.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/116637471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/117295917", "body": "Ah, yep, sorry, I've been mostly out of the office for the last week. The right fix is definitely to add some of the defines here, but in order to do that, an extra check needs to be added to ensure that `Windows.h` and winsock haven't been included before this header is included.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/117295917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/117543281", "body": "`NOMINMAX`, `WIN32_LEAN_AND_MEAN` and `_WINSOCK_DEPRECATED_NO_WARNINGS` are the only defines that can live here. The rest of the defines need to stay where they are, as they effect things other than the headers that this includes.\r\n\r\nIf either `_WINDOWS_` or `_WINSOCK2API_` is defined, this needs to be a hard `#error`. Folly won't work if `NOMINMAX` isn't defined.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/117543281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/119430339", "body": "Is this already set at this point? In the Visual Studio generators, this value doesn't get set until the first project with C++ enabled is created.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/119430339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/119456816", "body": "Unfortunately, no, as you can't change the generator toolset after the compiler has been tested :( Once I get the reason #589 was needed resolved, it should be possible to move this entire check into `FollyCompiler.cmake`.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/119456816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/119477566", "body": "I've put up a diff internally with this commit: https://github.com/Orvid/folly/commit/a440e8609f38b60bbc1d26cb53c7be95b5941603\r\n\r\nIt should let the ninja build use whichever compiler is available, along with getting rid of all of the special casing and the need for #589.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/119477566/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/128820326", "body": "Github won't let me add the comment there, but does this also need to check for surrogates (see line 120)", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/128820326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/145186097", "body": "This line is still needed, for folly-config.h IIRC.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/145186097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "xuyanbo-fb": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/b5750c50fc8348d61cd43d4fda623f6e64ddadb0", "message": "Revert D6579707: [folly/ConcurrentHashMap] Fix erase in Iterate\n\nSummary:\nThis reverts commit a45f47a53e106d22daa9cf57be6c40c4f6a430d9\n\nbypass-lint\n\nDifferential Revision: D6579707\n\nfbshipit-source-id: 6f6c35de5e05f8cf37491471e1ae1272290fe61b"}, {"url": "https://api.github.com/repos/facebook/folly/commits/baa03294ee862eb532108797267dc72497afaa16", "message": "Fix erase in Iterate\n\nSummary:\nThe iterator returned from erase api could skip nodes. The fix is to\ninitialize the returned iterator with right value.\n\nReviewed By: djwatson\n\nDifferential Revision: D6579707\n\nfbshipit-source-id: a45f47a53e106d22daa9cf57be6c40c4f6a430d9"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "scv119": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/f5882bb6415b07aaa5d74199a16c610f6da7824c", "message": "Fix xlog docs\n\nSummary: When I was investigating the difference between glog/xlog I encountered this.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6572117\n\nfbshipit-source-id: 4130deb6cfed7cfb7d2433cdab292481beb2469f"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "knekritz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/5acf7b9277cbead28d6a3e5042aed8b7de109e35", "message": "Move security protocol and application protocol APIs to AsyncTransport.\n\nSummary: They belong here rather than AsyncTransportWrapper.\n\nReviewed By: siyengar\n\nDifferential Revision: D6568209\n\nfbshipit-source-id: 0856dba0b2d527ae68d33942b28e2c485a5b1f46"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/13828301", "body": "Should be fixed with b4c40ee9da8183d78bf5506562e9c241f659f71b.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/13828301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "terrelln": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/2c8c7ee0d43110856d9974a925f374a772786bc5", "message": "Pass ZSTD_CONTENTSIZE_UNKNOWN\n\nSummary:\nContent size 0 as unknown is deprecated.\nSee code comments for details.\n\nReviewed By: felixhandte\n\nDifferential Revision: D6521582\n\nfbshipit-source-id: 876b94cc0123c1020b456cc8f4cd86997afe0619"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "andrewjcg": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/90ce64f987677e11200729afa6bb9c4b64caf01e", "message": "Fix some clang build failures on aarch64\n\nReviewed By: Orvid\n\nDifferential Revision: D6387412\n\nfbshipit-source-id: 4c1424ed4fa49e69885de8cd72e78169314fc502"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/6139592", "body": "Thanks for reporting this!  Fixed in 9c2924258bee193d267f85e598ea5abf72cb267f.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/6139592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/6139641", "body": "We currently don't test/build on OpenSuse, so its not surprising that there are some issues.  I'll look to get an install of this working shortly.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/6139641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "mbouaziz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/fe9d8cadb9bba9ddc7ea151f779458b8dc1904cd", "message": "Removed dead IsSomeVector\n\nSummary: deadcode\n\nReviewed By: ddrcoder\n\nDifferential Revision: D6498754\n\nfbshipit-source-id: 9dda0ade6928d648b8938a06b185e430753f2318"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "andriigrynenko": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/f19e2b86e49ad30f2279262a672be852283644d2", "message": "Fix SignalHandlerTest with ASAN\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6503762\n\nfbshipit-source-id: f82b88c401979761053004eadd2e4c6a74f05f9c"}, {"url": "https://api.github.com/repos/facebook/folly/commits/8bfce3ed35f7597ce59278a845e9be6d75609a41", "message": "Fix ASAN failure in FutureDAG test\n\nSummary: dogscience\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6387604\n\nfbshipit-source-id: 3e33da3e3c6801d6e2186637c8fb6adaf1eef6f6"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lbrandy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/989c511267f61b5b172c92f39a05f1bf35392ab5", "message": "fix ubsan-detected UMR in TemporaryFile\n\nSummary:\nMove constructors are just like any other constructors. `this` is not in a valid state. You aren't supposed to destroy `this` before move-constructing it.\n\nThis was detected by ubsan stress runs.\n\nUBSAN report:\n\n```\n[ RUN      ] TemporaryFile.moveCtor\nfolly/experimental/TestUtil.cpp:91:20: runtime error: load of value 3, which is not a valid value for type 'bool'\n [ failed: 1 ]\n ````\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6501500\n\nfbshipit-source-id: 83bd0525ac2c1f5951f70f5596034bb6cb0ca985"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/75842408", "body": "I've committed your patch to our internal repository. Next public push should auto-close this PR. \n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/75842408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76046113", "body": "Do we actually require gtest 1.7? \n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76046113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76047164", "body": "Oh my. Yes indeed.\n\n```\nfolly/test/StringTest.cpp:227: Failure\nValue of: uriEscape<std::string>( \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_.~\")\n  Actual: \"abcdefghijklmnopqrstuvwxy%7aABCDEFGHIJKLMNOPQRSTUVWXY%5a-_.~\"\nExpected: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_.~\"\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76047164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76439095", "body": "I think someone internally beat you to this (this will go out with the next publish push), I'll follow up. \n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76439095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76443140", "body": "I've raised this issue internally, but my initial thoughts are that I'm not sure we can accept this pull request because it's very unlikely we can and would be willing to maintain or support this going forward. Realistically, we're going to keep breaking this support. \n\nThe only way something like this would work is if you, or someone like you, is willing to put in the time to keep it up to date. I think that would be better as a separate branch that you maintain. If you are long-term committed to keeping such a branch maintained, I'd even add a link to your branch in our docs to help others find it. \n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76443140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76458760", "body": "I've committed this internally and will go out in the next public sync (which I'll hopefully do later today). This should autoclose then. \n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76458760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76484212", "body": "I've committed this internally and will go out in the next public sync (which I'll hopefully do later today). This should autoclose then.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76484212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76484242", "body": "I've committed this internally and will go out in the next public sync (which I'll hopefully do later today). This should autoclose then.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76484242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76545262", "body": "Not until we push the changes to this repo. There's a handful of other changes I got hung up on so I didn't do it on Friday.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76545262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/77308873", "body": "I committed your patch internally and this PR should auto-close next time we sync it to github.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/77308873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "spjspjspj": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/bda67fde120837b77ddab74f23abcb22ae5b3029", "message": "Fix RequestContext held too long issue in EventBase\n\nSummary:\nUpon debugging for the attached task, it appears to me the problem are in two places:\n. After a callback has been run, context_ wasn't reset\n. After a callback has been canceled, context_ wasn't reset\n\nIn this diff:\n. Fix these two places.\n. Updating unit tests to cover these two cases.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6465788\n\nfbshipit-source-id: 85b3b29dc80c9f3971c85f302385d41ded44fa0e"}, {"url": "https://api.github.com/repos/facebook/folly/commits/acbd746f5036bf795cc62022f0114b4b08032d82", "message": "Reset context shared_ptr in AsyncTimeout::cancelTimeout()\n\nSummary:\nThis seems to fix issue in the attached task.\n\n`context_` is set in `scheduleTimeout()` and never gets reset. So when an AsyncTimeout object is held across requests by objects like `IOThreadPool0` in I/O Thread Pool used by wangle/acceptor/ConnectionManager, RequestContext object created for the last request is leaked until `IOThreadPool0` handles another request and overrides `context_`. In the issue described in attached task, unit test has single request, next request never comes in, RequestContext doesn't end until test service stops, logging feature relying on RequestContext dtor doesn't get called in time, and thus unit test fails.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6402268\n\nfbshipit-source-id: 200c6d358dfa6d7d9aa68ab05f6f1c7f4117b0ec"}, {"url": "https://api.github.com/repos/facebook/folly/commits/aa7f8dcd47b82f753862919d3456a961b30c0ab4", "message": "get rid of redundant calls to RequestContext::saveContext()\n\nSummary:\nIn the past, these calls were required.\n\nUsed to solve static destruction ordering issue.  Any static object that uses RequestContext must call this function in its constructor.\n\nThat is when we were using `static folly::ThreadLocal<std::shared_ptr<RequestContext>>`, which was non-leaky.\n\nThe problem being addressed is when we have some code of the form:\n\n```lang=c++\nvoid doWork() {\n  static EventBase eb;\n}\n```\n\nBut now we are using `SingletonThreadLocal<std::shared_ptr<RequestContext>>`, which is leaky.\n\nSo the issue that these calls were there to address seems to have been resolved.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6332597\n\nfbshipit-source-id: c6aba6620ef2fb3a344ea20f56c8b9c0cdf42c70"}, {"url": "https://api.github.com/repos/facebook/folly/commits/ba4282e472390a2d9ba23672b8844b9f23db0916", "message": "Remove unnecessary white line\n\nSummary:\nSeems to be causing rendering error:\n\n{F114885894}\n\nCreated from Diffusion's 'Open in Editor' feature.\n\nReviewed By: lskuff\n\nDifferential Revision: D6358188\n\nfbshipit-source-id: 3c437007b425bcadb79a71807ad92d520a70e8cb"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "anirudhvr": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/192d78d40551ec5d9aade5ca72dd6e33ad700a2b", "message": "Add wrapper for getting X509_digest from a cert\n\nSummary:\nX509_digest, or the \"fingerprint\" of the cert, is useful to identify\ncertificates with the same CN/SANs. This adds an API to get the SHA1 or SHA256\ndigest of a cert.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6457917\n\nfbshipit-source-id: 148a5a2270e938b39065e00d7947c2fc57cd7f75"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/19402299", "body": "Good point @zonr, I can fix it as well if you don't have a PR inflight.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/19402299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/facebook/folly/pulls/comments/94264204", "body": "@zonr This is automatically included by other headers; you shouldn't need this.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/94264204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "igorsugak": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/d08cf1621ac39b4a23e9f4508222700ce68e9d4a", "message": "unify FOLLY_SANITIZE existing uses and add a few new\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6453972\n\nfbshipit-source-id: fa083c0b782188f5f45a2a354045aee03e528829"}, {"url": "https://api.github.com/repos/facebook/folly/commits/b71a1b76b3dd7d63bc1d27ed292ddb604fdd9388", "message": "fix build when sanitizers are enabled and jemalloc is disabled\n\nSummary: Add preprocessor checks to guard jemalloc headers if any sanitizer is enabled.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6441578\n\nfbshipit-source-id: 85364fca5af33c95cd05f232d1e3f9cbac9a4120"}, {"url": "https://api.github.com/repos/facebook/folly/commits/614eb71734a284e1a9fefabcc48743a3c8efd653", "message": "add FOLLY_SANITIZE macro\n\nSummary: Most of the time we want to guard some code when any of the sanitizers are enabled not just one.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6429720\n\nfbshipit-source-id: 7157a0a13f2b2acabd36a19c61b9fdbf38ba96b8"}, {"url": "https://api.github.com/repos/facebook/folly/commits/2bbf87af3ab2fa277c9a9a81d907d754ccf28c50", "message": "fix asan build\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6332075\n\nfbshipit-source-id: 26a279b6ee4253a8be8f9f63e6900c2082a5486d"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "binliu19": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/df9c2e3e07c9a5ae2052304cfc368791d8bc3644", "message": "fix ASAN build\n\nSummary:\nFix bug in non-jemalloc build.\n\n(Note: this ignores all push blocking failures!)\n\nReviewed By: igorsugak\n\nDifferential Revision: D6451342\n\nfbshipit-source-id: 44725d4e0c685a59325fa3d08877d0f62120c5c2"}, {"url": "https://api.github.com/repos/facebook/folly/commits/ee207f19892790e091082cc7c7ab8c5df0398061", "message": "make `usingJEMalloc()` a constexpr when USE_JEMALLOC is defined\n\nSummary: This would save some function calls and reduce code size if we know we will use jemalloc.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6411810\n\nfbshipit-source-id: 9db471678e473945f5f00354c0a1285ecdb91de6"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "guoxiao": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/277bd447ad955b546ab248aa170004d1e3e9cd70", "message": "Link to unwind when using symbolizer\n\nSummary:\nFix #673\nCloses https://github.com/facebook/folly/pull/715\n\nReviewed By: meyering\n\nDifferential Revision: D6394731\n\nPulled By: yfeldblum\n\nfbshipit-source-id: fb92828d0c633278601125dbc64cadf0cdbaa7fe"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/folly/pulls/comments/72881174", "body": "Sorry. I didn't notice that. \nI just added the header so that it can be build, but now I think it's not a right way to solve the problem.\nI couldn't find `std::abs<T>` in any C++ headers. I can only find `std::abs()` and `std::abs<complex<T>>`. I think the author may want to use the former rather than the latter.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/72881174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "aorenste": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/f9953b79c493c19f54ffe827275ddf21f00a7b58", "message": "Add -Werror to -Wshadow-local and -Wshadow-compatible-local warning check\n\nSummary:\nWithout -Werror Apple LLVM will print a warning about -Wshadow-local\nand -Wshadow-compatible-local but won't fail.  This causes problems for\ndownstream code which uses -Werror.\n\nReviewed By: meyering\n\nDifferential Revision: D6375771\n\nfbshipit-source-id: 4ac3a4ff46bdb76f1f07b0c8ba479a7d404c8c9b"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Mizuchi": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/79376dc7937cd38c10c0c632e3b39c6955ebd734", "message": "fix SingletonTest\n\nSummary: There is no guarantee that this code will finish in 6 seconds (nor other threads will release singleton in 5 seconds), especially in ASAN mode. Though I don't have better idea, this diff will relax the condition in ASAN mode to make the unit-test less flaky.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6371692\n\nfbshipit-source-id: 58dd15cc0b3273719314c8b323ba88ee47e8ff61"}, {"url": "https://api.github.com/repos/facebook/folly/commits/bcd0d7827683c1dd8a8d6d1820af7b53c7f20b43", "message": "reduce the number of iteration when test SharedMutexTest in ASAN mode\n\nSummary: This unit-test takes too long to finish in ASAN mode from heavily loaded system (more than 10 minutes).\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6362111\n\nfbshipit-source-id: b097eff60f88ace4fb869132598806700804e267"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pixelb": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/13cc05eaec5c19feaedc0b7fec17a6272f4b3f83", "message": "folly: support FOLLY_FALLTHROUGH on GCC\n\nSummary:\nThis is required to avoid new GCC 7 -Wimplict-fallthrough warnings.\nWe also update to use the C++17 [[fallthrough]] attribute if supported.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6367140\n\nfbshipit-source-id: d5380983cb300f944df9c2885d0faa0155994be7"}, {"url": "https://api.github.com/repos/facebook/folly/commits/ef20f6380813110434dae416f0abe964e476c8c6", "message": "folly: fix sysMembarrier() with newer kernel headers\n\nSummary:\nWhen __NR_membarrier is defined (on newer kernels),\nwe don't define the constants, but also by default\ndon't include the membarrier header to define the necessary constants.\nTherefore split the definition of the syscall value and\nthe constants used with it, to ensure both are defined.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6292178\n\nfbshipit-source-id: 31ba9d4a698a4f5e14ae34de0acf8f851d75527d"}, {"url": "https://api.github.com/repos/facebook/folly/commits/18de341f84035f76395347f77a8cc71d0461ab37", "message": "folly: avoid compile warning/failure due to lvalue-to-rvalue conversion\n\nSummary:\nWith gcc 7.2 we get the warning:\n  folly/io/async/DelayedDestructionBase.h:252:20:\n  error: parameter \u2018right\u2019 set but not used [-Werror=unused-but-set-parameter]\n     std::nullptr_t right) {\n                    ^~~~~\nI presume this is due to the implicit conversion, hence the named parameter is\nnever assigned.  Instead we use an explicit nullptr.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6279302\n\nfbshipit-source-id: ed449601b0410c178777f20e82ed09d9097bd024"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105985768", "body": "It would be more general to filter all options except the -l we want to process. I.E.:\r\n\r\n    do echo $l | $SED -n '-e 's%\\(-l.*\\)%-e s/\\1//p%'", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105985768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "siyengar": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/54b16a23784d48f1a3b56ff0c33bdf7fdfe46355", "message": "Add unit test for timeout=0\n\nSummary:\nAdd unit test for immediate timeout since\nwe're using it in a few places.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6327012\n\nfbshipit-source-id: ea80763d080b06e2a43277118d3147dc8016f348"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "benjibc": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/76328b6ed4e32235858e312d34b7abaed994584b", "message": "allow small vector to be storage for sorted_vector_map\n\nSummary:\nthis is to allow small_vector to be a storage option for sorted_vector_map. Reas\non I want to do this is because in ads there are a lot of small maps where we wo\nuld have to allocate separately.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6318811\n\nfbshipit-source-id: b145d1bef2cbbeb946995aa66b55aaadeb6c54f5"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fried": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/cf9ba53a0e3635074b2117f471d6741f3a2396ba", "message": "Add ByteRange/StringPiece Conversion for Cython\n\nSummary:\nMoving the cython definition to folly/python.\nAdding simple conversion helper to_bytes\n\nThis is to cut down on duplicate folly::range cython definitions\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6291125\n\nfbshipit-source-id: 314b732a1516a03fb5c9a57939552bbabd81970b"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dorserg": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/ec525ab7f208f6eb653b74adad345862875772f5", "message": "fix typo in Subprocess.h comments\n\nSummary: (Note: this ignores all push blocking failures!)\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6299313\n\nfbshipit-source-id: 95be2339f4845502e3c446698e54643eeac8055f"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shubhanshu04": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/b529367b595dd4da7e70569cbea36d30ace4fa39", "message": "adding a fibers compatible once flag\n\nSummary:\nThe current folly::once_flag is not compatible with folly fibers\nand when using it with fibers is inefficient and also cause deadlocks.\n\nThis diff makes the once flag's mutex be a templatable paramter\nand overrides it in fibers library with a fiber compatible mtuex.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6288508\n\nfbshipit-source-id: 6f82e1794d1f417f8d267061f1702a26a7b4ff12"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "WillerZ": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/9f29d67aaec18d09ec6c7f27ad6432f6fc9fa460", "message": "Make ColdClassTest work on ancient compilers\n\nSummary:\nSome older versions of GCC/glibc/etc do not have the\nstd::is_trivially*_constructible or std::is_trivially*_assignable traits.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6285887\n\nfbshipit-source-id: 1eb4ae4f899dc1f528321f9f087390291687aca3"}, {"url": "https://api.github.com/repos/facebook/folly/commits/72d6102e41ad80baa66a2b0f9166be3e8066880b", "message": "Actually mark Unexpected as cold\n\nSummary:\nTesting indicates that GCC ignores the cold attribute when the function\nis available for inlining. Because Unexpected is a template class we\ncan't make the constructors non-inline, but we can make it derive from a\nclass with a cold constructor, which has the effect of making all the\nUnexpected constructors implicitly cold.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6261013\n\nfbshipit-source-id: 482e49253d5b104742018133c53fb60279dd9f9b"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "palmtenor": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/folly/commits/bb8d886a25225b1811f2fc890c8f77b59c1d1578", "message": "Add parsing for indirect functions\n\nSummary:\nCurrently `folly::symbolizer`'s `getDefinitionByAddress` and `getSymbolByName` only parses `STT_OBJECT` and `STT_FUNC`. There are some standar library functions that uses the GNU indirect function feature that would have been missed:\n\n  ==== For libpthread-2.23.so:\n  ====== Symbol system Addr 119d0 Size 8 is a STT_GNU_IFUNC\n  ====== Symbol siglongjmp Addr 10700 Size 8 is a STT_GNU_IFUNC\n  ====== Symbol longjmp Addr 10700 Size 8 is a STT_GNU_IFUNC\n  ====== Symbol __vfork Addr 10af0 Size 8 is a STT_GNU_IFUNC\n  ====== Symbol vfork Addr 10af0 Size 8 is a STT_GNU_IFUNC\n  ====== Symbol system_ifunc Addr 119d0 Size 8 is a STT_GNU_IFUNC\n  ====== Symbol longjmp_ifunc Addr 10700 Size 8 is a STT_GNU_IFUNC\n  ====== Symbol vfork_ifunc Addr 10af0 Size 8 is a STT_GNU_IFUNC\n  ====== Symbol siglongjmp_ifunc Addr 10700 Size 8 is a STT_GNU_IFUNC\n  ====== Symbol __vfork_ifunc Addr 10af0 Size 8 is a STT_GNU_IFUNC\n  ====== Symbol __vfork@GLIBC_2.2.5 Addr 10af0 Size 8 is a STT_GNU_IFUNC\n  ====== Symbol siglongjmp@GLIBC_2.2.5 Addr 10700 Size 8 is a STT_GNU_IFUNC\n  ====== Symbol vfork@GLIBC_2.2.5 Addr 10af0 Size 8 is a STT_GNU_IFUNC\n  ====== Symbol system@GLIBC_2.2.5 Addr 119d0 Size 8 is a STT_GNU_IFUNC\n  ====== Symbol longjmp@GLIBC_2.2.5 Addr 10700 Size 8 is a STT_GNU_IFUNC\n\n  ==== For libc-2.23.so:\n  ====== Symbol __gettimeofday Addr c05e0 Size a8 is a STT_GNU_IFUNC\n  ====== Symbol strcpy Addr 8e150 Size 35 is a STT_GNU_IFUNC\n  ====== Symbol wmemcmp Addr afb50 Size 37 is a STT_GNU_IFUNC\n  ====== Symbol strncmp Addr 8eb30 Size 41 is a STT_GNU_IFUNC\n  ====== Symbol stpncpy Addr 929f0 Size 35 is a STT_GNU_IFUNC\n  ====== Symbol __mempcpy_chk Addr 11cec0 Size 68 is a STT_GNU_IFUNC\n  ====== Symbol strncpy Addr 903d0 Size 35 is a STT_GNU_IFUNC\n  ====== Symbol time Addr c0500 Size a8 is a STT_GNU_IFUNC\n  ====== Symbol strpbrk Addr 90700 Size 22 is a STT_GNU_IFUNC\n  ====== Symbol strspn Addr 90a80 Size 22 is a STT_GNU_IFUNC\n  ====== Symbol __stpncpy Addr 929f0 Size 35 is a STT_GNU_IFUNC\n  ====== Symbol __strcasecmp Addr 92a80 Size 54 is a STT_GNU_IFUNC\n  ====== Symbol memset Addr 92230 Size 41 is a STT_GNU_IFUNC\n  ====== Symbol strstr Addr 916b0 Size 21 is a STT_GNU_IFUNC\n  ====== Symbol strcspn Addr 8e270 Size 22 is a STT_GNU_IFUNC\n  ====== Symbol memcmp Addr 91c40 Size 37 is a STT_GNU_IFUNC\n  ====== Symbol mempcpy Addr 923b0 Size 68 is a STT_GNU_IFUNC\n  And 80 more...\nThis Diff adds parsing for `STT_GNU_IFUNC` symbols as well\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6282727\n\nfbshipit-source-id: 71b7c44831e4ddfdccf1e794cb86e049e14227bc"}, {"url": "https://api.github.com/repos/facebook/folly/commits/ef4c72233eea8e9ef283dc74a3f48dc4e755e35a", "message": "Add a multi-type version of iterateSectionsWithType\n\nSummary:\nWhen using `folly::symbolizer`, it's very often that we want to use `iterateSectionsWithType` iterate through sections of a few types using the same callback. Current approach would require iterating the section header multiple times.\n\nThis Diff add `iterateSectionsWithTypes`, which is basically just `iterateSectionsWithType` but accepts multiple section types.\n\nIt is very similar to D6279651. However, in this Diff we did not change implementation of `getDefinitionByAddress` and `getSymbolByName`, since going through `.dynsym` separately would improve the efficiency of single-address or single-symbol lookup. However, for the use cases that we want to iterate through all symbols of an ELF file, this new interface would be useful.\n\nReviewed By: anakryiko, yfeldblum\n\nDifferential Revision: D6281449\n\nfbshipit-source-id: f9afe0a0e95d9fafcd041014abad8ca86d1a882f"}, {"url": "https://api.github.com/repos/facebook/folly/commits/fddc63383b0b0c848da3a7147327481c88f6c44e", "message": "Add a multi-type version of iterateSymbolsWithType\n\nSummary:\nWhen using `folly::symbolizer`, it's very often that we want to use `iterateSymbolsWithType` iterate through symbols of a few types using the same callback. Current approach would require iterating the section multiple times.\n\nThis Diff adds `iterateSymbolsWithTypes`, which is basically just `iterateSymbolsWithType` but accepts symbol types.\n\nThis Diff also updated implementation of `getDefinitionByAddress` and `getSymbolByName` which currently does two iterations for `STT_OBJECT` and `STT_FUNC`.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D6279651\n\nfbshipit-source-id: a661dd15f18e4f2f63dbcca615f5a86d92e528ea"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stryku": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/folly/pulls/739", "title": "Improve `folly::detail::apply_tuple::sum()` compilation time", "body": "Hello,\r\n\r\nI've done some benchmarks and results are that `initializer_list` version's compilation time is better than the recursive one.\r\n\r\nBenchmarks pseudocode:\r\n```\r\nfor compiler in [clang, gcc]\r\n    for implementation in [folly, initializer_list]\r\n        for number_of_elements_to_sum in [0, 700]\r\n             get average compilation time from 500 runs\r\n```\r\n\r\n`initializer_list` version can be easily compiled with g++-4.9 and `-std=c++14`: [live demo](https://gcc.godbolt.org/#g:!((g:!((g:!((h:codeEditor,i:(j:1,lang:c%2B%2B,source:'%23include+%3Cinitializer_list%3E%0A%23include+%3Cutility%3E%0A%0Ainline+constexpr+std::size_t+sum()%0A%7B%0A++++return+0%3B%0A%7D%0A%0Atemplate+%3Ctypename...+Args%3E%0Ainline+constexpr+std::size_t+sum(std::size_t+v1,+Args...+vs)%0A%7B%0A++++return+((void)std::initializer_list%3Cstd::size_t%3E%7B+(v1+%2B%3D+vs)...%7D,+v1)%3B%0A%7D%0A%0Aint+main()%0A%7B%0A++++return+sum(1,+2,+3,+4,+5)%3B%0A%7D'),l:'5',n:'0',o:'C%2B%2B+source+%231',t:'0')),k:46.23472602529305,l:'4',m:100,n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:g490,filters:(b:'0',binary:'1',commentOnly:'0',demangle:'0',directives:'0',execute:'1',intel:'0',trim:'1'),lang:c%2B%2B,libs:!(),options:'-std%3Dc%2B%2B14+-O3+-Wall+-Wextra',source:1),l:'5',n:'0',o:'x86-64+gcc+4.9.0+(Editor+%231,+Compiler+%231)+C%2B%2B',t:'0')),k:24.950950497244254,l:'4',m:100.00000000000001,n:'0',o:'',s:0,t:'0'),(g:!((h:output,i:(compiler:1,editor:1),l:'5',n:'0',o:'%231+with+x86-64+gcc+4.9.0',t:'0')),k:28.81432347746272,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4)\r\n\r\nFull benchmarks code you can find in the repo: [https://github.com/stryku/initializer_list_vs_recursion](https://github.com/stryku/initializer_list_vs_recursion)\r\n\r\nResults:\r\n```\r\n+-------------+------------------+-----------------+----------------------+-----------------------------------------+\r\n|  compiler   |  implementation  | elements_to_sum | compilation_time [s] | initializer_list/folly (less is better) |\r\n+-------------+------------------+-----------------+----------------------+-----------------------------------------+\r\n| clang++-5.0 | folly            |               0 |         0.0277947369 | N/A                                     |\r\n| clang++-5.0 | folly            |             700 |         0.4494450464 | N/A                                     |\r\n| clang++-5.0 | initializer_list |               0 |         0.0278800993 | 100.31%                                 |\r\n| clang++-5.0 | initializer_list |             700 |         0.0353267112 | 7.86%                                   |\r\n| g++-6       | folly            |               0 |          0.017156394 | N/A                                     |\r\n| g++-6       | folly            |             700 |         0.3842612844 | N/A                                     |\r\n| g++-6       | initializer_list |               0 |         0.0171618567 | 100.03%                                 |\r\n| g++-6       | initializer_list |             700 |         0.0260685649 | 6.78%                                   |\r\n+-------------+------------------+-----------------+----------------------+-----------------------------------------+\r\n```\r\n\r\nWhat do you think?", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129439099", "body": "Yes, `StrictDisjunction` already exists so `IsOneOf` can be simply an above alias, not a new structure. Not sure if I understood you right", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129439099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129440384", "body": "Done", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129440384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129443141", "body": "Ahh, sorry. I read `StrictConjunction` instead of `StrictDisjunction` and wasn't able to understand how would you like to create `StrictConjunction` without the `Negative`s, my bad.\r\n\r\nAnd yes, there is no `StrictDisjunction` yet. I'll create one and update the pr.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129443141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129444722", "body": "Updated", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129444722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129460091", "body": "Good point. I've created helpers for clarity", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129460091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129725874", "body": "~~I think none. Compiler claims that the parameter pack is not expanded if those are aliases.~~\r\nApparently it compiles just fine with aliases. Don't know why I thought it won't.\r\n\r\nEDIT\r\nSorry, didn't see that you were asking @ericniebler\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129725874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129812912", "body": "Done.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129812912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129813126", "body": "Done. I've updated the commit.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129813126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129809291", "body": "Besides that I'll remove `AllTrue`, `AllFalse` etc. IMHO they're named well. Names `AllOf`, `AnyOf` etc. suggests that they take some kind of predicate and check all types against it (like in the STL), don't you think?\r\n\r\n\r\n>I prefer to keep the API small and simple. \r\n\r\nThat was my problem. I thought about folly as a library that need to provide as wide API as possible. Now I understand that new stuff shall be added when there is a need.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129809291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "flarnie": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/folly/pulls/719", "title": "Add `CONTRIBUTING` and `CODE_OF_CONDUCT`", "body": "Hi! I noticed this repo could use some documentation to help new contributors.\r\n\r\n\r\n\r\n**why make this change?:**\r\nRegarding the `CONTRIBUTING.md` -> Including instructions for new contributors to open source is a courtesy that will foster a welcoming and safe open source community at Facebook.\r\n\r\nRegarding the Code of Conduct ->\r\n\r\nFacebook Open Source provides a Code of Conduct statement for all\r\nprojects to follow, to promote a welcoming and safe open source community.\r\n\r\nExposing the COC via a separate markdown file is a standard being\r\npromoted by Github via the Community Profile in order to meet their Open\r\nSource Guide's recommended community standards.\r\n\r\nAs you can see, adding this file will improve [the folly community profile](https://github.com/facebook/folly/community)\r\nchecklist and increase the visibility of our COC.\r\n\r\n**test plan:**\r\nViewing it on my branch -\r\n<img width=\"1014\" alt=\"screen shot 2017-12-03 at 4 10 05 pm\" src=\"https://user-images.githubusercontent.com/1114467/33531641-cd914672-d844-11e7-8e27-4368c85fb5cd.png\">\r\n<img width=\"1006\" alt=\"screen shot 2017-12-03 at 4 10 14 pm\" src=\"https://user-images.githubusercontent.com/1114467/33531642-cda91450-d844-11e7-97fd-513961779e91.png\">\r\n\r\n**issue:**\r\ninternal task t23481323", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "badarihp": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/folly/pulls/710", "title": "Added addFuture function , which accepts function, expiry time, expir\u2026", "body": "Added new function addFuture which can accept a function, expiry time, and expiry callback function.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dryganets": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/folly/pulls/653", "title": "Handle 4-byte unicode code points.", "body": "https://github.com/facebook/folly/pull/640\r\nreworked to have a surrogate check for the 4th symbol.\r\n\r\nWe need it for react-native to make sure that invalid symbols will be correctly skipped in case somebody passes a corrupted string to javascript core.\r\n\r\nNeeds to be backported to 2016.09.26.00 to fix the following issue in react-native:\r\n#10756\r\n```\r\nFatal Exception: java.lang.RuntimeException: Failed to create String from JSON\r\n       at com.facebook.react.bridge.queue.NativeRunnable.run(NativeRunnable.java)\r\n       at android.os.Handler.handleCallback(Handler.java:739)\r\n       at android.os.Handler.dispatchMessage(Handler.java:95)\r\n       at com.facebook.react.bridge.queue.MessageQueueThreadHandler.dispatchMessage(MessageQueueThreadHandler.java:31)\r\n       at android.os.Looper.loop(Looper.java:234)\r\n       at com.facebook.react.bridge.queue.MessageQueueThreadImpl$3.run(MessageQueueThreadImpl.java:193)\r\n       at java.lang.Thread.run(Thread.java:818)\r\n```\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Yeolar": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/folly/pulls/619", "title": "fixtypo", "body": "Miss putMessages test at folly/io/async/test/NotificationQueueTest.cpp", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "petr-tik": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/folly/pulls/618", "title": "Hyphen typos", "body": "Removed spaces after some hyphens inside compound words", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tedjp": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/folly/pulls/554", "title": "IOStreamBuf (istream/basic_streambuf adaptor for IOBuf)", "body": "Allows chained `IOBuf`s to be read via `std::istream` without having to coalesce them into a single contiguous buffer first.\r\n\r\nWorks with any single-byte type, eg. `char` or `uint8_t`. Not currently usable on multi-byte types like `wchar_t` due to the extra complexity involved in recomposing multi-byte characters that are split across `IOBuf` boundaries. (`static_assert` prevents use with multi-byte types.)\r\n\r\nCurrently read-only; cannot be used with a `std::ostream`.\r\n\r\nDepends the `io/test/Makefile.am` changes in #550. I've included the two necessary commits in this pull request. Happy to resubmit this after #550 completes review if that's preferred.\r\n\r\nThere are probably good performance reasons to avoid using this in general \u2014 and perhaps that should be noted in the header \u2014 but it could be useful in conjunction with APIs that can read from an `istream`. My use for this was with Proxygen: passing an incoming message body (chained `IOBuf`) to a 3rd party API.\r\n\r\nThe use of a `.tcc` file for the implementation of most of the templated functions is unusual for Folly but I wanted to keep them out of the general header. It could easily be renamed to `\u2026-impl.h` or whatever the preferred style is.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/folly/pulls/comments/79087272", "body": "The `elf.h` check is still used to determine `use_follytestmain` and the `AM_CONDITIONAL([FOLLY_TESTMAIN])`. Best to fail if the header is missing during `configure` (when `--enable-follytestmain`) or to quietly disable follytestmain if `elf.h` is not available.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/79087272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/79087600", "body": "I didn't want to add it to the header search directory for every compilation. Not that there would be anything else in there, but it's more in the style of boost/folly/etc to include its files via the name of the project. This case just happens to be messier because it historically didn't ship its headers in a subdir.\n\nAlso seems tidier in case it's installed in `/usr/local/include` or wherever the user has installed it \u2014 they don't need to explicitly add `-I/usr/local/include/libdwarf`, they can just configure with `CPPFLAGS=-I/usr/local/include`.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/79087600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/79089300", "body": "Alternative implementation that just appends to CPPFLAGS: https://github.com/facebook/folly/commit/015e02288016c87c1ca1004d6260047d89bbd72a\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/79089300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/82054010", "body": "Why's that? It already configures as !HAVE_BOOST_CONTEXT in Boost 1.61 and later because the configure check checks for things that folly uses that are no longer available in boost >= 1.61.\n\n```\n$ ./configure  | grep Context\nchecking whether the Boost::Context library is available... no\n$ dpkg -l libboost-context-dev  | grep ^i\nii  libboost-context-dev:amd64 1.61.0.2     amd64        provides a sort of cooperative multitasking on a single thread (default version)\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/82054010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/106529891", "body": "All tests log their output to `test_program_name.log`. Same as the `folly/test` directory.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/106529891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/106738657", "body": "Good call. I might reintroduce it with some future work.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/106738657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/107015050", "body": "This is obsolete; will remove.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/107015050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/107015230", "body": "More leftover junk; changes coming.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/107015230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/107027306", "body": "Consolidated into top-level `.gitignore` for all `test` directories.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/107027306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/107501649", "body": "Oops, thanks.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/107501649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/113535754", "body": "Looks like IOBuf::Iterator is a forward-only iterator whereas this code needs to iterate backwards to the head. Furthermore it needs access to the IOBuf object itself but the IOBuf::Iterator only exposes a ByteRange (ie. the data within the IOBuf).", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/113535754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "brunomorishita": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/folly/pulls/425", "title": "Remove dependency from boost class noncopyable", "body": "With explicitly deleted member functions in C++11 the boost class noncopyable is not needed anymore\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fabbree": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/folly/pulls/399", "title": "Fix for HHWheelTimer assert-fails when destroy() happens after cancel\u2026", "body": "\u2026All() #397\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rigtorp": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/folly/pulls/378", "title": "Add memory padding and alignment to prevent false sharing", "body": "Ensure no thirdparty thread writes to a cacheline shared by our ringbuffer, readIndex and writeIndex.\nEnsure readIndex and writeIndex are located on different cachelines.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/21772400", "body": ":+1: Finally Artem! ", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/21772400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "gmbeard": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/folly/pulls/351", "title": "Allow clients of FBVector to customize the growth strategy", "body": "As per the suggestion in the comments of `FBVector.h`, I've added the ability to customize the growth strategy using the `fbvector`'s allocator. If the allocator used implements a non-static member function of type `size_type calculate_capacity(size_type) const` then this will be called in every case where the `fbvector` instance needs to grow. E.g. to use an `N+1` strategy the allocator would look something like...\n\n``` c++\ntemplate<typename T>\nstruct growth_policy_allocator\n{\n  typedef T value_type;\n\n  T* allocate(size_t n)\n  {\n    ...\n  }\n\n  void deallocate(void *p, size_t n)\n  {\n    ...\n  }\n\n  size_t calculate_capacity(size_t current) const // const is required\n  {\n    return current + 1;\n  }\n};\n```\n\nIf the allocate doesn't implement `calculate_capacity` then `fbvector` falls back to its default growth strategy.\n\nI've also added a simple test case for this feature. Compiles and passes on Ubuntu 14.04\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Hincoin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/folly/pulls/326", "title": "Change memory_order_consume to relaxed in ProducerConsumerQueue", "body": "A few of the functions within ProducerConsumerQueue use `std::memory_order_consume` to load from shared variables, but the consume guarantees aren't used since there's no earlier data dependencies on these variables that need to be propagated. Changing these loads to `std::memory_order_relaxed` offers the same guarantees that are needed for these functions and, under current compiler support, avoids the promotion to `std::memory_order_acquire`. \n\nRelevant post on the [Google group](https://groups.google.com/d/msg/facebook-folly/eGb5gGudGtc/nmBNLFVaJQAJ).\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SeanRBurton": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/folly/pulls/324", "title": "Check for overflow when growing Vectors.", "body": "I don't know if this works, but it is at least in the spirit of the right idea.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "metagoto": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/6093975", "body": "Read the files in the folly/docs directory. They are markdown text files, so it's probably simpler to start reading them right here on github.\nThe sources files are also documented. And of course, the test files contain valuable info.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/6093975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "chrisaycock": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/6100471", "body": "I agree with @dribeas. \"Standard Library\" is the correct term.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/6100471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/6140902", "body": "@tudor Glad I could be of help!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/6140902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "svetlyak40wt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/6104436", "body": "Ok, Standart Library if good enough.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/6104436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "avatasia": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/6117736", "body": "Why not use STL or Boost, so there is too much programmer in Facebook?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/6117736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jdelong": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/6117905", "body": "Merged upstream and pushed\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/6117905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/6118130", "body": "Thanks; f0ced414840d5c29e6ced3466004dc1a122b51c1\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/6118130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/8838190", "body": "Thanks; I merged it upstream (so it'll be pushed back out in the next push).\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/8838190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/8838250", "body": "Thanks for the suggestion.  For now I just added a link to the overview doc to the wiki page.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/8838250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/11424304", "body": "Just pushed a near-rewrite of FBVector.  Looks like the new assign() no longer has this bug; thanks for reporting it, though.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/11424304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/11424336", "body": "Sorry for the delay asl.  I'm merging these into our local repo now (a couple of them have been fixed already).  They'll be back out in the next public push.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/11424336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/11424377", "body": "Merged upstream; thanks\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/11424377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/11424379", "body": "Merging upstream; thanks.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/11424379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/12447617", "body": "Looks like tudor already did the spooky one.  I merged the other ones upstream.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/12447617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/16336808", "body": "Thanks!\n\nI merged this upstream.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/16336808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/16337014", "body": "We can probably just change it to std::mutex now.  I'll do this upstream.\n\nThanks for reporting.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/16337014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/22024845", "body": "merged\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/22024845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/22722858", "body": "I suspect the goal is to detect over decrefing by going negative instead of wrapping to a valid positive value.\n\nTudor?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/22722858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/27417853", "body": "Merged upstream\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/27417853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/38397133", "body": "The solution on #2 seems reasonable to me, but I am not so convinced replacing constexprs with const is going to work out for some parts of the hhvm code---constexpr also lets you use things in places where const doesn't, and I'm pretty sure there's at least a few places where make use of that.  Also, writing default move ctors and move assignment operators by hand seems pretty undesirable from a code quality perspective.  (Particularly if it's guarded behind an ifdef---it won't really be tested much.)\n\nI wonder if it's maybe better just to drop VC++12 from the plan for supported compilers?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/38397133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "tudor": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/6118508", "body": "fixed in 050c1c3d52e4df860911235ac894291b2c089e59\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/6118508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/6138373", "body": "Merged manually, thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/6138373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/6204390", "body": "The comment is correct. \"iff\" means \"if and only if\", see http://en.wikipedia.org/wiki/If_and_only_if\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/6204390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/7600005", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/7600005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/7600011", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/7600011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/7977835", "body": "Thanks for the comment. I'll be closing this issue because the issue tracker is meant for specific problems with the code.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/7977835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/9410271", "body": "Yes it does.  Making folly portable outside of gcc 4.6+, Linux x86_64 has never been an explicit goal.  We would welcome patches, though :)\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/9410271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/9459520", "body": "@asl Before we can accept your changes, you'll have to sign the Facebook Contributor License Agreement: https://developers.facebook.com/opensource/cla\n\nThanks!\n-Tudor.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/9459520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/9914169", "body": "We'll take a look, thanks for letting us know.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/9914169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/22725257", "body": "Yes, Jordan is right.\n\n-Tudor.\n\nOn Thu, Aug 15, 2013 at 12:16 PM, jdelong notifications@github.com wrote:\n\n> I suspect the goal is to detect over decrefing by going negative instead\n> of wrapping to a valid positive value.\n> \n> Tudor?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/facebook/folly/issues/34#issuecomment-22722858\n> .\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/22725257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/23094025", "body": "Indeed. This is a real bug. Thank you!\n\nWe are assuming that std::map is relocatable (movable around using memcpy()), but it's not; it has a _Rb_tree member which has a pointer to itself. The fix is to remove\n\nFOLLY_ASSUME_FBVECTOR_COMPATIBLE_4(std::map);\nFOLLY_ASSUME_FBVECTOR_COMPATIBLE_3(std::set);\n\nfrom folly/Traits.h.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/23094025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/23094366", "body": "And as far as getting folly to build more smoothly, that's in the works. We use a custom build system at Facebook (and we build folly in the same tree as a lot of our other C++ stuff, with scripts to export to github), and so the autoconf stuff is an afterthought, and often goes unmaintained.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/23094366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/28430604", "body": "Ouch. That's a bad bug. I don't expect it affects the quality of the hashes, but it affects the many places where they've been persisted to disk...\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/28430604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/28456759", "body": "(Thanks for catching this, by the way. _facepalm_)\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/28456759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/36520676", "body": "Intended, to match the 'y' in the name 'folly' ('folly' is almost, but not quite, an acronym)\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/36520676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/36520803", "body": "Intended, to match the 'y' in the name 'folly' ('folly' is almost, but not quite, an acronym)\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/36520803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/48089906", "body": "Thanks for the report. Fixed in our internal repo, I'll push a fixed version on Monday.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/48089906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/48089908", "body": "Thanks for the report. Fixed in our internal repo, I'll push a fixed version on Monday.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/48089908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/48089909", "body": "Thanks for the report. Fixed in our internal repo, I'll push a fixed version on Monday.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/48089909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/48089911", "body": "Thanks for the report. Fixed in our internal repo, I'll push a fixed version on Monday.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/48089911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/48356027", "body": "Can you please paste this as text somehow? It seems HTML ate a lot of your\nangle brackets :)\n\nAlso, what is the error that you're getting? Is it that hashstd::string\nis already defined?\n\nOn Mon, Jul 7, 2014 at 8:02 PM, likan999 notifications@github.com wrote:\n\n> The following simple program will produce error under libc++:\n> \n> #include\n> #include\n> #include\n> \n> using namespace std;\n> \n> namespace std {\n> template\n> struct hashstd::basic_string<C > : private hash {\n> size_t operator()(const std::basic_string & s) const {\n> return hash::operator()(s.c_str());\n> }\n> };\n> }\n> \n> const static unordered_map m = {\n> {\"abc\", 1},\n> {\"xyz\", 2},\n> };\n> \n> int main() {\n> assert(m.find(\"abc\") != m.end());\n> }\n> \n> String.h shouldn't specialize hash function for libc++.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/folly/issues/74.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/48356027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/48402802", "body": "You're right. Our specialization is actually broken! (because we make\nhash<string> call hash<const char*> on s.c_str(), which is clearly bad, as\nhash<const char*> doesn't hash the strings, only the pointer value)\n\nWe haven't seen this at FB because libstdc++ provides full specializations\n(as required by the standard), so hash<string> is more specific than\ntemplate <class C> hash<basic_string<C>>, so the libstdc++ specialization\nwins.\n\nClearly libc++ does something different (and it's not fully standard\ncompliant), but, regardless, these specializations are unnecessary AND\nbroken, so I'll fix.\n\nOn Tue, Jul 8, 2014 at 9:51 AM, likan999 notifications@github.com wrote:\n\n> @tudor https://github.com/tudor, the specialization is copied from\n> String.h to demonstrate the problem. By simply including \"String.h\" can\n> also reproduce the same issue. The error is the code successfully compiles\n> under libc++ but at runtime the assertion fails. I guess the culprit is\n> libc++ has a different hash implementation.\n> \n> I guess the specialization was introduced when c++11 was not yet fully\n> implemented by mainline compilers and hash was not available. But since\n> hash is in C++11 standard, and major compilers supports c++11 faily well,\n> it is no longer needed?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/folly/issues/74#issuecomment-48367154.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/48402802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/57223313", "body": "It should actually be removed from fbthrift, and it is gone from our\ninternal repository, so it should be fixed with the next fbthrift push.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/57223313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/67681553", "body": "Not a typo. Intentional, to try to showcase the almost-backronym that the word \"folly\" is supposed to be.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/67681553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/6120903", "body": "Did u even took a read on readme files or code itself before saying that?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/6120903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691278", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691298", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691300", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691302", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691305", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691306", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691307", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691309", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691311", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691314", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691317", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691318", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691319", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691321", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691323", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691325", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691327", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691331", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691335", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691336", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691337", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691339", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691340", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691342", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90691342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996661", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996672", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996674", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996675", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996678", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996680", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996682", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996687", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996689", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996691", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996692", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996694", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996697", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996700", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996703", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90996703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/91645950", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/91645950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "syntheticpp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/6435611", "body": "obsolete\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/6435611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "asl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/9410398", "body": "Fix for Portability.h is simple:\n\n```\ndiff --git a/folly/Portability.h b/folly/Portability.h\nindex 6d373a2..a9e8d32 100644\n--- a/folly/Portability.h\n+++ b/folly/Portability.h\n@@ -33,7 +33,11 @@\n #undef FOLLY_FINAL\n #undef FOLLY_OVERRIDE\n\n-#ifdef __GNUC__\n+#if defined(__clang__)\n+#  define FOLLY_FINAL final\n+#  define FOLLY_OVERRIDE override\n+#elif defined(__GNUC__)\n+# include <features.h>\n # if __GNUC_PREREQ(4,7)\n #  define FOLLY_FINAL final\n #  define FOLLY_OVERRIDE override\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/9410398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/9410443", "body": "(sorry, no pull request, I have heavily hacked tree around)\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/9410443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/9410498", "body": "But will provide some fixes soon :)\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/9410498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/9462030", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/9462030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "andralex": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/11087038", "body": "Thanks! We'll look into this.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/11087038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/11087055", "body": "... and good to see you again, Christian :)\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/11087055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/1412912", "body": "Hi Dave -- this is the initial commit. Some of the files have a long history that is mostly internal to Facebook and peppered with commit information that has sensitive tidbits, so we decided to make the initial commit without a history. Going forward we're looking at ways to make fine-grained commit information available.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/1412912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "preillyme": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/18590068", "body": "@capitalaslash \u2014 m4/ax_boost_system.m4:154: the serial number must appear before any macro definition\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/18590068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/18648285", "body": "This is no longer an issue once I updated boost and pulled in https://github.com/facebook/folly/pull/29\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/18648285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "capitalaslash": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/18599630", "body": "@preillyme thanks! the file had twice the same content\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/18599630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90915222", "body": "closing, this has already been taken care of in master.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90915222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/4949410", "body": "just to let you know, it was enough for me to move `FOLLY_NORETURN` at beginning of line to make it compile, there is no need to remove it completely with gcc 4.8\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/4949410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "danslo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/18716358", "body": "Stuff was rebased, closing for now.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/18716358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/47588192", "body": "@ptarjan Already fixed it: https://github.com/facebook/folly/pull/67\n\nHaven't looked at building folly independently though, only in the context of HHVM. And we do remove <a href=\"https://github.com/hhvm/hhvm-third-party/blob/master/folly/CMakeLists.txt#L15\">quite a bit</a> in that build.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/47588192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/47593840", "body": "Yeah, I have no immediate plans to do that, sorry :-( Because they use different build systems it's also not very easy to port those exclusions over. I'll help out where needed, but my primary focus is on HHVM at the moment.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/47593840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/51696439", "body": "@jwatzman Your internal diff, plus the following PR, plus the currently pending weak symbol diff, should be enough to get folly building:\nhttps://github.com/facebook/folly/pull/79\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/51696439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/52231668", "body": "You can't yet, there's still a number of things that need to happen for HHVM to build cleanly on OSX again: https://github.com/facebook/hhvm/issues/3417\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/52231668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jeremy-murphy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/21845246", "body": "Whoops, accidental double post.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/21845246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/22067978", "body": "OK, actually this seems trivial to solve now that I've looked into what is going on.  The Gentoo ebuild does build and install a library, but it uses the name \"double-conversion\".  Since there is no changing of compilation flags, it seems simple enough to just create a soft link in /usr/lib for folly such that libdouble_conversion_pic.so -> libdouble-conversion.so.  It's working so far for me, so I'll close the bug.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/22067978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "syvex": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/28457099", "body": "Oh sure. I figured it would be unlikely that anyone else would have come across it :)\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/28457099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "denji": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/31445578", "body": "https://github.com/mcuadros/homebrew-hhvm/pull/14\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/31445578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/39052208", "body": "```\nfolly/detail/Clock.h:35:18: error: unknown type name 'clockid_t'; did you mean 'clock_t'?\nint clock_getres(clockid_t clk_id, struct timespec* ts);\n                 ^~~~~~~~~\n                 clock_t\n/usr/include/sys/_types/_clock_t.h:30:33: note: 'clock_t' declared here\ntypedef __darwin_clock_t        clock_t;\n                                ^\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/39052208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/50561332", "body": "Duplicate #75\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/50561332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/53198562", "body": "@mcuelenaere detect std::lib, libc++ doesn't provide this header\n\n``` cpp\n// libc++ detected:     _LIBCPP_VERSION\n// libstdc++ detected:  __GLIBCXX__\n#if defined(__clang__)\n#   if __has_include(<__config>) // defines _LIBCPP_VERSION\n#       include <__config>\n#   elif __has_include(<bits/c++config.h>) // defines __GLIBCXX__\n#       include <bits/c++config.h>\n#   else\n#       include <ios>\n#   endif\n#elif defined(__GNUC__) // gcc does not have __has_include\n#   include <ios> // ios should include the c++config.h which defines __GLIBCXX__\n#endif\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/53198562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/61932428", "body": "/cc @dcsommer @andriigrynenko @djwatson @alikhtarov\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/61932428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/61934738", "body": "/cc @jdelong\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/61934738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/62065484", "body": "https://github.com/facebook/folly/blob/32a9723ad4951fcc8b6324c55d967c3d2f21552e/folly/FBString.h#L915-L2427\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/62065484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/62067061", "body": "I very much doubt that they will ever fix, by the way gcc-4.8 version folly shows terrible benchmarks https://www.ngxo.com/thread/16420262\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/62067061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/82996227", "body": "Ubuntu 12.04 + gcc-4.9.2\n\n```\n[  4%] Building CXX object third-party/folly/CMakeFiles/folly.dir/folly/wangle/concurrent/ThreadPoolExecutor.cpp.o\nIn file included from /usr/include/c++/4.9/atomic:41:0,\n                 from /home/travis/build/facebook/hhvm/third-party/folly/folly/Executor.h:19,\n                 from /home/travis/build/facebook/hhvm/third-party/folly/folly/wangle/concurrent/ThreadPoolExecutor.h:18,\n                 from /home/travis/build/facebook/hhvm/third-party/folly/folly/wangle/concurrent/ThreadPoolExecutor.cpp:17:\n/usr/include/c++/4.9/bits/atomic_base.h: In member function \u2018void folly::RWSpinLock::lock()\u2019:\n/usr/include/c++/4.9/bits/atomic_base.h:581:70: error: failure memory model cannot be stronger than success memory model for \u2018__atomic_compare_exchange\u2019\n  return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 0, __m1, __m2);\n                                                                      ^\nmake[2]: *** [third-party/folly/CMakeFiles/folly.dir/folly/wangle/concurrent/ThreadPoolExecutor.cpp.o] Error 1\nmake[1]: *** [third-party/folly/CMakeFiles/folly.dir/all] Error 2\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/82996227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/4968026", "body": "@pgriess https://github.com/facebook/folly/issues/42\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/4968026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "yqzhang": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/32983189", "body": "My bad. I forgot to do `-I/path/to/folly/` in my Makefile.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/32983189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sheki": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/36274250", "body": "Google-Test library recommends that it not be installed system wise. Every build should include the gtest source and use that to build. This would make things good to build on the mac as well. \n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/36274250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "shahariaazam": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/36511940", "body": "LOL. I also noticed that. :) #49 @georgehzhang \n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/36511940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "georgehzhang": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/36555217", "body": "oh i see haha!\n\nOn Mon, Mar 3, 2014 at 10:29 AM, tudor notifications@github.com wrote:\n\n> Closed #47 https://github.com/facebook/folly/pull/47.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/facebook/folly/pull/47\n> .\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/36555217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rchatsiri": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/37116825", "body": "Folly latest version still found error from double-conversion.so library. Thus, Library compiled and installed to /usr/local/lib. You should create soft-link.\n\n```\nsudo ln -s   /usr/local/lib/libdouble-conversion.so  libdouble_conversion_pic.so\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/37116825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "drbenmorgan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/38109316", "body": "If it helps, I have a check for `noexcept` using the CheckCXX11Features system (albeit slightly older than the one you have) in one of my projects:   drbenmorgan/codingtools@c4f4a8228db89207ad1ff67939900fbde66ebf9f\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/38109316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "auroraeosrose": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/38340216", "body": "Thanks @drbenmorgan !  I added noexcept in and now library structure is done, I also added in the generated .cpp files in gen and an option in cmake to force regenerate them if desired.  It's not good form to force a python install to generate files :)\n\nI also added additional deps necessary to build the io portions of the library (apparently those just aren't built with the autotools build?)\n\nThis will probably get additional tweaks as I get more of the library itself building and need defines done.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/38340216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/38391877", "body": "The first portion of this is #53 which adds a cmake build system for folly - it will allow cross-platform and cross compiler support for folly builds.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/38391877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/38391980", "body": "Tests, fingerprinttables generation, and adding libevent to deps are still remaining, plus more fiddling with defines\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/38391980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/38392127", "body": "#55 replaces the use of constexpr with a macro\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/38392127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/38394901", "body": "#56 replaces noexcept with a macro\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/38394901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/38399006", "body": "The constexpr stuff stuff no doubt will break in parts of the hhvm code.  There will probably need to be two macros for constexpr at some point, one that defines to nothing, and one to constexpr.  Chromium, mozilla and others take this route.\n\nAnd yes writing default move ctrs and assignment operators suck - however this is used in 2 places in all of the folly code currently.  If the usage can stay to those two locations until MSVC-NEXT is released and 2013 can be ditched it will keep the headaches to a minimum.\n\nSome problems with choosing to defenestrate vc++12 support\n1. You're sending a message to windows users that the default, commercially supported compiler for their platform doesn't matter - it would be similar to not supporting gcc for linux and instead telling them to only use clang... yes it works but...\n2. VC creates faster, tighter, and arguably better code than gcc and clang on windows - especially when using PGO optimizations and on 64 bit \n3. MSVC will catch up (the CTP already supports quite a bit including constexpr), by choosing not to support it now you're getting around the constexpr and noexcept issues - but there are other things that will be needed that won't be addressed now - you just push work off to \"the future\"\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/38399006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/38522585", "body": "gcc specific **attribute** functionality is abstracted out in  #57\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/38522585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "PKUKitty": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/42622142", "body": "yeah.Many thanks.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/42622142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "facebook-github-bot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/44127545", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/44127545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/44127668", "body": "Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/44127668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/46205445", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/46205445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/46206072", "body": "Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/46206072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/47608051", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/47608051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/47608943", "body": "Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/47608943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/53534925", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/53534925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/53962896", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/53962896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/54235717", "body": "Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/54235717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/56013331", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/56013331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/56014410", "body": "Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/56014410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/56358485", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/56358485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/63741714", "body": "Thank you for reaching out to us and we'd like to first apoligize for not getting back to you sooner. We're closing out older issues since updates to the project may address the issue you opened or they may no longer be relevant. If you're still experiencing the problem, please reopen the issue - thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/63741714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/63741718", "body": "Thank you for reaching out to us and we'd like to first apoligize for not getting back to you sooner. We're closing out older issues since updates to the project may address the issue you opened or they may no longer be relevant. If you're still experiencing the problem, please reopen the issue - thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/63741718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/63741721", "body": "Thank you for reaching out to us and we'd like to first apoligize for not getting back to you sooner. We're closing out older issues since updates to the project may address the issue you opened or they may no longer be relevant. If you're still experiencing the problem, please reopen the issue - thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/63741721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/67778073", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/67778073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/67778541", "body": "Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/67778541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/72072099", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/72072099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/72072850", "body": "Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/72072850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/72876054", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/72876054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/72878070", "body": "Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/72878070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/74375335", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/74375335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/74375675", "body": "Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/74375675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/74391391", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/74391391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/74391739", "body": "Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/74391739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/74426501", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/74426501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/74431203", "body": "Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/74431203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/75698029", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/75698029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/75698734", "body": "Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/75698734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76991316", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76991316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76993964", "body": "Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76993964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/91118226", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/91118226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/91693494", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/91693494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/91704554", "body": "Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/91704554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ptarjan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/44239593", "body": "@mapx is this needed and you gave up, or was it fixed by something else?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/44239593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/47185252", "body": "Can you send a PR for what you need?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/47185252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/47588055", "body": "@yfilali thanks! Keep us posted when you get it.\n\n/cc @danslo who is also working on getting it working on OSX\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/47588055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/56415898", "body": "@ckamm looking at your code without you signing a CLA is the problem. You are welcome to describe the problem in detail, but once there is code, we can't use it. Sorry.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/56415898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "mapx": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/44257990", "body": "It was fixed by another update months ago and is unnecessary.\n\nThanks :)             \n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/44257990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "anatol": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/44590368", "body": "+1 for merging it. I see the same problem on Linux Arch.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/44590368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/6495310", "body": "This is duplicated file. Exception.h is already present below. This causes build time failure on Linux Arch:\n\n```\n==> Starting package()...\nMaking install in .\nmake[1]: Entering directory '/home/anatol/sources/archpackages/folly-git/src/folly/folly'\nmake[2]: Entering directory '/home/anatol/sources/archpackages/folly-git/src/folly/folly'\n /usr/bin/mkdir -p '/home/anatol/sources/archpackages/folly-git/pkg/folly-git/usr/lib'\n /bin/sh ./libtool   --mode=install /usr/bin/install -c   libfolly.la libfollybenchmark.la libfollytimeout_queue.la libfollyfingerprint.la '/home/anatol/sources/archpackages/folly-git/pkg/folly-git/usr/lib'\n /usr/bin/mkdir -p '/home/anatol/sources/archpackages/folly-git/pkg/folly-git/usr/include/folly'\nlibtool: install: /usr/bin/install -c .libs/libfolly.lai /home/anatol/sources/archpackages/folly-git/pkg/folly-git/usr/lib/libfolly.la\n /usr/bin/install -c -m 644  ApplyTuple.h Arena.h Arena-inl.h AtomicBitSet.h AtomicHashArray.h AtomicHashArray-inl.h AtomicHashMap.h AtomicHashMap-inl.h AtomicStruct.h Baton.h Benchmark.h Bits.h Checksum.h Chrono.h ConcurrentSkipList.h ConcurrentSkipList-inl.h Conv.h CpuId.h CPortability.h Demangle.h DiscriminatedPtr.h DynamicConverter.h dynamic.h dynamic-inl.h Exception.h FBString.h FBVector.h File.h FileUtil.h Fingerprint.h folly-config.h Exception.h ExceptionWrapper.h Foreach.h FormatArg.h Format.h Format-inl.h GroupVarint.h Hash.h IPAddress.h '/home/anatol/sources/archpackages/folly-git/pkg/folly-git/usr/include/folly/.'\nlibtool: install: /usr/bin/install -c .libs/libfollybenchmark.lai /home/anatol/sources/archpackages/folly-git/pkg/folly-git/usr/lib/libfollybenchmark.la\nlibtool: install: /usr/bin/install -c .libs/libfollytimeout_queue.lai /home/anatol/sources/archpackages/folly-git/pkg/folly-git/usr/lib/libfollytimeout_queue.la\nlibtool: install: /usr/bin/install -c .libs/libfollyfingerprint.lai /home/anatol/sources/archpackages/folly-git/pkg/folly-git/usr/lib/libfollyfingerprint.la\nlibtool: install: /usr/bin/install -c .libs/libfolly.a /home/anatol/sources/archpackages/folly-git/pkg/folly-git/usr/lib/libfolly.a\n/usr/bin/install: will not overwrite just-created \u2018/home/anatol/sources/archpackages/folly-git/pkg/folly-git/usr/include/folly/./Exception.h\u2019 with \u2018Exception.h\u2019\nlibtool: install: chmod 644 /home/anatol/sources/archpackages/folly-git/pkg/folly-git/usr/lib/libfolly.a\nlibtool: install: ranlib /home/anatol/sources/archpackages/folly-git/pkg/folly-git/usr/lib/libfolly.a\nMakefile:922: recipe for target 'install-nobase_follyincludeHEADERS' failed\nmake[2]: *** [install-nobase_follyincludeHEADERS] Error 1\nmake[2]: *** Waiting for unfinished jobs....\nlibtool: install: /usr/bin/install -c .libs/libfollybenchmark.a /home/anatol/sources/archpackages/folly-git/pkg/folly-git/usr/lib/libfollybenchmark.a\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/6495310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "yfilali": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/47437896", "body": "Upon closer look, this won't work on HEAD. I am working on getting it to build cleanly on OSX but the recent dependency on linux/futex.h in detail/Futex.h is making it a little more time consuming than I can handle at the moment. see: https://github.com/facebook/folly/issues/50\n\nI'll try to submit one big OSX compat PR when ready.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/47437896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/47592729", "body": "@danslo thanks on the #67 pointer.\n\nUnrelated to the specific MAP_ANON issue, Any thoughts about doing the same for a standalone build on OSX? i.e. simply removing components that don't make sense on other platforms? A lot of the components are pretty platform independent from what I can tell (json, fbstring, endian, hash, etc.).\n\nFor example ${FOLLY_DIR}/detail/Futex.cpp is removed from hhvm build which skips the linux/futex.h include issue.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/47592729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/47594050", "body": "No worries, I am looking at a Makefile.am that already has HAVE_LINUX and !HAVE_LINUX sections. It's probably not as hard as I originally though. The exclusions you pointed me towards are a good start.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/47594050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/47608061", "body": "cc @ptarjan @danslo on OSX build of folly (most components).\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/47608061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/47608111", "body": "CLA signed :)\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/47608111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "likan999": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/48367154", "body": "@tudor, the specialization is copied from String.h to demonstrate the problem.  Simply including \"String.h\" can also reproduce the same issue.  The error is the code successfully compiles under libc++ but at runtime the assertion fails.  I guess the culprit is libc++ has a different hash implementation.\n\nI guess the specialization was introduced when c++11 was not yet fully implemented by mainline compilers and hash<string> was not available.  But since hash<string> is in C++11 standard, and major compilers supports c++11 faily well, it is no longer needed?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/48367154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ichenq": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/49705957", "body": "I've done porting Benchmark.h, Conv.h and Range.h  to MSVC, its really painfull and some feature must be removed to make the compiler happy.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/49705957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ShonM": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/51659614", "body": "Same issue here on 10.9.4 following instructions [here](https://github.com/facebook/hhvm/wiki/Building-and-installing-HHVM-on-OSX-10.9)\n\n```\n\u279c  hhvm git:(master) make\n[  0%] Built target fastlz\n[  0%] Built target afdt\n[  5%] Built target mbfl\n[  5%] Built target sqlite3\n[  6%] Built target timelib\n[  6%] Built target lz4\n[  6%] Built target double-conversion\n[  6%] Building CXX object third-party/folly/CMakeFiles/folly.dir/folly/Version.cpp.o\nIn file included from /Users/shonm/Sites/hhvm/third-party/folly/folly/Version.cpp:17:0:\n/Users/shonm/Sites/hhvm/third-party/folly/folly/VersionCheck.h:78:55: error: constructor priorities are not supported\n   __attribute__((constructor(101))) void versionCheck() { \\\n                                                       ^\n/Users/shonm/Sites/hhvm/third-party/folly/folly/Version.cpp:21:1: note: in expansion of macro 'FOLLY_VERSION_CHECK'\n FOLLY_VERSION_CHECK(folly, FOLLY_VERSION)\n ^\nmake[2]: *** [third-party/folly/CMakeFiles/folly.dir/folly/Version.cpp.o] Error 1\nmake[1]: *** [third-party/folly/CMakeFiles/folly.dir/all] Error 2\nmake: *** [all] Error 2\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/51659614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jwatzman": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/51664850", "body": "I just put up an change for review internally at FB (D1487191) which ifdef's this out on OS X. There appear to be _other_ problems preventing folly from still building even after that fix, but it's a start.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/51664850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/52118871", "body": "My diff has landed at FB. I'll see if I can poke someone about reviewing that PR and doing another OSS push -- I think folly is still manual at this point?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/52118871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/folly/pulls/comments/32161160", "body": "Why not\n\n``` cpp\n    int64_t timeSinceLastAccept = std::max<int64_t>(\n       0,\n       nowMs.time_since_epoch().count() -\n       lastAccepTimestamp_.time_since_epoch().count());\n```\n\nEspecially since we're already assigning this to an `int64_t` result? It seems a lot shorter and cleaner than this large `decltype`.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/32161160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "sinamiandashti": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/51679753", "body": "same here\nplz help\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/51679753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/52092068", "body": "@chipturner plz review PR\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/52092068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/52230661", "body": "how can we build hhvm with newest folly version?\ni mean that accepted PR\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/52230661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "xavierbaez": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/52075811", "body": "I am having the same problem\n\n[ 17%] Building CXX object third-party/thrift/CMakeFiles/hphp_thrift.dir/lib/cpp/util/FdUtils.cpp.o\nLinking CXX static library libhphp_thrift.a\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: libhphp_thrift.a(TTransportException.cpp.o) has no symbols\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: libhphp_thrift.a(TTransportException.cpp.o) has no symbols\n[ 17%] Built target hphp_thrift\nmake[1]: **\\* [third-party/folly/CMakeFiles/folly.dir/all] Error 2\nmake: **\\* [all] Error 2\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/52075811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/52095895", "body": "@danslo so you think by the end of this week we'll be able to build HHVM for Mavericks?\nI hope so\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/52095895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mcuelenaere": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/53194648", "body": "See https://github.com/facebook/folly/issues/75 for history\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/53194648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/53194699", "body": "@denji thanks, I've opened https://github.com/facebook/folly/pull/81\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/53194699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/53198979", "body": "@denji This commit tries to detect libc++ by checking for the existence of _LIBCPP_VERSION. Are you saying this is not working for you?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/53198979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "zach-yu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/55369132", "body": "I encountered the same issue. if I checkout 6d89f3d and compile, there seems to be a configure issue, which said that it can not find the double_conversion header file.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/55369132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ckamm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/56359492", "body": "@pavlo-fb Me getting around to reviewing your cla will take a while. Could you review and replicate this 1-character fix?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/56359492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/56416928", "body": "@ptarjan Ok. The issue is that decodeUtf8() won't work with 4-byte utf8 encoded code points because the loop condition is wrong. The for loop should run up to three times, not just up to two times. Currently all valid 4-byte utf8 code points will be considered invalid with validate_utf8 or replaced with skip_invalid_utf8.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/56416928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "paulm17": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/56401046", "body": "A user Rav_ in #hhvm was kind enough to suggest downloading gtest from google and extracting it into folly/test subdirectory.  This worked!\n\nhttps://googletest.googlecode.com/files/gtest-1.6.0.zip\n\nSo perhaps do this and make check will work?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/56401046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "craigcarnell": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/56640249", "body": "Another one..\n\n```\n[ 10%] Building CXX object third-party/folly/CMakeFiles/folly.dir/folly/experimental/wangle/concurrent/CPUThreadPoolExecutor.cpp.o\nIn file included from /Users/ccarnell/Sites/hhvm/third-party/folly/folly/Baton.h:26:0,\n                 from /Users/ccarnell/Sites/hhvm/third-party/folly/folly/LifoSem.h:28,\n                 from /Users/ccarnell/Sites/hhvm/third-party/folly/folly/experimental/wangle/concurrent/LifoSemMPMCQueue.h:19,\n                 from /Users/ccarnell/Sites/hhvm/third-party/folly/folly/experimental/wangle/concurrent/ThreadPoolExecutor.h:19,\n                 from /Users/ccarnell/Sites/hhvm/third-party/folly/folly/experimental/wangle/concurrent/CPUThreadPoolExecutor.h:18,\n                 from /Users/ccarnell/Sites/hhvm/third-party/folly/folly/experimental/wangle/concurrent/CPUThreadPoolExecutor.cpp:17:\n/Users/ccarnell/Sites/hhvm/third-party/folly/folly/detail/Futex.h:24:25: fatal error: linux/futex.h: No such file or directory\n #include <linux/futex.h>\n                         ^\ncompilation terminated.\nmake[2]: *** [third-party/folly/CMakeFiles/folly.dir/folly/experimental/wangle/concurrent/CPUThreadPoolExecutor.cpp.o] Error 1\nmake[1]: *** [third-party/folly/CMakeFiles/folly.dir/all] Error 2\nmake: *** [all] Error 2\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/56640249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/57461448", "body": "https://github.com/facebook/folly/issues/86\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/57461448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "c9s": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/57049485", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/57049485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/57493943", "body": "Hi @craigcarnell , this is related to #86, but I think it can't answer this question. The PR that will be accepted is what I want to know.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/57493943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dcsommer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/57225839", "body": "@micklat this should be fixed in the fbthrift repository now if you rebase.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/57225839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "micklat": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/57265214", "body": "Thanks.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/57265214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "christopherowen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/61932157", "body": "perhaps this is relevant?\n\nhttp://stackoverflow.com/questions/12920891/std-linker-error-with-apple-llvm-4-1\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/61932157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/61932211", "body": "this is the homebrew formula: https://github.com/mcuadros/homebrew-hhvm\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/61932211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/62041634", "body": "To get to this point, this patch needed to be applied:\n\nhttps://github.com/mcuelenaere/folly/commit/e1655a6497997bf090d09844362b79e0c859479d\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/62041634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "corny813": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/62838544", "body": "thanks for your answer. mcrouter is okay now. \n\n---\n\nBest regards,\nWu Junjie, \nE-Business & Intelligent Enterprise Computing Research Center\nShenzhen Graduate School, Harbin Institute of Technology\nRm.202, C# Building, HIT Campus at Xili University Town, Shenzhen 518055, P.R.China\n\n------------------ \u539f\u59cb\u90ae\u4ef6 ------------------\n\u53d1\u4ef6\u4eba: \"djwatson\"notifications@github.com; \n\u53d1\u9001\u65f6\u95f4: 2014\u5e7411\u670813\u65e5(\u661f\u671f\u56db) \u51cc\u66680:37\n\u6536\u4ef6\u4eba: \"facebook/folly\"folly@noreply.github.com; \n\u6284\u9001: \"Come on!!!!!\"244486178@qq.com; \n\u4e3b\u9898: Re: [folly] TypeError when scons double-conversion (#101)\n\nlikely mcrouter doesn't need sconstruct for double conversion anymore, as it is an official ubuntu package now.  Open a mcrouter ticket?\n\n\u2014\nReply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/62838544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jrobeson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/63214214", "body": "ah yes, here too!. please tag a release :)\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/63214214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/64945828", "body": "this also occurs on fedora 20, but not fedora 21.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/64945828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/64945862", "body": "so should this issue be closed then? or should the instructions be updated to mention an updated boost?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/64945862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/64945894", "body": "oh sorry,  didn't realize #29 wasn't already pulled in.  didn't mean to get your hopes up :(\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/64945894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Gownta": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/64263164", "body": "Which version of glog and gflags do you have installed?\n\nCould you please get a minimal repro, and show me the line of the preprocessed source that causes the error? I'm pretty sure there is a versioning issue, but I'm not sure if it happens before the macro expansion or after the macro expansion (I'm leaning to the former, but am not sure).\n\nI think that a minimal repro would go like\n  #include <glog/logging.h>\n  DEFINE_bool(a, b, \"c\");\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/64263164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/64302429", "body": "Could you also try including gflags/gflags.h? My guess is that your specific setup is failing to transitively include the gflags header, causing the missing macro. If you add the header and it compiles, then I (or you) can put a simple patch up to put that #include in the source, since that would be an appropriate fix to this problem.\n\nP.S. Hmm, it seems that github comments didn't like my #include of glog/logging.h inside angle-brackets.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/64302429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/66190787", "body": "I've landed this change locally. It will go out in the next release.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/66190787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/69654729", "body": "Could you please put up a patch?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/69654729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/69665597", "body": "Can you run `g++ -dM -E [somefile.cpp] | grep __APPLE__` and tell me what it says? Since you're on a MAC, it should produce some output.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/69665597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/71265092", "body": "@spacek: are you on a MAC? Is `__APPLE__` defined on your system?\n\n@MerelyAPseudonym: That is a different problem. It looks like you need to put folly in your include path. The problem that c9s has is that he is on a MAC (which doesn't have the malloc.h header), but folly/Malloc.h is trying to include it nonetheless.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/71265092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/75878071", "body": "Awesome analysis. The removal of the third conditional is very nice.\n\nIn the division operations, the rhs of the comparator contains a compile-time constant. This means that the division is performed at compile-time, and no overhead is required at runtime.\n\nLooking at the generated assembly code for computePushBackCapacity in -O3 (which ends up inlined into computeInsertCapacity), the two 'return capacity()*2' are already folded together. One thing I noticed - we can check capacity()==0 instead of empty(), since the two are logically equivalent but the compiler doesn't know that; since we already compute capacity() (which -O3 dutifully memoizes, as it is a const function), we effectively remove a read of e_.\n\nI'll put up these changes internally. They'll be visible in github next time we do a sync.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/75878071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/93553783", "body": "I think it would be best to leave the noncopyable as is. Its intent is unambiguous. Having =delete statements in the code, while easier to grep for, suggests that individual pieces can be enabled.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/93553783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/10766197", "body": "Long story short, this change should be attributed to @mtodat. See https://github.com/facebook/folly/pull/132 for details.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/10766197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/10954384", "body": "Our internal landing system overwrote the original author's name with mine. This diff is attributed to @sethkrasnianski\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/10954384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/10954389", "body": "Our internal landing system overwrote the original author's name with mine. This diff is attributed to @sethkrasnianski\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/10954389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/10954416", "body": "Our internal landing system overwrote the original author's name with mine. This diff is attributed to @SiebelsTim\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/10954416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/10954445", "body": "Our internal landing system overwrote the original author's name with mine. This diff is attributed to @gustavotemple\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/10954445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/10954458", "body": "Our internal landing system overwrote the original author's name with mine. This diff is attributed to @loverszhaokai\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/10954458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/10954484", "body": "Our internal landing system overwrote the original author's name with mine. This diff is attributed to @cppfool \n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/10954484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/facebook/folly/pulls/comments/28529370", "body": "If you change ALL such functions in folly, that would be an impactful change.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/28529370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "vj-rajesh-kumar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/64263947", "body": "I encountered this error as part of an attempt to install mcrouter. The recipe on there uses gflags-2.1.1 and glog-0.3.3. \n\nBut I commented out the #ifdef that surrounds this error (on line 32 of SSLSessionCacheManager.cpp) and defaulted the behavior to the else and I was able to get it to build. \n\n> On Nov 24, 2014, at 2:58 PM, Nicholas Ormrod notifications@github.com wrote:\n> \n> Which version of glog and gflags do you have installed?\n> \n> Could you please get a minimal repro, and show me the line of the preprocessed source that causes the error? I'm pretty sure there is a versioning issue, but I'm not sure if it happens before the macro expansion or after the macro expansion (I'm leaning to the former, but am not sure).\n> \n> I think that a minimal repro would go like\n> #include \n> DEFINE_bool(a, b, \"c\");\n> \n> \u2014\n> Reply to this email directly or view it on GitHub https://github.com/facebook/folly/issues/104#issuecomment-64263164.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/64263947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jhenry82": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/65165259", "body": "I just hit this trying to build folly for mcrouter on CentOS 6.6.\n\n@Gownta I added `#include <gflags/gflags.h>` to experimental/wangle/ssl/SSLSessionCacheManager.cpp and it resolved the error. \n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/65165259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "domenkozar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/65494376", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/65494376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "JoelMarcey": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/67905913", "body": "@raeesiqbal What is the fatal error?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/67905913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38995804", "body": "From @yfeldblum any reason not to put the portability layer under `folly/io/async` instead of up-leveled here?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38995804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38995836", "body": "From @yfeldblum  How does all this work when there are captures?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38995836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38995864", "body": "From @yfeldblum How about this instead?\n\n```\nintptr_t fh = -1 == fd\n  ? INVALID_HANDLE_VALUE\n  : _get_osfhandle(fd);\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38995864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38995911", "body": "From @yfeldblum  \n\n```\nstatic_assert(sizeof(evutil_socket_t) == sizeof(fh), \"mismatched sizes\");\n::event_set(e, reinterpret_cast<evutil_socket_t>(fh), s, f, b);\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38995911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38987190", "body": "Why are you doing this?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38987190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38987203", "body": "What is this?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38987203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38985608", "body": "Where is this actually defined?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38985608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38985654", "body": "...and this?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38985654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38980325", "body": "If we're supporting broken compilers, just call .load() explicitly for all compilers. And add a comment explaining why.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38980325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38980354", "body": "Why is this necessary?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38980354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38980379", "body": "Are there no newer MSVC2015 compilers? Are we going to support broken early versions of fixed compilers?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38980379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38980426", "body": "Are there no newer MSVC2015 compilers? Are we going to support broken early versions of fixed compilers?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38980426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38980507", "body": "If we're supporting broken compilers, just make this `const` rather than `constexpr` for all compilers. And add a comment explaining why.\n\nOr keep this as `constexpr` but move it out of the class and into the namespace, renaming it to\n\n`kSingletonHolderBaseDestroyWaitTime`\n\nAnd add a comment why it can't go into the class.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38980507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38980568", "body": "Lint - make this line less than 80 chars\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38980568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38993610", "body": "Do we need both of these `#include <io.h>`. Our linter wants to make sure...\n\n```\n\"io.h\" is included multiple times. Please remove one of the #includes. To suppress this lint error, add the comment 'nolint' at the end of the include line.\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38993610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38993630", "body": "We get this lint warning too\n\n```\nWarning: Symbol STDC invalid. A symbol may not begin with two adjacent underscores.\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38993630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38993720", "body": "Please make all lines 80 chars or less. So this would be something like:\n\n```\nint recvfrom(int s, char* buf, int len, int flags, struct sockaddr* from, \n             int* fromlen);\n```\n\nThere are a **bunch** of these in this pull request; I won't enumerate them all.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38993720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38993871", "body": "Got this lint error too...\n\n```\nUsing directive not allowed at top level. Override this lint warning with a /* using override */ comment\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38993871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38993895", "body": "Let's add a license here.... you can copy other files.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38993895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38994013", "body": "Double `<io.h>` again.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38994013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38994035", "body": "Another `using` at the top level lint error\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38994035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38994145", "body": "Is there a reason `NULL` can't be `nullptr` -- that's what we prefer. This would go for all newly added `NULL`s.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38994145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38994186", "body": "Same duplication of `<io.h>` and this time `<direct.h>`\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38994186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38994501", "body": "We are getting build errors:\n\n```\nfolly/SocketPortability.h: In function int folly::socket_portability::getpeername(int, sockaddr*, int*):\nfolly/SocketPortability.h:126:109: error: invalid conversion from int* to socklen_t* {aka unsigned int*} [-fpermissive]\ninclude/sys/socket.h:142:12: error:   initializing argument 3 of int getpeername(int, sockaddr*, socklen_t*) [-fpermissive]\n```\n\nThis is happening in a bunch of places. Like most of the functions below.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/38994501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "steelbrain": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/68129254", "body": "@JoelMarcey, we don't have the stack trace, but it was on windows. compiling same under linux/unix didn't produce that error.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/68129254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "nsuke": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/68361683", "body": "Oh I forgot to mention one thing\n- During `make`, a process generating something like \"signature\" or \"fingure print\" needs to load double-conversion .so file. It is covered by `LD_LIBRARY_PATH` part\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/68361683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/71298156", "body": "https://code.google.com/p/double-conversion/ is officially migrated to github and does not have latest changes any more. No .tar.gz release has been made after that yet though.\n\nI don't see why you are not having problem with `CPPFLAGS=-I$DOUBLE_CONVERISON_HOME/src/` because include statements point to `<double-conversion/....h>` while \"double-conversion\" directory doesn't exist inside `src`.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/71298156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/71366856", "body": "No worries, just minor contribution back.\n\nI rebased it but there's one thing that original PR contains and is not discussed here:\nDuring the build, `./generate_fingerprint_tables` is invoked by `make` and it needs LD_LIBRARY_PATH, unless of course you have double-conversion installed.\n\nI supposed this is a valid problem and included to rebased version. Let me know if it's not the case.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/71366856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "andbass": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/69690272", "body": "I'm not very familiar with assembly, so I'm not sure if I can patch it myself. I'll give it a go however.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/69690272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "spacek": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/70381736", "body": "Same problem here:\n\nLinking C static library libafdt.a\n[  0%] Built target afdt\n[  0%] Building C object third-party/timelib/CMakeFiles/timelib.dir/parse_tz.c.o\n[  0%] Building C object third-party/timelib/CMakeFiles/timelib.dir/timelib.c.o\n[  0%] Building C object third-party/timelib/CMakeFiles/timelib.dir/tm2unixtime.c.o\n[  1%] Building C object third-party/timelib/CMakeFiles/timelib.dir/unixtime2tm.c.o\n[  1%] [  2%] [  2%] Building CXX object third-party/folly/CMakeFiles/folly.dir/folly/Bits.cpp.o\nBuilding CXX object third-party/folly/CMakeFiles/folly.dir/folly/Checksum.cpp.o\nBuilding CXX object third-party/folly/CMakeFiles/folly.dir/folly/Conv.cpp.o\nIn file included from /Users/jirispacek/hhvm/third-party/folly/folly/FBString.h:60:0,\n                 from /Users/jirispacek/hhvm/third-party/folly/folly/Conv.h:27,\n                 from /Users/jirispacek/hhvm/third-party/folly/folly/Conv.cpp:17:\n/Users/jirispacek/hhvm/third-party/folly/folly/Malloc.h:91:20: fatal error: malloc.h: No such file or directory\n #include <malloc.h>\n                    ^\ncompilation terminated.\nmake[2]: **\\* [third-party/folly/CMakeFiles/folly.dir/folly/Conv.cpp.o] Error 1\nmake[2]: **\\* Waiting for unfinished jobs....\nmake[1]: **\\* [third-party/folly/CMakeFiles/folly.dir/all] Error 2\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/70381736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/71267706", "body": "@Gownta yes, I use Yosemite, I tried echo `__APPLE__`  but this returned the same string.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/71267706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "MerelyAPseudonym": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/70958248", "body": "@Gownta, I have the same problem, and running the command you provided results in the following output:\n\n``` none\n$ g++ -dM -E Conv.cpp | grep __APPLE__\nConv.cpp:17:10: fatal error: 'folly/Conv.h' file not found\n#include <folly/Conv.h>\n         ^\n1 error generated.\n#define __APPLE__ 1\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/70958248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "marcinpe": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/71284667", "body": "the issue has been fixed in fe41434ed66e679162423eb608df857d844013b8. Thanks for taking time to submit the bug and the fix! \n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/71284667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/71287250", "body": "issue fixed in: 6d079c1421885038d14a1f65e71c010836b6c94c. Thank you for taking the time to report and submit the fix\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/71287250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/71291693", "body": "Hey N.Sukegawa, sorry for the very long time it took me to reply. \nREADME was fixed in 6de57aa59adde2eb1bdb969c0be8e169b1cf2d87 in a way very similar to your diff. We still prefer to point to the official google page of double-conversion.\nI followed the steps from README on newest arch linux and it does build successfully. Is there still anything you consider incorrect in current README?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/71291693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/71338651", "body": "You are right, sorry I missed the notice on the google project page. I recheck the build, cloning the repo from the new page\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/71338651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/71358350", "body": "You were also right with the build issues. It worked for me, because I forgot I did install double-conversion system-wide some time ago. \nIf you wish you can update your changes against the latest head and I can merge them, or I can do.\nThank you again for the fixes.  \n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/71358350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/71773541", "body": "I pushed your changes to our internal repo, once we sync github README and configure.ac will be fixed\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/71773541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/72726050", "body": "i can confirm it. Happens also on latest arch linux (as a result make check fails on ThreadLocalTest). Seems that the presence of pthread_at_fork is tested without linking in pthread.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/72726050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/72726475", "body": "the fixes to README and configure.ac has been pulled in. Thanks NSuke!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/72726475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/73579233", "body": "I verified the fix on latest arch linux with gcc 4.9.2. Big thanks for help!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/73579233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/73579816", "body": "pull request #125  has been merged. I verified it work with latest Arch Linux (it used to fail before).\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/73579816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "gustavotemple": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/72473038", "body": "@WenlinWang, can you paste your `uname -a` ?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/72473038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/72634110", "body": "@WenlinWang, open your `config.log` and try grep the error. In my case, I found the problem (was a customized gcc that I have).\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/72634110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/73289736", "body": "https://github.com/facebook/folly/pull/127\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/73289736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/10961983", "body": "Thank you very much, @Gownta !\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/10961983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "WenlinWang": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/72580283", "body": "It shows as follows\n\nLinux XXX.XXX.XXX.edu 2.6.32-504.1.3.el6.x86_64 #1 SMP Tue Nov 11 14:19:04 CST 2014 x86_64 x86_64 x86_64 GNU/Linux\n\nThanks in advance, \n\n@gustavotemple \n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/72580283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "0mok": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/72988573", "body": "I already fixed configure script for this issue.\nPlease check my pull request.\nhttps://github.com/facebook/folly/pull/125\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/72988573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jamescarr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/73129706", "body": "Thank you so much! This will simplify our build process tremendously!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/73129706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sriramsankar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/74623519", "body": "Suggestion for fix:  ThreadLocalPtr should not allow destruction of thread local state and calls to accessAllThreads() to happen simultaneously.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/74623519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "andrewcox": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/76056804", "body": "Yes\nhttps://github.com/facebook/folly/blob/master/folly/test/Makefile.am#L20\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76056804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/91015842", "body": "Yeah, this is a bug in configure.ac.\n\nThe next line in configure.ac then checks gflags by making sure getenv is exported, another bug.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/91015842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/10043097", "body": "I did this\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/10043097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "lbianc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/76255417", "body": "@fugalh @djwatson @jsedgwick \n\nCould you help reviewing this PR?\nThanks!!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76255417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "loverszhaokai": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/76314788", "body": "Yes, the gtest-1.7.0 is required!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76314788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76513491", "body": "So, Should I close this pull ? \n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76513491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76513498", "body": "So, Should I close this pull ?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76513498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76513509", "body": "So, Should I close this pull ?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76513509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76513515", "body": "So, Should I close this pull ?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76513515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76939994", "body": "Should we change Copyright to 2015 ?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76939994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "emyr666": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/76836573", "body": "Not an issue. This is a proxygen problem. They are specifically bringing in v0.20.0 which doesn't have the fix for this.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76836573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/77419017", "body": "Tags up to v0.27.0 have now appeared. Many thanks. Next step...I will try to get fbthrift and proxygen to pull in later versions of folly....\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/77419017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "zauguin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/76991896", "body": "Does anything speaks against this?\n\n``` diff\ndiff --git a/folly/detail/IPAddress.h b/folly/detail/IPAddress.h\nindex f255229..f6db412 100644\n--- a/folly/detail/IPAddress.h\n+++ b/folly/detail/IPAddress.h\n@@ -46,7 +46,8 @@ extern \"C\" {\n #include <folly/Conv.h>\n #include <folly/Format.h>\n\n-#if defined(__APPLE__) && !defined(s6_addr16)\n+#if !defined(s6_addr16)\n # define s6_addr16 __u6_addr.__u6_addr16\n #endif\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/76991896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "defuz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/77066322", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/77066322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ramrengaswamy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/77215187", "body": "Ping ? Is this going to be fixed ?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/77215187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "chipturner": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/79179304", "body": "Hello, thank you for your patch (and the others, which I am in the process of merging).  Can you offer a little more context on this diff?  Why only partially disabling value semantics?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/79179304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "cppfool": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/80983095", "body": "@chipturner, Any class which inherits from AcceptCallback needs\ndefault constructor but if  AcceptCallback doesn't have any child\nthen it need not do so.\nAcceptCallback doesn't need others, at least not yet.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/80983095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/81626900", "body": "@chipturner, We're =deleteing move assign here. But we're not explicitly =deleteing other\nvalue semantics enablers. By asking \"only partially disabling value semantics\" are\nyou targeting previous two sentences?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/81626900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/82910720", "body": "I'm such a fool that I couldn't understand that how to keep this\n\npull request clean. This pull request contains commit pollution\n\nfrom my side.\n\nThis pull request is worthy of the following two commits:\n\n```\n            commit 1: c2dfd2de10277f\n\n            commit 2: 2a967ade26ec3\n```\n\nother commits in this pull request must be ignored,\n\n(I know it is cumbersome, sorry for that.) They are either pollution\n\nor a already merged commit.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/82910720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/82936962", "body": "Correction:\n\ncorrected title of this pull request is:\n\nCompiling without c++ extensions, e.g. gnu c++ exts., might complain\n\ncorrected title of the commit c2dfd2d is:\n\nCompiling without c++ extensions, e.g. gnu c++ exts., might complain\n\nPlease consider commit's title correction if it can be done before merge.\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/82936962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90858305", "body": "This pull request has been closed in favour\n\nof pull request #179.\n\nThis commit compiles well with \"clang++ -std=c++11\",\n\nbut fails with \"g++ -std=c++11\". The reason for this\n\nfailure is:\n\n\"clang++ -std=c++11\" allows c++14-extended constexpr\n\nwhile g++ doesn't do so. The pull request #179\n\naddress this failure.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90858305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90859414", "body": "This pull request has been closed in favour\n\nof pull request #180 and #181.\n\nThis commit compiles well with \"clang++ -std=c++11\",\n\nbut fails with \"g++ -std=c++11\". The reason for this\n\nfailure is:\n\n\"clang++ -std=c++11\" allows c++14-extended constexpr\n\nwhile g++ doesn't do so. The pull request #180 and #181\n\naddress this failure.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90859414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "dweekly": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/81242727", "body": "I'm experiencing the same issue on OS/X. Note that Google's glog does not actually appear to export an openlog() symbol.\n\n$ uname -a\nDarwin dweekly-macbookpro.roam.corp.google.com 14.1.0 Darwin Kernel Version 14.1.0: Thu Feb 26 19:26:47 PST 2015; root:xnu-2782.10.73~1/RELEASE_X86_64 x86_64\n\n/// from config.log ///\nconfigure:16972: checking for openlog in -lglog\nconfigure:16997: g++ -o conftest -std=gnu++0x -g -O2 -I/Users/dweekly/folly/folly/double-conversion/src -L/Users/dweekly/f\nolly/folly/double-conversion conftest.cpp -lglog   >&5\nld: library not found for -lglog\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nconfigure:16997: $? = 1\nconfigure: failed program was:\n| /\\* confdefs.h _/\n| #define PACKAGE_NAME \"folly\"\n| #define PACKAGE_TARNAME \"folly\"\n| #define PACKAGE_VERSION \"30.0\"\n| #define PACKAGE_STRING \"folly 30.0\"\n| #define PACKAGE_BUGREPORT \"folly@fb.com\"\n| #define PACKAGE_URL \"\"\n| #define PACKAGE \"folly\"\n| #define VERSION \"30.0\"\n| #define STDC_HEADERS 1\n| #define HAVE_SYS_TYPES_H 1\n| #define HAVE_SYS_STAT_H 1\n| #define HAVE_STDLIB_H 1\n| #define HAVE_STRING_H 1\n| #define HAVE_MEMORY_H 1\n| #define HAVE_STRINGS_H 1\n| #define HAVE_INTTYPES_H 1\n| #define HAVE_STDINT_H 1\n| #define HAVE_UNISTD_H 1\n| #define HAVE_DLFCN_H 1\n| #define LT_OBJDIR \".libs/\"\n| #define HAVE_STDCXX_0X /__/\n| /_ end confdefs.h.  _/\n| \n| /_ Override any GCC internal prototype to avoid an error.\n|    Use char because int might match the return type of a GCC\n|    builtin and then its argument prototype would still apply.  */\n| #ifdef __cplusplus\n| extern \"C\"\n| #endif\n| char openlog ();\n| int\n| main ()\n| {\n| return openlog ();\n|   ;\n|   return 0;\n| }\nconfigure:17006: result: no\nconfigure:17016: error: Please install google-glog library\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/81242727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "andreazevedo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/83114788", "body": "Tags up to v0.31.0 are up.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/83114788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "ajz01": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/87155787", "body": "received the same error while trying to build proxygen which has folly dependency. Building from this repo directly produced the same error.\n\nIn file included from Bits.cpp:19:0:\n./../folly/CpuId.h: In function 'int (\\* {anonymous}::folly_popcount_ifunc())(unsigned int)':\n./../folly/CpuId.h:49:62: error: PIC register clobbered by 'ebx' in 'asm'\nasm(\"cpuid\" : \"=a\"(n) : \"a\"(0) : \"ebx\", \"edx\", \"ecx\");\n^\n./../folly/CpuId.h:51:65: error: PIC register clobbered by 'ebx' in 'asm'\nasm(\"cpuid\" : \"=c\"(f1c_), \"=d\"(f1d_) : \"a\"(1) : \"ebx\");\n\nDISTRIB_ID=LinuxMint\nDISTRIB_RELEASE=17\nDISTRIB_CODENAME=qiana\nDISTRIB_DESCRIPTION=\"Linux Mint 17 Qiana\"\nNAME=\"Ubuntu\"\nVERSION=\"14.04, Trusty Tahr\"\nID=ubuntu\nID_LIKE=debian\nPRETTY_NAME=\"Ubuntu 14.04 LTS\"\nVERSION_ID=\"14.04\"\n\ngcc (Ubuntu 4.8.2-19ubuntu1) 4.8.2\\\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/87155787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "peroxyacyl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/90069898", "body": "How about this workaround from https://gist.github.com/alfwatt/3588c5aa1f7a1ef7a3bb ?\nIt may be more accurate implementation of clock_gettime. I can compile it at 34.0.\n\n```\n#ifdef __MACH__\n\n#include <sys/time.h>\n#include <mach/mach_time.h>\n#include <sys/types.h>\n#include <sys/_types/_timespec.h>\n#include <mach/mach.h>\n#include <mach/clock.h>\n\n#define TIMER_ABSTIME -1\n#define CLOCK_REALTIME CALENDAR_CLOCK\n#define CLOCK_MONOTONIC SYSTEM_CLOCK\n#define MT_NANO (+1.0E-9)\n#define MT_GIGA UINT64_C(1000000000)\n\nstatic double mt_timebase = 0.0;\nstatic uint64_t mt_timestart = 0;\n\nstatic int clock_gettime(int clk_id, struct timespec *tp)\n{\n    kern_return_t retval = KERN_SUCCESS;\n    if( clk_id == TIMER_ABSTIME)\n    {\n        if (!mt_timestart) { // only one timer, initilized on the first call to the TIMER\n            mach_timebase_info_data_t tb = { 0 };\n            mach_timebase_info(&tb);\n            mt_timebase = tb.numer;\n            mt_timebase /= tb.denom;\n            mt_timestart = mach_absolute_time();\n        }\n\n        double diff = (mach_absolute_time() - mt_timestart) * mt_timebase;\n        tp->tv_sec = diff * MT_NANO;\n        tp->tv_nsec = diff - (tp->tv_sec * MT_GIGA);\n    }\n    else // other clk_ids are mapped to the coresponding mach clock_service\n    {\n        clock_serv_t cclock;\n        mach_timespec_t mts;\n\n        host_get_clock_service(mach_host_self(), clk_id, &cclock);\n        retval = clock_get_time(cclock, &mts);\n        mach_port_deallocate(mach_task_self(), cclock);\n\n        tp->tv_sec = mts.tv_sec;\n        tp->tv_nsec = mts.tv_nsec;\n    }\n\n    return retval;\n}\n\n#endif\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/90069898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "paulbiss": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/91128342", "body": "cc @edwinsmith\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/91128342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/issues/comments/91693582", "body": "cc @edwinsmith\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/91693582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/19153674", "body": "I see no references to this method in master for wangle, can you point me to where you think we're referencing it?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/19153674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "edwinsmith": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/91232517", "body": "and cc @jdelong in case of folly questions. We will need the CLA before this can be committed, but a few initial comments:\n- (minor) there's one place where PAUSE needs to be indented one more space\n- PAUSE should probably be called FOLLY_PAUSE since macros aren't in any namespace.  I'm not very familliar with folly coding conventions, @jdelong - should it be an inline function instead? and is there a better place than Portability.h?\n- is FOLLY_X64 intended to be x86-64 specific or just 64-bit specific? i'm assuming it implies arch and bits, so I think this diff should also introduce FOLLY_A64, and if there's code that's really using FOLLY_X64 as a 64-vs-32 bit flag, we might just want a separate FOLLY_64 flag for that. (maybe separate diff).\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/91232517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sethkrasnianski": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/folly/issues/comments/93173434", "body": "Rebased.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/issues/comments/93173434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dabrahams": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/1412776", "body": "Inscrutable huge changesets like this one tend to undermine the \"open-source-ness\" of this effort.  Would it be possible to get the actual change history in here?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/1412776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/comments/1412977", "body": "Oh!  The other commit was marked \"initial.\"  Sorry for the noise.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/1412977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "BenPope": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/2823909", "body": "I think there is a missing file:\nhttps://github.com/facebook/folly/issues/23\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/2823909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "samveen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/10027494", "body": "Would you tag a release with this revision?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/10027494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "korovkin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/13481209", "body": "hey there, what is the status for supporting MSVC ? \nwe would like to use it with MSVC 2015 ? \n\nthanks\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/13481209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/13506060", "body": "thank you very much for the response, thats awesome!\nwhich parts are actually used? Format.h? \nwe are seeing a few issues with MSVC 2015 and template matching with MSVC... \n\nCC @DEGoodmanWilson\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/13506060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/13507373", "body": "That's great! \n\nJust to confirm - \nIs PR 305 all is needed to compile it for MSVC 2015? \n\n> On Sep 29, 2015, at 17:07, Orvid King notifications@github.com wrote:\n> \n> As long as it's not one of the files removed in HHVM's CMake file for Folly, then it should be supported. (I just realized I apparently have a PR for that that I haven't submitted, as Subprocess.cpp is not supported under MSVC)\n> \n> For template matching with Format.h under MSVC, there is a fix in Folly #305 to help with that.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/13507373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/13507387", "body": "One more question - could you please share the SLN file that compiles it? \n\nThanks \n\n> On Sep 29, 2015, at 18:21, H Grosman korovkin@gmail.com wrote:\n> \n> That's great! \n> \n> Just to confirm - \n> Is PR 305 all is needed to compile it for MSVC 2015? \n> \n> > On Sep 29, 2015, at 17:07, Orvid King notifications@github.com wrote:\n> > \n> > As long as it's not one of the files removed in HHVM's CMake file for Folly, then it should be supported. (I just realized I apparently have a PR for that that I haven't submitted, as Subprocess.cpp is not supported under MSVC)\n> > \n> > For template matching with Format.h under MSVC, there is a fix in Folly #305 to help with that.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/13507387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/13507699", "body": "If the project files produces by cmake work that's awesome as we also use it. \n\nWe don't use much from folly, mostly json, dynamic and string parsing API\n\nWhich leads me to a conclusion that it should be fine. \n\nWe will give it a shot. \n\nThank you for answering, and please let us know if you push more MSVC changes. \n\nCheers \n\n> On Sep 29, 2015, at 18:50, Orvid King notifications@github.com wrote:\n> \n> For everything to compile, you need more than just that PR. HHVM builds Folly via CMake, which generates the project file, so the project file I pass along would be of limited use.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/13507699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/13521566", "body": "Hi Orvid, \n\ni can see a few more pending MSVC PRs here: \n\nAre those needed in order for folly to compile for VS2015 ? \n(except the one you already commented on PR 315) \n\nthanks\n\n> On Sep 29, 2015, at 19:02, H Grosman korovkin@gmail.com wrote:\n> \n> If the project files produces by cmake work that's awesome as we also use it. \n> \n> We don't use much from folly, mostly json, dynamic and string parsing API\n> \n> Which leads me to a conclusion that it should be fine. \n> \n> We will give it a shot. \n> \n> Thank you for answering, and please let us know if you push more MSVC changes. \n> \n> Cheers \n> \n> On Sep 29, 2015, at 18:50, Orvid King <notifications@github.com <mailto:notifications@github.com>> wrote:\n> \n> > For everything to compile, you need more than just that PR. HHVM builds Folly via CMake, which generates the project file, so the project file I pass along would be of limited use.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub https://github.com/facebook/folly/commit/bae1869791b9fad1d53a45e18124e636b4ced923#commitcomment-13507610.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/13521566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/13521988", "body": "this one seems really important: \nhttps://github.com/facebook/folly/pull/287 https://github.com/facebook/folly/pull/287\n\nShould we be pulling it in ? \n\n> On Sep 30, 2015, at 08:48, Haim Grosman korovkin@gmail.com wrote:\n> \n> Hi Orvid, \n> \n> i can see a few more pending MSVC PRs here: \n> \n> Are those needed in order for folly to compile for VS2015 ? \n> (except the one you already commented on PR 315) \n> \n> thanks\n> \n> > On Sep 29, 2015, at 19:02, H Grosman <korovkin@gmail.com <mailto:korovkin@gmail.com>> wrote:\n> > \n> > If the project files produces by cmake work that's awesome as we also use it. \n> > \n> > We don't use much from folly, mostly json, dynamic and string parsing API\n> > \n> > Which leads me to a conclusion that it should be fine. \n> > \n> > We will give it a shot. \n> > \n> > Thank you for answering, and please let us know if you push more MSVC changes. \n> > \n> > Cheers \n> > \n> > On Sep 29, 2015, at 18:50, Orvid King <notifications@github.com <mailto:notifications@github.com>> wrote:\n> > \n> > > For everything to compile, you need more than just that PR. HHVM builds Folly via CMake, which generates the project file, so the project file I pass along would be of limited use.\n> > > \n> > > \u2014\n> > > Reply to this email directly or view it on GitHub https://github.com/facebook/folly/commit/bae1869791b9fad1d53a45e18124e636b4ced923#commitcomment-13507610.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/13521988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/13523470", "body": "Hey Orvid, \n\nwe are trying to get this to work on Windows VS2015, would it be possible for you to push your current branch as is to github, so we could test and try it as well? \n\n> On Sep 30, 2015, at 09:06, Haim Grosman korovkin@gmail.com wrote:\n> \n> this one seems really important: \n> https://github.com/facebook/folly/pull/287 https://github.com/facebook/folly/pull/287\n> \n> Should we be pulling it in ? \n> \n> > On Sep 30, 2015, at 08:48, Haim Grosman <korovkin@gmail.com <mailto:korovkin@gmail.com>> wrote:\n> > \n> > Hi Orvid, \n> > \n> > i can see a few more pending MSVC PRs here: \n> > \n> > Are those needed in order for folly to compile for VS2015 ? \n> > (except the one you already commented on PR 315) \n> > \n> > thanks\n> > \n> > > On Sep 29, 2015, at 19:02, H Grosman <korovkin@gmail.com <mailto:korovkin@gmail.com>> wrote:\n> > > \n> > > If the project files produces by cmake work that's awesome as we also use it. \n> > > \n> > > We don't use much from folly, mostly json, dynamic and string parsing API\n> > > \n> > > Which leads me to a conclusion that it should be fine. \n> > > \n> > > We will give it a shot. \n> > > \n> > > Thank you for answering, and please let us know if you push more MSVC changes. \n> > > \n> > > Cheers \n> > > \n> > > On Sep 29, 2015, at 18:50, Orvid King <notifications@github.com <mailto:notifications@github.com>> wrote:\n> > > \n> > > > For everything to compile, you need more than just that PR. HHVM builds Folly via CMake, which generates the project file, so the project file I pass along would be of limited use.\n> > > > \n> > > > \u2014\n> > > > Reply to this email directly or view it on GitHub https://github.com/facebook/folly/commit/bae1869791b9fad1d53a45e18124e636b4ced923#commitcomment-13507610.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/13523470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/13531108", "body": "i invested some time today to complete your set of PRs \n\nit compiles and runs for me: \n\ni didn\u2019t have time to issue a proper PR, which i will do a bit later\u2026 \n\nin the meanwhile, please these are my changes if you would like to cherry pick them\nhttps://github.com/korovkin/folly_MSVC https://github.com/korovkin/folly_MSVC\n\n> On Sep 30, 2015, at 14:02, Orvid King notifications@github.com wrote:\n> \n> Update 1 will only be able to eliminate some of the changes, most of them will still be needed. Most of the changes which are #287 https://github.com/facebook/folly/pull/287, are because Windows is not a Posix system, and, as such, doesn't implement a Posix API. There used to be a posix compatibility layer that you could enable in Windows itself, but that wouldn't be able to compile from Visual Studio, nor would it even be using a version of GCC that even supports constexpr. The SUA layer was deprecated with Windows 7, and removed in later versions. #287 https://github.com/facebook/folly/pull/287 is implementing the pieces of the Posix API that HHVM uses and that MSVC doesn't implement.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub https://github.com/facebook/folly/commit/bae1869791b9fad1d53a45e18124e636b4ced923#commitcomment-13528454.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/13531108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "ronaldyang": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/13823061", "body": "My compiler in Mac is complaining \"const char *getSSLCertSigAlgName() const\" missing in AsyncSSLSocket.h now.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/13823061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/comments/13828365", "body": "yes, looks good.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/13828365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "cgthayer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/14491415", "body": "what, how, d'oh, hahahaha\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/14491415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "cleeland": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/15170068", "body": "This change breaks compilation on OS X Yosemite (10.10).\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/15170068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "shindo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/15940212", "body": "The file is actually named `ConditionallyExistentTest.cpp`.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/15940212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/comments/15952792", "body": "This test expects `lib_thread_local_test.so` library to be built, but there's no such rule in `Makefile.am`, thus I cannot get the test passed. How is it supposed to work?\n\nI have tried to solve the problem with the following patch:\n\n```\ndiff --git a/folly/test/Makefile.am b/folly/test/Makefile.am\nindex deb2e69..415b876 100644\n--- a/folly/test/Makefile.am\n+++ b/folly/test/Makefile.am\n@@ -80,9 +80,17 @@ TESTS += fbstring_test_using_jemalloc\n thread_cached_int_test_SOURCES = ThreadCachedIntTest.cpp\n thread_cached_int_test_LDADD = libfollytestmain.la $(top_builddir)/libfollybenchmark.la\n\n+# lib_thread_local_test.so is needed for thread_local_test\n+lib_thread_local_test_la_SOURCES = ThreadLocalTestLib.cpp\n+lib_thread_local_test_la_CPPFLAGS = $(AM_CPPFLAGS)\n+lib_thread_local_test_la_LDFLAGS = $(AM_LDFLAGS) -module -shared -avoid-version -export-dynamic\n+lib_thread_local_test_la_LIBADD = $(top_builddir)/libfolly.la\n+check_LTLIBRARIES += lib_thread_local_test.la\n+\n thread_local_test_SOURCES = ThreadLocalTest.cpp\n thread_local_test_LDADD = libfollytestmain.la $(top_builddir)/libfollybenchmark.la\n thread_local_test_LDFLAGS = -ldl\n+thread_local_test_DEPENDENCIES = lib_thread_local_test.la\n TESTS += thread_cached_int_test thread_local_test\n\n fbvector_test_SOURCES = FBVectorTest.cpp\n```\n\nbut it doesn't work as libtool builds static library (even if `noinst_LTLIBRARIES` is used instead of `check_LTLIBRARIES`).\n\nCould you help with this?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/15952792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "nikic": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/16870246", "body": "Why the -1 here? Shouldn't it be just `len`?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/16870246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/comments/16885197", "body": "@Orvid glibc `strndup(\"xyzabc\", 2)` gives me `\"xy\"`, so it seems to be the length without null terminator.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/16885197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "chedetinaveen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/17508165", "body": "make check error in ThreadLocalDetail.h. how to fix this?\n\n```\ng++ -DHAVE_CONFIG_H   -I../.. -pthread -I/usr/include -Igtest-1.7.0/include  -std=gnu++0x -g -O2 -MT ThreadLocalTest.o -MD -MP -MF $depbase.Tpo -c -o ThreadLocalTest.o ThreadLocalTest.cpp &&\\\nmv -f $depbase.Tpo $depbase.Po\n```\n\nIn file included from ../../folly/ThreadLocal.h:53:0,\n                 from ThreadLocalTest.cpp:17:\n../../folly/detail/ThreadLocalDetail.h: In instantiation of \u2018folly::threadlocal_detail::ElementWrapper::set(Ptr, const Deleter&) [with Ptr = Widget_; Deleter = void(Widget_, folly::TLPDestructionMode)]::__lambda8\u2019:\n../../folly/detail/ThreadLocalDetail.h:110:57:   required from \u2018struct folly::threadlocal_detail::ElementWrapper::set(Ptr, const Deleter&) [with Ptr = Widget_; Deleter = void(Widget_, folly::TLPDestructionMode)]::__lambda8\u2019\n../../folly/detail/ThreadLocalDetail.h:110:16:   required from \u2018void folly::threadlocal_detail::ElementWrapper::set(Ptr, const Deleter&) [with Ptr = Widget_; Deleter = void(Widget_, folly::TLPDestructionMode)]\u2019\n../../folly/ThreadLocal.h:242:5:   required from \u2018void folly::ThreadLocalPtr<T, Tag>::reset(T_, const Deleter&) [with Deleter = void(Widget_, folly::TLPDestructionMode); T = Widget; Tag = void]\u2019\nThreadLocalTest.cpp:73:52:   required from here\n../../folly/detail/ThreadLocalDetail.h:111:46: error: variable \u2018d\u2019 has function type\n           void\\* pt, TLPDestructionMode mode) {\n                                              ^\n../../folly/detail/ThreadLocalDetail.h:111:46: error: variable \u2018d\u2019 has function type\n../../folly/detail/ThreadLocalDetail.h: In instantiation of \u2018struct folly::threadlocal_detail::ElementWrapper::set(Ptr, const Deleter&) [with Ptr = Widget_; Deleter = void(Widget_, folly::TLPDestructionMode)]::__lambda8\u2019:\n../../folly/detail/ThreadLocalDetail.h:110:16:   required from \u2018void folly::threadlocal_detail::ElementWrapper::set(Ptr, const Deleter&) [with Ptr = Widget_; Deleter = void(Widget_, folly::TLPDestructionMode)]\u2019\n../../folly/ThreadLocal.h:242:5:   required from \u2018void folly::ThreadLocalPtr<T, Tag>::reset(T_, const Deleter&) [with Deleter = void(Widget_, folly::TLPDestructionMode); T = Widget; Tag = void]\u2019\nThreadLocalTest.cpp:73:52:   required from here\n../../folly/detail/ThreadLocalDetail.h:110:57: error: field \u2018folly::threadlocal_detail::ElementWrapper::set(Ptr, const Deleter&) [with Ptr = Widget_; Deleter = void(Widget_, folly::TLPDestructionMode)]::__lambda8::__d\u2019 invalidly declared function type\n       deleter2 = new std::function<DeleterFunType>([d = d](\n                                                         ^\nIn file included from ../../folly/ScopeGuard.h:20:0,\n                 from ../../folly/ThreadLocal.h:41,\n                 from ThreadLocalTest.cpp:17:\n/usr/include/c++/4.8/functional:2450:7: error: \u2018std::function<_Res(_ArgTypes ...)>::function(_Functor) [with _Functor = folly::threadlocal_detail::ElementWrapper::set(Ptr, const Deleter&) [with Ptr = Widget_; Deleter = void(Widget_, folly::TLPDestructionMode)]::__lambda8; <template-parameter-2-2> = void; _Res = void; _ArgTypes = {void_, folly::TLPDestructionMode}]\u2019, declared using local type \u2018folly::threadlocal_detail::ElementWrapper::set(Ptr, const Deleter&) [with Ptr = Widget_; Deleter = void(Widget_, folly::TLPDestructionMode)]::__lambda8\u2019, is used but never defined [-fpermissive]\n       function<_Res(_ArgTypes...)>::\n       ^\nmake[3]: *_\\* [ThreadLocalTest.o] Error 1\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/17508165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "kvikas": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/18221011", "body": "This change makes it fail to compile on systems where `TCPI_OPT_SYN_DATA` is not defined. Is there a fix for that?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/18221011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "spershin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/19150024", "body": "This commit broke Facebook Wangle build. :(\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/19150024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/comments/19150656", "body": "FB Wangle still uses this method (it hadn't been updated as far as I can see).\nSee two top issues here: https://github.com/facebook/wangle/issues\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/19150656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/comments/19151438", "body": "I did:\n\ngit clone https://github.com/facebook/folly\n-build folly with some effort-\n\nThen:\n\ngit clone https://github.com/facebook/wangle\n-try to build wangle and hit lots of roadblocks, including the mentioned-\n\nThose \"git clone\" commands supposed to get the latest master, right?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/19151438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/comments/19154259", "body": "It is actually misspelled, look for \"getTFOSucceded\" instead of correct \"getTFOSucceeded\".\nLink:\nhttps://github.com/facebook/wangle/blob/master/wangle/acceptor/Acceptor.cpp\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/19154259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/comments/19155116", "body": "Yeah, was added back ~ 2 days ago.\nThat's about time I've been dancing around with folly, wangle and thrift, trying to compile them.\nHaven't cloned folly for probably longer than that.\nI would assume it will build now.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/19155116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "zonr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/19391829", "body": "Why \"exception\" (the 2nd parameter to `ASSERT_DEATH()`) is expected here?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/19391829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/19394572", "body": "`#elif defined(OPENSSL_IS_BORINGSSL) ...` never takes even when Folly is built with BoringSSL (and cause build failure). This is because BoringSSL sets `OPENSSL_VERSION_NUMBER` to 0x10002000 which switches on `OPENSSL_IS_102`.\n\nMy suggestion: Add guard in `OpenSSLVersionFinder.h` to avoid setting `OPENSSL_IS_{101,102,110}` for BoringSSL. IMHO, `OPENSSL_VERSION_NUMBER` in BoringSSL is not meaningful in practical use other than compatibility.\n\n```\n--- a/folly/ssl/detail/OpenSSLVersionFinder.h                                                                                                                                        \n+++ b/folly/ssl/detail/OpenSSLVersionFinder.h                                                                                                                                        \n@@ -20,6 +20,8 @@                                                                                                                                                                    \n #include <openssl/crypto.h>                                                                                                                                                         \n #include <openssl/opensslv.h>                                                                                                                                                       \n\n+#if !defined(OPENSSL_IS_BORINGSSL)                                                                                                                                                  \n #define OPENSSL_IS_101                      \\                                                                                                                                       \n   (OPENSSL_VERSION_NUMBER >= 0x1000105fL && \\                                                                                                                                       \n    OPENSSL_VERSION_NUMBER < 0x1000200fL)                                                                                                                                            \n@@ -28,6 +30,8 @@                                                                                                                                                                    \n    OPENSSL_VERSION_NUMBER < 0x10100000L)                                                                                                                                            \n #define OPENSSL_IS_110 (OPENSSL_VERSION_NUMBER >= 0x10100000L)                                                                                                                      \n+#endif                                                                                                                                                                              \n\n // This is used to find the OpenSSL version at runtime. Just returning                                                                                                              \n // OPENSSL_VERSION_NUMBER is insufficient as runtime version may be different                                                                                                       \n // from the compile-time version\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/19394572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/19407756", "body": "Thank you guys! @anirudhvr: Let me prepare a PR for you :)\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/19407756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/20373405", "body": "I think that we need to change `_LIBCPP_VERSION < 3900` to `_LIBCPP_VERSION < 4000` so users who build with unmodified libc++ 3.9.0 (or 3.9.1, both have `_LIBCPP_VERSION = 3900`) can correctly include these throw* definitions?", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/20373405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/21335761", "body": "I suggest that we should not check the `count_` (which tracks the number of times copy ctor is called here). The value depends on how `std::sort()` and `std::inplace_merge()` are implemented in STL library. The following shows number of times copy ctor and copy assignment being called for \"10\":\r\n\r\ng++ & libstdc++ 4.8.5:\r\n- copy ctor called: 1\r\n- copy assignment called: 3\r\n\r\nclang & libc++ 3.9.2:\r\n- copy ctor called: 3\r\n- copy assignment called: 2\r\n\r\n(Side note: it seems like libc++ needs one more movements than libstdc++ counterpart)", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/21335761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/21336667", "body": "How about using `TemporaryFile` to avoid `O_TMPFILE` which may not be available on older kernel?\r\n\r\n```--- a/folly/io/async/test/AsyncSocketTest2.cpp\r\n+++ b/folly/io/async/test/AsyncSocketTest2.cpp\r\n@@ -3119,7 +3119,8 @@ TEST(AsyncSocketTest, SendMessageAncillaryData) {\r\n   // Open a temporary file and write a magic string to it\r\n   // We'll transfer the file handle to test the message parameters\r\n   // callback logic.\r\n-  int tmpfd = open(\"/var/tmp\", O_RDWR | O_TMPFILE);\r\n+  TemporaryFile file;\r\n+  int tmpfd = file.fd();\r\n   ASSERT_NE(tmpfd, -1) << \"Failed to open a temporary file\";\r\n   std::string magicString(\"Magic string\");\r\n   ASSERT_EQ(write(tmpfd, magicString.c_str(), magicString.length()),\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/21336667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/comments/21336706", "body": "Also, do you forget to call `::close(tmpfd);`?", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/21336706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/facebook/folly/pulls/comments/94279158", "body": "Done. Follow @anirudhvr's comment to remove the inclusion. Sorry that I forget to verify the build (outside our custom build environment) before uploading. :(", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/94279158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/94279167", "body": "Done. Thanks a lot! (I should take care of Clang's complaints!)", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/94279167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "maxgeorg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/21361425", "body": "@zonr , thank you for your comments!\r\nI will look into converting `O_TMPFILE` to `TemporaryFile` since there is a demand for that.\r\n\r\nRegarding closing the `tmpfd` file handle, I need to keep it around at least until `recvmsg(sfd, &msgh, 0)` at line  3171 succeeds, then can close it. Just wonder if it's going to be better than letting the OS close it for me on process exit.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/21361425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Mandar12": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/24040378", "body": "call constexpr_min recursively instead of constexpr_max.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/24040378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "waseembasheer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/25665382", "body": "The change does not compile on Visual C++ compiler. Seems like friend templates with namespace qualification cannot be parsed correctly.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/25665382/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "JoeLoser": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/folly/comments/26463606", "body": "Thanks for the simple change! \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/26463606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/comments/26954111", "body": "If it's a new file, perhaps the copyright should reflect 2018-present?", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/26954111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/comments/26954156", "body": "Is a particular memory order required here for this atomic store?", "reactions": {"url": "https://api.github.com/repos/facebook/folly/comments/26954156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/facebook/folly/pulls/comments/141315556", "body": "Do you have a preference of `static_cast`ing to the proper type to make the first and second operands to min match up? Some people prefer just specifying the template parameter to `std::min` as it is only templated on one type and so that is why the first and second operand must have the same type to get the auto template deduction to work. I don't have a strong opinion on this obviously, but didn't know if Folly had some standard that others follow for this sort of thing. \r\n\r\nExample:\r\n`newMemLimit.rlim_cur =  std::min<rlim_t>(1UL << 30, oldMemLimit.rlim_max);`", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/141315556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/141580563", "body": "Thanks for the response. Very fair point on the convertibility.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/141580563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "sgolemon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/folly/pulls/comments/32464382", "body": "Comment from internal reviewer:\n\nnot every Container supports emplace_back, this change broke a project build (Container == folly::TypedIOBuf<>)\n\ncode using Container = strings::TypedBuffer is also affected\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/32464382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/32786193", "body": "This broke folly builds on our internal CI, but I think I came up with something suitable for both clang and us\n\n```\ntemplate <typename T> struct iterator_class_is_container {\n  typedef std::reverse_iterator<typename T::iterator> some_iterator;\n  enum { value = has_value_type<T>::value &&\n              std::is_constructible<T, some_iterator, some_iterator>::value };\n};\n\ntemplate <typename T> struct class_is_container\n  : std::conditional<\n      has_iterator<T>::value,\n      iterator_class_is_container<T>,\n      std::false_type\n    >::type {};\n```\n\nA diff containing this is currently up for review as D2170803\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/32786193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35584805", "body": "Why not just always use the constexpr values and avoid the #ifdefs?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35584805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35584935", "body": "Maybe reduce this assertion to just:\n\n```\n  ~AtomicLinkedList() {\n    assert(empty());\n  }\n```\n\nAnd avoid duplicating the logic and the ifdefs.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35584935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35596508", "body": "Unfortunately, we can't take this.  Could you come up with another approach, or an implementation from a more permissive license?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35596508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35591207", "body": "Shouldn't this be `!defined(_MSC_VER)` ?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35591207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35592422", "body": "`uint16_6` looks like a typo, can you confirm that?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35592422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35594544", "body": "' provides thousands separation.  So I would say the very least would be something along the lines of:\n\n```\n#ifdef FOLLY_NO_PRINTF_GROUPING\n  \"%ju\",\n#else\n  \"%'ju\",\n#endif\n  static_cast<uintmax_t>(uval));\n```\n\nAnd add a configure check to conditionally set that define.\n\nBetter would be to implement a thousands separating output for non-gnu platforms, but that's a bit more work.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35594544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35706443", "body": "How concerned do we need to be about checking for which pre-relesae we're working with?\nSeems like we can just assume \"MSVC 2015 Latest\" until final comes out.\n\nCan we kill this check and assume the two defines below are just not set?\nMakes the code a lot simpler if so.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35706443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35788639", "body": "(From @yfeldblum) This is not threadsafe. Two threads that simultaneously call readRandomDevice can overwrite each other's data. Using std::once_flag should help.\n\n```\n#include <mutex>\n\nstatic std::once_flag flag;\nstatic HCRYPTPROV provider;\nstd::call_once(flag, [&] }\n  PCHECK(CryptAcquireContext(&provider, nullptr, nullptr, PROV_RSA_FULL, 0));\n});\nCHECK(size <= std::numeric_limits<DWORD>::max()); // not PCHECK\nPCHECK(CryptGenRandom(provider, (DWORD)size, (BYTE*)data);\n```\n\nThe other possibility is to use ThreadLocal.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35788639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/36136224", "body": "I don't want to go into legalese as I'm not a lawyer, but as I understand it, the only Apache licensed code we can use is code which the actual copyright holder gives us explicit rights to, and I believe the code already in this file falls under that umbrella.\n\nThis new code comes from another party.  If you can get him to sign our CLA and contribute it under those terms, we can take it.  Otherwise.... sigh... :(\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/36136224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/36136356", "body": "AIUI, 2015 final doesn't need this, yes?  If so, we can drop this PR entirely as we're going to declare 2015 final as the minimum version for folly.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/36136356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/37798065", "body": "Note from @yfeldblum\n\n```\nconstexpr. Maybe name this pthread_zero.\n\n(IIRC the _t stands for typedef, i.e., typedef struct pthread pthread_t;, and probably shouldn't be present in value names.)\n```\n\nNote from @meyering:\n\n```\nI too prefer pthread_zero or even pthread_0 -- sounds more like a value than pthread_t_init, which might evoke something that performs an initialization. That's a little closer to the uintmax_t -> UINTMAX_MAX mapping.\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/37798065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/37798145", "body": "Note from @meyering:\n\n```\nDon't we want to return nonzero if either of these functions fails?\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/37798145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/37798240", "body": "Note from @yfeldblum: `same`\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/37798240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ariccio": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/folly/pulls/comments/34187469", "body": "Since this is for Windows, you might as well annotate `s` with `_Pre_writable_size_(n)`\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/34187469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/34188081", "body": "Actually, you might as well go ahead and declare it like this for maximum static analysis effectiveness:\n\n```\n_At_buffer_(s, _Iter_, n, _Post_satisfies_(s[_Iter_] == 0))\nInline void bzero(  _Pre_writable_size_(n) _Out_ void* s, size_t n )\n\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/34188081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/34189236", "body": "You shouldn't need to explicitly specify the buffer size,  because [Secure Template Overloads](https://msdn.microsoft.com/en-us/library/ms175759.aspx) allow for [template parameter inference](https://randomascii.wordpress.com/2013/04/03/stop-using-strncpy-already/), which is pretty cool.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/34189236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/34190309", "body": "`buf` should be `_Out_writes_z_(64)`, and the return value should be `_Ret_writes_maybenull_z_(64)`.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/34190309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/34190824", "body": "Should be `_Field_range_(DT_UNKNOWN, DT_LNK)`\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/34190824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/34191904", "body": "`_Field_z_`\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/34191904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/34195281", "body": "Protip : Mark it `_Post_ptr_invalid_` and you'll be able to detect use-after-free and double free bugs.\n\nMarking the function `_At_(dir->hand, _Post_ptr_invalid_)` will do the same for double handle closes.\n\nIs `FindClose` what you wanted to use here, or is it `CloseHandle`?\n\nAlso, why does this return an `int`, if it doesn't check any return values?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/34195281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/34195513", "body": "Mark `fmt` as `_Printf_format_string_` for format string error detection!\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/34195513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/34195827", "body": "Mark the function as `_Success_( return == 0 )` and `dst` as `_Out_` to detect uninit memory usage.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/34195827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/34231663", "body": "Fair enough.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/34231663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35818905", "body": "Huh?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35818905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35821730", "body": "Ahh, ok. Any reason why it's not a C++ cast?\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35821730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35819158", "body": "Since this is Windows-only, perhaps you could annotate `s` as:\n\n```\n_Pre_writable_size_( n )\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35819158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35819398", "body": "Since this is Windows-only, perhaps you could annotate `buf` as:\n\n```\n_Out_writes_z_( 64 )\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35819398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35819747", "body": "Since this is Windows-only, perhaps you could annotate `path` as:\n\n`_Inout_opt_z_`\n\n...and the return value as:\n`_Ret_z_`\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35819747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35820370", "body": "Since this is Windows-only, perhaps you could annotate this function like so:\n\n```\n_Ret_maybenull_ memmem( _In_reads_bytes_( hlen) const void* haystack, size_t hlen, _In_reads_bytes_( nlen ) const void* needle, size_t nlen )\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35820370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35820960", "body": "Since this is Windows-only, perhaps you could annotate `s` as:\n\n```\n_In_reads_bytes_( n )\n```\n\nSide note: I assume you're intentionally casting away `const` to preserve the (horrible) behavior of the Linux `memrchr`? If you nonetheless want static analysis (and _not_ the compiler) to treat it as `const`, you can annotate the return value as:\n\n```\n_Const_\n```\n\n...which exists for this very purpose.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/35820960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "fugalh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/folly/pulls/comments/37334724", "body": "That's just GNU-style quotes (\nhttps://www.gnu.org/prep/standards/html_node/Quote-Characters.html) - an\nill-advised tradition from a bygone era (in my personal opinion), but still\npops up perennially. I'm sure it was the preference of whoever wrote this\ncode. (An emacs user no doubt, not that there's anything wrong with that\nbut there seems to be a correlation.)\n\nOn Sat, Aug 15, 2015 at 6:13 PM Orvid King notifications@github.com wrote:\n\n> In folly/experimental/NestedCommandLineApp.cpp\n> https://github.com/facebook/folly/pull/302#discussion_r37140972:\n> \n> > @@ -130,8 +130,8 @@ void NestedCommandLineApp::displayHelp(\n> >      // Help for a given command\n> >      auto& p = findCommand(args.front());\n> >      if (p.first != args.front()) {\n> > -      printf(\"`%1$s' is an alias for`%2$s'; showing help for `%2$s'\\n\",\n> > -             args.front().c_str(), p.first.c_str());\n> > -      printf(\"`%s' is an alias for`%s'; showing help for `%s'\\n\",\n> \n> As a side note, what's up with the quotes in this? Why are the opening\n> quotes backticks, but the closing quotes just single quotes?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/folly/pull/302/files#r37140972.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/37334724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "JeremyLWright": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/folly/pulls/comments/56059346", "body": "I responded to your comment, and changed the code comment to match the condition.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/56059346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "gut": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/folly/pulls/comments/72819845", "body": "That's right. They just uploaded. Funny thing huh?\nI'll remove that from this PR so the other useful things are focused.\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/72819845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "msteinert": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105751869", "body": "Sure, no problem.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105751869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105998860", "body": "This appears to work:\r\n\r\n    do echo $l | $SED -ne 's%\\(-l.*\\)%-e s/\\1//%p';dnl\r\n\r\nI'll resubmit the change.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/105998860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Quuxplusone": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/folly/pulls/comments/107999146", "body": "From the commit message:\r\n\r\n> Pass `T`s by const reference, except in `add` where we're likely to want to make a copy of the `T` anyway. In that case it would be more \"STL-correct\" to supply two different overloads `add(T&&)` and `add(const T&)`, but this is just an example so it makes sense to keep things simple.\r\n\r\nChanging it to `add(T&& v)` without also supplying the `add(const T&)` overload would prevent people from doing e.g.\r\n\r\n    int i = 42;\r\n    mylist.add(i);  // error --- \"i\" is int&, doesn't match int&&", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/107999146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ismail": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/folly/pulls/comments/116593323", "body": "I'm using folly via vcpkg w/ msbuild hence it's not picking up this, for me it's natural to include this in the header and not in the cmake file because not everyone is supposed to use cmake (think autoconf too).\r\n\r\nSame goes for WIN32_LEAN_AND_MEAN definition.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/116593323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/116657322", "body": "Those can all be moved to portability/Windows.h easily and it'd be the right fix I think. If you think otherwise feel free to close this pull request. If you agree I can update the request moving rest of the defines.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/116657322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/117251474", "body": "@Orvid I'd appreciate a comment, thanks!", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/117251474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/117299680", "body": "@Orvid , thank you will work on that direction!\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/117299680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/117552595", "body": "@Orvid done.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/117552595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "nicksbyman": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/folly/pulls/comments/128934715", "body": "fixed :)", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/128934715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ericniebler": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129453752", "body": "\r\nThis causes N instantiations of\u00a0`Negation`. Bad. How about this:\r\n\r\n```c++\r\ntemplate <class... Ts>\r\nstruct StrictDisjunction\r\n    : Negation<std::is_same<Bools<Ts::value...>, Bools<(Ts::value && false)...>>>;\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129453752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129731017", "body": "I don't think we need another name for `StrictConjunction`. If we do, they should be called `AllOf`, `AnyOf`, and `NoneOf`, like the standard algorithms. But I don't see a need yet. I prefer to keep the API small and simple. `[Strict]Conjunction` and `[Strict]Disjunction` are all we need.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129731017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129731192", "body": "I would make these aliases and internal implementation details, but my preference is to just leave them out entirely.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129731192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129731334", "body": "This should be a struct, not an alias. It should be possible to name the type `Negation<T>` where `T` is an incomplete type.", "reactions": {"url": "https://api.github.com/repos/facebook/folly/pulls/comments/129731334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}}}}