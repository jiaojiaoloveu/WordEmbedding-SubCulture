{"_default": {"1": {"coooold": {"issues": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/227", "title": "Which release is a stable version?", "body": "We're planning to use mcrouter for cross idc replicating? But i found there are hundreds of commit after release 0.36.  Should we take the head commit as the PRODUCTION one? or an elder release?\r\nAnd which commits of wangle and folly should we take? Thanks very much", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/227/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kornrunner": {"issues": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/225", "title": "Fix compile for boost 1.61+", "body": "Hi,\r\n\r\nI've submitted #224 that fixes compilation when boost is 1.61+, and keeps BC.\r\n\r\nAny interest in merging it in? Thanks!", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/225/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/mcrouter/pulls/224", "title": "fix boost_context when boost is 1.61+", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kelu27": {"issues": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/223", "title": "Cannot bind to a specific address", "body": "Hi,\r\n\r\nIs it possible to have an option like ``` --address 127.0.0.1``` to bind on a specific address?\r\n\r\nThanks!", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "amcrn": {"issues": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/222", "title": "Feature Request: Support GAT & GATS (Get And Touch Commands)", "body": "Memcached 1.5.3 added the `gat` and `gats` commands to the ASCII protocol.\r\n\r\nSee:\r\n\r\n* https://github.com/memcached/memcached/wiki/ReleaseNotes153\r\n* https://github.com/memcached/memcached/commit/7f4e0246e5c27baa9a7a690e5905f5ee56b80ece\r\n\r\nExample:\r\n\r\n```\r\nConnected to localhost.\r\nEscape character is '^]'.\r\nset foo 0 0 3\r\nbar\r\nSTORED\r\ngat 0 foo\r\nVALUE foo 0 3\r\nbar\r\nEND\r\ngats 0 foo\r\nVALUE foo 0 3 1\r\nbar\r\nEND\r\n```\r\n\r\nIt would be great to have support for these commands in mcrouter. As of now, these result in `CLIENT_ERROR malformed request` because they're not implemented.", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/189", "title": "Discussion - Gutter Is Stuck as \"Suspect\" Due to No Traffic", "body": "#### Summary\r\n\r\nIf a Gutter server is marked as suspect, and shortly thereafter the failover goes back to the main Pool Route, the Gutter server will remain as suspect until another failover occurs (which could be days or weeks/months) or mcrouter is restarted.\r\n\r\nDiscussion: We alert on non-empty `suspect_servers` that are sustained over multiple samples, so when we reach this state, we have to disable the alarm until we nuke/restart mcrouter. It _feels_ like a Server should be unmarked as suspect if it hasn't received any request/traffic after X elapsed time. I'm curious how Facebook handles this?\r\n\r\nOn a related note, the Gutter server's `avg_latency_us` is usually pretty bad in this case, which  heavily skews `duration_us` (making it very misleading) until another failover occurs or mcrouter is restarted. I'm curious how Facebook handles this because it makes `duration_us` for Gutter-enabled Clusters somewhat unreliable. I've pondered whether having an admin command that can flush/clear the stats is a good idea (e.g. `delete __mcrouter__.stats`); this would at least permit the administrator to clear when they deem appropriate. Thoughts?\r\n\r\nPossible Enhancements (All, Some, or None):\r\n\r\n* A Server is no longer marked as suspect if it hasn't received a request after X duration of time.\r\n* Support an admin mcrouter command that flushes/clears all mcrouter statistics.\r\n* Support a configuration value that let's the operator define a value other than 1 for the number of consecutive failures until a server is marked as suspect.\r\n  * See: https://github.com/facebook/mcrouter/blob/d1235676cb1141f0096e1d62f5bb3e78cbef6a44/mcrouter/TkoTracker.cpp#L213-L240.\r\n  * The provided value could be assumed to be a % of the failures_until_tko, or the validation could just ensure that the provided literal is less than failures_until_tko. This requires more thought.\r\n\r\n#### stats servers\r\n\r\n    STAT gutter1-a.west.example.com:11211:ascii:plain:notcompressed-20 avg_latency_us:20955.464 pending_reqs:0 inflight_reqs:0 avg_retrans_ratio:0 max_retrans_ratio:0 min_retrans_ratio:0 new:7 closed:1; notfound:14 timeout:35\r\n    STAT gutter2-b.east.example.com:11211:ascii:plain:notcompressed-20 avg_latency_us:3114.648 pending_reqs:0 inflight_reqs:0 avg_retrans_ratio:0 max_retrans_ratio:0 min_retrans_ratio:0 new:3 closed:5; notfound:176 stored:17\r\n    STAT gutter3-c.midw.example.com:11211:ascii:plain:notcompressed-20 avg_latency_us:17087.464 pending_reqs:0 inflight_reqs:0 avg_retrans_ratio:0 max_retrans_ratio:0 min_retrans_ratio:0 new:7 closed:1; notfound:11\r\n    STAT memcached1.west.example.com:11211:ascii:plain:notcompressed-20 avg_latency_us:15101.138 pending_reqs:0 inflight_reqs:0 avg_retrans_ratio:0 max_retrans_ratio:0 min_retrans_ratio:0 new:5 up:1 closed:2; deleted:89 notfound:3988 timeout:13\r\n    STAT memcached2.west.example.com:11211:ascii:plain:notcompressed-20 avg_latency_us:14974.834 pending_reqs:0 inflight_reqs:0 avg_retrans_ratio:0 max_retrans_ratio:0 min_retrans_ratio:0 new:5 up:1 closed:2; deleted:80 notfound:4029 timeout:20\r\n    STAT memcached3.west.example.com:11211:ascii:plain:notcompressed-20 avg_latency_us:15877.487 pending_reqs:0 inflight_reqs:0 avg_retrans_ratio:0 max_retrans_ratio:0 min_retrans_ratio:0 new:5 up:1 closed:2; deleted:93 notfound:3935 timeout:16\r\n    STAT memcached4.east.example.com:11211:ascii:plain:notcompressed-20 avg_latency_us:297.910 pending_reqs:0 inflight_reqs:0 avg_retrans_ratio:0 max_retrans_ratio:0 min_retrans_ratio:0 new:2 up:6; deleted:2290 found:4665005 notfound:778496 stored:776373 timeout:73\r\n    STAT memcached5.east.example.com:11211:ascii:plain:notcompressed-20 avg_latency_us:295.490 pending_reqs:0 inflight_reqs:0 avg_retrans_ratio:0 max_retrans_ratio:0 min_retrans_ratio:0 new:2 up:6; deleted:2280 found:4596041 notfound:779068 stored:776203 timeout:77\r\n    STAT memcached6.east.example.com:11211:ascii:plain:notcompressed-20 avg_latency_us:335.140 pending_reqs:0 inflight_reqs:0 avg_retrans_ratio:0 max_retrans_ratio:0 min_retrans_ratio:0 new:2 up:6; deleted:2260 found:4559366 notfound:778686 stored:776880 timeout:43\r\n    STAT memcached7.midw.example.com:11211:ascii:plain:notcompressed-20 avg_latency_us:10311.639 pending_reqs:0 inflight_reqs:0 avg_retrans_ratio:0 max_retrans_ratio:0 min_retrans_ratio:0 new:5 up:1 closed:2; deleted:99 notfound:3989 timeout:2\r\n    STAT memcached8.midw.example.com:11211:ascii:plain:notcompressed-20 avg_latency_us:9808.252 pending_reqs:0 inflight_reqs:0 avg_retrans_ratio:0 max_retrans_ratio:0 min_retrans_ratio:0 new:5 up:1 closed:2; deleted:90 notfound:4039\r\n    STAT memcached9.midw.example.com:11211:ascii:plain:notcompressed-20 avg_latency_us:10010.619 pending_reqs:0 inflight_reqs:0 avg_retrans_ratio:0 max_retrans_ratio:0 min_retrans_ratio:0 new:5 up:1 closed:2; deleted:95 notfound:3940 timeout:9\r\n    END\r\n\r\n#### stats suspect_servers\r\n\r\n    STAT gutter1-a.west.example.com:11211 status:down num_failures:35\r\n    END\r\n\r\nNote: `status:down` even though `num_servers_down` is 0 and it actually isn't down.\r\n\r\n### get __mcrouter__.preprocessed_config\r\n\r\n    {\r\n      \"pools\" : {\r\n        \"midw\" : {\r\n          \"servers\" : [\r\n            \"memcached7.midw.example.com:11211\",\r\n            \"memcached8.midw.example.com:11211\",\r\n            \"memcached9.midw.example.com:11211\"\r\n          ]\r\n        },\r\n        \"midw-gutter\" : {\r\n          \"servers\" : [\r\n            \"gutter3-c.midw.example.com:11211\"\r\n          ]\r\n        },\r\n        \"east\" : {\r\n          \"servers\" : [\r\n            \"memcached4.east.example.com:11211\",\r\n            \"memcached5.east.example.com:11211\",\r\n            \"memcached6.east.example.com:11211\"\r\n          ]\r\n        },\r\n        \"east-gutter\" : {\r\n          \"servers\" : [\r\n            \"gutter2-b.east.example.com:11211\"\r\n          ]\r\n        },\r\n        \"west\" : {\r\n          \"servers\" : [\r\n            \"memcached1.west.example.com:11211\",\r\n            \"memcached2.west.example.com:11211\",\r\n            \"memcached3.west.example.com:11211\"\r\n          ]\r\n        },\r\n        \"west-gutter\" : {\r\n          \"servers\" : [\r\n            \"gutter1-a.west.example.com:11211\"\r\n          ]\r\n        }\r\n      },\r\n      \"route\" : {\r\n        \"default_policy\" : {\r\n          \"failover\" : \"PoolRoute|west-gutter\",\r\n          \"failover_exptime\" : 300,\r\n          \"normal\" : \"PoolRoute|west\",\r\n          \"type\" : \"FailoverWithExptimeRoute\"\r\n        },\r\n        \"operation_policies\" : {\r\n          \"delete\" : {\r\n            \"children\" : [\r\n              {\r\n                \"failover\" : \"PoolRoute|west-gutter\",\r\n                \"failover_exptime\" : 300,\r\n                \"normal\" : \"PoolRoute|west\",\r\n                \"type\" : \"FailoverWithExptimeRoute\"\r\n              },\r\n              {\r\n                \"failover\" : \"PoolRoute|midw-gutter\",\r\n                \"failover_exptime\" : 300,\r\n                \"normal\" : \"PoolRoute|midw\",\r\n                \"type\" : \"FailoverWithExptimeRoute\"\r\n              },\r\n              {\r\n                \"failover\" : \"PoolRoute|east-gutter\",\r\n                \"failover_exptime\" : 300,\r\n                \"normal\" : \"PoolRoute|east\",\r\n                \"type\" : \"FailoverWithExptimeRoute\"\r\n              }\r\n            ],\r\n            \"type\" : \"AllFastestRoute\"\r\n          }\r\n        },\r\n        \"type\" : \"OperationSelectorRoute\"\r\n      }\r\n    }\r\n    END\r\n\r\n#### stats all\r\n\r\n    STAT asynclog_requests 0\r\n    STAT client_queue_notifications 0\r\n    STAT client_queue_notify_period 0\r\n    STAT cmd_add 0\r\n    STAT cmd_add_count 0\r\n    STAT cmd_add_out 0\r\n    STAT cmd_add_out_all 0\r\n    STAT cmd_add_out_all_count 0\r\n    STAT cmd_add_out_count 0\r\n    STAT cmd_cas 0\r\n    STAT cmd_cas_count 0\r\n    STAT cmd_cas_out 0\r\n    STAT cmd_cas_out_all 0\r\n    STAT cmd_cas_out_all_count 0\r\n    STAT cmd_cas_out_count 0\r\n    STAT cmd_cas_outlier 0\r\n    STAT cmd_cas_outlier_all 0\r\n    STAT cmd_cas_outlier_all_count 0\r\n    STAT cmd_cas_outlier_count 0\r\n    STAT cmd_decr 0\r\n    STAT cmd_decr_count 0\r\n    STAT cmd_decr_out 0\r\n    STAT cmd_decr_out_all 0\r\n    STAT cmd_decr_out_all_count 0\r\n    STAT cmd_decr_out_count 0\r\n    STAT cmd_delete 0.816667\r\n    STAT cmd_delete_count 12263\r\n    STAT cmd_delete_out 2.45\r\n    STAT cmd_delete_out_all 2.45\r\n    STAT cmd_delete_out_all_count 36849\r\n    STAT cmd_delete_out_count 36789\r\n    STAT cmd_delete_outlier 0\r\n    STAT cmd_delete_outlier_all 0\r\n    STAT cmd_delete_outlier_all_count 0\r\n    STAT cmd_delete_outlier_count 0\r\n    STAT cmd_get 127.05\r\n    STAT cmd_get_count 16151412\r\n    STAT cmd_get_out 127.05\r\n    STAT cmd_get_out_all 127.05\r\n    STAT cmd_get_out_all_count 16151583\r\n    STAT cmd_get_out_count 16151407\r\n    STAT cmd_get_outlier 0\r\n    STAT cmd_get_outlier_all 0\r\n    STAT cmd_get_outlier_all_count 0\r\n    STAT cmd_get_outlier_count 0\r\n    STAT cmd_gets 0\r\n    STAT cmd_gets_count 0\r\n    STAT cmd_gets_out 0\r\n    STAT cmd_gets_out_all 0\r\n    STAT cmd_gets_out_all_count 0\r\n    STAT cmd_gets_out_count 0\r\n    STAT cmd_gets_outlier 0\r\n    STAT cmd_gets_outlier_all 0\r\n    STAT cmd_gets_outlier_all_count 0\r\n    STAT cmd_gets_outlier_count 0\r\n    STAT cmd_incr 0\r\n    STAT cmd_incr_count 0\r\n    STAT cmd_incr_out 0\r\n    STAT cmd_incr_out_all 0\r\n    STAT cmd_incr_out_all_count 0\r\n    STAT cmd_incr_out_count 0\r\n    STAT cmd_lease_get 0\r\n    STAT cmd_lease_get_count 0\r\n    STAT cmd_lease_get_out 0\r\n    STAT cmd_lease_get_out_all 0\r\n    STAT cmd_lease_get_out_all_count 0\r\n    STAT cmd_lease_get_out_count 0\r\n    STAT cmd_lease_set 0\r\n    STAT cmd_lease_set_count 0\r\n    STAT cmd_lease_set_out 0\r\n    STAT cmd_lease_set_out_all 0\r\n    STAT cmd_lease_set_out_all_count 0\r\n    STAT cmd_lease_set_out_count 0\r\n    STAT cmd_meta 0\r\n    STAT cmd_meta_count 0\r\n    STAT cmd_meta_out 0\r\n    STAT cmd_meta_out_all 0\r\n    STAT cmd_meta_out_all_count 0\r\n    STAT cmd_meta_out_count 0\r\n    STAT cmd_other 0\r\n    STAT cmd_other_count 0\r\n    STAT cmd_other_out 0\r\n    STAT cmd_other_out_all 0\r\n    STAT cmd_other_out_all_count 0\r\n    STAT cmd_other_out_count 0\r\n    STAT cmd_other_outlier 0\r\n    STAT cmd_other_outlier_all 0\r\n    STAT cmd_other_outlier_all_count 0\r\n    STAT cmd_other_outlier_count 0\r\n    STAT cmd_replace 0\r\n    STAT cmd_replace_count 0\r\n    STAT cmd_replace_out 0\r\n    STAT cmd_replace_out_all 0\r\n    STAT cmd_replace_out_all_count 0\r\n    STAT cmd_replace_out_count 0\r\n    STAT cmd_set 15.0208\r\n    STAT cmd_set_count 2329473\r\n    STAT cmd_set_out 15.0208\r\n    STAT cmd_set_out_all 15.0208\r\n    STAT cmd_set_out_all_count 2329490\r\n    STAT cmd_set_out_count 2329473\r\n    STAT cmd_set_outlier 0\r\n    STAT cmd_set_outlier_all 0\r\n    STAT cmd_set_outlier_all_count 0\r\n    STAT cmd_set_outlier_count 0\r\n    STAT cmd_stats 0.2\r\n    STAT cmd_stats_count 21976\r\n    STAT commandargs /etc/mcrouter/flavor\r\n    STAT config_age 109830\r\n    STAT config_failures 0\r\n    STAT config_last_attempt 1492018246\r\n    STAT config_last_success 1492018246\r\n    STAT cycles_avg 0\r\n    STAT cycles_max 0\r\n    STAT cycles_min 0\r\n    STAT cycles_num 0\r\n    STAT cycles_p01 0\r\n    STAT cycles_p05 0\r\n    STAT cycles_p50 0\r\n    STAT cycles_p95 0\r\n    STAT cycles_p99 0\r\n    STAT destination_batch_size 1\r\n    STAT destination_batches_sum 144.521\r\n    STAT destination_inflight_reqs 0\r\n    STAT destination_max_inflight_reqs 9\r\n    STAT destination_max_pending_reqs 9\r\n    STAT destination_pending_reqs 0\r\n    STAT destination_requests_sum 144.521\r\n    STAT dev_null_requests 0\r\n    STAT duration_us 1226.12\r\n    STAT failover_all 0\r\n    STAT failover_all_failed 0\r\n    STAT failover_rate_limited 0\r\n    STAT fibers_allocated 242\r\n    STAT fibers_pool_size 242\r\n    STAT fibers_stack_high_watermark 6576\r\n    STAT num_clients 9\r\n    STAT num_servers 96\r\n    STAT num_servers_closed 19\r\n    STAT num_servers_down 0\r\n    STAT num_servers_new 53\r\n    STAT num_servers_up 24\r\n    STAT num_suspect_servers 1\r\n    STAT outstanding_route_get_avg_queue_size 0\r\n    STAT outstanding_route_get_avg_wait_time_sec 0\r\n    STAT outstanding_route_get_reqs_queued 0\r\n    STAT outstanding_route_get_reqs_queued_helper 0\r\n    STAT outstanding_route_get_wait_time_sum_us 0\r\n    STAT outstanding_route_update_avg_queue_size 0\r\n    STAT outstanding_route_update_avg_wait_time_sec 0\r\n    STAT outstanding_route_update_reqs_queued 0\r\n    STAT outstanding_route_update_reqs_queued_helper 0\r\n    STAT outstanding_route_update_wait_time_sum_us 0\r\n    STAT parent_pid 0\r\n    STAT pid 1\r\n    STAT proxy_reqs_processing 1\r\n    STAT proxy_reqs_waiting 0\r\n    STAT proxy_request_num_outstanding 1\r\n    STAT ps_num_major_faults 0\r\n    STAT ps_num_minor_faults 40109\r\n    STAT ps_rss 63787008\r\n    STAT ps_system_time_sec 1789.44\r\n    STAT ps_user_time_sec 1977.79\r\n    STAT ps_vsize 310837248\r\n    STAT rate_limited_log_count 0\r\n    STAT redirected_lease_set_count 0\r\n    STAT replies_compressed 0\r\n    STAT replies_not_compressed 0\r\n    STAT reply_traffic_after_compression 0\r\n    STAT reply_traffic_before_compression 0\r\n    STAT request_error 0\r\n    STAT request_error_count 0\r\n    STAT request_replied 143.088\r\n    STAT request_replied_count 18515123\r\n    STAT request_sent 143.088\r\n    STAT request_sent_count 18515123\r\n    STAT request_success 143.088\r\n    STAT request_success_count 18515123\r\n    STAT result_busy 0\r\n    STAT result_busy_all 0\r\n    STAT result_busy_all_count 0\r\n    STAT result_busy_count 0\r\n    STAT result_connect_error 0\r\n    STAT result_connect_error_all 0\r\n    STAT result_connect_error_all_count 0\r\n    STAT result_connect_error_count 0\r\n    STAT result_connect_timeout 0\r\n    STAT result_connect_timeout_all 0\r\n    STAT result_connect_timeout_all_count 0\r\n    STAT result_connect_timeout_count 0\r\n    STAT result_data_timeout 0\r\n    STAT result_data_timeout_all 0\r\n    STAT result_data_timeout_all_count 288\r\n    STAT result_data_timeout_count 253\r\n    STAT result_error 0\r\n    STAT result_error_all 0\r\n    STAT result_error_all_count 288\r\n    STAT result_error_count 253\r\n    STAT result_local_error 0\r\n    STAT result_local_error_all 0\r\n    STAT result_local_error_all_count 0\r\n    STAT result_local_error_count 0\r\n    STAT result_tko 0\r\n    STAT result_tko_all 0\r\n    STAT result_tko_all_count 0\r\n    STAT result_tko_count 0\r\n    STAT retrans_closed_connections 0\r\n    STAT retrans_num_total 0\r\n    STAT retrans_per_kbyte_avg 0\r\n    STAT retrans_per_kbyte_max 0\r\n    STAT retrans_per_kbyte_sum 0\r\n    STAT rusage_system 1789.45\r\n    STAT rusage_user 1977.8\r\n    STAT start_time 1492018246\r\n    STAT successful_client_connections 14\r\n    STAT time 1492128076\r\n    STAT uptime 109830\r\n    STAT version 35.0.0 mcrouter\r\n    END\r\n\r\n#### get __mcrouter__.options\r\n\r\n    service_name mcrouter\r\n    router_name flavor\r\n    flavor_name /etc/mcrouter/flavor\r\n    asynclog_disable 1\r\n    async_spool /var/spool/mcrouter\r\n    use_asynclog_version2 1\r\n    num_proxies 8\r\n    client_queue_size 1024\r\n    client_queue_no_notify_rate 0\r\n    client_queue_wait_threshold_us 0\r\n    big_value_split_threshold 0\r\n    big_value_batch_size 10\r\n    fibers_max_pool_size 1000\r\n    fibers_stack_size 24576\r\n    fibers_record_stack_size_every 100000\r\n    fibers_use_guard_pages 1\r\n    runtime_vars_file \r\n    file_observer_poll_period_ms 100\r\n    file_observer_sleep_before_update_ms 1000\r\n    fibers_pool_resize_period_ms 60000\r\n    keepalive_cnt 0\r\n    keepalive_interval_s 60\r\n    keepalive_idle_s 300\r\n    reset_inactive_connection_interval 60000\r\n    tcp_rto_min -1\r\n    target_max_inflight_requests 0\r\n    target_max_pending_requests 100000\r\n    target_max_shadow_requests 1000\r\n    no_network 0\r\n    proxy_max_inflight_requests 0\r\n    proxy_max_throttled_requests 0\r\n    pem_cert_path \r\n    pem_key_path \r\n    pem_ca_path \r\n    enable_qos 0\r\n    default_qos_class 0\r\n    default_qos_path 0\r\n    ssl_connection_cache 0\r\n    enable_compression 0\r\n    constantly_reload_configs 0\r\n    disable_reload_configs 0\r\n    config \r\n    config_file /etc/mcrouter/mcrouter.conf\r\n    config_str \r\n    default_route /././\r\n    miss_on_get_errors 1\r\n    group_remote_errors 0\r\n    send_invalid_route_to_default 0\r\n    enable_flush_cmd 0\r\n    reconfiguration_delay_ms 1000\r\n    config_params \r\n    disable_tko_tracking 0\r\n    probe_delay_initial_ms 2000\r\n    probe_delay_max_ms 10000\r\n    failures_until_tko 500\r\n    maximum_soft_tkos 2\r\n    allow_only_gets 0\r\n    server_timeout_ms 20\r\n    cross_region_timeout_ms 0\r\n    cross_cluster_timeout_ms 0\r\n    within_cluster_timeout_ms 0\r\n    waiting_request_timeout_ms 0\r\n    jemalloc_nodump_buffers 0\r\n    stats_root /var/mcrouter/stats\r\n    debug_fifo_root /var/mcrouter/fifos\r\n    stats_logging_interval 10000\r\n    logging_rtt_outlier_threshold_us 0\r\n    stats_async_queue_length 50\r\n    enable_failure_logging 1\r\n    cpu_cycles 0\r\n    test_mode 0\r\n    enable_logging_route 0\r\n    collect_rxmit_stats_every_hz 0\r\n    min_rxmit_reconnect_threshold 0\r\n    max_rxmit_reconnect_threshold 0\r\n    asynclog_port_override 0\r\n    log_file /var/log/mcrouter/mcrouter.log\r\n    ports 11211\r\n    ssl_ports \r\n    listen_sock_fd -1\r\n    unix_domain_sock \r\n    max_conns 0\r\n    tcp_listen_backlog 128\r\n    max_client_outstanding_reqs 34133\r\n    requests_per_read 0\r\n    retain_source_ip 0\r\n    postprocess_logging_route 0\r\n    enable_server_compression 0\r\n    client_timeout_ms 20\r\n    END", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/186", "title": "Bug: Memcached CLIENT_ERRORs Not Being Forwarded", "body": "## Summary\r\n\r\nIn certain situations where Memcached returns a CLIENT_ERROR with a highly tailored message (and keeps the connection open), Mcrouter is replacing the message with _malformed request_ and is closing the connection.\r\n\r\nMcrouter version: 0.35.0\r\nMemcached version: 1.4.36\r\n\r\n## Examples\r\n\r\nFirst, as a baseline, an example where Mcrouter correctly forwards the originating CLIENT_ERROR:\r\n\r\nBoth mcrouter and memcached when presented with:\r\n\r\n```\r\ndelete foo 1\r\n```\r\n\r\nwill return:\r\n\r\n```\r\nCLIENT_ERROR bad command line format.  Usage: delete <key> [noreply]\r\n```\r\n\r\nWith that said, here are examples where the CLIENT_ERROR is _not_ forwarded.\r\n\r\n**1. incr/decr an existing non-numeric value**\r\n\r\n```\r\nset foo 0 0 1\r\na\r\nSTORED\r\nincr foo 1\r\n```\r\n\r\nMemcached: `CLIENT_ERROR cannot increment or decrement non-numeric value`\r\nMcrouter: `NOT_FOUND`\r\n\r\nNote: This one is of more interest than the ones below, because it returns an incorrect NOT_FOUND vs. a less optimal CLIENT_ERROR message. Returning a CLIENT_ERROR with _malformed request_ would be more correct.\r\n\r\n**2. incr/decr with invalid delta argument**\r\n\r\n```\r\nincr foo 0.2\r\n```\r\n\r\nMemcached: `CLIENT_ERROR invalid numeric delta argument` and keeps the connection open.\r\nMcrouter: `CLIENT_ERROR malformed request` and closes the connection.\r\n\r\n**3. touch with an invalid exptime**\r\n\r\n```\r\ntouch foo 0.2\r\n```\r\n\r\nMemcached: `CLIENT_ERROR invalid exptime argument` and keeps the connection open.\r\nMcrouter: `CLIENT_ERROR malformed request` and closes the connection.\r\n\r\n**4. set with exptime as invalid numeric value**\r\n\r\n```\r\nset foo 0 0.0 1\r\n```\r\n\r\nMemcached: `CLIENT_ERROR bad command line format` and keeps the connection open.\r\nMcrouter : `CLIENT_ERROR malformed request` and closes the connection.\r\n\r\n## Expected Behavior\r\n\r\n* Mcrouter does not close the connection on CLIENT_ERRORs\r\n  * Per the memcached protocol specification: A SERVER_ERROR is \"is the only case in\r\n     which the server closes a connection to a client.\" (https://github.com/memcached/memcached/blob/70942bdf061d69e294d7eb94bcde2a9eec971c66/doc/protocol.txt#L109-L116)\r\n* Mcrouter forwards/keeps the original CLIENT_ERROR message", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/184", "title": "Documentation - NullRoute Enhancements", "body": "Current documentation for NullRoute:\r\n\r\n```\r\nNullRoute\r\n\r\nReturns the default reply for each request right away. Default replies are:\r\n\r\n* delete - not found\r\n* get - not found\r\n* set - not stored\r\n\r\nNo properties.\r\n```\r\n\r\nThis is:\r\n\r\n* Missing the default reply for add, replace, cas, append, prepend, touch.\r\n* Confusing for the reply for `get` (\"not found\" can be misleading because the user might interpret this as NOT_FOUND vs. a miss).\r\n\r\nSuggested documentation for NullRoute:\r\n\r\n-------\r\n\r\n### NullRoute\r\n\r\nReturns the default reply for each request right away. Default replies are:\r\n\r\n* get, gets: nothing (miss)\r\n* delete, touch, incr, decr: NOT_FOUND\r\n* add, set, replace, cas, append, prepend: NOT_STORED\r\n\r\nNo properties.", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/183", "title": "Behavior for ModifyExptimeRoute on incr, decr, or get-like Commands Unclear", "body": "**Summary**\r\n\r\nSee https://github.com/facebook/mcrouter/wiki/List-of-Route-Handles#modifyexptimeroute\r\n\r\n`ModifyExptimeRoute` when used via `OperationSelectorRoute` for `incr`, `decr`, `get`, `gets`, & `delete` is effectively a no-op. This behavior is not clear from the existing documentation:\r\n\r\n\r\n> Modifies exptime (TTL) for all requests.\r\n>\r\n> Properties:\r\n> \r\n> * target: child route handle.\r\n> * exptime (int)\r\n>   New TTL (in seconds) for requests.\r\n> * action (optional, default is set) Valid options: set or min. If action is set, always uses new exptime. If action is min, uses new exptime only if it's lower than one specified in request.\r\n\r\nNote the \"all requests\" line.\r\n\r\nA user of mcrouter might assume that `ModifyExptimeRoute` fires an async `touch` command with the desired `exptime` after an `incr`/`decr`/`get`/`gets`, which it does not.\r\n\r\n**Options**\r\n\r\nEither:\r\n\r\n1. Treat the use of `ModifyExptimeRoute` as a configuration error if used for `incr`, `decr`, `get`, `gets`, and/or `delete`.\r\n2. Update the documentation to include this behavior/quirk\r\n3. Enhance mcrouter to send an async `touch` with the desired `exptime` after the `incr`, `decr`, `get`, or `gets` command.\r\n4. Other?\r\n\r\n(3) doesn't seem useful, so I'd suggest either (1) or (2). Thoughts?", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/182", "title": "Bug: OperationSelectorRoute with incr/decr ErrorRoute Broken", "body": "**Summary**\r\n\r\nIf `OperationSelectorRoute` is used, and `incr`/`decr` are set to use `ErrorRoute`, the response from an `incr`/`decr` command is not the `ErrorRoute` value as expected, but instead it's `NOT_FOUND`.\r\n\r\nReproducible on mcrouter 0.35.0 (latest).\r\n\r\n**How to Reproduce**\r\n\r\n```\r\n{\r\n  \"pools\": {\r\n    \"main\": {\r\n      \"servers\": [\r\n        \"memcached1:11211\",\r\n        \"memcached2:11211\",\r\n        \"memcached3:11211\"\r\n      ]\r\n    }\r\n  },\r\n  \"route\": {\r\n    \"type\": \"OperationSelectorRoute\",\r\n    \"operation_policies\": {\r\n      \"add\": \"ErrorRoute|MyErrorValueHere\",\r\n      \"get\": \"ErrorRoute|MyErrorValueHere\",\r\n      \"incr\": \"ErrorRoute|MyErrorValueHere\",\r\n      \"decr\": \"ErrorRoute|MyErrorValueHere\",\r\n      \"set\": \"ErrorRoute|MyErrorValueHere\",\r\n      \"replace\": \"ErrorRoute|MyErrorValueHere\",\r\n      \"append\": \"ErrorRoute|MyErrorValueHere\",\r\n      \"prepend\": \"ErrorRoute|MyErrorValueHere\",\r\n      \"touch\": \"ErrorRoute|MyErrorValueHere\",\r\n      \"cas\": \"ErrorRoute|MyErrorValueHere\",\r\n      \"delete\": \"ErrorRoute|MyErrorValueHere\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nNote how `add`, `set`, etc. all respond as expected:\r\n\r\n```\r\n$ telnet localhost 11211\r\nTrying ::1...\r\nConnected to localhost.\r\nEscape character is '^]'.\r\n\r\nset foo 0 0 1\r\n0\r\nSERVER_ERROR MyErrorValueHere\r\n\r\nadd foo 0 0 1\r\n0\r\nSERVER_ERROR MyErrorValueHere\r\n```\r\n\r\nBut `incr` and `decr` do not:\r\n\r\n```\r\nincr foo 1 \r\nNOT_FOUND\r\n\r\ndecr foo 1\r\nNOT_FOUND\r\n```\r\n\r\n**Expected Result**\r\n\r\n`incr` and `decr` respond with `SERVER_ERROR MyErrorValueHere`.", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/180", "title": "Feature Request: AllSizeRoute", "body": "I have a feature request for a new Route: AllSizeRoute.\r\n\r\nProperties:\r\n\r\n* `size`: `max` or `min`\r\n\r\nImmediately sends the same request to all child route handles.\r\nCollects all replies and responds with the `size` reply.\r\n\r\nFor numbers => min == smallest reply value (e.g. If 0, 5, & 14 came back, return 0)\r\nFor numbers => max == largest reply value (e.g. If 0, 5, & 14 came back, return 14)\r\n\r\n* If all replies are errors, returns the last error.\r\n* If all replies are not numbers, returns an error.\r\n* If some replies are not numbers, return the `size` reply of those that _are_ numbers.\r\n\r\nWhy:\r\n\r\nIf using mcrouter to create a highly-available (replicated, no spof)\r\ncounter cluster, where counters can only increase, no existing routes\r\ncan return the largest value from all child route handles. The best\r\nthat can be achieved at the moment (afaik) is:\r\n\r\n\r\n```\r\n{\r\n  \"pools\": {\r\n    \"main\": {\r\n      \"servers\": [\r\n        \"memcached1:11211\",\r\n        \"memcached2:11211\",\r\n        \"memcached3:11211\"\r\n      ]\r\n    }\r\n  },\r\n  \"route\": {\r\n    \"type\": \"OperationSelectorRoute\",\r\n    \"operation_policies\": {\r\n      \"add\": \"AllFastestRoute|Pool|main\",\r\n      \"get\": {\r\n        \"type\": \"MissFailoverRoute\",\r\n        \"children\": [\r\n          \"AllMajorityRoute|Pool|main\",\r\n          \"AllFastestRoute|Pool|main\"\r\n        ]\r\n      },\r\n      \"incr\": \"AllFastestRoute|Pool|main\",\r\n      \"decr\": \"AllFastestRoute|Pool|main\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nUsing `AllMajorityRoute` on `get` ensures that a missed `incr` on\r\none memcached doesn't impact the returned value, but it's far from\r\nbullet proof (ex: if `incr` is applied only on 1 of the 3, it undercounts).\r\n\r\nNote: Concept could be extended to Strings (Min/Max == Smallest or\r\nLongest value length (e.g. \"foo\" < \"foobar\").\r\n\r\nNote: `size` option list could be extended to include `median`, `avg`,\r\n`95th%`, etc.\r\n\r\nIf there's already a better way of achieving this, please let me know,\r\nI might have missed an available Route (or a clever way of composing\r\nthem). Thanks!\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/97", "title": "Make -j/Jobs ARG For Dockerfile To Cut Down On Build Time", "body": "Context: With Docker 1.9, `ARG` can be used to provide build-time arguments.\n\nThe mcrouter Dockerfile does not support the ability to provide a build-time argument for the number of `make` jobs. Why this matters:\n\n| vCPU | -j arg passed | Time Elapsed |\n| --- | --- | --- |\n| 2 | none | 27m26.955s |\n| 2 | -j2 | 18m20.238s |\n| 4 | -j4 | 11m34.981s |\n\nIf `-j` is set to the number of vCPUs, the time it takes to build mcrouter decreases significantly (as one would expect).\n\nHow this could be implemented:\n\n```\ndiff --git a/mcrouter/scripts/docker/Dockerfile b/mcrouter/scripts/docker/Dockerfile\nindex 036157a..788371a 100644\n--- a/mcrouter/scripts/docker/Dockerfile\n+++ b/mcrouter/scripts/docker/Dockerfile\n@@ -5,12 +5,13 @@ MAINTAINER      mcrouter <mcrouter@fb.com>\n ENV             MCROUTER_DIR            /usr/local/mcrouter\n ENV             MCROUTER_REPO           https://github.com/facebook/mcrouter.git\n ENV             DEBIAN_FRONTEND         noninteractive\n+ARG             MAKE_JOBS=1\n\n RUN             apt-get update && apt-get install -y git && \\\n                 mkdir -p $MCROUTER_DIR/repo && \\\n                 cd $MCROUTER_DIR/repo && git clone $MCROUTER_REPO && \\\n                 cd $MCROUTER_DIR/repo/mcrouter/mcrouter/scripts && \\\n-                ./install_ubuntu_14.04.sh $MCROUTER_DIR && \\\n+                ./install_ubuntu_14.04.sh $MCROUTER_DIR -j$MAKE_JOBS && \\\n                 ./clean_ubuntu_14.04.sh $MCROUTER_DIR && rm -rf $MCROUTER_DIR/repo && \\\n                 ln -s $MCROUTER_DIR/install/bin/mcrouter /usr/local/bin/mcrouter\n```\n\nthen:\n\n```\n$ docker build -t mcrouter /home/amcrn/mcrouter/mcrouter/scripts/docker\n```\n\nwould still default to `-j1`, whereas:\n\n```\n$ docker build --build-arg MAKE_JOBS=4 -t mcrouter /home/amcrn/mcrouter/mcrouter/scripts/docker\n```\n\nwould use `-j4`.\n\nDepending on whether it's desirable to support other `make` build-time args, the solution could be this simple or more complex.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/97/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fredemmott": {"issues": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/220", "title": "Replace direct usage of linux/futex.h with folly::futex", "body": "this would get mcrouter a fair bit closer to building on mac, which would be nice for the HHVM extension", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mandeepsandhu": {"issues": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/219", "title": "Feature Request: Debian 9 build support", "body": "Support Debian **9** (stretch) as one of the build platforms.", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "agarbato": {"issues": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/217", "title": "WarmUp and Replication to All nodes.", "body": "Hi,\r\n\r\nIs it possible to use the WarmUpRoute and Replication together?\r\n\r\nBasically we have an old box with memcache which in time we would like to decommission.\r\nUsing the config below set,add,delete are  replicated to all nodes as expected.\r\nWhen the cold pool instead receive a miss the key is added only on one node of the cold pool.\r\nIs it possible somehow to add key to all nodes instead like AllSyncRoute behavior? \r\n\r\n{\r\n   \"pools\": {\r\n     \"cold\": { \r\n        \"servers\": [ \"1.1.1.10:11211\", \"1.1.1.11:11211\" ] },\r\n     \"warm\": { \r\n        \"servers\": [ \"1.1.1.15:11211\" ] }\r\n   },\r\n   \"route\": {\r\n     \"type\": \"OperationSelectorRoute\",\r\n     \"operation_policies\": {\r\n       \"get\": {\r\n         \"type\": \"WarmUpRoute\",\r\n         \"cold\": \"PoolRoute|cold\",\r\n         \"warm\": \"PoolRoute|warm\"\r\n       },\r\n       \"set\": \"AllSyncRoute|Pool|cold\",\r\n       \"add\": \"AllSyncRoute|Pool|cold\",\r\n       \"delete\": \"AllSyncRoute|Pool|cold\"\r\n     } \r\n   }\r\n}\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cthayer": {"issues": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/210", "title": "Consider changing license", "body": "With the recent community uproar around FaceBook's BSD+Patents licensing and the announcement that other FaceBook OSS projects (most notably React.js) are changing to an MIT license (https://code.facebook.com/posts/300798627056246), I'd like to propose that mcrouter follow suit and change it's license to a more community friendly license.\r\n\r\nDefinitely appreciate all the hard work and effort of the mcrouter team.  This project is super awesome! ", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/210/reactions", "total_count": 6, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "qhdwns123": {"issues": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/203", "title": "bulid error", "body": "Hi.\r\n\r\nI get the following error on Ubuntu 16.04.\r\n\r\nmake[2]: Entering directory '/root/mcrouter'\r\ng++ -DHAVE_CONFIG_H   -I.. -I/home/root/mcrouter-install/install/include   -DLIBMo-unused-parameter -fno-strict-aliasing -g -O2 -std=gnu++1y -MT libmcroutercore_ayncLog.o `test -f 'AsyncLog.cpp' || echo './'`AsyncLog.cpp\r\nIn file included from ../mcrouter/CarbonRouterClient.h:16:0,\r\n                 from ../mcrouter/CarbonRouterInstance.h:23,\r\n                 from AsyncLog.cpp:29:\r\n../mcrouter/lib/CacheClientStats.h:13:40: fatal error: folly/detail/CacheLocality\r\ncompilation terminated.\r\nMakefile:884: recipe for target 'libmcroutercore_a-AsyncLog.o' failed\r\nmake[2]: *** [libmcroutercore_a-AsyncLog.o] Error 1\r\nmake[2]: Leaving directory '/root/mcrouter'\r\nMakefile:1515: recipe for target 'all-recursive' failed\r\nmake[1]: *** [all-recursive] Error 1\r\nmake[1]: Leaving directory '/root/mcrouter'\r\nMakefile:663: recipe for target 'all' failed\r\nmake: *** [all] Error 2\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "eminugurkenar": {"issues": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/202", "title": "Eject Down Servers", "body": "Version: 35.0.0-master mcrouter\r\n\r\nHi,\r\nI am testing FailoverRoute with configuration below. \r\n\r\nThe test\r\n```\r\n1-) set a key 'echo -e 'set mykey 0 600 5\\r\\nhello1\\r' | nc localhost 11311'\r\n2-) block connection to port 11211 on server that 'mykey' goes. 'iptables -A INPUT -p tcp --dport 11211 -j DROP' \r\n3-) delete key 'echo -e 'delete mykey\\r' | nc localhost 11311'\r\n4-) set same key again 'echo -e 'set mykey 0 600 5\\r\\nhello2\\r' | nc localhost 11311' (key goes to failover server)\r\n5-) get key 'echo -e 'mykey a\\r' | nc localhost 11311' (returns hello2)\r\n6-) flush iptables rules on main server. iptables -F\r\n7-) get key 'echo -e 'mykey a\\r' | nc localhost 11311' (returns hello1)\r\n```\r\n\r\nYou can see that if main pool server comebacks , mcrouter returns stale data. As i understand from that issue (https://github.com/facebook/mcrouter/issues/105 jmswen comment), it is our responsibility to apply delete stream to right memcached instance. Right now we do not have any agent that keeps track of the delete stream then applies them to right server. \r\n\r\nIs there a way to eject down server from the pool? It will be very usefull for that situation. We can easly flush ejected server then add it back to the pool. That way the problem described above will not be a issue for us. \r\n\r\nConfiguration:\r\n\r\n```\r\n{\r\n   \"pools\": {\r\n     \"main\": {\r\n       \"servers\": [\r\n         \"172.31.84.43:11211\",\r\n         \"172.31.84.48:11211\"\r\n       ]\r\n     },\r\n     \"backup\": {\r\n       \"servers\": [\r\n         \"172.31.84.201:11211\"\r\n       ]\r\n     }\r\n   },\r\n   \"route\":{\r\n     \"type\": \"FailoverRoute\",\r\n     \"children\" : [\"PoolRoute|main\", \"PoolRoute|backup\" ]\r\n   }\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ssabo": {"issues": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/198", "title": "McRouter memory exhaustion", "body": ":wave: Howdy!\r\n\r\nWe recently noticed that OOM Killer was cleaning up our mcrouter processes fairly often. During periods where the rate of traffic increased sharply, mcrouter would consume several GB of ram which never seemed to get released. This would happen 2-4 times before OOM Killer would be invoked. \r\n\r\nValgrind reported there was no memory leak. When we analyzed core dumps, we found most of the strings in memory were the values for the keys we were manipulating. \r\n\r\n**Before**\r\n![Memory Used Steep Increases and OOM](https://cloud.githubusercontent.com/assets/2396369/26738029/73c75180-4781-11e7-9faf-94222f1f09ba.png)\r\n\r\nOur current workaround has been to export `GLIBCXX_FORCE_NEW=1`. \r\n\r\n**After**\r\n![Memory Used Steep Increases and Reclaimed](https://cloud.githubusercontent.com/assets/2396369/26738240/3b550cb0-4782-11e7-8b1f-f62e1be20902.png)\r\n\r\n\r\nWe were wondering if this is how others handle sharp traffic increases and if there are other actions we can take?", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mohit-gupta-hs1": {"issues": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/196", "title": "Using mcrouter as a migration tool", "body": "Hey guys, we currently use Twemproxy for memcached connection pooling and hashing. We are moving some of our infrastructure from AWS classic into a VPC and we would like to use mcrouter to shadow all the traffic to the cluster in classic (serving prod traffic) to another cluster in VPC. When the caches become someone consistent we would then do an application config change (or change a setting on mcrouter maybe?) to flip to the new pool. However, we are having some issues in our staging environment and mcrouter, particularly around deletes.We see cache invalidation issues, values still being in the cache when they should have been deleted. \r\nSince we use twemproxy for hashing (and mcrouter doesn't have the same hashing algorithm) we have configured two backends in it, one for the classic pool and one for the VPC pool, and then mcrouter is setup to point to both twemproxy backends with the following config:\r\n\r\n```\r\n// This config file is generated by Ansible from\r\n// the mcrouter_config YAML parameter and converted\r\n// to json.  See https://github.com/facebook/mcrouter/wiki/Config-Files\r\n\r\n{\r\n    \"pools\": {\r\n        \"twemproxy\": {\r\n            \"servers\": [\r\n                \"localhost:22122\"\r\n            ]\r\n        },\r\n        \"vpc\": {\r\n            \"servers\": [\r\n                \"localhost:22123\"\r\n            ]\r\n        }\r\n    },\r\n    \"route\": {\r\n        \"pool\": \"twemproxy\",\r\n        \"shadows\": [\r\n            {\r\n                \"index_range\": [\r\n                    0,\r\n                    1\r\n                ],\r\n                \"key_fraction_range\": [\r\n                    0,\r\n                    1\r\n                ],\r\n                \"target\": {\r\n                    \"pool\": \"vpc\",\r\n                    \"type\": \"PoolRoute\"\r\n                }\r\n            }\r\n        ],\r\n        \"type\": \"PoolRoute\"\r\n    }\r\n}\r\n```\r\nWith this setup we get some issues around deletes. Specifically we see a lot of empty values in memcached, i.e.: \r\n```\r\n$ echo \"get stage1_key_here_12243571\" | nc memnew1.stage.us-east-1.hootops.com 11211\r\nVALUE stage1_key_here_12243571 4 6\r\na:0:{}\r\nEND\r\n```\r\nwhen it should actually be\r\n```\r\n$ echo \"get stage1_key_here_12243571\" | nc memnew1.stage.us-east-1.hootops.com 11211\r\nEND\r\n```\r\n\r\nDo you guys know of anyone who has tried mcrouter and twemproxy? Do you see any issues with the setup? ", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yctn": {"issues": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/193", "title": "Debian 8 build script", "body": "Hello,\r\n\r\nCould you maby provide a build script for Debian 8?\r\n\r\nim trying to compile it manualy but i keep running into issues i cant seem to resolve.", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "galitz": {"issues": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/192", "title": "Thread crazieness (Y threads x num_cpu_cores)", "body": "Hi.\r\n\r\nWe are running mcrouter in a configuration where it launches with \"proxy-threads auto\" on 4 core servers.  So we are getting 4 threads per core.  However we are running 6 individual instances of mcrouter pointing to different memcache clusters.  So in this config on each server the effective number of threads is 6 * 4 for each server, but pointing to different pools.  In this particular case we have eight servers acting as mcrouter front-ends.  Some memcache clusters see high usage, others low.. it is quite mixed.\r\n\r\nMy question is if I am likely to run into race conditions/thread collisions that can effect performance or reliability?  I realize this is predicated on usage levels somewhat, but in general?\r\n\r\nWould tuning options such global-tko-tracking be beneficial?\r\n\r\nThanks.\r\n-G\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "netshade": {"issues": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/187", "title": "Build Process Is Not Intuitive", "body": "I had some issues building a version of `mcrouter` to ship to different servers. After some amount of time trying to figure out the correct ordering of `mcrouter` HEAD, `WANGLE_COMMIT` and `FOLLY_COMMIT` values, I was able to create a binary, but the process seemed way too dependent on upstream OS ability to provide the correct versions of `boost`, `automake`, `autoconf`, `ragel`, `double-conversion`, `glog` and `gflag`. \r\n\r\nI wanted to automate this process so I could create binaries that were less dependent on the OS packaging dependencies, and so created this Dockerfile and workflow to generate a mcrouter artifact. The `ldd` hack I'm not particularly proud of / confident with, but it is at least getting me to the point where I'm able to experiment with `mcrouter`.\r\n\r\nIncluded are the Dockerfile and build scripts. Because this is currently more suited to my workflow than anything else, I'm making this an issue rather than a PR, but would promote this to a PR if any of this seems useful to the `mcrouter` team ( or random internet person who has the same problems I had w/ building this ).\r\n\r\nWorkflow:\r\n```\r\nmkdir target # Make the directory where artifact will be built\r\nsudo ./build.sh # Build the docker image\r\nsudo ./run.sh # Run the compile, mcrouter-v0.35.0.tar.bz2 will be in target/ after completion\r\n```\r\n\r\n# Dockerfile\r\n```\r\nFROM            centos:7\r\nMAINTAINER      mcrouter <mcrouter@fb.com>\r\nENV             BUILD_DIR               /opt/facebook\r\nENV             TARGET_DIR              /target/\r\nENV             GFLAGS_VERSION          v2.2.0\r\nENV             GLOG_VERSION            v0.3.4\r\nENV             DOUBLE_CONV_VERSION     v2.0.1\r\nENV             MCROUTER_VERSION        v0.35.0\r\nENV             FOLLY_COMMIT            81d9192f8afdf53fcbc7bf572f8ce638516380f8\r\nENV             WANGLE_COMMIT           f1704ef198062d9754e4a07857a737381d017140\r\nENV             PATH                    /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$TARGET_DIR/bin:$TARGET_DIR/sbin\r\nENV             CFLAGS                  -I$TARGET_DIR/include/\r\nENV             CXXFLAGS                -I$TARGET_DIR/include/\r\nENV             CPPFLAGS                -I$TARGET_DIR/include/\r\nENV             LDFLAGS                 -L$TARGET_DIR/lib/ -Wl,-R,'$ORIGIN/../lib'\r\n\r\nRUN             yum -y install git\r\nRUN             yum -y groupinstall \"Development Tools\"\r\nRUN             yum -y install cmake\r\nRUN             yum -y install wget\r\nRUN             yum -y install openssl openssl-devel\r\nRUN             yum -y install libevent libevent-devel\r\nRUN             yum -y install python-devel\r\nRUN             yum -y install icu libicu libicu-devel\r\nRUN             yum -y install bzip2-devel\r\nRUN             yum -y install chrpath\r\nRUN             mkdir -p $BUILD_DIR\r\n\r\n# automake-1.14\r\nRUN             cd $BUILD_DIR && \\\r\n                  wget http://ftp.gnu.org/gnu/automake/automake-1.14.tar.gz && \\\r\n                  tar -zxvf ./automake-1.14.tar.gz\r\n\r\n# scons 2.5.1\r\nRUN             cd $BUILD_DIR && \\\r\n                  wget https://iweb.dl.sourceforge.net/project/scons/scons/2.5.1/scons-2.5.1-1.noarch.rpm && \\\r\n                  rpm -ivh scons-2.5.1-1.noarch.rpm\r\n\r\n# ragel 6.10\r\nRUN             cd $BUILD_DIR && \\\r\n                  wget \"http://www.colm.net/files/ragel/ragel-6.10.tar.gz\" && \\\r\n                  tar -zxvf ragel-6.10.tar.gz\r\n\r\n# gflags\r\nRUN             cd $BUILD_DIR && \\\r\n                  git clone https://github.com/schuhschuh/gflags.git && \\\r\n                  cd gflags && \\\r\n                  git checkout $GFLAGS_VERSION\r\n\r\n# glog\r\nRUN             cd $BUILD_DIR && \\\r\n                  git clone https://github.com/google/glog.git && \\\r\n                  cd glog && \\\r\n                  git checkout $GLOG_VERSION\r\n\r\n# double_conversion\r\nRUN             cd $BUILD_DIR && \\\r\n                  git clone https://github.com/google/double-conversion.git && \\\r\n                  cd double-conversion && \\\r\n                  git checkout $DOUBLE_CONV_VERSION\r\n\r\n# folly\r\nRUN             cd $BUILD_DIR && \\\r\n                  git clone https://github.com/facebook/folly.git && \\\r\n                  cd folly && \\\r\n                  git checkout $FOLLY_COMMIT\r\n\r\n# wangle\r\nRUN             cd $BUILD_DIR && \\\r\n                  git clone https://github.com/facebook/wangle.git && \\\r\n                  cd wangle && \\\r\n                  git checkout $WANGLE_COMMIT\r\n\r\n# mcrouter\r\nRUN             cd $BUILD_DIR && \\\r\n                  git clone https://github.com/facebook/mcrouter.git && \\\r\n                  cd mcrouter && \\\r\n                  git checkout $MCROUTER_VERSION\r\n\r\n# boost\r\nRUN             cd $BUILD_DIR && \\\r\n                  wget \"https://superb-dca2.dl.sourceforge.net/project/boost/boost/1.53.0/boost_1_53_0.tar.gz\" && \\\r\n                  tar -zxvf boost_1_53_0.tar.gz\r\n\r\nCMD             echo \"$TARGET_DIR/lib\" >> /etc/ld.so.conf && \\\r\n                cd $BUILD_DIR/automake-1.14 && ./configure --prefix=/usr/ && make && make install && ldconfig && \\\r\n                cd $BUILD_DIR/boost_1_53_0 && ./bootstrap.sh --prefix=$TARGET_DIR && ./b2 && ./b2 install && \\\r\n                cd $BUILD_DIR/ragel-6.10 && ./configure --prefix=$TARGET_DIR && make && make install && \\\r\n                cd $BUILD_DIR/gflags && cmake -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=ON -DCMAKE_INSTALL_PREFIX:PATH=$TARGET_DIR . && make && make install && ldconfig && \\\r\n                cd $BUILD_DIR/glog && ./configure --enable-static --enable-shared --prefix=$TARGET_DIR && make && make install && ldconfig && \\\r\n                cd $BUILD_DIR/double-conversion && scons prefix=$TARGET_DIR && scons install prefix=$TARGET_DIR && cmake -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=ON -DCMAKE_INSTALL_PREFIX:PATH=$TARGET_DIR . && make install && ldconfig && \\\r\n                cd $BUILD_DIR/folly/folly && autoreconf -ivf && ./configure --enable-static --enable-shared --prefix=$TARGET_DIR --with-boost=$TARGET_DIR && make && make install && ldconfig && \\\r\n                cd $BUILD_DIR/wangle/wangle && cmake -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX:PATH=$TARGET_DIR -DFOLLY_INCLUDE_DIR=$TARGET_DIR/include/ -DFOLLY_LIBRARYDIR=$TARGET_DIR/lib/ . && make && make install && ldconfig && \\\r\n                cd $BUILD_DIR/mcrouter/mcrouter && AUTOMAKE=automake-1.14 ACLOCAL=\"aclocal-1.14 -I/usr/share/aclocal/\" ./autogen.sh && ./configure --enable-static --enable-shared --prefix=$TARGET_DIR --with-boost=$TARGET_DIR && make && make install && \\\r\n                for i in $(ldd $TARGET_DIR/bin/mcrouter  | egrep \"(icu|crypto|ssl)\" | egrep -o \"/[^ ]+\"); do cp $i /$TARGET_DIR/lib/; done && \\\r\n                chrpath -r \"\\$ORIGIN/../lib/\" $TARGET_DIR/bin/mcrouter && \\\r\n                chrpath -r \"\\$ORIGIN/../lib/\" $TARGET_DIR/bin/mcpiper && \\\r\n                cd $TARGET_DIR && tar -cjvf /tmp/mcrouter-$MCROUTER_VERSION.tar.bz2 bin/mcrouter bin/mcpiper lib/*.so lib/*.so.* && \\\r\n                mv /tmp/mcrouter-$MCROUTER_VERSION.tar.bz2 $TARGET_DIR\r\n\r\nVOLUME          [\"/target\"]\r\n```\r\n\r\n# build.sh\r\n```\r\n#!/bin/bash\r\ndocker build . -t mcrouter:latest\r\n```\r\n\r\n\r\n# run.sh\r\n```\r\n#!/bin/bash\r\ndocker run -v $(pwd)/target:/target mcrouter:latest\r\n```", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/187/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "deepub": {"issues": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/175", "title": "How do leases work with Memcached and McRouter?", "body": "Hi Folks,\r\n\r\nI am trying to understand lease behavior since cas operations won't work with a distributed Memcached set up (replicated pools).\r\n\r\nReference: \"Scaling Memcache at Facebook\" white paper. Secton 3.2.1 Leases\r\n\r\n1) Who issues a lease? Is it the Memcached instance or McRouter? Memcached pull request is still open here https://github.com/memcached/memcached/pull/65\r\n2) Per the white paper, you have memcached instances giving out leases. Are you using stock Memcached or a custom fork? If it is a custom fork, is that open sourced? I checked the Facebook github repo and didn't find a custom fork there.\r\n3) I don't see any reference to lease handling in the memcached github repo. Ref: https://github.com/memcached/memcached\r\n4) I did find lease token references in McRouter code here\r\nmcrouter/LeaseTokenMap.h:   * @param leaseTokenTtl     How many milliseconds the lease token will live.\r\nmcrouter/LeaseTokenMap.h:      uint32_t leaseTokenTtl = 10000);\r\nand similarly ./mcrouter/test/test_mcrouter_basic.py references lease-get and lease-set calls.\r\n\r\nDoes this imply lease handling is a part of McRouter and not memcached? If yes, then how will mcrouter leases be handled across multiple mcrouter instances. I am assuming an embedded mode here for mcrouter.\r\n\r\nThanks a lot for the awesome work you are doing!", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/175/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/128", "title": "Why isn't mcrouter pre-packaged?", "body": "I am new to mcrouter and learning the ropes here. Is there a reason why mcrouter isn't pre-packaged like other open source initiatives? I am struggling to make a build on CentOS and wondering why couldn't it be made simpler by just hosting the rpms too?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/mcrouter/pulls/139", "title": "Create canned route configurations", "body": "The idea is to provide pre-canned route configurations. This will help users in multiple ways:\n1) Act as a tutorial for using multiple route configurations together to address a requirement.\n2) Allow users to hit the ground running. They can use such configurations and get going right away.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "myhope001": {"issues": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/169", "title": "mcrouter performance  and optimize", "body": "Dear engineer:\r\n                I use  python and pylibmc\r\n                At first,5 instances in aws directly connected memcached, the use of binary, about 24,000 per minute to deal with the request, which can meet our business needs.\r\n               Now, the instance cache points to the ELB (load balance),there are two mcrouters behind the ELB, and four memcached behind the mcrouters, but now it appears to deal with slower, and can not meet our business needs\u3002\r\n              So I would like to ask whether it can give me some suggestions for optimization\r\n              Thank you very much!\r\n\r\nThe following is our mcrouter information\uff1a\r\n stats all\r\nSTAT version 34.0.0-master mcrouter\r\nSTAT commandargs -L /var/log/mcrouter/mcrouter.log -f /usr/local/mcrouter/conf/mcrouter.json --num-proxies=4 -p 11211\r\nSTAT pid 5533\r\nSTAT parent_pid 5531\r\nSTAT time 1482134780\r\nSTAT uptime 16149\r\nSTAT num_servers 16\r\nSTAT num_servers_new 0\r\nSTAT num_servers_up 16\r\nSTAT num_servers_down 0\r\nSTAT num_servers_closed 0\r\nSTAT num_clients 17\r\nSTAT num_suspect_servers 0\r\nSTAT destination_batches_sum 9139.63\r\nSTAT destination_requests_sum 14007.9\r\nSTAT outstanding_route_get_reqs_queued 0\r\nSTAT outstanding_route_update_reqs_queued 0\r\nSTAT outstanding_route_get_avg_queue_size 0\r\nSTAT outstanding_route_update_avg_queue_size 0\r\nSTAT outstanding_route_get_avg_wait_time_sec 0\r\nSTAT outstanding_route_update_avg_wait_time_sec 0\r\nSTAT retrans_closed_connections 0\r\nSTAT outstanding_route_get_reqs_queued_helper 0\r\nSTAT outstanding_route_update_reqs_queued_helper 0\r\nSTAT outstanding_route_get_wait_time_sum_us 0\r\nSTAT outstanding_route_update_wait_time_sum_us 0\r\nSTAT retrans_per_kbyte_sum 0\r\nSTAT retrans_num_total 0\r\nSTAT destination_pending_reqs 0\r\nSTAT destination_inflight_reqs 12\r\nSTAT destination_batch_size 1.53265\r\nSTAT asynclog_requests 0\r\nSTAT proxy_reqs_processing 14\r\nSTAT proxy_reqs_waiting 0\r\nSTAT client_queue_notify_period 0\r\nSTAT rusage_system 3743.21\r\nSTAT rusage_user 3623.83\r\nSTAT ps_num_minor_faults 5226\r\nSTAT ps_num_major_faults 0\r\nSTAT ps_user_time_sec 3623.82\r\nSTAT ps_system_time_sec 3743.2\r\nSTAT ps_vsize 756711424\r\nSTAT ps_rss 15433728\r\nSTAT fibers_allocated 116\r\nSTAT fibers_pool_size 104\r\nSTAT fibers_stack_high_watermark 5760\r\nSTAT successful_client_connections 65558\r\nSTAT cycles_avg 0\r\nSTAT cycles_min 0\r\nSTAT cycles_max 0\r\nSTAT cycles_p01 0\r\nSTAT cycles_p05 0\r\nSTAT cycles_p50 0\r\nSTAT cycles_p95 0\r\nSTAT cycles_p99 0\r\nSTAT cycles_num 0\r\nSTAT duration_us 334.117\r\nSTAT destination_max_pending_reqs 64\r\nSTAT destination_max_inflight_reqs 67\r\nSTAT rate_limited_log_count 0\r\nSTAT cmd_cas_count 0\r\nSTAT cmd_delete_count 0\r\nSTAT cmd_get_count 185195824\r\nSTAT cmd_gets_count 0\r\nSTAT cmd_set_count 761411\r\nSTAT cmd_cas_outlier_count 0\r\nSTAT cmd_cas_outlier_all_count 0\r\nSTAT cmd_delete_outlier_count 0\r\nSTAT cmd_delete_outlier_all_count 0\r\nSTAT cmd_get_outlier_count 0\r\nSTAT cmd_get_outlier_all_count 0\r\nSTAT cmd_gets_outlier_count 0\r\nSTAT cmd_gets_outlier_all_count 0\r\nSTAT cmd_set_outlier_count 0\r\nSTAT cmd_set_outlier_all_count 0\r\nSTAT cmd_other_outlier_count 0\r\nSTAT cmd_other_outlier_all_count 0\r\nSTAT cmd_cas 0\r\nSTAT cmd_delete 0\r\nSTAT cmd_get 13958.8\r\nSTAT cmd_gets 0\r\nSTAT cmd_set 49.0625\r\nSTAT cmd_cas_outlier 0\r\nSTAT cmd_cas_outlier_all 0\r\nSTAT cmd_delete_outlier 0\r\nSTAT cmd_delete_outlier_all 0\r\nSTAT cmd_get_outlier 0\r\nSTAT cmd_get_outlier_all 0\r\nSTAT cmd_gets_outlier 0\r\nSTAT cmd_gets_outlier_all 0\r\nSTAT cmd_set_outlier 0\r\nSTAT cmd_set_outlier_all 0\r\nSTAT cmd_other_outlier 0\r\nSTAT cmd_other_outlier_all 0\r\nSTAT cmd_add_count 0\r\nSTAT cmd_decr_count 0\r\nSTAT cmd_incr_count 0\r\nSTAT cmd_lease_get_count 0\r\nSTAT cmd_lease_set_count 0\r\nSTAT cmd_meta_count 0\r\nSTAT cmd_other_count 0\r\nSTAT cmd_replace_count 0\r\nSTAT cmd_stats_count 16\r\nSTAT redirected_lease_set_count 0\r\nSTAT cmd_add 0\r\nSTAT cmd_decr 0\r\nSTAT cmd_incr 0\r\nSTAT cmd_lease_get 0\r\nSTAT cmd_lease_set 0\r\nSTAT cmd_meta 0\r\nSTAT cmd_other 0\r\nSTAT cmd_replace 0\r\nSTAT cmd_stats 0\r\nSTAT replies_compressed 0\r\nSTAT replies_not_compressed 0\r\nSTAT reply_traffic_before_compression 0\r\nSTAT reply_traffic_after_compression 0\r\nSTAT cmd_cas_out_count 0\r\nSTAT cmd_cas_out_all_count 0\r\nSTAT cmd_delete_out_count 0\r\nSTAT cmd_delete_out_all_count 0\r\nSTAT cmd_get_out_count 185195811\r\nSTAT cmd_get_out_all_count 185195811\r\nSTAT cmd_gets_out_count 0\r\nSTAT cmd_gets_out_all_count 0\r\nSTAT cmd_set_out_count 761411\r\nSTAT cmd_set_out_all_count 761411\r\nSTAT cmd_add_out_count 0\r\nSTAT cmd_add_out_all_count 0\r\nSTAT cmd_decr_out_count 0\r\nSTAT cmd_decr_out_all_count 0\r\nSTAT cmd_incr_out_count 0\r\nSTAT cmd_incr_out_all_count 0\r\nSTAT cmd_lease_get_out_count 0\r\nSTAT cmd_lease_get_out_all_count 0\r\nSTAT cmd_lease_set_out_count 0\r\nSTAT cmd_lease_set_out_all_count 0\r\nSTAT cmd_meta_out_count 0\r\nSTAT cmd_meta_out_all_count 0\r\nSTAT cmd_other_out_count 0\r\nSTAT cmd_other_out_all_count 0\r\nSTAT cmd_replace_out_count 0\r\nSTAT cmd_replace_out_all_count 0\r\nSTAT cmd_cas_out 0\r\nSTAT cmd_cas_out_all 0\r\nSTAT cmd_delete_out 0\r\nSTAT cmd_delete_out_all 0\r\nSTAT cmd_get_out 13958.8\r\nSTAT cmd_get_out_all 13958.8\r\nSTAT cmd_gets_out 0\r\nSTAT cmd_gets_out_all 0\r\nSTAT cmd_set_out 49.0625\r\nSTAT cmd_set_out_all 49.0625\r\nSTAT cmd_add_out 0\r\nSTAT cmd_add_out_all 0\r\nSTAT cmd_decr_out 0\r\nSTAT cmd_decr_out_all 0\r\nSTAT cmd_incr_out 0\r\nSTAT cmd_incr_out_all 0\r\nSTAT cmd_lease_get_out 0\r\nSTAT cmd_lease_get_out_all 0\r\nSTAT cmd_lease_set_out 0\r\nSTAT cmd_lease_set_out_all 0\r\nSTAT cmd_meta_out 0\r\nSTAT cmd_meta_out_all 0\r\nSTAT cmd_other_out 0\r\nSTAT cmd_other_out_all 0\r\nSTAT cmd_replace_out 0\r\nSTAT cmd_replace_out_all 0\r\nSTAT config_age 16149\r\nSTAT config_last_attempt 1482118631\r\nSTAT config_last_success 1482118631\r\nSTAT config_failures 0\r\nSTAT start_time 1482118631\r\nSTAT dev_null_requests 0\r\nSTAT proxy_request_num_outstanding 17\r\nSTAT retrans_per_kbyte_avg 0\r\nSTAT retrans_per_kbyte_max 0\r\nSTAT request_sent_count 185957253\r\nSTAT request_error_count 2\r\nSTAT request_success_count 185957235\r\nSTAT request_replied_count 185957237\r\nSTAT request_sent 14007.9\r\nSTAT request_error 0\r\nSTAT request_success 14007.9\r\nSTAT request_replied 14007.9\r\nSTAT client_queue_notifications 0\r\nSTAT failover_all 0\r\nSTAT failover_all_failed 0\r\nSTAT failover_rate_limited 0\r\nSTAT result_error_count 0\r\nSTAT result_error_all_count 0\r\nSTAT result_connect_error_count 0\r\nSTAT result_connect_error_all_count 0\r\nSTAT result_connect_timeout_count 0\r\nSTAT result_connect_timeout_all_count 0\r\nSTAT result_data_timeout_count 0\r\nSTAT result_data_timeout_all_count 0\r\nSTAT result_busy_count 0\r\nSTAT result_busy_all_count 0\r\nSTAT result_tko_count 0\r\nSTAT result_tko_all_count 0\r\nSTAT result_local_error_count 0\r\nSTAT result_local_error_all_count 0\r\nSTAT result_error 0\r\nSTAT result_error_all 0\r\nSTAT result_connect_error 0\r\nSTAT result_connect_error_all 0\r\nSTAT result_connect_timeout 0\r\nSTAT result_connect_timeout_all 0\r\nSTAT result_data_timeout 0\r\nSTAT result_data_timeout_all 0\r\nSTAT result_busy 0\r\nSTAT result_busy_all 0\r\nSTAT result_tko 0\r\nSTAT result_tko_all 0\r\nSTAT result_local_error 0\r\nSTAT result_local_error_all 0\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "srcspider": {"issues": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/167", "title": "Install size is heavily BLOATED", "body": "Before I go on let me just clarify where this is very serious issue: Docker containers. Anywhere else the \"disk space is cheap\" argument applies, *probably*.\r\n\r\nIf you install/compile in a Docker container (and you have to at the moment, since there's no prepackaged version), then you will end up with **mcrouter layer in docker of 2.339 GB** !! A bit of cleanup later (removing git repo, yum clean all, etc) and you go down to 1.358 GB (I'm gonna guess there's just a lot of packages that get pulled in as deps).\r\n\r\n1.35 GB is still in the realm of nonsensical, since this has to get pushed and pulled everywhere the docker is required (resulting in considerable downtime, slowdown, etc etc). Consider that the centos:7 image is only 200 MB.\r\n\r\nFrom debugging by installing to a \"mcrouter-install\" prefix I've noticed the the source of the disk usage to be (mainly) the following,\r\n\r\n778M\t/build/mcrouter-install/pkgs\r\n175M\t/build/mcrouter-install/install/lib\r\n\r\nAll these seem to be build artifacts. The lib directory there gets its sized from `.a` and `.so` files for folly and others. But I assume mcrouter is statically linked and doesn't care for any of them? I'm basing this on how the mcrouter binary is 125M itself, which seems a bit bloated to be honest.\r\n\r\nPlease either optimize the install scripts or make a new install script that's specifically designed to produce the smallest result size (cleanup after itself, no install of folly libs that were only used for building, etc).\r\n\r\n_Finally, for the sake of fixing it in the meantime, can I have some clarification on this if possible:_\r\n1. is there a way to make mcrouter compile to be smaller using the install scripts? Even if it's linked to folly it can't possibly use that much of folly--it's like it's starting it's own operating system to run.\r\n2. is it safe to only keep /build/mcrouter-install/install/bin/mcrouter & mcpiper ? I'm only uncertain if you make use of the `.so` files in some strange hacky way\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/167/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "panchenji": {"issues": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/160", "title": "Errors when building release-33-0 on Ubuntu 12.04", "body": "I tried to run command as follows to build:\r\nbash scripts/install_ubuntu_12.04.sh /home/test/tool/mcrouter/mcrouter/build/ -j4\r\n\r\nThe first error I got is for add_compile_options in cmake which supports since 2.8.12 but when building wangle, the requires version in CMakeList is only 2.8. And the default version in ubuntu 12.04 is 2.8.7. I upgraded it to 2.8.12 and fix the issue.\r\n\r\nThe second error I got is related to the compile:\r\n_routes/RateLimiter.cpp: In constructor \u2018facebook::memcache::mcrouter::RateLimiter::RateLimiter(const folly::dynamic&)\u2019:\r\nroutes/RateLimiter.cpp:50:50: internal compiler error: in nothrow_spec_p, at cp/except.c:1272\r\n   auto now = folly::TokenBucket::defaultClockNow();\r\n                                                  ^\r\nPlease submit a full bug report,\r\nwith preprocessed source if appropriate.\r\nSee <file:///usr/share/doc/gcc-4.8/README.Bugs> for instructions.\r\nmv -f routes/.deps/libmcroutercore_a-RandomRoute.Tpo routes/.deps/libmcroutercore_a-RandomRoute.Po\r\ng++ -DHAVE_CONFIG_H   -I.. -I/home/test/tool/mcrouter/mcrouter/build/install/include   -DLIBMC_FBTRACE_DISABLE  -Wno-missing-field-initializers -Wno-deprecated -W -Wall -Wextra -Wno-unused-parameter -fno-strict-aliasing -g -O2 -std=gnu++1y -MT routes/libmcroutercore_a-RouteHandleMap.o -MD -MP -MF rout\r\nIn file included from /home/test/tool/mcrouter/mcrouter/build/install/include/folly/Bits.h:71:0,\r\n                 from /home/test/tool/mcrouter/mcrouter/build/install/include/folly/Hash.h:27,\r\n                 from /home/test/tool/mcrouter/mcrouter/build/install/include/folly/FBString.h:54,\r\n                 from /home/test/tool/mcrouter/mcrouter/build/install/include/folly/Range.h:22,\r\n                 from ../mcrouter/lib/carbon/RequestReplyUtil.h:15,\r\n                 from ../mcrouter/lib/network/gen/Memcache.h:18,\r\n                 from ../mcrouter/lib/Reply.h:16,\r\n                 from routes/RateLimitRoute.h:15,\r\n                 from routes/RateLimitRoute.cpp:10:\r\n../mcrouter/routes/RateLimiter.h: In instantiation of \u2018bool facebook::memcache::mcrouter::RateLimiter::canPassThrough(facebook::memcache::UpdateLikeT<Request>) [with Request = facebook::memcache::McPrependRequest; facebook::memcache::UpdateLikeT<Request> = void*]\u2019:\r\nroutes/RateLimitRoute.h:51:9:   required from \u2018facebook::memcache::ReplyT<Request> facebook::memcache::mcrouter::RateLimitRoute::route(const Request&) [with Request = facebook::memcache::McPrependRequest; facebook::memcache::ReplyT<Request> = facebook::memcache::McPrependReply]\u2019\r\n../mcrouter/lib/RouteHandleIf.h:69:34:   required from \u2018facebook::memcache::ReplyT<Request> facebook::memcache::RouteHandle<Route, RouteHandleIf, carbon::List<Request, Requests ...> >::route(const Request&) [with Route = facebook::memcache::mcrouter::RateLimitRoute; RouteHandleIf = facebook::memcache::mcro\r\nroutes/RateLimitRoute.cpp:37:3:   required from here\r\n../mcrouter/routes/RateLimiter.h:57:65: internal compiler error: in nothrow_spec_p, at cp/except.c:1272\r\n       setsTb_->consume(1.0, folly::TokenBucket::defaultClockNow()));\r\n                                                                 ^\r\n/home/test/tool/mcrouter/mcrouter/build/install/include/folly/Likely.h:30:40: note: in definition of macro \u2018LIKELY\u2019\r\n #define LIKELY(x)   (__builtin_expect((x), 1))\r\n                                        ^\r\nPlease submit a full bug report,\r\nwith preprocessed source if appropriate.\r\nSee <file:///usr/share/doc/gcc-4.8/README.Bugs> for instructions.\r\nPreprocessed source stored into /tmp/cci9SOtZ.out file, please attach this to your bugreport.\r\nERROR: Cannot create report: [Errno 17] File exists: '/var/crash/_usr_lib_gcc_x86_64-linux-gnu_4.8_cc1plus.11636.crash'\r\nmake[2]: *** [routes/libmcroutercore_a-RateLimiter.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\nPreprocessed source stored into /tmp/ccNYCMVv.out file, please attach this to your bugreport.\r\nERROR: Cannot create report: [Errno 17] File exists: '/var/crash/_usr_lib_gcc_x86_64-linux-gnu_4.8_cc1plus.11636.crash'_\r\n\r\n\r\nDid anyone meet this problem before?\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fibigerg": {"issues": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/153", "title": "High CPU usage, memcached performance degradation ", "body": "Hi, I am running mcrouter mainly for reliable delete across multiple nodes. Every node has its own local memcached instance. Deletes are AllSyncRoute (local + other nodes).\n\nI have noticed about 30 % slower loading times of our PHP application while using mcrouter instead of local memcached directly.\n\nI am using 4CPU server and testing environment with one PHP-FPM thread. I run Apache benchmark with 1 concurrent request. CPU usage of PHP is around 30% and mcrouter is hitting 20 %, while memcached is at 4 %. Loading times were above 300 ms with mcrouter, but only around 200 ms with memcached.\n\nI am able to hit 25 req/s with 6 PHP-FPM threads and memcached directly, but only 15 req/s with mcrouter. Mcrouter is hitting 100 % cpu usage in this case.\n\nIs this a standard issue? Thanks for help!\n\nMcrouter config:\n\n```\n{\n  \"pools\": {\n    \"local\": {\n      \"servers\": [ \"127.0.0.1:11212\" ]\n    },\n    \"others\": {\n      \"servers\": [ \n        \"10.135.14.163:11212\"\n      ]\n    },\n    \"shared\": {\n      \"servers\": [  ]\n    }\n  },\n  \"routes\": [\n    {\n      \"aliases\": [\n        \"/default/local/\"\n      ],\n      \"route\": {\n        \"type\": \"OperationSelectorRoute\",\n        \"default_policy\": \"PoolRoute|local\",\n        \"operation_policies\": {\n          \"delete\": {\n            \"type\": \"AllSyncRoute\",\n            \"children\": [ \"PoolRoute|local\", \"PoolRoute|others\" ]\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\nMcrouter arguments:\n\n```\n-send-invalid-route-to-default --num-proxies=2 --stats-root=/var/mcrouter/stats --log-path=/var/log/mcrouter.log --port=11211 --config=file:/data/mcrouter/mcrouter.conf -R /default/local\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nneul": {"issues": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/145", "title": "Caveat that would good to have in docs somewhere", "body": "I am in the process of using mcrouter for a cutover from a simple pool of memcached instances to a more structured setup. This has gone great using the WarmRoute in conjunction with AllSyncRoute and/or MissFailoverRoute during the cutover process, with one notable exception that seems obvious once we figured it out.\n\n'add' used for locking does not play nice with using mcrouter when in these sorts of setups since what can happen is that the 'worst response' on the 'add' is going to be that the entry already exists, but the entry winds up getting created anyway on some portion of the backend pool nodes. Depending on how the cache insert takes place into the cold pool, this can result in getting the just added entry instead of the desired cached entry.\n\nIn our case, the core issue was tracked to starting with just an AllSyncRoute+MissFailoverRoute for gets (we were trying to add mcrouter in front of an existing set of nodes) and then shifting over to the warming setup. This made it to where if the existing cache entry was in the third node for example, the add would 'fail' cause of the worst response, but the subsequent get would receive the add'ed entry from the first node in the list. \n\nI'm not sure there is any _right_ way to deal with this, so just suggesting inclusion of a warning in the docs about potential behavior issues with 'add' vs 'set' when doing various configs that are shown as examples. \n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/144", "title": "mcrouter can't cleanly handle a 'config get' if it's talked to via elasticache client", "body": "I realize this is a bad overall config - but the elasticache client does appear to connect ok to a non-elasticache memcached, which just returns a plain 'ERROR' instead and doesn't drop the connection. Would be nice if mcrouter would generate equivalent response. \n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AlexKapustin": {"issues": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/143", "title": "PHP7 & new memcached library", "body": "Greetings,\n\nI've noticed problem that getStats method for new memcached library doesn't work.\n\n``` php\n$m = new Memcached();\n$m->addServer('localhost', 1111);\n$a = $m->getStats();\nvar_dump($a);  // bool(false) in output\n```\n\nAnd there is the problem:\n\n```\ngetsockopt(4, SOL_SOCKET, SO_ERROR, [0], [4]) = 0\nsendto(4, \"version\\r\\n\", 9, MSG_NOSIGNAL, NULL, 0) = 9\nrecvfrom(4, 0x7fdc0b833210, 8196, 16384, 0, 0) = -1 EAGAIN (Resource temporarily unavailable)\npoll([{fd=4, events=POLLIN}], 1, 5000)  = 1 ([{fd=4, revents=POLLIN}])\nrecvfrom(4, \"VERSION mcrouter 2.0.0\\r\\n\", 8196, MSG_NOSIGNAL, NULL, NULL) = 24\nshutdown(4, SHUT_RDWR)                  = 0\nclose(4)                                = 0\n```\n\nLooks like memcached library tries to get memcached version to determinate protocol, but as it returns not compatible data - fails.\n\nDo you have any plan to fix this issue ? Maybe by adding some option for returned real memcached version ?\n\nHave a nice day. \n\nBest Regards,\nAlex\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/143/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bobpattersonjr": {"issues": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/121", "title": "SSL issues", "body": "Hi,\n\nI am having issues connecting to between mcrouter instances using SSL.  I was following the guild at https://github.com/facebook/mcrouter/wiki/SSL-Setup without much luck.  I am getting the following error\n\n`I0512 15:36:00.247300 23769 AsyncMcClientImpl.cpp:543] Failed to read from socket with remote endpoint \"172.16.119.48:11223:TCP:ascii\". Exception: recv() failed (peer=172.16.119.48:11223, local=172.18.153.112:54752): errno = 104`\n\nI am using version 0.15\n\nIs the wiki page the one I should be following?\n\nThanks\nBob\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hrjaco": {"issues": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/106", "title": "Balance traffic to replicated cache pool.", "body": "Hi,\n\nFor one hot keys use case(where data size is small, can be hold within one cache server, but the reads traffic is very very high, and writes are low), we want to use a replicated cache pool. i.e. a cluster of 10 hosts, writes and deletes go to all of them, and reads go to randomly one of them. LatestRoute seems to be fit in this case, but one issue with that is our client cluster is very small(~20 hosts), LatestRoute decides the order of hosts to try based on the hash of the host id, and it is fixed for each client host. This could cause imbalanced traffic to the cache servers.\n\nOne trick we did is to use RandomRoute combined with LatestRouter:\n    \"replicatedPool\": {\n      \"params\": [\n        \"pool_name\",\n        \"salt_num\"\n      ],\n      \"result\": {\n        \"default_policy\": \"AllSyncRoute|Pool|%pool_name%\",\n        \"operation_policies\": {\n          \"get\": {\n            \"children\": {\n              \"type\": \"transform\",\n              \"itemTransform\": {\n                \"type\": \"LatestRoute\",\n                \"children\": \"Pool|%pool_name%\",\n                \"salt\": \"@str(%item%)\"\n              },\n              \"dictionary\": \"@range(@int(1),@int(%salt_num%))\"\n            },\n            \"type\": \"RandomRoute\"\n          }\n        },\n        \"type\": \"PrefixPolicyRoute\"\n      },\n      \"type\": \"macroDef\"\n    }\n\nFor each LatestRoute, we use a different salt. Therefore, if we use a large enough salt, in theory the traffic should be balanced.\n\nI am wondering is there an easier way to achieve the balance of traffic to replicated pool?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/127758994", "body": "that works, thanks @alikhtarov !\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/127758994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/comments/12430423", "body": "Curious what's the impact of not calling close() here? Will Mcrouter leave this connection open, even if its client has closed the connection?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/comments/12430423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "samveen": {"issues": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/102", "title": "Release archive missing FOLLY_RELEASE file", "body": "Please create the release tags from the respective release branch instead of from the `master` branch i.e. `release-16-0` etc. If not, the solution described in #98 doesn't work, especially with regards to automation for package building.\n\n```\n[samveen@buildhost ~]# tar tz < <(wget -O - -q https://github.com/facebook/mcrouter/archive/v0.16.0.tar.gz)  |grep -i folly\nmcrouter-0.16.0/mcrouter/scripts/order_ubuntu-12.04/30_folly\nmcrouter-0.16.0/mcrouter/scripts/order_ubuntu-14.04/10_folly\nmcrouter-0.16.0/mcrouter/scripts/order_ubuntu-15.04/10_folly\nmcrouter-0.16.0/mcrouter/scripts/recipes/folly.sh\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/comments/12732213", "body": "No associated release/tag?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/comments/12732213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "trungpham": {"issues": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/30", "title": "SASL authentication", "body": "Is it possible to support SASL authentication?\nIt will be useful for people who deploy their apps on Heroku platform with MCRouter running on AWS EC2 Cloud.\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/30/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76020860", "body": "This is less of a priority for us now since we're planning to move our app from Heroku into AWS. However, there are a lot of people out there that can benefit from the SASL support since not everyone is willing to move their app into AWS.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76020860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "renchap": {"issues": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/6", "title": "Memcache binary protocol support", "body": "Hi,\n\nmcrouter currently only supports ascii protocol, which is not ideal for performance. Is it planned to implement support for memcache binary protocol ? It would be great and would allow mcrouter to work with Dalli, the reference ruby gem to work with memcache.\n\nI see that you support the umbrella protocol and are using it at Facebook, but I cant find any documentation on it. Is it for your internal use only ?\n\nThanks !\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/6/reactions", "total_count": 9, "+1": 9, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vrishal": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/mcrouter/commits/7cafcdbdf6a0459d6ffd2ecc5ead5d72e4d510aa", "message": "Add failover policy specific stat counters\n\nSummary: Add failover policy specific stats counters, one for incrementing when failover occurs and another for incrementing when all failover destinations have been exhausted. Without these stats, the failover_all and failover_all_failed stats provide aggregated counts across all failover policies.\n\nReviewed By: andreazevedo\n\nDifferential Revision: D6741561\n\nfbshipit-source-id: 4e44a982f7ceae9604fc5563c57007ca2548af03"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/d65ec29a55d035eecd22b79dafdc5f8b45065a3d", "message": "Add support for custom failover route failover policy\n\nSummary: For cross region failover, add the ability to specify a custom failover policy for FailoverRoute route handle. The policy is used when tao_xregion_failover json element is specified with value containing a bit offset for each child in the children element's array. The offset is used to set the bit in the region mask array to avoid requests from being stuck in a closed loop.\n\nReviewed By: alikhtarov\n\nDifferential Revision: D5381836\n\nfbshipit-source-id: b3ec573338a89f5d2c88d66ffcd710e4b9003b2a"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "andreazevedo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/mcrouter/commits/54fa7b48602fc0f44894d2b4358d2881683edbad", "message": "Use in_place constructor for loggers\n\nReviewed By: glamtechie\n\nDifferential Revision: D6713941\n\nfbshipit-source-id: 7f71a12aeed17a8c71ceb518db8a65f78bb49425"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/112d8604f3a7250041db84913a76134c677f2a12", "message": "Make -n option strictly stop mcpiper after n messages\n\nSummary:\nBefore this diff, the -n option was a best effort option. It would stop after printing >= n messages. For busy servers, this number could but much bigger than n.\nNow, -n option makes sure mcpiper stops after printing exactly n messages.\n\nReviewed By: glamtechie\n\nDifferential Revision: D6543536\n\nfbshipit-source-id: 21ecb5d248edd46aa0960e2a2de6951639ae59d9"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/883db250bd92dc93060682d460cd60f88818bd49", "message": "Fix standalone mcrouter crashes when invalid arguments were given\n\nSummary:\nStandalone mcrouter was coredumping everytime we ran unit tests. The reason\nis that we have a few unit tests that gives invalid arguments to mcrouter and\nexpects it to shutdown.\nThe problem is that instead of shutting down gracefully we were crashing.\nThis diff fixes two separate issues:\n - Crash when an invalid \"carbon_router_name\" was provided.\n - Crash when an invalid config file was provided.\n\nReviewed By: glamtechie\n\nDifferential Revision: D6527582\n\nfbshipit-source-id: f8316225e12c783b02ee303c0325d328ae399b5f"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/83c88eb80b21c857690d03f5cdaf59e4a79c5829", "message": "Light cleanup of ProxyRoute and ServiceInfo\n\nSummary: Change proxy from pointer to reference in ProxyRoute and ServiceInfo.\n\nReviewed By: jmswen\n\nDifferential Revision: D6467376\n\nfbshipit-source-id: ee16d0c242fd5a97d842a6f47ffda29e67111377"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/dfd3591a113637a82fda441c46e8f63b16ca442d", "message": "Add final_result_error stat\n\nSummary: Sometimes (specially when there are ErrorRoutes in the config) it's useful to know how many errors were actually visible to the client.\n\nReviewed By: jmswen\n\nDifferential Revision: D6449848\n\nfbshipit-source-id: 6eb85436b6f6b309cf11ccbb548cb70dc951c749"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/615bf6ecce9fb3349d0e4ec42c8a56bc7755acb0", "message": "Allow service info commands for every router\n\nSummary:\nEnable \"get __mcrouter__....\" commands for all RouterInfos.\nThe behavior is pretty much identical, except that we are not bumping the number of get commands anymore for service info requests.\n\nReviewed By: brianwatling\n\nDifferential Revision: D6400236\n\nfbshipit-source-id: ca6ab20179004f8e98a44dba99fc2535aae3c4c0"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/b92195c98a7bbc015588f71676b9dd6d9d5e6db1", "message": "Add default ssl cert/key\n\nSummary: Use default SSL cert/key if none is provided.\n\nReviewed By: brianwatling\n\nDifferential Revision: D6304419\n\nfbshipit-source-id: f0c5582ed7519586ee0cf85be08feaf683d1ad14"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/cbe5796a4bf4f96bf9ae57f69c28fa603bb20d8a", "message": "Support random decisions in ShadowRoute\n\nSummary:\nAdd support for making random decisions to whether or not to send a shadow\nrequest. This is particularly useful for services that don't use \"key\" to make\nrouting decisions.\n\nReviewed By: glamtechie\n\nDifferential Revision: D6179849\n\nfbshipit-source-id: 2cc8088cece2c2279c36c30d7a4813ef6d3c2d13"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/18ce7deba3c1718026320d75aa485bedcc495009", "message": "Allow using ShadowRoute with request types without key\n\nSummary:\nThis diff does some refactoring in ShadowSettings (basically moves it to its\nown file), make it work for requests without key, and add unit tests to it.\n\nReviewed By: glamtechie\n\nDifferential Revision: D6154343\n\nfbshipit-source-id: 1a06edef24fc478b07afdc927096dcf854f7cc98"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/8aff8e2b9b4c3b6ed48e227dd8880833abd8a428", "message": "Remove poolName from TkoLog event\n\nSummary:\nThis patch fixes a race/ub in ProxyDestination.\nWe were updating poolName_ from config thread, while reading it from proxy thread. On top of that, we were using StringPiece in TkoLog, which could point to a destroyed string by time we actually tried to log.\nThis also saves around ~64 bytes of memory per connection (both openened and closed connections).\n\nThe poolName in ProxyDestination was just used for logging TKO events, and it was \"best effort\". ProxyDestination is shared among pools that point to the same host, so the poolName_ inside ProxyDestination would actually point to the name of last pool we saw when parsing configs.\n\nReviewed By: jmswen\n\nDifferential Revision: D5980071\n\nfbshipit-source-id: 97897a42baa68c82acf1f75c51516636b8419d1e"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/23ff3df323dc0452f52c34e1dcb8a67d583908f8", "message": "Use folly::init in mcpiper\n\nSummary:\nMcpiper opt was broken because we were instantiation EventBase before glog.\nThis fixes it.\n\nReviewed By: glamtechie\n\nDifferential Revision: D6084552\n\nfbshipit-source-id: 603089379754e40bd1d117fe034a198c8af28bb6"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/95b77f48d68bdb05133bc4b2e343f9997aa9627b", "message": "Fix race destroying VirtualEventBase and EventBase\n\nSummary:\nThis diff fixes a race that was happening when an exception was thrown when the server is starting to accept connections (e.g. port already in use).\n\nProblem Description:\nMcrouter uses VirtualEventBase, and the actual EventBase is owned by AsyncMcServer.\nWhen we spin-uw mcrotuer, it schedules a few things to run in the VirtualEventBase, which issues a new keep-alive token.\nBut when an exception is thrown by server when we are starting to accept connections, we haven't yet spawned EventBase threads.\nSo, when the exception propagates up, we try to destroy the VirtualEventBases from the main thread, and VirutalEventBase destructor blocks until all keep-alive tokens have been released.\nAs there's no thread looping the EventBase (to actually release the keep-alive tokens), mcrouter gets stuck.\n\nSolution:\nDestroy the EventBases from it's thread.\n\nReviewed By: andriigrynenko\n\nDifferential Revision: D6039264\n\nfbshipit-source-id: 28da042dd09ec83ca017546b3d0e91d2acd11814"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/d17e56896c78ec4f416afe55f4a26259934484c5", "message": "Fix race in proxy destination during config\n\nSummary: updateShortestTimeout() is called from config thread, but client_ can be destroyed from proxy thread.\n\nReviewed By: jmswen\n\nDifferential Revision: D5979538\n\nfbshipit-source-id: b2ce6cc5fb330860018d4b2a96fe17fb9cf35f8e"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/f1f5f61d6dd6eacecafadb52f40e5cab8b792357", "message": "Set message when miss_on_get_error is applied\n\nSummary:\nWhen miss_on_get_error option is applied to a reply, it's usually very hard to\nunderstand what's going on. This will ensure we set the message field of the\nreply so that it's easy to debug in the future.\n\nReviewed By: jmswen\n\nDifferential Revision: D6035279\n\nfbshipit-source-id: ca5bc63ee521b2183514ffda69218aa2adf42b30"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/9da3460809510e9153590f8129150949a49e2588", "message": "Refactor McPiperVisitor\n\nSummary:\nFix and refactor mcpiper visitor.\nNow, McPiperVisitor follows the following invariant: after each call to visitField(), the visitor output will be valid (i.e. no trailling commas, no blank lines at the end, no partially serialized results, etc).\n\nReviewed By: glamtechie\n\nDifferential Revision: D5931196\n\nfbshipit-source-id: 8b3af0a31f6aa947e6140bf56c157494c5cd37c3"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/9a6dbe507388cd0e516014243336cfe255b26841", "message": "Allow routing to a custom route handle for unknown shards\n\nSummary: Add a new option (out_of_range) to allow having a custom route for when the shard is not found.\n\nReviewed By: glamtechie\n\nDifferential Revision: D6005480\n\nfbshipit-source-id: 29456a04e490bf643a82384c9fe67f82bb4272ad"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/f743bfa670fc7991c930cf91e950f7184afddd59", "message": "Refactor and add tests to ShardSelectionRoute\n\nSummary:\nRefactored ShardSelectionRoute a little (basically just fix the namespace),\nand added unit tests for it.\n\nReviewed By: glamtechie\n\nDifferential Revision: D5994018\n\nfbshipit-source-id: 8280144642106bce69134ad8deb5bb0f1f870568"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/2f7118e276fb38821d67b501f3d50b8fe5447d7f", "message": "Log replies created by ErrorRoute\n\nSummary: Replies logged by ErrorRoute can be useful for debugging and understanding what happened during the lifetime of a request.\n\nReviewed By: brianwatling\n\nDifferential Revision: D6001153\n\nfbshipit-source-id: 822ba589809019c5613d61f577f12f6be44d8143"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/8c34c0386219cd169a5acd2902fc6072683cc845", "message": "Do not copy pool name to DestinationRoute\n\nSummary:\nDestinationRoute is destroyed when ProxyConfig is destroyed.\nWe can use that premise to avoid copying the poolName to every DestinationRoute\nwe create. Instead, we can have a StringPiece to the poolName that is stored\nin ProxyConfig itself.\nThis will save around ~52 bytes per connection (and speed up our config time).\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D5883935\n\nfbshipit-source-id: 1dda84336de18ba3ef6f3206a56d7f11722cf352"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/7a1614ca164fece49d02d4ba7227fd9ee5001851", "message": "Log reply message\n\nSummary:\nWith the new use cases of carbon, \"message\" became an important field in reply\nstructs. It's mainly used to place error messages, which are in general a good\ninformation for debugging. Logging it with the reply will improve our hability\nto debug production issues.\n\nDifferential Revision: D5994766\n\nfbshipit-source-id: 7fd7425aec13c2270a535f60de676d19a6ceb6cd"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/a22e5e260aa02375a5dca9fc9d2b2fab633f6148", "message": "Fix oss build\n\nSummary: Add rendezvous hash related files to Makefile.am\n\nReviewed By: jmswen\n\nDifferential Revision: D5910245\n\nfbshipit-source-id: 16ead907d39f1ae0c78b6433b6b93cf63c103023"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/4ba75043d7f929f79e2f51c98a1071edf0c5bb51", "message": "Rename msg.c -> msg.cpp\n\nSummary:\nThis is necessary to start using underlying types for C-style (unscoped) enums,\nwhich I'll be doing to save another 8 bytes per unopened connection.\n\nReviewed By: brianwatling\n\nDifferential Revision: D5894885\n\nfbshipit-source-id: dfed5249aefb6c50dc5ae79c9887b440f1f0e079"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/5a6e2a524964c3fc44ccbc14393db6b9d6a3e531", "message": "Strengthen usage of LeaseTokenMap in FailoverRoute\n\nSummary:\nThe current way that LeaseTokenMap is being used in FailoverRoute, allows for an\nout-of-range bug to be triggered if all of the following happens:\n1) There are multiple bad hosts\n2) We failover LeaseGet deeply (likely to the last possible destinations).\n3) We reconfigure and in the new config we have less failover destinations.\n3) A lease-set comes (with the new config) for the lease token issued in (2).\n\nThis patch prevents this from happening by not using LeaseTokenMap if the number\nof failover destinations changed.\n\nAn alternative approach could be to attach a lease-token to a config version.\nAs most reconfigs don't change the number of failover destinations, this would\ncause more LeaseSet failures than necessary.\n\nReviewed By: jmswen\n\nDifferential Revision: D5906407\n\nfbshipit-source-id: 2de2fa0e26b82f3dc021e4a20661abd4e2158893"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/38d16e27294f8970df9d7b7dc779f7f010039200", "message": "Reduce memory usage of AccessPoint\n\nSummary: This patch saves 8 bytes per unopened connection.\n\nReviewed By: brianwatling\n\nDifferential Revision: D5896230\n\nfbshipit-source-id: 07fdb4298fd633b711d6674490c67b45fb596568"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/ab5fcc1f42e775131ef7ef090f04ab423390d4dd", "message": "Revert D5802302\n\nSummary: Backed out changeset a4a7559843e5\n\nDifferential Revision: D5896548\n\nfbshipit-source-id: fac771249a86649c43752c9d45f2dbc15a60b2a0"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/7dde47cfd00485dec0b54e89cc7f52966185090f", "message": "Reduce memory usage per connection\n\nSummary:\nStart using StringPiece to store routerName in both ProxyDestination and in\nAsyncMcClient options.\nThis saves 16 bytes per unopened connection and 32 bytes per opened connection.\n\nReviewed By: brianwatling\n\nDifferential Revision: D5869237\n\nfbshipit-source-id: abc168c3ff65d2ddc435d0e77110829428a4a1df"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/aae605d27ff407e6ba919ffd8181f92cad25be68", "message": "Reduce memory usage in AccessPoint\n\nSummary:\nStop saving hostname in AccessPoint, it was never used.\nThis saves in practice around 62 bytes (32 bytes for std::string + 30 bytes for\nthe actual typical stirng we were using) of memory per connection.\n\nReviewed By: brianwatling\n\nDifferential Revision: D5869448\n\nfbshipit-source-id: e696611d72e9e766f6c011e48fb106477d5afe1e"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/bdf20f110d5bb32ca5fbd509b8417a1a0af1dd71", "message": "Kill facebook specific route handle provider for memcache\n\nSummary: Stop using facebook's speficic route handle provider for memcache router.\n\nDifferential Revision: D5791697\n\nfbshipit-source-id: 993664291180ecf872b8be455b0b36bda0d9a5bd"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/8a9835c5da055e08563217fc327e0d93d70614c7", "message": "Fix race in TkoTrackerMap\n\nSummary:\nFixes a subtle race in TkoTracker and TkoTrackerMap.\n\nThe following would trigger the problem:\n  1) TkoTrackerMap::getSuspectServers() is called. We acquire a lock and start\n     iterating over all TkoTracker.\n  2) During iteration over the map, we successfully lock the weak_ptr to\n     TkoTracker (thus getting a valid shared_ptr).\n  3) In another thread, we destroy every other shared_ptr to that TkoTracker,\n     meaning that now the shared_ptr acquired in step (2) is the last one.\n  4) When the shared_ptr acquired in step (2) goes out of scope, we call the\n     destructor of TkoTracker.\n  5) The TkoTracker destructor calls TkoTrackerMap::removeTracker(), to remove\n     itself from TkoTrackerMap.\n  6) TkoTrackerMap::removeTracker() tries to acquired the same lock acquired\n     in step 1 (which is UB).\n\nThe problem described above was triggering an undefined behavior, and it caused\na deadlock a production.\n\nWhen considering solutions for this problem, we realized that, if we just fixed\nthe lock problem, we would cause another issue: modifying the map while\niterating over it.\n\nWe then opted for a simple solution: add a vector to delay the destruction\nof TkoTracker until after the lock is released.\n\nReviewed By: jmswen\n\nDifferential Revision: D5779966\n\nfbshipit-source-id: 1538980cfea9950ccb43f9b269b758eeeb6faa67"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/b495bd0c065e3b52ab0985c3a826292fc8fda2cd", "message": "Add support for update requests with no value fields\n\nReviewed By: jmswen\n\nDifferential Revision: D5752415\n\nfbshipit-source-id: c0e95926c243e55e592806589e4b35012b65cff3"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/e06d55dce47e8ea40abfa252d2babaae2cf5fc73", "message": "Add support for @fail() with other arg types\n\nSummary: Allow using fail() macro with anything (not just string).\n\nReviewed By: jmswen\n\nDifferential Revision: D5685688\n\nfbshipit-source-id: 562b65b2b5b474b4e2fa0ab4dec8c5c76d13fd02"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/bead88ee5deecde24153e58871883527a9cc8038", "message": "Use ErrorRoute when an smc tier is empty\n\nSummary:\nReturn error on requests when a petra smc tier is empty.\nWe probably want to alert if error rate is high though, we don't want to keep\nin that state for a long time.\n\nReviewed By: glamtechie\n\nDifferential Revision: D5637463\n\nfbshipit-source-id: faeb6bb428819baec1335ed79457c1a62b6fae93"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/ef37dbcf58052ed6fa8de5701ee6371ea91e991c", "message": "Add option to enable/disable server load\n\nSummary:\nAdd options to seperately enable/disable server load and congestion control.\nAlso, add an option to allow changing how often cpu/memory data is collected.\n\nDifferential Revision: D5551300\n\nfbshipit-source-id: 3c569396a1039f7ab6152a14d8869cefcf6ffa02"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/84ef1fab10f24b81093db73c67b670fe12f91e62", "message": "Send server load to clients\n\nSummary: Start sending server load to clients as an additional field.\n\nDifferential Revision: D5534949\n\nfbshipit-source-id: 3eb855f2d5032e180ec2f5c43b57e1184c4789f5"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/cf43c4e3175c3f56b0408d54f95d632995b2096d", "message": "Add option to enable server load on standalone mcrouter\n\nSummary: Add a new option to allow enabling exposing server load in standalone mcrouters.\n\nDifferential Revision: D5551835\n\nfbshipit-source-id: 6101b67d1007dccb95da186c0073f853f6e1d7b2"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/e8e6e7b9a49b6fb044dd34a36988b85fc97185a7", "message": "Add server load to mcpiper\n\nSummary: Display server load on mcpiper.\n\nDifferential Revision: D5522870\n\nfbshipit-source-id: 92d32bf1ff5cbfe458a6b1f902a0e2d0f2095e54"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/e7ada82f499e45ee1eac2effb1882f8fc035628b", "message": "Add server load additional field\n\nSummary:\nAdd a new additional field that will contain server load.\nThe value on the wire is actually percent load * 10000 (i.e. a value between\n0 and 1000000 that represents load on server).\n\nDifferential Revision: D5506115\n\nfbshipit-source-id: a9ff3ef1b940d9774b50789fb3779a1ca7269378"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/221fc08ac8490b8eea70551405370a1cf691bb71", "message": "Fix drop probability for routers other than memcache\n\nSummary:\nDrop probablity was wrong for all routers except Memcache.\nIt was ignoring MemoryController and it was doing redundant extra checks.\n\nDifferential Revision: D5535023\n\nfbshipit-source-id: 938ad76d486c088bff2fb8bec507594f94cc2e78"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/568b733a3bf0929f07b56ba2d16c0deb072c2b55", "message": "Optimize PetraClient\n\nReviewed By: davidgoode\n\nDifferential Revision: D5428615\n\nfbshipit-source-id: e4651586bcb4638286139aca0e4f419c5d5db475"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/b28f73c4b76bd23abadb16e809383712d07b8dd8", "message": "Add constructor to create internal connection from router pointer\n\nSummary:\nAdd a new constructor to allow instantiating InternalCarbonConnection from a\npointer to CarbonInstanceRouter.\n\nReviewed By: jmswen\n\nDifferential Revision: D5439766\n\nfbshipit-source-id: 4d0ff2dbbca3335a113f0b722d0335ffcc1f092c"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/35a3b62779b2f9c1ad6771b772cdd95cedb84916", "message": "Fix OSS build\n\nReviewed By: glamtechie\n\nDifferential Revision: D5467670\n\nfbshipit-source-id: 9dafed34f3f597f851ee762a28e596c7ea3a1437"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/dcb9b5759d8143e4fdb2d716bfda1aae2f07d8ed", "message": "Add helper function to create carbon router from flavor\n\nSummary:\nAdd a simple factory function to help services using carbon/mcrouter as a\nlibrary. This function allows users to easily/efficiently create (or retrieve)\na new mcrouter instance using a flavor + override options.\n\nDifferential Revision: D5419224\n\nfbshipit-source-id: df692a2b2673de9c0b5d35729dc82943230be5dc"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/e6e4d63c2964b3c80e998c01e7e944ba0b9ea0f0", "message": "Split makePoolRoute into smaller and reusable functions\n\nSummary: Split out useful pieces of makePoolRoute to make them available for other routers\n\nReviewed By: brianwatling\n\nDifferential Revision: D5252808\n\nfbshipit-source-id: 77f2288b3ee9e924756797a0d8567d8f4433e2c7"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/89b2f096ada5357481aef2fbb5dcbe8dff9622ef", "message": "Refactor hash route factory functions\n\nSummary: Less code, same behavior\n\nReviewed By: glamtechie\n\nDifferential Revision: D5244614\n\nfbshipit-source-id: 4da5a225e90a9b90347562b5ff4cfaea84121f15"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/4e3a8871f89208af3c9fb70a797a7f4a2bc670d3", "message": "Add generic SelectionRoute\n\nSummary:\nThis diff adds SelectionRoute and kills HashRoute.\nSelectionRoute is templated by Selector, which must implement `type()` and\n`select(request, size)`. For example:\n\nclass MySelector {\n public:\n  std::string type() const;\n\n  template <class Request>\n  size_t select(const Request& req, size_t size);\n};\n\n`type()` should return a string that briefly describes the selector.\n`select(request, size)` must return a number in [0, size) range.\n\nThis revision also adds HashSelector, that when used in SelectionRoute, produces\nthe same result and the old HashRoute.\n\nReviewed By: glamtechie\n\nDifferential Revision: D5223306\n\nfbshipit-source-id: e32f39ee9c244140e3ecee5dbe293f338095062f"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/f16d7f9f4c07b2075259e58c705b014ccfabb11a", "message": "Add isShadow to ProxyRequestContext::ClientCallback\n\nSummary:\nAdd a boolean to ProxyRequestContext's ClientCallback that tells whether a\ngiven destination is a shadow or not.\n\nDifferential Revision: D5316452\n\nfbshipit-source-id: e99ca6144416ba88b8753484d34a2331e2972370"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/bc85c138499fa7ef190473ec1f4007cb3ab5ed4c", "message": "Add petra router to standalone mcrouter\n\nSummary: Title\n\nReviewed By: jmswen\n\nDifferential Revision: D5267418\n\nfbshipit-source-id: 3a8c7015e124b4b225d8ff0c8db24478f82fa4e7"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/66dae68b12ec838b5ca85d2b15ccdac1ef4a9be9", "message": "Improve cmd line tool help/error messages\n\nSummary: Display an error message when a mandatory argument is missing.\n\nReviewed By: jmswen\n\nDifferential Revision: D5144217\n\nfbshipit-source-id: 62d2a1e3edd9fba3ef02d1708406dad5af5034da"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/a361991a9d28a7e872c0ad5a3a861734a3a96897", "message": "Allow JsonClient tests to run in parallel\n\nSummary:\nRemove hardcoded port from test and start using ListenSocket to allow multiple\ntest runs in parellel.\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D5142216\n\nfbshipit-source-id: c0e57d25b9e89c250e1d3511bbb05fe5e3c8ea5f"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/fb5891a3153c6e702097fe84ad5af2de067f3523", "message": "New tool that can send caret to memcached\n\nSummary:\nAdds a new generated tool that allows sending/receiving caret data to memcached\nservers that supports caret.\n\nReviewed By: alikhtarov\n\nDifferential Revision: D5096266\n\nfbshipit-source-id: 95348efc16f2c6a7ce21508e98056e8576429b27"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/fa8060f4a1d7371daf07caa6baae407077b8faf0", "message": "Add new option to generate cmd line client tool\n\nSummary:\nGenerate a tool for sending carbon requests through command line.\n\nDepends on D5009240\n\nReviewed By: glamtechie\n\nDifferential Revision: D5074019\n\nfbshipit-source-id: 975a67b18d348f76ff7f6118dc258eac98f05872"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/17bea13bcbbc99b651a7982ce4fc21bbcd7f37be", "message": "Fix to/from dynamic visitors for thrift structs\n\nSummary:\nHandle thrift structs as a special type of carbon structs in to/from dynamic\nvisitors.\n\nReviewed By: glamtechie\n\nDifferential Revision: D5087254\n\nfbshipit-source-id: 9e54d3f0607e70390d4e6e9a2b9215783d8878fc"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/1749196dfa3ce193a2f5b09ee15c5d439cbed6e6", "message": "Add helper class to send requests from command line\n\nSummary:\nWith this class, it's simple to generate a command line client tool for services\nusing carbon.\n\nReviewed By: glamtechie\n\nDifferential Revision: D5009240\n\nfbshipit-source-id: 1871dc0989d3358083cbff78678e039fe3334309"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/39c1950da13d9d7f79bbd13719d706c85dbe73a8", "message": "Fix trie documentation\n\nSummary:\nDocumention for Trie::findPrefix was saying that we return nullptr if no element\nis found, but we actually return Trie::end().\n\nReviewed By: glamtechie\n\nDifferential Revision: D5057451\n\nfbshipit-source-id: db3982fc99b4f8e7713a348344c6505414c972df"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/4c17eef86c96ba284ec5cc69d6ffe6e141316d4d", "message": "Validate construction of OperationSelectorRoute\n\nSummary:\nCheck that OperationSelectorRoute configuration has either \"default_policy\" or\n\"operation_policies\".\n\nReviewed By: glamtechie\n\nDifferential Revision: D5030163\n\nfbshipit-source-id: e1868f616fddc2dcc117043bf7d5f4e6ef75b434"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/f1bc75042ade644ff34676ea5b20d8cccc0922b5", "message": "Better error reporting from AsyncMcClient\n\nSummary:\nIf the IDL has \"message\" field in reply, set it with details of the error\nreturned by AsyncMcClient. Otherwise, return just the error code as before.\n\nDifferential Revision: D4996276\n\nfbshipit-source-id: f712f7a38e11d9e563cf27ba3e35980399f7995a"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/a579c0b2c1571a1a16445841025ecbff24513c83", "message": "Disable go away message by default\n\nSummary: Disabling go away message for every user of AsyncMcServer by default.\n\nReviewed By: glamtechie\n\nDifferential Revision: D5016134\n\nfbshipit-source-id: 10d1210d2c0051abf8a0b8365fa74c5aac291726"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/69056702926216095f88d4c163498edf5f98c7c6", "message": "Add a simple dynamic client for carbon\n\nSummary:\nAdded a virtual class that allows sending requets to a carbon server using a\nfolly::dynamic as input and ouput.\nThe idea is that we are going to generate a cmd line tool that uses this client\nto send requests and receive replies.\nWe can even add a parser that parses not just json to folly::dynamic, but also\n\"python constructions\".\n\nReviewed By: glamtechie\n\nDifferential Revision: D4944941\n\nfbshipit-source-id: 4904c6858fdc44fca265aba5260d245b1b0504d5"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/09bfd72baf7e50226c5d4c850db4124a0fba0122", "message": "Fix GoAway message handling\n\nSummary:\nWe were destroying the ProxyDestination::onDown lambda during it's execution,\nwhich was corrupting the ProxyDestination pointer inside of it.\nThe fix is to grab a copy of the pointer and use it instead.\n\nReviewed By: jmswen\n\nDifferential Revision: D5007008\n\nfbshipit-source-id: aa3c4a048bead8b5c5f1768e85a7702a15b60f8f"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/06397c6b36ea0bcff2500a17bc20f4e490482da3", "message": "Add support for maps to carbon json parser\n\nSummary:\nImprove FromDynamicVisitor by adding support for parsing json objects into\nmaps inside carbon structs.\n\nReviewed By: glamtechie\n\nDifferential Revision: D4999282\n\nfbshipit-source-id: b946252fa06485b69fc20014b0823a77c59d8c44"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/34bcd41b256024735e954e2c00ba9fba0ed16f5e", "message": "Set configFromDisk to false after successful configuration\n\nSummary:\nAs soon as we successfully config from disk, bump down the configFromDisk stat.\nThat allows monitoring the number of current mcrouters that are using stale\nconfigs.\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D4991122\n\nfbshipit-source-id: 6e19003b1f8c7211ce1effd7279abde4f35736bd"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/870842f125a337070a873b597d74306932d660a1", "message": "Add function that converts json to a carbon struct\n\nSummary:\nAdd a visitor and a convenience function (called convertFromFollyDynamic) to\nconvert a json to a carbon struct.\nThe function takes a folly::dynamic and a carbon struct and fills\nthe struct with the values found in the folly::dynamic.\nIt returns a list of errors found when populating the struct with the\nfolly::dynamic.\nThe convenience works with inline mixins as well as with nested mixins.\n\nReviewed By: glamtechie\n\nDifferential Revision: D4920246\n\nfbshipit-source-id: 7f22c69a8533fed7a4a8f9e1aa5393e8937eb930"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/969d5de775b057782cf17a37c8c7aa68bd4147ab", "message": "Escape binary data\n\nSummary: Escaping IOBufs before displaying then in console.\n\nReviewed By: alikhtarov\n\nDifferential Revision: D4956409\n\nfbshipit-source-id: 24b98d559f7f79892c960c51dba58315b10e7560"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/12dc31a6825f82df9fcd6bd0aafa922ea008ed02", "message": "Use gcc-5 in oss build\n\nSummary: Install and use gcc 5 on Ubuntu 14.\n\nReviewed By: jmswen\n\nDifferential Revision: D4953117\n\nfbshipit-source-id: 5514f694e797858a8ce650ae0c3c2bd3c351d88c"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/a1320d16d35abc9e5abc4897cbb914ad1c415933", "message": "Start using C++14 in mcrouter oss build\n\nSummary: Now that we are using g++ 4.9+, we can safely start using C++14.\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D4945047\n\nfbshipit-source-id: 7aac7631dda3b6a92d63165701060fe5175658c8"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/2196726f6e81aa8e3ac9ed97926ada97b729a7bb", "message": "Do not wait for input in oss build process\n\nReviewed By: jmswen\n\nDifferential Revision: D4951704\n\nfbshipit-source-id: 1eecc5b8224b90ec3b4874eea7a7fe0b9d7f189c"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/b7e2be4ddd1128763eed9e5a45940d7512caab6b", "message": "Kill ubuntu12 build files\n\nSummary: As communicated on issue #179, ubuntu 12 is not supported any more.\n\nReviewed By: glamtechie\n\nDifferential Revision: D4945013\n\nfbshipit-source-id: c23ecadd1777c2db2b04516793d93c92846bf2e1"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/68d36f69050271a985313854f790fc1c1783a600", "message": "Fix oss build\n\nSummary: Intall and use g++ 4.9 on ubuntu 14.04 to fix oss build.\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D4945000\n\nfbshipit-source-id: 34fd81f18384300092bf40d4faa6fe8407f79da6"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/0a093072f678120aecb306e9187563b45b1d9246", "message": "Improve visitor API for unions\n\nSummary:\nThis patch introduces a special method for visiting members of a union.\nvisitUnionMembers() is called for every single member of the union. The visitor\nclass itself is responsible for checking whether or not the given member of the\nunion can be accessed (i.e. the union might be set to another field).\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D4933170\n\nfbshipit-source-id: 47b66b6e2fe5b53de3052bcd913ee09b5ad9c353"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/201226de9b433add35ef5e5687044de6f444515f", "message": "Improve unions API\n\nSummary:\nThis patch allows users to set values to unions using accessor methods when the\nunion is empty.\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D4926552\n\nfbshipit-source-id: 31a7419d3bb7cada383e820ec352b0350ebe3766"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/e8e0de44489d60c424f0b279b00acec57c6bb1c0", "message": "Fix unions\n\nSummary:\nFix a couple of issues with unions:\n - Missing \"carbon::\" namespace prefix in FindByKey. It was preventing unions\n   from being used outside of carbon namespace.\n - Invalid deserialization for \"user types\".\n\nReviewed By: jmswen\n\nDifferential Revision: D4926438\n\nfbshipit-source-id: 9fb69f8d595dc3fa471f261fa6d83e965a9fd3f7"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/a7e7b32ba54770ce2d67dd742b55c2022474b7c1", "message": "Bump version to 36:0"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/4878354cf80ed5ec809043f00145b413968f2e06", "message": "Unregister event handlers when exiting\n\nSummary:\nThis drastically reduces the shutdown time when the number of desired messages\nis printed (e.g. when using \"mcpiper -n 10\" to display only 10 messages).\n\nReviewed By: glamtechie\n\nDifferential Revision: D4848404\n\nfbshipit-source-id: f475458d9337073a3044fa981d61968ebc511e7b"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/1eefa5bc91317ce8f30ddc1ab66e5343d06de577", "message": "Remove AsyncMcClient dependency on request key\n\nSummary: AsyncMcClient can now be used with requests that don't have key.\n\nReviewed By: jmswen\n\nDifferential Revision: D4725800\n\nfbshipit-source-id: 93d8dac57722360decc3d406b01eeae6fa2e9341"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/2d0b818f9c7d9e8a4667fd84536e58bd771776b5", "message": "Log failure to dump configs less frequently\n\nSummary: It's not necessary to log every single failure to dump last valid configs.\n\nReviewed By: jmswen\n\nDifferential Revision: D4711040\n\nfbshipit-source-id: 774f2659213dcdfe23ef927092397f2b1e71cc5e"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/3e441ccf638885ded536468405e690ba9f8a247a", "message": "Fix permissions to write config file/dir\n\nSummary:\nWe were not setting up the correct \"group\" and \"other/world\" permission for\nconfig directory and files.\nThat can cause problems when different users run mcrouter.\n\nReviewed By: jmswen\n\nDifferential Revision: D4710684\n\nfbshipit-source-id: be14c7e0e32126ec4bfa0121f02e2901bc984ce3"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/10862848963f9b504cef599d77ffa03b0d35d757", "message": "Update option description\n\nSummary:\nMake it clear to users how to disable the option that dumps last\nvalid config to disk.\n\nReviewed By: jmswen\n\nDifferential Revision: D4690773\n\nfbshipit-source-id: 3d4cf5863af8a9ae37fe991f723297e3bbfca5eb"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/a996b648f8fe7a093dd19d4e74ed0fa9a4e8c064", "message": "Allow compression of data of size 0\n\nSummary: Title\n\nReviewed By: glamtechie\n\nDifferential Revision: D4198999\n\nfbshipit-source-id: 878fbb791105d4a4c523c1ce8c0cf12ddc8766ec"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/b54128918c6635359690d71477366aa60f554050", "message": "Add stat for configs loaded from disk\n\nSummary: Add a stat that will count the number of times that we configured from disk\n\nReviewed By: jmswen\n\nDifferential Revision: D4678130\n\nfbshipit-source-id: 562067e5758bc67db6d3b664c7764aacb2591e81"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/609f46e57a9333494a9356c4e141aed632f8df77", "message": "Load config sources from backup if first configuration fails\n\nSummary:\nLoad configs from backup files if we fail the first configuration.\nBy default, we load backup config if it's at most 1 hour old.\n\nReviewed By: glamtechie\n\nDifferential Revision: D4194316\n\nfbshipit-source-id: f86c391312a514752389468391af77532c42c46e"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/d457937986d56a3f0500f2cf0f24f1a927b45a9b", "message": "Dump last valid config to disk\n\nSummary:\nSave last valid mcrouter config to disk.\nIn the next diff, I'll add support for loading that saved config in case\nmcrouter failed the first configuration.\n\nReviewed By: glamtechie\n\nDifferential Revision: D4154842\n\nfbshipit-source-id: c2db2ca633f523b235554a69ec70501ac709b248"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/ac38100be2c4f3587a71f99ab13a549c4884caf6", "message": "Make standalone mcrouter work with multiple routers\n\nSummary:\nStandalone mcrouter now works with custom router infos.\nTo change the router, it's necessary to specify `--carbon-router-name`\ncommand-line option.\nIt's also possible to achieve the same thing by setting `carbon_router_name`\nin standalone flavor file.\n\nReviewed By: glamtechie\n\nDifferential Revision: D4499139\n\nfbshipit-source-id: e3c4a6740c47fa368e974155bd04d84a8392c2f3"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/dae3c8b23f3ebd08a5429aa0b6516a8e5a99d401", "message": "MissFailoverRoute: support for \"best reply\" return\n\nSummary:\nThe problem: MissFailoverRoute[A, B, C] was always returning the response\nfrom the LAST destination (C) if we have all-misses. If all A, B and C\nare healthy, that's perfectly fine. But imagine that C is down. Then,\ndespite the fact that A and B returned misses, we respond with the error\nto the client (because the last C is down). So we have \"false negatives\",\nand the client will see errorous responses is higher than we expect with\nno practical reasons.\n\nThe solution: we'd better return the \"best\" response instead of the last\none. I.e. \"the best\" means \"miss is better than fail\". I.e. in the above\ncase when C is dead, the client will see a miss, not an error\n(because A and B are healthy).\n\nReviewed By: jmswen\n\nDifferential Revision: D4637155\n\nfbshipit-source-id: 9c584dea8743e73a90013213cf21ed2a5c7e7da1"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/40890baa35fbbe3156d21189a74212670da0c049", "message": "Handle custom carbon protocols in mcpiper\n\nSummary:\nDisplays a warning when a custom (non-memcache) carbon protocol is identified.\n\nDepends on D4582741\n\nReviewed By: jmswen\n\nDifferential Revision: D4583176\n\nfbshipit-source-id: 4bdc9d91d4a8ac3b00c943314f198d7b52d339bb"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/fdc5cb807a94a96a94de720b297cebc3836716e5", "message": "Enable mcpiper on HelloGoodbye server\n\nSummary:\nThis is mainly to show that mcpiper writer is working with custom carbon\nprotocols.\n\nReviewed By: jmswen\n\nDifferential Revision: D4582741\n\nfbshipit-source-id: 761c6fc305f2ce0dbb4c4d94055b87b8eb44b9cc"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/c04def67e7a412e76873a5f4b3c6f2cf9eee6c6f", "message": "Make mcpiper writer work for other carbon protocols\n\nSummary:\nMcpiper writer will now write the name of the carbon protocol to the debug fifo.\nThis will allow mcpiper client to use that information to instantiate the\ncorrect parser and show the carbon structure correctly.\n\nReviewed By: jmswen\n\nDifferential Revision: D4582470\n\nfbshipit-source-id: feb4b8e62af5ecb01f9631aba979cb66a45726f1"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/0e23e73945f407e835d8b53b7465d287e5f3eece", "message": "Generate name for request handlers\n\nSummary: Generate name of route handles\n\nReviewed By: jmswen\n\nDifferential Revision: D4582208\n\nfbshipit-source-id: 2a83ae383a8d9c0323b1f7585bad196ad5ee2764"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/5fca2d7071cb2274b0da845bbc24595c296ac823", "message": "Log router name to debug fifo\n\nSummary: Log the name of the router to debug fifos, if one is provided.\n\nReviewed By: jmswen\n\nDifferential Revision: D4582063\n\nfbshipit-source-id: aa3e305a07c9f4db493cbb4838c2e6b373c6e1a1"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/75717016", "body": "Hello @0xd3adsh3ll,\nAs @pavlo-fb said, these commands are very dangerous to be replicated via mcrouter. You should consider bypassing mcrouter for these specific statements and sending it straight to the memcached box you intend too.\nThat being said, if you really think you need/want to use these commands with mcrouter, let me know and I will re-prioritize and get this done for you sooner rather than later.\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/75717016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/75717241", "body": "Hello @jeffbyrnes,\nDo you still need help with it? Did you manage to setup runit?\nThanks\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/75717241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/75718173", "body": "Hello @trungpham,\nFirst of all, thank you for taking some time to help us improve mcrouter!\nThis is not something we currently have in our priority list. How soon do you need that support? We definitely can take a better look at it if it's something you need.\nThanks again.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/75718173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/75823867", "body": "Hello @jeffbyrnes,\nDid you try to run this generated command line (i.e. `/usr/local/bin/mcrouter --async-dir=/mnt/mcrouter/spool --route-prefix=/dc1/all/ --send-invalid-route-to-default --num-proxies=16 --stats-root=/mnt/mcrouter/stats --log-path=/mnt/mcrouter/log/mcrouter.log --background --managed-mode --port=11211 --config-file=/etc/mcrouter/mcrouter.json`)  yourself? What result do you get?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/75823867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/75876857", "body": "Hello @jeffbyrnes,\nGreat! One thing that I would suggest is the use of [flavor files](https://github.com/facebook/mcrouter/wiki/Flavors), so that you would be able to change your mcrouter configs without touching your script again! :)\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/75876857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76882468", "body": "Hello @0xd3adsh3ll,\nWe just pushed a new version of mcrouter that adds support to `flush_all` (commit 3cb8ca22adf8e7a8bdeac8d390d4e98a07f834ed). You just need to specify the `--enable-flush-cmd` command-line option.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76882468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/83921060", "body": "Hello @sebest,\nCurrently we don't have this support in mcrouter. Generally, you would want to try to fail-over using some ordering (e.g. lower latency pools first, or some other heuristic that might apply for your scenario).\nIf you want to share how is your setup (i.e. how you do sets, deletes, etc), we might be able help you further.\nThank you\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/83921060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/104740544", "body": "Hello @chandleralpha,\nMcrouter doesn't currently support UDP.\nIf you want more details on that, please take a look at [this post](https://www.facebook.com/groups/mcrouter/permalink/739810342804492/?qa_ref=qd) in [mcrouter facebook group](https://www.facebook.com/groups/mcrouter/).\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/104740544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/109376904", "body": "Hello @priya23,\nYes, sure! Thanks for opening an issue.\nCan you please share your config file?\nAlso, please share the output of the following commands: `get __mcrouter__.options` and `stats servers`. \nYou can send the commands to your mcrouter using netcat: `echo get <command> | nc <host> <port>`.\nThank you!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/109376904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/109404242", "body": "Thanks @gotascii!\nLet us know if you need anything else!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/109404242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/109406501", "body": "Hello @chandleralpha, \nI'm closing this issue, but feel free the re-open it (or file another one) if you still have questions.\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/109406501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/109412826", "body": "Hello @0xd3adsh3ll,\nSorry for the late reply.\n\nCan you please try to send a request to mcrouter both from your php application server (172.18.45.31) and from mcrouter box itself (172.18.45.69)?\nYou can use GNU netcat to do that:\n1) log to `172.18.45.31` and send: `time echo get testkey | nc 172.18.45.69 5000`\n2) log to `172.18.45.69` and send: `time echo get testkey | nc 0 5000`\nPlease, paste the outputs here.\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/109412826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/109705004", "body": "Hello @priya23,\n\nCan you confirm if your \"set\" commands are still taking long time after you observed the commands started working with netcat? If so, how long are them taking?\nI also noticed that two of your servers are showing an unusual high latency (130ms). Are them in a different region/datacenter?\n\nThanks,\nAndre\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/109705004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/109869976", "body": "Hi @0xd3adsh3ll,\nI'm sorry mcrouter didn't work for you guys.\nI hope you can revisit in the future, we're constantly fixing bugs and improving performance.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/109869976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/110540730", "body": "Hello @radford,\nThank you for putting together this patch! It's currently being reviewed internally and, if approved, you should see it here in a few (normally 1-2) weeks.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/110540730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/110540744", "body": "Hello @radford,\nThank you for putting together this patch! It's currently being reviewed internally and, if approved, you should see it here in a few (normally 1-2) weeks.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/110540744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/110843592", "body": "Hello @priya23,\n\nI'm not familiar with Dalli, but it looks like they use the memcached binary protocol by default.\nMcrouter does not currently support memcached binary protocol.\n\nThanks and let me know if you need anything else!\nAndre\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/110843592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/111231538", "body": "Hello @byxorna,\n\nThank you for opening this diff! \nWe are currently working on that and you should start seeing it in the next few releases.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/111231538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/115937669", "body": "Hello @byxorna,\nWe now have VERSION file. We will bump the version every time mcrouter is pushed.\nI'm closing this task, but feel free to reopen it if you need anything else. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/115937669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/117496726", "body": "Hello @didip,\nThere are some ways of warming up a clod cache box with mcrouter. The right choice will depend on your specific scenario (e.g. if your data changes often or is more static, etc). I will present you some ways of doing that and you can reply if you still have questions.\n- The most naive way is to use a AllSyncRoute for you `SET` operations. That way, whenever you do a `SET`, it will go to both replicas, so, given enough time, Replica1 will eventually get warm.\n- Another way is to use the `WarmUpRoute`. Take a look at this page for more information: https://github.com/facebook/mcrouter/wiki/Cold-cache-warm-up-setup. You can, for example, setup this route when Replica1 is back online and remove it once it's warmed up. (Remember that mcrouter can automatically detect new configs and reconfigure on-the-fly).\n- We are about to add another route handle called `SlowWarmUpRoute`. The idea is to simply not send `GET` requests to a box if it is cold (i.e. low hit rate). That way, mcrouter will failover automatically without even bother sending `GET` to the cold box (up to the point the box is warm again). That might be an option if used together with `MissFailoverRoute` for `GET` and `AllSyncRoute` for `SET`/`DELETE`.\n\nLet me know if you still have questions.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/117496726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/117812130", "body": "Hello @didip,\n\nYes, if you just care about the `SET` being successful in one memcached rather then all of them (which seems to be what you want), then `AllFastestRoute` is the right choice for you.\n\nYou can use this issue or open a new one, whatever works better for you. :)\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/117812130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/120131060", "body": "Hello @K-DEN,\nFirst of all, thanks for using mcrouter and putting together this patch!\n\nHave you tried using mcrouter's TKO logic? We implemented it because we were facing a similar problem. So, basically mcrouter can automatically mark a memcached as TKO when a request fails (e.g. timeout). The host will be unmarked as TKO when memcached is back alive. You can read more about it [here](https://github.com/facebook/mcrouter/wiki/Features#health-checkauto-failover).\n\nLet me know if TKO works for you or not so that we can proceed!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/120131060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/121335868", "body": "Hello @didip,\nMcrouter `stats` command, reports stats about mcrouter itself, not about memcached. So, our `ps_rss` stat, tells you how much memory mcrouter is consuming.\nI'm assuming you are talking about rss of memcached, am I right?\nThank you\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/121335868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/121347890", "body": "Hello @didip,\n\nMcrouter does not know about nor reports the total RAM available in the server.\n\nAbout these stats:\n- `ps_vsize` is Process' Virtual Memory Size.\n- `ps_rss` is Process' Resident Set Size.\n\nThis [thread](http://stackoverflow.com/questions/7880784/what-is-rss-and-vsz-in-linux-memory-management) gives a good overview of what is each one of these.\n\nYour ultimate goal is to know when it is time to add more servers to a memcached cluster?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/121347890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/125348669", "body": "Hello @didip,\nSorry about the long delay, for some reason I didn't see your reply before. :\\\n\nThere is a set of things that you will want to monitor to make that decision. Here is a couple of things that might help you get started:\n- **Hit rate** and **evictions**: An increase in evictions and a drop in hit rate is _usually_ a good indicator that it is time to expand the pool. Also, take a look the age of the items being evicted (i.e. if items are being evicted too soon).\n- **Server stats**: Keep and eye on server stats, including `cpu idle` and `transmitted bytes`. They also indicate it's time to expand the pool, specially if they are consistent across the pool. If just one server is overloaded, it might be another problem though (like hot keys).\n\nLet me know if that helps or if you need anything else. And again, sorry about the delay.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/125348669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/126144061", "body": "Hello @solidfoxrock,\nWe had some fixes in TKO itself (e.g. 0e1b975) and also some other bug-fixes that might have helped with your problem as well.\nI'll close this issue, but fell free to re-open if you see that problem again.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/126144061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "felixhandte": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/mcrouter/commits/6654eba55f310eb37f923460e017be674df7e578", "message": "Integrate Managed Compression\n\nSummary:\nInitial integration of Managed Compression into cache client.\n\nDepends on D6630314.\n\n(Note: this ignores all push blocking failures!)\n\nDifferential Revision: D6239431\n\nfbshipit-source-id: 246dee5a78b8f73eefe24b4390b1dcb3c13aa90b"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yfeldblum": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/mcrouter/commits/a732a6623a1a03bc637cac9abb25f4a887762232", "message": "Kill FOLLY_ALIGNED etc\n\nSummary:\n[Folly] Kill `FOLLY_ALIGNED` etc.\n\n`alignas` is standardized as of C++11. Let us just use that.\n\nReplace:\n* `FOLLY_ALIGNED` with `alignas`\n* `FOLLY_ALIGNED_MAX` with `alignas(folly::max_align_v)`\n* `FOLLY_ALIGN_TO_AVOID_FALSE_SHARING` with `alignas(folly::hardware_destructive_interference_size)`\n\nBecause where `alignas` may be placed is more restrictive than where attributes may be placed, we also need to move these directives in some cases on top of doing the replacement.\n\nReviewed By: Orvid\n\nDifferential Revision: D6555167\n\nfbshipit-source-id: 4b05b570bace3f8c0fe810b6dd58781dd45757f4"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/ec1db83d2cf65ec11bce1e67ab5e56500ed1cb6f", "message": "Move folly/Bits.h to folly/lang/\n\nSummary: [Folly] Move `folly/Bits.h` to `folly/lang/`.\n\nReviewed By: phoad, Orvid\n\nDifferential Revision: D6495547\n\nfbshipit-source-id: a93159321df8277f8a4b4f10a5e4e0fc58cb6022"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/65249fc54f28e1f869810e696166140c655dd092", "message": "Move folly/Baton.h to folly/synchronization/\n\nSummary: [Folly] Move `folly/Baton.h` to `folly/synchronization/`.\n\nReviewed By: phoad, Orvid\n\nDifferential Revision: D6490282\n\nfbshipit-source-id: 66e2d25ffe3275d576b97b81c1987709000f6649"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/d958e7edca42127b213fa30dbc86e6db987b8745", "message": "CodeMod: Replace includes of folly/Hash.h with folly/hash/Hash.h\n\nSummary: CodeMod: Replace includes of `folly/Hash.h` with `folly/hash/Hash.h`.\n\nReviewed By: luciang\n\nDifferential Revision: D6156195\n\nfbshipit-source-id: 0941b3c9cf1d17d7cc62595111e506c06ee51236"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/ce80b3027588176399af1f068de130360914aa26", "message": "CodeMod: Replace wangle/concurrency with folly/executors\n\nSummary:\nCodeMod: Replace `wangle/concurrency` with `folly/executors`.\n\nThe headers in `wangle/concurrency/` are now but shims to equivalent headers in `folly/executors/`.\n\nReviewed By: jsedgwick\n\nDifferential Revision: D6120852\n\nfbshipit-source-id: 358ceabea7ad79f84b803ed8e3aecb2a57fdd077"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/8aece19f588cba18b5ab6a9392dcc7edd7d814a1", "message": "CodeMod: Replace all uses of wangle::CPUThreadPoolExecutor with folly::CPUThreadPoolExecutor\n\nSummary:\nCodeMod: Replace all uses of `wangle::CPUThreadPoolExecutor` with `folly::CPUThreadPoolExecutor`.\n\nThe former is merely an alias to the latter.\n\nReviewed By: Orvid\n\nDifferential Revision: D6106232\n\nfbshipit-source-id: b91e9246339f987e6915dd415a7179631877ed06"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/9bcfb14ad36086edda17d6cc3ace18c0fbdee931", "message": "Revert D6050464: [Folly] Move folly/Hash.h to folly/hash/\n\nSummary:\nThis reverts commit 64eb65aac8e3e7cd0126e65ca3998bfe167e2d73\n\nbypass-lint\n\nDifferential Revision: D6050464\n\nfbshipit-source-id: 1ed63f30837dc11ae57b316f1f7cb233a210894a"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/f7ed37fa15496a0eaf66c7d41d6863c2260220cf", "message": "Move folly/Hash.h to folly/hash/\n\nSummary: [Folly] Move `folly/Hash.h` to `folly/hash/`.\n\nReviewed By: jsedgwick\n\nDifferential Revision: D6050464\n\nfbshipit-source-id: 64eb65aac8e3e7cd0126e65ca3998bfe167e2d73"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/007d088f26ee1059cf3ab797cd870c1f649ce280", "message": "CodeMod: Replace uses of wangle::NamedThreadFactory\n\nSummary: CodeMod: Replace uses of `wangle::NamedThreadFactory` with `folly::NamedThreadFactory`, to which the former is merely an alias.\n\nReviewed By: Orvid\n\nDifferential Revision: D6062557\n\nfbshipit-source-id: a5bc030eee24d40d14efc7095aec4fddf7efcb0b"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/e57da807671a0b99a13f1fcefefaff6a774ba66f", "message": "Treat gtest headers as system headers in oss build\n\nSummary: [Mcrouter] Treat `gtest` headers as system headers in oss build. Using `-isystem` rather than `-I`. To avoid any errors or warnings originating in gtest headers from failing otherwise-clean mcrouter oss builds.\n\nReviewed By: Orvid\n\nDifferential Revision: D5526060\n\nfbshipit-source-id: f66f7c00b220abcb557a6373c4d780788748a7e3"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/eb2f15a964df0f388846a711c8597d60d2c53256", "message": "Move the SpookyHash libraries into folly/hash\n\nSummary:\n[Folly] Move the SpookyHash libraries into `folly/hash`.\n\nAnd propagate the changes to `#include` lines, etc.\n\nReviewed By: Orvid\n\nDifferential Revision: D5477735\n\nfbshipit-source-id: 94fe95ece05b52bde1466ab5f9fb8b53a4c59bed"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/b6c914bbc3fed4548fad6fa4746257faf927ceba", "message": "Move the SpookyHash libraries into folly/hash\n\nSummary:\n[Folly] Move the SpookyHash libraries into `folly/hash`.\n\nAnd propagate the changes to `#include` lines, etc.\n\nReviewed By: ot, ericniebler, Orvid\n\nDifferential Revision: D5455584\n\nfbshipit-source-id: 616b04579eb6c822023b04840b075f3ac9fbb720"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/2033f2df0904a83ece58ae43d4d057c184c945da", "message": "CodeMod: Prefer ADD_FAILURE() over EXPECT_TRUE(false), et cetera\n\nSummary:\nCodeMod: Prefer `ADD_FAILURE()` over `EXPECT_TRUE(false)`, et cetera.\n\nThe tautologically-conditioned and tautologically-contradicted boolean expectations/assertions have better alternatives: unconditional passes and failures.\n\nReviewed By: Orvid\n\nDifferential Revision:\nD5432398\n\nTags: codemod, codemod-opensource\n\nfbshipit-source-id: d16b447e8696a6feaa94b41199f5052226ef6914"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/8b06aaafe440bdb7539207e116b38d055ec5bf17", "message": "Fix violations of sign-compare\n\nSummary: [Mcrouter] Fix violations of `sign-compare`.\n\nReviewed By: andrewjcg\n\nDifferential Revision: D5144519\n\nfbshipit-source-id: fe0f13fe0f965f98398d70fd4464cd3631f687ef"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/579cf1381fc6a36b5193c892bf5d33da90fdc3a4", "message": "Fix violations of unused-parameter\n\nSummary: [Mcrouter] Fix violations of `unused-parameter`.\n\nReviewed By: meyering\n\nDifferential Revision: D5059101\n\nfbshipit-source-id: 515bfbc0452888a25639ba21c0a14c033dac6a44"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/f41a6f251b2133b6b3fe8d546ff0921743de2a48", "message": "Fix violations of unused-parameter in carbon-generated code\n\nSummary: [Mcrouter] Fix violations of `unused-parameter` in carbon-generated code.\n\nReviewed By: jmswen\n\nDifferential Revision: D5077288\n\nfbshipit-source-id: cef556594a8168793ef69a5cd4fffd67999dabc3"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/fc8ef53603a7acb86859582a3e7fac177f9a46b6", "message": "Fix some extra-semi violations\n\nSummary: Fix some `extra-semi` violations.\n\nReviewed By: andreazevedo\n\nDifferential Revision: D5057962\n\nfbshipit-source-id: ff347f635bf89cc33b85140b52941996e2f7cc95"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/e8866592de97722f3d7970b3615ea6030afa8b29", "message": "Fix violations of mismatched-tags\n\nSummary: [Mcrouter] Fix violations of `mismatched-tags`.\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D5057770\n\nfbshipit-source-id: a4ffa375d986ee45a0b9b670ae5597152a93c1c2"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/6cb9ffaddb95d469c173f248a440e1f0921644b9", "message": "Fix violations of unreachable-code-break\n\nSummary: [Mcrouter] Fix violations of `unreachable-code-break`.\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D5055895\n\nfbshipit-source-id: d0c0b5f6b5ef5c33cb82e22c86f581f7234cee2b"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/88b06e271939493981515a4d77f0bc1b3511d237", "message": "Fix violations of unreachable-code-return\n\nSummary: [Mcrouter] Fix violations of `unreachable-code-return`.\n\nReviewed By: jmswen\n\nDifferential Revision: D5055814\n\nfbshipit-source-id: ce27b6636939001fc5b889f991d92d811b82d4e5"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/222bc0807f25e9d630620d51924514a41bdcb619", "message": "Some [[noreturn]] attributes\n\nSummary: [Mcrouter] Some `[[noreturn]]` attributes.\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D5055131\n\nfbshipit-source-id: c5a14a56aafe4fc8d694f625c38fe5faaa96573c"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/3b1d0dab5efb64354052e5a838fb28ce03f3a4b0", "message": "Dead Code: mcrouter/lib/McRequestList.h\n\nSummary: [Mcrouter] Dead Code: `mcrouter/lib/McRequestList.h`.\n\nReviewed By: jmswen\n\nDifferential Revision: D4977489\n\nfbshipit-source-id: 5009375f392aafc29dbe889977071afcaf75681e"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/f3c56b7a145d9ef154bc474364da650eef15a0fb", "message": "No longer use namespace google for gflags\n\nSummary:\n[Mcrouter] No longer use `namespace google` for `gflags`.\n\nThe new thing to use is `namespace gflags`.\n\nReviewed By: jmswen\n\nDifferential Revision: D4663706\n\nfbshipit-source-id: d352931a5b1ac43e0871e0e0f25d5ea100b43943"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "orishu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/mcrouter/commits/c0026b5affed70b995b708258418cb232d11960a", "message": "Added optional \"seed\" argument to @shuffle.\n\nSummary:\nChanges in \"shuffle\":\n1. Can no longer be used with non-array objects. There are no current use cases in configerator/raw_configs\n2. Optional \"seed\" argument. Non-negative integer to be used as random seed.\n\nReviewed By: andreazevedo\n\nDifferential Revision: D6526424\n\nfbshipit-source-id: 653910ac5aa1c618029fe8c73caf3cc7e5971230"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "glamtechie": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/mcrouter/commits/ec8336559ab148980d28712632098409c4ef8cca", "message": "Use LoadBalancerRoute with other routers\n\nReviewed By: andreazevedo\n\nDifferential Revision: D6536158\n\nfbshipit-source-id: 7c52fe243668e767a7415aec3cc95e99c381c7fe"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/c1c8eb8bfe8d7422bff5621a6bd178953efa4fcd", "message": "Remove warnings from ShardSelectionRouteFactory\n\nSummary: I dont think these warnings are useful/actionable.\n\nDifferential Revision: D6467893\n\nfbshipit-source-id: 16dfacabafe6aaddb11d999fde2261a8cb599cde"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/d78f599bd3887a87d5785422a25e3ac07b0de169", "message": "Fix map based shard destination selection in ShardSelectionRoute\n\nSummary: The bug caused the Galileo route test to fail and get disabled. Will re-enable it after this diff\n\nReviewed By: andreazevedo\n\nDifferential Revision: D6237669\n\nfbshipit-source-id: fe11c7f2e7ae6380d8762765766ebca63119d3a9"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/8ffde47451d5b24c65ab89fab41ce1b024658c32", "message": "Refactor ShardSelectionRouteFactory\n\nReviewed By: andreazevedo\n\nDifferential Revision: D6018387\n\nfbshipit-source-id: ea86c4400808149e7b1de39baa27384071f0806e"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/b50fecc38b6ac0074027d27e9c9e88683e3a68f0", "message": "Implement GalileoSelectionRoute\n\nReviewed By: andreazevedo\n\nDifferential Revision: D5858026\n\nfbshipit-source-id: fa6c339a267f419e315796a978f994f46e4b2b17"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/8b6e92db4051054a0fed818170cf4b98f484984c", "message": "Fix crash in ServerLoad on garbage data\n\nSummary: Fuzz test crashed on this assert on being given some garbage data\n\nReviewed By: andreazevedo\n\nDifferential Revision: D5990291\n\nfbshipit-source-id: eea1c9ef8ecc5160e8f9cb536c3245238168c64c"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/03ef7a9bb72296903b7155950fb44c5595bb5333", "message": "ShardSelectionRoute to route shard based requests\n\nReviewed By: andreazevedo\n\nDifferential Revision: D5800121\n\nfbshipit-source-id: 9a89a5c37a549994dee0b77f60ea2a5c0e073a70"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/1b47a0a77a8a6a76fa52a6f316b13e1648145b10", "message": "Use new platform independent clang-format\n\nSummary: andrewjcg pointed out that we use old version of clang-format (D4872459), which is starting to block builds on aarch64 (as the pinned version is only available for x86)\n\nReviewed By: andrewjcg\n\nDifferential Revision: D5733864\n\nfbshipit-source-id: 65ba987808ddd812d0973d7be88483279177c308"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/277e5be62529e9961c24ca70a172c153491521b8", "message": "Fix serialization of unknown types\n\nSummary:\nFor now, just serialize \"[Unserializable]\" for unknown types. Later we can\nadd proper support for serializing maps.\n\nReviewed By: shixiao\n\nDifferential Revision: D5558706\n\nfbshipit-source-id: 4fff945ebab095caaf8c20f6e28194c5671a7552"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/7149a98f0032922724aaa410f24832510048f954", "message": "Fixing test broken by landing from corrupted bookmark\n\nSummary: Corrupted bookmark magically removed line from code causing test to fail D5117255?vs=27349243&id=27388250&whitespace=ignore-all#toc\n\nReviewed By: jmswen, gkeramidas\n\nDifferential Revision: D5308806\n\nfbshipit-source-id: ab4cda99ab7d286907cbb8556fb51ab051847341"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/b73d81ef9eeab19470950b34556440853b0ed350", "message": "Making Optional compatible with containers, unions and nested Optionals\n\nSummary:\nDepends on D5109145\n\nStructs will always receive Optional types as basic types but containers, unions and Optionals would receive them as user types (struct on the wire)\n\nReviewed By: andreazevedo\n\nDifferential Revision: D5117255\n\nfbshipit-source-id: 697189d9b3a13421b071281f427ad83c62fcb737"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/75985046b3321c200b201d4199596e8ff8f520f6", "message": "Optimize booleans for folly::Optional\n\nSummary:\nThis ensures that we are compatible with Thrift on the wire.\nThis still does not allow Optional to be used in containers: follow-up diff coming up\nDepends on D5108338\n\nReviewed By: andreazevedo\n\nDifferential Revision: D5109145\n\nfbshipit-source-id: d6591a481dd2a19de0ab3a6d9b343966fc889bd3"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/2083f481865276fcc182ed08d3934ff777e157ed", "message": "Change read API in generated code from readRawInto to readField\n\nSummary: We will use this to specialize Optional booleans\n\nReviewed By: andreazevedo\n\nDifferential Revision: D5108338\n\nfbshipit-source-id: 424824c358ae51641d616656dbe3a4ace1eada14"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/06ff2836fcf27f5cf58e767d542d47a4b306e5d7", "message": "Tests for custom user type defined as a struct\n\nSummary: Serves as an example for user types\n\nReviewed By: andreazevedo\n\nDifferential Revision: D5066179\n\nfbshipit-source-id: 7315a53923ffbe5e559995beae079a3e311c3fba"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/4f9615c313fa8df275e1dc3fdfdcee13a77bdf76", "message": "Make complex types generic\n\nSummary: Complex types already have serialization traits defined and it doesnt make sense to treat them separately during code generation\n\nReviewed By: andreazevedo\n\nDifferential Revision: D4948840\n\nfbshipit-source-id: 4a6618734e96c9ccbfe1e807d86289e5e36dcef9"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/156861a0126aee2d445816be17ca266b30f3e7c0", "message": "String and IOBuf as usertypes\n\nReviewed By: andreazevedo\n\nDifferential Revision: D4940550\n\nfbshipit-source-id: d952d6b4c8d48b61ba2e9171f44d6695a820af77"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/c35326f607a9e364f6069d10e629b12ad48fd09c", "message": "Set as a container\n\nReviewed By: andreazevedo\n\nDifferential Revision: D4932487\n\nfbshipit-source-id: d53138de8736b8e36426035257f92c7083a58e78"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/26ed033d2aa2196e8a59352c259aad4cf89f3c8e", "message": "Support for maps\n\nReviewed By: jmswen\n\nDifferential Revision: D4895917\n\nfbshipit-source-id: dc90dcab6352c51d32b096050c4e1f2e0b6e6bcc"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/b788d1fb7b130a2b2915ecfcb9dcec97036ab027", "message": "Treat containers as user types: vector\n\nSummary: Title + support for nested vectors + tests\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D4797847\n\nfbshipit-source-id: 35bc398eb45533ffb0812d99315f47e154cd2f2b"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/e5b48c6654d302a62e6cb8c53adeaa4daefcde53", "message": "Pretty print mcpiper with carbon\n\nReviewed By: andreazevedo\n\nDifferential Revision: D4823748\n\nfbshipit-source-id: a62ba1ab91e605c5d58c29ce1b2859a94cd673ad"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/287e5a6bf30e56f76114343d575feaea6d5efc2a", "message": "Support for skipping maps and sets\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D4534365\n\nfbshipit-source-id: 718bad5cb5fc8df6d99424f0ee901d99f0d36e2b"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/aab5ee151bf0d53dcdf1c788f435e5265b00ce7b", "message": "Fix flaky memcache InternalConnection tests\n\nSummary: Destroy and recreate singleton where state persists causing the test to fail\n\nReviewed By: andreazevedo\n\nDifferential Revision: D4484521\n\nfbshipit-source-id: 5c8d30ad673319989cb09db962790735286d136f"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/664b8d5e3358193a47b5b1fbe2f027e87c072abf", "message": "Support for unions in carbon\n\nReviewed By: jmswen\n\nDifferential Revision: D3906364\n\nfbshipit-source-id: 9636d654540b41d5e585d140128ddf72e9bf7b9f"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/0b9b6653089829f85d663c682838ab07992f3d05", "message": "Making McPiper work with all other protocols\n\nSummary: Mcpiper (basic) now works with HelloGoodbye and TaoProtocol\n\nReviewed By: jmswen\n\nDifferential Revision: D4640624\n\nfbshipit-source-id: df234f485e75064c18cd6d2a2b6216b771dcc120"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/5b3298db37cd78dbbbdcee2b22860ba1238f892f", "message": "Generating request names from reply by building request-reply registry\n\nSummary: This will be useful for refactoring McPiper\n\nReviewed By: jmswen\n\nDifferential Revision: D4630464\n\nfbshipit-source-id: c26a0f0f8d5e38019353bb29f9e144732f3e3972"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/6c9e4fed12a8b5c1bdb1dac3a2a8cfd06794e406", "message": "Resetting drop probability that is out of range to 0\n\nSummary: If the client parser gets an out of range value for drop probability from the server, it sets the drop probability to 0.\n\nReviewed By: jmswen\n\nDifferential Revision: D4290155\n\nfbshipit-source-id: 000ec84dddb6cfaeed0beee4b8457101b920215b"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/9533cfbb96953524b28fcf3fab283a2bba499a0f", "message": "Generalize Parser to accept RequestList\n\nSummary: McPiper still works only with memcache. Subsequent diff(s) will handle other protocols\n\nReviewed By: andreazevedo\n\nDifferential Revision: D4625782\n\nfbshipit-source-id: 44442be0e6adb263b94da4365f90474f88e2daed"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/23fc7e8e9f1192fcd3c03ac91130623bdf784294", "message": "Make FailoverWithExptimeRoute generic\n\nReviewed By: andreazevedo\n\nDifferential Revision: D4616120\n\nfbshipit-source-id: b99ce19c0117b2b468a1c1d2266ce043f64237a2"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/aba964777bf7fc8adbf2669e84911433877916b8", "message": "Make ModifyExptimeRoute generic\n\nSummary: Title\n\nReviewed By: andreazevedo\n\nDifferential Revision: D4511704\n\nfbshipit-source-id: c2d75d5eefb9247423385ba19933d2e3d137313a"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/36321d05c42b63f48a742d4ad45d201b247cc578", "message": "Correctly applying fix to race condition in external connection\n\nSummary: This one got left out during rebase\n\nDifferential Revision: D4614227\n\nfbshipit-source-id: 14a0d570d67be45b640f727f344e7636180c4aab"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/60977c8813d9d0cde303c2e775ca94800bac9db9", "message": "Make AsynclogRoute work with any protocol using McDeleteRequest\n\nReviewed By: andreazevedo\n\nDifferential Revision: D4571311\n\nfbshipit-source-id: d20e731ed2971b358140d75fe49856890d5a860d"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ngoyal": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/mcrouter/commits/4bbe1080a202adab5b277425481542a3b483e938", "message": "reload certs on CA change\n\nSummary:\nThrift servers should reload SSL configuration if cert, key, or CA path change.  TLSCredProcessor had some deficiencies in that it tracked only a single file to trigger the callback.  This augments that class.\n\nAdditionally we remove the watchCertForChanges method on ThriftServer and set up watching when a config is set.\n\nReviewed By: mingtaoy\n\nDifferential Revision: D6501821\n\nfbshipit-source-id: fb4f723af644361b3a87354ca124cace94ad04dc"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/cf12473243e09aa99e696ac0cc77a94a9c099bb8", "message": "Add support for custom SSL verification\n\nSummary: Allow applications to install their own SSL handshake verification logic.\n\nReviewed By: jmswen\n\nDifferential Revision: D5957123\n\nfbshipit-source-id: b8ba53e745407f37c2a0b9e7035060aadbeedc28"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/6ea862828f439f23bf2f6033359616a19db38d27", "message": "Pass async-server as the session id context explicitly\n\nSummary: Explicitly set session id when setting up the session cache.\n\nReviewed By: knekritz\n\nDifferential Revision: D5805642\n\nfbshipit-source-id: b5a646b71b7bce2c5c243143773559a5f839d4eb"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/4fe2fed556e6588716bff8d0d42234d59593c170", "message": "Add global ticket cache for client contexts\n\nSummary: Global session cache w/ wangle components and service identity.\n\nReviewed By: jmswen\n\nDifferential Revision: D5738063\n\nfbshipit-source-id: 48bc2480bef213cf73b3c4b9cc9d7d6511dc7bf5"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/b7ab8202a09a3efca89018636a6176f70ac5c168", "message": "Use wangle::ServerSSLContext and bump session lifetime\n\nSummary: This diff bumps the session lifetime to 24 hours and also uses the wangle::ServerSSLContext which sets up an internal SSL session cache and manages the ticket key manager.  This removes the need for the ticket key manager map and the custom deleter.\n\nReviewed By: jmswen\n\nDifferential Revision: D5738108\n\nfbshipit-source-id: bd07e2687d8843370ca53ae2036678e24e745666"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/74650ca058dc2b9bd8e841363868202e82950be3", "message": "Split up context creation into explicit client and server methods\n\nSummary: Allow ThreadLocalSSLContextProvider to differentiate between server and client side contexts.\n\nReviewed By: jmswen\n\nDifferential Revision: D5766593\n\nfbshipit-source-id: 75139955c734c02195cd436577c041ba267e0f94"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jmswen": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/mcrouter/commits/977bbf170d6296a9b392f3998f403337521f9b7e", "message": "Integrate extstore into memcached\n\nReviewed By: brianwatling\n\nDifferential Revision: D6378357\n\nfbshipit-source-id: 2801bb5ae773059a83d46482e20d12cfbf975cc0"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/a702aea9348bdb92c43e2d4f668d4ad3f740c605", "message": "Add SSL-related stats\n\nSummary:\nAdd client-side SSL stats for current number of open SSL connections to remote\nservers, total number of opened SSL connections over mcrouter instance lifetime,\ntotal number of attempts to resume SSL sessions, and total number of resumption\nsuccesses.\n\nReviewed By: andreazevedo\n\nDifferential Revision: D6449459\n\nfbshipit-source-id: b54da02071b4827713337984e70c7e453fc07fb6"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/9c55dfff03495b3ee05aa1b342dc8399d03b3748", "message": "Add stat for current number of open SSL connections\n\nSummary:\nSeparating this stat out from D6449459 to make review easier, since there's now\nsome light refactoring of `ProxyDestination` involved.\n\nIn order to maintain current number of open SSL connections\n(`num_ssl_servers_up`), it is easier in terms of maintaining correctness of the\nstat to integrate with the existing state transition logic in `ProxyDestination`.\n\nReviewed By: andreazevedo\n\nDifferential Revision: D6457064\n\nfbshipit-source-id: 7e76a640a4fe7fa54b40b6c63b6648c01dcdba38"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/5eaa6c48c67d5410ee1b36cf93fcd9b806a4816d", "message": "Light cleanup of ProxyDestination\n\nSummary:\nA couple easy cleanup items in this diff for `ProxyDestination`:\n* Change `proxy` member of `ProxyDestination` from pointer to reference\n* Forward declare in `ProxyDestination.h` and/or move includes to `.cpp` where\n  possible.\n\nReviewed By: andreazevedo\n\nDifferential Revision: D6457065\n\nfbshipit-source-id: f01c0f07024c9f0628336b7a40ec7e15470802ce"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/1cb56514d422cd01b6c1dec579a0098a9ced1125", "message": "Mark a couple members of ProxyDestination as const\n\nSummary:\nTitle. In particular, makes it trivial to reason that `accessPoint_` pointer is\nnever modified after construction.\n\nReviewed By: andreazevedo\n\nDifferential Revision: D6453780\n\nfbshipit-source-id: 730433cd4b9bb17bfa1aabbc4c6d0a9e345c88a8"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/8d92550a2c9153d111f9bb8c0713aaf83e0afb0f", "message": "More integration tests for L1L2SizeSplitRouteHandle\n\nSummary:\nAdd integration tests for `L1L2SizeSplitRouteHandle` for lease operations.\n\nPlanning to add a couple more tests tomorrow morning.\n\nReviewed By: andreazevedo\n\nDifferential Revision: D6245348\n\nfbshipit-source-id: ad5c510ddac503e7152118d98f7f5054d4a4f168"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/5a0ddb92a9eff0b21868458632d3796974033cc5", "message": "Run integration tests against memcached\n\nSummary: Run mcrouter integration tests against production memcached.\n\nReviewed By: dormando\n\nDifferential Revision: D6243705\n\nfbshipit-source-id: 247f61e7c99acf3550d4986a750ad2394e7e55c1"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/6432c25ab33df1f7acbe4c8e67b9baa7574275aa", "message": "L1L2SizeSplit lease support\n\nSummary:\nAdd support for lease operations in `L1L2SizeSplitRoute`.  Here's the basic idea of how `L1L2SizeSplitRoute` works for `get`, `set`, `lease-get`, and `lease-set` operations.\n\n`get`\n* Read from L1.  Clients must opt into L1/L2 behavior by supplying the `MC_MSG_FLAG_SIZE_SPLIT` flag in the `McGetRequest`.  A server-side change will be required to check for this flag.  (This is in order to support old clients.)\n* Only special case is when L1 returns a sentinel value.  In this case, client sends a subsequent `get` request to L2.\n\n`set`\nTwo options are supported: `bothFullSet` and not `bothFullSet`.\n* With `bothFullSet`, client sends an `McSetRequest` to each of L1 and L2.  (No special augmentation of key, value, etc. for plain `set` requests.)\n* If `bothFullSet` is turned off, client sends the `McSetRequest` to L2.  If successful, a sentinel is set in L1.  The sentinel request has the ordinary key, empty value, and comes with the special `MC_MSG_FLAG_SIZE_SPLIT` flag.\n\n`lease-get`\nMain interesting case is when L1 gives a hit on a sentinel value (which has value `<rand>`).  In this case:\n* Send `get key|==|<rand>` to L2.  If it's a hit, return the hit to the client.\n* Otherwise, if L2 returned an error **or** if we're out of retries, return an error.\n* Otherwise, invalidate the key in L1 via gets/cas and retry the entire operation.\n* Side note: stale hits on L1 are converted to misses with token/hot misses.\n\n`lease-set`\n* If `bothFullSet` is enabled, send full `lease-set` of data but first adjusting key to `key|==|<rand>`.  If successfully stored in L1, do a plain set of the same data (with same adjusted key) to L2.\n* If `bothFullSet` is disabled, before the sentinel to L1 is committed, set `key|==|<rand>` and the full data to L2.  If set to L2 is successful, set the sentinel value in L1 (regular, unaugmented key + value `<rand>`).\n\nReviewed By: andreazevedo\n\nDifferential Revision: D6109236\n\nfbshipit-source-id: 741a672d09f21c44b9274fbf1a98fdf3a0d8cca5"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/b70076670dad827373fd798b28db64de2a2e875a", "message": "Improve shadowing of lease operations\n\nSummary:\nCurrently, shadowing of lease-get/lease-set is broken in the following way:\n* Send lease-get to primary and shadow.  Assume it's a miss on both, so both return valid lease tokens.\n* Because there was a miss to the primary, the client will send a subsequent lease-set using the primary lease token that was issued.\n* This lease-set will be propagated as-is to the shadow host, which is expecting a different token.  The lease-set may well fail; the original token also hangs around on the server side.  (The lease-set to the shadow may also be stale-stored, but that's another story.)\n\nThis diff fixes the above behavior by maintaining a map from primary token -> shadow token when a lease-get results in a miss to both primary and shadow.\n\nNote that in theory, a single primary destination could have many shadow destinations, i.e., a primary token may be associated to more than one shadow token.  This limitation is not addressed in this diff.\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D5984659\n\nfbshipit-source-id: 01e34c7c361aad90d968e69d97fddfe8cffec683"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/b88d6601a6ab59c7e98c86ead76062ec32b6169e", "message": "ObjectPool: add support for unique_ptr with custom deleter\n\nSummary:\nThis diff merely adds a new API to obtain a `unique_ptr` with custom deleter, rather than simply a raw pointer,\nfrom `ObjectPool`.\n\nReviewed By: brianwatling\n\nDifferential Revision: D6076527\n\nfbshipit-source-id: 15fb11d112aa085f301d235d78e64832e0dbab71"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/df46363a31335435b35119ded2d4c0133276f14e", "message": "Make new L1L2SizeSplit option naming match our convention\n\nSummary:\nChange `bothFullSet` JSONM option to `both_full_set` for consistency with other\noption names.\n\nReviewed By: dormando\n\nDifferential Revision: D5988400\n\nfbshipit-source-id: 6d39c4d35cd73a8f877740c8c34d3905e7174d66"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/381e3d1dd7e9b48a6ec0f76a3f142d5fa250ca05", "message": "Add an optional check for space and control characters in keys\n\nSummary:\nAdd an optional check for space and control characters in keys. This check\nonly applies to keys used in requests to memcached servers, since the memcache\nASCII protocol imposes this restriction.\n\nReviewed By: andreazevedo\n\nDifferential Revision: D5910216\n\nfbshipit-source-id: 6475529158e59f65f9fab397c00be448b8bb05f3"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/aa068480e7a5c8cca41e0d2901d70f9ba74e753f", "message": "Add client-server test for compression\n\nSummary:\nAdd a client-server test that ensures we have test coverage for logic involving\nboth serialization and compression.\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D5870711\n\nfbshipit-source-id: 301312ce1420211a368f87a8c3dbfb8249e84d8c"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/96eb6ce658c83553175ca3f747d54897f8e0793b", "message": "Revert D5762079\n\nSummary:\nD5762079 introduces a bug for compressed messages. During compression, the data to be compressed starts\none iovec ahead of where it should. See explanation in https://fburl.com/g5btqfrn for full details.\n\nReviewed By: andreazevedo\n\nDifferential Revision: D5870207\n\nfbshipit-source-id: 346f0f4c82fa35ebf43e256eb0a3e96c2e421eeb"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/1c348e8984f60adb84d1e71bcf11d5d7a594d090", "message": "Leak SSLTicketCache singleton\n\nSummary: Convert SSLTicketCache to a LeakySingleton.\n\nReviewed By: ngoyal\n\nDifferential Revision: D5818739\n\nfbshipit-source-id: 822d1e3c3f45e4315226512e4ea21ed2a59ed844"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/16645aa5b3268b0245cf7d7cb3f0537f0f844852", "message": "Fix loop logic in `MessageQueue::drainWhileNonEmpty()` and use weaker acquire/release memory order for state\n\nSummary:\nThis diff contains a small bug fix and an additional small performance improvement.\n\nBefore this diff, the `drainWhileNonEmpty()` loop logic did not properly reset the `expected` value for `state_`\nto `State::READING` at the beginning of each iteration.\n\nI also added acquire/release memory order to all stores/loads of `state_`.  This leads to one minor performance\nimprovement where an extra `mfence` instruction on x86 can be safely elided. (The store to `state_` in each loop\niteration of `drainWhileNonEmpty()` does not require sequentially consistency.)\n\nReviewed By: brianwatling\n\nDifferential Revision: D5783441\n\nfbshipit-source-id: fb2a3f2ac51cfbebf679160bac5259d2e2ee5f68"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/11c686afe594e287c2edf8513ad91828ffdd13a7", "message": "Log whether TLS ticket key seeds are loaded successfully\n\nSummary:\nTitle. Simply to make it a bit easier to see whether TLS ticket key seeds are loaded\nsuccessfully, whether the file exists, etc.\n\nReviewed By: brianwatling\n\nDifferential Revision: D5750887\n\nfbshipit-source-id: b8c3bb3a44c1d2a647fa5b0b05d0404104937a5c"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/5bfff2ebfd144aa0152e4aa06d70ab4c862446cf", "message": "Introducing generic PHP client\n\nReviewed By: andreazevedo\n\nDifferential Revision: D5354639\n\nfbshipit-source-id: f313a612c02053e0f91fa2d10ca54dbbdd77a673"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/f75201cb551a43baf106adbfe3914900640daa09", "message": "Add option to toggle whether some requests must go to main shard split\n\nDifferential Revision: D5426177\n\nfbshipit-source-id: b95541685829098f4989f8c50dd2217d0a504bc8"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/a4de828f7697e932a0681b41bcc53b91659487ae", "message": "Remove unused cycles/ functionality.\n\nSummary:\nUsage of the various functionality in `cycles/` was removed some time ago.  This diff removes the code.\n\nHappens to also resolve https://github.com/facebook/mcrouter/issues/200.\n\nReviewed By: andreazevedo\n\nDifferential Revision: D5416562\n\nfbshipit-source-id: 1a27fc28049b8d47adf1e719f4dffe393f65de47"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/bfb32537d0680a884a97f9b2fc53882f3c5928cc", "message": "Remove MockableClock and instead directly use `std::chrono::steady_clock`\n\nReviewed By: GeniusYe\n\nDifferential Revision: D5414472\n\nfbshipit-source-id: 78dc57d49e7fe193b0f6e8665e871b7e5bf98638"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/85a7cd1865e4e7ddba2ee19226ba3805456df038", "message": "Inline call to isConnected() and go back to using folly::SharedMutex in FifoManager\n\nSummary: Title.\n\nReviewed By: brianwatling\n\nDifferential Revision: D5410841\n\nfbshipit-source-id: 4376f2721a737991ac5b1f463105d540373a5939"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/1396ae01c97c7f1af4e9f7f0721ef196013ee8f1", "message": "Reduce extra padding in generated structures\n\nSummary:\nWe can reduce memory usage/improve cache-friendliness of generated Carbon structures\nby reordering structure members. Fortunately, we have no complex constructors\n(where some members need to be initialized before others), so this is easily doable.\n\nThe current diff changes the compiler to do a best-effort reordering of members.\nThere are a couple spots where we simply assume an alignment of 8 bytes for members\n(when generating Thrift type members, container members, etc.)  This heuristic\nactually seems to work reasonably well, based on the resulting diff.\n\nReviewed By: meyering\n\nDifferential Revision: D5308941\n\nfbshipit-source-id: df60357213fec06efe55de0f9961efb1cd49a290"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/5a954932f2f3a6a57f8a2cca655ce323b1372f14", "message": "Update MigrateRoute integration test to match new expected behavior\n\nSummary:\nD5248846 changed the behavior of MigrateRoute to migrate gets/sets uniformly over\nthe migration period. Update an integration test to reflect this new behavior.\n\nReviewed By: andreazevedo\n\nDifferential Revision: D5366615\n\nfbshipit-source-id: 96261ed679e5d9e399cf434a6ec42ee490814f4b"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/dfc40c2ea964b68205cf4b30cb01f2400efeb78e", "message": "Disable compression in OSS\n\nSummary: Compression support is not needed in OSS since OSS users cannot use Caret.\n\nReviewed By: andreazevedo\n\nDifferential Revision: D5341688\n\nfbshipit-source-id: 1d8aea130d01e0fe784361b22980da9b27f4789f"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/fbe3199bd745204cfd2702f15abf13b18d1dbcd8", "message": "Check for symbol available on both Ubuntu 14.04 and 16.04 lz4 packages\n\nSummary:\nI had tried to check for `LZ4_freeStream`, but this symbol is not available in\nearlier versions of lz4.  The symbol `LZ4_decompress_safe` is available in\nlz4 packages on both 14.04 and 16.04.\n\nReviewed By: glamtechie\n\nDifferential Revision: D5309052\n\nfbshipit-source-id: 8795634e1fca8b26e2d9bdee2992c43ab082fffa"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/c445f39c508df5f85a1447dca8c41c5fa0e97d06", "message": "Ensure lz4 and zstd libraries are installed in OSS build\n\nSummary: Title.\n\nReviewed By: glamtechie\n\nDifferential Revision: D5303306\n\nfbshipit-source-id: deda1207e1deaad5e4a7ab6f5c96e638e8947cee"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/a75d067435a62b422366cbb786954b47b71ea491", "message": "Get rid of magic bytes in ProxyDestination and support wrapped Thrift structs in mcpiper\n\nReviewed By: glamtechie\n\nDifferential Revision: D5294799\n\nfbshipit-source-id: ee628f1ba84638d6ed17a3bc79e78333894c4c2c"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/937cc1673b51a71ee48602f9d4b307f1a5da4702", "message": "Use thread-local write buffers in MRU fashion\n\nSummary:\nFor potentially better cache locality, use write buffers in MRU fashion instead\nof LRU fashion.\n\nReviewed By: alikhtarov\n\nDifferential Revision: D5180815\n\nfbshipit-source-id: c2c10d2dede16f64ad6af849663d238bc357cfa7"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/8225668ea2a7c57db9f3d74fb8481a85711fc0a4", "message": "Add non-throwing alternative to decodeVarint\n\nSummary:\nIn mcrouter code, we would like a non-throwing alternative to `decodeVarint()`. There\nare real, expected scenarios where only part of a serialized varint fits into a packet,\nin which case mcrouter fails to decode the varint and throws.  In these scenarios,\nthrowing too many exceptions can lead to lock contention and degrade performance.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D5153823\n\nfbshipit-source-id: 138273af832903f0b04bee0bcacddd66b4274129"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/264ca6e81c26a031c31ed5c6f2c52bce8e804b8b", "message": "Don't throw when deserializing partial headers\n\nSummary: Title.\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D5150401\n\nfbshipit-source-id: 7c8dfdb2ca649e6bf2880114a3d1c18da126e855"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/8563d1d7d1d35fddfa77c2d0d5dfc474f019f7ed", "message": "Reduce memory required by ProxyRequestContext\n\nSummary: Title.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D5054596\n\nfbshipit-source-id: fd7bbe7d81b7e7802316023138c7a5848995ef13"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/875014469d741e2dbd1bf47d70f33d16aacd8b55", "message": "folly/Memory.h includes are obsolete. Also, replace usages of std::bind.\n\nSummary:\nWe used to require `folly/Memory.h` includes for `folly::make_unique` (and nothing else\nin `folly/Memory.h`).  Replace those includes with `<memory>` now that we use\n`std::make_unique`.\n\nAlso, `std::bind` is functionally obsolete; use lambdas instead.\n\nReviewed By: andreazevedo\n\nDifferential Revision: D5059517\n\nfbshipit-source-id: 228c1f51899ad3a7642de038dde0a9b0233c0854"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/85a9de1d79912a5294e95671fd19c633ee7dd860", "message": "Timeout simplification in LeaseTokenMap\n\nSummary:\nNo need to define a custom child `TimeoutHandler`, which IMO makes the code\nless readable and more error prone.\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D5061600\n\nfbshipit-source-id: c0bb8a90b92cf78a3a0f0eebe48b6cb2c8d4b1db"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/e2c11f6ee99d5617baf4a8d17b81358f0384dbbf", "message": "Simplify wait timeout in MessageQueue\n\nSummary: No need to define a small `TimeoutHandler` class and call `attachEventBase()`.\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D5061266\n\nfbshipit-source-id: 9144a094bf28fe4a834169f58b3154c8aa4161f5"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/2e62f1693ef2d5cb8ea44aee3c8c7a94dff3fc21", "message": "Extra safety checks in ShadowRoute\n\nSummary: Check a couple spots in ShadowRoute where `nullptr` could potentially be dereferenced.\n\nReviewed By: andreazevedo\n\nDifferential Revision: D5028256\n\nfbshipit-source-id: 5529226cbf09834b588648db79c12dac107ef63b"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/114b6809c60bf5c9d211cf22413d58ef20d6e748", "message": "Remove dead code\n\nSummary:\n`parseAsynclogRoute()` is no longer needed since `AsynclogRoute` is no longer a\nfirst-class (freely composable) route handle (see D4570793).\n\nReviewed By: glamtechie\n\nDifferential Revision: D5032202\n\nfbshipit-source-id: 5a020ad5582e2cea21c4d60f94887da5dc9195f0"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/4df5cfc790b72367d743bc7c526e70bf8de94a89", "message": "Check nullptr in makeRouteHandle* and other factory functions\n\nSummary:\nPutting a check in `makeRouteHandle()` and `makeRouteHandleWithInfo()` and wrapping\nfactory functions will catch most of the places where we may build a `nullptr`\nroute handle. (I can amend D5028256 to rely on this.)\n\nReviewed By: andreazevedo\n\nDifferential Revision: D5029375\n\nfbshipit-source-id: 1bf0cc48e4e80236710b9286c6c15094f0cfe685"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/f4639063e5e2ed68b3d7c8c80d9bc709c6d89d65", "message": "Discourage use of mc_umbrella_protocol in new code\n\nSummary:\nNew code should not use mc_umbrella_protocol, and should instead use Caret or\nASCII.\n\nAlso, change some tests to use Caret. I will change actual production clients\nto use mc_caret_protocol in subsequent diffs.\n\nReviewed By: glamtechie\n\nDifferential Revision: D4973831\n\nfbshipit-source-id: cbe913343b20afaf6ad65ab1c6071c505968dd06"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/a0ff4b807d23fd920067ba898e5077757807a56b", "message": "Allow custom postprocessing of event group samples\n\nSummary: Title.\n\nReviewed By: andreazevedo\n\nDifferential Revision: D4945385\n\nfbshipit-source-id: 71f3bd624ae253b9a2611eccbd9e0b012d8d79cc"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/024f510337a487d3a95ac113765c874c4b17cb32", "message": "Reset configuredFromDisk once mcrouter reconfigures from primary sources\n\nSummary: Title. To avoid stats reporting like this, which will mess up monitoring/alerting: https://fburl.com/3116iwyf\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D4772690\n\nfbshipit-source-id: f5ee91f9652fe04b15aa40b587e1b107bcc36ef3"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/520e86114b62145771edaffd525e45c8a2a34000", "message": "Call folly::init at beginning of main functions where we can, otherwise call registrationComplete\n\nSummary:\nI saw this crashing test in mcrouter-oss on a diff: P57225402. The advised behavior\nis to call `folly::init()` at the beginning of all `main()` functions where possible.\n(Sometimes it is not possible if a program does uses `optparse()` or `boost::options`;\nmcpiper is such an example.)  If `folly::init()` is not safe, call `registrationComplete()`.\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D4754595\n\nfbshipit-source-id: f0f690d61a4e77b1e0c02f1f7bdf6aed1770faca"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/d80dbfe589d093e2fd31a3593a583f4a7965472b", "message": "Don't fail test_validate_config if config dump root doesn't exist\n\nSummary: Title.  `test_validate_config` was failing with these logs: P57229898\n\nReviewed By: glamtechie\n\nDifferential Revision: D4761346\n\nfbshipit-source-id: 3b7d36fb7755de19d2af0072e8e19107c4eba704"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/57322d80b878edfcb94e9b86ddd4421d8e9df402", "message": "Fix double-free issue with Variant\n\nSummary:\nCopy and move constructors and assignment operators were broken, which I noticed\ndue to a new failing ASAN test: https://fburl.com/bbs0anbr\n\nI wanted to just wrap `carbon::Variant` around `boost::variant`, but ended up with\nthis compilation error:\n```\nthird-party-buck/gcc-4.9-glibc-2.20-fb/build/boost/e7e3e1f/include/boost/variant/detail/make_variant_list.hpp:40:27: error: too many template arguments for class template 'list'\n```\n\nSo, rolling my own proper copy/move stuff for now.\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D4752707\n\nfbshipit-source-id: 898f9d707fea810f23c96d1e724df3e2fc8af58a"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/6430a82c9f096ad2507b6caddf3b02c86204ded8", "message": "Get rid of some compiler warnings\n\nSummary: Title.\n\nReviewed By: alikhtarov\n\nDifferential Revision: D4714643\n\nfbshipit-source-id: df18e6f870d94332d9d189a3b3678b03e3896b82"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/01713b50c7a7147b598806da70665c7ecf838d2f", "message": "Support user includes and allow Thrift structs to be used as Carbon structs/requests/replies\n\nSummary: Title.\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D4493966\n\nfbshipit-source-id: c1a370559326ce8dfc5220e9fad19a1bfa1e29d2"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/af804bc419d53f4075daff0332db08742f5e6b93", "message": "Make Variant::emplace return reference to stored object\n\nSummary:\nTitle. See call sites in TCC that are cleaned up as a result. This will also make\ncodegen for Variants in Carbon a bit nicer.\n\nDifferential Revision: D4712148\n\nfbshipit-source-id: b1e0ad04c1a11df81a29ac49c26e017a1368b382"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/91f470c44c16347d5b6102a4d025b5623a1e2c80", "message": "Use readRawInto for mixins to make code more uniform\n\nSummary: Title. Just to make stacked diff slightly easier to review.\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D4708722\n\nfbshipit-source-id: 9f9a5078173573a064a7b96dc51574c882145deb"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/1d62d8f8230aed040fa454203157a9135c53a6e0", "message": "Correctly handle keys with commas in service commands\n\nSummary: Title. This was an open-source bug report I got when I was oncall.\n\nReviewed By: andreazevedo\n\nDifferential Revision: D4704240\n\nfbshipit-source-id: 1ef811794b60714b9c23cd007e946bc1b4aaf662"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/8f531e85480c384d51f70e67483d47c59d6a31da", "message": "Make BigValueRoute work better with leases\n\nSummary:\nmcrouter may currently misbehave when leases are used with big values. In particular,\na lease-get may result in mc_res_notfound and an invalid lease token. This happens\nwhen there is a hit on the metadata piece of a big value, but one of the subpieces\nis missing or replies with an error.\n\nWe can improve how leases interact with big values by invalidating the metadata\non a miss (using gets/cas), and then issuing a follow-up lease-get request.\n\nReviewed By: andreazevedo\n\nDifferential Revision: D4217657\n\nfbshipit-source-id: 094789eaa492efe31849efea661f7904f4a1d455"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/c70577411644ea69ef3624a3722e6312e6900c83", "message": "std::make_unique -> folly::make_unique\n\nSummary: Title.\n\nReviewed By: andreazevedo\n\nDifferential Revision: D4674011\n\nfbshipit-source-id: c57b4d841fd89f11101c4432c6d5c75524dc055d"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/292ffafcb155d35096a2d65b8b0d16f842104d7a", "message": "Fix Scuba logging\n\nSummary: Title.\n\nReviewed By: andreazevedo\n\nDifferential Revision: D4652172\n\nfbshipit-source-id: a25f5af1c6b315e3f804e5215dbc7001d04e8249"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/91a09126131d2928b7facb222e0818464d55944e", "message": "Add hooks to allow always sending some requests to main shard split\n\nSummary: Title.\n\nDifferential Revision: D4621195\n\nfbshipit-source-id: 94543962764ee1a8e1bca7f9abae758c38654102"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/5c6fef1b571ca06ab796a1e50380196f1117f6a8", "message": "Allow AsyncMcServerWorker to accept custom AsyncTransportWrapper\n\nSummary: Title.\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D4570138\n\nfbshipit-source-id: 7eb703e8cd99f8fd5d3d94763e8fa59b62955de3"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/c736aca340c1402fbb707dcd589cf44703ae4d61", "message": "Add support for shadowing specific keys\n\nSummary: Title.\n\nReviewed By: alikhtarov\n\nDifferential Revision: D4583464\n\nfbshipit-source-id: 59170e8c54552d0ff3e25532908a6151c53b307c"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/47373358d1a618a13ae369a7b679ccdc8dab84fb", "message": "Make `get __mcrouter__.*` commands work with other RouterInfos\n\nSummary: Title.\n\nReviewed By: andreazevedo\n\nDifferential Revision: D4573179\n\nfbshipit-source-id: 0c57d97add59bd36cce10eb6890c9ae3287bec6f"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Orvid": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/mcrouter/commits/e5247fcab8b73e16a8633f1d9ad1c687cd5649f4", "message": "Fix OSS build\n\nSummary: `checkLogic` was defined in `lib/fbi/cpp/util.h` but wasn't ending up being included in the OSS build.\n\nReviewed By: jmswen\n\nDifferential Revision: D6479015\n\nfbshipit-source-id: b268145516cd20710ef308d10cb813a2ba65b3b4"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/4d6e8d24d05a2ba1811643f178758d49d8581f3d", "message": "Switch various calls to folly::setThreadName to set the current thread's name\n\nSummary:\nThis is in preparation for killing the pthread_t overload of folly::setThreadName.\nThis is the part that I didn't break everything with.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D5022609\n\nfbshipit-source-id: 1b7319d67f04c0e65ebbd9b91570a01984e520c1"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/8b94e83d00a238fc4018ffb609e715ab61efc186", "message": "Codemod folly::make_unique to std::make_unique\n\nSummary:\nFolly is dropping support for GCC 4.8 now that the branch for last HHVM release that needs to support it has been cut.\nThis codemod's away all the trivially identifiable uses of `folly::make_unique` in fbcode outside of folly.\nA future diff will kill it entirely.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D5022124\n\nfbshipit-source-id: 9fbf15caa5473266201a1a87d0e6bae7b871769a"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/409112b6bed6d4cf3b2ff89d56d9d5238eb0eec6", "message": "Revert D5012627: [FBCode] Switch various calls to folly::setThreadName to set the current thread's name\n\nSummary: This reverts commit a4e6e2c2cb5bd02b1ebea85c305eac59355a7d42\n\nDifferential Revision: D5012627\n\nfbshipit-source-id: ff4b8ff94d5f5e76f0777b96d03975d3f7834a17"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/b003b769f2f8cbcbc6b23cd7ea81dce65bf410e5", "message": "Switch various calls to folly::setThreadName to set the current thread's name\n\nSummary: This is in preparation for killing the pthread_t overload of folly::setThreadName.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D5012627\n\nfbshipit-source-id: a4e6e2c2cb5bd02b1ebea85c305eac59355a7d42"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jsedgwick": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/mcrouter/commits/13e87a56127cd5beb91f1d70bbab82595341ada3", "message": "move Iterator, Enumerate, EvictingCacheMap, Foreach, Merge, and\n\nSummary: this is all non-hphp includes that are going in container/\n\nReviewed By: mzlee, yfeldblum\n\nDifferential Revision: D6121745\n\nfbshipit-source-id: b024bde8835fc7f332686793d75eb8e71591c912"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/90bf3a5d71cfcf806784d3cadf19422005c41dd9", "message": "move MemoryMapping, Shell, ThreadId, ThreadName, and VersionCheck to system/\n\nSummary:\nEverything that's going in system/ besides CpuId and Subprocess,\nwhich are included in hphp\n\nReviewed By: mzlee\n\nDifferential Revision: D6102263\n\nfbshipit-source-id: 564ef584c341a4ac79db14a9d58fe23ce51e78b3"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/409ff70719c1e4b057203c9230fa23c7ee446c93", "message": "move CallOnce to synchronization/\n\nSummary: as above\n\nReviewed By: knekritz\n\nDifferential Revision: D6088687\n\nfbshipit-source-id: 0efbb7f5fa33b5f553c0c2019658370fc6e8613f"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "spalamarchuk": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/mcrouter/commits/8ef75c9a6fb86b92c1d214e23c2c6a4b0925ce13", "message": "Smarter notifications, batching & scheduling, try 2\n\nSummary:\nOver the week I was thinking how to avoid double-scheduling `WriterLoop` (i.e. end of next loop). After jmswen fix to the messagequeue I realized that these things are related and we can use knowledge of them to improve each other, i.e. we ever need to set `State::EMPTY` if only we're going to block, similarly we don't need to flush every 2nd loop, but instead when we know that there's nothing more to do.\n\nTry 1 caused prod issues due to a double queue drain, this diff fixes that. A couple points about the original issue:\nThe nature of a race is that mcrouter may attempt to drain the request queue twice (first time in runBeforeLoop callback, second in the notification event handler). Each of them will check if we need to flush something and are we going to perform blocking epoll_wait call, if that is true, we will schedule a flush callback. The issue arises when both decide to schedule it (they use the same callback object) and may override the flush list. Now the interesting question is when this going to happen.\n\n1) For the event handler to fire, the request MUST arrive BEFORE we start draining in the runBeforeLoop callback (otherwise due to the flush callback, we would prevent the event from firing as an optimization).\n2) For the event handler to schedule the flush callback, we must get some connection added into a flush list AND there should be no new requests (otherwise as an optimization, they would prevent us from scheduling the callback for at least one event loop).\n3) The connection gets added to the flush list in three cases: request is sent, `connectSuccess` callback, goAway received.\n4) Since we need this to happen between the first drain and the second drain, it needs to happen in libevent event, thus it cannot be a request sending path, because it's always happening on fibers and thus from a regular EventBase callback, goAway is not enabled, which leaves us with only `connectSuccess`.\n\nUltimately the problem is observed when we get a race between `connectSuccess` (rare event due to connections being closed very rarely) and queue event becoming active + other conditions met.\n\nReviewed By: jmswen\n\nDifferential Revision: D6001175\n\nfbshipit-source-id: c99039b3ecf88e3611465f16f455d8236bea6eb1"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/7b4e62fd21f254de5022796fcdcdbff47cab8799", "message": "CarbonQueueAppender: avoid using separate iovec for the header when possible, try 2\n\nSummary: Our headers are usually <= 12 bytes, just move the data to reduce the number of iovecs we pass to ::sendmsg\n\nReviewed By: andreazevedo\n\nDifferential Revision: D5950780\n\nfbshipit-source-id: fbe39cf4ee22e199f70fe4976c5748b032218fe3"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/bc69b1b8d5f2e90ea99af7e6665421556671974e", "message": "Remove unnecessary runtime check\n\nSummary:\nIt's nice to be on a safe side, but this is completely redundant. `static_assert`s above are enough.\nWe'll do up to 9 iterations of the while loop, thus shift number by 63 bits, so we'll have only one bit remaining that will pass the check.\n\nReviewed By: jmswen\n\nDifferential Revision: D5947313\n\nfbshipit-source-id: d1ab2bc591aaa8ddf9bc9db324187d8cc522b595"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/28fa1005c1f51bff19f0fabb65618e7085a77b43", "message": "Fix for early request transition into sending queue\n\nSummary:\nD5763650 introduced batching for ::sendmsg syscalls.\nIt also introduced 2 bugs:\n- we may mark request as sending and never actually try sending it, thus hanging some of the requests, but more importantly offsetting the queue.\n- we may transition to not UP state of connection inside of the loop and still try to send things.\n\nReviewed By: jmswen\n\nDifferential Revision: D5857438\n\nfbshipit-source-id: 112d7c5bfd7c55e98d0e11a15ccc735f36ee6b97"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/3626fa50bd7536a6a194d26ab032ba17a776e682", "message": "Smarter notifications, batching & scheduling\n\nSummary: Over the week I was thinking how to avoid double-scheduling `WriterLoop` (i.e. end of next loop). After jmswen fix to the messagequeue I realized that these things are related and we can use knowledge of them to improve each other, i.e. we ever need to set `State::EMPTY` if only we're going to block, similarly we don't need to flush every 2nd loop, but instead when we know that there's nothing more to do.\n\nReviewed By: jmswen\n\nDifferential Revision: D5802302\n\nfbshipit-source-id: a4a7559843e5cb397d8a7b1e580f5843bb650bb7"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/45a6d8659ebb8ceabc63e359efd3fc9533f89386", "message": "unique_ptr<WriterLoop> -> WriterLoop\n\nSummary:\nThere's no need for it to be allocated separately and we access it for every request (except batched once). This way we avoid loading it from memery on access (which usually happens righ after checkin `writeScheduled_`.\nI can see `sendCommon` goin down in perf record from 1.2% to 1%, also `pushMessages` is slightly better.\n\nReviewed By: jmswen\n\nDifferential Revision: D5782297\n\nfbshipit-source-id: 615f18523a15c83b337a73be0a7ba8a5e6d5c628"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/bc1d388026616d0ee0309dafb8c7eea52d13b9a3", "message": "Batch iovecs when calling ::sendmsg\n\nSummary:\nRight now we use TCP_CORK to signal kernel that we intend to send more. This saves us in terms of packets (and thus the cost of transmitting them), but we still pay the overhead of syscall + extra boilerplate in kernel (fd loockup and some other logic).\nWith this diff we collect iovecs on stack and call ::sendmsg once per batch or 128 ioves, whichever is smaller. The downside is that we will get only one callback, and thus some requests might get blocked by the write callback.\n\nTo avoid the blocking effect I may try adding some capping logic to avoid having a batch over 10K.\n\nReviewed By: jmswen\n\nDifferential Revision: D5763650\n\nfbshipit-source-id: c2abdc8197999ebe6226433f1e52f28ea061891f"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/e29e16b88dabb25bc22258d4cd64dd293dc62459", "message": "CarbonQueueAppender: avoid using separate iovec for the header when possible\n\nSummary: Our headers are usually <= 12 bytes, just move the data to reduce the number of iovecs we pass to ::sendmsg\n\nReviewed By: jmswen\n\nDifferential Revision: D5762079\n\nfbshipit-source-id: a09a88cc48decaef78367db45bae809cf97644c4"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/ba44ce6053f412d6a0e02838b5440daa5b97496f", "message": "CarbonQueueAppender: copy content of small IOBufs instead of using IOBuf objects\n\nSummary:\nAs per inline comments handling IOBufs is terribly expensive (it's a 64 byte object + atomics), it's much cheaper to memcpy its content if it's small. Another side effect is that we avoid chunking payload and use 2 less iovecs per IOBuf.\nThis improves serialization of memcache-like requests by ~60%, but decreases by some amount for certain types of structs (when we have tons of small IOBufs, we should address that issue by properly preallocating big chunks).\n\nReviewed By: brianwatling\n\nDifferential Revision: D5761728\n\nfbshipit-source-id: f5a13a1774ee8377b316ea88f7706cc6eafb142d"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/2a08265b1686c4490e75eae23ba230ba0efc02e3", "message": "Improve locality of fields in AsyncMcClient\n\nSummary: title, reorganize the fields in order to improve cache locality (fields are grouped by the access pattern).\n\nReviewed By: brianwatling\n\nDifferential Revision: D5761700\n\nfbshipit-source-id: 2153f0a1588274fdcf5a4a128876688c4d61755e"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/b18ff0a50eda247ea7012e5aeb99ef026dd22b52", "message": "Perf improvement, avoid atomic operations on shared/weak_ptr in AsyncMcClient\n\nSummary: AsyncMcClient is always used from the same thread, there's no need to incur synchronization cost. Just switch to DestructorGuard + cleanup.\n\nReviewed By: brianwatling\n\nDifferential Revision: D5761686\n\nfbshipit-source-id: 0aaffc85c50ec923eed89dc8da9180de98910cf4"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/6106c0485666e7f2bbd84537b66705d15d699766", "message": "Bump verbosity level for connection state logs\n\nSummary: This is pretty frequent event and is not very informative, increasing (or rather decreasing?) the verbosity level to 3.\n\nReviewed By: jmswen\n\nDifferential Revision: D5645464\n\nfbshipit-source-id: b82906660f1ad7b5510bbfa3927aecfd2ba16b89"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/eb5359528e87cf729288c23c48955fa61d5ab9bf", "message": "Add extra command line options processing\n\nSummary: This adds an extra hook for performing actions based purely on command line options and before we start reading from other sources (e.g. allows to configure these sources).\n\nReviewed By: jmswen\n\nDifferential Revision: D5552452\n\nfbshipit-source-id: 5edf4fb22bf1f46aa9d1a611991a6b3226b8d719"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/492d03ba219df68c85aaa3463dd384298fe86b25", "message": "Improve error reporting when we fail to start mcrouter\n\nSummary: Report the reason of configuration failure via exception instead of silently returning nullptr.\n\nReviewed By: jmswen\n\nDifferential Revision: D5268635\n\nfbshipit-source-id: c20928bef14aca243c107ee5b6163e5ea1eada7b"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/c6f8c77d512012df28ae134f0e7f6500a6490d2f", "message": "Add unit tests for optional fields in JSONM\n\nSummary: As pavlo-fb noted, we have no tests for throwing errors for invalid optional parameters specifications in JSONM. This diff adds two such tests.\n\nReviewed By: jmswen\n\nDifferential Revision: D5154982\n\nfbshipit-source-id: eda8a3cda867004ea4780fbcac7a663ea95794af"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/27a14f96b110900127d1f41fe30b9070bbc9371d", "message": "Don't send codecIds when the range is empty\n\nSummary:\nRight now we always send empty codec id range over the wire, this diff fixes it.\n\nandreazevedo, since you're the most familiar with this code, should we just check `size != 0`?\n\nReviewed By: andreazevedo\n\nDifferential Revision: D5148136\n\nfbshipit-source-id: e540dbc4fefd5f4721e002015e4bc763032b47b5"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/c023cdc66df98ca356e3ed37c4fa0645715cb56c", "message": "Properly process \"optional\" parameter tag\n\nSummary:\nWhile revamping the doc I noticed this bug. Right now we completely ignore the value of `optional`, which may lead to undesired behavior.\nThe syntax for parameter definition that we have right now is\n  {\n    \"name\": \"parameterName\",\n    \"optional\": bool, // Optional\n    \"default\": \"defaultValue\" // Optional, implies optional=true\n  }\nIn the code completely ignore the value of `\"optional\"` and assume it `true`.\n\nUser could potentially write next code\n  {\n    \"name\": \"test\",\n    \"optional\": false\n  }\nWhich wouldn't do what expected.\n\nThis is not a huge bug, it just makes things more fragile and not clean to document.\n\nReviewed By: jmswen\n\nDifferential Revision: D5121173\n\nfbshipit-source-id: 09a958b76ff55fd2c18ff6054c34aa478a4f3a39"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/bfe3a9a360c5161f3b273651fd241e1a99578e0e", "message": "Return McServerSession from addClientTransport\n\nSummary: With this change we allow tracking session that is bound to the transport. This is necessary if the transport wants to initiate GoAway without abruptly closing the connection.\n\nReviewed By: jmswen\n\nDifferential Revision: D5057131\n\nfbshipit-source-id: a3eeff1746312811539b24fca6563cef2a22f7f9"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/03664239f8161be63bcf86def50006a1c93af1bb", "message": "Use hashes in BigValueRoute instead of random numbers\n\nSummary:\nRight now we're using random number suffix when executing Update operations with big values. Unfortunately this has it's own side effects, like generating new keyspace for each update and thus on failures leaving a lot of unnecessary around.\nWith this diff we start computing hashes of big values and using them instead of random numbers.\nNote: for backwards compatibility we use only 32-bits of hash, so that old clients can still read data.\n\nReviewed By: andriigrynenko\n\nDifferential Revision: D4987580\n\nfbshipit-source-id: d26c3532fc8b307cc44ae6497b819074d1440961"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/f31d500e8ba86e3953aacbf97767679877da0166", "message": "Add GoAwayMessage\n\nSummary:\nThis adds a new mechanism to AsyncMcServer to notify clients that the server is about to shutdown and that clients should stop sending new requests.\nThis is possible only for connections that use caret protocol.\nOld clients will silently ignore this message. New clients will ack the server and will stop sending new messages.\n\nReviewed By: jmswen\n\nDifferential Revision: D4941969\n\nfbshipit-source-id: a1b61a4019b786bd34da69ef9981b260b1249136"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/a664b9d9151caf0072ed994fafa7abc8cf0d7095", "message": "Nuke no-network mode\n\nSummary: This wasn't used in last two years, it works only with ascii and finally it doesn't test full stack (e.g. it doesn't test how we use networking stack).\n\nReviewed By: jmswen\n\nDifferential Revision: D4949540\n\nfbshipit-source-id: 1dfbc095fb648bbb5a3645c0a3177bc5d2a16715"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/419c348f8bfcebc828a482f0a067b4619d85b3b3", "message": "Nuke AsyncTimer and simplify code that uses it\n\nSummary: Instead of using AsyncTimer, just use folly::AsyncTimeout::make, also simplify the usage of it.\n\nReviewed By: jmswen\n\nDifferential Revision: D4948322\n\nfbshipit-source-id: 602baa30e7cf8908d75afff1e3b36aeeb2f5699b"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/1f2f4f8de912fe607f1f7a979054b706bb6971d6", "message": "Fix mcrouter tests\n\nSummary:\nRight now a lot of tests fail in contbuild with ASAN. This is caused by slower Memcached startup and a bug in handling stats timeout.\nThis does 2 things:\n1) Fixes a bug with handling `None` returned from stats.\n2) Bumps stats handling timeout.\n\nReviewed By: jmswen\n\nDifferential Revision: D4937507\n\nfbshipit-source-id: 0d87ff3dcd3f03f91646373d6b915a58714771b8"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/da9a600125d0ce0e5671f3ea782d8bfc33f96873", "message": "Thrift messages compatibility changes\n\nSummary:\n1) Don't try to serialize non-memcache requests with umbrella protocol.\n2) Add a new constructor to `ReplyCommonThrift` that accepts result.\n\nReviewed By: jmswen\n\nDifferential Revision: D4788860\n\nfbshipit-source-id: 61a8378453f60b8b7d378d375c4d681cc644e8e3"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/3849dc72ebe0a17902f287c4d3fd76ca923462b5", "message": "Fix bad network input crashes\n\nSummary:\nThis fixes a class of crashes due to unhandled commands in handlers code.\n1) Fix crash, when request handler doesn't specify handler for ascii requests.\n2) Fix out-of-bound type id in caret.\n3) Another crash on not handling return in dispatchTypedRequestIfDefined.\n\nReviewed By: jmswen\n\nDifferential Revision: D4784224\n\nfbshipit-source-id: 00208459fea161dcc604221a251e8b6cd48ce80a"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/f24075c181b29681911314a278a23751833609a4", "message": "Mark generated files with @generated\n\nSummary: This will simplify code review, since Phabricator will say that these are generated files.\n\nReviewed By: jmswen\n\nDifferential Revision: D4731893\n\nfbshipit-source-id: 64fc03a638f334102a008aaa7a9dbc7f703296b8"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "craigcabrey": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/mcrouter/commits/32896dca8b96130c591a62b8dff88195b1024e5e", "message": "add support for casting to double\n\nReviewed By: jmswen\n\nDifferential Revision: D5997085\n\nfbshipit-source-id: b38ceebad2b71cf86c619178e8a75331383355db"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alikhtarov": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/mcrouter/commits/62a15c5c3123ceadebe5ad7b1e5d3614acbf53fc", "message": "ListenSocket: closeOnExec feature\n\nSummary: Useful to control which spawned processes should inherit the listen socket.\n\nDifferential Revision: D5839906\n\nfbshipit-source-id: 4c4070c9d767df0e203e15b2e4674f793c58a8ea"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/871be7aa4308a6d9b8779e8cfa2ca35982937921", "message": "--script: machine readable output\n\nSummary:\nNeeded this for stats analysis (for example: given a result of an assoc get, how likely are we to subsequently fetch an fbobject from one of the id2s?)\nThe format is compatible with Python's json.loads().\n\nExample output:\n```\n{\n  \"reqid\": 59,\n  \"from\": \"[2401:db00:2020:b0bd:face:0:1:0]:10512\",\n  \"to\": \"[::]:35240\",\n  \"protocol\": \"caret\",\n  \"type\": \"AssocRangeGetRequest\",\n  \"result\": \"mc_res_found\",\n  \"flags\": 0,\n  \"message\": {\n   \"appSpecificErrorCode\": 0\n  },\n  \"value_wire_bytes\": 13,\n  \"value_uncompressed_bytes\": 13,\n  \"value\": {\n    \"1706593169584450\": 1\n  }\n},\n```\n\nExample usage:\n```\n./mcpiper -P libmcrouter.hhvm.tao.client -n 10000 --script > out\npython\n>>> a = open('out').read()\n>>> import json\n>>> b = json.loads('['+a[:-2]+']')\n>>> len([x for x in b if x['type'] == 'AssocRangeGetRequest'])\n5626\n```\n\nReviewed By: jmswen\n\nDifferential Revision: D4920855\n\nfbshipit-source-id: 8b8eb799126efa7c693aa744dee9fd0e19b1d879"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/38699262fbe086fb4993f844022b4935af57cc21", "message": "Fix key shadowing\n\nSummary: routingKeyHash() incorrectly hashed the full key\n\nReviewed By: andreazevedo\n\nDifferential Revision: D4672242\n\nfbshipit-source-id: fe10f2ad0f7b790cd547d6308ea0d53e790dd815"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/73049cd6f10195b4341fe2dd31a9258a87f29644", "message": "Remove nstring.h\n\nSummary: This code is deprecated by folly::StringPiece and is not used in mcrouter/\n\nReviewed By: jmswen\n\nDifferential Revision: D4526502\n\nfbshipit-source-id: 584c2234e7034a653532c628a75f57fc32197a0a"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/55945079", "body": "Thanks! This is due to the last line (\"$INSTALL_DIR/bin/mcrouter\" --help), you can simply remove it as a workaround. I will fix this in the trunk as well.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/55945079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/55961722", "body": "Fixed as of https://github.com/facebook/mcrouter/commit/384134845e7ca5c39268b8ddd2b9d95ddff3aa98\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/55961722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/56214411", "body": "Awesome! We should just add those links to the wiki\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/56214411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/56249525", "body": "@tweibley PRs definitely welcome!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/56249525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/57512434", "body": "To add to Pavlo's answer, you should also make sure that the replacement IP address is swapped at the same position in the array.\n\nFor example, say you have \"servers\": [ \"ip1\", \"ip2\", \"ip3\" ] and ip2 breaks down. Then you replace it with ip4 like so: [ \"ip1\", \"ip4\", \"ip3\" ]. This guarantees that all keys that would be sharded to ip2 are now sharded to ip4.\n\nThe actual IP address is not used by mcrouter for hash computation, only its position in the array and the number of hosts in the array.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/57512434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/57529528", "body": "Yeah exactly. Makes me think we should emphasize this on the wiki, as it's something that's not obvious but we take for granted since we've used it for a long time now.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/57529528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/59430457", "body": "@renchap yes, the Umbrella protocol is something we use internally at Facebook. We don't want to document it in detail, since it probably won't be useful outside of Facebook, and we also want to have flexibility to change the format.\nI like the idea of supporting the open source binary protocol, and it wouldn't be too difficult to implement. It would be ideal if we got a pull request for implementing this :)\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/59430457/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/59569454", "body": "@swar0g thanks for the report, looking into this.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/59569454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/59569552", "body": "@pavlo-fb: this might be related to boost::context compatibility stuff\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/59569552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/60017398", "body": "@swar0g That's great! We also fixed this upstream and will update github soon, so it should work with 1.56 as well.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/60017398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/60321765", "body": "@0xd3adsh3ll and if you don't find an answer on the wiki, please open an issue here and we'll improve our docs.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/60321765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/60501691", "body": "Please ignore the double \"closed\" message, the later one (https://github.com/facebook/mcrouter/commit/9e2271682af33322c4b33e8b2ba8fb884eb77a13) is correct\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/60501691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/60504338", "body": "@jamescarr See https://github.com/facebook/mcrouter/commit/6640c5f7da9bae13eab2263c10307b34cec2c705\nThe logging should be more descriptive now. Let me know if that's sufficient for you.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/60504338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/60504349", "body": "@swar0g As of current trunk, 1.56 should be compatible as well. Please re-test and let me know if it works now.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/60504349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/60844989", "body": "@huannh Any chance you can include a tcpdump/ngrep session of running both php-memcache with mcrouter and with the other client? That would help to debug the issue.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/60844989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/61001939", "body": "@corny813 What system are you building it on (including release version)? It's possible that the build links against your system's packaged libglog/libgflags instead of the ones automatically built by the script. Can you try uninstalling them and rebuild?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/61001939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/62464852", "body": "@crazzy Did you use the install scripts provided in the repo to install Folly and Fbthrift, or did you build them manually? double-conversion should be statically linked into Folly when building it.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/62464852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/64020385", "body": "Thanks for the report! I'll update the script.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/64020385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/64259732", "body": "@aesdana Thanks for this fix! Please make sure to sign up at https://code.facebook.com/cla so that we can use your code.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/64259732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/64302325", "body": "@aesdana Oh btw libdouble-conversion-dev is now part of Ubuntu 14.04, so we will be moving to using that directly. Folly already assumes that. I'm updating the scripts to reflect this.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/64302325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/64722436", "body": "This should work, as suggested by @aesdana : https://gist.github.com/alikhtarov/23aefbe58e0619edc3c1\n\nI'm merging this change into the repo.\n\nEdit: I still see the same error message, investigating.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/64722436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/64725014", "body": "This diff works for me: https://gist.github.com/alikhtarov/34fbe3e0b7849a4c0ee3\nPlease try with it locally.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/64725014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/65106289", "body": "@Testinos can you provide an example of how that feature would look like? One thing I can think of is adding a prefix for every key based on pool information, so for example `get key` sent to mcrouter would result in `get user:key` sent to memcached - do you mean something like that?\n\nNote that mcrouter already supports sending to different destinations depending on the key prefix, so for example you can send `get a:key` to 'a' servers and `get b:key` to 'b' servers - see https://github.com/facebook/mcrouter/wiki/Prefix-routing-setup\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/65106289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/65107670", "body": "@xidianwlc Hi, config.log file in mcrouter/mcrouter should have more details about the error, can you paste the relevant lines from that file?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/65107670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/65146017", "body": "@Testinos I see. Mcrouter will already pass through those commands (\"get @@namespace\") to the server, so you can just proxy those requests to a mysql memcached server directly and everything will work as expected. Do you have a use case in mind where mcrouter itself should handle namespace logic?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/65146017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/65297095", "body": "@maxar-ck I've seen this error before due to g++ running out of memory, it's possible that your vm just doesn't have enough RAM. If you have enough disk space, one trick that worked for me is to add swap space, i.e. to add 1GB:\n\nsudo dd if=/dev/zero of=/swapfile1 bs=1024 count=1048576\nsudo chown root:root /swapfile1\nsudo chmod 0600 /swapfile1\nsudo mkswap /swapfile1\nsudo swapon /swapfile1\n\n(link: http://www.cyberciti.biz/faq/linux-add-a-swap-file-howto/)\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/65297095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/65715092", "body": "So you can already do requests like \"get @@namespace.key\" using prefix routing. But there's no way to maintain state per connection like you suggest. Adding support for this is not trivial, as currently there's no correspondence between client and server connections in mcrouter by design, so that clients can share the server connections. This means that every request/reply pair is independent. If a client sends \"get @@namespace\", and we forward it to the server, all other clients sharing the server connection will be affected.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/65715092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/67384832", "body": "@juggernauts You can easily use any Python memcache client to talk to mcrouter instead of memcached - it's the same protocol. Does that work for you?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/67384832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/68962819", "body": "@aesdana Note that I could successfully build for 12.04 even with shared libraries, so it shouldn't be required. I'm not sure if it's easy to build all the dependencies statically, but you can try the approach suggested here http://stackoverflow.com/questions/13997415/how-can-an-autotools-user-specify-a-combination-of-static-dynamic-linking\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/68962819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/68964617", "body": "@cparfon can you try to rebuild with latest changes (in both Folly and Mcrouter) - I think this was a temporary build issue.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/68964617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/71518775", "body": "Hi, could you clarify if you open 1000 persistent connections to mcrouter, or keep opening and closing new short lived connections? (In general mcrouter is not optimized for short lived connections, in our setup we keep most of connections open for a long time)\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/71518775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/71521527", "body": "Unfortunately TKO logic is something that is being actively improved/changed, so documentation will be out of date :)\nPlease also make sure you run a recent version, as there were a few important bug fixes to TKO logic.\n\n`--latency-threshold-us` as of most recent version is deprecated and has no effect.\n\nYou also need to specify the timeout for requests. The easiest way right now is `-t` (or `--server-timeout`), and the setting is in ms. `mc_res_timeout` in the log means that some individual request had a round trip exceeding this timeout.\n`--timeouts-until-tko` specifies how many 'soft errors' (meaning timeouts) need to happen in a row for the host to be marked down.\n'hard errors' (e.g. connection closed by peer) need only to happen once, and the host will be marked as 'hard TKO'\n\nThe distinction between soft and hard TKO is that any number of hosts can be marked as hard TKO, while there is a limit on maximum number of soft TKOs. The rationale is to keep the site operational under heavy load - even when the limit is reached, some hosts will be kept up even though many individual requests will time out.\n\nThe options `--probe-timeout-initial` and `--probe-timeout-max` only have effect after the host has been marked TKO; no regular requests are sent at this time. These options control the initial interval between sending probes (`version\\r\\n` commands) and the maximum interval; the interval is exponentially decayed until the maximum. These probes are sent in the background until a successful reply, which unmarks the host.\n\nFor debugging, something that might help is 'stats servers' command (`echo 'stats servers' | nc mcrouter_host mcrouter_port`). This will list error counts (including timeouts) for every server in the config, for example\n\n```\nSTAT [1.2.3.4]:11111:TCP:ascii-1000 avg_latency_us:5447.932 pending_reqs:0 inflight_reqs:0 new:4; found:9543 notfound:4448 stored:5820\n```\n\n`avg_latency_us` is exponentially weighted round trip average and should tell you if something is slow for that server. A `timeout:` counter if present will show the number of timeouts for destination, normally it should be at 0.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/71521527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/71522033", "body": "Can you also paste the output of `get __mcrouter__.options` sent to mcrouter?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/71522033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/71524319", "body": "There's nothing obviously misconfigured, you're running with 16 threads, and we routinely handle many 1000s of connections.\nWhat symptoms do you see when client connections start to fail? Is mcrouter consuming 100% CPU?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/71524319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/71924391", "body": "Thanks. This definitely doesn't look normal. Could you also post the realtime stats when you're running the load test, they should be written to /var/mcrouter/stats/libmcrouter.mcrouter.*.stats (file updated every 10s).\n\nOne thing we should rule out is uneven distribution of load across mcrouter threads. When you connect to mcrouter, that connection is assigned to one (out of 16 in your case) mcrouter thread permanently, and each new connection goes to the next thread in sequence (round robin). So if you have less than 16 connections, or for some reason connections are unevenly distributed you will overload some of the threads.\n\nTo verify this, can you look at 'top' output with threads enabled and your loadtest running? You should see all 16 mcrouter threads with roughly equal CPU. If you see one or a few pinned at 100%, then that's a problem. We will also add stats to check for this to mcrouter directly.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/71924391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/72131795", "body": "Thanks for the report! I'm trying to reproduce this locally now.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/72131795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/72273183", "body": "Assuming both `gets` and corresponding `cas` end up on the same replica, yes. This should be the case most of the time, but very rarely you might get a situation where the first `gets` goes to replica A, and then replica A goes offline temporarily, so that `cas` will go to replica B (assuming you have set up failover that way), and `cas` will fail. As long as your system can tolerate these rare failures, it will work.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/72273183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/72275027", "body": "Every value over the size of N will be split into smaller chunks of size N (last chunk might be less than N).  The original key becomes the 'index' key which stores a random suffix and total number of chunks; the chunks are stored at modified keys that includes the same random suffix and the chunk id.\n\nThe random suffix is needed for consistency - you can simply remove the original key and the chunks will be 'deleted' - there's no way to access them without knowing the random suffix. It also takes care of simultaneous sets, since only one key will win the race, and only its random suffix will be valid.\n\nThe way we deployed it on a live system was in stages. First we deployed reads only - if you set N to some large value (like 1000000000), the logic is still enabled on the read path, but will not actually split any values. This makes sure that all clients can understand split values once we start writing them. \nSecond stage was lowering N to actually start splitting the values. The exact value we use is 524288.\n\nNote that all chunks will be sent to the same memcache box as the original key would be, so that means you're still transferring the same amount of data from a single memcache box to the client. If you want to transfer huge values this way, you still have to wait for individual chunks to arrive serially, so that might explain the timeouts you see - can you share the size of the values you're setting/fetching and the value of N you tried?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/72275027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/77008577", "body": "@tweibley I'm sorry mcrouter didn't work for you guys. I hope you can revisit in the future, we're constantly fixing bugs and improving performance.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/77008577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/77008864", "body": "@jamescarr We typically run one proxy per CPU core. The tradeoff is that each proxy opens its own connections to memcached hosts, so running too many proxies might create too many connections - this is the only reason we run fewer number of proxies than CPU cores.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/77008864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/77089796", "body": "@jamescarr yes, each proxy runs its own event loop so you can fully use up 4 cores with 4 proxies.\n\nThe only other possibility is if you don't have enough incoming client connections to mcrouter, since each connection gets assigned to a proxy permanently (in a round-robin fashion). So for example if you have only one connection to mcrouter, you would only use one proxy thread and one CPU core (even though you started 4). The more connections you have open, the better balanced the load will be.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/77089796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/77294245", "body": "Thanks, we will merge your request in the next release!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/77294245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/78351233", "body": "@mosesgumi Did you use the provided install scripts? Could you share the details of your operating system (distribution/version)?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/78351233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/78734438", "body": "The simplest way is to just add ~/mcrouter-install/install/bin/ to your PATH variable:\n\nexport PATH=~/mcrouter-install/install/bin/:$PATH\n\nAlternatively you can add a symlink to e.g. /usr/bin:\n\nsudo ln -s ~/mcrouter-install/install/bin/mcrouter /usr/bin/mcrouter\n(you probably want absolute path instead of ~ here).\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/78734438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/82662521", "body": "Sorry, there was a problem with this sync to github. We'll fix it shortly and close it when we re-push.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/82662521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/83940967", "body": "Actually you can achieve this by composing RandomRoute and MissFailoverRoute under `get` policy (BTW I noticed you have `gets` there - is that intentional? `gets` and `get` are two different operations). \n\nYou probably want to re-write your config as having two different pools. Something like:\n\n```\n{\n  \"pools\": {\n    \"A\": { \"servers\": [\"172.27.132.244:11211\"] },\n    \"B\": { \"servers\": [\"172.27.135.40:11211\"] }\n  },\n  \"route\": {\n    \"type\": \"OperationSelectorRoute\",\n    \"operation_policies\": {\n      \"get\": {\n        // Randomize on every request between two children\n        \"type\": \"RandomRoute\",\n        \"children\": [\n          // First option: send to miss failover, which tries A first, then B\n          { \"type\": \"MissFailoverRoute\", \"children\": [\"PoolRoute|A\", \"PoolRoute|B\"] },\n          // Second option: same, but try B first, then A\n          { \"type\": \"MissFailoverRoute\", \"children\": [\"PoolRoute|B\", \"PoolRoute|A\"] }\n        ]\n      },\n      \"set\": { \"type\": \"AllSyncRoute\", \"children\": [\"PoolRoute|A\", \"PoolRoute|B\"] }\n    }\n  }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/83940967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/93025381", "body": "Hi, can you run\n\n`ldd /usr/local/bin/mcrouter`\n\nand post the output here?\n(substitute the path to mcrouter as appropriate for your installation)\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/93025381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/93585191", "body": "No reason except for simplicity. There's very little difference from the server's point of view between 'get a b\\r\\n' and 'get a\\r\\nget b\\rn' except for a few extra bytes to send each 'get' and 'value/end' separately, as long as we batch the request into the same network packet which we try to do.\nIn our use case we also very rarely get multigets that end up all going to the same server (we typically have a lot of fan out), so there was also no practical reason for this optimization.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/93585191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/94093162", "body": "@amckinley: hi, no updates at this time. By the way, could you share how the binary protocol helps in your case? We're actually evaluating whether to migrate from ASCII to binary internally for memcached - some things we can think of is slightly better parsing performance (due to known sizes), and reply/request matching (less parsing bugs).\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/94093162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/94094880", "body": "There's a very simple way to achieve storing a bunch of related keys on one server with mcrouter. If you structure a key like `prefix|#|suffix`, mcrouter will only use prefix part for consistent hashing. So you can do stuff like `user_id:123|#|data_id:456`, and all different data keys for the same user will end up on one box.\n\nThis is a separate issue from using multigets. In this case mcrouter will still send individual gets to the server, but they will be batched into minimal number of network packets possible, so it's not a big issue. It's literally the difference between sending `get a b c\\r\\n` vs. `get a\\r\\nget b\\r\\nget c\\r\\n`.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/94094880/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/94100253", "body": "@deep011 \n1) We don't encourage using the old Facebook memcached fork, as it's not supported anymore.\nBasically there's no way to ask open source memcached about the exptime of an item, so there's no way to set the exact exptime on the new item. You can only approximate by setting a smaller exptime intentionally.\n2) Yes, it's possible for a set to succeed in only one replica. Since the second set will fail, the client will think that the whole request \"failed\", and there are a few options: issue a delete for the same key (assuming deletes are reliable - that can be achieved with a reliable delete log, see asynclog option); or retry the set.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/94100253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/94923479", "body": "Hi, can you confirm you can only see this problem with warm server, and not with cold? Any potential network issues - can you verify that there are no issues connecting to the warm server manually? The errors show that mcrouter disconnected from the warm host due to some error, but not clear which from the log. Are there more lines before \"AsyncSocket.cpp:729] AsyncSocket::close():\"? At that point mcrouter is already force closing connection.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/94923479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/94985486", "body": "Were there any other lines before the first line \"I0421 09:56:48.683130 9112 AsyncSocket.cpp:729]\" ? The more complete log would help.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/94985486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/94985570", "body": "Also please post the output of `stats servers` and `stats suspect_servers` commands sent to mcrouter when the issue is happening (you can simply use nc, i.e. `echo stats servers | nc localhost <mcrouter_port>`)\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/94985570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/95335698", "body": "Thanks! We're pulling this change for the upcoming Monday sync, but we're also revamping the way we do CPU cycle stats collection, so there will be other code that calls x86's rtdsc. We'll add these guards to the new code as well, would be great if you could test these new changes when they're out.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/95335698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/95355785", "body": "Thank you, I think I know what the issue is.\nThe problem is that internally, we rely on a `metaget` command which would tell us what's the current TTL of a value in the warm pool is. The open source memcached does not support this operation, and there's no way to query for the current TTL, so the best you can do is to set the values with some predefined TTL.\n\nThis is confusing, so we will change the default so that the open source version doesn't assume this `metaget` operation exists.\n\nA workaround is to specify a TTL explicitly. For example if you want values to be set with TTL=1000 seconds, in your config you should specify 'exptime' field for the WarmUpRoute:\n\n```\n{\n  \"pools\": {\n    \"cold\": { \"servers\": [ \"xx.xx.xx.xx:11211\" ] },\n    \"warm\": { \"servers\": [ \"xx.xx.xx.xx:11212\" ] }\n  },\n  \"route\": {\n    \"type\": \"WarmUpRoute\",\n    \"cold\": \"PoolRoute|cold\",\n    \"warm\": \"PoolRoute|warm\",\n    \"exptime\": 1000\n  }\n}\n```\n\nI found it from these lines:\n\n```\nI0422 11:41:05.363620 22580 AsyncSocket.cpp:1226] AsyncSocket::handleRead() this=0x7fa2d800c620, fd=24, state=2\nI0422 11:41:05.363653 22580 AsyncSocket.cpp:1694] AsyncSocket::updateEventRegistration(this=0x7fa2d800c620, fd=24, evb=0x29b6d68, state=2, events=0\nI0422 11:41:05.363675 22580 AsyncSocket.cpp:729] AsyncSocket::close(): this=0x7fa2d800c620, fd_=24, state=2, shutdownFlags=0\n```\n\nfrom looking at AsyncSocket.cpp it looks like we tried to read data from the socket, and got EOF (remote end closed). This could happen if memcached got unexpected data over the wire, which is consistent with sending an unknown operation like `metaget`.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/95355785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/97551341", "body": "Hi,\nno, there should be no difference between using a config file and passing the config directly as a string. Can you reproduce the problem reliably? Could you include the full set up (memcached and memcslap command line arguments) and the steps to repro? Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/97551341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/107700147", "body": "Closing due to inactivity, feel free to re-open if more questions come up.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/107700147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/107734277", "body": "@huannh : please reopen if you have more information. Unfortunately we can't really debug this without any details.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/107734277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/107734463", "body": "@samek : I believe folly and mcrouter repos were out of sync for some days. Please retry with the current trunk.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/107734463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/107736018", "body": "Looks like there's a bug in how we increment/decrement num_clients_stats in server.cpp. It's an unsigned int, so if we decrement more than we increment we end up with an underflow and a large number that you observe.\n\nCan you add some logging to server.cpp near stat_incr and stat_decr to investigate (i.e. LOG(ERROR) << \"incremented\";) and see if you can catch the mismatched incr/decrs? We're also debugging internally.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/107736018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/107744192", "body": "@gotascii Hi, yeah in general our hash functions rely on the servers in the list never being re-ordered. Here's how we deal with this. There are a few situations when we might want to change the server list:\n1) replace a box - in this case we simply replace the host at some index in the list with the new value, without reordering other hosts.\n2) grow the size of the pool - for this, we take care to only add new boxes at the end of the list\n3) shrink the pool - similarly, we only remove boxes from the end of the list.\nGenerally these are the only operations we do on the server lists in the config. Note that none of these should happen too often. For any transient failures, we rely on failover + TKO logic to temporarily disable the box without changing the pool's server list.\n\nIf the above doesn't work for you, please consider implementing the additional hash support yourself. It shouldn't be too difficult, you need to add an alternative to HashRoute that would hold a list of DestinationRoutes and use the destination keys to do the hash lookup.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/107744192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/107748066", "body": "Please reopen if you need further help on this!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/107748066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/107748184", "body": "Closing due to inactivity, feel free to reopen if needed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/107748184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/107755055", "body": "@deep011 Sorry for the late reply. In these cases, if the service cannot tolerate stale data then on the publisher side we check that the set succeeded in all replicas (you can do it with a special config that would route to one replica at a time).\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/107755055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/107772297", "body": "Closing due to inactivity, feel free to re-open with more info\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/107772297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/111580660", "body": "@samek Any luck reproducing this bug? We didn't see it on our side either.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/111580660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/113299540", "body": "Thanks, this will be merged in the release next week.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/113299540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/113304540", "body": "@191919 Please see the result of the Travis CI build - some of your changes don't compile\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/113304540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/113305670", "body": "Thank you, will be pulled in the release next week.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/113305670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/113306501", "body": "Thank you, this will be merged in the next week's release\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/113306501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/113694816", "body": "@radford actually why do we need both MCROUTER_PACKAGE_STRING and MCROUTER_VERSION_STRING? This change make version reported through `stats` and `get __mcrouter__.version` commands inconsistent with `version` result. Could you make them the same?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/113694816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/114279202", "body": "@didip Hi, it's easy to update config json without restarting - mcrouter automatically monitors the file for any changes and will reload it at runtime if you change it. If you want to point it to another file at runtime, one easy way to do it is to create a symlink that will point to the real config file and start mcrouter with that symlink - mcrouter will also monitor the changes to the symlink itself.\n\nFor the second part of the question, no, at the moment **mcrouter** queries are read-only in general, and it's hard to change some of these options at runtime. We do plan to make most of the options more flexible (and put them into a separate .json config).\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/114279202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/114331591", "body": "Cool, I think I answered the questions you had, but feel free to re-open if you have anything else in mind.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/114331591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/117354815", "body": "Hi,\n1. Yes - we just \"throw away the key\", this way we don't have to worry about all chunks being deleted reliably\n2. Same as in 1, only the last successful set will contain the valid random suffix for all the chunks. The previously set chunks are inaccessible (even though they still exist in memcached). Here we rely on random suffixes having very low collision rate in practice.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/117354815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/117794404", "body": "@marko-jovicic That option could be easily added to BigValueRoute logic, but I'm wondering what's your use case that requires the parts to be deleted? If you don't have any way to access them, they're as good as deleted - the only downside is they will affect stats reported by memcached (it will count them towards the number of items stored, and they will be evicted eventually, increasing eviction counter).\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/117794404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/118188106", "body": "Hi, incr/decr are definitely supported and we in fact use them in production at Facebook. We don't use some commands like replace/append/prepend, and as a result they might not be as well tested.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/118188106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/118976570", "body": "@solidfoxrock Hi, thanks for the report - could you also include command line options you run mcrouter with, the config file if possible and the github commit from which you built mcrouter?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/118976570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/119005562", "body": "I would urge you to try the newest version and see if the problem still reproduces - we had a number of bugfixes around TKO logic specifically that might have helped with that. We will continue to investigate if that doesn't help in your case.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/119005562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/119348096", "body": "Hi, the reason is that we simply wouldn't want to commit auto-generated files to the source repo, but I'd like to see the answer from folly maintainers as well - do you mind filing a similar issue there? \n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/119348096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/119741721", "body": "Yeah that seems reasonable\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/119741721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/122415101", "body": "@solidfoxrock any update on this issue?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/122415101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/125363192", "body": "Hi, could you also attach: commit hash from which you built mcrouter; the config file you use.\nIf the response posted in the log ('VALUE account_rep_change_7137698 0 22\\r\\n0\\000bum_22069533_29969\\r\\nt\\nEND\\r\\n') is actually what mcrouter got on the wire, it's invalid (the value is reported as 22 bytes, but it doesn't end there - there's following \\r\\nt\\rn) - of course there could also be a bug in mcrouter itself that could corrupt this reply. Are you running a regular memcached instance?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/125363192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/125770992", "body": "Thanks. Any chance you can catch the actual packets on the wire with tcpdump or similar as this happens? This would at least rule out any corruption on memcached side. This is the first time we saw an issue like this.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/125770992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/127409726", "body": "@hrjaco Hi, I belive you can achieve that by simply using `[0, 1000000]` (or a similar large value). We simply check that the destination host index is within range, the range itself doesn't have to be valid. Please try it and let me know if it worked.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/127409726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/comments/12436522", "body": "@hrjaco This was only a problem in the code that unset the read callback and had outstanding writes that errored out. Normally, a writeErr() callback would be followed by a readEOF() which would also close the connection, unless the read callback happened to be uninstalled at the time.\n\nThis could in theory happen with mcrouter if the server hit the limit of outstanding unreplied requests (maxInFlight) so that it would pause the connection and happened to receive a writeErr at that time, but we never observed this issue in production. This bugfix was necessary because of another project that shares the same server code internally - that project calls pause() on the connection manually and much more often than mcrouter does.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/comments/12436522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/comments/12744439", "body": "@samveen This was a one-off sync to fix the open source build, I think some process was not followed so the tag was not created by mistake. We'll fix this for future releases.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/comments/12744439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "niaoniaozz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/mcrouter/commits/372642a8682705b9f6617fe5665af00ba5f1f231", "message": "Add all fields in cpu-util calculation\n\nSummary: Update the CPU util calculation to include all user fields.\n\nDifferential Revision: D5338732\n\nfbshipit-source-id: 8f00bf6f4bb8724f1280863c3f42cd50428f11a5"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mihaelao": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/mcrouter/commits/e2dc9139496787f3e85dbd3dfed52c827ff4b795", "message": "Revert D5455584: [Folly] Move the SpookyHash libraries into folly/hash\n\nSummary:\nThis reverts commit 616b04579eb6c822023b04840b075f3ac9fbb720\n\nbypass-lint\n\nDifferential Revision: D5455584\n\nfbshipit-source-id: afc712fe40121232f52a5bad781350581cec6ce8"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ot": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/mcrouter/commits/3698b3355cc099a4c748ce69dfe3ecdb67b23b6c", "message": "Move CacheLocality out of detail/ and into concurrency/\n\nSummary: There's no reason these utilities should only be used by folly.\n\nReviewed By: mzlee\n\nDifferential Revision: D5317894\n\nfbshipit-source-id: 5a9bdf4c5efaa5bcbe78e6723a03a468f2fe5e32"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shixiao": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/mcrouter/commits/9a4f9bd1cbab91fd4492215f48e1c452579ec283", "message": "handle nullptr in CarbonRouterInstance\n\nSummary:\nCarbonRouterInstance may return a nullptr if it couldn't get the gMcRouterManager singleton.\nAdd proper handling.\n\nReviewed By: nbronson\n\nDifferential Revision: D5252292\n\nfbshipit-source-id: a3a6b2673ddb818b030392301143a2df9839be9f"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "theonajim": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/mcrouter/commits/c16579e63202f45a6d4b5e2dc118815b42e4bc02", "message": "Update Centos7 build\n\nSummary:\n1. Install and use GCC 5.x from Software Collections\n2. Remove ragel and cmake builds since prebuilt binaries are now available\n\nTested change with Centos 7.2 and Centos 7.3\nCloses https://github.com/facebook/mcrouter/pull/199\n\nReviewed By: jmswen\n\nDifferential Revision: D5216207\n\nPulled By: glamtechie\n\nfbshipit-source-id: ea6a2ea7a5cfa94bbd0f3968b0e207d1cfe9aed0"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "terrelln": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/mcrouter/commits/d8086a5fe92effff04bf152a6d7710ddaa76664c", "message": "Fix zstd return type\n\nSummary:\n`zstd` returns `size_t` not `int`.\n`ZSTD_isError()` is only working because the error codes are `size_t(-1)..size_t(-N)`.\n\nReviewed By: jmswen\n\nDifferential Revision: D5149104\n\nfbshipit-source-id: 0435a0043fe7db2b93386f57532b98aaf682cf59"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AjanthanAsogamoorthy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/mcrouter/commits/a069f960c6d05d014474fd2d43c101e553a5cf01", "message": "add hostnames to mcrouter access points\n\nSummary: Support providing hostnames in PoolRoute for debug purposes, store it as part of AccessPoint.\n\nReviewed By: spalamarchuk\n\nDifferential Revision: D4784099\n\nfbshipit-source-id: 2cc49567cc0eed9842c351e50cbb6ba6cb0303d0"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "andriigrynenko": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/mcrouter/commits/9b9e2f9457195db6f92597a9b6646a4dbf64bb7d", "message": "Fix more code to call folly::init/initFacebook (part 3)\n\nSummary: Failures exposed by D4249032\n\nReviewed By: yfeldblum\n\nDifferential Revision: D4718897\n\nfbshipit-source-id: 47bc657f721b11a7cc35e22cc00cb0c72876a51b"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/f33523ee54f1f6f49c9c2cf0109a0292197c5c2c", "message": "Make EventBaseLoopController only support VirtualEventBase\n\nSummary: EventBase support is achieved through default VirtualEventBase mechanism.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D4685948\n\nfbshipit-source-id: 15c8c789a55776984aa9087455e3f7b79d7604ad"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/c3a990ea2f1280e43f4de14cfa0a35f3db9dc2fb", "message": "Use VirtualEventBase in mcrouter\n\nSummary:\nThis switches mcrouter to use VirtualEventBase as the unified way of managing its threads. This allows multiple mcrouters to be run on the same thread-pool, without having to keep separate shutdown logic.\n\nAs an immediate win - this eliminates any special shutdown logic from tcc and standalone mcrouter.\n\nReviewed By: jmswen\n\nDifferential Revision: D4570982\n\nfbshipit-source-id: 3974279005150e3e1db16230fde6b5951ae016b9"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/4f509e878a88e76e03f13988a3f8491784df3cdf", "message": "Make each server thread own and destroy its EventBase\n\nSummary: This ensures that EventBases are destroyed by server threads, so that all destruction callbacks are run in those threads as well.\n\nReviewed By: jmswen\n\nDifferential Revision: D4644793\n\nfbshipit-source-id: 200d46bcd661d69c4aa6d84b470a3344954d00e7"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "igorsugak": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/mcrouter/commits/c8e6dfe3df35b0abc238d1707f9a608c7f9ee95b", "message": "use gflags namespace instead of google\n\nSummary:\n`google` namespace is deprecated in gflags. Replacing it with `gflags` namespace.\n\ngflags was generated from this diff: P57170122\n```\n% echo $gflags\ngoogle::(RegisterFlagValidator|CommandLineFlagInfo|GetAllFlags|ShowUsageWithFlags|ShowUsageWithFlagsRestrict|\\\nDescribeOneFlag|SetArgv|GetArgvs|GetArgv|GetArgv0|GetArgvSum|ProgramInvocationName|ProgramInvocationShortName|\\\nProgramUsage|VersionString|GetCommandLineOption|GetCommandLineFlagInfo|GetCommandLineFlagInfoOrDie|]\nFlagSettingMode|SET_FLAGS_VALUE|SET_FLAG_IF_DEFAULT|SET_FLAGS_DEFAULT|SetCommandLineOption|\\\nSetCommandLineOptionWithMode|FlagSaver|CommandlineFlagsIntoString|ReadFlagsFromString|AppendFlagsIntoFile|\\\nReadFromFlagsFile|BoolFromEnv|Int32FromEnv|Uint32FromEnv|Int64FromEnv|Uint64FromEnv|DoubleFromEnv|\\\nStringFromEnv|SetUsageMessage|SetVersionString|ParseCommandLineNonHelpFlags|HandleCommandLineHelpFlags|\\\nAllowCommandLineReparsing|ReparseCommandLineNonHelpFlags|ShutDownCommandLineFlags|FlagRegisterer)\n\n% hg grep -wlE \"$gflags\" 're:fbcode.*\\.(cc|cpp|h)' | xargs perl -pi -e 's,\\bgoogle::,gflags::,g if /'\"$gflags\"'/'\n```\n\nReviewed By: meyering\n\nDifferential Revision: D4669201\n\nfbshipit-source-id: 8053ba6fba9acf6eaf6796f0f297a9e07784973f"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/8d4451eb4318ca7d7849da2932565a6853246f9b", "message": "update gflags\n\nReviewed By: yfeldblum\n\nDifferential Revision: D4646271\n\nfbshipit-source-id: 5d21407e815588ae2b016001b859a4816851ab00"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "meyering": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/mcrouter/commits/f8c0d81c0a5b6d66caf21795bea9d32b737e974c", "message": "mcrouter/lib/test/MigrateRouteTest.cpp: avoid shadowing warnings\n\nSummary:\nFix warnings exposed by gcc-4.9.x's -Wshadow-compatible-local\nI plan to enable this for all of fbcode, soon.\nSee https://fburl.com/bad-shadow for justification.\n\nRename inner \"test_handles\" to \"test_handles_2\".\n\nThis avoids the following errors:\n\nReviewed By: jmswen\n\nDifferential Revision: D4656606\n\nfbshipit-source-id: d00db9b5d40c3ad3dc3c877ae615e3e922cb6d48"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/6e6160f4340fe406f246122bbcc9b5836482370e", "message": "mcrouter/lib/test/MigrateRouteTest.cpp: avoid shadowing warnings\n\nSummary:\nFix warnings exposed by gcc-4.9.x's -Wshadow-compatible-local\nI plan to enable this for all of fbcode, soon.\nSee https://fburl.com/bad-shadow for justification.\n\nRename inner \"test_handles\" to \"test_handles_3\".\n\nThis avoids the following errors:\n\n  mcrouter/lib/test/MigrateRouteTest.cpp:38:39: error: shadowed declaration is here [-Werror=shadow-compatible-local]\n  mcrouter/lib/test/MigrateRouteTest.cpp:87:46: error: declaration of 'test_handles' shadows a previous local [-Werror=shadow-compatible-local]\n  mcrouter/lib/test/MigrateRouteTest.cpp:131:46: error: declaration of 'test_handles' shadows a previous local [-Werror=shadow-compatible-local]\n\nReviewed By: andreazevedo\n\nDifferential Revision: D4656494\n\nfbshipit-source-id: 5206feb7efe984b29306505557847616e06328be"}, {"url": "https://api.github.com/repos/facebook/mcrouter/commits/167bddf48371833c6c12e26748a5c8023ffb30c3", "message": "mcrouter/lib/fbi/cpp/test/TrieTests.cpp: avoid shadowing warnings\n\nSummary:\nFix warnings exposed by gcc-4.9.x's -Wshadow-compatible-local\nI plan to enable this for all of fbcode, soon.\nSee t13698406 for justification.\n\nRename inner \"i\" to \"j\".\n\nThis avoids the following errors:\n\n  mcrouter/lib/fbi/cpp/test/TrieTests.cpp:238:14: error: declaration of 'i' shadows a previous local [-Werror=shadow-compatible-local]\n  mcrouter/lib/fbi/cpp/test/TrieTests.cpp:235:12: error: shadowed declaration is here [-Werror=shadow-compatible-local]\n\nReviewed By: andreazevedo\n\nDifferential Revision: D4656488\n\nfbshipit-source-id: 9fa1cd2f80a72fd1f913204835e8637b37f13428"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "flarnie": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/mcrouter/pulls/226", "title": "Add `CONTRIBUTING.md` and `CODE_OF_CONDUCT.md`", "body": "In the past there was not info and support to add these docs to all Facebook Open Source projects. It's a useful measure that we can take now to create a healthy, welcoming open source community. :)\r\n\r\n**why make this change?:**\r\nFacebook Open Source provides a Code of Conduct statement for all\r\nprojects to follow, to promote a welcoming and safe open source community.\r\n\r\nExposing the COC via a separate markdown file is a standard being\r\npromoted by Github via the Community Profile in order to meet their Open\r\nSource Guide's recommended community standards.\r\n\r\nAs you can see, adding this file will improve [the Mcrouter community profile](https://github.com/facebook/mcrouter/community)\r\nchecklist and increase the visibility of our COC.\r\n\r\n**test plan:**\r\nViewing it on my branch - \r\n<img width=\"1201\" alt=\"screen shot 2017-12-05 at 6 23 01 am\" src=\"https://user-images.githubusercontent.com/1114467/33611918-d6a43a26-d984-11e7-9bf8-8515d71b0158.png\">\r\n<img width=\"1208\" alt=\"screen shot 2017-12-05 at 6 23 19 am\" src=\"https://user-images.githubusercontent.com/1114467/33611920-d7dc2ae8-d984-11e7-9874-539dbb1b0add.png\">\r\n\r\n**issue:**\r\ninternal task t23481323", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Ngo-The-Trung": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/mcrouter/pulls/207", "title": "(Work in progress) Support binary protocol", "body": "An attempt at fixing https://github.com/facebook/mcrouter/issues/6\r\n\r\nForeword: I'm not good at C++ at all. All advices welcomed, especially advices on the approach - I'm not sure if this is the right way to do it at all (for instance, is using reinterpret_cast a proper way to parse network data?). \r\n\r\nTODO:\r\n- [ ] Early stop when encountering invalid opcode\r\n- [ ] Early stop when command violates field constraints (like having an extras field when there shouldn't be any)\r\n- [ ] Return binary responses\r\n- [ ] Support 'quiet' and 'key' variations of the commands.\r\n- [ ] Implements CAS field (not present in ascii protocol)", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "oguzy": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/mcrouter/pulls/205", "title": "Missing apt package", "body": "Also added required volumes", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Stantheman": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/mcrouter/pulls/204", "title": "Fix Dockerfile dependencies for add-apt-repository", "body": "The recipe scripts use the add-apt-repository command, which on Ubuntu 14.04 is provided by the software-properties-common command. Currently, the image fails to build once it hits the installation recipe.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tweibley": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/56042386", "body": "This was due to mismatched boost include files in /usr/local/include. Removed, rebuilt boost and updated includes.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/56042386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/56243666", "body": "I had manually compiled and installed the latest version of boost (like 1.5 or 1.6 or whatever). I then thought I completely removed the lib and include files, however the older include files remained even after building and installing the 1.4 or earlier version. I manually removed all of the boost files in the include dir and then ran make install again and everything was happy. Hope that helps!\n\nPS FWIW I was working on getting this to build on Ubuntu 12.04 which I've now done. I'll clean up my branch and send a PR if the facebook people are interested.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/56243666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/71521399", "body": "The connections are persistent in that they exist for the life of each application worker. In other words there is churn, but at minimum on a minutes basis, and normally on an hours basis.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/71521399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/71523460", "body": "https://gist.github.com/tweibley/84da345b8fce7add9373\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/71523460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76981915", "body": "Just a quick update: We were never able to get mcrouter to work right for our environment. We ended up switching to redis despite the penalty of higher memory usage. The free replication and excellent statistics were the icing on the cake. The fact that it \"just worked\" and the load on the boxes was < 1 was more than enough. @jamescarr might be worth a look depending on what features you need.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76981915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "genx7up": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/56200212", "body": "What was the mismatch? What is your Boost version? I am getting the same error with 1.56.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/56200212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "facebook-github-bot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/56329493", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/56329493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/57298147", "body": "Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/57298147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76067480", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76067480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/93859885", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/93859885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/96741899", "body": "Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/96741899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/98377174", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/98377174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/98435339", "body": "Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/98435339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/101915404", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/101915404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/101916657", "body": "Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/101916657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/111526287", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/111526287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/111550887", "body": "Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/111550887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/119410797", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/119410797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/120431081", "body": "Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/120431081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/125662399", "body": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/125662399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/125663851", "body": "Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/125663851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pavlo-fb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/56563339", "body": "@djinn sorry, we can't use your code without you signing a CLA. Please sign it and we'll be able to review your pull request. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/56563339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/57280441", "body": "Hi @jamescarr ,\nThanks for your questions.\n1) One can run mcrouter on each host, so clients will talk to local mcrouter instance. Mcrouter is mostly stateless (except TKO state and some other minor cases), so if it crashes (which shouldn't happen at all), the restart takes seconds and is mostly harmless. If the entire host goes down, we don't care about mcrouter on that box - it was used only by local services.\nIf memcached instance goes down, mcrouter can take care of it using [failover](https://github.com/facebook/mcrouter/wiki/List-of-Route-Handles#failoverroute).\n2) You are right, hash for the same key will be the same. Thus, mcrouter will route to the same server no matter where it runs. Of course, I assume mcrouter config and command line options are the same.\n3) Mcrouter doesn't care about backend IP address or architecture. If you swap a server (i.e. change some IP address in `servers` property of a pool), requests will be sent to the new one the same way they were sent to the old one (I assume you don't change size of pool).\nIf you expand/shrink the pool, only minimal possible number of requests will be rerouted (that's the property of [consistent hashing](http://en.wikipedia.org/wiki/Consistent_hashing)). So, if you have a pool with 9 servers and you add 1 more, only 10% of requests will be rerouted to the new box. If you remove 1 box out of 10, load on other 9 boxes will increase by 11.1% (initially they handled 10% of requests each, after shrink they will handle 11.1% each).\nAnother thing is the new box will, probably, be 'cold' (i.e. it will have no cache at all). Mcrouter can take care of it as well, check [Cold cache warm up](https://github.com/facebook/mcrouter/wiki/Cold-cache-warm-up-setup).\n\nHope that helps. Let me know if you have any further questions.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/57280441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/57399073", "body": "- \"ensuring shard computation stays consistent regardless of backends\" - the only thing you should change is host address in config (check [defining pools](https://github.com/facebook/mcrouter/wiki/Configuration#defining-pools), you need to modify `servers` list). Shard computation is based on key hash, so nothing will change if you replace one server with another (and update `servers` in config, of course).\n- Yeah, [ZooKeeper](http://zookeeper.apache.org/) or any analogue sounds like a good way to go. Tip: if you don't want to distribute the whole config when only one pool has changed (e.g. replace a server, like in previous question), you can split your config into multiple files (e.g. one file per pool). See [@import](https://github.com/facebook/mcrouter/wiki/JSONM#import).\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/57399073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/59996466", "body": "In this config sets and deletes are routed via `AllSyncRoute`. It sends a request to all servers in the pool and returns the worst reply, i.e. an error if some occurred. So, if some server is down, mcrouter will return \"SERVER_ERROR\", because it can not set a value to this server. Your get requests will still work - `LatestRoute` will failover a request silently.\nIf you don't want to get any errors on failed sets, use `AllAsyncRoute` instead of `AllSyncRoute`. It will return \"NOT_STORED\" immediately without even waiting for replies from servers.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/59996466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/60110609", "body": "Hi,\nAs I understand, you do not disable `memcached1` while sending GET requests?\nIf the first server was available and didn't return an error reply, `FailoverRoute` will _not_ send the request to second server. That's why you see all 1000 requests processed by `memcached1`. `FailoverRoute` will send to `memcached2` _only_ when it receives an error reply (miss counts for success) from `memcached1`.\nIf you want to send a request to `memcached2` on misses (i.e. when key is not found on `memcached1`), use [MissFailoverRoute](https://github.com/facebook/mcrouter/wiki/List-of-Route-Handles#missfailoverroute) instead of `FailoverRoute`.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/60110609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/60283883", "body": "Hi Maxim,\nYes, [mcrouter wiki](https://github.com/facebook/mcrouter/wiki) is the most comprehensive and up to date documentation for mcrouter.\nThanks for your feedback!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/60283883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/72264626", "body": "@ptrmcrthr we found a bug, thanks for the report. It will be fixed in next GitHub push (next week).\nFor now you can use \"set /dc/*/key\" and \"/dc/cluster1/\", \"/dc/cluster2/\" routing prefixes.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/72264626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/72996217", "body": "@ptrmcrthr your config makes perfect sense. It can be simplified a bit: there is no reason to create PrefixSelectorRoute without _policies_, you can use PoolRoute directly.\n\nRegarding broadcasting to the same cluster in multiple datacenters: it is a totally valid use case. We fixed the bug (see https://github.com/facebook/mcrouter/commit/ae7099758c376f9e9751b3b8d6879d9e0be1a50d ), feel free to use this approach.\nMinor note though: mcrouter is optimized for broadcasting to multiple clusters in the same datacenter, i.e. `/dc/*/` routing prefixes, not `/*/cluster/`. I don't think you'll notice a big performance difference, but in general `/dc/*/` will work a tap faster.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/72996217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/74788993", "body": "@0xd3adsh3ll thanks for the report. We explicitly disabled **flush_all** and **flush_regex** commands, because it may be very destructive to replicate them via mcrouter (it is very easy to break everything if some broken script sends those commands to production boxes). See https://github.com/facebook/mcrouter/blob/master/mcrouter/McrouterClient.cpp#L33\n\nWhat is your use case? If it is only for debugging/testing, we can add the support, but guard it with some command line option (like --enable-flush-command or --debug-mode).\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/74788993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76652639", "body": "AllSyncRoute returns the _worst_ reply, so if one server is down mcrouter returns an error (because it didn't manage to deliver request to both servers). If you don't care about errors that occur on write path (set and delete operations), use AllAsyncRoute instead of AllSyncRoute. Mcrouter will not wait for reply from memcached and will always return \"NOT_STORED\" for set and \"NOT_FOUND\" for delete.\nHope it helps.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76652639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76654814", "body": "> > if there is any config i can study for? like (#9)\n\nYour config is pretty much the same as in #9 .\n\n> > if there is any solution for blow Scene.\n\nI'm not sure what is \"blow Scene\", sorry.\n\n> > if one server is down,the mcrouter can write the data to other running memcached server.\n\nWith your current config mcrouter writes data to both memcached servers. You are probably confused with reply from mcrouter (in case one memcached is down, mcrouter returns SERVER_ERROR with your current config).\nThe reason is AllSyncRoute. It returns the _worst_ reply received from both memcached servers (i.e. when one server is down, mcrouter returns SERVER_ERROR). This error doesn't mean that request to other memcached server failed or wasn't sent.\nIf you don't want to see errors from mcrouter when one memcached is down, you can replace AllSyncRoute with AllAsyncRoute. In this case mcrouter will ignore replies from memcached and will return NOT_STORED for set/NOT_FOUND for delete.\n\n> > 3:if all the memached server is all in the same datacenter,if there is only one pools is enough?\n\nIn general, if you just want to replicate data to multiple memcached servers, you don't need multiple pools. But it doesn't mean your config is worse if you use 2 pools. If you still want to use one pool, check example in https://github.com/facebook/mcrouter/wiki/Replicated-pools-setup\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76654814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/85085279", "body": "@sebest you can just have a map of pools in a separate file (pools.json) and then use the following config:\n\nYour config, config.json:\n\n``` JavaScript\n{\n  \"macros\": {\n    \"all-pools\": {\n      \"type\": \"constDef\",\n      \"result\": \"@import(pools.json)\"\n    },\n\n    // list of routes for each pool [ \"PoolRoute|A\", \"PoolRoute|B\", ... ]\n    \"pool-routes\": {\n      \"type\": \"constDef\",\n      \"result\": {\n        \"type\": \"foreach\",\n        \"from\": \"@sort(@keys(%all-pools%))\",\n        \"use\": [ \"PoolRoute|%item%\" ]\n      }\n    },\n\n    // number of pools for failover: min(number of pools, 3)\n    \"failover-cnt\": {\n      \"type\": \"constDef\",\n      \"result\": {\n        \"type\": \"if\",\n        \"condition\": \"@less(@size(%pool-routes%), @int(3))\",\n        \"is_true\": \"@size(%pool-routes%)\",\n        \"is_false\": 3\n      }\n    },\n\n    // at most %failover-cnt% pool routes starting from %shift%\n    \"shiftedPoolRoutes\": {\n      \"type\": \"macroDef\",\n      \"params\": [ \"shift\" ],\n      \"result\": {\n        \"type\": \"foreach\",\n        \"from\": \"@range(@int(0), @sub(%failover-cnt%, @int(1)))\",\n        \"use\": [\n          \"@select(%pool-routes%, @mod(@add(%shift%, %item%), @size(%pool-routes%)))\"\n        ]\n      }\n    }\n  },\n\n  \"pools\": \"%all-pools%\",\n  \"route\": {\n    \"type\": \"OperationSelectorRoute\",\n    \"operation_policies\": {\n      \"get\": {\n        // Randomize on every request between children\n        \"type\": \"RandomRoute\",\n        \"children\": {\n          \"type\": \"foreach\",\n          \"from\": \"@range(@int(0), @sub(@size(%all-pools%), @int(1)))\",\n          \"use\": [\n            {\n              \"type\": \"MissFailoverRoute\",\n              \"children\": \"@shiftedPoolRoutes(%item%)\"\n            }\n          ]\n        }\n      },\n      \"set\": { \"type\": \"AllSyncRoute\", \"children\": \"%pool-routes%\" }\n    }\n  }\n}\n```\n\nCorresponding pools.json:\n\n``` JavaScript\n{\n  \"A\": { \"servers\": [\"172.27.132.244:11211\"] },\n  \"B\": { \"servers\": [\"172.27.135.40:11211\"] }\n}\n```\n\nTo get config without macros, one can send `get __mcrouter__.preprocessed_config` command to mcrouter.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/85085279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/87753206", "body": "@jamescarr there are couple of options you can tune to have desirable behavior of handling Soft TKOs.\nLet's see what happens with TKO logic step-by-step.\n\n_First of all, when is a box marked as \"Soft TKO\"?_\nAfter mcrouter has received >= **--timeouts-until-tko** timeouts in a row from this box. But only if total number of boxes marked as Soft TKO is less than **--maximum-soft-tkos**.\n\n_What about Hard TKO?_\nA box is marked as hard TKO after mcrouter has encountered connect error or connect timeout. Even one connect error/timeout is enough, mcrouter doesn't wait for **--timeouts-until-tko** to mark box as Hard TKO.\n\n_What happens after a box is marked as TKO (be it hard or soft)?_\nMcrouter starts sending `version` requests (aka probes) to this box. Every other request sent to this box is immediately discarded.\nFirst probe is sent after **--probe-timeout-initial** milliseconds since box was marked as TKO. \nInterval between consecutive probes exponentially grows until it reaches **--probe-timeout-max**.\n\n_When do we unmark the box marked as TKO?_\nOnce mcrouter gets a successful reply (not error or timeout) on **probe** request.\n\n_How do I check which servers are marked as TKO?_\nTry `stats servers` and `stats suspect_servers`[stats commands](https://github.com/facebook/mcrouter/wiki/Stats-commands)\n\n_Why do we need TKO logic at all?_\nUsually when some memcached server is slow/down/overloaded, we want to simply send request to a failover destination. Once memcached server is marked TKO, failover becomes is instant, we don't need to do 2 round trips (one to known slow/broken box, one to failover destination) for a request.\n\n_I don't want any TKO tracking!_\nOne can disable it with **--disable-tko-tracking**.\n\nThat said, try to tune TKO behavior using options described above. Increasing server timeout/limiting number of soft TKOs/decreasing first probe timeout may help if you see lots of errors caused by TKO behavior.\n\nIf you see any weird behavior (e.g. mcrouter incorrectly marks/unmarks box as TKO), please provide some details so we can find the root cause.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/87753206/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/88342579", "body": "Hi @deep011 \n1) Short answer: yes, expiration time in cold pool will not be the same as in warm pool.\nLong answer: WarmUpRoute was [updated](https://github.com/facebook/mcrouter/commit/0932605cf94a264f846f850321604713e7b85f9d) in today's release, now it can set the correct expiration time. **But** it uses META command to achieve this, which is an extension to memcache protocol introduced in facebook fork of memcached (https://github.com/facebookarchive/memcached). This repo is not supported anymore though. The only option I see is to implement META in upstream memcached.\nCurrently you can workaround this issue by setting some small `exptime` in WarmUpRoute to make sure value in cold pool expires faster than in warm pool.\n\n2) Lets assume the keys are consistent if all sets and deletes to all the replicas succeeded.\nIf one uses `AllSyncRoute` for sets/deletes, mcrouter will return \"successful\" reply (e.g. STORED/DELETED/NOT_FOUND) only when all replicated requests have succeeded. Client is responsible to retry in case of error, so we can make sure all replicated requests are delivered.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/88342579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/88346262", "body": "Sorry for the delay :(\n\n1) You can use FailoverRoute both to failover between pools and to failover between servers of one pool.\nFailover from pool A to pool B:\n\n``` JavaScript\n{\n  \"type\": \"FailoverRoute\",\n  \"children\": [ \"PoolRoute|A\", \"PoolRoute|B\" ]\n}\n```\n\nFailover from server 0 to server 1, 2, ... n of pool A:\n\n``` JavaScript\n\"FailoverRoute|Pool|A\"\n```\n\nor\n\n``` JavaScript\n{\n  \"type\": \"FailoverRoute\",\n  \"children\": \"Pool|A\"\n}\n```\n\n2) The same here, you can choose a route based on key hash. It works both with entire pools and servers of one pool (choosing servers of one pool is more useful option in my opinion).\nSharded pool:\n\n``` JavaScript\n{\n  \"type\": \"HashRoute\",\n  \"children\": \"Pool|A\"\n}\n```\n\nor, shorter:\n\n``` JavaScript\n\"HashRoute|Pool|A\"\n```\n\nalmost the same, but it also adds `AsynclogRoute` in front:\n\n``` JavaScript\n\"PoolRoute|A\"\n```\n\nTo choose different pools based on a key hash:\n\n``` JavaScript\n{\n  \"type\": \"HashRoute\",\n  \"children\": [ \"PoolRoute|A\", \"PoolRoute|B\" ]\n}\n```\n\n3) First config is correct. The only drawback is it always sends `get` requests to both servers, so may produce more traffic than is actually needed. Here is a bit \"fixed\" version:\n\n``` JavaScript\n{\n  \"pools\": {\n    \"cachea\": {\n      \"servers\":[\"172.16.200.98:11211\",\"172.16.200.99:11211\"]\n    }\n  },\n \"route\": {\n    \"type\": \"OperationSelectorRoute\",\n    \"operation_policies\": {\n      \"delete\": \"AllSyncRoute|Pool|cachea\",\n      // the difference is here: FailoverRoute instead of FastestRoute\n      \"get\": \"FailoverRoute|Pool|cachea\",\n      \"set\": \"AllSyncRoute|Pool|cachea\"\n    }\n }\n}\n```\n\nIn this \"fixed\" version all `get` requests are sent to \"172.16.200.98:11211\". But if it is down, gets will go to \"172.16.200.99:11211\".\n\nThe second config you proposed is broken, here is a version that is equivalent to the first one you proposed:\n\n``` JavaScript\n{\n    \"pools\": {\n        \"cache1\": {\n            \"servers\": [\n                \"172.16.200.98:11211\"\n            ]\n        },\n        \"cache2\": {\n            \"servers\": [\n                \"172.16.200.99:11211\"\n            ]\n        }\n    },\n    \"route\": {\n        \"type\": \"OperationSelectorRoute\",\n        \"default_policy\": \"PoolRoute|cache1\",\n        \"delete\": {\n            \"type\": \"AllSyncRoute\",\n            \"children\": [\n                \"PoolRoute|cache1\",\n                \"PoolRoute|cache2\"\n            ]\n        },\n        \"set\": {\n            \"type\": \"AllSyncRoute\",\n            \"children\": [\n                \"PoolRoute|cache1\",\n                \"PoolRoute|cache2\"\n            ]\n        },\n        \"get\": {\n            /**\n             * the same here: change to `FailoverRoute` if you want to send get requests to cache1, \n             * but if it is down, send them to cache2\n             */\n            \"type\": \"AllFastestRoute\",\n            \"children\": [\n                \"PoolRoute|cache1\",\n                \"PoolRoute|cache2\"\n            ]\n        }\n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/88346262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/125678232", "body": "Does it happen after around 1 or 2 minutes? According to http://stackoverflow.com/questions/8063590/unexpected-behaviour-after-memcached-server-restarts-how-to-configure-rectify-i this exception is thrown when connection is closed. Mcrouter by default closes inactive connections after a minute or so.\n\nCan you, please, pass `--reset-inactive-connection-interval=0` [command line option](https://github.com/facebook/mcrouter/wiki/Command-line-options)? This will make mcrouter keep opened connections forever (unless client disconnects by itself).\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/125678232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/125678995", "body": "Thank you! This was already fixed internally, I'll sync the GitHub repo ASAP. Sorry for the inconvenience.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/125678995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/125701803", "body": "GitHub synced, please pull the latest version. The build should work now.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/125701803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/125773266", "body": "Also can you clarify what is \"error code 47\"? What's the reply mcrouter sends? Is it \"CLIENT_ERROR\" or \"SERVER_ERROR\"?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/125773266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/126508000", "body": "We usually either run mcrouter on the same host as client or use it as a library inside the client binary.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/126508000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/126512691", "body": "Feel free to reopen if there is something else I can help.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/126512691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/126879346", "body": "Do you use binary protocol by any chance? Currently mcrouter supports only ASCII.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/126879346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/comments/21122556", "body": "OMG, it happened!\r\n![clap](https://cloud.githubusercontent.com/assets/7834475/23511892/69c4ac26-ff67-11e6-8ed1-ddb6e63a40b0.gif)\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/comments/21122556/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 1, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/comments/22324020", "body": "Can you add a unit test, please? It should be pretty easy to do. Just add smth like\r\n```javascript\r\n   \"macros\": {\r\n    \"a\": {\r\n        \"type\": \"macroDef\",\r\n        \"params\": [ { \"name\": \"a\", \"optional\": false, \"default\": 5 } ],\r\n        \"result\": \"%a%\"\r\n      }\r\n    },\r\n    \"ret\": \"@a\"\r\n```\r\nin `config_preprocessor_test_errors.json`. Thanks :)", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/comments/22324020/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/comments/22346589", "body": "![el-88pc-de-los-vendedores-online-utiliza-facebook-para-aumentar-sus-ventas-600x290](https://cloud.githubusercontent.com/assets/7834475/26640326/1a0e4858-4630-11e7-8642-3b2edad8ec1a.jpg)\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/comments/22346589/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "djinn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/57290288", "body": "I have signed the CLA. \n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/57290288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jamescarr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/57324973", "body": "Thanks for the reply! A few follow up questions. :-)\n- \"ensuring shard computation stays consistent regardless of backends\" - in our specific case on EC2, it is not uncommon for an instance to go south and we replace it with a new instance that has a different IP. Couldn't this cause some problems?\n- I actually thought about the same approach you mentioned... having each box run mcrouter as a way to interface with cache clusters. At the point the biggest concern is keeping the configuration consistent across clients (we currently have 56 servers that are clients to our cache boxes). I am guessing something like ZK, etcd or consul will come into play here. \n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/57324973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/57513580", "body": "Ah that was what I was curious about. So the array index is used for\ncomputing the key.\n\nOn Wed, Oct 1, 2014 at 1:28 PM, alikhtarov notifications@github.com wrote:\n\n> To add to Pavlo's answer, you should also make sure that the replacement\n> IP address is swapped at the same position in the array.\n> \n> For example, say you have \"servers\": [ \"ip1\", \"ip2\", \"ip3\" ] and ip2\n> breaks down. Then you replace it with ip4 like so: [ \"ip1\", \"ip4\", \"ip3\" ].\n> This guarantees that all keys that would be sharded to ip2 are now sharded\n> to ip4.\n> \n> The actual IP address is not used by mcrouter for hash computation, only\n> its position in the array and the number of hosts in the array.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/mcrouter/issues/5#issuecomment-57512434.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/57513580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/60347758", "body": "Here's another thing that began biting us a little bit. We had a single node get listed as TKO'd by mcrouter but there weren't any details as to why. Is there any way to tune the logging details to find out if a backend is removed because of latency or some other issue?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/60347758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/71047183", "body": "Cool one thing you might want to keep in mind is how to make the image smaller. See mine: \n\n```\njamescarr/mcrouter                1.0.0               206693e4f5d2        3 months ago        2.086 GB\n\n```\n\nA whopping 2GB! I haven't figured out how to make this smaller but I think it could be accomplished by building a `deb` of mcrouter and then installing it on a debian or busybox base image. \n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/71047183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76972737", "body": "Thanks this clears it all up. \n\nMy timeouts were unrelated it turned out. \n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76972737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76972985", "body": "If anyone wants some fun, it turned out that the cached value for the view context of our blog posts was weighing in at 6.5mb. Each. This got rejected but I think once we turned on big value splitting it overloaded our cache servers. ;-)\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76972985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76977847", "body": "This discussion actually does bring me to the next thing that is bugging me... what is the ideal number of proxies to run?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76977847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/77019488", "body": "@alikhtarov ah so if I have 4 cores then 4 proxies should be sufficient?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/77019488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/comments/7830651", "body": ":+1: I had actually just nuked the line in my branch to get past it but never did a PR :-/\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/comments/7830651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "0xd3adsh3ll": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/59879383", "body": "Oh, sorry. http://pastebin.com/9npbg57D \n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/59879383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/60036800", "body": "It's great! Thanks a lot pavlo-fb!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/60036800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/60091334", "body": "SET:\n1. Run java app (set mode) steps from 1 to 1000\n2. Create iptables rules for blocking memcached2 - ok, mcrouter \"set\" to memcached1 - no errors\n3. Delete iptables rules for memcached2 - ok, mcrouter delete \"TKO\" from memcached2 and \"set\" to all nodes - no errors\n4. Create iptables rules for blocking memcached1 - ok, mcrouter \"set\" to memcached2 - no errors\n5. Delete iptables rules for memcached1 - ok, mcrouter delete \"TKO\" from memcached1 and \"set\" to all nodes - no errors\n\nJava app stop, all 1000 requests a set, no errors\n\nGET:\n1. Run java app (get mode) steps from 1 to 1000\n2. Java app connect to mcrouter and do get keys and values from 1 to 1000\n3. Java app stop all 1000 requests and create stats file with info.\n4. I'm viewing log file from memcached1 and see 1000 get requests\n5. I'm viewing log file from memcached2 and don't see any requests. But \"get\" type - FailoverRoute\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/60091334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/60210249", "body": "Hello,\nThanks you very much! MissFailoverRoute - very well for me.\npavlo-fb, can you provide for me all documentation about mcrouter? Docs from github is full?\nWe starts high load project and mcrouter is amazing and the best solution for us.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/60210249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/60343313", "body": "Hello,\nOk, thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/60343313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/67475040", "body": "Hello, \nI'm sorry but maybe you have any information about my issue? \nI look forward to a response from your side.\nThanks you a lot for awesome project.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/67475040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/67601740", "body": "Hello,\nthanks for your reply.\n@Testinos my session.ini have a two strings for save_path\n1 - uncomment string 172.18.45.138.11213 - it's old instance memcached - work fine because without mcrouter\n2 - comment string 172.18.45.69:5000 - it's mcrouter - doesn't work \nSchema like this:\nOld work fine\n|--php_app (session.save_path = tcp://172.18.45.138:11213)\n|-------172.18.45.138:11213 - memcached server\n\nNew schema:\n\n|--php_app (session.save_path = tcp://172.18.45.69:5000)\n|\n|---mcrouter\n|-----------\"A\":{\"servers\":[\"172.18.45.100:11211\"]}\n|-----------\"B\":{\"servers\":[\"172.18.45.101:11211\"]}\ndon't work and app crash with error:\n\"session_write_close(): Failed to write session data (memcache). Please verify that the current setting of session.save_path is correct (tcp://172.18.45.69:5000)\"\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/67601740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/67644055", "body": "Oh...\nCan you tell me please route AllAsyncRoute doesn't work in mcrouter? I can't find AllAsyncRoute in wiki.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/67644055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/67840476", "body": "@Testinos hello\ncurrently my mcrouter config is:\nhttp://pastebin.com/wKu7c6Cp\nand my /etc/php5/conf.d/session.ini:\nhttp://pastebin.com/1UfTGeNs\nSo, application work fine, I don't have any errors, but if config of mcrouter replace on:\nhttp://pastebin.com/zuzut4Mw\nthen application doesn't work with errors:\n\"session_write_close(): Failed to write session data (memcache). Please verify that the current setting of session.save_path is correct (tcp://mcrouter:5000)\"\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/67840476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/67840786", "body": "\"sets\" doesn't work correctly with AllAsyncRoute? I need replicated \"set\" to both servers with memcached and async the best solution for this but I don't understand why it doesn't work.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/67840786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/67844921", "body": "@ryanmce I think AllFirstRoute good idea for me, and it's works very well. \nThanks a lot.\nP.S. I'm confused because I'm was testing configuration with \"AllAsyncRoute\" with memcached php function \"add_server\" and this works fine, also I'm was testing with java app and work fine too, but php5 and memcached.so don't works. :(\nI close this issue.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/67844921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/74631789", "body": "I tried to clear the cache with command:\necho -ne \"flush_all\\r\\n\" | nc 0 5000\nSERVER_ERROR Command not supported\nBut get an error.\n\nAlso, my php app can't reset cache via memcache: http://php.net/manual/en/memcache.flush.php\n\nphp_app (do action reset_cache)\n|\n| -- php_method (Memcache::flush ( mcrouter.local:5001 ))\n|\n| -- part of syslog error: [2015-02-16 13:40:18] project.ERROR: could not connect to memcache {\"host\":\"mcrouter.local\",\"port\":5001.....\n\nCan you provide information about rules \"how to flush_all/flush_regex via mcrouter\", please?\nI see of your code:\n [mc_op_flushall] = 22 /\\* flush_all <delay>\\r\\n _/,\n[mc_op_flushre] = 14 /_ flush_regex <re>\\r\\n _/,\n[mc_op_stats] = 8 /_ stats <args>\\r\\n */,\nWhy some of commands works fine (e.g. stats) but some of those doesn't work?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/74631789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/74818186", "body": "Hello, @pavlo-fb,\nMemcache::flush needs for new releases of our projects:\n\nansible\n|\n|-- production_servers (remove old code, create new release folder, prepare env)\n|-- control_panel (clear all cached data after release because we stored some temporary settings in cache which must be removed.)\n\nI have question, if send flush_all directly on memcached servers bypassing mcrouter? It's possible?\nThanks.\n\n|--\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/74818186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/74845398", "body": "@ryanmce, thanks!\nIf @pavlo-fb can enable: \"If it is only for debugging/testing, we can add the support, but guard it with some command line option (like --enable-flush-command or --debug-mode)\" It's be a perfectly.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/74845398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/75706591", "body": "Hello, @pavlo-fb, @ryanmce tell me please, you can enable \"--enable-flush-command\"?\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/75706591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/75721016", "body": "Hello @andreazevedo, \nThanks for your reply, I understand the risk but could you please enable \"flush_all\"  via mcrouter, this need for our project.\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/75721016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76698855", "body": "@liyufu\nmy config: http://pastebin.com/E1tVfAH0\nThis config works fine on production about 1 month.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76698855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76893540", "body": "Hello @andreazevedo,\nThanks a lot :)\nI'm close this ticket. You are awesome! :)\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76893540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/77448381", "body": "Hello @liyufu,\nI'm use:\nfor delete - AllSyncRoute - works fine with my app, AllAsyncRoute works fine too, but it's two different methods.\nfor set - MissFailoverRoute, if memcached1 marked as TKO (down, unreachable, etc) then request send to memcached2, if memcached2 can't response mcrouter return error.\nfor get - AllFastestRoute, get from fastest node (memcached1 or memcached2)\n\nI'm don't use FailoverRoute because: \"If the first server was available and didn't return an error reply, FailoverRoute will not send the request to second server.\"\nIf you have more questions please see facebook group https://www.facebook.com/groups/mcrouter/ or create new issue.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/77448381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/95539051", "body": "Hello. For testing I'm install new server with: nginx 1.6, php5-fpm 5.5.23-1 and extensions: php5-curl php5-pgsql php5-memcache php5-mcrypt php5-intl php5-xdebug php5-gd php-gettext.\nI have one server with php5-fpm and php application, one server with mcrouter cloning from master and two servers with memcached. My php.ini: http://pastebin.com/LrRqPceR You can see \"session.save_path = \"tcp://172.18.45.69:5000\"\" and \"session.save_path = \"tcp://172.18.45.82:11211\"\", if php.ini set conection via mcrouter my php application response very slow: HTTP request {\"method\":\"GET\",\"uri\":\"/index\",\"gen_time\":30.933,\"db_time\":0.049022965301514,\"cache_time\":0.16343712806702,\"params\":\"[]\"} and as you requesting I'm running ngrep on mcrouter port, this is dump: http://pastebin.com/VzWcmhEi\nBelow I replace connection via mcrouter to direct connection to memcached server and get this, my php.ini: http://pastebin.com/pqZXEPZV and ngrep dump: http://pastebin.com/d4TbHwSz and page loading normally: HTTP request {\"method\":\"GET\",\"uri\":\"/index\",\"gen_time\":0.775,\"db_time\":0.031301010101318,\"cache_time\":0.15716958045959,\"params\":\"[]\"}\nFor understandig:\n172.18.45.31 - php application\n172.18.45.69 - mcrouter\n172.18.45.82 - memcached server\nMy mcrouter config: http://pastebin.com/QbQRH0K0\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/95539051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/109864497", "body": "Hello. @andreazevedo. We don't use mcrouter anymore. You can close this issue.\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/109864497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "swar0g": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/59884555", "body": "@alikhtarov Indeed, you Are Right, that's It. Downgrade to 1.55 solves the pb. Works as expected, even better. Thx for support and for sharing such amazing tool.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/59884555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/61940977", "body": "Works just fine! Thank you.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/61940977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bryanhelmig": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/60505782", "body": ":+1: Thanks, I think that will help improve visibility!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/60505782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "corny813": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/61047735", "body": "Thanks.After change system to Ubuntu 14.04 64 bit  the error gone. When using Ubuntu 12.04 or Ubuntu 14.04 32 bit it is still not okay\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/61047735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "crazzy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/62469412", "body": "I compiled and installed both folly, fbthrift and mcrouter manually, in that order. \n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/62469412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "aesdana": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/64263404", "body": "Oh, no, it's not working right now, so I'm trying to fix it and make another pull request\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/64263404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/64427348", "body": "Thanks, waiting for the update!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/64427348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/64446936", "body": "Confirming with Ubuntu 14.04 and libdouble-conversion-dev=2.0.1-1. I've modified folly.sh like that http://pastebin.com/peXaB2N7 because of errors with missing SConstruct.double-conversion in folly repository. \n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/64446936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/64595118", "body": "I've tried to use saved copy of SConscript.double-conversion that I found in google search but it still fails with //usr/lib/x86_64-linux-gnu/libdouble-conversion.so.1: error adding symbols: DSO missing from command line\nIs there any way to build mcrouter right now without waiting for updates?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/64595118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/64744998", "body": "Yep, that worked for me. Thanks a lot!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/64744998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Testinos": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/65109850", "body": "@alikhtarov mysql memcached present namespace, namespace it is dedicated tables in database for storage data.\nExample: \nmysql memcached database(database: memcached, tables \"sessions\", \"default\")\ntelnet 127.0.0.1 11211 (one connection for next 4 steps) \n1) get @@sessions (set namespace)\n2) set test (set key for \"sessions\" namespace)\n3) get @@default \n4) set test1 (set key for \"default\" namespace)\n\nreferer: http://dev.mysql.com/doc/refman/5.6/en/innodb-memcached-intro.html (ctrl + F \"Namespaces\") \n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/65109850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/65366529", "body": "@exception0x876, All right. \nSo possible improve this in mcrouter? \n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/65366529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/65550705", "body": "I see implementation this, example:\n*I have 4 namespace\nAnnounce this 4 namespaces in mcrouter config, without depending Route Handles.\nFor every announce namespace create dedicated connection pool to memcached servers,  and so if client after connect to mcrouter send command (\"get @@namespace\") send all traffic from this source connection to specially connection pool with command (\"get @@namespace\".)\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/65550705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/65780018", "body": "Thanks for reply. \n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/65780018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/67561363", "body": "@0xd3adsh3ll,\nprovided your config is not correct,\n-->>session.save_path is correct (tcp://172.18.45.69:5000)\nsession.ini have different setting. \nmcrouter wrong config, \n-->> \"A\":{\"servers\":[\"172.18.45.100:11211\"]},\n        \"B\":{\"servers\":[\"172.18.45.101:11211\"]}\nYou memcached server 172.18.45.138:11213\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/67561363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/67612633", "body": "@0xd3adsh3ll, \nset key via telnet work fine?\n-> telnet 172.18.45.69 5000\n-> set test 0 60 4\n->1234 \n\nand show mcrouter log file or output. \n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/67612633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/67657025", "body": "@0xd3adsh3ll  Information from this issue https://github.com/facebook/mcrouter/issues/8 AllAsyncRouter router work. \nIf you don't want get error if one server down try usage option for set \"AllFastestRoute\"\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/67657025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "exception0x876": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/65196862", "body": "@alikhtarov thing is mcrouter uses connection pooling as stated in documentation and namespaces work per connection. So mcrouter should know which namespace to use on a destination connection based on source connection namespace.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/65196862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "max-abramowitz-reif-ck": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/65312053", "body": "Thanks for the help! Upped the RAM on the machine and everything installed fine\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/65312053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "czerwina": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/67392477", "body": "Please no one try this - was a total nightmare and a waste of effort. Got hold of a Rhel6.2 server and built mcrouter fairly quickly once had all the dependancies downloaded!!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/67392477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "juggernauts": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/67444616", "body": "Awesome, make sense. I tried that and works just as fine. Thanks for developing this awesome tool.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/67444616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ryanmce": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/67841767", "body": "The all async route always returns \"not stored\" since it returns to the client before it hears back from the server. The client interprets this as an error. You should use something like the all first route or the all sync route, or change your client to interpret \"not stored\" as a non-error.\n\n> On Dec 22, 2014, at 7:12 AM, 0xd3adsh3ll notifications@github.com wrote:\n> \n> \"sets\" doesn't work correctly with AllAsyncRoute? I need replicated \"set\" to both servers with memcached and async the best solution for this but I don't understand why it doesn't work.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/67841767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/72515666", "body": "`gets` and `cas` are fundamentally point-to-point operations. I don't think that a one-to-many broadcast can achieve the aims of a `cas` operation (which is that a writer can only update the value if no one else has written in the mean time).\n\nI don't think either operation makes sense when broadcast. For example, if you run a `gets` to multiple boxes at the same time, which token does mcrouter return to the client? If you run a `cas` to those same set of boxes, at most one could succeed (whichever's token is sent back in the cas call).\n\nIf you take a step back and describe the problem you want to solve, we may be able to suggest ways mcrouter could help.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/72515666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/74829522", "body": "Yes, mcrouter doens't modify the behavior of memcached at all, so if you\nsend a flush all command directly to the memcached server, it will behave\nnormally.\n\nOn Tue, Feb 17, 2015 at 10:10 PM, 0xd3adsh3ll notifications@github.com\nwrote:\n\n> Hello, @pavlo-fb https://github.com/pavlo-fb,\n> Memcache::flush needs for new releases of our projects:\n> \n> ansible\n> |\n> |-- production_servers (remove old code, create new release folder,\n> prepare env)\n> |-- control_panel (clear all cached data after release because we stored\n> some temporary settings in cache which must be removed.)\n> \n> I have question, if send flush_all directly on memcached servers bypassing\n> mcrouter? It's possible?\n> Thanks.\n> \n> |--\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/mcrouter/issues/29#issuecomment-74818186.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/74829522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/77701149", "body": "mcrouter does not currently support the memcached binary protocol. It does have a mcrouter-to-mcrouter binary protocol called umbrella, but memcached doesn't know how to parse it, so it's only useful in routing networks.\n\n> On Mar 7, 2015, at 3:03 AM, liyufu notifications@github.com wrote:\n> \n> @renchap\n> \n> if the binary protocol have a good performance to the ascii protocol?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/77701149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "int": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/70352565", "body": "We have a [Dockerfile](https://github.com/facebook/mcrouter/blob/master/mcrouter/scripts/docker/Dockerfile) in our repo now.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/70352565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/71237978", "body": "That you could.  Share with the [mcrouter community](https://www.facebook.com/groups/mcrouter/) if you make it. :)\n\nThe image built off our [Dockerfile](https://github.com/facebook/mcrouter/blob/master/mcrouter/scripts/docker/Dockerfile) results in a size of ~290M.  We have tried to make the image as small as possible:\n- use a single `RUN`: to avoid intermediate (fat) layers (virtual size always adds up, not just the final layer per se)\n- remove unneeded lib and headers both system-wide and hand-installed (among which `boost` header is hugest like 100M+)\n- strip resulting `mcrouter` binary (-90M)\n- remove any src/obj we grabbed/generated which we dont need to run mcrouter\n\nThere's also this [docker squash](https://github.com/jwilder/docker-squash) tool that you might check out. Cant squeeze much for ours as we've already removed all the fat. Hopefully it could save some space for yours. =)\n\nI'm closing this issue as we have this [Dockerfile](https://github.com/facebook/mcrouter/blob/master/mcrouter/scripts/docker/Dockerfile) in our repo now.  We also added links to your Dockers to the [mcrouter installation wiki](https://github.com/facebook/mcrouter/wiki/mcrouter-installation#third-party-dockers).  Thanks.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/71237978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/101051953", "body": "Thanks @censored.  We've updated the wiki:  https://github.com/facebook/mcrouter/wiki/List-of-Route-Handles#allasyncroute . \n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/101051953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/101080132", "body": "Thanks @censored for the report.  Fix is ready and push is on the way.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/101080132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "johnwilliams": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/71909089", "body": "@alikhtarov We saw lots of timeouts and high latency. It should also be noted that connections directly to the memcached instances did not experience the high latency.  Here is an example of what we saw in \"stats servers\": Note: 10.10.0.x is the local datacenter.\n\nhttps://gist.github.com/johnwilliams/e8bd428715b7c068f2f4\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/71909089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/72031424", "body": "@alikhtarov I did a small scale test that resulted in timeouts like I posted above. Here is what I saw in htop:\n\nhttps://gist.github.com/johnwilliams/4f0a480e876d28ec4344\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/72031424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ptrmcrthr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/72237253", "body": "Cool \u2014\u00a0I am using the docker file included in the github repo. I also found that `set /dc1/def*/mykey` causes a crash using the above config. `set /dc1/default/mykey` and `set /dc1/*/mykey` work correctly.\n\nThe config I am testing is pretty much copied from the example on https://github.com/facebook/mcrouter/wiki/Routing-Prefix\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/72237253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/72930201", "body": "@pavlo-fb can you advise if i'm doing something wrong trying to broadcast DELETEs and SETs to the same cluster at two datacenters? Does my config make sense for that?\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/72930201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "solidfoxrock": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/72376627", "body": "Thanks for your answer @alikhtarov, but then how do we replicate `cas` to all replicas? (assuming we're using `cas` instead of `set` everywhere). It looks impossible to me, but I'm still not sure.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/72376627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/72595472", "body": "Hi Ryan, actually I had no problem with this yet. Recently our team was playing with a third party memcached client written in golang, and by default it uses `gets` and `cas`, instead of `get` and `set`, so I just wonder if it can play well with our current mcrouter setup. I didn't dig deep enough to understand the nature of `gets` and `cas`, but now I know that it doesn't make sense to broadcast these operations, thanks to your helpful explanation.\n\nBest,\nKien\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/72595472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/119000950", "body": "@alikhtarov Hi, I just use simple command line options like this `mcrouter -p <port> --use-asynclog-version2 -f <config-file.conf>`. Below is my config file:\n\n```\n{\n  \"pools\": {\n    \"mypool\": {\n      \"servers\": [\n        \"cache1:11211\",\n        \"cache2:11211\",\n        \"cache3:11211\"\n      ]\n    }\n  },\n  \"route\": {\n    \"type\": \"OperationSelectorRoute\",\n    \"operation_policies\": {\n      \"delete\": \"AllFastestRoute|Pool|mypool\",\n      \"set\": \"AllFastestRoute|Pool|mypool\",\n      \"add\": \"AllFastestRoute|Pool|mypool\",\n      \"incr\": \"AllFastestRoute|Pool|mypool\",\n      \"decr\": \"AllFastestRoute|Pool|mypool\",\n      \"get\": {\n        \"type\": \"FailoverRoute\",\n        \"children\": [\n          \"RandomRoute|Pool|mypool\",\n          \"LatestRoute|Pool|mypool\"\n        ]\n      }\n    }\n  }\n}\n```\n\nI use a rather old version of mcrouter, the commit is `fb5eea8`.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/119000950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/119198119", "body": "Thanks @alikhtarov, I will upgrade our mcrouter and test this again\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/119198119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/120321191", "body": "Hi @alikhtarov, to increase server timeout which options should I use? Because I see that `--server-timeout` is deprecated:\n\n```\n-t, --server-timeout     server timeout in ms (DEPRECATED try to use cluster-server-timeout and regional-server-timeout) [default: 1000]\n```\n\nBut I don't see `cluster-server-timeout` and `regional-server-timeout` options. Does this actually mean `--cluster-pools-timeout` and `--regional-pools-timeout` instead?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/120321191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/122526739", "body": "@alikhtarov Hi, it's much better with the latest mcrouter version. I still see one or two timeouts once in a while, but it's totally acceptable for me. May I ask for some information about your TKO bugfixes?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/122526739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jeffbyrnes": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/75752769", "body": "Would love some help. Writing an upstart script, actually, since I'm using Ubuntu 14.04. I'll post my script once I get to my desk.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/75752769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/75767310", "body": "@andreazevedo ok, here's what I have right now:\n\n``` bash\n# mcrouter - memcached protocol router\n#\n# mcrouter is a memcached protocol router for\n# scaling memcached deployments\n\ndescription \"memcached protocol router\"\n\nstart on runlevel [2345]\nstop on runlevel [2345]\n\nexpect daemon\n\nsetuid mcrouter\n\nenv PID_PATH=\"/var/run/\"\n\nscript\n    PROG_ARGS=\"--async-dir=/mnt/mcrouter/spool\"\n    PROG_ARGS=\"$PROG_ARGS --route-prefix=/dc1/all/\"\n    PROG_ARGS=\"$PROG_ARGS --send-invalid-route-to-default\"\n    PROG_ARGS=\"$PROG_ARGS --num-proxies=16\"\n    PROG_ARGS=\"$PROG_ARGS --stats-root=/mnt/mcrouter/stats\"\n    PROG_ARGS=\"$PROG_ARGS --log-path=/mnt/mcrouter/log/mcrouter.log\"\n    PROG_ARGS=\"$PROG_ARGS --background\"\n    PROG_ARGS=\"$PROG_ARGS --managed-mode\"\n    PROG_ARGS=\"$PROG_ARGS --port=11211\"\n    PROG_ARGS=\"$PROG_ARGS --config-file=/etc/mcrouter/mcrouter.json\"\n\n    exec /usr/local/bin/mcrouter \"$PROG_ARGS\"\nend script\n```\n\nwhich results in:\n\n```\nI0224 14:30:31.232331 22647 main.cpp:466] /usr/local/bin/mcrouter --async-dir=/mnt/mcrouter/spool --route-prefix=/dc1/all/ --send-invalid-route-to-default --num-proxies=16 --stats-root=/mnt/mcrouter/stats --log-path=/mnt/mcrouter/log/mcrouter.log --background --managed-mode --port=11211 --config-file=/etc/mcrouter/mcrouter.json \nE0224 14:30:31.232633 22647 mcrouter_config.cpp:52] no configuration source\nmcrouter 1.0\nusage: /usr/local/bin/mcrouter [options] -p port(s) -f config\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/75767310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/75825480", "body": "@andreazevedo yep, works great. Mcrouter kicks off and runs without issues. Apologies for not mentioning that earlier.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/75825480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/75825582", "body": "I'm most confused why it thinks there's \u201cno configuration source\u201d, when I\u2019m clearly specifying one.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/75825582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/75845444", "body": "Damned bash\u2026 quoting works weirdly in this case. Removed the double quotes around `$PROG_ARGS` in the `exec` call and it works.\n\nFull script:\n\n``` bash\n# mcrouter - memcached protocol router\n#\n# mcrouter is a memcached protocol router for\n# scaling memcached deployments\n\ndescription \"memcached protocol router\"\n\nstart on runlevel [2345]\nstop on runlevel [2345]\n\nexpect daemon\n\nsetuid mcrouter\n\nenv PID_PATH=\"/var/run/\"\n\nscript\n    PROG_ARGS=\"--async-dir=/mnt/mcrouter/spool\"\n    PROG_ARGS=\"$PROG_ARGS --route-prefix=/dc1/all/\"\n    PROG_ARGS=\"$PROG_ARGS --send-invalid-route-to-default\"\n    PROG_ARGS=\"$PROG_ARGS --num-proxies=16\"\n    PROG_ARGS=\"$PROG_ARGS --stats-root=/mnt/mcrouter/stats\"\n    PROG_ARGS=\"$PROG_ARGS --log-path=/mnt/mcrouter/log/mcrouter.log\"\n    PROG_ARGS=\"$PROG_ARGS --background\"\n    PROG_ARGS=\"$PROG_ARGS --managed-mode\"\n    PROG_ARGS=\"$PROG_ARGS --port=11211\"\n    PROG_ARGS=\"$PROG_ARGS --config-file=/etc/mcrouter/mcrouter.json\"\n\n    exec /usr/local/bin/mcrouter $PROG_ARGS\nend script\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/75845444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/75846063", "body": "Closed this too soon\u2026 starts up properly now, but then Upstart loses track of mcrouter & isn't aware of status or how to stop mcrouter.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/75846063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/75862478", "body": "Ok, final version of said script. No longer using the `background` or `managed-mode` flags:\n\n``` bash\n# mcrouter - memcached protocol router\n#\n# mcrouter is a memcached protocol router for\n# scaling memcached deployments\n\ndescription \"memcached protocol router\"\n\nstart on runlevel [2345]\nstop on runlevel [2345]\n\nrespawn\n\nsetuid mcrouter\n\nscript\n    PROG_ARGS=\"--async-dir=/mnt/mcrouter/spool\"\n    PROG_ARGS=\"$PROG_ARGS --route-prefix=/dc1/all/\"\n    PROG_ARGS=\"$PROG_ARGS --send-invalid-route-to-default\"\n    PROG_ARGS=\"$PROG_ARGS --num-proxies=16\"\n    PROG_ARGS=\"$PROG_ARGS --pid-file=/var/run/mcrouter/mcrouter.pid\"\n    PROG_ARGS=\"$PROG_ARGS --stats-root=/mnt/mcrouter/stats\"\n    PROG_ARGS=\"$PROG_ARGS --log-path=/mnt/mcrouter/log/mcrouter.log\"\n    PROG_ARGS=\"$PROG_ARGS --port=11211\"\n    PROG_ARGS=\"$PROG_ARGS --config-file=/etc/mcrouter/mcrouter.json\"\n\n    exec /usr/local/bin/mcrouter $PROG_ARGS\nend script\n```\n\nThis works solidly, starts & stops properly, and respawns the mcrouter process if it dies.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/75862478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76001773", "body": "@andreazevedo oh MAN! That is hugely helpful for writing a Chef cookbook. Being able to render out JSON files is way simpler than building a set of CLI flags. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76001773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/119582972", "body": ":+1: on this\n\nAlso, I\u2019ve signed the Facebook CLA on behalf of EverTrue for myself and @eherot.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/119582972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "chrisgray": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76071065", "body": "Just finished signing up to be a contributor.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76071065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "liyufu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76651291", "body": "@0xd3adsh3ll \nhttp://pastebin.com/Wfn08B5F\n\nyour config file can't opened anywhere , i have some problem as you writed,now my config is not run the AllAsyncRoute ,please help me for you config, thanks!.\n\naddtion:there is my issue,\nhttps://github.com/facebook/mcrouter/issues/33\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76651291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76653056", "body": "if there is any config i can study for? like (https://github.com/facebook/mcrouter/issues/9)\nif there is any solution for blow Scene.\nif one server is down,the mcrouter can write the data to other running memcached server.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76653056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76665425", "body": "Thanks for the reply! A few follow up questions. :-)\n\n> 1 \uff1a In some cases,the type FailoverRoute is only used between multiple pools. \n> \n> 2\uff1aThe Sharded Pools is often used between one pool with multiple  memcached servers or between multiple pools ?\n> \n> 3\uff1aI want to config the cache server like this picture\u3002\n>    While the mc1(memecached1) is down, the all mcrouter can send the requests(get\\set\\delete) to the mc2(memecached2)\uff0cthe mc1 and mc2 server data is Replicated ,how to config it.\n\n![enter image description here](http://piccn.xingyun.cn/media/users/xingyu/123/36/100200944669_1233627.jpg)\n\nmy config\n\n# config1\n\n```\n{\n  \"pools\": {\n    \"cachea\": {\n      \"servers\":[\"172.16.200.98:11211\",\"172.16.200.99:11211\"]\n    }\n  },\n \"route\": {\n    \"type\": \"OperationSelectorRoute\",\n    \"operation_policies\": {\n      \"delete\": \"AllSyncRoute|Pool|cachea\",\n      \"get\": \"AllFastestRoute|Pool|cachea\",\n      \"set\": \"AllSyncRoute|Pool|cachea\"\n    }\n }\n}\n```\n\n# config2\n\n```\n{\n    \"pools\": {\n        \"cache1\": {\n            \"servers\": [\n                \"172.16.200.98:11211\"\n            ]\n        },\n        \"cache2\": {\n            \"servers\": [\n                \"172.16.200.99:11211\"\n            ]\n        }\n    },\n    \"routes\": [\n        {\n            \"route\": {\n                \"type\": \"OperationSelectorRoute\",\n                \"default_policy\": \"PoolRoute|cache1\",\n                \"delete\": {\n                    \"type\": \"AllSyncRoute\",\n                    \"children\": [\n                        \"PoolRoute|cache1\",\n                        \"PoolRoute|cache2\"\n                    ]\n                },\n                \"set\": {\n                    \"type\": \"AllSyncRoute\",\n                    \"children\": [\n                        \"PoolRoute|cache1\",\n                        \"PoolRoute|cache2\"\n                    ]\n                },\n                \"get\": {\n                    \"type\": \"AllFastestRoute\",\n                    \"children\": [\n                        \"PoolRoute|cache1\",\n                        \"PoolRoute|cache2\"\n                    ]\n                }\n            }\n        },\n        {\n            \"route\": {\n                \"type\": \"FailoverRoute\",\n                \"children\": [\n                    \"cache1\",\n                    \"cache2\"\n                ]\n            }\n        }\n    ]\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76665425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76880568", "body": "@0xd3adsh3ll \nThanks , you almost never used the FailoverRoute  ?\n\nif memcached1 is downed?the mcrouter can get data from memcached2?\n\nafter memcached1  is resolved and started, how to solve the memcached2 is empty problem?\n\nthanks\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/76880568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/77489466", "body": "Thanks.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/77489466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/77684282", "body": "if the mcrouter currently supports  the binary protocol now?\n@renchap\nif the binary protocol have a good performance to the ascii protocol?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/77684282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/77684337", "body": "@renchap \n\nif the binary protocol have a good performance to the ascii protocol?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/77684337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mosesgumi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/78415036", "body": "it is working now, but i have to call the mcrouter this way\n\nwebapp@ip-10-11-13-50:~$ ~/mcrouter-install/install/bin/mcrouter --help\nmcrouter 1.0\nusage: /home/webapp/mcrouter-install/install/bin/mcrouter [options] -p port(s) -f config\n\nlibmcrouter options:\n\n  Startup\n        --asynclog-disable                           disable async log file spooling\n    -a, --async-dir                                  container directory for async storage spools [default: \"/var/spool/mcrouter\"]\n        --use-asynclog-version2                      Enable using the asynclog version 2.0\n        --num-proxies                                adjust how many proxy threads to run [default: 1]\n        --disable-priorities                         don't use event base priorities\n        --no-realtime                                when run as root, mcrouter is run with realtime priority to improve latency. Use this option to disable realtime-priority when run as root\n        --big-value-split-threshold                  If 0, big value route handle is not part of route handle tree,else used as threshold for splitting big values internally [default: 0]\n        --fibers-max-pool-size                       Maximum number of preallocated free fibers to keep around [default: 1000]\n        --fibers-stack-size                          Size of stack in bytes to allocate per fiber. 0 means use fibers library default. [default: (16 \\* 1024)]\n        --fibers-debug-record-stack-size             Record exact amount of fibers stacks used (expensive: debug only!)\n        --runtime-vars-file                          Path to the runtime variables file. [default: \"\"]\n        --file-observer-poll-period-ms               How often to check inotify for updates on the tracked files. [default: 100]\n        --file-observer-sleep-before-update-ms       How long to sleep for after an update occured (a hack to avoid partial writes). [default: 1000]\n\n  Network\n    -K, --keepalive-count                            set TCP KEEPALIVE count, 0 to disable [default: 0]\n    -i, --keepalive-interval                         set TCP KEEPALIVE interval parameter in seconds [default: 60]\n    -I, --keepalive-idle                             set TCP KEEPALIVE idle parameter in seconds [default: 300]\n        --reset-inactive-connection-interval         Will close open connections without any activity after at most 2 \\* interval ms. If value is 0, connections won't be closed. [default: 60000]\n        --tcp-rto-min                                adjust the minimum TCP retransmit timeout (ms) to memcached [default: -1]\n        --target-max-inflight-requests               Maximum inflight requests allowed per target per thread (0 means no throttling) [default: 0]\n        --target-max-pending-requests                Only active if target-max-inflight-requests is nonzero. Hard limit on the number of requests allowed in the queue per target per thread.  Requests that would exceed this limit are dropped immediately. [default: 100000]\n        --target-max-shadow-requests                 Hard limit on the number of shadow requests allowed in the queue per target per thread.  Requests that would exceed this limit are dropped immediately. [default: 1000]\n        --no-network                                 Debug only. Return random generated replies, do not use network.\n        --proxy-max-inflight-requests                If non-zero, sets the limit on maximum incoming requests that will be routed in parallel by each proxy thread.  Requests over limit will be queued up until the number of inflight requests drops. [default: 0]\n        --proxy-max-throttled-requests               Only active if proxy-max-inflight-requests is non-zero. Hard limit on the number of requests to queue per proxy after there are already proxy-max-inflight-requests requests in flight for the proxy. Further requests will be rejected with an error immediately. 0 means disabled. [default: 0]\n        --pem-cert-path                              Path of pem-style certificate for ssl [default: \"\"]\n        --pem-key-path                               Path of pem-style key for ssl [default: \"\"]\n        --pem-ca-path                                Path of pem-style CA cert for ssl [default: \"\"]\n        --destination-rate-limiting                  If not enabled, ignore \"rates\" in pool configs.\n        --enable-qos                                 If enabled, sets the spacified qos level in the ip packages. \n        --default-qos-class                          Default qos class to use if qos is enabled and not specified. [default: 0]\n\n  Routing configuration\n        --constantly-reload-configs  \n        --disable-reload-configs  \n    -f, --config-file                                load configuration from file [default: \"\"]\n        --config-str                                 Configuration string provided as a command line argument [default: \"\"]\n    -R, --route-prefix                               default routing prefix (ex. /oregon/prn1c16/) [default: \"/././\"]\n        --disable-miss-on-get-errors                 Disable reporting get errors as misses\n        --group-remote-errors                        Groups all remote (i.e. non-local) errors together, returning a single result for all of them: mc_res_remote_error\n        --upgrading-l1-exptime                       0 means that we will use the L2 exptime. Otherwise, when upgrading this value is used as the exptime for all requests [default: 0]\n        --send-invalid-route-to-default              Send request to default route if routing prefix is not present in config\n        --enable-flush-cmd                           Enable flush_all command\n\n  TKO probes\n        --disable-tko-tracking                       Disable TKO tracker (marking a host down for fast failover after a number of failures, and sending probes to check if the server came back up).\n    -r, --probe-timeout-initial                      TKO probe retry initial timeout in ms [default: 10000]\n        --probe-timeout-max                          TKO probe retry max timeout in ms [default: 60000]\n        --timeouts-until-tko                         Mark as TKO after this many failures [default: 3]\n        --maximum-soft-tkos                          The maximum number of machines we can mark TKO if they don't have a hard failure. [default: 40]\n        --latency-window-size                        The number of samples to track when computing moving average latency for a proxy destination. [default: 16]\n\n  Timeouts\n    -t, --server-timeout                             server timeout in ms (DEPRECATED try to use cluster-server-timeout and regional-server-timeout) [default: 1000]\n        --cluster-pools-timeout                      server timeout for cluster pools in ms. Default value 0 means using deprecated server-timeout value for the flag [default: 0]\n        --regional-pools-timeout                     server timeout for regional pools in ms. Default value 0 means using deprecated server-timeout value for the flag [default: 0]\n        --cross-region-timeout-ms                    Timeouts for talking to cross region pool. If specified (non 0) takes precedence over every other timeout. [default: 0]\n        --cross-cluster-timeout-ms                   Timeouts for talking to pools within same region but different cluster. If specified (non 0) takes precedence over every other timeout. [default: 0]\n        --within-cluster-timeout-ms                  Timeouts for talking to pools within same cluster. If specified (non 0) takes precedence over every other timeout. [default: 0]\n        --same-connection-any-timeout                If enabled - same connection to a destination may be used for requests with different timeouts.\n\n  Logging\n        --stats-root                                 Root directory for stats files [default: \"/var/mcrouter/stats\"]\n        --stats-logging-interval                     Time in ms between stats reports, or 0 for no logging [default: 10000]\n        --logging-rtt-outlier-threshold-us           surpassing this threshold rtt time means we will log it as an outlier. 0 (the default) means that we will do no logging of outliers. [default: 0]\n        --stats-async-queue-length                   Asynchronous queue size for logging. [default: 50]\n        --disable-failure-logging                    Disable failure logging.\n\n  Standalone mcrouter options\n    -L, --log-path                                   Log file path [default: \"\"]\n    -p, --port                                       Port(s) to listen on (comma separated) [default: ]\n        --ssl-port                                   SSL Port(s) to listen on (comma separated) [default: ]\n        --listen-sock-fd                             Listen socket to take over [default: -1]\n    -P, --pid-file                                   PID file [default: \"\"]\n    -b, --background                                 Run in background\n    -m, --managed-mode                               Managed mode (auto restart on crash)\n    -n, --connection-limit                           Connection limit [default: 65535]\n        --max-global-outstanding-reqs                Maximum requests outstanding globally (0 to disable) [default: (uint32_t)((1024 \\* 1024 \\* 200) / (3 \\* 1024))]\n        --max-client-outstanding-reqs                Maximum requests outstanding per client (0 to disable) [default: (uint32_t)((1024 \\* 1024 \\* 100) / (3 \\* 1024))]\n        --reqs-per-read                              Adjusts server buffer size to process this many requests per read. Smaller values may improve latency. [default: 0]\n\nMisc options:\n        --proxy-threads                              Like --num-proxies, but also accepts 'auto' to start one thread per core\n    -D, --debug-level                                set debug level\n    -d, --debug                                      increase debug level (may repeat)\n    -h, --help                                       help\n    -V, --version                                    version\n    -v, --verbose                                    verbose\n        --validate-config                            Check config and exit immediately with good or error status\n\nRETURN VALUE\n    2                                                On a problem that might be resolved by restarting later.\n    3                                                On a problem that will definitely not be resolved by restarting.\n\nis there a way to call mcrouter --help instead??\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/78415036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/81539644", "body": "Ok done. Thanks. can close the issue\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/81539644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sebest": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/83932396", "body": "Hello @andreazevedo ,\n\nThanx for taking the time to answer to me.\n\nI want to achieve something really similar to the replicated pool with the following criteria:\n1/ i just need set and get\n2/ for the set i want to write on 2 memcache server and only wait for the first successful set\n3/ for the get i want the first non-error and try on the second memcache if the first returned a miss\n4/ i want to load balance evenly the the number of \"get\" requests on my two memcache servers\n\nThe only criteria that i can't achieve is number 4 as all the \"get' go on the first server on the list as he always has the key.\n\nhere is my configuration file:\n{\n  \"pools\": {\n    \"A\": {\n      \"servers\": [\"172.27.132.244:11211\",\"172.27.135.40:11211\",]\n    }\n  },\n  \"route\": {\n    \"type\": \"OperationSelectorRoute\",\n    \"operation_policies\": {\n      \"gets\": \"LatestRoute|Pool|A\",\n      \"set\": \"AllSyncRoute|Pool|A\"\n    }\n  }\n}\n\nthanx\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/83932396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/83944466", "body": "Thanx @alikhtarov , i understand the logic behind your example.\n\nI really need gets as for some reason the golang memcache library is using gets to do get.\n\nNow i just have to figure out how to generate this kind of configuration file using consul-template as if i have a 3rd server, implementing the \"shifting\" logic in the list of children may not be easy:\na,b,c\nb,c,a\nc,a,b\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/83944466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "deep011": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/88381647", "body": "Hi @pavlo-fb \nThank you for this reply.\n1) That is to say if i want keep the expiration time consistent, i must use the facebook fork of memcached?\n\n2) When one replicated request is successful and another replicated request is failed, is the key in those memcached servers are not same? If so, the next time we get this key, the value maybe dirty. I do not know if you can understand what I mean. \n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/88381647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/95594774", "body": "@alikhtarov \nthank you for this reply.\nFor some abnormal situation, if the data are inconsistent among the replicas, what you will do?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/95594774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "janpoem": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/92557134", "body": "``` shell\nls /usr/local/lib/libfolly.* -l\n-rw-r--r-- 1 root root 86886666 Apr 14 09:36 /usr/local/lib/libfolly.a\n-rwxr-xr-x 1 root root     1137 Apr 14 09:36 /usr/local/lib/libfolly.la\nlrwxrwxrwx 1 root root       18 Apr 14 09:36 /usr/local/lib/libfolly.so -> libfolly.so.35.0.0\nlrwxrwxrwx 1 root root       18 Apr 14 09:36 /usr/local/lib/libfolly.so.35 -> libfolly.so.35.0.0\n-rwxr-xr-x 1 root root 33669436 Apr 14 09:36 /usr/local/lib/libfolly.so.35.0.0\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/92557134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "amckinley": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/93556098", "body": "Any updates on this? We need binary protocol support before we can use mcrouter.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/93556098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/125363966", "body": "Config file: https://gist.github.com/amckinley/e378dd4fa954246cac71\n\nI'm not sure exactly what commit hash we used, but the mcrouter binary is less than a week old. Built after the version bump to 2.0. We're using Amazon ElastiCache instances, but that's just regular memcached.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/125363966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/125776146", "body": "@pavlo-fb what we see in our PHP logs is that all our memcached calls fail with an error code raised from within libmemcached: MEMCACHED_SERVER_TEMPORARILY_DISABLED, or \"error code 47\". I'm not actually sure what reply libmemcached is seeing from mcrouter, but I'm guessing it's SERVER_ERROR.\n\n@alikhtarov sure, I'll try to capture some packet dumps.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/125776146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "swashbucklin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/93590634", "body": "To provide more color:\n\nOur usecase: a user has a set of objects, with the number of objects per user ranging anywhere from dozens to 100K. Some of our pages require fetching dozens of a user's objects, whereas other pages only need to fetch one object.\n\nOur original thought was to write a custom hashing function for the PoolRoute to guarantee that all of a user's objects would land on the same server in a pool. The idea being that a multi-key GET to mcrouter for a set of the user's objects would only result in a single request to a single box. This has a few nice properties, one being that it avoids the incast congestion problem you folks mentioned in your whitepaper.\n\nWere we boiling the ocean here (aka overthinking it)? Would we just be better off using default consistent hashing and have the multi-key get requests split up?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/93590634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/94518366", "body": "really appreciate the quick replies @alikhtarov !\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/94518366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "lixiaoqiang-huoli": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/94975904", "body": "i install mcrouter and memcached in one machine  and i can use nc to connect the memcached .\n in the log ,only warm server  has this error     . i noticed that when i use nc to connect the mcrouter  and get a key, the TCP connection disconnect and reconnect,i  don't know why mcrouter close connection and reconnect.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/94975904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/94979227", "body": "i use  centos 6.6  and memcache version is 1.4.22\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/94979227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/95022671", "body": "before line is  some thing like    : \n  I0422 11:41:05.363095 22580 EventBase.cpp:421] EventBase(): Done with loop.\nI0422 11:41:05.363108 22580 EventBase.cpp:292] EventBase(): Starting loop.\nI0422 11:41:05.363129 22580 AsyncSocket.cpp:1332] AsyncSocket::handleWrite() this=0x7fa2d800c620, fd=24, state=1\nI0422 11:41:05.363143 22580 AsyncSocket.cpp:1507] AsyncSocket::handleConnect() this=0x7fa2d800c620, fd=24, state=1\nI0422 11:41:05.363160 22580 ProxyDestination.cpp:344] server 221.235.53.163:11212:TCP:ascii-100000 up (2 of 2)\nI0422 11:41:05.363178 22580 AsyncSocket.cpp:1694] AsyncSocket::updateEventRegistration(this=0x7fa2d800c620, fd=24, evb=0x29b6d68, state=2, events=2\nI0422 11:41:05.363242 22580 EventBase.cpp:421] EventBase(): Done with loop.\nI0422 11:41:05.363261 22580 EventBase.cpp:292] EventBase(): Starting loop.\nI0422 11:41:05.363314 22580 AsyncSocket.cpp:1226] AsyncSocket::handleRead() this=0x7fa2d800c620, fd=24, state=2\nI0422 11:41:05.363373 22580 Fiber.cpp:112] Stack usage: 3588\nI0422 11:41:05.363407 22580 Fiber.cpp:112] Stack usage: 5540\nI0422 11:41:05.363422 22580 EventBase.cpp:421] EventBase(): Done with loop.\nI0422 11:41:05.363435 22580 EventBase.cpp:292] EventBase(): Starting loop.\nI0422 11:41:05.363482 22580 EventBase.cpp:421] EventBase(): Done with loop.\nI0422 11:41:05.363500 22580 EventBase.cpp:292] EventBase(): Starting loop.\nI0422 11:41:05.363620 22580 AsyncSocket.cpp:1226] AsyncSocket::handleRead() this=0x7fa2d800c620, fd=24, state=2\nI0422 11:41:05.363653 22580 AsyncSocket.cpp:1694] AsyncSocket::updateEventRegistration(this=0x7fa2d800c620, fd=24, evb=0x29b6d68, state=2, events=0\nI0422 11:41:05.363675 22580 AsyncSocket.cpp:729] AsyncSocket::close(): this=0x7fa2d800c620, fd_=24, state=2, shutdownFlags=0\n\n the following is stats server and suspect_servers output \n   [root@kjwh163 lixq]# echo \"stats servers\" | nc 127.0.0.1 7001\nI0422 11:45:54.106211 22580 EventBase.cpp:421] EventBase(): Done with loop.\nI0422 11:45:54.106271 22580 EventBase.cpp:292] EventBase(): Starting loop.\nI0422 11:45:54.106309 22580 AsyncSocket.cpp:211] new AsyncSocket(0x7fa2d8003840, evb=0x29b6d68, fd=12)\nI0422 11:45:54.106353 22580 AsyncSocket.cpp:1694] AsyncSocket::updateEventRegistration(this=0x7fa2d8003840, fd=12, evb=0x29b6d68, state=2, events=2\nI0422 11:45:54.106384 22580 EventBase.cpp:421] EventBase(): Done with loop.\nI0422 11:45:54.106397 22580 EventBase.cpp:292] EventBase(): Starting loop.\nI0422 11:45:54.106416 22580 AsyncSocket.cpp:1226] AsyncSocket::handleRead() this=0x7fa2d8003840, fd=12, state=2\nSTAT 221.235.53.163:11211:TCP:ascii-100000 avg_latency_us:1643.000 pending_reqs:0 inflight_reqs:0 closed:1; notfound:1\nSTAT 221.235.53.163:11212:TCP:ascii-100000 avg_latency_us:525.188 pending_reqs:0 inflight_reqs:0 closed:1; found:1 local_error:1\nEND\nI0422 11:45:54.106817 22580 EventBase.cpp:421] EventBase(): Done with loop.\nI0422 11:45:54.106847 22580 EventBase.cpp:292] EventBase(): Starting loop.\nI0422 11:45:54.106868 22580 AsyncSocket.cpp:1226] AsyncSocket::handleRead() this=0x7fa2d8003840, fd=12, state=2\nI0422 11:45:54.106887 22580 AsyncSocket.cpp:1694] AsyncSocket::updateEventRegistration(this=0x7fa2d8003840, fd=12, evb=0x29b6d68, state=2, events=0\nI0422 11:45:54.106909 22580 AsyncSocket.cpp:245] AsyncSocket::destroy(this=0x7fa2d8003840, evb=0x29b6d68, fd=12, state=2\nI0422 11:45:54.106922 22580 AsyncSocket.cpp:784] AsyncSocket::closeNow(): this=0x7fa2d8003840, fd_=12, state=2, shutdownFlags=4\nI0422 11:45:54.107010 22580 EventBase.cpp:421] EventBase(): Done with loop.\nI0422 11:45:54.107043 22580 EventBase.cpp:292] EventBase(): Starting loop.\n[root@kjwh163 lixq]# I0422 11:46:03.132277 22580 EventBase.cpp:421] EventBase(): Done with loop.\nI0422 11:46:03.132315 22580 EventBase.cpp:292] EventBase(): Starting loop.\n\n[root@kjwh163 lixq]# \n[root@kjwh163 lixq]# \n[root@kjwh163 lixq]# \n[root@kjwh163 lixq]# echo \"stats suspect_servers\" |nc 127.0.0.1 7001\nI0422 11:46:27.997233 22580 EventBase.cpp:421] EventBase(): Done with loop.\nI0422 11:46:27.997285 22580 EventBase.cpp:292] EventBase(): Starting loop.\nI0422 11:46:27.997320 22580 AsyncSocket.cpp:211] new AsyncSocket(0x7fa2d8003840, evb=0x29b6d68, fd=12)\nI0422 11:46:27.997354 22580 AsyncSocket.cpp:1694] AsyncSocket::updateEventRegistration(this=0x7fa2d8003840, fd=12, evb=0x29b6d68, state=2, events=2\nI0422 11:46:27.997382 22580 EventBase.cpp:421] EventBase(): Done with loop.\nI0422 11:46:27.997396 22580 EventBase.cpp:292] EventBase(): Starting loop.\nI0422 11:46:27.997413 22580 AsyncSocket.cpp:1226] AsyncSocket::handleRead() this=0x7fa2d8003840, fd=12, state=2\nEND\nI0422 11:46:27.997685 22580 EventBase.cpp:421] EventBase(): Done with loop.\nI0422 11:46:27.997720 22580 EventBase.cpp:292] EventBase(): Starting loop.\nI0422 11:46:27.997742 22580 AsyncSocket.cpp:1226] AsyncSocket::handleRead() this=0x7fa2d8003840, fd=12, state=2\nI0422 11:46:27.997761 22580 AsyncSocket.cpp:1694] AsyncSocket::updateEventRegistration(this=0x7fa2d8003840, fd=12, evb=0x29b6d68, state=2, events=0\nI0422 11:46:27.997781 22580 AsyncSocket.cpp:245] AsyncSocket::destroy(this=0x7fa2d8003840, evb=0x29b6d68, fd=12, state=2\nI0422 11:46:27.997795 22580 AsyncSocket.cpp:784] AsyncSocket::closeNow(): this=0x7fa2d8003840, fd_=12, state=2, shutdownFlags=4\nI0422 11:46:27.997880 22580 EventBase.cpp:421] EventBase(): Done with loop.\nI0422 11:46:27.997910 22580 EventBase.cpp:292] EventBase(): Starting loop.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/95022671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/95366832", "body": "thanks a lot ,it  works fine now  \n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/95366832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cce": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/96108748", "body": "We use the binary protocol because it seemed easier than worrying about ASCII-encoding binary keys like hashes or UTF-8 strings, and seemed faster as well for the reasons you mentioned.  Would love to see support in mcrouter!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/96108748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gotascii": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/107745658", "body": "Sounds good, thanks for the clarification! If we end up taking a crack at adding ketama we'll send along a PR.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/107745658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "huannh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/107783005", "body": "thanks @alikhtarov sorry, I missed the previous notification and didn't work on the issue since then. I will reopen it if I encounter it again. \n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/107783005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "samek": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/108012947", "body": "I did, It works. \n\nThanks. \n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/108012947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/108013493", "body": "As you know I could't build the latest version I've used Docker which was 6 months old. After changing to another version (more recent) this never appeared again. \nI'll now try with the Latest build which I've just made. \n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/108013493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/111580863", "body": "Not anymore. \n\nI've been running the latest version ever since. \n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/111580863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "priya23": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/109580642", "body": "Hi @andreazevedo \nfollowing is my config file\n{\n   \"pools\": {\n      \"A\": {\n         \"servers\": [\n           \"IP1:11211\",\n           \"IP2:11211\",\n       \"IP3:11211\"\n         ]\n      }\n   },\n   \"route\": \"PoolRoute|A\"\n }\n\noutput for get **mcrouter**.options:\n\nVALUE **mcrouter**.options 0 1610\nnew_ascii_parser 1\nservice_name mcrouter\nrouter_name 5000\nflavor_name unknown\nstandalone 1\nasynclog_disable 0\nasync_spool /var/spool/mcrouter\nuse_asynclog_version2 0\nasynclog_route_name 0\nnum_proxies 1\nuse_priorities 1\nrealtime_disabled 0\nbig_value_split_threshold 0\nfibers_max_pool_size 1000\nfibers_stack_size 24576\nfibers_record_stack_size_every 100000\nruntime_vars_file \nfile_observer_poll_period_ms 100\nfile_observer_sleep_before_update_ms 1000\nkeepalive_cnt 0\nkeepalive_interval_s 60\nkeepalive_idle_s 300\nreset_inactive_connection_interval 0\ntcp_rto_min -1\ntarget_max_inflight_requests 0\ntarget_max_pending_requests 100000\ntarget_max_shadow_requests 1000\nno_network 0\nproxy_max_inflight_requests 0\nproxy_max_throttled_requests 0\npem_cert_path \npem_key_path \npem_ca_path \ndestination_rate_limiting 0\nenable_qos 0\ndefault_qos_class 0\ndefault_qos_path 0\nconstantly_reload_configs 0\ndisable_reload_configs 0\nconfig_file /home/priyankas/mcrouter.json\nconfig_str \ndefault_route /././\nmiss_on_get_errors 1\ngroup_remote_errors 0\nsend_invalid_route_to_default 0\nenable_flush_cmd 0\nreconfiguration_delay_ms 1000\ndisable_tko_tracking 0\nprobe_delay_initial_ms 10000\nprobe_delay_max_ms 60000\nfailures_until_tko 3\nmaximum_soft_tkos 40\nlatency_window_size 16\nserver_timeout_ms 1000\ncluster_pools_timeout_ms 0\nregional_pools_timeout_ms 0\ncross_region_timeout_ms 0\ncross_cluster_timeout_ms 0\nwithin_cluster_timeout_ms 0\nsame_connection_any_timeout 0\nstats_root /var/mcrouter/stats\nstats_logging_interval 10000\nlogging_rtt_outlier_threshold_us 0\nstats_async_queue_length 50\nenable_failure_logging 1\ncpu_cycles 0\ntest_mode 0\nEND\n\noutput for stats servers:\n\nstats servers\nSTAT 10.185.228.187:11211:TCP:ascii-1000 avg_latency_us:130603.000 pending_reqs:0 inflight_reqs:0 up:1; stored:1\nSTAT 10.216.194.210:11211:TCP:ascii-1000 avg_latency_us:742.777 pending_reqs:0 inflight_reqs:0 up:1; stored:3\nSTAT 10.7.153.194:11211:TCP:ascii-1000 avg_latency_us:130341.000 pending_reqs:0 inflight_reqs:0 up:1; stored:1\nEND\n\ni tried the commands with your method but i am not getting any output\nFDLMC039:~ priyankasharma$ echo get _mcrouter_.options | nc host port\nEND\n,so i telnet into the machine and issued the commands.\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/109580642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/109581141", "body": "Hi @andreazevedo ,\n\none more strange thing i observed now the commands started working the way you have asked them to run.\n\nRegards,\nPriyanka\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/109581141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/109726593", "body": "Hi @andreazevedo ,\n\nyes they are still taking around 20-35 seconds to set the values.all these servers are running over EC2 classic instances in amazon but they are in same region.\n\nRegards,\nPriyanka\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/109726593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/109739269", "body": "Hi @andreazevedo ,\n\ni replicated the same thing inside a VPC in amazon and then i tried to set the values from the mcrouter server itself still its taking the same time following is the output for stats servers\nstats servers\nSTAT 10.10.0.44:11211:TCP:ascii-1000 avg_latency_us:2496.142 pending_reqs:0 inflight_reqs:0 up:1; notfound:2 stored:5\n\nRegards,\nPriyanka\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/109739269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/112418869", "body": "thanks for the reply. @andreazevedo \ni cannot switch to binary protocol.thanks \n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/112418869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "byxorna": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/111541753", "body": "Thanks robot, ive signed the CLA.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/111541753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "yan12125": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/111729489", "body": "Sorry it's a duplicate of #58. Closing.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/111729489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/113358799", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/113358799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "191919": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/113351388", "body": "I reversed the commit `a6e5993`.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/113351388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "didip": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/114304820", "body": "@alikhtarov Thanks for the explanation!\n\nThe reason why I asked is because I am trying to figure out `mcrouter` deployment strategy on docker. It's preferable if I don't have to modify currently running container.\n\nBut if we put `mcrouter` inside the same container of the application, it should be fine, I think.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/114304820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/115415703", "body": "I got it. This config does what I want:\n\n```\n{\n  \"pools\": {\n    \"Replica1\": { \"servers\": [\"localhost:11211\", \"localhost:11212\"] },\n    \"Replica2\": { \"servers\": [\"localhost:11213\", \"localhost:11214\"] },\n    \"Replica3\": { \"servers\": [\"localhost:11215\", \"localhost:11216\"] }\n  },\n  \"route\": {\n    \"type\": \"OperationSelectorRoute\",\n    \"default_policy\": \"PoolRoute|Replica1\",\n    \"operation_policies\": {\n      \"add\": {\n        \"type\": \"AllSyncRoute\",\n        \"children\": [ \"PoolRoute|Replica1\", \"PoolRoute|Replica2\", \"PoolRoute|Replica3\" ]\n      },\n      \"set\": {\n        \"type\": \"AllSyncRoute\",\n        \"children\": [ \"PoolRoute|Replica1\", \"PoolRoute|Replica2\", \"PoolRoute|Replica3\" ]\n      },\n      \"delete\": {\n        \"type\": \"AllSyncRoute\",\n        \"children\": [ \"PoolRoute|Replica1\", \"PoolRoute|Replica2\", \"PoolRoute|Replica3\" ]\n      },\n      \"get\": {\n        \"type\": \"LatestRoute\",\n        \"children\": [ \"PoolRoute|Replica1\", \"PoolRoute|Replica2\", \"PoolRoute|Replica3\" ]\n      }\n    }\n  }\n}\n```\n\nSorry that I am wasting y'all time, I should have just read the source directly.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/115415703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/117797387", "body": "`SlowWarmUpRoute` seems nice! I'll definitely use it when it comes out.\n\nNow, can I diverge a bit and ask question about `AllSyncRoute`?\n\nAssuming that there are a lot of memcache backends and they can go down/up whenever, is using `AllSyncRoute` appropriate for `add, set, delete`? `AllSyncRoute` will almost always return error, no?\n\nWe are currently using `AllFastestRoute` because we don't want to care if one replica is down. Are we using it correctly?\n\nI also have another question regarding combining both `PrefixSelectorRoute` and `OperationSelectorRoute`, do you guys prefer me using this ticket or open another ticket?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/117797387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/117826449", "body": "OK, I will use this ticket for simplicity.\n\nWe are currently providing a generic pool with 2 replicas, as what you already aware.\n\nBut at some point, a separate application would want to have its own pool for various reasons. e.g. cgroup protection, etc.\n\nSo this is roughly what I have in mind, I am not sure if this config works but hopefully helps to illustrate the point.\n\n```\n{\n  \"pools\": {\n    \"App1Replica1\": {\n      \"servers\": [\"mc-app-1:11211\",\"mc-app-3:11211\"]\n    },\n    \"App1Replica2\": {\n      \"servers\": [\"mc-app-2:11211\",\"mc-app-4:11211\"]\n    },\n    \"Replica1\": {\n      \"servers\": [\"mc-1:11211\",\"mc-3:11211\"]\n    },\n    \"Replica2\": {\n      \"servers\": [\"mc-2:11211\",\"mc-4:11211\"]\n    }\n  },\n  \"route\": {\n    \"type\": \"PrefixSelectorRoute\",\n    \"policies\": {\n      \"/app1/\": {\n        \"type\": \"OperationSelectorRoute\",\n        \"default_policy\": \"PoolRoute|App1Replica1\",\n        \"operation_policies\": {\n          \"add\": {\n            \"type\": \"AllFastestRoute\",\n            \"children\": [ \"PoolRoute|App1Replica1\", \"PoolRoute|App1Replica2\" ]\n          },\n          \"set\": {\n            \"type\": \"AllFastestRoute\",\n            \"children\": [ \"PoolRoute|App1Replica1\", \"PoolRoute|App1Replica2\" ]\n          },\n          \"delete\": {\n            \"type\": \"AllFastestRoute\",\n            \"children\": [ \"PoolRoute|App1Replica1\", \"PoolRoute|App1Replica2\" ]\n          },\n          \"get\": {\n            \"type\": \"MissFailoverRoute\",\n            \"children\": [ \"PoolRoute|App1Replica1\", \"PoolRoute|App1Replica2\" ]\n          }\n        }\n      }\n    },\n    \"wildcard\": {\n      \"type\": \"OperationSelectorRoute\",\n      \"default_policy\": \"PoolRoute|Replica1\",\n      \"operation_policies\": {\n        \"add\": {\n          \"type\": \"AllFastestRoute\",\n          \"children\": [ \"PoolRoute|Replica1\", \"PoolRoute|Replica2\" ]\n        },\n        \"set\": {\n          \"type\": \"AllFastestRoute\",\n          \"children\": [ \"PoolRoute|Replica1\", \"PoolRoute|Replica2\" ]\n        },\n        \"delete\": {\n          \"type\": \"AllFastestRoute\",\n          \"children\": [ \"PoolRoute|Replica1\", \"PoolRoute|Replica2\" ]\n        },\n        \"get\": {\n          \"type\": \"MissFailoverRoute\",\n          \"children\": [ \"PoolRoute|Replica1\", \"PoolRoute|Replica2\" ]\n        }\n      }\n    }\n  }\n}\n```\n\nFor everything with `/app1/` prefix, I'd like mcrouter to route to `[App1Replica1, App1Replica2]` pool,\nand for everything else, traffic go to `[Replica1, Replica2]`.\n\nIs this the correct way of using `PrefixSelectorRoute`?\n\n**Update:** I made some modifications to the JSON config above.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/117826449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/117849260", "body": "Looks like that config works, just as expected!\n\nI am starting to get the hang of the JSON DSL. Thanks a bunch guys!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/117849260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/118458689", "body": "Thanks! It would be nice if mcrouter states which commands it supports on the README or wiki.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/118458689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/121336950", "body": "@andreazevedo Thanks for the quick reply as usual.\n\nDoes mcrouter know total available RAM in all cluster? So i can do `ps_rss / X * 100` where X is total available RAM.\n\nIs that what `ps_vsize` do?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/121336950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/121363522", "body": "Ah, I misread your earlier comments. I don't need to know mcrouter ps information.\n\nYes, I want to know when it is time to add more servers to a memcached cluster?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/121363522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/125440178", "body": "This is great info, thanks! I'll close the ticket for now.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/125440178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "radford": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/114365327", "body": "@alikhtarov, thanks, I hadn't noticed `__mcrouter__.version` nor the `version` in `stats` and `stats version`.  I'll update those to be consistent and use `MCROUTER_VERSION_STRING`.\n\nI left `MCROUTER_PACKAGE_STRING` (the one with the name first) in because I thought it looked better in the help and syslog output.  If you don't mind those having the version first or would rather those be open coded with `MCROUTER_VERSION` and/or `MCROUTER_PACKAGE_NAME`, then I'd be happy to drop the name-first variant.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/114365327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "marko-jovicic": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/116814369", "body": "> The random suffix is needed for consistency - you can simply remove the original key and the chunks will be 'deleted' - there's no way to access them without knowing the random suffix. It also takes care of simultaneous sets, since only one key will win the race, and only its random suffix will be valid.\n\nI have few questions about big value split threshold option:\n1. When key is deleted, I find it out that other related parts/chunks are not deleted. Is this expected behaviour or not? \n2. In case of simultaneous sets, last key that is set has references to its other parts/chunks which is ok. However, chunks that are related to previous sets are not deleted, but they should be?\n\nmcrouter is 1.0 version (built using [Dockerfile](https://github.com/facebook/mcrouter/blob/master/mcrouter/scripts/docker/Dockerfile)). Memcached version is 1.4.13.\nmcrouter is started with this command:\n\n``` sh\n# 5 bytes just in test purposes\nmcrouter --big-value-split-threshold=5  --config-str='{\"pools\":{\"A\":{\"servers\":[\"127.0.0.1:5001\"]}},\"route\":\"PoolRoute|A\"}' -p 5000 \n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/116814369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/117556555", "body": "Hi, thank you for your answer.\nI expected that deleting a key would delete all its parts.\nI ran some tests using [memtier_benchmark](https://github.com/RedisLabs/memtier_benchmark) which multiple times set the same key during the test, which populated memcached memory very fast. (when --big-value-split-threshold is used). Although set operations shouldn't be that frequent I think that parts should be deleted anyway. Maybe to provide an async way of deleting such items?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/117556555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/117817109", "body": "I need to store big values for 30 minutes. Rarely it happens that they are updated few times in that period of time. Using --big-value-split-threshold option we are left with some parts that we don't want to occupy the memory. Yes, those parts will expiry eventually. But in case when memcache is full, and you need to store new key in the same slab, I think that some other keys will be evicted also. You could avoid this by freeing memory by actually deleting \"lost\" parts, right? Generally speaking one might say that delete operation would undo set operation entirely, which is not true when big value option is used. \n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/117817109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "fugalh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/119348668", "body": "The \"already autoconf'd\" workflow works great for distributions of tarballs and other conglomerations of released files. It kind of breaks down with a version-control scheme like github. It would be an unportable antipattern to check in autotools-generated artifacts into version control, and since you just clone github or maybe an automatic tarball from github, you have to do the autoreconf step yourself.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/119348668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "eherot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/119409457", "body": "That makes sense (and does seem to be supported by the community) so I have an alternative suggestion: Would you be willing to put the `autoreconf --install` command into an `autogen.sh` script? That does seem to be a [standard practice](http://stackoverflow.com/questions/3290908/which-files-generated-by-autotools-should-i-keep-in-version-control-repository) and it is also consequently [natively supported by ark](https://github.com/burtlo/ark/blob/master/providers/default.rb#L292).\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/119409457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/119410432", "body": "Submitted #70 just in case ;-)\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/119410432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/120170685", "body": "I'd tried them. Setting `probe-timeout-initial` and `probe-timeout-max` to large number enough works when we just want failback to be delayed entirely about one destination. So I get rid of the former one of 'use case scenarios' in my last post https://github.com/facebook/mcrouter/pull/71#issue-93684352 . Sorry about that.\n\nStill, when we want hosts that have recovered to receive some kind of operations immediately while not to do other ones, tko doesn't seem to work. (The latter case in 'use case scenarios' in https://github.com/facebook/mcrouter/pull/71#issue-93684352 )\n\nThe situation where that sort of thing is necessary is when we need quite a safe failback. \nIf the largest expiration time of item in backend memcached is 24hours, and we make only \"get\" operations wait for 24hours more after \"updates/deletes\" operations had recovered, we can avoid any risk of getting stale item from the recovering memcached. So it is like 'safe failback with live migration.'\n- two things to note:\n  - As I wrote down in https://github.com/facebook/mcrouter/pull/71#issue-93684352 , delay time is counted from the time last failover occurs, not last failback. So in the above case, maybe \"get\" failback delay should be 72hours or so if system recovery maintenance shoud be done in 48hours.\n  - It can be useful in rather rare situations where a destination is marked as failed for any reason in `failover_errors` settings but the server and memcached process are still alive, such as network partitioning. Otherwise the recovering memcached should be empty so there are no risks of getting any stale item even if \"gets\" operations failback.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/120170685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/123665684", "body": "set `session.save_handler = memcached` and everything works fine.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/123665684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/124283921", "body": "I guess it shoud've been made an 'issue' than pull request, so i close this. Seems that some code change for better and safer resource management around the route handling just being made\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/124283921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/127694450", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/127694450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/127694451", "body": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/127694451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "joejoesucks": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/123221123", "body": "Here is the code snippet\n\n```\npublic boolean set(final String cachePrefix, final String id, final String t)\n        throws UnsupportedOperationException {\n    boolean rv = false;\n    if (null != mc) {\n        try {\n            Future<Boolean> f = null;\n            if (StringUtils.isBlank(cachePrefix)){\n                f = mc.set(id, SET_TIMEOUT_MAX, StringUtils.join(CONTENT_PREFIX, t), transcoder);\n            } else {\n                f = mc.set(StringUtils.join(cachePrefix, CACHE_PREFIX_SEPARATOR, id),\n                        SET_TIMEOUT_MAX, StringUtils.join(CONTENT_PREFIX, t), transcoder);\n            }\n\n            rv = f.get().booleanValue();\n        } catch (InterruptedException e) {\n            logger.error(e.getMessage());\n            throw new CacheException(ErrorMessage.CACHE_EXCEPTION_SET.getMessage(), e);\n        } catch (ExecutionException e) {\n            logger.error(e.getMessage());\n            throw new CacheException(ErrorMessage.CACHE_EXCEPTION_SET.getMessage(), e);\n        } catch (Exception e) {\n            logger.error(e.getMessage());\n            throw new CacheException(ErrorMessage.CACHE_EXCEPTION_SET.getMessage(), e);\n        }\n    }\n\n    return rv;\n}\n```\n\nThank you guys.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/123221123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/123240939", "body": "Here is the configuration.\n\n```\n{\n  \"pools\": {\n      \"A\": {\n          \"servers\": [\n            \"xxx1:xxx\",\n            \"xxx2:xxx\",\n            \"xxx3:xxx\",\n            \"xxx4:xxx\",\n          ]\n        }\n  },\n  \"route\": \"PoolRoute|A\"\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/123240939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/126233609", "body": "Hi Pavlo,\n\nThank you for the reply. We got this error all the time and immediately. Every request to mcrouter were failed. Now we removed mcrouter as a temporary solution, not sure whether our mcrouter is configured correctly or not.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/126233609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "vengit123": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/123644209", "body": "Hi Following is my config file. \n{\n  \"pools\": {\n        \"cache1\": {\n            \"servers\": [\n                \"172.19.19.43:11311\"\n            ]\n        },\n        \"cache2\": {\n            \"servers\": [\n                \"172.19.19.48:11311\"\n            ]\n        }\n  },\n  \"route\": {\n      \"type\": \"OperationSelectorRoute\",\n      \"operation_policies\": {\n        \"set\": {\n            \"type\": \"AllAsyncRoute\",\n            \"children\": [ \"PoolRoute|cache1\", \"PoolRoute|cache2\" ]\n        }\n      },\n     \"default_policy\": \"PoolRoute|cache1\"\n   }\n}\n\nMy expectation is as follows:\n1. Any add operation should add records into both the servers, when both mc servers i.e., \"cache1 & cache2\" are available (OR) should be added to any available server.\n\nBut, as per my observation \"set\" operation_policy is not getting hit. Instead, it is always taking default_policy and adding record only in cache1 eventhough cache2 is up and running.\n\nCan any one help? What is wrong in the configuration? I am using mcrouter-2.0.0.0. \n\nThanks in-advance.\nVenkat.\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/123644209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/124343650", "body": "This got solved after adding \"add\" policy in \"operation_policies\";\n\"add\": {\n \"type\": \"AllAsyncRoute\",\n \"children\": [ \"PoolRoute|cache1\", \"PoolRoute|cache2\" ]\n }\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/124343650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sontek": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/126509410", "body": "That is a pretty interesting idea =)\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/issues/comments/126509410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rektide": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/mcrouter/comments/19019462", "body": "Hey, there's two facebook internal links in this commit description. Might those be brought onto the Mcrouter wiki, or otherwise made available?\n[zstd reveal post](https://code.facebook.com/posts/1658392934479273/smaller-and-faster-data-compression-with-zstandard/) probably contains a significant amount of the information in the [first link](https://our.intern.facebook.com/intern/wiki/Benchmarking_ZSTD_and_LZ4_algorithms/), but I'm very very interested in getting access to the [second link](https://our.intern.facebook.com/intern/wiki/Compression_with_specialized_dictionaries/).\n\nThis is one of the first major zstd sightings in the wild! Way cool to see!\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/comments/19019462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/mcrouter/comments/19024686", "body": "Super interesting change. What drove this change away from using Thrift as interconnect?\n", "reactions": {"url": "https://api.github.com/repos/facebook/mcrouter/comments/19024686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}}}}