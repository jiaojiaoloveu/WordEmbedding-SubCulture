{"_default": {"1": {"togarlamhot": {"issues": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/235", "title": "used Synapse to replace RDS", "body": "Hi guys, \r\ndid you have try synapse to replace RDS?\r\nI have tried it and the result \r\n\r\nI, [2017-04-28T09:59:05.870663 #15534]  INFO -- Synapse::Synapse: synapse: starting...\r\nI, [2017-04-28T09:59:05.870740 #15534]  INFO -- Synapse::ServiceWatcher::Ec2tagWatcher: Connecting to EC2 region: ap-southeast-1\r\nI, [2017-04-28T09:59:06.592645 #15534]  INFO -- Synapse::ServiceWatcher::Ec2tagWatcher: synapse: ec2tag watcher looking for instances tagged with Name=staging-synapse\r\nI, [2017-04-28T09:59:06.592795 #15534]  INFO -- Synapse::Synapse: synapse: configuring haproxy\r\nW, [2017-04-28T09:59:06.616788 #15534]  WARN -- Synapse::ConfigGenerator::Haproxy: synapse: restart required because socket command show stat\r\n failed with error #<Errno::ECONNREFUSED: Connection refused - connect(2) for /run/haproxy/admin.sock>\r\nI, [2017-04-28T09:59:06.646909 #15534]  INFO -- Synapse::ConfigGenerator::Haproxy: synapse: restarted haproxy\r\nW, [2017-04-28T09:59:06.820603 #15534]  WARN -- Synapse::ServiceWatcher::Ec2tagWatcher: synapse: no backends for service proddb; using default servers: [{\"name\"=>\"staging-synapse\", \"host\"=>\"staging-database.blabla.rds.amazonaws.com\", \"port\"=>5432}]\r\n\r\nthanks", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "udangel-r7": {"issues": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/234", "title": "No support for relative server_port overrides", "body": "haproxy supports relative port addresses, prefixed by a \"+\" or \"-\".\r\n\r\nIf this is set the server port is determined by adding the value to the client's port. In the base service_watcher there is currently a check to verify that the override port is an integer which breaks existing configurations. \r\n\r\nI assume nginx doesn't support a similar behaviour, would you accept a patch or should we just maintain our own version?", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ianbamforth": {"issues": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/233", "title": "ec2tag watcher fails if metadata service is unavailable during a credential refresh", "body": "The `DefaultProvider` takes aws keys from environment variables / config if available, otherwise falling back to ec2 metadata IAM role.  If you are using keys from the latter, they refresh automatically when they get near to expiry.  If the metadata service is down at this point, Synapse enters a broken state, where it has no credentials and cannot recover.  We have seen this in our production environment.\r\n\r\nI'm currently looking at a patch whereby I specifically select the `EC2Provider` if no keys are provided by the environment / config, inserting the following into `ec2tag.rb` before the call to `AWS::EC2.new`:\r\n\r\n`      unless ((@discovery['aws_access_key_id'] || ENV['aws_access_key_id']) \\\r\n              && (@discovery['aws_secret_access_key'] || ENV['aws_secret_access_key'] ))\r\n        AWS.config(:credential_provider => AWS::Core::CredentialProviders::EC2Provider.new(:retries => 0))\r\n      end\r\n`\r\n\r\nDoes this seem like a reasonable approach? Happy to submit a PR.", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/210", "title": "docker-api v1.32 dropped support for Ruby 1.9", "body": "No longer possible to install this with Ruby 1.9, as https://github.com/swipely/docker-api/releases/tag/v1.32.0 dropped support for 1.9.  Setting `<1.32` in the `synapse.gemspec` appears to resolve this.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/198", "title": "ec2tag watcher needs to back off if Client.RequestLimitExceeded is returned", "body": "If you have a reasonable number of ec2tag watchers running, you can hit the rate limiter.  Rather than a fixed check_interval, there should be a way of doing some kind of backoff (as per the AWS docs).  If the Client.RequestLimitExceeded is returned, then there definitely needs to be a backoff - otherwise you just continue to hammer on the door, and the rate limit exceedance will never go away.\n\nI'm yet to discover what the rate limit is, but I hit it today with ~6 servers each watching ~24 ec2tags (plus various other odds and sods running in the background) and the default check_interval\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bjoernmeier": {"issues": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/215", "title": "discovery fails if Zookeeper tree is read only", "body": "Hi,\r\n\r\nwe are using synapse for service discovery and wanted to use it with a read only Zookeeper.\r\nBut during tests we got the following error:\r\n```\r\n/usr/lib/ruby/vendor_ruby/zk/client/base.rb:1083:in `check_rc': inputs: {:path=>\"/level_1/level_2/level_3\", :data=>\"\", :ephemeral=>false, :sequence=>false, :ignore=>:node_exists} (ZK::Exceptions::NoAuth)\r\n\tfrom /usr/lib/ruby/vendor_ruby/zk/client/base.rb:1072:in `call_and_check_rc'\r\n\tfrom /usr/lib/ruby/vendor_ruby/zk/client/threaded.rb:584:in `call_and_check_rc'\r\n\tfrom /usr/lib/ruby/vendor_ruby/zk/client/base.rb:352:in `create'\r\n\tfrom /usr/lib/ruby/vendor_ruby/zk/client/threaded.rb:434:in `create'\r\n\tfrom /usr/lib/ruby/vendor_ruby/synapse/service_watcher/zookeeper.rb:121:in `create'\r\n\tfrom /usr/lib/ruby/vendor_ruby/synapse/service_watcher/zookeeper.rb:245:in `zk_connect'\r\n\tfrom /usr/lib/ruby/vendor_ruby/synapse/service_watcher/zookeeper.rb:39:in `start'\r\n\tfrom /usr/lib/ruby/vendor_ruby/synapse.rb:48:in `block in run'\r\n\tfrom /usr/lib/ruby/vendor_ruby/synapse.rb:48:in `map'\r\n\tfrom /usr/lib/ruby/vendor_ruby/synapse.rb:48:in `run'\r\n\tfrom /usr/bin/synapse:60:in `<main>'\r\n```\r\nWhile checking the code we saw that synapse uses zk `exists` to create nodes if they do not exist (e.g. /level_1 exists it will create level_2/level_3).This fails even if the nodes do exist as synapse does not have create permissions in zookeeper.\r\nIt would be great if as long a subtree does not exist only the existing root is watched and on a new node creation the watches are registered on the new subtree instead of creating the subtree.\r\n\r\nThank you.\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/185", "title": "Allow name in the DNS service watcher's ping method to configurable", "body": "https://github.com/airbnb/synapse/blob/master/lib/synapse/service_watcher/dns.rb#L18 is hard-coded to airbnb.com .\n\nIdeally this'd be configurable, so we can set it to something internal, so we don't have to depend on airbnb.com's DNS.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tomfitzhenry": {"issues": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/182", "title": "AWS Auto Scaling Group watcher", "body": "", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/181", "title": "In DNS service watcher, re-resolve every $TTL", "body": "The DNS service watcher will re-resolve every `check_interval` seconds. Rather than having to set `check_interval`, and possibly setting it too high/low, it would be nice if it re-resolved every $TTL (whatever the returned TTL is).\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/44", "title": "serfdom.io service watcher", "body": "[Serf](http://www.serfdom.io/) is \"a decentralized solution for service discovery and orchestration that is lightweight, highly available, and fault tolerant.\"\n\nhttp://rubygems.org/gems/kahuna is a Serf library for Ruby. I don't know how mature this library is, but it's version 0.0.1 so my gut tells me \"not very\". :)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/44/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/35", "title": "etcd service watcher", "body": "https://github.com/coreos/etcd is \"a highly-available key value store for shared configuration and service discovery\", similar to zookeeper.\n\netcd has a REST API, and there are already Ruby libraries ( https://github.com/ranjib/etcd-ruby , https://github.com/iconara/etcd-rb ) to varying levels of maturity/completeness.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/35/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/48f5e55b31cd4fb82b86679f06dfff50c0079bd8", "message": "Fix spec/support/minimum.conf.yaml\n\n* 'services' is a hash, not a list\n* 'services' needs a 'haproxy' key"}], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/184", "title": "[WIP] ASG watcher", "body": "Early feedback welcome.\n\nCode mostly copied from ec2tag watcher.\n\nIssue #182 \n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bkochendorfer": {"issues": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/172", "title": "DnsWatcher < BaseWatcher", "body": "We were trying out this service at our organization in an internal datacenter and we temporarily lost internet connection. Because this is resolving the external address of [airbnb](https://github.com/airbnb/synapse/blob/01a2409a5f1e19742ff9380ce683a54b31a4b7ad/lib/synapse/service_watcher/dns.rb#L18) being required as part of 'ping?' it caused synapse to fail entirely. Perhaps throwing a recoverable error rather than a runtime exception would help prevent the entire cluster from collapsing.\n\n``` bash\nI, [2016-02-17T17:34:09.333142 #8263]  INFO -- Synapse::Haproxy: synapse: restarted haproxy\nE, [2016-02-18T16:58:00.932196 #8263] ERROR -- Synapse::Synapse: synapse: encountered unexpected exception #<RuntimeError: synapse: service watcher mongo failed ping!> in main thread\nW, [2016-02-18T16:58:00.932830 #8263]  WARN -- Synapse::Synapse: synapse: exiting; sending stop signal to all watchers\nI, [2016-02-18T16:58:00.932962 #8263]  INFO -- Synapse::ZookeeperDnsWatcher: synapse: stopping watcher mongo using default stop handler\nW, [2016-02-18T16:58:00.933561 #8263]  WARN -- Synapse::ZookeeperDnsWatcher::Zookeeper: synapse: zookeeper watcher exiting\nI, [2016-02-18T16:58:00.934565 #8263]  INFO -- Synapse::ZookeeperDnsWatcher::Zookeeper: synapse: zookeeper watcher cleaning up\nI, [2016-02-18T16:58:00.934961 #8263]  INFO -- Synapse::ZookeeperDnsWatcher::Zookeeper: synapse: closing zk connection to 172.16.151.82:2181,172.16.151.86:2181,172.16.151.87:2181\nI, [2016-02-18T16:58:00.937347 #8263]  INFO -- Synapse::ZookeeperDnsWatcher::Zookeeper: synapse: zookeeper watcher cleaned up successfully\n/var/lib/mesos/slaves/20160213-002027-1469517996-5050-555-S4/frameworks/20160204-212329-1385631916-5050-163-0000/executors/thermos-1455730435744-bright-devel-authserve-0-6e52c164-8fcb-4e00-bc33-62523f32ad4c/runs/4810df56-7a1d-4bd1-9c2c-84f2c041a181/sandbox/synapse/lib/ruby/gems/2.2.0/gems/synapse-0.12.1/lib/synapse.rb:54:in `block (2 levels) in run': synapse: service watcher mongo failed ping! (RuntimeError)\n    from /var/lib/mesos/slaves/20160213-002027-1469517996-5050-555-S4/frameworks/20160204-212329-1385631916-5050-163-0000/executors/thermos-1455730435744-bright-devel-authserve-0-6e52c164-8fcb-4e00-bc33-62523f32ad4c/runs/4810df56-7a1d-4bd1-9c2c-84f2c041a181/sandbox/synapse/lib/ruby/gems/2.2.0/gems/synapse-0.12.1/lib/synapse.rb:53:in `each'\n    from /var/lib/mesos/slaves/20160213-002027-1469517996-5050-555-S4/frameworks/20160204-212329-1385631916-5050-163-0000/executors/thermos-1455730435744-bright-devel-authserve-0-6e52c164-8fcb-4e00-bc33-62523f32ad4c/runs/4810df56-7a1d-4bd1-9c2c-84f2c041a181/sandbox/synapse/lib/ruby/gems/2.2.0/gems/synapse-0.12.1/lib/synapse.rb:53:in `block in run'\n    from /var/lib/mesos/slaves/20160213-002027-1469517996-5050-555-S4/frameworks/20160204-212329-1385631916-5050-163-0000/executors/thermos-1455730435744-bright-devel-authserve-0-6e52c164-8fcb-4e00-bc33-62523f32ad4c/runs/4810df56-7a1d-4bd1-9c2c-84f2c041a181/sandbox/synapse/lib/ruby/gems/2.2.0/gems/synapse-0.12.1/lib/synapse.rb:52:in `loop'\n    from /var/lib/mesos/slaves/20160213-002027-1469517996-5050-555-S4/frameworks/20160204-212329-1385631916-5050-163-0000/executors/thermos-1455730435744-bright-devel-authserve-0-6e52c164-8fcb-4e00-bc33-62523f32ad4c/runs/4810df56-7a1d-4bd1-9c2c-84f2c041a181/sandbox/synapse/lib/ruby/gems/2.2.0/gems/synapse-0.12.1/lib/synapse.rb:52:in `run'\n    from /var/lib/mesos/slaves/20160213-002027-1469517996-5050-555-S4/frameworks/20160204-212329-1385631916-5050-163-0000/executors/thermos-1455730435744-bright-devel-authserve-0-6e52c164-8fcb-4e00-bc33-62523f32ad4c/runs/4810df56-7a1d-4bd1-9c2c-84f2c041a181/sandbox/synapse/lib/ruby/gems/2.2.0/gems/synapse-0.12.1/bin/synapse:60:in `<top (required)>'\n    from /var/lib/mesos/slaves/20160213-002027-1469517996-5050-555-S4/frameworks/20160204-212329-1385631916-5050-163-0000/executors/thermos-1455730435744-bright-devel-authserve-0-6e52c164-8fcb-4e00-bc33-62523f32ad4c/runs/4810df56-7a1d-4bd1-9c2c-84f2c041a181/sandbox/synapse/.bin/synapse:23:in `load'\n    from /var/lib/mesos/slaves/20160213-002027-1469517996-5050-555-S4/frameworks/20160204-212329-1385631916-5050-163-0000/executors/thermos-1455730435744-bright-devel-authserve-0-6e52c164-8fcb-4e00-bc33-62523f32ad4c/runs/4810df56-7a1d-4bd1-9c2c-84f2c041a181/sandbox/synapse/.bin/synapse:23:in `<main>'\n```\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fnicholas": {"issues": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/163", "title": "Centos Compatibility & Higher Version of Ruby Support ", "body": "synapse version - v0.12.2.\nnerve version - v0.6.0\n\nthe cookbook breaks here on centos. Im running it on centos 6.5 64 bit\nError executing action run on resource 'execute[synapse_install]'\n\nIt appeared the cookbook is looking for a higher version for ruby. Centos currently installs v1.8. It also appeared there's no easy way of installing a higher version of ruby on centos. Please how should I go about this?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "j-datadome": {"issues": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/161", "title": "ELB config - Error \"Name or service not known\"", "body": "Hello,\n\nI installed Synapse on a Ubuntu 14.04 server.\n\nWhen I try to launch it using the following config, I receive as a response a warning \"Name or service not known\".\n\nI run haproxy 1.6.3, use ruby 2.2.1 and bundler 1.11.2\n\nSynapse correctly rewrites haproxy config file, but seems to fail to find my instances.\nIs there a debug mode which I could activate to track more precisely the error?\n\nThank you a lot\n\nConfig file:\n\n```\n\n---\n  services:\n    myservice:\n      default_servers:\n        -\n          name: \"elb\"\n          host: \"ELB_IP\"\n          port: 80\n      discovery:\n        method: \"ec2tag\"\n        tag_name: \"TAG_NAME\"\n        tag_value: \"TAG_VALUE\"\n        aws_access_key_id: \"AWS_ACCESS_KEY_ID\"\n        aws_secret_access_key: \"AWS_SECRET_ACCESS_KEY\"\n        aws_region: \"AWS_REGION\"\n      haproxy:\n        port: 3213\n        server_port_override: \"7000\"\n        server_options: \"check inter 2000 rise 3 fall 2\"\n        frontend:\n          - \"mode tcp\"\n        backend:\n          - \"mode tcp\"\n  haproxy:\n    bind_address: \"0.0.0.0\"\n    reload_command: \"service haproxy reload\"\n    config_file_path: \"/etc/haproxy/haproxy.cfg\"\n    do_writes: true\n    do_reloads: true\n    global:\n      - \"log 127.0.0.1 local0\"\n      - \"log 127.0.0.1 local1 notice\"\n      - \"user haproxy\"\n      - \"group haproxy\"\n    defaults:\n      - \"log global\"\n      - \"balance roundrobin\"\n      - \"timeout client 50s\"\n      - \"timeout connect 5s\"\n      - \"timeout server 50s\"\n```\n\nResponse:\n\n```\nI, [2016-02-08T16:39:00.007426 #2617]  INFO -- Synapse::Synapse: synapse: starting...\nI, [2016-02-08T16:39:00.007588 #2617]  INFO -- Synapse::ServiceWatcher::Ec2tagWatcher: Connecting to EC2 region: AWS_REGION\nI, [2016-02-08T16:39:00.696891 #2617]  INFO -- Synapse::ServiceWatcher::Ec2tagWatcher: synapse: ec2tag watcher looking for instances tagged with TAG_NAME=TAG_VALUE\nI, [2016-02-08T16:39:00.697127 #2617]  INFO -- Synapse::Synapse: synapse: configuring haproxy\nW, [2016-02-08T16:39:00.697281 #2617]  WARN -- Synapse::Haproxy: synapse: unhandled error reading stats socket: #<TypeError: no implicit conversion of nil into String>\nI, [2016-02-08T16:39:00.721859 #2617]  INFO -- Synapse::Haproxy: synapse: restarted haproxy\nW, [2016-02-08T16:39:02.886652 #2617]  WARN -- Synapse::ServiceWatcher::Ec2tagWatcher: synapse: error in ec2tag watcher thread: #<SocketError: getaddrinfo: Name or service not known>\nW, [2016-02-08T16:39:02.886780 #2617]  WARN -- Synapse::ServiceWatcher::Ec2tagWatcher: [\"/usr/local/rvm/rubies/ruby-2.2.1/lib/ruby/2.2.0/net/http.rb:879:in `initialize'\", \"/usr/local/rvm/rubies/ruby-2.2.1/lib/ruby/2.2.0/net/http.rb:879:in `open'\", \"/usr/local/rvm/rubies/ruby-2.2.1/lib/ruby/2.2.0/net/http.rb:879:in `block in connect'\", \"/usr/local/rvm/rubies/ruby-2.2.1/lib/ruby/2.2.0/timeout.rb:89:in `block in timeout'\", \"/usr/local/rvm/rubies/ruby-2.2.1/lib/ruby/2.2.0/timeout.rb:99:in `call'\", \"/usr/local/rvm/rubies/ruby-2.2.1/lib/ruby/2.2.0/timeout.rb:99:in `timeout'\", \"/usr/local/rvm/rubies/ruby-2.2.1/lib/ruby/2.2.0/net/http.rb:878:in `connect'\", \"/usr/local/rvm/rubies/ruby-2.2.1/lib/ruby/2.2.0/net/http.rb:863:in `do_start'\", \"/usr/local/rvm/rubies/ruby-2.2.1/lib/ruby/2.2.0/net/http.rb:858:in `start'\", \"/usr/local/rvm/gems/ruby-2.2.1/gems/aws-sdk-v1-1.66.0/lib/aws/core/http/connection_pool.rb:327:in `start_session'\", \"/usr/local/rvm/gems/ruby-2.2.1/gems/aws-sdk-v1-1.66.0/lib/aws/core/http/connection_pool.rb:127:in `session_for'\", \"/usr/local/rvm/gems/ruby-2.2.1/gems/aws-sdk-v1-1.66.0/lib/aws/core/http/net_http_handler.rb:56:in `handle'\", \"/usr/local/rvm/gems/ruby-2.2.1/gems/aws-sdk-v1-1.66.0/lib/aws/core/client.rb:253:in `block in make_sync_request'\", \"/usr/local/rvm/gems/ruby-2.2.1/gems/aws-sdk-v1-1.66.0/lib/aws/core/client.rb:289:in `retry_server_errors'\", \"/usr/local/rvm/gems/ruby-2.2.1/gems/aws-sdk-v1-1.66.0/lib/aws/core/client.rb:249:in `make_sync_request'\", \"/usr/local/rvm/gems/ruby-2.2.1/gems/aws-sdk-v1-1.66.0/lib/aws/core/client.rb:511:in `block (2 levels) in client_request'\", \"/usr/local/rvm/gems/ruby-2.2.1/gems/aws-sdk-v1-1.66.0/lib/aws/core/client.rb:391:in `log_client_request'\", \"/usr/local/rvm/gems/ruby-2.2.1/gems/aws-sdk-v1-1.66.0/lib/aws/core/client.rb:477:in `block in client_request'\", \"/usr/local/rvm/gems/ruby-2.2.1/gems/aws-sdk-v1-1.66.0/lib/aws/core/client.rb:373:in `return_or_raise'\", \"/usr/local/rvm/gems/ruby-2.2.1/gems/aws-sdk-v1-1.66.0/lib/aws/core/client.rb:476:in `client_request'\", \"(eval):3:in `describe_instances'\", \"/usr/local/rvm/gems/ruby-2.2.1/gems/aws-sdk-v1-1.66.0/lib/aws/ec2/filtered_collection.rb:44:in `filtered_request'\", \"/usr/local/rvm/gems/ruby-2.2.1/gems/aws-sdk-v1-1.66.0/lib/aws/ec2/instance_collection.rb:318:in `each'\", \"/usr/local/rvm/gems/ruby-2.2.1/bundler/gems/synapse-00024028b366/lib/synapse/service_watcher/ec2tag.rb:108:in `select'\", \"/usr/local/rvm/gems/ruby-2.2.1/bundler/gems/synapse-00024028b366/lib/synapse/service_watcher/ec2tag.rb:108:in `instances_with_tags'\", \"/usr/local/rvm/gems/ruby-2.2.1/bundler/gems/synapse-00024028b366/lib/synapse/service_watcher/ec2tag.rb:86:in `block in discover_instances'\", \"/usr/local/rvm/gems/ruby-2.2.1/gems/aws-sdk-v1-1.66.0/lib/aws/core.rb:598:in `memoize'\", \"/usr/local/rvm/gems/ruby-2.2.1/bundler/gems/synapse-00024028b366/lib/synapse/service_watcher/ec2tag.rb:85:in `discover_instances'\", \"/usr/local/rvm/gems/ruby-2.2.1/bundler/gems/synapse-00024028b366/lib/synapse/service_watcher/ec2tag.rb:63:in `watch'\", \"/usr/local/rvm/gems/ruby-2.2.1/bundler/gems/synapse-00024028b366/lib/synapse/service_watcher/ec2tag.rb:23:in `block in start'\"]\n\n```\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "timerish": {"issues": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/158", "title": "synapse: error polling docker host http://localhost:4243: #<Docker::Error::ClientError: Expected(200..204) <=> Actual(400 Bad Request)", "body": "Hello,\n        Is synapse incompatible with docker-api 1.20 , I got this warn when running synapse,\nI attached environment info,and how to resolve it ?\n\nroot@VirtualBox:/var/lib/gems/1.9.1/gems/synapse-0.12.2# synapse -c /etc/synapse.json.conf\nI, [2016-01-20T16:15:03.797821 #13184]  INFO -- Synapse::Synapse: synapse: starting...\nI, [2016-01-20T16:15:03.798011 #13184]  INFO -- Synapse::Synapse: synapse: configuring haproxy\nI, [2016-01-20T16:15:03.798862 #13184]  INFO -- Synapse::Haproxy: synapse: reconfigured haproxy\nW, [2016-01-20T16:15:03.807022 #13184]  WARN -- Synapse::ServiceWatcher::DockerWatcher: synapse: error polling docker host http://localhost:4243: #<Docker::Error::ClientError: Expected(200..204) <=> Actual(400 Bad Request)\n\n> I, [2016-01-20T16:15:03.808142 #13184]  INFO -- Synapse::Haproxy: synapse: restarted haproxy\n> W, [2016-01-20T16:15:18.815548 #13184]  WARN -- Synapse::ServiceWatcher::DockerWatcher: synapse: error polling docker host http://localhost:4243: #<Docker::Error::ClientError: Expected(200..204) <=> Actual(400 Bad Request)\n\nroot@VirtualBox:/var/lib/gems/1.9.1/gems/synapse-0.12.2# docker version\nClient:\n Version:      1.8.2\n API version:  1.20\n Go version:   go1.4.2\n Git commit:   0a8c2e3\n Built:        Wed Oct  7 17:48:28 UTC 2015\n OS/Arch:      linux/amd64\n\nServer:\n Version:      1.8.2\n API version:  1.20\n Go version:   go1.4.2\n Git commit:   0a8c2e3\n Built:        Wed Oct  7 17:48:28 UTC 2015\n OS/Arch:      linux/amd64\n\nroot@VirtualBox:/var/lib/gems/1.9.1/gems/synapse-0.12.2# cat synapse.gemspec \n# -_\\- encoding: utf-8 -_-\n\nlib = File.expand_path('../lib', **FILE**)\n$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)\nrequire 'synapse/version'\n\nGem::Specification.new do |gem|\n  gem.name          = \"synapse\"\n  gem.version       = Synapse::VERSION\n  gem.authors       = [\"Martin Rhoads\"]\n  gem.email         = [\"martin.rhoads@airbnb.com\"]\n  gem.description   = %q{: Write a gem description}\n  gem.summary       = %q{: Write a gem summary}\n  gem.homepage      = \"\"\n\n  gem.files         = `git ls-files`.split($/)\n  gem.executables   = gem.files.grep(%r{^bin/}).map{ |f| File.basename(f) }\n  gem.test_files    = gem.files.grep(%r{^(test|spec|features)/})\n\n  gem.add_runtime_dependency \"aws-sdk\", \"~> 1.39\"\n  gem.add_runtime_dependency \"docker-api\", \"~> 1.7.2\"\n  gem.add_runtime_dependency \"zk\", \"~> 1.9.4\"\n\n  gem.add_development_dependency \"rake\"\n  gem.add_development_dependency \"rspec\", \"~> 3.1.0\"\n  gem.add_development_dependency \"pry\"\n  gem.add_development_dependency \"pry-nav\"\n  gem.add_development_dependency \"webmock\"\nend\n\nroot@VirtualBox:/var/lib/gems/1.9.1/gems/synapse-0.12.2# uname -an\nLinux VirtualBox 3.19.0-25-generic #26~14.04.1-Ubuntu SMP Fri Jul 24 21:16:20 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux\n\nThanks in advance.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dnephin": {"issues": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/121", "title": "docker watcher proposal: identify services by label instead of port and image name", "body": "Docker 1.6 added [labels](https://docs.docker.com/userguide/labels-custom-metadata/) for images and containers.\n\nInstead of requiring the same port for every service and exposing the port to the host (#109, #88), read a `com.airbnb.synapse.service-port` label from the image or container, and register the service using that port.\n\nAnother option might be to keep specifying the port in the watcher config, but look for a `com.airbnb.synapse.service` label.\n\nContainers without a label would not be registered.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/120", "title": "docker watcher proposal: use the events API instead of polling", "body": "**Replace polling by streaming the [events API](https://docs.docker.com/reference/api/docker_remote_api_v1.18/#monitor-dockers-events)**\n- using the events API filter by the `start` event to get notified of all new containers that have started\n- when a new container starts, check it against the list of criteria and register it if it matches\n- removes the need to poll, and keep track of the list of previous containers\n- the `/containers/json` endpoint that it uses now can be pretty slow with large numbers of containers\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/102710228", "body": "+1 \nexposing ports to the host should be unnecessary\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/102710228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/102711379", "body": "cc @bobtfish, @bcicen, @rgarcia \n\nYou've all worked with this watcher or have pending PRs for it. What do you think about this idea?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/102711379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ajohnstone": {"issues": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/109", "title": "docker watcher - dependent on publicly exposed ports to the parent host.", "body": "The current implementation is quite restricting. For example using synapse within a docker container, it uses the host IP within @discovery[\"servers\"].\n\nThis means you need to publicly expose all containers in the parent host, rather than just using the private ips of the containers themselves. So rather than having discovery, you end up with a fixed mapping based on ports.\n\nWhen not using publicly exposed ports you end up with this invalid configuration, with a broken port.\n\n```\n    server 172.17.42.1:_basket-service 172.17.42.1: cookie 172.17.42.1:_basket-service check inter 2s rise 3 fall 2\n```\n\n```\n\n        \"Ports\": {\n            \"8080/tcp\": null,\n            \"8081/tcp\": null\n        }\n\n```\n\nError with a little debugging...\n\n```\n[ root@52cc33d73359:~ ]$ /usr/bin/ruby1.9.1 /usr/local/bin/synapse -c /synapse.conf.json\nI, [2015-01-25T18:22:20.776251 #1971]  INFO -- Synapse::Synapse: synapse: starting...\nI, [2015-01-25T18:22:20.781601 #1971]  INFO -- Synapse::Synapse: synapse: regenerating haproxy config\nI, [2015-01-25T18:22:20.781990 #1971]  INFO -- Synapse::DnsWatcher: synapse: discovered 1 backends for service http-webservices-member\nW, [2015-01-25T18:22:20.782539 #1971]  WARN -- Synapse::Haproxy: synapse: no backends found for watcher http-webservices-basket\nI, [2015-01-25T18:22:20.783647 #1971]  INFO -- Synapse::Haproxy: synapse: could not open haproxy config file at /etc/haproxy/haproxy.cfg\nDocker::Container { :id => b8589347f04c9e3a811bf78f49149d645cba9b48afccdd52f64308e039ca3106, :connection => Docker::Connection { :url => http://172.17.42.1:4243, :options => {} } }\n8080\n{\"8080\"=>\"8080\", \"8081\"=>\"\"}\n{\"8080\"=>\"\", \"8081\"=>\"\"}\n[{\"name\"=>\"basket-service\", \"host\"=>\"172.17.42.1\", \"port\"=>\"8080\"},\n {\"name\"=>\"basket-service\", \"host\"=>\"172.17.42.1\", \"port\"=>\"\"}]\nI, [2015-01-25T18:22:20.819391 #1971]  INFO -- Synapse::DockerWatcher: synapse: discovered 2 backends for service http-webservices-basket\nI, [2015-01-25T18:22:20.821997 #1971]  INFO -- Synapse::Haproxy: synapse: restarted haproxy\nI, [2015-01-25T18:22:20.823559 #1971]  INFO -- Synapse::Synapse: synapse: regenerating haproxy config\n[ALERT] 024/182222 (2005) : parsing [/etc/haproxy/haproxy.cfg:107] : server 172.17.42.1:_basket-service has neither service port nor check port nor tcp_check rule 'connect' with port information. Check has been disabled.\n[ALERT] 024/182222 (2005) : Error(s) found in configuration file : /etc/haproxy/haproxy.cfg\n[ALERT] 024/182222 (2005) : Fatal errors found in configuration.\nE, [2015-01-25T18:22:22.844902 #1971] ERROR -- Synapse::Synapse: synapse: encountered unexpected exception #<RuntimeError: failed to reload haproxy via service haproxy reload:  * Reloading haproxy haproxy\n   ...fail!> in main thread\nW, [2015-01-25T18:22:22.845050 #1971]  WARN -- Synapse::Synapse: synapse: exiting; sending stop signal to all watchers\nI, [2015-01-25T18:22:22.845184 #1971]  INFO -- Synapse::DockerWatcher: synapse: stopping watcher http-webservices-basket using default stop handler\nI, [2015-01-25T18:22:22.845321 #1971]  INFO -- Synapse::DnsWatcher: synapse: stopping watcher http-webservices-member using default stop handler\n/var/lib/gems/1.9.1/gems/synapse-0.11.1/lib/synapse/haproxy.rb:780:in `restart': failed to reload haproxy via service haproxy reload:  * Reloading haproxy haproxy (RuntimeError)\n   ...fail!\n    from /var/lib/gems/1.9.1/gems/synapse-0.11.1/lib/synapse/haproxy.rb:550:in `update_config'\n    from /var/lib/gems/1.9.1/gems/synapse-0.11.1/lib/synapse.rb:51:in `block in run'\n    from /var/lib/gems/1.9.1/gems/synapse-0.11.1/lib/synapse.rb:43:in `loop'\n    from /var/lib/gems/1.9.1/gems/synapse-0.11.1/lib/synapse.rb:43:in `run'\n    from /var/lib/gems/1.9.1/gems/synapse-0.11.1/bin/synapse:60:in `<top (required)>'\n    from /usr/local/bin/synapse:23:in `load'\n    from /usr/local/bin/synapse:23:in `<main>'\n```\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/107", "title": "Docker watcher - cannot use unix sockets with synapse due to hardcoded http string + port.", "body": "Docker watcher - cannot use unix sockets with synapse due to hardcoded http string + port.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/105", "title": "Unable to use ec2tag watcher due to local instance variable", "body": "https://github.com/airbnb/synapse/blob/v0.11.1/lib/synapse/service_watcher/ec2tag.rb#L16\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/108", "title": "Update example configs for DNS", "body": "", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/71414089", "body": "Thanks for that :)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/71414089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Jaykah": {"issues": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/94", "title": "Synapse fails to restart after zookeeper node disappears", "body": "I am using the Zookeeper watcher to get a list of available nodes - which it successfully does.\n\nHowever, after a node fails, it does not get removed from haproxy.\n\nHaproxy monitoring page shows those nodes as down, Zookeeper no longer has them as they are ephemeral, but the reconfiguration does not take place.\n\nIf I restart Synapse, however, everything goes back to normal.\n\n```\nI, [2014-10-09T22:17:20.844370 #12]  INFO -- Synapse::ZookeeperWatcher: synapse: discovering backends for service proddb\nI, [2014-10-09T22:17:20.861672 #12]  INFO -- Synapse::ZookeeperWatcher: synapse: discovered 6 backends for service proddb\n[WARNING] 281/221756 (157) : Server proddb/100.0.10.10:3306_100.0.10.10 is DOWN, reason: Layer4 connection problem, info: \"Connection refused\", check duration: 1ms. 6 active and 0 backup servers left. 0 sessions active, 0 requeued, 0 remaining in queue.\n[WARNING] 281/221756 (157) : Server proddb/100.0.10.10:3306_100.0.10.10 is DOWN, reason: Layer4 connection problem, info: \"Connection refused\", check duration: 2ms. 5 active and 0 backup servers left. 0 sessions active, 0 requeued, 0 remaining in queue.\nI, [2014-10-09T22:18:15.682057 #12]  INFO -- Synapse::ZookeeperWatcher: synapse: discovering backends for service proddb\nI, [2014-10-09T22:18:15.690843 #12]  INFO -- Synapse::ZookeeperWatcher: synapse: discovered 5 backends for service proddb\n```\n\nNote: Synapse is deployed in Docker and managed by supervisord\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/94/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/71", "title": "When using default servers as fallback, synapse is looking for a Zookeeper method", "body": "Not sure if I am doing something wrong, or if that is a bug, but here it is:\n\nAfter synapse fails to fetch backends from Zookeeper, and it falls back to default server list, it is still trying to find method \"shuffle\" \n\n```\nW, [2014-06-06T20:24:36.814618 #14]  WARN -- Synapse::ZookeeperWatcher: synapse: no backends for service application; using default servers: {\"name\"=>\"default-app\", \"host\"=>\"111.111.111.111\", \"port\"=>443}\nI, [2014-06-06T20:24:36.817710 #14]  INFO -- Synapse::Synapse: synapse: regenerating haproxy config\nE, [2014-06-06T20:24:36.818293 #14] ERROR -- Synapse::Synapse: synapse: encountered unexpected exception #<NoMethodError: undefined method `shuffle' for {\"name\"=>\"default-app\", \"host\"=>\"111.111.111.111\", \"port\"=>443}:Hash> in main thread\nW, [2014-06-06T20:24:36.818395 #14]  WARN -- Synapse::Synapse: synapse: exiting; sending stop signal to all watchers\nW, [2014-06-06T20:24:36.818452 #14]  WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\nI, [2014-06-06T20:24:36.830512 #14]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n/usr/local/lib/ruby/gems/2.1.0/gems/synapse-0.10.0/lib/synapse/haproxy.rb:654:in `generate_backend_stanza': undefined method `shuffle' for {\"name\"=>\"default-app\", \"host\"=>\"111.111.111.111\", \"port\"=>443}:Hash (NoMethodError)\n    from /usr/local/lib/ruby/gems/2.1.0/gems/synapse-0.10.0/lib/synapse/haproxy.rb:551:in `block in generate_config'\n    from /usr/local/lib/ruby/gems/2.1.0/gems/synapse-0.10.0/lib/synapse/haproxy.rb:548:in `each'\n    from /usr/local/lib/ruby/gems/2.1.0/gems/synapse-0.10.0/lib/synapse/haproxy.rb:548:in `generate_config'\n    from /usr/local/lib/ruby/gems/2.1.0/gems/synapse-0.10.0/lib/synapse/haproxy.rb:534:in `update_config'\n    from /usr/local/lib/ruby/gems/2.1.0/gems/synapse-0.10.0/lib/synapse.rb:45:in `block in run'\n    from /usr/local/lib/ruby/gems/2.1.0/gems/synapse-0.10.0/lib/synapse.rb:37:in `loop'\n    from /usr/local/lib/ruby/gems/2.1.0/gems/synapse-0.10.0/lib/synapse.rb:37:in `run'\n    from /usr/local/lib/ruby/gems/2.1.0/gems/synapse-0.10.0/bin/synapse:60:in `<top (required)>'\n    from /usr/local/bin/synapse:23:in `load'\n    from /usr/local/bin/synapse:23:in `<main>'\n```\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/71/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/45375164", "body": "Thank you, Igor! Looks like this has taken me a step forward. \n\nHowever, now I get:\n\n```\n/usr/local/lib/ruby/gems/2.1.0/gems/synapse-0.10.0/lib/synapse/service_watcher.rb:28:in `create': Invalid discovery method [\"zookeeper\"] (ArgumentError)\n    from /usr/local/lib/ruby/gems/2.1.0/gems/synapse-0.10.0/lib/synapse.rb:72:in `block in create_service_watchers'\n    from /usr/local/lib/ruby/gems/2.1.0/gems/synapse-0.10.0/lib/synapse.rb:71:in `each'\n    from /usr/local/lib/ruby/gems/2.1.0/gems/synapse-0.10.0/lib/synapse.rb:71:in `create_service_watchers'\n    from /usr/local/lib/ruby/gems/2.1.0/gems/synapse-0.10.0/lib/synapse.rb:18:in `initialize'\n    from /usr/local/lib/ruby/gems/2.1.0/gems/synapse-0.10.0/bin/synapse:59:in `new'\n    from /usr/local/lib/ruby/gems/2.1.0/gems/synapse-0.10.0/bin/synapse:59:in `<top (required)>'\n    from /usr/local/bin/synapse:23:in `load'\n    from /usr/local/bin/synapse:23:in `<main>'\n```\n\nI have tried to follow the project documentation, but it seems like it's a bit outdated (with YAML instead of JSON, and apparently the methods). Would be glad to help fix it up once I understand how to make it work.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/45375164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/45378228", "body": "That's the thing, my YAML does not contain any square brackets, nor does it have the hyphen+space that indicates a list in the case of discovery method.\n\nI have tried a number of variations, with no luck.\n\nIt currently looks like this:\n\n```\nservices:\n application:\n  default_servers:\n    name: \"default-app\"\n    host: \"111.111.111.111\"\n    port: 443\n  discovery:\n    method: \"zookeeper\"\n    path: \"/services/application\"\n    hosts:\n     - \"xhbtr.site.com:2181\"\n     - \"xhbtr2.site.com:2181\"\n     - \"xhbtr3.site.com:2181\"\n  haproxy:\n    port: 3213\n    server_options: \"check inter 2s rise 3 fall 2\"\n    listen:\n     - \"mode http\"\n     - \"option httpchk /health\"\n     - \"http-check expect string OK\"\nhaproxy:\n reload_command: \"sudo service haproxy reload\"\n config_file_path: \"/etc/haproxy/haproxy.cfg\"\n socket_file_path: \"/var/haproxy/stats.sock\"\n do_writes: true\n do_reloads: true\n do_socket: false\n global:\n  - \"daemon\"\n  - \"user haproxy\"\n  - \"group haproxy\"\n  - \"maxconn 4096\"\n  - \"log     127.0.0.1 local0\"\n  - \"log     127.0.0.1 local1 notice\"\n  - \"stats   socket /var/haproxy/stats.sock mode 666 level admin\"\n defaults:\n  - \"log      global\"\n  - \"option   dontlognull\"\n  - \"maxconn  2000\"\n  - \"retries  3\"\n  - \"timeout  connect 5s\"\n  - \"timeout  client  1m\"\n  - \"timeout  server  1m\"\n  - \"option   redispatch\"\n  - \"balance  leastconn\"\n extra_sections:\n  listen stats :3212:\n   - \"mode http\"\n   - \"stats enable\"\n   - \"stats uri /\"\n   - \"stats refresh 5s\"\n```\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/45378228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/45380576", "body": "Figured it out, had an extra space that I didn't notice.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/45380576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/45391829", "body": "--comment moved to a separate ticket--\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/45391829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/59358920", "body": "I've done some further debugging, and so far I can say that:\n\n-Haproxy config is getting successfully re-applied when there are changes in the number of endpoints (begin begins & end ends below)\n-But it does not get changed by Synapse once the number of endpoints changes\n-Because it is not getting re-read for changes in the first place\n-Because it is not getting changes from Zookeeper unless it is restarted\n\n```\nI, [2014-10-14T12:55:37.381646 #500]  INFO -- Synapse::ZookeeperWatcher: synapse: discovering backends for service db\nI, [2014-10-14T12:55:37.388731 #500]  INFO -- Synapse::ZookeeperWatcher: synapse: discovered 4 backends for service db\nW, [2014-10-14T12:55:37.389157 #500]  WARN -- Synapse::ZookeeperWatcher: synapse: warning: begin begins\nW, [2014-10-14T12:55:37.389220 #500]  WARN -- Synapse::ZookeeperWatcher: synapse: warning: end ends\n```\n\nHere's what happens if I restart Synapse (for reference):\n\n```\n I, [2014-10-14T12:56:55.014435 #524]  INFO -- Synapse::ZookeeperWatcher: synapse: discovered 4 backends for service db\nW, [2014-10-14T12:56:55.014877 #524]  WARN -- Synapse::ZookeeperWatcher: synapse: warning: begin begins\nW, [2014-10-14T12:56:55.014951 #524]  WARN -- Synapse::ZookeeperWatcher: synapse: warning: end ends\nI, [2014-10-14T12:56:55.015023 #524]  INFO -- Synapse::Synapse: synapse: regenerating haproxy config\nW, [2014-10-14T12:56:55.016053 #524]  WARN -- Synapse::Haproxy: synapse: warning: read old conf start\nW, [2014-10-14T12:56:55.016214 #524]  WARN -- Synapse::Haproxy: synapse: warning: read old conf end\nW, [2014-10-14T12:56:55.016265 #524]  WARN -- Synapse::Haproxy: synapse: warning: conf write begin\nW, [2014-10-14T12:56:55.016481 #524]  WARN -- Synapse::Haproxy: synapse: warning: conf write ends\n```\n\nI'm curious if anyone is experiencing a similar issue, or if it is a corner case caused by Docker/Supervisord combination\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/59358920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/62064532", "body": "More debugging:\n1. Identifying threads:\n\nRestart Synapse\n\n```\nI, [2014-11-06T22:02:59.634475 #3181]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher connecting to ZK at xhbtr.internal.com:2181,xhbtr3.internal.com:2181,xhbtr2.internal.com:2181\nI, [2014-11-06T22:02:59.707555 #3181]  INFO -- Synapse::ZookeeperWatcher: synapse: discovering backends for service db\nI, [2014-11-06T22:02:59.719320 #3181]  INFO -- Synapse::ZookeeperWatcher: synapse: discovered 5 backends for service db\nI, [2014-11-06T22:02:59.719512 #3181]  INFO -- Synapse::Synapse: RECONFIGURE INSIDE SYNAPSE OBJECT ID 70237320665780 THREAD ID 70237310423840\nI, [2014-11-06T22:02:59.719685 #3181]  INFO -- Synapse::Synapse: TEST PING OBJECT ID 70237320665780 THREAD ID 70237310423840\nI, [2014-11-06T22:02:59.719853 #3181]  INFO -- Synapse::Synapse: TEST PING OBJECT ID 70237320665780 THREAD ID 70237310423840\nI, [2014-11-06T22:02:59.720117 #3181]  INFO -- Synapse::Synapse: TEST PING OBJECT ID 70237320665780 THREAD ID 70237310423840\nI, [2014-11-06T22:02:59.720362 #3181]  INFO -- Synapse::Synapse: CONFIG UPDATED IS true OBJECT ID 70237320665780 THREAD ID 70237310423840\nI, [2014-11-06T22:02:59.720582 #3181]  INFO -- Synapse::Synapse: synapse: regenerating haproxy config\nI, [2014-11-06T22:02:59.720797 #3181]  INFO -- Synapse::Haproxy: CODE BLOCK 1 OBJECT ID 70237320663500 THREAD ID 70237310423840\nI, [2014-11-06T22:02:59.721970 #3181]  INFO -- Synapse::Haproxy: CODE BLOCK 2 OBJECT ID 70237320663500 THREAD ID 70237310423840\nI, [2014-11-06T22:02:59.722415 #3181]  INFO -- Synapse::Haproxy: SLEEP IS -63582530577.72238\n[WARNING] 309/220259 (3198) : config : backend 'chat' : ignoring cookie for server '100.0.10.13:5280_100.0.10.13' as HTTP mode is disabled.\n[WARNING] 309/220259 (3198) : config : backend 'db' : ignoring cookie for server '100.0.10.11:3306_100.0.10.11' as HTTP mode is disabled.\n[WARNING] 309/220259 (3198) : config : backend 'db' : ignoring cookie for server '100.1.10.4:3306_100.1.10.4' as HTTP mode is disabled.\n[WARNING] 309/220259 (3198) : config : backend 'db' : ignoring cookie for server '100.0.10.5:3306_100.0.10.5' as HTTP mode is disabled.\n[WARNING] 309/220259 (3198) : config : backend 'db' : ignoring cookie for server '100.0.10.20:3306_100.0.10.20' as HTTP mode is disabled.\n[WARNING] 309/220259 (3198) : config : backend 'db' : ignoring cookie for server '100.0.10.10:3306_100.0.10.10' as HTTP mode is disabled.\n```\n\nKill one of the nodes:\n\n```\n[WARNING] 309/220329 (3198) : Server db/100.0.10.10:3306_100.0.10.10 is DOWN, reason: Layer4 connection problem, info: \"Connection refused\", check duration: 0ms. 4 active and 0 backup servers left. 0 sessions active, 0 requeued, 0 remaining in queue.\nI, [2014-11-06T22:03:48.709254 #3181]  INFO -- Synapse::ZookeeperWatcher: synapse: discovering backends for service db\nI, [2014-11-06T22:03:48.717118 #3181]  INFO -- Synapse::ZookeeperWatcher: synapse: discovered 4 backends for service db\nI, [2014-11-06T22:03:48.717329 #3181]  INFO -- Synapse::Synapse: RECONFIGURE INSIDE SYNAPSE OBJECT ID 70237320665780 THREAD ID 70236942398180\n```\n1. Counting threads\n\nRestart Synapse\n\n```\nI, [2014-11-06T22:18:53.418929 #3283]  INFO -- Synapse::Synapse: THREAD COUNT IN INTIALIZE 2\nI, [2014-11-06T22:18:53.419181 #3283]  INFO -- Synapse::Synapse: synapse: starting...\nI, [2014-11-06T22:18:53.419383 #3283]  INFO -- Synapse::ZookeeperWatcher: synapse: starting ZK watcher application @ hosts: xhbtr3.internal.com:2181,xhbtr2.internal.com:2181,xhbtr.internal.com:2181, path: /services/application\nI, [2014-11-06T22:18:53.419662 #3283]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher connecting to ZK at xhbtr3.internal.com:2181,xhbtr2.internal.com:2181,xhbtr.internal.com:2181\nI, [2014-11-06T22:18:53.490143 #3283]  INFO -- Synapse::ZookeeperWatcher: synapse: discovering backends for service application\nI, [2014-11-06T22:18:53.492769 #3283]  INFO -- Synapse::ZookeeperWatcher: synapse: discovered 1 backends for service application\nI, [2014-11-06T22:18:53.492996 #3283]  INFO -- Synapse::ZookeeperWatcher: synapse: starting ZK watcher chat @ hosts: xhbtr.internal.com:2181,xhbtr3.internal.com:2181,xhbtr2.internal.com:2181, path: /services/chat\nI, [2014-11-06T22:18:53.493161 #3283]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher connecting to ZK at xhbtr.internal.com:2181,xhbtr3.internal.com:2181,xhbtr2.internal.com:2181\nI, [2014-11-06T22:18:53.562536 #3283]  INFO -- Synapse::ZookeeperWatcher: synapse: discovering backends for service chat\nI, [2014-11-06T22:18:53.564986 #3283]  INFO -- Synapse::ZookeeperWatcher: synapse: discovered 1 backends for service chat\nI, [2014-11-06T22:18:53.565202 #3283]  INFO -- Synapse::ZookeeperWatcher: synapse: starting ZK watcher db @ hosts: xhbtr3.internal.com:2181,xhbtr.internal.com:2181,xhbtr2.internal.com:2181, path: /services/db\nI, [2014-11-06T22:18:53.565365 #3283]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher connecting to ZK at xhbtr3.internal.com:2181,xhbtr.internal.com:2181,xhbtr2.internal.com:2181\nI, [2014-11-06T22:18:53.631336 #3283]  INFO -- Synapse::ZookeeperWatcher: synapse: discovering backends for service db\nI, [2014-11-06T22:18:53.639681 #3283]  INFO -- Synapse::ZookeeperWatcher: synapse: discovered 5 backends for service db\nI, [2014-11-06T22:18:53.639878 #3283]  INFO -- Synapse::Synapse: THREAD COUNT IN LOOP 14\nI, [2014-11-06T22:18:53.640057 #3283]  INFO -- Synapse::Synapse: synapse: regenerating haproxy config\n```\n\nKill one of the nodes:\n\n```\n[WARNING] 309/221943 (3300) : Server db/100.0.10.10:3306_100.0.10.10 is DOWN, reason: Layer4 connection problem, info: \"Connection refused\", check duration: 0ms. 4 active and 0 backup servers left. 0 sessions active, 0 requeued, 0 remaining in queue.\nI, [2014-11-06T22:20:02.709009 #3283]  INFO -- Synapse::ZookeeperWatcher: synapse: discovering backends for service db\nI, [2014-11-06T22:20:02.724917 #3283]  INFO -- Synapse::ZookeeperWatcher: synapse: discovered 4 backends for service db\n```\n\nSomehow, when the update happens, another thread is taking over, and @config_updated gets overwritten by each of them, causing the config update to fail (so I assume).\n\nMost likely, it's the ZK gem that's causing the issue (by creating threads and locks).\n\nI will try various Ruby versions, as well as to roll back ZK/Synapse, to see if that helps, as I am out of ideas.\n\nP.S. I am using a manually compiled Ruby 2.1.2\n\n```\n# Install RUBY\nRUN wget http://cache.ruby-lang.org/pub/ruby/2.1/ruby-2.1.2.tar.gz\nRUN tar xzfv ruby-2.1.2.tar.gz\nWORKDIR /tmp/ruby-2.1.2\nENV RUBY_CONFIGURE_OPTS --with-readline-dir=/usr/lib/x86_64-linux-gnu/libreadline.so\nRUN ./configure\nRUN make && make install\nRUN echo \"gem: --no-ri --no-rdoc\" > ~/.gemrc\n```\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/62064532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/62225765", "body": "Update: I have taken Synapse out of Docker and Supervisord, as well as have tried multiple versions of Ruby and Synapse and still have the same issue.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/62225765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/62466154", "body": "FINALLY!\n\nA solution:\n\nTL;DR\n\n```\nThe issue has been caused an has been repeatedly reproduced because of the way it was being launched - in the foreground.\n\nForking the process did the trick.\n```\n\nApparently, having one instance of Synapse would prevent it from being able to both query for changes and execute loops - something that I still can't wrap my head around. \n\nRunning from Supevisord, as a command, or via plain synapse -c /etc/synapse.conf.yaml in the foreground was doing just that - making the process busy and not able to write modified Haproxy configs.\n\nTo make it work, I had to adjust my Supervisord config:\n\n[program:synapse]\nprocess_name=synapse-%(process_num)s\ncommand=synapse -c /etc/synapse.conf.yaml\n**numprocs=2**\nstopasgroup=true\nautorestart=unexpected\n\nthus forking Synapse.\n\nIt took me a while to debug, so hopefully this will help someone else too.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/62466154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/63199585", "body": "Today I have noticed another abnormality - although the changes made (as per my previous comment) did help with dead node removal, new nodes never made it to Haproxy config when registered.\n\nHowever, they started adding with **numprocs=4**, which is even stranger.\n\nDespite that working, I am still convinced that repeating every command multiple times is not the right way to go. What I have also noticed is that with **numprocs=4** there are only 3 processes executing, which means that something is getting lost.\n\nCan anyone shed some light on how forking/threading is being done in Synapse?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/63199585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/63199615", "body": "Looks like the issue that I'm also having - check out #94 for details.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/63199615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/69247747", "body": "Can we please have this merged?\n\nIt has been quite a while, is the project still maintained?\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/69247747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/88987809", "body": "Hi Joseph,\n\nFirst of all, thanks for the PR! \n\nSecondly, I have a question on deduplication. How does it work with process managers that control forking? \n\nPrecisely, I've had issues with running synapse via Supervisord (#94) where it would not restart when a change in backends is detected, unless I manually specify to run 4 processes of Synapse in Supervisord.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/88987809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/93516039", "body": "Hi,\n\nAny updates on the potential merge?\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/93516039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/106475047", "body": "@clizzin @igor47 Hi guys, when do you think it will be possible to have this reviewed? \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/106475047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/135487743", "body": "@clizzin @igor47 Just wanted to bump this, since it is a one-line change that, if merged, would make our lives much easier :) There's not much to review either...\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/135487743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/135524564", "body": "Rebase done.\n\nThe reason it's done without server_options is to assign \"backup\" labels to individual backup nodes instead of the whole group (if I understand your question correctly).\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/135524564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/135556220", "body": "@jolynch Sure, that's a good approach for ZK-listed servers. However, this particular scenario deals with static default servers, so I don't see an overlap there.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/135556220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/135575432", "body": "@jolynch\n\nWhat I am referring to is the \"stub\" watcher, rather than any backend discovered via Zookeeper/Docker/etc. My use case is a server in Region A that would use backends from Region B only if all local nodes fail. Those backends are marked as \"backup\" in the Synapse config. At the same time, region B's backends are primary for their own region (so they won't be marked as \"backup\" in Nerve), and are discovered through a different path in Zookeeper.\n\nA better option would be to discover backup nodes from another Zookeeper path, but that's a different discussion (we would still need default servers if ZK fails).\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/135575432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/135597685", "body": "> We've been relying on the implicit backend name for a bit but I opened #135 to make it explicit so you can reference backends in acls. \n\nSo if I understand correctly, in that case we would define two (or more) backends (main and backup) in frontend's Synapse and failover to that backup using ACL? If so, that seems to solve a part of what I am trying to achieve, since your example shows ZK discovery for the backup node, which can be done from a different ZK path.\n\nAre there any limitations to such approach?\n\n> That being said the HAProxy guys recommend combining multiple backends + acl with backups so we should probably support it. \n\nThat's what I meant by\n\n`A better option would be to discover backup nodes from another Zookeeper\npath, but that's a different discussion (we would still need default\nservers if ZK fails).` \n\nHaving the backup option available on a per-node basis for stub watcher is complementary to #135 \n\n> I feel like adding a bunch of HAProxy specific keys (like httpchk) is the wrong way going forward, especially if we ever want to be able to add more outputs than HAProxy/file output. I'm not sure the right abstraction though, what do you think?\n\nSure, having more flexibility is always great, but we should not forget that even per Synapse's readme, \"The heart of synapse is actually HAProxy, a stable and proven routing component.\"\n\n> Also just FYI you can use the state cache as an additional guard (it's the only guard we use) against zookeeper flakiness.\n\nWhat cache are you referring to? We are not using Curator, if you are talking about the path cache.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/135597685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/136421890", "body": "@jolynch This issue is related to the fact that (AFAIK) Synapse does reloads by forking the process and then executing the reload. The problem with Supervisord is that it keeps attached to STDOUT, running the process in the foreground, thus messing with the ability to fork&reload. That's a pity, because Supervisord is a really great tool for process monitoring.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/136421890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/136472682", "body": "@jolynch The first six comments of this ticket explain my reasoning. Basically what happens is if we have only one instance of Synapse running it does not write modified Haproxy configs for node removal, if we run two it does remove nodes, but does not add new ones. And if we run is as numprocs=4 (basically forking it into 4 processes) it _seems to_ work fine, but I've still had some cases with reloads not happening (maybe once every 100 reloads or so as opposed to 100% of the time without forking). Unfortunately, this is something that I wasn't yet able to figure out...\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/136472682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "niko": {"issues": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/88", "title": "Docker watcher: Port is required?", "body": "Sorry for this being rather a question than an issue\u2026 the Docker watcher requires a port for each service if I understand the code right. Wouldn't it make sense to have the watcher just look for an image-tag combination and figure out the port (or ports if there are several) by itself? That way one could spin up a new deploy with a \"staging\" tag, test drive it, then add a \"production\" tag and take down the old deploy. Or am I missing something?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/88/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dcosson": {"issues": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/78", "title": "Be smarter about initial reconfigure", "body": "Synapse is designed to re-write the haproxy config & reload haproxy when it starts (set [here](https://github.com/airbnb/synapse/blob/master/lib/synapse.rb#L24-25)).\n\nThis means that any time synapse is restarted there is a period between when it starts and when the watcher first registers where the defaults are being used (and if there are no defaults you will return 503's from haproxy).\n\nI can see why you would want an initial reconfigure so that any time you restart synapse you know any changes unrelated to backends will get picked up, but it seems like it should be smarter and wait until all watchers have checked in once before doing its initial reconfiguration.  I'm happy to submit a PR if this sounds reasonable.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/78/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/9d9e5ad6339f1bfe604e900c1255a3e61a5e35a4", "message": "adds specs for ec2tag watch method, and fixes bug where if an exception\nwas raised the normal sleep got skipped, so it could get stuck calling\nthe failing discover instances code in a tight loop every few ms"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/d5d580aaf7f31ac0fb288513037ad30617669662", "message": "Don't have synapse require the aws variables - credentials should be\nable to be nil to allow using iam instance profile. Updates tests to\nreflect"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/c59116e06206a38cccb553747df69b7fb4ec6256", "message": "allow `server_port_override` to be an int since the other `port`\nconfig options can be ints"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/47984369", "body": "Is this going to get merged? The README makes it sound like it's already implemented\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/47984369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/47993133", "body": "fwiw I just tried this out in EC2 and it works well\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/47993133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/48249312", "body": "Great, looking forward to it!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/48249312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/114192173", "body": "+1. Maybe you could give a few community members commit access if airbnb doesn't have the bandwidth to support this?\n\nFWIW, here was my experience trying it out with a super simple config, maybe it'll help anyone coming here in the future before these issues get addressed. It crashes when I start it because\n- In the global haproxy section, `shared_frontend` needs to be a list not a string (already in #112 as @chrono mentioned)\n- `method: stub` is not a thing, it needs to be \"base\" ([link](https://github.com/airbnb/synapse/blob/40aa25759ce264a941d24317d93d85e0d78a76e1/lib/synapse/service_watcher.rb#L11-18))\n\nNow I can launch synapse and it stays running and logs that it is writing the haproxy config. It is not, the config silently never gets written.  The README says that the global haproxy option `do_writes` [defaults to true](https://github.com/airbnb/synapse/blob/40aa25759ce264a941d24317d93d85e0d78a76e1/README.md#configuring-haproxy) but it doesn't, anything that's not explicitly set in my config is not present in the options hash in the Haproxy object when synapse runs so everything defaults to false.\n\nNow it's finally running as expected for my simple example.\n\nUnrelated, @jolynch when you say you have a fix for \"allowing synapse to reconfigure more aggressively than it restarts\" is that the same thing described in #78? \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/114192173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/114232209", "body": "@jolynch cool to hear. Thanks for the update\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/114232209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/115307920", "body": "I added support for them in #126 \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/115307920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "rgarcia": {"issues": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/41", "title": "docker watcher: discover on container name, not image name", "body": "When I first wrote the docker watcher, docker containers could only be identified by their image name. Now there's the ability to attach names to containers: http://blog.docker.io/2013/10/docker-0-6-5-links-container-naming-advanced-port-redirects-host-integration/. This is a much more flexible way to discover them, since most of the time your base image is something basic like \"ubuntu:12.04\" which lots of services could share.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/41/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/28", "title": "dns watcher ping assumes dns server resolves public addresses", "body": "The dns watcher's ping method declares the watcher dead if it can't resolve airbnb.com. This doesn't work if you are in a private network (e.g. AWS VPC) and are using a DNS server that only resolves private domains.\n\nPotential alternatives:\n- allow the domain for the ping to be configurable\n- don't care if the domain is not found (the fact that it got a proper response from the dns server is good enough)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/28/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27797253", "body": "thanks for the review\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27797253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/28430094", "body": ":+1: also ran into this issue.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/28430094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7439488", "body": "60dc37d\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7439488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7439491", "body": "edabd03\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7439491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7600521", "body": "d69192d\n\nThe dns watcher uses this pattern too, fwiw\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7600521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/8106094", "body": "624b59987c09c9876b42121af8d17d6769709932\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/8106094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "igor47": {"issues": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/38", "title": "synapse exits on watcher failure", "body": "ideally, the watcher should be recreated periodically\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/38/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/93dc2d3746861b1030388433d8632469df905b0a", "message": "Merge pull request #203 from airbnb/config_generators\n\nSupport Pluggable Configuration Generators"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/3390fbdc4bbbb3b50b64811238bb6906b9700617", "message": "Merge pull request #204 from airbnb/bump_version_to_v0.13.7\n\nbump version to v0.13.7"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/e12c002fbc2b15e630406f166202b003174bfeb7", "message": "bump version to v0.13.7"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/b5e5ebc04f87efcf9a066f6180270759678b2ca3", "message": "Merge pull request #202 from airbnb/refactor_label_filter\n\nRefactor label filter"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/1b02254a5bb10f12111039bf2bb606f12d800dc5", "message": "[spec] refactor all labeling specs to use factory"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/3681b1d4c7d73b1ba4bb6a210d60e633db2d2caa", "message": "[spec] add factorygirl to build backends\n\nmakes backend building a little less verbose/tedius"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/318d8348b21a531c0fedb8c83e72347209ef6e08", "message": "[base watcher] refactor label filtering\n\nwe make three total changes. these are pretty entertwined, so they're all in\nthe same commit -- sorry about that! the changes are:\n\n* go from `label_filter` to `label_filters` -- this allows us to define\n  multiple filters, which must ALL match\n* add a new filter condition, for `not-equals`\n* allow leader election to operate on filtered backends, thus making leader\n  election and filters no longer mutually exclusive\n\nwe update the documentation to reflect the new reality. we deprecate the old\n`label_filter` option, but leave it available to avoid\nbackwards-incompatability"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/64ddbbd6140d337d65cf0f31fff9ea004aca779e", "message": "Merge pull request #200 from airbnb/increment_version_to_v0.13.6\n\nbump version to v0.13.6"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/9099bdb153e52a24b71e2635c1ca552dc73c9cce", "message": "bump version to v0.13.6"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/a2b21ef330bbaac98f010762b59efd5d29011bbd", "message": "Merge pull request #199 from airbnb/multiple_stats_sockets\n\nMultiple stats sockets"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/7c534be91e6da645e17dd9aa3851f16e4e1e29d1", "message": "[haproxy] log which socket we used to reconfigure"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/49011c8a2572b47af16e8aae8ea8ff0a6bcfc75c", "message": "[haproxy] actually update multiple stats sockets\n\nthis allows us to have an haproxy running with nbproc > 1. the limitations are\nthat every process has to have it's own stats socket, and that all processes\nmust have identical service configurations (no dedicating of backends to\nparticular process numbers)"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/7aaec1e95b246e365e4b13994409a9fc6bd9884a", "message": "[haproxy] allow multiple stats sockets as an option\n\nwe are not using multiple stats sockets yet, we just enable (and document) that\noption"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/1d875e1dc6b398765c152b836fb35701074ad664", "message": "Merge pull request #197 from airbnb/bump_to_v_0.13.5\n\nbump version to v0.13.5"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/9960519b31a36d64a9bae9e29e0b36d30a6ae9b8", "message": "bump version to v0.13.5"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/bc8db4dedfcfcaca7f6620fc764607bbaf427cca", "message": "Merge pull request #196 from brianwolfe/wolfe-socket-fd-cleanup\n\nClean up HAProxy sockets after reading"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/11e27483789d479ebc8d4d8062b6c549cfb35675", "message": "[synapse] bump version to v0.13.3"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/257cd9c995d6e4e2faa3a82ebdb879a9872b653e", "message": "Merge pull request #191 from airbnb/haproxy_tests\n\nHaproxy tests"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/6cf3c853319dec335ddf1d5cee8f4567f955093e", "message": "[spec][haproxy] tests for state file updates\n\nadd tests to make sure the state file is properly managed. we refactor the\nstate file handling in `Haproxy` to make testing easier, but otherwise leave\nthe functionality unchanged"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/784f930b9aeb529973f3034f65505f28bef81b8d", "message": "[spec] add timecop for time-sensitive stuff"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/853d77633a13a754fb64ec708bc633dd71d81a1b", "message": "[spec] unique names for mock services\n\nallows us to use them in arrays"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/47c57c38a062b31ab5bb32af7e4f69887acc4cec", "message": "[spec] test that the state file is regularly updated\n\nwe modify `Haproxy` slightly to make testing easier"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/9c16a81c64e99f99e96bb504320ee230fdd29182", "message": "[spec] specs for #update_config of haproxy\n\nthere's quite a lot of complicated logic in that method"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/61f932fd98d3c32823e2edcb64db4f9c1cdf5616", "message": "[haproxy] section_fields becomes a constant\n\nnot clear why it was a class var in the first place"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/c7b30cd5a28b3ed88a6b185360d0cd8a347e2c9b", "message": "[haproxy] factor out name instance var\n\npart of the effort to clean up the public interface of haproxy"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/7492086e1e44624d47962e90a66501662319bdf1", "message": "Merge pull request #171 from hightoxicity/feat-hash-backendnames-in-cookie\n\nPermit to hash servernames in affinity cookie"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/afa0e35a458fa5db09c29f083e71a39dafa4f547", "message": "bump version to v0.12.2"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/98561d682cbcc041a712d4a65ba5d8d957fae6b1", "message": "[travis] switch to new infrastructure"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/779f7264f88ee96b84cbdb2baa9c23be5483e362", "message": "bump version to v0.12.1\n\ni failed to bundle install before marking v0.12.0 :("}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/a3f03b8f704752b2f8bdffe1b018edefbc853073", "message": "bump version to v0.12.0"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/40aa25759ce264a941d24317d93d85e0d78a76e1", "message": "Merge pull request #123 from eik3/patch-1\n\ntypo"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/c8ab37d4df9880423fd3294429306fa365d35ba7", "message": "Merge pull request #113 from airbnb/latest_rspec\n\nLatest rspec"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/7e781d7c8b1994e9aa87e91f509d28620df44b5e", "message": "verify doubles"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/cd7db64cc690b50a76b7cb6f0cb97f52226cca40", "message": "run transpec to convert specs to new format"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/366ff2be0ba103af701e67a924b17b9bbadcc8a2", "message": "fix some broken specs and deprecation warnings"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/d8a8d6a909bc01e63462e5a00c40252c0f45f0cd", "message": "bump rspec version"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/e012cd3a518098545a0ba73958d3c17bd5ab40d9", "message": "Merge pull request #90 from bobtfish/fix_tcp_mode\n\nFix to not include a cookie in TCP mode."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/a1cfd34916388ba1baa7d35e5fd40bde15aa20f7", "message": "Merge pull request #85 from strava/ls/filter_ec2_instances\n\nConsider only running instances and memoize AWS calls."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/3f93b1be7d79e31961771d304b09b2be60d27d0e", "message": "[readme] better document shared_frontend and port options\n\nalso fixes some stylistic nits"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/fa0bfdf9e7006d12ee0481dc1a9c64b02c384e36", "message": "Merge pull request #80 from airbnb/tag_watcher\n\nTag watcher"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/f23f25f9c121ea85c0a0d1e3058e4ac22dd75510", "message": "[synapse] bump version to 0.11.0"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/b709838288659480207cf2378d48fff36be42dc3", "message": "[haproxy] always add a cookie to the server\n\nThis makes it easier to do session persistence based on a cookie. Without an\naccompanying `cookie` setting in the backend, this change has no effect, as\nconfirmed by Willie in this mailing list post:\n\nhttp://marc.info/?l=haproxy&m=140312462018915&w=2"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/0bc10f1102fae0a459d57fc134de743a81373ba4", "message": "Merge pull request #75 from memory/thread-expiry\n\nexceptions in the watcher threads should wake the main thread"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/139a68fc9497aea0fa77a18c29cc144ed32d404b", "message": "Merge pull request #68 from airbnb/cleaned_up_session_expiry\n\nCleaned up session expiry"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/cc7f901ab0581689720a07e31d1faf46b404f6dd", "message": "Merge pull request #73 from rrrene/patch-3\n\nUpdate docs badge in README"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/8237c9e9279c25a5030eb180f067adf1058b2042", "message": "Merge pull request #74 from turbovote/tcp-check\n\nAdd tcp-check to allowed HAProxy configurations"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/b5822a3e8f93f42310a33bf6de933e5ac3381e1e", "message": "handle session expiry by failing fast\n\nthis will cause synapse to restart"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/29b96fb6925d923309c3d3f97a46714a186de1de", "message": "maintain api for new zk_ functions\n\nmake everything private unless it must be public. we also\n* kill the @should_exit parameter, which is ambigous\n* force node creation during zk connection\n* raise a RuntimeError if we cannot set a watch; there should be\n  no way to recover from that"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/307cb7363d4383a8b2d71553638124b56f0bd89d", "message": "bump version to v0.10.0"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/6d20ce283e181d8126791df842a5295ef5c4cb37", "message": "always use the watcher's `reconfigure!` method\n\nconsistency between watchers"}], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/207", "title": "[base watcher] filter on set_backends", "body": "currently, we are filtering backends when we attempt to retrieve the list of\nbackends. there are a few things wrong with that:\n- we perform the same filter computation repeatedly every time we rebuild the haproxy config\n- we incorrectly restart haproxy even if the set of backends which don't match the filters changes\n- we log the total number of backends discovered, not the number of backends matching the filter\n- it's unclear how the defaults/keep_last logic plays with filters/leader election\n\nthis PR moves the filter/leader election logic to be performed as part of\n`set_backends`. the call to retrieve the backends becomes just an\n`attr_reader`. we don't have to make any spec changes, because we already test\nall of this logic as part of testing `set_backends`\n\nthis change may be backwards-incompatible depending on configuration, because\nthe logic around how default/previous backends are used is different.\npreviously, if no backends match filters (including the default backends) or if\nno backends are elected as leader (including default backends) then we return\nan empty list. after this change is made, we will apply the filters/election\nparameters to just the discovered backends. if these fail election or\nfiltering, then we will return the default backends instead of returning an\nempty list.\n\ni think this change makes things more clear overall. previously, there was no\nmechanism to always return some default set of backends no matter what, and now\nthis mechanism is just the setting of `default_backends`\n\nto: @jtai @jolynch @scarletmeow \n", "author_association": "COLLABORATOR"}], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/17831665", "body": "you can run synapse locally and it will do the right thing. this doesn't quite work as-is. lets sync up.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/17831665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/17844752", "body": "lgtm\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/17844752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/19633507", "body": "tested on vagrant, and does the correct thing. exciting times!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/19633507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/20099792", "body": "tested in vagrant; not only does it work, but it actually exits when zookeeper starts acting funny\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/20099792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/20146727", "body": "tested on admin as well; it generated the same haproxy config. i was concerned that the synchronous updates would cause a noticeable lag in taking down services, but i couldn't discern much the difference when stopping/starting nerve on an optica box.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/20146727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/24695672", "body": "tested on admin boxes btw\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/24695672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/24944030", "body": "yes a lot of the changes were to the `gemfile.lock`\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/24944030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27515126", "body": "thanks for the pr! it looks generally good to me.\n\nmy main concern: i'm wary of adding a second config format; there should be only one way to configure synapse, and it should be the same as nerve. i often add comments to json hashes by just adding a \"comment\" field (which is ignored by the code). would that be sufficient?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27515126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27516718", "body": "i would merge this PR with the yaml stuff factored out. i'd be happy to set up a time to chat with you about infrastructure. email me (firstname.lastname@airbnb.com) to set up a time.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27516718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27743806", "body": "bah, i'm a bad maintainer; @memory which arguments that normally go into `listen` can go into `backend`? can these be the same thing?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27743806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27744194", "body": "the matrix says no; now we're going to have duplication of config information between `listen` and `backend` sections. probably, as part of the changes to the config format, we should have dynamically build the `listen` directive.\n\ni think we can do this by being a little smarter about what the different haproxy directives mean and which sections they can go in. then, we can extract the ones that relate to `backend` or `frontend` from `listen` and put them there without requiring an extra `backend` config section...\n\n@memory does that sound like a reasonable approach?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27744194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27790606", "body": "the list of keywords and their applicability was auto-generated using [this gist](https://gist.github.com/igor47/7322131). prettified by piping through [jq](http://stedolan.github.io/jq/)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27790606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27792318", "body": "thanks for the PR! looks great except for the few nits. i would definitely want to see the config handling addressed.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27792318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27909890", "body": "i added some additional commits what might address the concerns from @memory \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27909890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/28260993", "body": "this fixes airbnb/synapse#17\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/28260993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/28337885", "body": "thanks! this will be in a release later today. if you're feeling motivated, write some tests around your watcher in the smartstack cookbook: https://github.com/airbnb/smartstack-cookbook\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/28337885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/28440650", "body": "this runs contrary to how synapse should be used.\n\nsynapse is meant to serve as a proxy ONLY for other services running on the same machine as synapse. if you would like synapse to help you configure a central routing layer, you should write your own `listen` or `frontend` directives in `extra_sections`. however, i do not recommend using such a pattern.\n\ni considered suggesting that you parameterize this option instead of just setting it to `0.0.0.0`, but i don't want to send the wrong message to future users.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/28440650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/28500408", "body": "the rationale is resiliency and conceptual simplicity.\n\nonly two machines should be involved in a service transaction -- the client, and the server. if you introduce additional intermediary machines, then the failure of those machines needlessly interrupts communication. ideally, with synapse, even the failure of a particular server instance is transient because it will be removed from rotation and other machines will take it's place.\n\nthere are no advantages to introducing additional machines in the pathway, and plenty of disadvantages.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/28500408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/28503004", "body": "thanks for the pr; we've been having a lot of internal debate about how best to handle the mesos use case. we have two broad avenues:\n1. configuration management; this is how we roll out our deployments to static machines, but in the Airbnb environment even our mesos slaves are on chef. for synapse, this means that to accomodate your use case (every service is available on every machine), when you deploy a new service, you would also need to run configuration management on every slave to inform it about the new service. in our environment, this approach works well because we add services fairly infrequently. however, this could be a bigger deal in more dynamic environments such as multi-tenant ones.\n2. dynamic discovery; this is how our internal fork of nerve works on the mesos cluster, with services pinging nerve with their check information when they come up. the disadvantages are that services have to be modified to support nerve. the advantages are that services can share the same nerve instance. an alternate approach would be to deploy a copy of nerve alongside every service when it's scheduled, which would waste memory but be transparent to the service.\n\neverything we can try will fall somewhere on the spectrum from static config files, made perhaps slightly more dynamic with configuration management, and purely dynamic configuration that happens inside the application at runtime (by reading from a data store, or being remotely configured, or whatever). the question is, where on the spectrum do we want to end up.\n\ni'm not sure of the answer to that question. my gut feeling says to avoid dynamism as much as possible because it keeps things simpler. how is the program going to behave at runtime? just look at it's config file!\n\nhowever, i recognize that for some use cases dynamism might be unavoidable, and a multi-tenant mesos environment might be one of those cases.\n\nif we do agree on a dynamic approach, what's the best implementation? i've spoken to engineers at youtube and baidu who have taken the tack of making zookeeper keys available as a local filesystem to source their configuration. if we take such an approach, the additional complexity to synapse and nerve would be watching for updates to their config files (inotify?) and acting on the change (restarting itself?). a separate, out-of-band process can dynamically update the configs based on any number of comfiguration sources. this is more general, abstracts the complexity, and can fail independently and still leave a running synapse and nerve.\n\ni haven't yet really looked at the PR, but let me do so to see how much complexity this would introduce. but my initial preference is to keep nerve/synapse as simple as possible and be very very careful about the dynamism we introduce into them.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/28503004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/28953600", "body": "yup. right you are. for us, the reasoning was \"if airbnb.com won't resolve we have bigger issues anyway\". i think the second solution you propose (does it get a response in the first place?) is good enough.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/28953600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/29581957", "body": "i've thought about this a bit and i'm not happy about the additional complexity. \n\nyou can accomplish the exact behavior if you define each of your backup zk paths as a separate service; for instance, `service1`, `backup-service`. in the `service1` config, you can use the [`nb_srv`](http://cbonte.github.io/haproxy-dconv/configuration-1.4.html#7.5.1-nbsrv) acl and redirect to the `backup-service` backend if the number of backends in the `service1` backend is too low (in your case, 0, but using this approach you can have more flexible rules)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/29581957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/29742275", "body": "we've already discussed this idea in this issue: https://github.com/airbnb/synapse/pull/23 currently, if you would like to bind to additional addresses, you can just use a `bind` directive in the frontend stanza. however, i don't recommend this mode of operation, as i said in the linked issue.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/29742275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/29742446", "body": "i think this is fixed now; closing\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/29742446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/29744783", "body": "i could have sworn i commented on this issue over the weekend, but my comment seems to have disappeared... or is this a different PR?\n\ncan you show an example of the kind of configuration you would include in `shared_config`? do we need any special configuration? i guess at least the port to bind to... \n\nmaybe the config format could be: `\"shared_frontend\" => { \"port\" => 8081, \"frontend\" => [] }` to fit in with the definition of services? maybe we could reuse the code from service validation to also validate `shared_frontend` ? \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/29744783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/29834315", "body": "lgtm in general except for nitpick\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/29834315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/30461004", "body": "yup, was waiting to get it tested. looks great!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/30461004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/30461105", "body": "does the approach i've outlined sound reasonable? can i close this issue?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/30461105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/30461235", "body": "yup, you're totally right. i'm still really uneasy opening up this use case, but enough people are asking for it that maybe it's a good idea?\n\nwhy do you want to have a pool of dedicated haproxy machines?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/30461235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/30462603", "body": "closing; we have a workaround for the use case\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/30462603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/31595564", "body": "because STDERR is unbuffered; if we were outputting to STDOUT, we would see a bunch of log lines appearing in files all at once with long periods of no output, which makes debugging harder. we saw this happening when we ran those programs via `runit` and logged via `runit`'s `svlog`.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/31595564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/31678143", "body": "we've recently observed this problem in our environment as well; it's my top priority to investigate ATM\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/31678143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/31680638", "body": "a way to reproduce this would be AWESOME\n\nOn Mon, Jan 6, 2014 at 11:41 AM, memory notifications@github.com wrote:\n\n> Well, I guess I'm glad to know it's not just me. If I can provide any\n> additional info for debugging, please ping me on freenode or gchat.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/airbnb/synapse/issues/34#issuecomment-31679711\n> .\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/31680638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/31800831", "body": "a stack trace from a stuck synapse process, curtesy of @nelgau : https://gist.github.com/nelgau/3a910d5da1ac09abfd22\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/31800831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/31986793", "body": "so, reading through the code, we don't really have any shutdown handling to speak of. what's more confusing is that it shuts down cleanly so much of the time. i'm going to try to add shutdown handling modeled after nerve's and see if this helps\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/31986793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/32231591", "body": "hi! i would definitely be interested in having etcd watchers for synapse as well as etcd publisher in nerve. the nerve part would require some refactoring since we only support a single type of reporter ATM. let me know how i can help!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/32231591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/32303499", "body": "this is now running on a small subset of airbnb machines, and will be rolled out to the rest of the machines later today. the early tests are encouraging, so i'm going to make this the next version.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/32303499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/32414433", "body": "thanks!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/32414433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/32639691", "body": "@memory agreed, but this is a separate issue; i opened a new one [here](https://github.com/airbnb/synapse/issues/38)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/32639691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/33414270", "body": "yup, this was done. sorry for the trouble!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/33414270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/34085215", "body": "this is awesome! :+1: \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/34085215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/34086228", "body": "i guess this buys you the ability to add custom service watchers while using stock synapse? i'm okay with the change, but i'd rather have only one system for adding new watchers. do you want to convert existing watchers to use the new system?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/34086228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/34126309", "body": "sure!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/34126309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/34719958", "body": "closing since this functionality was addressed in #43 \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/34719958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/34830445", "body": "cool! i wish there was a way to automatically run the integration tests in the smartstack cookbook, too...\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/34830445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/38324831", "body": "thanks for the PR!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/38324831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/38501689", "body": "thanks! looks great\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/38501689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/38712895", "body": "ah, i've read about this project! this is awesome. merging.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/38712895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/39500930", "body": "you need to pass arguments to the `synapse` command; run it like this: `synapse -c path_to_config_file`\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/39500930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/40014141", "body": "thanks! this is awesome.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/40014141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/42260800", "body": "thanks! i merged #55 \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/42260800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/42260822", "body": "thanks for the PR!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/42260822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/42260839", "body": "thanks for the PR!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/42260839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/42261529", "body": "thanks for the PR!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/42261529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/42263047", "body": "okay, so, you have three new objects:\n- a modified zk watcher, which instead of signaling synapse signals your modified dns watcher\n- a modified dns watcher, which is different in that it doesn't run it's own sleep loop but waits to be signaled by the dnszookeeperwatcher. it also permits an empty list of servers to discover\n- your dnszookeeperwatcher, which sets everything up and then mainly just sends 'do stuff' signals to the modified dns watcher\n\nplus there are some message-type objects that don't do stuff but cary structured information\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/42263047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/42379438", "body": "this looks good to me; lets :shipit: \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/42379438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/44474863", "body": "@airbnb/di PTAL; this looks good to me, and it passes integration test suite, so i'm happy to merge it.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/44474863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/45372408", "body": "the reason is that your `haproxy` section is at the same level of indentation as the `application` section, under `services`; `haproxy` should be a top-level key, at the same level as `services` instead of under it. currently, it looks like you have no `haproxy` section but two services, one `application` which a valid discovery method and one `haproxy` with no valid discovery method.\n\nthis took me a long time to spot. the point of YAML was to make writing these kinds of configs easier, but it still doesn't do an amazing job...\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/45372408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/45375535", "body": "why is it `[\"zookeeper\"]` in square brackets? are you accidentally creating a yaml list?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/45375535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/45831300", "body": "default servers should be a list; see this example, here: https://github.com/airbnb/synapse/blob/master/config/synapse.conf.json#L4-L10\n\nbased on the error message, i think you made it into a plan hash.\n\nwe should really let you know sooner if you don't configure it as a list. feel free to submit a PR to do this validation, or i'll get around to it sometime next week.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/45831300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/46337837", "body": "thanks for the PR!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/46337837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/46337932", "body": "thanks!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/46337932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/46338079", "body": "closing as a duplicate of #73 \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/46338079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/46338185", "body": "this has been tested at Airbnb, and will be deployed org-wide; merging and then bumping synapse version\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/46338185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/46338252", "body": "closing as a duplicate of #68 \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/46338252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/46493979", "body": "@airbnb/sre \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/46493979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/48246470", "body": "yes, it's going to get merged; i'm going to work on it this week.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/48246470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/48983823", "body": "thanks for the PR, @patrickviet ; this has already been addressed in #76 , so I'm closing this.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/48983823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/48984478", "body": "this is an optimization, but i'm wondering about the purpose; zookeeper tends to be fairly happy about even large numbers of open connections, and you won't be reducing the number of watches, which are more expensive.\n\ni'm curious if you're running into some limits on your ZK cluster without this? are you seeing performance issues? can you describe more the problem this is trying to solve?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/48984478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/49053545", "body": "i'm a little confused by the description; how are the auto-generated frontends interfering with your custom frontend? i'd also like to see a commit documenting the option.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/49053545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/49083627", "body": "what you want to accomplish is already possible, simply by leaving out the `port` directive for your service's `haproxy` section. i've better-documented this in this commit: https://github.com/airbnb/synapse/commit/3f93b1be7d79e31961771d304b09b2be60d27d0e\n\nyou may want to look into using the `shared_frontend` to further enable your use case.\n\ni'm going to close this PR; feel free to re-open if i've misunderstood something.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/49083627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/51237917", "body": ":+1: thanks for the PR!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/51237917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/52458646", "body": "hey thanks for the PR. i'm going have a chance to look through this and other PRs when i get back from vacation in september.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/52458646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/52458681", "body": "i'm currently on vacation, but this PR is my number-one desired thing to get into synapse next. i'll look into merging some version of this when i get back in september.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/52458681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/59404023", "body": "lgtm; just our of curiousity, does this actually cause any problems in tcp mode? we have some tcp services running with this and haven't seen any effects\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/59404023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/59569883", "body": "@bcicen cool, will merge. just curious, what version of haproxy are you using?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/59569883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/70732461", "body": "this is great; i've been wanting to do a refactor like this for awhile.\n\n@jnb we talked about you becoming a maintainer of this repo. are you still interested? i have a few days this week to focus squarely on synapse, so i'm going to work on clearing out the current backlog and adding more unit testing. i've already done this for airbnb/nerve last week.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/70732461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/97197769", "body": "cool, we'll just work with #115 \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/97197769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/97229646", "body": "done with first pass, i left a couple of questions/comments. mostly, it looks great!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/97229646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/110488033", "body": "this project is in active use at a few places, and contributors from airbnb and yelp have commit privs. things have been a bit slow in the code review department, but documentation PRs should be fairly trivial to merge\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/110488033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/110522258", "body": "oops, thanks!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/110522258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/111222072", "body": "i don't think we need `use_iam_profile` -- we can just avoid requiring the creds if they're not specified. that's the typical behavior for AWS tools that can automatically use IAM roles.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/111222072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/123498501", "body": ":+1: -- after this is merged, we should release a new version of synapse and roll it out in our infra\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/123498501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/123839518", "body": "looks pretty good overall. i left a few questions in a few places. i also think the test coverage is a little light, especially around zk connection pooling and all of the new haproxy functionality.\n\ni think a few additional airbnb peeps from our production infrastructure team would like to take a look. ping @schleyfox @jtai \n\nthanks for doing this, i'm excited about all of the great new functionality (especially connection pooling, the disabling of the keep-backends misfeature, and the haproxy state file so you can continue to see the disabled backends)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/123839518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/124236614", "body": "okay i think this is ready to merge. once that's done, i'll bump the version and release a build, and we can start trying to run it in airbnbland\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/124236614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/124277338", "body": "ok i released v0.12.1; i'm going to start trying it here as well\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/124277338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/125680463", "body": "my smoke testing went well, and now i'm allowing synapse v0.12.1 to propagate through our infrastructure; i'm going to tackle airbnb/nerve#71 now\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/125680463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/130367659", "body": "i left some feedback on the corresponding nerve PR (airbnb/nerve#74) that i would like to see answered before reviewing this\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/130367659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/131927061", "body": "agreed; closing.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/131927061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/131928001", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/131928001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/135491445", "body": "ah sorry about the delay; this could use a rebase.\n\nalso, we handle this problem for non-default servers with a `server_options` argument, which can cover all of the use cases you introduce plus any other arbitrary ones. maybe this PR should also just include a `server_options` argument for the backup servers section instead?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/135491445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/136429076", "body": "i don't think that makes sense. we run synapse via runit, which also keeps the process attached in the foreground, and we have no problems. also, i'm not sure what you're referring to as far as reloads via forking. our usual model is to exit the process and allow the process supervisor to restart it.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/136429076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/136512677", "body": "fyi @rickypai \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/136512677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/comments/4602524", "body": "unfortunately, we have to bounce haproxy to add new backends for an existing service (if we've never seen the backend before). if a backend that previously existed disappears, it's placed in maintenance mode via the haproxy stats socket, and later we can re-enable it if it comes back.\n\nbut we win a lot by avoiding haproxy bounces during the worst times (deploys, outages). in those cases, we can usually keep the same haproxy process throughout unless we start spinning up new backends. we've seen haproxy instances last for days or weeks in our environment.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/4602524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/comments/4602538", "body": "i should update the comments and get my terminology straight. synapse watches services, and services have backends. a backend is identified to haproxy via a `server` line, but i should stop using the word `server` otherwise.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/4602538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/comments/4605208", "body": "yes. but haproxy restarts are not as scary as they sound. existing connections are unaffected -- the previous haproxy process is left running until they close. \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/4605208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/comments/5344069", "body": "bah, the one with pie on his face is me. https://github.com/airbnb/synapse/pull/47\n\nthanks for drawing attention!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/5344069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4199788", "body": "hmmm; i'm not sure this is necessary. if it _is_ necessary it should live in the configure code in `synapse.rb`, but what are you worried about? multiple calls to configure happening at once mean the haproxy.rb grabs the backends again...\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4199788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4199802", "body": "you never set `@backends` to the list of new ips you resolved... haproxy.rb wants to look at `@backends` to create the listen stanza.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4199802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4199821", "body": "hmmm, what is the `servers` argument exactly? \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4199821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4203792", "body": "do you need an `|| nil` here?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4203792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4755143", "body": "oops\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4755143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4923654", "body": "now that i think about it, i wonder if we can get into a bad state with a single service watcher having problems and as a result breaking updates on the rest of the services. this would definitely happen now, but the question is how do we want to handle such a scenario...\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4923654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4923756", "body": "no, i think the stub watcher is always healthy\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4923756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4923786", "body": "i'm not sure what a better way to test if DNS resolution is working. this just makes sure that the list of addresses for `airbnb.com` is not empty. i chose `airbnb.com` because that's the place where we do the thing; if our domain is not resolving, we've got bigger problems than synapse restarting.\n\ni'm very very open to ideas about what to do here instead\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4923786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4924278", "body": "i guess we have a hierarchy of desirable behaviors here. i think, from least to most desirable:\n- a single watcher breaks synapse silently; it's still running but not functional and requires manual intervention\n- a single watcher fails silently, leaving the rest of synapse functional; requires manual intervention\n- a single watcher breaks and takes synapse down with it, leaving runit to restart it\n- a single watcher breaks but the rest of synapse still runs; the watcher later recovers on it's own\n\nwe're at the first of these. this pull request moves us to the 3rd. getting to 4 is hard...\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4924278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7351841", "body": "not sure this calls for a warning; this seems like a generally common state of affairs.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7351841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7351895", "body": "i would make this a descriptive debug message: `log.debug \"synapse: not generating listen stanza for watcher #{water.name} because it has no port\"`\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7351895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7351905", "body": "s/if not/unless\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7351905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7352435", "body": "changing the name of the listen section to `<name>_in` will break dynamic haproxy reconfiguration. is it possible to have a `listen` and a `backend` section both named the same? if not, some changes will have to happen in `update_backends` or we will end up flapping haproxy\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7352435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7352448", "body": "oh i see; that won't matter!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7352448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7470509", "body": "same as nerve, this should be `filename` instead of `options[:config]`\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7470509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7470530", "body": "same as nerve, more ideomatic is `config['services'] ||= {}`\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7470530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7436978", "body": "will you fail was a non-pretty message if `servers` isn't even specified? `undefined method`empty?' for nil:NilClass` \n\nthis might be true for other arguments in this section. i would do `if @discovery['servers'].nil? || @discovery['servers'].empty?`\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7436978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7437019", "body": "style: to avoid an extra level of indentation in the main function, i would put the Thread starting in the `start` method\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7437019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7579939", "body": "upon startup, if your call to `containers` fails, then your thread will exit with an exception. synapse will keep running, but you will never discover anything again. i think the solution is to initialize `last_containers` to an empty list, or just to `nil` and get rid of the initial call to `configure_backends`; in your first loop, you will discover a containers list, and it will be different from `last_containers` so you'll just call `configure_backends` at that point.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7579939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7579951", "body": "this approach allows you to leverage your existing failure handling and avoid special cases\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7579951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7705352", "body": "public repo, remember?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7705352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/8105894", "body": "please follow the log format; synapse prefixes all log messages with '\"synapse:\"`\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/8105894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/8771794", "body": "okay, lets merge this; two comments: use `||` instead of `or` -- this is in most ruby style guides because of the unclear precedence rules for `or`. also, can you add some documentation on this option?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/8771794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/8884016", "body": "s/default is 127.0.0.1/default is `localhost`/\n\nalmost there, thanks for the work!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/8884016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/9652376", "body": "`return nil unless @opts.include?('shared_frontend')`\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/9652376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/9652449", "body": "instead of assigning back to `@opts`, use normal memoization here; something like:\n\n```\n@shared_frontend ||= validate_haproxy_config('shared frontend', 'frontend', @opts['shared_frontend']).map{|l| \"\\t#{l}\"}\n```\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/9652449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/9652503", "body": "nitpick: maybe call this `validate_haproxy_stanza(stanza, stanza_type, service_name)` ? \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/9652503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/9652651", "body": "nitpick: one sentence per line makes it easier to read future diffs\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/9652651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/9652804", "body": "well now these lines aren't validated even though the default config was validated; a suggested flow:\n\n```\nshared_frontend_lines = @opts['shared_frontend'] || nil\n...\nelse\n  shared_frontend_lines << watcher.haproxy['shared_frontend'].map{|l| \"\\t#{l}}\nend\n...\nnew_config << generate_shared_frontend(shared_frontend_lines.flatten)\n```\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/9652804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/9652819", "body": "obviously if you do this don't memoize the config in `generate_shared_frontend`\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/9652819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12308965", "body": "yup, you're right. this is fine\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12308965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12309193", "body": "a comment for why you're disabling validation might be helpful\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12309193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12309213", "body": "a comment explaining what each message that passes through the queue means might be helpful\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12309213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12309237", "body": "how is this settable? i don't see an `attr_writer` for it...\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12309237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12309248", "body": "oh never mind\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12309248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12309340", "body": "mmmm, copypasta\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12309340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12309387", "body": "this could also mean that the list of servers _became_ empty, right?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12309387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12309402", "body": "i wonder if by modifying the regular DNS watcher more, you could reuse more of the logic there? for instance, what is the justification for abandoning the sleep math there for the simpler sleep math in `zookeeper_dns`? \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12309402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12344012", "body": "to provide a little more insight with what i was thinking here, i think the current fallback is pretty rudimentary. for instance, the 'don't remove the last server' hack has served it's usefulness.\n\ni was planning on centralizing more logic here: https://github.com/airbnb/synapse/blob/master/lib/synapse/service_watcher/base.rb#L69\n\nmy goal was to add anti-flapping protection, which is to specify a minimum number of servers you want before ANY of them start getting traffic to avoid hammering the first machines that come up. i was thinking of killing any manipulation in the watchers and have them faithfully set whatever they've resolved in `@backends`\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12344012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/14913870", "body": "if `aws_region` is set in neither the config file nor the environment, we will fail with an odd error later on; we should validate the presence of this, and the other AWS-related options, in `validate_discovery_opts`\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/14913870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/14913929", "body": "ah you already do that, never mind!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/14913929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/14913963", "body": "maybe instance id is a better name?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/14913963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/29282161", "body": "not sure what this is calling out to, this class does not inherit from anything\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/29282161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/29290309", "body": "are you really concerned about duplicates in the default servers list? if that's the case, maybe we should de-dup `@default_servers`  when we set it\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/29290309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/29291121", "body": "on an unrelated note, one thing i always thought might be necessary eventually is to specify the minimum number of backends to serve traffic.\n\nsuppose a service goes down. when functionality is restored, a single backend is naturally going to be the first to come up. that backend might then be pounded with all traffic which is normally meant for many multiple backends, and as a result might go down because of excess traffic. this would then happen to the second backend, etc.. etc.. \n\nit might be nice here to avoid setting any backends unless the number exceeds some limit which we know can handle the traffic. just a brain-dump, not even necessarily a todo.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/29291121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/29291180", "body": "great!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/29291180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/29291244", "body": "thanks for addressing this original \"mis-feature\"\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/29291244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/29291501", "body": "should we try to re-sync these lists of options with latest haproxy? i wonder what other options have been added since i put these lists in here...\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/29291501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/29291727", "body": "oh i see. i think this would read a little cleaner if it was not all on one line. i would say:\n\n``` ruby\nnew_backends += @default_servers if @keep_default_servers\nnew_backends.uniq!{|b|  [b['host'], b['port'], b.fetch('name', '')]}\n```\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/29291727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35249892", "body": "oh thank god, finally!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35249892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35250420", "body": "a comment explaining this might be helpful to avoid refactoring this away in the future. are you just trying to avoid modified timestamps/inotify events on the files?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35250420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35251138", "body": "curious why you got rid of the `shuffle` here; doesn't it helps to distribute the load more evenly? if all consumers have the same ordering for a set of backends and are using the `roundrobin` algorithm, does that mean that all consumers will first contact the first backend for the first request?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35251138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35253781", "body": "i'm guessing that you're using `weight` to preferentially route within latency zones, but i don't see this attribute used anywhere else. is this branch still missing some code?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35253781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35348285", "body": "no this is just a list of valid options so we can validate the in-synapse haproxy config. we already have a few options here which won't work with haproxy < 1.5; the symptoms if you use unsupported options is that synapse will start, but it's every attempt to restart haproxy will fail\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35348285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53061828", "body": "this should be initialized in a `let`.\n\nalso, for more clarity, might be nice to do something like this:\n\n``` ruby\nlet(:matching_labeled_backends) { [] }\nlet(:non_matching_labeled_backends) { [] }\nlet(:non_labeled_backends) { [] }\n```\n\nthen you can do\n\n``` ruby\nsubject.send(:set_backends, matching_labeled_backends + non_matching + non_labeled)\nexpect(subject.backends).to contain_exactly(matching_labeled_backends)\n```\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53061828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53508380", "body": "i am also not a big fan of this option\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53508380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53509377", "body": "or maybe we should bail of server options also contains weight? i don't have a strong feeling as to what the precedence order should be... at least printing a warning to logs when there are contradictory options seems like a good idea.\n\nthis is probably indicating that it's time to refactor this function, it's getting pretty big.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53509377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53509634", "body": "we should probably either unique on a strictly limited set of properties (just host, port, possibly name) or on all of the possible properties.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53509634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/64960350", "body": "so, it looks like this section of code is only invoked if the state file is enabled. i think this needs a little re-thinking...\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/64960350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/66312678", "body": "if you're thinking that this will return `info` from the function since the `ensure` block is the last one that runs, that's incorrect. this does nothing, and can be omitted. example:\n\n```\nirb(main):001:0> a = begin\nirb(main):002:1* 5\nirb(main):003:1> ensure\nirb(main):004:1* 'hi'\nirb(main):005:1> end\n=> 5\nirb(main):006:0> a\n=> 5\n```\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/66312678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/66312873", "body": "i think you don't need to initialize this here; this seems like it was done just to have something for the `ensure` block to reference\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/66312873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/66313409", "body": "i'm not sure about this `rescue` clause. i think we should allow the caller to decide how to handle exceptions, even though it does make the code more verbose at the call site. i can definitely envision cases where i want to query haproxy via the stats socket but _not_ want to restart haproxy if that fails\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/66313409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/66313885", "body": "although this is unrelated to the main goal of the PR, i would love to see these log lines follow the `synapse: restart required` format we use elsewhere in this function.\n\n``` ruby\nlog.warn \"synapse: restart required because socket command #{command} failed with out #{output}\"\n```\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/66313885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/66314173", "body": "i was confused here, because we appear to just exit without setting `@restart_required`. i suppose the expectation is that we only get `nil` output if there was an error, but this is why i was uncertain about the broad `rescue` block in the `haproxy_exec` function.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/66314173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/66320512", "body": "tighter: `s.close if s`\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/66320512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/66320976", "body": "maybe do `info = haproxy_exec(stat_command) || \"\"` ? that way, if info is something funky, we'll just restart below because we don't find any backends, rather than hitting an error at `info.split`\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/66320976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/68633254", "body": "oops, i should have caught this earlier. using `and` is not a good idea in ruby, you should always use `&&` because `and` has odd precedence rules. i'm working on this section of code, so i'll just fix it in my PR.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/68633254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/70534883", "body": "hmmm... good point. i wonder if i should explicitly check whether `backend_labels.include?(label_filter['label'])` before matching anything?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/70534883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/73300964", "body": "i guess the idea here is that we found the node in the list, but then it disappeared before we could read it's contents. so, we will omit it from `new_backends`. should we make the log message more explanatory? people are going to be confused by what a `consistency issue` is, but it sounds pretty scary rather than routine.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/73300964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/73301144", "body": "something like `\"synapse: node #{id} disappeared before it could be read\"` is probably fine, along with a comment in the code explaining why this could happen.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/73301144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/85857881", "body": "i'm having a lot of trouble understanding what `1` means here...\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/85857881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/85858277", "body": "don't bump the version as part of this PR. we should test this separately, and if it works then we can bump the version number as a separate change and then release the new version\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/85858277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/85858660", "body": "if you're turning this into a hash to speed up lookups, i would recommend using a Set instead\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/85858660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/85858735", "body": "eh i kind of changed my mind about this. we hardcode a bunch of magic strings all through the code here, i don't think extracting this one constant improves the situation.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/85858735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/71786635", "body": "s|routing/discovery|routing ?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/71786635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/71786867", "body": "maybe \"default: `[]`\" ?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/71786867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/71787014", "body": "should these `<a` have a `/>` to close the tags?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/71787014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/71787157", "body": "`res` is unused\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/71787157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/71796408", "body": "an update _from_ synapse?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/71796408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99664301", "body": "one of the things i regret about the synapse design is that there's no easy way to add custom functionality without forking the repo. for instance, lets say you wanted to run your own custom config generator. you can submit a PR upstream, and we can try to decide whether to include your config generator into the project (and maintain it forever going forward), or whether to tell you to bugger off, in which case you'll fork or just give up.\r\n\r\nin interferon (our alerting framework) i designed for open-source by creating a complicated class loader that allowed you to just specify in the config where your custom classes would be located, so you can just install the off-the-shelf project and then add your own functionality to it. that code lives here: https://github.com/airbnb/interferon/blob/master/lib/interferon/loaders.rb\r\n\r\ni wonder if we can implement something similar for smartstack. this is probably not the right PR to do it, but just setting down some thoughts.", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99664301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99664635", "body": "nit: extra `#`", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99664635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99664762", "body": "nit: run-on sentence. `(roughly ~1s). You can`", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99664762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99665762", "body": "nit: took me a few tries to parse this sentence. maybe change `configuration` with `options` so we don't confuse the configuration for the configuration generator with the configuration the configuration generator generates? so, something like:\r\n\r\n> Every service section can contain options which change how the config generator reacts for that particular service. In this function, you should set any missing/default options. This is also a good place to raise errors in case any options are invalid.\r\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99665762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99666099", "body": "nit: ```s/'/`/```", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99666099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99666336", "body": "should we raise `NotImplementedError` in these?", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99666336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99667758", "body": "random note: we implement a lot of things as instance variables, which is a reason we have such a long `initialize`. we should probably be implementing them as accessor methods. for instance, instead of:\r\n```ruby\r\n@time = 0\r\n```\r\n\r\nwe should do\r\n```ruby\r\ndef time\r\n  @time ||= 0\r\nend\r\n```\r\n\r\nand use `time` instead of `@time` in the code.", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99667758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99668362", "body": "we should memoize this, both for performance and to indicate to users that it won't change after being initially set:\r\n\r\n```ruby\r\ndef available_generators\r\n  @available_generators ||= Hash[]\r\nend\r\n```", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99668362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99672714", "body": "i would prefer a more functional declaration:\r\n\r\n```ruby\r\ndef generator_config\r\n  @generator_config ||= Hash[@synapse.available_generators.map do |gen_name, gen|\r\n    gen_opts = opts[gen_name] || {}\r\n    normalized_opts = gen.normalize_config_generator_opts!(gen_opts)\r\n    [gen_name, normalized_opts]\r\n  end]\r\nend\r\n```\r\n\r\nthis might require us to persist the opts in the initializer:\r\n```ruby\r\nattr_reader :opts\r\ndef initialize(opts = {}, synapse)\r\n  @opts = opts\r\nend\r\n```", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99672714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99673977", "body": "i was confused by there being two sources of options for a config generator. the first is the options passed to the `initialize` method, which contain overall options. the second is the watcher-specific options for this config generator.\r\n\r\nmaybe we should call these options `watcher_opts` rather than `config_generator_opts` to clarify the distinction?\r\n\r\nalso, should we really be encouraging side-effects? this might lead to trouble. given how we actually use this code below, returning a copy of the passed-in hash would work just as well. we should encourage users to do something like:\r\n```ruby\r\ndef normalize_watcher_opts(watcher_name, watcher_opts)\r\n  defaults = {}\r\n  normalized_opts = watcher_opts.merge(defaults)\r\nend\r\n```\r\n\r\nfinally, i was also confused by the fact that we have to reach into the watchers to get the config generator options each time we generate a config for that watcher. i guess i'm not sure what to do about that problem, but i'm kind of annoyed about repeated calls to, e.g., `watcher.generator_opts['haproxy']` ", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99673977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99676725", "body": "we should document `initialize`:\r\n\r\n```ruby\r\n# The generator will be passed-in any options specified in it's dedicated section. Those are\r\n# given as an `opts` hash to the initializer. You may (and probably should) omit this method,\r\n# or you can declare your own -- remember to invoke the parent initializer!\r\ndef initialize(opts = {})\r\n  super(opts)\r\nend\r\n```", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99676725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99676913", "body": "should we add a default initializer?\r\n```ruby\r\nattr_reader :opts\r\ndef initialize(opts = {})\r\n  @opts = opts\r\nend\r\n```", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99676913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99678950", "body": "can we declare a `watcher_opts` var so we don't have to keep calling `watcher.generator_config['haproxy']`? also, should we be hard-coding `'haproxy'`? i think we should use `name`:\r\n\r\n```ruby\r\nwatcher_opts = watcher.generator_config[name]\r\n```", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99678950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99679164", "body": "we can probably do:\r\n```ruby\r\nport = watcher_opts['port']\r\nunless port\r\nend\r\n```", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99679164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99679295", "body": "whenever we do this, lets keep the name consistent. i propose `watcher_opts` as a variable that generally refers to the watcher-specific options for the current generator", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99679295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99679850", "body": "i feel like we should be moving towards accessor methods and away from explicit instance vars, not the other way. this makes testing easier, since you can `allow(generator).to receive(:opts).and_return({})` rather than resorting to meta-programming in the specs (`generator.instance_variable_set(:ops, {})`)", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99679850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99680000", "body": "should `generator_config` be  plural?", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99680000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99680523", "body": "![image](https://cloud.githubusercontent.com/assets/200575/22665748/bd659b98-ec6a-11e6-8c81-57d04e1b8cd1.png)\r\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99680523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99680910", "body": ":+1:", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99680910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99680981", "body": "\ud83d\udcaf ", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99680981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99681627", "body": "we're going to end up logging this warning quite a lot. maybe we should only do it once?", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99681627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99681874", "body": "should this validation, too, live in `BaseWatcher` ?", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99681874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100444241", "body": "oh i see. yeah, i guess if you `gem install synapse` then it would work with any other systemwide-installed gems. if you install a synapse bundle and `bundle exec synapse`, you have to put the other gem system-wide or bundler won't find it", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100444241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100444375", "body": "sure", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100444375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101402996", "body": "maybe something like `bind_line = [\"#{bind_address}:#{port}\", bind_options].compact.join(' ')`?", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101402996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101403119", "body": "magic strings should be constants; `DEFAULT_BIND_ADDRESS = 'localhost'`", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101403119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101403652", "body": "convention is to use `{...}` with single-line blocks and `do...end` with multi-line blocks", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101403652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101404053", "body": "this file should probably live in `spec/lib/config_generator` ", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101404053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101404646", "body": "convention is to use `do..end` for multi-line blocks", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101404646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101404995", "body": "i still think it's jarring that we have things called `config_generator`s as well as a function called `generator_config`. maybe we can call this method `config_for_generator`? that reads better, since it is always accompanied by a specific generator name", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101404995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101405663", "body": "we should probably pull this copy-pasta into a `RSpec.shared_context` definition, maybe we can call it `\"with a mock synapse\"`", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101405663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101405884", "body": "this spec file should probably live in `spec/lib/config_generator/haproxy_spec.rb`", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101405884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101406566", "body": "should we `.dup` this?", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101406566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101406810", "body": "so, this would become `@config_for_generator` if you accept my earlier suggestion", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101406810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101407032", "body": "we should either call this `opts` or `config`. seems like we settled on `config`", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101407032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101407566", "body": "eh, i feel like it's pretty standard practice to memoize in ruby if you need a specific view of otherwise-existing state. but UP2U!", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101407566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101407893", "body": "should this be called `describe '#initialize'` ?", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101407893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101408260", "body": "maybe more like:\r\n\r\n```ruby\r\ncontext 'when configuration via the socket succeeds' do\r\n  before do\r\n    # make the context true by stubbing out `talk_to_socket`\r\n  end\r\n\r\n  it 'does not force a restart' do\r\n    subject.update_config(watchers)\r\n    expect(...).to be_falsey\r\n  end\r\nend\r\n```", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101408260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}]}, "bsherrod": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/c50b6dd5027d068f8acf7196d652eeea4109fbc7", "message": "Merge pull request #246 from bsherrod/bs-haproxy-path-var\n\nadd generator_config_path config option"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "darnaut": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/aba2658a9febd19dd1f7a9804691c15c045d1f04", "message": "Merge pull request #245 from airbnb/erb_config\n\nSupport embedded ruby (ERB) in config files"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/8205f1037afacd76c13b6738c4cbcb47178fab6d", "message": "Support embedded ruby (ERB) in config files"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jolynch": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/c3c43a04757a8174edf33ddabccc05fd16f97e8f", "message": "Bump to 0.15.1"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/26c5ab1161b677f6c740752e41fdd3d63dcb3a18", "message": "Merge pull request #242 from lap1817/feng-pan-synapse\n\n[synapse] fix bug in generate_backend_stanze"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/b1ef75453b9347edb21f636ff4c2c14fa51c7a9f", "message": "Merge pull request #244 from airbnb/fix_travis\n\nTry upgrading bundler on travis"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/b808ce579cce10db11298b160595c26cc03778c8", "message": "Try upgrading bundler on travis"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/117e26d6ec1bd5118fbe7be7ce563f390118b83d", "message": "Merge pull request #241 from lap1817/feng-pan-synapse\n\n[synapse] enable generator config update from ZK"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/9226826e7f3c57fe7f9a0dc300915081a9df7dfb", "message": "Bump to 0.14.7"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/c73c41e46e45a3986d3e77d033c2dc735d501f3c", "message": "Merge pull request #240 from airbnb/jlynch_better_id_algo\n\nTo find the next server id, just count up"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/a4a1a6dff809710d0a07c313ab449c5e2704b2d3", "message": "To find the next server id, just count up"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/511738ba67210ba45e59a814430c2e5b756db618", "message": "Merge pull request #239 from airbnb/jlynch_consistent_shuffle\n\nMake shuffle reproducible"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/9c9c7b8fb5095fb01903270b5356f16a67a360e0", "message": "Fixup max id search"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/ec0ea19d6414e945324487bcdcba530f42323341", "message": "Only store valid ids in the state file"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/5608ba97b3b36546796806b64262a9f5a337196f", "message": "Maintain bookeeping both directions for server ids"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/86b8368000523e4b2241da35419cd7c7a2cdb8f0", "message": "Factor things better"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/f0bb0af09f2b4b74e0ba43e708be1c38fce15b45", "message": "Oh man"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/b84270653236c1562172c4c41e1b3ba9923983ee", "message": "Add some test coverage of haproxy_server_id"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/912c5fef6f6245b463da8a59a6b6c882ae646127", "message": "Have to use a separate variable"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/30e69a44f080138e9ec278023729ecf14b786883", "message": "Refactor id management to use the state file"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/5ee5012f3d153a8c20bb98054965807ed54501b2", "message": "Writes out HAProxy ids for full state file compatibility\n\nThis makes it so that we generate deterministic ids along with the\nnames, which should mean that across synapse and haproxy restarts we stay\ncompatible with the HAProxy state file."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/5976f8d45d5da8e0de591afa6c50ab9240f987c5", "message": "Better tests\n\nSince ruby 1.9 and 2.0 shuffle differently ... let's just test that the\norder is the same."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/d4ed90d5346d63d388a5c3affb54027bfbbc0bf9", "message": "Add seed support and some tests"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/2de2f57a368ebe70e7500602438ed25b87db77f3", "message": "Make shuffle reproducible\n\nThis way we still get different orders on different client machines,\npreventing long lived connections from all hitting the first or second\nserver, but also for reloads we get a consistent ordering that does not\ninvalidate the HAProxy state file (which assumes your backends don't\nchange order)."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/8bd609af27bd871d256544eb0037ae57b78ab871", "message": "Merge pull request #237 from noggi/zk_dns_bump_revision\n\nBump revision in DNS watcher of ZK DNS"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/ff59495cb347435123492775f22021abd371809e", "message": "Bump to 0.14.6"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/0514a126a6ade55d6065eb5674c4afc343fab862", "message": "Merge pull request #236 from noggi/zookeeper_dns_revision\n\nPropagate revision updates in ZookeeperDns watcher"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/914d38f578d03759674a3e9aa49623f6ab7a93bc", "message": "Merge pull request #232 from airbnb/allow_disabled_files\n\nAllow disabled files"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/8070c91ea8afae0312ab7e66e925caba54efb465", "message": "Bump to 0.14.5"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/e952c947714f450b9262d18bf782fc88609ab445", "message": "Better support disabled file_watcher outputs"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/b87de0222e06ff7614349fc618d019519af76233", "message": "Bumping version to 0.14.4"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/b8eba7146a351c1ad943516218dfd036a927989d", "message": "Merge pull request #230 from airbnb/do_less_work\n\nDo less work on file output updates"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/4adf84fda4db9ea4cdb15e090c59306a8b18ea35", "message": "Do less work on file output updates"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/f3774aab6e73e55a130f6d2fa16dcced68dbafca", "message": "Fixup README links\n\nTrying to fixup interrefs"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/851ce9c2a7e1cc865db652f238025bc73bcc7767", "message": "Merge pull request #228 from somic/haproxy_generator_cache1\n\ncache haproxy stanzas in generate_config"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/1b576eaee3f7c03d83c3ded9fd241f203bc5e97a", "message": "Bump to 0.14.3"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/ea09eacaccbb9588ec4597032a56caa1622e923d", "message": "Merge pull request #227 from roberteckert/patch-1\n\nSupport 'service_conf_dir' directive"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/66c9dd4e2c5dc894cf2e7e508d130e261ec5c7c4", "message": "Bump to 0.14.2"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/268ebe063885c3a96c438406369eb2c45c41da33", "message": "Merge pull request #225 from somic/rebase__noggi/synapse/haproxy_avoid_noop_reenable\n\nMerge noggi/synapse/haproxy_avoid_noop_reenable_211"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/c759ef1016cd52053bc755c749bd9656357920d8", "message": "Merge pull request #224 from airbnb/bump_0_14_1\n\nBump to 0.14.1"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/34ea03d0b0b317fea7819f1e7ad3e011d8f66778", "message": "Merge pull request #222 from airbnb/document_nginx_plugin\n\nAdd docs for nginx config generator"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/f0891d536749f8cbc5162dedc3f5373baeead9bb", "message": "Doc clarifications"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/698dbd5378d555b059d105eee0264afd5437551d", "message": "Merge pull request #223 from airbnb/nil_port\n\nAllow null bind port"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/863946f1e7e070003fd45fbe33ef740055471ed1", "message": "Add docs for nginx config generator"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/4a891bd5833b93ddfdebd246d32623dabf4bad81", "message": "Forgot the Gemfile.lock"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/bc27103a38c624727908599cdf52ba836bc3c5e8", "message": "Bump to 0.14.0"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/5adf28fcf3299632c8bc8e4daa2aea1e568c333a", "message": "More fixups for igor47"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/c4f7713de1516ed50a6e26f0440af1441588472b", "message": "Review feedback from igor47\n\nA number of interface changes and renames, as well as a few\nimprovements."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/70d45f262a49b1fec6dbeab6a0d2fd6aec7ac0fa", "message": "Adds disabled option for HAProxy config generator\n\nThis will allow folks to have HAProxy and other proxies both controlled\nby Synapse with one underlying zookeeper watch"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/cae51e8d3a7d09d9171f8e9e6e5d18c6687ad6f3", "message": "Fixup bind_option unit test after merge"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/b613dd7a09c5084182478ce4af10f9088e2a1e5a", "message": "Fixup validation of options for do_socket, do_write, do_reloads\n\nAlso add some regression tests that fail on old master but pass on this\nbranch"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/246cef17a50663eaec3cba0f2cf761a0cf3b9549", "message": "Address igor47's feedback, mostly doc changes"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/c0d05f4c68ebb34332ee0695703802c4992632a5", "message": "Fixup generator readme"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/889811801f976279140a796b8a9946d31fc6431e", "message": "More documentation"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/305380258ae51ec3b24ddc41f4766955a5a89cfc", "message": "Changing method to type in config_generator"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/0738eed5e6fde5f618646ce76510552a4ac290ce", "message": "Clean up name interface in config_generator\n\nAlso removed unneeded attr_readers in config generators"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/a20de7ccf45797e96c59acd75fbc0347053f8269", "message": "Refactoring synapse mocks"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/4716e36dda2f83b07d9b38bcf03fea24255ca9bb", "message": "Port haproxy spec tests to properly mock the new config_generator method\n\nPreviously it reached into ServiceWatcher's .haproxy method directly."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/0a8a4e57d1980993e6e002fa8285b6406afd9cf8", "message": "Rename config_generators_config to generator_config and port haproxy to\nuse it\n\nThis makes the ConfigGenerator code a little less verbose and is\nconsistent with calling ServiceWatchers 'watchers'"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/b016272d425f962e032389172da4b6cd75d78440", "message": "Minor typo"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/ab4c32c7dbcf132811df968ea0c8f3bf076de031", "message": "Refactor specs to pass given new interfaces"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/3b36abb4ed51c4e2296ce1f726948928593ba6b3", "message": "Remove all mention of server_port_override and @haproxy from watchers\n\nAs server_port_override was never actuall used by the haproxy config\ngenerator it didn't make sense to live in the watchers.\n\nAlso the deprecated @haproxy was removed"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/603be68c3818f3d0e3d6c1dfb52a105a7292ee3e", "message": "Minor refactors to synapse.rb and adding normalize_config_generator_opts\n\nConfig watchers can now change the opt dict apssed to them from watchers\nvia the normalize_config_generator_opts callback"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/b2479f3b46f48cc6a6e6dc8fbfb5f0022da1bf72", "message": "Cleanup the services documentation a bit more"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/a641ff5f64d27101ca84709fae39c137ec0b70b8", "message": "Add documentation to the README"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/6339f7ae5b2702c6fbd93e17b1f318c7cbfa426e", "message": "Support pluggable Configuration Generators\n\nJust like we can support multiple service watchers, now we can support\nmultiple configuration generators which can output in whatever format we\nwant"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/36114b41f62b8bce61d1bfedbd089ec875851332", "message": "Merge pull request #218 from femnad/readme-add-missing-quote\n\nAdd Missing Quotation Mark in the Sample Config"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/c5ed190b95b43353c3cd470e968d8dab0e8b1289", "message": "Merge pull request #216 from sjankowski-r7/Adding-bind-options-param\n\nAdding additional bind_options param to support ssl configuration"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/45f4d81e0f858bb3b15956f65d2ce8de492f92bb", "message": "Merge pull request #214 from airbnb/rpai/ruby_23\n\ntest against ruby 2.3 and latest rubies"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/794eec32ae1316319cbe5ec090e0c7dace898245", "message": "Merge pull request #213 from ronbak/feram-patches\n\nMinor Fixes"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/e9f6b393bde394f3cbe0c45d6656ac8978e2cb0c", "message": "Bump to 0.13.8"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/dd892c9aabfb4b790dbd94ff7010bbd3be210b41", "message": "Merge pull request #206 from airbnb/resilient_zk_watcher\n\nResilient zk watcher"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/cfa3feb84dc4279f45d2fecc60626600bda8718b", "message": "Add an explanatory comment and better log message"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/405d746d0cd8cfc7b272a00773e36056b035aca8", "message": "Fix the race condition in the Zookeeper watcher"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/e836ff7c372118a9950ddf391d22ef9be67943e0", "message": "Adding a test of the race condition"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/72810733b5b926231af0d915fb6e8da3aa26d126", "message": "Merge pull request #189 from airbnb/label-filter-readme\n\nAdd label_filter to README.md"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/8197e3ba1f2b86cfe11800b3bd161418091671a7", "message": "Merge pull request #186 from airbnb/fix_spec_test_config_more\n\nFix the spec minimum config to be more realistic"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/0c947889aafc54dc00ce1ec26b81d2c8da289341", "message": "Fix the spec minimum config to be more realistic"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/2717610ff1345be64ea7c6098b3ef85fb4a5786a", "message": "Merge pull request #183 from tomfitzhenry/fix-minimum-conf\n\nFix spec/support/minimum.conf.yaml"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/d065cacdec6288417002a2de63f7779a37bd1cfb", "message": "Merge pull request #177 from airbnb/fix_json_regression\n\nFix regression where @seen becomes nil due to JSON parsing"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/224ba393e334864fc6d00c7e393d9c6fe04e0fae", "message": "Fix regression where @seen becomes nil due to JSON parsing\n\nJSON used to raise an exception on an empty file, now it returns nil ..."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/8ffa98f685a28f0adb7e15074d490c052e99243d", "message": "Merge pull request #175 from hightoxicity/feat-fix-test-failure-on-glob\n\nFeat fix test failure on glob"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/a24aaca8de8d6e757500cef28059055cf906af83", "message": "Merge pull request #170 from hightoxicity/feat-ha1.6-http-reuse\n\nBe able to use http-reuse to make connections pooling with backends"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/2e68143337c79c0e34807c003cd7b659d8f25e1a", "message": "Merge pull request #166 from airbnb/add_backend_order_support\n\nAdd `backend_order` option support to `haproxy`"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/d85810f54398401578f76d17b7fb18cb25e7c545", "message": "Merge pull request #162 from hashbrowncipher/state_file_doc\n\nAdd a note about the state file's use for monitoring Synapse"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/00024028b3664ca8a34da1db4c8c00cc08c7614a", "message": "Merge pull request #159 from airbnb/bump_docker_gem\n\nLoosen docker dependency and show how to install older dependencies"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/941e401a822acf7a0c0c32a67ab056ab63433d82", "message": "Loosen docker dependency and show how to install older dependencies"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/8407278c1b7c7375bc66eb821f957bceaad411b0", "message": "Merge pull request #156 from twellspring/per-service_bind_address\n\nallow bind_address in the service haproxy section"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/d8dffea13ca57681b1cefa12819231d14dbcea6e", "message": "Merge pull request #153 from airbnb/aurora_support\n\nAurora/Finagle registration support"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/6f8f081932ec324ab0f604c93c953b606228f6e6", "message": "Changing naming from aurora to serverset"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/a84e6cc198fb19f0444448f4b0432eb871f77346", "message": "Document the new decode options"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/167b40f426bf97437da24c12281951354acb5a74", "message": "Refactor and fixup aurora support"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/7f161c464bd0a0159864523e0efb10062087439e", "message": "Merge remote-tracking branch 'justinvenus/aurora/watcher' into aurora_support"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/7a1c8b38bc382ea1e93dfd3d5437709e54e97953", "message": "Merge pull request #152 from hightoxicity/master\n\nFix zookeeper discovery port override"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/e056eb5d29e9aa30f8612b7282e5e889d51aadb7", "message": "Merge pull request #92 from democracyworks/filter-out-containers-with-unmapped-ports\n\nFilter out containers with unmapped ports"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/09dd4303d539078ee3e6c38736add967c8547a19", "message": "Merge pull request #144 from airbnb/support_haproxy_service_data\n\nAdds support to the zookeeper service watcher for haproxy_server_options"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/1c95d4093cb14bd75d2893b7bae6f6180dfeb62e", "message": "Adds support to the zookeeper service watcher for haproxy_server_options\n\nThis is such a bad design, I really dislike that we munge the zk data\nmultiple times. Unfortunately I don't know a better way to do it yet. I\nwill work on it."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/e6c32d1c2867e9e8ba21b43edd1ab45d07b3d0c8", "message": "Merge pull request #143 from airbnb/cleanup_old_file_outputs\n\nCleanup old files that synapse no longer manages"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/1802fa2b3a9c332e8e4beac156420669d77af468", "message": "Cleanup old files that synapse no longer manages\n\nIt turns out that when removing services these files stick around\nbecause synapse stops managing them, so in this patch we clean up\nanything in the output directory that shouldn't be there."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/ffe1a7c7b5ecc51597e98b898109ebea218d41df", "message": "Merge pull request #142 from airbnb/add_marathon_to_discovery_test\n\nAdds marathon to the watcher plugin test"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/709574fdae0165a043944ac8989d3920abecdf14", "message": "Adds marathon to the watcher plugin test"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/43a32b194ab24ab9a3682c9eadb468cb1727faaf", "message": "Merge pull request #101 from tdooner/add_marathon_watcher\n\nAdd marathon watcher"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/561b38407bd3e6ef239a98453913905db6604c89", "message": "Fixup mistake in watcher README"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/6adf78fda60e535b1edf8cc2df0f9381e40f3cc4", "message": "Update the README concerning ELB's weaknesses"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/98e79a9e8150889d937fc41bad111b7cbcce0ac2", "message": "Merge pull request #140 from airbnb/custom_server_options\n\nAllow arbitrary haproxy_server_options to be supplied to HAProxy."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/53a224e4fed5bc304fc8aa04f6c006691ccb4893", "message": "Fix minor Ruby 1.9 vs Ruby 2.X compat in install instructions\n\nRuby 1.9 uses --no-ri --no-rdoc instead of Ruby 2.X's --no-document"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/09a5d82c004f379f546983b15c49644d7225b98a", "message": "Merge pull request #141 from tdooner/improve_installation_instructions\n\nUpdate README.md with better installation directions"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/c05817af43da3f4fbac632b882d0edd7ef0fca61", "message": "Allow arbitrary haproxy_server_options to be supplied to HAProxy.\n\nIf you want restarts to be forced when the state changes, you must use\nthe state file."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/01a2409a5f1e19742ff9380ce683a54b31a4b7ad", "message": "Merge pull request #126 from dcosson/ec2tag_improvements\n\nec2tag watcher improvements"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/45fde7fb9bbc24953b36199e333dc8dcc9c95349", "message": "Merge pull request #112 from larryweya/fix-docs\n\nsynapse expects arrays under shared_frontend, hosts and backend"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/6970f1a1c580b5e44755f3ce79011ee4bc153e10", "message": "Merge pull request #138 from airbnb/fix_ruby_2_x_support\n\nDo not unregister the callback in the zk watcher"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/6795c4ee02353b212aee38dc177577c8d21b9f07", "message": "Merge pull request #132 from airbnb/custom_watchers\n\nAllow pluggable watchers"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/6f399de771962644e5cdc46ea49efdc8d2376a1a", "message": "Linking from main README to service watcher README"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/9c7d99b30861a2c039639dc6e874def678d81e2e", "message": "Allow pluggable watchers\n\nSimilar to what tdoran did in his nerve commit 258d62a823, this commit\nallows Smartstack consumers to provide their own pluggable service\nwatchers.\n\nSimply name your class correctly and put it in the right place and poof,\nyou have your own service watcher."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/dd983639b63aa8891feb8ccadb2bf49c3ee86074", "message": "Handle path going away properly"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/844e1a95eebbea2bd4359b3e1395d202da0f0d39", "message": "Do not unregister the callback in the zk watcher\n\nAddresses incompatibility of per_callback threading in ZK, the way that\nsynapse calls unsubscribe within the callback, and ruby 2.X really not\nliking joining on the current running thread.\n\nShould fix #137 #99 and possibly #94"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/840b0805f8c7858fa0a88e8aa57c6219b8ea75e8", "message": "Merge pull request #135 from airbnb/explict_backend_names\n\nExplicit watcher haproxy backend names"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/5dcdf5a19303f3c2cfac1f4233e5124cf4e61e97", "message": "Merge pull request #136 from airbnb/work_on_documentation\n\nSome minor documentation fixups"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/5183d3d2c1672cff590e96cc7b65a4486217bbb5", "message": "Some minor documentation fixups\n\nReading through the readme is a bit confusing as to which haproxy is which\nand where file_output actually goes, I've tried fixing that."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/805c22039c7d5ff775930e2c3e880dca83ad3502", "message": "Explicit watcher haproxy backend names\n\nThis allows acls in frontend sections to reference backends without coupling\nto the current convention of naming backends after watcher names"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/6f11a826ec23e9741434cdc5daf0a6f767760d0a", "message": "Fixed wording of some documentation, added missing options\n\nAdded documentation of the state_file cache options as well as a few\ncomments. Also fixed some error messages to be more clear."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/cd2ea63b7fd746defad09e1ee12bfd40110245e7", "message": "Address feedback from igor and schleyfox\n\nAdds a comment about when we write out the file output and restored\nrandom backend ordering."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/b3c0fb7a9e12a771773ed5f1a2a91d49c9690770", "message": "Fixups for merge to airbnb/master"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/1eac13366b4e86041d0d5f2941d6ee4234a81523", "message": "Turns out it's important to handle session disconnects correctly\n\nThis fixes a bug where we could have a session expiry but not fail pings\nbecause the pooling code would not actually tear down the connection"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/4633f823880547e27cb9759caf980545490621d3", "message": "Try out :per_callback threads and get more debug information\n\nWe are experiencing some very slow updates in production and I think it\nmay be due to the connection pooling, try :per_callback threading to see\nif that helps.\n\nAlso fixes default values for do_writes, do_reloads, do_socket"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/73f48bf0a248ca4a770c18a140a067539fbf413c", "message": "Rate limit restarts but not stats socket updates\n\nWe can allow socket updates to go through any time that the config was\nupdated, but restarts must be rate limited for stability"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/507af82371191e0aa4a278619ff85b6325bec80a", "message": "Allow the option allredisp option to haproxy.\n\nNote that at this time only the Yelp fork of haproxy has support for\nredispatching on every retry."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/bcd8bcd48a8cb9b4349e3595de642b0e4882bf84", "message": "Explicitly deduplicate registrations"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/499c54d3da2df60b6222d7c2075bff794ebf0efd", "message": "Allow registrations to be manifested on the file system\n\nIf the configuration specifies a file_output key, synapse will manifest\nand update registrations on the filesystem in an atomic way.\nThis is useful for applications that do not wish to communicate with\nservice backends via haproxy"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/78533730", "body": "Note, if you accept #115, that supersedes this change.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/78533730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/88632551", "body": "To give some context on the allredisp option:\n\nhttp://marc.info/?l=haproxy&m=142740715826651&w=2\n\nTo give some context on the deduplication, we currently restart nerve gracefully (i.e. not de-registering a whole box) by starting two nerves and relying on synapse to deduplicate.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/88632551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/88992177", "body": "My deduplication comment was not the clearest. The deduping logic is just referring to synapse ignoring duplicated service backends, e.g. (host1, 1234), (host1, 1234), (host2, 1234) => (host1, 1234), (host2, 1234).\n\nI would want to run some tests since supervisord is not the setup we use (we use a cron job that restarts synapse whenever our synapse config file changes), but the deduplication is implemented by synapse filtering out duplicate backends by the tuple of (host, port, name?), so I imagine that all of the forked synapse instances would deduplicate in the same way. To be honest I am not sure without digging into #94 more.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/88992177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/111863508", "body": "If you want synapse to write the config, or modify the running HAProxy you'll want to set do_writes, do_reloads, do_socket appropriately.\n\nSo for a basic proof of concept I'd set all three to true.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/111863508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/111864164", "body": "Sorry that I've just been adding a ton more commits to this \"de-fork\" pull-request. We ended up hitting some serious reliability problems when we turned on some new multi-datacenter functionality and had to focus on fixing that up. I'll be getting this ready for merge ASAP.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/111864164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/111864495", "body": "@chrono,\n@jnb and I from Yelp plan to help maintain this going forward along with @igor47 and the airbnb crew.\n\nRight now we're concentrating on getting the Yelp forks of nerve/synapse merged back into upstream as they have a lot of important reliability fixes for multi-datacenter setups (connection pooling, removal of fast fail in nerve, allowing synapse to reconfigure more aggressively than it restarts, etc ...). Once we do that we're going to start going through pull requests and working with @igor47 to get everything tidied up.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/111864495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/114229505", "body": "@dcosson Yes our fork does help mitigate that problem, but it is not a complete solution. Basically we cache synapse state locally for 30m and will always put cached backends in regardless of if they are in zookeeper (if we don't know about them in zookeeper they go in disabled). Then because our fork can reconfigure (but not restart) every loop of the main loop we can enable them via the stats socket as soon as they report up.\n\nIt doesn't totally solve the problem, but we've seen a significant decrease in 503s related to restarts since we rolled it out. That being said we're still dogfooding internally and have found a bug or two. The next step is putting them in as backups automatically (that should solve your problem).\n\nI'm pushing internally to get our forks merged back. We're waiting for a 2 week period of zero bugs in production before we go ahead and merge them in.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/114229505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/118841224", "body": "I'm also working with @bobtfish  to get this merged into Yelp's synapse fork over at https://github.com/Yelp/synapse/pull/3 and we're going to be merging that back into upstream once we get some more production experience with it.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/118841224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/123515573", "body": "We're going to take care of this in #130 \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/123515573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/123924369", "body": "Yea, the connection pooling and haproxy cache code was sorta done under P0 pressure (site was actively degraded kind of P0), so we didn't write too many tests heh. Do you think the lack of test coverage blocks merge or is it something that I can work on in separate PRs against this repo after the fork is gone?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/123924369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/124255669", "body": "I think per the discussion in https://github.com/airbnb/synapse/pull/130#discussion_r35285222 indicates that this might break core functionality for airbnb. Perhaps this can be an option to either sort or not sort the backends?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/124255669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/124256742", "body": "We're going to start dogfooding 3e36e88559 and then when you release we'll switch to that. \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/124256742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/125663987", "body": "Looks reasonable, can you check that this works with the state file (we should/will add tests of that soon)?\n\nAlso this doesn't have code for doing updates over the socket, but we presumably want that. Is that going to come in a follow up patch?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/125663987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/127309267", "body": "My only issue with doing the socket update in a subsequent change is that something else will have to trigger a HAProxy reload to pick up any change in weights (since this patch neither informs the haproxy module that it needs to reload nor changes the weights over the stats socket). At the very least I think it should inform haproxy to restart?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/127309267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/130184550", "body": "@igor47 We should probably create a repo for community contributed synapse watchers and nerve reporters. Also I need to actually figure out how to ninja in a watcher/reporter class without a checkout + patch.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/130184550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/131435609", "body": "For context I'm thinking something like:\n\n``` json\n  \"services\": {                                                                 \n    \"service1\": {                                                               \n      \"default_servers\": [],                                                    \n      \"use_previous_backends\": false,                                           \n      \"discovery\": {                                                            \n        \"method\": \"zookeeper\",                                                  \n        \"path\": \"/services/service1\",                                           \n        \"hosts\": [                                                              \n          \"localhost:2181\"                                                      \n        ]                                                                       \n      },                                                                        \n      \"haproxy\": {                                                              \n        \"port\": 3213,                                                           \n        \"backend_name\": \"service1\",                                             \n        \"listen\": [                                                             \n          \"mode http\",                                                          \n        ],                                                                      \n        \"frontend\": [                                                           \n          \"acl needs_fallback nbsrv(service1) le 0\",                            \n          \"use_backend service1_backup if needs_fallback\"                       \n        ]                                                                       \n      }                                                                         \n    },                                                                          \n    \"service1_backup\": {                                                        \n      \"default_servers\": [],                                                    \n      \"use_previous_backends\": false,                                           \n      \"discovery\": {                                                            \n        \"method\": \"zookeeper\",                                                  \n        \"path\": \"/services/service1_backup\",                                    \n        \"hosts\": [                                                              \n          \"localhost:2181\"                                                      \n        ]                                                                       \n      },                                                                        \n      \"haproxy\": {                                                              \n        \"backend_name\": \"service1_backup\",                                                                                                   \n      }                                                                         \n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/131435609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/131438657", "body": "I believe this was fixed in commit 64c2bd802b\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/131438657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/131439694", "body": "fwiw the shared frontend section sorta allows this although afaik it only allows one shared frontend for the entire haproxy instance?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/131439694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/131442390", "body": "@igor47, @bobrik, @jamessharp  I'd like to revisit this because I sorta don't like adding the dynamic complexity directly to synapse/nerve. We use a cron job that reconfigures nerve/synapse every N seconds and I really like that approach because it keeps the design very unixy and easy to reason about IMO. At least for us it has made extending and debugging SmartStack really easy and I sorta want to keep it that way.\n\nThe only downside that I'm aware of is that synapse decides to restart haproxy the first time it starts and sometimes the watchers don't find all the backends immediately (why not sure). I think we can fix this using the state_file work that @jnb has done. Can anyone think of any other reasons that dynamically reacting to which watchers should exist should be synapse's responsibility and not an external component? \n\nIf not then I'll close this PR and we'll continue down the state_file path.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/131442390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/135538889", "body": "We're also adding something like this for the weight change as well in #131. Perhaps we should add something like server_options to the backend registrations themselves to allow this kind of metadata to be propagated from nerve? If we're going to do that it might make senseto keep all this frontend specific metadata in one top level key?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/135538889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/135567460", "body": "@Jaykah The static registrations from the default servers should (afaik) be identical to what nerve is registering as far as Synapse can tell. In BaseWatcher's set_backends method they are just merged all together.\n\nI guess what I'm saying is that we can solve both use cases with a generic \"server_options\" top level key in backend registration hashes.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/135567460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/135592786", "body": "Ah, that's good context. We're experimenting with zone failover by using multiple backends and a frontend acl. We've been relying on the implicit backend name for a bit but I opened #135 to make it explicit so you can reference backends in acls. That being said the HAProxy guys recommend combining multiple backends + acl with backups so we should probably support it. Definitely interested in coming up with a good way to do failover.\n\nI think I'm starting to see your use case, I'm just trying to find the way to address a few similar feature requests. I feel like adding a bunch of HAProxy specific keys (like httpchk) is the wrong way going forward, especially if we ever want to be able to add more outputs than HAProxy/file output. I'm not sure the right abstraction though, what do you think?\n\nAlso just FYI you can use the state cache as an additional guard (it's the only guard we use) against zookeeper flakiness. \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/135592786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/135972566", "body": "@hankya We haven't seen the behavior referenced in this PR but we don't use the supervisord. Have you been seeing the same issue and if so what's your setup?\n\nI did see something that I thought was like this bug when ZK was overloaded, but in that case the issue was just a large lag in event delivery. Our connection pooling fix alleviated those issues (plus a bug fix to the pooling code). While investigating the pooling bug though I setup a pretty thorough test setup where I was removing and adding nodes while messing with the network via netem and I still wasnt able to repro with Ruby 1.9 and running Synapse directly. I could try to modify that setup to get a repro of this issue if it's still impacting people.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/135972566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/136277651", "body": "Thanks for the bug report. We definitely rely on nerve/zookeeper/synapse at Yelp to manage 100s of constantly changing services, and I'm fairly sure Airbnb depends on it in production as well.\n\nLet's dig into this. First off how are you starting Synapse and do you have any output or logs from the Synapse startup? I'd expect to see some stdout that might be helpful in diagnosing what's going on.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/136277651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/136297322", "body": "It appears that the zk library just started running tests on 2.2, and they are currently failing. I am going to close this until the underlying zookeeper library at least claims to work on 2.2.\n\nFor now I encourage you to use an older ruby version, and when zk supports 2.2. please do open another issue or comment on this one and I'll take another look.\n\nhttps://travis-ci.org/zk-ruby/zk\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/136297322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/136297568", "body": "I thought that it would work with 2.1, but that may be enough information for me to reproduce tomorrow. If you could paste the stdout you're seeing that would probably help save me some time debugging it. We actually run 1.9 in production, so it might just be 2.X issues.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/136297568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/136440887", "body": "@asiragusa They are shuffled because of long lived clients and round robin load balancing. Imagine that Synapse restarts haproxy, and then all your clients reconnect to the same host (because round robin), this could be pretty bad for something like HAProxy.\n\nLike I mention in the linked PR I am not against adding the capability for backends to be shuffled or not. Happy to accept a PR that adds that functionality.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/136440887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/136441619", "body": "I'm also confused by the forking issue. We use upstart and just have it kill the old process before starting the new one. For nerve we run two copies during a flip to achieve hitless nerve reloads. @Jaykah why do you need to fork Synapse to reload?\n\nI think that @hankya is having a separate issue, which I'm following up on in #137. \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/136441619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/136487058", "body": "@Jaykah I think the relevant context here is that you are using ruby 2.1.2, same as @hankya over in #137. I will focus my efforts on that ruby version. It's also been reported that 2.2 doesn't work (although ruby-zk doesn't work with 2.2 so ...).\n\nFor context, I am unable to reproduce this at all in our production environment or in my own testing using ruby 1.9, so if you can downgrade, that might be a good short term solution.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/136487058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/136488312", "body": "@igor47 I thought you had mentioned airbnb moving to ruby 2.X soon, if you guys get around to debugging this before me that is also cool heh :-)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/136488312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/32382874", "body": "Indeed it does not, I'll fix that up\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/32382874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/32382890", "body": "I'm concerned with duplicates in the set of backends we write out to HAProxy in general. Like, we had a few cases where duplicate backends got written out and then synapse would only down a single one when we failed healthchecks.\n\nIf we dedup the default_servers separately doesn't that mean that we might end up with duplicates between the defaults and new_backends and could end up with the bad situation I mention above?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/32382890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/32382912", "body": "I agree this is a needed feature. I've been hacking on a \"latency sensitive farm failover\" method as suggested in http://blog.haproxy.com/2013/12/23/failover-and-worst-case-management-with-haproxy/ and determining how many backends are needed is core to that.\n\nThe idea is that you have multiple HAProxy backends powering a single frontend, with each backend having more nodes (e.g. because it encompasses multiple datacenters).\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/32382912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/32382944", "body": "Heh, this isn't even the option that I ended up getting accepted. http://marc.info/?l=haproxy&m=143161966505891&w=2 basically added a parameter to \"option redispatch\" which allows this behavior. Until that is released in 1.6 do you mind if we keep this in here (we use is pretty heavily at Yelp)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/32382944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35281918", "body": "Yea, in case libraries watch these files for changes and react accordingly. I'll add a comment\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35281918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35282283", "body": "This is true if all HAProxy instances start up at exactly the same moment and request loads are such that you notice this. In our experience things even out on their own (both haproxy reloads take time and request loads to servers has jitter). We much more often run into situations where HAProxy is restarting a lot and the HAProxy stats page becomes really hard to read which can impede debugging efforts.\n\nThis is purely so that the stats page across reloads doesn't change a ton. I can change it back if you prefer the random behavior :-)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35282283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35282361", "body": "Yea, we're working on exposing this to HAProxy. This is the first step (see https://github.com/Yelp/synapse/pull/14 for discussion between the author and me regarding this)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35282361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35283172", "body": "Also possibly helps with issue #127\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35283172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35288174", "body": "That seems like a compelling use case. Going forward maybe we can add an option if people want it to be sorted vs randomized, but I think it makes sense to do that in future versions.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35288174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35351103", "body": "Both my patches were accepted into 1.6, and Willy just released 1.6-dev3 so we're almost off our fork! Once we upgrade to 1.6 I can go through and re-sync this list with what haproxy accepts. There might be some backwards incompatible changes in 1.6 from 1.5 (only one I have ran into was listen no longer accepts ports in the listen line) so that should be a fun exercise.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35351103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35354652", "body": "Sure, seems clearer.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35354652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35664886", "body": "I don't think we want to ignore 0 weight backends because that seems like a reasonable use case? (I believe that nerve supplies nil if there is no weight).\n\nWhat do you think?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35664886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35665202", "body": "Can you mention what the default is?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35665202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/37138622", "body": "Let's give folks somewhere to contribute these though. Don't want to discourage releasing watchers.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/37138622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/39238390", "body": "Do you actually want name or port? I'm not terribly well versed in the dns watcher but it seems that it only uses the server's `host` key?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/39238390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/39354752", "body": "Thoughts on having a `haproxy_server_options` catch all registration info for backend registrations similar to the watcher's `server_options`?\n\nSo like, instead of `haproxy_backup` and `haproxy_httpchk` you just have `haproxy_server_options` which can contain weights, httpcheck lines, ports, backup status, etc ...\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/39354752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/40289793", "body": "This should be class Synapse::ServiceWatcher\n\nAlso can you add this watcher to the auto creation test?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/40289793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/40291182", "body": "So while testing this I came across quite a pickle, which is that the etcd ruby gem < 0.3.0 cannot handle etcd 2.0+ (it errors all over the place regarding 404 errors)\n\nhttps://github.com/ranjib/etcd-ruby/pull/51 has been merged and my local testing indicates that version 0.3.0 seems to fix things.\n\n@bobtfish do you think we should depend on an old etcd or the new one? I sorta prefer the new one but I'm not sure what the community progress on moving to etcd 2.0 is like?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/40291182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/40292831", "body": "Alright so while testing I came across this gem. If my understanding is correct etcd makes us not only do our own heartbeats from nerve (hella writes), but we also end up basically constantly polling in this function because there is no capability to filter watch events?\n\nBasically without https://github.com/coreos/etcd/issues/633 or https://github.com/coreos/etcd/issues/174 closed SmartStack scalability on etcd will be limited to ... not very much.\n\nIf that understanding is correct can we implement get children watches internally, where we do a lightweight \"see if the list of children changed\" operation and if that is different we actually go through loading all the data (aka run discover). This way we're at least not constantly pulling all of the etcd state?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/40292831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41230633", "body": "Now that we recommend installing via gem, can we just do ~> 0.2 ?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41230633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41699389", "body": "Can you rebase to pick up the auto-loading watcher code? See https://github.com/airbnb/synapse/blob/master/lib/synapse/service_watcher/README.md for the new specification\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41699389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41699395", "body": "Can we make the uri configurable? I'm not sure how often marathon changes it's api but I imagine v2 will only be valid for a little while longer.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41699395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41699425", "body": "Do we need to set @connection to nil here to ensure we attempt to connect back to marathon?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41699425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41699585", "body": "Can we sleep for the first watch for a random amount of time between 0 and the check_interval? I feel like this could easily thunder your marathon api?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41699585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41699613", "body": "Don't call reconfigure again, set_backends takes care of this for you (taking care of things like de-duplicating host/port pairs and such). Actually this whole bit between backends.empty and this should be removed.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41699613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41699852", "body": "Can you do a port_index like the other PR? I like that flexibility.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41699852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41994451", "body": "Should we take into account the ALIVE status?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41994451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41994713", "body": "Can we call this 'endpoint_name'? I'm a little confused by 'port_name' what it actually does\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41994713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41995295", "body": "can you raise a ValueError to be consistent with the zk watcher?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41995295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41996490", "body": "The interface for this function has changed in master, and I'll make a PR to support haproxy_server_options so we only have to update this once. The spec for service registration data is now roughly defined by https://github.com/airbnb/synapse/blob/master/lib/synapse/service_watcher/README.md#backend-interface\n\nJust a heads up.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41996490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/42006100", "body": "I see, ok I'll leave the naming up to you guys :-)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/42006100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/46739265", "body": "I think we need to set @decode_method even if we don't have a decode (i.e. the default is zookeeper)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/46739265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/46739365", "body": "I feel like this code should live in the constructor and be factored out into a function e.g. parse_decode_options or something. Feel free to go \"meh\" and I'll do it in a follow up.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/46739365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/48360129", "body": "Ok, from [the source](https://github.com/twitter/finagle/blob/master/finagle-serversets/src/main/scala/com/twitter/finagle/zookeeper/ZookeeperServerSetCluster.scala) it appears they select ports by \"endpointName\", so I'll do the same to be consistent.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/48360129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/49788005", "body": "Let's use this as an opportunity to add a generate_frontend_stanza test to the haproxy_spec :-)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/49788005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53298571", "body": "What if we called this `cookie_value_method` or some such and had it take values `'name'` (the default) or `'hash'`? That way if we need to support additional cookie values that can't be supplied in server_options we can.  \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53298571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53576156", "body": "Let's not actually validate this. Similar to `backend_order` option let's just have a case statement with an else that provides the default behavior.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53576156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53576170", "body": "This seems redundant to the block down below. Let's just do the case down below (I'll comment with a suggestion)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53576170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53576252", "body": "How about something like:\n\n``` ruby\nunless config.include?('mode tcp')\n  b = case watcher.haproxy['cookie_value_method']\n  when 'hash'\n    b = \"#{b} cookie #{Digest::SHA1.hexdigest(backend_name)}\"\n  else\n    b = \"#{b} cookie #{backend_name}\"\n  end\nend\n```\n\nTo be consistent with how we do the shuff selection up above (it's probably a good idea to validate these things, but I think this part of the code is the wrong place to do it)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53576252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53507496", "body": "So I believe that HAProxy will use the last weight provided. If that's true I think this should probably slot this in between the HAProxy backend `server_options` and the server `haproxy_server_options` level.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53507496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53507555", "body": "Do you have strong feelings about this being an option? I'd prefer for folks to just not register weights unless they want them reflected in HAProxy.\n\nYea I know the other PR did it, but I think it's maybe not the best option...\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53507555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53507922", "body": "This is slightly surprising behavior to me because it means while folks are switching weights (i.e. old nerve is running with weight=10 and new nerve is running with weight=20) we'd get both backends. I think I prefer not uniqing on weight (so we'll pick one backend or the other). What do you think? \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53507922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53510914", "body": "Yea, I noted a similar concern about complexity in #171. I'm not sure if these PRs are the right place for that though or if we should refactor it once they're merged.\n\nI agree printing a warning is useful, but I don't think we should bail out as I can understand use cases where someone might want to set some combination as a fallback scheme. `weight` and `haproxy_server_options` come from the registration side and `server_options` come from the discovery side. I can understand a situation where one side might have information the other does not.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53510914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53748997", "body": "@minkovich I'm fine with us cutting a new minor (aka major in 0.X parlance) version if that's the concern. I think if folks are registering a `weight` they should expect to have it reflected in the load balancers.\n\n@scarletmeow Weight is separate for a few reasons. The first is because it was merged before I came up with `haproxy_server_options` back when the plan was to merge all the things as top level keys. The second is because it can be dynamically updated over the stats socket making it much more useful for dynamically balancing load while most options that occur in `haproxy_server_options` (e.g. healthcheck, backup status. etc ...) cannot. The third is because it is frontend agnostic, weight is a common concept in all load balancers that I'm aware of.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53748997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53903732", "body": "I think the backend (server) provided `haproxy_server_options` data is a more concerning conflict than `server_options` (a weight in the `server_options` would be like a default for servers or something).\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53903732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/60831270", "body": "Just a heads up there is a flaw with how the ec2tag watcher and other \"watch in a Thread\" watchers are implemented. Because this returns immediately from the thread creation synapse might proceed to restart HAProxy before watch has actually been called. The zookeeper watcher gets around this because it uses a callback system and waits for the callback to finish once before returning.\n\nI'm not saying you have to change it, but I just want you to be aware of the shortcoming. I'm super open to ideas for how to fix it.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/60831270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/60831473", "body": "Polling is definitely ok as a V1 or for small infras, but what are your thoughts on subscribing to a SNS topic of [autoscaling notifications](http://docs.aws.amazon.com/AutoScaling/latest/DeveloperGuide/ASGettingNotifications.html). It could be something super simple like \"if we get any SNS notification at all, rediscover backends\"\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/60831473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/60830978", "body": "I'd mention that the haproxy_server_options weight will take precedence.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/60830978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/60830988", "body": "I'd mention that the nerve weight will take precedence.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/60830988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/73363795", "body": "ack, changed.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/73363795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/71793332", "body": "Not related to this PR, but we should make sure we fix the ordering of req_pairs and setting default values for do_writes/do_socket/do_reloads. I'll fix that in the next iteration.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/71793332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/71928864", "body": "Sure, I view the file_output as more discovery than routing (unlike haproxy which is both), but sure.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/71928864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/71928980", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/71928980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/71929559", "body": "indeed, on it\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/71929559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/71929684", "body": "oops, leftover from some debugging\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/71929684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/71933355", "body": "Alright, I cleaned this up and added some more (regression?) tests\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/71933355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/71933424", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/71933424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/72666447", "body": "I've noticed that this isn't actually a full list. Let's document all the options that we can set (filters, leader_election, etc ...)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/72666447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99734986", "body": "I was under the impression this is already possible if you install via gems? All you have to do is put your class in the right path and then synapse dynamically requires it, or that's what I thought the design from Nerve allowed you to do.\r\n\r\nI can whip up a quick example gem to see if this is flawed thinking, but I thought that was why we switched to this way of constructing classes in Nerve (and Synapse).", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/99734986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100430000", "body": "Done.", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100430000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100430078", "body": "fixed", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100430078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100430172", "body": "Fixed", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100430172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100430652", "body": "Reworded, let me know if it's clearer :-)", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100430652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100430709", "body": "Fixed", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100430709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100431766", "body": "Sure, done.", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100431766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100433233", "body": "I don't think it's needed. Ok to punt?", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100433233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100436857", "body": "> i was confused by there being two sources of options for a config generator. the first is the options passed to the initialize method, which contain overall options. the second is the watcher-specific options for this config generator.\r\n\r\nYup, the fact that there is coupling between the two presented a significant challenge during this refactor.\r\n\r\n>maybe we should call these options watcher_opts rather than config_generator_opts to clarify the distinction?\r\n\r\nHm, I will work on making this clearer\r\n\r\n> also, should we really be encouraging side-effects? this might lead to trouble. given how we actually use this code below, returning a copy of the passed-in hash would work just as well. we should encourage users to do something like:\r\n\r\nYea, I think I can figure that out\r\n\r\n>finally, i was also confused by the fact that we have to reach into the watchers to get the config generator options each time we generate a config for that watcher. i guess i'm not sure what to do about that problem, but i'm kind of annoyed about repeated calls to, e.g., watcher.generator_opts['haproxy']\r\n\r\nYes, I agree, but it's not that bad and we can refactor this in the future imo.", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100436857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100439917", "body": "Agreed, but I'd like to punt this to another iteration.", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100439917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100440298", "body": "Sure, I already did this for nginx, but was punting on this one. I can make the changes now though.", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100440298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100446312", "body": "So ... I have plans over in #220 to allow a null port to be semantically different from no port. Basically for unix socket listeners I need to not supply a port, but we still want the frontend and to use bind_address.", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100446312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100446412", "body": "I ended up going with watcher_config, but feel free to rename to opts if you want (opts and config are hella confusing no matter how we slice it :-/)", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100446412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100447882", "body": "Agreed, changed.", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100447882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100448233", "body": "This method is only called during initialization of watchers. I don't really want to add state here unless I have to.", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100448233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100448368", "body": "I don't think so but ... naming is hard?", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100448368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100450855", "body": "Ok, I've made it more functional but I didn't want to make it a separate function because I don't really want to persist opts. Punt for now?", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100450855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100450977", "body": "This was really just to help me when porting the service watchers. I think this would only impact folks if they had custom service watchers (all of the ones in the repo have been ported).", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100450977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100451031", "body": "heh, ack", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100451031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100451638", "body": "Sure, moved", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/100451638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101660568", "body": "I like that better too. Done.", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101660568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101661298", "body": "Sure, done. I can also fixup the address:port logic in the nginx review as well to do a similar thing.", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101661298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101661409", "body": "Sure, pre-existing but sure.", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101661409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101661428", "body": "Yup", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101661428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101661545", "body": "Done", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101661545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101661618", "body": "Done", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101661618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101661736", "body": "I agree, but right now in synapse we don't group specs yet. I think punt and followup.", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101661736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101661805", "body": "Sure, but I think we can do that in a follow up.", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101661805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101661864", "body": "Let's clean up the specs in a separate change.", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101661864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101662033", "body": "Don't have much of an opinion, renamed.", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101662033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101663650", "body": "Sure, I made it a context, except that we can't stub out talk_to_socket the same way for the two specs (one where the server was previously in the backends, and one without).\r\n\r\nAlso I don't like testing for falsey when that's not something that is supposed to be ok, namely nil isn't a valid value at all for restart_required.", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101663650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101663752", "body": "Sure", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101663752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101663858", "body": "Ack", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/101663858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/105498845", "body": "maybe make this a unix socket to really show what this is for?", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/105498845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/105508067", "body": "sure", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/105508067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/105508176", "body": "Done", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/105508176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/105508213", "body": "I haven't written one yet ... but like etcd would be an example.", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/105508213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/105508555", "body": "I think it's sorta confusing, can iterate with more examples later.", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/105508555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/105508564", "body": "changed to administer.", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/105508564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "lap1817": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/7f501c808656253164dbc850e3486ed2b10e3c1c", "message": "[synapse] fix bug in generate_backend_stanze"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/80bbf6266155e5454d4690fffedded85344fd71e", "message": "revise version"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/2cd3c3918d9a077c080a7202a0756d9c8d0dc10e", "message": "fix spec"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/53264cfe9bce9da177bb38133a3bb32fe1c47299", "message": "fix spec"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/75fe0ee5816a39b762ce760c417f0772a8ed41ab", "message": "add logging when restart required due to config change"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/653bda2660c8e6776dc0a45dbd7b60f88d3a73a0", "message": "fix a few issues:\n -use node.first as the data blob\n\n -make haproxy generator to refresh the config before generate config\n\n -make the config_for_generator hash readonly in base watcher by deep clone"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/8caf3403a66d11f225e319386633797d9a3b3209", "message": "update README"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/a65729a6f1c8f07905dcd79e3155ead4f18060b8", "message": "update tests"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/e117aebf3fbe32893fa9fa222edfe103185c8703", "message": "fix gemfile lock for nokogiri"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/45aa4c0f8f384b251df6031e24635262c09c51bf", "message": "[synapse] enable generator config update from ZK"}], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/248", "title": "[Synapse] atomic config file update", "body": "reviewer:\r\n@jolynch @liangg\r\n\r\nThis PR is to enable atomic Haproxy config file update.\r\n\r\nThe issue that we observed is that when Synapse restarts Haproxy in a high frequency (e.g. every 2 seconds), the haproxy config file may get partially over-written while a Haproxy process is still loading the file, especially for services that have high number of dependencies and thus have large haproxy config (1MB+). In some cases, the haproxy process corrupted because of that.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "somic": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/801594dd7346eb20b211ed8600d0ae0467d775c6", "message": "remove MAX_REVISION"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/16bb1a44d5bb43ce3dba11a7ad08f81d991071e2", "message": "cache haproxy stanzas in generate_config"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/e0b34c2772e36b424d7c67239d9dcd1805143029", "message": "better checking if status is UP"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/f96bccc0b75c80cdb964bb5b465424abfe8c3ec8", "message": "fix tests and typo in #211"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/29ecc8a824b6985e3c9027d2d15002a3eb6bc80b", "message": "Merge remote-tracking branch 'noggi/synapse/haproxy_avoid_noop_reenable' into rebase__noggi/synapse/haproxy_avoid_noop_reenable\n\n* noggi/synapse/haproxy_avoid_noop_reenable:\n  [haproxy] Avoid unnecessary HAProxy re-configuration."}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/comments/21483273", "body": "@jolynch do we need to sort watcher.backends? Appears to me that it's an array that will be in order we read them from zk - is the order guaranteed to be deterministic here?\r\n\r\nWe of course can sort it anywhere (when we read from zk or here etc) but just wanted to double check.", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/21483273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "roberteckert": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/82ffe05abde3138782e1d9fc22e50c08d038150d", "message": "Support 'service_conf_dir' directive\n\nThis fixes https://github.com/airbnb/synapse/issues/226."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jnb": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/cff8346466366d7e117b74a895b6dc585636e11c", "message": "Bump to 0.14.1"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/1ef7f7677615c64176d2970069eac9f3b8175589", "message": "Allow null bind port."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/3e36e8855974d8659090917491c5f95d523faeab", "message": "Merge pull request #130 from Yelp/merge_the_forks\n\nMerge the forks"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/5066638e12cb27015b0f9a0aaaa08fce19d892ea", "message": "Fix bug in caching logic."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/4476f0e6d2c8e27fb4676e2ba66a803bcbab73f8", "message": "Add state file."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/82775562a35a89d60084febb42af135a6362b52c", "message": "ZooKeeper connection pooling."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/6c5516e954ca580b2bc9009ea37248e6fa998c84", "message": "Increase HAProxy restart interval."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/14262e776818ea126f97e28d7b1e0461f73a95eb", "message": "Revert \"Add rate limiter.\"\n\nThis reverts commit 136d1fe1ef5347c82a9f4d7afe42097b24c3295e."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/915193e1739e1e8ec12635e5248ddb1b5422bca2", "message": "Add rate limiter."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/7d512887421310d4f2cf9eb7bbc5ac1a71329860", "message": "Add 'use_previous_backends' option.\n\n* This option defaults to true:  if there are no default servers and a watcher\n  reports no backends, then use the previous backends that we already know\n  about.\n* Factor out code that updates '@backends' into the watcher base class."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/40854591", "body": "Looks like this is a dupe of https://github.com/airbnb/synapse/pull/55.  Take your pick :)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/40854591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/45814864", "body": "+1 for failing fast on session expiry and letting a process watcher restart synapse.  I think this leads to a cleaner design than trying to re-establish sessions.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/45814864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/105502528", "body": "Could delete this sentence, and combine the next sentence ('The service watchers...') with the previous paragraph?", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/105502528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/105506119", "body": "delete 'and administrate'?  Or change 'administrate' to 'administer'?", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/105506119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/105506586", "body": "haha.  I don't know whether I'd leave the \"so you know that you won't drop a packet.\" in?", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/105506586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/105506655", "body": "use-case?", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/105506655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/105506707", "body": "create a pull request", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/105506707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/105507154", "body": "... san listening ports.  If you wish to only...", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/105507154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/105507342", "body": "This didn't make sense to me.  Is it worth giving a more concrete example?", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/105507342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "femnad": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/906fc0cc98b4cafb5c2a134389d06940f1582d57", "message": "Add Missing Quotation Mark in the Sample Config\n\n* The sample configuration file provided under the section `HAProxy\n  shared HTTP Frontend` is not a valid YAML file because of a missing\n  quotation mark. This patch adds the missing quotation mark so that the\n  configuration is usable as it is."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sjankowski-r7": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/37dba653dfb1cc60fd99b88a651f2a1b9887b75e", "message": "Adding additional bind_options param to support ssl configuration"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rickypai": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/154ea936db030c8d51406a671b4877921a475697", "message": "test against ruby 2.3 and latest rubies"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/142b2576abef136c7140eaa2bf2094f4a4641967", "message": "Merge pull request #129 from airbnb/rpai/test_on_rubies\n\nTest synapse on multiple versions of Ruby"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/a99f1e3466177fc629d77fa7db40561348785801", "message": "test synapse on 2.0.0, 2.1.6, 2.2.2 also"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/2dbbe357daa9cbbb46efd8778d85a277bbc06ba9", "message": "git ignore .ruby-version"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/6baf737494c3d2f6f9f33a67e16a0ac47b9c797e", "message": "update zookeeper dependency to support newer rubies"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ferambot": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/1b8ed1a3e68aa35e8913c2a46f3f36668add3c92", "message": "Fix typo sevice"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brianwolfe": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/7a1660eefc002847db196d4e2b8ff065d4721b85", "message": "Tighten up haproxy_exec, don't need info variable"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/02b11b3cff1635fd59e30b83404fe2abddf536d3", "message": "Tighten up s.close statement"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/9fad3c589bc0f455fd0487067255db94ff38956a", "message": "Pull error handling back into update_backends\n\nCalling functions may wish to handle errors without requiring a restart.\nPulling restart and logging code to calling function."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/46ea91c00e2e676cd296d5c149d89c87651cd9fc", "message": "Clean up sockets after reading\n\nHAProxy closes its connection to the socket as soon as it finishes\nwriting. This commit explicitly closes the socket from the synapse\nside. Without an explicit close, cleanup responsibility is shifted\nto object finalization during garbage collection. This can cause\nsynapse to temporarily accumulate a large number of socket file\ndescriptors."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/66316040", "body": "Ambivalent about it. I would lean towards having a helper method that does not trigger the restart in that case to keep it grouped where possible, but I'll pull up + reduplicate the rescue code for now.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/66316040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/66321441", "body": "shouldn't be necessary. .read should just return empty string on no backends anyway.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/66321441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/66322208", "body": "http://ruby-doc.org/core-1.9.3/IO.html#method-i-read\n\n> At end of file, it returns nil or \"\" depend on length. ios.read() and ios.read(nil) returns \"\". ios.read(positive-integer) returns nil.\n\nWe are not passing in a length argument, so we should get \"\".\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/66322208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "scarletmeow": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/ed641f1e88103133a16a08ed52a23874635538ad", "message": "Merge pull request #192 from scarletmeow/haproxy_whitelist_update\n\nUpdate whitelist for HAProxy 1.5.18 and 1.6.5"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/250d4ee75966c649f9c5077c98f457d886775f93", "message": "Merge pull request #193 from scarletmeow/fix_tests\n\nBump Gemfile.lock to fix specs"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/297a38ab5cbb4b3a09d997c307cc66946a78a2c7", "message": "Merge pull request #190 from scarletmeow/v0.13.2\n\nbump version to v0.13.2"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/68d72d2557b6c6205318f5fea5e1e32d43498f85", "message": "Add labels documentation to README.md"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/e5d3dc2be88d33f65e0e04f3fb6d933fec3208a5", "message": "Add label_filter to README.md"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/0c2e23425a4446560dac8a665ea32c80c6b6b0bf", "message": "Merge pull request #188 from scarletmeow/zk_dns_watcher\n\nlabel_filter support for zookeeper_dns"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/ca8f7e4f91faa6ef459ea87eeeee278e663366fa", "message": "Merge pull request #169 from scarletmeow/tlow/v0.13.1\n\nbump synapse version to v0.13.1"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/70636990ab7c4c8aa41d6b4a3897788db608b221", "message": "Merge pull request #168 from scarletmeow/tlow/fix-zk-dns\n\nzookeeper_dns is broken"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/dce9e3e6c6b2155f5bd2f7cd35f74162fe296ab2", "message": "Merge pull request #167 from scarletmeow/tlow/v0.13.0\n\nbump version to v0.13.0"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/c0ff4ff8dceb485b64cc7a764d5dc9d3ba3de3db", "message": "Merge pull request #164 from scarletmeow/tlow/synapse-filtering\n\nService watcher supports filtering backends by label"}], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/179", "title": "Weights support in Synapse", "body": "Follow up to https://github.com/airbnb/synapse/pull/174.\n\nAdds logic to signal HAProxy restart if `weight` has changed.\n\nAdded an additional warning if `weights` is redefined in `haproxy_server_options`. I would prefer not to implement behavior that strips out any user-defined `weight X` statement in HAProxy server options. It seems sufficient to warn about the unexpected behavior in either case.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53069335", "body": "That's a great suggestion. Done!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53069335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53087996", "body": "nit: should be `shuffling or sorting`\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53087996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53743488", "body": "log.warn (nit)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53743488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53745142", "body": "`ignore_weights` doesn't seem very useful as a setting and it is confusing that the default is shipped in a disabled state. There isn't a similar disable switch for `haproxy_server_options` and that's way more powerful than the weights setting (rhetorical question: why not just set `haproxy_server_options` to `weight 10`?). \n\nIf the main concern is a breaking API change, then I would suggest bumping to a new major release for the next version. What do you all think?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53745142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/64832050", "body": "So weirdly enough when I run bundle install on your branch I don't pick up these changes- the only delta for me is `timecop (0.8.1)`.\n\n json is `json (1.8.3)` and not `json (1.8.3-java)`. What's up with that and `slyphon`?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/64832050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/57647720", "body": "unfortunately, due to how the parsing logic in ServiceWatcher works today, `haproxy_server_options` always exists as a key in backend and defaults to value `nil`\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/57647720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/64946620", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/64946620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/64947020", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/64947020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/64980926", "body": "We detect a restart as long as the output config file is different: https://github.com/airbnb/synapse/blob/master/lib/synapse/haproxy.rb#L844. So you're right to point out this block of code as being out-of-place. I'm writing some tests to see if we even need any of the logic here.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/64980926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/70378561", "body": "Nice!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/70378561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/70378591", "body": "Should we warn that there's no validation to guard against nonsensical conditions? (ie, `az equals foo`, `az not-equals foo`)?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/70378591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/70378997", "body": "Food for thought: So right now, if a node is missing a label, it makes sense for the `equals` label condition to fail (we're missing information, so it can't be `equal` unless we are expecting a `nil` or missing value). So there's no confusion here for the `equals` filter.\n\nFor `not-equals`, this scenario may cause confusion. When a backend node is missing the label value altogether, it will always pass the `not-equals` label condition. Right now, there's no chance of the labels information in Nerve being flaky as they're statically configured. This could be a concern in the future when label information is dynamic and labels could drop in/out of existence.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/70378997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/70536114", "body": "As discussed offline:\n- `not-equals` will give the opposite truth table for `equals` operator\n- if users want to define behavior around missing or empty values, they can explicitly match against `nil`.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/70536114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "SonicWang": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/b904393a120e587f02704671475e154012293bb1", "message": "Merge pull request #194 from airbnb/sonic/put_backend_name_first\n\n[haproxy] Put backend['name'] first in constructing backend name"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "djnos": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/99f8ce96f953fcb1d0dbf9d63ce9463a81122f85", "message": "Permit to hash servernames in affinity cookie"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/65f84f6bc4b3017a0fdf3b649f1798dbda7bd8e1", "message": "Fix a breaking test"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/abbdf2a34cce4ba7e0f164ed39ef010d632f9241", "message": "Be able to use http-reuse to make connections pooling with backends (introduced with hap 1.6)"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/f3497600fa326eb9f925a88045c4f8baa1a763ee", "message": "Fix zookeeper discovery port override"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "twellspring": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/77040b87847f446a7fcb9134844bd514b77008d6", "message": "add generate_frontend_stanza test"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/f71667419123d820b339d8c9f31158dffe845f14", "message": "allow bind_address in the service haproxy section"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tdooner": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/b3d5368491540109aa382e9d4ab0a55b0ba5a12d", "message": "Require net/http explicitly"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/806abbd468861fef9cf74b61e9d145f993a04b58", "message": "Add port index support to marathon watcher\n\nThis will allow users to expose multiple backends in the same Marathon\ntask."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/0659aaea0361590c83731560a93a88bb94986b45", "message": "Remove refactored backend check logic\n\n7d51288 moved this into ServiceWatcher::Base, so this logic can be\nremoved from here."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/93b992c5bec0d16a1033fe3de8b852fa2d386518", "message": "Add splay to initial Marathon watch\n\nAnd thus fending off the thundering herd."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/0252cac90855af2638de90fedec29949b4da5201", "message": "Improve exception logic for connection problems\n\nRescuing `Exception` instead of `StandardError` is a bad idea. Also\nsetting connection to nil will ensure we reconnect to marathon."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/f44cf91816faa7e6e0c3ce02c8c01bcf5c37de5e", "message": "Allow customizable marathon_api_path\n\nIn case a new version of marathon comes out, and the path changes from\n/v2/apps/%{app}/tasks, this will allow administrators to not need to\nfork synapse."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/f41af12f946a36ffca80d16ade387e3e67a07101", "message": "Make the tests pass after merging upstream/master\n\nA bit has changed - mostly adding the ServiceWatcher class in the\nhierarchy.\n\nsafe_yaml needs upgraded because of:\nhttps://github.com/dtao/safe_yaml/issues/67"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/aa4cbc5ddeafa123ad41cedef936e1191c525a97", "message": "Merge remote-tracking branch 'upstream/master' into add_marathon_watcher\n\n* upstream/master:\n  Fixup mistake in watcher README\n  Update the README concerning ELB's weaknesses\n  Fix minor Ruby 1.9 vs Ruby 2.X compat in install instructions\n  Clarify that the first code block is not installing Ruby\n  Update README.md with better installation directions\n  Allow arbitrary haproxy_server_options to be supplied to HAProxy.\n  adds specs for ec2tag watch method, and fixes bug where if an exception was raised the normal sleep got skipped, so it could get stuck calling the failing discover instances code in a tight loop every few ms\n  Don't have synapse require the aws variables - credentials should be able to be nil to allow using iam instance profile. Updates tests to reflect\n  allow `server_port_override` to be an int since the other `port` config options can be ints\n  Linking from main README to service watcher README\n  Allow pluggable watchers\n  Handle path going away properly\n  Do not unregister the callback in the zk watcher\n  Some minor documentation fixups\n  Explicit watcher haproxy backend names\n  [travis] switch to new infrastructure\n  bump version to v0.12.1\n  bump version to v0.12.0\n  Fixed wording of some documentation, added missing options\n  Address feedback from igor and schleyfox\n  Fixups for merge to airbnb/master\n  Turns out it's important to handle session disconnects correctly\n  Try out :per_callback threads and get more debug information\n  Add support for the weight key added in nerve\n  Fix bug in caching logic.\n  Add state file.\n  Rate limit restarts but not stats socket updates\n  ZooKeeper connection pooling.\n  Increase HAProxy restart interval.\n  Revert \"Add rate limiter.\"\n  Add rate limiter.\n  Allow the option allredisp option to haproxy.\n  Explicitly deduplicate registrations\n  Allow registrations to be manifested on the file system\n  Add 'use_previous_backends' option.\n  test synapse on 2.0.0, 2.1.6, 2.2.2 also\n  git ignore .ruby-version\n  update zookeeper dependency to support newer rubies\n  typo\n  synapse expects arrays under shared_frontend, hosts and backend\n  verify doubles\n  run transpec to convert specs to new format\n  fix some broken specs and deprecation warnings\n  bump rspec version\n\nConflicts:\n\tGemfile.lock\n\tlib/synapse/service_watcher.rb"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/8d2788f9b450fa351d525fb6b16fe6854062cba4", "message": "Clarify that the first code block is not installing Ruby"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/71108e8a5adcc45e63a5a64cb73ce6fac3776b49", "message": "Update README.md with better installation directions\n\nThe previous installation directions are not great -- they are ambiguous\nbetween whether synapse should be used as a library (and placed in the\ndepending app's Gemfile) vs being used as a standalone application (and\ninstalled via `gem install`).\n\nThe best way I know to deploy a Ruby application is to use `gem install\n--install-dir [path]` to install the application in that path. This\nallows:\n\n* the gem to be installed by any user, not just root\n* the version of synapse's dependencies to be isolated from other system\n  gems\n* easier redistribution as a system package\n\nThe downside is a relative large disk footprint - 36 MB as of writing.\nMany files can be excluded from a system package, like the cache/\ndirectory."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/acde0d312fb8d58f62b1dbf59e200032404af762", "message": "Attempt marathon connection during watch loop\n\nThis increases the resiliency in the case that marathon cannot be\nimmediately found. A connection attempt will be made at the start of\neach watch interval."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/8e5b63a913150088544e0f55e4871698e680b5ba", "message": "Sort tasks by name\n\nThey can't be sorted by a Hash, since that is not something Ruby can\ndo."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/4358449f572fabb47a29773536b9021f66b66850", "message": "Add spec for marathon watcher\n\nHopefully these specs will catch some of the most important behavioral\nchanges. Rather than individually stubbing a bunch of Net::HTTP stuff, I\npulled in webmock as a development dependency.\n\nI also found it easiest to add a silly method\nSynapse::MarathonWatcher#only_run_once? which is hard-coded to false but\nstubbed to return true in the test suite."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/5f7268638e962ae946092116589e81db67d93381", "message": "Always request application/json from marathon\n\nSometimes it does JSON by default, sometimes not."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/67b3168813365a2e003aee3baf6e7f381c1b2034", "message": "Filter out Staged tasks\n\nWe don't want to load-balance across tasks that aren't started."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/963cca9909cb885ebba883cc63c26c6d5207b580", "message": "Set a timeout of 5 seconds on the connection\n\nIn case the URL is wrong, this will not hang startup."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/ee0db4789c19cf4f25412910658e51bf83b80794", "message": "Initial stab at Marathon watcher"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/64754411", "body": "+1 for this functionality. I accidentally implemented the same thing earlier today in #101. Anyway, merging one of these would be awesome.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/64754411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41700410", "body": "Idk? It seems pretty stable to me, and I think even if they were to make a breaking change to it they might still maintain the old URL. Nonetheless, I will make it configurable so I don't have to eat my words.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41700410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41700700", "body": "Yeah, I think so.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41700700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41700772", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41700772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41700807", "body": "Done. (7d512887 moved that logic into `ServiceWatcher::Base`, after my first version of the PR)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41700807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41700810", "body": "Good idea, we actually needed this too.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41700810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "bobtfish": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/e0593169f076928b2cfc840c83dfd729dbb863ab", "message": "Add support for the weight key added in nerve"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/4f48b34e0a9d7ed54648b3884bc450d2f0fc79a7", "message": "Fix to not include a cookie in TCP mode.\n\nb7098382 added a cookie always, however this only works in HTTP mode.\nRemove/disable this automatic addition when we're in TCP mode."}], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/131", "title": "Weights in generated config", "body": "cc @vulpine\n\nRebased against airbnb/synapse master\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/58", "title": "Etcd service watcher", "body": "And the etcd watcher part to go with the reporter :)\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/42426051", "body": ":thumbsup: \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/42426051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/49036804", "body": "@igor47 this change is a big deal to us (Yelp) - any chance you can expedite merging/releasing it given it's really small? :)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/49036804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/49055120", "body": "Thanks for the quick response! <3\n\nWe want to map multiple backends to one frontend, and we don't want to have to allocate IPs for the frontends we're not using. Does this explain the use-case?\n\nI'll leave @vulpine to add some docs :)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/49055120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/62452639", "body": "AFAIK this is good to merge, and it's waiting on someone from airbnb to actually merge it, rather than me to do anything to make it mergeable. (If not, I've missed something - please point it out?)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/62452639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/63629789", "body": "> On Nov 18, 2014, at 8:54 AM, Zane notifications@github.com wrote:\n> \n> Greetings -\n> \n> I've implemented this watcher, but I am running into an error:\n> \n> E, [2014-11-18T08:51:02.005658 #7449] ERROR -- Synapse::EtcdWatcher: synapse: invalid data in etcd node # at /service: 757: unexpected token at 'running' DATA running\n> \n> For all entries in my etcd instance I get a return from synapse noted above.\n> \n> Can you also show us what\u2019s in etcd? (The key layout, and JSON contents)\n\nI\u2019m guessed that there is some somehow bad data that\u2019s crashing things - if you can show me what it is, I\u2019ll fix and add a test :)\n\nCheers\nTom\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/63629789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/125019942", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/125019942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/127295186", "body": "@jolynch ack - thanks for the feedback. I'll add tests around the state file, and I had totally forgotten the weight updates over the socket. I'd however prefer to do that as a separate patch to keep things relatively simple. Does that work for you?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/127295186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/133904401", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/133904401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "eik3": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/64c2bd802bb77a31fad8e06aa9150dff7c93a863", "message": "typo"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "larryweya": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/704c9c3519f14003fab9074fb1c5ab03223db723", "message": "synapse expects arrays under shared_frontend, hosts and backend"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/77096943", "body": "@benley  I like your implementation, allowing a custom port_name, since the rest is exactly the same, I'll merge yours into mine.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/77096943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "cap10morgan": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/5ef97f0d05d1c860cc38791d6c2780644619a445", "message": "add tests for filtering no-public-port containers"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/d2397e9c05887d9b45b502464e39fa35a98fe36b", "message": "filter out containers with no public port"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "liamstewart": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/9692358348d492825a5217469c7680ebe93ea37a", "message": "Consider only running instances and memoize AWS calls.\n\nIt doesn't make sense to retrieve starting, stopping, stopped, and terminated instances\nand include them on the server list. The `memoize` block ensures that results\nfrom requests are remembered, avoiding redundant calls to retrieve instance\ndetails."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/58676664", "body": "Any thoughts on this? It would be nice to have it merged in - we deploy a forked version with this change as we use IAM profiles rather than keys and secrets.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/58676664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "bazbremner": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/bcd404f4ad2d40eb4ed23904ff6cd98e2951e5e7", "message": "Validate server_port_override"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/cf0377171518a05adf86d115f6313c4c1859c9a8", "message": "Initial stab at tests for EC2 tag watcher."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/163984393e401f3da1cbe997591f532534316723", "message": "Implement EC2 tag watcher."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/47986961", "body": "@dcosson Indeed, the README on master implies the functionality was there, which isn't the case, hence this PR - this was functionality I required.\n\n@igor47 could this be merged, please? I note that it's now a conflicted merge - if I need to have a look at this/rebase to get it merged, please let me know.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/47986961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/48246691", "body": "@igor47 Excellent, thank you.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/48246691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/51477719", "body": "@liamstewart nice work! Sorry, I obviously overlooked that with #66 \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/51477719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "joshbuddy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/f35d3b73ff98795f0f66a0b2040ca3eb35d5afbc", "message": "Merge pull request #76 from airbnb/add_cookie_options\n\n[haproxy] always add a cookie to the server"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/46889013", "body": "Just tested this, looks good.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/46889013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12348378", "body": "Can't we just stick this in `when Messages::CheckInterval` case?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12348378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "tcc-jenkins": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/c85c48137793ab1dd9002465f210773482ff5079", "message": "exceptions in the watcher threads should wake the main thread"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nherzing": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/6c448d39c7769a4e117651340ce6e452bdf70908", "message": "Add tcp-check to allowed HAProxy configurations"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rrrene": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/60227545f287d677b666e7020ca272a7ef9bc0fa", "message": "Update docs badge in README\n\nUpdate the URL of the docs badge to include it from inch-ci.org instead of inch-pages.github.io (the former being the successor of the Inch Pages project)."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brndnmtthws": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/4b734ec1057ef44cdce7805584c90160f21e6955", "message": "Heartbeat: use `connected?` rather than `ping?`."}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/b644c023b7c124bbd6f12b4b6b4de337c41976ce", "message": "More robust ZK watcher handling."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/28445461", "body": "Hey James,\n\nWe're doing something similar to this as well.  I don't think we've quite figured out the best way to go about it, however.  There's a nerve branch with a proposed solution: https://github.com/airbnb/nerve/tree/dynamic-config2\n\nThe current goal is to a) provide a simple, robust interface and b) allow services to be announced and discovered at run-time.\n\nWe have not updated synapse yet, but it would make sense to have both nerve and synapse behave the same way.  Do you want to take a look at how we're doing it with nerve?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/28445461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/29643228", "body": "@igor47 @pcarrier \n\nHave been running this for a few weeks now.  Would love to see it merged.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/29643228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/39480362", "body": "@joshbuddy \n\nThis may also be of interest to you.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/39480362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/39482800", "body": "That's possible if it's completely unable to connect properly, but in that case it will start throwing exceptions before creating a death loop. \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/39482800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/39486203", "body": "Updated as per Will's comments.\n\nTested & verified in staging.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/39486203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/44491808", "body": "FYI, we have been running this for a while (since I authored it).\nOn May 28, 2014 4:24 PM, \"Will Moss\" notifications@github.com wrote:\n\n> @igor47 https://github.com/igor47 we can also deploy to part of the DI\n> cluster for a while if you want to let it bake for a bit before going to\n> the whole cluster with it. Whatever you prefer.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/airbnb/synapse/pull/56#issuecomment-44477378\n> .\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/44491808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/44590557", "body": "Seems fine to me.  The \"exit on error\" thing seems odd to me, but I'm opinionated about it.  Regarding the API, I removed only the things which seemed unused.\n\nThe only other thing is that this hasn't been tested (afaik), whereas the other version has (and a bug was found & fixed as a result).\n:+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/44590557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/61663567", "body": "On the synapse side there is no dynamic config stuff (I never implemented it).  For nerve, there's a branch that we've been running in production (with Mesos) for about a year now, [here](https://github.com/airbnb/nerve/tree/dynamic-config2).\n\nWe currently define synapse services statically, and then announce services to nerve dynamically.  For each app on Marathon, we send a heartbeat to a local nerve instance which creates the appropriate ZK nodes.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/61663567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/61988255", "body": "Yes, you could certainly do that.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/61988255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/131442474", "body": "Feel free to close it. My 2 cents.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/131442474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/comments/6493219", "body": "My Ruby knowledge is not sufficient to answer that question.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/6493219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/comments/6493400", "body": "Nelson found a bug where the znodes occasionally disappeared because we\nnever handled session expiry.\nOn May 29, 2014 12:02 PM, \"Will Moss\" notifications@github.com wrote:\n\n> What was the original problem this was trying to solve?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/airbnb/synapse/commit/a0f40d337c87ccac90a3aac00b5c6f5e2bf4c1ac#commitcomment-6493318\n> .\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/6493400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/comments/6496477", "body": "I just realized I responded to the wrong question.  There was a ruby syntax\nerror, which has also been fixed in master (as you can see in the diff).\n I'll drop my patch.\n\nOn Thu, May 29, 2014 at 12:09 PM, Brenden Matthews <\nbrenden.matthews@airbedandbreakfast.com> wrote:\n\n> Nelson found a bug where the znodes occasionally disappeared because we\n> never handled session expiry.\n> On May 29, 2014 12:02 PM, \"Will Moss\" notifications@github.com wrote:\n> \n> > What was the original problem this was trying to solve?\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/airbnb/synapse/commit/a0f40d337c87ccac90a3aac00b5c6f5e2bf4c1ac#commitcomment-6493318\n> > .\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/6496477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7705383", "body": "Yeah, it was in the Makefile from the nerve repo and I just copypasta'd.  I'll drop it.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7705383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/11263411", "body": "I was confused about the semantics here. I suppose !@watcher.nil? might be\nbetter?\nOn Apr 3, 2014 10:43 AM, \"Will Moss\" notifications@github.com wrote:\n\n> In lib/synapse/service_watcher/zookeeper.rb:\n> \n> > @@ -96,8 +109,14 @@ def discover\n> >      def watch\n> >        return if @should_exit\n> > -      @watcher.unsubscribe if defined? @watcher\n> > -      @watcher.unsubscribe if @watcher\n> \n> Are we sure @watcher is defined? I don't see it being created in\n> initialize or anywhere else that would guarantee it's existence.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/airbnb/synapse/pull/56/files#r11263203\n> .\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/11263411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/11264419", "body": "Yeah, I'll clean this up so we don't have to speculate.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/11264419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "schleyfox": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/697f74bf04d95989caecb934c0d6bf2749d33a7e", "message": "Merge pull request #67 from airbnb/fix-bug-with-watcher-initialization\n\nFix bug with sub-watcher initialization"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/4dadddd6ead4af49cfef35cb33dc72553a2a78bb", "message": "Fix bug with sub-watcher initialization"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/292cdfae1190c5507db8696e39adba94bc39e0a9", "message": "Merge pull request #65 from airbnb/add-zookeeper-dns-watcher\n\nWIPish: Add ZookeeperDnsWatcher"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/9243fdf6b4a9c07a1e4054ab0dd59ab5ec55c884", "message": "Add slightly more logging"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/b6e6d3fc2edebdad442584f846a388881d330702", "message": "Address comments from PR\n\n* Make ping? dependent on watcher thread\n* Fix default_servers handling"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/89efc593267c6cfdedeecf7be08266ff95a7f9f1", "message": "Improve check interval queuing behavior, add comments"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/14743310", "body": "Mixed Messages ftw\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/14743310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/17843566", "body": "Updated this per comments and also to handle multiple addresses from DNS.  I have also tested locally and checked behavior with loss of network connection.\n\nThe next step is to get a new version of synapse out, set it up on my test boxes, smoke test a bit more, and then run the third dress rehearsal.\n\nBen\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/17843566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/31803093", "body": "Worth noting, that this indicates that the process gets stuck when trying to exit.  We will investigate this further and let you know what we find.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/31803093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/42259969", "body": "Also, should note that I have put this through its paces locally.\n\nAlso /cc @nelgau \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/42259969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/42377661", "body": "Ok, I believe I have addressed the comments.  PTAL.\n\n@igor47 note that I changed the implementation of `ping?` to ensure that watcher threads are running.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/42377661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/123956505", "body": "I gave it a skim and it seems pretty reasonable to me. I'm excited.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/123956505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/comments/3453011", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/3453011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4204076", "body": "no, an `|| nil` would only force it to be `nil` instead of potentially `nil` or `false`, both of which are falsey anyway.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4204076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4926223", "body": "I don't love the reaching in and setting the variable.  It's a minor thing but something like `@synapse.schedule_configure!` or just `@synapse.configure!` might be happier.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4926223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4926264", "body": "this is a local variable (and thus created fresh on every call to this method), you probably want an instance variable\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4926264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4926327", "body": "This might make sense as 0.3.0, we're doing big things here.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4926327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/8848849", "body": "raise\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/8848849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12308568", "body": "@igor47 I'm basically undoing: https://github.com/airbnb/synapse/commit/6b66e1bc18c8f9b767a88d5fec6b49a7ca69a914#diff-0e99371a377e31bb01e79735c2b3f621\n\nLooking at our internal haproxy stats pages, it looks like have the name would actually add additional information (assuming that there are multiple CNAMES named differently in the server config).  Curious as to what your thinking was on this.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12308568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12309498", "body": "it's possible that I could, though the local variables (that should probably stay local) complicate the refactoring.\n\nI'm able to abandon the more complicated sleep math because running the simple sleep math from a separate thread that communicates over a queue has nearly the same timing characteristics, since a message will be pushed every X seconds to trigger a re-resolve.  I will ensure that a CheckInterval message is only pushed onto an empty queue, as a non-empty queue will trigger a re-resolve ASAP anyway.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12309498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12311667", "body": "good call, I will change the ping? calls to take thread health into account as well.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12311667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12311905", "body": "it actually shouldn't because the ZK watcher already has behavior in it to prevent sending a list of empty backends to synapse.\n\nThis does raise the point that figuring out when or how to fall back to defaults is tricky and needs to be figured out.  I'm not sure what the right approach is here.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12311905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12312088", "body": "It's also worth noting that default_servers won't work particularly well as a fallback because DNS will only be resolved once, which would introduce a fairly severe risk that all servers seem to be behaving well, but some have accidentally gotten in a state in which they are only coasting on their default servers, which would stop working if the DNS changes.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12312088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12312159", "body": "it's actually not even on that hash.  This could be made to work by passing default_servers into at least the Zk watcher, as it will pass on the default servers to the Dns watcher as the list of backends if it resolves an empty set of backends.  The more I think about it, the less I like that particular failure/recovery mode, however.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12312159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35285222", "body": "I think the shuffling is helpful for some of the things that we have that have a predictable number (per box) of long lived connections like our MySQL databases.  Especially since these connections survive haproxy restarts and the time of reconnection is very synchronized on every server, I could definitely see this causing problems for our use case.\n\nThis may help with #127, but unless I'm missing something, I don't understand how consistent hashing could be expected to play nicely with synapse/haproxy.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35285222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/66313508", "body": "`if s` might as well use ruby truthiness.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/66313508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "microwavedboy": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/231", "title": "Adding tag_hash functionality to ec2tag watcher. ", "body": "Migrated to v2 of AWS-SDK\r\nUpdated rspec tests\r\nUpdated README.md to cover new functionality\r\n\r\nThis adds the ability to define a \"tag_hash\" key in the options block for the ec2tag watcher.\r\n\r\nI had the use case of wanting to target only the intersection of two tags -- such as \r\n```\r\ntag_hash:\r\n  environment: staging\r\n  some_service: installed\r\n```\r\n\r\nAnd the existing watcher functionality did not suffice. \r\n\r\nThis is backwards compatible with existing synapse.yaml configuration files (and the tag_name/tag_value keys for ec2tag)\r\n\r\nCheers,\r\nAlex", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "merimna": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/221", "title": "Adds Docker watcher ability to use images without tags", "body": "Really useful for local dev where an image might not have a tag yet.\r\n\r\nThe fix here was to use `split` instead of `rpartition` because `rpartition` has some unexpected behavior when there is no match.\r\n\r\n```\r\n\"foo:bar\".rpartition(\":\")    # [\"foo\", \":\", \"bar\"]\r\n\r\n\"foo\".rpartition(\":\")        # [\"\", \"\", \"foo\"]\r\n```", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "GrigorievNick": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/217", "title": "Add watcher for YARN application that was deploy with Apache Slider.", "body": "Checked in production of Playtech with 2.7.2 YARN and slide 0.91 on HDP 2.5.\r\nChosen application done base on slider publish tags.\r\nMain goal add service discovery for exports per container.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "solarkennedy": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/209", "title": "Add splay startup jitter to haproxy startup", "body": "Sometimes all the synapses are restarted globally across a fleet, so I would like their startup to be jittered just like their normal `next_restart` is jittered during a normal haproxy restart. I believe this change will do that.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hashbrowncipher": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/201", "title": "WIP: Standalone mode", "body": "@jolynch: this branch implements something we had discussed a little while ago, namely a standalone or \"oneshot\" execution mode for Synapse. This is for situations where you would like to know what information is in Synapse's backing datastore, but you don't want to read it out of the datastore directly in order to preserve separation of concerns. By adding this standalone operation, we can use the same code paths that Synapse would use to read the data.\n\nMy initial use-case is monitoring scripts. I would like to deploy a container with the Synapse gem, and run it as a script that produces a list of backends as output. My monitoring script will process this output, check it for sanity, and report issues to my monitoring system if the results are insane.\n\nThis change makes use of a new method on watchers, that I've called `read`. As far as I can tell, right now watchers don't implement any method which provides the list of backends as output without mutating other state. `read` is designed for that purpose.\n\nSo far I've just touched the Zookeeper watcher. Please review for initial feasibility.\n\nExample invocation:\n\n```\nsynapse_standalone.rb '{\"method\":\"zookeeper\",\"path\":\"/nerve/services/postgres_main_read\",\"hosts\":[\"10.74.4.104:2181\",\"10.74.4.70:2181\",\"10.74.1.43:2181\"]}'\n```\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "minkovich": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/174", "title": "Create an option to stop ignoring weights. By default weights will still be ignored. ", "body": "This commit is based on the following by @bobtfish \nhttps://github.com/airbnb/synapse/pull/131\n\nbut does the following things differently:\n1. By default weights are ignored. This is to maintain current behavior for safety.\n2. HAProxy will reconfigure if weights changes.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53518368", "body": "This is mainly for safety so people can rollout a new version without worrying about breaking something. I'm also not a fan of this option but it's kind of necessary unless you roll this into a major release. \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53518368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53523658", "body": "@jolynch, you're right. Let me fix that and add another test. \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53523658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53523834", "body": "@igor47 and @jolynch, let me move these lines and add a warning when a conflict is detected. \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53523834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53881215", "body": "@jolynch @igor47 @scarletmeow I'm going to wipe out the option to ignore weights. It's going to simplify the code a lot. I'd just bold it in the announcement when you cut the next release. :)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/53881215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/54276876", "body": "@jolynch, that's a good point. To reduce the number of iteration for this PR, could you suggest what message you'd like to see when haproxy_server_options also includes weight?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/54276876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "gfelbing": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/119", "title": "Zookeeper recursive", "body": "This branch adds a new service watcher \"zookeeper_recursive\".\nIt doesn't generate backends directly, but generates new \"zookeeper\"-watcher for each persistent node under the configured path (including the path itself).\nThe configuration of the \"zookeeper\"-watcher is based on the configuration of the \"zookeeper_recursive\"-watcher, the \"#[service]\" will be replaced by the node's path in zookeeper, the \"/\" are replaced by \"_\".\nWith this functionality you doesn't have to know which services are existing or will exist in the future.\nFor an example configuration see \"config/synapse_zookeeper_recursive.yaml\"\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bcicen": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/118", "title": "Add optional image_tag param to docker watcher", "body": "Rebase of #96 with minor changes.\n\nAdd param to explicitly discover only containers running image_name:image_tag. I've found this to be quite valuable in the deploy cycle as I can bring up containers and move them to the tag defined in synapse config when I'm ready for them to be discovered.\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/59569590", "body": "@igor47 -- running in tcp mode for me results in the below error and haproxy not restarting:\n\n```\n[ALERT] 289/125039 (25347) : config : backend 'test' : server cannot have cookie or redirect prefix in non-HTTP mode.\n```\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/59569590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/59570488", "body": "Currently haproxy 1.4.18(ancient, I know).\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/59570488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/59571991", "body": "Presumably so if you have a single container with multiple open ports(say, an http server and some type of monitoring daemon) you can discover them both and apply different backend settings in haproxy. Hence, service discovery rather than container discovery.\n\nConcerning the image-tag combination -- I do currently deploy this way and have https://github.com/airbnb/synapse/pull/96 open for the feature. This also provides the benefit of preventing conflicting image versions of an application from being used as valid backends if your orchestration tool or sysadmin doesn't always clean up after itself.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/59571991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/59572352", "body": "Closing until I can append a proper test.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/59572352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "worldsouptester": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/116", "title": "Update Rakefile", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "danieleva": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/114", "title": "SRV support for dns watcher", "body": "Accepts an optional \"srv\" field in the servers definition. The port will be fetched from the srv record, with fallback on the \"port\" field in case of failure/empty value\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "csconnell": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/91", "title": "Feature/addressable ips", "body": "These changes provide a way to update the HAProxy config for docker containers that are on addressable IPs (i.e IP addresses reachable on the network / outside of the local docker host).  The change allows you to provide a discovery setting of \"addressable_ip\" for docker discovered services as shown below:\n\n``` JSON\n\"services\": {\n    \"local-nodes\": {\n      \"discovery\": {\n        \"method\": \"docker\",\n        \"addressable_ip\": \"true\",\n        \"servers\": [\n          {\n            \"name\": \"localhost\",\n            \"host\": \"192.168.224.2\",\n            \"port\": 4243\n          }\n    ],\n    \"container_port\": 8000,\n        \"image_name\": \"local/testapp\"\n      },\n      \"haproxy\": {\n        \"port\": 9091,\n      }\n```\n\nThis change then looks up the actual IP address of the docker container instead of using the docker host and then uses the private port of the service.  The change does not affect the previous functionality - both services with non-addressable IPs and those with addressable IPs are properly written to the HAProxy config.  So a synapse config file that looks like this:\n\n``` JSON\n{\n  \"services\": {\n    \"local-nodes\": {\n      \"discovery\": {\n        \"method\": \"docker\",\n        \"addressable_ip\": \"true\",\n        \"servers\": [\n          {\n            \"name\": \"localhost\",\n            \"host\": \"192.168.224.2\",\n            \"port\": 4243\n          }\n    ],\n    \"container_port\": 8000,\n        \"image_name\": \"local/testapp\"\n      },\n      \"haproxy\": {\n        \"port\": 9091,\n\n      }\n\n    },\n    \"remote-nodes\":{\n      \"discovery\": {\n        \"method\": \"docker\",\n        \"servers\": [\n          {\n            \"name\": \"cconnell3\",\n            \"host\": \"192.168.222.153\",\n        \"port\": 4243\n      }\n        ],\n      \"container_port\": 8000,\n        \"image_name\": \"local/testapp\"\n      },\n      \"haproxy\": {\n        \"port\": 9091,\n\n      }\n\n    },\n    \"proxy-clients\": {\n      \"discovery\": {\n        \"method\": \"docker\",\n        \"addressable_ip\": \"true\",\n        \"servers\": [\n          {\n            \"name\": \"localhost\",\n            \"host\": \"192.168.224.2\",\n            \"port\": 4243\n      }\n        ],\n        \"container_port\": 9090,\n        \"image_name\": \"local/proxy-node\"\n      },\n      \"haproxy\": {\n        \"port\": 9090,\n\n      }\n\n    },\n\n  },\n\"haproxy\": {\n    \"reload_command\": \"systemctl reload haproxy.service\",\n    \"config_file_path\": \"/etc/haproxy/haproxy.cfg\",\n    \"do_writes\": true,\n    \"do_reloads\": true,\n    \"bind_address\": \"*\",\n    \"global\": [\n      \"daemon\",\n      \"maxconn 4096\",\n    ],\n    \"defaults\": [\n      \"maxconn  2000\",\n      \"timeout  connect 5s\",\n      \"timeout  client  1m\",\n      \"timeout  server  1m\",\n      \"mode http\",\n    ],\n  }\n}\n```\n\nwill result in an haproxy config like:\n\n```\n# auto-generated by synapse at 2014-09-03 16:04:10 -0400\n\nglobal\n        daemon\n    maxconn 4096\ndefaults\n        maxconn  2000\n        timeout  connect 5s\n        timeout  client  1m\n        timeout  server  1m\n        mode http\n\nfrontend local-nodes\n        bind *:9091\n        default_backend local-nodes\n\nbackend local-nodes\n        server 192.168.224.19:8000_27f8db643d74 192.168.224.19:8000 cookie 192.168.224.19:8000_27f8db643d74\n        server 192.168.224.22:8000_c5dd48c1adac 192.168.224.22:8000 cookie 192.168.224.22:8000_c5dd48c1adac\n        server 192.168.224.18:8000_df6616b4e4af 192.168.224.18:8000 cookie 192.168.224.18:8000_df6616b4e4af\n\nfrontend remote-nodes\n        bind *:9091\n        default_backend remote-nodes\n\nbackend remote-nodes\n        server 192.168.222.153:49155_cconnell3 192.168.222.153:49155 cookie 192.168.222.153:49155_cconnell3\n        server 192.168.222.153:49154_cconnell3 192.168.222.153:49154 cookie 192.168.222.153:49154_cconnell3\n        server 192.168.222.153:49153_cconnell3 192.168.222.153:49153 cookie 192.168.222.153:49153_cconnell3\n\nfrontend proxy-clients\n        bind *:9090\n        default_backend proxy-clients\n\nbackend proxy-clients\n        server 192.168.224.28:9090_sel-node-6 192.168.224.28:9090 cookie 192.168.224.28:9090_sel-node-6\n        server 192.168.224.29:9090_sel-node-7 192.168.224.29:9090 cookie 192.168.224.29:9090_sel-node-7\n        server 192.168.224.25:9090_sel-node-4 192.168.224.25:9090 cookie 192.168.224.25:9090_sel-node-4\n        server 192.168.224.30:9090_sel-node-8 192.168.224.30:9090 cookie 192.168.224.30:9090_sel-node-8\n        server 192.168.224.24:9090_sel-node-3 192.168.224.24:9090 cookie 192.168.224.24:9090_sel-node-3\n        server 192.168.224.27:9090_sel-node-5 192.168.224.27:9090 cookie 192.168.224.27:9090_sel-node-5\n```\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mandarjog": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/89", "title": "Ec2tags selector", "body": "2 commits.\n1. Adds max_checks and check_interval as top level options. This cuts down on synapse cpu usage. \n    We run in under supervisord, so max_check = 10 would exit after those many loops.\n1. Adds a fancier selector  with a @discovery['selector'] option.\n   This option as actually eval'd with 'i' being the AWSInstance variable.\n\nWe are using this in production.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cloakedcode": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/86", "title": "Multi-host compatible etcd service watcher", "body": "Merged bobtfish's etcd service watcher and added etcd host failover.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "martinrhoads": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/13465010", "body": "Awesome!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/13465010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/14744368", "body": "I should have removed the message, it was safe ;)\n\nOn Mon, Mar 11, 2013 at 2:19 PM, Christopher Lin\nnotifications@github.comwrote:\n\n> wat\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/airbnb/synapse/pull/2#issuecomment-14743374\n> .\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/14744368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/20146741", "body": "more or less great, but I would like a comment on what the dns resolution check is supposed to do. \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/20146741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/32299512", "body": "changes look good to me. would be good to have a way to test this to make sure that it solves the issue \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/32299512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/comments/4616189", "body": "no, this should not be the case\n\nOn Thu, Nov 14, 2013 at 7:13 PM, Mat Schaffer notifications@github.comwrote:\n\n> That's encouraging. Is there any period between processes where you'd have\n> new requests or connections get rejected?\n> \n> On Thursday, November 14, 2013, Igor Serebryany wrote:\n> \n> > yes. but haproxy restarts are not as scary as they sound. existing\n> > connections are unaffected -- the previous haproxy process is left\n> > running\n> > until they close.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub<\n> > https://github.com/airbnb/synapse/commit/9127f69e79cbe0c4f797188bf42d432eae92387d#commitcomment-4605208>\n> > \n> > .\n> ## \n> \n> -Mat\n> \n> about.me/matschaffer\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/airbnb/synapse/commit/9127f69e79cbe0c4f797188bf42d432eae92387d#commitcomment-4609207\n> .\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/4616189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4923471", "body": "should this raise an exception? \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4923471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4923489", "body": "what exactly are you trying to test here? that the watcher can resolve dns? why airbnb.com? \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4923489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "clizzin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/14743374", "body": "wat\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/14743374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/75111690", "body": "Sorry @jhspaybar, your procedure is all fine, it's just that @igor47 is really busy these days working on other projects for Airbnb.  We're doing our best to find time to respond to pull requests, and we're sorry contributors are waiting so long.  Please bear with us in the meantime.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/75111690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/75112032", "body": "Sorry folks, the project maintainer @igor47 is really busy with other projects for Airbnb these days.  We're doing our best to find time to respond to pull requests, and we're sorry contributors are waiting so long. Please bear with us in the meantime.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/75112032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/75112206", "body": "Sorry @Jaykah, the project maintainer @igor47 is really busy with other projects for Airbnb these days. We're doing our best to find time to respond to pull requests, and we're sorry contributors are waiting so long. Please bear with us in the meantime.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/75112206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jtai": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/16481539", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/16481539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/19648073", "body": "Other than that, LGTM\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/19648073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/42387501", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/42387501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/124176883", "body": "These improvements are awesome! Thank you!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/124176883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/comments/3026562", "body": "The service name would be helpful here so we can filter on service and aggregate on backend.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/3026562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/3824782", "body": "I would change the earlier debug line to an info line and just drop this one.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/3824782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4761748", "body": "Even though the port doesn't change with the DNS watcher, should we hash the address and port here for consistency?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4761748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4929602", "body": "I'm not sure what this comment is supposed to mean. If it's referring to `@restart_interval`, it should be \"how often to restart haproxy\", or better yet, \"minimum time between haproxy restarts\"\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4929602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4929650", "body": "Unless we patched the init script, this line will never trigger.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4929650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12312104", "body": "I don't see `default_servers` used anywhere; perhaps this was meant to be used in the empty servers case?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12312104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12312154", "body": "Nevermind; this is used in the parent DNS watcher. I think we still need to call `configure_backends` for the logic to be run though. Currently we're skipping the call if the backends are empty.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12312154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35343993", "body": "Will this cause problems for standard builds of haproxy?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35343993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35345432", "body": "Should this (and the next `warn` statement) also mention that there are no backends for the service? E.g., `\"synapse: no backends for service #{@name} and no default servers configured; using previous backends: #{backends.inspect}\"`\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35345432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "pcarrier": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/19632740", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/19632740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/24713845", "body": "Am I missing some commits? I only see a version bump and a dep removal.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/24713845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/25418022", "body": "https://github.com/airbnb/smartstack4j/pull/1\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/25418022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/26572634", "body": "Completely agree on the changes.\n\nNothing obviously wrong with the code, didn't review very carefully but if it's tested then go!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/26572634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7054218", "body": "Looks great to me. Would be nice to have haproxy a class with its own attributes instead of keeping it around as a hash, but that's a refinement that could come later if we wanted to spend more time on the Ruby implementation.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7054218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12311388", "body": "Thread would die silently.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/12311388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "nelgau": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/25312684", "body": "Seems reasonable. :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/25312684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "memory": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27516099", "body": "On Thu, Oct 31, 2013 at 11:58 AM, Igor Serebryany\nnotifications@github.comwrote:\n\n> thanks for the pr! it looks generally good to me.\n> \n> Cool, glad you like it. :)\n> \n> my main concern: i'm wary of adding a second config format; there should\n> be only one way to configure synapse, and it should be the same as nerve. i\n> often add comments to json hashes by just adding a \"comment\" field (which\n> is ignored by the code). would that be sufficient?\n> \n> I should probably just back out the JSON/YAML stuff and offer it as a\n> separate PR.  FWIW, I'd argue for doing it in nerve as well.  My general\n> feeling is that JSON is great as a formal interchange format between\n> programs, but lousy as a configuration file format that has to be edited\n> (and read!) by humans, because of issues like this:\n\n{ \"valid_json?\":\n  { \"lets\":\n    [\"play\",\n     \"spot\",\n     \"the\",\n     \"syntax\",\n     \"errors\",\n   ]\n  },\n}\n\n...and while you can certainly do:\n\n{\n  \"this_dict\": {\n\n```\n\"has\": \"values\",\n\n\"and\": \"a\",\n\n\"comment\": \"which is me!\"\n```\n\n  }\n\n}\n\n...it's much harder to do something like this:\n\n{\n  \"this_dict\": {\n\n```\n# TODO: restore when bug #7 closes\n\n# \"has\": \"values\",\n\n# \"and\": \"a\",\n\n\"comment\": \"which is me!\"\n```\n\n  }\n\n}\n\n...whereas all of the above strings are valid and correct YAML.\n\nBTW, are you on freenode?  I have some general architecture questions I'd\nlike to pepper you with.\n\n-n\n\n## \n\nEveryone knows history moves in circles;\nthe surprise is how big the circles are.\n  (--Greil Marcus)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27516099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27745380", "body": "Actually my original pass at this involved trying to build out the listen section a little more dynamically, but I went for the minimal-changes route.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27745380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27745393", "body": "In short: yes. :)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27745393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/29316553", "body": "Ping? :)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/29316553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/29403291", "body": "(rebased against synapse 0.7.0)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/29403291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/29546506", "body": "While this works, it's obviously pretty rough-and-ready -- posting here to get some feedback on the approach.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/29546506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/29826884", "body": "So yeah, as we're currently using it, shared_config just has a bind\nstatement in it, although you could obviously get cleverer if you wanted:\n\n{\n  \"service_conf_dir\": \"/etc/synapse/services\",\n  \"haproxy\": {\n    \"shared_frontend\": [\n      \"bind 127.0.0.1:8081\"\n    ],\n    \"reload_command\": \"service haproxy reload\",\n    \"config_file_path\": \"/etc/haproxy/haproxy.cfg\",\n    \"socket_file_path\": \"/var/run/haproxy.sock\",\n    \"do_writes\": true,\n    \"do_reloads\": true,\n    \"do_socket\": true,\n    \"global\": [\n      \"daemon\",\n      \"user    haproxy\",\n      \"group   haproxy\",\n      \"maxconn 4096\",\n      \"log     127.0.0.1 local0\",\n      \"log     127.0.0.1 local1 notice\",\n      \"stats   socket /var/run/haproxy.sock\"\n    ],\n    \"defaults\": [\n      \"log      global\",\n      \"option   dontlognull\",\n      \"maxconn  2000\",\n      \"retries  3\",\n      \"mode     http\",\n      \"timeout  connect 5s\",\n      \"timeout  client  1m\",\n      \"timeout  server  1m\",\n      \"option   redispatch\",\n      \"balance  roundrobin\"\n    ],\n    \"extra_sections\": {\n      \"listen stats :7070\": [\n        \"mode http\",\n        \"stats enable\",\n        \"stats uri /\",\n        \"stats refresh 5s\"\n      ]\n    }\n  }\n}\n\n...and then various per-service json blobs get constructed by puppet and\ndropped into /etc/synapse/services, for instance:\n\n{\n  \"discovery\": {\n    \"method\": \"zookeeper\",\n    \"path\":  \"/nerve/services/qa/seer-server/default\",\n    \"hosts\": [\n      \"0.zookeeper-server.climate.net:2181\",\n      \"1.zookeeper-server.climate.net:2181\",\n      \"2.zookeeper-server.climate.net:2181\"\n    ]\n  },\n  \"haproxy\": {\n    \"server_options\": \"check inter 2s rise 3 fall 2\",\n    \"shared_frontend\": [\n     \"acl is_seer-server hdr_dom(host) -i seer-server.lb\",\n     \"use_backend seer-server if is_seer-server\"\n    ],\n    \"backend\": [\n      \"mode http\"\n    ]\n  }\n}\n\nAnd yeah; I've got a TODO in there to extract the frontend validation code\nso that it can be used against the shared_frontend section as well.\n\n-n\n\nOn Tue, Dec 3, 2013 at 11:52 AM, Igor Serebryany\nnotifications@github.comwrote:\n\n> i could have sworn i commented on this issue over the weekend, but my\n> comment seems to have disappeared... or is this a different PR?\n> \n> can you show an example of the kind of configuration you would include in\n> shared_config? do we need any special configuration? i guess at least the\n> port to bind to...\n> \n> maybe the config format could be: \"shared_frontend\" => { \"port\" => 8081,\n> \"frontend\" => [] } to fit in with the definition of services? maybe we\n> could reuse the code from service validation to also validate\n> shared_frontend ?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/airbnb/synapse/pull/30#issuecomment-29744783\n> .\n\n## \n\nEveryone knows history moves in circles;\nthe surprise is how big the circles are.\n  (--Greil Marcus)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/29826884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/29920717", "body": "On Tue, Dec 3, 2013 at 11:25 AM, Igor Serebryany\nnotifications@github.comwrote:\n\n> we've already discussed this idea in this issue: #23https://github.com/airbnb/synapse/pull/23currently, if you would like to bind to additional addresses, you can just\n> use a bind directive in the frontend stanza.\n\nPossibly I'm missing something, but:\n- If you define a \"port\" section in a service, it automatically inserts\n  \"bind localhost:#{port}\" via the code in question in this pull\n- ...if you add an additional bind in the frontend section (ie: \"bind\n  0.0.0.0:port\"), you have to bind on a _different_ port, otherwise haproxy\n  will complain about the conflicting bind statements\n- If you do _not_ define a port section in a service, synapse will never\n  generate a frontend stanza, and anythign you define in frontend:[] is\n  ignored.\n\nSo without this change, the only way to bind to a non-loopback address is\nfor each service you want to consume two different ports, one on localhost\nand one on 0.0.0.0.  (Or somehow determine the IP address of each\nnon-loopback interface and define each of them manually.)\n\n-n\n\n## \n\nEveryone knows history moves in circles;\nthe surprise is how big the circles are.\n  (--Greil Marcus)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/29920717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/30462065", "body": "On Thu, Dec 12, 2013 at 12:58 PM, Igor Serebryany\nnotifications@github.comwrote:\n\n> does the approach i've outlined sound reasonable? can i close this issue?\n\nI'm still playing around with it, but I saw some very weird ZK-related\nproblems when testing this patch, so I think it's a dead end either way.\n Close it. :)\n\n-n\n\n## \n\nEveryone knows history moves in circles;\nthe surprise is how big the circles are.\n  (--Greil Marcus)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/30462065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/30462304", "body": "On Thu, Dec 12, 2013 at 1:00 PM, Igor Serebryany\nnotifications@github.comwrote:\n\n> yup, you're totally right. i'm still really uneasy opening up this use\n> case, but enough people are asking for it that maybe it's a good idea?\n> \n> why do you want to have a pool of dedicated haproxy machines?\n\nConsider a test environment in EC2 with a pool of services that developers\nrunning code on their laptops want to use as backends.  Running a fully\ncopy of synapse+haproxy on their laptop is of course possible, but way\noverkill when they just want to test their client code against a backend\nAPI.  But if there's an external haproxy they could point everything at...\n\n(There are some other possible use cases, but this is the primary one.)\n\n-n\n\n## \n\nEveryone knows history moves in circles;\nthe surprise is how big the circles are.\n  (--Greil Marcus)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/30462304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/31679711", "body": "Well, I guess I'm glad to know it's not just me.  If I can provide any additional info for debugging, please ping me on freenode or gchat.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/31679711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/31691635", "body": "Ugh, I wish.  I have yet to have it happen in <10 hours of process uptime. :(\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/31691635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/31985486", "body": "Found another one in the catatonic state; attached with gdb to get a stacktrace; if I'm reading this correctly it does indeed look like it's trying to shut down?\n\n(gdb) bt\n#0  0x00007f363f7e9f67 in sched_yield () from /lib/libc.so.6\n#1  0x00007f3640724045 in gvl_yield (vm=0x1176010, th=<value optimized out>) at thread_pthread.c:123\n#2  0x00007f3640724b60 in rb_thread_schedule_limits () at thread.c:1025\n#3  rb_thread_schedule () at thread.c:1035\n#4  0x00007f3640724d77 in rb_thread_terminate_all () at thread.c:375\n#5  0x00007f3640604516 in ruby_cleanup (ex=6) at eval.c:140\n#6  0x00007f36406046d5 in ruby_run_node (n=0x1562808) at eval.c:244\n#7  0x0000000000400a0b in main (argc=4, argv=0x7fff2342b518) at main.c:38\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/31985486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/32324958", "body": "Okay, sorry for some weird pushes there; this should be good to go now.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/32324958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/32502234", "body": "FWIW, after deploying 0.8.0 across an environment with ~45 synapse instances, 10 hours after starting each process I was able to SIGTERM all of them and see them exit correctly.  It's not conclusive, but it's at least positive enough that I'll turn off my cronned midnight SIGKILL and see if we're still in good shape after 48-72 hours.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/32502234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/32626497", "body": "Okay, now that we have proper cleanup, the underlying problem is a little clearer:\n\n2014-01-17 17:15:48.525411500 I, [2014-01-17T17:15:48.525289 #6877]  INFO -- Synapse::ZookeeperWatcher: synapse: discovering backends for service klima-server\n2014-01-17 17:16:18.529763500 E, [2014-01-17T17:16:18.529633 #6877] ERROR -- Synapse::Synapse: synapse: encountered unexpected exception #<Zookeeper::Exceptions::ContinuationTimeoutError: response for meth: :get_children, args: [0, \"/nerve/services/staging/klima-server/default\", nil, #<Zookeeper::Callbacks::WatcherCallback:0x00000002732038 @completed=false, @proc=#<Proc:0x00000002731cc8@/export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zookeeper-1.4.7/lib/zookeeper/callbacks.rb:24>>], not received within 30 seconds> in main thread\n2014-01-17 17:16:18.529873500 W, [2014-01-17T17:16:18.529827 #6877]  WARN -- Synapse::Synapse: synapse: exiting; sending stop signal to all watchers\n2014-01-17 17:16:18.529951500 W, [2014-01-17T17:16:18.529907 #6877]  WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533320500 I, [2014-01-17T17:16:18.531645 #6877]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533323500 W, [2014-01-17T17:16:18.531713 #6877]  WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533324500 I, [2014-01-17T17:16:18.531747 #6877]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533325500 W, [2014-01-17T17:16:18.531779 #6877]  WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533351500 I, [2014-01-17T17:16:18.531810 #6877]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533353500 W, [2014-01-17T17:16:18.531848 #6877]  WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533354500 I, [2014-01-17T17:16:18.531879 #6877]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533358500 W, [2014-01-17T17:16:18.531909 #6877]  WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533359500 I, [2014-01-17T17:16:18.531940 #6877]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533367500 W, [2014-01-17T17:16:18.531969 #6877]  WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533368500 I, [2014-01-17T17:16:18.531998 #6877]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533370500 W, [2014-01-17T17:16:18.532030 #6877]  WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533373500 I, [2014-01-17T17:16:18.532061 #6877]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533374500 W, [2014-01-17T17:16:18.532091 #6877]  WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533376500 I, [2014-01-17T17:16:18.532121 #6877]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533379500 W, [2014-01-17T17:16:18.532150 #6877]  WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533380500 I, [2014-01-17T17:16:18.532179 #6877]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533382500 W, [2014-01-17T17:16:18.532208 #6877]  WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533389500 I, [2014-01-17T17:16:18.532235 #6877]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533390500 W, [2014-01-17T17:16:18.532265 #6877]  WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533392500 I, [2014-01-17T17:16:18.532293 #6877]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533395500 W, [2014-01-17T17:16:18.532325 #6877]  WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533396500 I, [2014-01-17T17:16:18.532355 #6877]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533398500 W, [2014-01-17T17:16:18.532386 #6877]  WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533401500 I, [2014-01-17T17:16:18.532414 #6877]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533402500 W, [2014-01-17T17:16:18.532443 #6877]  WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533404500 I, [2014-01-17T17:16:18.532470 #6877]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533411500 W, [2014-01-17T17:16:18.532498 #6877]  WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533413500 I, [2014-01-17T17:16:18.532526 #6877]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533414500 W, [2014-01-17T17:16:18.532555 #6877]  WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533417500 I, [2014-01-17T17:16:18.532582 #6877]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533419500 W, [2014-01-17T17:16:18.532610 #6877]  WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533420500 I, [2014-01-17T17:16:18.532637 #6877]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533428500 W, [2014-01-17T17:16:18.532665 #6877]  WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533429500 I, [2014-01-17T17:16:18.532693 #6877]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533436500 W, [2014-01-17T17:16:18.532722 #6877]  WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533437500 I, [2014-01-17T17:16:18.532750 #6877]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533439500 W, [2014-01-17T17:16:18.532780 #6877]  WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533442500 I, [2014-01-17T17:16:18.532808 #6877]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533444500 W, [2014-01-17T17:16:18.532836 #6877]  WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533445500 I, [2014-01-17T17:16:18.532864 #6877]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533448500 W, [2014-01-17T17:16:18.532892 #6877]  WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533450500 I, [2014-01-17T17:16:18.532919 #6877]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533451500 W, [2014-01-17T17:16:18.532946 #6877]  WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533458500 I, [2014-01-17T17:16:18.532974 #6877]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533459500 W, [2014-01-17T17:16:18.533003 #6877]  WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533461500 I, [2014-01-17T17:16:18.533031 #6877]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533464500 W, [2014-01-17T17:16:18.533059 #6877]  WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533465500 I, [2014-01-17T17:16:18.533087 #6877]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533467500 W, [2014-01-17T17:16:18.533119 #6877]  WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533470500 I, [2014-01-17T17:16:18.533148 #6877]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533471500 W, [2014-01-17T17:16:18.533176 #6877]  WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533473500 I, [2014-01-17T17:16:18.533204 #6877]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533481500 W, [2014-01-17T17:16:18.533233 #6877]  WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533482500 I, [2014-01-17T17:16:18.533261 #6877]  INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533515500 /export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zookeeper-1.4.7/lib/zookeeper/continuation.rb:117:in `block in value': response for meth: :get_children, args: [0, \"/nerve/services/staging/klima-server/default\", nil, #<Zookeeper::Callbacks::WatcherCallback:0x00000002732038 @completed=false, @proc=#<Proc:0x00000002731cc8@/export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zookeeper-1.4.7/lib/zookeeper/callbacks.rb:24>>], not received within 30 seconds (Zookeeper::Exceptions::ContinuationTimeoutError)\n2014-01-17 17:16:18.533608500   from /export/disk0/wb/bin/ruby-env/clemens/lib/ruby/1.9.1/monitor.rb:211:in`mon_synchronize'\n2014-01-17 17:16:18.533631500   from /export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zookeeper-1.4.7/lib/zookeeper/continuation.rb:107:in `value'\n2014-01-17 17:16:18.533649500   from /export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zookeeper-1.4.7/ext/c_zookeeper.rb:224:in`submit_and_block'\n2014-01-17 17:16:18.533666500   from /export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zookeeper-1.4.7/ext/c_zookeeper.rb:40:in `get_children'\n2014-01-17 17:16:18.533683500   from /export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zookeeper-1.4.7/lib/zookeeper/client_methods.rb:69:in`get_children'\n2014-01-17 17:16:18.533699500   from /export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zk-1.9.2/lib/zk/client/base.rb:1055:in `call_and_check_rc'\n2014-01-17 17:16:18.533716500   from /export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zk-1.9.2/lib/zk/client/threaded.rb:584:in`call_and_check_rc'\n2014-01-17 17:16:18.533733500   from /export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zk-1.9.2/lib/zk/client/base.rb:717:in `block in children'\n2014-01-17 17:16:18.533750500   from /export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zk-1.9.2/lib/zk/event_handler.rb:296:in`block in setup_watcher!'\n2014-01-17 17:16:18.533766500   from /export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zk-1.9.2/lib/zk/event_handler.rb:314:in `block in synchronize'\n2014-01-17 17:16:18.533783500   from /export/disk0/wb/bin/ruby-env/clemens/lib/ruby/1.9.1/monitor.rb:211:in`mon_synchronize'\n2014-01-17 17:16:18.533799500   from /export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zk-1.9.2/lib/zk/event_handler.rb:314:in `synchronize'\n2014-01-17 17:16:18.533815500   from /export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zk-1.9.2/lib/zk/event_handler.rb:283:in`setup_watcher!'\n2014-01-17 17:16:18.533832500   from /export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zk-1.9.2/lib/zk/client/base.rb:1100:in `setup_watcher!'\n2014-01-17 17:16:18.533848500   from /export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zk-1.9.2/lib/zk/client/base.rb:716:in`children'\n2014-01-17 17:16:18.533865500   from /export/disk0/wb/bin/synapse/lib/synapse/service_watcher/zookeeper.rb:58:in `discover'\n2014-01-17 17:16:18.533881500   from /export/disk0/wb/bin/synapse/lib/synapse/service_watcher/zookeeper.rb:105:in`block in watcher_callback'\n2014-01-17 17:16:18.533898500   from /export/disk0/wb/bin/synapse/lib/synapse/service_watcher/zookeeper.rb:17:in `call'\n2014-01-17 17:16:18.533914500   from /export/disk0/wb/bin/synapse/lib/synapse/service_watcher/zookeeper.rb:17:in`start'\n2014-01-17 17:16:18.533930500   from /export/disk0/wb/bin/synapse/lib/synapse.rb:33:in `block in run'\n2014-01-17 17:16:18.533947500   from /export/disk0/wb/bin/synapse/lib/synapse.rb:33:in`map'\n2014-01-17 17:16:18.533963500   from /export/disk0/wb/bin/synapse/lib/synapse.rb:33:in `run'\n2014-01-17 17:16:18.533979500   from bin/synapse:60:in`<main>'\n2014-01-17 17:16:18.880718500 fatal: Not a git repository (or any of the parent directories): .git\n2014-01-17 17:16:19.203039500 fatal: Not a git repository (or any of the parent directories): .git\n\nObviously it's not great if a ZK server times out, but should that really be a fatal error for synapse?  We're passing in multiple ZK servers, and a single timeout in one watcher should, it seems to me, be cause at worst for restarting that watcher and/or falling through to the next ZK server.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/32626497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/32957845", "body": "To re-hoist my comment on #34 that kicked off this one:\n\n2014-01-17 17:15:48.525411500 I, [2014-01-17T17:15:48.525289 #6877] INFO -- Synapse::ZookeeperWatcher: synapse: discovering backends for service klima-server\n2014-01-17 17:16:18.529763500 E, [2014-01-17T17:16:18.529633 #6877] ERROR -- Synapse::Synapse: synapse: encountered unexpected exception #>], not received within 30 seconds> in main thread\n2014-01-17 17:16:18.529873500 W, [2014-01-17T17:16:18.529827 #6877] WARN -- Synapse::Synapse: synapse: exiting; sending stop signal to all watchers\n2014-01-17 17:16:18.529951500 W, [2014-01-17T17:16:18.529907 #6877] WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533320500 I, [2014-01-17T17:16:18.531645 #6877] INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533323500 W, [2014-01-17T17:16:18.531713 #6877] WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533324500 I, [2014-01-17T17:16:18.531747 #6877] INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533325500 W, [2014-01-17T17:16:18.531779 #6877] WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533351500 I, [2014-01-17T17:16:18.531810 #6877] INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533353500 W, [2014-01-17T17:16:18.531848 #6877] WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533354500 I, [2014-01-17T17:16:18.531879 #6877] INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533358500 W, [2014-01-17T17:16:18.531909 #6877] WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533359500 I, [2014-01-17T17:16:18.531940 #6877] INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533367500 W, [2014-01-17T17:16:18.531969 #6877] WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533368500 I, [2014-01-17T17:16:18.531998 #6877] INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533370500 W, [2014-01-17T17:16:18.532030 #6877] WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533373500 I, [2014-01-17T17:16:18.532061 #6877] INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533374500 W, [2014-01-17T17:16:18.532091 #6877] WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533376500 I, [2014-01-17T17:16:18.532121 #6877] INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533379500 W, [2014-01-17T17:16:18.532150 #6877] WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533380500 I, [2014-01-17T17:16:18.532179 #6877] INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533382500 W, [2014-01-17T17:16:18.532208 #6877] WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533389500 I, [2014-01-17T17:16:18.532235 #6877] INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533390500 W, [2014-01-17T17:16:18.532265 #6877] WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533392500 I, [2014-01-17T17:16:18.532293 #6877] INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533395500 W, [2014-01-17T17:16:18.532325 #6877] WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533396500 I, [2014-01-17T17:16:18.532355 #6877] INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533398500 W, [2014-01-17T17:16:18.532386 #6877] WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533401500 I, [2014-01-17T17:16:18.532414 #6877] INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533402500 W, [2014-01-17T17:16:18.532443 #6877] WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533404500 I, [2014-01-17T17:16:18.532470 #6877] INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533411500 W, [2014-01-17T17:16:18.532498 #6877] WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533413500 I, [2014-01-17T17:16:18.532526 #6877] INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533414500 W, [2014-01-17T17:16:18.532555 #6877] WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533417500 I, [2014-01-17T17:16:18.532582 #6877] INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533419500 W, [2014-01-17T17:16:18.532610 #6877] WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533420500 I, [2014-01-17T17:16:18.532637 #6877] INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533428500 W, [2014-01-17T17:16:18.532665 #6877] WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533429500 I, [2014-01-17T17:16:18.532693 #6877] INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533436500 W, [2014-01-17T17:16:18.532722 #6877] WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533437500 I, [2014-01-17T17:16:18.532750 #6877] INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533439500 W, [2014-01-17T17:16:18.532780 #6877] WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533442500 I, [2014-01-17T17:16:18.532808 #6877] INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533444500 W, [2014-01-17T17:16:18.532836 #6877] WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533445500 I, [2014-01-17T17:16:18.532864 #6877] INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533448500 W, [2014-01-17T17:16:18.532892 #6877] WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533450500 I, [2014-01-17T17:16:18.532919 #6877] INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533451500 W, [2014-01-17T17:16:18.532946 #6877] WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533458500 I, [2014-01-17T17:16:18.532974 #6877] INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533459500 W, [2014-01-17T17:16:18.533003 #6877] WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533461500 I, [2014-01-17T17:16:18.533031 #6877] INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533464500 W, [2014-01-17T17:16:18.533059 #6877] WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533465500 I, [2014-01-17T17:16:18.533087 #6877] INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533467500 W, [2014-01-17T17:16:18.533119 #6877] WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533470500 I, [2014-01-17T17:16:18.533148 #6877] INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533471500 W, [2014-01-17T17:16:18.533176 #6877] WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533473500 I, [2014-01-17T17:16:18.533204 #6877] INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533481500 W, [2014-01-17T17:16:18.533233 #6877] WARN -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher exiting\n2014-01-17 17:16:18.533482500 I, [2014-01-17T17:16:18.533261 #6877] INFO -- Synapse::ZookeeperWatcher: synapse: zookeeper watcher cleaned up successfully\n2014-01-17 17:16:18.533515500 /export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zookeeper-1.4.7/lib/zookeeper/continuation.rb:117:in block in value': response for meth: :get_children, args: [0, \"/nerve/services/staging/klima-server/default\", nil, #<Zookeeper::Callbacks::WatcherCallback:0x00000002732038 @completed=false, @proc=#<Proc:0x00000002731cc8@/export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zookeeper-1.4.7/lib/zookeeper/callbacks.rb:24>>], not received within 30 seconds (Zookeeper::Exceptions::ContinuationTimeoutError)\n2014-01-17 17:16:18.533608500 from /export/disk0/wb/bin/ruby-env/clemens/lib/ruby/1.9.1/monitor.rb:211:inmon_synchronize'\n2014-01-17 17:16:18.533631500 from /export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zookeeper-1.4.7/lib/zookeeper/continuation.rb:107:in value'\n2014-01-17 17:16:18.533649500 from /export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zookeeper-1.4.7/ext/c_zookeeper.rb:224:insubmit_and_block'\n2014-01-17 17:16:18.533666500 from /export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zookeeper-1.4.7/ext/c_zookeeper.rb:40:in get_children'\n2014-01-17 17:16:18.533683500 from /export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zookeeper-1.4.7/lib/zookeeper/client_methods.rb:69:inget_children'\n2014-01-17 17:16:18.533699500 from /export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zk-1.9.2/lib/zk/client/base.rb:1055:in call_and_check_rc'\n2014-01-17 17:16:18.533716500 from /export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zk-1.9.2/lib/zk/client/threaded.rb:584:incall_and_check_rc'\n2014-01-17 17:16:18.533733500 from /export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zk-1.9.2/lib/zk/client/base.rb:717:in block in children'\n2014-01-17 17:16:18.533750500 from /export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zk-1.9.2/lib/zk/event_handler.rb:296:inblock in setup_watcher!'\n2014-01-17 17:16:18.533766500 from /export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zk-1.9.2/lib/zk/event_handler.rb:314:in block in synchronize'\n2014-01-17 17:16:18.533783500 from /export/disk0/wb/bin/ruby-env/clemens/lib/ruby/1.9.1/monitor.rb:211:inmon_synchronize'\n2014-01-17 17:16:18.533799500 from /export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zk-1.9.2/lib/zk/event_handler.rb:314:in synchronize'\n2014-01-17 17:16:18.533815500 from /export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zk-1.9.2/lib/zk/event_handler.rb:283:insetup_watcher!'\n2014-01-17 17:16:18.533832500 from /export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zk-1.9.2/lib/zk/client/base.rb:1100:in setup_watcher!'\n2014-01-17 17:16:18.533848500 from /export/disk0/wb/bin/synapse/vendor/bundle/ruby/1.9.1/gems/zk-1.9.2/lib/zk/client/base.rb:716:inchildren'\n2014-01-17 17:16:18.533865500 from /export/disk0/wb/bin/synapse/lib/synapse/service_watcher/zookeeper.rb:58:in discover'\n2014-01-17 17:16:18.533881500 from /export/disk0/wb/bin/synapse/lib/synapse/service_watcher/zookeeper.rb:105:inblock in watcher_callback'\n2014-01-17 17:16:18.533898500 from /export/disk0/wb/bin/synapse/lib/synapse/service_watcher/zookeeper.rb:17:in call'\n2014-01-17 17:16:18.533914500 from /export/disk0/wb/bin/synapse/lib/synapse/service_watcher/zookeeper.rb:17:instart'\n2014-01-17 17:16:18.533930500 from /export/disk0/wb/bin/synapse/lib/synapse.rb:33:in block in run'\n2014-01-17 17:16:18.533947500 from /export/disk0/wb/bin/synapse/lib/synapse.rb:33:inmap'\n2014-01-17 17:16:18.533963500 from /export/disk0/wb/bin/synapse/lib/synapse.rb:33:in run'\n2014-01-17 17:16:18.533979500 from bin/synapse:60:in'\n2014-01-17 17:16:18.880718500 fatal: Not a git repository (or any of the parent directories): .git\n2014-01-17 17:16:19.203039500 fatal: Not a git repository (or any of the parent directories): .git\n\nObviously it's not great if a ZK server times out, but should that really be a fatal error for synapse? We're passing in multiple ZK servers, and a single timeout in one watcher should, it seems to me, be cause at worst for restarting that watcher and/or falling through to the next ZK server.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/32957845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/32958539", "body": "There are actually two issues to my eye here:\n1. Synapse should simply restart the watcher (possibly with some decaying backoff algorithm) rather than kill itself, although at least ending the whole process is definitive. :)\n2. Despite being passed in a list of ZK servers, the ZK watcher is extremely sensitive to failures on a single server. I haven't dug into this enough to understand if this is an artifact of the zookeeper gem or how we are using it.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/32958539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/33064520", "body": "Thoughts? :)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/33064520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/34729261", "body": "Okay, finally coming back to this: new version of the commit runs the shared frontend sections through haproxy config validation; adds documentation to readme.md.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/34729261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/35020231", "body": "all addressed; new patchset up\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/35020231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/37200506", "body": "Poke? :)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/37200506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/38501179", "body": "Poke? :)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/38501179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/38501895", "body": "Woo!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/38501895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/comments/4509510", "body": "is there any advantage here over line.strip.start_with?(fieldname) ?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/4509510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/comments/4509623", "body": "log a warning if we encounter a line that doesn't seem to belong?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/4509623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/comments/4509642", "body": "starts to feel like a DRY violation.\n\ndef check_directives(array_of_lines, directive_section)\n  array_of_lines.each do |line|\n    section_fields[directive_section].each do |fieldname|\n...etc...\nend\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/4509642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/comments/4509660", "body": "Appears to do what it says on the tin.  But:\n- The match section feels a bit fragile: is haproxy's config parser whitespace-sensitive?  case-sensitive?\n- Iterating over the whole long list of valid config directives each time we parse a line feels janky.  Maybe tokenize the line and drill down over an array of arrays?  e.g.:\n\nlisten_directives = {\n  'acl' => nil,\n  'option' => {\n    'httpchk' => nil,\n    'httplog' => nil,\n  }\n}\n\n...then walk down the list of tokens until you either hit a nil value in the array (hooray, left-hand match, everything else is an argument) or an unknown word (boo, return error)?  (Possibly I'm overthinking this.)\n\nAlso, this puts the onus on you, the maintainer, to keep the list of allowed service directives for each section up-to-date with haproxy itself.  Previously we'd just handed the user a sufficient amount of rope and assumed they'd read the docs.  Your call as to which approach you think is best, but probably there should be some sort of --no-really-trust-me flag to turn off the validation in case someone wants to play with some hypothetical haproxy 1.6?  And maybe it would just make more sense to pass the whole thing off to 'haproxy -c testconfig.cfg' and kick up an error if haproxy complains?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/4509660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/comments/5335378", "body": "Okay, I'm willing to be stupid in public: I can't find this method in the 1.8.7, 1.9.3, 2.0.0 or 2.1.0 versions of the stdlib yaml library, and this raises an undefined method error.\n\nbin/synapse:43:in `parseconfig': undefined method`to_ruby' for #Hash:0x00000001cdb760 (NoMethodError)\n        from bin/synapse:46:in `<main>'\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/5335378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/comments/5344076", "body": "D'oh.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/5344076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7352301", "body": "python brain damage ahoy. :)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7352301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7352336", "body": "Reasonable.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7352336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7478824", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7478824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7478960", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7478960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/8771934", "body": "Willdo!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/8771934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/8908066", "body": "Done!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/8908066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/9721991", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/9721991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/9722384", "body": "pass; see below. :)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/9722384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/9722528", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/9722528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/9722600", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/9722600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/9725127", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/9725127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "cgarvis": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/28335651", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/28335651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/29009973", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/29009973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/33148094", "body": "i find json for configuration to be horrible when humans have to edit it.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/33148094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jamessharp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/28430109", "body": "P.S. I also tweaked the debug logging to pretty print the haproxy config\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/28430109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/28466822", "body": "Ah OK. What's the rationale behind having it _only_ for other services on the same machine? \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/28466822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/28467497", "body": "Interesting. I hadn't seen the nerve stuff. For now I've worked around the problem with nerve by modifying the nerve config and restarting every time I deploy a service. But its not ideal.\n\nMy thought process for synapse was\n- You need some way of discovering when a service has been added or removed\n- You need some way of getting the config for any new, unknown services\n- You don't really want anything else - it should just happen magically\n\nI then decided to abstract away the problem of how to do that (copying from the service watchers), and allow people to use whatever they want. The zookeeper discoverer works well with the current nerve/synapse zookeeper set up. The S3 idea I'm not completely happy with but it works.\n\nI'll take a look at the nerve stuff, but as you say, nerve and synapse should behave the same\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/28467497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/28501101", "body": "makes a lot of sense - thanks\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/28501101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ernoaapa": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/31199172", "body": "I faced this problem also. In my case I played Synapse with Docker. \n\nSynapse (and Nerve) run in container. And my service is running in own container. Thats why I needed Synapse to listen network what is build around these containers not localhost. \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/31199172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/31611229", "body": "Ok, in that case it make sense. That's something what I didn't know.\n\nThanks for reply!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/31611229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bketelsen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/32301573", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/32301573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "SEJeff": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/33307157", "body": "https://github.com/ranjib/etcd-ruby supports the v2 etcd protocol. I too would be interested in this.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/33307157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/52966504", "body": "@bobtfish mind rebasing this to merge cleanly with master?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/52966504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/73313449", "body": "Well this has merge conflicts, so at a minimum needs to be rebased before it is merged.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/73313449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bakins": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/34121499", "body": "You want that conversion in this PR?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/34121499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/41344237", "body": "Just a ping on this. Happy to refactor, etc, to help it get merged.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/41344237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "arohter": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/34611295", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/34611295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "coderlol": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/38373479", "body": "Any chance we can get a watcher for docker hosts which in turn will feed the actual docker container watcher?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/38373479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mirakui": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/38769484", "body": "cool :sparkles: \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/38769484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "patrickviet": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/39432383", "body": "@ryotarai there is a bug here if you aren't explicitly using inotify with the listen gem (and even if you do, it might overflow - I once implemented a filesystem mirror with inotify and in case of very many file changes it would miss some). Here is how it goes:\n- there is a netsplit, lots of servers leave\n- there is a rejoin, they all come back\n\nThis means that you might have the file be created by serf at the beginning of the second with 10 servers, and then at the end of the second with 11 servers (for example). If you are polling with stat(2) (default behavior) and not using inotify, then 'listen' will only see one change.\n\nThis is how I solved it:\nhttps://github.com/patrickviet/synapse/blob/serf/lib/synapse/service_watcher/serf.rb#L38\n\nPatrick\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/39432383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "wmoss": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/39481912", "body": "I don't understand Zookeeper well enough to be sure, but it seems like it might be possible to get into a tight look trying to connect if we and fail to successfully setup the watcher.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/39481912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/39484457", "body": "Okay, makes sense.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/39484457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/39486768", "body": "No further question, your honor.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/39486768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/44477378", "body": "@igor47 we can also deploy to part of the DI cluster for a while if you want to let it bake for a bit before going to the whole cluster with it. Whatever you prefer.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/44477378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/44590468", "body": "This seems reasonable to me. :+1: \n\nIf the failure mode is for the process to restart it seems like having some monitoring around how often synapse is restarting would be good. If that jumps up, we know we've got a problem. Also, does upstart restart processes immediately? Seems like we could hammer zk in those failure modes unless it backs off somehow.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/44590468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/comments/6493187", "body": "Do we want to add this if it evaluated to `false` but is not `nil`?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/6493187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/comments/6493318", "body": "What was the original problem this was trying to solve?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/6493318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/11263203", "body": "Are we sure `@watcher` is defined? I don't see it being created in `initialize` or anywhere else that would guarantee it's existence.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/11263203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/11263596", "body": "I think that will still throw a `NameError` if `@watcher` is not defined yet. I think you might need to do:\n\n``` ruby\ndefined?(@watcher) && !@watcher.nil?\n```\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/11263596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/11263633", "body": "Or just set `@watcher` to `nil` in `BaseWatcher::initialize` \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/11263633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "cromulus": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/40137752", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/40137752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/40137780", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/40137780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bploetz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/45899213", "body": "That's not the problem. The problem is, as of Ruby 1.9.3, Syck was removed as the default YAML parser, and replaced with Psych (see https://bugs.ruby-lang.org/issues/2340). Psych does not have a class `ParseError`, which is why you get this error. Nerve has the same exact problem.\n\nhttps://github.com/airbnb/synapse/blob/master/bin/synapse#L40\nhttps://github.com/airbnb/nerve/blob/master/bin/nerve#L48\n\nSo in a nutshell, Synapse and Nerve simply don't work in Ruby 1.9.3 and above due to this bug. I'm working on PRs to make these scripts work across all ruby versions, and will send shortly....\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/45899213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/45909582", "body": "Ah, looking closer, it looks like this was \"fixed\" in synapse in dea5662240b3a0fd077de75d484cacc63b50b82f  but not fixed in nerve. Although this is now introducing the opposite problem, where this will now only work in Ruby 1.9.3+, and not in 1.9.2 and below. If that's what the library wants to support that's fine, but it should be called out in the README.\n\nAnyways, I will send a PR for nerve which introduces the same change there.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/45909582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dcerri": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/46592697", "body": ":thumbsup: ship it\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/46592697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "daveaugustine": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/46595477", "body": "Do you need an `insert` after the cookie SRV statement? Is it in the `server_options`? Just parroting what I briefly saw while googling / reading the doc you linked.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/46595477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "ChristianBusch": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/48799883", "body": "I am interested in this feature as well.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/48799883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "vulpine": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/49056432", "body": "@bobtfish is correct -- we'd like to be able to do something like\n\n```\nfrontend www\n    bind 1.2.3.4:80\n    use backend www_backend_ro if ...\n    use backend www_backend_rw if ...\n\nbackend www_backend_ro \n\nbackend www_backend_rw\n\nfrontend mobile\n...\n```\n\nwithout needing to have one frontend block per backend block.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/49056432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/49062356", "body": "I've added some documentation in the most recent commit.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/49062356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35666182", "body": "Minor typo here.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35666182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "Dareen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/49541060", "body": "@igor47 this works great in a happy scenario, but in edge cases like Synapse unable to connect to ZK (which delegates the health check to haproxy by default), and then the master node fails, this will cause downtime.\nIn https://github.com/airbnb/synapse/pull/29 I added the \"backup\" haproxy option to all the slave nodes while generating the backend stanza \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/49541060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/49541080", "body": "This PR addresses the backup option https://github.com/airbnb/synapse/pull/83\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/49541080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "smarth-madan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/49955464", "body": "Actually the problem is not with the Zookeeper service but the host where we are running Synapse. We have a config file with more than 800 services. When we tried to use synapse, we say an error \"too many file descriptors open\". This fix actually re-uses the global zookeeper connection and keeps registering a new watch with the same. Now we don't see any issue with the file descriptors after using the fix. \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/49955464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "calebbrown": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/52864417", "body": "+1\n\nI see PR #58 implements this.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/52864417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/16515162", "body": "0.2.4 was just released and is available in Ruby Gems - so this could probably be cleaned up.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/16515162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "tcolgate": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/58863037", "body": "Is this likely to merged soon? The nerve part already seems to be merged? etcd does seem like a better choice (nicer cli tools,and less of a total collapse if quorum is lost).\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/58863037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/63634099", "body": "For what it is worth, I've done some additional work on the etcd watcher,\nto include the failover host support, and add some retry logic. I've not\ntidied it up enough for a PR yet but code is on master here:\n\nhttps://github.com/we7/synapse\n\nOn 19 November 2014 11:59, Tomas Doran notifications@github.com wrote:\n\n> > On Nov 18, 2014, at 8:54 AM, Zane notifications@github.com wrote:\n> > \n> > Greetings -\n> > \n> > I've implemented this watcher, but I am running into an error:\n> > \n> > E, [2014-11-18T08:51:02.005658 #7449] ERROR -- Synapse::EtcdWatcher:\n> > synapse: invalid data in etcd node # at /service: 757: unexpected token at\n> > 'running' DATA running\n> > \n> > For all entries in my etcd instance I get a return from synapse noted\n> > above.\n> > \n> > Can you also show us what\u2019s in etcd? (The key layout, and JSON contents)\n> \n> I\u2019m guessed that there is some somehow bad data that\u2019s crashing things -\n> if you can show me what it is, I\u2019ll fix and add a test :)\n> \n> Cheers\n> Tom\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/airbnb/synapse/pull/58#issuecomment-63629789.\n\n## \n\n## Tristan Colgate-McFarlane\n\n  \"You can get all your daily vitamins from 52 pints of guiness, and a\nglass of milk\"\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/63634099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/75051897", "body": "I've dropped my version of this PR. We've migrated to consul.\n\nOn 19 February 2015 at 08:35, Piotr Gasiorowski notifications@github.com\nwrote:\n\n> Any update on this?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/airbnb/synapse/pull/58#issuecomment-75014877.\n\n## \n\n## Tristan Colgate-McFarlane\n\n  \"You can get all your daily vitamins from 52 pints of guiness, and a\nglass of milk\"\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/75051897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dkerwin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/59334767", "body": ":+1: +1\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/59334767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mrud": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/60876510", "body": "Any update on this? \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/60876510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bobrik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/61629492", "body": "Hey!\n\nI'm trying to use marathon and mesos to build SOA and made a docker container that provides automatic service discovery just like synapse does. It is available as a [docker container](https://hub.docker.com/u/bobrik/marathon-tcp-haproxy/) and also does registrations for new services.\n\nAnd then I found [post from airbnb](http://nerds.airbnb.com/smartstack-service-discovery-cloud/) that described almost exactly what I did. I was like \"hey! let's throw home-grown stuff and use that thing from airbnb! they surely know how to deal with haproxy better than me anyway!\".\n\nLooks like I was wrong, because synapse can only provide service discovery for apps that are already described in config. After a little thinking it could be extended to what I need by rewriting synapse config whenever new app appears and restarting synapse (but now haproxy, obviously).\n\nWas there any progress in \"dynamism\" direction? Is it worth it to apply synapse to my use-case?\n\nSorry for bumping a year old PR though.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/61629492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/61971128", "body": "@brndnmtthws what If I generate synapse config and restart it (maybe with haproxy too) when app list changes? Can this solution work without service interruption?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/61971128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "acmcelwee": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/61757065", "body": "Here's another series of commits that I needed to get this working w/ marathon 0.7.3 https://github.com/acmcelwee/synapse/commits/marathon. Unfortunately, those are also blocked until 0.3.0 of the marathon_client is published to rubygems.org, [issue #14 over there](https://github.com/mesosphere/marathon_client/issues/14). For now, I've hacked in the updated marathon_client in my env, and that, plus the commits referenced above got me all set w/ this new watcher.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/61757065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gebrits": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/62306001", "body": "any progress on this?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/62306001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/62466659", "body": "@bobtfish Cheers. Hope this will be merged soon. \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/62466659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sepulworld": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/63853922", "body": "Thanks Tom. Yes, I wasn't using Nerve to populate host information in Etcd so the key values didn't match up with what the Etcd watcher on synapse was looking for. I am trying to switch over to using Nerve but etcd support doesn't seem to be a part of the current Gem version and doing a gem install_specific against the github repo doesn't work either. Do we know when the etcd functionality for Nerve will be stable?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/63853922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/64095865", "body": "Hi Tom,\n\nHere is my etcd key layout:\n\ncurl http://192.168.183.171:4001/v2/keys/service\n\n{\"action\":\"get\",\"node\":{\"key\":\"/service\",\"dir\":true,\"nodes\":[{\"key\":\"/service/192.168.186.158:49234\",\"value\":\"running\",\"expiration\":\"2014-11-22T21:17:37.738052203Z\",\"ttl\":18,\"modifiedIndex\":73811,\"createdIndex\":73811},{\"key\":\"/service/192.168.186.158:49235\",\"value\":\"running\",\"expiration\":\"2014-11-22T21:17:38.321944617Z\",\"ttl\":18,\"modifiedIndex\":73812,\"createdIndex\":73812},{\"key\":\"/service/192.168.186.158:49231\",\"value\":\"running\",\"expiration\":\"2014-11-22T21:17:36.733670014Z\",\"ttl\":17,\"modifiedIndex\":73809,\"createdIndex\":73809},{\"key\":\"/service/192.168.186.158:49233\",\"value\":\"running\",\"expiration\":\"2014-11-22T21:17:36.878094294Z\",\"ttl\":17,\"modifiedIndex\":73810,\"createdIndex\":73810},{\"key\":\"/service/192.168.186.158:49232\",\"value\":\"running\",\"expiration\":\"2014-11-22T21:17:36.517818371Z\",\"ttl\":17,\"modifiedIndex\":73808,\"createdIndex\":73808}],\"modifiedIndex\":3\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/64095865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dylanmei": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/66222889", "body": "Is setting it port 80 a workaround for you?\n\n```\nservices:\n  mybackend:\n    discovery:\n      method: \"ec2tag\"\n      tag_name: \"...\"\n      tag_value: \"...\"\n    haproxy:\n      server_options: \"check\"\n      server_port_override: \"80\"\n```\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/66222889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/111225105", "body": "Great, then we just need to stop demanding that they are defined. Does that sound right?\nhttps://github.com/airbnb/synapse/blob/master/lib/synapse/service_watcher/ec2tag.rb#L49-L53\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/111225105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "konsti": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/67841568", "body": "@igor47 Any change this is merged with master?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/67841568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jhspaybar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/72488983", "body": "Any other details needed for this to be eligible for a merge?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/72488983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/74967334", "body": "Sorry to keep pinging this, is there a process I should be following to get this merged?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/74967334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Zolmeister": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/72983874", "body": "status?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/72983874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/73406871", "body": "Forked, let me know if you still want the Dockerfile though\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/73406871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "WooDzu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/75014877", "body": "Any update on this?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/75014877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "apennebaker-ni": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/96801258", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/96801258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "desmondmorris": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/97282046", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/97282046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "chrono": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/110495152", "body": "just had to dig down into source to discover what #112 already addresses \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/110495152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "liammac": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/110956473", "body": "Can someone please merge this pull request? Having to expose the secret is non optimal\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/110956473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ellardli": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/111864103", "body": "Awesome. Thanks @jolynch. That got me past this!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/111864103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "beedub": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/116362122", "body": "@jhspaybar fyi the indentation in many of the files is inconsistent\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/116362122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Hades32": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/118668418", "body": "https://github.com/GoToAssist/synapse/blob/master/synapse/lib/synapse/service_watcher/etcd.rb seems to be the most mature fork AFAICS\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/118668418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "StephanErb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/129961173", "body": "Anything missing to get this one merged?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/129961173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41996555", "body": "Looking at Aurora, I am not sure if the status is ever toggled. Aurora seems to simply remove the znode when the registered server disconnects. I'd say we leave it out for now.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41996555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41997824", "body": "Serversets allow you to register multiple ports for your service. For example, you can say that your service has an `http`, an `https`and a `admin` port. This option can be used to specify which port shall actually be used by synapse.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/41997824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "hankya": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/135956565", "body": "is this fixed? anyone?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/135956565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/136281261", "body": "thanks very much for the response, it looks like this issue is a duplication of #134,  the ruby version i am using is ruby 2.1.2p95 (2014-05-08) [x86_64-linux-gnu], synapse hung when unsubscribing from zookeeper, is this a known issue that synapse doesn't work with this ruby version?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/136281261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "drewcsillag": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/136513588", "body": "Can confirm that synapse works with ruby 1.9.3 and doesn't with 2.x\n\nPossibly relevant datapoint: if I set DEBUG to true on 2.x.x (to see _all_ the log messages), I don't get the \"setting watch at....\" log message until after the first new nerve is started.....\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/136513588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "matschaffer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/comments/4597121", "body": "Just to make sure I'm reading this right; Does HAProxy bounce whenever you add a new service? Or even when a new node is added for an existing service?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/4597121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/comments/4603946", "body": "So am I right in assuming that (for example) auto scaling a service behind\nhaproxy would require restarts?\n\nOn Thursday, November 14, 2013, Igor Serebryany wrote:\n\n> i should update the comments and get my terminology straight. synapse\n> watches services, and services have backends. a backend is identified to\n> haproxy via a server line, but i should stop using the word serverotherwise.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/airbnb/synapse/commit/9127f69e79cbe0c4f797188bf42d432eae92387d#commitcomment-4602538\n> .\n## \n\n-Mat\n\nabout.me/matschaffer\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/4603946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/comments/4609207", "body": "That's encouraging. Is there any period between processes where you'd have\nnew requests or connections get rejected?\n\nOn Thursday, November 14, 2013, Igor Serebryany wrote:\n\n> yes. but haproxy restarts are not as scary as they sound. existing\n> connections are unaffected -- the previous haproxy process is left running\n> until they close.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/airbnb/synapse/commit/9127f69e79cbe0c4f797188bf42d432eae92387d#commitcomment-4605208\n> .\n## \n\n-Mat\n\nabout.me/matschaffer\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/4609207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/comments/4624060", "body": "Sweet! Well done then. Look forward to experimenting with this :)\n\n-Mat\n\nabout.me/matschaffer\n\nOn Fri, Nov 15, 2013 at 11:50 AM, Martin Rhoads notifications@github.comwrote:\n\n> no, this should not be the case\n> \n> On Thu, Nov 14, 2013 at 7:13 PM, Mat Schaffer notifications@github.comwrote:\n> \n> > That's encouraging. Is there any period between processes where you'd\n> > have\n> > new requests or connections get rejected?\n> > \n> > On Thursday, November 14, 2013, Igor Serebryany wrote:\n> > \n> > > yes. but haproxy restarts are not as scary as they sound. existing\n> > > connections are unaffected -- the previous haproxy process is left\n> > > running\n> > > until they close.\n> > > \n> > > \u2014\n> > > Reply to this email directly or view it on GitHub<\n> > \n> > https://github.com/airbnb/synapse/commit/9127f69e79cbe0c4f797188bf42d432eae92387d#commitcomment-4605208>\n> > \n> > > .\n> > ## \n> > \n> > -Mat\n> > \n> > about.me/matschaffer\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub<\n> > https://github.com/airbnb/synapse/commit/9127f69e79cbe0c4f797188bf42d432eae92387d#commitcomment-4609207>\n> > \n> > .\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/airbnb/synapse/commit/9127f69e79cbe0c4f797188bf42d432eae92387d#commitcomment-4616189\n> .\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/4624060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "asiragusa": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35401857", "body": "@schleyfox It doesn't really work nicely, it works as just hashing. \n\nIn order to work better with consistent hashing we may keep dead backends for longer.\n\nThis may be done by creating two keys in zk, one listing all the machines in the pool and the other telling if it's alive. The key listing all the machines may have an adjustable timeout and the default value should be low to work nicely everywhere.\n\nHowever in case the ordering is really important, we may also introduce sequential numbering of nodes and if an hole is detected in the middle we may fill it with a fake machine. This fake machine will be replaced once a new one joins the cluster.\n\nBtw I'm ok with making shuffling the default option, as long as this is a very specific use case.\n\nOT: take a look at https://github.com/dockerparis/DockStack, it makes really easy to use nerve/synapse as a Docker ambassador. \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/35401857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "benley": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/48336225", "body": "might be more appropriate to call this method \"serverset\", since it's actually the finagle serverset format that aurora happens to share.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/48336225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}}}}