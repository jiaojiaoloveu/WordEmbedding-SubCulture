{"_default": {"1": {"pcarrier": {"issues": [{"url": "https://api.github.com/repos/airbnb/plog/issues/96", "title": "plog.Stress: cannot send only 1 byte payloads", "body": "With min_size=1, max_size=1, size_increments=1,\n\n```\nException in thread \"main\" java.lang.RuntimeException: No sizes! Decrease plog.stress.size_increments\n```\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/96/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/95", "title": "Listeners: log which port is listened on", "body": "", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/95/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/94", "title": "Allow for native transport under Linux", "body": "Netty offers a native transport.\nIt should soon allow for great perf improvements by using `recvmmsg`/`sendmmsg`.\nSee netty/netty#2719 for early support.\n\nSadly Plog currently hardcodes the transport to Nio. This should be configurable.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/94/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/93", "title": "Allow multiple `bind()`s", "body": "Netty allows us to bind multiple times, which is a very useful performance improvement for UDP sockets under Linux as it allows for multiple listeners.\n\nIn that case, it would be useful to allow `threads = 0` and skip the thread pool altogether in `UDPListener`, to avoid the dispatch overhead (including extra context switches).\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/93/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/92", "title": "Expose memory usage stats", "body": "See `ManagementFactory.getMemoryMXBean()`.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/92/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/91", "title": "Expose GC stats", "body": "It would be useful to expose minimal histograms of GC stats.\n\nSee `ManagementFactory.getGarbageCollectorMXBeans()`\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/91/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/90", "title": "Expose stats over JMX", "body": "Could be useful to companies relying on JMX for monitoring, eg via Jolokia.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/90/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/40", "title": "Write documentation for filters", "body": "As soon as that feature is ironed out and used in production, we should document them filters properly.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/40/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/31", "title": "Revamp TCP protocol", "body": "Proposal to be reviewed:\n- Use `\\0` as a line prefix for advanced protocol.\n- Advanced protocol supports commands, including stats.\n- Advanced protocol allows to specify tags, ask for acknowledgement(?).\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/31/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/airbnb/plog/commits/690445655729eaf8490468f1e4a20ba69da1b950", "message": "Merge pull request #88 from airbnb/pierre/defrag/no_synch\n\nDefragmenter: avoid synchronization"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/988f1b5385c9a53721816dd7278908ac078f654c", "message": "Defragmenter: avoid race condition"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/a3d2bb380c35fb9663eb069f90aabb61f8908de0", "message": "Defragmenter: isolate multi-fragment code\n\nEncourages HotSpot to JIT the \"common case\"."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/d33d2057d9da1f81cf9d47fe183c84256a062222", "message": "Defragmenter: avoid synchronization"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/1ba92ec38b43b1c3e1e65282cee5614084d157a3", "message": "Merge pull request #87 from airbnb/pierre/murmur3_stress_tests\n\nMurmur3: add semi-random stress tests"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/27e09f4030759b248b244720fad110657a1f5bf6", "message": "Murmur3: add semi-random stress tests"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/7c8086d6fea5d790a483f829a12daba07814f446", "message": "Merge pull request #85 from airbnb/pierre/plog/fix_encoding_issue\n\nMurmur3: fix support for bytes > 127"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/879fefad8335d0a9654d208b4e9d99f9733c4737", "message": "Murmur3: fix support for bytes > 127\n\nWe only supported bytes with MSB=0.\n\n    groovy:000> -10 as byte\n    ===> -10\n    groovy:000> -10 as byte & 0xff\n    ===> 246"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/3b32aeb6db90822fc581b783e24e257b258f0cd9", "message": "Merge pull request #83 from airbnb/pierre/server/port_hole_debug_logging\n\nPortHoleDetector: easier to debug"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/ce91e438dd7b5683082223da374c8300cb201fff", "message": "PortHoleDetector: easier to debug\n\nLooks like we're getting weird holes at startup.\n\nThis should help us investigate."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/6899a9815da7c9c6164be6ac405147c8ba9783b2", "message": "Merge pull request #82 from airbnb/pierre/single_name_per_pipeline_handler\n\nplog-server: ensure unique names in the pipeline"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/7abb43acba7ebd266a37646165e7befe195f5828", "message": "plog-server: ensure unique names in the pipeline\n\nOtherwise multiple instances of the same handler could have the name\nname, which breaks netty."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/34546543f3fcf86bad25c5bd45f4e54ec599653e", "message": "Merge pull request #79 from airbnb/pierre/style_cleanup_20140512\n\nStyle cleanup"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/43b09dd2f87d7d7d3648e06b0f53fbdf7ef83601", "message": "Merge pull request #81 from airbnb/pierre/remove_coveralls_support\n\nbuild.gradle: remove code coverage tooling"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/d176ba863b43448b7c791d80daa7699885cbf672", "message": "Braces everywhere\n\nLet's not goto fail.\n\nInline with the Google Java Style,\nhttps://google-styleguide.googlecode.com/svn/trunk/javaguide.html"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/e941f7585b711ee8ecede1563e455600732efc89", "message": "final most things & style cleanups"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/b0878a2477366f5e2cbe4b4e423fb1888d5fcdbe", "message": "build.gradle: remove code coverage tooling\n\nCurrently broken with subprojects, and I can't find a way to fix\nthem.\n\nWe can always try to reintroduce them later.\n\nThe plus side is that travis times take significantly shorter (roughly\nhalf the time) as instrumentation is gone."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/21b31cd55ee6d18630afdeedc42db07cbb6d171d", "message": "Merge pull request #78 from airbnb/pierre/guava_services\n\nplog-server: guava's service abstraction, graceful shutdowns"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/92cc9bdd4b382e1c64826785128381c8a7d8319f", "message": "plog-server: guava's service abstraction, graceful shutdowns\n\nUsed the opportunity to optimize and reorder imports.\n\nCloses #76."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/b436f104131ee98de8be9db1602ad373b6ac84d8", "message": "Merge pull request #77 from airbnb/pierre/kafka/cleanup_stats_reporting\n\nplog-kafka: clean up stats"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/e333cb9bffdc1365bad49090746211d24aad9829", "message": "plog-kafka: clean up stats\n\n- Don't include \"_rate\" for metrics with a count and multiple rates\n- Clearly identify 1, 5 and 15-min intervals using objects"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/1f9ae2375f7ebd0f8a1b514fde5c68f77f5f9015", "message": "Merge pull request #75 from airbnb/pierre/versions_without_v\n\nbuild.gradle: versions don't start with v"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/429f37d16e41e2fae669956d9e3f07514a3ecd74", "message": "build.gradle: versions don't start with v\n\nNot sure how I missed it for that long, but it appeared very clearly\nin bintray."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/7524f81972804fa04f7805ddb1837c6e8850a99b", "message": "README.md: add download button"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/9e29c8041d2af25d5378a006d9dd7d50dba6c7a9", "message": "fix sources artifact for jcenter inclusion\n\nSee https://twitter.com/bintray/status/465070649803694080"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/fb9f92e5ae52c298a3283bc3d68beca63f8a8254", "message": "Merge pull request #74 from airbnb/pierre/doc/build_upload\n\nREADME.md: document build/upload"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/72663e01cb4c0972e6f98bfbac28a049e3568955", "message": "README.md: document build/upload"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/2fdb761e4ec59656f3157be28f8b460a892eb5ae", "message": "gradle: build source jars"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/818c48469bf841e1c105dd9d3d4df94213817a2a", "message": "Merge pull request #73 from airbnb/pierre/defrag/fix_leak\n\nplog-server: major defragmenter logic rewrite"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/a9db157090dff4e1afb5e98b2ac2a28573f21ab9", "message": "plog-server: major defragmenter logic rewrite\n\nThe main logic was correct except for reference counting.\n\nThe new version is the result of a lot of IntelliJ inlining and\nmanual cleanups.\n\nStress-tested with paranoid hole detector, no exceptions or detected\nleaks after:\n- 40M msgs\n- 40K sockets\n- 50K msg/s\n- .1% self-induced packet loss\n- payloads between 100B and 1MB"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/8b8bf62c76465a6308b08bced2d0417c37da2f4b", "message": "Merge pull request #72 from airbnb/pierre/datadog/plog4_support\n\ndatadog: initial plog4 support work"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/93ab1e2eef96964afa4dd4f09fece388ab0d81c2", "message": "datadog: initial plog4 support work\n\n- The plugin is now easy to test with:\n\n        $ PYTHONPATH=~/.datadog-agent/agent ./plog.py\n\n- The logic is now in the order keys are returned by plog.\n- Our helper names follow the datadog naming convention.\n- The Kafka logic is gone as Kafka is merely a handler now.\n- Handlers are fully supported, with the following design:\n  - If the same handler appears multiple times in the pipeline,\n    we sum-merge stats from all instances.\n    Note that handler instances could return different names to\n    avoid this, if it ever really makes sense, as naming is dynamic.\n  - Nested dictionaries are supported by compiling paths in the form\n    'key1.key2.key3.'[...]\n  - As we walk the tree, as soon as we see a non-dictionary, we switch\n    to \"nested summing\", so [1,[2,{a:3,b:'c'}] = 1+2+3 = 6."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/0e92ef2bdbd35557f8ab13c7735e76a1f83faf08", "message": "Merge pull request #71 from airbnb/pierre/fix/defragmenter_warning\n\nDefragmenter: proper warnings on leakage"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/ff43f92fb07f7ed2349db6b4f6328831e54b5b29", "message": "Defragmenter: no null handling for cache removals\n\nSee https://github.com/airbnb/plog/pull/71#issuecomment-42583027 for the reasoning."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/191f95867bed13741b684726481c2b24082115d9", "message": "Defragmenter: proper warnings on leakage\n\nIt looks like we're safe based on stress tests, but we should still\nreport that condition correctly if it ever happens."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/c2d11c81f659940e764f679c1da0b9bd48e6c3e9", "message": "+ .mailmap"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/ecd4b7bd7001dcf987cb4101a1d98445c0b3496a", "message": "Merge pull request #70 from airbnb/pierre/stress/initial\n\nSimpler client, inline MurmurHash, add stress tester, convenient launchers"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/ffe2877cd5857d8b2911f74d5560c65a375ef623", "message": "plog-client: write header every time\n\nFrom the stress tester, turns out copying a reference isn't particularly efficient..."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/90e6c82a2edd9a6002a62357fa28e3a56e21cb4c", "message": "plog-common, with netty-friendly murmurhash3\n\nplog-common should include code that doesn't fit in the API\nor distribution, but benefits from being shared between many components.\n\nAs getting out of ByteBufs for checksumming turns out expensive,\nbut Guava doesn't expose any API allowing us to checksum Netty buffers,\nget started with a naive implementation (hopefully not too naive)."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/18f8db58aac42dd733043f0c71b69088039ca78d", "message": "plog-stress: dedicated handler, Eater\n\nplog is unhappy without handlers (the end of pipeline logs, which\noutputs the full message), and the console provider is surprising\nresource-consuming even when piping to `/dev/null`.\n\nThis stress eater helps experiments."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/7e7f8b988680f97401b83ccfbee25029df05ca15", "message": "First iteration of a stress tester\n\nDoesn't really use Netty, not super optimal,\nbut hopefully fast enough for *some* stress tests\n(50k+ packets/sec under OSX on my laptop)."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/1ba2d12e476394ca650caaa4160ae8a804ac28b0", "message": "plog-distro: convenient launchers\n\nAllows the shorter `java -cp plog.jar plog.Server`."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/10a0d4714586dae21fd23648d5fa635d6b1d633e", "message": "plog-server: specify \"server\" in banner"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/aa2a80b74e1a511952c9e11f718d9bd3fbcad38a", "message": "plog-server: remove unused UnknownHostException"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/01b5f2f2f3a7af65ae915c0b5969b28ab08bea3a", "message": "gradle: use project-report, netty-codec everywhere\n\nMakes things ever so simpler."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/7eaef821a041f58699e104739fb570ece87e2dbe", "message": ".gitignore: +application.conf"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/a17064c4c766af75220549c047ef4ff895f9e042", "message": "remove plog-distro/src/main/resources/application.conf\n\nShouldn't have been checked out in the first place, my bad."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/8acbc307bf9fd57300fbbc652c290d7e65124d2c", "message": "Merge pull request #68 from airbnb/pierre/gigantic\n\nRearchitecture, new components"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/425a97019834e36a3743680ffd0b2cf15be1e8f7", "message": "True beginning of a plog client, tests for tags :)"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/e48b4d415efbf96851943c82ec246bc3a5a2dd0c", "message": "Rearchitecture, new components\n\n- 4.0 including a lot of significant changes,\nit's time to build a solid load tester.\n\n- We'll also want a replayer to work on plog-upshot, added here.\n\n- As we like a single big distro, squeazing all modules in `plog-distro`.\n\n- As we'll want a unique namespace for the distribution and the config\nto be exposed everywhere, moving `reference.conf` to `plog-api`\n(which kinda makes sense conceptually) and moving server options\nto `plog.server`.\n\n- Removing `failedToSend()` from stats as it's been unused for a while now\nthat Kafka is \"just\" a handler."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/f0a800a18c4088ed45fe071cc778aeebfdd21c8e", "message": "Merge pull request #67 from airbnb/pierre/tag_tests\n\nadd tests for tags"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/874675da3f648cccb818f7f92ca7a9b3d71833eb", "message": "add tests for tags"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/c6401ca725f9e6ed1a8c505ced50e0b415ccb0da", "message": "Merge pull request #66 from airbnb/pierre/feature/52\n\nSupport for kt: tags in plog-kafka"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/885d8475422e73a4d1e60e896c528e65c4e1f406", "message": "KafkaProvider: warn on null default topic"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/4e0c9c6e54bd428ceaa075ffca126d928ac84096", "message": "Support for kt: tags in plog-kafka\n\nCloses #52."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/df36d4d53b61ba8aa91f35e2a05e3f37b936d50d", "message": "Merge pull request #64 from airbnb/pierre/actual_tags\n\nImplement tags, early tests"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/d9d9a6df11f888412ab69afc7fae8f39ec66a7a9", "message": "UDPListenerTest: fix Java 6 compatibility\n\nInet4Address.getLoopbackAddress() appeared with Java 7."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/d59d36c22b6a5b2bca97150ff533731604905855", "message": "fix all the tests"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/745b48c810aa694d3f3b4ae98da5e3f9caba2f51", "message": "StatisticsReporter: quiet on unknown version"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/2fad58e463a6e5684bf4694dccf441427ee13842", "message": "Add tags support\n\nWent with a simpler design than originally planned.\n\nWe might could if performance ever turns out insufficient,\nbut my thinking here is that if a pipeline needs higher perf,\nit'd be better to create a dedicated listener and avoid\nusing tags altogether.\n\nCloses #32."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/4e6fdd6569402f8e22f3587d0333e105757b6c53", "message": "UDPListener(Test): try fixing tests, always IPv4"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/2e3868dd00caf4717094fcf6006a306178ef370b", "message": ".travis.yml: properly run tests, print infos"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/928c207256718411eb276e5c6609b1ebecf42291", "message": "bump gradle, slf4j & netty"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/9a801def9f7639a20010fdbb6a063aebdd46ecad", "message": "Merge pull request #59 from airbnb/pierre/minor_readability\n\nFix mem leak, minor readability improvements"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/315f6e9d0f62d2e5d711224960c556fb275ecd0d", "message": "plog-server: move retention from ProtocolDecoder to Fragment\n\nSeems a lot more readable to me."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/1b29e92df135003c1ee6f2bb66ba885414e1cacd", "message": "plog-server: make Fragment a DefaultByteBufHolder"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/57ef95e3b566636d08e0779d0730feb33708b8fe", "message": "UDPListenerTest: port comes from config\n\nNot sure how that one got through automated tests."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/4b11b512d4041e883ac83ba51e58d2245c92269d", "message": "Merge pull request #63 from airbnb/pierre/autonomous_udp\n\nUse separate event loop groups"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/20f84e48d74ea38edb3f5bb58fb4ded7850d786f", "message": "Merge pull request #61 from airbnb/pierre/class_name_in_eop\n\nEndOfPipeline: show object class"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/def08bf7b2a6b7328c483689db4301a5317db100", "message": "Merge pull request #62 from airbnb/pierre/stats_cache2defrag\n\nstatistics JSON: cache->defragmenter"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/3603b8baa6d5c6b009c0c12102d58909b9af248c", "message": "Merge pull request #60 from airbnb/pierre/listeners_in_reference_conf\n\nreference.conf: add empty listeners[]"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/12c24b662b3cd4c18588c07e719416e811f49838", "message": "Use separate event loop groups\n\nBy default there's 2 * processors event loops and they're assigned in a\nround-robin fashion within a group, so the current behaviour was very\nmuch OK.\n\nStill, this goes in the direction of clear-cut isolation between\nlisteners, which we feel strongly about.\n\nCloses #54."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/1fee551ba537eb6fcdcb02f1a64d1337c0587c39", "message": "statistics JSON: cache->defragmenter"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/3aaa7ae4353e4fd6b097e5cc331629d7af3b70cb", "message": "EndOfPipeline: show object class"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/00610e209bc218aadf83db0b82785bb5a0e6fc97", "message": "reference.conf: add empty listeners[]"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/297fe30fbb30d97400c1e6acd40d6399066985ab", "message": "build.gradle: fix git version transform\n\nAccording to the principle of least surprise,\na release named \"vendetta\" shouldn't become \"endetta\"."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/0dbb62977bee41e7a331bf6180ed5199e5a9863b", "message": "Merge pull request #57 from airbnb/pierre/git_tags_for_version\n\nbuild.gradle: construct version from git"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/fe2e87028f5d3b4e353e927c845fa347417cd72c", "message": "build.gradle: construct version from git\n\nExample:\n\n    % find . -name '*.jar'\n    ./gradle/wrapper/gradle-wrapper.jar\n    ./plog-api/build/libs/plog-api-4.0.0-ALPHA-5-g30c49eb.jar\n    ./plog-console/build/libs/plog-console-4.0.0-ALPHA-5-g30c49eb.jar\n    ./plog-distro/build/distributions/plog-distro-4.0.0-ALPHA-5-g30c49eb-shadow.jar\n    ./plog-distro/build/libs/plog-distro-4.0.0-ALPHA-5-g30c49eb.jar\n    ./plog-kafka/build/libs/plog-kafka-4.0.0-ALPHA-5-g30c49eb.jar\n    ./plog-server/build/libs/plog-server-4.0.0-ALPHA-5-g30c49eb.jar\n\nCloses #51."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/bdca1752e347e8a74bdff146b7bf95fe9ca4286f", "message": "Merge pull request #56 from airbnb/pierre/jcenter_upload\n\nbuild.gradle: support jcenter upload"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/637a3855d38f9cb7b890faa67b3f6248682cabee", "message": "build.gradle: support jcenter upload\n\nConfiguration is rather straightforward. I have:\n\n    % grep bintray ~/.gradle/gradle.properties\n    bintrayUser=pierre\n    bintrayKey=CENSORED\n\nCloses #50."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/01293f1f70a6fe501aa6eb1644db032d125b4d4f", "message": "Merge pull request #55 from airbnb/pierre/groovy_console\n\nrepl.sh: Groovy REPL"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/14b8da85c51bcf57a5bac53ca4d42cd107aef373", "message": "repl.sh: Groovy REPL\n\nRequires a system-wide Groovy install.\n\nSadly it's virtually impossible to start\nan interactive console app from Gradle."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/6257a455be1176a6f7392f2594f2ed2e50a3e7c9", "message": "Merge pull request #48 from airbnb/pierre/v4alpha\n\nV4 alpha: filters only"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/941d67e65a5487f116c090b037e631d44398fd73", "message": "Embrace tags in the message API\n\nThe API always expects tags to make sure\ntransforming handlers won't destroy tags by accident."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/ffe6f6c4e75b98e42384c3b722a57bfc2790bddb", "message": "build.gradle: v4.0.0-ALPHA"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/4363a0f117ced75d0fdd89ec7485fb74067d0277", "message": "Rename `Filter` to `Handler`\n\nNow that they're used to \"do everything\"\nrather serve the particular purpose of transforming `Message`s,\nand given they're a very small interface on top of `ChannelHandler`s,\nfilters are named handlers like in Netty."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/d960b98163dbc7151395bcc492f81fce79ec5a99", "message": "plog-distro: consistent logging with logback\n\nAt this point looks like log4j has a rather inconsistent behaviour.\n\nLooks like we can send everything through logback, which pretty much rocks.\n\n@andykram should be happy."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/75bd7e30eae47ab4004d728d32481569fd1345a0", "message": "plog-server/build.gradle: no kafka, no log4j\n\nWe used to create a Kafka to check the validity of the associated JSON\nstats.\n\nAs Kafka became a filter rather than sink and stats logic moved\ncompletely off the server, that test dependency is no longer required."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/4b73bc5ccc925cc03fd8a26f792df62bfda8350b", "message": "PlogServer: log when starting\n\nThis allows to quickly inspect how long startup takes, which could\nprove useful in pathological cases."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/25965c5f48ce8b272a909a3f2a5968714a80f33b", "message": "rename com.airbnb.plog.App->PlogServer\n\nWill provide a better name in `jps`, and\nit's simply more explicit than \"App\"."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/876625c1d5f0666e923571e208a11ea52fe0977b", "message": "reference.conf: remove Kafka sink config\n\nKafka is just \"one way\" of using Plog.\nIt's all down to the filters now ;)"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/667062ce419095c4a6aba602bbddd43604ed68db", "message": "README.md: use filters to get started"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/5718d9397ef280709c500100b8f70f9c07d41b54", "message": "More stats, always provide a filter name\n\nThis will increase readability of stats.\n\nAlso, that JSON library is absolutely amazing."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/4135fc4c3621d6b4c79546e63c99aeb9e23b8a5f", "message": "provide a nice MessageImpl.toString(), use it in console"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/ff85a97cbee6ffe32d42c1968c833a1ffb41d049", "message": "IntelliJ reformatting"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/17b96acfdfb08538c456360800f6990495bc2138", "message": "Reintroduce stats!\n\nTurns out everything has stats. EVERYTHING!"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/73da10dfdf705550f3734ecb607c37f670f4bcfc", "message": "SimpleStatisticsReporter: simplify defragmenter logic\n\nNow that we're back to one stat per port,\nwe don't need support for multiple defragmenters."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/8d243c6c003e4b3d01f16d478252537e472febb5", "message": "Track unhandled objects\n\nRequired as we move from sinks to filters,\nwhich means pipelines could trivially do the wrong thing(c).\n\nCloses #47."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/7d184c307fdf41b707de31b3b011f5035f6359c9", "message": "SimpleStatisticsReporter: migrate to minimal-json\n\nSuch a breath of fresh air."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/2c26efee7f3f921a03471825f91c3b9bbf71ff24", "message": "build.gradle: add minimal-json for all subprojects\n\nGrowing tired of manual JSON :)\n\nWe'll use this lightweight and simple JSON implementation for stats\nreporting."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/5cdc8b11019bb77b56eca7a6df5048ca373ceadb", "message": "Introduce filter interface in plog-api\n\nThis will be useful to introduce stats reporting for filters.\nFor the time being more of a NOOP that breaks the API,\nand makes us move from anonymous classes to inner classes\nin a bunch of places."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/a47556a447f515bbb8fdcc40c1e7fcaae5238eb0", "message": "Going fully modular!\n\nA lot is happening here.\n\nThe overall idea is to get rid of sinks in favor of filters,\na more powerful abstraction.\n\nWe have yet to provide good reporting functionality for those,\nbut please be patient :)"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/7148eb90054d8630a77ef5bf7b181a457d1946b9", "message": "Messages: add support for tags\n\nNot used right now,\nbut will be used to specify Kafka topics, for example."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/35e9e5e0ec68e034fdd9d24da654e11e15a2f078", "message": "Merge pull request #42 from airbnb/pierre/distro_in_own_module\n\nMove distribution concerns into their own module"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/3de62b7237a4e3a3ceddac61ecfca71820326ce4", "message": "Merge pull request #41 from airbnb/pierre/fix_api\n\nPlog API: something usable (so far)"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/8ed32054d00c194394b3a779606c76e26eb006cf", "message": "Merge pull request #44 from airbnb/pierre/defrag_cleanup\n\ndefrag cleanup"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/84243f439b8e89cc1c4df818a4f85a806b2a972e", "message": "defrag cleanup"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/65bc94793210a6f6ddf052281b56ed86fc8718b2", "message": "Split distribution from server\n\nMore modularity.\nOne could build their own distribution, with their own filters for example."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/fdaf5e3d232bfe267dc739d771f3a9d0ac428a3f", "message": "Refactor to make plog API truly usable\n\nWe should be able to write filters out-of-tree with this."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/d892896628d0ecf9853d1a908416ce84d38ca80b", "message": "plog api: use an interface\n\nTBH I just don't know what I was thinking."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/34015ec4d64f23e9d014ae3b9da26c611ce5374a", "message": "Merge pull request #39 from airbnb/pierre/modular-build\n\nSwitch to modular build"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/ef528a0744f5d4d3c924b8b0c83766d92ac3ab56", "message": "Switch to modular build\n\nSplit the build into subprojects.\nThis will be useful as we start building \"peripheral\" features, specially with the filters architecture."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/9a3131c081c7015b5a9a06dbaaa64f2566ca6bb5", "message": "Merge pull request #38 from airbnb/pierre/banner\n\nApp: show a banner on startup, no compilation warning"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/95bb353a0d454ed46180bb956303ef2851de7986", "message": "Message: @EqualsAndHashCode(callSuper=false)\n\nOtherwise the compiler complains with:\n\n    warning: Generating equals/hashCode implementation but without a call to superclass, even though this class does not extend java.lang.Object. If this is intentional, add '@EqualsAndHashCode(callSuper=false)' to your type."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/03a82ca7634e09038fd6f3be94c4ffca871981c0", "message": "App: show a banner on startup\n\nReally useful to spot when the JVM started when going through service logs."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/41821f029f1d548693f096c9f02d4c4e8305e0a6", "message": "README.md: reflect production status"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/77e39d82c5a3c22dc994daf9a351625e04bde2fe", "message": "Merge pull request #37 from airbnb/pierre/bytebufs_luv\n\nv3.1.0: much better perf"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/7847d81f7b169bd103eef0929aa133f36683808f", "message": "build.gradle: v3.1.0"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/a7f0e6dae341a6608831dbe68e076be20b09e099", "message": "Message: memoize byte representation\n\nMight not be useful, but won't be expensive either."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/dd67c560ed319c71cdda94d3f2470859aeb3e9a9", "message": "build.gradle: stop tuning JIT on run"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/0d80a198b8807ffa99ced6a5dd8fa27324b0d770", "message": "more ByteBufs, better allocator, less Unpooled\n\nShould improve performance quite a bit."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/b144318a931dc9d7e621024c9a2f45b7840095a0", "message": "Merge pull request #36 from airbnb/pierre/stats_back_for_non_kafka\n\nStats back for non kafka"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/4f83e867ace756562aa11a5a181fddf23a95c80d", "message": "Listener: use null kafka topic for STDOUT\n\nSadly we broke the stats .toJSON() for non-Kafka listeners\nas null is a special value."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/ea58d8f23effd61628778ac594fa0ff460721bb2", "message": "ListenerHoleDetector rename, clean up log syntax\n\nThat's a much better name since the 3.0 refactor."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/ef76793db8c03e549b2430cd87eb7fd28e89d18a", "message": "Merge pull request #34 from airbnb/pierre/v3.0.2_version_in_stats\n\nv3.0.2: expose version in stats"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/70a0d5aba8189876a9ad9bc44da0947fce9fd2e0", "message": "build.gradle: v3.0.2"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/aebaa1b35df60afaf68a6a898bd882db35effd60", "message": "README.md: update stats documentation"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/d5a175773ce6d9dd6436a28c4739348e83ad8978", "message": "expose version in stats"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/daaab6e88add903b4e7d489fe5c2e8dd7afdd78b", "message": "Merge pull request #33 from airbnb/pierre/no_blocking_on_kafka\n\nDon't block on kafka, update deps"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/288e5a2b7ff360aab98799713a59ab30043cee32", "message": "build.gradle: v3.0.1"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/765328223e08f035abfee3a712cc492e8a74642e", "message": "build.gradle: bump deps"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/811e51e3ef979afd754207cf9748ce9bfe3e7eb4", "message": "EndOfPipeline: ignore QueueFullExpection\n\nAlready tracked in Kafka metrics and exposed via stats interface."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/19a2357e70c57cacdc8bf1b1cd3317b6a0efb3a6", "message": "reference.conf: don't block Kafka, adapt defaults\n\nIf it cannot keep up, that problem should be identified by metrics and\nnot affect the listeners."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/367c1d0cd19271c32b24c27a3e49cd28669e6d68", "message": "Merge pull request #30 from airbnb/pierre/v3.0.0\n\nMajor refactoring"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/2e7bba4219dc88094ddf7f1587ed25ce98287b84", "message": "build.gradle: v3.0.0"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/518dd8602bb462444013a884074fb895cb576976", "message": "README.md: cover recent changes"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/62bf5b941a26f61f531289244143b16d80039c3f", "message": "early UDP + filters integration tests"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/119eeb535f690a7a104e348336956df7e17adb3f", "message": "build.gradle: netty upgrade"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/71f99e882886b77f063e6fe8581a070d33763618", "message": "build.gradle: no more kafka properties\n\nThose were moved to Typesafe Config."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/4a7b735aaaeec45fd7ea8bdbac5996142113e9a6", "message": "Crude filters support\n\nOnce improved and tested, should close #23."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/06356085fa657bfc9868b4d0e69fa84925537ee3", "message": "Handle, log and count exceptions parsing multipart headers"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/aa3ee0f17bba2ce4846ef94dc41b8b03ccfe1256", "message": "Major refactoring for v3.0.0\n\n- `App.java` ain't scary no more! :trollface:\n- Support defaults, UDP defaults and TCP defaults\n- Move the Kafka config into Typesafe Config\n- Kafka client IDs & producers for every listener\n- Stats per listener\n\nCloses #22, #24, #29."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/cebdcc74e998d49a4156e8c920c84e83c2f98b05", "message": "Merge pull request #28 from airbnb/pierre/revamp_stats\n\nv3.0.0-WIP: per-port stats, support in datadog"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/a779a9dae18ad04fea4c3b3c6a296538e4cd2c75", "message": ".travis.yml: Java 8"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/102db35b492bba32ccfee0ce6d0c6c0776ca92aa", "message": "v3.0.0-WIP: per-port stats, support in datadog\n\nFor #22."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/742cd50d520c23bbd324bc189e9324d56f10acd2", "message": "Merge pull request #27 from airbnb/pierre/test_eop_logger\n\nadd test for end of pipeline logger"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/cc9f8e5da5ec6283ee2e2061eb5c1e7513a5fab5", "message": "build.gradle: v2.0.2"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/0c8388c32dbe282f814ff04a5afa9a16ab3b3970", "message": "add test for end of pipeline logger\n\nWe saw some exception stats, but no logs.\nDamn it."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/8316efc74cdea8dd97f256238e12e8f601321c31", "message": "build.gradle: use slf4j-log4j12\n\nHad it not been for Kafka I'd have intuitively gone with logback\nand none of this would have happened.\n\nThat's my terrible excuse.\n\nLuckily we've been driven more by metrics than log events, but now that\nwe see exceptions in the pipeline rather than the async kafka, we really\nwant to know what they are..."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/ce2d2246355c8ceeadd82373369c66c8e763f58d", "message": "Merge pull request #26 from airbnb/pierre/fix_loglog_stats\n\nFixed LogLogScale stats with a paper and pen"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/eab8d0180ebb2e07a4b71d9c110df9b502d13d0b", "message": "Fixed LogLogScale stats with a paper and pen\n\nStorage is still inefficient, with almost twice as many AtomicIntegers\nas needed."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/7a089bda3d8c847201f908e7ee9446441ba6b42a", "message": "rm TODO: out-of-date & moving to GH issues"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/07db26d84497d1e066278a9f9c752b4343542259", "message": "Merge pull request #21 from airbnb/pierre/multi_udp_works\n\nfix ./gradlew run and actually allow multiple UDP ports"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/45378f2db134c66af67c83e490bea8d6628606b1", "message": "fix ./gradlew run and actually allow multiple UDP ports"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/d1ff362093440ea434bfb98e376fa13d220b03ff", "message": "Merge pull request #20 from airbnb/pierre/v2.0\n\nv2.0: multiple ports, STDOUT instead of kafka"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/8e6d9819dbd78d4fe704e317245c034bc39df512", "message": "Merge pull request #19 from airbnb/typo\n\nfix a typo in the README"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/1451ef2c0dfe36e32baae88cb0e7e1bece6a0df3", "message": "v2.0: multiple ports, STDOUT instead of kafka"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/6afd16472659fa793e7a3e448824ae1cf276006c", "message": "Merge pull request #18 from airbnb/davide/simpler_fragment_name\n\nrename FragmentedMessageFragment to Fragment"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/522aa0611e4d5d07ac0b6aefc1ed8543425e968d", "message": "Merge pull request #17 from airbnb/pierre/tests/fragmented_message\n\nTests and fixes for FragmentedMessage"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/2038e0bdd38b8ffa897bc0e747322f067bae778c", "message": "FragmentedMessage: be stricter to avoid exceptions\n\nActual production issues seem highly unlikely.\nChecksumming would have prevented corruption anyway."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/fb6d86d1011db85723e9bf4cee5057ceb53eb504", "message": "tiny reindent"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/6d56f2f3d9afcb6923d9c5cb78cea88a9d434986", "message": "README.md: oops, remove misplaced comment\n\nUsed to make that warning about the string encoder. Not sure how it survived."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/6ec791dfbafbc802be042d2870e108101fc63524", "message": "Merge pull request #16 from airbnb/pierre/fragment_fixes\n\nFragmentedMessageFragment: to the limit, not beyond"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/26953ef49224bcb5ec4d696437e236e053b90c80", "message": "FragmentedMessageFragment: to the limit, not beyond"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/cf0d893e7b9e37c21cdeaa7931b67bee542c8032", "message": "README.md: update Airbnb events description"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/cbab04e6a2bff3b24b55ca61d382376fdf9d2b4e", "message": "clean up CI, add coverage report"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/04e7224dc1373ab589089fde09c62d0f136580f4", "message": "test and fix ProtocolDecoder"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/89b061ac4d9b33421cf3061417e5bbe74c865776", "message": "move client IP away from network address"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/8811a9dadd8805c7d46e9dbc94a5a78295ba0313", "message": "FourLetterCommandHandlerTest: remove redundant check"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/37088bfb834cdf986a266ce097673c0fd91ac115", "message": ".gitignore: *.pyc & gradle idea"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/e87d12f407e9ada872d074356b14d74fc40f317e", "message": "Merge pull request #15 from airbnb/pierre/test_the_tests\n\nTest the tests"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/fff4a74b9f1e6d771998ea889aef222f48919abd", "message": "SimpleStatisticsReporterTest: test counters"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/c9cac62f19e2b095398da61f6228eea4731ebdbc", "message": "SimpleStatisticsReporter: handle large messages properly"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/9ec47742bae7b9968fa687189cf8937b9ec7b858", "message": "StatisticsReporter: reorder methods by params"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/df28596daa2ba672bf3858319c8d989d38b9ff9d", "message": "FourLetterCommandTest: string representation, for coverage :)"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/fe4429241f0514c14668531b51dbf5ccc35b79e2", "message": "ByteBufsTest: cover the constructor"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/bc74237f970ed0092f03fccbccddbad37dfa2d13", "message": "ByteBufs: don't bother hiding constructor\n\nBreaks code coverage, no point."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/33a5432f1aded168e66f0954e89d2024135a159f", "message": "SimpleStatisticsReporter: remove unused toString()"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/77f95010ad01bda50a2d15c7202aa2d50b6417aa", "message": "test Message.ByteBufToMessageDecoder"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/f5a2549394ad85cfd2a402a070955146f38da2b7", "message": "FourLetterCommandHandlerTest: burp leaves pipeline empty"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/bbf76580c79c767ca4acc4917fff5e444ba6f81e", "message": "FourLetterCommandHandlerTest: unknown commands"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/aabdb013d6c5101ed6acc54cffce93a56ec7ecec", "message": "PortHoleDetector: remove unnecessary class prefix"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/0ada4db4b87216fae43885d1b60c3920c6043a34", "message": "Merge pull request #13 from airbnb/pierre/local_bind\n\nbind locally by default"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/1cd33efb477d39b2d2ea8223d238a09b77a1ee30", "message": "Merge pull request #14 from airbnb/pierre/tests/FourLetterCommandHandler\n\nFourLetterCommandHandler: update stats after handling, tests"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/1b2dd03ac1d6d836879df18b5ad949d12e4d3457", "message": "tests for the FourLetterCommandHandler"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/03ea8f48b9a1c7c667d2323404b73a45162745ad", "message": "FourLetterCommandHandler: update stats after executing commands\n\nMakes testing easier."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/98ff97341707042a9ae96466c3ebe92274cfdbaa", "message": "Merge pull request #12 from airbnb/round_of_tests\n\ngitignore, uptime, more tests"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/b32c66de02eedd22d42e172fc5c227a0b9df1d85", "message": "introduce some more tests"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/a950ffb28c4f075390a4b0b8251cc04da8a6e186", "message": "datadog: collect uptime"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/9cbca1cbe21fb79868a45508a7715b17c5992745", "message": "SimpleStatisticsReporter: uptime, Kafka is optional"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/6d14bd93ffea2530f814e4f178e97560f3a5792b", "message": "bind locally by default\n\nSolves #8."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/fe800cbd22e3d7ca63145cadf9b7826eb8353fdd", "message": "datadog: don't wait for socket to be GC'ed"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/363cb0b484584cef718f7432bf565687770bfe61", "message": ".travis.yml: check python syntax for datadog"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/a0b195e2da66f24b014add30d9ce30a6a089eaea", "message": "add .gitignore"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/79781ca9f1c131b20833c87aee9e978e707b624a", "message": "Merge pull request #11 from airbnb/travis\n\nTravis CI integration"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/75e16d06794d6313c4227f96218ee2c8478848cb", "message": "README.md: add build status"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/21e620b7be3a7aa1f73788a54f278e60b6b3655b", "message": "add .travis.yml"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/94ccbb331528e9965ad5097421235a9109bf0f38", "message": "publish datadog agent check"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/c1a6f4bda677eeefd7fdcfacb42afa58d16069e1", "message": "remove signedness warning now that we have tests"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/aa6674beb687b5673c8be65f5f48931d39782712", "message": "README.md: refer to tests for hole detector"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/32a3aadaaf0274b80a9019eac2868450c867d919", "message": "README.md: mention TCP and syslog"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/d49d32baa3d6970fb1ea2f7fb6f95f83e85a036a", "message": "moar PortHoleDetectorTest"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/333de66d520244c8a9a0a67a7a4eafcea9473a55", "message": "Merge pull request #7 from airbnb/pierre/tcp_and_log\n\nYipee"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/bcecd62609bc1114c104afd01d8ede6e905f9e65", "message": "release 1.3. that was fun."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/0708b580d5632ef1e161e469925a2896e0f3efcc", "message": "fixed the hole detector with black magic and tests"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/bc758a1bb5b33fbbd3e1c27e85dba00f7bce72fd", "message": "Defragmenter: release ByteBufs"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/fcef3d04836d0c2d9988f76720f0f0ee84586089", "message": "ProtocolDecoder: release ByteBufs"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/87453784882d5b69e4993688ff3a85efca2fd5fa", "message": "TCP is back, disabled by default, enabled in gradlew run"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/a55076e92f4e5a83e05404dd41d569d491a65a96", "message": "PortHoleDetector: much improved logging"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/1b9514320bc50fa3824b25353464e8998cc4c71c", "message": "only check fragments if need be"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/640413a4f63dd66eb76789c391ac6b591d786c6d", "message": "never trust quick rewrites\n\nWell, sometimes things just go right."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/c69663c92987f55eb7474c23f8c154170340e859", "message": "Merge pull request #6 from airbnb/pierre/omg_hole_detector\n\nnever trust tired pierre"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/058dbd91cd80925a8fe617adc1ee2f843c29a72f", "message": "never trust tired pierre"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/4a715ad1129f88b15afb61feef2f84eb08aee809", "message": "reference.conf: default expire time 1min"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/c0b814b9b6820d0e035f03e6881a2545369cde17", "message": "purge for port reuse"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/ad2e8afd0cac5ceebf623fdeeda86a1d70f9dee9", "message": "README.md: \"stay away from signedness issues\""}, {"url": "https://api.github.com/repos/airbnb/plog/commits/058caa484ad5643b163553f5a04936e23a4b101e", "message": "bump version to 1.2, release!"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/f380a9d99cc18b0e75e39107d6018212a7ebc8ed", "message": "ServerHoleDetector: only log if warranted for"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/47eb4bc1b61ebb7879fee860302f9be0a838ab4d", "message": "PortHoleDetector: comment on false negatives"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/735f2af584779125539031af56aee479efb04dbf", "message": "bump version to 1.1, release!"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/2ba8fdfafd0632fc2639a9860e226a786f540c1b", "message": "clean up JSON fields for release"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/ed01a019ac27ab778ef535d4bb2188d1b4805728", "message": "refresh README.md for hole detection"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/ed548861ed94be4e5e820c59473341a8c829103f", "message": "hole detection"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/d2329c554e75291fef2070a13cbe5f9a63dbe9a3", "message": "isolate components through packages"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/7ff623a6a456e3aba54d5164353e50f5b70ebda5", "message": "new naming convention in the code"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/cb9423021802429df5dcc2fdefd35c589ce02a1e", "message": "README.md: document statistics!!"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/162e0678f5cd140f14da61412040a7a9a30c68f8", "message": "README.md: fix terminology\n\nThat was long due."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/7352fefc381b39ef5d872758f65b9856c71ac6e8", "message": "README.md: move sections around"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/ff2a22b17b95ec04cc85809392e1d5233b4352ff", "message": "support time-based expiration of partial messages"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/c02a0f79e3d0b7c333e0623d22fcd5eaa1c6c178", "message": "fix cache statistics"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/83060556d762121177ce1a961e1e8205b83c8b81", "message": "README.md: commit to JSON for STAT"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/c33d7ed57811479726bcd45b8e33310826100ac1", "message": "TODO: reflect current state"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/e04d81bf83dfda6bd8b51c032786552793049174", "message": "README.md: specify our kernel tuning"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/21389aae49666f0a4d5985fae1c1571310aec375", "message": "SimpleStatisticsReporter: oops, stupid me"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/e6103e9d2d961bc616f2e2feea2aa314b406e197", "message": "Merge pull request #1 from airbnb/pierre/multithreading\n\nsimple multithreading test"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/7138cf384e3130feb1641152c68833f7cf48b18c", "message": "Bump version as threading model & TCP removal are a big deal"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/66cf0c0af4b298e90e7c921993ffa57318f38bb8", "message": "remove TCP altogether"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/91b73dc71f50917af3d61a10700d31a87de1ffbe", "message": "simple multithreading, to be tested"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/e43431dd8d8b65b4cbff384dec382dcaf87f882a", "message": "kafka: use byte[] for keys"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/8dfe59e57eb95934489e3a8bd60e8256960b1eed", "message": "build.gradle: specify a few JVM options"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/67f84bdb710757bf6ad9b918a8c7393ac71ea0f7", "message": "remove any charset & String crap in Kafka"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/17198580bedf25e9c319e01978630f72ce7bac0f", "message": "PartialMultiPartMessages: length checks"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/803c8fc84566dbe3defa06ab5d9efd3f11cfdcfb", "message": "set UDP recv buffer to 64k by default (was 2k before)"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/a6b40dd9a3b807354db9821c18dd2470656382c6", "message": "PlogDefragmenter: log hex-encoded payloads on checksum mismatch"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/4dff46373d64fd8621ec92f5e1476ce8692f5524", "message": "PlogDefragmenter: log more about checksum failures"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/8339c8e18a30028ee327b14b04b7d10da4151440", "message": "few renames, better logging"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/dc103c57e01084fa4cb2edf77a3846caae61fde9", "message": "checksumming, more metrics, fix docs"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/1c7efa0ac566fd188d7b78f88490b2f4d4f64a19", "message": "add LICENSE.txt"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/0bd376971613b1daa1c09279005b734f43532849", "message": "README.md: add quick OSS disclaimer"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/93fd7f506ce649b2ab9d0a8fdb70464ef92b2c90", "message": "SimpleStatisticsReporter: make array of arrays"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/b832cee815eaaeccadcba94968eaf7b6e456da4e", "message": "build.gradle: reflect prod changes"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/d4b82587ed4c537c82920587b58e9cd4ddc8f6be", "message": "this could be a stupid bug and piss me off for the day despite some huge success"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/646a025be14e9dd7b1ee6433c4edd0a1da19605b", "message": "configurable UDP buffer sizes"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/1fc32977ffb9a364dfeb91e9beb8620aaada038d", "message": "build.gradle: add snappy support"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/cad7fe0c26de743af5615682976f87ca598e9103", "message": "fix stats json"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/a1ac17dbde18aed28ca8d4d022559002e7a49b2b", "message": "fix TCP"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/de7a54d42658b68ff2c7af24f0c4003baa6c39dd", "message": "TODO: snappy compression"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/80a6ef72999ccfdeea0506fd244ee867dc219773", "message": "change default port to 23456, not ephemeral"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/2124161c3b93affae3407bdbf0763c196d6681df", "message": "fragment count starts at 1, more stats\n\n- update README.md for protocol and code so fragment count is 1 for 1\n- fragment, etc. fragments remain 0-indexed.\n- stats for missing packets in dropped messages, using log2 scales."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/816e59039c99526cfa20df3c3089eb3a61b878f1", "message": "add log4j.properties"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/e5f956677ceba9f7cd10ba21322b51e6d46ada22", "message": "build.gradle: embrace log4j as kafka does"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/3091a2eff211330d23879ea1477d02a540b06544", "message": "App: cosmetics"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/1a897f6a8c3e95c2b40edc8c398e6ae5ddc2e9a2", "message": "build.gradle: move to jcenter, specify main class name for jar"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/967b62e90dadf924ec87256c4660f70700601c45", "message": "fix case for filename. damn OSX"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/430e8097b977436c7c49b96ba912573b7a2dbcdc", "message": "use Message objects in defragmenter"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/b34ac244a1bd33b6479b3b2d2ea5dc82d1a42e7a", "message": "PartialMultiPartMessage: tiny rewrite for readability"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/2bbf49a34d5f239b5ed39d4b08182d7e4ee13aa1", "message": "message boxing"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/2e52a051e89be86f53895a1a8430d683875c98d3", "message": "PlogDefragmenter: record stats"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/4b1560b1884dec2703b0c2df6109209e55164be7", "message": "add TODO"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/d36844c3a3469527f28635cd8ee78d3e13d6b72e", "message": "fix for small packets"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/e99c618ef555b91d2127147236b1cdb43ac21cbc", "message": "cache: get ready for more stats"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/2623fb0f3e320e57c3f20a6323c8acb46cfb59e3", "message": "README.md: insist on not using TCP yet"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/65f3f67670d11eefdaf8572f2c2c2b9b5cf018cd", "message": "releases"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/1dfe7affd12f84442c4b0ada50d8b61ed775496e", "message": "+cache stats"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/cc60a3d28399e1cf9d2722e035da0c700f3c9ecb", "message": "holy cows"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/1ae243c04ba370acbd34a3c64541a14c842f924a", "message": "something that might work"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/4b9c85537d180c42a512dff9ed9cc43626ee0f43", "message": "getting back to guava cache"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/8b12bd5d77c152abb6036f9a60f63173e4872a72", "message": "snapshot without guava cache"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/913515fe80618c5048aedc4c9fd501d8955d864b", "message": "snapshot"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/ecd707f17480d5f550a59fd6c068252b027b2d6b", "message": "README.md: cover event format"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/435fce5c4cc9bafb4c308a502c0aed556a2ce834", "message": "add Kafka statistics"}], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/plog/pulls/100", "title": "bump Java version, fix links in README.md", "body": "- Links in README.md were broken/outdated.\n- Java 6 is way out of life now, time to move on.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/plog/issues/comments/35143902", "body": "Yeah, 3 places. Otherwise I would have inlined.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/35143902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/35143942", "body": "Looks like this was a false alert from our early tests in the `plog` topic.\n\nSnappy very likely doesn't change anyway.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/35143942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/35237873", "body": "Looks like the port hole detector is finally fixed.\n\nTested the TCP client with:\n\n```\n$ sudo find / > filelist\n$ nc localhost 23456 < filelist\n```\n\nSends 1'755'497 messages (only 186MB) in 12 secs on my laptop.\n\nLimiting factor seems to be some locking in the Kafka client.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/35237873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/35237913", "body": "Incentive for the TCP client: combined with support for unboxed messages in UDP, it makes a mean syslog to kafka forwarder.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/35237913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36063024", "body": "He he I was feeling sad about not testing with Kafka in SimpleStatisticsReporterTest.\n\nLet me try to make that work first then :(\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36063024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36474125", "body": ":+1:\n\nI kinda did that as an IntelliJ demo.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36474125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36485841", "body": "Not even tested yet.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36485841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36485950", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36485950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36544335", "body": "@nelgau wanna review whilst I start trying to run it? :)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36544335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/38245953", "body": "Let me know your preference and we'll go that way :)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/38245953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/38249166", "body": "In the meantime, going with this anyway, much better that the current situation.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/38249166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/38818684", "body": "Let's forget that one for now, it's getting me more confused by the minute.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/38818684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39055840", "body": "Moving to per-port stats; TCP support for stats left out for now.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39055840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39175012", "body": "Calling this `v3.0.0` if @nelgau agrees.\n\nReserving `\\0` at the beginning of TCP lines in README.md so we can add support for commands in TCP within 3.X.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39175012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39409891", "body": "If it passes review I won't merge to master just yet, just tag and make a build.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39409891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39412404", "body": "Tagging and pushing a build in the repo.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39412404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39413929", "body": "OK, OIO wouldn't bring much if anything apparently. Let's keep things stable, I got the OIO commit out.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39413929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39425943", "body": "Already gave it a go with Kafka & STDOUT. We're gonna have to test the next PR extensively.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39425943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39799683", "body": "Covered by #43\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39799683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39799888", "body": "Covered by #43\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39799888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39892742", "body": "Killing this PR as plog-upshot is far from ready.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39892742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39905091", "body": "@nelgau rewrote the RFC. Care to review?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39905091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39915550", "body": "Turned into an enhancement.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39915550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39915575", "body": "Covered by #48.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39915575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/40036411", "body": "Added bullet point, \"Tags from the last processed fragment win; well-behaving clients only set tags on the last fragment to avoid reducing the chunk size or increasing packet count.\" as discussed with @nelgau.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/40036411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/40193187", "body": "Duplicate of #50.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/40193187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/41763233", "body": "Pretty much confirmed to fix a memory leak.\n\nWhen running stress tests, netty only shows the leak once shortly after startup, probably due to the usage of memory pools and the stress tester using a static message size.\n\nAfter this change, the message no longer appears.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/41763233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/41850531", "body": "@nelgau can you inline that last question with code somehow?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/41850531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/41868551", "body": "Good catch. Lemme look into that.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/41868551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/41869557", "body": "Nope, we do need to hold a reference.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/41869557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/41869780", "body": "ProtocolDecoder is a `MessageToMessageDecoder<DatagramPacket>`, `DatagramPacket` is `ReferenceCounted` and calls `release()` on its payload `ByteBuf` when released.\n\nSo if we want to keep the `DatagramPacket` payload around, we need to `retain() one` way or another, unless we\u2019re OK with losing the `ByteBuf`.\n\nFor example we're OK doing that for command packets, where we\u2019ve already turned the command into a string and the padding into a byte array.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/41869780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42212474", "body": "Going with `\\0`-separated, specified UTF-8 and `Collection<String>` instead. I can be convinced it's a bad idea.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42212474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42583027", "body": "Great question.\n\nThe [documentation for `RemovalNotification`](https://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/cache/RemovalNotification.html) explicitely states:\n\n> A notification of the removal of a single entry. The key and/or value may be null if they were already garbage collected.\n\nHowever, our cache uses strong references, and removal listeners are synchronous, so we don't risk anything with the current code. I guess those few extra lines would only help if one tweaked the cache without thinking about the consequences.\n\nhttps://code.google.com/p/guava-libraries/wiki/CachesExplained#Reference-based_Eviction describes settings for the cache that I believe would trigger the `else`.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42583027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42588499", "body": "@nelgau how do you feel about removing that code altogether, given it's unnecessary?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42588499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42650101", "body": "I would tag `v4.0.0-BETA` after merging this. @nelgau?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42650101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42994575", "body": "Oh that's a .orig file. Good catch!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42994575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42994765", "body": "Updated.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42994765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42994887", "body": "`if`, `for`, `while`, etc. That was just an code style setting for the project and automated reformatting away :)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42994887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/43591832", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/43591832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/44483929", "body": "@nelgau Correct. 5min.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/44483929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/44484293", "body": "@nelgau He he came up with the same solution :D\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/44484293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/68159955", "body": "> This pull request can be automatically merged by project collaborators.\n> Only those with write access to this repository can merge pull requests.\n\n:hurtrealbad:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/68159955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/130914566", "body": "Why put that in the Kafka handler and not in a separate handler?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/130914566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/130915383", "body": "Could we integrate BouncyCastle instead? https://www.bouncycastle.org/\n\nI've had good experiences with it. Dealing with JCE policies is somewhat annoying.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/130915383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/airbnb/plog/comments/6164641", "body": "Actually I'm starting to think that without this, messages with 2+ fragments leak ByteBufs. As we moved to pooled direct allocations, they never get collected.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/comments/6164641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/comments/6175630", "body": "Yup, looks like it.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/comments/6175630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/10825064", "body": "It's not quite logarithmic in size, you are correct. I liked separating 2 and 3-4.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/10825064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/11146399", "body": "Yup. instructions to get started are updated in README.md.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/11146399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/11146402", "body": "Thanks, I quite like it too :dancers: \n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/11146402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/11146414", "body": "After all, who am I to choose which protocols one should be using? :)\n\nAlso, the getting started instructions no longer depend on Kafka.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/11146414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/11375785", "body": "Line alignment by the IDE :dancer: \n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/11375785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/12165695", "body": "There's no ownership, only refcount. Byte buf holders are \"releasable\", and when released they release their reference to the byte buf itself. Most of our handlers release objects they processed through their class hierarchy when they're \"releasable\".\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/12165695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "nelgau": {"issues": [{"url": "https://api.github.com/repos/airbnb/plog/issues/86", "title": "Collect all failure counts into a single object in stats", "body": "... so we can sum them into a single metric.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/86/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/plog/issues/comments/34900201", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/34900201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/35064168", "body": "Looks great! :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/35064168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/35068075", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/35068075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/35118349", "body": "This looks great. :+1:\n\nAre you actually using the ByteBufs class anywhere yet?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/35118349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/35180597", "body": "LGTM. Sorry for not catching this on my first half dozen read throughs. ;)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/35180597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/35254727", "body": "I can't really review the TCP stuff, but I'm on board with the rest. :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/35254727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36053049", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36053049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36062558", "body": "You might be missing a `builder.append('}');` at the end of `appendKafka`. I see you close the hash for `messageRate` but not for the parent `kafka` hash. \n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36062558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36062679", "body": "With the exception of my comment on `appendKafka`, this is a :+1:.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36062679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36070859", "body": "Love the testIsValidJSON\\* suite! :dancers: \n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36070859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36077873", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36077873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36078228", "body": "RATIFIED :hammer:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36078228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36091000", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36091000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36097737", "body": "This is a great win. If we do this, we can drop Kafka as a dev VM service. :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36097737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36097920", "body": "This is cool. I'm not sure that we have an immediate need for it but it would make it easy to reuse Plog for other features besides air_events. Round-robin on ports would have the effect of increasing our buffer depth as well. :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36097920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36103581", "body": "Looking good. :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36103581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36563896", "body": "From my reading, this appears to be good. Assuming it behaves an intended when built/executed, this is a :+1:.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36563896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36945124", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36945124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/37592448", "body": "I am @nelgau and I approve this message.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/37592448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/38239694", "body": "I'm happy to have the structure of the log-log stats make sense and be tested. What do you think of the bucket size concern? Is it worth addressing?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/38239694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/38242838", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/38242838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/38823923", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/38823923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39049071", "body": "Looks good. :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39049071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39168101", "body": "This all looks excellent. I'm very happy to see `App.java` get diced up into listeners and the filter abstraction come along for the ride. Nice work. I think you're still writing tests but this is already great work. :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39168101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39175517", "body": "Yup. Looks good. :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39175517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39176335", "body": "I like it. Each listener still has a default (at least via the global default) and you can optionally emit to a different topic. :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39176335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39262621", "body": "Recap:\n- Request timeout is lowered so fewer messages (in time) are queued per attempt.\n- We increase the queue depth (in time) to beyond the retry time.\n- And we never block on enqueue, preferring to drop at the Kafka interface.\n\n:+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39262621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39277942", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39277942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39410479", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39410479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39415100", "body": "Tests are passing. Is there anything else we should check? :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39415100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39428373", "body": "Assuming it passes all unit/integration tests and has been run through its paces with `plog-stress`, this all seems reasonable. :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39428373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39428829", "body": "Ack'ing memoization.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39428829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39545830", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39545830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39547896", "body": "As the unit and integration tests pass, I'm cool with this\u2014THE FUTURE :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39547896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39607743", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39607743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39608873", "body": "This all makes sense to me. Knowing that it type checks, passes unit and integration tests makes me confident. Go for merge! :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39608873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39609096", "body": "I already reviewed these changes when I looked through https://github.com/airbnb/plog/pull/42. This is good to merge :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39609096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39908385", "body": "Seems reasonable to me! :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39908385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/40132604", "body": "Yup! :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/40132604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/40133221", "body": "I agree with this last bullet point. A correctly-implemented producer should emit consistent headers\u2014whether that means each fragment contains identical tags or, more likely, that only the final message has tags. In both cases, the behavior should be correct.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/40133221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/40133448", "body": "Yup. This seems important for symmetry with the UDP listener. :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/40133448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/40179789", "body": "I approve! :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/40179789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/40187163", "body": "No convincing needed here. REPL FTW. :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/40187163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/40191758", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/40191758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/40192117", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/40192117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/40193555", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/40193555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/41831854", "body": "Should we move the retain in the unboxed message code path into `MessageImpl` as well?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/41831854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/41832740", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/41832740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/41832781", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/41832781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/41832823", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/41832823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/41833685", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/41833685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/41868065", "body": "@pcarrier Sure. Given the change you've made in this PR, does [this line](https://github.com/airbnb/plog/blob/master/plog-server/src/main/java/com/airbnb/plog/ProtocolDecoder.java#L28) stand out to you now?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/41868065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/41881349", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/41881349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42224446", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42224446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42241957", "body": "Okay! :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42241957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42276057", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42276057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42493741", "body": "Everything is wonderful so far. :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42493741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42581364", "body": "Under what condition is the else case true?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42581364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42595130", "body": "I feel great. Let's do it. :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42595130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42626459", "body": "Looks good to me. :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42626459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42721874", "body": "I'm cool with this refactor. It's much more readable! I still need to (once and for all) discuss the specifics of retain counts and memory management with you.\n\nGood for tagging this as the beta. Awesome work as usual. :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42721874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42796839", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42796839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42875433", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42875433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42994649", "body": "This looks great. Braces around single statement ifs++. :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42994649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42994803", "body": "Sounds good. :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42994803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/43173260", "body": "Simple. :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/43173260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/43179835", "body": "LGTM. :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/43179835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/43182207", "body": "Awesome. :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/43182207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/43590302", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/43590302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/43593416", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/43593416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/43593628", "body": "Still good! :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/43593628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/44483697", "body": "I've verified that there's appropriate synchronization in `FragmentedMessage.ingestFragment()` and the hole detectors. However, there may be race when two threads execute `message.ingestFragment()` simultaneously and both discover that the message is complete.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/44483697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/44483785", "body": "I suggest that the Defragmenter should use a boolean returned from within the synchronized block (via the call to `ingestFragment`) to determine completion status. That would alleviate the race condition.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/44483785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/44484118", "body": "It all goes without saying that I assume that Guava's cache interface is itself synchronized at some granularity. I haven't verified this completely but I did check that the hash table's buckets (Segments in their parlance) inherit from ReentrantLock and are synchronized on write.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/44484118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/44484453", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/44484453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/98906992", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/98906992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/211582435", "body": "@alexism @liyintang @jun-he I agree that `byte[]` is more general. The proposed feature, if it's implemented at all, doesn't belong in this composable, modular handler. It's no different than the encryption that snuck in here somehow. Handlers are most useful when they do and assume as little as possible. If a handler is insufficient by itself, you can decorate its behavior with your own.\n\nI strongly discourage weakening or otherwise reducing the generality of the Kafka handler to solve a specific issue, especially one for which the conditions are incidental and arbitrary, like the ratio of one kind of process to another. A stateful behavior, such as this, or any superfluous transformation that isn't a strict requirement of adapting the pipeline to a Kafka producer belongs in a distinct handler. By saying \"no\" to new features, you're implicitly saying \"yes\" to those who need an un-opinionated adapter.\n\n_Such is the magic of Plog._\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/211582435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/airbnb/plog/comments/6173667", "body": "Interesting. More than just readability... If we hit the `Invalid header` condition, would we have retained the message and never released it?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/comments/6173667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/10824174", "body": "Yup, I see now this stat is always upper-triangular.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/10824174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/10824541", "body": "I recalculated each of these by hand. They're correct. But see my [earlier comment](https://github.com/airbnb/plog/pull/26/files#r10824535).\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/10824541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/10824535", "body": "The `intLog2(expectedFragments - 1)` expression is hurting my brain. As I understand it, the bucket index will be the decrement followed by the position of the highest-order bit... but that scale isn't quite logarithmic in bucket size. With this implementation, we get (I believe):\n\n``` ruby\n[1, 2, 3..4, 5..8, 9..16, etc...]   # Note that the first two buckets are the same size. \n```\n\nIf the bucket index were given by `intLog2(expectedFragments) - 1` instead, each successive bucket would double in size and (logically; at least to me) begin on a power of two.\n\n``` ruby\n[1, 2..3, 4..7, 8..15, etc...]\n```\n\nAm I correct? Or way off the mark?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/10824535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/10825366", "body": "I'm not really swayed either way. We can keep the current behavior.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/10825366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/11146282", "body": "That was an incredible cleanup. I love it.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/11146282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/11146328", "body": "Does this mean that there's no UDP or TCP listener running when you start Plog with the default (pre-baked) config?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/11146328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/11146339", "body": "Good idea. ;)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/11146339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/11146376", "body": "And by that I mean \u2014 nice \"catch.\"\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/11146376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/11146411", "body": "I love how this ties everything together.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/11146411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/11375522", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/11375522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/11375538", "body": "Probably doesn't matter but you left an extra space here. ;)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/11375538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/11527737", "body": "At first, this one had me confused, but now I see that you're only operating on the first decimal character! (It's getting late)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/11527737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/12157271", "body": "So I take it that `DefaultByteBufHolder` does not automatically retain the `ByteBuf` passed to its constructor? Does it assume ownership and release it?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/12157271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/12461428", "body": "Yeeeaaah!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/12461428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/12600671", "body": "Looks like you've got some junk here. ;)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/12600671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/29640233", "body": "???\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/29640233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "tay": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/plog/commits/9b14d283f1fcc67902ef0753863f11316068c521", "message": "Merge pull request #105 from airbnb/update-readme\n\nUpdate link to example conf"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/23efd84b5a3fda0c20aadcee284b59f4898f6485", "message": "Update link to example conf"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hardproblems": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/plog/commits/317cccc01bddef77b34e7d54bcaa0d13f7dc5091", "message": "Fix test in .travis.yml to actually push tagged builds"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/53fdc1ee1f15b213d962e20670d28edf82192615", "message": "Merge pull request #104 from airbnb/rong-setup-travis-bintray\n\npublish artifact to bintray after successful build"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/fd3de23190a5a479bc51595e10b17c2565e8f685", "message": "publish artifact to bintray after successful build"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/21add12945f5ebfd5236a5553bbbcfc9d4d75ab9", "message": "Merge pull request #103 from airbnb/rong-plog-client\n\n[plog-client] add a PlogClient"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/e19c1db7996a619ed951e1e638b084b06cd31b83", "message": "[plog-client] add a PlogClient\n\n[plog-client] code review: implement closeable and log better\n\n[plog-client] check constructor args and add unit test for chunk message\n\nfix build issue?\n\n[plog-client] code review and remove openjdk6"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/plog/issues/comments/277894792", "body": "Updated build.gradle to remove the default value. TIL about this operator `?:` with a groovy name  http://docs.groovy-lang.org/latest/html/documentation/#_elvis_operator\r\n\r\n@alexism  PTAL \ud83d\ude47\u200d\u2640\ufe0f ", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/277894792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99018949", "body": "Yea that makes sense. Will add.", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99018949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99019027", "body": "Good catch!", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99019027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99019057", "body": "Will change", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99019057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99019091", "body": "Where should I specify a default chunkSize? ", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99019091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99020000", "body": "nevermind will add a constant and another constructor with no chunkSize required", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99020000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99236273", "body": "good catch, will reduce by 24 bytes to 65483", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99236273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99236362", "body": "good point! will check.", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99236362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99236594", "body": "added test in PlogClientTest", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99236594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99726439", "body": "ah they are set in gradle.properties in aerosolve...bad copy/pasting on my part", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99726439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "lucaluo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/plog/commits/8171bf59a1c71188ca7e3da94695d64399701af7", "message": "Merge pull request #99 from airbnb/luca_luo/add_kafka_encryption_option\n\n[kafka] Add encryption option for message sent through kafka"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/fdebe31b8b8930120d58ace58b4c2bd4a907d7c4", "message": "[kafka] Add encryption option for message sent through kafka"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/plog/issues/comments/130182704", "body": "@xinyaohu thanks for the review.\nThe points you made are reasonable and I will work on that.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/130182704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/130757788", "body": "@xinyaohu: I've made corresponding fixes based on your review, and conducted a performance benchmark. For 3m queries, without encryption, it took 240s to do canonicalization along. With  \"AES/CBC/PKCS5Padding\" encryption, under a similar cpu and memory usage, encryption adds another 105s on top of it. In summary, my take away is that encryption is not significantly costly comparing to canonicalization. \n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/130757788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/130758304", "body": "+@alexism @nelgau \n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/130758304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/130931759", "body": "I made it in kafka handler because 1) kafka is the place where we worry about leak of sensitive information as no ACL exists for kafka right now, and 2) we don't want to have encrypted message along the entire pipeline but instead only in kafka.\nWe can definitely iterate over to more elegant encryption implementation once we have the basics there. On the other hand, as ACL is already on Kafka's roadmap, we might deprecate this solution once Kafka's ACL is in production.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/130931759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/36829169", "body": "this is a fair point. will do\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/36829169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "andykram": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/plog/commits/908fa715807622aeadd8ace3063441b97edacd63", "message": "Merge pull request #89 from pcarrier/gradle2\n\nRound of updates"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xinyaohu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/plog/commits/3dde945133216e47a16914e2d9a69e7a50e1751c", "message": "Merge pull request #98 from xinyaohu/make_kafka_handler_propagete\n\nMake kafka handler able to propagate"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/plog/issues/comments/114664405", "body": "@alexism i will proceed to separate our plog, please help me review this PR \n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/114664405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/114680552", "body": "i will remove the metrics then. i will work on chef change first to separate our plog deployment. after that, we can merge this and test on prod\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/114680552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/114681858", "body": "removed the metric\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/114681858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/130159792", "body": "I want to know the following information before pushing this to prod. What is the impact on both CPU and memory usage? Can you do a simple benchmark to see \n\n1) reading 10m sql to `SQLCanonicalizer`, and parse those to Canonicalizer Form\n2) in addition to 1), apply compression on it. \n\nI would like to see the timing on 1) and 2) to determine how much slower did we make `plog` on prod. \n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/130159792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/130760423", "body": "looks good to me, let us a while to see if others have comment\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/130760423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/36826367", "body": "hmm, this is not an error right? Shall we write something like start application without encryption \n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/36826367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/36826394", "body": "can we initialize this once? \n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/36826394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/36826412", "body": "add a comment here saying that the length of `getIV()` is ciper dependent \n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/36826412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/36997627", "body": "this might not print useful information, i guess it will print something like, \"Fail to entry message: XXException@fjdsl\"\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/36997627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "alexism": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/plog/commits/65b54650209c5d31e669faa58b9a2f86faa39933", "message": "Merge pull request #97 from airbnb/alexism/error_handling\n\nerror handling improvements"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/d23a308db4155696478556e7459469664fcd7ba4", "message": "respect the Guava AbstractService contract\nnotifyFailed or notifyStopped MUST be called, otherwise a terminal state\nwill not be reached."}, {"url": "https://api.github.com/repos/airbnb/plog/commits/9f31e17c13b0d523f2a01da27070eda9fd06673d", "message": "Forcibly terminates the JVM if shutdown fails.\nInvoking System#exist withing a Shutdown hook migh cause a dead lock."}], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/plog/pulls/102", "title": "set the message key", "body": "When the message key is not set, Kafka producer sends the message to the same partition for [10mn](https://github.com/apache/kafka/blob/0.8.2/core/src/main/scala/kafka/producer/async/DefaultEventHandler.scala#L65) (configurable with `topic.metadata.refresh.interval.ms`). This might lead to data imbalance between partitions when the ratio number of producers over partitions is low.\n\nIn this PR, in order to better distribute the messages over the topic partitions, without limiting the batching efficiency, the same key is used every 1000 messages.\n\nThe key is randomly generated every 1000 messages.\n\n@liukai @jun-he @nelgau \n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/plog/issues/comments/98909782", "body": "```\nroot@i-1ea848e3:/home/alexis_midon# jstack -F 20962\nAttaching to process ID 20962, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 24.55-b03\nDeadlock Detection:\n\nNo deadlocks found.\n\nThread 11772: (state = BLOCKED)\n - java.lang.Shutdown.exit(int) @bci=96, line=212 (Interpreted frame)\n - java.lang.Terminator$1.handle(sun.misc.Signal) @bci=8, line=52 (Interpreted frame)\n - sun.misc.Signal$1.run() @bci=8, line=212 (Interpreted frame)\n - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)\n\n\nThread 21026: (state = BLOCKED)\n - java.lang.Shutdown.exit(int) @bci=96, line=212 (Interpreted frame)\n - java.lang.Runtime.exit(int) @bci=14, line=109 (Interpreted frame)\n - java.lang.System.exit(int) @bci=4, line=962 (Interpreted frame)\n - com.airbnb.plog.server.PlogServer$1.failure(com.google.common.util.concurrent.Service) @bci=12, line=67 (Interpreted frame)\n - com.google.common.util.concurrent.ServiceManager$ServiceManagerState$5.call(com.google.common.util.concurrent.ServiceManager$Listener) @bci=5, line=689 (Interpreted frame)\n - com.google.common.util.concurrent.ServiceManager$ServiceManagerState$5.call(java.lang.Object) @bci=5, line=687 (Interpreted frame)\n - com.google.common.util.concurrent.ListenerCallQueue.run() @bci=59, line=118 (Interpreted frame)\n - com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService.execute(java.lang.Runnable) @bci=5, line=297 (Interpreted frame)\n - com.google.common.util.concurrent.ListenerCallQueue.execute() @bci=39, line=86 (Interpreted frame)\n - com.google.common.util.concurrent.ServiceManager$ServiceManagerState.executeListeners() @bci=48, line=700 (Interpreted frame)\n - com.google.common.util.concurrent.ServiceManager$ServiceManagerState.transitionService(com.google.common.util.concurrent.Service, com.google.common.util.concurrent.Service$State, com.google.common.util.concurrent.Service$State) @bci=270, line=671 (Interpreted frame)\n - com.google.common.util.concurrent.ServiceManager$ServiceListener.failed(com.google.common.util.concurrent.Service$State, java.lang.Throwable) @bci=80, line=774 (Interpreted frame)\n - com.google.common.util.concurrent.AbstractService$9.call(com.google.common.util.concurrent.Service$Listener) @bci=9, line=484 (Interpreted frame)\n - com.google.common.util.concurrent.AbstractService$9.call(java.lang.Object) @bci=5, line=482 (Interpreted frame)\n - com.google.common.util.concurrent.ListenerCallQueue.run() @bci=59, line=118 (Interpreted frame)\n - com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService.execute(java.lang.Runnable) @bci=5, line=297 (Interpreted frame)\n - com.google.common.util.concurrent.ListenerCallQueue.execute() @bci=39, line=86 (Interpreted frame)\n - com.google.common.util.concurrent.AbstractService.executeListeners() @bci=38, line=433 (Interpreted frame)\n - com.google.common.util.concurrent.AbstractService.notifyFailed(java.lang.Throwable) @bci=155, line=382 (Interpreted frame)\n - com.airbnb.plog.server.listeners.Listener.access$300(com.airbnb.plog.server.listeners.Listener, java.lang.Throwable) @bci=2, line=18 (Interpreted frame)\n - com.airbnb.plog.server.listeners.Listener$1.operationComplete(io.netty.channel.ChannelFuture) @bci=114, line=74 (Interpreted frame)\n - com.airbnb.plog.server.listeners.Listener$1.operationComplete(io.netty.util.concurrent.Future) @bci=5, line=61 (Interpreted frame)\n - io.netty.util.concurrent.DefaultPromise.notifyListener0(io.netty.util.concurrent.Future, io.netty.util.concurrent.GenericFutureListener) @bci=2, line=679 (Interpreted frame)\n - io.netty.util.concurrent.DefaultPromise$3.run() @bci=8, line=595 (Interpreted frame)\n - io.netty.util.concurrent.GlobalEventExecutor$TaskRunner.run() @bci=13, line=325 (Interpreted frame)\n - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)\n\n\nThread 21024: (state = BLOCKED)\n - java.lang.Shutdown.exit(int) @bci=96, line=212 (Interpreted frame)\n - java.lang.Runtime.exit(int) @bci=14, line=109 (Interpreted frame)\n - java.lang.System.exit(int) @bci=4, line=962 (Interpreted frame)\n - com.airbnb.plog.server.PlogServer$2.run() @bci=50, line=79 (Interpreted frame)\n\n\nThread 21023: (state = BLOCKED)\n - java.lang.Object.wait(long) @bci=0 (Interpreted frame)\n - java.lang.Thread.join(long) @bci=38, line=1281 (Interpreted frame)\n - java.lang.Thread.join() @bci=2, line=1355 (Interpreted frame)\n - java.lang.ApplicationShutdownHooks.runHooks() @bci=87, line=106 (Interpreted frame)\n - java.lang.ApplicationShutdownHooks$1.run() @bci=0, line=46 (Interpreted frame)\n - java.lang.Shutdown.runHooks() @bci=39, line=123 (Interpreted frame)\n - java.lang.Shutdown.sequence() @bci=26, line=167 (Interpreted frame)\n - java.lang.Shutdown.exit(int) @bci=96, line=212 (Interpreted frame)\n - java.lang.Terminator$1.handle(sun.misc.Signal) @bci=8, line=52 (Interpreted frame)\n - sun.misc.Signal$1.run() @bci=8, line=212 (Interpreted frame)\n - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)\n\n\nThread 20969: (state = BLOCKED)\n\n\nThread 21022: (state = IN_NATIVE)\n - sun.nio.ch.EPollArrayWrapper.epollWait(long, int, long, int) @bci=0 (Compiled frame; information may be imprecise)\n - sun.nio.ch.EPollArrayWrapper.poll(long) @bci=18, line=269 (Compiled frame)\n - sun.nio.ch.EPollSelectorImpl.doSelect(long) @bci=28, line=79 (Compiled frame)\n - sun.nio.ch.SelectorImpl.lockAndDoSelect(long) @bci=37, line=87 (Compiled frame)\n - sun.nio.ch.SelectorImpl.select(long) @bci=30, line=98 (Compiled frame)\n - io.netty.channel.nio.NioEventLoop.select() @bci=58, line=618 (Compiled frame)\n - io.netty.channel.nio.NioEventLoop.run() @bci=27, line=306 (Compiled frame)\n - io.netty.util.concurrent.SingleThreadEventExecutor$2.run() @bci=13, line=116 (Interpreted frame)\n - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)\n\n\nThread 21021: (state = IN_NATIVE)\n - sun.nio.ch.EPollArrayWrapper.epollWait(long, int, long, int) @bci=0 (Compiled frame; information may be imprecise)\n - sun.nio.ch.EPollArrayWrapper.poll(long) @bci=18, line=269 (Compiled frame)\n - sun.nio.ch.EPollSelectorImpl.doSelect(long) @bci=28, line=79 (Compiled frame)\n - sun.nio.ch.SelectorImpl.lockAndDoSelect(long) @bci=37, line=87 (Compiled frame)\n - sun.nio.ch.SelectorImpl.select(long) @bci=30, line=98 (Compiled frame)\n - io.netty.channel.nio.NioEventLoop.select() @bci=58, line=618 (Compiled frame)\n - io.netty.channel.nio.NioEventLoop.run() @bci=27, line=306 (Compiled frame)\n - io.netty.util.concurrent.SingleThreadEventExecutor$2.run() @bci=13, line=116 (Interpreted frame)\n - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)\n\n\nThread 20996: (state = BLOCKED)\n\n\nThread 20995: (state = BLOCKED)\n\n\nThread 20990: (state = BLOCKED)\n - java.lang.Object.wait(long) @bci=0 (Interpreted frame)\n - java.lang.ref.ReferenceQueue.remove(long) @bci=44, line=135 (Interpreted frame)\n - java.lang.ref.ReferenceQueue.remove() @bci=2, line=151 (Interpreted frame)\n - java.lang.ref.Finalizer$FinalizerThread.run() @bci=16, line=189 (Interpreted frame)\n\n\nThread 20989: (state = BLOCKED)\n - java.lang.Object.wait(long) @bci=0 (Interpreted frame)\n - java.lang.Object.wait() @bci=2, line=503 (Interpreted frame)\n - java.lang.ref.Reference$ReferenceHandler.run() @bci=46, line=133 (Interpreted frame)\n```\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/98909782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/98912440", "body": "```\n/usr/lib/jvm/jre-7-oracle-x64/bin/java -version\njava version \"1.7.0_55\"\nJava(TM) SE Runtime Environment (build 1.7.0_55-b13)\nJava HotSpot(TM) 64-Bit Server VM (build 24.55-b03, mixed mode)\n```\n\nThis happened on start up.\n\n```\n08:14:54.339 [nioEventLoopGroup-3-1] WARN  io.netty.channel.ChannelInitializer - Failed to initialize a channel. Closing: [id: 0x06366b4b]\njava.lang.NoClassDefFoundError: Could not initialize class com.yammer.metrics.Metrics\n        at kafka.metrics.KafkaMetricsGroup$class.newMeter(KafkaMetricsGroup.scala:46) ~[plog-distro-4.0.0-BETA-25-g6904456-shadow.jar:na]\n        at kafka.producer.ProducerStats.newMeter(ProducerStats.scala:23) ~[plog-distro-4.0.0-BETA-25-g6904456-shadow.jar:na]\n        at kafka.producer.ProducerStats.<init>(ProducerStats.scala:24) ~[plog-distro-4.0.0-BETA-25-g6904456-shadow.jar:na]\n        at kafka.producer.ProducerStatsRegistry$$anonfun$1.apply(ProducerStats.scala:33) ~[plog-distro-4.0.0-BETA-25-g6904456-shadow.jar:na]\n        at kafka.producer.ProducerStatsRegistry$$anonfun$1.apply(ProducerStats.scala:33) ~[plog-distro-4.0.0-BETA-25-g6904456-shadow.jar:na]\n        at kafka.utils.Pool.getAndMaybePut(Pool.scala:61) ~[plog-distro-4.0.0-BETA-25-g6904456-shadow.jar:na]\n        at kafka.producer.ProducerStatsRegistry$.getProducerStats(ProducerStats.scala:37) ~[plog-distro-4.0.0-BETA-25-g6904456-shadow.jar:na]\n        at kafka.producer.async.DefaultEventHandler.<init>(DefaultEventHandler.scala:48) ~[plog-distro-4.0.0-BETA-25-g6904456-shadow.jar:na]\n        at kafka.producer.Producer.<init>(Producer.scala:59) ~[plog-distro-4.0.0-BETA-25-g6904456-shadow.jar:na]\n        at kafka.javaapi.producer.Producer.<init>(Producer.scala:26) ~[plog-distro-4.0.0-BETA-25-g6904456-shadow.jar:na]\n        at com.airbnb.plog.kafka.KafkaProvider.getHandler(KafkaProvider.java:42) ~[plog-distro-4.0.0-BETA-25-g6904456-shadow.jar:na]\n        at com.airbnb.plog.server.listeners.Listener.finalizePipeline(Listener.java:46) ~[plog-distro-4.0.0-BETA-25-g6904456-shadow.jar:na]\n        at com.airbnb.plog.server.listeners.UDPListener$1.initChannel(UDPListener.java:76) ~[plog-distro-4.0.0-BETA-25-g6904456-shadow.jar:na]\n        at com.airbnb.plog.server.listeners.UDPListener$1.initChannel(UDPListener.java:55) ~[plog-distro-4.0.0-BETA-25-g6904456-shadow.jar:na]\n        at io.netty.channel.ChannelInitializer.channelRegistered(ChannelInitializer.java:69) ~[plog-distro-4.0.0-BETA-25-g6904456-shadow.jar:na]\n        at io.netty.channel.DefaultChannelHandlerContext.invokeChannelRegistered(DefaultChannelHandlerContext.java:166) [plog-distro-4.0.0-BETA-25-g6904456-shadow.jar:na]\n        at io.netty.channel.DefaultChannelHandlerContext.fireChannelRegistered(DefaultChannelHandlerContext.java:152) [plog-distro-4.0.0-BETA-25-g6904456-shadow.jar:na]\n        at io.netty.channel.DefaultChannelPipeline.fireChannelRegistered(DefaultChannelPipeline.java:730) [plog-distro-4.0.0-BETA-25-g6904456-shadow.jar:na]\n        at io.netty.channel.AbstractChannel$AbstractUnsafe.register0(AbstractChannel.java:443) [plog-distro-4.0.0-BETA-25-g6904456-shadow.jar:na]\n        at io.netty.channel.AbstractChannel$AbstractUnsafe.access$100(AbstractChannel.java:375) [plog-distro-4.0.0-BETA-25-g6904456-shadow.jar:na]\n        at io.netty.channel.AbstractChannel$AbstractUnsafe$1.run(AbstractChannel.java:419) [plog-distro-4.0.0-BETA-25-g6904456-shadow.jar:na]\n        at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:370) [plog-distro-4.0.0-BETA-25-g6904456-shadow.jar:na]\n        at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:353) [plog-distro-4.0.0-BETA-25-g6904456-shadow.jar:na]\n        at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:116) [plog-distro-4.0.0-BETA-25-g6904456-shadow.jar:na]\n        at java.lang.Thread.run(Thread.java:745) [na:1.7.0_55]\n```\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/98912440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/98915246", "body": "```\nroot@i-1ea848e3:/etc/sv/plog/log# /usr/lib/jvm/jre-7-oracle-x64/bin/jmap -F -histo 20962\nAttaching to process ID 20962, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 24.55-b03\nIterating over heap. This may take a while...\nObject Histogram:\n\nnum       #instances    #bytes  Class description\n--------------------------------------------------------------------------\n1:      317799  12711960    java.util.PriorityQueue$Itr\n2:      317800  7627200 io.netty.util.internal.MpscLinkedQueue$OneTimeTaskAdapter\n3:      10549   5152136 byte[]\n4:      39828   5107344 * MethodKlass\n5:      39828   4950096 * ConstMethodKlass\n6:      3162    3426552 * ConstantPoolKlass\n7:      3156    2648056 * InstanceKlassKlass\n8:      2602    1916928 * ConstantPoolCacheKlass\n9:      8457    587672  char[]\n10:     3427    408704  java.lang.Class\n11:     20204   323264  java.lang.Integer\n12:     5470    320696  * System ObjArray\n13:     4796    266768  short[]\n14:     8400    201600  java.lang.String\n15:     254 136144  * ObjArrayKlassKlass\n16:     4226    135232  java.util.concurrent.ConcurrentHashMap$HashEntry\n17:     255 98904   * MethodDataKlass\n18:     1399    92672   java.lang.Object[]\n19:     1042    83360   java.lang.reflect.Method\n20:     1   80536   java.lang.Integer[]\n21:     4075    65200   java.lang.Object\n22:     853 47768   java.util.zip.ZipFile$ZipFileInflaterInputStream\n23:     853 47768   java.util.zip.ZipFile$ZipFileInputStream\n24:     126 39232   java.util.concurrent.ConcurrentHashMap$HashEntry[]\n25:     1216    38912   java.util.HashMap$Entry\n26:     490 35280   java.lang.reflect.Field\n27:     375 31840   java.util.HashMap$Entry[]\n28:     241 21680   int[]\n29:     905 20104   java.lang.Class[]\n30:     6   16512   java.nio.channels.SelectionKey[]\n31:     339 16272   java.util.HashMap\n32:     433 15000   java.lang.String[]\n33:     357 14280   java.lang.ref.SoftReference\n34:     39  11760   long[]\n35:     300 9600    java.util.Hashtable$Entry\n36:     298 9536    java.lang.ref.WeakReference\n37:     231 9240    java.util.LinkedHashMap$Entry\n38:     375 9000    java.util.HashMap$FrontCache\n39:     370 8880    java.util.ArrayList\n40:     118 8496    java.lang.reflect.Constructor\n41:     140 8480    java.lang.reflect.Method[]\n42:     1   8216    scala.math.BigInt[]\n43:     25  6816    java.util.Hashtable$Entry[]\n44:     163 6520    java.util.WeakHashMap$Entry\n45:     116 6496    java.lang.Package\n46:     256 6144    java.lang.Long\n47:     183 5856    java.util.concurrent.locks.ReentrantLock$NonfairSync\n48:     56  5056    java.util.WeakHashMap$Entry[]\n49:     126 5040    java.util.concurrent.ConcurrentHashMap$Segment\n50:     72  4608    io.netty.buffer.PoolSubpage\n51:     191 4584    javax.management.ImmutableDescriptor\n52:     8   4288    * TypeArrayKlassKlass\n53:     130 4160    com.sun.jmx.mbeanserver.ConvertingMethod\n54:     256 4096    java.lang.Byte\n55:     256 4096    java.lang.Short\n56:     120 3840    com.google.common.cache.LongAdder\n57:     66  3696    java.beans.MethodDescriptor\n58:     89  3560    java.math.BigInteger\n59:     85  3400    com.typesafe.config.impl.SimpleConfigOrigin\n60:     67  3216    ch.qos.logback.classic.Logger\n61:     45  2880    javax.management.openmbean.OpenMBeanAttributeInfoSupport\n62:     51  2856    java.util.WeakHashMap\n63:     51  2800    java.lang.reflect.Field[]\n64:     82  2624    com.typesafe.config.impl.SimpleConfigObject\n65:     137 2568    com.sun.jmx.mbeanserver.MXBeanMapping[]\n66:     64  2560    java.io.ObjectStreamField\n67:     49  2504    javax.management.MBeanAttributeInfo[]\n68:     38  2432    java.net.URL\n69:     60  2400    java.lang.invoke.MethodType$WeakInternSet$Entry\n70:     48  2304    javax.management.MBeanInfo\n71:     32  2304    java.beans.PropertyDescriptor\n72:     11  2288    * KlassKlass\n73:     29  2264    java.util.concurrent.ConcurrentHashMap$Segment[]\n74:     90  2160    sun.reflect.generics.tree.SimpleClassTypeSignature\n75:     67  2144    java.lang.ref.ReferenceQueue\n76:     43  2064    java.util.logging.LogManager$LoggerWeakRef\n77:     128 2048    java.lang.Character\n78:     63  2016    javax.management.MBeanAttributeInfo\n79:     41  1968    java.lang.invoke.MemberName\n80:     41  1968    sun.util.locale.LocaleObjectCache$CacheEntry\n81:     33  1848    java.util.LinkedHashMap\n82:     18  1768    java.lang.invoke.LambdaForm[]\n83:     90  1688    sun.reflect.generics.tree.TypeArgument[]\n84:     70  1680    java.lang.invoke.LambdaForm$Name\n85:     12  1648    boolean[]\n86:     67  1608    java.util.jar.Attributes$Name\n87:     65  1560    com.typesafe.config.impl.ConfigString\n88:     20  1440    java.util.logging.Logger\n89:     89  1424    sun.reflect.generics.tree.ClassTypeSignature\n90:     62  1416    java.lang.reflect.Constructor[]\n91:     29  1392    java.util.concurrent.ConcurrentHashMap\n92:     24  1344    java.security.Provider$Service\n93:     83  1328    java.util.HashMap$KeySet\n94:     83  1328    java.util.HashMap$Values\n95:     60  1328    java.lang.reflect.Type[]\n96:     82  1312    com.typesafe.config.impl.SimpleConfig\n97:     16  1280    com.google.common.cache.LocalCache$Segment\n98:     9   1200    java.beans.MethodDescriptor[]\n99:     49  1176    sun.reflect.NativeConstructorAccessorImpl\n100:        11  1144    java.lang.Thread\n101:        47  1128    java.security.Provider$ServiceKey\n102:        28  1120    java.math.BigDecimal\n103:        69  1104    java.lang.ref.ReferenceQueue$Lock\n104:        34  1088    java.util.logging.LogManager$LogNode\n105:        17  1088    java.lang.invoke.MethodTypeForm\n106:        1   1040    java.lang.Long[]\n107:        1   1040    java.lang.Short[]\n108:        1   1040    java.lang.Byte[]\n109:        39  1016    javax.management.MBeanOperationInfo[]\n110:        18  1008    java.util.TreeMap$Node\n111:        25  1000    java.lang.ref.Finalizer\n112:        41  984 sun.reflect.generics.factory.CoreReflectionFactory\n113:        41  976 javax.management.ObjectName$Property[]\n114:        1   976 com.foundationdb.sql.parser.NodeFactoryImpl$ClassInfo[]\n115:        30  960 java.security.Provider$EngineDescription\n116:        30  960 io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node\n117:        29  928 java.lang.ThreadLocal$ThreadLocalMap$Entry\n118:        28  896 java.lang.invoke.MethodType\n119:        22  880 javax.management.MBeanOperationInfo\n120:        18  864 java.util.TreeMap\n121:        21  840 javax.management.ObjectName\n122:        15  840 javax.management.openmbean.ArrayType\n123:        21  840 sun.util.locale.BaseLocale$Key\n124:        34  816 sun.reflect.generics.scope.ClassScope\n125:        20  800 com.google.common.cache.AbstractCache$SimpleStatsCounter\n126:        10  800 java.lang.ThreadLocal$ThreadLocalMap$Entry[]\n127:        49  784 java.util.concurrent.atomic.AtomicInteger\n128:        49  784 sun.reflect.DelegatingConstructorAccessorImpl\n129:        41  784 sun.reflect.generics.tree.FormalTypeParameter[]\n130:        16  768 java.util.Hashtable\n131:        32  768 com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$IdentityMapping\n132:        38  760 sun.reflect.generics.tree.FieldTypeSignature[]\n133:        31  744 java.util.concurrent.atomic.AtomicLong\n134:        23  736 sun.reflect.generics.repository.ClassRepository\n135:        18  720 sun.reflect.generics.repository.MethodRepository\n136:        30  720 javax.management.ObjectName$Property\n137:        15  720 sun.misc.URLClassPath$JarLoader\n138:        30  720 sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl\n139:        30  720 java.io.ExpiringCache$Entry\n140:        15  720 java.lang.management.PlatformComponent\n141:        18  720 com.sun.jmx.mbeanserver.MXBeanSupport\n142:        28  672 com.typesafe.config.impl.ConfigInt\n143:        28  672 io.netty.channel.ChannelOption\n144:        42  672 java.util.concurrent.locks.ReentrantLock\n145:        21  672 sun.util.locale.BaseLocale\n146:        21  672 javax.management.MBeanParameterInfo\n147:        42  672 java.util.HashMap$EntrySet\n148:        22  656 java.io.ObjectStreamField[]\n149:        40  640 java.util.jar.Attributes\n150:        15  616 java.lang.invoke.LambdaForm$Name[]\n151:        19  608 java.util.PropertyPermission\n152:        19  608 com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference\n153:        25  600 java.util.concurrent.CopyOnWriteArrayList\n154:        25  600 com.sun.jmx.mbeanserver.PerInterface$MethodAndSig\n155:        8   584 double[]\n156:        28  576 java.lang.reflect.TypeVariable[]\n157:        18  576 sun.reflect.generics.tree.MethodTypeSignature\n158:        10  560 sun.invoke.util.Wrapper\n159:        14  560 javax.management.openmbean.SimpleType\n160:        23  552 sun.reflect.generics.tree.ClassSignature\n161:        23  552 java.security.Provider$UString\n162:        23  552 java.lang.invoke.LambdaForm$NamedFunction\n163:        17  544 sun.reflect.generics.reflectiveObjects.TypeVariableImpl\n164:        34  544 ch.qos.logback.core.joran.spi.ElementSelector\n165:        1   528 java.lang.invoke.MethodType$WeakInternSet$Entry[]\n166:        22  528 java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject\n167:        1   528 java.lang.Character[]\n168:        22  528 scala.collection.immutable.HashSet$HashSet1\n169:        13  520 com.sun.jmx.mbeanserver.PerInterface\n170:        4   512 com.google.common.cache.LocalCache\n171:        16  512 org.xml.sax.helpers.LocatorImpl\n172:        8   512 java.nio.DirectByteBuffer\n173:        9   504 javax.management.openmbean.CompositeType\n174:        21  504 javax.management.MBeanParameterInfo[]\n175:        21  504 io.netty.util.internal.logging.Slf4JLogger\n176:        21  504 java.util.Locale\n177:        15  480 java.util.regex.Pattern$Curly\n178:        15  480 java.io.File\n179:        20  480 java.util.concurrent.ConcurrentLinkedQueue\n180:        20  480 com.sun.jmx.mbeanserver.NamedObject\n181:        15  480 java.security.AccessControlContext\n182:        12  480 ch.qos.logback.core.status.InfoStatus\n183:        12  480 io.netty.buffer.PoolChunkList\n184:        20  480 java.util.concurrent.ConcurrentLinkedQueue$Node\n185:        20  480 java.lang.invoke.DirectMethodHandle\n186:        23  456 sun.reflect.generics.tree.ClassTypeSignature[]\n187:        19  456 java.util.Locale$LocaleKey\n188:        14  448 sun.reflect.UnsafeQualifiedStaticObjectFieldAccessorImpl\n189:        8   448 javax.management.openmbean.OpenMBeanParameterInfoSupport\n190:        4   440 java.math.BigInteger[]\n191:        18  432 java.text.DateFormat$Field\n192:        9   432 java.lang.invoke.LambdaForm\n193:        18  432 sun.reflect.generics.scope.MethodScope\n194:        9   432 javassist.CtPrimitiveType\n195:        9   432 sun.nio.cs.UTF_8$Encoder\n196:        9   432 java.beans.BeanDescriptor\n197:        3   432 java.text.DecimalFormat\n198:        17  408 sun.reflect.generics.tree.FormalTypeParameter\n199:        9   408 java.beans.PropertyDescriptor[]\n200:        10  400 java.util.IdentityHashMap\n201:        18  400 javax.management.MBeanNotificationInfo[]\n202:        7   392 java.util.ResourceBundle$CacheKey\n203:        7   392 java.util.Properties\n204:        16  384 com.google.common.cache.LocalCache$AccessQueue$1\n205:        16  384 com.typesafe.config.impl.TokenType\n206:        15  360 sun.nio.ch.SocketOptionRegistry$RegistryKey\n207:        9   360 java.beans.GenericBeanInfo\n208:        15  360 sun.nio.ch.OptionKey\n209:        4   352 io.netty.buffer.PoolSubpage[]\n210:        11  352 java.util.Stack\n211:        2   352 io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node[]\n212:        18  352 sun.reflect.generics.tree.TypeSignature[]\n213:        6   336 java.nio.DirectLongBufferU\n214:        7   336 java.util.ResourceBundle$BundleReference\n215:        7   336 com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeMapping\n216:        14  336 javax.management.StandardMBean\n217:        14  336 java.lang.RuntimePermission\n218:        14  336 java.util.Collections$SingletonList\n219:        14  336 sun.reflect.annotation.AnnotationInvocationHandler\n220:        16  328 java.lang.management.PlatformComponent[]\n221:        5   320 javassist.CtClassType\n222:        13  312 com.foundationdb.sql.parser.SQLParserFeature\n223:        13  312 sun.misc.MetaIndex\n224:        19  304 sun.reflect.generics.tree.TypeVariableSignature\n225:        4   296 sun.invoke.util.Wrapper[]\n226:        9   288 java.util.logging.Level\n227:        9   288 com.sun.xml.internal.ws.org.objectweb.asm.Type\n228:        4   288 java.util.regex.Pattern\n229:        12  288 sun.reflect.NativeMethodAccessorImpl\n230:        12  288 ch.qos.logback.core.joran.spi.HostClassAndPropertyDouble\n231:        9   288 sun.security.jca.ProviderConfig\n232:        4   288 io.netty.channel.DefaultChannelHandlerContext\n233:        9   288 java.util.Vector\n234:        5   280 sun.util.calendar.ZoneInfo\n235:        7   280 ch.qos.logback.core.joran.event.StartEvent\n236:        5   280 sun.management.MemoryPoolImpl\n237:        17  272 java.util.HashSet\n238:        11  264 java.net.StandardSocketOptions$StdSocketOption\n239:        11  264 java.io.FileDescriptor\n240:        16  256 com.google.common.cache.LocalCache$AccessQueue\n241:        8   256 java.security.CodeSource\n242:        8   256 sun.misc.ProxyGenerator$PrimitiveTypeInfo\n243:        8   256 java.lang.OutOfMemoryError\n244:        4   256 java.util.jar.JarFile\n245:        16  256 java.util.concurrent.atomic.AtomicReferenceArray\n246:        2   256 sun.nio.ch.DatagramChannelImpl\n247:        10  240 java.util.Arrays$ArrayList\n248:        10  240 java.util.regex.Pattern$GroupTail\n249:        6   240 com.sun.org.apache.xerces.internal.utils.XMLSecurityManager$Limit\n250:        10  240 com.typesafe.config.impl.Token\n251:        15  240 java.lang.ThreadLocal\n252:        6   240 java.security.ProtectionDomain\n253:        10  240 java.lang.ThreadLocal$ThreadLocalMap\n254:        10  240 java.util.regex.Pattern$GroupHead\n255:        2   240 io.netty.channel.socket.nio.NioDatagramChannel\n256:        14  240 javax.management.MBeanConstructorInfo[]\n257:        7   232 scala.collection.immutable.HashSet[]\n258:        2   224 io.netty.channel.nio.NioEventLoop\n259:        7   224 java.util.ResourceBundle$LoaderReference\n260:        7   224 java.util.regex.Pattern$Branch\n261:        7   224 ch.qos.logback.core.joran.event.EndEvent\n262:        2   224 java.util.GregorianCalendar\n263:        3   216 java.util.concurrent.ThreadPoolExecutor\n264:        9   216 java.util.logging.Level$KnownLevel\n265:        9   216 sun.util.logging.PlatformLogger$Level\n266:        7   216 java.lang.Boolean[]\n267:        2   208 java.util.concurrent.ThreadLocalRandom\n268:        5   200 sun.management.MemoryPoolImpl$PoolSensor\n269:        5   200 java.util.Collections$SingletonMap\n270:        5   200 javassist.ClassPool\n271:        5   200 sun.management.MemoryPoolImpl$CollectionSensor\n272:        8   192 java.util.regex.Pattern$Ctype\n273:        6   192 sun.reflect.annotation.AnnotationType\n274:        6   192 java.lang.annotation.ElementType[]\n275:        3   192 io.netty.util.concurrent.ScheduledFutureTask\n276:        2   192 java.text.DateFormat$Field[]\n277:        12  192 sun.reflect.DelegatingMethodAccessorImpl\n278:        2   192 com.airbnb.plog.server.stats.SimpleStatisticsReporter\n279:        8   192 java.util.ArrayDeque\n280:        8   192 java.lang.annotation.ElementType\n281:        2   192 sun.util.calendar.Gregorian$Date\n282:        12  192 org.msgpack.template.GenericCollectionTemplate\n283:        4   192 java.util.zip.Inflater\n284:        8   192 java.math.RoundingMode\n285:        3   192 java.text.DecimalFormatSymbols\n286:        5   176 float[]\n287:        7   176 java.util.regex.Pattern$Node[]\n288:        11  176 java.text.NumberFormat$Field\n289:        7   168 ch.qos.logback.core.spi.ContextAwareBase\n290:        7   168 scala.collection.immutable.HashSet$HashTrieSet\n291:        7   168 com.typesafe.config.impl.SimpleConfigList\n292:        3   168 javax.management.openmbean.OpenMBeanOperationInfoSupport\n293:        7   168 java.util.Collections$UnmodifiableRandomAccessList\n294:        3   168 java.net.SocketPermission\n295:        7   168 ch.qos.logback.classic.Level\n296:        7   168 com.sun.org.apache.xerces.internal.util.FeatureState\n297:        7   168 org.xml.sax.helpers.AttributesImpl\n298:        7   168 java.util.regex.Pattern$SliceI\n299:        7   168 java.net.NetPermission\n300:        5   160 java.util.zip.ZipCoder\n301:        5   160 java.security.Permissions\n302:        5   160 * CompilerICHolderKlass\n303:        2   160 java.util.jar.JarFile$JarFileEntry\n304:        10  160 java.util.Formatter$Flags\n305:        2   144 sun.nio.ch.EPollSelectorImpl\n306:        6   144 java.lang.ProcessEnvironment$Variable\n307:        6   144 java.util.concurrent.LinkedBlockingQueue$Node\n308:        2   144 com.foundationdb.sql.parser.SQLParserFeature[]\n309:        6   144 sun.misc.PerfCounter\n310:        9   144 java.util.LinkedHashSet\n311:        6   144 javassist.ClassPathList\n312:        6   144 com.sun.org.apache.xerces.internal.util.Status\n313:        2   144 java.math.BigDecimal[]\n314:        6   144 java.lang.ProcessEnvironment$Value\n315:        2   144 sun.nio.ch.EPollArrayWrapper\n316:        6   144 com.typesafe.config.ConfigValueType\n317:        3   144 java.util.concurrent.LinkedBlockingQueue\n318:        2   128 java.text.SimpleDateFormat\n319:        4   128 java.io.FileInputStream\n320:        4   128 javax.management.StandardEmitterMBean\n321:        4   128 sun.util.LocaleServiceProviderPool\n322:        8   128 java.util.concurrent.atomic.AtomicLongArray\n323:        4   128 io.netty.util.concurrent.DefaultPromise\n324:        4   128 javax.management.MBeanNotificationInfo\n325:        2   128 io.netty.channel.socket.nio.NioDatagramChannelConfig\n326:        4   128 com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$ArrayMapping\n327:        4   128 java.util.LinkedList\n328:        4   128 com.google.common.cache.LocalCache$Segment[]\n329:        8   128 ch.qos.logback.core.joran.spi.ElementPath\n330:        4   128 java.lang.ClassLoader$NativeLibrary\n331:        2   128 io.netty.util.internal.chmv8.ConcurrentHashMapV8\n332:        4   128 org.msgpack.template.TemplateRegistry\n333:        2   128 java.io.ExpiringCache$1\n334:        4   128 org.msgpack.template.builder.JavassistTemplateBuilder\n335:        7   128 java.lang.StackTraceElement[]\n336:        2   128 com.airbnb.plog.server.listeners.UDPListener\n337:        5   120 com.sun.org.apache.xerces.internal.util.PropertyState\n338:        1   120 com.airbnb.plog.server.PlogServer$2\n339:        5   120 ch.qos.logback.core.util.AggregationType\n340:        3   120 java.text.DigitList\n341:        5   120 com.sun.org.apache.xerces.internal.utils.XMLSecurityManager$State\n342:        5   120 com.sun.org.apache.xerces.internal.utils.XMLSecurityPropertyManager$State\n343:        3   120 sun.misc.Cleaner\n344:        5   120 ch.qos.logback.core.pattern.parser.TokenStream$TokenizerState\n345:        5   120 java.util.regex.Pattern$Single\n346:        3   120 sun.misc.URLClassPath\n347:        5   120 ch.qos.logback.core.subst.Token$Type\n348:        1   112 java.util.logging.LogManager$Cleaner\n349:        2   112 com.sun.jmx.mbeanserver.MBeanIntrospector$MBeanInfoMap\n350:        1   112 scala.package$\n351:        2   112 com.sun.jmx.mbeanserver.MBeanIntrospector$PerInterfaceMap\n352:        2   112 sun.nio.cs.StreamEncoder\n353:        1   112 java.lang.ref.Finalizer$FinalizerThread\n354:        7   112 java.util.regex.Pattern$BranchConn\n355:        1   104 com.yammer.metrics.Metrics$1\n356:        1   104 java.lang.ref.Reference$ReferenceHandler\n357:        2   96  java.lang.ThreadGroup\n358:        2   96  javax.management.openmbean.TabularType\n359:        4   96  com.google.common.collect.AbstractIterator$State\n360:        4   96  ch.qos.logback.core.subst.Token\n361:        2   96  io.netty.channel.DefaultChannelPromise\n362:        3   96  java.security.BasicPermissionCollection\n363:        4   96  java.util.zip.ZStreamRef\n364:        4   96  java.util.regex.Pattern$BitClass\n365:        4   96  ch.qos.logback.core.pattern.parser.Token\n366:        6   96  java.security.ProtectionDomain$Key\n367:        3   96  java.lang.StackTraceElement\n368:        4   96  com.typesafe.config.impl.OriginType\n369:        1   96  sun.security.jca.ProviderList$1\n370:        3   96  java.util.Collections$UnmodifiableMap\n371:        3   96  com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$EnumMapping\n372:        3   96  com.sun.org.apache.xerces.internal.utils.XMLSecurityManager$NameMap\n373:        3   96  ch.qos.logback.core.joran.action.AppenderRefAction\n374:        1   96  long[][]\n375:        4   96  java.util.regex.Pattern$1\n376:        2   96  sun.management.GarbageCollectorImpl\n377:        2   96  sun.nio.ch.DatagramSocketAdaptor\n378:        2   96  java.lang.Thread[]\n379:        4   96  java.util.Collections$SynchronizedRandomAccessList\n380:        1   96  java.lang.invoke.MethodType[]\n381:        4   96  ch.qos.logback.core.pattern.LiteralConverter\n382:        4   96  io.netty.channel.VoidChannelPromise\n383:        2   96  java.io.BufferedWriter\n384:        4   96  java.math.MathContext\n385:        3   96  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node\n386:        4   96  org.msgpack.template.builder.TemplateBuilderChain\n387:        3   96  com.google.common.util.concurrent.ListenerCallQueue\n388:        2   96  java.nio.HeapByteBuffer\n389:        1   96  ch.qos.logback.classic.LoggerContext\n390:        3   96  java.util.PriorityQueue\n391:        3   96  com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService\n392:        4   96  org.msgpack.template.MapTemplate\n393:        2   96  com.google.common.cache.LocalCache$EntryFactory[]\n394:        1   96  sun.security.provider.Sun\n395:        3   96  java.util.Collections$SynchronizedMap\n396:        6   96  java.security.Principal[]\n397:        2   96  io.netty.channel.AbstractChannel$CloseFuture\n398:        1   88  scala.reflect.ManifestFactory$\n399:        1   88  scala.reflect.ClassTag$\n400:        1   88  scala.collection.convert.Wrappers$\n401:        1   88  scala.collection.JavaConversions$\n402:        5   80  javassist.ClassPoolTail\n403:        1   80  sun.misc.Launcher$AppClassLoader\n404:        2   80  io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe\n405:        2   80  java.util.Locale$Category\n406:        2   80  com.google.common.base.Stopwatch\n407:        1   80  sun.net.www.protocol.jar.URLJarFile\n408:        1   80  scala.collection.mutable.HashEntry[]\n409:        2   80  sun.nio.ch.SelectionKeyImpl\n410:        2   80  io.netty.util.Signal\n411:        2   80  com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping\n412:        1   80  sun.misc.Launcher$ExtClassLoader\n413:        2   80  com.google.common.util.concurrent.Service$State[]\n414:        1   80  com.typesafe.config.impl.TokenType[]\n415:        2   80  java.io.ExpiringCache\n416:        1   80  java.util.WeakHashMap[]\n417:        3   72  java.util.LinkedList$Node\n418:        3   72  java.util.BitSet\n419:        3   72  java.io.FilePermissionCollection\n420:        3   72  java.util.regex.Pattern$Start\n421:        3   72  ch.qos.logback.core.subst.Tokenizer$TokenizerState\n422:        1   72  java.util.logging.LogManager$RootLogger\n423:        1   72  ch.qos.logback.core.ConsoleAppender\n424:        3   72  com.typesafe.config.impl.ConfigBoolean\n425:        3   72  java.lang.annotation.RetentionPolicy\n426:        3   72  ch.qos.logback.core.joran.action.NOPAction\n427:        3   72  sun.misc.Signal\n428:        1   72  scala.reflect.ClassManifestFactory$\n429:        1   72  io.netty.buffer.PoolArena$DirectArena\n430:        3   72  sun.security.provider.PolicyFile$PolicyEntry\n431:        2   72  sun.security.jca.ProviderConfig[]\n432:        3   72  java.security.ProtectionDomain[]\n433:        3   72  ch.qos.logback.core.joran.action.PropertyAction\n434:        3   72  java.util.concurrent.Executors$RunnableAdapter\n435:        3   72  com.google.common.util.concurrent.AbstractService$3\n436:        1   72  javax.management.openmbean.SimpleType[]\n437:        3   72  com.typesafe.config.ConfigSyntax\n438:        3   72  java.util.jar.Manifest\n439:        3   72  ch.qos.logback.core.spi.FilterReply\n440:        1   72  io.netty.buffer.PoolArena$HeapArena\n441:        3   72  com.google.common.util.concurrent.Monitor\n442:        3   72  java.security.SecurityPermission\n443:        3   72  java.util.Collections$SynchronizedSet\n444:        2   64  sun.util.locale.UnicodeLocaleExtension\n445:        2   64  sun.nio.fs.UnixPath\n446:        2   64  com.sun.org.apache.xerces.internal.utils.XMLSecurityPropertyManager$Property\n447:        4   64  java.util.regex.Pattern$Dot\n448:        4   64  org.msgpack.template.GenericMapTemplate\n449:        1   64  sun.security.provider.NativePRNG$RandomIO\n450:        4   64  java.util.Collections$UnmodifiableSet\n451:        2   64  sun.nio.ch.AllocatedNativeObject\n452:        4   64  org.msgpack.template.AnyTemplate\n453:        2   64  com.google.common.util.concurrent.AbstractService$5\n454:        1   64  com.foundationdb.sql.parser.SQLParser\n455:        2   64  ch.qos.logback.core.joran.event.BodyEvent\n456:        2   64  com.google.common.collect.RegularImmutableList\n457:        2   64  java.lang.ref.ReferenceQueue$Null\n458:        2   64  java.io.FileOutputStream\n459:        4   64  org.msgpack.template.builder.OrdinalEnumTemplateBuilder\n460:        2   64  java.lang.VirtualMachineError\n461:        2   64  java.io.OutputStreamWriter\n462:        1   64  com.google.common.cache.CacheStats\n463:        4   64  com.sun.proxy.$Proxy3\n464:        2   64  ch.qos.logback.core.util.CachingDateFormatter\n465:        2   64  com.google.common.util.concurrent.AbstractService$6\n466:        1   64  ch.qos.logback.classic.PatternLayout\n467:        4   64  org.msgpack.template.SetTemplate\n468:        4   64  com.sun.proxy.$Proxy2\n469:        2   64  com.google.common.util.concurrent.AbstractService$7\n470:        2   64  io.netty.buffer.EmptyByteBuf\n471:        2   64  java.io.PrintStream\n472:        4   64  org.msgpack.template.builder.ReflectionBeansTemplateBuilder\n473:        2   64  com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping\n474:        4   64  java.util.concurrent.atomic.AtomicBoolean\n475:        2   64  java.util.concurrent.Semaphore$NonfairSync\n476:        2   64  com.airbnb.plog.server.pipeline.EndOfPipeline\n477:        2   64  ch.qos.logback.classic.joran.action.LevelAction\n478:        2   64  ch.qos.logback.core.joran.spi.ConsoleTarget\n479:        2   64  java.lang.StringCoding$StringEncoder\n480:        2   64  java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl\n481:        2   64  java.nio.DirectByteBuffer$Deallocator\n482:        2   64  javax.management.MBeanConstructorInfo\n483:        2   64  io.netty.channel.nio.SelectedSelectionKeySet\n484:        4   64  org.msgpack.template.builder.ArrayTemplateBuilder\n485:        2   64  com.airbnb.plog.server.fragmentation.Defragmenter\n486:        2   64  java.io.FilePermission\n487:        2   64  io.netty.channel.nio.NioEventLoopGroup\n488:        4   64  org.msgpack.template.CollectionTemplate\n489:        2   64  io.netty.channel.DefaultChannelPipeline\n490:        4   64  org.msgpack.template.ListTemplate\n491:        2   64  com.google.common.util.concurrent.AbstractService$8\n492:        4   64  javassist.LoaderClassPath\n493:        1   64  java.util.ResourceBundle$RBClassLoader\n494:        2   64  java.lang.annotation.RetentionPolicy[]\n495:        1   56  scala.collection.immutable.Vector\n496:        1   56  ch.qos.logback.classic.encoder.PatternLayoutEncoder\n497:        1   56  com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$Mappings\n498:        1   56  java.lang.Runnable[]\n499:        1   56  java.text.DateFormatSymbols\n500:        1   56  javassist.CtClass[]\n501:        1   56  sun.util.logging.PlatformLogger$Level[]\n502:        1   48  java.beans.WeakIdentityMap$Entry[]\n503:        1   48  ch.qos.logback.core.joran.spi.InterpretationContext\n504:        2   48  java.lang.UNIXProcess$LaunchMechanism\n505:        2   48  com.airbnb.plog.server.packetloss.ListenerHoleDetector$1\n506:        3   48  ch.qos.logback.core.spi.LogbackLock\n507:        2   48  sun.misc.Signal$1\n508:        1   48  io.netty.util.concurrent.GlobalEventExecutor\n509:        3   48  sun.net.www.protocol.jar.Handler\n510:        2   48  java.net.Inet4Address\n511:        1   48  ch.qos.logback.classic.pattern.ExtendedThrowableProxyConverter\n512:        1   48  scala.Predef$\n513:        1   48  ch.qos.logback.core.joran.action.DefinePropertyAction\n514:        2   48  java.net.InetAddress$Cache$Type\n515:        3   48  io.netty.channel.FixedRecvByteBufAllocator$HandleImpl\n516:        2   48  sun.management.ManagementFactoryHelper$1\n517:        1   48  ch.qos.logback.core.joran.spi.Interpreter\n518:        3   48  java.lang.Boolean\n519:        2   48  sun.security.jca.ProviderList$3\n520:        2   48  com.google.common.util.concurrent.AbstractService$4\n521:        2   48  java.io.File$PathStatus\n522:        2   48  com.google.common.util.concurrent.ServiceManager$ServiceListener\n523:        2   48  io.netty.util.internal.MpscLinkedQueue\n524:        2   48  java.util.concurrent.Executors$DefaultThreadFactory\n525:        2   48  java.nio.charset.CoderResult\n526:        1   48  com.google.common.util.concurrent.ServiceManager$ServiceManagerState\n527:        2   48  java.util.regex.Pattern$Dollar\n528:        1   48  java.lang.Object[][]\n529:        2   48  sun.reflect.UnsafeObjectFieldAccessorImpl\n530:        1   48  com.google.common.collect.Multimaps$CustomSetMultimap\n531:        2   48  java.lang.management.ManagementPermission\n532:        1   48  java.util.concurrent.TimeUnit[]\n533:        1   48  java.math.RoundingMode[]\n534:        2   48  scala.math.BigDecimal\n535:        2   48  io.netty.util.concurrent.DefaultPromise$3\n536:        2   48  sun.misc.NativeSignalHandler\n537:        2   48  java.net.InetAddress[]\n538:        2   48  com.sun.jmx.mbeanserver.WeakIdentityHashMap\n539:        2   48  com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport$LoaderEntry\n540:        2   48  sun.util.locale.LocaleExtensions\n541:        2   48  java.net.InetAddress$InetAddressHolder\n542:        2   48  io.netty.util.concurrent.DefaultPromise$LateListenerNotifier\n543:        3   48  com.sun.proxy.$Proxy1\n544:        2   48  java.lang.invoke.MethodHandles$Lookup\n545:        1   48  java.util.concurrent.locks.ReentrantReadWriteLock$FairSync\n546:        2   48  com.airbnb.plog.server.packetloss.ListenerHoleDetector\n547:        2   48  com.google.common.util.concurrent.AbstractService$StateSnapshot\n548:        2   48  io.netty.channel.SucceededChannelFuture\n549:        1   48  scala.Array$\n550:        2   48  io.netty.util.internal.UnsafeAtomicIntegerFieldUpdater\n551:        2   48  java.net.InetAddress$Cache\n552:        2   48  java.net.StandardProtocolFamily\n553:        3   48  io.netty.util.concurrent.DefaultPromise$CauseHolder\n554:        3   48  java.util.Collections$SingletonSet\n555:        2   48  java.lang.UNIXProcess$LaunchMechanism[]\n556:        1   48  java.util.logging.LogManager\n557:        1   48  javassist.compiler.KeywordTable\n558:        2   48  java.io.BufferedOutputStream\n559:        2   48  com.airbnb.plog.server.packetloss.ListenerHoleDetector$2\n560:        3   48  java.text.AttributedCharacterIterator$Attribute\n561:        2   48  sun.security.jca.ProviderList\n562:        2   48  com.airbnb.plog.server.listeners.Listener$1\n563:        2   48  io.netty.util.concurrent.SingleThreadEventExecutor[]\n564:        1   48  scala.util.Properties$\n565:        2   48  java.util.Date\n566:        1   48  ch.qos.logback.classic.pattern.DateConverter\n567:        2   48  io.netty.buffer.PoolArena[]\n568:        3   48  com.sun.org.apache.xerces.internal.impl.dv.dtd.ListDatatypeValidator\n569:        3   48  java.nio.charset.CodingErrorAction\n570:        3   48  io.netty.channel.FixedRecvByteBufAllocator\n571:        2   48  com.typesafe.config.impl.ResolveStatus\n572:        2   48  java.util.regex.Pattern$5\n573:        2   48  java.util.regex.Pattern$Ques\n574:        2   48  io.netty.util.UniqueName\n575:        2   48  ch.qos.logback.core.subst.Node$Type\n576:        1   48  io.netty.buffer.PooledByteBufAllocator\n577:        2   48  java.net.InetAddress$CacheEntry\n578:        1   40  sun.text.resources.FormatData_en_US\n579:        1   40  scala.collection.immutable.Vector$\n580:        1   40  java.lang.management.MemoryPoolMXBean[]\n581:        1   40  java.util.IdentityHashMap$KeyIterator\n582:        1   40  sun.util.resources.CurrencyNames_en_US\n583:        1   40  sun.nio.cs.StandardCharsets$Cache\n584:        1   40  ch.qos.logback.core.pattern.parser.TokenStream$TokenizerState[]\n585:        1   40  sun.text.resources.FormatData\n586:        1   40  scala.math.BigDecimal$\n587:        1   40  java.util.EnumMap\n588:        1   40  com.google.common.collect.AbstractMapBasedMultimap$AsMap\n589:        1   40  com.typesafe.config.ConfigValueType[]\n590:        1   40  com.airbnb.plog.upshot.UpshotHandler\n591:        1   40  sun.util.resources.CalendarData\n592:        1   40  sun.management.MemoryManagerImpl\n593:        1   40  ch.qos.logback.classic.pattern.LoggerConverter\n594:        1   40  ch.qos.logback.core.joran.spi.ConfigurationWatchList\n595:        1   40  ch.qos.logback.core.util.AggregationType[]\n596:        1   40  com.sun.jmx.interceptor.DefaultMBeanServerInterceptor\n597:        1   40  java.util.ResourceBundle$1\n598:        1   40  ch.qos.logback.core.BasicStatusManager\n599:        1   40  com.sun.org.apache.xerces.internal.utils.XMLSecurityManager$State[]\n600:        1   40  ch.qos.logback.core.subst.Token$Type[]\n601:        1   40  sun.util.resources.CalendarData_en\n602:        1   40  sun.util.resources.CurrencyNames\n603:        1   40  sun.nio.cs.StandardCharsets$Classes\n604:        1   40  io.netty.buffer.PooledByteBufAllocator$PoolThreadLocalCache\n605:        1   40  com.sun.org.apache.xerces.internal.utils.XMLSecurityPropertyManager$State[]\n606:        1   40  scala.math.BigInt$\n607:        2   40  com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport$LoaderEntry[]\n608:        1   40  java.beans.WeakIdentityMap$Entry\n609:        1   40  com.sun.org.apache.xerces.internal.utils.XMLSecurityManager$Limit[]\n610:        1   40  java.io.BufferedInputStream\n611:        1   40  sun.nio.cs.UTF_8$Decoder\n612:        1   40  scala.sys.SystemProperties$\n613:        1   40  sun.text.resources.FormatData_en\n614:        1   40  sun.nio.cs.StandardCharsets$Aliases\n615:        1   40  com.sun.jmx.mbeanserver.JmxMBeanServer\n616:        1   40  scala.collection.mutable.HashMap\n617:        1   40  java.lang.invoke.LambdaForm$Name[][]\n618:        1   40  com.sun.jmx.mbeanserver.MBeanServerDelegateImpl\n619:        1   40  com.sun.org.apache.xerces.internal.util.Status[]\n620:        2   32  com.airbnb.plog.server.fragmentation.Defragmenter$1\n621:        1   32  sun.nio.cs.StandardCharsets\n622:        1   32  ch.qos.logback.core.helpers.CyclicBuffer\n623:        1   32  java.lang.StringCoding$StringDecoder\n624:        1   32  scala.util.control.BreakControl\n625:        1   32  com.typesafe.config.ConfigSyntax[]\n626:        1   32  ch.qos.logback.classic.joran.action.LoggerAction\n627:        1   32  ch.qos.logback.classic.pattern.LevelConverter\n628:        1   32  kafka.producer.ProducerConfig$\n629:        2   32  scala.Some\n630:        1   32  ch.qos.logback.core.joran.action.TimestampAction\n631:        1   32  com.google.common.util.concurrent.AbstractService$9\n632:        2   32  com.google.common.base.Joiner\n633:        1   32  ch.qos.logback.core.joran.action.NestedComplexPropertyIA\n634:        1   32  java.lang.invoke.MethodType$WeakInternSet\n635:        1   32  sun.nio.fs.LinuxFileSystem\n636:        1   32  ch.qos.logback.core.joran.action.StatusListenerAction\n637:        1   32  java.lang.management.MemoryManagerMXBean[]\n638:        1   32  com.sun.beans.finder.BeanInfoFinder\n639:        1   32  ch.qos.logback.classic.joran.action.ReceiverAction\n640:        1   32  java.util.RegularEnumSet\n641:        1   32  scala.reflect.ManifestFactory$$anon$1\n642:        1   32  sun.reflect.generics.reflectiveObjects.WildcardTypeImpl\n643:        1   32  ch.qos.logback.classic.joran.action.RootLoggerAction\n644:        2   32  javassist.ClassClassPath\n645:        2   32  com.google.common.cache.LocalCache$LocalManualCache\n646:        1   32  com.sun.jmx.mbeanserver.Repository\n647:        1   32  io.netty.util.concurrent.DefaultThreadFactory\n648:        2   32  scala.collection.generic.GenTraversableFactory$ReusableCBF\n649:        1   32  kafka.utils.Utils$\n650:        1   32  com.yammer.metrics.core.MetricsRegistry\n651:        1   32  ch.qos.logback.classic.pattern.MessageConverter\n652:        2   32  java.util.concurrent.Semaphore\n653:        2   32  com.airbnb.plog.server.fragmentation.Defragmenter$2\n654:        1   32  ch.qos.logback.core.joran.action.NestedBasicPropertyIA\n655:        2   32  com.google.common.cache.LocalCache$LocalLoadingCache\n656:        1   32  ch.qos.logback.classic.pattern.LineSeparatorConverter\n657:        1   32  java.lang.UnsupportedOperationException\n658:        1   32  java.lang.ArithmeticException\n659:        1   32  sun.management.MemoryImpl\n660:        2   32  com.sun.beans.WeakCache\n661:        1   32  ch.qos.logback.classic.joran.action.ConfigurationAction\n662:        1   32  ch.qos.logback.classic.sift.SiftAction\n663:        1   32  ch.qos.logback.core.joran.conditional.IfAction\n664:        2   32  java.util.concurrent.atomic.AtomicReference\n665:        2   32  com.sun.org.apache.xerces.internal.impl.dv.dtd.ENTITYDatatypeValidator\n666:        1   32  scala.reflect.ManifestFactory$$anon$4\n667:        1   32  com.google.common.collect.AbstractIterator$State[]\n668:        1   32  com.google.common.util.concurrent.ServiceManager$ServiceManagerState$3\n669:        1   32  ch.qos.logback.classic.joran.action.LoggerContextListenerAction\n670:        1   32  sun.security.provider.PolicyFile$PolicyInfo\n671:        1   32  com.google.common.util.concurrent.ServiceManager$ServiceManagerState$2\n672:        1   32  java.lang.NullPointerException\n673:        1   32  java.util.concurrent.locks.ReentrantLock$FairSync\n674:        1   32  java.beans.ThreadGroupContext\n675:        1   32  scala.math.package$\n676:        1   32  scala.reflect.ManifestFactory$$anon$3\n677:        1   32  ch.qos.logback.core.subst.Tokenizer$TokenizerState[]\n678:        1   32  com.typesafe.config.impl.OriginType[]\n679:        1   32  java.util.concurrent.SynchronousQueue\n680:        1   32  sun.nio.fs.NativeBuffer\n681:        1   32  com.sun.org.apache.xerces.internal.impl.XMLEntityScanner$1\n682:        1   32  ch.qos.logback.classic.joran.action.EvaluatorAction\n683:        1   32  ch.qos.logback.core.joran.conditional.ElseAction\n684:        1   32  ch.qos.logback.core.joran.action.IncludeAction\n685:        1   32  java.nio.channels.ClosedChannelException\n686:        2   32  io.netty.channel.DefaultChannelPipeline$HeadHandler\n687:        1   32  kafka.client.ClientUtils$\n688:        2   32  io.netty.util.concurrent.SingleThreadEventExecutor$2\n689:        1   32  ch.qos.logback.classic.joran.JoranConfigurator\n690:        1   32  ch.qos.logback.core.joran.spi.SimpleRuleStore\n691:        1   32  java.util.concurrent.CancellationException\n692:        2   32  java.nio.channels.spi.AbstractSelector$1\n693:        1   32  scala.reflect.ManifestFactory$$anon$5\n694:        1   32  java.util.concurrent.TimeoutException\n695:        1   32  java.lang.ThreadGroup[]\n696:        1   32  java.io.UnixFileSystem\n697:        1   32  ch.qos.logback.classic.spi.LoggerContextVO\n698:        1   32  java.beans.ThreadGroupContext$1\n699:        1   32  scala.collection.IndexedSeq$\n700:        1   32  com.sun.org.apache.xerces.internal.utils.XMLSecurityManager$NameMap[]\n701:        2   32  io.netty.util.concurrent.SingleThreadEventExecutor$PurgeTask\n702:        2   32  scala.math.BigInt\n703:        2   32  org.msgpack.MessagePack\n704:        2   32  java.lang.Shutdown$Lock\n705:        1   32  com.google.common.cache.LocalCache$Strength[]\n706:        2   32  io.netty.util.concurrent.MultithreadEventExecutorGroup$PowerOfTwoEventExecutorChooser\n707:        2   32  io.netty.util.internal.__matchers__.io.netty.channel.socket.DatagramPacketMatcher\n708:        2   32  io.netty.util.concurrent.MultithreadEventExecutorGroup$1\n709:        1   32  ch.qos.logback.core.joran.action.ParamAction\n710:        1   32  scala.reflect.ManifestFactory$$anon$2\n711:        2   32  java.nio.ByteOrder\n712:        1   32  com.typesafe.config.impl.ConfigDouble\n713:        1   32  ch.qos.logback.core.joran.action.ConversionRuleAction\n714:        2   32  java.lang.InheritableThreadLocal\n715:        2   32  java.lang.Enum[]\n716:        1   32  ch.qos.logback.core.spi.FilterReply[]\n717:        1   32  ch.qos.logback.classic.pattern.ThreadConverter\n718:        1   32  ch.qos.logback.core.joran.conditional.ThenAction\n719:        1   32  java.text.DontCareFieldPosition\n720:        1   32  java.lang.OutOfMemoryError[]\n721:        1   32  ch.qos.logback.core.joran.action.NewRuleAction\n722:        2   32  java.lang.annotation.Annotation[]\n723:        1   32  sun.security.provider.PolicyFile\n724:        2   32  io.netty.channel.DefaultChannelPipeline$TailHandler\n725:        1   32  ch.qos.logback.core.joran.action.AppenderAction\n726:        1   32  java.nio.channels.NotYetConnectedException\n727:        1   24  scala.reflect.ManifestFactory$$anon$10\n728:        1   24  java.lang.StringBuilder\n729:        1   24  java.util.ResourceBundle$Control$CandidateListCache\n730:        1   24  sun.launcher.LauncherHelper\n731:        1   24  com.sun.jmx.mbeanserver.MXBeanLookup\n732:        1   24  com.google.common.util.concurrent.Service$State$4\n733:        1   24  kafka.message.SnappyCompressionCodec$\n734:        1   24  java.util.concurrent.TimeUnit$6\n735:        1   24  com.typesafe.config.impl.ConfigImpl$LoaderCache\n736:        1   24  java.util.Collections$EmptyMap\n737:        1   24  ch.qos.logback.core.joran.action.ContextPropertyAction\n738:        1   24  org.slf4j.impl.StaticLoggerBinder\n739:        1   24  sun.nio.ch.DatagramSocketAdaptor$1\n740:        1   24  com.google.common.cache.CacheBuilder$OneWeigher\n741:        1   24  scala.collection.Seq$\n742:        1   24  java.util.concurrent.TimeUnit$5\n743:        1   24  sun.util.locale.BaseLocale$Cache\n744:        1   24  com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport\n745:        1   24  com.google.common.cache.LocalCache$Strength$3\n746:        1   24  java.util.logging.LogManager$LoggerContext\n747:        1   24  scala.reflect.ManifestFactory$$anon$7\n748:        1   24  ch.qos.logback.classic.joran.action.ContextNameAction\n749:        1   24  java.security.ProtectionDomain$3$1\n750:        1   24  scala.sys.BooleanProp$BooleanPropImpl\n751:        1   24  sun.misc.JavaSecurityProtectionDomainAccess$ProtectionDomainCache[]\n752:        1   24  org.apache.log4j.Logger\n753:        1   24  com.google.common.util.concurrent.ServiceManager\n754:        1   24  com.google.common.base.Joiner$MapJoiner\n755:        1   24  java.util.concurrent.locks.ReentrantReadWriteLock\n756:        1   24  java.util.concurrent.TimeUnit$7\n757:        1   24  java.lang.reflect.ReflectPermission\n758:        1   24  io.netty.util.internal.UnsafeAtomicReferenceFieldUpdater\n759:        1   24  ch.qos.logback.classic.spi.TurboFilterList\n760:        1   24  com.sun.management.UnixOperatingSystem\n761:        1   24  com.sun.jmx.remote.util.ClassLogger\n762:        1   24  sun.management.RuntimeImpl\n763:        1   24  ch.qos.logback.classic.joran.action.JMXConfiguratorAction\n764:        1   24  java.util.logging.LoggingPermission\n765:        1   24  java.lang.ProcessEnvironment$StringEnvironment\n766:        1   24  java.net.Inet6AddressImpl\n767:        1   24  io.netty.channel.AdaptiveRecvByteBufAllocator\n768:        1   24  sun.management.VMManagementImpl\n769:        1   24  io.netty.buffer.PooledByteBufAllocator$PoolThreadLocalCache$ReleaseCacheTask\n770:        1   24  com.google.common.cache.LocalCache$EntryFactory$3\n771:        1   24  javax.management.NotificationBroadcasterSupport\n772:        1   24  com.google.common.cache.LocalCache$Strength$2\n773:        1   24  com.google.common.util.concurrent.Service$State$1\n774:        1   24  com.google.common.cache.CacheBuilder$NullListener\n775:        1   24  scala.collection.mutable.Buffer$\n776:        1   24  java.util.concurrent.TimeUnit$3\n777:        1   24  java.net.StandardProtocolFamily[]\n778:        1   24  java.beans.PropertyChangeSupport\n779:        1   24  com.typesafe.config.impl.ResolveStatus[]\n780:        1   24  kafka.message.NoCompressionCodec$\n781:        1   24  sun.reflect.generics.tree.Wildcard\n782:        1   24  ch.qos.logback.core.joran.spi.CAI_WithLocatorSupport\n783:        1   24  com.google.common.collect.Maps$EntryFunction$2\n784:        1   24  sun.management.CompilationImpl\n785:        1   24  scala.collection.immutable.Seq$\n786:        1   24  sun.launcher.LauncherHelper[]\n787:        1   24  scala.reflect.ManifestFactory$$anon$9\n788:        1   24  java.security.Policy$UnsupportedEmptyCollection\n789:        1   24  ch.qos.logback.core.subst.Node$Type[]\n790:        1   24  com.google.common.util.concurrent.Service$State$2\n791:        1   24  sun.nio.cs.UTF_8\n792:        1   24  com.google.common.collect.Maps$EntryFunction$1\n793:        1   24  com.google.common.util.concurrent.Service$State$5\n794:        1   24  java.util.concurrent.TimeUnit$1\n795:        1   24  scala.collection.mutable.IndexedSeq$\n796:        1   24  scala.collection.immutable.Stream$\n797:        1   24  com.google.common.cache.LocalCache$Strength$1\n798:        1   24  sun.reflect.UnsafeLongFieldAccessorImpl\n799:        1   24  io.netty.buffer.UnpooledByteBufAllocator\n800:        1   24  io.netty.channel.ChannelOutboundBuffer$1\n801:        1   24  com.google.common.cache.LocalCache$EntryFactory$8\n802:        1   24  scala.reflect.ManifestFactory$$anon$13\n803:        1   24  com.google.common.collect.Maps$EntryFunction[]\n804:        1   24  java.lang.Double\n805:        1   24  java.util.Collections$SetFromMap\n806:        1   24  scala.reflect.ManifestFactory$$anon$8\n807:        1   24  java.net.InetAddress$Cache$Type[]\n808:        1   24  java.util.Locale$Cache\n809:        1   24  scala.reflect.package$\n810:        1   24  java.util.PropertyPermissionCollection\n811:        1   24  com.google.common.cache.LocalCache$EntryFactory$5\n812:        1   24  com.google.common.cache.LocalCache$EntryFactory$4\n813:        1   24  scala.collection.mutable.ArrayBuffer$\n814:        1   24  com.sun.org.apache.xerces.internal.utils.XMLSecurityPropertyManager$Property[]\n815:        1   24  io.netty.util.concurrent.FailedFuture\n816:        1   24  scala.reflect.ManifestFactory$$anon$14\n817:        1   24  sun.net.ProgressMonitor\n818:        1   24  sun.nio.cs.UTF_16\n819:        1   24  ch.qos.logback.classic.util.ContextSelectorStaticBinder\n820:        1   24  kafka.utils.Pool\n821:        1   24  java.security.Policy$PolicyInfo\n822:        1   24  io.netty.util.Recycler$1\n823:        1   24  java.io.File$PathStatus[]\n824:        1   24  kafka.producer.SyncProducerConfig$\n825:        1   24  java.net.SocketPermissionCollection\n826:        1   24  sun.nio.cs.ISO_8859_1\n827:        1   24  com.google.common.cache.LocalCache$EntryFactory$1\n828:        1   24  com.google.common.util.concurrent.Service$State$3\n829:        1   24  scala.collection.Traversable$\n830:        1   24  com.google.common.cache.CacheBuilder$NullListener[]\n831:        1   24  com.google.common.cache.CacheBuilder$OneWeigher[]\n832:        1   24  scala.collection.mutable.DefaultEntry\n833:        1   24  org.slf4j.helpers.BasicMarker\n834:        1   24  com.google.common.base.Joiner$1\n835:        1   24  kafka.message.GZIPCompressionCodec$\n836:        1   24  scala.collection.Iterable$\n837:        1   24  com.google.common.util.concurrent.Service$State$6\n838:        1   24  sun.nio.cs.UTF_16LE\n839:        1   24  java.util.concurrent.TimeUnit$2\n840:        1   24  com.google.common.cache.LocalCache$EntryFactory$2\n841:        1   24  ch.qos.logback.classic.joran.action.ConsolePluginAction\n842:        1   24  scala.reflect.ManifestFactory$$anon$11\n843:        1   24  org.slf4j.helpers.FormattingTuple\n844:        1   24  ch.qos.logback.core.joran.spi.EventPlayer\n845:        1   24  com.google.common.cache.LocalCache$EntryFactory$6\n846:        1   24  java.util.logging.LogManager$SystemLoggerContext\n847:        1   24  java.security.AllPermissionCollection\n848:        1   24  scala.reflect.ManifestFactory$$anon$6\n849:        1   24  java.util.Locale$Category[]\n850:        1   24  scala.xml.TopScope$\n851:        1   24  scala.collection.immutable.List$\n852:        1   24  ch.qos.logback.core.joran.spi.ConsoleTarget[]\n853:        1   24  java.util.concurrent.TimeUnit$4\n854:        1   24  scala.collection.mutable.WrappedArray$ofRef\n855:        1   24  sun.nio.cs.UTF_16BE\n856:        1   24  sun.misc.URLClassPath$FileLoader\n857:        1   24  sun.nio.cs.US_ASCII\n858:        1   24  scala.reflect.ManifestFactory$$anon$12\n859:        1   24  com.google.common.util.concurrent.ServiceManager$ServiceManagerState$5\n860:        1   24  ch.qos.logback.classic.joran.action.InsertFromJNDIAction\n861:        1   24  ch.qos.logback.core.pattern.FormatInfo\n862:        1   24  java.util.Currency\n863:        1   24  kafka.producer.ProducerStatsRegistry$\n864:        1   24  com.yammer.metrics.reporting.JmxReporter\n865:        1   24  sun.management.ThreadImpl\n866:        1   24  java.util.regex.Pattern$Slice\n867:        1   24  com.google.common.collect.Multimaps$Keys\n868:        1   24  io.netty.util.internal.UnsafeAtomicLongFieldUpdater\n869:        1   24  com.sun.org.apache.xerces.internal.impl.Constants$ArrayEnumeration\n870:        1   24  sun.nio.fs.NativeBuffer$Deallocator\n871:        1   24  com.sun.jmx.mbeanserver.StandardMBeanSupport\n872:        1   24  com.google.common.cache.LocalCache$EntryFactory$7\n873:        1   24  ch.qos.logback.classic.util.LogbackMDCAdapter\n874:        1   16  io.netty.channel.ChannelMetadata\n875:        1   16  io.netty.util.internal.__matchers__.com.airbnb.plog.server.fragmentation.FragmentMatcher\n876:        1   16  io.netty.channel.ChannelFutureListener$2\n877:        1   16  java.util.Collections$EmptyEnumeration\n878:        1   16  scala.collection.convert.Wrappers$JIterableWrapper$\n879:        1   16  scala.runtime.ScalaRunTime$\n880:        1   16  scala.collection.convert.Wrappers$JEnumerationWrapper$\n881:        1   16  scala.collection.convert.Wrappers$MutableSeqWrapper$\n882:        1   16  com.sun.proxy.$Proxy4\n883:        1   16  com.google.common.collect.Iterators$2\n884:        1   16  org.msgpack.template.ByteBufferTemplate\n885:        1   16  com.google.common.cache.CacheBuilder$1\n886:        1   16  sun.nio.ch.ExtendedSocketOption$1\n887:        1   16  java.io.FileDescriptor$1\n888:        1   16  sun.misc.Unsafe\n889:        1   16  javax.management.MBeanServerBuilder\n890:        1   16  com.typesafe.config.impl.ConfigNull\n891:        1   16  java.lang.Runtime\n892:        1   16  com.foundationdb.sql.parser.NodeFactoryImpl\n893:        1   16  ch.qos.logback.core.joran.spi.ConsoleTarget$2\n894:        1   16  sun.nio.ch.FileChannelImpl$1\n895:        1   16  org.msgpack.template.StringTemplate\n896:        1   16  com.sun.jmx.mbeanserver.MXBeanIntrospector\n897:        1   16  sun.reflect.ReflectionFactory\n898:        1   16  java.lang.management.PlatformComponent$14\n899:        1   16  org.msgpack.template.BigIntegerTemplate\n900:        1   16  sun.reflect.generics.tree.VoidDescriptor\n901:        1   16  java.lang.management.PlatformComponent$2\n902:        1   16  ch.qos.logback.classic.spi.StackTraceElementProxy[]\n903:        1   16  scala.collection.immutable.Range$\n904:        1   16  scala.collection.immutable.Set$\n905:        1   16  scala.collection.immutable.Nil$\n906:        1   16  sun.reflect.generics.tree.BottomSignature\n907:        1   16  org.msgpack.template.IntegerTemplate\n908:        1   16  com.sun.jmx.mbeanserver.DescriptorCache\n909:        1   16  java.lang.management.PlatformComponent$10\n910:        1   16  java.util.Collections$EmptySet\n911:        1   16  scala.collection.convert.Wrappers$JListWrapper$\n912:        1   16  org.msgpack.template.ValueTemplate\n913:        1   16  scala.math.Ordering$\n914:        1   16  scala.collection.convert.Wrappers$JConcurrentMapWrapper$\n915:        1   16  scala.util.control.Breaks\n916:        1   16  scala.collection.immutable.Map$\n917:        1   16  scala.collection.convert.WrapAsScala$\n918:        1   16  scala.Predef$$anon$1\n919:        1   16  scala.None$\n920:        1   16  sun.nio.ch.DatagramDispatcher\n921:        1   16  com.google.common.util.concurrent.ServiceManager$1\n922:        1   16  com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory\n923:        1   16  java.lang.management.PlatformComponent$6\n924:        1   16  com.google.common.util.concurrent.ServiceManager$ServiceManagerState$1\n925:        1   16  sun.nio.ch.Util$1\n926:        1   16  scala.collection.convert.Wrappers$SeqWrapper$\n927:        1   16  org.msgpack.template.CharacterTemplate\n928:        1   16  java.beans.PropertyChangeListener[]\n929:        1   16  java.util.concurrent.ThreadPoolExecutor$AbortPolicy\n930:        1   16  sun.util.calendar.Gregorian\n931:        1   16  java.util.regex.Pattern$Begin\n932:        1   16  java.security.ProtectionDomain$1\n933:        1   16  java.security.cert.Certificate[]\n934:        1   16  com.typesafe.config.impl.Parseable$1\n935:        1   16  sun.management.ManagementFactoryHelper$PlatformLoggingImpl\n936:        1   16  java.lang.Throwable[]\n937:        1   16  scala.collection.convert.Wrappers$JPropertiesWrapper$\n938:        1   16  java.beans.EventSetDescriptor[]\n939:        1   16  ch.qos.logback.core.joran.spi.DefaultNestedComponentRegistry\n940:        1   16  scala.collection.mutable.Set$\n941:        1   16  sun.nio.fs.LinuxFileSystemProvider\n942:        1   16  kafka.message.CompressionCodec$\n943:        1   16  java.util.logging.LoggingProxyImpl\n944:        1   16  ch.qos.logback.classic.pattern.EnsureExceptionHandling\n945:        1   16  scala.collection.immutable.StringOps$\n946:        1   16  scala.collection.mutable.WrappedArray$\n947:        1   16  java.lang.CharacterDataLatin1\n948:        1   16  ch.qos.logback.core.joran.spi.ConsoleTarget$1\n949:        1   16  org.msgpack.template.DoubleTemplate\n950:        1   16  scala.collection.convert.Wrappers$JMapWrapper$\n951:        1   16  com.google.common.cache.CacheBuilder$3\n952:        1   16  scala.collection.mutable.FlatHashTable$\n953:        1   16  org.msgpack.template.BooleanTemplate\n954:        1   16  java.lang.management.PlatformComponent$15\n955:        1   16  scala.collection.$plus$colon$\n956:        1   16  java.lang.System$2\n957:        1   16  org.msgpack.template.ShortTemplate\n958:        1   16  java.util.concurrent.SynchronousQueue$TransferStack\n959:        1   16  scala.math.Ordering$String$\n960:        1   16  java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter\n961:        1   16  io.netty.channel.ChannelHandlerAdapter$1\n962:        1   16  java.lang.management.PlatformComponent$13\n963:        1   16  com.sun.org.apache.xerces.internal.utils.SecuritySupport\n964:        1   16  java.lang.management.PlatformComponent$7\n965:        1   16  org.msgpack.template.ByteTemplate\n966:        1   16  java.util.IdentityHashMap$KeySet\n967:        1   16  org.slf4j.helpers.NOPLoggerFactory\n968:        1   16  sun.management.ClassLoadingImpl\n969:        1   16  java.util.EnumMap$1\n970:        1   16  sun.misc.ASCIICaseInsensitiveComparator\n971:        1   16  com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext$1\n972:        1   16  java.lang.invoke.MemberName$Factory\n973:        1   16  java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock\n974:        1   16  scala.runtime.RichInt$\n975:        1   16  scala.collection.convert.Wrappers$JCollectionWrapper$\n976:        1   16  com.sun.jmx.mbeanserver.MBeanInstantiator\n977:        1   16  sun.management.HotSpotDiagnostic\n978:        1   16  java.net.URLClassLoader$7\n979:        1   16  scala.Option$\n980:        1   16  sun.net.DefaultProgressMeteringPolicy\n981:        1   16  ch.qos.logback.core.spi.AppenderAttachableImpl\n982:        1   16  scala.collection.immutable.HashSet$\n983:        1   16  java.text.FieldPosition[]\n984:        1   16  scala.collection.convert.Wrappers$IterableWrapper$\n985:        1   16  com.google.common.cache.Striped64$ThreadHashCode\n986:        1   16  java.lang.ref.Reference$Lock\n987:        1   16  scala.util.Left$\n988:        1   16  java.util.regex.Pattern$4\n989:        1   16  java.util.concurrent.ConcurrentHashMap$EntrySet\n990:        1   16  org.msgpack.template.FloatArrayTemplate\n991:        1   16  io.netty.util.concurrent.DefaultPromise$1\n992:        1   16  com.google.common.base.Ticker$1\n993:        1   16  org.slf4j.helpers.SubstituteLoggerFactory\n994:        1   16  java.nio.charset.CoderResult$2\n995:        1   16  scala.util.hashing.package$\n996:        1   16  io.netty.channel.ChannelFutureListener$1\n997:        1   16  org.msgpack.type.StringRawValueImpl\n998:        1   16  com.sun.jmx.mbeanserver.MBeanAnalyzer$MethodOrder\n999:        1   16  scala.Predef$$anon$3\n1000:       1   16  java.util.zip.ZipFile$2\n1001:       1   16  scala.collection.Iterator$\n1002:       1   16  java.lang.management.PlatformComponent$1\n1003:       1   16  com.google.common.cache.LongAddables$1\n1004:       1   16  javax.management.JMX\n1005:       1   16  scala.collection.mutable.HashMap$\n1006:       1   16  scala.collection.mutable.HashTable$\n1007:       1   16  kafka.utils.Log4jController$\n1008:       1   16  java.util.concurrent.ConcurrentHashMap$Values\n1009:       1   16  scala.collection.convert.Wrappers$JSetWrapper$\n1010:       1   16  javax.xml.parsers.SecuritySupport\n1011:       1   16  io.netty.util.concurrent.SingleThreadEventExecutor$1\n1012:       1   16  scala.collection.immutable.$colon$colon$\n1013:       1   16  scala.package$$anon$1\n1014:       1   16  com.airbnb.plog.server.PlogServer$1\n1015:       1   16  com.sun.jmx.mbeanserver.StandardMBeanIntrospector\n1016:       1   16  com.sun.jmx.mbeanserver.SecureClassLoaderRepository\n1017:       1   16  com.google.common.cache.LocalCache$2\n1018:       1   16  sun.misc.Launcher$Factory\n1019:       1   16  scala.runtime.BoxedUnit\n1020:       1   16  com.google.common.util.concurrent.ServiceManager$2\n1021:       1   16  java.nio.charset.CoderResult$1\n1022:       1   16  java.lang.management.PlatformComponent$5\n1023:       1   16  org.msgpack.template.DoubleArrayTemplate\n1024:       1   16  kafka.producer.ProducerStatsRegistry$$anonfun$1\n1025:       1   16  scala.util.Either$\n1026:       1   16  java.lang.Terminator$1\n1027:       1   16  sun.util.resources.LocaleData$LocaleDataResourceBundleControl\n1028:       1   16  java.lang.management.PlatformComponent$12\n1029:       1   16  org.slf4j.helpers.BasicMarkerFactory\n1030:       1   16  org.msgpack.template.LongArrayTemplate\n1031:       1   16  java.net.InetAddress$1\n1032:       1   16  io.netty.util.internal.TypeParameterMatcher$2\n1033:       1   16  java.lang.ProcessBuilder$NullInputStream\n1034:       1   16  sun.misc.Launcher\n1035:       1   16  io.netty.util.concurrent.GlobalEventExecutor$PurgeTask\n1036:       1   16  com.airbnb.plog.server.PlogServer\n1037:       1   16  io.netty.util.internal.__matchers__.com.airbnb.plog.MessageMatcher\n1038:       1   16  java.util.regex.Pattern$Node\n1039:       1   16  scala.reflect.NoManifest$\n1040:       1   16  java.util.WeakHashMap$KeySet\n1041:       1   16  scala.collection.mutable.HashSet$\n1042:       1   16  sun.net.www.protocol.jar.JarFileFactory\n1043:       1   16  com.google.common.cache.CacheBuilder$2\n1044:       1   16  java.beans.PropertyChangeSupport$PropertyChangeListenerMap\n1045:       1   16  java.lang.Float\n1046:       1   16  sun.nio.ch.EPollSelectorProvider\n1047:       1   16  java.nio.Bits$1\n1048:       1   16  scala.collection.convert.Wrappers$JDictionaryWrapper$\n1049:       1   16  scala.collection.convert.Wrappers$MutableMapWrapper$\n1050:       1   16  io.netty.util.internal.logging.Slf4JLoggerFactory\n1051:       1   16  scala.sys.package$\n1052:       1   16  io.netty.util.concurrent.GlobalEventExecutor$TaskRunner\n1053:       1   16  scala.util.control.NoStackTrace$\n1054:       1   16  org.msgpack.template.FloatTemplate\n1055:       1   16  sun.misc.Perf\n1056:       1   16  com.google.common.cache.LocalCache$1\n1057:       1   16  ch.qos.logback.classic.selector.DefaultContextSelector\n1058:       1   16  java.util.Collections$EmptyList\n1059:       1   16  java.lang.ProcessBuilder$NullOutputStream\n1060:       1   16  scala.collection.convert.Wrappers$JIteratorWrapper$\n1061:       1   16  scala.compat.Platform$\n1062:       1   16  java.lang.management.PlatformComponent$8\n1063:       1   16  org.slf4j.impl.StaticMarkerBinder\n1064:       1   16  sun.net.www.protocol.file.Handler\n1065:       1   16  javax.management.NotificationBroadcasterSupport$1\n1066:       1   16  com.google.common.util.concurrent.AbstractService$2\n1067:       1   16  scala.collection.immutable.Stream$$hash$colon$colon$\n1068:       1   16  org.msgpack.template.BigDecimalTemplate\n1069:       1   16  scala.math.Numeric$\n1070:       1   16  java.lang.management.PlatformComponent$3\n1071:       1   16  java.lang.management.PlatformComponent$11\n1072:       1   16  sun.misc.FloatingDecimal$1\n1073:       1   16  io.netty.channel.DefaultMessageSizeEstimator$HandleImpl\n1074:       1   16  java.security.ProtectionDomain$3\n1075:       1   16  java.lang.ApplicationShutdownHooks$1\n1076:       1   16  scala.math.Ordered$\n1077:       1   16  com.sun.org.apache.xerces.internal.impl.dv.dtd.NOTATIONDatatypeValidator\n1078:       1   16  com.google.common.base.Suppliers$SupplierOfInstance\n1079:       1   16  io.netty.util.CharsetUtil$1\n1080:       1   16  java.util.concurrent.ThreadLocalRandom$1\n1081:       1   16  scala.sys.BooleanProp$\n1082:       1   16  ch.qos.logback.core.joran.util.ConfigurationWatchListUtil\n1083:       1   16  kafka.producer.async.DefaultEventHandler$\n1084:       1   16  com.google.common.collect.Iterators$1\n1085:       1   16  java.util.regex.Pattern$LastNode\n1086:       1   16  scala.collection.convert.Wrappers$DictionaryWrapper$\n1087:       1   16  org.slf4j.impl.StaticMDCBinder\n1088:       1   16  com.typesafe.config.impl.SimpleIncluder\n1089:       1   16  java.lang.management.PlatformComponent$4\n1090:       1   16  org.msgpack.template.ShortArrayTemplate\n1091:       1   16  com.yammer.metrics.core.Clock$UserTimeClock\n1092:       1   16  io.netty.channel.DefaultMessageSizeEstimator\n1093:       1   16  org.msgpack.template.DateTemplate\n1094:       1   16  com.google.common.base.Equivalence$Equals\n1095:       1   16  java.lang.management.PlatformComponent$9\n1096:       1   16  scala.Predef$$anon$2\n1097:       1   16  scala.collection.mutable.ArrayOps$ofRef$\n1098:       1   16  io.netty.util.internal.ThreadLocalRandom$3\n1099:       1   16  scala.sys.BooleanProp$$anonfun$keyExists$1\n1100:       1   16  java.util.Collections$EmptyIterator\n1101:       1   16  io.netty.util.CharsetUtil$2\n1102:       1   16  org.msgpack.template.LongTemplate\n1103:       1   16  scala.collection.convert.Wrappers$MutableSetWrapper$\n1104:       1   16  com.sun.org.apache.xerces.internal.impl.dv.dtd.IDREFDatatypeValidator\n1105:       1   16  java.nio.file.attribute.FileAttribute[]\n1106:       1   16  java.lang.reflect.ReflectAccess\n1107:       1   16  scala.collection.convert.Wrappers$IteratorWrapper$\n1108:       1   16  ch.qos.logback.core.spi.FilterAttachableImpl\n1109:       1   16  java.util.EnumMap$EntrySet\n1110:       1   16  java.lang.UNIXProcess$ProcessReaperThreadFactory\n1111:       1   16  scala.collection.$colon$plus$\n1112:       1   16  scala.collection.mutable.StringBuilder$\n1113:       1   16  com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries\n1114:       1   16  io.netty.util.internal.TypeParameterMatcher$1\n1115:       1   16  java.nio.ByteBuffer[]\n1116:       1   16  scala.util.Right$\n1117:       1   16  java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock\n1118:       1   16  kafka.utils.Log4jController\n1119:       1   16  com.sun.proxy.$Proxy0\n1120:       1   16  scala.collection.immutable.Set$EmptySet$\n1121:       1   16  com.sun.org.apache.xerces.internal.impl.dv.dtd.NMTOKENDatatypeValidator\n1122:       1   16  com.sun.org.apache.xerces.internal.impl.dv.dtd.StringDatatypeValidator\n1123:       1   16  io.netty.channel.ChannelFutureListener$3\n1124:       1   16  java.text.DontCareFieldPosition$1\n1125:       1   16  com.sun.proxy.$Proxy5\n1126:       1   16  com.sun.org.apache.xerces.internal.impl.dv.dtd.IDDatatypeValidator\n1127:       1   16  scala.collection.Iterator$$anon$2\n1128:       1   16  scala.collection.immutable.Vector$VectorReusableCBF\n1129:       1   16  com.google.common.util.concurrent.AbstractService$1\n1130:       1   16  org.msgpack.template.ByteArrayTemplate\n1131:       1   16  java.util.ResourceBundle$Control\n1132:       1   16  sun.nio.ch.Net$1\n1133:       1   16  java.util.Hashtable$EntrySet\n1134:       1   16  org.msgpack.template.IntegerArrayTemplate\n1135:       1   16  java.util.jar.JavaUtilJarAccessImpl\n1136:       1   16  java.lang.String$CaseInsensitiveComparator\n1137:       1   16  java.security.AllPermission\n1138:       1   16  java.nio.Bits$1$1\n1139:       1   16  java.security.Provider[]\n1140:       1   16  ch.qos.logback.classic.spi.ThrowableProxy[]\n1141:       1   16  java.math.BigDecimal$1\n1142:       1   16  scala.collection.convert.Wrappers$MutableBufferWrapper$\n1143:       1   16  com.yammer.metrics.core.ThreadPools\n1144:       1   16  org.msgpack.template.BooleanArrayTemplate\n1145:       1   16  scala.math.Equiv$\n1146:       1   16  java.util.logging.Handler[]\n1147:       1   16  scala.collection.mutable.Map$\n1148:       1   16  io.netty.util.internal.NoOpTypeParameterMatcher\nTotal :     813457  47057840\nHeap traversal took 26.768 seconds.\n```\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/98915246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/114679531", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/114679531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/172962494", "body": "I think the Metrics management is not ideal.\n\n`StatisticsReporter` aggregates metrics general purposes metrics (like `unhandledObject`, and `exception`, but also metrics specific to the UDP listener (`foundHolesFromNewMessage`), and the command framework (`receivedUnknownCommand`). This creates tight coupling between all parts of Plog, and the `Listener` implementations. Ideally metric collection would be independent.\n\nThe PR has it is makes this coupling worse by adding a dependency on `Defragmenter`.\n\n## minimum improvement\n\nThe `SimpleStatisticsReporter` currently does 2 things: \n1. it aggregates metrics/counters by implementing `StatisticsReporter`\n2. it formats and reports these metrics, see `toJSON`\n\nAn improvement would be to separate these concerns like so:\n- `StatisticsReporter` would be ideally named `StatisticsRegistry`/`StatisticsCollector`.\n- abstract the ability to provide metrics values in a new interface `StatsProvider` (this would be the new `StatisticsReporter`).\n- `StatsProvider` will have 2 methods:\n  1. `getStats():JSONObject`\n  2. `addStatsProvider()` which allow to compose `StatsProvider`'s\n- `Defragmenter` and `Handler` would implement `StatsProvider`\n- `SimpleStatisticsReporter` could implement both `StatsProvider`, and `StatisticsReporter`. The implementation of `getStats` will be the current `toJSON` method, except that the `Handler` and `Defragmenter` will not be references, only the collection of  `StatsProvider` would b used.\n\n## long term solution\n\nI would suggest using the Dropwizard metrics. The `StatisticsReporter` interface would go away. Classes would instead access the `Metrics` instance and report gauges, rates, etc. Various reporter could then be plugged on the `Metrics` registry. A JSON reporter will be used to implement the `STAT` command instead of the current `SimpleStatisticProvider.toJSON` implementation.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/172962494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/278091384", "body": "LGTM", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/278091384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/33105929", "body": "The `propagate` flag value is the same for all messages, to `seen_messages` and `propagated_messages` will always be the same. amirite?\nI'd then remove than metric.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/33105929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/33106047", "body": "where is `msg.release()` invoked?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/33106047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/54921191", "body": "agree, but the default partitioner use `key.hashcode`, and the hashcode of an array is `Object.hashcode`. Java primitives/objects legacy...\nhttps://github.com/apache/kafka/blob/trunk/core/src/main/scala/kafka/producer/DefaultPartitioner.scala#L28\n\nso instead of customizing the partitioner to use [`Arrays.hashcode`](https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#hashCode%28byte[]%29), I decided to use an int.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/54921191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99003044", "body": "`reopen` -> `open`", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99003044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99003651", "body": "should `PlogClient` be a `Closeable`? and provide a `close` method that closes the socket", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99003651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99003728", "body": "some default value for `chunkSize` would be helpful", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99003728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99004071", "body": "this is potentially quite verbose. use `trace` instead?", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99004071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99004151", "body": "log an error message?", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99004151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99005385", "body": "some unit tests on `chunkMessage()` would be good too", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99005385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99155551", "body": "will a chunk size of `65507` be ok? This value does not take the Plog header size into account", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99155551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99156189", "body": "`socket` might be `null` if an exception was thrown in `sendToSocket` `catch` clause.", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99156189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99725855", "body": "where is `bintray_user` set?", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99725855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99850485", "body": "Being able to set it with a property is useful. Also I wonder how many know about the Elvis operator. Readability trumps conciseness imho.\r\nI'd say:\r\n`user = System.env.BINTRAY_USER ? System.env.BINTRAY_USER : project.getProperty('bintrayUser')`", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/99850485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "dcerri": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/plog/commits/3dc4d120f2c3ddf931982e6b07882c68ffdfe80e", "message": "fix console output for empty tags messages"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/be0cda7aed19369a34506cd9d58744ce5e2811f0", "message": "fix a typo in the README"}, {"url": "https://api.github.com/repos/airbnb/plog/commits/eb56bf41c9f7fde3a22c6d0e651086dd4dec642d", "message": "rename FragmentedMessageFragment to Fragment\n\nThat name was really horrible."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/plog/issues/comments/44483707", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/44483707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jun-he": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/plog/pulls/101", "title": "Use interface StatisticsReporter instead of SimpleStatisticsReporter class in UDPListener", "body": "@alexism @nelgau\n\nTo allow UDPListener to directly send metrics over TaggedMetricRegistry in jitney-proxy dropwizard application, we have to implement a PlogStatisticsReporter class in jitney-proxy project.  Listener class should have a StatisticsReporter instead of SimpleStatisticsReporter. \n\nThis PR contains all the changes to use interface StatisticsReporter instead of SimpleStatisticsReporter class.  Otherwise, we can use plog's python script to collect metrics.\n\nAnother alternative way is to implement a jitney-proxy customized UDP listener class, where we might disable all FourLetterCommands.\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/plog/issues/comments/173316537", "body": "Thanks @alexism a lot for the comments, which make the StatisticsReporter much better than before.\n\n### Some further improvements\n- I think `StatsProvider` can be further improved by removing `addStatsProvider()` from it because `Defragmenter` and `Handler` do not add other `StatsProviders`.\n- Instead, we can add a BaseStatisticsReporter (abstract class), which have a list of `StatsProviders` and also an abstract `addStatsProvider` method.\n- `SimpleStatisticsReporter` extends `BaseStatisticsReporter` and implement `addStatsProvider`.\n- `BaseStatisticsReporter` will be used in UDPListener.\n\n### Some technical problems if using dropwizard metrics\n- In a StatisticsReporter based on Dropwizard (called `DWStatisticsReporter`), it increases the metrics whenever metrics/counters are incremented.  However, it is uncertain how `CacheStats` in a `Defragmenter` can be reported over `DWStatisticsReporter`.\n- If we ignore Handlers, such as `KafkaHandler` in `DWStatisticsReporter`, when `STAT` command is called, `DWStatisticsReporter` would not be able to report some `KafkaHandler` metrics, such as `failedToSendMessageExceptions` and `seenMessages`.\n\nI suggest we still keep the plog's python script to collect metrics to unblock us to release the jitney local proxy.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/173316537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/194028876", "body": "Hi guys, why not to define a `key.serializer.class`?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/194028876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "coveralls": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36103540", "body": "[![Coverage Status](https://coveralls.io/builds/550416/badge)](https://coveralls.io/builds/550416)\n\nCoverage remained the same when pulling **26953ef49224bcb5ec4d696437e236e053b90c80 on pierre/fragment_fixes** into **cf0d893e7b9e37c21cdeaa7931b67bee542c8032 on master**.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36103540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36141811", "body": "[![Coverage Status](https://coveralls.io/builds/551369/badge)](https://coveralls.io/builds/551369)\n\nCoverage increased (+9.64%) when pulling **2038e0bdd38b8ffa897bc0e747322f067bae778c on pierre/tests/fragmented_message** into **6d56f2f3d9afcb6923d9c5cb78cea88a9d434986 on master**.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/36141811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jtai": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/plog/issues/comments/37592754", "body": "Didn't read this, but talked to Pierre in person. The approach sounds sane.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/37592754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "josephsofaer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39518321", "body": ":)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/39518321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "joshbuddy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42218912", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42218912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "salbito": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42906280", "body": ":+1: LGTM. Seriously\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/42906280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "schleyfox": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/plog/issues/comments/68159241", "body": ":+1: if tested\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/68159241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": []}, "xxiao23": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/plog/issues/comments/114643848", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/issues/comments/114643848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "liyintang": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/54796726", "body": "It might be more general to keep the key as byte[]. Integer can be easily converted to byte[]. \nIn addition, it will be useful to let user to specify the key based on the message, and let the partitioner to balance the distribution. \n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/54796726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/55059691", "body": "I see.  The benefit of keeping byte[] for key is we can extend plog to accept customized key through the tag field in the future. Therefore, the application can overwrite the key with more meaningful semantics. If the key type is integer, then we need another refactor for this.\n\nAnother point is Object.hashcode works perfectly/better in this semantics. User could set the same key for multiple messages. The default partitioner will evenly distribute this key across partitions (because we hash the object, not hash actual bytes). So the application does not need to worry about the key distribution and adding randomness into the key partition. In addition, if they really want to control the partition algorithm based on key. Then they probably need to use a customized partitioner.\n\nIMO, using object.hashcode for byte[] is a \"feature\" not a \"bug\", which provides a neat way to decouple the message_key with partition_key :)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/plog/pulls/comments/55059691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}}}}