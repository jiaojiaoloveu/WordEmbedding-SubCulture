{"_default": {"1": {"chilimatic": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1618", "title": "class properties disappear if assigned a var that has no value assigned", "body": "While I was implementing the transaction feature I notices a curious behaviour that happened in the unittests \r\n\r\na getter threw an exception that a defined property does not exist. I found my bug but I was curious. I tested if this is a behaviour that can be easily reproduced.\r\n\r\nphp 7.2 + zephir 1.0.7\r\n\r\n2 classes:\r\n\r\nTestCase: \r\n```zephir\r\nnamespace Bugreport;\r\n\r\nclass PropertyIsGoingToDisappear {\r\n    protected _magicProperty;\r\n\r\n    public function setProperty(param) {\r\n        let this->_magicProperty = param;\r\n\r\n        return this;\r\n    }\r\n\r\n    public function getProperty() {\r\n        return this->_magicProperty;\r\n    }\r\n}\r\n```\r\nand\r\n```zephir\r\nnamespace Bugreport;\r\n\r\nclass MyClass {\r\n\r\n    protected _property1;\r\n\r\n    public function useSetterOfChild() {\r\n        var myValue, instanceToBeReturned;\r\n\r\n        let instanceToBeReturned = new PropertyIsGoingToDisappear();\r\n        return instanceToBeReturned->setProperty(myValue);\r\n    }\r\n}\r\n\r\n```\r\ninvoked by \r\n```php\r\n$myObject = new Bugreport\\MyClass();\r\n$returnedObject = $myObject->useSetterOfChild();\r\n\r\n// same as the returned object\r\n$myOtherObject = new Bugreport\\PropertyIsGoingToDisappear();\r\n$myOtherObject->setProperty(1);\r\n\r\nvar_dump($myOtherObject->getProperty());\r\nvar_dump($returnedObject->getProperty());\r\n```\r\n\r\nresults in \r\n```sh\r\n/home/j/development/repos/bugreport-zephir/test.php:19:\r\nint(1)\r\nPHP Notice:  Undefined property: Bugreport\\PropertyIsGoingToDisappear::$_magicProperty in /home/j/development/repos/bugreport-zephir/test.php on line 20\r\nPHP Stack trace:\r\nPHP   1. {main}() /home/j/development/repos/bugreport-zephir/test.php:0\r\nPHP   2. Bugreport\\PropertyIsGoingToDisappear->getProperty() /home/j/development/repos/bugreport-zephir/test.php:20\r\n/home/j/development/repos/bugreport-zephir/test.php:20:\r\nNULL\r\n```\r\n\r\nthe issue is \r\n```zephir\r\nvar myValue, instanceToBeReturned;\r\ninstanceToBeReturned->setProperty(myValue);\r\n```\r\n\r\nthe var has no value assigned so instead of setting a null value it removes the property in runtime, which is a quite curious sideeffect. ", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "php318": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1606", "title": "php json_decode ($ str, 1) isset is invalid after passing to zephir", "body": "post data:\r\n\r\n```\r\nrows:[{\"item_id\":1,\"parent_id\":null,\"depth\":1,\"left\":1,\"right\":10},\r\n{\"id\":\"59818f067e52392064000042\",\"parent_id\":1,\"depth\":1,\"left\":2,\"right\":3},\r\n{\"id\":\"59818f607e52392064000047\",\"parent_id\":1,\"depth\":1,\"left\":4,\"right\":5},\r\n{\"id\":\"59a26e607e52391c180035d2\",\"parent_id\":1,\"depth\":1,\"left\":6,\"right\":9},\r\n{\"id\":\"59818f867e523921ec00733c\",\"parent_id\":\"59a26e607e52391c180035d2\",\"depth\":2,\"left\":7,\"right\":8}]\r\n```\r\n\r\nphp code\r\n```php\r\n$rows=$this->request->getPost('rows');\r\n$rows=json_decode($rows,true);\r\nvar_export(rows);\r\n\r\n\\XqKeji\\Test::change($rows);\r\n```\r\n\r\noutput data:\r\n\r\n```php\r\narray (\r\n  0 => \r\n  array (\r\n    'item_id' => 1,\r\n    'parent_id' => NULL,\r\n    'depth' => 1,\r\n    'left' => 1,\r\n    'right' => 10,\r\n  ),\r\n  1 => \r\n  array (\r\n    'id' => '59818f067e52392064000042',\r\n    'parent_id' => 1,\r\n    'depth' => 1,\r\n    'left' => 2,\r\n    'right' => 3,\r\n  ),\r\n  2 => \r\n  array (\r\n    'id' => '59818f607e52392064000047',\r\n    'parent_id' => 1,\r\n    'depth' => 1,\r\n    'left' => 4,\r\n    'right' => 5,\r\n  ),\r\n  3 => \r\n  array (\r\n    'id' => '59a26e607e52391c180035d2',\r\n    'parent_id' => 1,\r\n    'depth' => 1,\r\n    'left' => 6,\r\n    'right' => 9,\r\n  ),\r\n  4 => \r\n  array (\r\n    'id' => '59818f867e523921ec00733c',\r\n    'parent_id' => '59a26e607e52391c180035d2',\r\n    'depth' => 2,\r\n    'left' => 7,\r\n    'right' => 8,\r\n  ),\r\n)\r\n```\r\n\r\n<p>zephir code</p>\r\n\r\n```zep\r\nnamespace XqKeji;\r\n\r\nclass Test\r\n{\r\n\tpublic static function change(array data=[])\r\n\t{\r\n\r\n\t\tvar row;\r\n\r\n\t\tfor row in data {\r\n\t\t\tvar_export(row);\r\n\r\n\t\t\tif isset row[\"parent_id\"] {\r\n\t\t\t\techo \"exits parent_id\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n<p>output data:</p>\r\n\r\n```php\r\narray (\r\n    'item_id' => 1,\r\n    'parent_id' => NULL,\r\n    'depth' => 1,\r\n    'left' => 1,\r\n    'right' => 10,\r\n  )\r\narray (\r\n    'id' => '59818f067e52392064000042',\r\n    'parent_id' => 1,\r\n    'depth' => 1,\r\n    'left' => 2,\r\n    'right' => 3,\r\n  )\r\narray (\r\n    'id' => '59818f607e52392064000047',\r\n    'parent_id' => 1,\r\n    'depth' => 1,\r\n    'left' => 4,\r\n    'right' => 5,\r\n  )\r\n array (\r\n    'id' => '59a26e607e52391c180035d2',\r\n    'parent_id' => 1,\r\n    'depth' => 1,\r\n    'left' => 6,\r\n    'right' => 9,\r\n  )\r\n array (\r\n    'id' => '59818f867e523921ec00733c',\r\n    'parent_id' => '59a26e607e52391c180035d2',\r\n    'depth' => 2,\r\n    'left' => 7,\r\n    'right' => 8,\r\n  )\r\n```\r\n\r\n<p>change the zephir code</p>\r\n\r\n```zep\r\nnamespace XqKeji;\r\n\r\nclass Test\r\n{\r\n\tpublic static function change(array data=[])\r\n\t{\r\n\t\tvar row;\r\n\r\n\t\tfor row in data {\r\n\t\t\tlet row = json_decode(json_encode(row),1);\r\n\r\n\t\t\tvar_export(row);\r\n\r\n\t\t\tif isset row[\"parent_id\"] {\r\n\t\t\t\techo \"exits parent_id\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n```php\r\narray (\r\n    'item_id' => 1,\r\n    'parent_id' => NULL,\r\n    'depth' => 1,\r\n    'left' => 1,\r\n    'right' => 10,\r\n  )exits parent_id\r\narray (\r\n    'id' => '59818f067e52392064000042',\r\n    'parent_id' => 1,\r\n    'depth' => 1,\r\n    'left' => 2,\r\n    'right' => 3,\r\n  )exits parent_id\r\narray (\r\n    'id' => '59818f607e52392064000047',\r\n    'parent_id' => 1,\r\n    'depth' => 1,\r\n    'left' => 4,\r\n    'right' => 5,\r\n  )exits parent_id\r\n array (\r\n    'id' => '59a26e607e52391c180035d2',\r\n    'parent_id' => 1,\r\n    'depth' => 1,\r\n    'left' => 6,\r\n    'right' => 9,\r\n  )exits parent_id\r\n array (\r\n    'id' => '59818f867e523921ec00733c',\r\n    'parent_id' => '59a26e607e52391c180035d2',\r\n    'depth' => 2,\r\n    'left' => 7,\r\n    'right' => 8,\r\n  )exits parent_id\r\n```\r\n\r\nI use `json_encode` and `json_decode` the test is valid.\r\n\r\n\r\nphp7.0.15 nts\r\nzephir 0.10.6\r\nwin 10", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1530", "title": "Access to undeclared static property", "body": "When ajax request more than 3 times, there will be \"Access to undeclared static property\"\r\nE.g\r\n```zep\r\nnamespace XqKeji;\r\n\r\nclass Di\r\n{\r\n\tprivate static _default;\r\n\r\n\tpublic static function getInstance()\r\n\t{\r\n\t\tvar di\r\n\t\tlet di = self::_default;\r\n\r\n\t\tif !di {\r\n\t\t\tlet di = new self();\r\n\t\t\tlet self::_default = di;\r\n\t\t}\r\n\r\n\t\treturn self::_default;\r\n\t}\r\n}\r\n```\r\n\r\n```zep\r\nclass app\r\n{\r\n\tpublic function __construct()\r\n\t{\r\n\t\tvar di;\r\n\t\tlet di = \\XqKeji\\Di::getInstance();\r\n\t}\r\n}\r\n```\r\nTest:\r\n\r\n```php\r\n<?php\r\n$App = new App();\r\n\r\n```\r\n in window php7.0 ts\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aiddroid": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1604", "title": "Dumplicate Extension Globals key prefix", "body": "Here is the config.json\r\n```js\r\n{\r\n    \"namespace\": \"utils\",\r\n    \"name\": \"utils\",\r\n    \"description\": \"An utils helper extension\",\r\n    \"author\": \"aiddroid\",\r\n    \"version\": \"0.0.1\",\r\n    \"verbose\": false,\r\n    \"requires\": {\r\n        \"extensions\": []\r\n    },\r\n    \"globals\": {\r\n        \"utils.enable_cache\": {\r\n            \"type\": \"bool\",\r\n            \"default\": true\r\n        }\r\n    }\r\n}\r\n```\r\nbut got \"utils.utils.enable_cache\" in phpinfo().\r\n<img width=\"978\" alt=\"phpinfo\" src=\"https://user-images.githubusercontent.com/3241146/32821231-f2d9b916-c997-11e7-808b-f36ea378c770.png\">\r\n\r\nand after I removed the \"utils\" prefix from globals section in config.json, The key became \"enable_cache\" in phpinfo().It's very strange.\r\n![image](https://user-images.githubusercontent.com/3241146/32821339-678449b6-c998-11e7-96d3-313b3cbb41e4.png)\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "marcospassos": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1601", "title": "Build failing on OSX 10.12.06", "body": "Hi folks!\r\n\r\nI'm trying to compile an extension without success on OSX.\r\n\r\n```\r\n/Users/marcospassos/Development/ccl-extension/ext/kernel/fcall.c:38:9: warning: nonnull parameter 'ce' will evaluate to 'true' on first encounter [-Wpointer-bool-conversion]\r\n        while (ce) {\r\n        ~~~~~  ^~\r\n./kernel/fcall.h:383:76: note: declared 'nonnull' here\r\nint zephir_has_constructor_ce(const zend_class_entry *ce) ZEPHIR_ATTR_PURE ZEPHIR_ATTR_NONNULL;\r\n                                                                           ^\r\n./kernel/globals.h:87:45: note: expanded from macro 'ZEPHIR_ATTR_NONNULL'\r\n# define ZEPHIR_ATTR_NONNULL __attribute__((nonnull))\r\n                                            ^\r\n1 warning generated.\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    croct/.libs/equatable.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/exception.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/concat.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/array.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/time.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/operators.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/exit.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/main.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/file.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/math.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/string.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/iterator.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/filter.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/require.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/variables.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/memory.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    croct/.libs/equality.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/fcall.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/debug.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/object.o\r\nld: 20 duplicate symbols for architecture x86_64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nmake: *** [croct.la] Error 1\r\n```\r\n\r\nAny idea on how to fix it?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "3amprogrammer": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1596", "title": "[BUG] Assignment to protected static property derived from Phalcon class causes segmentation fault", "body": "More about an issue [here](https://forum.phalconphp.com/discussion/17219/why-assigning-to-a-static-property-causes-random-segmentation-fa#C52027).\r\n\r\nSteps to reproduce:\r\n1. Create new project using cli.\r\n2. Create a simple class in library folder, that extends `\\Phalcon\\Tag`\r\n```php\r\nclass Tag extends \\Phalcon\\Tag\r\n{\r\n    public static function getUrlService()\r\n    {\r\n        self::$_escaperService = new \\stdClass(); // <- this or any other assignment to any static property causes an error\r\n\r\n        return parent::getUrlService();\r\n    }\r\n}\r\n```\r\n3. Call `Tag::getUrlService();` anywhere, in my case inside `IndexController::indexAction`.\r\n4. Use php build-in web server and refresh page a few times.\r\n```\r\n\u256d\u2500klatosinski@workstation ~/Code/test  \r\n\u2570\u2500\u27a4  php -S localhost:8000 -t public                                                                                                                                                                                                                             1 \u21b5\r\nPHP 7.0.22-0ubuntu0.16.04.1 Development Server started at Fri Nov  3 09:20:29 2017\r\nListening on http://localhost:8000\r\nDocument root is /home/klatosinski/Code/test/public\r\nPress Ctrl-C to quit.\r\n[Fri Nov  3 09:20:29 2017] 127.0.0.1:53566 [200]: /\r\nzend_mm_heap corrupted\r\n```\r\n\r\nSyslog\r\n```\r\nNov  2 14:48:13 workstation kernel: [21780.492560] traps: php-fpm7.0[11713] general protection ip:55b8b9d5cc94 sp:7ffc9ba8ca00 error:0 in php-fpm7.0[55b8b9b2a000+3ae000]\r\n```\r\n\r\ngdb core dump\r\n```\r\ntmp # gdb /usr/sbin/php-fpm7.0 core-php-fpm7.0.29519\r\nGNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1\r\nCopyright (C) 2016 Free Software Foundation, Inc.\r\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\r\nThis is free software: you are free to change and redistribute it.\r\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\r\nand \"show warranty\" for details.\r\nThis GDB was configured as \"x86_64-linux-gnu\".\r\nType \"show configuration\" for configuration details.\r\nFor bug reporting instructions, please see:\r\n<http://www.gnu.org/software/gdb/bugs/>.\r\nFind the GDB manual and other documentation resources online at:\r\n<http://www.gnu.org/software/gdb/documentation/>.\r\nFor help, type \"help\".\r\nType \"apropos word\" to search for commands related to \"word\"...\r\nReading symbols from /usr/sbin/php-fpm7.0...(no debugging symbols found)...done.\r\n[New LWP 29519]\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\r\nCore was generated by `php-fpm: pool www                                                            '.\r\nProgram terminated with signal SIGSEGV, Segmentation fault.\r\n#0  0x000055c192935978 in ?? ()\r\n(gdb) bt\r\n#0  0x000055c192935978 in ?? ()\r\n#1  0x000055c19292e91b in execute_ex ()\r\n#2  0x00007f1f723bea4f in xdebug_execute_ex (execute_data=0x7f1f72a123a0) at /build/xdebug-RemklO/xdebug-2.4.0/xdebug-2.4.0/xdebug.c:1890\r\n#3  0x000055c1929739bd in ?? ()\r\n#4  0x000055c19292e91b in execute_ex ()\r\n#5  0x00007f1f723bea4f in xdebug_execute_ex (execute_data=0x7f1f72a12330) at /build/xdebug-RemklO/xdebug-2.4.0/xdebug-2.4.0/xdebug.c:1890\r\n#6  0x000055c1928dec53 in zend_call_function ()\r\n#7  0x00007f1f63f92b59 in ?? () from /usr/lib/php/20151012/phalcon.so\r\n#8  0x00007f1f64140349 in ?? () from /usr/lib/php/20151012/phalcon.so\r\n#9  0x00007f1f723bf56d in xdebug_execute_internal (current_execute_data=0x7f1f72a122a0, return_value=0x7ffc7c8d8920) at /build/xdebug-RemklO/xdebug-2.4.0/xdebug-2.4.0/xdebug.c:2037\r\n#10 0x000055c1928deea6 in zend_call_function ()\r\n#11 0x00007f1f63f8fe6c in ?? () from /usr/lib/php/20151012/phalcon.so\r\n#12 0x00007f1f63f907b1 in ?? () from /usr/lib/php/20151012/phalcon.so\r\n#13 0x00007f1f64187a3e in ?? () from /usr/lib/php/20151012/phalcon.so\r\n#14 0x00007f1f723bf56d in xdebug_execute_internal (current_execute_data=0x7f1f72a12240, return_value=0x7ffc7c8d8db0) at /build/xdebug-RemklO/xdebug-2.4.0/xdebug-2.4.0/xdebug.c:2037\r\n#15 0x000055c1928deea6 in zend_call_function ()\r\n#16 0x00007f1f63f8fe6c in ?? () from /usr/lib/php/20151012/phalcon.so\r\n#17 0x00007f1f63f907b1 in ?? () from /usr/lib/php/20151012/phalcon.so\r\n#18 0x00007f1f6416ff36 in ?? () from /usr/lib/php/20151012/phalcon.so\r\n#19 0x00007f1f723bf56d in xdebug_execute_internal (current_execute_data=0x7f1f72a121e0, return_value=0x7ffc7c8d92d0) at /build/xdebug-RemklO/xdebug-2.4.0/xdebug-2.4.0/xdebug.c:2037\r\n#20 0x000055c1928deea6 in zend_call_function ()\r\n#21 0x00007f1f63f8fe6c in ?? () from /usr/lib/php/20151012/phalcon.so\r\n#22 0x00007f1f63f907b1 in ?? () from /usr/lib/php/20151012/phalcon.so\r\n#23 0x00007f1f6423ef48 in ?? () from /usr/lib/php/20151012/phalcon.so\r\n#24 0x00007f1f723bf56d in xdebug_execute_internal (current_execute_data=0x7f1f72a12180, return_value=0x7f1f72a120d0) at /build/xdebug-RemklO/xdebug-2.4.0/xdebug-2.4.0/xdebug.c:2037\r\n#25 0x000055c192973880 in ?? ()\r\n#26 0x000055c19292e91b in execute_ex ()\r\n#27 0x00007f1f723bea4f in xdebug_execute_ex (execute_data=0x7f1f72a12030) at /build/xdebug-RemklO/xdebug-2.4.0/xdebug-2.4.0/xdebug.c:1890\r\n#28 0x000055c192982f47 in zend_execute ()\r\n#29 0x000055c1928ee0e3 in zend_execute_scripts ()\r\n#30 0x000055c19288d240 in php_execute_script ()\r\n#31 0x000055c192771da6 in main ()\r\n```\r\n\r\nPHP 7.0.22\r\nPhalcon Version: 3.1.2", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pwtitle": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1595", "title": "How to loop SimpleXMLElement ?", "body": "for ... in can't work with SimpleXMLElement\uff1f\r\n\r\nMy XML is : \r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n--\r\n\u00a0 | <Messages xmlns=\"http://mns.aliyuncs.com/doc/v1\">\r\n\u00a0 | <Message>\r\n\u00a0 | <MessageId>52224710247175BA-1-15F72355F38-200000004</MessageId>\r\n\u00a0 | <MessageBodyMD5>D23B14C6CD9CA410B627D3C3C38BED34</MessageBodyMD5>\r\n\u00a0 | <MessageBody>[\"asdf\",\"sadfasdf\",\"2017-10-31 11:33:39\"]</MessageBody>\r\n\u00a0 | <ReceiptHandle>1-ODU4OTkzNDU5Ni0xNTA5NjE0MzA5LTEtOA==</ReceiptHandle>\r\n\u00a0 | <EnqueueTime>1509449621304</EnqueueTime>\r\n\u00a0 | <FirstDequeueTime>1509608944846</FirstDequeueTime>\r\n\u00a0 | <NextVisibleTime>1509614309000</NextVisibleTime>\r\n\u00a0 | <DequeueCount>20</DequeueCount>\r\n\u00a0 | <Priority>8</Priority>\r\n\u00a0 | </Message>\r\n\u00a0 | <Message>\r\n\u00a0 | <MessageId>52224710247175BA-1-15F72358F0A-200000005</MessageId>\r\n\u00a0 | <MessageBodyMD5>0DC582A80C06D1C334899B104FFFDA5D</MessageBodyMD5>\r\n\u00a0 | <MessageBody>[\"asdf\",\"sadfasdf\",\"2017-10-31 11:33:51\"]</MessageBody>\r\n\u00a0 | <ReceiptHandle>1-ODU4OTkzNDU5Ny0xNTA5NjE0MzA5LTEtOA==</ReceiptHandle>\r\n\u00a0 | <EnqueueTime>1509449633546</EnqueueTime>\r\n\u00a0 | <FirstDequeueTime>1509608952453</FirstDequeueTime>\r\n\u00a0 | <NextVisibleTime>1509614309000</NextVisibleTime>\r\n\u00a0 | <DequeueCount>17</DequeueCount>\r\n\u00a0 | <Priority>8</Priority>\r\n\u00a0 | </Message>\r\n\u00a0 | <Message>\r\n\u00a0 | <MessageId>52224710247175BA-1-15F7235936E-200000006</MessageId>\r\n\u00a0 | <MessageBodyMD5>C0CEFB762CE46988EDE0A0DF34243519</MessageBodyMD5>\r\n\u00a0 | <MessageBody>[\"asdf\",\"sadfasdf\",\"2017-10-31 11:33:52\"]</MessageBody>\r\n\u00a0 | <ReceiptHandle>1-ODU4OTkzNDU5OC0xNTA5NjE0MzA5LTEtOA==</ReceiptHandle>\r\n\u00a0 | <EnqueueTime>1509449634670</EnqueueTime>\r\n\u00a0 | <FirstDequeueTime>1509608954367</FirstDequeueTime>\r\n\u00a0 | <NextVisibleTime>1509614309000</NextVisibleTime>\r\n\u00a0 | <DequeueCount>16</DequeueCount>\r\n\u00a0 | <Priority>8</Priority>\r\n\u00a0 | </Message>\r\n\u00a0 | <Message>\r\n\u00a0 | <MessageId>52224710247175BA-1-15F7235978C-200000007</MessageId>\r\n\u00a0 | <MessageBodyMD5>BE399129E2EA269C68EAAE815BE718AD</MessageBodyMD5>\r\n\u00a0 | <MessageBody>[\"asdf\",\"sadfasdf\",\"2017-10-31 11:33:53\"]</MessageBody>\r\n\u00a0 | <ReceiptHandle>1-ODU4OTkzNDU5OS0xNTA5NjE0MzA5LTEtOA==</ReceiptHandle>\r\n\u00a0 | <EnqueueTime>1509449635724</EnqueueTime>\r\n\u00a0 | <FirstDequeueTime>1509608954799</FirstDequeueTime>\r\n\u00a0 | <NextVisibleTime>1509614309000</NextVisibleTime>\r\n\u00a0 | <DequeueCount>13</DequeueCount>\r\n\u00a0 | <Priority>8</Priority>\r\n\u00a0 | </Message>\r\n\u00a0 | </Messages>\r\n```\r\nwhen i use zephir language , the code is:\r\n```php\r\n// zephir language code\r\n.....\r\nvar xml = simplexml_load_string(xmlstring);\r\nvar k, v;\r\nfor v, v in xml {\r\n    print_r(k);\r\n    print_r(v);\r\n}\r\n....\r\n```\r\n\r\nthe run time error is:\r\n```\r\n<b>Fatal error</b>:  Uncaught Exception: The argument is not initialized or iterable() in Test.zep:154\r\n```\r\n\r\nbut It's work very good in PHP code \r\n\r\n```php\r\n<?php\r\n...\r\n$xml = simplexml_load_string($xmlstring);\r\nforeach ($xml as $item) {\r\n    print_r($item);\r\n}\r\n...\r\n```\r\n\r\n* who can help me ? thank you very much ?*", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "temuri416": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1590", "title": "[BUG] phalcon.so segfault on Centos7, PHP7.1 and latest 3.3.x branch", "body": "Hi,\r\n\r\nI'm trying to run an application on Centos7, under PHP7.1 and Phalcon 3.3.x.\r\n\r\nI'm seeing extremely unstable behaviour which results in segfaults in phalcon.so:\r\n\r\n```\r\nOct 23 10:45:10 d7 kernel: php-fpm[6242]: segfault at 18 ip 00007fb5f8f31d08 sp 00007ffd8edaf9a0 error 4 in phalcon.so[7fb5f8eb3000+476000]\r\n```\r\n\r\nIn this case crash happens very early in the app, during app modules setup. This is the class that's crashing it:\r\n\r\n```php\r\nabstract class ModuleTemplate implements ModuleDefinitionInterface, InjectionAwareInterface\r\n{\r\n....\r\n}\r\n```\r\n\r\nHowever, sometimes it goes past that point and after that crashes somewhere in MVC models.\r\n\r\nI dumped the core and ran gdb:\r\n\r\n```bash\r\n[root@d7 corefiles]# gdb /usr/sbin/php-fpm core.php-fpm.1508774215.1002                                                                                         GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-100.el7\r\nCopyright (C) 2013 Free Software Foundation, Inc.\r\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\r\nThis is free software: you are free to change and redistribute it.\r\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\r\nand \"show warranty\" for details.\r\nThis GDB was configured as \"x86_64-redhat-linux-gnu\".\r\nFor bug reporting instructions, please see:\r\n<http://www.gnu.org/software/gdb/bugs/>...\r\nReading symbols from /usr/sbin/php-fpm...Reading symbols from /usr/lib/debug/usr/sbin/php-fpm.debug...done.\r\ndone.\r\n[New LWP 1002]\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\r\nCore was generated by `php-fpm: pool www                                             '.\r\nProgram terminated with signal 11, Segmentation fault.\r\n#0  0x00007fe04fb31d08 in zephir_create_instance.constprop.179 () from /usr/lib64/php/modules/phalcon.so\r\n(gdb) bt\r\n#0  0x00007fe04fb31d08 in zephir_create_instance.constprop.179 () from /usr/lib64/php/modules/phalcon.so\r\n#1  0x00007fe04fc715b6 in zim_Phalcon_Di_get () from /usr/lib64/php/modules/phalcon.so\r\n#2  0x00007fe060270c34 in ?? () from /usr/lib64/php/modules/dbg-php-7.1.v18.so\r\n#3  0x00005626cb4db04c in zend_call_function (fci=0x7ffdfbe7ce70, fci_cache=0x7ffdfbe7ce40) at /usr/src/debug/php-7.1.10/Zend/zend_execute_API.c:871\r\n#4  0x00007fe04fb25061 in zephir_call_user_function () from /usr/lib64/php/modules/phalcon.so\r\n#5  0x00007fe04fb258ca in zephir_call_class_method_aparams.part.33 () from /usr/lib64/php/modules/phalcon.so\r\n#6  0x00007fe04fd65b7f in zim_Phalcon_Mvc_Application_handle () from /usr/lib64/php/modules/phalcon.so\r\n#7  0x00007fe060270c34 in ?? () from /usr/lib64/php/modules/dbg-php-7.1.v18.so\r\n#8  0x00005626cb58402c in ZEND_DO_FCALL_SPEC_RETVAL_UNUSED_HANDLER () at /usr/src/debug/php-7.1.10/Zend/zend_vm_execute.h:972\r\n#9  0x00005626cb53224b in execute_ex (ex=<optimized out>) at /usr/src/debug/php-7.1.10/Zend/zend_vm_execute.h:429\r\n#10 0x00007fe060270d68 in ?? () from /usr/lib64/php/modules/dbg-php-7.1.v18.so\r\n#11 0x00005626cb585f04 in zend_execute (op_array=0x7fe05b87f000, op_array@entry=0x7fe05b898b20, return_value=return_value@entry=0x7fe05b813030)\r\n    at /usr/src/debug/php-7.1.10/Zend/zend_vm_execute.h:474\r\n#12 0x00005626cb4ea8b3 in zend_execute_scripts (type=type@entry=8, retval=0x7fe05b813030, retval@entry=0x0, file_count=file_count@entry=3)\r\n    at /usr/src/debug/php-7.1.10/Zend/zend.c:1480\r\n#13 0x00005626cb487de8 in php_execute_script (primary_file=primary_file@entry=0x7ffdfbe80030) at /usr/src/debug/php-7.1.10/main/main.c:2552\r\n#14 0x00005626cb321474 in main (argc=<optimized out>, argv=<optimized out>) at /usr/src/debug/php-7.1.10/sapi/fpm/fpm/fpm_main.c:1966\r\n(gdb)\r\n```\r\n\r\n\r\nPhalcon version:\r\n\r\n```\r\n php --ri phalcon\r\n\r\nphalcon\r\n\r\n\r\nWeb framework delivered as a C-extension for PHP\r\nphalcon => enabled\r\nAuthor => Phalcon Team and contributors\r\nVersion => 3.3.0\r\nBuild Date => Oct 23 2017 09:45:56\r\nPowered by Zephir => Version 0.10.4-07c821e996\r\n\r\nDirective => Local Value => Master Value\r\nphalcon.db.escape_identifiers => On => On\r\nphalcon.db.force_casting => Off => Off\r\nphalcon.orm.events => On => On\r\nphalcon.orm.virtual_foreign_keys => On => On\r\nphalcon.orm.column_renaming => On => On\r\nphalcon.orm.not_null_validations => On => On\r\nphalcon.orm.exception_on_failed_save => Off => Off\r\nphalcon.orm.enable_literals => On => On\r\nphalcon.orm.late_state_binding => Off => Off\r\nphalcon.orm.enable_implicit_joins => On => On\r\nphalcon.orm.cast_on_hydrate => Off => Off\r\nphalcon.orm.ignore_unknown_columns => Off => Off\r\nphalcon.orm.update_snapshot_on_save => On => On\r\nphalcon.orm.disable_assign_setters => Off => Off\r\n```\r\n\r\nI have NuSphere's `dbg` extension enabled.\r\n\r\nThanks.", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wisegoodvin": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1580", "title": "Access to PHP $GLOBALS superglobal array", "body": "Is it possible to organize access to the superglobal $GLOBALS array, as to $ _POST, $ _GET, and others?", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/comments/24913489", "body": "\u0412\u043e\u0442 \u041a\u0410\u041a \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0442\u0435\u043b\u043e \u0446\u0435\u043b\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438?! ", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/24913489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/24915658", "body": ":) \u043e\u043a, \u043f\u0440\u0430\u0432\u0434\u0430 \u044f \u0443\u0436\u0435 \u043d\u0430 \u0441\u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043b", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/24915658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "sergeyklay": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1571", "title": "[Bug] IDE Stubs generation errors", "body": "_From @kornerita on August 8, 2017 13:55_\n\n### Expected and Actual Behavior\r\n\r\n> **Describe what you are trying to achieve and what goes wrong.**\r\n\r\nStrings constants are not quoted and generates invalid php code.\r\n\r\ni.e. [Zephir](https://github.com/phalcon/cphalcon/blob/master/phalcon/config.zep#L55)\r\n\r\nGenerated PHP:\r\n```php\r\nclass Config implements \\ArrayAccess, \\Countable {\r\n\r\n\tconst DEFAULT_PATH_DELIMITER = .;\r\n\r\n\tprotected static $_pathDelimiter;\r\n```\r\n\r\nExpected PHP:\r\n```php\r\nclass Config implements \\ArrayAccess, \\Countable {\r\n\r\n\tconst DEFAULT_PATH_DELIMITER = \".\";\r\n\r\n\tprotected static $_pathDelimiter;\r\n```\r\n### Details\r\n\r\n* System info and versions (if possible): (`phalcon info`)\r\n```\r\n$ phalcon info\r\n\r\nPhalcon DevTools (3.2.0)\r\n\r\nEnvironment:\r\n  OS: Darwin Kornalito-Air.local 16.7.0 Darwin Kernel Version 16.7.0: Thu Jun 15 17:36:27 PDT 2017; root:xnu-3789.70.16~2/RELEASE_X86_64 x86_64\r\n  PHP Version: 5.6.30\r\n  PHP SAPI: cli\r\n  PHP Bin: /usr/bin/php\r\n  PHP Extension Dir: /usr/lib/php/extensions/no-debug-non-zts-20131226\r\n  PHP Bin Dir: /usr/bin\r\n  Loaded PHP config: /etc/php.ini\r\nVersions:\r\n  Phalcon DevTools Version: 3.2.0\r\n  Phalcon Version: 3.2.1\r\n  AdminLTE Version: 2.3.6\r\n\r\n```\r\n* Phalcon Framework version: (`php --ri phalcon`)\r\n```\r\n$ php --ri phalcon\r\n\r\nphalcon\r\n\r\n\r\nWeb framework delivered as a C-extension for PHP\r\nphalcon => enabled\r\nAuthor => Phalcon Team and contributors\r\nVersion => 3.2.1\r\nBuild Date => Jul 17 2017 13:04:30\r\nPowered by Zephir => Version 0.9.9-868cb1f92b\r\n\r\nDirective => Local Value => Master Value\r\nphalcon.db.escape_identifiers => On => On\r\nphalcon.db.force_casting => Off => Off\r\nphalcon.orm.events => On => On\r\nphalcon.orm.virtual_foreign_keys => On => On\r\nphalcon.orm.column_renaming => On => On\r\nphalcon.orm.not_null_validations => On => On\r\nphalcon.orm.exception_on_failed_save => Off => Off\r\nphalcon.orm.enable_literals => On => On\r\nphalcon.orm.late_state_binding => Off => Off\r\nphalcon.orm.enable_implicit_joins => On => On\r\nphalcon.orm.cast_on_hydrate => Off => Off\r\nphalcon.orm.ignore_unknown_columns => Off => Off\r\nphalcon.orm.update_snapshot_on_save => On => On\r\nphalcon.orm.disable_assign_setters => Off => Off\r\n```\r\n* PHP Version: (`php -v`)\r\n```\r\n$ php -v\r\nPHP 5.6.30 (cli) (built: Feb  7 2017 16:18:37) \r\nCopyright (c) 1997-2016 The PHP Group\r\nZend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies\r\n```\r\n* Operating System: `macOS Sierra 10.12.6`\r\n```\r\n$ uname -a\r\nDarwin Kornalito-Air.local 16.7.0 Darwin Kernel Version 16.7.0: Thu Jun 15 17:36:27 PDT 2017; root:xnu-3789.70.16~2/RELEASE_X86_64 x86_64\r\n```\r\n* Server: `none required`\r\n* Other related info (Database, table schema): `none required`\r\n\r\n\n\n_Copied from original issue: phalcon/phalcon-devtools#1076_", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1187", "title": " Crash by using array_fill for big array", "body": "**How to reproduce**\r\n\r\n``` zephir\r\nnamespace Utils;\r\n\r\nclass Greeting\r\n{\r\n    protected _queue = [];\r\n\r\n\r\n    public function __construct()\r\n    {\r\n         let this->_queue = array_fill(0, 1000000, \"message\");\r\n    }\r\n}\r\n```\r\n\r\n**Result**\r\n\r\n```\r\n$ php -r '$t = (new Utils\\Greeting);'\r\n\r\nzephir_memory_restore_stack_common: observed variable #2 (0x7fed76a65cf8) \r\nhas too many references (1000001), type=6  [(null)]\r\n```\r\n## \r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/30802310-crash-by-using-array_fill-for-big-array?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1121", "title": "[NFR] isProperty shortcut", "body": "Without isProperty shortcut we usually have code like:\n\n``` zephir\nnamespace App;\n\nclass MyClass\n{\n    protected fallback = true {\n        set\n    };\n\n    protected cancelable = true;\n\n    public function isCancelable()\n    {\n        return this->cancelable;\n\n        // or something like this\n        // return (boolean) this->cancelable;\n    }\n\n    public function setFallback(boolaen fallback)\n    {\n        let this->fallback = fallback;\n    }\n\n    public function isFallback()\n    {\n        return this->fallback;\n    }\n}\n```\n\nMy proposal is to introduce `is<property>` shortcut. \nSo we can write the same code using shortcuts as follows:\n\n``` zephir\nnamespace App;\n\nclass MyClass\n{\n    protected fallback = true {\n        set, is\n    };\n\n    protected cancelable = true {\n        is\n    };\n}\n```\n## \n\r\n\r\n<bountysource-plugin>\r\n\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/27853994-nfr-isproperty-shortcut?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1090", "title": "Incorrect str->camelize()", "body": "How to reproduce\r\n\r\n``` zephir\r\nstring str1 = \"some_string\";\r\nstring str2 = \"someString\";\r\n\r\necho str1->camelize(), PHP_EOL;\r\necho str2->camelize(), PHP_EOL;\r\n```\r\n\r\n**Actual**\r\n\r\n```\r\nSomeString\r\nSomestring\r\n```\r\n\r\n**Expected**\r\n\r\n```\r\nSomeString\r\nSomeString\r\n```\r\n\r\nPHP's workaround\r\n\r\n``` php\r\n$string1  = \"some_string\";\r\n$string2  = \"someString\";\r\n\r\n$camelize = function ($string) {\r\n    return implode('', array_map('ucfirst', explode('_', $string)));\r\n};\r\necho $camelize($string1), PHP_EOL;\r\necho $camelize($string2), PHP_EOL;\r\n```\r\n\r\n```\r\nSomeString\r\nSomeString\r\n```", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/741", "title": "[NFR] for & foreach", "body": "From the current documentation\r\n\r\n> A `for` is a control structure that allows to traverse arrays or strings:\r\n\r\nHmm.. Frankly it's like a `foreach`. but where are `for`?!\r\nC/C++ and PHP have `foreach` and `for`.\r\n\r\nWhat about the full (conventional) support for `for`?\r\n\r\n``` php\r\nfor ($i = 0; $i < 10; $i++) {\r\n    echo $i;\r\n}\r\n```\r\n\r\nThanks", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/733", "title": "Incorrect Array Built-In Method", "body": "How to reproduce:\n### Variant with a->join(\u201d \u201c)\n\n``` zephir\nnamespace Foo;\n\nclass Bar\n{\n    public function test(string! a, var b = null) ->string\n    {\n        if b === null || b === false {\n            return a->trimleft();\n        }\n\n        if typeof b == \"array\" {\n            let b = b->join(\"\");\n        }\n\n        let b = preg_replace(\"#[-\\[\\]:\\\\\\\\^/]#\", \"\\\\\\\\$0\", b);\n\n        return preg_replace(\"/^[\" . b . \"]+/u\", \"\", a);\n    }\n}\n```\n\n**Test 1:**\n\n``` bash\nphp -r '$myobject = new Foo\\Bar; echo $myobject->test(\"FOO\", \"F\") . PHP_EOL;'\n```\n\n**Result 1:**\n\n```\nOO\n```\n\n**Test 2:**\n\n``` bash\n php -r '$myobject = new Foo\\Bar; echo $myobject->test(\"FOO\") . PHP_EOL;'\n```\n\n**Result 2:**\n\n```\nFOO\n```\n\n**Test 3:**\n\n``` bash\nphp -r '$myobject = new Foo\\Bar; echo $myobject->test(\"\u00e5lc\u00f3\", array(\"\u00e5\", \"l\")) . PHP_EOL;'\n```\n\n**Result 3:**\n\n```\nSegmentation fault (core dumped)\n```\n### Variant with join(\u201d \u201c, a)\n\n``` zephir\nnamespace Foo;\n\nclass Bar\n{\n    public function test(string! a, var b = null) ->string\n    {\n        if b === null || b === false {\n            return a->trimleft();\n        }\n\n        if typeof b == \"array\" {\n            let b = join(\"\", b);\n        }\n\n        let b = preg_replace(\"#[-\\[\\]:\\\\\\\\^/]#\", \"\\\\\\\\$0\", b);\n\n        return preg_replace(\"/^[\" . b . \"]+/u\", \"\", a);\n    }\n}\n```\n\n**Test 1:**\n\n``` bash\nphp -r '$myobject = new Foo\\Bar; echo $myobject->test(\"FOO\", \"F\") . PHP_EOL;'\n```\n\n**Result 1:**\n\n```\nOO\n```\n\n**Test 2:**\n\n``` bash\n php -r '$myobject = new Foo\\Bar; echo $myobject->test(\"FOO\") . PHP_EOL;'\n```\n\n**Result 2:**\n\n```\nFOO\n```\n\n**Test 3:**\n\n``` bash\nphp -r '$myobject = new Foo\\Bar; echo $myobject->test(\"\u00e5lc\u00f3\", array(\"\u00e5\", \"l\")) . PHP_EOL;'\n```\n\n**Result 3:**\n\n```\nc\u00f3\n```\n### Resume\n- With `a->join(\"\")` \u2014 Segmentation fault (core dumped)\n- With `join(\"\", a)` \u2014 OK\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/8083778-incorrect-array-built-in-method?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/phalcon/zephir/commits/8059e665683d1ba20c715d0761f39b6fa609af27", "message": "Updated README [ci skip]"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/ee1ab64337460dcd6cc478838bb53c09164cf3e7", "message": "Updated README [ci skip]"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/ac484539e10667464a615d774f6f1a3eeb16e6f0", "message": "Updated README [ci skip]"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/127bc9be43662c3a97d94f34e651106781f4d780", "message": "Clean build matrix"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/9aeac6ec976be9da298a6bb2637bfe5180aa4619", "message": "Cleaned Composer config\n\n/cc @Ultimater"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/31e9c9eab354537018c24034edaac4d76e397988", "message": "Bump version"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/0b7210d4f6edfe5f8ae3f1181bb4c279746afdb9", "message": "Merge pull request #1613 from sergeyklay/development\n\nDo not treat numeric strings as numbers"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/53fadda99cd79f44f4745905d2cb57bd2b49a4b4", "message": "Do not treat numeric strings as numbers\n\nFixes:  #1609"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/aabb0549a4665eb4586ed281f9ad375351bde571", "message": "Amended gd prototype"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/f58caac89e6eee39711d1bb74f4053e6ed3af741", "message": "Merge pull request #1612 from Jurigag/createinstanceabstract\n\nFix create instance abstract"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/f221e7d82659783fe5767d38f0f99f49df5aa8fb", "message": "Merge pull request #1603 from phalcon/development\n\n0.10.6"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/6b069ad0610eba6cbabfcf4aafa4c8f1b06fc5bc", "message": "Merge pull request #1602 from sergeyklay/development\n\n Deal with types"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/03525627136b960a149413e37831b6df8911146a", "message": "Use latest Zephir Parser"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/5e8b17037d8585ffff889763f0a7c75cd69958c2", "message": "Bump version"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/3dfd5bca00bbd3cbe5f582f95a0d2579a7ae9773", "message": "mod-assign: Support for assignment by division by modulus for variables"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/38dbe18c31a0cd963c46b1d23b23b941e3148f31", "message": "Amended tests"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/b8a64c9147092435f75f581cb309cbbab302048f", "message": "div-assign: Support for assignment by division for variables"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/2213636b36c1ba69f66a3d154bd4d7ff55eb3fff", "message": "Code cleanup, removed no longer used variables"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/af7b5816a87319507b915161b26bd03d85e21ef9", "message": "Improved illegal operation error handling"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/2009b69f3e13ff5dd6ef020e760736dbf7ca18e4", "message": "Amended assign tests"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/463604146d377a1306b277b4eebf75297bc62db5", "message": "ZE3: Fixed adding reference counter for scalar values\n\nPHP doesn't allocate scalar values in heap but do it directly on VM\nstack, inside HashTables and object. They are not subjects for\nreference counting and garbage collection anymore. Scalar values\ndon't have reference counter and don't support Z_ADDREF*(), Z_DELREF*(),\nZ_REFCOUNT*() and Z_SET_REFCOUNT*() macros anymore. In most cases we\nshould check if zval supports these macros before calling them.\nOtherwise we'll get an assert() or crash."}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/d79f700b519bf2b5954979db5b21947b1fdd3141", "message": "Fixed PHPDoc to help IDE"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/18ff4536c2a1d7fee822371b952ec11fa72dbb2a", "message": "Minor fixes for SymbolTable (CS, comparing objects, PHPDoc)"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/7fa922ffa1fbca334d3b4b55c02fb321168db28d", "message": "concat-assign: Do not cast dynamic string variables to long\n\nRefs: #1573"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/04eb3288bf55581a120b3832abe88e18f7857390", "message": "Merge pull request #1600 from phalcon/development\n\n0.10.5"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/d10b3c1f4c2190a0068d186f4587dc3df07a3f8b", "message": "Fixed LICENSE [ci skip]"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/75e4b3587a811c53b4c943d7b87a3524e138a129", "message": "Bump version"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/775f433787d0ead016eb3b0163f947672f0427bf", "message": "Merge pull request #1597 from sergeyklay/feature/latest-re2c\n\nUse latest re2c"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/a8d328e2c735622a03fa719af3b3a4ed29efa9ad", "message": "Enable Travis's container-based infrastructure [ci skip]"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/c8220dca841b734b3f7c39eace19ac2beaa2125f", "message": "Use latest Zephir Parser"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/5b83b42c8c247d6d3a8ee6dc16d66640d470b968", "message": "Do not install re2c provided by travis"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/f551f45c698b25e830c560b34d58750f768bb0f6", "message": "Reorder some debug reports"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/97c46e480c5c4c0c8fd84d4f96789ee2f96dc905", "message": "changed file mode from 100755 to 100644 for php files"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/87e96f1e2806dc1a9529fd662e467283bb618c53", "message": "Do not cache dev version of Zephir Parser"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/3220015b08e06b24126a9123542286a0aa40eb41", "message": "Update Travis config"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/dcb777a22a5fc45ce6e603a71c0f9e642da393f8", "message": "Update re2c installer"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/075d4e9a69b76edfc6d250597c5a93408277f0f3", "message": "Merge pull request #1592 from sergeyklay/development\n\nDeal with #1530"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/4af55a857d69a8c1967f832dafe659d29e359c03", "message": "Code cleanup"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/368622bc77aa0af61a71209d798a6ff7a4c8233d", "message": "Fixed creating Variable"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/f8fa269427e95a45421397592c27338ea94da8d9", "message": "Code cleanup"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/d1dd6395b42b5172888cef8110528aac976a9c14", "message": "Amended init help"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/c33789b966ce8df36425e384870a0b0d0855b0d8", "message": "Fixed CLI help"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/8f222188f8f656b5ac68f9c6c8ca0ba4f82b22c8", "message": "Do not use variable cache"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/459b8d96f3187a53f58aaa1e84cc9fa87f012214", "message": "Minor fixed for SymbolTable"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/e0fb7b58fffa73102a7ab401ae61ccda34eef7ec", "message": "Fixed BranchManager's PHPDoc"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/53f181c105b4b84d8fa1a1afe7cd8b8d82a6cd1f", "message": "Setting up the BranchManager before SymbolTable to avoid call getCurrentBranch on null"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/3f1f42da68babda37e8d867e972f963f823362f8", "message": "Added test for #1530"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/07c821e9969e594d389c3d457771cc9d158dd7c3", "message": "Test latest re2c"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/11e39849b02f8bebe780f2c8a52487e8566609ef", "message": "Merge pull request #1589 from phalcon/development\n\n0.10.4"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/6dbeede00cb3cadfbcbeb1c5ba09343890e303ce", "message": "Bump version"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/a21e3a256a6d6f332d3922aeb66e835bb2fba6d1", "message": "Merge pull request #1588 from remicollet/issue-timecop\n\ndisable timecop extension from the launcher"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/7f475126c7380bea312afa2783f681e7f6689ca5", "message": "Merge pull request #1587 from phalcon/development\n\n0.10.3"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/6bb27329c2373777bb0aa62db76f84f0572120fb", "message": "Added test for classes in annotations"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/f64a6362cb894a91b99952be53c7d58615264e22", "message": "PSR fixes"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/85a336c1b0cf6c06fcf669b63458e4a41c01b846", "message": "Fixed minimum parser version"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/8ecb196100e1d49776bebd0a5ec3d9b0c70734af", "message": "Cleanup"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/3943dd84dcbdca94ec1cceb642f3438dfe4f639b", "message": "Bump minimal parser version"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/4a4861907477acfb34822f35d20f7c6f8576a1dd", "message": "Fixed AppVeyor build"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/82b6fba46550e3009d59270e379a710df99c4d3d", "message": "Update AppVeyor build"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/a1fc93633d430c7208bfa18a6f5ed412fc9ef75a", "message": "Use latest Zephir Parser"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/2ca128a5a7e86be13259322d7c6d912995a16cd3", "message": "Update README.md"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/323687da59407dfd3baefce829724d2b9b760908", "message": "Updated Copyright"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/021154c79f90b66a877af796f72cc4075d02d2ed", "message": "Update copyright notice"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/669e59bb22325d34e6980f5035126342d049f6cd", "message": "Bump version"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/c2e6ce1cb54e02ae199b6a40d8aec991658ad6d5", "message": "Add dev version of Zephir Parser to build matrix"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/88196f3bf4623b87301021323d343ab26b8d40d3", "message": "Merge pull request #1586 from phalcon/development\n\n0.10.2"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/fb706a75805db24f2c7e70aad2465771c365d5a8", "message": "ZE3: Added zephir_bitwise_xor_function"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/82891e2022a0dbee8a313c51114efbab58cfcae8", "message": "Bump version"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/4fc11dbfab53e54352ee3a5337396fde120ae4c9", "message": "Added Codecov support"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/70ddb133a24d0ded35717bc1824413405456743c", "message": "Prevent calling AliasManager::isAlias on possibly null value"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/ca5361c429cc7e18c89d6a17722acbc07277c8eb", "message": "Removed $defaultValue from the Value constructor"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/9aaa75cbfb86b5abf3e5dd5a4a7ce81c40dc3413", "message": "Improved error reporting"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/931d4b34ad896c694beed63e59ae8de230e029ec", "message": "Set the default init Variable value"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/29568621d431d0cd3cd7dd01b72b4db9339cbb66", "message": "Introduced TypeHintOperator"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/312fa08d31e8581ca8f35a748133dcf10f181195", "message": "Merge pull request #1585 from phalcon/development\n\n0.10.1"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/a30c5c1b71d5f7043550c5a0a32f1d3a41069766", "message": "Allow windows to pass tests"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/251345a1db49792e94ae1050c9586aaa85e9e46a", "message": "Amended FcallTest"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/fed208ed63759395388350d5000efed8b2b85662", "message": "Fixed compilation for type casted variables"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/a7d73809eaf15906195c5018adbbc9b7e0a48bee", "message": "Bump version"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/64991a4d06d2862e3bcbaa9618be7c14bc821c93", "message": "Added missed import of CompilerException"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/a788fb12f68d6ceb244a201bef4c5b37d847bebe", "message": "Merge pull request #1584 from phalcon/development\n\n0.10.0"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/41534fb49680ceba4f4d345b4fdd5471a7f59d62", "message": "Merge pull request #1583 from sergeyklay/development\n\nv0.10.0"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/bffb0268c9f8230f8148d6b50ba33b088f2c10ea", "message": "Code cleanup"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/550d5fae40ed2c4764edfeb5841c6d4c3c511e3d", "message": "Clean CommandHelp"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/b3c2d481e66425970697f1f974688be6f962edf1", "message": "Added FcallManagerInterface"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/078b7c7c86e1b113814d3a561aef2c1180e94640", "message": "Bump version"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/699c6235fa74a533b7d5c0686b1c37fcb2650ef5", "message": "Updated docs"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/cd2030af46b1b9584131ccbc6176378bce86ebd5", "message": "Removed no longer used bundled parser"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/d70933d1dc8aa1cf68bd0c8c84dcb051dc999dee", "message": "Removed unused imports"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/8436233e3ab93655ed23bd7c4a615c14d1b431ac", "message": "Moved CompilerException to common place"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/b17949f5447dee45b8dd9d91e80f6ce37685ce89", "message": "CS fixes"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/8b37834b9b040fac80e2419fb0450737db552152", "message": "Improved error reporting"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/72f69f88bf4bd90f94c469ebd2c91166c1a39844", "message": "Amended commands help"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/d5460d05d0a07e7d2d3218312ca9fa976ebef3a8", "message": "Added CommandInterface::getSynopsis"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/e09c2ae094f9b253c38ab0ad2d1450348882e8eb", "message": "Added --help command option to each command"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/830691a2218e7c5c5c471fa94eba8a96aede6b89", "message": "Cleaned commands and improved commands description"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/cf9d0412541885c7e69a71ed547bc778b0c208f7", "message": "Cleaned Bootstrap"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/cc31d969a142234520864bf3b48a22a1d532a7ac", "message": "Added ExceptionInterface::getErrorRegion"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/4947eab9b66e51b47481e47f2fe6bfe410abf55b", "message": "Pass Commands Manager to the each command"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/f06e82a61dba5fc2ca80d7a0b6ee742afb4d173f", "message": "Introduced ExceptionInterface::getExtra"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/63a8e0c4adb8383fd13e638a75788e5e9ac1a18c", "message": "Introduced CommandInterface::getCommandsManager"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/44a27ee7eda6ebab3d723284297dba75ccba6320", "message": "Removed safe_mode php option"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/1fd25d2c173b57878f17cd614a4f373d5729092e", "message": "Amended command manager"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/a6f2e47916274f93c9b9d0aafec7a501f1357b23", "message": "Introduced domain exceptions to throw more specific errors"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/c7fd8c5c1704a3d02a13b30d2ef5662d98d6cdfc", "message": "Introduced Zephir\\Commands\\Manager"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/a766651d2be485c22d08e16f4cd47e2e3e61f9d2", "message": "Fixed Logger' file contents cache"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/fde4efc02817adbee27720ec434abe99d7764c35", "message": "Added ability to setup Zephir base path"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/35223068ec773452a044309af3427058af3df0dd", "message": "Updated Copyright"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/f87af3285f22403d158a9e8630cf1228dae16c83", "message": "Introduced Config::fromServer factory method"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/a798e4e1ed6a75f4f51a4ef7b601e89119844440", "message": "Code cleanup"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/2e677ec8ab0dc91b2ba1e3e27ee7849ba6e6a2cf", "message": "Code cleanup"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/48ba704cc9a564906b7a9350c831dcf5fccef37f", "message": "Removed no longer needed Apc storage"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/1e42fd8a5a47e47ef77875e9b343d4b084b28c7d", "message": "Config class implements JsonSerializable"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/b2f5b9eb1da2981b10367354d2c0f7cb460f4e7e", "message": "Fixed Config"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/cf2635e66ac8825845a25396353211671c229576", "message": "Improved install_zephir_parser script"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/667c7c9f7773584a84b0432e819715544bebcbe6", "message": "Improved CI cache"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/e877cef0c353aac16f6a24c204f8675fa230509a", "message": "Fixed Travis cache"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/e7ea6bcf50cf4bf24cc3c09eab74e31b1ad097c6", "message": "Allow install zephir-parser on scrutinizer"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/9051f7e199450ad4c45ca28fa742fe5a0ede92b0", "message": "Removed enable_dl command directive\n\nSee: 3b4f0ee0"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/7d6dcaf2a4454742682706cb8907a80b46474211", "message": "Improved Project Config"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/3b4f0ee024ca2ce650798342a24da902e49091f1", "message": "Removed enable_dl command directive\n\nThis deprecated feature will certainly be removed in the future\nfrom PHP. Actually we no longer need this directive at all."}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/78bb7e7dd10f61bc37d0bab8d0dd9c1ec38a5c65", "message": "Bump dev version"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/1f84124d4ad445ffea5861b12f6bfe4f5e771889", "message": "Merge pull request #1579 from JABirchall/patch-2\n\nPHP SDK 2.0 for windows is now hosting on Github"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/3eefe760b0dc3e4b983c85d5a979d03601d9862b", "message": "Merge pull request #1569 from phalcon/development\n\n0.9.11"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/534bd284df93e1c36c9893d8bd2ef270b207a55b", "message": "Merge pull request #1567 from sjinks/issue-1566\n\nImplement zephir_{greater,less}_double()"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/0161027a24525fa8ba1e3aa7fcd711e5b8951af9", "message": "Merge pull request #1563 from sergeyklay/development\n\nMinor cleanup"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/6fd42cf7ed351e272e0ece0078ae2dcf834d9f05", "message": "Cleaned no longer needed code"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/3aa77ca468b6dc8be79838d3f0e16ad1e3213a8f", "message": "Mark deprecated code"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/2bca232f0ea566bccfb9d4b8b05e96a5b707eb79", "message": "Fixed CS"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/60ab252b2edc5dff4f31f1d0619468acaebdffc0", "message": "Merge pull request #1562 from sergeyklay/development\n\nImproved CS, fixed minor bugs"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/2754042268e8ad6d0ac5480e53b85f9986834552", "message": "Merge pull request #1 from phalcon/scrutinizer-patch-1\n\nScrutinizer Auto-Fixes"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/d821017b3c9b1ca993fe147eb45b020c66f515b9", "message": "Improved CS"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/41b01364170766b258b173ee07c0ddc48170f6b7", "message": "Amended tests"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/03be89bbebb9a313b51f8f52a3f690c7f2e483b2", "message": "Improved CS, fixed minor bugs"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/cbce8bfa1010a0f8cdea9e9cf1b7dba974577889", "message": "Bump dev version"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/1b5072105e4e8a98b7615d9f695de513a6dca41a", "message": "Merge pull request #1561 from phalcon/development\n\n0.9.10"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/43394b40603e1a65c918476446644e6c099a051f", "message": "Merge branch 'master' into development"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/6bb67585c2454bd3889b6a0c42ba1b4c88041c4b", "message": "Merge pull request #1560 from sergeyklay/development\n\n[ZE3] Fixed zephir_function_exists"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/d8d498defdda7799aead45745ec498c91aa66313", "message": "Do not test too much functions (+ randomize)"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/065018cdf2db187b9799324b293cea5599dcbec5", "message": "Fixed issue #1547"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/eccafc5adadfb70335e20c9cfe183f4f518b1d39", "message": "CS fixes"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/733783ccca705b25ec4522f46806324e14dcb7e8", "message": "Added test for #1547"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/f5193cfb96db81a2545a7ca8dde266b9305032af", "message": "CS fixes"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/d6f3deed23fcf1e95cad5700ae975d04c725f25b", "message": "Merge pull request #1558 from sergeyklay/development\n\nBump dev version"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/bbd953a54f48a90063d87e4b5e3071ded54d3035", "message": "Update AppVeyor build"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/18a9552751cec97e7ef064601d4869f66aece727", "message": "Bump dev version"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/868cb1f92b23b83fa5b424f787c01c5a0a8205a1", "message": "Bump version"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/b77b566b55d5c1df3f1a7c4bb97a863c75601281", "message": "Merge pull request #1552 from phalcon/development\n\n0.9.9"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/433d2cd24917efea97f6686d32949acb3ed9b83b", "message": "Merge pull request #1550 from remicollet/development\n\ndrop zend_error_noreturn usage"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/096365f70bdd8470434617cf5a688893f9e0cc59", "message": "Merge pull request #1543 from sergeyklay/zend_error_noreturn\n\nTests #1534"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/6335775f25f1f7971dfb312b227cb81b0505fba6", "message": "Amended tests"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/af12f783ff500bb2ec462a4273844c67fc65ab88", "message": "Tests #1534"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/63a35e13c5150e19b3d6abe00fdd65e2471a84f4", "message": "Merge pull request #1540 from phalcon/development\n\n0.9.8"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/00bb6f7547cb6ddfd8b5cf922dbc89232dc5aec5", "message": "Bump version"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/0ecdd270363d367fb75f99d786308e1e42fa2bcb", "message": "Merge pull request #1539 from sergeyklay/development\n\nFixed globals"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/120a2607c944e8c34361c46bb04416a214cf4199", "message": "Fixed globals"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/5d6330bd37cd93dfcc6ada7aed26b3a22b6d3dc9", "message": "Merge pull request #1537 from sergeyklay/feature/superglobals/env\n\nIntroduced Globals Manager"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/714fa052be19187c0e42c33e26698aa7f3134fce", "message": "Added support for $_ENV global variable"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/05417d7474dc1e7c0d9f2126b451ea85e15f4326", "message": "Introduced Globals Manager"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/edf9433136538f0db036a4c01b62674bde655d21", "message": "Merge pull request #1533 from sergeyklay/development\n\nFix superglobals (2)"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/9ebec83918692a29ec03ac40d24395f15cce3e94", "message": "Fixed Zephir\\SymbolTable::getVariableForWrite"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/83d07852ee7d76a8590823b9f6279776faf0fc35", "message": "Add hack to serve superglobals in ZE2"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/eef14cc766f39c7137b14a8403c861bfa994d7ce", "message": "Rollback $variable::isSuperGlobal -> $symbolTable::isSuperGlobal"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/e137e9c8fec6054326ca141f9a4ab05877c73779", "message": "Fixed ZendEngine3\\Backend::fetchGlobal"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/6dcd085241ca3400b2775743ce7e55fc455014c7", "message": "Amended PHPDoc"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/c72074731d664451342626f2a003cd2834b2cb7f", "message": "Fixed Zephir\\Variable::isSuperGlobal\n\n1. Do not use static variables/methods as log as it possible\n\n2. We should'n use varables like _POST or _SESSION as internal\n   variables. They should be always external."}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/cf56660c2f349a48b288cdaa816fdb98fe997e76", "message": "Amended tests"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/3b404f75ffe48db609dfce8f10bdb43b8cef3773", "message": "Amended $_SESSION tests"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/d8cccbcd279deee43e2210e1c33876341339a945", "message": "Added test for $_SESSION"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/caa03a4beac4882adee2a1c13341628001787b97", "message": "Merge pull request #1523 from jianzhiyao/patch-1\n\nUpdate README.md"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/45c8c0205a36053dfc2426e8de3f60fced8ae9d8", "message": "Merge pull request #1514 from phalcon/cleaned-git-ignore\n\nCleaned .gitignore [ci skip]"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/d2c485c112a6465a125e8f77053e1ca938da59ba", "message": "Cleaned .gitignore [ci skip]"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/06f8e76d7d5ae76224dd0a2b5f26a46c5ab34c22", "message": "Merge pull request #1508 from sergeyklay/update-parser\n\nAlways use stable parser"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/779aaf3db56d3a30924289c5829915b464eb4ce9", "message": "The PHP 5.4 is no longer supported"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/5e73b99d0391ae319a92f565196ce6af0c8554da", "message": "Use new parser for AppVeyor"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/884fa7e4290513c477cc93785deb4224f86c43f2", "message": "Always use stable parser"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/2d7f69cc6e43c956bba593cbdfadab56e9791e63", "message": "Merge pull request #1503 from sjinks/evandropoa-master\n\nMake `zephir clean` and `fullclean` work in Windows"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/75619398817657b837ea37ab78553e6827775b30", "message": "Added ability to not exit from PHPUnit test runner"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/69dc59ef8e5b423f32fce6e0548c6fad84475162", "message": "Merge pull request #1476 from sergeyklay/master\n\nCleanup project [ci skip]"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/0ec2dc84c55ef0e80845215ea2ef6ff8bb2aa3a4", "message": "Cleanup project [ci skip]"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/1fae5e50acea21511a092ffc443b54b865542665", "message": "Bumb version [ci skip]"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/5628cc90deb04dbceff1d3ce8f084c98ab3b9ce7", "message": "Merge pull request #1473 from sergeyklay/master\n\nRemove modules/php-zephir-parser (see #1471)"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/1efccb43abe5e014d1f82f7592db13130059921e", "message": "Fixed Travis CI build"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/229fca91962e9b045fc0e7ad578641d22647056f", "message": "Remove modules/php-zephir-parser (see #1471)"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/82a38d7f46dbee3ef050dafdbb87fb14320e6dee", "message": "Merge pull request #1472 from sjinks/master\n\nFix for MSVC"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/comments/10538880", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/10538880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/13324023", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/13324023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/13401818", "body": "Good work! :+1: \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/13401818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/14511611", "body": "```\n/home/travis/build.sh: eval: line 46: syntax error: unexpected end of file\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/14511611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/14511627", "body": "what are you trying to do?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/14511627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/16862301", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/16862301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/17236906", "body": "\ud83d\udc4d \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/17236906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/17405400", "body": "You can use it as follows (zephir):\n\n``` zephir\nstring str = \"string-to-camelize\";\nstr->camelize(\"-\");\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/17405400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/17480399", "body": "@steffengy Could you please amend tests from #1253\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/17480399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/17480434", "body": "@steffengy yeah, this is what I mean - tests from 72ba99a\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/17480434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/17480443", "body": "@steffengy Ah, sorry! I saw it. \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/17480443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/17480444", "body": "@steffengy What about  #1090  here?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/17480444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/17480492", "body": "When I use something called `(un) camelize` I expect that the string will be _(un) camelized_. I do not expect that this function will change the case of arbitrary characters. Because function called `camelize`, not `camelize_and_normalize`, `camelize_and_upper(lower)_case`, etc.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/17480492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/17480518", "body": "Yeah\n\nP.S. Just found https://en.wikipedia.org/wiki/CamelCase\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/17480518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/17480525", "body": "Actually I believe that the design of both functions is disgusting because it is easy to pick up such cases when the inverse transform is incompatible. For example `camelize(uncamelize(camelize(\"_Test\")))`\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/17480525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/18427188", "body": "@Izopi4a https://github.com/phalcon/zephir/pull/1284/files\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/18427188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/22085745", "body": "What about `return someNull === null` or `return typeof someNull  === \"null\"` or `return gettype(someNull) === \"null\"` ", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/22085745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/24915626", "body": "\u042d\u0442\u043e \u043d\u0435 \u043a\u043e \u043c\u043d\u0435 ) \u041d\u0435 \u0437\u043d\u0430\u044e", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/24915626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/37516900", "body": "What about null ? :)\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/37516900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/50978053", "body": "rly?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/50978053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/53826224", "body": "> Currently some applications have DocBlocks containing just the {@inheritDoc} inline tag to indicate that their complete contents should be inherited. This usage breaks with the PHPDoc Standard as summaries cannot contain inline tags and inheritance is automatic; you do not need to define a special tag for it.\n> \n> However, it does make clear that an element has been explicitly documented (and thus not forgotten). As such we are working to include a new (normal) tag in the PHPDoc Standard @inheritDoc that will serve that purpose.\n\nhttp://phpdoc.org/docs/latest/guides/inheritance.html\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/53826224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/60140023", "body": "Thanks. Fixed\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/60140023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/60274679", "body": "Thanks. Improved\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/60274679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/60650360", "body": "do you mean throw warning on `Z_STRLEN_P(str) <= 1` ?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/60650360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/60654731", "body": "I think you mean something else or I've misunderstood :) Because it's pointless\n\n``` c\n    if (Z_TYPE_P(str) != IS_STRING || Z_STRLEN_P(str) > 1) {\n        zend_error(E_WARNING, \"Invalid arguments supplied for uncamelize()\");\n        return;\n    }\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/60654731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/60694480", "body": "Probably you meant?\n\n``` c\nif (Z_TYPE_P(str) != IS_STRING || Z_STRLEN_P(str) < 1) {\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/60694480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/60826142", "body": "@steffengy `str` is string that must be camelized/uncamelized. So length of `str` shouldn't be in particular size. At least `str` length might be greater than 1\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/60826142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/60826318", "body": "@steffengy What do you think about `delim = *(Z_STRVAL_P(delimiter));` in your opinion it is OK?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/60826318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/69392380", "body": "@hervems It seems to me this may be cleaned safely due to the fact that latest Zephir does not support PHP < 5.4\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/69392380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/80567779", "body": "Spaces must be used to indent lines; tabs are not allowed\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/80567779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/80567817", "body": "Opening brace should be on a new line\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/80567817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/81217404", "body": "@josh4trunks \n\n``` sh\nzephir fullclean && zephir build --backend=ZendEngine3\n/usr/local/bin/zephir: 22: [: -a: unexpected operator\n```\n\nAre you sure about `#!/bin/sh` and `-a` ?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/81217404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/81223979", "body": "https://github.com/phalcon/zephir/pull/1332\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/81223979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/88608454", "body": "> Spaces must be used to indent lines; tabs are not allowed\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/88608454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/106793412", "body": "@dreamsxin \r\n```gdb\r\n(gdb) print fci.object.ce\r\nCannot access memory at address 0x10\r\n\r\n(gdb) print fci.object.properties\r\nCannot access memory at address 0x20\r\n\r\n(gdb) print fci.object.properties_table\r\nCannot access memory at address 0x28\r\n\r\n(gdb) print fci.object\r\n$8 = (zend_object *) 0x0\r\n\r\n(gdb) print fci.size\r\n$11 = 56\r\n\r\n(gdb) print fci_cache.object.ce\r\n$15 = (zend_class_entry *) 0x7ffff3803240\r\n```\r\n\r\nSo looks like `fci.object` empty here", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/106793412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/106793509", "body": "Code before \r\n```c\r\n#if PHP_VERSION_ID >= 70100\r\n\tfci->object = (func->common.fn_flags & ZEND_ACC_STATIC) ? NULL : fci_cache->object;\r\n\tcall = zend_vm_stack_push_call_frame(ZEND_CALL_TOP_FUNCTION, func, fci->param_count, fci_cache->called_scope, fci->object);\r\n#else\r\n```\r\n\r\nLets see\r\n```gdb\r\n(gdb) print func.common.fn_flags\r\n$18 = 513\r\n\r\n(gdb) print ZEND_ACC_STATIC\r\n$19 = 1\r\n\r\n(gdb) print 513 & 1\r\n$21 = 1\r\n```\r\n\r\nSo `fci->object` is NULL ", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/106793509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108012260", "body": "You have a good memory :smiley:", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108012260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108033626", "body": "Could you please follow `.editorconfig`", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108033626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108033653", "body": "Do you use mixed indents? We use tabs for C files", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108033653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108033676", "body": "<img width=\"174\" alt=\"screenshot at mar 25 13-06-14\" src=\"https://cloud.githubusercontent.com/assets/1256298/24321705/ddfb6426-115b-11e7-9ba1-7b310c7eb6f7.png\">\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108033676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108038111", "body": "Works fine. See https://github.com/phalcon/zephir/blob/master/.travis.yml#L68", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108038111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108225595", "body": "Good catch! ", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108225595/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108225983", "body": "Okay", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108225983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109216746", "body": "Could you please follow common code style", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109216746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109224207", "body": "\ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109224207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109224634", "body": "Yes, and fix braces", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109224634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109279794", "body": "Cc: @ovr ", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109279794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109279800", "body": "\ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109279800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109301768", "body": "@sjinks In fact the presence of `-DZEPHIR_RELEASE` flag could help to identify potential problems at development stage. isn't it?", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109301768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109301999", "body": "\ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109301999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109302264", "body": "Oh! I'm sorry \ud83d\ude10 ", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109302264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109302066", "body": "Sill can't understand..\r\n\r\nWe have a lot of such logic:\r\n```c\r\n#ifndef ZEPHIR_RELEASE\r\nzend_error(E_WARNING, \"Invalid arguments supplied for memnstr in %s on line %d\", file, line);\r\n#else\r\nzend_error(E_WARNING, \"Invalid arguments supplied for memnstr()\");\r\n#endif\r\n```\r\n\r\nHere `ZEPHIR_RELEASE` can help at development stage. Right? Probably we have to refactor this or use another identifier..", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109302066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/111248579", "body": "@sjinks Could we add something like this: https://github.com/phalcon/php-zephir-parser/blob/development/unit-tests/Extension/TestCase.php#L54-L77\r\n\r\nrelated to the https://github.com/phalcon/zephir/issues/1462", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/111248579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/111250767", "body": "https://github.com/phalcon/zephir/blob/master/Library/FileSystem/HardDisk.php#L166", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/111250767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/111261179", "body": "What about https://help.github.com/articles/ignoring-files/#create-a-global-gitignore \r\n\r\nSee top of this file :)", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/111261179/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110343541", "body": "Can we use this globally ?\r\n\r\n```yaml\r\nenv:\r\n  global:\r\n    - LD_LIBRARY_PATH=\"$TRAVIS_BUILD_DIR/build/lib\":$LD_LIBRARY_PATH\r\n    - LIBRARY_PATH=\"$TRAVIS_BUILD_DIR/build/lib\":$LIBRARY_PATH\r\n    - C_INCLUDE_PATH=\"$TRAVIS_BUILD_DIR/build/include\"\r\n    - CFLAGS=\"-g3 -O0 -Wall -fvisibility=hidden\"\r\n    - ZEND_DONT_UNLOAD_MODULES=1\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110343541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110453993", "body": "Actually I like more something like:\r\n\r\n```php\r\n$cleanup  = '';\r\n$callback = function($variable) use (&$cleanup) {\r\n    /// ...\r\n};\r\n\r\narray_map($callback, $context->symbolTable->getVariables());\r\n```", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110453993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110454759", "body": "Could we incapsulate this into something like \r\n```php\r\n$variable->haveToBeCleaned();\r\n```\r\n\r\nI'd like to cover this by tests in near future and have an ability to mock this", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110454759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110455506", "body": "```php\r\nprotected $complexVariables = [\r\n    'variable' => true,\r\n    'string'   => true,\r\n    // ..\r\n];\r\n\r\npublic function isComplex()\r\n{\r\n    return isset($this->complexVariables[$this->type]);\r\n}", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110455506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110455805", "body": "Could we use an template file for all this?", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110455805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110456698", "body": "could we introduce a small factory function to incapsulate this logic and/or increment refcount", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110456698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110456803", "body": "Thank you!", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110456803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110456822", "body": "\ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110456822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110458875", "body": "I mean something like (not sure about macros name)\r\n\r\n```c\r\n#define CREATE_OBJECT_OR_ADD_REF(zval_ptr) \\\r\n    if (Z_TYPE_P(zval_ptr) != IS_OBJECT) { \\\r\n        zval *arg = object; \\\r\n        ALLOC_INIT_ZVAL(object); \\\r\n        object_init_ex(object, zend_exception_get_default(TSRMLS_C)); \\\r\n        ZEPHIR_CALL_METHOD(NULL, object, \"__construct\", NULL, 0, arg); \\\r\n    } else { \\\r\n        Z_ADDREF_P(zval_ptr); \\\r\n    }\r\n```", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110458875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110513193", "body": "Well, never mind then \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110513193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110515191", "body": "Could you add `- phpenv config-rm xdebug.ini || true`", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110515191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110515893", "body": "No, I suggest to use something like `templates/ZendEngine2/zephir_init_properties.tpl`. I'm still not sure. Just wondering your opinion", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110515893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/113692001", "body": "\ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/113692001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/115157554", "body": "`self::complexTypes` => `self::$complexTypes`", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/115157554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/115372452", "body": "@sjinks Do not use static variables/methods as log as it possible", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/115372452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/128954777", "body": "@sjinks I'm pretty sure that it doesn't resolve the issue for the PHP 7.0 (ZE3) because it is ZE2. Also it seems this may cause performance regression for PHP 5.6. ", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/128954777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/128955889", "body": "@sjinks Just inspected this in ZE2 and ZE3.\r\n\r\n**ZE2** (before `zend_call_function`):\r\n```\r\nprint fcic.called_scope.name.val   # (zend_class_entry *) 0x0\r\nprint fcic.calling_scope.name.val  # (zend_class_entry *) 0x0\r\nprint fcic.object_ptr              # (zval *) 0x0\r\nprint print fcic.function_handler  # (zend_function *) 0x0\r\n```\r\n\r\n**ZE3** (before `zend_call_function`):\r\n```\r\nprintf \"%s\\n\", fcic.called_scope.name.val                     # Group\\PrivateCaller\r\nprintf \"%s\\n\", fcic.calling_scope.name.val                    # Group\\PrivateCaller\r\nprintf \"%s\\n\", fcic.object.ce.name.val                        # Group\\PrivateCaller\r\nprintf \"%s\\n\", fcic.function_handler.common.function_name.val # runBar\r\n```\r\n\r\nActually I like your solution with `populate_fcic` and `resolve_callable` for ZE3. Could you please try to backport they to the ZE2?", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/128955889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "maybeTomorrow": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1568", "title": "i got a 50mb size dll file", "body": "How do I compress DLL file sizes?", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ilhanyumer": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1564", "title": "zephir build doesn't create a dll, instead opens configure.js in Notepad++", "body": "I'm trying to build a dll file but it doesn't build any dll. I run this command: `zephir build`\r\n\r\nThen the output is:\r\n```\r\nPreparing for PHP compilation...\r\nPreparing configuration file...\r\n```\r\nAnd then it opens the `configure.js` in Notepad++. http://i.imgur.com/vBQiWSn.png And it stays like this forever. If I close the Notepad++ it prints 2 more lines and there is no dll http://i.imgur.com/Hssuc2b.jpg\r\n\r\n\r\n### Details\r\n\r\n* Everything is 64bit\r\n* Zephir Parser => enabled\r\n* Author => Zephir Team and contributors\r\n* Version => 1.0.3\r\n* Build Date => May 13 2017 15:03:23\r\n\r\n* PHP 5.6.31 (cli) (built: Jul  5 2017 22:24:47)\r\n* Copyright (c) 1997-2016 The PHP Group\r\n* Zend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies\r\n\r\n* Microsoft Windows [Version 6.3.9600]\r\n\r\n* Installation type: installing via package manager\r\n\r\n* Visual Studio Ultimate 2012 with Blend\r\n** Blend for Visual Studio\r\n** LightSwitch\r\n** Microsoft Foundation Classes for C++\r\n** Microsoft Office Developer Tools\r\n** Microsoft SharePoint Developer Tools\r\n** Microsoft Web Developer Tools\r\n\r\n\r\ncompile-errors.log:\r\n\r\n> Microsoft (R) Program Maintenance Utility Version 11.00.50727.1\r\n> Copyright (C) Microsoft Corporation.  All rights reserved.\r\n> \r\n> NMAKE : fatal error U1064: MAKEFILE not found and no target specified\r\n> Stop.\r\n\r\nThe compile.log is empty.\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1564/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Jurigag": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1542", "title": "Random Core Dumps on PHP 5.5(possibly 5.6 too)", "body": "Some latest changes to zephir triggered somehow i think this bug in php - https://bugs.php.net/bug.php?id=64827 when running phalcon tests. I got two core dumps here:\r\n\r\nhttps://pastebin.com/nMRHmf1k\r\n\r\nNot sure what is causing it, it's not really reproducible, some times it runs fine, some times core dump and sometimes zend_mm_heap corrupted", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1536", "title": "Extending class with static is changing null value", "body": "When extending zephir class which has static field it's changing it's value from `NULL` to `&NULL` in php 7 and 7.1, for php 5.5 and 5.6 it works fine.\r\n\r\nRelated PR with test - https://github.com/phalcon/zephir/pull/1535\r\n\r\n@sjinks ", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1520", "title": "Detect debug when building", "body": "I have a small idea, sometimes i forgot to write builddev when i need to, how about:\r\n\r\n- detect if we have php compiled as debug\r\n- if yes then `zephir build` will always build extension with debug symbols(just `zephir builddev`)\r\n- if not then as it is\r\n- add `zephir buildprod` so someone can build extension without debug symbols anyway", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1449", "title": "Missing optimizers", "body": "- [ ] extract\r\n- [ ] compact\r\n- [x] get_defined_vars\r\n- [ ] parse_str\r\n- [ ] assert\r\n- [x] func_get_args\r\n- [x] func_get_arg\r\n- [x] func_num_args\r\n\r\nSource - https://wiki.php.net/rfc/forbid_dynamic_scope_introspection", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1431", "title": "Protected call", "body": "Currently zephir allows to call protected method from other object in zephir code itself.\r\n\r\nIs there any visbility set in zephir itself or just all methods are public and visibility is only for php?\r\n\r\nHere is rellated pull request with tests - https://github.com/phalcon/zephir/pull/1429 Notice on php 7.1 it works as it should be.", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1404", "title": "is_php_version usability", "body": "```c\r\n#define zephir_is_php_version(id) (PHP_VERSION_ID / 10 == id / 10 ?  1 : 0)\r\n```\r\n\r\nCurrently it looks like this, i don't even know wtf is this really. Maybe better would be here to use somehow version_compare and `PHP_VERSION`?", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1400", "title": "ArrayAccess doesn't work in zephir-land", "body": "Not sure if fetch keyword supports ArrayAccess interface. Doesn't seems so, check this PR for more https://github.com/phalcon/cphalcon/pull/12670\r\n\r\nIt could be nice to implement it imho.", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1345", "title": "Zephir ignores namespace fallback policy", "body": "What is namespace fallback policy:\r\n\r\nhttp://php.net/manual/en/language.namespaces.fallback.php\r\n\r\nThis is causing that calls to php functions like `is_uploaded_file` and rest of php functions can't be mocked up in tests anyhow because zephir calls php function anyway.\r\n\r\nRelated - https://github.com/phalcon/cphalcon/pull/12352\r\n\r\nI know there is probably wrong namespace and it should be `Phalcon\\Validation\\Validator` but i checked with it and not working anyway.\r\n\r\nEven creating proxy class and trying diffrent namespaces there don't work :/\r\n\r\nTbh im not sure if there is even anyway to solve it since we have compiled extension, i guess not.\r\n## ", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1333", "title": "[NFR]Check syntax/lint command", "body": "Some command to check only zephir syntax of current project if it's correct without building/compiling it would be nice. Like:\r\n`zephir lint`\r\n\r\nAnd it will check syntax in all files and return errors if any. In future we could improve error informing like which files, line, which error and perhaps even add some phpstorm extension so it could on file change execute this command and check for errors and correctly inform it(like phpmd/phpcs is doing it).\r\n\r\nIm guessing we could possibly use `zephir generate` but i mean some faster way without really generating c code in files(no writing any single file)\r\n## ", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1333/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1221", "title": "Interface/class names conflict, can't use the same name if it exists in current class", "body": "For example we have namespaces like:\r\n\r\n```\r\nPhalcon\\Firwall\r\n```\r\n\r\nHere we have:\r\nAdapter and AdapterInterface\r\n\r\n```\r\nPhalcon\\Firewall\\Adapter\r\n```\r\n\r\nHere we have Annotations which extends \r\n\r\n```\r\nPhalcon\\Firewall\\Adapter\r\n```\r\n\r\nI wanted in use `Phalcon\\Annotations\\AdapterInterface` type in `Phalcon\\Firewall\\Adapter\\Annotations` constructor but here is no way of doing it. I guess there are some name conflicts. Also i tried with as but it's not working, zephir is just writing:\r\n\r\n```\r\nZephir\\CompilerException: Unknown type AdapterInterface in /root/2.1.x-firewall/cphalcon/phalcon/firewall/adapter/annotations.zep on\r\n line 42 public function __construct(<AdapterInterface> annotationsAdapter)\r\n```\r\n## \r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/32214390-interface-class-names-conflict-can-t-use-the-same-name-if-it-exists-in-current-class?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1212", "title": "SplFileObject The parent constructor was not called", "body": "When creating new `SplFileObject` in `Zephir` with path to some php file `LogicException` is thrown with message The parent constructor was not called.\r\n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/31887690-splfileobject-the-parent-constructor-was-not-called?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1209", "title": "[NFR]String curly syntax", "body": "Hello. I have such an error when building zephir extension:\r\n\r\nScanner error: -2 {type}/{line}/{file}\r\nSegmentation fault (core dumped)\r\n\r\nThere is which instruction causing a problem from gdb:\r\nhttp://pastebin.com/Qe02jY8J\r\n\r\nAnd there stacktrace:\r\nhttp://pastebin.com/XCJaymGH\r\n## \r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/31865058-nfr-string-curly-syntax?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1208", "title": "SplObjectStorage array access", "body": "Currently, zephir for working with SplObjectStorage returns Illegal offset type(cuz he expects string/int etc types, not object). Any plans about implementing objects ? Or maybe just offsetGet/offsetSet should work ?\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/31852771-splobjectstorage-array-access?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/phalcon/zephir/commits/448b45901f8f0cd772c32f43eb32b09f76e9da85", "message": "Fix create instance abstract"}], "pull_requests": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/1551", "title": "Test globals", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/1429", "title": "Test calling protected method", "body": "On phalcon repo there is some weird code that protected method of some object is called without any problems from other object, on php 7.1 it's started to failing(**IT SHOULD ON ALL VERSIONS**) so this is testing this.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/99643474", "body": "Why exactly change this to zend stuff? Isn't better to fix broken zephir code?", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/99643474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/99643527", "body": "Why exactly change this to zend stuff? Isn't better to fix broken zephir code?", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/99643527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/99643860", "body": "Again. Why exactly change to zend stuff? Isn't better to fix zephir related stuff?", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/99643860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/106806610", "body": "Just in php 7.1 you can't use code I just changed it to this, check difference between those functions in php 7 and 7.1", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/106806610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108075610", "body": "Well it's like this on phalcon repo and it's working well.", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108075610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108228762", "body": "Well IN ZE2 this fix - https://github.com/phalcon/zephir/pull/1342/files#diff-a10f1751cb10ff71867e53250b0acb36L1560 fixed an issue anyway\r\n\r\nSo maybe you need to revert it", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108228762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109217934", "body": "Yea sure, will fix it. You mean make it `string` and `<\\Exception>` type and intention above?", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109217934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109229516", "body": "Well it's actually from my PR, you posted me this on slack so i changed :D", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109229516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109245611", "body": "Well, the best would be somehow to introduce elseif somehow obviously.", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109245611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109246065", "body": "https://github.com/phalcon/zephir/blob/master/test/exceptions.zep#L8 this is this eight line though as i see there in code maybe you are correct, it should be most likely https://github.com/phalcon/zephir/blob/master/test/exceptions.zep#L80 ?", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109246065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109281118", "body": "Oh well my mistake, just replace `ob_get_contents()` with `ob_get_clean()`", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109281118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109286310", "body": "Oh okay. If there is difference then okay.", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109286310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110432082", "body": "```php\r\nif (!in_array($variable->getName(), ['this_ptr', 'return_value', 'return_value_ptr'])) {\r\n```\r\n\r\n?", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110432082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/113913124", "body": "So shouldn't this `ZEPHIR_ZEND_CALL_FUNCTION_WRAPPER` be removed or it's used somewhere else?", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/113913124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "mruz": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1538", "title": "SIGABRT in zephir_memory_observe", "body": "https://github.com/ice/framework/blob/dev/ice/assets.zep#L60\r\n\r\nhttps://github.com/ice/framework/blob/dev/build/php7/ice/assets.zep.c#L165\r\n\r\n```\r\nProgram received signal SIGABRT, Aborted.\r\n0x00007ffff652f0c7 in raise () from /lib64/libc.so.6\r\n(gdb) bt\r\n#0  0x00007ffff652f0c7 in raise () from /lib64/libc.so.6\r\n#1  0x00007ffff6530478 in abort () from /lib64/libc.so.6\r\n#2  0x00007ffff1b1db53 in zephir_memory_observe () from /usr/lib64/php7/extensions/ice.so\r\n#3  0x00007ffff1b5aa00 in zim_Ice_Assets_add () from /usr/lib64/php7/extensions/ice.so\r\n#4  0x00005555558f5b58 in ZEND_DO_FCALL_SPEC_RETVAL_USED_HANDLER ()\r\n#5  0x000055555588de8b in execute_ex ()\r\n#6  0x0000555555832901 in zend_call_function ()\r\n#7  0x00007ffff1b25fbb in zephir_call_user_function () from /usr/lib64/php7/extensions/ice.so\r\n#8  0x00007ffff1b26add in zephir_call_class_method_aparams () from /usr/lib64/php7/extensions/ice.so\r\n#9  0x00007ffff1b4e256 in zim_Ice_Dispatcher_dispatch () from /usr/lib64/php7/extensions/ice.so\r\n#10 0x00005555558327f9 in zend_call_function ()\r\n#11 0x00007ffff1b25fbb in zephir_call_user_function () from /usr/lib64/php7/extensions/ice.so\r\n#12 0x00007ffff1b26add in zephir_call_class_method_aparams () from /usr/lib64/php7/extensions/ice.so\r\n#13 0x00007ffff1bcd2b0 in zim_Ice_Mvc_Dispatcher_dispatch () from /usr/lib64/php7/extensions/ice.so\r\n#14 0x00005555558327f9 in zend_call_function ()\r\n#15 0x00007ffff1b25fbb in zephir_call_user_function () from /usr/lib64/php7/extensions/ice.so\r\n#16 0x00007ffff1b26add in zephir_call_class_method_aparams () from /usr/lib64/php7/extensions/ice.so\r\n#17 0x00007ffff1bcb1ad in zim_Ice_Mvc_App_handle () from /usr/lib64/php7/extensions/ice.so\r\n#18 0x00005555558f5b58 in ZEND_DO_FCALL_SPEC_RETVAL_USED_HANDLER ()\r\n#19 0x000055555588de8b in execute_ex ()\r\n#20 0x00005555558f8524 in zend_execute ()\r\n#21 0x0000555555842cf0 in zend_execute_scripts ()\r\n#22 0x00005555557d7df8 in php_execute_script ()\r\n#23 0x00005555558fae58 in do_cli ()\r\n#24 0x0000555555688046 in main ()\r\n```", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1257", "title": "Generate optimized builds", "body": "Add Phalcon's [gen-build.php](https://github.com/phalcon/cphalcon/tree/master/build) for generate 32/64bit optimized sources and put in build/32bit\r\n\r\n``` sh\r\nzephir generate\r\nzephir generate 32bit\r\nzephir generate 64bit\r\nzephir generate safe\r\n```", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1256", "title": "Segmentation fault after stream_select", "body": "``` zep\r\npublic function run() -> void\r\n    {\r\n        var changed, stream, messages, message, socket, tmp;\r\n\r\n        let this->sockets[] = this->server;\r\n\r\n        while 1 {\r\n            if isset this->callbacks[\"tick\"] {\r\n                if call_user_func(this->callbacks[\"tick\"], this) === false {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            let changed = this->sockets,\r\n                stream = stream_select(changed, null, null, (isset this->callbacks[\"tick\"] ? 0 : null));\r\n\r\n            if stream > 0 {\r\n                let messages = [];\r\n\r\n                for socket in changed {\r\n```\r\n\r\n``` log\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x00007fffef8d6d93 in zim_Ice_Cli_Websocket_Server_run (ht=<optimized out>, return_value=<optimized out>, \r\n    return_value_ptr=<optimized out>, this_ptr=0x7fffeb371238, return_value_used=<optimized out>)\r\n    at /home/mruz/Dropbox/git/ice/framework/ext/ice/cli/websocket/server.zep.c:355\r\n355                     if (ZEPHIR_GT_LONG(stream, 0)) {\r\n(gdb) bt full\r\n#0  0x00007fffef8d6d93 in zim_Ice_Cli_Websocket_Server_run (ht=<optimized out>, return_value=<optimized out>, \r\n    return_value_ptr=<optimized out>, this_ptr=0x7fffeb371238, return_value_used=<optimized out>)\r\n    at /home/mruz/Dropbox/git/ice/framework/ext/ice/cli/websocket/server.zep.c:355\r\n        _26$$12 = 0x0\r\n        _34$$15 = 0x0\r\n        _25$$12 = <optimized out>\r\n        _12$$6 = 0x555555b11129\r\n        _38$$6 = 0x7fffeb378ef0\r\n        _11$$6 = 0x7fffeb3601d0\r\n        _37$$6 = 0x3\r\n        changed = 0x7fffeb377ff8\r\n        stream = 0x0\r\n        messages = 0x0\r\n        message = 0x0\r\n        socket = 0x0\r\n        tmp = 0x0\r\n        _6$$3 = 0x7fffeb2ccbd0\r\n        _8$$3 = 0x7fffeb377fc8\r\n        _9$$3 = 0x7fffeb360300\r\n        _45$$3 = {value = {lval = 5000, dval = 2.4703282292062327e-320, str = {\r\n              val = 0x1388 <error: Cannot access memory at address 0x1388>, len = 0}, ht = 0x1388, obj = {handle = 5000, \r\n              handlers = 0x0}, ast = 0x1388}, refcount__gc = 1, type = 1 '\\001', is_ref__gc = 0 '\\000'}\r\n        _3$$4 = 0x7fffeb35ff38\r\n        _4$$4 = 0x7fffeb3669f0\r\n        _13$$6 = <optimized out>\r\n        _39$$6 = <optimized out>\r\n        _17$$9 = 0x0\r\n        _21$$11 = 0x7fffeb371238\r\n        _23$$11 = 0x555555af44d3 <_zend_list_find+35>\r\n        _27$$12 = 0x0\r\n        _30$$14 = 0x7fffffff97c8\r\n        _32$$14 = 0x7fffffff97c0\r\n        _36$$15 = 0x0\r\n---Type <return> to continue, or q <return> to quit---\r\n        _42$$17 = 0x555555fee308 <zend_ce_closure>\r\n        _43$$17 = 0x7fffffff96d0\r\n        _44$$17 = 0x7fffffff97c0\r\n        ZEPHIR_LAST_CALL_STATUS = 0\r\n        _5 = 0x5555566b85d0\r\n        _10 = 0x5555566b8660\r\n        _16 = 0x0\r\n        _18 = 0x0\r\n        _24 = 0x0\r\n        _33 = 0x0\r\n        _46 = 0x5555566b86f0\r\n```\r\n\r\nserver.zep.c:355\r\n\r\n``` c\r\nif (ZEPHIR_GT_LONG(stream, 0)) {\r\n```\r\n\r\n``` c\r\nPHP_METHOD(Ice_Cli_Websocket_Server, run) {\r\n\r\n    zval *_26$$12 = NULL, *_34$$15 = NULL;\r\n    zend_bool _25$$12;\r\n    HashTable *_12$$6, *_38$$6;\r\n    HashPosition _11$$6, _37$$6;\r\n    zval *changed = NULL, *stream = NULL, *messages = NULL, *message = NULL, *socket = NULL, *tmp = NULL, *_0, *_1$$3, *_6$$3 = NULL, *_7$$3, *_8$$3 = NULL, *_9$$3 = NULL, _45$$3 = zval_used_for_init, *_2$$4, *_3$$4, *_4$$4 = NULL, **_13$$6, **_39$$6, *_14$$7, *_15$$8, *_17$$9 = NULL, *_19$$10, *_20$$11, *_21$$11, *_22$$11, *_23$$11, *_27$$12 = NULL, *_28$$13, *_29$$14, *_30$$14, *_31$$14, *_32$$14, *_35$$15, *_36$$15 = NULL, *_40$$16, *_41$$17, *_42$$17, *_43$$17, *_44$$17;\r\n    int ZEPHIR_LAST_CALL_STATUS;\r\n    zephir_fcall_cache_entry *_5 = NULL, *_10 = NULL, *_16 = NULL, *_18 = NULL, *_24 = NULL, *_33 = NULL, *_46 = NULL;\r\n\r\n    ZEPHIR_MM_GROW();\r\n\r\n    _0 = zephir_fetch_nproperty_this(this_ptr, SL(\"server\"), PH_NOISY_CC);\r\n    zephir_update_property_array_append(this_ptr, SL(\"sockets\"), _0 TSRMLS_CC);\r\n    while (1) {\r\n        if (!(1)) {\r\n            break;\r\n        }\r\n        _1$$3 = zephir_fetch_nproperty_this(this_ptr, SL(\"callbacks\"), PH_NOISY_CC);\r\n        if (zephir_array_isset_string(_1$$3, SS(\"tick\"))) {\r\n            _2$$4 = zephir_fetch_nproperty_this(this_ptr, SL(\"callbacks\"), PH_NOISY_CC);\r\n            zephir_array_fetch_string(&_3$$4, _2$$4, SL(\"tick\"), PH_NOISY | PH_READONLY, \"ice/cli/websocket/server.zep\", 104 TSRMLS_CC);\r\n            ZEPHIR_CALL_FUNCTION(&_4$$4, \"call_user_func\", &_5, 77, _3$$4, this_ptr);\r\n            zephir_check_call_status();\r\n            if (ZEPHIR_IS_FALSE_IDENTICAL(_4$$4)) {\r\n                break;\r\n            }\r\n        }\r\n        ZEPHIR_OBS_NVAR(changed);\r\n        zephir_read_property_this(&changed, this_ptr, SL(\"sockets\"), PH_NOISY_CC);\r\n        ZEPHIR_INIT_LNVAR(_6$$3);\r\n        _7$$3 = zephir_fetch_nproperty_this(this_ptr, SL(\"callbacks\"), PH_NOISY_CC);\r\n        if (zephir_array_isset_string(_7$$3, SS(\"tick\"))) {\r\n            ZEPHIR_INIT_NVAR(_6$$3);\r\n            ZVAL_LONG(_6$$3, 0);\r\n        } else {\r\n            ZEPHIR_INIT_NVAR(_6$$3);\r\n            ZVAL_NULL(_6$$3);\r\n        }\r\n        ZEPHIR_INIT_NVAR(_8$$3);\r\n        ZVAL_NULL(_8$$3);\r\n        ZEPHIR_INIT_NVAR(_9$$3);\r\n        ZVAL_NULL(_9$$3);\r\n        ZEPHIR_MAKE_REF(changed);\r\n        ZEPHIR_CALL_FUNCTION(&stream, \"stream_select\", &_10, 78, changed, _8$$3, _9$$3, _6$$3);\r\n        ZEPHIR_UNREF(changed);\r\n        zephir_check_call_status();\r\n        if (ZEPHIR_GT_LONG(stream, 0)) {\r\n            ZEPHIR_INIT_NVAR(messages);\r\n            array_init(messages);\r\n            zephir_is_iterable(changed, &_12$$6, &_11$$6, 0, 0, \"ice/cli/websocket/server.zep\", 144);\r\n            for (\r\n              ; zephir_hash_get_current_data_ex(_12$$6, (void**) &_13$$6, &_11$$6) == SUCCESS\r\n              ; zephir_hash_move_forward_ex(_12$$6, &_11$$6)\r\n            ) {\r\n                ZEPHIR_GET_HVALUE(socket, _13$$6);\r\n```\r\n## \r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/34348393-segmentation-fault-after-stream_select?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1140", "title": "PHP7, array_push *RECURSION*", "body": "I have psr-4 loader:\n\n``` zep\nnamespace Ice;\n\nclass Loader\n{\n\n    protected prefixes = [];\n\n    /**\n     * Register loader with SPL autoloader stack.\n     * \n     * @return void\n     */\n    public function register()\n    {\n        spl_autoload_register([this, \"loadClass\"]);\n    }\n\n    /**\n     * Adds a base directory for a namespace prefix.\n     *\n     * @param string prefix The namespace prefix\n     * @param string baseDir A base directory for class files in the namespace\n     * @param bool prepend If true, prepend the base directory to the stack instead of appending it; this causes it to\n     * be searched first rather than last\n     * @return Loader\n     */\n    public function addNamespace(string prefix, string baseDir, boolean prepend = false)\n    {\n        // normalize namespace prefix\n        let prefix = trim(prefix, \"\\\\\") . \"\\\\\";\n\n        // normalize the base directory with a trailing separator\n        let baseDir = rtrim(baseDir, \"/\") . DIRECTORY_SEPARATOR,\n            baseDir = rtrim(baseDir, DIRECTORY_SEPARATOR) . \"/\";\n\n        // initialize the namespace prefix array\n        if !isset this->prefixes[prefix] {\n            let this->prefixes[prefix] = [];\n        }\n\n        // retain the base directory for the namespace prefix\n        if prepend {\n            array_unshift(this->prefixes[prefix], utf8_encode(baseDir));\n        } else {\n            array_push(this->prefixes[prefix], utf8_encode(baseDir));\n        }\n        return this;\n    }\n\n    /**\n     * Loads the class file for a given class name.\n     *\n     * @param string className The fully-qualified class name\n     * @return mixed The mapped file name on success, or boolean false on failure\n     */\n    public function loadClass(string className)\n    {\n        var prefix, pos, relativeClass, mappedFile;\n\n        // the current namespace prefix\n        let prefix = className;\n\n        // work backwards through the namespace names of the fully-qualified\n        // class name to find a mapped file name\n        let pos = strrpos(prefix, \"\\\\\");\n        while pos !== false {\n            // retain the trailing namespace separator in the prefix\n            let prefix = substr(className, 0, pos + 1);\n\n            // the rest is the relative class name\n            let relativeClass = substr(className, pos + 1);\n\n            // try to load a mapped file for the prefix and relative class\n            let mappedFile = this->loadMappedFile(prefix, relativeClass);\n            if mappedFile {\n                return mappedFile;\n            }\n\n            // remove the trailing namespace separator for the next iteration\n            // of strrpos()\n            let prefix = rtrim(prefix, \"\\\\\");\n            let pos = strrpos(prefix, \"\\\\\");\n        }\n\n        // never found a mapped file\n        return false;\n    }\n\n    /**\n     * Load the mapped file for a namespace prefix and relative class.\n     * \n     * @param string $prefix The namespace prefix\n     * @param string $relative_class The relative class name\n     * @return mixed Boolean false if no mapped file can be loaded, or the name of the mapped file that was loaded\n     */\n    protected function loadMappedFile(string prefix, string relativeClass)\n    {\n        var baseDir, file;\n\n        // are there any base directories for this namespace prefix?\n        if !isset this->prefixes[prefix] {\n            return false;\n        }\n\n        // look through base directories for this namespace prefix\n        for baseDir in this->prefixes[prefix] {\n            // replace the namespace prefix with the base directory,\n            // replace namespace separators with directory separators\n            // in the relative class name, append with .php\n            let file = baseDir . str_replace(\"\\\\\", DIRECTORY_SEPARATOR, relativeClass) . \".php\",\n                file = baseDir . str_replace(\"\\\\\", \"/\", relativeClass) . \".php\";\n\n            // if the mapped file exists, require it\n            if this->requireFile(file) {\n                // yes, we\"re done\n                return file;\n            }\n        }\n\n        // never found it\n        return false;\n    }\n\n    /**\n     * If a file exists, require it from the file system.\n     * \n     * @param string $file The file to require\n     * @return bool True if the file exists, false if not\n     */\n    protected function requireFile(string file)\n    {\n        if file_exists(file) {\n            require file;\n            return true;\n        }\n        return false;\n    }\n}\n```\n\nIf I'm trying to add namespace:\n\n``` php\n$loader = new Ice\\Loader();\n$loader\n    ->addNamespace('App', __ROOT__ . '/app/boot')\n    ->register();\nvar_dump($loader);\n```\n\nExpected (works on PHP5):\n\n``` log\nobject(Ice\\Loader)#1 (1) {\n  [\"prefixes\":protected]=>\n  array(1) {\n    [\"App\\\"]=>\n    array(1) {\n      [0]=>\n      string(40) \"/home/mruz/Dropbox/git/farmigo/app/boot/\"\n    }\n  }\n}\n```\n\nOn PHP7:\n\n``` log\nobject(Ice\\Loader)#1 (1) {\n  [\"prefixes\":protected]=>\n  array(1) {\n    [\"App\\\"]=>\n    array(1) {\n      [\"*prefixes\"]=>\n      *RECURSION*\n    }\n  }\n}\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x00005555558d9c9f in zend_make_printable_zval ()\n(gdb) bt\n#0  0x00005555558d9c9f in zend_make_printable_zval ()\n#1  0x00007ffff313c197 in zephir_concat_vvs.constprop.57 () from /usr/lib64/php7/extensions/ice.so\n#2  0x00007ffff305b286 in zim_Ice_Loader_loadMappedFile () from /usr/lib64/php7/extensions/ice.so\n#3  0x00007ffff311c098 in zephir_call_user_function.constprop.106 () from /usr/lib64/php7/extensions/ice.so\n#4  0x00007ffff311d126 in zephir_call_class_method_aparams () from /usr/lib64/php7/extensions/ice.so\n#5  0x00007ffff30d1ca5 in zim_Ice_Loader_loadClass () from /usr/lib64/php7/extensions/ice.so\n#6  0x00005555558bfc8d in zend_call_function ()\n#7  0x00005555559181a8 in zend_call_method ()\n#8  0x00005555556df42c in zif_spl_autoload_call ()\n#9  0x00005555558bfc8d in zend_call_function ()\n#10 0x00005555558c0b76 in zend_lookup_class_ex ()\n#11 0x00005555558c1916 in zend_fetch_class_by_name ()\n#12 0x0000555555979352 in ZEND_NEW_SPEC_CONST_HANDLER ()\n#13 0x0000555555967d70 in execute_ex ()\n#14 0x00005555559686e4 in zend_execute ()\n#15 0x00005555558dc7be in zend_execute_scripts ()\n#16 0x000055555582ff30 in php_execute_script ()\n#17 0x0000555555a40e65 in do_cli ()\n#18 0x0000555555a42230 in main ()\n```\n\n``` c\nPHP_METHOD(Ice_Loader, addNamespace) {\n\n        int ZEPHIR_LAST_CALL_STATUS;\n        zephir_fcall_cache_entry *_14 = NULL;\n        zend_bool prepend;\n        zval *prefix_param = NULL, *baseDir_param = NULL, *prepend_param = NULL, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10$$3, _11$$4, _12$$4, _13$$4, _15$$5, _16$$5, _17$$5;\n        zval prefix, baseDir;\n                zval this_zv;\n        zval *this_ptr = getThis();\n        if (EXPECTED(this_ptr)) {\n                ZVAL_OBJ(&this_zv, Z_OBJ_P(this_ptr));\n                this_ptr = &this_zv;\n        } else this_ptr = NULL;\n\n        ZVAL_UNDEF(&prefix);\n        ZVAL_UNDEF(&baseDir);\n        ZVAL_UNDEF(&_0);\n        ZVAL_UNDEF(&_1);\n        ZVAL_UNDEF(&_2);\n        ZVAL_UNDEF(&_3);\n        ZVAL_UNDEF(&_4);\n        ZVAL_UNDEF(&_5);\n        ZVAL_UNDEF(&_6);\n        ZVAL_UNDEF(&_7);\n        ZVAL_UNDEF(&_8);\n        ZVAL_UNDEF(&_9);\n        ZVAL_UNDEF(&_10$$3);\n        ZVAL_UNDEF(&_11$$4);\n        ZVAL_UNDEF(&_12$$4);\n        ZVAL_UNDEF(&_13$$4);\n        ZVAL_UNDEF(&_15$$5);\n        ZVAL_UNDEF(&_16$$5);\n        ZVAL_UNDEF(&_17$$5);\n\n        ZEPHIR_MM_GROW();\n        zephir_fetch_params(1, 2, 1, &prefix_param, &baseDir_param, &prepend_param);\n\n        zephir_get_strval(&prefix, prefix_param);\n        zephir_get_strval(&baseDir, baseDir_param);\n        if (!prepend_param) {\n                prepend = 0;\n        } else {\n                prepend = zephir_get_boolval(prepend_param);\n        }\n\n        ZEPHIR_INIT_VAR(&_0);\n        ZEPHIR_INIT_VAR(&_1);\n        ZVAL_STRING(&_1, \"\\\\\");\n        zephir_fast_trim(&_0, &prefix, &_1, ZEPHIR_TRIM_BOTH TSRMLS_CC);\n        ZEPHIR_INIT_VAR(&_2);\n        ZEPHIR_CONCAT_VS(&_2, &_0, \"\\\\\");\n        zephir_get_strval(&prefix, &_2);\n        ZEPHIR_INIT_VAR(&_3);\n        ZEPHIR_INIT_VAR(&_4);\n        ZVAL_STRING(&_4, \"/\");\n        zephir_fast_trim(&_3, &baseDir, &_4, ZEPHIR_TRIM_RIGHT TSRMLS_CC);\n        ZEPHIR_INIT_VAR(&_5);\n        ZEPHIR_CONCAT_VS(&_5, &_3, \"/\");\n        zephir_get_strval(&baseDir, &_5);\n        ZEPHIR_INIT_VAR(&_6);\n        ZEPHIR_INIT_VAR(&_7);\n        ZVAL_STRING(&_7, \"/\");\n        zephir_fast_trim(&_6, &baseDir, &_7, ZEPHIR_TRIM_RIGHT TSRMLS_CC);\n        ZEPHIR_INIT_VAR(&_8);\n        ZEPHIR_CONCAT_VS(&_8, &_6, \"/\");\n        zephir_get_strval(&baseDir, &_8);\n        zephir_read_property(&_9, this_ptr, SL(\"prefixes\"), PH_NOISY_CC | PH_READONLY);\n        if (!(zephir_array_isset(&_9, &prefix))) {\n                ZEPHIR_INIT_VAR(&_10$$3);\n                array_init(&_10$$3);\n                zephir_update_property_array(this_ptr, SL(\"prefixes\"), &prefix, &_10$$3 TSRMLS_CC);\n        }\n        if (prepend) {\n                zephir_read_property(&_11$$4, this_ptr, SL(\"prefixes\"), PH_NOISY_CC | PH_READONLY);\n                zephir_array_fetch(&_12$$4, &_11$$4, &prefix, PH_NOISY | PH_READONLY, \"ice/loader.zep\", 53 TSRMLS_CC);\n                ZEPHIR_CALL_FUNCTION(&_13$$4, \"utf8_encode\", &_14, 112, &baseDir);\n                zephir_check_call_status();\n                ZEPHIR_MAKE_REF(&_12$$4);\n                ZEPHIR_CALL_FUNCTION(NULL, \"array_unshift\", NULL, 113, &_12$$4, &_13$$4);\n                ZEPHIR_UNREF(&_12$$4);\n                zephir_check_call_status();\n        } else {\n                zephir_read_property(&_15$$5, this_ptr, SL(\"prefixes\"), PH_NOISY_CC | PH_READONLY);\n                zephir_array_fetch(&_16$$5, &_15$$5, &prefix, PH_NOISY | PH_READONLY, \"ice/loader.zep\", 55 TSRMLS_CC);\n                ZEPHIR_CALL_FUNCTION(&_17$$5, \"utf8_encode\", &_14, 112, &baseDir);\n                zephir_check_call_status();\n                ZEPHIR_MAKE_REF(&_16$$5);\n                ZEPHIR_CALL_FUNCTION(NULL, \"array_push\", NULL, 114, &_16$$5, &_17$$5);\n                ZEPHIR_UNREF(&_16$$5);\n                zephir_check_call_status();\n        }\n        RETURN_THIS();\n\n}\n```\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/28872751-php7-array_push-recursion?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/686", "title": "For loop, key on traversing string", "body": "It's not possible to move key during the loop on the string variable;\n\n``` zep\n    public function filter(string str)\n    {\n        string output = \"\";\n        char c;\n        int i;\n\n        for i, c in str {\n            if c == '\\n' {\n                let i++;\n            }\n            let output .= c;\n        }\n    }\n```\n\n``` c\nfor (_0 = 0; _0 < Z_STRLEN_P(str); _0++) {\n    i = _0; \n    c = ZEPHIR_STRING_OFFSET(str, _0);\n```\n\nis it possible to get access to `_0` variable?\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/7049207-for-loop-key-on-traversing-string?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/613", "title": "ArrayIterator and `for` loop", "body": "I have simple Arr helper with _getIterator()_ method:\n\n``` zephir\nclass Arr implements \\ArrayAccess, \\Countable, \\IteratorAggregate\n{\n\n    protected _data = [] { get };\n\n    public function getIterator()\n    {\n        return new \\ArrayIterator(this->_data);\n    }\n    //...\n```\n\nIs it possible to `ArrayIterator` work with `for` loop?\n\n``` zephir\nlet tokens = new Arr([1,2,3]);\n\nfor token in tokens {\n    var_dump(token);\n}\n```\n\n> The argument is not initialized or iterable()\n\nSo I must use:\n\n``` zephir\nfor token in tokens->getData() {\n    var_dump(token);\n}\n```\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/5760323-arrayiterator-and-for-loop?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/1174", "title": "Add magic shortcuts: 'is', 'add'", "body": "``` zep\nclass Person {\n\n  protected name { set, get  };\n  protected age { set, get };\n  protected male = true { set, is };\n  protected phone { add, get };\n  protected email { add, get };\n}\n```\n\n``` php\n$person = new Person;\n$person->setName('Julia');\n$person->setAge(21);\n$person->setMale(false);\n\n$person\n    ->addPhone('0123456789')\n    ->addEmail('julia@example.com');\n\necho 'Name: ' . $person->getName() .\n     'Age: ' . $person->getAge() .\n     'Sex: ' . ($person->isMale() ? 'Male' : 'Female') .\n     'Phone: ' . $person->getPhone() .\n     'Email: ' . $person->getEmail();\n```\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/30621871", "body": "Now `if empty message {}` condition is converted to `if ((0 == 0)) {}` and always true.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/30621871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/30821811", "body": "There is some bug with `if empty` condition. It is always true now, https://github.com/phalcon/zephir/pull/42\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/30821811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31060591", "body": "@Cinderella-Man standard PHP's _empty()_ is also converterd to `if ((0 == 0)) {}`\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31060591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31262148", "body": "https://github.com/phalcon/zephir/blob/master/Library/MethodCall.php#L397-L468\nI see not cached method call is when _Function is called using a dynamic variable as method name_\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31262148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31267859", "body": "Can I check if php superglobal variables are empty?\n`if empty _POST && empty _FILES {`\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31267859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31907607", "body": "During `zephir generate` I'm getting:\n\n```\nPHP Fatal error:  Cannot redeclare getimagesizefromstring() in /zephir-master/prototypes/gd.php on line 29\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31907607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31908542", "body": "Yes.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31908542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31910747", "body": "> GD Version: bundled (2.1.0 compatible)\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31910747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31965360", "body": "works like a charm, thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31965360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33295839", "body": "I'm getting now:\n\n```\n/usr/sbin/httpd2-prefork: symbol lookup error: /usr/lib64/php5/extensions/phalcon.so: undefined symbol: zend_hash_get_current_key_zval_ex\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33295839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33314937", "body": "You can check type first:\n\n```\nif typeof match == \"array\" {\n    if count(match) == 2 && strlen(match[0]) >= minLength {\n    }\n}\n```\n\nbut if you also have _or_ conditions it is difficult:\n\n```\nif condition || condition2 || typeof value == \"array\" && isset value[\"error\"] && value[\"error\"] === 1 {\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33314937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33575862", "body": "The generated code looks ok in C. Thanks\nBut I'm trying to compile phalcon 2.0 and I'm getting now:\n\n```\nI: Program returns random data in a function\nE: php5-phalcon-zephir no-return-in-nonvoid-function /home/abuild/rpmbuild/BUILD/php5-phalcon-zephir-2.0.0.8e3b57c/ext/kernel/fcall.c:57\n```\n\nI'm not sure if this is related\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33575862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33905229", "body": "I'm getting segmentation fault in increment_function(), zephir_is_iterable_ex() is this related?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33905229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/comments/5179727", "body": "It works fine now. Thanks guys!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5277975", "body": "I'm getting:\n\n> Argument 3 passed to Variable::setIsInitialized() must be of the type array, none given, called in ../zephir-master/Library/Operators/Other/CloneOperator.php on line 64 and defined in ../zephir-master/Library/Variable.php on line 517\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5277975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5553640", "body": "On the latest zephir version something was changed with `__construct()` I'm getting:\n\n> Fatal error: Call to undefined function Baseapp\\Frontend\\Controllers\\IndexController::__construct() in /home/mruz/Dropbox/osc/test/public/index.php on line 69\n\nI don't have constructor in IndexController, in the `\\Phalcon\\Mvc\\Controller` constructor is _final_.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5553640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5568395", "body": "Simple multi module application:\n/public/index.php\n\n``` php\n<?php\n\nuse \\Phalcon\\Mvc\\Router,\n    \\Phalcon\\Mvc\\Application,\n    \\Phalcon\\DI\\FactoryDefault;\n\ntry {\n    if (!defined('ROOT_PATH')) {\n        define('ROOT_PATH', dirname(__DIR__));\n    }\n\n    //Register an autoloader\n    $loader = new \\Phalcon\\Loader();\n    $loader->registerNamespaces(array(\n        'Baseapp\\Models' => ROOT_PATH . '/app/common/models/',\n        //'Baseapp\\Library' => ROOT_PATH . '/app/common/library/',\n    ))->register();\n\n    $di = new FactoryDefault();\n\n    $di->set('router', function() {\n        $router = new Router();\n        $router->setDefaultModule(\"frontend\");\n        $router->setDefaultController(\"index\");\n        $router->setDefaultAction(\"index\");\n        return $router;\n    });\n\n    $application = new Application($di);\n\n    $application->registerModules(array(\n        'frontend' => array(\n            'className' => 'Baseapp\\Frontend\\Module',\n            'path' => ROOT_PATH . '/app/frontend/Module.php'\n        )\n    ));\n\n    $application->setDI($di);\n\n    echo $application->handle()->getContent();\n} catch (\\Exception $e) {\n    echo $e->getMessage();\n}\n```\n\n/app/frontend/Module.php\n\n``` php\n<?php\nnamespace Baseapp\\Frontend;\n\nclass Module implements \\Phalcon\\Mvc\\ModuleDefinitionInterface\n{\n\n    public function registerAutoloaders($di = NULL)\n    {\n        $loader = new \\Phalcon\\Loader();\n\n        $loader->registerNamespaces(array(\n            'Baseapp\\Frontend\\Controllers' => __DIR__ . '/controllers/',\n        ));\n\n        $loader->register();\n    }\n\n    public function registerServices($di)\n    {\n        //Registering a dispatcher\n        $di->set('dispatcher', function() {\n            //Create/Get an EventManager\n            $eventsManager = new \\Phalcon\\Events\\Manager();\n            //Attach a listener\n            $eventsManager->attach(\"dispatch\", function($event, $dispatcher, $exception) {\n                //controller or action doesn't exist\n                if ($event->getType() == 'beforeException') {\n                    switch ($exception->getCode()) {\n                        case \\Phalcon\\Dispatcher::EXCEPTION_HANDLER_NOT_FOUND:\n                        case \\Phalcon\\Dispatcher::EXCEPTION_ACTION_NOT_FOUND:\n                            $dispatcher->forward(array(\n                                'controller' => 'index',\n                                'action' => 'notFound'\n                            ));\n                            return false;\n                    }\n                }\n            });\n\n            $dispatcher = new \\Phalcon\\Mvc\\Dispatcher();\n            //Set default namespace to frontend module\n            $dispatcher->setDefaultNamespace(\"Baseapp\\Frontend\\Controllers\");\n            //Bind the EventsManager to the dispatcher\n            $dispatcher->setEventsManager($eventsManager);\n\n            return $dispatcher;\n        });\n\n        //Registering the view component\n        $di->set('view', function() {\n            $view = new \\Phalcon\\Mvc\\View();\n            $view->setViewsDir(__DIR__ . '/views/');\n            return $view;\n        });\n    }\n\n}\n```\n\n/app/frontend/controllers/IndexController.php\n\n``` php\n<?php\nnamespace Baseapp\\Frontend\\Controllers;\n\nclass IndexController extends \\Phalcon\\Mvc\\Controller\n{\n\n    public function indexAction()\n    {\n        echo 'OK';\n    }\n\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5568395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5608237", "body": "The problem is similar to https://github.com/phalcon/zephir/issues/108#issuecomment-35603559 maybe with _Zephir\\MethodCall_ `CALL_DYNAMIC`/`CALL_DYNAMIC_STRING`\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5608237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5831984", "body": "This commit breaks https://github.com/phalcon/cphalcon/blob/2.0.0/phalcon/acl/resource.zep, https://github.com/phalcon/cphalcon/blob/2.0.0/phalcon/acl/adapter/memory.zep#L270. Should we change the name of the variables?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5831984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7871870", "body": "I'm getting error:\n\n> PHP Warning:  Invalid argument supplied for foreach() in ../vendor/phalcon/zephir/Library/CompilerFile.php on line 203\n> PHP Catchable fatal error:  Argument 1 passed to Zephir\\ClassDefinition::setImplementsInterfaces() must be of the type array, string given, called in ../vendor/phalcon/zephir/Library/CompilerFile.php on line 206 and defined in ../vendor/phalcon/zephir/Library/ClassDefinition.php on line 249\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7871870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7872206", "body": "No, just run `zephir fullclean`, so I'll try to recompile parser.\nAfter recompiling parser the error is gone. Thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7872206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/8612037", "body": "This commit crash my app, do I need add some changes?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/8612037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/8612822", "body": "How about fetch and return?\n\n``` zep\npublic function getMessage(int code = 200) -> string\n{\n    var message;\n\n    fetch message, this->_messages[code];\n\n    return (string) message;\n}\n```\n\nthis code produce:\n\n> Warning: Variable \"message\" assigned but not used in Ice\\Http\\Response::getMessage in /home/mruz/Dropbox/git/ice/framework/ice/http/response.zep on 357 [unused-variable]\n> \n> ```\n>             fetch message, this->_messages[code];\n>     --------------------------------------------^\n> ```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/8612822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/8616321", "body": "It seems that it works, thanks!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/8616321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/9239531", "body": "I also get an error after this commit.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/9239531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/10514576", "body": "With the latest changes:\n\n``` zep\nlet this->_session = di->{\"getSession\"}();\n```\n\n> RuntimeException[0]: Call to undefined method Ice\\Di::getsession()\"\n\nbut I have magic __call\n\n``` zep\n    public function __call(string! method, arguments = null)\n    {\n        var service, value;\n\n        // If the magic method starts with \"get\" we try to get a service with that name\n        if starts_with(method, \"get\") {\n        //if strpos(method, \"get\") !== false {\n            let service = lcfirst(substr(method, 3));\n\n            if this->has(service) {\n                fetch value, arguments[0];\n                return this->get(service, value);\n            } else {\n                throw new Exception(sprintf(\"The '%s' service is required\", service));\n            }\n        }\n\n        // If the magic method starts with \"set\" we try to set a service using that name\n        if starts_with(method, \"set\") {\n            fetch value, arguments[0];\n            this->set(lcfirst(substr(method, 3)), value);\n            return null;\n        }\n\n        // The method doesn't start with set/get throw an exception\n        throw new Exception(\"Call to undefined method or service '\" . method . \"'\");\n    }\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/10514576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/10572145", "body": "@andresgutierrez how about self dynamic call?\n\n``` zep\npublic static function $fetch() -> <Di>\n    {\n        return self::_di;\n    }\n```\n\n``` zep\nlet this->_di = Di::$fetch(),\n    request = this->_di->{\"getRequest\"}();\n```\n\n> RuntimeException[0]: Call to undefined method Ice\\Di::getrequest()\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/10572145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/14669246", "body": "Is there any TravisCI docs how to implement this automated regenerating?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/14669246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/14953677", "body": "``` log\n/home/mruz/Dropbox/git/ice/framework/vendor/phalcon/zephir/parser/parser/parser.c: In function \u2018yy_reduce\u2019:\n/home/mruz/Dropbox/git/ice/framework/vendor/phalcon/zephir/parser/parser/parser.c:8763:38: warning: passing argument 2 of \u2018xx_ret_scall\u2019 from incompatible pointer type [-Wincompatible-pointer-types]\n  yygotominor.yy132 = xx_ret_scall(0, yymsp[-6].minor.yy0, 1, yymsp[-3].minor.yy0, NULL, status->scanner_state);\n                                      ^\n/home/mruz/Dropbox/git/ice/framework/vendor/phalcon/zephir/parser/parser/parser.c:1189:14: note: expected \u2018char *\u2019 but argument is of type \u2018xx_parser_token * {aka struct _xx_parser_token *}\u2019\n static zval *xx_ret_scall(int dynamic_class, char *class_name, int dynamic_method, xx_parser_token *M, zval *parameters, xx_scanner_state *state)\n              ^\n/home/mruz/Dropbox/git/ice/framework/vendor/phalcon/zephir/parser/parser/parser.c:8775:38: warning: passing argument 2 of \u2018xx_ret_scall\u2019 from incompatible pointer type [-Wincompatible-pointer-types]\n  yygotominor.yy132 = xx_ret_scall(0, yymsp[-7].minor.yy0, 1, yymsp[-4].minor.yy0, yymsp[-1].minor.yy132, status->scanner_state);\n                                      ^\n/home/mruz/Dropbox/git/ice/framework/vendor/phalcon/zephir/parser/parser/parser.c:1189:14: note: expected \u2018char *\u2019 but argument is of type \u2018xx_parser_token * {aka struct _xx_parser_token *}\u2019\n static zval *xx_ret_scall(int dynamic_class, char *class_name, int dynamic_method, xx_parser_token *M, zval *parameters, xx_scanner_state *state)\n              ^\nIn file included from /usr/include/string.h:630:0,\n                 from /usr/include/php5/main/../main/php_config.h:2554,\n                 from /usr/include/php5/Zend/zend_config.h:1,\n                 from /usr/include/php5/Zend/zend.h:51,\n                 from /usr/include/php5/main/php.h:35,\n                 from /home/mruz/Dropbox/git/ice/framework/vendor/phalcon/zephir/parser/parser/parser.c:9:\n/home/mruz/Dropbox/git/ice/framework/vendor/phalcon/zephir/parser/parser/parser.c: At top level:\n/home/mruz/Dropbox/git/ice/framework/vendor/phalcon/zephir/parser/parser/parser.c:9257:7: error: expected identifier or \u2018(\u2019 before \u2018__extension__\u2019\n char *strndup(const char *s, size_t len)\n       ^\n/home/mruz/Dropbox/git/ice/framework/vendor/phalcon/zephir/parser/parser/parser.c: In function \u2018xx_parse_program\u2019:\n/home/mruz/Dropbox/git/ice/framework/vendor/phalcon/zephir/parser/parser/parser.c:9235:17: warning: return makes pointer from integer without a cast [-Wint-conversion]\n #define SUCCESS 1\n                 ^\n/home/mruz/Dropbox/git/ice/framework/vendor/phalcon/zephir/parser/parser/parser.c:9350:10: note: in expansion of macro \u2018SUCCESS\u2019\n   return SUCCESS;\n          ^\nmake: *** [parser/parser.lo] B\u0142\u0105d 1\nmake: *** Oczekiwanie na niezako\u0144czone zadania....\n/home/mruz/Dropbox/git/ice/framework/vendor/phalcon/zephir/parser/parser/scanner.c: In function \u2018xx_get_token\u2019:\n/home/mruz/Dropbox/git/ice/framework/vendor/phalcon/zephir/parser/parser/scanner.c:1274:4: warning: implicit declaration of function \u2018free\u2019 [-Wimplicit-function-declaration]\n    free(token->value);\n    ^\n/home/mruz/Dropbox/git/ice/framework/vendor/phalcon/zephir/parser/parser/scanner.c:1274:4: warning: incompatible implicit declaration of built-in function \u2018free\u2019\n/home/mruz/Dropbox/git/ice/framework/vendor/phalcon/zephir/parser/parser/scanner.c:1274:4: note: include \u2018<stdlib.h>\u2019 or provide a declaration of \u2018free\u2019\n\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/14953677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/15360283", "body": "@steffengy I think this causes #1162, If I revert the change then it builds for 32bit, but provide for 64bit:\n\n> zephir-master/bin/zephir: line 26:  3941 Segmentation fault      php -d safe_mode=Off -d enable_dl=On -c $2 $ZEPHIRDIR/compiler.php ${*:3}\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/15360283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/15760935", "body": "> php: symbol lookup error: /home/travis/.phpenv/versions/7.0.2/lib/php/extensions/no-debug-zts-20151012/test.so: undefined symbol: zephir_read_property_this\n\nHi @andresgutierrez, could you resolve this?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/15760935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/15800275", "body": "@steffengy is this related with #1173?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/15800275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/16725820", "body": "Could you look at https://travis-ci.org/ice/framework/jobs/115284231#L1571-L1577?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/16725820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "maciejmrozinski": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1524", "title": "Casting resource to int", "body": "Hi,\r\n\r\nFound an unexpected result when casting resources to ints (common thing in PHP):\r\n\r\n```\r\n    var key;\r\n    let key =  (int) stream; //stream is resource #127\r\n    echo $key;\r\n```\r\n\r\nExpected:\r\n`127`\r\nCurrent:\r\n`1`\r\n\r\nI always receive `1` instead of resource id. `intval` is also not working. `strval` gets `Resource id #127`", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sjinks": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1510", "title": "[RFC] FastCall API", "body": "Currently, Zephir compiler misses a lot of cases where method caching could save some time. Some of these misses are by design (i.e., when a non-final method is called, the compiler cannot be sure which class `$this` refers to), some are compiler defects (when the same method is called in a loop).\r\n\r\nSome of these deficiencies are dealt with by the Zephir Kernel (it tries to cache functions and methods called by the user code). However, this caching is not very efficient: a) every method/function is cached, b) cache is stored in hash tables.\r\n\r\nFastCall API can be used to deal with these deficiencies; however, *right now* it is quite low-level and is for manual use only.\r\n\r\n[Usage example](https://github.com/sjinks/zephir/commit/c360d861dcb2585431ae53fe9483e1f87f6600cb#diff-b913b909037a897c48b0d7f9e284dcf2R141)\r\n\r\n[Benchmarks](https://travis-ci.org/sjinks/zephir/jobs/222133655#L4901)\r\n\r\nPS: `fastcall` branch was branched off `master` and does not include fixes from #1509.\r\n\r\nHowever, my initial impression is that it could be faster than our current CALL API.\r\n\r\nThe main question is: do we need it? :-)\r\n\r\n@sergeyklay @Jurigag @ovr ", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1510/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 2, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1495", "title": "Compiler does not escape slashes in strings", "body": "```\r\n/workspace/zephir/ext/test/declaretest.zep.c: In function \u2018zim_Test_DeclareTest_testStringDeclare1\u2019:\r\n/workspace/zephir/ext/test/declaretest.zep.c:40:76: warning: unknown escape sequence: '\\w'\r\n  ZVAL_STRING(&a, \"/@(\\w+)(?:\\s*(?:\\(\\s*)?(.*?)(?:\\s*\\))?)??\\s*(?:\\n|\\*\\/)/\");\r\n                                                                            ^\r\n/workspace/zephir/ext/test/declaretest.zep.c:40:76: warning: unknown escape sequence: '\\s'\r\n/workspace/zephir/ext/test/declaretest.zep.c:40:76: warning: unknown escape sequence: '\\s'\r\n/workspace/zephir/ext/test/declaretest.zep.c:40:76: warning: unknown escape sequence: '\\s'\r\n/workspace/zephir/ext/test/declaretest.zep.c:40:76: warning: unknown escape sequence: '\\)'\r\n/workspace/zephir/ext/test/declaretest.zep.c:40:76: warning: unknown escape sequence: '\\s'\r\n/workspace/zephir/ext/test/declaretest.zep.c:40:76: warning: unknown escape sequence: '\\*'\r\n/workspace/zephir/ext/test/declaretest.zep.c:40:76: warning: unknown escape sequence: '\\/'\r\n/workspace/zephir/ext/test/declaretest.zep.c: In function \u2018zim_Test_DeclareTest_testStringDeclare2\u2019:\r\n/workspace/zephir/ext/test/declaretest.zep.c:55:74: warning: unknown escape sequence: '\\w'\r\n  ZVAL_STRING(&a, \"/(\\w+)\\s*=\\s*(\\[[^\\]]*\\]|\\\"[^\\\"]*\\\"|[^,)]*)\\s*(?:,|$)/\");\r\n                                                                          ^\r\n/workspace/zephir/ext/test/declaretest.zep.c:55:74: warning: unknown escape sequence: '\\s'\r\n/workspace/zephir/ext/test/declaretest.zep.c:55:74: warning: unknown escape sequence: '\\s'\r\n/workspace/zephir/ext/test/declaretest.zep.c:55:74: warning: unknown escape sequence: '\\]'\r\n/workspace/zephir/ext/test/declaretest.zep.c:55:74: warning: unknown escape sequence: '\\]'\r\n/workspace/zephir/ext/test/declaretest.zep.c:55:74: warning: unknown escape sequence: '\\s'\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1495/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1494", "title": "zephir_update_static_property_ce_cache in the compiler", "body": "`StaticProperty::assignStatic`:\r\n\r\n```php\r\nif ($compilationContext->insideCycle) {\r\n    $propertyCache = $compilationContext->symbolTable->getTempVariableForWrite('zend_property_info', $compilationContext);\r\n    $propertyCache->setMustInitNull(true);\r\n    $propertyCache->setReusable(false);\r\n    $codePrinter->output('zephir_update_static_property_ce_cache(' . $classEntry .', SL(\"' . $property . '\"), &' . $tempVariable->getName() . ', &' . $propertyCache->getName() . ' TSRMLS_CC);');\r\n} else {\r\n     $compilationContext->backend->updateStaticProperty($classEntry, $property, $tempVariable, $compilationContext);\r\n}\r\n```\r\n\r\nHowever, `zephir_update_static_property_ce_cache` is available only in ZE2 kernel.\r\n\r\nhttps://github.com/phalcon/zephir/blob/master/Library/Statements/Let/StaticProperty.php#L208\r\nhttps://github.com/phalcon/zephir/blob/master/Library/Statements/Let/StaticProperty.php#L224\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1487", "title": "Unnecessary memory allocation", "body": "```c\r\nPHP_METHOD(Test_SPropertyAccess, __construct) {\r\n\r\n\tzval *_0, _1, _2, *_3, *_4 = NULL;\r\n\r\n\tZEPHIR_MM_GROW();\r\n\r\n\tZEPHIR_INIT_ZVAL_NREF(_0);\r\n\tZEPHIR_INIT_VAR(_0);\r\n\tZVAL_STRING(_0, \"abc\", 1);\r\n```\r\n\r\nBoth `ZEPHIR_INIT_ZVAL_NREF` and `ZEPHIR_INIT_VAR` allocate memory via `ALLOC_ZVAL`; memory allocated by `ZEPHIR_INIT_ZVAL_NREF` is leaked.\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1483", "title": "Non-tracked variables are not destroyed", "body": "```c\r\nzval _2$$3 = zval_used_for_init;\r\n\r\n\twhile (1) {\r\n\t\tif (!(i < zephir_fast_strlen_ev(value))) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\t_1$$3 = ZEPHIR_STRING_OFFSET(value, i);\r\n\t\tZEPHIR_SINIT_NVAR(_2$$3);\r\n\t\tZVAL_STRINGL(&_2$$3, &_1$$3, 1, 1);\r\n\t\tZEPHIR_CALL_FUNCTION(&_3$$3, \"ord\", &_4, 79, &_2$$3);\r\n\t\tzephir_check_call_status();\r\n\t\tZEPHIR_CALL_FUNCTION(&_5$$3, \"dechex\", &_6, 6, _3$$3);\r\n\t\tzephir_check_call_status();\r\n\t\tzephir_concat_self(&ret, _5$$3 TSRMLS_CC);\r\n\t\ti++;\r\n\t}\r\n\tRETURN_CTOR(ret);\r\n```\r\n\r\nAs a result, the very last value of `_2$$3` will leak.\r\n\r\nSee: `Variable::initVariant()` in the compiler\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1480", "title": "Zephir generates code incorrectly", "body": "PHP 5.6, `zim_Test_BuiltIn_CharMethods_getHexForString`\r\n\r\n```\r\nPHP_METHOD(Test_BuiltIn_CharMethods, getHexForString) {\r\n\r\n\tlong _0;\r\n\tchar ch = 0;\r\n\tzval *str_param = NULL, *o = NULL, *_1$$3 = NULL, *_2$$3 = NULL, _3$$3 = zval_used_for_init;\r\n\tzval *str = NULL;\r\n\r\n\tZEPHIR_MM_GROW();\r\n\tzephir_fetch_params(1, 1, 0, &str_param);\r\n\r\n\tzephir_get_strval(str, str_param);\r\n\r\n\r\n\tZEPHIR_INIT_VAR(o);\r\n\tZVAL_STRING(o, \"\", 1);\r\n\tfor (_0 = 0; _0 < Z_STRLEN_P(str); _0++) {\r\n\t\tch = ZEPHIR_STRING_OFFSET(str, _0);\r\n\t\tZEPHIR_INIT_NVAR(_2$$3);\r\n\t\tZEPHIR_SINIT_NVAR(_3$$3);\r\n\t\tZVAL_STRINGL(&_3$$3, &ch, 1, 1);\r\n\t\tzephir_string_to_hex(_2$$3, &_3$$3);\r\n\t\tzephir_concat_self(&o, _2$$3 TSRMLS_CC);\r\n\t}\r\n\tRETURN_CCTOR(o);\r\n\r\n}\r\n```\r\n\r\nInteresting parts:\r\n```c\r\nzval _3$$3 = zval_used_for_init\r\n\r\nfor (_0 = 0; _0 < Z_STRLEN_P(str); _0++) {\r\n\tZEPHIR_SINIT_NVAR(_3$$3);\r\n\tZVAL_STRINGL(&_3$$3, &ch, 1, 1);\r\n}\r\n```\r\n\r\n`ZEPHIR_SINIT_NVAR(z)` expands to `Z_SET_REFCOUNT_P(&z, 1)`\r\n\r\n`ZVAL_STRINGL` in the loop overwrites the previous string which is never freed.\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1475", "title": "Memory leaks in Zephir", "body": "```\r\n==32320== \r\n==32320== HEAP SUMMARY:\r\n==32320==     in use at exit: 22,383 bytes in 259 blocks\r\n==32320==   total heap usage: 313,020 allocs, 312,761 frees, 66,395,022 bytes allocated\r\n==32320== \r\n==32320== 16 bytes in 1 blocks are definitely lost in loss record 13 of 70\r\n==32320==    at 0x4C2CB3F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32320==    by 0x105F7BA3: zephir_call_user_function (fcall.c:323)\r\n==32320==    by 0x105F8330: zephir_call_class_method_aparams (fcall.c:509)\r\n==32320==    by 0x106CDEA0: zim_Test_Sort_quick (sort.zep.c:95)\r\n==32320==    by 0x848517: zend_call_function (zend_execute_API.c:885)\r\n==32320==    by 0x105F7B1A: zephir_call_user_function (fcall.c:303)\r\n==32320==    by 0x105F8330: zephir_call_class_method_aparams (fcall.c:509)\r\n==32320==    by 0x106CDEA0: zim_Test_Sort_quick (sort.zep.c:95)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8483F1: zend_call_function (zend_execute_API.c:866)\r\n==32320==    by 0x5AF943: zim_reflection_method_invokeArgs (php_reflection.c:3348)\r\n==32320== \r\n==32320== 16 bytes in 1 blocks are definitely lost in loss record 14 of 70\r\n==32320==    at 0x4C2CB3F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32320==    by 0x105F7BA3: zephir_call_user_function (fcall.c:323)\r\n==32320==    by 0x105F8330: zephir_call_class_method_aparams (fcall.c:509)\r\n==32320==    by 0x10670D83: zim_Test_Mcall_testCall7 (mcall.zep.c:242)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8483F1: zend_call_function (zend_execute_API.c:866)\r\n==32320==    by 0x5AF943: zim_reflection_method_invokeArgs (php_reflection.c:3348)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8BF4BC: zend_execute (zend_vm_execute.h:458)\r\n==32320==    by 0x8605FB: zend_execute_scripts (zend.c:1427)\r\n==32320== \r\n==32320== 16 bytes in 1 blocks are definitely lost in loss record 15 of 70\r\n==32320==    at 0x4C2CB3F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32320==    by 0x105F7BA3: zephir_call_user_function (fcall.c:323)\r\n==32320==    by 0x105F8330: zephir_call_class_method_aparams (fcall.c:509)\r\n==32320==    by 0x10670E6C: zim_Test_Mcall_testCall7 (mcall.zep.c:244)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8483F1: zend_call_function (zend_execute_API.c:866)\r\n==32320==    by 0x5AF943: zim_reflection_method_invokeArgs (php_reflection.c:3348)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8BF4BC: zend_execute (zend_vm_execute.h:458)\r\n==32320==    by 0x8605FB: zend_execute_scripts (zend.c:1427)\r\n==32320== \r\n==32320== 16 bytes in 1 blocks are definitely lost in loss record 16 of 70\r\n==32320==    at 0x4C2CB3F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32320==    by 0x105F7BA3: zephir_call_user_function (fcall.c:323)\r\n==32320==    by 0x105F8330: zephir_call_class_method_aparams (fcall.c:509)\r\n==32320==    by 0x106710BD: zim_Test_Mcall_testCall8 (mcall.zep.c:268)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8483F1: zend_call_function (zend_execute_API.c:866)\r\n==32320==    by 0x5AF943: zim_reflection_method_invokeArgs (php_reflection.c:3348)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8BF4BC: zend_execute (zend_vm_execute.h:458)\r\n==32320==    by 0x8605FB: zend_execute_scripts (zend.c:1427)\r\n==32320== \r\n==32320== 16 bytes in 1 blocks are definitely lost in loss record 17 of 70\r\n==32320==    at 0x4C2CB3F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32320==    by 0x105F7BA3: zephir_call_user_function (fcall.c:323)\r\n==32320==    by 0x105F8330: zephir_call_class_method_aparams (fcall.c:509)\r\n==32320==    by 0x106711A6: zim_Test_Mcall_testCall8 (mcall.zep.c:270)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8483F1: zend_call_function (zend_execute_API.c:866)\r\n==32320==    by 0x5AF943: zim_reflection_method_invokeArgs (php_reflection.c:3348)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8BF4BC: zend_execute (zend_vm_execute.h:458)\r\n==32320==    by 0x8605FB: zend_execute_scripts (zend.c:1427)\r\n==32320== \r\n==32320== 16 bytes in 1 blocks are definitely lost in loss record 18 of 70\r\n==32320==    at 0x4C2CB3F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32320==    by 0x105F7BA3: zephir_call_user_function (fcall.c:323)\r\n==32320==    by 0x105F8330: zephir_call_class_method_aparams (fcall.c:509)\r\n==32320==    by 0x106A9A4A: zim_Test_Pregmatch_testMatchAllInZep (pregmatch.zep.c:320)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8483F1: zend_call_function (zend_execute_API.c:866)\r\n==32320==    by 0x5AF943: zim_reflection_method_invokeArgs (php_reflection.c:3348)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8BF4BC: zend_execute (zend_vm_execute.h:458)\r\n==32320==    by 0x8605FB: zend_execute_scripts (zend.c:1427)\r\n==32320== \r\n==32320== 56 bytes in 1 blocks are definitely lost in loss record 39 of 70\r\n==32320==    at 0x4C2CB3F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32320==    by 0x82AE2E: _emalloc (zend_alloc.c:2446)\r\n==32320==    by 0x865702: _array_init (zend_API.c:1061)\r\n==32320==    by 0x106A7D6F: zim_Test_Pregmatch_testPregMatchAll (pregmatch.zep.c:119)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8483F1: zend_call_function (zend_execute_API.c:866)\r\n==32320==    by 0x5AF943: zim_reflection_method_invokeArgs (php_reflection.c:3348)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8BF4BC: zend_execute (zend_vm_execute.h:458)\r\n==32320==    by 0x8605FB: zend_execute_scripts (zend.c:1427)\r\n==32320== \r\n==32320== 96 bytes in 2 blocks are definitely lost in loss record 40 of 70\r\n==32320==    at 0x4C2CB3F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32320==    by 0x82AE2E: _emalloc (zend_alloc.c:2446)\r\n==32320==    by 0x8A7FFB: zend_objects_new (zend_objects.c:162)\r\n==32320==    by 0x8666C9: _object_and_properties_init (zend_API.c:1301)\r\n==32320==    by 0x866786: _object_init_ex (zend_API.c:1316)\r\n==32320==    by 0x8C6DB4: ZEND_NEW_SPEC_CONST_HANDLER (zend_vm_execute.h:3342)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8483F1: zend_call_function (zend_execute_API.c:866)\r\n==32320==    by 0x5AF943: zim_reflection_method_invokeArgs (php_reflection.c:3348)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8BF4BC: zend_execute (zend_vm_execute.h:458)\r\n==32320== \r\n==32320== 504 (56 direct, 448 indirect) bytes in 1 blocks are definitely lost in loss record 58 of 70\r\n==32320==    at 0x4C2CB3F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32320==    by 0x82AE2E: _emalloc (zend_alloc.c:2446)\r\n==32320==    by 0x865702: _array_init (zend_API.c:1061)\r\n==32320==    by 0x7DD61F: php_build_argv (php_variables.c:537)\r\n==32320==    by 0x7DDE71: php_hash_environment (php_variables.c:666)\r\n==32320==    by 0x7C71B3: php_request_startup (main.c:1628)\r\n==32320==    by 0x9283A0: do_cli (php_cli.c:945)\r\n==32320==    by 0x929724: main (php_cli.c:1344)\r\n==32320==\r\n==32320== 736 (584 direct, 152 indirect) bytes in 3 blocks are definitely lost in loss record 60 of 70\r\n==32320==    at 0x4C2CB3F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32320==    by 0x82AE2E: _emalloc (zend_alloc.c:2446)\r\n==32320==    by 0x8A7FFB: zend_objects_new (zend_objects.c:162)\r\n==32320==    by 0x8666C9: _object_and_properties_init (zend_API.c:1301)\r\n==32320==    by 0x866786: _object_init_ex (zend_API.c:1316)\r\n==32320==    by 0x8C6DB4: ZEND_NEW_SPEC_CONST_HANDLER (zend_vm_execute.h:3342)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8BF4BC: zend_execute (zend_vm_execute.h:458)\r\n==32320==    by 0x8605FB: zend_execute_scripts (zend.c:1427)\r\n==32320==    by 0x7C8D9F: php_execute_script (main.c:2494)\r\n==32320==    by 0x928556: do_cli (php_cli.c:974)\r\n==32320==    by 0x929724: main (php_cli.c:1344)\r\n==32320==\r\n==32320== 1,924 (208 direct, 1,716 indirect) bytes in 1 blocks are definitely lost in loss record 67 of 70\r\n==32320==    at 0x4C2CB3F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32320==    by 0x82AE2E: _emalloc (zend_alloc.c:2446)\r\n==32320==    by 0x8040A3: compile_file (zend_language_scanner.l:596)\r\n==32320==    by 0x58805F: phar_compile_file (phar.c:3322)\r\n==32320==    by 0x86058D: zend_execute_scripts (zend.c:1421)\r\n==32320==    by 0x7C8D9F: php_execute_script (main.c:2494)\r\n==32320==    by 0x928556: do_cli (php_cli.c:974)\r\n==32320==    by 0x929724: main (php_cli.c:1344)\r\n==32320==\r\n==32320== 6,608 bytes in 118 blocks are definitely lost in loss record 69 of 70\r\n==32320==    at 0x4C2CB3F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32320==    by 0x82AE2E: _emalloc (zend_alloc.c:2446)\r\n==32320==    by 0x865702: _array_init (zend_API.c:1061)\r\n==32320==    by 0x2F6F51: php_pcre_match_impl (php_pcre.c:697)\r\n==32320==    by 0x105F6208: zephir_preg_match (string.c:1082)\r\n==32320==    by 0x106BD268: zim_Test_Router_handle (router.zep.c:634)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8483F1: zend_call_function (zend_execute_API.c:866)\r\n==32320==    by 0x5AF943: zim_reflection_method_invokeArgs (php_reflection.c:3348)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==\r\n==32320== 6,968 (448 direct, 6,520 indirect) bytes in 8 blocks are definitely lost in loss record 70 of 70\r\n==32320==    at 0x4C2CB3F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32320==    by 0x82AE2E: _emalloc (zend_alloc.c:2446)\r\n==32320==    by 0x865702: _array_init (zend_API.c:1061)\r\n==32320==    by 0x2F6F51: php_pcre_match_impl (php_pcre.c:697)\r\n==32320==    by 0x105F6208: zephir_preg_match (string.c:1082)\r\n==32320==    by 0x106B6146: zim_Test_RegexDNA_process (regexdna.zep.c:192)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8483F1: zend_call_function (zend_execute_API.c:866)\r\n==32320==    by 0x5AF943: zim_reflection_method_invokeArgs (php_reflection.c:3348)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==\r\n==32320== LEAK SUMMARY:\r\n==32320==    definitely lost: 8,152 bytes in 140 blocks\r\n==32320==    indirectly lost: 8,836 bytes in 79 blocks\r\n==32320==      possibly lost: 0 bytes in 0 blocks\r\n==32320==    still reachable: 5,395 bytes in 40 blocks\r\n==32320==         suppressed: 0 bytes in 0 blocks\r\n```", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/phalcon/zephir/commits/7dbf999a33a89baa3999cbd928346ab3154a2461", "message": "Implement zephir_{greater,less}_double()"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/88ea292bf20bd80b4b939dac2721c87d4043a78c", "message": "Merge pull request #1532 from sjinks/sergeyklay-superglobals_test\n\nFix superglobals"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/00bbca68bf5b8c5e5a703375465c41adc954042e", "message": "Move backend-specific code to Backend.php"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/f7220d65d4bd123fea2d9ca1a5c810fc64ce932d", "message": "Cleanup"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/07dd5c48efa1cf992d3123407f769007cbcfe245", "message": "Added one more assertion"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/21bee025a134363f1436b627cf10702643e963db", "message": "Bug fix for ZE2"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/a1c7ca346735f3db6396839d5baff64ab1ef8dfb", "message": "Make it work"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/07efaef88b54c34fff2dddc7ae3060ee7de22b6e", "message": "Merge pull request #1529 from sjinks/development\n\nTake advantage of call cache variables"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/6ad6016aed78c0aac5e09b07097b40598a3e60a9", "message": "Take advantage of call cache variables"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/0431d48ca9bded9de158cbdf305c4cfff6565e24", "message": "Merge pull request #1528 from sjinks/development\n\nFurther improve fcall speed"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/eb2ddfebc2dd7699d0b9b3de79b7c115db0887c4", "message": "Cleanup"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/927724d01d9693f172ab5063daac2912ded13a72", "message": "Further improve fcall speed"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/a5f585482bf9c1f6a37d8162936765ebb3d9bfea", "message": "Merge pull request #1527 from sjinks/ze2-fix\n\nFix segfaults in Phalcon (ZE2)"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/481ef1237f6a95d3b09da6ede66ede1f502c2051", "message": "Fix segfaults in Phalcon (ZE2)\n\nRevert 61c06a1fad2a93c71d5be3367297c813689ef523\nRestore the definition of `ZEPHIR_SINIT_NVAR`"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/117448d7c9173700373a280f98435a7368780b04", "message": "Merge pull request #1526 from sjinks/issue-1522\n\nFix #1522"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/7f31340928ad0bcffd2005b34f2b98ccfb03487f", "message": "Test case"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/41a6385a709e7f8caabdfc40d0d7693fea031560", "message": "Refactor code"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/5509bb53adef2d41951217d5ec5d8025a6379657", "message": "Merge pull request #1525 from sjinks/issue-1521\n\nDo not treat numeric strings starting with 0 as numbers"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/77b53b6084922c90c3bc1d7b96692179d06f3c9a", "message": "Improve the test case"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/931532e9c6dc8158a7ee77d6439469682db9697a", "message": "Test zero handling"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/308b8d8450cd17277babfe0d7daa2508394868f8", "message": "Cleanup"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/3736253a5452b47865e26b0373d1b758730b16eb", "message": "Do not treat numeric strings starting with 0 as numbers\n\nFix #1521"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/35e0c4dee6544aea8a422c50a435ccd6e407bb2e", "message": "Test case"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/c16dee6cffac695130d56e38b59cab8d125a5a89", "message": "Fix #1522"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/960dd783a9a592e7e26110777b625aac6f4e061f", "message": "Merge pull request #1519 from sjinks/issue-1507\n\nTest fix for #1507"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/69469cad068e7fd08952dbee67b820c78a242bb2", "message": "Optimize fcall key generation"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/b6e6a41fc0f241b3de9037b042f3dd4895ce4c7e", "message": "Use interned strings and packed hashes"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/ae5bcc80866d409712ba65a911f1d6a261b731bc", "message": "Fix key generation"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/d90e076eeae0457923a075f454ba86a5edaefebe", "message": "Optimize fcall"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/dbc0b339b444045be3b37217f728d38047cd8fe7", "message": "Merge pull request #1518 from sjinks/1516-ze2\n\nFix #1516 for ZE2"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/32706be135a1d0d921cb5d2744dab0f754de3b6c", "message": "Fix #1516 for ZE2"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/ce7c9e5d29aabe60f2c3cab7c8722eb2b262be73", "message": "Merge pull request #1517 from sjinks/issue-1516\n\nFix memory leak in `zephir_concat_function`"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/5003732fad2c2be180a656c069ac6bc8c83a2130", "message": "Fix for ZE2"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/ebe6f054484f517d913fe2161d383d7d42985b64", "message": "Fix #1516"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/87bdccb03699bb61885aa0d619133ce36707cda6", "message": "Merge pull request #1515 from sjinks/ze2-leaks\n\nFix some ZE2 leaks"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/6607edf26d7974662de27c68d24553e4ee4def0c", "message": "Variable::isComplex()"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/22a13a67aab102cbe395204ecbbe3299021b1382", "message": "Drop several 5.3 macros; fix ZEPHIR_SINIT_NVAR"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/61c06a1fad2a93c71d5be3367297c813689ef523", "message": "Update the compiler to use alt frames"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/d5b5eca2c7522723c092d44e7a2eeaf17f13173d", "message": "Introduce alternative frames"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/61ce625be91606b3109a36521c462bbea3103c65", "message": "Fix memory leak in zephir_throw_exception_debug()\n\nFix #1482"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/d1fd21248a0a421a671ef44ce552520fb3239161", "message": "Fix property initialization code (zephir_init_properties_XXX)\n\nFix #1481"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/ff769131f3751b590da702e3c7595411c07b0919", "message": "Merge pull request #1513 from sjinks/issue-1486\n\nFix memory leak"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/78dafbd844632d8c8edc17c1fdbf39c470a63a85", "message": "Possible fix"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/0d378a27cc0692611ebbfe7dc944661d0bb37e1d", "message": "Merge pull request #1512 from phalcon/revert-1509-issue-1507\n\nRevert \"Optimize fcall\""}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/4b44c7d063309a3f8ffda57e3264726b91ab5c46", "message": "Revert \"Optimize fcall\""}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/10d65016fd46071946633bc5b6daec723a31f571", "message": "Merge pull request #1509 from sjinks/issue-1507\n\nOptimize fcall"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/34003b23bddd2b65931a9928e2fe0e2266e85203", "message": "Optimize fcall"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/3cb5f8f376689e0d50d7a510777dc062c57b3776", "message": "Merge pull request #1506 from sjinks/issue-417\n\n`return $this` from property setters"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/b126d22686216cd0f0e00e711caa85296bdf9814", "message": "Property setter does 'return $this' (fix #417)"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/3a08d6cc9428ea9929a9b91fcb0185d8df28b26a", "message": "Update cleanup script"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/6444ec7b358a3170421799909977a358e871d3b8", "message": "Clean up temporary directory"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/e18aa1b7dddae7e4bd508dba6281f6e9ab2881d1", "message": "Add recursiveRmDir()"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/28ea74b0acbc84ff54ead2edb7881411742e5439", "message": "Merge pull request #1505 from sjinks/issue-1356\n\nMake int zend_long"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/c04b0d4cf26c3ee5399f251d9b430fe7952c93a0", "message": "PHP 5 does not have zend_long"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/3facded8a330821e4f57a85164824c195486d268", "message": "Make int zend_long (fix #1356)"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/8a66d57925414865921f219af0f32b6f779e5b1e", "message": "Merge pull request #1504 from sjinks/issue-1502\n\nRemove broken AddcslashesOptimizer"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/e0805af708771652141afaec08487a02c225ffc8", "message": "chmod -x *.php"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/09a56742ee5467fd80fe2b0cb537ce62f9e31ff5", "message": "Removed broken AddcslashesOptimizer"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/474c3251832a16a9b1947cbe4d018d07c5c479f3", "message": "Merge branch 'master' of git://github.com/evandropoa/zephir into evandropoa-master"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/efeaa0ee6c1bd005fe3d175e83444b7ec93603da", "message": "Merge pull request #1501 from sjinks/issue-1263\n\nFix #1263"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/7ad2811d283ff474d52bd9dc59f0a64ecd81ecdc", "message": "Updated test case"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/2c792f43f4397ff2cad778a28e4a84213ef9d1d8", "message": "Better solution"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/51d145eb21937484f6359b2d1589a13483db6e7f", "message": "Fix stripslashes()"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/38cd86cefcea6b3c56716f6c332464b5ed4e0109", "message": "Fix #1263"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/011d768ce72c621c3bc0028ebfe21ed901a21d77", "message": "Merge pull request #1500 from sjinks/master\n\nFix compiler warnings"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/135e9c337560fbd6015c9edfcc9590c5ee00f804", "message": "Test case by @Izopi4a"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/d63937cd02d4a7fac17de13ca238597a15c10b4a", "message": "Fix compiler warnings"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/41c850d586df1edf5d47964e2d8085e19359b294", "message": "Merge pull request #1499 from sjinks/master\n\nUpdate microbench"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/8e414ef2602c0e05fded4eb883165934119662be", "message": "Merge branch 'ovr-fix_microbench'"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/3866e0e1237b5ace3642878a11fe774db542a98c", "message": "Fix formatting"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/5f1f74bd3ebee2ff84763cc6e226651277605999", "message": "Do not run microbench.php under valgrind"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/d86cc2c562163cfc9e85f636b7bdf452a18b65fb", "message": "Fix #1498"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/878c41a01031f20c1cf120506c1563e7230621df", "message": "Merge branch 'fix_microbench' of https://github.com/ovr/zephir into ovr-fix_microbench"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/0970cb68ebe968fe8640128c48fa65477c30316b", "message": "Merge pull request #1497 from sjinks/misc-fixes\n\nFix zephir_create_instance(_params)"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/a0b1a5160e551037060c0058396466925f489a41", "message": "Fix zephir_create_instance(_params)"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/2881e222ccd19436697de9380540dd8156084d8e", "message": "Merge pull request #1496 from sjinks/misc-fixes\n\nRefactoring and bug fixes (ZE3/kernel/object.c)"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/aad5c7796a0677a33538cc985d1181e987b2ba17", "message": "Code cleanup"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/2f9b5d3b0d8cf5ec33a55e25abdb2bec6f3699ce", "message": "Refactoring and bug fixes\n* handle references\n* optimize zephir_fetch_class\n* fix zephir_class_exists\n* fix zephir_method_exists_ex\n* use Zend API instead of zephir_update_static_property_ce"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/6608033934db91b145aec6ad518a27f6a4380588", "message": "Merge pull request #1493 from sjinks/memleaks-ze3\n\nFix memory leaks for ZE3"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/f31b8b1d0250d4ed347a66a3d25d60871c157891", "message": "Fix memory leaks in recursive function calls"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/00b199749abe64e576832d508254a05f8c53ab79", "message": "Fix most of memory leaks in zephir_call_user_function()"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/085a0bc9651ec39b75b835bbd3669601d690dce7", "message": "Fix memleak in zephir_preg_match()"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/9f14063c8ee1a860cd5f89551c900fc9e48b24b3", "message": "Merge pull request #1491 from sjinks/misc-ze3-fixes\n\nMisc fixes for ZE3 from other WIP branches"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/cfe8761097c9e768c257070a11c323b6ee235979", "message": "#1431: PHP 7.0 should match the behavior of PHP 7.1"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/6324b0fe93944c8c4c8c1a9a8562bed914ecf09e", "message": "Get rid of ZEPHIR_INIT_THIS"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/2f4fa610f694c9260dd5feec328302ef169635de", "message": "Issue #251: fix for PHP 7.0"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/d07f981a84bb66e7b09dcae0ad203dc1eb61565d", "message": "Merge pull request #1490 from sjinks/master\n\nFix #1489"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/491f0d4f08816eb7bed576c5eabf29bf786ced05", "message": "Fix #1489"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/e4245867866c651d91e15222ed5084f7b8301dec", "message": "Merge pull request #1488 from sjinks/issue-1403\n\nImplement symbol tables (ZE3)"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/032b2db5fd84bd23efbb0fc4f62974ff1c41c329", "message": "Updated test case"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/c664913c6d5104bf6e7b8c7d186457feb1ae1cd8", "message": "Fix formatting"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/21c007c96bd16b960b8002c416a647a9e6a0edb1", "message": "Implement #1403"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/b7fa2f45bb281039d56f7421ae90dfc2edfcf9d7", "message": "Merge pull request #1485 from sjinks/issue-1325\n\nFix assignment after exception (#1325)"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/4cdd162cf42ddf35b49a5bd8ee4b63fff9af25ed", "message": "Make phpunit exit with error upon failure"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/b9761e13ba1820d9846ca63115b4152e53742a28", "message": "Fix #1325 (ZE3)"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/50af351965e3447a087e460663bdadf6c147148c", "message": "Fix #1325 (ZE2)"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/a882b465f8fd192bb0fe16faa5cbdef03640d268", "message": "Test case by @virgofx"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/1c136f69a2762a2aa20c90bf176af6df6659a5e4", "message": "Merge pull request #1478 from sjinks/master\n\nRemoved not needed stuff from travis.yml"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/12565fa28c576d67dbd33210060527afa22f4acf", "message": "Remove not needed stuff from Travis"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/ce72dffe1781be6eebc288599e928b5271f8c3b9", "message": "Merge pull request #1477 from sjinks/master\n\nRemoved generated/ dir and related stuff"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/28187be1815c88359579a8efe97e8329516048ac", "message": "Removed generated/ dir and related stuff"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/70647cbf2e61c6e956442822445fa448a5f5a3dd", "message": "Fix for MSVC"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/dcca029908b36af75184546c6fd4fb14b4f1e6bd", "message": "Merge pull request #1470 from sjinks/master\n\nFix for VC"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/0523b210a59140645f2d914c1406f1c09d3aa8d3", "message": "Fix for VC"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/285ab438d9d35b8ba0a3805fcda7d9c62d9b25cd", "message": "Merge pull request #1469 from sjinks/master\n\nFix Phalcon build"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/582af79937c32d52944b3a9469e2ef76b6740bfe", "message": "Fix Phalcon build"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/15b3953b17b0a73ade7b2a8d72b2604aa1fd19bd", "message": "Merge pull request #1468 from sjinks/master\n\nRemove forgotten kernels/ZendEngine2/hash.*"}], "pull_requests": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/1467", "title": "Fix scope issues in calls (PHP 7.0)", "body": "See #251 \r\n\r\nPHP 5.4 and 5.5 still need fixing.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108012486", "body": "Just experience :-) I had a similar issue in PHP-CPP", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108012486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108012573", "body": "\"Parameter 3 to preg_match_all() expected to be a reference, value given\" - this was the clue", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108012573/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108038093", "body": "Does it work this way? Last time I checked, Travis ignored \"compiler\" if language: php is set", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108038093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108075530", "body": "This check probably needs to go away as well", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108075530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108225846", "body": "I have pushed the same fix to ZE2 directly to master to save some time.", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108225846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108226412", "body": "oops, to my master", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108226412/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108232307", "body": "@Jurigag no, your fix is fine, too. Your fix addresses the issue with the way how parameters are passed, my fix addresses the case when there are too many parameters and they corrupt the stack.\r\n\r\nYour test case passes 11 parameters, the 11th one possibly overwrites `static_params` variable (it depends on the stack layout and how the compiler arranged local variables). But if you increase the number of parameters, they will eventually overwrite the stack pointer and crash the application.\r\n\r\nActually this is why the issue is compiler-specific: VC does not have __builtin_constant_p therefore the code works. clang could probably lay out the local variables differently, and the app does not crash. But gcc 4.8 does what it does, and the 11th parameter overwrites the stack pointer.", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/108232307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109244788", "body": "Is there a cleaner way to do this?\r\n\r\nRight now this generates something like:\r\n\r\n```\u0441\r\nif (...) {\r\n} else {\r\n    if (...) {\r\n    } else {\r\n        if (...) {\r\n            ...\r\n        }\r\n    }\r\n}", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109244788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109245052", "body": "Is there a cleaner way?\r\n\r\n`$compilationContext->backend->copyOnWrite()` writes the code, what I need is the assignment operator as this probably won't compile on ZE2\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109245052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109245341", "body": "Just wonder why line number is 8.\r\n\r\nThe test says it is 11, I thought it should be 83.\r\n\r\n@Jurigag any idea?", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109245341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109250320", "body": "Make sense\u2026 Your test patch added 3 lines to the top of test/exceptions.zep this is why the number is 11 now", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109250320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109263248", "body": "The above is a dirty hack, but I failed to make this:\r\n\r\n```php\r\n$exprBuilder->statements()->let(array(\r\n     $exprBuilder->operators()->assignVariable($variable->getName(), $exprBuilder->variable($exc_var->getName()))\r\n))->build(),\r\n```\r\n\r\nor similar constructs work :-(\r\n\r\nIf someone knows how to make them work, I would prefer it to this code.", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109263248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109286106", "body": "@Jurigag nah, the test will fail :-) I think PHPUnit is calling ob_clean() after the test and since there is no output buffer any longer, it throws an exception.", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109286106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109286135", "body": "ob_get_clean() is ob_get_contents() + ob_end_clean(), not ob_clean()", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109286135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109286324", "body": "`typedef uint32_t HashPosition` in PHP 7\r\n`typedef Bucket* HashPosition` in PHP 5\r\n\r\nI would assign it to plain 0, not sure why `{ 0 }` was used.\r\n\r\nBracketed initialization also works though: http://rextester.com/GXS88393\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109286324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109286352", "body": "Why do we cast to `(char*)`? Is it `const char*`?", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109286352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109286700", "body": "Line numbers in `zend_exception.c` are `zend_long`", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109286700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109301994", "body": "No, just the opposite\u00a0\u2014 `ZEPHIR_RELEASE` disables the debug code. `PHALCON_RELEASE` / `ZEPHIR_RELEASE` were used for production builds.", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109301994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109302219", "body": "#if**n**def\r\n\r\nThat is, if `ZEPHIR_RELEASE` is NOT defined\u2026", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109302219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/111260725", "body": "Please take a look", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/111260725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110343895", "body": "Yes.", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110343895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110400552", "body": "@sergeyklay could you please review this?", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110400552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110400707", "body": "The entire block :-)", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110400707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110508980", "body": "This gathers all used variables (the code is from https://github.com/phalcon/zephir/blob/master/Library/ClassMethod.php#L1999), then retrieves only those which are initialized with `zval_used_for_init` (https://github.com/phalcon/zephir/blob/master/Library/Backends/ZendEngine2/Backend.php#L268).\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110508980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110513104", "body": "The only issue is that this is ZE2-specific method :-(", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110513104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110513152", "body": "This is specific only to this method", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110513152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110513277", "body": "The current implementation is much like a hack :-(\r\n\r\nThere is no `cleanup()` method or something like this, therefore we have to (ab)use `onPostCompile()`. But the issue is that in `postCompile()` the entire method has already been generated, and we have to deal with the code in the text form.\r\n\r\nThe current logic is as follows:\r\n* we get the list of all used variables and filter only the local ones;\r\n* for every local variable we add a call to `zval_dtor()`;\r\n* all these calls are saved into a string;\r\n* then we get the text code from the code printer and insert out string with `zval_dtor()`s right before the `RETURN_xxx` statement.\r\n\r\nI know that this is not an elegant solution, but with the current implementation of the compiler I was unable to come up with something more beautiful :-(\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110513277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110515732", "body": "You mean, a macro?", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110515732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110520542", "body": "Thanks", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/110520542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "ikmsk10": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1350", "title": "Support resource type", "body": "Hey there. \r\nHow about resource type? I know I'ts hard begin now but... for example I want define extra le_* list entry identifiers and on MINIT function i want declare resource destructors.\r\n\r\nIf it's possible i am offer to use define a descriptors of the list entry destructor at config.json, with simlink to destructor function who is declared in config.json too in [\"destructors\"] node.\r\n\r\nPS sorry my English is terrible \ud83d\ude22\r\n\r\nThanks for response. \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gtux": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1328", "title": "[NFR] Extend support for statement with other types", "body": "Hi, the For statement is very usefull, it will be good if you can extend the support for others than array or strings, for example: ArrayAccess or Traversable. In Phalcon there is many objects that I wanted to iterate in Zephir, it would be simple with for statement but it crash with \"The argument is not initialized or iterable\" message, so I have to change the for statement with while loop in order to get it work.\r\n## ", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "josh4trunks": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1323", "title": "Better Support FreeBSD", "body": "I was working to get this ported to FreeBSD. There are some issues I hit that I can work around but would be nice to have addressed.\r\n- [x] Use `#!/usr/bin/env bash` instead of `#!/bin/bash`\r\n  - FreeBSD never installs packages to /bin, and bash is installed as a package since it is not the default shell.\r\n- [x] Make 'bin/zepher' completely POSIX compliant to drop the dependency for **bash**\r\n  - This might not be doable in a clean way so we may need to skip this.\r\n- [x] Make 'parser/parser/build_linux.sh' completely POSIX compliant to drop the dependency for **bash**\r\n- [x] Execute 'parser/parser/build_linux.sh' using /bin/sh instead of directly so this script doesn't necessarily need execute permissions.\r\n- [ ] Replace instances of \"gcc\" with \"cc\" to drop the dependency for **gcc**\r\n  - When I tested compiling an extension without **gcc** installed it failed because gcc was missing. I might be able to work around this by setting the CC variable to cc, but I did not have time to test this.\r\n- [ ] Drop dependency for sudo\r\n  - It would be nice to allow systems admins, that do not have **sudo** installed to still install extensions. I noticed when I built an extension as root, without sudo installed, the extension was silently not installed.\r\n  - Maybe this could be accomplished with **su**? If not, we can just disregard this.\r\n##", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1323/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/81218613", "body": "I don't think /bin/sh matters here. What matters is I changed it to `[` which is the same as executing `test`. Here's the documentation for **test** on FreeBSD.\nhttps://www.freebsd.org/cgi/man.cgi?test\n\nI would think it work the same on any system because I see the mention of POSIX, but then I noticed this sentence...\n\"In particular, only expressions containing -a, -o, ( or ) can be ambiguous.\"\n\nI can check this on my arch linux system at home. I wonder if this is what I should be checking as well.\nhttps://linux.die.net/man/1/test\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/81218613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/81223377", "body": "just a guess, but maybe your version of test has some of those variables empty and is essentially running `test -a`\n\nmaybe adding a ' around each variable would work for you?\n`if [ '$1' -a '$2' -a '$3' -a '$1' = \"-c\" ]; then`\nI haven't had a chance to check this yet though\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/81223377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Izopi4a": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1303", "title": "[NFR] Group use", "body": "is it hard and possible to have this feature in zephir also http://php.net/manual/en/migration70.new-features.php#migration70.new-features.group-use-declarations\r\n\r\nphp implementation [link](https://github.com/php/php-src/pull/1005/files)\r\n## ", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/comments/15265655", "body": "i think you need to make it class_exists('APCIterator', false) otherwise you get autoloader error ( or at least I do ).\nSorry if i am annoying you :-)\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/15265655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/18426677", "body": "i was going to test the seg fault issue in phalcon, with this commit i got this ( warning )while compiling \n\n```\n./kernel/memory.h:123:38: warning: backslash and newline separated by space [enabled by default]\n #define ZEPHIR_OBS_COPY_OR_DUP(z, v) \\\n\nubuntu, php 7\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/18426677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/18427258", "body": "yep with this patch the warning is gone\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/18427258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/50978646", "body": "i am used to see what's the default parameter, but if you agree i will change it back to array\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/50978646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "niel": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1291", "title": "char type does not behave as uchar with arithmetic.", "body": "char types should by byte values. The new arithmetic functionality however treats them as 32/64 bit ints.\r\nexample:\r\n\r\n```zep\r\nchar ch = ' '; // space character ASCII 32\r\nlet ch += 64;\r\nlet ch += 42;\r\necho ch->toHex();\r\n```\r\n\r\nproduces:\r\n`FFFFFFFFFFFFFF8A`\r\ninstead of just `8A`.", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pedro151": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1290", "title": "preg_replace", "body": "because PHP and zephir return different answers?\r\n\r\n``` zephir\r\n.zep\r\n\r\npublic function filter(string! viewCode) {\r\n    var search, replace;\r\n        let search = [\r\n            \"/\\>\\r?\\n\\s*(\\r?\\n)?/\",  // strip whitespaces after tags, except space\r\n            \"/[^\\S ]+\\</s\",  // strip whitespaces before tags, except space\r\n            \"/(\\s)+/s\"       // shorten multiple whitespace sequences\r\n        ];\r\n        let replace = [\r\n            \">\",\r\n            \"<\",\r\n            \"\\\\1\"\r\n        ];\r\n        return preg_replace(search, replace, viewCode);\r\n    }\r\nresponse:\r\n'</html>'\r\n```\r\n\r\n``` php\r\n.php\r\n\r\nfunction filter($buffer) {\r\n        $search = array(\r\n            '/\\>\\r?\\n\\s*(\\r?\\n)?/',  // strip whitespaces after tags, except space\r\n            '/[^\\S ]+\\</s',  // strip whitespaces before tags, except space\r\n            '/(\\s)+/s'       // shorten multiple whitespace sequences\r\n        );\r\n        $replace = array(\r\n            '>',\r\n            '<',\r\n            '\\\\1'\r\n        );\r\n        $buffer = preg_replace($search, $replace, $buffer);\r\n        return $buffer;\r\n    }\r\nresponse:\r\n'<html><body></body></html>'\r\n```", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "amichelins": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1282", "title": "Compiling Zephir on Windows", "body": "I install Zephir from composer. But is not running becouse is mising, the parser and Exception\r\n\r\nI follow this steps from this url http://blog.benoitblanchon.fr/build-php-extension-on-windows/ And i succefuly copile de parser (phpzephirparser.dll) in Windows 10 x64, with PHP 5.6.23 x64 and VC 11\r\n\r\nI am tring to compile de Zephir extension.\r\n\r\nBut a this time i have this errors :\r\n```\r\nzephir.c(152) : error C2198: 'zephircompileclass' : too few arguments for call\r\n```\r\n\r\n```c\r\nif (!memcmp(ZSTRVALP(type), \"class\", strlen(\"class\") + 1)) \r\n{\r\n    zephircompileclass( context, z ); # This\r\n}\r\n```\r\n\r\nzephir.c(233) : error C2065: 'zendglobalsid' : undeclared identifier\r\n\r\n```c\r\nzendzephirglobals *zephirglobalsptr = ZEPHIRT_VGLOBAL; # This\r\n```\r\n\r\nHow to solve this problems to build Zephir?\r\n\r\nThank in advance\r\n##\r\n\r\n\r\n<bountysource-plugin>\r\n\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/36073721-compiling-zephir-on-windows?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "out001a": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1280", "title": "Operator 'add-assign' is not supported for arrays", "body": "``` zephir\r\nvar a = [0];\r\nlet a += [1, 2];\r\n```\r\n## \r\n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/35881060-operator-add-assign-is-not-supported-for-arrays?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RikudouSage": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1275", "title": "String gets deformed after second call (0.9.3a-dev-5c0fb106a6)", "body": "I have a method which starts:\r\n\r\n``` zep\r\npublic function getDocument(const id, index = false, type = false) {\r\n        var_dump(index);\r\n        if(!index && !this->index) {\r\n            throw \"You must set index via setIndex() method or as a parameter\";\r\n        } elseif(!index) {\r\n            let index = this->index;\r\n        }\r\n        var_dump(index);\r\n```\r\n\r\nThe setIndex() method is:\r\n\r\n``` zep\r\npublic function setIndex(const string index) {\r\n        let this->index = index;\r\n        return this;\r\n    }\r\n```\r\n\r\nThen in php I construct the object:\r\n\r\n``` zep\r\n$obj = new TestObj;\r\n$obj->setIndex(\"test\")->getDocument(1);\r\n$obj->setIndex(\"test\")->getDocument(1); // same call as above\r\n```\r\n\r\nThe dump prints:\r\n\r\n`bool(false)` - correct\r\n`string(4) \"test\"` - correct\r\n\r\nHere comes the second call, which should print the same, but:\r\n`string(39) \"1a\ufffd\ufffd\ufffd,\u0010\u007f \ufffd\ufffd\u0001 \ufffd\ufffd\u0001\"`\r\n`string(39) \"1a\ufffd\ufffd\ufffd,\u0010\u007f \ufffd\ufffd\u0001 \ufffd\ufffd\u0001\"`\r\n\r\nAnd I have absolutely no clue why this happens.\r\n\r\nPHP version is: 5.5.9-1ubuntu4.17.\r\n## \r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/35667088-string-gets-deformed-after-second-call-0-9-3a-dev-5c0fb106a6?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xEsk": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1274", "title": "Is there a problem with preg_match and matches inside an IF?", "body": "Is there a problem with **preg_match** or I'm not using it correctly?\r\n\r\n---\r\n\r\n**Test case 1:**\r\n\r\n```\r\n    var matches;\r\n    let matches =  null;\r\n    if preg_match(\"/is([A-Z]\\\\w+)/\", \"isLogged()\", matches) {\r\n        var_dump(matches);\r\n    }\r\n```\r\n\r\n**Output:**\r\n\r\n> array(0) { } \r\n\r\n---\r\n\r\n**Test case 2:**\r\n\r\n```\r\n    var matches;\r\n    let ok =  preg_match(\"/is([A-Z]\\\\w+)/\", \"isLogged()\", matches);\r\n    var_dump(matches);\r\n    if ok {\r\n        var_dump(matches);\r\n    }\r\n```\r\n\r\n**Output:**\r\n\r\n> array(2) { [0]=> string(8) \"isLogged\" [1]=> string(6) \"Logged\" } \r\n> array(0) { } \r\n\r\n---\r\n\r\nAs you can see, the **matches** variable is filled with results, but when I use it into the **if** then is empty. Why? Is it a bug or I'm missing something?\r\n## \r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/35475150-is-there-a-problem-with-preg_match-and-matches-inside-an-if?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1274/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 2, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1245", "title": "The \"get_object_vars\" is not returning the protected/private properties (0.9.2a-dev)", "body": "I'm porting a private PHP library to Zephir and almost everything is working, except a small piece of code which uses the function **get_object_vars** to get all the properties of an object (is a special cloning method).\r\n\r\nThe problem is that **get_object_vars** is not returning the protected/private properties of an object.\r\n\r\nI made a test case, using the same class logic in PHP and Zephir and the result is not the same.\r\n\r\n**PHP - 5.4.34**\r\n\r\n```php\r\nnamespace Foundation;\r\n\r\nclass Test\r\n{\r\n    public    $a = 1;\r\n    protected $b = 2;\r\n    private   $c = 3;\r\n\r\n    public function run()\r\n    {\r\n        var_dump(get_object_vars($this));\r\n    }\r\n}\r\n```\r\n\r\n**Result:**\r\n\r\n```\r\narray(3) {\r\n  'a' =>  int(1)\r\n  'b' =>  int(2)\r\n  'c' =>  int(3)\r\n}\r\n```\r\n\r\n---\r\n\r\n**Zephir - 0.9.2a-dev**\r\n\r\n```zep\r\nnamespace Foundation;\r\n\r\nclass Test\r\n{\r\n    public    a = 1;\r\n    protected b = 2;\r\n    private   c = 3;\r\n\r\n    public function run() -> void\r\n    {\r\n        var_dump(get_object_vars(this));\r\n    }\r\n}\r\n```\r\n\r\n**Result:**\r\n\r\n```\r\narray(1) {\r\n  [\"a\"]=>int(1)\r\n}\r\n```\r\n\r\n---\r\n\r\nI attached the test sources: [php_zep_tests.zip](https://github.com/phalcon/zephir/files/232398/php_zep_tests.zip)\r\n\r\n**PS: Zephir is a very cool ppiece of code, I really love it.**", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1245/reactions", "total_count": 5, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 5, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "baszczewski": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1259", "title": "Unset from object property array not working", "body": "Unfortunately unset from array is not working.\r\n\r\nSample function code:\r\n\r\n```\r\nvar_dump(this->_data);\r\nunset this->_data[\"key_a\"];\r\nvar_dump(this->_data);\r\n```\r\n\r\ncompiled C code:\r\n\r\n```\r\nzval *key_param = NULL, _0, _1, _2;\r\nzval key;\r\nZEPHIR_INIT_THIS();\r\n\r\nZVAL_UNDEF(&key);\r\nZVAL_UNDEF(&_0);\r\nZVAL_UNDEF(&_1);\r\nZVAL_UNDEF(&_2);\r\n\r\nZEPHIR_MM_GROW();\r\nzephir_fetch_params(1, 1, 0, &key_param);\r\n\r\nzephir_get_strval(&key, key_param);\r\n\r\n\r\nzephir_read_property(&_0, this_ptr, SL(\"_data\"), PH_NOISY_CC | PH_READONLY);\r\nzephir_var_dump(&_0 TSRMLS_CC);\r\nzephir_read_property(&_1, this_ptr, SL(\"_data\"), PH_NOISY_CC | PH_READONLY);\r\nzephir_array_unset_string(&_1, SL(\"key_a\"), PH_SEPARATE);\r\nzephir_read_property(&_2, this_ptr, SL(\"_data\"), PH_NOISY_CC | PH_READONLY);\r\nzephir_var_dump(&_2 TSRMLS_CC);\r\nZEPHIR_MM_RESTORE();\r\n```\r\n\r\nresult:\r\n\r\n```\r\narray(2) {\r\n  [\"key_a\"]=>\r\n  string(6) \"marcin\"\r\n  [\"key_b\"]=>\r\n  string(5) \"paula\"\r\n}\r\narray(2) {\r\n  [\"key_a\"]=>\r\n  string(6) \"marcin\"\r\n  [\"key_b\"]=>\r\n  string(5) \"paula\"\r\n}\r\n```\r\n\r\nZephir version: 0.9.3a-dev\r\nPHP: 7.0\r\nOS: Ubuntu 16.04\r\n\r\nMay I provide additional informations, which help resolve this issue?\r\nI tried to modify C code by myself . After remove PH_SEPARATE attribute, issue is gone.\r\n## \r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/34490939-unset-from-object-property-array-not-working?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stratoss": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1251", "title": "Unable to install zephir on Debian stretch/sid", "body": "Zephir version: 0.8,\r\nOS: Debian stretch/sid\r\n\r\n`./install -c` returns `error: re2c is not installed`\r\n\r\n`re2c -v` returns `re2c 0.16`\r\n\r\nI've managed to install it by changing `if [ $? != 2 ]; then` to `if [ $? != 0 ]; then` and it works, but it should be that way...\r\n## \r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/33901406-unable-to-install-zephir-on-debian-stretch-sid?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lsave": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1247", "title": "Is there anyway to custom something in PHP_MINIT_FUNCTION?", "body": "I want to custom something in PHP_MINIT_FUNCTION but I didn't find any API for it.\r\n## \r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/33330071-is-there-anyway-to-custom-something-in-php_minit_function?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ottodashadow": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1229", "title": "API Documentation: Incorrect Namespace on type hinted return.", "body": "If I define the following class in Zephir with my Json class as the return type hint the **zephir stubs** command calculates the correct namespace for the class, but the **zephir api** documentation call seems to ignore the use statement.\r\n#### Origin /library/api/client/apiresponse.zep file:\r\n\r\n``` zephir\r\nnamespace Library\\API\\Client;\r\n\r\nuse Library\\Types\\Json;\r\n\r\nclass APIResponse extends Json {\r\n    ...\r\n    public function getData() -> <Json> {\r\n        return new Json(this->get(\"data\"));\r\n    }\r\n    ...\r\n}\r\n```\r\n#### PHP Stub Code \"zephir stubs\"\r\n\r\n``` php\r\n<?php\r\nnamespace Library\\API\\Client;\r\n\r\nclass APIResponse extends \\Library\\Types\\Json\r\n{\r\n    /**\r\n     * @return \\Library\\Types\\Json\r\n     */\r\n    public function getData() {}\r\n}\r\n```\r\n#### API Documentation Methods\r\n- __construct(variable $responseJson)  :  void\r\n- getData()  :  **Library\\API\\Client\\Json**\r\n## \r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/32635191-api-documentation-incorrect-namespace-on-type-hinted-return?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nblaudez": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1200", "title": "Error with a line using SESSION", "body": "Hello,\r\n\r\nI can't compile this line :\r\n\r\n``` zephir\r\nif(isset(_SESSION[\"isAdmin\"]) && _SESSION[\"isAdmin\"]==true) {\r\n```\r\n\r\nI have this error message :\r\n\r\n```\r\n *** Error in `/usr/bin/php5': double free or corruption (!prev): 0x00000000013feca0 ***\r\n```\r\n\r\nSomeone can help me ?\r\n## \r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/31627726-error-with-a-line-using-session?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "flip111": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1188", "title": "Link with precompiled object file", "body": "At the moment there is no facility to link with an object file (i'm not talking about a library that stays somewhere else on the system). I found it was possible to add this functionality to LDFLAGS in this file https://github.com/phalcon/zephir/blob/master/templates/ZendEngine2/config.m4  Would it be ok to add a PR for this?\r\n## \r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/30802961-link-with-precompiled-object-file?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1170", "title": "Unreachable code false positive", "body": "i have this piece of zep code\n\n``` zephir\n    public static function toPropertyString(array properties)\n    {\n        var x, ret, k, v;\n\n        let x =  false;\n        let ret = \"{\";\n        for k, v in properties {\n            if x {\n                let ret .= \", \";\n            }\n            let x =  true;\n            let ret .= k . \": \";\n            if is_array(v) {\n                let ret .= \"[\\\"\" . implode(v, \"\\\", \\\"\") . \"\\\"]\";\n            } else {\n                let ret .= \"\\\"\" . v . \"\\\"\";\n            }\n        }\n        return ret . \"}\";\n    }\n```\n\n```\nWarning: Unreachable code in /home/flip101/zep/propertystring.zep on 14 [unreachable-code]\n\n                    let ret .= \", \";\n    ------------------------------^\n```\n\nIt doesn't see that i set `let x =  true;` and then it loops again\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/30144774-unreachable-code-false-positive?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/1177", "title": "Easy access to Zephir function name in AbstractOptimizer", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tabalchi": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1179", "title": "Getter/Setter shortcuts - Zephir compiler only capitalizing, not camelizing property name to create PHP getter/setter methods", "body": "I have several DB table column names with underscores (e.g. first_name, last_name, etc.). When writing the model code in PHP, it is normal to write getters/setters using camelization of the column names. However, when I rewrote the model code in Zephir and used the getter/setter shortcuts, the rest of my PHP code that uses the model started crashing. That's when I discovered that Zephir is simply _capitalizing_ the property names to derive the getter/setter method names when shortcuts are used _instead of camelizing_.\r\n\r\nFor example, if the property name is `first_name` (must match column name for model to work), the getter ends up being called `getFirst_name()` instead of `getFirstName()` which is more conventional. Same with the setter.\r\n\r\nThe fix is quite simple. In the file\r\n\r\n`zephir/Library/CompilerFile.php` do the following:\r\n\r\nIn function\r\n\r\n``` php\r\n_processShorcuts()\r\n```\r\n\r\nInside the switch-case statements for **get** and **set**,\r\n\r\n``` php\r\n            switch ($shortcut['name']) {\r\n                case 'get':\r\n                    ....\r\n\r\n                case 'set':\r\n                    ....\r\n```\r\n\r\nReplace the line \r\n\r\n``` php\r\n'get' . ucfirst($name),\r\n```\r\n\r\nwith \r\n\r\n``` php\r\n'get' . Utils::camelize($name),\r\n```\r\n\r\nand make the same change for 'set'\r\n\r\nBelow is the code example.\r\nIn writing the model code in Zephir, I wrote the following:\r\n\r\n``` php\r\nclass Customer extends \\Phalcon\\Mvc\\Model\r\n{\r\n    protected first_name {\r\n        set, get\r\n    };\r\n}\r\n\r\n```\r\n\r\nThe corresponding .c file has the following in it:\r\n\r\n``` php\r\nZEPHIR_INIT_CLASS(MyProject_Models_Customer) {\r\n\r\n    ZEPHIR_REGISTER_CLASS_EX(MyProject\\\\Models, Customer, myproject, models_customer, zephir_get_internal_ce(SS(\"phalcon\\\\mvc\\\\model\") TSRMLS_CC), myproject_models_customer_method_entry, 0);\r\n\r\n    zend_declare_property_null(myproject_models_customer_ce, SL(\"first_name\"), ZEND_ACC_PROTECTED TSRMLS_CC);\r\n\r\n    return SUCCESS;\r\n}\r\n\r\nPHP_METHOD(MyProject_Models_Customer, setFirst_name) {\r\n    zval *first_name;\r\n    zephir_fetch_params(0, 1, 0, &first_name);\r\n    zephir_update_property_this(this_ptr, SL(\"first_name\"), first_name TSRMLS_CC);\r\n}\r\n\r\nPHP_METHOD(MyProject_Models_Customer, getFirst_name) {\r\n    RETURN_MEMBER(this_ptr, \"first_name\");\r\n}\r\n```\r\n\r\nAs can be seen, the getter/setter methods created are **setFirst_name** and **getFirst_name**.\r\n\r\nInstead, camelization as suggested above would lead to the more conventional **setFirstName** and **getFirstName** method names.\r\n\r\nIs this doable?\r\n##\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/30518408-getter-setter-shortcuts-zephir-compiler-only-capitalizing-not-camelizing-property-name-to-create-php-getter-setter-methods?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hah-a": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1167", "title": "Is it possible to put to rights in the manipulation with the multi-line strings?", "body": "I'm creating an extension containing the class\n\n``` php\nnamespace ExtABC;\n\nclass ClassA\n{\n    public function __construct()\n    {\n    }\n\n    public function f1()\n    {\n        var $abc;\n        let $abc =\n\"abc\ndef\n...\nxyz\n\";\n    }\n}\n```\n\nDuring compilation I get an error\n\n``` php\nZephir\\CompilerException: Internal extension compilation failed. Check compile-errors.log for more information\n```\n\nBut if I change the code a little bit, the compilation goes well:\n\n``` php\nnamespace ExtABC;\n\nclass ClassA\n{\n    public function __construct()\n    {\n    }\n\n    public function f1()\n    {\n        var $abc =\n\"abc\ndef\n...\nxyz\n\";\n    }\n}\n```\n\nIf I add the string concatenation here\n\n``` php\nnamespace ExtABC;\n\nclass ClassA\n{\n    public function __construct()\n    {\n    }\n\n    public function f1()\n    {\n        var $def = \"123\";\n        var $abc =\n\"abc\ndef\n...\n\" . $def . \"\nxyz\n\";\n    }\n}\n```\n\nI get a compile error\n\n``` php\nZephir\\CompilerException: Invalid variable type: concat in '/home/.../extabc/extabc/classa.zep' on line 13\n```\n\nBut if I add the string concatenation in the first version of the class, the compilation goes well:\n\n``` php\nnamespace ExtABC;\n\nclass ClassA\n{\n    public function __construct()\n    {\n    }\n\n    public function f1()\n    {\n        var $def = \"123\";\n\n        var $abc;\n        let $abc =\n\"abc\ndef\n...\n\" . $def . \"\nxyz\n\";\n    }\n}\n```\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/30052742-is-it-possible-to-put-to-rights-in-the-manipulation-with-the-multi-line-strings?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fezfez": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1163", "title": "Optimisation", "body": "Hi,\r\nI made a little benchmark for comparing zephir/c/php by the following code.\r\n## Zephir\r\n\r\n``` zephir\r\n\r\nnamespace Toto;\r\n\r\nclass Aclass\r\n{\r\n    public function write() -> void\r\n    {\r\n        int time, i;\r\n        var fp;\r\n        string header;\r\n\r\n        let time = 3000000;\r\n\r\n        let fp = fopen(\"header.csv\", \"w+\");\r\n        let header = \"fzefze,fezfze,fzefze,fzefze,fezfez,fzefze,fezfze,fzefze,fzefze,fezfez,fzefze,fezfze,fzefze,fzefze,fezfez,fzefze,fezfze,fzefze,fzefze,fezfez\";\r\n\r\n        for i in range(1, time) {\r\n            fwrite(fp, header);\r\n        }\r\n\r\n    }\r\n}\r\n```\r\n\r\n``` bash\r\ntime php -d extension=/usr/lib/php5/20131226/toto.so testzep.php \r\n\r\nreal    0m5.788s\r\nuser    0m0.200s\r\nsys 0m3.036s\r\n\r\n```\r\n## PHP\r\n\r\n``` php\r\n$time = 3000000;\r\n$fp = fopen('header.csv', 'w+');\r\n$header = 'fzefze,fezfze,fzefze,fzefze,fezfez,fzefze,fezfze,fzefze,fzefze,fezfez,fzefze,fezfze,fzefze,fzefze,fezfez,fzefze,fezfze,fzefze,fzefze,fezfez';\r\n\r\nfor ($i = 0; $i < $time; $i++) {\r\n    fwrite($fp, $header);\r\n}\r\n```\r\n\r\n``` bash\r\ntime php test.php\r\n\r\nreal    0m4.675s\r\nuser    0m0.468s\r\nsys 0m3.288s\r\n\r\n```\r\n## C\r\n\r\n``` c\r\n#include <stdio.h>\r\n\r\nmain() {\r\n   FILE *fp;\r\n   int a;\r\n\r\n   fp = fopen(\"test.txt\", \"w+\");\r\n   for( a = 1; a < 3000000; a = a + 1 ){\r\n       fputs(\"fzefze,fezfze,fzefze,fzefze,fezfez,fzefze,fezfze,fzefze,fzefze,fezfez,fzefze,fezfze,fzefze,fzefze,fezfez,fzefze,fezfze,fzefze,fzefze,fezfez\", fp);\r\n   }\r\n   fclose(fp);\r\n}\r\n```\r\n\r\n``` bash\r\ntime ./test \r\n\r\nreal    0m2.516s\r\nuser    0m0.008s\r\nsys 0m0.316s\r\n```\r\n\r\nZephir pretty bad ! But let's see the c code generated for the write method.\r\n\r\n``` c\r\nPHP_METHOD(Toto_Aclass, write) {\r\n\r\n    zend_bool _2;\r\n    zval *header;\r\n    zval *fp = NULL, _0, _1;\r\n    int time, i, ZEPHIR_LAST_CALL_STATUS, _3, _4;\r\n\r\n    ZEPHIR_MM_GROW();\r\n\r\n    time = 3000000;\r\n    ZEPHIR_SINIT_VAR(_0);\r\n    ZVAL_STRING(&_0, \"header.csv\", 0);\r\n    ZEPHIR_SINIT_VAR(_1);\r\n    ZVAL_STRING(&_1, \"w+\", 0);\r\n    ZEPHIR_CALL_FUNCTION(&fp, \"fopen\", NULL, 1, &_0, &_1);\r\n    zephir_check_call_status();\r\n    ZEPHIR_INIT_VAR(header);\r\n    ZVAL_STRING(header, \"fzefze,fezfze,fzefze,fzefze,fezfez,fzefze,fezfze,fzefze,fzefze,fezfez,fzefze,fezfze,fzefze,fzefze,fezfez,fzefze,fezfze,fzefze,fzefze,fezfez\", 1);\r\n    _4 = time;\r\n    _3 = 1;\r\n    _2 = 0;\r\n    if (_3 <= _4) {\r\n        while (1) {\r\n            if (_2) {\r\n                _3++;\r\n                if (!(_3 <= _4)) {\r\n                    break;\r\n                }\r\n            } else {\r\n                _2 = 1;\r\n            }\r\n            i = _3;\r\n            zephir_fwrite(NULL, fp, header TSRMLS_CC);\r\n        }\r\n    }\r\n    ZEPHIR_MM_RESTORE();\r\n\r\n}\r\n```\r\n\r\nWtf is this loops ??? After replace the loops by \r\n\r\n``` c\r\n    for( i = 1; i < 3000000; i = i + 1 ){\r\n            zephir_fwrite(NULL, fp, header TSRMLS_CC);\r\n    }\r\n```\r\n\r\nRecompile by hand and rebenchmark\r\n\r\n``` bash\r\ntime php -d extension=/usr/lib/php5/20131226/toto.so testzep.php \r\n\r\nreal    0m3.212s\r\nuser    0m0.208s\r\nsys 0m2.968s\r\n\r\n```\r\n\r\nIs the zephir code optimized ? Or the generating code is very not optimized ?\r\n\r\nPHP 5.6.4-4ubuntu6.2 (cli) (built: Jul  2 2015 15:29:28) \r\nCopyright (c) 1997-2014 The PHP Group\r\nZend Engine v2.6.0, Copyright (c) 1998-2014 Zend Technologies\r\n    with Zend OPcache v7.0.4-dev, Copyright (c) 1999-2014, by Zend Technologies\r\nZephir version 0.8.0a\r\n## \r\n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/29732368-optimisation?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1098", "title": "Introduce zept (Zephir Test)", "body": "Hi,\n\nI propose to introduce zept (Zephir Test) like php do (phpt).\n\nThe syntax would be very similar to phpt, an example with a zept for issue#1097\n\n``` zept\n--TEST--\nTest that elsif is not evaluated\n--FILE--\nnamespace ZephirBug;\n\nclass bug1\n{\n    public function whatsisMyvar(myvar)\n    {\n        if is_string(myvar) {\n            return \"is a var\";\n        } elseif is_string(myvar[0]) {\n            return \"is an array and the first element is a string\";\n        }\n\n        return \"unkown\";\n    }\n}\n--USAGE--\nuse ZephirBug\\bug1;\n\n$tmp = new bug1();\n\nvar_dump($tmp->whatsisMyvar(\"a string\"));\nvar_dump($tmp->whatsisMyvar(['a string']));\nvar_dump($tmp->whatsisMyvar(10));\n--EXPECT--\nstring(8) \"is a var\"\nstring(45) \"is an array and the first element is a string\"\nstring(6) \"unkown\"\n```\n\nThe change between zept and phpt are : \n- Introduce \"--USAGE--\" section, this part is a php usage of the extension\n- \"--FILE--\" section are unlimited, its possible create multiple class.\n\nThis is just a draft but what do you think ?\n\nCheers\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/26980981-introduce-zept-zephir-test?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1097", "title": "Elseif is evaluated when is not needed", "body": "``` zephir\r\nnamespace ZephirBug;\r\n\r\nclass bug1\r\n{\r\n    public function whatsisMyvar(myvar)\r\n    {\r\n        if is_string(myvar) {\r\n            return \"is a var\";\r\n        } elseif is_string(myvar[0]) {\r\n            return \"is an array and the first element is a string\";\r\n        }\r\n\r\n        return \"unkown\";\r\n    }\r\n}\r\n```\r\n\r\n``` php\r\n<?php\r\nuse ZephirBug\\bug1;\r\n\r\n$tmp = new bug1();\r\n\r\nvar_dump($tmp->whatsisMyvar(\"a string\"));\r\nvar_dump($tmp->whatsisMyvar(['a string']));\r\nvar_dump($tmp->whatsisMyvar(10));\r\n```\r\n\r\nExpected output :   \r\n\r\n```\r\nstring(8) \"is a var\"\r\nstring(45) \"is an array and the first element is a string\"\r\nstring(6) \"unkown\"\r\n```\r\n\r\nActual output :   \r\n\r\n```\r\nPHP Notice:  Cannot use a scalar value as an array in zephirbug/bug1.zep on line 9 in bug1.php on line 6\r\nstring(8) \"is a var\"\r\nstring(45) \"is an array and the first element is a string\"\r\nPHP Notice:  Cannot use a scalar value as an array in zephirbug/bug1.zep on line 9 in bug1.php on line 8\r\nstring(6) \"unkown\"\r\n```\r\n\r\nZephir version 0.8.0a", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/1104", "title": "[WIP] First implementation of zept", "body": "Please dont merge now\n- [X] Implement first test case\n- [ ] Convert .phpt test from php-src into .zept\n- [ ] Unit test on zephir-testcase\n- [ ] Give zephir-testcase to Zephir organisation ?\n\nComments are welcome !\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/comments/13316617", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/13316617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/37972858", "body": "I have change the alias manager instantiation just for not to be force to call \"preCompile\" method\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/37972858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/60202613", "body": "You should use data provider (https://phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.data-providers)\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/60202613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "coollider": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1159", "title": "Invalid new array initialisation", "body": "Example:\r\n\r\n``` php\r\nvar\r\n  variable;\r\n\r\nlet\r\n  variable = 1;\r\n\r\n... // any operations with variable\r\n\r\nlet\r\n  variable = [variable];\r\n\r\nvar_dump(variable);\r\n```\r\n\r\nOutput:\r\n\r\n```\r\narray(1) {\r\n  [0]=>\r\n  *RECURSION*\r\n}\r\n```\r\n\r\nThis happens because zephir generate invalid C code. \r\n\r\n``` c\r\nZEPHIR_INIT_NVAR(variable);\r\nzephir_create_array(variable, 1, 0 TSRMLS_CC);\r\nZEPHIR_CHECK_POINTER(variable);\r\nzephir_array_fast_append(variable, variable);\r\n```\r\n\r\nWhat it do:\r\n1 Create new array and assign it to `variable`\r\n\r\n``` php\r\nlet\r\n  variable = [];\r\n```\r\n\r\n2 Add `variable` to `variable`. Add self to self.\r\n\r\n``` php\r\nlet\r\n  variable = [variable];\r\n```\r\n\r\nWhat he must do:\r\n1 Create new array `tmp`\r\n\r\n``` php\r\nlet\r\n  tmp = [];\r\n```\r\n\r\n2 Add `variable` to `tmp`\r\n\r\n``` php\r\nlet\r\n  tmp[] = variable;\r\n```\r\n\r\n3 Assign `tmp` to `variable`\r\n\r\n``` php\r\nlet\r\n  variable = tmp;\r\n```\r\n\r\n4 Destroy `tmp`\r\n\r\n``` php\r\nunset(tmp);\r\n```", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1094", "title": "Nullable array argument can't be strong checking on equals to NULL", "body": "On 0.8 version of zephir strong type checking on NULL not working with nullable array argument.\n\nExample:\n\n``` php\npublic function simpleMethod(const array items = NULL){\n  bool\n    isItemsNULL;\n\n  let\n    isItemsNULL = NULL === items;\n  // generate error: Unknown type: array in %file% on line %line%\n  let\n    isItemsNULL = items === NULL;\n  // this code, generate the folowong C code:\n  // ...\n  // zephir_get_arrval(items, items_param); // <-- this is error, becouse array can be NULL, but zephir_get_arrval convert NULL to empty array\n  // ZEPHIR_CHECK_POINTER(items);\n  // isItemsNULL = ZEPHIR_IS_STRING_IDENTICAL(items, \"\"); // <-- WTF oO? Why string? I try to check is 'items' equal to NULL, not to empty string\n  let\n    isItemsNULL = is_null(items); // <-- this code works, and generates the correct code\n  // isItemsNULL = Z_TYPE_P(items) == IS_NULL;\n}\n```\n\nIn all three cases zephir must generate the same code:\n\n``` php\nisItemsNULL = Z_TYPE_P(items) == IS_NULL;\n```\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/26965486-nullable-array-argument-can-t-be-strong-checking-on-equals-to-null?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1036", "title": "call_user_func product 139 error", "body": "I can't use `call_user_func`, it crash the script with 139 error\n\nMy OS: Linux nettop 3.16.0-4-amd64 #1 SMP Debian 3.16.7-ckt11-1 (2015-05-24) x86_64 GNU/Linux\nPHP: 5.6.9-0+deb8u1 (cli) (built: Jun  5 2015 11:03:27)\n\nOn 32bit version `call_user_func` not crash the script.\n\n`call_user_func_array` works grate on 32bit and on 64bit.\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/24700321-call_user_func-product-139-error?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/923", "title": "Error code 139, when try to create \\DOMDocument object inside class", "body": "On the latest zephir master this code produce error code 139.\n\nZephir code:\n\n``` php\nnamesapce Ns;\n\nclass Test{\n    public function __construct(){\n        var\n            domNode;\n\n        let\n            domNode = new \\DOMDocument();\n    }\n}\n```\n\nPhp code:\n\n``` php\n$test = new \\Ns\\Test();\n```\n\nOutput:\n\n``` text\nProcess finished with exit code 139\n```\n\nOS: Linux web 3.2.0-4-686-pae #1 SMP Debian 3.2.60-1+deb7u3 i686 GNU/Linux\nGCC: gcc (Debian 4.7.2-5) 4.7.2\nCopyright (C) 2012 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/12231032-error-code-139-when-try-to-create-domdocument-object-inside-class?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/893", "title": "Extending from DOM* classes not working.", "body": "If i extend class from one of DOM\\* classes when i try to get some magic property i get error.\n\n``` text\nPHP Warning:  Couldn't fetch ... Node no longer exists\nPHP Notice:  Undefined property: ...::$childNodes\n```\n\nExample:\n\nZephir:\n\n``` php\nnamespace Test;\n\nclass Document extends \\DOMDocument{\n}\n```\n\nPhp:\n\n```\n$DOM = new \\Test\\Document();\n$DOM->childNodes;\n```\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/11263390-extending-from-dom-classes-not-working?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/889", "title": "Add magic constant \"::class\" like in PHP 5.5", "body": "Php 5.5 example:\n\n``` php\nnamespace Name\\Space;\nclass ClassName {}\n\necho ClassName::class;\n\necho \"\\n\";\n```\n\nOutput:\n\n``` text\nName\\Space\\ClassName\n```\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/11184781-add-magic-constant-class-like-in-php-5-5?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/828", "title": "Incorrect cast to (int) and (float) for num string.", "body": "Example zephir:\n\n``` php\n            var\n                version = \"1.0 200 OK\",\n                floatVersion,\n                intVersion;\n\n            var_dump(version);\n\n            let\n                floatVersion = (float)version,\n                intVersion   = (int)version;\n\n            var_dump(floatVersion);\n            var_dump(intVersion);\n```\n\nOutput:\n\n``` text\nstring(10) \"1.0 200 OK\"\nfloat(0)\nint(0)\n```\n\nPHP example:\n\n``` php\n$version      = \"1.0 200 Found\";\n$intVersion   = (int)$version;\n$floatVersion = (float)$version;\n\nvar_dump($version);\nvar_dump($intVersion);\nvar_dump($floatVersion);\n```\n\nOutput:\n\n``` text\nstring(13) \"1.0 200 Found\"\nint(1)\ndouble(1)\n```\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/9780046-incorrect-cast-to-int-and-float-for-num-string?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/820", "title": "For in iterator(%stdClass%) no working, process finished with exit code 139", "body": "Simple example:\r\n\r\n``` php\r\n    public static function testIterator(var obj){\r\n        var\r\n            k, v, arr = [];\r\n\r\n        for k, v in iterator(obj) {\r\n            let\r\n                arr[k] = v;\r\n        }\r\n\r\n        return arr;\r\n    }\r\n```\r\n\r\nI run this code:\r\n\r\n``` php\r\n$obj = (object)[\r\n    'prop0' => 0,\r\n    'prop1' => 1,\r\n    'prop2' => 2,\r\n    'prop3' => 3\r\n];\r\n\r\n$b = Arr::testIterator($obj);\r\n```\r\n\r\nOutput:\r\n\r\n``` text\r\nProcess finished with exit code 139\r\n```\r\n\r\nZephir versrion: 0.6.0a\r\nOS: Linux web 3.2.0-4-686-pae #1 SMP Debian 3.2.60-1+deb7u3 i686 GNU/Linux", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/812", "title": "Input method argument with type `uint` not coverted to uint.", "body": "Example:\n\n``` php\npublic function simpleMethod(const uint! val){\n  var_dump(val);\n}\n```\n\nRun this code:\n\n``` php\n$this->simpleMethod(1);\n$this->simpleMethod(-1);\n```\n\nOutput:\n\n``` text\nint(1)\nint(-1)\n```\n\nMust be:\n\n``` text\nint(1)\nint(1)\n```\n\nOr throw error, that input argument not unsigned int.\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/9464300-input-method-argument-with-type-uint-not-coverted-to-uint?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/811", "title": "Add array safe cast argument to function declarations.", "body": "Right now not matter what sintax we use:\n\n``` php\npublic function method000(array arr){\n\n}\n```\n\nor\n\n``` php\npublic function method000(array! arr){\n\n}\n```\n\nIf we pass not array to `method000`, we get error.\n\n``` text\nPHP Catchable fatal error:  Argument 1 passed to %%%::method000() must be of the type array, %%% given in\n```\n\nMaybe add auto array safe cast in first example:\n\n``` php\npublic function method000(array arr){\n var_dump(arr);\n}\n```\n\nAnd if we pass not array to this method, zephir automatically wrap passed variable to array.\nExample:\n\n``` php\n$obj->method000(1);\n```\n\nOutput:\n\n``` Text\narray(1) {\n  [0] =>\n  int(1)\n}\n```\n## \n\r\n\r\n<bountysource-plugin>\r\n\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/9381512-add-array-safe-cast-argument-to-function-declarations?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/808", "title": "Can't unset object property using variable as property name.", "body": "Example:\r\n\r\n``` zep\r\nvar\r\n  obj, property;\r\n\r\nlet\r\n  obj = new stdClass(), property = \"property000\";\r\n  obj->property000 = \"test\";\r\n\r\nunset(obj->{property});\r\n```\r\n\r\nGot error:\r\n\r\n``` \r\nZephir\\CompilerException: Cannot use expression type: property-dynamic-access in \"unset\" in ... Xml.zep\r\n\r\n            unset(obj->{property});\r\n    ------------------------------------^\r\n```\r\n## \r\n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/9380369-can-t-unset-object-property-using-variable-as-property-name?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/774", "title": "Incorrect cast object to array, get empty array.", "body": "When cast object to array, get empty array. \nPhp exmaple:\n\n``` php\n$std = new stdClass();\n$std->prop0 = 0;\n$std->prop1 = 1;\n\n$std = (array)$std;\n\nvar_dump($std);\n```\n\nOutput:\n\n``` text\narray(2) {\n  'prop0' =>\n  int(0)\n  'prop1' =>\n  int(1)\n}\n```\n\nZephir:\n\n``` php\nvar\n    obj;\n\nlet\n    obj = new \\stdClass(),\n    obj->prop0 = 0,\n    obj->prop1 = 1,\n    obj = (array)obj;\n\nvar_dump(obj);\n```\n\n``` text\narray(0) {\n}\n```\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/8893403-incorrect-cast-object-to-array-get-empty-array?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/774/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 2, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/491", "title": "Get CONST of class.", "body": "Hi, how i can get constant of class object?\n\nExample:\n\n``` php\nclass WBase{\n    const NAME;\n}\n\nclass WBlock extends WBase{\n    /**\n     * @var WBase[]\n     */\n    protected _widgets = [];\n\n    public function getWidgetsByName(const string! name) -> array{\n        if !empty name && (name == \"*\" || preg_match(\"~^[a-zA-Z][a-zA-Z0-9_-]*$~\", name){\n            var widgets = []; var widget;\n\n            if !empty this->_widgets {\n                for widget in this->_widgets {\n                    if name == \"*\" || name == widget::NAME {\n                        let widgets[] = widget;\n\n                        if widget instanceof WBlock && !empty widget->_widgets {\n                            let widgets = array_merge(widgets, widget->_getWidgetsByName(name);\n                        }\n                    }\n                }\n            }\n\n            return widgets;    \n        } else {\n            throw new \\Exception();        \n        }\n    }\n}\n```\n\nI get error:\n\nZephir\\CompilerException: Cannot locate class 'It\\Utils\\Html\\Widget\\widget' in /var/tmp/it/it/utils/html/Widget/wblock.zep on line 32\n\n```\n      if name == \"*\" || name == widget::NAME {\n---------------------------------------------^\n```\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/4141011-get-const-of-class?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/comments/8907174", "body": "Why closed? I still get error.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/8907174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/8907196", "body": "Need fix 59-61 line.\n\n``` php\nif ($variableLeft->isNotVariableAndString() && !$variableLeft->isArray()) {\n  throw new CompilerException(\"Only dynamic/string or array variables can be used in 'empty' operators\", $expression['left']);\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/8907196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "hellobbq": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1155", "title": "in_array(\"true\",[\"0\",\"false\",\"\"]) return true?", "body": "```\narray arr;\nlet arr = [\"0\",\"false\",\"\"];\nlet s = \"true\";\nvar_dump(in_array(s,arr)); //return true?\n```\n\nzephir 0.9.1a-dev,php5.6.13\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/29350989-in_array-true-0-false-return-true?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1136", "title": "call to undefined method finfo::__construct()", "body": "```\nlet _finfo = new finfo();\n```\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/28802985-call-to-undefined-method-finfo-__construct?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1119", "title": "preg_replace_callback  Requires argument 2, 'self::_myMap', to be a valid callback", "body": "```\nWarning: preg_replace_callback(): Requires argument 2, 'self::_myMap', to be a valid callback ....\n```\n\nzephir version 0.9a-dev php-5.6.13\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/27678368-preg_replace_callback-requires-argument-2-self-_mymap-to-be-a-valid-callback?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "andrewnester": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1153", "title": "Undefined symbol: _zend_hash_str_add", "body": "Hi guys!\n\nI am trying to build zephir project and receive following error\n\n`Warning: PHP Startup: Unable to load dynamic library '/path/to/zephir/parser/modules/zephir_parser.so' - /path/to/zephir/parser/modules/zephir_parser.so: undefined symbol: _zend_hash_str_add in Unknown on line 0`\n\nI am running following configuration\n\nPHP : /usr/local/bin/php \nPHP_SAPI : cli\nPHP_VERSION : 5.6.4-4ubuntu6.4\nZEND_VERSION: 2.6.0\n\nZephir was built and installed from master branch, version 0.9.1a-dev (was built according tutorial)\n\nThanks\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/29331191-undefined-symbol-_zend_hash_str_add?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pgaultier": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1134", "title": "Reflection isDefaultValueAvailable() method seems to not work as expected", "body": "Hi,\n\nProblem : \nthe reflection method `isDefaultValueAvailable()` return `false` instead of `true`\n\nExample to show the problem.\nI have the following class in zephir : \n\n```\nnamespace demo;\nclass Test \n{\n    private data;\n    public function __construct(array config = [])\n    {\n        let this->data = config;\n    }\n}\n```\n\ncode compile as expected but reflexion fail : \n\n``` php\n    $ref = new ReflectionClass('\\demo\\Test');\n    $constructor = $ref->getConstructor();\n    $params = $constructor->getParameters();\n    var_dump(\n        $params[0]->getName(),\n        $params[0]->isOptional(),\n        $params[0]->isDefaultValueAvailable()\n    );\n```\n\nthis code output :\n\n```\nstring 'config' (length=6)\nboolean true\nboolean false   <- the default value flag is *not* set\n```\n\nNow, sample code in PHP to show what I'm really expecting\nI have the following class in php\n\n``` php\n    class Test {\n        private $data;\n        public function __construct(array $config = [])\n        {\n            $this->data = $config;\n        }\n    }\n```\n\nI test it with the same code\n\n``` php\n    $ref = new ReflectionClass('Test');\n    $constructor = $ref->getConstructor();\n    $params = $constructor->getParameters();\n    var_dump(\n        $params[0]->getName(),\n        $params[0]->isOptional(),\n        $params[0]->isDefaultValueAvailable()\n    );\n```\n\nand I get what I'm expecting\n\n```\nstring 'config' (length=6)\nboolean true\nboolean true   <- the default value flag is set\n```\n\nAm'I doing something wrong in my zephir code ?\n## \n\r\n\r\n<bountysource-plugin>\r\n\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/28724234-reflection-isdefaultvalueavailable-method-seems-to-not-work-as-expected?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/606", "title": "Late State Binding properties", "body": "I saw that late state binding is working for methods ( #513 and #565 ) thanks a lot for that one ;-) but not for properties.\n\nThe keyword static is not recognized when used with properties and raise a \n- Zephir\\ParseException: Syntax error ....\n  exception\n\nany plan about implementing  it ?\n\n``` php\nclass A {\n        public static $property = 'A property';\n        public static function aStatic() {\n                return static::$property;\n        }\n        public static function aSelf() {\n                return self::$property;\n        }\n}\n\nclass B extends A {\n        public static $property = 'B property';\n        public static function bStatic() {\n                return static::$property;\n        }\n        public static function bSelf() {\n                return self::$property;\n        }\n}\n```\n\ncalling `B::aStatic()` should return `\"B property\"` while `B.aSelf()` should return `\"A property\"`\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/5713777-late-state-binding-properties?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sroycode": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1130", "title": "Compiling on Mac OSX with macports", "body": "In install file /opt/local/include needs to be included\n\ngcc -Wl,-rpath /usr/local/lib -I/opt/local/include -I/usr/local/include -L/usr/local/lib -L/opt/local/lib -g3 -O0 -w parser.c scanner.c -ljson-c -o ../bin/zephir-parser\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/28307821-compiling-on-mac-osx-with-macports?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pjacferreira": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1111", "title": "Undocumented inconsistencies in the handling of shortcuts.", "body": "In the development of my ZEP to PHP translator (https://github.com/test-to-com/zephir) I ran across an inconsistency.\n\nHere is one example, taken from phalcon `db\\rawvalue\\rawvalue.zep` (line 44):\n\n``` zephir\n    /**\n     * Raw value without quoting or formating\n     *\n     * @var string\n     */\n    protected _value { get, __toString };\n```\n\nThis line has 2 inconsistencies:\n1)  I'm aware that the Phalcon likes, like in C++, to add leading '`_`' to mark protected/private properties/methods. I have no real problem with that, since I also use and like the idea.\n\nThe problem is that, name of the getter produced even though logical, is not what I expected, from the Zephir documentation. \nThis shortcut produce a  getter named getValue() and not `get_value()`!?\nI didn't find anything the Zephir documentation, for shortcuts, stating that a leading '`_`' would be dropped before the `ucfirst()`!?\n\nWorse, from the Zephir code, it seems that 2 leading '`_`' are treated differently that just '`_`':\nFrom: `CompilerFile.php` line 318, \n\n``` php\n            if (substr($property['name'], 0, 1) == '_') {\n                $name = substr($property['name'], 1);\n            } else {\n                $name = $property['name'];\n            }\n```\n\nthis implies that if I had\n\n``` zephir\nprivate __value { get }; // 2 leading '_'s\n```\n\nI would get a getter with a name like `get_value()`!?\n\nPersonally, I find that, Zephir team should either:\n1. Document this special case, or \n2. Generalize the handling of '`_`' to make it more useful\n\nExample Handling:\n- Drop all leading '`_`'\n- use '`_`' in the middle of a property name as word breaks and then `ucfirst()` all the words\n\nthis would produce something like:\n- `__default_value` (2 leading '`_`')  would produce a getter of `getDefaultValue()`, nice no :)\n\n(which If I remember correctly, is already used in Symfony in the way it converts the routes to action function names).\n\nThis would also still maintain compatibility with the Phalcon teams coding standard.\n\n2) Nowhere in the documentation, does it state that, '`__toString`' is also an accepted shortcut name, even though the same CompilerFile.PHP does accept that...\n\nI personally see no benefit in accepting '`__toString`' (the leading '`__`' does not make anything more readable)...\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/27292389-undocumented-inconsistencies-in-the-handling-of-shortcuts?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "joeyhub": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1105", "title": "Syntax improvements", "body": "I have a few issues with the syntax parsing in this case. It uses it's own parser so I would expect it to be better. Expressions should just work.\n\nI have a weird little bit of code like this:\n\n```\n                let obj->{arr[\"prop\"]}[arr[\"key\"]] = [\n                    \"a\": arr[\"key\"], \"b\": []\n                ];\n```\n\nThis fails to parse on several levels but should parse.\n\nA secondary issue is whether or not assigning the array at that property to a variable will create a cow array or array by reference. When you need to create large structures COW arrays are extremely inefficient. I would hope the framework would provide arrays by reference by default and then a copy method for when a copy is needed. I have tested and it is COW, which is a major drawback. There is no benefit to it being COW in PHP, they just made it that way in the beginning. Importing this quirk from PHP is a major design flaw in zephir that defeats its purpose in many cases. I have worked with passing PHP arrays by pointer/reference in C extensions by hand and there is no problem with it. zvals are pointers already so it's really easy:\n\nI don't think it is a good idea to make it too safe or managed like PHP CPP because we tested PHP CPP and half the time it gave no gains or so little gains that PHP code optimisation or using another scripting language would have done the trick. Because I can't do what I am doing in PHP in zephir my PHP code is more memory efficient by a factor of 10. zephir is useless to me until this is fixed. The point of passing around arrays in an object collection is to get around the limitations of PHP so without supporting dereferencing there PHP is faster than zephir.\n\nAt the very least I should be able to tell it that I want a pointer to the array in such and such a location rather than a copy.\n\nvar also does not support complex expressions. You need...\n\n```\n var x;\n let x = this->something();\n```\n\nvar appears to only allow literal/defalt assignment.\n\nI cannot create a dynamic class. In PHP you can do new $classname();. I would expect new (classname)() to work but it does not.\n\nIn a switch statement I cannot declare a local variable.\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/27094838-syntax-improvements?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "skmail": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1091", "title": "Nested Closures", "body": "Hey,\n\nI'm trying to use nested closures but seem it not supported yet?, the compiler firing the following error, \n\n \"Zephir\\CompilerException: Internal extension compilation failed. Check compile-errors.log for more information\"\n\n> /home/vagrant/projects/zephir-projects/bs/ext/bs/0__closure.zep.c: In function 'zim_bs_0__closure___invoke':\n> /home/vagrant/projects/zephir-projects/bs/ext/bs/0__closure.zep.c:40:36: error: 'bs_1__closure_ce' undeclared (first use in this function)\n> zephir_create_closure_ex(v, NULL, bs_1__closure_ce, SS(\"__invoke\") TSRMLS_CC);\n> /home/vagrant/projects/zephir-projects/bs/ext/bs/0__closure.zep.c:40:36: note: each undeclared identifier is reported only once for each function it appears in\n> make: **\\* [bs/0__closure.lo] Error 1\n> make: **\\* Waiting for unfinished jobs....\n> /home/vagrant/projects/zephir-projects/bs/ext/bs/0__closure.zep.c: In function 'zim_bs_0__closure___invoke':\n> /home/vagrant/projects/zephir-projects/bs/ext/bs/0__closure.zep.c:40:36: error: 'bs_1__closure_ce' undeclared (first use in this function)\n> zephir_create_closure_ex(v, NULL, bs_1__closure_ce, SS(\"__invoke\") TSRMLS_CC);\n> /home/vagrant/projects/zephir-projects/bs/ext/bs/0__closure.zep.c:40:36: note: each undeclared identifier is reported only once for each function it appears in\n> make: **\\* [bs/0__closure.lo] Error 1\n\nAnd here is my code sample.\n\n```\nthis->_di->set(\"service\",  function(){\n    let service = new Service();\n    service->setOptions([\n        function(){\n\n        }\n    ]);\n});\n```\n\nZephir version\n![screen shot 2015-09-21 at 7 15 58 pm](https://cloud.githubusercontent.com/assets/3670810/9997515/3cfb32a4-6095-11e5-88a0-11af934f14be.png)\n\nRegards\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/26843924-nested-closures?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nekulin": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1086", "title": "BUG function params array!", "body": "This code does not work\r\n\r\n```zep\r\npublic static function test1(array! params)\r\n{\r\n    let params[\"test2\"] = 1234;\r\n}\r\n\r\npublic static function test()\r\n{\r\n    array params;\r\n\r\n    let params = [];\r\n    let params[\"test\"] = 123;\r\n\r\n    self::test1(params);\r\n\r\n    var_dump(params);\r\n    die();\r\n}\r\n```\r\n\r\nWhen you call the test I get \"NULL\" instead of array(1) { [\"test\"]=> int(123) } but if you remove \"array!\" and put the \"array\" I get array(1) { [\"test\"]=> int(123) }\r\n\r\nThis code works\r\n\r\n```zep\r\npublic static function test1(array params)\r\n{\r\n    let params[\"test2\"] = 1234;\r\n}\r\n\r\npublic static function test()\r\n{\r\n    array params;\r\n\r\n    let params = [];\r\n    let params[\"test\"] = 123;\r\n\r\n    self::test1(params);\r\n\r\n    var_dump(params);\r\n    die();\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MarkBaker": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1081", "title": "[DOC] Iterator isn't iterable internally", "body": "Zephir 0.7.1b\n\nI've created a simple iterable class:\n\n```\nnamespace MyIterators;\n\nclass MyCollection implements \\Iterator, \\Countable {\n    protected position = 0;\n\n    protected entries = [];\n\n    public function count()\n    {\n        return count(this->entries);\n    }\n\n    public function rewind() -> void\n    {\n        let this->position = 0;\n    }\n\n    public function current()\n    {\n        return this->entries[this->position];\n    }\n\n    public function key()\n    {\n        return this->position;\n    }\n\n    public function next() -> void\n    {\n        let this->position++;\n    }\n\n    public function valid()\n    {\n        return isset this->entries[this->position];\n    }\n\n    public function add(value) -> void\n    {\n        let this->entries[] = value;\n    }\n\n    public function merge(<MyCollection> collection) -> void\n    {\n        var value;\n\n        for value in collection {\n            this->add(value);\n        }\n    }\n}\n```\n\nand a simple PHP script to test it\n\n```\n$a = new MyIterators\\MyCollection();\n$a->add('A');\n$a->add('B');\n$a->add('C');\n\nforeach($a as $key => $value) {\n    echo $key, ' => ', $value, PHP_EOL;\n}\necho PHP_EOL;\n\n\n$b = new MyIterators\\MyCollection();\n$b->add('X');\n$b->add('Y');\n$b->add('Z');\n\nforeach($a as $key => $value) {\n    echo $key, ' => ', $value, PHP_EOL;\n}\necho PHP_EOL;\n\n\n$a->rewind();\n$b->rewind();\n\n\n$a->merge($b);\n\nforeach($a as $key => $value) {\n    echo $key, ' => ', $value, PHP_EOL;\n}\necho PHP_EOL;\n```\n\nPHP is able to iterate happily over each instance of the collection, so there's no problem there; but as soon as I call the `merge()` method which tries to iterate internally over the passed argument\n\n```\n        for value in collection {\n            this->add(value);\n        }\n```\n\nI get a fatal error from the collection\n\n```\nPHP Fatal error:  Uncaught exception 'Exception' with message 'The argument is not initialized or iterable()' in myiterators/mycollection.zep:50\n```\n\nThe stack trace isn't particularly helpful\n\n```\nStack trace:\n#0 /home/zephir/myiterators/iteratorTest.php(29): MyIterators\\MyCollection->merge(Object(MyIterators\\MyCollection))\n#1 {main}\n  thrown in myiterators/mycollection.zep on line 50\n```\n\nBut it seems that Zephir can't iterate over classes created in Zephir as iterable, even though a basic PHP script does see them as iterable.... or am I missing something fundamental?\n## \n\r\n\r\n<bountysource-plugin>\r\n\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/26649304-doc-iterator-isn-t-iterable-internally?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1080", "title": "Undefined property: Zephir\\Operators\\Comparison\\GreaterOperator::$_zvalStringOperator", "body": "Running Zephir 0.7.1b, I'm getting a notice from Zephir itself\n\n```\nPHP Notice:  Undefined property: Zephir\\Operators\\Comparison\\GreaterOperator::$_zvalStringOperator in /home/vagrant/zephir/Library/Operators/Comparison/ComparisonBaseOperator.php on line 720\n```\n\nUnsure exactly what might be triggering this. I'm using comparisons in other scripts without this appearing\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/26649068-undefined-property-zephir-operators-comparison-greateroperator-_zvalstringoperator?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33336599", "body": "It's executing the loop now, which is the good news; but executing one more iteration than it should (as though testing for `<=` rather than `<`: I added another `echo i` immediately after the `echo \"In while loop\"` of my previous example, and am getting the following output:\n\n```\nkey=[adder]\nkeyLen=[5]\ni=[0]\nIn while loop\ni=[0]\nIn while loop\ni=[1]\nIn while loop\ni=[2]\nIn while loop\ni=[3]\nIn while loop\ni=[4]\nIn while loop\ni=[5]\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33336599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33424821", "body": "I can't make any guarantees that it will work in all such comparisons, but [commit 2727dc8e54f0c5a5d503547be2e2c37c230ec813](https://github.com/phalcon/zephir/commit/2727dc8e54f0c5a5d503547be2e2c37c230ec813) seems to have resolved my problem with the `while (i < keyLen)` loop, which now executes the correct number of iteration.\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33424821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bubleg": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1061", "title": "ArrayAccess incorrect behavior", "body": "Hello there.\n\nIt seems that classes that implement SPL ArrayAccess interface do not actually act like arrays in the Zephire code (compiled PHP classes work fine). And moreover they act differently whether the class implementing this interface is a property (doesn't matter if public or private) of another class or just a local variable.\n\nAn example of what I'm talking about: https://github.com/bubleg/zephir_bug_arrayaccess\n\nI'm using Vagrant box with **debian/jessie64** with all updates and Zephir version **0.7.1b**\n\nThanks.\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/25986162-arrayaccess-incorrect-behavior?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ioncube": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1038", "title": "Possible incorrect C code for double divided by long", "body": "Hi\nI noticed that:\n\nfloat x = 123.0;\nint y = 5;\nvar z;\nlet z = x / y;\n\nproduces:\n\nz = zephir_safe_div_double_long(x,  (double) y TSRMLS_CC);\n\nCasting y do double here seems incorrect given that the function expects a long for its 2nd arg. \n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/25214465-possible-incorrect-c-code-for-double-divided-by-long?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "widuu": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1035", "title": "globals use char error", "body": "When I added a globals type of char to the wrong\n\n`config.json`\n\n```\n\"microdb_dsn\": {\n            \"type\": \"char\",\n            \"default\": \"\",\n            \"ini-entry\": {\n                \"name\": \"microdb.dsn\",\n                \"scope\": \"PHP_INI_ALL\"\n            }\n        }\n```\n\nCompiled c file \n\n```\nmicrodb_globals->microdb_dsn = ''\";\n```\n\nSo there is an error \uff01 And comfile-errors.log \n\n```\n/Users/widuu/git/microdb/ext/microdb.c:102:33: warning: empty character constant [-Winvalid-pp-token]\n        microdb_globals->microdb_dsn = ''\";\n                                       ^\n/Users/widuu/git/microdb/ext/microdb.c:102:33: error: expected expression\n/Users/widuu/git/microdb/ext/microdb.c:102:35: warning: missing terminating '\"' character [-Winvalid-pp-token]\n        microdb_globals->microdb_dsn = ''\";\n                                         ^\n2 warnings and 1 error generated.\nmake: *** [microdb.lo] Error 1\nmake: *** Waiting for unfinished jobs....\n/Users/widuu/git/microdb/ext/microdb.c:102:33: warning: empty character constant [-Winvalid-pp-token]\n        microdb_globals->microdb_dsn = ''\";\n                                       ^\n/Users/widuu/git/microdb/ext/microdb.c:102:33: error: expected expression\n/Users/widuu/git/microdb/ext/microdb.c:102:35: warning: missing terminating '\"' character [-Winvalid-pp-token]\n        microdb_globals->microdb_dsn = ''\";\n                                         ^\n2 warnings and 1 error generated.\nmake: *** [microdb.lo] Error 1\n\n```\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/24605701-globals-use-char-error?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SliceOfLife": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1004", "title": "Cannot redeclare class error on use str_len", "body": "``` zep\nvar_dump(str_len(implode(\"-\", [1, 2])));\n```\n\nIf we try to call **str_len**, compiler fails with fatal error:\n\n```\nFatal error: require_once(): Cannot redeclare class zephir\\optimizers\\functioncall\\strlenoptimizer in .../zephir/Library/FunctionCall.php on line 210\n\nCall Stack:\n    0.0007     229024   1. {main}() .../zephir/compiler.php:0\n    0.0015     295680   2. Zephir\\Bootstrap::boot() .../zephir/compiler.php:21\n    0.0039     483608   3. Zephir\\Commands\\CommandAbstract->execute() .../zephir/Library/Bootstrap.php:200\n    0.0074    1148736   4. Zephir\\Compiler->compile() .../zephir/Library/Commands/CommandAbstract.php:92\n    0.0075    1149760   5. Zephir\\Compiler->generate() .../zephir/Library/Compiler.php:925\n    0.9968   56776728   6. Zephir\\CompilerFile->compile() .../zephir/Library/Compiler.php:817\n    0.9968   56777616   7. Zephir\\CompilerFile->compileClass() .../zephir/Library/CompilerFile.php:845\n    0.9968   56777616   8. Zephir\\ClassDefinition->compile() .../zephir/Library/CompilerFile.php:203\n    1.1664   57637328   9. Zephir\\ClassMethod->compile() .../zephir/Library/ClassDefinition.php:1126\n    1.1665   57612192  10. Zephir\\StatementsBlock->compile() .../zephir/Library/ClassMethod.php:1687\n    1.1670   57631136  11. Zephir\\Statements\\IfStatement->compile() .../zephir/Library/StatementsBlock.php:185\n    1.1670   57631272  12. Zephir\\Optimizers\\EvalExpression->optimize() .../zephir/Library/Statements/IfStatement.php:45\n    1.1670   57631584  13. Zephir\\Expression->compile() .../zephir/Library/Optimizers/EvalExpression.php:96\n    1.1670   57762728  14. Zephir\\Operators\\Logical\\AndOperator->compile() .../zephir/Library/Expression.php:535\n    1.1670   57762896  15. Zephir\\Expression->compile() .../zephir/Library/Operators/Logical/AndOperator.php:47\n    1.1670   57763112  16. Zephir\\Operators\\Comparison\\ComparisonBaseOperator->compile() .../zephir/Library/Expression.php:475\n    1.1671   57763376  17. Zephir\\Expression->compile() .../zephir/Library/Operators/Comparison/ComparisonBaseOperator.php:251\n    1.1671   57894552  18. Zephir\\FunctionCall->compile() .../zephir/Library/Expression.php:389\n    1.1671   57894552  19. Zephir\\FunctionCall->_callNormal() .../zephir/Library/FunctionCall.php:600\n    1.1671   57894632  20. Zephir\\FunctionCall->optimize() .../zephir/Library/FunctionCall.php:309\n```\n\nZephir version 0.7.0b [9cfba53]\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/22069825-cannot-redeclare-class-error-on-use-str_len?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1003", "title": "Reached end of the method without returning a valid type", "body": "I have a code\n\n``` zep\n    public static function doSomething() -> int\n    {\n        var data, dataStr;\n\n        let data = [\n            \"test\": 1,\n            \"value\": 2\n        ];\n\n        if isset data[\"test\"] {\n            return 1;\n        } else {\n            let dataStr = implode(\"-\", data);\n\n            return (int)sizeof(data);\n        }\n    }\n```\n\nIt looks fine \u2014 we always return an **int** value, but compiler throws an exception:\n\n```\nZephir\\CompilerException: Reached end of the method without returning a valid type specified in the return-type hints in .../Test.zep on line 8\n```\n\nIf we put **return 0;** at the end of the function, all works great.\n\nZephir version 0.7.0b [9cfba53]\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/22068940-reached-end-of-the-method-without-returning-a-valid-type?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/668", "title": "Strange behavior of string constants", "body": "As reference to #666.\nAfter bugfix the output changes to\n\n```\n\\x55\n\\x55\n\\x55\n\\x55\n```\n\nIs it correct?\nHow I can use the HEX char notation in string?\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/6787230-strange-behavior-of-string-constants?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/653", "title": "Compiler warning on using classes with leading \"U\" in name", "body": "I have two classes:\n\n``` zep\nnamespace Project;\n\nclass UsualClass\n{\n\n}\n```\n\n``` zep\nnamespace Project;\n\nclass TestClass\n{\n\n    public static function doSomething(<UsualClass> something)\n    {\n        var_dump(something);\n    }\n\n}\n```\n\nIn compiler log I got:\n\n```\n./project/testclass.zep.h:9:38: warning: \\U used with no following hex digits; treating as '\\' followed by identifier [-Wunicode]\n        ZEND_ARG_OBJ_INFO(0, something, Project\\\\UsualClass, 0)\n                                                ^\n```\n\nIn testclass.zep.h:\n\n``` cpp\n\nextern zend_class_entry *project_testclass_ce;\n\nZEPHIR_INIT_CLASS(Project_TestClass);\n\nPHP_METHOD(Project_TestClass, doSomething);\n\nZEND_BEGIN_ARG_INFO_EX(arginfo_project_testclass_dosomething, 0, 0, 1)\n    ZEND_ARG_OBJ_INFO(0, something, Project\\\\UsualClass, 0)\nZEND_END_ARG_INFO()\n\nZEPHIR_INIT_FUNCS(project_testclass_method_entry) {\n    PHP_ME(Project_TestClass, doSomething, arginfo_project_testclass_dosomething, ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)\n  PHP_FE_END\n};\n```\n\nZephir version 0.5.9a\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/6603208-compiler-warning-on-using-classes-with-leading-u-in-name?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/651", "title": "Runtime error with leading slash in \"used\" classes", "body": "If I wrote a leading slash in **use** definition like this:\n\n``` zep\nnamespace Project;\n\nuse \\Phalcon\\Config;\n\nclass TestClass\n{\n\n    public static function doSomething()\n    {\n        var_dump(new Config());\n    }\n\n}\n```\n\non runtime I got an error:\n\n```\nFatal error: Class '\\phalcon\\config' not found in ...\n```\n\nPHP allow this syntax, but if the Zephir doesn't, it's a good reason to add a compiler warning, I think.\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/6505517-runtime-error-with-leading-slash-in-used-classes?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/650", "title": "Wrong warning on compiling ", "body": "I have a two classes:\n\n``` zep\nnamespace Project;\n\nuse Phalcon\\Config;\n\nclass TestClass\n{\n    public static function returnSomething() -> <Config>\n    {\n        var config;\n\n        let config = new Config();\n\n        return config;\n    }\n}\n```\n\n``` zep\nnamespace Project;\n\nclass TestClass2\n{\n    public function doSomething()\n    {\n        var config;\n\n        let config = TestClass::returnSomething();\n\n        var_dump(config->toArray());\n    }\n}\n```\n\nAnd on compiling I got a warning:\n\n```\nWarning: Class \"Project\\Config\" does not exist at compile time in .../TestClass2.zep on 12 [nonexistent-class]\n\n      var_dump(config->toArray());\n    ----------------------------^\n```\n\nThe class **Config** not used as definition in **TestClass2**, but compiler wants a **use** construction like\n\n``` zep\nuse Phalcon\\Config;\n```\n\nin it.\nIf I wrote just \n\n``` zep\nvar_dump(config);\n```\n\nall compiles fine.\n\nZephir version 0.5.9a\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/6504954-wrong-warning-on-compiling?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/642", "title": "Missing \"used\" classes in closures", "body": "I have a code:\n\n``` zep\nnamespace Project;\n\nuse Phalcon\\Config;\n\nclass TestClass\n{\n    public static function doSomething()\n    {\n        var config, closure;\n\n        let config = new Config();\n        let closure = function(<Config> config) { var_dump(config); };\n\n        call_user_func_array(closure, [config]);\n    }\n}\n```\n\nAnd it's does not work correctly. After run I get an error:\n\n```\nPHP Fatal error:  Class 'Project\\Config' not found in Command line code on line 1\nPHP Stack trace:\nPHP   1. {main}() Command line code:0\nPHP   2. Project\\TestClass::doSomething() Command line code:1\n\nFatal error: Class 'Project\\Config' not found in Command line code on line 1\n\nCall Stack:\n    0.0001     223912   1. {main}() Command line code:0\n    0.0002     225040   2. Project\\TestClass::doSomething() Command line code:1\n```\n\nZephir version 0.5.9a\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/6345921-missing-used-classes-in-closures?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ivyhjk": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/988", "title": "self::var problem", "body": "I have the following piece of code in PHP:\n\n``` php\nforeach ($values as $key => $value) {\n    self::${$key} = $value;\n}\n```\n\nand it works, but in Zephir, i have the following piece code:\n\n``` zephir\nvar key;\nvar value;\n\nfor key, value in values {\n    let self::{\"key\"} = value;\n}\n```\n\nand zephir compiler throws this error:\n\n```\nZephir\\ParseException: Syntax error .....\nlet self::{\"key\"} = val;\n----------^\n```\n\nand i try with these lines and the same problem:\n\n``` zephir\nlet self::{'key'} = val;\nlet self::\"key\" = val;\nlet self::'key' = val;\nlet self::\"{key}\" = val;\n```\n\nIs this a bug, or i'm doing something bad?\n\nps: sorry for my bad english :dancers:\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/20697279-self-var-problem?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dewid1985": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/968", "title": "Please add the package opensuse!", "body": "Not in the repositories, please add OpenSuse and SLES", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wapmorgan": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/950", "title": "Building on windows fails without any help", "body": "Hi. I can not compile extension on windows. All path variables configured properly.\r\n\r\nBut `zephir build` fails with:\r\n\r\n```\r\nZephir\\Exception: Cannot parse file: C:\\Users\\...\\Documents\\ZephirTranslator\\\r\n...\\...\\....zep\r\n```\r\n\r\nWhat else can I check?\r\n## \r\n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/14925413-building-on-windows-fails-without-any-help?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/660", "title": "Add support for declaring ini settings entries", "body": "Like `globals` section in **config.json** there can be section `ini-entries`:\n\n```\n  'ini-entries': {\n    'available-operators': {\n      'type': 'bool or int, or real, or string, or unempty-string'\n      'permission': 'system or perdir, or user, or all'\n    }\n  }\n```\n\n[1] http://docstore.mik.ua/orelly/weblinux2/php/ch14_12.htm\n## \n\r\n\r\n<bountysource-plugin>\r\n\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/6656193-add-support-for-declaring-ini-settings-entries?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/507", "title": "Adaptive behavior of parser checking method signature.", "body": "For now, we can not use convenient null for make argument optional.\nTest code:\n\n``` php\n    static public function test(resource stdin = null)\n```\n\nExpected result:\n_no errors_\n\nActual result:\n\n```\nZephir\\CompilerException: Default parameter type: resource in /home/wapmorgan/php-shell/shell/Subprocess.zep on line 18\n```\n\nNote: \nusing runtime-calculated value like `fopen(\"php://memory\", \"r\")` can help avoid null value, but that's unneeded.\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/4256864-adaptive-behavior-of-parser-checking-method-signature?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/504", "title": "Add support for traits.", "body": "Hey. Hey.\nTraits aren't supported yet?\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/4252959-add-support-for-traits?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "forx": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/948", "title": "Low code performance", "body": "I write little class for test performance and results are disappointing.\n\nClass code\n\n``` php\nclass Geometry {\n  public static function run(array $list, int $count) -> void {\n    int i = 0;\n    while (i < count) {\n      static::distanceStatic($list[i][0], $list[i][1], $list[i][2], $list[i][3]);\n      let i = i + 1;\n    }\n  }\n  public static function distanceStatic(float $x1, float $y1, float $x2, float $y2) -> float {\n    return sqrt(($x1 - $x2) * ($x1 - $x2) + ($y1 - $y2) * ($y1 - $y2));\n  }\n}\n```\n\ntest code\n\n``` php\n$list = [];\n$count = 10000;\n$i = 0;\nwhile ($i++ < $count) {\n  $list[] = [\n    rand(0, 100000) + 0.00001,\n    rand(0, 100000) + 0.00001,\n    rand(0, 100000) + 0.00001,\n    rand(0, 100000) + 0.00001,\n  ];\n}\n\n$time = microtime(true);\n$j = 0;\nwhile ($j++ < 100) {\n  \\Zephir\\Geometry::run($list, $count);\n}\necho (microtime(true) - $time).\"\\n\";\n\n$time = microtime(true);\n$j = 0;\nwhile ($j++ < 100) {\n  $i = -1;\n  while ($i++ < $count - 1) {\n    \\Zephir\\Geometry::distanceStatic($list[$i][0], $list[$i][1], $list[$i][2], $list[$i][3]);\n  }\n}\necho (microtime(true) - $time).\"\\n\";\n\n$time = microtime(true);\n$j = 0;\nwhile ($j++ < 100) {\n  $i = -1;\n  while ($i++ < $count - 1) {\n    Geometry::distanceStatic($list[$i][0], $list[$i][1], $list[$i][2], $list[$i][3]);\n  }\n}\necho (microtime(true) - $time).\"\\n\";\n```\n\nresults\n\n```\n1.1973118782043\n0.97038388252258\n0.92160511016846\n```\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/14278512-low-code-performance?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "valVk": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/941", "title": "Static variables in local scope", "body": "``` php\n\nclass Test\n{\n    public static function testStaticScope()\n    {\n        static somevar;\n\n        let somevar = \"static var\";\n\n        var_dump(somevar);\n    }\n}\n\n```\n\ncauses Zephir\\ParseException: Syntax error in \n\nzephir commit 37630eead506e1113ea8c83dbc733ed4d28c5edd\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/13344430-static-variables-in-local-scope?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/906", "title": "Error control operator @. Scanner: unknown opcode 64", "body": "If I use the next code `@unlink(\"./filename.txt\");` than I get the error shown below\n\nScanner: unknown opcode 64\nZephir\\Exception: Cannot parse file: /freespace/sites/phalcon/zephir-projects/twigz/twigz/test.zep\n\nAs I understand I have to do something similar to this\n\n``` php\nclass Test {\n\n    public function testMethod()\n    {\n        var atunlink;\n\n        let atunlink = \"@unlink\";\n\n        {atunlink}(\"./filename.txt\");\n    }\n}\n\n```\n\nAm I correct?\n\nThanks.\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/11812736-error-control-operator-scanner-unknown-opcode-64?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "KorsaR-ZN": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/938", "title": "Call function \"Fatal error: Wrong number of parameters...\"", "body": "How to solve it?\r\n# Zephir\r\n\r\n```\r\nClass Helper \r\n{\r\n   public static function test(string! sp, string! b, string! c)\r\n   {\r\n        if func_num_args() > 3 {\r\n          ....\r\n        }\r\n\r\n        return b . sp . c;\r\n    }\r\n}\r\n```\r\n\r\n**Outputs**\r\n\r\n```\r\nHelper::test(\".\", \"1\", \"2\"); // OK \r\nHelper::test(\".\", \"1\", \"2\", \" \", \"30\"); // FAIL\r\n```\r\n# PHP\r\n\r\n```\r\nClass Helper \r\n{\r\n   public static function test($sp, $b, $c)\r\n   {\r\n        if (func_num_args() > 3) {\r\n          ....\r\n        }\r\n\r\n        return $b . $sp . $c;\r\n    }\r\n}\r\n```\r\n\r\n**Outputs**\r\n\r\n```\r\nHelper::test(\".\", 1, 2); // OK \r\nHelper::test(\".\", 1, 2, \" \", 30); // OK \r\n```", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/1103", "title": "[WIP] Added support syntax assign-bitwise operators", "body": "**New syntax**, see #1056 \n\n``` zephir\nlet a &= b;\nlet a |= b;\nlet a ^= b;\nlet a <<= b;\nlet a >>= b;\n```\n\n**Progress list**\n- [x] Add parsing new syntax\n- [x] Add compiling new syntax only `assign-type: variable`\n- [ ] Add compiling new syntax other `assign-type`\n- [x] Add tests only `assign-type: variable`\n- [ ] Add tests other `assign-type`\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/1100", "title": "[WIP] Added new feature support variable-length argument in functions", "body": "**New syntax**, see #938 \n\n``` zephir\npublic function test1(int a, int b, ...args) \n{\n    // expr\n}\n\npublic function test2(int a, int b, int ...args) \n{\n    // expr\n}\n\npublic function test3(int a, int b, int! ...args) \n{\n    // expr\n}\n\npublic function test4(int a, int b, <\\StdClass> ...args) \n{\n    // expr\n}\n```\n\n**Progress list**\n- [x] Add parsing new syntax\n- [ ] Add compiling new syntax\n- [ ] Add tests\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hylent": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/934", "title": "Method name same with class name should not be treated as ctor in namespace", "body": "Method name same with class name should not be treated as ctor in namespace\n\nEvironment:\n\n```\nZephir latest master 79eac35ee759e8025b02c41c2446bbd8d305d982\nCentOS 6.6 gcc 4.4.7\nPHP 5.5.22 TS DEBUG build\n```\n\nfoo/baz.zep\n\n```\nnamespace Foo;\n\nclass Baz\n{\n    public function baz()\n    {\n        echo \"I am not supposed to output when constructing object!\", PHP_EOL;\n    }\n}\n```\n\nTest:\n\n```\nphp -r 'new foo\\baz;'\n```\n\nOutputs:\n\n```\nI am not supposed to output when constructing object!\n```\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/13026711-method-name-same-with-class-name-should-not-be-treated-as-ctor-in-namespace?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/882", "title": "PHP Class with a protected ctor can be initialized in Zephir", "body": "Some class in php:\n\n``` php\n<?php\nclass SomeClass\n{\n    protected function __construct()\n    {}\n}\n?>\n```\n\nA helper class in Zephir:\n\n``` zephir\nnamespace Foo;\n\nclass HelperClass\n{\n    public static function initClass(string className)\n    {\n        return new {className}();\n    }\n}\n```\n\nThis protected ctor class `SomeClass` should not be initialized in Zephir.\n\n```\n<?php\nvar_dump(\n    Foo\\HelperClass::initClass('SomeClass')\n);\n?>\n```\n\nOutputs:\n\n```\nobject(SomeClass)#1 (0) {\n}\n```\n## \n\r\n\r\n<bountysource-plugin>\r\n\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/10680096-php-class-with-a-protected-ctor-can-be-initialized-in-zephir?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/616", "title": "Link error, INTERNED_LEN & str_efree is not defined in PHP5.3 build on Windows", "body": "When building with PHP5.3 on Windows, `INTERNED_LEN` and `str_efree` is not defined, then a link error occures.\r\n\r\n`INTERNED_LEN` & `str_efree` is in the Zend api `<Zend/zend_string.h>` which is since PHP5.4, but the Zephir kernel micros seems not quite the same as Zend api.\r\n\r\nSee:\r\n- https://github.com/phalcon/zephir/blob/master/ext/kernel/main.h#L341\r\n- https://github.com/phalcon/zephir/blob/master/ext/kernel/string.h#L116\r\n- https://github.com/php/php-src/blob/PHP-5.4.34/Zend/zend_string.h\r\n## \r\n\r\n\r\n<bountysource-plugin>\r\n\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/5773600-link-error-interned_len-str_efree-is-not-defined-in-php5-3-build-on-windows?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/19850321", "body": "`types_count` is the last parameter before `...`, not `types_length`\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/19850321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/19850365", "body": "`types_count` is the last parameter before `...`, not `types_length`\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/19850365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/19850443", "body": "`types_count` is the last parameter before `...`, not `types_length`.\nBesides, there is a `va_start(ap, types_count);` statement in the following code.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/19850443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ufocoder": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/924", "title": "Declaration must be compatible", "body": "I have two files in project:\n\n```\nnamespace Project;\n\ninterface MyInterface {\n     public function setMyArray(array myArray);\n     public function getMyArray() -> array;\n}\n```\n\nAnd class that is implementation of this interface\n\n```\nnamespace Project;\n\ninterface MyInterface {\n    public myArray = [] {\n        get, set\n    }\n}\n```\n\nBut after **build** command i get\n\n```\nPHP Fatal error:  Declaration of ..  must be compatible with  ..\n```\n\nBut if _array_ type change to _var_ type fatal error will be away: \n\n```\nnamespace Project;\n\ninterface MyInterface {\n     public function setMyArray(var myArray);\n     public function getMyArray() -> array;\n}\n```\n\nAnd class that is implementation of this interface\n\n```\nnamespace Project;\n\ninterface MyInterface {\n    public myArray = [] {\n        get, set\n    }\n}\n```\n\nWhy it is happened? Is it error? How to set array type for my class property? \n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/12345170-declaration-must-be-compatible?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Stormwing": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/916", "title": "Cannot Call Static Methods of External Classes [$10]", "body": "Hello,\n\nZephir allows us to create objects that are not currently defined in the project like so:\n\n``` zephir\nlet someObject = new \\Class_From_Elsewhere();\n```\n\nHowever we cannot call static methods as might be expected:\n\n``` zephir\nlet someResult = \\Class_From_Elsewhere::someMethod(\"foo\");\n```\n\nI'm currently using this as a workaround:\n\n``` zephir\nlet someResult = call_user_func_array(\n   [\"\\Class_From_Elsewhere\", \"someMethod\"], [\"foo\"]);\n```\n\nThank you, Zephir people!\n\nUsing Zephir at commit 416c98943db845112825eebafa5ad13acda4ce26 (Wed Apr 22).\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nThere is a **[$10 open bounty](https://www.bountysource.com/issues/11993423-cannot-call-static-methods-of-external-classes?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** on this issue. Add to the bounty at [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "artknyazev": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/914", "title": "Bugs with constructors", "body": "php.net/manual says:\r\n\r\n> For backwards compatibility, if PHP 5 cannot find a __construct() function for a given class, and the\r\n> class did not inherit one from a parent class, it will search for the old-style constructor function, by the \r\n> name of the class. \r\n\r\nThere are 2 problems in Zephir I found when I worked with classes which haven't method defined as \"__construct()\", but have method \"className()\" (for example: mysqli extension - try `ReflectionClass::export('mysqli');`):\r\n\r\n``` php\r\nnamespace Test;\r\n\r\nclass TestClass extends \\mysqli {\r\n\r\n    public function __construct(){\r\n        parent::__construct();\r\n    }\r\n}\r\n```\r\n\r\nZephir compilator fails with exception:\r\n\r\n```\r\nZephir\\CompilerException: Class '\\mysqli' does not implement static method: '__construct' in /var/www/test/test/testclass.zep on line 6\r\n\r\n            parent::__construct();\r\n    -----------------------------^\r\n```\r\n\r\nIt can be fixed in https://github.com/phalcon/zephir/blob/master/Library/ClassDefinition.php#L607  (getMethod() must returns `$this->methods[$this->name]` (if it's set)  when __constructor not found).\r\n\r\nAlso, when I try call this\r\n\r\n``` php\r\nnamespace Test;\r\n\r\nclass TestClass {\r\n\r\n    public function getDb(){\r\n        return new \\mysqli();\r\n    }\r\n}\r\n```\r\n\r\nin  \r\n\r\n``` php\r\n<?php (new \\Test\\TestClass())->getDb(); ?>\r\n```\r\n\r\nscript fails on:\r\n\r\n> Fatal error: Uncaught exception 'RuntimeException' with message 'Call to undefined method mysqli::__construct()' in ...\r\n## \r\n\r\n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/11964298-bugs-with-constructors?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wskdf": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/888", "title": "Closure issue [$25]", "body": "Zephir\\ParseException: Syntax error in *******.zep on line 10\r\n\r\n```\r\n  let result = array_filter(array_keys(all_list), function(item) use (only_list) {\r\n-------------------------------------------------------------------^\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/887", "title": "Prevent property type changed", "body": "My zephir code\n\n```\nnamespace Coba;\n\nclass Registry\n{\n    public data;\n\n    public function __construct()\n    {\n        let this->data = [];\n    }\n\n    public function add(key, value)\n    {\n        let this->data[key] = value;\n    }\n\n    public function fetch_array()\n    {\n        return this->data;\n    }\n\n    public function fetch_object()\n    {\n        return (object) this->data;\n    }\n}\n```\n\nUse in php script\n\n``` PHP\n$rx = new Coba\\Registry();\n$rx->add(\"nama\", \"Tumbihe\");\n\nvar_dump($rx->data); // Result Array\necho \"<br>\";\nprint_r($rx->fetch_array()); // Result Array\necho \"<br>\";\nprint_r($rx->fetch_object()); // Result stdClass Object\necho \"<br>\";\nprint_r($rx->fetch_array()); // PROBLEM: Result stdClass Object\necho \"<br>\";\nvar_dump($rx->data); // PROBLEM: Result object(stdClass)\n```\n\nWhen I write registry class as PHP code, everything is fine,,,,\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/10990714-prevent-property-type-changed?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/764", "title": "Invalid callback, cannot access private method", "body": "```\n//main.zep\nnamespace Coba;\n\nclass Main\n{\n    public function init()\n    {\n        echo \"INIT<br>\";\n        this->test();\n    }\n\n    private function test()\n    {\n        echo \"TEST<b>\";\n    }\n}\n\n```\n\nCall from php script\n\n```\nclass Nasi extends \\Coba\\Main\n{\n    function makan()\n    {\n        $this->init();\n    }\n}\n\n$x = new Nasi();\n$x->makan();\n```\n\nPHP Warning:  Invalid callback Nasi::test, cannot access private method Nasi::test() in ........\nPHP Fatal error:  Uncaught exception 'RuntimeException' with message 'Call to undefined method Nasi::test(), did you mean 'test'?' in.............\n\nRewrite main class as php script, everything is fine,,,\n\nWhat's wrong??\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/8647017-invalid-callback-cannot-access-private-method?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/672", "title": "Token Support", "body": "Can I use token with zephir?\n\n```\n#ifdef TOKEN_NAME\n\n#endif\n```\n\nSo not all code generate to C.\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/6828123-token-support?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/649", "title": "Extension Globals always readOnly?", "body": "```\r\n\"globals\": {\r\n        \"test\": {\r\n            \"type\": \"int\",\r\n            \"default\": 10\r\n        }\r\n}\r\n```\r\n\r\n```\r\nvar makan;\r\nlet makan = globals_get(\"test\"); <-- Result 10\r\n\r\nglobals_set(\"test\", 69);\r\n\r\nlet makan = globals_get(\"test\"); <-- Result 10\r\n```\r\n\r\nWhy not result 69 ??", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Green-Cat": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/851", "title": "Copied array value changes after array key is unset.", "body": "I have a simple IteratorAggregate implementation, which has some array management functions. One of them removes the array item and returns it's value to the user.\n\nHere is my zephir method:\n\n``` php\npublic function remove(key)\n{\n    if (!isset(this->elements[key])) {\n        throw new \\InvalidArgumentException(sprintf(\"The map has no key named \\\"%s\\\".\", key));\n    }\n\n    var element;\n    let element = this->elements[key];\n\n    unset(this->elements[key]);\n\n    return element;\n}\n```\n\nThen running it from php:\n\n``` php\n$map = myMap();\n$map->set('foo', 'bar');\necho $map->remove('foo');\n```\n\nI expect to get back \"bar\" but I get \"Binary String: 0x310000\". \nThe issue goes away if I do not unset the array key. Does zephir internally use a reference rather than copying the value?\n## \n\r\n\r\n<bountysource-plugin>\r\n\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/10194333-copied-array-value-changes-after-array-key-is-unset?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tmihalik": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/841", "title": "[BUG] Undefined variable", "body": "https://github.com/phalcon/zephir/blob/master/Library/Detectors/WriteDetector.php#L67\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ovr": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/837", "title": "Type for class properties", "body": "I suggest to add types for class properties\n\nIt gains:\n- `@param` docblocks for getter/setters\n- Type control for parameter in set method\n- Static analysis\n\n``` zep\nnamespace Test;\n\n\nclass Application {\n    property <Di> di {get, set};\n\n    /**\n     * Optional?\n     */\n    property <Request> {get, set = null};\n}\n```\n\nAnd require and optional \n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/9899659-type-for-class-properties?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/822", "title": "[RFC] Instanceof for non objects", "body": "Is it okey?\n\nrefs https://github.com/phalcon/zephir/pull/821\n\nError\nhttps://github.com/phalcon/zephir/blob/master/ext/kernel/object.c#L74\nhttps://github.com/phalcon/zephir/blob/master/ext/kernel/object.c#L62\n\nNo error:\nhttps://github.com/phalcon/zephir/blob/master/ext/kernel/object.c#L84\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/9651184-rfc-instanceof-for-non-objects?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/773", "title": "Add Simple Code Sniffer for Zephir in Core", "body": "Suggest to add simple CS for `Zephir`\n- First line in the file must be empty\n- Blank line in the end of file\n- Empty line before namespace declaration and after\n\ncC @phalcon @nkt @andresgutierrez @racklin @steffengy @SneakyBobito \n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/8830464-add-simple-code-sniffer-for-zephir-in-core?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/561", "title": "Avoid tmp variables duplication", "body": "Suggestion\n\nPass tmp names\n- Use `thisPropertyTmp1` instead of `_0`\n- Try to find variable in `ConditionBase` or `Expression` 'property-access' case and setExpectedReturn to PropertyAccess Expression\n\nProof https://github.com/phalcon/zephir/pull/560\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/5044873-avoid-tmp-variables-duplication?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/478", "title": "Future plans", "body": "Hey everyone :)\n\n@andresgutierrez\n\nWhat are you future plans on Zephir project?\n\nPlease answer like\nThis month\nNext month\nThis year\n\nThank you for answer\n\nP.S\n\nAndres write you answer under your account not @phalcon, thanks\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/3600193-future-plans?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/242", "title": "[NFR] Refrence parameters in __constructor", "body": "Hi all ^_^\nI would like to implement a new function\nCommunity help me voting\n\nVariant 1:\n\n``` zep\nclass A\n{\n    property a;\n    property b;\n    property c;\n\n    public function __construct(reference var a, reference var b, reference var c);\n    /**\n     * this will be auto completed like\n     * let this->a = a;\n     * let this->b = b;\n     * let this->c = c;\n     */\n}\n```\n\nvariant 2:\n\n``` zep\nclass A\n{\n    property a;\n    property b;\n    property c;\n\n    public function __construct(reference var a, var b, reference var c) {\n        /**\n         * this will be autocompleted like\n         * let this->a = a;\n         * let this->c = c;\n         */\n        let b = b+1;\n    }\n}\n```\n\nWhat word we need to use\n1) reference\n2) ref\n3) pass\n4) prop\n5) your variant\n\nmy vote is 1\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/1431247-nfr-refrence-parameters-in-__constructor?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/1458", "title": "[Runtime] Start working on PHP 7+ support - WIP!!", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/1020", "title": "GCC PGO (Profile-guided optimization)", "body": "Hey!\n\nHow to start\n\nGenerate gcda profile:\n\n```\ncd ext\n./pgo-install\n```\n\nStart our application 1000 runs\nFor example\n\n```\n./vendor/bin/phpunit - 100 runs :D\n```\n\nNext install with `PGO`:\n\n```\ncd ext\n./pgo-use-install\n```\n- [X] Added\n- [ ] Protect gcda clean\n\nrefs @andresgutierrez \n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/1018", "title": "Compile StaticConstantAccess directly, small review", "body": "Very simple review with comments\n\nping @andresgutierrez \n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/860", "title": "841 final fix [WORKING!!!]", "body": "https://github.com/phalcon/zephir/issues/841", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/754", "title": "Added test for #753 - levenshtein - WORK!", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/717", "title": "[WIP] Support for traits - DONT MERGE!!", "body": "Start working on this\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25767705", "body": "Fix Fatal error: Call to undefined method Variable::getDynamicType() in /home/travis/build/phalcon/zephir/Library/Statements/LetStatement.php on line 1209!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25767705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31251702", "body": "Hi, What version of gcc you use? OS?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31251702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31261781", "body": "@phalcon Because it duplicates in two places and i cant create class for it in my mind and think that static function in Utils is the best place for it\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31261781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31262831", "body": "Compiler\n\n```\n -  protected function _checkAndWriteIfNeeded($content, $path)\n -  {\n -    if (file_exists($path)) {\n -      $contentMd5 = md5($content);\n -      $existingMd5 = md5_file($path);\n -      if ($contentMd5 != $existingMd5) {\n -        file_put_contents($path, $content);\n -        return true;\n -      }\n -    } else {\n -      file_put_contents($path, $content);\n -      return true;\n -    }\n -    return false;\n -  }\n```\n\n StringsManager.php\n\n```\n-  protected function _checkAndWriteIfNeeded($content, $path)\n -  {\n -    if (file_exists($path)) {\n -      $content_md5 = md5($content);\n -      $existing_md5 = md5_file($path);\n -\n -      if ($content_md5 != $existing_md5) {\n -        file_put_contents($path, $content);\n -        return true;\n -      }\n -    }\n -\n -    return false;\n -  }\n```\n\n Current in utils\n\n``` php\n +  static public function checkAndWriteIfNeeded($content, $path)\n +  {\n +    if (file_exists($path)) {\n +      $content_md5 = md5($content);\n +      $existing_md5 = md5_file($path);\n +\n +      if ($content_md5 != $existing_md5) {\n +        file_put_contents($path, $content);\n +        return true;\n +      }\n +    } else {\n +      file_put_contents($path, $content);\n +      return true;\n +    }\n +\n +    return false;\n +  }\n```\n\n In compiler in always be like before\n In String manager it would create file if it doesn`t exit i think it would be right\n In what class checkAndWriteIfNeeded is wrong?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31262831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31264651", "body": "@phalcon Sorry i was mistaken in |= doesn`t see this statement in docs)) I reset that commit and force push to my branch.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31264651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31267374", "body": "@phalcon I rebase it\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31267374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31337202", "body": "I think we need phpunit tests for library code\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31337202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31499492", "body": "I fixed bug about it Notice, cant you check now code and if it currect close the issues? \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31499492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31620695", "body": "@phalcon kk. Start work on this. push soon\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31620695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31804689", "body": "@phalcon I update this macros soon and write tests for empty\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31804689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31897546", "body": "It works\n\n``` zep\nstring b;\n\nlet b = \"fsdfsdfsdf\";\nmb_strpos(b, \"\\x00\");\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31897546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31907700", "body": "@mruz bcfea1d7b9441e77dfd71a3ef6637e651e4f1923 this version your use?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31907700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31909307", "body": "@mruz what version of gd you use?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31909307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32114933", "body": "I ll fix it. Now work on it\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32114933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32124820", "body": "@phalcon Where is **FILE** constant defined in php core?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32124820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32169036", "body": "@sjinks Thx for answer.\n@phalcon Okey i write support for expectingVariable and then it can be merged.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32169036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32172674", "body": "@sjinks I will not write code for support **FILE** and **DIR**  because now i agree with @phalcon _useless in zephir code_.\nI write code for support but i have find fail of RETURN_CCTOR macros \nMy run the code https://gist.github.com/zaets28rus/23c126e3473aaefdf96e\nI work on it but i am so newbie in c\\zend _links and dynamic pointers_ and can`t fix this\nHelp anyone\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32172674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32175174", "body": "@sjinks I also try this variant buy it doesn`t work in local machine. After run _make clean_ in ext folder - it work. Thx for help.\n@phalcon i think it now can be merged\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32175174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32249246", "body": "I added support for **METHOD**, **NAMESPACE**, **FUNCTION**, **CLASS** i think now your can close this issue? (another magic constants support i doesn`t added because i agree with @phalcon it is useless)\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32249246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32460127", "body": "Hi, thx for report. I take work on this.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32460127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32547735", "body": "rebased\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32547735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32556932", "body": "Fixed, can you test latest master version? And close the issue?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32556932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32672179", "body": "Work on this.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32672179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32673443", "body": "@phalcon i think we need more tests for requred and optional parameters because i cant test all variants in my mind. hmm..... but now it works w8 for build\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32673443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32674888", "body": "@phalcon +- 6hours i create patch for optional parameters and create tests for it\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32674888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32700155", "body": "@jaimz22 I agree with your. Thx for report.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32700155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32700246", "body": "@jaimz22 can your test my latest commit?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32700246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32703371", "body": "Can you create example for test it?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32703371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32704497", "body": "@WooDzu 85 is not recent about this. this about ifStatements '(' . $condition . ')' in code\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32704497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32727583", "body": "@jaimz22 Zephir also convert null (default value for optional parameter) for not var type to his empty like boolean to 0, string to empty because zephir is dynamic/static typing.\n@phalcon help us bro )\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32727583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32751850", "body": "Next \nCant normal parse\n\n``` zep\nreturn _SERVER[\"REQUEST_METHOD\"] == \"POST\" && empty _POST && empty _FILES && _SERVER[\"CONTENT_LENGTH\"] > 0;\n```\n\nnormal parser\n\n``` zep\nreturn _SERVER[\"REQUEST_METHOD\"] == \"POST\" && (empty(_POST)) && (empty(_FILES)) && _SERVER[\"CONTENT_LENGTH\"] > 0;\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32751850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32990382", "body": "Work on this.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32990382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33002482", "body": "@phalcon close this issue\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33002482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33004440", "body": "Work on this\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33004440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33016564", "body": "w8 for merge\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33016564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33019164", "body": "``` zep\n        public function mysql_func(var id)\n        {\n            var result, key, value;\n            mysql_connect(\"localhost\", \"root\", \"\");\n            mysql_select_db(\"cdcol\");\n            let result = mysql_query(\"SELECT * cds WHERE id=\" . id);\n\n            for key, value in mysql_fetch_assoc(result) {\n                echo key.' '.value.'\\n';\n            }\n        }\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33019164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33204153", "body": "Work on this ...\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33204153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33278041", "body": "Can your test latest master?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33278041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33279565", "body": "zaets28rus@web-server:~/projects/zephir$ gcc --version\ngcc (Ubuntu/Linaro 4.8.1-10ubuntu9) 4.8.1\nCopyright (C) 2013 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33279565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33288801", "body": "work on this\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33288801/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33317501", "body": "Work on this\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33317501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33319607", "body": "work on this....\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33319607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33368987", "body": "i test it. yes your can call func_get_args in class method.\n@phalcon add to roadmap create optimizer for func_get_args and need to add to zephir-docs\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33368987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33370023", "body": "work on this\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33370023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33373765", "body": "@phalcon now i havn`t time to implement zephir_get_arrval callend in https://github.com/phalcon/zephir/blob/master/Library/ClassMethod.php#L797 and ci passed properties test lol)\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33373765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33482381", "body": "macros i think if type is not array it would be converted to array() else copy it\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33482381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33571531", "body": "implimented can you test it?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33571531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33589984", "body": "Updated we don't copy the current namespace to class if it has a slash like\n\n``` zep\nnew \\UnitOfWork()\n```\n\nBecause now we call new class of global namespace\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33589984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33592841", "body": "Hacked const :smile_cat:\n@racklin cherry-pick commit from my branch plz \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33592841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33870074", "body": "update zephir and run ./install to recompile you parser in root dir of zephir project\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33870074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33871895", "body": "work about full support for all\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33871895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/comments/4261662", "body": "i think Undefined variable $dynamicType because u delete init row\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/4261662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/4937257", "body": "What is this? Your should use rebase not merge from branch\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/4937257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179136", "body": "fail....\n1 TSRMLS_DC you add macros to function but doesnt add to optimizer when you call it\n2 why return code back it is not more faster. why?\n3 every week the master branch don`t work\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179141", "body": "i see this in core but function array_values below this is not\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179154", "body": "if you dont love pull request you need to\nyou can fork this repo and before push to master _phalcon/zephir_ push to you repo user/zephir and activate travic ci for it and see result if it success push to master.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179219", "body": "http://gyazo.com/3795821861b43325bf03029e6419062e  okey :D\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5182177", "body": "@phalcon Don`t merge from remote origin master branch to local (not master) branch. plz read about rebase\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5182177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5212175", "body": "my miss :cry: and so big title about my fail :D\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5212175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5235572", "body": "how many exp you need to understand that push to master is wrong way before run tests?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5235572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5252395", "body": "You forgot checkout phalcon master account in git\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5252395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5270060", "body": "You forgot checkout phalcon master account in git\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5270060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5335982", "body": "after break case PSR disallow to enter new line broker\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5335982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5361402", "body": "Now we use tabs or spaces?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5361402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5361423", "body": "Now we use spaces or tabs?\nYou say that you prefer tabs but in ide it show likes spaces? If it tabs i create new standart zephir extends of PSR2 but set tabs i think it would be good idea.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5361423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5361455", "body": "okey np now i use 4 spaces\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5361455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5361490", "body": "and please  `Blank lines are not allowed between case statements; found 1` in cases\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5361490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5832712", "body": "Now resource is name for type, @phalcon can we change parser for allow it in the names of classes?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5832712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5881186", "body": "good news for you, broke master ^_^\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5881186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/6060974", "body": "@phalcon Its always would be true because else statement assign true)))))))))))))))))))\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/6060974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/6130019", "body": "I disagree about lowercase for Zephir files.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/6130019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/6139282", "body": "@phalcon In tests we use tabs but in php use spaces?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/6139282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/6832841", "body": "@brandonlamb Please create issue with code tests\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/6832841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7228862", "body": "https://github.com/phalcon/zephir/commit/7c4b012089d728f88cbbd0fbcca80474666e6a3f\nReinstall your parser\nBC release\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7228862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7228879", "body": "I noticed about this line\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7228879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7228898", "body": "Sorry but i don't know anything about parser version :(\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7228898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7228981", "body": "Merge commit\nGit <> Mercurial\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7228981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7230553", "body": "Maybe we change version and revert this commit?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7230553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7230558", "body": "Because you didn't regenerate parser, this commit doesn`t change anything when you regenerate parser\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7230558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7230568", "body": " $parameter['mandatory']  like 0 1 in you clouse\n\n``` php\n$codePrinter->output(\"\\t\" . 'ZEND_ARG_ARRAY_INFO(0, ' . $parameter['name'] . ', ' . $parameter['mandatory'] . \n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7230568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7230587", "body": "if statement*\nOkey, but what does it mean mandatory?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7230587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7689627", "body": "<img src=\"http://i.gyazo.com/d265b0402a9cb869036cbd4dfa04e530.png\">\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7689627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7689637", "body": "You can create pull request\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7689637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7689647", "body": "@nkt Bom Bom. Chat more!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7689647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7689650", "body": "@nkt Do you suggest to merge merged code?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7689650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7689717", "body": "@nkt druggy?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7689717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7979437", "body": "```\n/home/ovr/projects/lynx-projects/lynx/ext/lynx/annotation/reflectionclassparser.zep.c:16:43: fatal error: ext/reflection/php_reflection.h: \u041d\u0435\u0442 \u0442\u0430\u043a\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u0438\u043b\u0438 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430\n #include \"ext/reflection/php_reflection.h\"\n                                           ^\ncompilation terminated.\nmake: *** [lynx/annotation/reflectionclassparser.lo] \u041e\u0448\u0438\u0431\u043a\u0430 1\nmake: *** \u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u0439...\n/home/ovr/projects/lynx-projects/lynx/ext/lynx/annotation/reflectionclassparser.zep.c:16:43: fatal error: ext/reflection/php_reflection.h: \u041d\u0435\u0442 \u0442\u0430\u043a\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u0438\u043b\u0438 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430\n #include \"ext/reflection/php_reflection.h\"\n                                           ^\ncompilation terminated.\nmake: *** [lynx/annotation/reflectionclassparser.lo] \u041e\u0448\u0438\u0431\u043a\u0430 1\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7979437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7979495", "body": "@dreamsxin +1\n\n```\novr@ovr-desktop:~/projects/lynx-projects/lynx$ php-config\nUsage: /home/ovr/.phpbrew/php/php-5.6.0/bin/php-config [OPTION]\nOptions:\n  --prefix            [/home/ovr/.phpbrew/php/php-5.6.0]\n  --includes          [-I/home/ovr/.phpbrew/php/php-5.6.0/include/php -I/home/ovr/.phpbrew/php/php-5.6.0/include/php/main -I/home/ovr/.phpbrew/php/php-5.6.0/include/php/TSRM -I/home/ovr/.phpbrew/php/php-5.6.0/include/php/Zend -I/home/ovr/.phpbrew/php/php-5.6.0/include/php/ext -I/home/ovr/.phpbrew/php/php-5.6.0/include/php/ext/date/lib]\n  --ldflags           []\n  --libs              [-lcrypt   -lcrypto -lssl -lcrypto -lexslt -lresolv -lcrypt -lcurl -lz -lcrypto -lssl -lcrypto -lrt -lm -ldl -lnsl  -lxml2 -lcurl -lxml2 -lxml2 -lcrypt -lxml2 -lxml2 -lxml2 -lxslt -lxml2 -lcrypt ]\n  --extension-dir     [/home/ovr/.phpbrew/php/php-5.6.0/lib/php/extensions/no-debug-non-zts-20131226]\n  --include-dir       [/home/ovr/.phpbrew/php/php-5.6.0/include/php]\n  --man-dir           [/home/ovr/.phpbrew/php/php-5.6.0/php/man]\n  --php-binary        [/home/ovr/.phpbrew/php/php-5.6.0/bin/php]\n  --php-sapis         [ cli fpm cgi]\n  --configure-options [--prefix=/home/ovr/.phpbrew/php/php-5.6.0 --with-config-file-path=/home/ovr/.phpbrew/php/php-5.6.0/etc --with-config-file-scan-dir=/home/ovr/.phpbrew/php/php-5.6.0/var/db --with-pear=/home/ovr/.phpbrew/php/php-5.6.0/lib/php --disable-all --enable-phar --enable-session --enable-short-tags --enable-tokenizer --with-pcre-regex --with-zlib=/usr --with-libdir=lib/x86_64-linux-gnu --enable-pdo --with-iconv --enable-fpm --enable-dom --enable-libxml --enable-simplexml --enable-xml --enable-xmlreader --enable-xmlwriter --with-xsl --with-libxml-dir=/usr --enable-ctype --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --enable-hash --with-curl=/usr --with-openssl=/usr --enable-filter]\n  --version           [5.6.0]\n  --vernum            [50600]\n```\n\n```\novr@ovr-desktop:~/projects/lynx-projects/lynx$ ls /home/ovr/.phpbrew/php/php-5.6.0/include/php/ext/\ndate  dom  ereg  filter  hash  iconv  imagick  json  libxml  mysqli  mysqlnd  pcre  pdo  phar  session  simplexml  spl  standard  xml\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7979495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7979523", "body": "So I fix it by\n\n```\novr@ovr-desktop:~/projects/lynx-projects/lynx$ cp /home/ovr/.phpbrew/build/php-5.6.0/ext/reflection/ /home/ovr/.phpbrew/php/php-5.6.0/include/php/ext/reflection/ -R\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7979523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/8210615", "body": "``` bash\novr@ovr-desktop:~/projects/lynx-projects/lynx$ gdb --args php ~/.composer/vendor/bin/phpunit \nGNU gdb (Ubuntu 7.8-1ubuntu4) 7.8.0.20141001-cvs\nCopyright (C) 2014 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n<http://www.gnu.org/software/gdb/bugs/>.\nFind the GDB manual and other documentation resources online at:\n<http://www.gnu.org/software/gdb/documentation/>.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from php...done.\n(gdb) run\nStarting program: /home/ovr/.phpbrew/php/php-5.6.0/bin/php /home/ovr/.composer/vendor/bin/phpunit\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\nPHPUnit 4.3.0 by Sebastian Bergmann.\n\nConfiguration read from /home/ovr/projects/lynx-projects/lynx/phpunit.xml\n\n.....\nProgram received signal SIGSEGV, Segmentation fault.\n0x000000000094fbc8 in zend_mm_check_ptr (heap=0x129ec30, ptr=0x7fffffff9e98, silent=1, __zend_filename=0x7ffff0452068 \"/home/ovr/projects/lynx-projects/lynx/ext/kernel/memory.c\", __zend_lineno=162, __zend_orig_filename=0x0, __zend_orig_lineno=0) at /home/ovr/.phpbrew/build/php-5.6.0/Zend/zend_alloc.c:1384\n1384        if (p->info._size != ZEND_MM_NEXT_BLOCK(p)->info._prev) {\n(gdb) bt full\n#0  0x000000000094fbc8 in zend_mm_check_ptr (heap=0x129ec30, ptr=0x7fffffff9e98, silent=1, __zend_filename=0x7ffff0452068 \"/home/ovr/projects/lynx-projects/lynx/ext/kernel/memory.c\", __zend_lineno=162, __zend_orig_filename=0x0, __zend_orig_lineno=0) at /home/ovr/.phpbrew/build/php-5.6.0/Zend/zend_alloc.c:1384\n        p = 0x7fffffff9e48\n        no_cache_notice = 0\n        had_problems = 0\n        valid_beginning = 1\n#1  0x000000000095172d in _zend_mm_free_int (heap=0x129ec30, p=0x7fffffff9e98, __zend_filename=0x7ffff0452068 \"/home/ovr/projects/lynx-projects/lynx/ext/kernel/memory.c\", __zend_lineno=162, __zend_orig_filename=0x0, __zend_orig_lineno=0) at /home/ovr/.phpbrew/build/php-5.6.0/Zend/zend_alloc.c:2068\n        mm_block = 0x9cca4a <execute_ex>\n        next_block = 0x7fffffff9e98\n        size = 140737488330304\n#2  0x0000000000952cdf in _efree (ptr=0x7fffffff9e98, __zend_filename=0x7ffff0452068 \"/home/ovr/projects/lynx-projects/lynx/ext/kernel/memory.c\", __zend_lineno=162, __zend_orig_filename=0x0, __zend_orig_lineno=0) at /home/ovr/.phpbrew/build/php-5.6.0/Zend/zend_alloc.c:2440\nNo locals.\n#3  0x00007ffff044b856 in zephir_memory_restore_stack_common () from /home/ovr/.phpbrew/php/php-5.6.0/lib/php/extensions/debug-non-zts-20131226/lynx.so\nNo symbol table info available.\n#4  0x00007ffff044b9be in zephir_memory_restore_stack () from /home/ovr/.phpbrew/php/php-5.6.0/lib/php/extensions/debug-non-zts-20131226/lynx.so\nNo symbol table info available.\n#5  0x00007ffff0426a6b in zim_Lynx_DBAL_Connection_prepare () from /home/ovr/.phpbrew/php/php-5.6.0/lib/php/extensions/debug-non-zts-20131226/lynx.so\nNo symbol table info available.\n#6  0x00000000009cd30d in zend_do_fcall_common_helper_SPEC (execute_data=0x7ffff7f8ae38) at /home/ovr/.phpbrew/build/php-5.6.0/Zend/zend_vm_execute.h:558\n        ret = 0x7ffff7f8ad98\n        opline = 0x7fffe48b5330\n        should_change_scope = 1 '\\001'\n        fbc = 0x14bc300\n        num_args = 1\n#7  0x00000000009cda25 in ZEND_DO_FCALL_BY_NAME_SPEC_HANDLER (execute_data=0x7ffff7f8ae38) at /home/ovr/.phpbrew/build/php-5.6.0/Zend/zend_vm_execute.h:693\nNo locals.\n#8  0x00000000009cca95 in execute_ex (execute_data=0x7ffff7f8ae38) at /home/ovr/.phpbrew/build/php-5.6.0/Zend/zend_vm_execute.h:363\n        ret = 0\n        original_in_execution = 1 '\\001'\n#9  0x00000000009ccb06 in zend_execute (op_array=0x7fffe4966a80) at /home/ovr/.phpbrew/build/php-5.6.0/Zend/zend_vm_execute.h:388\nNo locals.\n#10 0x000000000097475e in zend_call_function (fci=0x7fffffffa1d0, fci_cache=0x7fffffffa1a0) at /home/ovr/.phpbrew/build/php-5.6.0/Zend/zend_execute_API.c:832\n        i = 0\n        original_return_value = 0x7ffff7f899e8\n        calling_symbol_table = 0x0\n        original_op_array = 0x7fffe48a5ac8\n        original_opline_ptr = 0x7ffff7f8ac20\n        current_scope = 0x0\n        current_called_scope = 0x13beca0\n        calling_scope = 0x7fffe4892ce8\n        called_scope = 0x7fffe4892ce8\n        current_this = 0x17cdec0\n        execute_data = {opline = 0x0, function_state = {function = 0x7fffe4966a80, arguments = 0x7ffff7f8ad70}, op_array = 0x0, object = 0x7fffe47fb068, symbol_table = 0x0, prev_execute_data = 0x7ffff7f8ac20, old_error_reporting = 0x0, nested = 1 '\\001', original_return_value = 0x7fffe48371f0, current_scope = 0x7fffe4a3fdb0, \n          current_called_scope = 0x7fffe4892ce8, current_this = 0x7fffe47fb068, fast_ret = 0x0, delayed_exception = 0x0, call_slots = 0x7ffff7f8ad18, call = 0x7ffff7f8ad18}\n---Type <return> to continue, or q <return> to quit---\n        fci_cache_local = {initialized = 232 '\\350', function_handler = 0x13ca450, calling_scope = 0x7fffffffa0b0, called_scope = 0x983af8 <instanceof_function_ex+69>, object_ptr = 0xfd1398}\n#11 0x000000000074d123 in zim_reflection_method_invokeArgs (ht=2, return_value=0x17ce168, return_value_ptr=0x7ffff7f8a928, this_ptr=0x17cdec0, return_value_used=1) at /home/ovr/.phpbrew/build/php-5.6.0/ext/reflection/php_reflection.c:3042\n        retval_ptr = 0x0\n        params = 0x17c3620\n        object = 0x7fffe47fb068\n        intern = 0x17cf7e8\n        mptr = 0x7fffe4966a80\n        argc = 0\n        result = 0\n        fci = {size = 72, function_table = 0x0, function_name = 0x0, symbol_table = 0x0, retval_ptr_ptr = 0x7fffffffa168, param_count = 0, params = 0x17c3620, object_ptr = 0x7fffe47fb068, no_separation = 1 '\\001'}\n        fcc = {initialized = 1 '\\001', function_handler = 0x7fffe4966a80, calling_scope = 0x7fffe4892ce8, called_scope = 0x7fffe4892ce8, object_ptr = 0x7fffe47fb068}\n        obj_ce = 0x7fffe4892ce8\n        param_array = 0x17cdaa0\n#12 0x00000000009cd30d in zend_do_fcall_common_helper_SPEC (execute_data=0x7ffff7f8ac20) at /home/ovr/.phpbrew/build/php-5.6.0/Zend/zend_vm_execute.h:558\n        ret = 0x7ffff7f8a920\n        opline = 0x7fffe4a64108\n        should_change_scope = 1 '\\001'\n        fbc = 0x1468980\n        num_args = 2\n#13 0x00000000009cda25 in ZEND_DO_FCALL_BY_NAME_SPEC_HANDLER (execute_data=0x7ffff7f8ac20) at /home/ovr/.phpbrew/build/php-5.6.0/Zend/zend_vm_execute.h:693\nNo locals.\n#14 0x00000000009cca95 in execute_ex (execute_data=0x7ffff7f8ac20) at /home/ovr/.phpbrew/build/php-5.6.0/Zend/zend_vm_execute.h:363\n        ret = 0\n        original_in_execution = 0 '\\000'\n#15 0x00000000009ccb06 in zend_execute (op_array=0x7ffff7fbad08) at /home/ovr/.phpbrew/build/php-5.6.0/Zend/zend_vm_execute.h:388\nNo locals.\n#16 0x0000000000989298 in zend_execute_scripts (type=8, retval=0x0, file_count=3) at /home/ovr/.phpbrew/build/php-5.6.0/Zend/zend.c:1330\n        files = {{gp_offset = 40, fp_offset = 48, overflow_arg_area = 0x7fffffffa470, reg_save_area = 0x7fffffffa3b0}}\n        i = 1\n        file_handle = 0x7fffffffc810\n        orig_op_array = 0x0\n        orig_retval_ptr_ptr = 0x0\n        orig_interactive = 0\n#17 0x00000000008fa120 in php_execute_script (primary_file=0x7fffffffc810) at /home/ovr/.phpbrew/build/php-5.6.0/main/main.c:2584\n        realfile = \"/home/ovr/.composer/vendor/phpunit/phpunit/phpunit\", '\\000' <repeats 70 times>, \"\\020\\234\\003\", '\\000' <repeats 13 times>, \"\\021\\000\\000\\000\\000\\000\\000\\000\\220\\267\\377\\377\\377\\177\\000\\000\\217\\344\\224\\000\\000\\000\\000\\000\\260\\063\\370\\367\\377\\177\\000\\000\\060\\354)\\001\\000\\000\\000\\000P\\363)\\001\\000\\000\\000\\000\\234>\\336\\367\\377\\177\\000\\000\\020\\234\\003\\000\\000\\000\\000\\000\"...\n        __orig_bailout = 0x7fffffffc920\n        __bailout = {{__jmpbuf = {0, 6851053687487515949, 4389792, 140737488346176, 0, 0, 6851053684308233517, -6851052660081898195}, __mask_was_saved = 0, __saved_mask = {__val = {19524856, 253552, 140737353609545, 140737488336480, 9776351, 0, 8555574853632, 16603784, 140737353609544, 140737488340656, 10210677, 140737488341488, \n                19524032, 0, 214748364800, 140737353609544}}}}\n        prepend_file_p = 0x0\n        append_file_p = 0x0\n        prepend_file = {type = ZEND_HANDLE_FILENAME, filename = 0x0, opened_path = 0x0, handle = {fd = 0, fp = 0x0, stream = {handle = 0x0, isatty = 0, mmap = {len = 0, pos = 0, map = 0x0, buf = 0x0, old_handle = 0x0, old_closer = 0x0}, reader = 0x0, fsizer = 0x0, closer = 0x0}}, free_filename = 0 '\\000'}\n        append_file = {type = ZEND_HANDLE_FILENAME, filename = 0x0, opened_path = 0x0, handle = {fd = 0, fp = 0x0, stream = {handle = 0x0, isatty = 0, mmap = {len = 0, pos = 0, map = 0x0, buf = 0x0, old_handle = 0x0, old_closer = 0x0}, reader = 0x0, fsizer = 0x0, closer = 0x0}}, free_filename = 0 '\\000'}\n---Type <return> to continue, or q <return> to quit---\n        old_cwd = 0x7fffffffa470 \"\"\n        use_heap = 0 '\\000'\n        retval = 0\n#18 0x0000000000a3ccd7 in do_cli (argc=2, argv=0x129e960) at /home/ovr/.phpbrew/build/php-5.6.0/sapi/cli/php_cli.c:994\n        __orig_bailout = 0x7fffffffda90\n        __bailout = {{__jmpbuf = {0, 6851053688406068525, 4389792, 140737488346176, 0, 0, 6851053687477030189, -6851052830389646035}, __mask_was_saved = 0, __saved_mask = {__val = {140737488343920, 77309411346, 0, 12884901891, 0, 0, 0, 140737488340736, 9756606, 8, 0, 0, 0, 140737488346112, 0, 0}}}}\n        c = -1\n        file_handle = {type = ZEND_HANDLE_MAPPED, filename = 0x129e9c0 \"/home/ovr/.composer/vendor/bin/phpunit\", opened_path = 0x0, handle = {fd = -134500736, fp = 0x7ffff7fbae80, stream = {handle = 0x7ffff7fbae80, isatty = 0, mmap = {len = 2240, pos = 0, map = 0x7ffff7ff2000, buf = 0x7ffff7ff2013 \"-\\224\\064n-\\224\\064\", \n                old_handle = 0x171cfb0, old_closer = 0x9a8434 <zend_stream_stdio_closer>}, reader = 0x9a8405 <zend_stream_stdio_reader>, fsizer = 0x9a8462 <zend_stream_stdio_fsizer>, closer = 0x9a859a <zend_stream_mmap_closer>}}, free_filename = 0 '\\000'}\n        behavior = 1\n        reflection_what = 0x0\n        request_started = 1\n        exit_status = 0\n        php_optarg = 0x0\n        orig_optarg = 0x0\n        php_optind = 2\n        orig_optind = 1\n        exec_direct = 0x0\n        exec_run = 0x0\n        exec_begin = 0x0\n        exec_end = 0x0\n        arg_free = 0x129e9c0 \"/home/ovr/.composer/vendor/bin/phpunit\"\n        arg_excp = 0x129e968\n        script_file = 0x129e9c0 \"/home/ovr/.composer/vendor/bin/phpunit\"\n        translated_path = 0x171d630 \"/home/ovr/.composer/vendor/phpunit/phpunit/phpunit\"\n        interactive = 0\n        lineno = 2\n        param_error = 0x0\n        hide_argv = 0\n#19 0x0000000000a3dea8 in main (argc=2, argv=0x129e960) at /home/ovr/.phpbrew/build/php-5.6.0/sapi/cli/php_cli.c:1378\n        __orig_bailout = 0x0\n        __bailout = {{__jmpbuf = {0, 6851053688370416941, 4389792, 140737488346176, 0, 0, 6851053688412359981, -6851052829710037715}, __mask_was_saved = 0, __saved_mask = {__val = {140737488345840, 4131212846, 4296973, 4294967295, 140737351947607, 140737314509224, 140737353947608, 140737353947576, 140737314490024, 1, 10789117, \n                140737488346184, 0, 10789040, 4389792, 140737488346176}}}}\n        c = -1\n        exit_status = 0\n        module_started = 1\n        sapi_started = 1\n        php_optarg = 0x0\n        php_optind = 1\n        use_extended_info = 0\n        ini_path_override = 0x0\n        ini_entries = 0x129eb90 \"html_errors=0\\nregister_argc_argv=1\\nimplicit_flush=1\\noutput_buffering=0\\nmax_execution_time=0\\nmax_input_time=-1\\n\"\n        ini_entries_len = 110\n---Type <return> to continue, or q <return> to quit---\n        ini_ignore = 0\n        sapi_module = 0x127b3c0 <cli_sapi_module>\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/8210615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/8210672", "body": "Can you fix this critical error?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/8210672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/8211350", "body": "@nkt \nYou suggest to rebase commits with force mod to push version?\n\nthis commmit https://github.com/phalcon/zephir/commit/bd579fd69b0b4d57afbcc97bebc114b9d1995fbf#commitcomment-8210970\n\n```\nandresgutierrez authored 10 hours ago\n```\n\nmy release\n\n```\novr created tag 0.5.3 at phalcon/zephir  5 hours ago\n```\n\nhttps://github.com/phalcon/zephir/commit/2a067f4ef0ffd4b93046f7384ff7b8d9014f3ac0\n\n```\n phalcon authored 8 hours ago\n```\n\nThink more\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/8211350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/8211366", "body": "![](http://cs608728.vk.me/v608728405/20c4/bPGZcvGk6u0.jpg)\n@nkt \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/8211366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/8532126", "body": "mm?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/8532126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/9239550", "body": "Please create issue with code to reproduce\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/9239550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/9339238", "body": "Compiler think that It's a variable, not an array\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/9339238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/10527145", "body": ":)\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/10527145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/10556979", "body": "?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/10556979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/11260811", "body": "@andresgutierrez \nNULL ping\n\n/home/ovr/projects/owl/owl/ext/owl/event/manager.zep.c:95:5: error: invalid use of void expression\n     ZEPHIR_CALL_ZVAL_FUNCTION(NULL, callback, NULL, 0, _4);\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/11260811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/11261284", "body": "Mmm, but what is the different between true and false branch on your code?\n\n```\nZEPHIR_LAST_CALL_STATUS = zephir_call_zval_func_aparams(return_value_ptr, func_name, cache, cache_slot, ZEPHIR_CALL_NUM_PARAMS(params_), ZEPHIR_PASS_CALL_PARAMS(params_) TSRMLS_CC); \\\n\nZEPHIR_LAST_CALL_STATUS = zephir_call_zval_func_aparams(return_value_ptr, func_name, cache, cache_slot, ZEPHIR_CALL_NUM_PARAMS(params_), ZEPHIR_PASS_CALL_PARAMS(params_) TSRMLS_CC); \\\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/11261284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/11261312", "body": "@andresgutierrez \nTo avoid error, taken from your prev code\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/11261312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/11893883", "body": "Stop doing it, PHPCS is not allowed it\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/11893883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/11893930", "body": "You need +1 commit to fix PSR2, just do it\nhttps://travis-ci.org/phalcon/zephir/jobs/68567042#L2285\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/11893930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/11894001", "body": "@andresgutierrez \nSee I reviewed it again to protect bugs with comments\nhttps://github.com/phalcon/zephir/pull/1018\nBut you was not interested or didn't see it\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/11894001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/11894004", "body": "If our scheme with dependencies classes are working correctly\nI can't explain why it's needed\nCan you show an example?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/11894004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/11894518", "body": "@andresgutierrez \ngcda profile will be cleaned by Makefile::clean\nWhat is the best way to protect it?\n\n1 Added new action\nclean-without-gcda\n\n2 Mv \n\n```\nmv test.gcda test.not-gcda\nnext clean\nmv test.not-gcda test.gcda \n```\n\n3 Very bad\nRemove make clean in this code\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/11894518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9701593", "body": "i doesn`t think so i use this class only in stub method not all for class\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9701593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9701784", "body": "php is not c\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9701784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9702444", "body": "w8 @phalcon comment\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9702444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9970896", "body": "There is no difference, copy pasted from micro bench.php in Zend folder of php-src\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9970896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9970916", "body": "1 no matter\n2 not needed.\n3 algorithm without loop would be faster!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9970916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/11551936", "body": "@nkt this is not a bug. I wrote it specifically\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/11551936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/12473977", "body": "\u0442\u043e\u0433\u0434\u0430 \u0441\u0432\u0438\u0442\u0447 \u043a\u0435\u0439\u0441 \u043f\u0440\u043e\u0439\u0434\u0435\u0442 \u0438 \u043f\u043e\u0439\u0434\u0435\u0442 \u0434\u0430\u043b\u044c\u0448\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/12473977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/12501411", "body": "np\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/12501411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/13077347", "body": "You said \"delete stubs it is not needed in repo\" :)))\n\n``` zep\n    /**\n     * Bla bla my method\n     */\n     public function method() {}\n```\n\nand see output without patch\n\n``` zep\n/**\n  * * Bla bla my method\n */\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/13077347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/15861885", "body": "Will move this hardcode to config.json\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/15861885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/15861866", "body": "https://github.com/phalcon/zephir/issues/475\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/15861866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/17148271", "body": "?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/17148271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/23502375", "body": "I think nb project is not needed\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/23502375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/26366765", "body": "I see this\nFixed via file name\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/26366765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/26457113", "body": "It's needed to work with method\n`getMethodFirstParameter`\n\nhttps://travis-ci.org/phalcon/zephir/jobs/54495259#L1597\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/26457113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/26899059", "body": "Can you fix it?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/26899059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/26899065", "body": "Can you fix? I mean spaces\nWe are using tabs for C-code\nhttps://github.com/phalcon/zephir/blob/master/.editorconfig#L15\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/26899065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/37517085", "body": "@sergeyklay \nJust give me 1s\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/37517085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/53841653", "body": "@sergeyklay \n\nIt's notice that it can breaks some applications but for now it's working and most of all projects are using it\nFor example I am using inline plugin for phpstorm and atom for it\n\n![image](https://cloud.githubusercontent.com/assets/572096/13265096/2d0bfd44-da82-11e5-8cc7-8aecd20ab53b.png)\n\n![image](https://cloud.githubusercontent.com/assets/572096/13265001/cd575e48-da81-11e5-83d6-9e3ddc882a27.png)\n\nReview sf2\nhttps://github.com/symfony/symfony/search?utf8=%E2%9C%93&q=%7B%40inheritDoc%7D\n\n![image](https://cloud.githubusercontent.com/assets/572096/13265034/ee2cb91a-da81-11e5-8baf-4a9c4b635382.png)\n\nor Zf2 component\nhttps://github.com/zendframework/zend-paginator/search?utf8=%E2%9C%93&q=%7B%40inheritDoc%7D\n\n![image](https://cloud.githubusercontent.com/assets/572096/13265072/11c17118-da82-11e5-9f62-90b85dfbad6c.png)\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/53841653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/106806449", "body": "Original `zend_function_call` in PHP 7.1 are fixing `EG(current_execute_data)->This` without `fcc->object` and this thing can be \"null\", I think `fcc->object` is needed only for callable", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/106806449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109279300", "body": "Comment about for this optimizer about method\r\n\r\n> Transforms calls to method \"toHex\" to sprintf('%X') call\r\n\r\nLooks like should be changed, or removed because it's pretty simple", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109279300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109280003", "body": "@sjinks Why it was = {0} by default? Maybe you will give a cool explanation, because I am rly interested in this", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109280003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109280025", "body": "[Why I change]\r\n \r\nIn PHP 7+, `zend_hash_get_current_data_ex` accept only 2 params and return value by `position`, check should != Null (null because C lang doesnot support nullptr and NULL is (void) *0)\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109280025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109280228", "body": "[Why I change]\r\n\r\nBecause PHP7 introduce `zend_string` and `php_stream_copy_to_mem` return `zend_string`", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109280228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109280231", "body": "[Why I change]\r\n\r\n`ZSTR_LEN` is similar to `contents->len`, (len is a field of `zend_string` structure)", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109280231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109280234", "body": "@sjinks What flag should I use? `PHP_STREAM_COPY_ALL` is it okey?\r\nThanks", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109280234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109281030", "body": "ping @sjinks, can you help me\r\nShould I change `zend_uint` to `uint`, or it's wrong?\r\nThanks", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/109281030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jimthunderbird": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/760", "title": "Loop through string just like array", "body": "Seems like if I split a string to an array and iterate through it by increment the index, it will work.\n\n``` php\nvar strLength, strArr, i;\nlet strLength =  strlen(str);\nlet strArr =  str_split(str);\nlet i = 0;\nwhile (i < strLength) {\n   echo strArr[i] . \"\n\";\n   let i++;\n}\n```\n\nBut if I just change strArr to str, it will not work. Will zephir provide support to this soon?\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/8587803-loop-through-string-just-like-array?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mindplay-dk": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/716", "title": "Full support for native integer types", "body": "Any chance you plan on adding full support for all the native/C integer types?\n\nThese are important for things like drivers for binary protocols.\n\n(Specifically, I am thinking about writing an OrientDB binary client in Zephir, for which I would need basically every type of integer you can think of; both signed and unsigned 8/16/32/64-bit types)\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/7790325-full-support-for-native-integer-types?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "IngwiePhoenix": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/712", "title": "[NFR] Generate only 1 file", "body": "Is there a direct way to _just_ generate the C code? Let's say I just wanted to look at the output without building a whole extension tree. I tried to use `zephir generate test.zep` but it doesnt do what I thought it would...\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/7656818-nfr-generate-only-1-file?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/654", "title": "CBLOCK docs...", "body": "So I looked into Zephir for some code I am currently writing, and it poked me that Zephir is compiled to C. So I was like: Why can't I use C functions, then?\n\nAnswer: https://github.com/phalcon/zephir/blob/master/test/cblock.zep\n\nWhy is this not documented, like, at all? :/ When looking at zephir-lang website, I see no mention of this feature, which I think is VERY impressive.\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/6604198-cblock-docs?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31251740", "body": "GCC 4.8.2 - but I went to clang and got the same amount of errors.\nOS is Mac OS X 10.9\nAm 27.12.2013 um 09:03 schrieb \u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u041f\u0430\u0446\u0443\u0440\u0430 notifications@github.com:\n\n> Hi, What version of gcc you use? Os?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31251740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rvanvelzen": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/700", "title": "Appending to array property misbehaves when called from an inherited class", "body": "``` php\nnamespace Es;\n\nclass Test\n{\n    private entries = [] { get };\n\n    public function addItem(item)\n    {\n        let this->entries[] = item;\n        return this;\n    }\n}\n```\n\nCalling code:\n\n``` php\n<?php\nclass MyTest extends Es\\Test { }\n\n$original = new Es\\Test();\n$original->addItem(1);\nvar_dump($original->getEntries());\n\n$inherited = new MyTest();\n$inherited->addItem(1);\nvar_dump($inherited->getEntries());\n```\n\nExpected result:\n\n```\narray (size=1)\n  0 => int 1\narray (size=1)\n  0 => int 1\n```\n\nActual result:\n\n```\narray (size=1)\n  0 => int 1\narray (size=0)\n  empty\n```\n\nAs you can see, the calls to the original class work properly. However, the call to the inherited class fails to update the `entries` list. This does seem strange to me?\n\nWhen the property is `protected` or `public` there is no issue.\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/7314278-appending-to-array-property-misbehaves-when-called-from-an-inherited-class?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kais92": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/664", "title": "-= operator", "body": "Hi all,\n\nI wanted to know if the -= is implemented, because it's not working as expected.\n\nsee the code below with zephir 0.5.9a\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/6683103-operator?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nazar-pc": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/663", "title": "Segmentation fault", "body": "Simple extension:\n\n``` zephir\nnamespace nazarpc;\n\nclass upf {\n    public static function is_array_assoc (arr) -> bool {\n        if (!is_array(arr) || empty(arr)) {\n            return false;\n        }\n        return static::is_array_assoc_internal(arr);\n    }\n    private static function is_array_assoc_internal (array arr) -> bool {\n        int count, i;\n        let count = count(arr);\n        for i in range(0, count - 1) {\n            if (!isset(arr[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static function is_array_indexed (arr) -> bool {\n        if (!is_array(arr) || empty(arr)) {\n            return false;\n        }\n        return !static::is_array_assoc_internal(arr);\n    }\n}\n```\n\nWorks fine from CLI, but using apache2 and mod-php5 - apache crashes with segfault.\nUbuntu 15.04, PHP 5.5.12\n\nP.S. Yes, I've commented check for camelized namespace so it compiles without problems.\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/6678299-segmentation-fault?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/661", "title": "Installation", "body": "Currently installation is just awful. It just copies files to system directories, calls `sudo` from PHP scripts and so on.\nYou need proper installation method with ability to install it into specific directory even without root permissions.\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/6677823-installation?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yejune": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/658", "title": "filter_var problem", "body": "php : \n\n``` php\n$ret = \"0\";\nvar_dump(false === filter_var($ret, FILTER_VALIDATE_FLOAT, 20480));\nvar_dump(false == filter_var($ret, FILTER_VALIDATE_FLOAT, 20480));\nvar_dump(filter_var($ret, FILTER_VALIDATE_FLOAT, 20480));\n```\n\nphp result : \n\n```\nboolean false\nboolean true\nfloat 0\n```\n\nzephir : \n\n``` zephir\nlet ret = \"0\";\nvar_dump(false === filter_var(ret, FILTER_VALIDATE_FLOAT, 20480));\nvar_dump(false == filter_var(ret, FILTER_VALIDATE_FLOAT, 20480));\nvar_dump(filter_var(ret, FILTER_VALIDATE_FLOAT, 20480));\n```\n\nzephir result : \n\n```\nboolean true\nboolean true\nfloat 0\n```\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/6645923-filter_var-problem?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "h3ph4est7s": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/648", "title": "Persistent extension global with lifespan until extension unload", "body": "Does zephir support extension globals which last from extension load to extension unload?\ni found something relevant but it doesn't work.\nWarning: Function \"global_set\" does not exist at compile time in /root/zephir/license/license/authorise.zep on 9 [nonexistent-function]\nglobal_set(\"my_setting_1\",false);\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/6449227-persistent-extension-global-with-lifespan-until-extension-unload?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "steffengy": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/645", "title": "Dynamic empty-array assignment results in CompilerException", "body": "Since bd2d71a3af4f560a5947a9dd2e681c0f286cd573 something like\r\n\r\n```\r\n let this->{\"data\"} = [];\r\n```\r\n\r\nfails compilation with\r\n\r\n```\r\nZephir\\CompilerException: Unknown type array in ...\r\n```", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/597", "title": "If Constructs: Conditional Initialization Warning", "body": "A construct like\n\n``` zep\nnamespace Debug;\nclass ZephirDebug\n{\n    public static function test()\n    {\n        if isset _POST[\"a\"] \n        {\n            if isset _GET[\"r\"]\n            {\n\n            }\n        }\n\n        if isset _GET[\"s\"]\n        {\n            var s;\n            let s = _GET[\"s\"] * 5;\n        }\n    }\n}\n```\n\nresults in\n\n```\nWarning: Variable '_GET' was assigned for the first time in conditional branch, consider initialize it at its declaration in /media/rdata/projects/XXX/zephir_debug/debug/zephirdebug.zep on 14 [conditional-initialization]\n\n                if isset _GET[\"s\"]\n        ---------------------^\n```\n\nIs that fixable?\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/5539069-if-constructs-conditional-initialization-warning?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/comments/9085572", "body": "Is it possible that this can cause errors, with classes which have the same name but are in a different namespace? \n\nSimplified: I have 2 User classes like:\nA\\B\\User\nA\\C\\User\nand it seems like A\\C\\User::method() returns what A\\B\\User::method() should return...\n\nSo somehow my code fails mysteriously xD\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/9085572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/10455256", "body": "@andresgutierrez \nDo I read this correctly that you only can set boolean values? (since zend_is_true is used?)\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/10455256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/10503226", "body": "as in #836 I still do not understand, why using ecalloc is advantageous over emalloc?\nmemcpy should anyways overwrite all data.\nOr am I missing something fundamental here?\n\n@andresgutierrez \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/10503226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/10503327", "body": "Thanks :)\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/10503327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/10555666", "body": "@andresgutierrez This breaks the win32 build, probalby only temporary uncommented anyways?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/10555666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/10556930", "body": "This unfortunately triggers an access violation (read) in zend_mm_set_custom_handlers,\nwhich was previously introduced by the function call optimizations and temporarily fixed\nby 9361500ec8ee347ac4ac4b4c294a8c273a73d967.\nCan't really explain _why_ it happens currently, but it only happens on win32.\n(also doesn't crash in debug-builds, which is rather annoying...)\nI will try to investigate , which will probably take quite a while since it's win32-only \nand therefore rather complex to debug, and report back...\n\nIt also seems to be causing memory leaks, which may be related.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/10556930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/14669849", "body": "there is enough material available (inofficial blog posts, offical documentation on secure variables/secure encryption, ...) but you'll have to build your solution according to your needs\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/14669849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/14960927", "body": "@mruz Duplicate of #1142 .\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/14960927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/15800318", "body": "no the only difference is that this prevents garbage collection of target=origin associations.\nSame code in different order\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/15800318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/17480404", "body": "@sergeyklay \nwhich ones did I miss?\nshould be in https://github.com/phalcon/zephir/commit/72ba99a0f9b6f1eae43d9d7f55c24457b7280276\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/17480404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/17480438", "body": "@sergeyklay \nthat's the commit exactly before this commit...\nI wonder that you haven't noticed that, but no worries.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/17480438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/17480463", "body": "@sergeyklay \nThat also wouldn't fix #1090.\nBasically removing that line in either version would not add characters, which are\ndetermined to be lowercase. That would give you incomplete results in most cases.\n\nTo fix that one would need to detect if a character is uppercase and handle it similar to a\ndelimiter \n\neven though that's a bit tricky, if you have something like `testAB`\nwhere you might want `testAb` insteadof `testAB`\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/17480463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/17480503", "body": "then the fix would easily be to just use `ch` insteadof `tolower(ch)`, do you think that would work?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/17480503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/17480555", "body": "I agree with you and logically uncamelize needs some patching after these changes.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/17480555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/17480672", "body": "> Maybe we can allow having a multiple character delimiter where each character is an optional delimiter\n\nIt basically is that.\nThe default is `-_` which means if a `-` or `_` is found, it is treated as delimiter.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/17480672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/18891977", "body": "@nkt\nusing zephir_update_property_this in that context caused a weird bug with values not ending up where they belong (I do not exactly recall, but I think it just didnt work). \nUnfortunately I'm only certain that there was a pretty good reason to change this, not what this reason was...\nAnyways it worked and seemed to have no negative effects.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/18891977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/18892655", "body": "@nkt \nwithout update_zval the first of my unit tests fails:\n\n```\n$class->setPropertyInt(\"property\");\nvar_dump($class);\n```\n\nresults in\n\n```\n[\"test\"] => bool(false)\n```\n\nSo i seem to recall the issue correctly.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/18892655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/60637431", "body": "looks good so far, I think it could make sense to add `Z_STRLEN_P(str)>1` here aswell.\n(to catch invalid input)\n\nI would recommend holding back this commit until master is fixed again,\nthen you can use that minor change to trigger the CI builds ^^\n(which very likely will pass and make this mergeable)\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/60637431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/60652073", "body": "I'd just do `if (Z_TYPE_P(str) != IS_STRING || Z_STRLEN_P(str) > 1) {`\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/60652073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/60826109", "body": "@sergeyklay \nIf you want to be exact it'd be \n`if (Z_TYPE_P(str) != IS_STRING || Z_STRLEN_P(str) != 1) {`\nsince only string of length 1 are supported.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/60826109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/60826163", "body": "@sergeyklay \noops, ofcourse you're right.\nI actually meant \n`if (Z_TYPE_P(delimiter) != IS_STRING || Z_STRLEN_P(delimiter) != 1) { <ERROR_MESSAGE> }`\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/60826163/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/60826389", "body": "@sergeyklay \nyeah that part is fine, I would just like some error checking before as in my last comment,\nsince when someone would be to lazy to read the source code and passes something\nunexpected the function will not do what he wants it to do, without him figuring out,\nlikely leading to unnecessary issues and wasted time on his part.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/60826389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/62171992", "body": "is there any reason you removed this line?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/62171992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/62405609", "body": "Just because you saw no impact it doesn't mean there won't be one.\nRemoving that would be ok if there was no 7.X version using it.\n\nEven your own code example shows why it's not a good idea:\n`ZEND_ASSERT(fci->symbol_table == NULL);` might fail since `->symbol_table`\nmight be initialized to a not-null value (due to not-zeroed memory allocation).\n\nSo we'll have to wrap this into ifdef's for 7.1.X. \n(since that won't land in PHP7.0.X exactly for that backwards-compatibility argument above)\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/62405609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/62420872", "body": "In that case that might be true, but generally you should always prefer the safe approach insteadof the one where you might miss additional dependencies.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/62420872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "andresgutierrez": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/637", "title": "Write Zephir in Zephir", "body": "At some point, Zephir will allow us to write the AOT compiler itself in Zephir instead of using PHP. Keeping this thread open for discussion.\r\n## ", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/609", "title": "Implementation of references in Zephir", "body": "Regarding references, I've been mulling it over. While PHP provides references to simulate or implement a similar idea as pointers in C, Zephir was designed to implement a computational model as Javascript where references do not exist in the same manner as a pointer.\r\n\r\nJavascript always [pass by value](http://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_value) or [call-by-sharing](http://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing), but when a variable refers to an object all its properties are treated as references. Zephir currently has this behavior, modifying the properties of an object does not perform separation of the underlying object. \r\n\r\nAs Zephir is intended to complement PHP, and many current libraries/frameworks depend on references, it raises the need of implement references in Zephir too. \r\n\r\nZephir currently maps dynamic/variant polymorphic values to `zval` structures, this structure looks like:\r\n\r\n``` c\r\ntypedef union _zvalue_value {\r\n    long lval;                  /* long value */\r\n    double dval;                /* double value */\r\n    struct {\r\n        char *val;\r\n        int len;\r\n    } str;\r\n    HashTable *ht;              /* hash table value */\r\n    zend_object_value obj;\r\n    zend_ast *ast;\r\n} zvalue_value;\r\n\r\nstruct _zval_struct {\r\n    /* Variable information */\r\n    zvalue_value value;     /* value */\r\n    zend_uint refcount__gc;\r\n    zend_uchar type;    /* active type */\r\n    zend_uchar is_ref__gc;\r\n}\r\n\r\ntypedef struct _zval_struct zval;\r\n```\r\n\r\nRelevant part is `zend_uchar is_ref__gc` which allows to define a variable as a reference with 1 or non-reference with 0. \r\n\r\nHowever, mark a variable as reference by changing `is_ref__gc` to 1 does not always work as the `zvalue_value` union that stores the zval's value is not a pointer so primitive values like null, long, double and bool aren't tied to the zval the reference points to. The following example illustrates this situation:\r\n\r\n``` c\r\nzval *a, *b;\r\n\r\n// Assign $a = 10;\r\nMAKE_STD_ZVAL(a);\r\nZVAL_LONG(a, 10);\r\n\r\n// Create reference $b pointing to value $a\r\nMAKE_STD_ZVAL(b);\r\nZ_TYPE_P(b) = Z_TYPE_P(a);\r\nb->value = a->value;\r\nZ_SET_REFCOUNT_P(b, 1); \\\r\nZ_SET_ISREF_P(b); \\\r\n\r\n//Change value of $b\r\nZVAL_LONG(b, 10); // This changes the value of $b but not $a\r\n```\r\n\r\nCurrently PHP handles references internally in its core/extensions by using a pointer to a zval pointer `zval**`.  By using this, the implementation changes but it works as expected:\r\n\r\n``` c\r\nzval *a, **b;\r\n\r\n// Assign $a = 10;\r\nMAKE_STD_ZVAL(a);\r\nZVAL_LONG(a, 10);\r\n\r\n// Create reference $b pointing to value $a\r\n*b = a;\r\n\r\n//Change value of $b\r\nZVAL_LONG(*b, 10); // This changes the value of $a and $b\r\n```\r\n\r\nImplementing this way of handling references won't be easy, a variable could be mutated between its non-reference state and then be converted to a reference:\r\n\r\n``` php\r\n$b = 100; // $b is not a reference (zval *)\r\n$a = \"hello\";\r\n$b = &$a;  // $b is now a reference (zval **)\r\n```\r\n\r\nZephir generates C code for every symbol in a method and it ties a variable to a specific structure that must not change across execution, so a variable must remain `zval*` or `zval**`. In short, it is not possible for a variable type dynamic/polimorphic declared with 'var' being a reference and a dynamic value at the same time.\r\n\r\nNow that I have explained the problem, you can understand why implement references the same way as PHP would not be possible.\r\n\r\nWe have two options here:\r\n- Not implement references at all, keeping the current behavior as is\r\n- Or, introduce a new type 'ref' to have monomorphic references in Zephir (variables that are always references)\r\n\r\nThe usage of these variables will be:\r\n\r\n``` javascript\r\n// Receive a parameter as a reference, this replaces &a\r\npublic static function someMethod(ref a)\r\n{\r\n    //...\r\n}\r\n\r\npublic static function someMethod(var b)\r\n{\r\n    ref a;\r\n    // Create a reference to b\r\n    let a = b;\r\n}\r\n\r\npublic static function someMethod()\r\n{\r\n    // Invalid default value\r\n    ref a = 0;\r\n\r\n    // Invalid assignment\r\n    let a = 0;\r\n}\r\n\r\n//This method returns a reference\r\npublic static function someMethod() -> ref\r\n{\r\n    ref x;  var a;\r\n\r\n    let a = 100, x = a;\r\n    return x;\r\n}\r\n```\r\n\r\nThis implementation will remove the & operator to define/create references as the intention of create a reference is implicitly inferred by the assignment to a variable ref.\r\n\r\nThe disadvantage of this implementation is the need to implement all valid operations for this type 'ref' right through the whole language.\r\n\r\nThoughts?\r\n## \r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/5746142-implementation-of-references-in-zephir?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25387595", "body": "thanks!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25387595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/comments/10503323", "body": "I've merged the PR\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/10503323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/10555685", "body": "Yeah, preparing a commit to restore it\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/10555685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/11261143", "body": "It should be:\n\n``` c\n#define ZEPHIR_CALL_ZVAL_FUNCTION(return_value_ptr, func_name, cache, cache_slot, ...) \\\n    do { \\      \n        zval *params_[] = {ZEPHIR_FETCH_VA_ARGS __VA_ARGS__}; \\\n        ZEPHIR_OBSERVE_OR_NULLIFY_PPZV(return_value_ptr); \\\n        if (__builtin_constant_p(func_name)) { \\\n            ZEPHIR_LAST_CALL_STATUS = zephir_call_zval_func_aparams(return_value_ptr, func_name, cache, cache_slot, ZEPHIR_CALL_NUM_PARAMS(params_), ZEPHIR_PASS_CALL_PARAMS(params_) TSRMLS_CC); \\\n        } \\\n        else { \\\n            ZEPHIR_LAST_CALL_STATUS = zephir_call_zval_func_aparams(return_value_ptr, func_name, cache, cache_slot, ZEPHIR_CALL_NUM_PARAMS(params_), ZEPHIR_PASS_CALL_PARAMS(params_) TSRMLS_CC); \\\n        } \\\n    } while (0)\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/11261143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/11262963", "body": "Yeah, only this is needed:\n\n``` php\n#define ZEPHIR_CALL_ZVAL_FUNCTION(return_value_ptr, func_name, cache, cache_slot, ...) \\\n    do { \\\n        zval *params_[] = {ZEPHIR_FETCH_VA_ARGS __VA_ARGS__}; \\\n        ZEPHIR_OBSERVE_OR_NULLIFY_PPZV(return_value_ptr); \\\n        ZEPHIR_LAST_CALL_STATUS = zephir_call_zval_func_aparams(return_value_ptr, func_name, cache, cache_slot, ZEPHIR_CALL_NUM_PARAMS(params_), ZEPHIR_PASS_CALL_PARAMS(params_) TSRMLS_CC); \\\n    } while (0)\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/11262963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/11893891", "body": "Stop merging PR without review\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/11893891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/11893938", "body": "Thanks, about a fix I've to made to fix something you broke\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/11893938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/17480645", "body": "When using multiple character delimiter https://github.com/phalcon/zephir/blob/1b0f7729d23ba725d2341a802ee87097a56cf2ac/kernels/ZendEngine2/string.c#L286\n\nDoes it work as expected?\nMaybe we can allow having a multiple character delimiter where each character is an optional delimiter?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/17480645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "3axap4eHko": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/596", "title": "Seg fault on using typehinted result for typehinted argument with null", "body": "Zephir code:\n\n```\nnamespace Awesome;\n\nclass Test\n{\n    private _test;\n\n    public function get() -> <Test>\n    {\n        return this->_test;\n    }\n\n    public function set(<Test> test)\n    {\n        let this->_test = test;\n    }\n\n    public function autoSet()\n    {\n\n        this->set(this->get());\n    }\n}\n```\n\nPHP code:\n\n```\n$test = new Awesome\\Test(); //there _test property is null\n$test->autoSet();\n```\n\nExpected:\n`Argument 1 passed to Jet\\Test::set() must be an instance of Awesome\\Test, null given`\nActual:\n`Segmentation fault`\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/5530062-seg-fault-on-using-typehinted-result-for-typehinted-argument-with-null?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "igorgolovanov": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/588", "title": "\"traversable\" type", "body": "Let's add \"traversable\" type.\n\n``` zep\npublic function testSoft(traversable filter) \n{}\n```\n\nHard:\n\n``` zep\npublic function testHard(traversable! filter) \n{}\n```\n\nWhen \"traversable\" is \"soft\" then we will check that var has type \"array\" or instanced of \\Traversable. If not then type have the same behavior as array.\nWhen \"traversable\"  is \"hard\" then we will check that var has type \"array\" or instanced of \\Traversable. If not then throws exception.\n\n``` php\n$someTraversableObj = new ArrayIterator(array());\n$someNotTraversableObj = new stdClass();\n$someArray = [];\n\n$a->testSoft($someTraversableObj); // OK\n$a->testSoft($someArray); // OK\n$a->testSoft($someNotTraversableObj); // OK\n$a->testSoft(null); // FAIL\n$a->testSoft(true); // FAIL\n$a->testSoft(false); // FAIL\n$a->testSoft(\"\"); // FAIL\n$a->testSoft(123); // FAIL\n$a->testSoft(123.5454); // FAIL\n$a->testSoft($someResource); // FAIL\n\n$a->testHard($someTraversableObj); // OK\n$a->testHard($someArray); // OK\n$a->testHard($someNotTraversableObj); // Exception\n$a->testHard(null); // Exception\n$a->testHard(true); // Exception\n$a->testHard(false); // Exception\n$a->testHard(123); // Exception\n$a->testHard(123.5454); // Exception\n$a->testHard(\"\"); // Exception\n$a->testHard($someResource); // Exception\n```\n## \n\r\n\r\n<bountysource-plugin>\r\n\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/5450515-traversable-type?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Nirlah": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/554", "title": "Set key on array property syntax error", "body": "``` php\nprotected function setKey(arrayName, keyName, value)\n{\n    let this->{arrayName}[keyName] = value;\n}\n```\n\nThrows a syntax error. \n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/4855054-set-key-on-array-property-syntax-error?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "phalcon": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/550", "title": "Introduce a 'dev' repository", "body": "Many features introduced in master could break the stability of Zephir. Introduce a 'dev' repository allow us to add changes there and then merge 'dev' into 'master' once the branch is enough stable.\r\n## \r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/201", "title": "Rethinking Zephir", "body": "After several months working on Zephir, we are very happy with the progress so far, in a few months we will reach a beta version and then we'll enjoy all its potential. We have reached over 1000 commits and counting and there's a lot to do. This project has allowed us to do a little more CS research and it  has been very interesting for us.\r\n\r\nMoreover, we must admit that we're not sure what will happen with PHP in the future, despite this, we are creating a tool which allows to take advantage of one the less exploited PHP features by the community at large (C extensions) and for a long time it has been reserved to experienced C programmers or advanced users. \r\n\r\nAlso in Zephir, we have found the opportunity to implement features that we have always dreamed of PHP but for one or another reason they are not a reality today:\r\n- [Static Typing](http://zephir-lang.com/types.html#static-types)\r\n- [Named Parameters](http://blog.zephir-lang.com/post/76596064349/whats-new-in-zephir-v)\r\n- [Getter/Setter shortcuts](http://zephir-lang.com/oop.html#getter-setter-shortcuts)\r\n- [Return Type Hints](http://zephir-lang.com/oop.html#return-type-hints)\r\n- [Throw exceptions instead of fatal errors/warnings](http://zephir-lang.com/index.html)\r\n- [Use static types as objects](http://zephir-lang.com/builtin-methods.html)\r\n- [And more...](http://zephir-lang.com/index.html)\r\n\r\nWe believe they will help us to build a better framework and it can help you to build your own tools in a new interesting way. Not everyone needs these features and not all may agree with them. However, we hope that one day these features will considered in the official PHP so we all can enjoy them. No matter what happens, we are sure that PHP will continue evolving regardless of the path taken.\r\n\r\nZephir was initially conceived as a high-level language that abstracts low-level details and allows you to compile your code. Currently based on a high-level representation it generates C code that can be compiled by leading compilers such as gcc/clang/vc with all the advantages that this brings to the table. \r\n\r\nNevertheless, we know that Zephir, being a high-level language, it could also function as a meta-language rather than just a DSL (domain specific language).\r\n\r\nAfter thinking a bit on this I'm creating this thread to discuss an idea with you guys. \r\n\r\nIf we could restructure Zephir so that it can generate code in both PHP and C, this could make Zephir a much more powerful tool than ever before.\r\n\r\nGenerating C:\r\n- The code can be compiled, improving performance and reducing resource consumption\r\n- Some important level of code protection\r\n- Code is exported as a C-extension (shared library or Windows DLL)\r\n\r\n``` bash\r\nzephir generate c\r\n```\r\n\r\nGenerating PHP:\r\n- PHP code can run everywhere where the language is available (shared hostings, servers with restrictions, other PHP implementations, etc)\r\n- Code is exported as a PHP library (phar, standard PHP library installable via composer, etc)\r\n\r\n``` bash\r\nzephir generate php\r\n```\r\n\r\nUsing C-extensions:\r\n- Production environments, when more performance is required and install c-extensions is feasible\r\n\r\nUsing PHP libraries:\r\n- Development/Testing environments, other restricted environments, other PHP implementations, etc.\r\n\r\nPossible cons: \r\n- C code blocks cannot be exported to PHP \r\n- Integrations with low level C libraries couldn't be exported to PHP\r\n- Introduce incompatibilities due to the different runtimes (can be solved with enough tests)\r\n\r\nWith regard to this we can: \r\n\r\na) Implement this now \r\nb) Release Zephir 1.0 (aka stable) and implement this after that\r\nc) Do not implement it at all\r\n\r\nLooking forward to your comments,", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/22202970", "body": "Thank you\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/22202970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/23342452", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/23342452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25184647", "body": "Just make a new commit on your fork, Github will automatically pick up it to this PR\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25184647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25216053", "body": "thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25216053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25456277", "body": "thanks!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25456277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25543902", "body": "Regarding __call and __callStatic, to avoid that Zephir validates the existence of a method the syntax is:\n\n``` php\n$x->{\"hello\"}();\nSomeClass::{\"hello\"}();\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25543902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25544074", "body": "thanks!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25544074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25544877", "body": "It would not check the existence of __call, because the method call be called via call or the method can be implemented in an extended class, so that syntax must be used if you want to tell Zephir that it must not check the existence of a method, but it must generate the call in the c-code.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25544877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25774138", "body": "Thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25774138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25946245", "body": "thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25946245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25988397", "body": "I can't still understand this proposed structure, Phalcon 2.0 is not compiling due to this, what are the advantages of this structure? \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25988397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25989694", "body": "I'm restoring the old behavior\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25989694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25996649", "body": "We need to keep the current behavior where we can do:\n\n``` sh\ncd cphalcon\nzephir compile\n```\n\nThe file structure must be kept:\n\n``` sh\next/\n #c-code\nphalcon/\n  #zephir code\n```\n\nUsing your changes we got errors:\n\n``` sh\ncd cphalcon\nzephir compile \n\nUnexpectedValueException: RecursiveDirectoryIterator::__construct(../phalcon): failed to open dir: No such file or directory\n\nat Library/Compiler.php(94)\n#0 Library/Compiler.php(94): RecursiveDirectoryIterator->__construct('../phalcon')\n#1 Library/Compiler.php(319): Compiler->_recursivePreCompile('phalcon')\n#2 Library/Compiler.php(785): Compiler->generate(Object(Config), Object(Logger))\n#3 compiler.php(74): Compiler::boot()\n#4 {main}\n\n```\n\nIt seems that it assumes that cphalcon must be phalcon, which is something we can't change.\n\nThen, classes can't be extended:\n\n``` php\nCompilerException: Cannot locate class \"Phalcon\\Acl\\Adapter\" when extending class \"Phalcon\\Acl\\Adapter\\Memory\"\n```\n\nAlso classes have a double namespace:\n\n``` php\nstring(26) \"Phalcon\\Phalcon\\Validation\"\nstring(36) \"Phalcon\\Phalcon\\Validation\\Exception\"\nstring(34) \"Phalcon\\Phalcon\\Validation\\Message\"\n```\n\nSo, Phalcon 2.0 is our priority and if we have changes that affect our progress in the migration to Zephir, we need to review them again, hoping you understand our position\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25996649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/26005041", "body": "Thank you, can you test your changes before submitting them with Phalcon 2?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/26005041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/26157194", "body": "I like the idea, however, this would sometimes make things harder for the compiler, because there could be unregistered activity the language cannot track, for instance:\n\n``` c\n %{\na = fibonacci(MAX_FACTOR);\n}%\n```\n\nThe variable 'a' is mutated inside a \"shadow\" block of code, for Zephir, the variable wasn't mutated so the variable will be reported as unused, but the variable was actually used!\n\nOur idea of integrate C-functions into Zephir is via optimizers. Check this example: \n\nhttps://github.com/phalcon/zephir/blob/master/Library/Optimizers/FunctionCall/StrlenOptimizer.php#L25\n\nIt intercepts calls to 'strlen' and replaces the generated code by a call to a c-function. \n\nIt also adds the proper header: \nhttps://github.com/phalcon/zephir/blob/master/Library/Optimizers/FunctionCall/StrlenOptimizer.php#L43\n\nReturns a 'compiled expression' which has the right data-type Zephir can understand.\nhttps://github.com/phalcon/zephir/blob/master/Library/Optimizers/FunctionCall/StrlenOptimizer.php#L46\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/26157194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/26178522", "body": "I'm not opposed on allowing integrate 3rd party libraries in Zephir or call C-code, I think this is obviously something required. But just embed c-code wherever a developer wants looks ugly and it makes Zephir completely unusable. That would restrict us to make optimizations just because there could be hidden code that Zephir can't understand or analyze.\n\nThe idea is allow the developer to write his own optimizers having clean interfaces allowing Zephir to know the kind of parameters that must be passed to C-functions and also which data-types are returned. \n\nFor example, you could have the following file structure.\n\n``` php\noptimizers/\n  fibonacci.php # this intercepts calls to function \"fibonacci\" telling Zephir which header include and the c-code\next/\n  test/\n    myclass.c # code generated\n  kernel/\n  my-fibonacci.h # fibonacci prototype\n  my-fibonacci.c # here is implemented the fibonacci in \"c\"\ntest/\n  myclass.zep # here we call a function \"fibonnacci\" calling the c version\n```\n\nfibonacci.php:\n\n``` php\n<?php\n\nclass FibonacciOptimizer\n{   \n    public function optimize(array $expression, Call $call, CompilationContext $context)\n    {\n        $context->headersManager->add('my-fibonnaci.h');\n\n        $resolvedParams = $call->getReadOnlyResolvedParams($expression['parameters'], $context, $expression);\n        return new CompiledExpression('int', 'fibonacci(' . $resolvedParams[0] . ')', $expression);\n    }\n}\n```\n\nmy-fibonacci.h:\n\n``` c\nint fibonacci(int n);\n```\n\nmy-fibonacci.c:\n\n``` c\nint fibonacci(long n) {\n        if (n < 2) return n;\n        else return fibonacci(n - 2) + fibonacci(n - 1);\n}\n```\n\nmyclass.zep\n\n``` js\n\nnamespace Test;\n\nclass MyClass\n{\n\n    public function someMethod()\n    {\n        int a;\n\n        a = fibonacci(40);\n        return a;\n    }\n}\n```\n\nThis will be an structured way of integrate C functions in a way that Zephir can understand. Zephir can mutate the variable 'a' in a controlled way.\n\nEven if you do the following, Zephir will do the right thing:\n\n``` js\nint a;\na = fibonacci(40);\nreturn a;\n```\n\n``` js\nvar a;\na = fibonacci(40);\nreturn a;\n```\n\n``` js\ndouble a;\na = fibonacci(40);\nreturn a;\n```\n\n``` js\nreturn fibonacci(40);\n```\n\n``` js\nvar a = [];\nlet a = [fibonnaci(1), fibonnaci(2)];\nreturn a;\n```\n\nAll this without have to write C-code! \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/26178522/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/26295938", "body": "Could you please rebase against the current master?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/26295938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/26341021", "body": "Thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/26341021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/26737138", "body": "thank you\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/26737138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/27975430", "body": "Fixed DeclareStatement issuing a warning when declaring a variable without default value?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/27975430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28009239", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28009239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28011531", "body": "thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28011531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28014091", "body": "@mobli thanks for helping us out, could you please open a issue with your ideas? We can discuss them there, thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28014091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28017472", "body": "You can use self()\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28017472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28017722", "body": "No, it creates a class of the current class. Note, that we're not implementing features that we would not need in Phalcon 2.0.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28017722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28069572", "body": "Yes, it was a temporary solution but it needs to use the absolute path. Thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28069572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28069862", "body": "I think the current file structure is ok since zephir is the test extension itself:\n\n```\nproject-name\n |- ext\n |- extension-name\n |- unit-tests\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28069862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28209510", "body": "Thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28209510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28309683", "body": "Thanks for writing us, it seems that PHP is faster, \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28309683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28310076", "body": "Thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28310076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28653303", "body": "Thanks Emmanuel\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28653303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/29136148", "body": "Thank you\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/29136148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/29635227", "body": "Could you please merge this against current master?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/29635227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/29666401", "body": "Thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/29666401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31124527", "body": "Thanks!, Also I added the right implementation\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31124527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31125917", "body": "Please check my implementation, it must work with most cases: https://github.com/phalcon/zephir/blob/master/Library/Operators/Other/EmptyOperator.php\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31125917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31230438", "body": "Thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31230438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31261733", "body": "Why move checkAndWriteIfNeeded to utils?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31261733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31262913", "body": "That's ok, could you please change this part: https://github.com/zaets28rus/zephir/commit/e6a08cf70c1e488d75e88863d2bcd0bc9133a048#library-compiler-php-P7\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31262913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31267131", "body": "Could you please rebase this against master?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31267131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31267389", "body": "Thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31267389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31466967", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31466967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31620188", "body": "Could you please generate prototypes for the gd extension?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31620188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31760354", "body": "Thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31760354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31798100", "body": "You must always use brackets to avoid this:\n\n``` php\nelse {\n   if ($z == 1) {\n   }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31798100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31798118", "body": "This is implemented in latest commits.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31798118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31798145", "body": "We need to update the ZEPHIR_IS_EMPTY macro to check for empty arrays too.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31798145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31843734", "body": "Thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31843734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31853239", "body": "Not a problem, but in Zephir, parentheses are optional in 'if' evaluations, so implementing a block like this will cause several parser conflicts.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31853239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31951553", "body": "I added a fix for this in the latest commit\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31951553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31951604", "body": "What is the problem?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31951604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32110188", "body": "Thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32110188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32125199", "body": "Not sure why he needs DIR and FILE, they're probably useless in zephir code\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32125199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32126718", "body": "Thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32126718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32275682", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32275682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32275844", "body": "This PR can't be merged also Travis is reporting the build is failing\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32275844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32388449", "body": "Thank you!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32388449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32388918", "body": "Thanks, could you please rebase the PR?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32388918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32391592", "body": "Thank you!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32391592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32423031", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32423031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32432764", "body": "Thanks Kamil, some minutes ago I uploaded a fix to fallback to the standard function generation when a second parameter is passed. Could you please rebase against master/head?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32432764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32433731", "body": "I already fixed the problem with phalcon_set_symbol. Could you please try using the latest zephir?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32433731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32434184", "body": "Yes, maybe we could disable the tests for Phalcon 2.0 since there is a high number of tests failing and just leave the extension compilation.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32434184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32435096", "body": "Thank you, we now have a green: https://travis-ci.org/phalcon/cphalcon/builds/17035716\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32435096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32439371", "body": "Thanks, could you please add the operators header?\n\n``` php\n$context->headersManager->add('kernel/operators');\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32439371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32476833", "body": "Thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32476833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32476856", "body": "Thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32476856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32476997", "body": "Thank you\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32476997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32477122", "body": "Could you please rebase against master?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32477122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32493565", "body": "why is this a bug?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32493565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32493597", "body": "try/catch is still not supported\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32493597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32493730", "body": "That's the way parsers work\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32493730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32493932", "body": "But 'int' is not a reserved word of php\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32493932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32501377", "body": "Try this way:\n\n``` javascript\nclass $Boolean {}\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32501377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32555988", "body": "Thank you!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32555988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32673938", "body": "@zaets28rus that's right, however, can you restore this code removed: https://github.com/phalcon/zephir/commit/e3c1bd69ef8f4822b7aa3995da364547c9b77860#diff-3651dfbd59d11ea1f4ed9b9062c95e7aL1172\n\nWe only need to assign the default value if the parameter wasn't passed to the method\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32673938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32695486", "body": "@marciopaiva thanks for the link\n\nWe have to address this functionality for sure, the phalcon's dispatcher needs this to work as in 1.x\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32695486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32696126", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32696126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32773031", "body": "Thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32773031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32773070", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32773070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32784089", "body": "I uploaded a fix for this in the last commit, could you please check?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32784089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32791412", "body": "I updated the parser to address this, could you check?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32791412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32802696", "body": "@racklin No :(, As we need to check if there is an optimizer available for every function called in a project they can't be autoloaded. \n\nDetermine the order in which optimizers are loaded is hard because it depends on the order in which they're called in Zephir code.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32802696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33043407", "body": "Thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33043407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33043459", "body": "Thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33043459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33043632", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33043632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33142572", "body": "Great!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33142572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33142623", "body": "This is now implemented by @racklin\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33142623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33142868", "body": "It must be:\n\n``` javascript\npublic function mysql_func(var id)\n{\n    var result, key, value;\n\n    mysql_connect(\"localhost\", \"root\", \"\");\n    mysql_select_db(\"cdcol\");\n\n    let result = mysql_query(\"SELECT * cds WHERE id=\" . id);\n\n    loop {\n        let row = mysql_fetch_assoc(result);\n        if !row {\n            break;\n        } else {\n            echo row[\"key\"] . \" \" . row[\"value\"] . \"\\n\";\n        }\n    }\n\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33142868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33233598", "body": "Thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33233598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33233684", "body": "This is fixed\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33233684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33280275", "body": "@racklin @zaets28rus Check this out http://blog.zephir-lang.com/post/74447458690/whats-new-in-zephir-iv\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33280275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33304082", "body": "Could you try again using the latest zephir?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33304082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33324367", "body": "Thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33324367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33334310", "body": "Could you try again using the latest zephir?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33334310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33334804", "body": "Could you try again using the latest zephir?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33334804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33552962", "body": "Thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33552962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33553042", "body": "In Zephir, /\\* */ comments are used as docblocks, and they're part of the language, this is why you're getting a parse exception. http://zephir-lang.com/language.html#comments\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33553042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33553134", "body": "Nice, I forget notify you about the commit.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33553134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33553144", "body": "Great\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33553144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33610795", "body": "Thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33610795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33611176", "body": "Thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33611176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33611486", "body": "Could you try again?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33611486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33611658", "body": "Also is needed to add an \"optimizers\" directory where Zephir can pick up your definition. \n\nhttps://github.com/phalcon/cphalcon/blob/2.0.0/config.json#L15\n\nAnd, the C implementation of the function itself in an external file:\n\nhttps://github.com/phalcon/cphalcon/blob/2.0.0/config.json#L24\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33611658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33612193", "body": "Implemented by @zaets28rus \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33612193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33612441", "body": "I removed the function which produce the second warning. Thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33612441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33615791", "body": "Could you try again with the latest zephir?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33615791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33902220", "body": "Fetch is a reserved word, you have to escape it by prepending a $:\n\n``` php\nstmt->$fetch(\\PDO::FETCH_ASSOC);\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33902220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33902264", "body": "Could you try again using the latest zephir?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33902264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/comments/4613788", "body": "We're following PSR1/PSR2 as coding standard: http://www.php-fig.org/psr/psr-2/\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/4613788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179139", "body": "This code is based on the original implementation: http://lxr.php.net/xref/PHP_5_4/ext/standard/array.c#2442\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179160", "body": "I don't think so\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179223", "body": "I'll fix it man, don't worry ;) \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5361420", "body": "Spaces\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5361420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5361435", "body": "```\nCode MUST use 4 spaces for indenting, not tabs.\n```\n\nhttp://www.php-fig.org/psr/psr-2/\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5361435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5566797", "body": "Could you please post some code to check?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5566797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/6063690", "body": "It would not always true if the file exist but it didn't change regarding the compiled version\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/6063690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7228873", "body": "Please update the version every time you update the parser, this will notify users about regenerating the parser.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7228873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7230525", "body": "This version: https://github.com/phalcon/zephir/blob/master/Library/Compiler.php#L32\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7230525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7230556", "body": "The commit is fixing #466 \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7230556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7230564", "body": "It's not just the 'isset' I also added this part:\n\n``` php\nif (isset($parameter['default'])) {\n    $codePrinter->output(\"\\t\" . 'ZEND_ARG_ARRAY_INFO(0, ' . $parameter['name'] . ', 1)');\n } else {\n    $codePrinter->output(\"\\t\" . 'ZEND_ARG_ARRAY_INFO(0, ' . $parameter['name'] . ', 0)');\n }\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7230564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7230578", "body": "What is \"clouse\"?\n\n$parameter['mandatory'] has a different meaning, $parameter['default'] is what we need there.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7230578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7230600", "body": "$parameter['mandatory'] only applies to the parameter's type, it means you have to pass the exact type, generated code by Zephir will not perform any extra conversions if a different type is passed. Presence of $parameter['default'] means the parameter is optional.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7230600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/8210660", "body": "The PR you're preparing won't be merged\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/8210660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/8210674", "body": "I'm on that\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/8210674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/8302842", "body": "No PR?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/8302842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/8318957", "body": "We're not creating a PHP clone\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/8318957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/8319013", "body": "It shouldn't be allowed in first instance\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/8319013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/8320441", "body": "'default' would return true if the value is taken from its default value or if the value is the default of its type?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/8320441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/8615795", "body": "@mruz Could you try again using latest Zephir?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/8615795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9714015", "body": "Please move it to the top of the file, also we should use an autoloader now that we have namespaces.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9714015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/15433183", "body": "Could you please remove this hardcoded path to the extension?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/15433183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "dogstarTest": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/438", "title": "a property is INCONSISTENT, when the property is ARRAY in a class with MAGIC method", "body": "Hi Guys,\n\nIt seems that I find a very strange question. I check my code carefully and debug it, but I really found that if I have a class property with array type, I got NULL returned after I set it \"correctly\" with magic method. That is the POINT: why the property is inconsistent?! When i dump the property inside the class, it showed as expected. When I get it outside or use the property, however, some index was NULL! What's worse, the property changed unexpected!\n\nTo show the question clearly, I will attach my original code and the PHPUnit test, of course, and the phpunit result, my ENV as well.\n\nMaybe it is a little long, to save your time, you can run the code and test in your local envirenment. THANKS.\n# ENV:\n\nSystem: Ubuntu 11.10\nPHP 5.3.10-1ubuntu3.12 with Suhosin-Patch (cli) (built: Jun 20 2014 00:36:12) \nZephir version 0.4.2a\nPHPUnit 4.0.17 by Sebastian Bergmann.\n# ORIGINAL CODE:\n\n``` php\n//MagicDi.zep\nnamespace Dogstar;\n\nclass MagicDi\n{\n    protected _data = [];\n\n    public function __construct()\n    {\n    }\n\n    public function set(var key, var value)\n    {\n        echo \"#set# key = \" . key . \"; value = \" . value .\"\\n\";\n\n        this->_checkKey(key);\n\n        let this->_data[key] = value;\n\n        echo \"#data after set# \";\n        var kk, vv;\n        for kk, vv in this->_data {\n            echo kk . \" -> \" . value .\"\\t\";\n        }\n        echo \"\\n\";\n    }\n\n    public function get(key, defaultValue = null)\n    {\n        echo \"#get# key = \" . key . \"\\n\";\n\n        this->_checkKey(key);\n\n        var value;\n        if !(fetch value, this->_data[key]) {\n            return defaultValue;\n        }\n\n        let value = this->_data[key];\n\n        echo \"#fetch after get# key = \" . key . \"; value = \" . value . \"(\" . gettype(value) . \")\" . \"\\n\";\n\n        return value;\n    }\n\n    public function getData()\n    {\n        return this->_data;\n    }\n\n    protected function _checkKey(var key)\n    {\n        if empty(key) || (!is_string(key) && !is_numeric(key)) {\n            throw new \\Exception(\"Unvalid key(\" . gettype(key) . \"), expect to string or numeric\");\n        }\n    }\n\n    public function __call(name, params)\n    {\n        var prefix;\n        let prefix = substr(name, 0, 3);\n\n        var key;\n        let key = lcfirst(substr(name, 3, strlen(name)));\n\n        var value = null;\n        fetch value, params[0];\n\n        echo \"#__call# method = \" . prefix . \"; key = \" . key . \"; value = \" . value . \"\\n \";\n\n        if prefix == \"get\" {\n            return this->get(key, value);\n        }\n\n        if prefix == \"set\" {\n            this->set(key, value);\n            return;\n        }\n\n        throw new \\Exception(\"Call to undefined method Di::\" . name . \"()\");\n    }\n}\n```\n# PHPUNIT TEST:\n\n``` php\n//test_MagicDi.php\n<?php\nclass MagicDi_Test extends PHPUnit_Framework_Testcase\n{\n    public $fdi;\n\n    public function setUp()\n    {\n        $this->fdi = new Dogstar\\MagicDi();\n    }\n\n    public function testSetAndGetMethod()\n    {\n        $di = $this->fdi;\n        $this->assertNotNull($di);\n\n        $di->set('name', 'phalcon');\n        $rs = $di->get('name');\n        $this->assertEquals('phalcon', $rs);\n    }\n\n    public function testMagicMethod()\n    {\n        $di = $this->fdi;\n\n        $di->setName('phalcon');\n        var_dump($di->getData());   //WHY shows: array('name' => NULL)\n\n        $rs = $di->getName();\n        $this->assertEquals('phalcon', $rs);    //FAILED!\n    }\n\n    public function testDataProperty()\n    {\n        $this->fdi->set('key1', 'value1');\n        $this->fdi->set('key2', 'value2');\n        $this->fdi->setKey3('value3');\n        $this->fdi->set('key4', 'value4');\n        $this->fdi->setKey5('value5');\n\n        var_dump($this->fdi->getData());    //WHY key3 and key5 is NULL ?!\n        $this->assertAttributeEquals($this->fdi->getData(), '_data', $this->fdi);\n        $expectedData = array(\n                'key1' => 'value1',\n                'key2' => 'value2',\n                'key3' => 'value3',\n                'key4' => 'value4',\n                'key5' => 'value5',\n                );\n        var_dump($this->fdi->getData());    //WHY key3 and key5 change ?!\n        $this->assertEquals($expectedData, $this->fdi->getData()); //FAILED!\n    }\n\n    public function testMagicSetterAndGet()\n    {\n        $this->fdi->setVersion('1.0.0');\n        $rs = $this->fdi->get('version');\n        $this->assertNotNull($rs);\n        $this->assertEquals('1.0.0', $rs);  //WHY version change to version ?!\n    }\n}\n```\n# PHPUNIT RESULT:\n\n```\nTime: 13 ms, Memory: 3.50Mb\n\nThere were 3 failures:\n\n1) MagicDi_Test::testMagicMethod\nFailed asserting that null matches expected 'phalcon'.\n\n/home/dogstar/projects/php/test/test_dogstar/test_MagicDi.php:29\n\n2) MagicDi_Test::testDataProperty\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n     'key1' => 'value1'\n     'key2' => 'value2'\n-    'key3' => 'value3'\n+    'key3' => 'value1'\n     'key4' => 'value4'\n-    'key5' => 'value5'\n+    'key5' => 'value1'\n )\n\n/home/dogstar/projects/php/test/test_dogstar/test_MagicDi.php:50\n\n3) MagicDi_Test::testMagicSetterAndGet\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'1.0.0'\n+'version'\n\n/home/dogstar/projects/php/test/test_dogstar/test_MagicDi.php:58\n\nFAILURES!\nTests: 4, Assertions: 7, Failures: 3.\n```\n# MORE DETAIL WHEN PHPUNIT DEBUG\n\nStarting test 'MagicDi_Test::testSetAndGetMethod'.\n.#set# key = name; value = phalcon\n# data after set# name -> phalcon\n# get# key = name\n# fetch after get# key = name; value = phalcon(string)\n\nStarting test 'MagicDi_Test::testMagicMethod'.\nF#__call# method = set; key = name; value = phalcon\n #set# key = name; value = phalcon\n# data after set# name -> phalcon\n\narray(1) {\n  [\"name\"]=>\n  NULL\n}\n# __call# method = get; key = name; value =\n\n #get# key = name\n# fetch after get# key = name; value = (NULL)\n\nStarting test 'MagicDi_Test::testDataProperty'.\nF#set# key = key1; value = value1\n# data after set# key1 -> value1\n# set# key = key2; value = value2\n# data after set# key1 -> value2 key2 -> value2\n# __call# method = set; key = key3; value = value3\n\n #set# key = key3; value = value3\n# data after set# key1 -> value3 key2 -> value3  key3 -> value3\n# set# key = key4; value = value4\n# data after set# key1 -> value4 key2 -> value4  key3 -> value4  key4 -> value4\n# __call# method = set; key = key5; value = value5\n\n #set# key = key5; value = value5\n# data after set# key1 -> value5 key2 -> value5  key3 -> value5  key4 -> value5  key5 -> value5\n\narray(5) {\n  [\"key1\"]=>\n  string(6) \"value1\"\n  [\"key2\"]=>\n  string(6) \"value2\"\n  [\"key3\"]=>\n  NULL\n  [\"key4\"]=>\n  string(6) \"value4\"\n  [\"key5\"]=>\n  NULL\n}\narray(5) {\n  [\"key1\"]=>\n  string(6) \"value1\"\n  [\"key2\"]=>\n  string(6) \"value2\"\n  [\"key3\"]=>\n  string(6) \"value1\"\n  [\"key4\"]=>\n  string(6) \"value4\"\n  [\"key5\"]=>\n  string(6) \"value1\"\n}\n\nTHANKS! And I love Zephir! \n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/3031802-a-property-is-inconsistent-when-the-property-is-array-in-a-class-with-magic-method?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "taophp": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/398", "title": "Port the \"magic\" of PHP to Zephir", "body": "Hi,\r\n\r\nIt should be great if we can use \"magic\" methods (like `__set`, `__get`, `__call`, `__callStatic`) in Zephir the way we can in PHP, without the use of quotes and braces.\r\n\r\nFor example:\r\n\r\n```zep\r\nnamespace Test;\r\nclass newIssue {\r\n  public function __get(someProp){\r\n    return \"This is \".someProp;\r\n  }\r\n  public function printSomeProp(){\r\n    echo this->someProp;\r\n  }\r\n}\r\n```\r\n\r\nCurrently, we can accomplish the same thing (for `__get`, haven't check for others), but in an heavier way, replacing the `echo` line this way:\r\n\r\n```\r\n    echo this->{\"someProp\"};\r\n```", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lukaszwit": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/325", "title": "file_get_contents() and http_response_header", "body": "In php there is a local scope variable \"http_response_header\" ( http://pl1.php.net/manual/en/reserved.variables.httpresponseheader.php ) that is creatied by php i.e. when calling file_get_contents() with URL. \r\nIs there any way to get to this variable in zephir when calling file_get_contents ?\r\n## ", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "serebro": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/277", "title": "Instanceof precedence", "body": "I have the code:\nif !values instanceof \\Traversable {}\n\nand get this error: \n\"InstanceOf requires a 'dynamic variable' in the left operand\"\n\nbut it works\nif !(values instanceof \\Traversable) {}\n\nsee http://www.php.net/manual/en/language.operators.precedence.php\n## \n\r\n\r\n<bountysource-plugin>\r\n---\r\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/3677899-instanceof-precedence?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\r\n</bountysource-plugin>", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "damienalexandre": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/251", "title": "Private methods can't be called by owning class from parent", "body": "Hi there :neckbeard: \r\n\r\nI'm trying to port this PHP code to Zephir:\r\n\r\n``` php\r\n<?php\r\n\r\nclass Foo extends Bar {\r\n    public function run() {\r\n        $this->runBar();\r\n    }\r\n}\r\n\r\nclass Bar {\r\n    public function runBar() {\r\n        $this->isPrivate();\r\n    }\r\n\r\n    private function isPrivate() {\r\n        echo \"YEAH\";\r\n    }\r\n}\r\n\r\n$f = new Foo(); \r\n$f->run();\r\n```\r\n\r\nSo here is my Zephir code:\r\n\r\n```zep\r\nnamespace Jolicoucou;\r\n\r\nclass Foo extends \\Jolicoucou\\Bar\r\n{\r\n    public function run()\r\n    {\r\n      this->runBar();\r\n    }\r\n}\r\n```\r\n\r\n```zep\r\nnamespace Jolicoucou;\r\n\r\nclass Bar\r\n{\r\n    public function runBar()\r\n    {\r\n      this->isPrivate();\r\n    }\r\n\r\n    private function isPrivate()\r\n    {\r\n      echo \"IS NEVER CALLED\";\r\n    }\r\n}\r\n```\r\n\r\nAnd the error I get:\r\n\r\n```\r\nphp > $f = new Jolicoucou\\Foo(); $f->run();\r\nPHP Warning:  Invalid callback Jolicoucou\\Foo::isprivate, cannot access private method Jolicoucou\\Foo::isPrivate() in php shell code on line 1\r\nPHP Stack trace:\r\nPHP   1. {main}() php shell code:0\r\nPHP   2. Jolicoucou\\Foo->run() php shell code:1\r\nPHP   3. Jolicoucou\\Bar->runBar() php shell code:1\r\nPHP Fatal error:  Call to undefined function Jolicoucou\\Foo::isprivate() in php shell code on line 1\r\nPHP Stack trace:\r\nPHP   1. {main}() php shell code:0\r\nPHP   2. Jolicoucou\\Foo->run() php shell code:1\r\nPHP   3. Jolicoucou\\Bar->runBar() php shell code:1\r\n```\r\n\r\nA class owning a private method can't call this method if we use a child class? Running `$f = new Jolicoucou\\Bar(); $f->runBar();` works fine.\r\n\r\nThanks a lot,\r\n:beer: Damien\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33432246", "body": ":+1: \n\nThis is throwing this error: `ParseException: Unexpected EOF` with this end of file:\n\n```\n\n    /*\n    This produces parse error\n*/\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33432246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33905594", "body": "Looks better but still errored; I got this as output:\n\n```\nCopying new kernel files...\nPreparing for PHP compilation...\nPreparing configuration file...\nCompiling...\n/home/dalexandre/Dev/Zephir/jolicoucou/ext/jolicoucou/coucou.c: In function 'zephir_Jolicoucou_Coucou_init':\n/home/dalexandre/Dev/Zephir/jolicoucou/ext/jolicoucou/coucou.c:23:59: error: 'zend_ce_IteratorAggregate' undeclared (first use in this function)\n  zend_class_implements(jolicoucou_coucou_ce TSRMLS_CC, 1, zend_ce_IteratorAggregate);\n                                                           ^\n/home/dalexandre/Dev/Zephir/jolicoucou/ext/jolicoucou/coucou.c:23:59: note: each undeclared identifier is reported only once for each function it appears in\nmake: *** [jolicoucou/coucou.lo] Error 1\nInstalling...\nExtension installed!\nDon't forget to restart your web server\n```\n\nAlso I had to change a little bit the code used because of an `CompilerException: Invalid data type: empty-array` error, there is the new test class:\n\n```\nnamespace Jolicoucou;\n\nclass Coucou implements \\IteratorAggregate\n{\n    public function getIterator()\n    {\n        var test;\n        let test = [];\n        return new \\ArrayIterator(test);\n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33905594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/comments/5465976", "body": "I think this change is breaking calls to `parent::methodName();`, the \"non-static method\" exception is thrown even for parent and self method types.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5465976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "dschissler": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/164", "title": "[NFR] Namespace constants", "body": "I need namespace constants to be able to port Ulogin to Zephir.  I aim for each class to be a swappable across the two implementations.\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "WooDzu": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/36", "title": "[NFR] Obfuscation", "body": "What would be really nice in zephir is a way to obfuscate variables so that they won't be visible as raw string in binary extension thus preventing from easy reverse-engineering.\n\n![Raw Strings](http://images.devshed.com/af/stories/Windows%20Reverse%20Engineering/2-15.jpg)\n\nImagine you have something that you need to distribute with your application but need to keep it secret. Like a RSA public keys or some API keys.\n\nCurrently one can define these in following way:\n\n``` php\nclass Secret {\n   const RSA_PUB_KEY = '------ PUB KEY -------\\nBlaBlaBla';\n   private _apiName = 'secret Login';\n   private _apiKey = 'secret Password';\n}\n```\n\nHowever, both will be visible from compiled binary extension in hex mode.\nThe nice way, for instance could be something like:\n\n``` php\nclass Secret {\n   const obf RSA_PUB_KEY = '------ PUB KEY -------\\nBlaBlaBla';\n   private obf _apiName = 'secret Login';\n   private obf _apiKey = 'secret Password';\n}\n```\n\nBefore compilation a zaphir macro would obfuscate variables declared in such way.\n\nI don't want to start discussion on how safe this is, as almost everyone armed with debugger or reflection would be able to reverse-engineer it (unless there's some technique to prevent this I'm not aware of) but it's a nice and easy way to stop 99% of attacks at the application.\n\nIt might or may not be a good way to make things safer and a good alternative to Zend Encoder or IonCube.\nIt could be opensource or a paid add-on for Zephir you could use to make money on it.\n\nWhat are your thoughts on this?\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/1431282-nfr-obfuscation?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F280146&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/36/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/29601673", "body": "That's a very good point @lukaszlach. I think whichever option is easier/possible to implement would make Zephir a nice competitor to Zend and IonCube.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/29601673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32704101", "body": "This could've been fixed in the recent PR https://github.com/phalcon/zephir/pull/85\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32704101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33258334", "body": "+1. Note there is a solution file for vc9 in win32 folder, though i havent tried it yet I hope vc11 should pick it up. It's however 2 years old and might've been added before json-c + re2c were introduced into zephir. In the ideal world there would be a configure.js script in zephir like for phalcon 1.3 so it can be build under Visual Studio Express command line tools which is free\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33258334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "chrysanthemum": {"issues": [], "commits": [{"url": "https://api.github.com/repos/phalcon/zephir/commits/d5319f31403883171eae9f2d598a7b20030be7f0", "message": "fix global function has not parameter, compile failed (#1616)\n\n* fix global function without parameter,compile fail\r\n\r\nError: Call to a member function getParameters() on null in /../zephir/Library/Compiler.php on line 2019\r\n\r\n* Update Compiler.php"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "remicollet": {"issues": [], "commits": [{"url": "https://api.github.com/repos/phalcon/zephir/commits/e403b77d6bfb7575b08f6e43f027114b1154e95b", "message": "disable timecop extension from the launcher"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/a3ac5468d6ea40527d73181b71c5b3fac7973dbc", "message": "drop zend_error_noreturn usage"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JABirchall": {"issues": [], "commits": [{"url": "https://api.github.com/repos/phalcon/zephir/commits/08f6a98514223d6af0077a8f6130a0cb9ae14e21", "message": "PHP SDK 2.0 is now hosting on Github"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "scrutinizer-auto-fixer": {"issues": [], "commits": [{"url": "https://api.github.com/repos/phalcon/zephir/commits/d55d974e8423f23529a24da9025324926c053fcf", "message": "Scrutinizer Auto-Fixes\n\nThis commit consists of patches automatically generated for this project on https://scrutinizer-ci.com"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jianzhiyao": {"issues": [], "commits": [{"url": "https://api.github.com/repos/phalcon/zephir/commits/7cdce2ee0910dd6a430d3664b3a90c9fc0fc4d01", "message": "Update README.md"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "niden": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/22277957", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/22277957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25884838", "body": "Thank you!!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25884838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25153007", "body": "Thank you!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25153007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25514914", "body": "Thank you!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25514914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25869296", "body": "Thank you!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25869296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25952792", "body": "Thank you!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25952792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32125050", "body": "@zaets28rus it is not really defined in the core; the compiler substitutes **FILE**, **DIR** etc with the actual values when compiling the source code.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32125050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32169298", "body": "@zaets28rus if you need `__FILE__`, this will be the name of the script being processed, `__DIR__` is the directory name where that script is located.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32169298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32173195", "body": "```\n/home/vladimir/workspace/zephir/ext/test/constants.c: In function \u2018zim_Test_Constants_testPHPVersionEnvConstant\u2019:\n/home/vladimir/workspace/zephir/ext/test/constants.c:64:2: warning: passing argument 3 of \u2018zend_get_constant\u2019 from incompatible pointer type [enabled by default]\n  ZEPHIR_GET_CONSTANT(return_value, \"PHP_VERSION\");\n  ^\nIn file included from /home/vladimir/.phpenv/versions/5.4.10/include/php/main/php.h:404:0,\n                 from /home/vladimir/workspace/zephir/ext/test/constants.c:6:\n/home/vladimir/.phpenv/versions/5.4.10/include/php/Zend/zend_constants.h:63:14: note: expected \u2018struct zval *\u2019 but argument is of type \u2018struct zval **\u2019\n ZEND_API int zend_get_constant(const char *name, uint name_len, zval *result TSRMLS_DC);\n              ^\n/home/vladimir/workspace/zephir/ext/test/constants.c: In function \u2018zim_Test_Constants_testPHPVersionEnvConstantInExpValue\u2019:\n/home/vladimir/workspace/zephir/ext/test/constants.c:111:2: warning: passing argument 3 of \u2018zend_get_constant\u2019 from incompatible pointer type [enabled by default]\n  ZEPHIR_GET_CONSTANT(a, \"PHP_VERSION\");\n  ^\nIn file included from /home/vladimir/.phpenv/versions/5.4.10/include/php/main/php.h:404:0,\n                 from /home/vladimir/workspace/zephir/ext/test/constants.c:6:\n/home/vladimir/.phpenv/versions/5.4.10/include/php/Zend/zend_constants.h:63:14: note: expected \u2018struct zval *\u2019 but argument is of type \u2018struct zval **\u2019\n ZEND_API int zend_get_constant(const char *name, uint name_len, zval *result TSRMLS_DC);\n              ^\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32173195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32173461", "body": "Please try:\n\n``` patch\ndiff --git a/ext/kernel/main.h b/ext/kernel/main.h\nindex 4c1b7d6..af4ddcf 100755\n--- a/ext/kernel/main.h\n+++ b/ext/kernel/main.h\n@@ -419,7 +419,7 @@ int zephir_fetch_parameters(int num_args TSRMLS_DC, int required_args, int optio\n\n #define ZEPHIR_GET_CONSTANT(return_value, const_name) \\\n        do { \\\n-               if (FAILURE == zend_get_constant(SL(const_name), &return_value TSRMLS_CC)) { \\\n+               if (FAILURE == zend_get_constant(SL(const_name), return_value TSRMLS_CC)) { \\\n                        ZEPHIR_MM_RESTORE(); \\\n                        return; \\\n                } \\\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32173461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32175450", "body": "> After run make clean in ext folder\n\nModifications to header files do not cause the source code to be rebuilt\u00a0\u2014 this is a shortcoming of the PHP build system. You either have to run `make clean && make` or `make -B`.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32175450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32175478", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32175478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32243419", "body": "Awesome, thanks!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32243419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33273867", "body": "This will do:\n\n``` c\nchar *strndup(const char *s, size_t len)\n{\n    if (s) {\n        char *ns = malloc(len + 1);\n        if (ns) {\n            ns[len] = 0;\n            return strncpy(ns, s, len);\n        }\n    }\n\n    return NULL;\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33273867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ilyk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25544106", "body": "but if you will use  $x->{\"hello\"}(); would Zephir check existance of method \"__call\"?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25544106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "racklin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25870119", "body": "@sjinks You are welcome.\nHere is another PR for `zephir help`, i Added ASCII Art Logo like 'Composer' for Zephir. #16 :)\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25870119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25901278", "body": "@mobli Just like npm / composer do, NOT everybody happy to install it to /usr/local/bin.\n\nSo with origin zephir shell script it will auto detect ZEPHIRDIR enviroment is set? \nIf set , using user's ZEPHIRDIR (Like yours).\nIf not set, using the current shell script's parent path.\n\nIt's behavior like yours, but more flexible. right?\n\nAnd you are welcome.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25901278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25987941", "body": "@mobli @phalcon  `zephir init <namespace>` will create subdir from current directory with namespace name and put the `ext` and `config.json` to subdir , that was wrong structure.\n\nAnd, `zephir init` with default namespace, that don't create <namespace> subdir.\n\nso, with this pr, zephir init will not initial workable project structure . \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25987941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25988752", "body": "@phalcon Original structure is good. Like `Composer`.\nUser create there own project directory, and `init` only create `config.json` , `ext` and `[namespace]` subdir.\n\nBut now, `zephir init [namespace]` has difference behaviors, one will create nest subdir, and the another not ..\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25988752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25989469", "body": "@phalcon And https://github.com/mobli/zephir/commit/1b3b620787aa81a9abf7bbd0e0719e9595a7e08b#diff-803edc27a0dcbb56c0d1a6ac3128a3a4L79 \n\nThe original code using ZEPHIRDIR ENV for running `zephir-parser`, but with this patch, the \n`zephir-parser` must in running search $PATH or `/usr/local/bin` . Original is better.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25989469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25995440", "body": "@phalcon @mobli I am very sorry that i am review  the wrong commit-id.\nThe `zephir-parser` using ZEPHIRDIR ENV that @mobli had fixed in commit  894022c.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25995440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25996908", "body": "@mobli My original question is the new `zephir init` project structure changed , and have difference behaviors. \n\nSo, i suggest to consider like `Composer` and `npm`,  only create config files in current directory. And `zephir init namespace` only setting specified namespace to `config.json` and created specified namespace sub-directory.\n\nThe other question is my old extension can't compile due to this , so I reviewed CompilerFile.php but with the wrong commit-id.\n\n@phalcon @mobli Sorry again!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25996908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/26174785", "body": "@phalcon I agree.\n\nIn the most case, Zephir user should use Optimized Function Calls we provided.\nAnd we will implementing populate and general function calls to Optimized c-function.\n\nZephir is a DSL and Generate to c . \nSo i think it should have an ability to calling 3rd c libraries.\nIt will make Zephir more flexible and powerful.\n\nFor instance\n1. Declare the interfaces for c libraries - like `VALA` .\n2. Embedded codeblock to generated target files. like `XPIDL`, `CoffeeScript`.\n-  CoffeeScript Embedded Javascript - http://coffeescript.org/#embedded\n  And just like CoffeeScript Document says:\n\n> Hopefully, you'll never need to use it, but if you ever need to intersperse snippets of JavaScript within your CoffeeScript, you can use backticks to pass it straight through. \n\nGo back to my example `cblock.zep` https://github.com/racklin/zephir/blob/d6b1e3651151c0e1c66cd58ff024be967b190ab0/test/cblock.zep\n`fibonacci(40)` is very slow in PHP - benchmark [http://fengmk2.github.io/blog/2011/fibonacci/nodejs-python-php-ruby-lua.html]\n\nBut Zephir with CBLOCK, we can implement simple c-function `fibonacci` in zephir CBLOCK. and calling in zephir . NOW with Zephir extension, `fibonacii(40)` only used _0.8s_ in my MBP.\n\nAnd the other example is Zephir currently not support `require` php file.\nWith cblock , we can `#include \"kernel/require.h\"` and calling `zephir_require` or `zephir_require_ret` in cblock.\n\nSo, with Optimizer FunctionCall + CBLOCK will make Zephir more flexible and these two features were complementary not mutex .  \n\nFinally, You CAN calling c-function, implements c-function in `CBLOCK`, not mean You SHOULD.\n:smile: \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/26174785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/26228428", "body": "@phalcon I agree and understand your concerns.\n\nPlease consider that CBLOCK or (c-code with comments) is part of Zephir features, It make Zephir flexible.\n\nThe most projects(and Phalcon 2.0) developers SHOULD NOT using CBLOCK to implements or calling c-function.\nBut sometimes or special extensions,they CAN use CBLOCK and that is helpful.\n\nAs list before, `XPIDL` , `CoffeeScript` support embedded target code modifiers.\n\nGoogle's `Go`  (http://golang.org/) also have a c-code embedded by comments, called \nc-go . (http://golang.org/cmd/cgo/) .\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/26228428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/26316287", "body": "@phalcon Hi, I have rebase and push again. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/26316287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/29595303", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/29595303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32296892", "body": "@phalcon Hi, I have fixed and resent PR!  Thanks.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32296892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32337367", "body": "@phalcon Finally , build passed :)\nIs this PR can be merged now?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32337367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32389148", "body": "@phalcon Sure!  ;) \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32389148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32391495", "body": "@phalcon rebase done! \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32391495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32392165", "body": "@phalcon ;) Next optimizer will be `substr` to make all test/router.zep use all internal functions, NO userland PHP function call!\n\nMaybe zephir router will faster then https://github.com/c9s/Pux :+1: \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32392165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32443035", "body": "@phalcon added opterators header. \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32443035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32783978", "body": "@jaimz22  Hi ,  PregMatchAllOptimizer extends from PregMatchOptimizer class, and it should be autoload by PHP's class loader.\n\nWhich PHP version you used? \nI should be Ok, because Travis-CI 5.3, 5.4, 5.5 tests passed\n\nhttps://travis-ci.org/phalcon/zephir/builds/17284635\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32783978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32784778", "body": "@jaimz22 Sorry! my mistake. Maybe i should review all codes. \n\n@phalcon We should require or include manually if Optimizer not extends from OptimizerAbstract ?\nOptimizers not register by spl_autoload mechanism ?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32784778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32986341", "body": "@phalcon OK! I have send new PR #94 for ltrim and rtrim, that have the same issues.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32986341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33206557", "body": "@phalcon I am sorry that  I found typos `shift_left_function` / `shift_right_function` of PHPAPI functions . \nAnd @zaets28rus 's  https://github.com/zaets28rus/zephir/commit/dee51bb1630519a7d7ff707730fb85451cb1d631 fixed it \n\nPlease merge it to fixes. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33206557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "mobli": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25900664", "body": "Hi there,\n\nThanks for the feedback and questions.\n\nWhat the ./install script is doing with my mod is to simply install zephir in /usr/local/bin, which should be in your path. the /usr/local/bin/zephir script knows where to find zephir, no need for environment variables.\nTherefore, you can just type commands as such:\n\ncd /where/ever\nzephir init myext\ncd /where/ever/myext\n<write code here>\nzephir generate\nzephir compile\nzephir install\n\nWith all your code in /where/ever/myext, the extension will be built into /where/ever/myext/ext.\nGood idea using basename(getcwd()) as default namespace.\n\nDecoupling zephir itself from the extension you're building is much easier - try building a new extension as it stands, it's hard :-)\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25900664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25902137", "body": "It doesn't really matter to me how it's done, as long as I can decouple zephir from the work I'm doing now.\nSo for instance, I might install zephir in /opt but work in ~/projects. I don't want to have to change my .profile file every time I add a new tool, which is what I need to do to make ZEPHIRDIR sticky.\nI can the mods as you requested so as not to install zephir in /usr/local/bin because I really need that pull request to go through, but I'd prefer if you could reconsider your position on that. Please let me know ;-)\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25902137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25922809", "body": "@racklin I've restored the install process as you requested. I've simply added an option on the install script that will copy zephir to /usr/local/bin for those who want (like me :-).\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25922809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25957873", "body": "Thanks! That was really quick, fantastic!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25957873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25993511", "body": "It works like a charm in fact:\n\n1) Install Zephir:\n\n```\ncd /opt\ngit clone https://github.com/phalcon/zephir.git\ncd zephir\n./install -c\n```\n\n2) Create a new project:\n\n```\ncd /projects\nzephir init newproject\ncd newproject\n```\n\nor\n\n```\ncd /projects\nmkdir newproject\ncd newproject\nzephir init\n```\n\n`config.json` is created in `/projects/newproject`.\nWrite your code in `/projects/newproject` and subdirectories.\nThen, in `/projects/newproject`:\n\n```\nzephir <generate|compile|install>\n```\n\nA new directory is created `/projects/newproject/ext`. The new extension is built in there and installed if required.\n\nIt's closer to how the `ext_skel` utility works from PHP than to composer and it's much more comfortable this way. Also, note how the test included with Zephir is self contained: it doesn't pollute the ext directory anymore.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25993511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25994515", "body": "@racklin @phalcon \n\nFrom @racklin:\n\n\"The original code using ZEPHIRDIR ENV for running zephir-parser, but with this patch, the \nzephir-parser must in running search $PATH or /usr/local/bin . Original is better.\"\n\nThat's not actually how it works.\nIf you install zephir the normal way using ./install then you will have to set the ZEPHIRDIR as before.\nIf you install zephir with ./install -c then you get the behaviour you describe.\nFor the rest, it stayed the same.\n\nIt's a shame you reverted these additions, a lot of work went into pleasing you, @racklin.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25994515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25995410", "body": "I fact, I'm re-reading all the comments from @racklin and I'm very surprised by the rather aggressive reaction to what was a very legitimate modification. I even went out of my way to make sure that the old behaviour was preserved while at the same time making things clearer.\nWay to go! And I thought open source was about improving things through discussion...\n\n@phalcon I hope you'll give my changes a thorough review anyway and try to understand the changes. Good old ZEPHIRDIR was still in use for those who wanted, while making a cleaner decoupling between zephir and the extensions you build. Why so much resistance is beyond me.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25995410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25995647", "body": "@racklin Thanks, but you're not saying if it's good for you or not, @phalcon has already reverted all the changes so he will have double the work to do now to restore them...\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25995647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25997700", "body": "@phalcon I'm sorry, of course I didn't realise that ir would impact your work on Phalcon 2. Zephir is still version 0.2.1a after all :-)\nShould I provide a fix for full backward compatibility, would you consider reintegrating my changes?\nI'll do my best to minimise your efforts, I promise, including trying compiling Phalcon 2 myself before submitting a pr.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25997700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/27979058", "body": "Yes, specifically on line 86:\n            if (isset($variable['expr'])) {\nchanged to:\n            if (isset($variable['expr']['value'])) {\nsince on line 87:\n                $defaultValue = $variable['expr']['value'];\nIn declarations without a default value then $variable['expr'] is defined but $variable['expr']['value'] is not.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/27979058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/27981983", "body": "Just let me know how you want it, I'm used to classes being named this way, similar to spacing or the way Doctrine do it.\nIf you feel more comfortable the other way round, for me it's same same.\nI didn't change the file names though.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/27981983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28009661", "body": "@phalcon: Thanks! You're doing an incredible job. Every time I look at your code it blows me away!\nFor your information, I'm currently looking at using Zephir as one of our main development tools in Mobli.\nWhat is the best way to exchange ideas and help you take it forward?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28009661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28017560", "body": "You mean that `new self()` in Zephir behaves like `new static()` in PHP?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28017560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28017798", "body": "I understand, thanks for the answer.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28017798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28026255", "body": "I have a question regarding the use of namespaces. I've noticed that you always remove the leading `\\` before looking up class names (specifically, in Library/Expression.php line 238). Is there a reason? Why not using an absolute namespace instead? Could that not lead to confusion in the future?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28026255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/comments/4582149", "body": "Hi, what are the coding standards?\nFor instance, do you prefer `tab` or `space`? If `tab`, what is its width?\nI see that you prefer the `{` to be at the end of the `if` line, not on the next line, noted.\nIs there something else that is important to you?\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/4582149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "tyler-sommer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/27980355", "body": "User chiming in.\n\nThe change in name of the commands is strange. It is fairly standard to suffix the class name rather than prefix it: `HelpCommand` instead of `CommandHelp`. This is even seen in other parts of zephir: \n\nhttps://github.com/phalcon/zephir/tree/master/Library/Detectors\nhttps://github.com/phalcon/zephir/blob/master/Library/Builder/VariableBuilder.php\n\nAdditionally, I think the filenames should be the same as the class name contained. The `CompileCommand` class file should be called `CompileCommand.php`, or if the new naming sticks, `CommandCompile.php`.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/27980355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mcuadros": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28257875", "body": "Same behaviour there :(\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28257875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28317237", "body": "@jaimz22 we are testing zephir too and i think that depends a lot of what are you testing. \n\nOn our case, we have ported a little part of our framework and our results are pretty different from yours, calling this method:\nhttps://github.com/mcuadros/zephir/blob/master/mongator/document/zephirdocument.zep#L142\n\nIn 10000 iterations, we have improvement  in times between 20% to 40%\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28317237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jaimz22": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28311571", "body": "Don't get my wrong, I'm going to continue to work with Zephir, I'm not wanting to convey a message of \"Zephir is slow\" that's not the case.\n\nIt did give me an extremely interesting idea however. (it's pretty far outside the box) What if, the calls to internal PHP functions (at least the simple ones, like trim(), explode(), etc) used the actual PHP internals call for the specified function instead of the zephir_call_func_p\\* methods?\n\nNearly all the PHP source is documented with method calls and their signatures, so what if there was a way to do some type of reflection, or 'read' the code's documentation? \n\nFor example, the explode function has the following signature:\nproto array explode(string separator, string str [, int limit])\n\nhaving that signature, and knowing that the internal functions are named php_<function name>, you could deduce that you can call php_explode(zval *delim, zval *str, zval *return_value, long limit)\n\nI imagine I could also just use the cblock abilities to call php_explode myself however.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28311571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28317570", "body": "I see that. I believe my findings are the way they are because of the fact that my php code and my zephir code are calling the same native php functions the same number of times, in the same ways. The overhead i'm seeing is, most likely, the calls made to the native functions.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/28317570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32493673", "body": "because the parser thinks i'm trying to use a type keyword, instead of defining a class.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32493673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32493853", "body": "in PHP you can create a class named int, while int is a data type in PHP.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32493853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32495106", "body": "I don't think it's too far fetched to believe that at some point in the life of Zephir, someone is going to want to make a class named any of the following:\n\nInteger\nInt\nUint\nLong\nChar\nUchar\nDouble\nFloat\nBool\nBoolean\nString\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32495106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32501706", "body": "Perfect. This might be worth a mention in the docs.\n\nThank you.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32501706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32630915", "body": "I've had this issue once before. I found that if I assigned the static property to a variable that's local to the method, then at the end, assign the local method back to the static property it would work;\n\n``` php\n    public static function register(key, value, graceful = false) -> void\n    {\n        if self::_registry === null { let self::_registry = []; }\n        var __isset__,locRegistry;\n        let locRegistry = self::_registry;\n\n        if fetch __isset__, locRegistry[key] {\n            if (graceful){ return; }\n            self::throwException(\"Mage registry key \\\"\".key.\"\\\" already exists\");\n        }\n        let locRegistry[key] = value;\n        let self::_registry = locRegistry;\n    }\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32630915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32639029", "body": "Oh, I'd like to add. I'm using php 5.5.6 (running as php-fpm behind nginx 2)\n\nWhile it shows as a warning in the logs, this actually halts php's execution, causing Nginx to return a 502\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32639029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32673448", "body": "oh yeah, this only happens when you pass a value to the type hinted default parameter, if you don't pass a second parameter to test() the fault doesn't happen.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32673448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32673508", "body": "verified that it's fixed! thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32673508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32699964", "body": "this is broken now:\n\n``` php\npublic function __construct(boolean! start = true)\n{\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32699964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32700152", "body": "Also:\nin zephir:\n\n``` php\npublic function testMethod(param1,param2 = null)\n{\n    var_dump(param1);\n    var_dump(param2);\n}\n```\n\nthen, in php:\n\n``` php\n$obj->testMethod('testVal1','testVal2'); // outputs string 'testVal1' NULL\n```\n\nAnything that defaults null stays null when a value is given to it\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32700152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32711657", "body": "it still seams to be failing. \n\nTry this zep file:\n\n``` php\nnamespace Tests;\n\nclass TestDefaultParamValues\n{\n    public function test1(value)\n    {\n        echo value;\n    }\n\n    public function test2(bool value)\n    {\n        echo value;\n    }\n\n    public function test3(bool! value)\n    {\n        echo value;\n    }\n\n    public function test4(value = null)\n    {\n        echo value;\n    }\n\n    public function test5(bool value = null)\n    {\n        echo value;\n    }\n\n    public function test6(bool! value = null)\n    {\n        echo value;\n    }\n\n    public function test7(string value)\n    {\n        echo value;\n    }\n\n    public function test8(string value = null)\n    {\n        echo value;\n    }\n\n    public function test9(string value = \"string\")\n    {\n        echo value;\n    }\n\n    public function test10(string! value = null)\n    {\n        echo value;\n    }\n\n    public function test11(string! value = \"string\")\n    {\n        echo value;\n    }\n}\n```\n\n( I used echo because var_dump seems seriously messed up right at the moment)\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32711657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32772079", "body": "Part of the issues is that if I compile with a defaulted type hinted parameter, PHP's execution will halt as soon as the class is initialized in php userland.\n\nNULL really should be NULL regardless of what the type is. NULL is the absence of a value, not a value, nor a type.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32772079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32774687", "body": "This happens:\n\n```\nPHP Fatal error:  Class 'PregMatchOptimizer' not found in /root/Development/zephir/Library/Optimizers/FunctionCall/PregMatchAllOptimizer.php on line 29\nPHP Stack trace:\nPHP   1. {main}() /root/Development/zephir/compiler.php:0\nPHP   2. Bootstrap::boot() /root/Development/zephir/compiler.php:81\nPHP   3. CommandAbstract->execute() /root/Development/zephir/Library/Bootstrap.php:169\nPHP   4. Compiler->build() /root/Development/zephir/Library/Commands/Abstract.php:85\nPHP   5. Compiler->generate() /root/Development/zephir/Library/Compiler.php:632\nPHP   6. CompilerFile->compile() /root/Development/zephir/Library/Compiler.php:480\nPHP   7. CompilerFile->compileClass() /root/Development/zephir/Library/CompilerFile.php:559\nPHP   8. ClassDefinition->compile() /root/Development/zephir/Library/CompilerFile.php:112\nPHP   9. ClassMethod->compile() /root/Development/zephir/Library/ClassDefinition.php:724\nPHP  10. StatementsBlock->compile() /root/Development/zephir/Library/ClassMethod.php:967\nPHP  11. IfStatement->compile() /root/Development/zephir/Library/StatementsBlock.php:110\nPHP  12. StatementsBlock->compile() /root/Development/zephir/Library/Statements/IfStatement.php:69\nPHP  13. ForStatement->compile() /root/Development/zephir/Library/StatementsBlock.php:126\nPHP  14. ForStatement->compileHashTraverse() /root/Development/zephir/Library/Statements/ForStatement.php:611\nPHP  15. StatementsBlock->compile() /root/Development/zephir/Library/Statements/ForStatement.php:569\nPHP  16. FunctionCall->compile() /root/Development/zephir/Library/StatementsBlock.php:175\nPHP  17. FunctionCall->_callNormal() /root/Development/zephir/Library/FunctionCall.php:546\nPHP  18. FunctionCall->optimize() /root/Development/zephir/Library/FunctionCall.php:280\nPHP  19. require() /root/Development/zephir/Library/FunctionCall.php:193\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32774687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32784526", "body": "Working just fine now.\n\n@racklin I'm using 5.5.6 FPM\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32784526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32790926", "body": "If, in Zephir, I do this:\n\n``` php\nclass SomeKindOfLoader {\n     // the method in a zephir class\n     public function createInstance(className) \n     {\n          let refl = new ReflectionClass(className);\n          return refl->newInstance();\n     }\n}\n```\n\nIt will run the constructor, but it does not run the constructor when called in a dynamic way\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32790926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32818401", "body": "Zephir is not PHP.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32818401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Cinderella-Man": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/29138981", "body": "To replicate seg fault run the following (current master Phalcon 2.0):\n\n```\n<?php\n\n$factoryDefault = new Phalcon\\DI\\FactoryDefault();\n\n$request = $factoryDefault->get('request');\n$response = $factoryDefault->get('response');\n$filter = $factoryDefault->get('filter');\n$escaper = $factoryDefault->get('escaper');\n$url = $factoryDefault->get('url');\n$flash = $factoryDefault->get('flash');\n$dispatcher = $factoryDefault->get('dispatcher');\n$modelsManager = $factoryDefault->get('modelsManager');\n```\n\nI'm getting following output from gdb:\n\n```\n(gdb) run test.php\nStarting program: /usr/bin/php test.php\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/i386-linux-gnu/libthread_db.so.1\".\nwarning: the debug information found in \"/usr/lib/debug//usr/lib/php5/20100525+lfs/mysql.so\" does not match \"/usr/lib/php5/20100525+lfs/mysql.so\" (CRC mismatch).\n\nwarning: the debug information found in \"/usr/lib/debug/usr/lib/php5/20100525+lfs/mysql.so\" does not match \"/usr/lib/php5/20100525+lfs/mysql.so\" (CRC mismatch).\n\nwarning: the debug information found in \"/usr/lib/debug//usr/lib/php5/20100525+lfs/mysqli.so\" does not match \"/usr/lib/php5/20100525+lfs/mysqli.so\" (CRC mismatch).\n\nwarning: the debug information found in \"/usr/lib/debug/usr/lib/php5/20100525+lfs/mysqli.so\" does not match \"/usr/lib/php5/20100525+lfs/mysqli.so\" (CRC mismatch).\n\nwarning: the debug information found in \"/usr/lib/debug//usr/lib/php5/20100525+lfs/pdo_mysql.so\" does not match \"/usr/lib/php5/20100525+lfs/pdo_mysql.so\" (CRC mismatch).\n\nwarning: the debug information found in \"/usr/lib/debug/usr/lib/php5/20100525+lfs/pdo_mysql.so\" does not match \"/usr/lib/php5/20100525+lfs/pdo_mysql.so\" (CRC mismatch).\n\n[New Thread 0xb6a9eb40 (LWP 23553)]\n[Thread 0xb6a9eb40 (LWP 23553) exited]\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x0834c3bd in gc_zval_possible_root (zv=0xb77935d8) at /build/buildd/php5-5.4.22/Zend/zend_gc.c:143\n143 /build/buildd/php5-5.4.22/Zend/zend_gc.c: No such file or directory\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/29138981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/29666366", "body": "I merged and rebased with master - it should be fine now.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/29666366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/30800237", "body": "@mruz thanks for pointing out the bug - before my changes it was hardcoded to\n\n```\nif ((0 == 0)) {}\n```\n\nNow it returns 'kind of' expected results as long as ZVAL will be passed. I also added unit test to prove it works.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/30800237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31014809", "body": "@kirilltitov have you tried to use standard PHP's `empty()` method? It should work out of box.\nBtw. Is there any logic reason why syntax like `if empty x` should be supported at all?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31014809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31016085", "body": "Do you mean that inside Phalcon 2.0 there's `if empty x` syntax?\nI saw it as I tried to compile and test new version, I even created a fix but if documentation doesn't point to that syntax there's no need to support it? I prefer to change phalcon code. Makes sense?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31016085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31121893", "body": "@andresgutierrez Could you please enlighten us what should be the intended behaviour? Empty function is treated in special way - is it still valid?\n\nLink: https://github.com/phalcon/zephir/blame/master/Library/Expression.php#L972\n\nThanks in advance,\n\nKamil\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31121893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31125697", "body": "Thanks for PR merge, could you please give me a hint how to resolve the issue that both\n\n```\nif empty(x) \n```\n\nand\n\n```\nif empty x\n```\n\nare treated as special expression operator and generated in C as `ZEPHIR_IS_EMPTY()`. Surely if they are different first example should be changed to normal fcall as any other function?(`zephir_call_static_p1`). TestIf16 added by me shows the issue.\n\nThanks in advance,\n\nKamil\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31125697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31126585", "body": "Thanks for your quick reply. Implementation looks good and I'm sure that will convert all occurrences of both `empty x` and `empty(x)` to `ZEPHIR_IS_EMPTY`. My only concern is that `ZEPHIR_IS_EMPTY` won't work for some cases like the one from here:\nhttps://github.com/phalcon/zephir/blob/master/unit-tests/flow.php#L19\n\nPassing empty array as argument to `if empty(a)` should probably give true? I think that the question is like that:\n1) would we really like to convert both `empty x` and `empty(x)` to `ZEPHIR_IS_EMPTY`?\nand\n2) if yes - probably the implementation of ``ZEPHIR_IS_EMPTY` should be changed as it doesn't count in for empty arrays:\nhttps://github.com/phalcon/zephir/blob/master/ext/kernel/operators.h#L35\n\nThanks in advance,\n\nKamil\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31126585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31196429", "body": "@zaets28rus Yes, I know, but I wasn't even sure will it be merged/accepted so my commits were more explicit when merging and committing instead of rebasing. Normally I would rebase if I would be sure that's the right implementation. PS. My changes are clearly visible in 'Files Changed' tab. Thanks, Kamil\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31196429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32433697", "body": "Of course, with this `return false` normal method_func_call_p2 will be used?\nI rebased leaving only unit test as the rest is not needed(I wasn't aware of the trick with return false ;) )\n\nAny replies about my concerns(questions)? getting Phalcon 2.0 compiling at least? \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32433697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32434093", "body": "Thanks for quick reply. I tried again, this time everything gone well. Thanks a lot!\nSo when now it's at least possible to load the Phalcon 2.0 module - could we please agree on thing that it would be nice if changes would be checked(is it compiling) before merging?(including my changes). Travis(for Phalcon 2.0) would be the best option but at this moment quick compile is totally enough. What do you think?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32434093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32434369", "body": "It's totally fine(compilation only at this moment) - I believe that at this moment successful compilation will bring more contributors. Thanks for this conversation :+1:\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32434369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "lukaszlach": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/29601298", "body": "Why choose explicitly which variables/consts to obfuscate? I don't think there would be a situation where you would like to obfuscate just some of all variables. But the idea is nice, in my opinion it would be better to add a compiler switch to command line, that will either obfuscate all or none.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/29601298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kurtpayne": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/30089465", "body": "I also have problems with bitwise operators:\n\na & 1\na =& 1\na | 1\na =| 1\na > 2\na >> 2\na < 2\na << 2\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/30089465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kirilltitov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/30743275", "body": "It's critical for my STOMP implementation.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/30743275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31015529", "body": "Sure. Official Phalcon 2.0 branch.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31015529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ihor": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31483749", "body": "As I understand it is happening because unset statement is commented for some reason (https://github.com/phalcon/zephir/blob/d276733cea5816640da816de4a326d90f2d022bc/Library/Statements/UnsetStatement.php)\n\nTry to use array_splice() (http://us.php.net/manual/en/function.array-splice.php).\n\nGuys, are you planning to fix unset? Can I help you somehow? Thanks.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31483749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "nevernet": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31509147", "body": "i got same error:\n\n./bin/zephir compile\nPHP Parse error:  syntax error, unexpected '[' in /home/root/zephir/Library/Expression/PropertyAccess.php on line 111\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31509147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31509153", "body": "my php version is 5.3.x\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31509153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "denji": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31809072", "body": "@phalcon But why? in C there is support for \"else if\" and \"elseif\" or a problem in the design of the parser?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/31809072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "marciopaiva": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32604017", "body": "@phalcon check this http://code.google.com/p/exceptions4c/\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32604017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "endeveit": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32624050", "body": "@phalcon is it on a project roadmap?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32624050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hkdobrev": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32830744", "body": "The `UnsetStatement` is not commented out anymore in latest master. However I have a an uncaught exception if I use `unset` on a variable instead of an array element. Should I file a separate issue?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32830744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "odiel": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32969446", "body": "I'm not an expert on Zephir, but I think you need to use 'let' like here:\n\nhttps://github.com/phalcon/cphalcon/blob/2.0.0/phalcon/db/adapter.zep#L118\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32969446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "musaulker": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32970873", "body": "Thank you @odiel . I've tried several things to pass syntax problem but also 'let' keyword didn't solved it. \n\nAlso you can learn more about let from documentation: http://zephir-lang.com/control.html#let\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/32970873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33021421", "body": "Thanks @zaets28rus but it looks like I cannot iterate result set coming from mysql.. \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33021421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gggeek": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33262041", "body": "will give it a spin (try to get a vc11 build) if I have enough time - dont hold your breath though\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33262041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33268725", "body": "Mmm, 1st blocker: usage of strndup, which is not in windows.\nIt seems that 2 workarounds would be possible:\n1. rewrite code to avoid it\n2. implement it directly inside zefir, inside an ifdef\n\nFor 2, I found different versions online, not sure which one could/should be picked:\nhttp://research.microsoft.com/en-us/um/redmond/projects/invisible/src/crt/strndup.c.htm (nonfree?)\nhttps://github.com/zeromq/czmq/pull/275/files\nhttp://bytes.com/topic/c/answers/572347-strndup-rfc\nhttp://code.google.com/p/madp-win/source/browse/src/argp-standalone-1.3/strndup.c\nhttp://hg.pdclib.e43.eu/pdclib/src/d3ee6af748fa/functions/string/strndup.c\nhttp://svn.abisource.com/link-grammar/trunk/link-grammar/utilities.c\nhttp://www.zomeon.com/2375041/how-do-i-fix-the-build-for-mod_mono-when-it-cannot-find-strndup-on-freebsd\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33268725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "padraic": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33314773", "body": "Having the same issue here after checking if something is an array. Looks like all of the conditions are evaluated even if an earlier one fails. My condition is as follows:\n\n```\nif is_array(match) && count(match) == 2 && strlen(match[0]) >= minLength {\n```\n\nThe first check should fail and end that branch, but instead it evaluates the second (should also fail) and the third (which will net me a scalar as array error). The exact error occurs when using the extension from PHP with a PHP notice:\n\n```\nPHP Notice:  Cannot use a scalar value as an array in /home/padraic/Projects/play/test.php on line 4\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33314773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33314823", "body": "The use of for instead of foreach is fine, it's the same way in other languages and IMO, I prefer it.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33314823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33314859", "body": "See also: http://www.reddit.com/r/PHP/comments/1vnvr3/zephir_language_write_php_extensions_the_easy_way/ceufs73\n\nI'm doing a fullclean before each build which works.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33314859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33315141", "body": "@mruz Yep, I ended up doing the first suggestion myself and it works fine now. Just adds to a lot of if...else nesting what with the lack of elseif.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33315141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33412501", "body": "@phalcon That seems to have done the trick! The branch is being executed as expected.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33412501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "SamHennessy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33533883", "body": "Just eye balling this. You've not assigned a value to i.\n\n\"Only long and string values can be used as keys\" - http://zephir-lang.com/types.html#arrays\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33533883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33612593", "body": "This complies for me:\n\n```\n        int i;   \n        double x;\n        var v;\n        let x = 7.5, v = [], i = 0;\n        while i < 10{\n            let v[i] = x*x*5.5;\n        }\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33612593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33616363", "body": "Complies and runs. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33616363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "duythien": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33558196", "body": "I hope zephir feature like C like double v[];\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33558196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33654233", "body": "Hi all\nlet v[i] = x_x_5.5; //not working but\n\nlet v[i] = [x_x_5.5];//is working, \nand i can use it by v[i][0] It can meet necessary needs.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33654233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "amnuts": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33602635", "body": "I have to admit to not seeing that paragraph!  In which case the documentation may need a little tweak because the sentence reads, \"In Zephir, multi-line comments are also used as docblocks...\" - the keyword there being 'also', suggesting they can be used as normal comment as well as docblocks.\n\nAlso, think about this rather pointless example:\n\n``` zephir\nnamespace Test;\n\n/**\n * Helpful docblock\n *\n * @todo Code this thing\n */\nclass PointlessClass\n{\n    public function isarray(var arr)\n    {\n        if (is_array(arr)) {\n            echo \"Yes, this is an array\";\n        } else {\n            echo \"Nope, not an array\";\n        }\n\n       /**\n        Probably not useful here\n        */\n    }\n}\n\n/*\nProbably quite pointless docblock here, too\n*/\n```\n\nAll valid, but possibly not useful docblocks?\n\nWhat I thought was a valid use of multi-line comments, and the reason why I stumbled on this, was being able to comment out blocks of code for I quickly tried something without having to delete all the code and put it back again:\n\n``` zephir\nnamespace Test;\n\nclass PointlessClass\n{\n    public function isarray(var arr)\n    {\n        if (is_array(arr)) {\n            echo \"Yes, this is an array\";\n        } else {\n            echo \"Nope, not an array\";\n        }\n    }\n/*\n    private function notReady()\n    {\n        // lots of code here\n    }\n\n    public function keepForNowButDoNotUse()\n    {\n        // lots of code here\n    }\n\n    public function loadsMore()\n    {\n        // lots of code here\n    }\n*/\n}\n```\n\nJust my opinion, of course, but if you can support both uses that'd be great! ;-)\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33602635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "treffynnon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33618430", "body": "Combining information from the manual (file/function naming standards), the\npull request comments I mentioned above and your response to this issue I\nhave an optimizer that builds! Just have to sort out some type juggling on\nan argument to the 3rd party function now at least I think that is the\nissue - no compiler messages, but goes into an infinite loop when executed\nfrom PHP (should only do 1,000 iterations).\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33618430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33867911", "body": "Is there anything special I need to do for string parameters and return\nvalues in Zephir for optimizers? My optimizer expects to get and return\nchar\\* so I think this is causing the issue.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33867911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "swen100": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33799736", "body": "i get the same error :-(\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33799736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Skpd": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33868974", "body": "**./unit-tests/run_tests** does not contain **unit-tests/bitwise.php** and I'm still getting erorrs when trying to compile bitwise tests:\n\n```\nParseException: Syntax error in zephir/test/bitwise.zep on line 18\n\n       c = a & b;\n    ---------^\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33868974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33902286", "body": "Thanks, didn't see anything in docs about escaping operators.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33902286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "nkt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33900799", "body": "@tamaranga I am not sure, but you should show some of the code that causes this behaviour\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33900799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/comments/5833021", "body": "Actually you can use `$resource` if it's fundamentally.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5833021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7678411", "body": "Please remove all `break`, after return.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7678411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7689639", "body": "@ovr do u suggest rebase instead of merge?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7689639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7689643", "body": "@ovr whoa! Thanks for this permission!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7689643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7689712", "body": "@ovr do u suggest change my avatar to boobs too?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7689712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7872159", "body": "Did you compile parser and run `zephir fullclean`?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7872159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7973990", "body": "@dreamsxin it's weird, https://github.com/php/php-src/blob/PHP-5.5/ext/reflection/php_reflection.h\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7973990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/8210970", "body": "@ovr great release.\nPlease when master builds will be passed, update `Compiler::VERSION`.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/8210970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/8211357", "body": "@ovr ![](http://i523.photobucket.com/albums/w358/jamesilas/Linus_Torvalds_Facepalm.jpg)\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/8211357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/8235596", "body": "oO\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/8235596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/8304989", "body": "@phalcon this is just not pushed generated code.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/8304989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/8318020", "body": "Nice. But this is not PHP behaviour.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/8318020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/8318989", "body": "Of course. But why we allow to assign `null` as default value for arrays?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/8318989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/8319559", "body": "I've checkout docks changes, as I understood, today `null` as default value for typed parameters converts to default value for this type (`bool` -> `false`, `int` -> `0`), right?\nSo maybe we should implement `default` check?\n\n``` zep\nif default arr || default num {\n}\n```\n\nInstead of \n\n``` zep\nif empty arr || num == 0 {\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/8319559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/8323362", "body": "I suppose second variant.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/8323362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9701340", "body": "it's not right, you should move it to start of file\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9701340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9701719", "body": "Ok. If you in c use library just in one function do you include its inside this function?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9701719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9701948", "body": "this is not a reason for writing code smells\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9701948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9865028", "body": "use assertFalse\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9865028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9865063", "body": "use assertFalse\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9865063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9865226", "body": "use assertInternalType($expected, $actual[, $message = ''])\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9865226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9970880", "body": "wtf?\nMay be you should create class?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9970880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9970882", "body": "Why not microtime(true)?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9970882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9970909", "body": "You write benchmark. There is important speed of benchmark itself. I think you should replace `getmicrotime` by `microtime(true)`\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9970909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9972112", "body": "Why not an interface?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9972112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9978436", "body": "Please remove first slash\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9978436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/10030817", "body": "typo\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/10030817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/11546160", "body": "Please remove repeated `array`\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/11546160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/12499174", "body": "Please replace it by variable and add unit-test.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/12499174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/12470131", "body": "Maybe change it to `break`?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/12470131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/12477733", "body": "So, please, add comment about that.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/12477733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/12509870", "body": "That is conflict\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/12509870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/12509872", "body": "Conflict again\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/12509872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/13076348", "body": "Can you add test on this.\nI can not understand what for you adds this replacing:(\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/13076348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/14851715", "body": "Please remove comparison.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/14851715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/14851717", "body": "Please use `assertSame`\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/14851717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/14857252", "body": "yes, you are.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/14857252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/14857254", "body": "yep\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/14857254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/15860404", "body": "OMG. Why we should drop 5.3 support?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/15860404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/15860435", "body": ":-1:\nMaybe you can split this code in another project?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/15860435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/15860565", "body": "This is very bad hardcode.\nWe can add `before-build`, `after-build` sections, and add this code there. For example there is no `service` in OS X\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/15860565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/15871268", "body": "You can replace it by `react/event-loop`\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/15871268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/14851733", "body": "Please remove this hardcode.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/14851733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/17120941", "body": "Maybe concat this statement with previous?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/17120941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/17149687", "body": "``` diff\n- $paramStr .= ' = ';\n- $paramStr .= $this->wrapPHPValue($parameter);\n+ $paramStr .= ' = ' .  $this->wrapPHPValue($parameter);\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/17149687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/18577212", "body": "This code duplicate mine. Remove one of variants, please.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/18577212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/18891703", "body": "Why do you replace `zephir_update_property_this` by `zephir_update_property_zval`. I don't know difference, but it's weird. \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/18891703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/18322672", "body": "Actually this is not good working implementation.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/18322672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "tamaranga": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33908675", "body": "to reproduce:\n\n```\nvar a = 0, b;\nlet b = ceil(2 / 2);\nif a == b {\n    // some code\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/33908675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "dreamsxin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/comments/5938508", "body": "Why remove this?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5938508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7973936", "body": "Happen fatal error: ext/reflection/php_reflection.h: No such file or directory.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7973936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/7974013", "body": "@nkt The php-src install not to install the head file.\nLike https://travis-ci.org/dreamsxin/cphalcon/jobs/36643966#L766\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/7974013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/88611266", "body": "Oh, I will correct it, ths.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/88611266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/106793835", "body": "Fllow `zend_get_called_scope`,  If there is no `object` then use `ce` set to `This`\r\n```c\r\nZEND_API zend_class_entry *zend_get_called_scope(zend_execute_data *ex) /* {{{ */\r\n{\r\n\twhile (ex) {\r\n\t\tif (Z_TYPE(ex->This) == IS_OBJECT) {\r\n\t\t\treturn Z_OBJCE(ex->This);\r\n\t\t} else if (Z_CE(ex->This)) {\r\n\t\t\treturn Z_CE(ex->This);\r\n\t\t} else if (ex->func) {\r\n\t\t\tif (ex->func->type != ZEND_INTERNAL_FUNCTION || ex->func->common.scope) {\r\n\t\t\t\treturn NULL;\r\n\t\t\t}\r\n\t\t}\r\n\t\tex = ex->prev_execute_data;\r\n\t}\r\n\treturn NULL;\r\n}\r\n``", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/106793835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/106793873", "body": "```c\r\nstatic zend_always_inline void zend_vm_init_call_frame(zend_execute_data *call, uint32_t call_info, zend_function *func, uint32_t num_args, zend_class_entry *called_scope, zend_object *object)\r\n{\r\n\tcall->func = func;\r\n\tif (object) {\r\n\t\tZ_OBJ(call->This) = object;\r\n\t\tZEND_SET_CALL_INFO(call, 1, call_info);\r\n\t} else {\r\n\t\tZ_CE(call->This) = called_scope;\r\n\t\tZEND_SET_CALL_INFO(call, 0, call_info);\r\n\t}\r\n\tZEND_CALL_NUM_ARGS(call) = num_args;\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/106793873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "AchrafSoltani": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/comments/6649574", "body": "Hello,\n\nI've been following the bug report and then the bug fix,\n\nDoes this mean that an extension can reference and use components from Phalcon framework for example ?\n\nRegards\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/6649574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "brandonlamb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/comments/6830776", "body": "@ovr This breaks my build now, zephir started complaining about sending the wrong params to a method, in my case just calling \"this->endProfile()\" where endProfile has two optional parameters\n\nprotected function endProfile(string! statement = \"\", var values = []) -> void\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/6830776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "darkgaro": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/comments/8386168", "body": " && fcic.initialized   change for some reason causes an issues in my app, before removal of it, everything works fine.  Referenced in https://github.com/phalcon/zephir/issues/605\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/8386168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "olivier-monaco": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/comments/9549502", "body": "I think this block must be line 35. If I don't install zephir into /usr/local/bin, I may not want to have bash completion script installed.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/9549502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "ogarbe": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/comments/11520488", "body": "pretty bad but didn't manage not to overwrite value otherwise\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/11520488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/18577399", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/18577399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/31694301", "body": "pretty bad but didn't manage not to overwrite value otherwise\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/31694301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mdular": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/comments/17405349", "body": "the '-' case is not accounted for after the change\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/17405349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/17405383", "body": "Same as in ZE3. Sorry to repeatedly point it out like this, just want to make it easy to spot :)\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/17405383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "rodrigorm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/14853450", "body": "Can I remove all the comparisons?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/14853450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/14853452", "body": "Can I change all asserts?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/14853452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/15547987", "body": "If I remove this the build fails.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/15547987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "gsouf": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/23503274", "body": "yes indeed, going to remove it\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/23503274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "virgofx": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/60139560", "body": "Maybe spell as \"delimeter\" as well on line 84.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/60139560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "hervems": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/62404428", "body": "Because, in PHP 7.0.X, it's deprecated\n\n```\n/* PHP-7 doesn't support symbol_table substitution for functions */\nZEND_ASSERT(fci->symbol_table == NULL);\n```\n\nand in PHP 7.1.X (see master of PHP, it's deleted), see :\n\nzend_API.h :\n\ntypedef struct _zend_fcall_info {\n    size_t size;\n    zval function_name;\n    zval *retval;\n    zval *params;\n    zend_object *object;\n    zend_bool no_separation;\n    uint32_t param_count;\n} zend_fcall_info;\n\nso, it's not necessary to use it.\n\nI saw in Zephir, no impact to delete this line and to set call->symbol_table\n= NULL in \"\nextended/fcall.c\".\n\n2016-05-05 12:43 GMT+02:00 Steffen Butzer notifications@github.com:\n\n> In kernels/ZendEngine3/fcall.c\n> https://github.com/phalcon/zephir/pull/1227#discussion_r62171992:\n> \n> > @@ -420,7 +420,6 @@ int zephir_call_user_function(zval _object_pp, zend_class_entry *obj_ce, zephir_\n> >     fci.params         = NULL;\n> >     //fci.params: Passed as separate parameter to prevent the need to convert zval *_ to zval *\n> >     fci.no_separation  = 1;\n> > -   fci.symbol_table   = NULL;\n> \n> is there any reason you removed this line?\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/phalcon/zephir/pull/1227/files/c2d15c599eeeff207834c732d7c7cd6a79d2331a#r62171992\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/62404428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/62415803", "body": "If you follow the execution path after the line :\n\nfci.symbol_table = null in zephir_call_user_function\n\nthe unique usage of fci->symbol_table is in extended/fcall.c, line 144.\n\nwe never go into the code of PHP in this context, so why initialize an\nattribut when it's not used.\n\nSo I'm agree I can add a :\n\n#if PHP_VERSION_ID < 70100\n  ...\n#endif\n\nto be more secure.\n\n2016-05-07 1:56 GMT+02:00 Steffen Butzer notifications@github.com:\n\n> In kernels/ZendEngine3/fcall.c\n> https://github.com/phalcon/zephir/pull/1227#discussion_r62405609:\n> \n> > @@ -420,7 +420,6 @@ int zephir_call_user_function(zval _object_pp, zend_class_entry *obj_ce, zephir_\n> >     fci.params         = NULL;\n> >     //fci.params: Passed as separate parameter to prevent the need to convert zval *_ to zval *\n> >     fci.no_separation  = 1;\n> > -   fci.symbol_table   = NULL;\n> \n> Just because you saw no impact it doesn't mean there won't be one.\n> Removing that would be ok if there was no version using it.\n> \n> Even your own code example shows why it's not a good idea:\n> ZEND_ASSERT(fci->symbol_table == NULL); might fail since ->symbol_table\n> might be initialized to a not-null value (due to not-zeroed memory\n> allocation).\n> \n> So we'll have to introduce ifdef's for 7.1.X here.\n> (since that won't land in PHP7.0.X exactly for that\n> backwards-compatibility argument above)\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/phalcon/zephir/pull/1227/files/c2d15c599eeeff207834c732d7c7cd6a79d2331a#r62405609\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/62415803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "rafmichalak84": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/99669750", "body": "OK you right", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/99669750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/99669763", "body": "Yes you right", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/99669763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}