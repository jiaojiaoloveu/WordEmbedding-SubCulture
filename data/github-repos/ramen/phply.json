{"_default": {"1": {"dbaio": {"issues": [{"url": "https://api.github.com/repos/viraptor/phply/issues/43", "title": "Requirements and test", "body": "Hello.\r\n\r\nIt seems that after bd2491b4d3f9fc64886b00e577139bd897398373 , `ply` needs to be on `setup_requires` as well. \r\n\r\nIs there any reason to remove the test suite from sdist? On FreeBSD we prefer to fetch Python packages through PyPI and now the test is not present there.\r\n\r\nIt would be great if you can change it back.\r\n\r\nAnd thanks for your work.\r\n\r\nRegards.", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/43/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "FriedrichFroebel": {"issues": [{"url": "https://api.github.com/repos/viraptor/phply/issues/41", "title": "Comment support for parser", "body": "Currently, there seem to be two different lexers: the normal one and a full one (which preserves comments for example). There is only a normal parser, so I would have to use the full lexer if I want to work with the comments later. Having a full parser which supports comments would be easier to use. (Using `parser.parse(infile.read(), lexer=full_lexer.clone())` throws an SyntaxError on `<?php` which does not occur when calling a `full_lexer.clone()` instance directly without the parser.)\r\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/41/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/viraptor/phply/issues/comments/355732562", "body": "I cloned the latest master branch and get the following tree inside the `phply-1.2.1.tar.gz` archive (inside the `phply-1.2.1` folder in the `dist/phply-1.2.1.tar` directory/archive):\r\n\r\n```\r\n.\r\n|   PKG-INFO\r\n|   README.md\r\n|   setup.cfg\r\n|   setup.py\r\n|   tree.txt\r\n|   \r\n+---phply\r\n|       phpast.py\r\n|       phplex.py\r\n|       phpparse.py\r\n|       pythonast.py\r\n|       __init__.py\r\n|       \r\n+---phply.egg-info\r\n|       dependency_links.txt\r\n|       entry_points.txt\r\n|       namespace_packages.txt\r\n|       not-zip-safe\r\n|       PKG-INFO\r\n|       requires.txt\r\n|       SOURCES.txt\r\n|       top_level.txt\r\n|       \r\n\\---tests\r\n        test_filtered_lexer.py\r\n        test_lexer.py\r\n        test_parser.py\r\n        __init__.py\r\n```\r\n\r\nInstalling `phply` using `python -m setup install` from the cloned repository works, so there seems to be a problem with the direct pip installation.\r\n  ", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/355732562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/358579281", "body": "It seems to work now. Forcing the installation of the old 1.2.1 release did work this time, too, so somehow strange seemed to have happened last time.", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/358579281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/358586686", "body": "Based on [the phply modifications in tk.phpautodoc](https://github.com/tk0miya/tk.phpautodoc), the following code should enable a basic parser with comment support (the line numbers may be wrong, but this should not be a problem at the moment).\r\n\r\nCurrently this modifications are done directly in the existing code, but it probably would be better to use two parsers (one with comment support and one without, as there is an [issue comment](https://github.com/viraptor/phply/issues/3#issuecomment-3318177) that a full-blown parser might we overkill). I could not yet figure out how to integrate the code to let both parser options work side-by-side - otherwise I probably would already have opened a PR for it.\r\n\r\n```\r\n---\r\n phply/phplex.py   |  6 +++---\r\n phply/phpparse.py | 11 +++++++++++\r\n 2 files changed, 14 insertions(+), 3 deletions(-)\r\n\r\ndiff --git a/phply/phplex.py b/phply/phplex.py\r\nindex 93b3f35..2251299 100644\r\n--- a/phply/phplex.py\r\n+++ b/phply/phplex.py\r\n@@ -82,9 +82,6 @@ unparsed = (\r\n \r\n     # Open and close tags\r\n     'OPEN_TAG', 'OPEN_TAG_WITH_ECHO', 'CLOSE_TAG',\r\n-\r\n-    # Comments\r\n-    'COMMENT', 'DOC_COMMENT',\r\n )\r\n \r\n tokens = reserved + unparsed + (\r\n@@ -133,6 +130,9 @@ tokens = reserved + unparsed + (\r\n \r\n     # Backtick\r\n     'BACKTICK',\r\n+\r\n+    # Comments\r\n+    'COMMENT', 'DOC_COMMENT',\r\n )\r\n \r\n # Newlines\r\ndiff --git a/phply/phpparse.py b/phply/phpparse.py\r\nindex 910fa75..7f22c9a 100644\r\n--- a/phply/phpparse.py\r\n+++ b/phply/phpparse.py\r\n@@ -55,6 +55,7 @@ else:\r\n \r\n # Get the token map\r\n tokens = phplex.tokens\r\n+ast.Comment = ast.node('Comment', ['text'])\r\n \r\n precedence = (\r\n     ('left', 'INCLUDE', 'INCLUDE_ONCE', 'EVAL', 'REQUIRE', 'REQUIRE_ONCE'),\r\n@@ -143,6 +144,7 @@ def p_top_statement_list(p):\r\n \r\n def p_top_statement(p):\r\n     '''top_statement : statement\r\n+                     | comment\r\n                      | function_declaration_statement\r\n                      | class_declaration_statement\r\n                      | HALT_COMPILER LPAREN RPAREN SEMI'''\r\n@@ -215,6 +217,7 @@ def p_inner_statement_list(p):\r\n \r\n def p_inner_statement(p):\r\n     '''inner_statement : statement\r\n+                       | comment\r\n                        | function_declaration_statement\r\n                        | class_declaration_statement\r\n                        | HALT_COMPILER LPAREN RPAREN SEMI'''\r\n@@ -659,6 +662,7 @@ def p_class_statement_list(p):\r\n \r\n def p_class_statement(p):\r\n     '''class_statement : method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body\r\n+                       | comment\r\n                        | variable_modifiers class_variable_declaration SEMI\r\n                        | class_constant_declaration SEMI\r\n                        | USE fully_qualified_class_name LBRACE trait_modifiers_list RBRACE\r\n@@ -672,6 +676,8 @@ def p_class_statement(p):\r\n             p[0] = ast.TraitUse(p[2], [], lineno=p.lineno(1))\r\n         else:\r\n             p[0] = ast.ClassVariables(p[1], p[2], lineno=p.lineno(3))\r\n+    elif len(p) == 2:\r\n+        p[0] = p[1]\r\n     else:\r\n         p[0] = ast.ClassConstants(p[1], lineno=p.lineno(2))\r\n \r\n@@ -1660,6 +1666,11 @@ def p_encaps_var_offset_variable(p):\r\n     'encaps_var_offset : VARIABLE'\r\n     p[0] = ast.Variable(p[1], lineno=p.lineno(1))\r\n \r\n+def p_comment(p):\r\n+    '''comment : COMMENT\r\n+               | DOC_COMMENT'''\r\n+    p[0] = ast.Comment(p[1])\r\n+\r\n def p_empty(p):\r\n     'empty : '\r\n     pass\r\n-- \r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/358586686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "nuno-silva": {"issues": [{"url": "https://api.github.com/repos/viraptor/phply/issues/27", "title": "AST node documentation", "body": "I found it hard to find out what each Node's attribute mean. Some documentation would make it easier to use your project.", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/27/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/viraptor/phply/issues/comments/268108170", "body": "@soulseekah they would behave the same, yes. However, in the tool I was working on, it would be \"weird\" for a `die` in the configuration file to also match an `exit` call, though they are semantically the same.\r\n\r\n@viraptor to be consistent with Zend, I don't think there's a need to make them separate nodes. As far as I'm concerned, a `name` attribute would do. Don't worry too much, though, as I won't be working on my \"SS1617\" project so soon ;)", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/268108170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/268791547", "body": "@viraptor thank you for the change. See my comment in the PR.", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/268791547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/268791814", "body": "@viraptor the `type` attribute works, but the `lineno` attribute seems to have been broken: it's always 0.", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/268791814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "viraptor": {"issues": [{"url": "https://api.github.com/repos/viraptor/phply/issues/26", "title": "Generalised variable entries", "body": "Currently variables are parsed in a more liberal way than what php allows. For example: `isset($a->f());` is parserd by phply, but not by php.\r\n\r\nSplitting the definition of a variable into something closer to rvalue/lvalue (can/cannot be assigned) could make things simpler. But not necessarily - experiment.", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/26/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/25", "title": "Replace AUTHORS with autogenerated file for releases", "body": "", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/25/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/23", "title": "Make sure the latest release of most known PHP projects can be parsed without issues", "body": "The following projects should parse without errors:\r\nDone:\r\n- phpbb\r\n- phpmyadmin\r\n- WordPress\r\n- joomla-cms\r\n- drupal\r\n- mediawiki\r\n\r\nIn progress:\r\n\r\nNot checked yet:\r\n- symfony\r\n- laravel\r\n- magento\r\n- composer", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/23/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/viraptor/phply/commits/c1361ba73781734285a136c939ec24a18be95c93", "message": "Version 1.2.2"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/52fd189e8ebb183f3552c0c6fff92ae4c414c952", "message": "Don't package tests in sdist"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/9e76c24857b80b07d2cdb4da9cde1b1b52ea49ad", "message": "Merge pull request #42 from viraptor/build-parsetab\n\nGenerate parsetab during the build"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/bd2491b4d3f9fc64886b00e577139bd897398373", "message": "Generate parsetab during the build"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/d7719f8c281e1db6fb2d5d9b05e37d00385b1d35", "message": "Version 1.2.1"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/8fc5af482ef03485fafd2517839d694248b30f8a", "message": "Merge pull request #39 from nijel/heredoc\n\nFix heredoc parsing"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/88040c69f028a16f7c23673c135e59b753888aab", "message": "Version 1.2.0"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/fb411e388cd7b828701d5056eb4745842d765337", "message": "Merge pull request #37 from viraptor/cheaper-heredoc\n\nMerge text lines in heredoc"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/574f4958e760860aa5cf557cf8249940a4f1d3c7", "message": "Merge text lines in heredoc\n\nIf heredoc contains only simple text, it can be merged into a single\nstring rather than a tall binop structure.\nEven if some variables are included as well, the structure should be\ncheaper now."}, {"url": "https://api.github.com/repos/viraptor/phply/commits/4a21aa038611ab6ebd0bf8ea5d3ee97e624339d3", "message": "Version 1.1.0"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/0c4012e5ac60623b71d9748b1e12a60c289cce4c", "message": "Merge pull request #9 from beh9540/master\n\n- Adds support for instanceof in PHP to Python conversion"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/51674af7e95ed7ea473f5a2ac748d7a4b6645c0b", "message": "Merge pull request #36 from viraptor/test-in-py36\n\nMake travis test py36"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/a89c88262d7532ba5bf6d9f99231fc6ecc481b87", "message": "Activate 3.6 in travis"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/e5f78b9c4977168f9751b86e26468cde6cde9a5e", "message": "Make travis test py36"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/dc81523e146ca0d4bfbd70a4e6c5acbbbe7cb418", "message": "Merge pull request #35 from viraptor/heredoc27-test\n\nTest using unicode as well for py2.7"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/aa9f24594f235fb98553c66f2cb45b3791c86b99", "message": "Test using unicode as well for py2.7"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/a8a58f1ed2bf0cbd915a8cb1fc2075a2e609f7ce", "message": "Merge pull request #33 from nijel/py2-unicode\n\nFix string assertion for Python 2"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/efe9403948f46ac09855ef246beab8d90fe0a323", "message": "Ignore the build directories"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/caedc7cd1a098a6ab1cce80e866aa62a7837985e", "message": "Version 1.0.0"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/dfef6a7605fcfff5d2323366f9e95430a5941773", "message": "Merge pull request #30 from viraptor/exit_die\n\nAdd a field to Exit to differentiate exit/die"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/99a5b522c5c2c5a7a8c7d6556ab8aa7b16333e87", "message": "Fix Exit lineno propagation"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/527cb316dfba6561516c244f078038b4b55754ca", "message": "Add a field to Exit to differentiate exit/die\n\nThis will allow apps using phply to construct better messages, even if\nthe constructions are equivalent in PHP.\n\nFixes #28"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/318438ebaddd0e8531bee01554bf90c0cdcc7139", "message": "Merge pull request #29 from jorkro/master\n\nAccept <?PHP (all capitals) as alternative open tag"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/a13489e0af5fb7f48964d228507160b457bd3cd9", "message": "Configure tox test environments"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/dc97bd980071f05cd9b0d654f725e71dce1c9b49", "message": "Cleanup setup files"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/64d3e9aadfe1688c00fa75d23adb383fcb778b52", "message": "Foreach cannot take a ref for key. Simplify AST"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/6ab4ebe87c201af2b02bd2a52cf2be77e60dcc57", "message": "Bytes were never used"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/0f8b997d2df894e71e17e8d24fb0c2892088031c", "message": "Specify coding"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/c78304537b41cf185fac96efafd5865fdd43db6e", "message": "Unicode literals in setup.py"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/d8e3a6fd54ffda7fa263f1031da75b2e4a4ec9fb", "message": "Do the testing on travis"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/3b939fc5078faabee19fc03483454751273eb73b", "message": "Refresh README"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/ce1511292e2693365afd069aa070ce8c27694db2", "message": "List assignment in foreach"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/2f590f70df787b62cc6bb8a87714ee3b94301ec0", "message": "Allow \"static\" as instanceof target"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/f5b1b904fd36ac371b5cf39759a4369fed60aa9c", "message": "Allow class names in trait rename"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/9bd539e097e9de0649cd9e564a0241898ed7046a", "message": "Strip end of line whitespace"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/c9df48995bb5489787e5a0a0eeb0178ddf1a716f", "message": "Add nowdoc support"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/e22680b6195a342987ed7c1563e4d19977b9030b", "message": "remove implemented todos"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/9d190c5c8c571e7bbfd83565934ab02a41ff21bf", "message": "Implement static method call with dynamic name"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/b03c4ba2b8351789389fc7e1d7e0e83c5c777637", "message": "Allow $obj::{$prop_name} access"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/088c2fa52abdd15e0f06d22e2ef29b3ef2ce4144", "message": "Add yield support"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/eb769a8faf5b40478298a59a27509e315a506822", "message": "Allow longer expressions in foreach target"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/755ddbd5b7462f34f5d6ec772d4c486a9ebc77d5", "message": "Indexing a function result returns an isset()able variable"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/432c8c6e999144308638a74ecf826c7d49280fe4", "message": "Fix parser tests"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/5b539bff3b73f18a59bfad88f6901ebc7cb7585b", "message": "[breaking] Don't create global parser on import. Don't debug by default."}, {"url": "https://api.github.com/repos/viraptor/phply/commits/189689e8aaad0288bca3b1ba3224b081df7ed8c6", "message": "Add myself as new maintainer"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/0be9beb56e4013dfc4d9f1e0b3b0965e87863168", "message": "Add multiple offset references on expressions"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/7ccd0e10bf8598b1df545c0e68005d716ad72fea", "message": "Support binary numbers"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/c6527538243993a6e9bf10f371b4745606d18dc7", "message": "Handle trait renames"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/d199b35bcae764b2eb95c59518c1d7b9b9b8a6c0", "message": "Add binary cast"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/872f1471452eb56b5d9ccda3653e54d9ec472387", "message": "Handle incomplete \\xHH sequences"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/baf3b2619e1f02a34e54f27ef9d7388218d66985", "message": "Report which file caused a parser exception"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/b2faea25928a67f2b381dbf83928f7c37e07dafd", "message": "Allow constant expressions in constant arrays"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/e2c6fb0f579c9cf266555d897bc4885c9519616c", "message": "Add static expressions support"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/0fe268eb09b7b6e1906507790ec96ed8e185a3f3", "message": "Make stdin parser work again"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/4c1c578bd49f9678595c910aea2834ecdb7b4e2c", "message": "A::class is the same as 'A' in practice."}, {"url": "https://api.github.com/repos/viraptor/phply/commits/d086a4c72196cb42460e150ab462c9444da28956", "message": "Traits can have renames"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/2debcb2dbdb4ef3e08a6e9fb60fb5b198f1027d2", "message": "Traits can have class variables"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/030f63f31d5cdb74b5ad020848af4ce923058dc4", "message": "Add trait support"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/832c9488972f5e7e7902937183e62cf16710fab3", "message": "Support trait use in classes"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/27c417ebe188ab1dc1323f8f60a7eaf45ebb43e9", "message": "Add naive binary string handling\n\nContent is irrelevant at the moment, binary strings are the same as\nnormal ones."}, {"url": "https://api.github.com/repos/viraptor/phply/commits/94d80b46e7a24d9df1c4dcdf9c126ebfbc1c08eb", "message": "Add support for (expr)->prop syntax"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/92e6d74d741e35506c45f20de34257ec160af395", "message": "Add constant heredoc and fix heredoc newline\n\npreviously heredocs ended with an unnecessary newline"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/8c77a6ba82854494b4373b1b18774ccfeba9d288", "message": "Add debug option to parser runner"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/31b203642cc4c5e5d6f5250c6c692128b62e74f0", "message": "Better parser runner.\n\nSupport recursive parsing in one run (saves time on parser\ngeneration/loading). Support quiet run (only reports errors, good for\ntesting parser against large codebases)"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/0671884c4729127fb9859dd7ee3922768b8a2ef4", "message": "Add finally support"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/ef62d35f2907701f24179cd70ee5eca959c09714", "message": "Allow literal array in function default arg"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/f20016940292a78d50e08687d34cd28f286f682c", "message": "Implement bracket only arrays []"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/46f3d28130df4d5ca3e79a583681a941888592b7", "message": "Temporarily fix escaped string literals"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/7990b1e241a6f6bc80bbd03b37146810c1795112", "message": "Ignore vim swap files"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/54609bf66574eed92b8920614118d20fdf10cd4f", "message": "Various fixes"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/7ccc055ca64a0558728b91f2c44b8f83f61acbf7", "message": "Merge remote-tracking branch 'dgasson/master'"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258966279", "body": "Thanks for the patch @y0no !\nIt seems that new versions of php (>=7) turn invalid octal numbers into a syntax error, so there's no good way to seamlessly support both \"correct\" behaviours.\n\nOne way I see that could potentially fix this is to basically have a v5/v7 switch, but that would essentially require 2 separate parsers. I'd rather support the current version properly.\nAlternatively there could be relaxed/strict mode if there are enough edge cases for it.\n\nHave you got a preferred approach or other ideas?\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258966279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258966942", "body": "Thank you for raising this @LocutusOfBorg !\n\nAnother series of patches has been merged for py3 support and it should be pretty much equivalent. If you see other py3 issues, please raise them :)\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258966942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258967652", "body": "This PR and other changes from @soulseekah have been merged out of GitHub. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258967652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258967837", "body": "py3 support has been added from another set of patches. Thanks for the contribution!\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258967837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258968125", "body": "Fixed. The change has been merged. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258968125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258968645", "body": "Thanks for the report!\nThe resolution is what @soulseekah said. Parsing handles those already at the moment.\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258968645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258969422", "body": "Thanks for the contribution! There are some random whitespace issues, but I'm happy to merge the change when they're fixed.\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258969422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258970099", "body": "The change has been merged out of GitHub. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258970099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258970267", "body": "The change has been merged out of GitHub. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258970267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258970328", "body": "The change has been merged out of GitHub. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258970328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258970626", "body": "The change has been merged out of GitHub. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258970626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258971167", "body": "Thanks for the contribution @bored-engineer ! phply is under new management now ;)\nI'll try to process the linespan changes soon. Py3 patches will likely be removed, since it's implemented already in another change set.\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258971167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258973901", "body": "Thanks for the contribution!\nI'm not happy with completely turning off the debug, but I will change it to reading a PHPLY_DEBUG environment variable instead. I can't merge this change with the setup.py changes appended though.\nThe update should be committed soon.\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258973901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258975094", "body": "Thank you very much. Sorry for the long wait. I just took over the project and I'll try to get it active again. :)\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258975094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/259019689", "body": "The issue is fixed in 5b539bff3b73f18a59bfad88f6901ebc7cb7585b, but in different way. Parser is not created automatically on import anymore, which is a better approach anyway. parser.out is not created by default, unless `debug=True` is passed in.\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/259019689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/259047964", "body": "joomla done\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/259047964/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/259600685", "body": "Done in d8e3a6fd54ffda7fa263f1031da75b2e4a4ec9fb\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/259600685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/259600817", "body": "drupal and mediawiki done\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/259600817/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/267860619", "body": "Great! Thank you for the contribution @jorkro :)", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/267860619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/267878243", "body": "@bored-engineer I'm just trying to process this patch and thinking of how to really handle linespans. As it is currently linespans will always belong to one token only. But that means that linespan of isset in:\r\n\r\n    isset(\r\n      $a,\r\n      $b);\r\n\r\nis still (1,1). I guess I'd expect (1,3). Am I misunderstanding how this should work? Which version of behaviour would you expect?\r\n\r\n(merged temporarily in https://github.com/viraptor/phply/tree/linespan)", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/267878243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/267881220", "body": "Sorry, I inherited the project some weeks ago and wonder what the next steps will be.\r\nTo be honest, whatever time I'm going to put into it are unlikely to be documentation, but rather some polish and an official release.\r\n\r\nI will happily merge any incoming documentation though.", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/267881220/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/267881483", "body": "Good idea. I'll make them separate nodes.", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/267881483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/268152186", "body": "I see the point of at least annotating which one was used. One would be for any project which wants to do a roundtrip to a similar PHP representation. Another one is just for better user reports (\"Foobar kind of problem when you call \"die\" on line 123\").\r\n\r\nBut I agree another node is not really necessary. Maybe just an attribute to identify them?", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/268152186/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/268719534", "body": "@nuno-silva Let me know if the PR referenced above works for you.", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/268719534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/329060434", "body": "Can you provide the file you used? Or does it happen with any large heredoc?\r\nAlso, does the heredoc include any variables, or is it clean text?", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/329060434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/338939555", "body": "Well spotted. Thanks for reporting!", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/338939555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/338944781", "body": "I'm not a great fan of doing this on every setup.py run. I'll have a look if there's any way to add this as a step to `sdist`.", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/338944781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/339135389", "body": "I'll give this a go when I have a moment: https://stackoverflow.com/a/46909717/31667", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/339135389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/342098911", "body": "Awesome, thank you!", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/342098911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/355725692", "body": "@FriedrichFroebel I'll see what I can find out, but I don't have any access to windows machines, so it's a bit hard to debug.\r\n\r\nCould you checkout the repo, build it using `python setup.py sdist`, and post the tree of files in the created zip file? That would be very helpful.\r\n  ", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/355725692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/357489108", "body": "I can't find anything strange with the package. For the new version I published both the sdist and a wheel distribution. Let me know if that solves the problem.", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/357489108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/357489292", "body": "It's not that there are two different lexers: `FilteredLexer` provides some fixups that are harder in the parser and is required.\r\n\r\nThe parser itself doesn't support comments at all at the moment. Unfortunately I don't have plans to implement it. I'll be happy to accept PRs that do it.", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/357489292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": []}, "y0no": {"issues": [{"url": "https://api.github.com/repos/viraptor/phply/issues/21", "title": "Error when parsing octal notation", "body": "Hi,\nThank you for this great project! I use it to deobfuscate some PHP code. I have recently tried with a valid PHP code that cannot be parsed by phply. Here is the code:\n\n```\n<?php\n\nfunction foo($value) {\n    echo $value;\n}\n\nfoo(0987654321);\n```\n\nIt seems that when an invalid octal variablle is passed to PHP, is value is modified to 0. Things that phply does not handle.\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/21/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/viraptor/phply/issues/comments/216051897", "body": "Here is the pull request: https://github.com/ramen/phply/pull/22\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/216051897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "nijel": {"issues": [], "commits": [{"url": "https://api.github.com/repos/viraptor/phply/commits/c6f53dbe62f4172a60551079efc8a48573c90ed3", "message": "Fix parsing heredoc strings\n\nThose would contain trailing newline.\n\nFixes #38"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/63ec82d64a8fa1d03c142c2679d1549224e6e677", "message": "Add test for heredoc parsing"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/679f3bc20da099015dab86a534130a70007eaac3", "message": "Fix string assertion for Python 2\n\nThe token can be unicode string as well."}], "pull_requests": [{"url": "https://api.github.com/repos/viraptor/phply/pulls/34", "title": "Ensure parsetab is generated at install time", "body": "This way it is available even on global installation.\r\n\r\nFixes #32", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/viraptor/phply/issues/comments/332747432", "body": "The problem is probably that heredoc blocks get lexed as way too many tokens, what later leads to quite a lot of BinaryOp calls.\r\n\r\nLet's take this example (taken from https://github.com/translate/translate/ testsuite where I'm trying to use phply for parsing PHP files, see https://github.com/translate/translate/pull/3697):\r\n\r\n```php\r\n<?php\r\n$lang_register_approve_email = <<<EOT\r\nA new user with the username \"{USER_NAME}\" has registered in your gallery.\r\n\r\nIn order to activate the account, you need to click on the link below.\r\n\r\n<a href=\"{ACT_LINK}\">{ACT_LINK}</a>\r\nEOT;\r\n```\r\n\r\nIs tokenized as:\r\n\r\n```\r\n(OPEN_TAG,'<?php\\n',1,0)\r\n(VARIABLE,'$lang_register_approve_email',2,6)\r\n(WHITESPACE,' ',2,34)\r\n(EQUALS,'=',2,35)\r\n(WHITESPACE,' ',2,36)\r\n(START_HEREDOC,'<<<EOT\\n',2,37)\r\n(ENCAPSED_AND_WHITESPACE,'A',3,44)\r\n(ENCAPSED_AND_WHITESPACE,' new user with the username \"{USER_NAME}\" has registered in your gallery.\\n',3,45)\r\n(ENCAPSED_AND_WHITESPACE,'\\n',4,119)\r\n(ENCAPSED_AND_WHITESPACE,'In',5,120)\r\n(ENCAPSED_AND_WHITESPACE,' order to activate the account, you need to click on the link below.\\n',5,122)\r\n(ENCAPSED_AND_WHITESPACE,'\\n',6,191)\r\n(ENCAPSED_AND_WHITESPACE,'<a href=\"{ACT_LINK}\">{ACT_LINK}</a>\\n',7,192)\r\n(END_HEREDOC,'EOT',8,228)\r\n(SEMI,';',8,231)\r\n(WHITESPACE,'\\n',8,232)\r\n```\r\n\r\nWhich ends up in following after parsing:\r\n\r\n```\r\n('Assignment',\r\n {'expr': ('BinaryOp',\r\n           {'left': ('BinaryOp',\r\n                     {'left': ('BinaryOp',\r\n                               {'left': ('BinaryOp',\r\n                                         {'left': ('BinaryOp',\r\n                                                   {'left': ('BinaryOp',\r\n                                                             {'left': 'A',\r\n                                                              'op': '.',\r\n                                                              'right': ' new '\r\n                                                                       'user '\r\n                                                                       'with '\r\n                                                                       'the '\r\n                                                                       'username '\r\n                                                                       '\"{USER_NAME}\" '\r\n                                                                       'has '\r\n                                                                       'registered '\r\n                                                                       'in '\r\n                                                                       'your '\r\n                                                                       'gallery.\\n'}),\r\n                                                    'op': '.',\r\n                                                    'right': '\\n'}),\r\n                                          'op': '.',\r\n                                          'right': 'In'}),\r\n                                'op': '.',\r\n                                'right': ' order to activate the account, you '\r\n                                         'need to click on the link below.\\n'}),\r\n                      'op': '.',\r\n                      'right': '\\n'}),\r\n            'op': '.',\r\n            'right': '<a href=\"{ACT_LINK}\">{ACT_LINK}</a>'}),\r\n  'is_ref': False,\r\n  'node': ('Variable', {'name': '$lang_register_approve_email'})})\r\n```", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/332747432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/332751552", "body": "One example how to do that can be found here: https://github.com/johnyf/promela/blob/master/setup.py#L24", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/332751552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/338953381", "body": "AFAIK ply should regenerate the file only if needed, so it should not be that bad. Probably it should be rather build at build time to match ply version used on the target system, when invoked in sdist only, it might still have to be regenerated on the target system as it might have newer ply version...", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/338953381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/338973000", "body": "I think this started to happen after https://github.com/viraptor/phply/pull/37", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/338973000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/338973198", "body": "There is no trailing newline in 1.1.0:\r\n\r\n```console\r\nphpparse /tmp/test.php \r\n('Assignment',\r\n {'expr': ('BinaryOp',\r\n           {'left': ('BinaryOp',\r\n                     {'left': ('BinaryOp',\r\n                               {'left': ('BinaryOp',\r\n                                         {'left': ('BinaryOp',\r\n                                                   {'left': ('BinaryOp',\r\n                                                             {'left': 'A',\r\n                                                              'op': '.',\r\n                                                              'right': ' new user with the username \"{USER_NAME}\" has registered in your gallery.\\n'}),\r\n                                                    'op': '.',\r\n                                                    'right': '\\n'}),\r\n                                          'op': '.',\r\n                                          'right': 'In'}),\r\n                                'op': '.',\r\n                                'right': ' order to activate the account, you need to click on the link below.\\n'}),\r\n                      'op': '.',\r\n                      'right': '\\n'}),\r\n            'op': '.',\r\n            'right': '<a href=\"{ACT_LINK}\">{ACT_LINK}</a>'}),\r\n  'is_ref': False,\r\n  'node': ('Variable', {'name': '$lang_register_approve_email'})})\r\n```", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/338973198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/338975146", "body": "Most likely this logic needs to be present in the concatenation as well:\r\n\r\nhttps://github.com/viraptor/phply/blob/88040c69f028a16f7c23673c135e59b753888aab/phply/phpparse.py#L1324-L1332", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/338975146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/338976438", "body": "Now with a fix as well :-).", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/338976438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/338976721", "body": "This was probably broken for some cases even before, but recent changes in #39 just made it more visible.", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/338976721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jorkro": {"issues": [], "commits": [{"url": "https://api.github.com/repos/viraptor/phply/commits/dbc56ea7218cd9e8b30dd3071ded9df8eb858cb4", "message": "Accept <?PHP (all capitals) as alternative open tag"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "soulseekah": {"issues": [], "commits": [{"url": "https://api.github.com/repos/viraptor/phply/commits/6024d40030abfede39efe6ea67d7ef9ce19f6a7b", "message": "Support call array dereference\n\nSince PHP 5.4\nhttp://php.net/manual/en/language.types.array.php#example-102"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/059ddd251b7006132aa2b49f13501db40b75bf72", "message": "Add .eggs to .gitignore"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/54f504fd7bf7abef2aa11e29ec8163a93926750e", "message": "Support CRLF in HEREDOC_START\n\nHEREDOC was not parsed correctly on data with Windows line endings."}, {"url": "https://api.github.com/repos/viraptor/phply/commits/01b75eab8f74e0089a6bfccaf9f894a0f8d61596", "message": "Add shorthand ternary operator support\n\n`$condition ? : $else` format has been supported since PHP 5.3 (2009),\nlet's get this in."}, {"url": "https://api.github.com/repos/viraptor/phply/commits/d51854f95e5805d6dceee51dc57b0b4763603314", "message": "Merge branch 'fix-closeopen-1'\n\nConflicts:\n\ttests/test_parser.py"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/ebc5fd3a3f25614282dcc6509b4a595c37ca4a54", "message": "Fix `?><?php` interpretation\n\n?><?php used to break inside the FilteredLexer due to closing tag\nignores and other issues, resulting in syntax errors. Rewriting\n?><?php with ; fixes this issue.\n\nExamples of valid code:\n\n- `if (1): if (2) 3; ?><?php else: 0; endif;`\n- `if (1): if (2) 3; ; else: 0; endif;`\n\nInvalid code:\n\n- `if (1): if (2) 3; else: 0; endif;` (note the missing ; before else:)"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/eb1005b2c9dc27fe6161b903f2eb408193c13fee", "message": "Merge branch 'feature-backticks-1'\n\nConflicts:\n\ttests/test_parser.py"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/58cb0e111e805e6846299bdb4d542c77fee154f7", "message": "Implement backtick support\n\nBackticks now resolve to a `shell_exec` function call. Tests included."}, {"url": "https://api.github.com/repos/viraptor/phply/commits/9b25f726fb3ff7df6a858cbc95ca086914c9c698", "message": "Fix tabs vs spaces"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/22310ffd26e1035be703970cd80cbe55a10aca7f", "message": "Fix class constants as static scalars\n\nAll class constants are valid static scalars in PHP, this goes for\nvariable initialization, function parameter defaults, etc.\nAdded `class_constant` as a valid `static_scalar` variant."}, {"url": "https://api.github.com/repos/viraptor/phply/commits/545ae4025bd343803ad763eeb0fc94676d7bad09", "message": "Allow invalid \\x escape sequences\n\n`\"\\xHELLO\"` is a valid string in PHP, while `decode('string_escape')`\nwill simply fail with a `ValueError` on it. These should be let through\nas is without raising an exception."}, {"url": "https://api.github.com/repos/viraptor/phply/commits/bc44888b6406903b43bb8967cfe62089c24d5bd2", "message": "Fix support for array typehinting\n\n`function(array $a) {}` typehinting would not work as `ARRAY` is a\nreserved token of its own and gets precedence over `STRING` in\n`namespace_name`, resulting in a syntax error. By adding `ARRAY` as a\nvariant a successful parse is attained. Tests included."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/viraptor/phply/issues/comments/168864621", "body": "Sorry will reopen as its own branch.\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/168864621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/168874446", "body": "That will be parsed as a Constant without throwing any errors. Doesn't have to be interpreted and resolved to an exact meaning.\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/168874446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/169448353", "body": "https://github.com/ramen/phply/pull/16 addresses this issue by adding `class_constant` as a possible variant of a `static_scalar`.\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/169448353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/267834061", "body": "Looks good to me, @viraptor ", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/267834061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/268010563", "body": "Well, see, both exit and die are the same node in PHP.\r\n\r\nSee: https://github.com/php/php-src/blob/2cc3aeb4b98bcbc9572041b2f7d3276aabd51aae/Zend/zend_language_scanner.l#L1125-L1131\r\n\r\nIt's a `T_EXIT` token with no distinctions.\r\n\r\nAlthough, I think that die has to be called as a function, while exit can be just called as is:\r\n\r\n`die();` vs. `exit;`\r\n\r\n@nuno-silva what's your issue with looking at exit (w/ or without parameters)? I can see you're looking at it as a sink, both exit and die would behave the same way (with or without parameters), right?", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/268010563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/338946362", "body": "You're on a roll today, @viraptor :+1: \r\n\r\nGlad to see the project breathing again :)", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/338946362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [], "review_comments": []}, "ramen": {"issues": [], "commits": [{"url": "https://api.github.com/repos/viraptor/phply/commits/ff6a567f84b4f7011be28dcc630d37d1a5d878c4", "message": "Add yaubi to authors"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/7bb3953e660316ba04f5ad3b70ea11158470da43", "message": "Merge pull request #2 from yaubi/master\n\nFixing properties with dynamic names"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/70659aab2f468b65b54dbc527265380cf573cd75", "message": "Add kevinjqiu to AUTHORS"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/f93658c98032d3057eb618ed4a360ad2f2589f06", "message": "Add magic constants and visitor pattern"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/34cc18c4cd925e5a2c0c38ecadc1f5ca588f002a", "message": "Don't insert semicolons after opening curly braces"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/4a21c528c941d3e80505cd50c6e54972223092f7", "message": "Don't insert semicolons after colons (alternative block syntax)"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/efbf208c921ffb594c5fbce20caf4884406c53d1", "message": "Explain semicolon insertion, stop <?php // comment ?> from building empty statements"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/605aa4a0426810351ecc06807e3a9560584dbd0c", "message": "Get tools working again after lexer change"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/e77b7c167d9cfe3b9fc1d6b7b280bf0e4f6b3ff7", "message": "Filter unparsed tokens before they hit the parser\nSee http://groups.google.com/group/ply-hack/browse_thread/thread/4c25fcb22742e24b"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/96afe181edd80e2f11dfa599076655b25073e0bc", "message": "Improve presentation of test output"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/8e680193a2ce8b28de9a41e646df94b1cab6868c", "message": "Use a fresh lexer each time so that failing tests do not break subsequent ones"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/7d59eb3b071e493cf315aa6eaae394cb9c854423", "message": "Allow empty double-quoted strings in static scalar context"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/12e044741e15534aad26238b50126d3b68f8a87d", "message": "Update comment to reflect switch to unparse.py"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/1eaacb01748c15800c4fa2e3f0cbd06768b44aa5", "message": "Translate try/catch/throw"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/953143b71e73702a9a0f26042298634db87d84cd", "message": "This makes me sad"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/405a0fabe4b3cc8335fa7a5c8a8b3673ff6aa192", "message": "Update TODOs"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/9e4e749f05b8574b9c31a2bc2935c2269b7bab73", "message": "Add closures"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/6fe2daffc1d1f890044aa2babe3f47c23e40ee63", "message": "Allow static keyword in class context (\"late static bindings\")"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/83d023d9e5a62090ffa73f15533a752564085f00", "message": "Namespaces are now fully parsed"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/e69282f1d18eabc80c17827375c95fcf290c1fff", "message": "Allow namespace operator in constants"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/f72a335f8abc884ff5aaa7df8d85c9687df3d415", "message": "Allow namespaced constructor calls"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/10ccb12b7c6c0be0a7ab3b6b404810dc0f3e2e50", "message": "Allow namespace operator in function calls"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/e8238c37b5f782b320b83a2a8a9dd2923faf2975", "message": "Allow namespaced function calls"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/9a4a05815742cfb8e2255b8085554c382b3ac525", "message": "Allow globally-scoped constants"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/f35d4abe46782db572235016f806ca255b25f27b", "message": "Add top-level constant declarations"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/10251946841de1efa31cb160ad404678044e9372", "message": "Fix tests, rename Use to UseDeclarations"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/7b2d43bf68c16679bedc6c2d86a03ad93be89dc9", "message": "Add use statements and declarations"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/aa1dd2210fe74f345f2babf54c3d9b0d38d60e0b", "message": "Add top-level namespace statements and blocks"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/68724e4fc35cc12417c2d192071efe1febe3e973", "message": "Merge branch 'master' of github.com:ramen/phply"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/881c793599b515eeb4231203a3d99c8c2e7dd02b", "message": "Add .gitignore"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/2d8306cecdd75efc07caa61902c16193558b80c8", "message": "Move tokenize script to tools"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/ac90f4e8fee5a8ea8fbecd3b0a9c2ffd4c77a69a", "message": "Allow dynamic class names in constructors (new $foo(), etc.)"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/191e92612f3de911ab39ed5f81094048728c45e1", "message": "Translate list assignment"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/97eed6a09b7b7bf1e36529e9c81a7403e974e477", "message": "Translate variable object properties ($foo->$bar) to getattr()"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/d0d041c0d212aea3e350e946fdada27d4f7e744b", "message": "Add <> as a synonym for !="}, {"url": "https://api.github.com/repos/viraptor/phply/commits/6b6459cbdd0c76053efbe2bb3982122dd6b441e1", "message": "Translate static property (class constant / variable) lookups"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/3b2c63247887faf1f921a8f652fcd3b2e38841a1", "message": "Remove extra block from for-loop body"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/b0e762f254df31e4166aa98aeaf1b7566e7386c3", "message": "Translate do/while loop to infinite while + break"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/cec41534ded9003863bd66f127b6a50407691a68", "message": "Translate casts into function calls"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/6f8b70648b2eeb492effde60339df4be26249701", "message": "Add rudimentary support for class-level constants and variables"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/82748154f1265d110f1231f459cd6b1226d8c485", "message": "Translate pre/post increments/decrements and for-loops"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/ed7f7d35f59fbd4a07d1dfcaaab37245670588e1", "message": "Turn include(_once) and require(_once) into regular function calls"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/0c5bc2d557d2fdda060483abca1562f6e320cb93", "message": "Go back to using *args for echo()"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/8b14f1a7b97a6a7d0a01d0783f47c83a4e8c6224", "message": "Transform \"isset($var)\" to \"'var' in vars()\""}, {"url": "https://api.github.com/repos/viraptor/phply/commits/6fa79cf695eee4798e07150c38045ffea4c57f92", "message": "Fix echo, tweak whitespace handling after close tags, add while and empty return to AST transformer"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/647fb9afa382f92227f2eaaa8eb8f8a9c4a767e6", "message": "Allow exit with no arguments."}, {"url": "https://api.github.com/repos/viraptor/phply/commits/b4862ae1e2e6b0be3d8872fa95b47321764e7e09", "message": "Use unparse.py (from Python source tree) instead of codegen.py, since it seems to work better"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/de4723b2e485eef7142cabe651d7f7ebe192fcdf", "message": "Translate isset($a) to \"a is not None\". Not quite the same thing, but it's the best I can think of for now."}, {"url": "https://api.github.com/repos/viraptor/phply/commits/268bd3666ac962e72664a6a11d95ac6ed6eb9790", "message": "Transform empty() to !(isset && boolean test)"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/2b004f92d9c0f220de43d10c81b9476337ed1adf", "message": "Transform and/or, break/continue, isset on object properties, assignment ops, globals"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/bebaf975ad0b8e5c43f76c28bc941251906a0a9e", "message": "Transform assignment to [] into \"append\" method calls"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/78063cc36616000c9dc5786df078a63358b9e330", "message": "Transform foreach loops, ternary ops, some OO support"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/a9a1a59ea237a0c525e32fa94e42793bf17ed6d9", "message": "Remove unnecessary call to ast.parse()"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/79eb5c73095cbb08664a99c7bea840c8b27a8c5c", "message": "Embed string literals in formats"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/94a1a397aa8e81b6feefc20e91b4fb10e0ae9d28", "message": "Collapse multiple concatenations into a single %-format application"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/44cc070d908521c763988030257e31b1ed4fd9c8", "message": "Add support for named parameters in function and method calls"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/40077fc0409d6c144f932d80913b22eb18913555", "message": "Transform arrays, blocks, object properties, function and method calls to Python AST nodes"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/f49c42329a5c205c4183092438786eb95caac695", "message": "Try to get more of a Python-style shell experience"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/f57e802a76afff0e1b5cc7d563e77d9f0a2bbfdf", "message": "Better prompts for parser tester"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/005260ca5160835e951d52c1d99d0fa87363746a", "message": "Started working on PHP->Python AST mapper, PHP interpreter, PHP->Python converter"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/4fe5f1e150d3730432873e5fc7d4e6ec53c625e8", "message": "Reset line number before each parse"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/41fa6f9fcad9a78f5cb7ee801d4d546f2f17757e", "message": "Add tests for if-statements"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/e7f56bdcb392e91669bf254630c17f794ac7eb0f", "message": "Use exceptions for errors, allow multi-line input in parser test loop"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/ac2b2984c454ea493237e8d0c6a4b09fde293fc3", "message": "Consolidate cast type aliases"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/ae9e9b300134395d6c5d086cc0340255b3606cd5", "message": "Ensure that cast types are always lowercase in AST"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/f922d5449d1295bb04a9a54024f80619159fe290", "message": "Convert \"null\" constant to None"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/c0412a31ebee4cf21647a65f0b1f0e3df12e22c2", "message": "Unescape single- and double-quoted strings in parser"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/6c7b986a7cad2efc7e8e151e9e3d137a42609ac7", "message": "Add casts, fix printf"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/73d60f93700a0146b0db4ef55d248b78af7285d6", "message": "Various Jinja2 generation improvements"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/97da2300ead357ede28a2389f36604283d736db3", "message": "Generate Jinja2 macros from PHP function declarations"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/5282ad3c6d19ebc247fcaab61f85f49adf6ad1f8", "message": "Build AST nodes correctly for object property offsets"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/ac09396f53a54ecdd5c8bf2e6ad17452c38da509", "message": "Revamp variable parsing, lots of things now work, object property offsets temporarily broken"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/787e783ba1bab92145d9fd705f6d2017c2b5d896", "message": "Add instanceof operator"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/3f05dd947b6736200be3469f03a83ea0c71660a3", "message": "Add declare statements and directives"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/b3f7b9150204a05b6bf0f1a6e494d32a2623d76f", "message": "Add line number tracking to parser"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/dc9c364773fcbde29db34266f1c329e4ea1f7213", "message": "Add try/catch"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/e1893ac36c5c57d1f52201642ea169cf2fd04729", "message": "Fix bug with newline-only string data in heredocs"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/14efc8cd61cc4fba9c6e9a6a7f4a085f9e52c132", "message": "Consolidate identical lexer rules across different states"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/d0b79bf65c396a23a926deeadfa7cbf36d205659", "message": "Add support for heredocs"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/fbe268c312c070376e46f3a78f1cf0f1ab351269", "message": "Add dollar-open-curly-array-offset interpolation (don't ask)"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/0290924f54ea3fddf37672428c6a88c7f4e31d8d", "message": "Don't look for keywords after -> (eg. \"$this->use\")"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/4f42124a8d47d4fa5734590ebd3aa11b14ba1580", "message": "Too many x's - sounds like a heavy metal band"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/8ae224d91cebb244bfed07f707b62e43776931eb", "message": "Write some copy for the README"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/3a7aef1fc3f717fe0bc472ace6e84bebb95219fa", "message": "Rename ForEach to Foreach; my fingers refuse to capitalize the 'e' due to years of abuse"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/30c46ef7b5c832a3b209f44753efa9b860ea615f", "message": "Name array keys and values \"key\" and \"value\" instead of \"name\" and \"node\""}, {"url": "https://api.github.com/repos/viraptor/phply/commits/d79717613c96f2d0cae3b0507f152631b5d54243", "message": "isset() can test multiple expressions (who knew?)"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/96697024793c0d42f0768617ba3e185ef7470311", "message": "Add \"clone\" keyword"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/51c191d7b5358e4985c63f47c61c23c1d814ab8a", "message": "Handle constructor calls without parentheses"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/ce91074bea100a08c4e9c5a34d98e36b5ddc40c5", "message": "Support integer literals as interpolated array offsets (NUM_STRING)"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/7ebf3c0cafcac5b1821cc33297360ca36f1d1286", "message": "Go back to consuming a single optional whitespace character after a close tag, since it prevents extra InlineHTML nodes at the end of files with trailing newlines"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/8f79eb7ede9a4debb0ad9a2af5cb4fa093437800", "message": "Add simple static method call support"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/b1c800542276f96bf9946eda2bc305b1ee8940f6", "message": "Test deprecated reference assignment with \"new\""}, {"url": "https://api.github.com/repos/viraptor/phply/commits/0846ca32b38b3f22bf91d2f36c7ae54a4a71185c", "message": "Maybe if I indented it properly this test would actually run..."}, {"url": "https://api.github.com/repos/viraptor/phply/commits/21f23c180b020bd798358678d0c492a0bd732923", "message": "Add simple usage of \"new\" keyword"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/d83450931b5ebac943e5e7e4a4e80b65a144c762", "message": "Add class and interface declarations"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/c74f8516a19abce5b614d511d0ec121b2ae89984", "message": "Use Variable nodes for ArrayOffset/ObjectProperty names in double-quoted strings"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/a91d01c529e869932f016010420bbde0a4400ce1", "message": "PHP to JSON AST converter"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/758c246945470db4c1bc80e9102744eea4a60bb2", "message": "Interpolate variable array offsets, fix lexer error on \"$foo->$bar\""}, {"url": "https://api.github.com/repos/viraptor/phply/commits/950b8c163b579cf69397a34d3b11e986d000a23c", "message": "String interpolation for variable object properties (gahhhhh)"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/e7574f3f9754557db2ab0661fce303b31574586f", "message": "More string interpolation syntax support"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/4f864f4cff46b7da43f68e403e2c502a564bff55", "message": "Add parser test for array offsets and object properties embedded in strings"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/0fb0248933cd833f334be0fc83bb104cc88e8db9", "message": "Allow backslashes as namespaced name delimiters"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/ace1df5bc2d9e360882207d362727c511b67c773", "message": "Add method chaining, tests for function and method calls"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/3d40cdae0a06d6b193d8b129c3f62300b8d4fb24", "message": "Add yet another ${$interpolation} syntax"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/b640780c7afb49b1d3fe98926ebcd7dfd2956282", "message": "Add variable variables"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/8fc4721a9d37fca57c4def5167ad31dadf235ddd", "message": "Fix handling of -> and [] in string interpolation, add more tests"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/26a9bad4dacc8be9e2e48e486abd12f58fbca760", "message": "Remove old_function and cfunction, since they are not in the language anymore"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/469a38fe16c78657351ef1d4b5d717410d09f43a", "message": "Add eval"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/88c2f65467179094dd2e52a06368e5afb08fc5b4", "message": "Add print and throw"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/738d601eeb084ceea805791d8eef6c15cf95f588", "message": "Add silence ('@') operator"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/48c473a566737dee82deafc6fb8ba2b21c76a106", "message": "Stub out magic constants"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/6ff1d5c46d3d9a6882434e7218c359a63e9b217b", "message": "Add foreach test, make foreach parameter order less confusing, fix equality between AST nodes and other types"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/96b25a3d7b571017e4d5119d3d3b99040ed0751d", "message": "Add exit/die"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/619ed990eb2f2340cdf820aa98524adc199df168", "message": "Add some parser tests, remove unused test file, check output lengths"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/2eaed95b5af81940410e4e4548f5d393fcb95e12", "message": "Break up string interpolation tests somewhat"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/c0d8f84127726f8d22156071ead1d2ddd56f1894", "message": "Add lexer tests for string interpolation, advanced interpolation syntax"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/d138e0c680df4caf3644caba4e0388de1cc0b75f", "message": "Merge branch 'master' of github.com:ramen/phply"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/41915d26b1a7e4c737788b45dc56ae31462b738b", "message": "Add method calls"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/966500e3816497681c43db693a72ef6d84128a7f", "message": "Add BSD-style license and authors"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/866db2b01c967c3a888f34986ff33619f14e94b7", "message": "PHP to Jinja2 converter :)"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/6671fa36fc1d7a535cc4be219093c66f0decbedf", "message": "Remove pointless string tests"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/499831c17e39f540913f17e9b66f2e86e0398687", "message": "Test whitespace, open/close tags, strings, fix whitespace handling after open tags"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/d610dd067bc54a4eb43a13d7090a12846a55e975", "message": "Started writing lexer tests, fixed bug with floating-point numbers"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/15aafe8251cf779086848163137f2c6e37d0ccd8", "message": "More TODOs"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/d2cb2017f42b1e18f1b6972c362b3fe4afd0543b", "message": "Add method calls"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/704ed0e98a6cd6c2360a42c00e5ffbd214484b92", "message": "Allow array and object lookups inside quoted string (still needs lexer support)"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/31f297d2c39e66dba97ce0c108fd43978fe7f5cc", "message": "Allow unary ops and arrays in static scalars (function argument defaults)"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/c7b0cad5fbff5ea3b3633147bcf9fd79d611f675", "message": "Add switch/case"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/aba4c87f6a765823e7e487dccc7c3319be0e4e0f", "message": "Add object property references"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/bf8a05b4552316fc1e47372aa27abf2772eba64a", "message": "Prevent elided semicolon change from adding extra empty nodes"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/a97e0cd1a8c0aaae80f65b03d131461d40badb85", "message": "Add ternary operator, rename \"else\" to \"else_\" to avoid syntax errors on If node"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/52f8833c823b72d043bf044a1f851aec15c7ec13", "message": "Allow semicolon to be omitted before close tag"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/bc6c1c68f8c93c6f7e075a3d87492b008c7ca3e6", "message": "Add isset, empty, include/require(_once)"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/e720fd57de556ddcc5c2abfb6c532903acce7720", "message": "Add assignment, pre/post-increment/decrement, and cast operators"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/d5c3e59662ea6534920bc74abdd8d68f59ea9aba", "message": "Fix precedence of !=="}, {"url": "https://api.github.com/repos/viraptor/phply/commits/bb27357179b1588df950b881a66fccdd08371d08", "message": "Add for loops"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/f09afb75d022d46c8fdeac19055100aa78a2948e", "message": "Add foreach loops"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/0dd8213079297c18ec0d701b43439148707cf310", "message": "Add while and do/while loops"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/64e4b8ec0b352d65a2d25ead166f1d04640a23cb", "message": "Reorder rules to keep statements together"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/b2ac4699aa3895511600d9dad1191e768b66c8a1", "message": "Add alternative if:/elseif:/else: syntax"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/f74ab138be8871c9cc648a119db4d361a678f38d", "message": "Add if/elseif/else statements"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/3659c1e9a8b1192b94d2c387c0ea15c62588e78e", "message": "Fix shift/reduce conflicts on double-quoted strings"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/485ebdb9154e0f887e201a68860987589ac0abd8", "message": "Keep track of name in function declarations"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/fee778585cd667498e28fa49b983e3150c661263", "message": "Fix repr() for simplified AST nodes"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/e9a7de1e21cc14f1f57fed27a97ae37e05220afa", "message": "Use star-args instead of list to simplify AST constructor calls"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/77d38edfbe588071b9323e6c1280aa33043b20ff", "message": "Remove EmptyNode, since I can't decide when to use it or None"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/afed94b785b70502d82d0c6fd1f2d60b53f76bd6", "message": "Add array literals and offsets"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/aafccdb94ca7849b3f4cca381e8f33fdaa3fcb40", "message": "Ignore comments, add constants, use tuples in AST for readability"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/0b63ce376d2d8963fd2aa438d953328bbed45117", "message": "Add simple function calls"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/7881eed24d6c9f147f153c9cf353ee8bc6cfe200", "message": "Add static variables"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/dc64fc729f8a582074889fc843da58ccb8fa6fbf", "message": "Allow simple double-quoted strings to be static scalars"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/f7be7ee8f62dbc0e28d117ce47ad3bad2b708a18", "message": "Add function declarations, fix quoted strings without variables"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/7a4d785840fb3276ef2ebd5d3c6a11a2c6ce7329", "message": "Remove junk in precedence table, add precedence for class modifiers"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/128b4f6f00ed0414117ddb9dd2ada8d7c4c3d365", "message": "Add precedence table and some operators"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/1df99e97f01d32ac79546910459122d09045a3dd", "message": "Keep track of whether assignments are by-reference or not"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/b131c0dca3ac4d5012e675ceb1d1fa7a9f26e943", "message": "Started writing a parser and AST type"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/bc9de1670213bfc91ad97c096df0e994b9eaef26", "message": "Fix open tag with echo and whitespace"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/1a27161946282f29f4ef0ecf67f72b5926c88f13", "message": "Allow lone dollar signs in quoted strings"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/89702d776e510b5d27fceb952c6d4a690b43ce5a", "message": "Changed my mind - I don't want to coerce numbers in the lexer"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/6a654997a463952fb2e3b8e7b120423878fdf3c9", "message": "Keep CONCAT from clobbering CONCAT_EQUAL"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/d540382028fdeeeb534dc7e6c52d5127bdcf2962", "message": "Add double-quoted strings"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/626a20db0644e0aba3413f85c6cfb43657de4b7e", "message": "Merge branch 'master' of git://github.com/dcolish/phply"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/61a6517b8f17a09c5ca809f1a045a5a067a5cf3d", "message": "Fix end-of-line comments with close tags"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/1a486b6b035aa3c87f6ed5519d1c3e50b707f542", "message": "Add __halt_compiler token"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/6340598c037374139c49e7fe6d087ed2f9684d5c", "message": "More TODOs"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/22ad950494f9a755e6172a758aa5c1d967e978be", "message": "Only read a single whitespace character after open/close tags"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/b361179409780b14c350cdbec1c09c054b2bb6f8", "message": "Add casts"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/d20ddd500d85f02be33a0f377b69c184a98572e5", "message": "Allow \"die\" as an alias for \"exit\""}, {"url": "https://api.github.com/repos/viraptor/phply/commits/36f1c433ff2218d40f7b8e5fa845e565d14a56ff", "message": "Number literals"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/7e46044c5531efa6c87894649142af73612012ed", "message": "Lexer and PHP-based token dumper"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/06e943d6fc045ba027c756fd087a0a05012859ef", "message": "First commit"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/viraptor/phply/issues/comments/920904", "body": "Thanks, Kevin! I was planning on merging Christophe's change, but I wanted to write some tests first. I'd like to take a day or two and compare the two solutions you guys came up with, and then I'll figure out how best to merge this stuff in. I think I prefer your decision to use an attribute for the type rather than another AST node, since it is more of a \"hint\", as they call it. His solution also had an unrelated change that I'd like to incorporate separately, which I also need to write tests for. Thanks for the contributions, I appreciate your help!\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/920904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/928515", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/928515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/1115538", "body": "Looks good to me, thanks! There sure are a lot of dynamic variable name tricks in PHP, aren't there. ;)\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/1115538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/3318177", "body": "I don't know if this would be an acceptable substitute, but the lexer does retain comments, and distinguishes between regular and doc comments. A full-blown parser may be overkill if you're just trying to generate some documentation. I can definitely see how it would be convenient, though.\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/3318177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [], "review_comments": []}, "yaubi": {"issues": [], "commits": [{"url": "https://api.github.com/repos/viraptor/phply/commits/930ea68f4996fc6e72e5fe2abb912273f1ccb50b", "message": "Assignment to ObjectProperty whose name is BinaryOp must call setattr"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/f343d0fa272b2fbfae2ca1017450f7ea3259710e", "message": "ObjectProperty's name could also be BinaryOp (ie. dynamic property name from string concatenation)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kevinjqiu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/viraptor/phply/commits/77ed5e052e69f8ec948274f92e71799fffb2c1ab", "message": "more unit tests for type hinting"}, {"url": "https://api.github.com/repos/viraptor/phply/commits/c604798a93789f4d11ade399a481b483f0f35ce4", "message": "adding preliminary support for type hinting"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/viraptor/phply/issues/comments/928781", "body": "You bet! Thanks for phply :)\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/928781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "dcolish": {"issues": [], "commits": [{"url": "https://api.github.com/repos/viraptor/phply/commits/9d08a76c7d34fc04bb6914327c22f69e1d4f4d53", "message": "add setup file and simple test"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/viraptor/phply/comments/119888", "body": "w00t!\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/comments/119888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/viraptor/phply/comments/119889", "body": "aw snap, thats not supposed to be there!\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/comments/119889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "bored-engineer": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/viraptor/phply/pulls/7", "title": "Add linespan support", "body": "Added the ability to exact the entire linespan for a tag, not just the line number.\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/viraptor/phply/issues/comments/50908654", "body": "Any updates on this?\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/50908654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/259003570", "body": "Hey @viraptor that's great to hear! My apologies the Python 3 patches got mixed in here, wasn't my intention. \n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/259003570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "khorn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/viraptor/phply/issues/comments/3341103", "body": "Ah, I didn't realize the lexer preserved comments.  I just noticed they weren't appearing in the parser output.  I'll see if what the lexer produces isn't enough (when/if I ever find the time...)\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/3341103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "drnlm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/viraptor/phply/issues/comments/75045758", "body": "The problem you're seeing is because of the:\n\n`tokens = filter(lambda token: token not in unparsed, tokens)`\n\nstatememnt in phplexpy. In python3, this returns an iterator object rather than the tuple/list returned in python 2.\n\nA simple fix is to change\n\n`tokens = phplex.tokens`\n\nin phpparse.py to\n\n`tokens = tuple(phplex.tokens)`\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/75045758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "LocutusOfBorg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/viraptor/phply/issues/comments/75048795", "body": "ok thanks! changing that makes the build fail just after \n\n```\ntests.test_parser.test_echo ... ERROR\ntests.test_parser.test_open_tag_with_echo ... ERROR\ntests.test_parser.test_exit ... ok\ntests.test_parser.test_isset ... ok\ntests.test_parser.test_namespace_names ... ok\ntests.test_parser.test_unary_ops ... ok\ntests.test_parser.test_assignment_ops ... ok\ntests.test_parser.test_object_properties ... ok\ntests.test_parser.test_string_unescape ... ERROR\ntests.test_parser.test_string_offset_lookups ... ERROR\ntests.test_parser.test_string_curly_dollar_expressions ... ERROR\ntests.test_parser.test_heredoc ... ERROR\ntests.test_parser.test_function_calls ... ok\ntests.test_parser.test_method_calls ... ok\ntests.test_parser.test_if ... ok\ntests.test_parser.test_foreach ... ERROR\ntests.test_parser.test_global_variables ... ok\ntests.test_parser.test_variable_variables ... ok\ntests.test_parser.test_classes ... ok\ntests.test_parser.test_new ... ok\ntests.test_parser.test_exceptions ... ERROR\ntests.test_parser.test_declare ... ok\ntests.test_parser.test_instanceof ... ok\ntests.test_parser.test_static_members ... ok\ntests.test_parser.test_casts ... ok\ntests.test_parser.test_namespaces ... ok\ntests.test_parser.test_use_declarations ... ok\ntests.test_parser.test_constant_declarations ... ERROR\ntests.test_parser.test_closures ... ERROR\ntests.test_parser.test_magic_constants ... ERROR\ntests.test_parser.test_type_hinting ... ok\n\n======================================================================\nERROR: tests.test_parser.test_echo\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/usr/lib/python3/dist-packages/nose/case.py\", line 198, in runTest\n    self.test(*self.arg)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/tests/test_parser.py\", line 34, in test_echo\n    eq_ast(input, expected)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/tests/test_parser.py\", line 11, in eq_ast\n    output = parser.parse(input, lexer=lexer)\n  File \"/usr/lib/python3/dist-packages/ply/yacc.py\", line 269, in parse\n    return self.parseopt_notrack(input,lexer,debug,tracking,tokenfunc)\n  File \"/usr/lib/python3/dist-packages/ply/yacc.py\", line 975, in parseopt_notrack\n    p.callable(pslice)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/.pybuild/pythonX.Y_3.4/build/phply/phpparse.py\", line 1260, in p_encaps_list_string\n    p[0] = p[2].decode('string_escape')\nAttributeError: 'str' object has no attribute 'decode'\n\n======================================================================\nERROR: tests.test_parser.test_open_tag_with_echo\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/usr/lib/python3/dist-packages/nose/case.py\", line 198, in runTest\n    self.test(*self.arg)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/tests/test_parser.py\", line 43, in test_open_tag_with_echo\n    eq_ast(input, expected)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/tests/test_parser.py\", line 11, in eq_ast\n    output = parser.parse(input, lexer=lexer)\n  File \"/usr/lib/python3/dist-packages/ply/yacc.py\", line 269, in parse\n    return self.parseopt_notrack(input,lexer,debug,tracking,tokenfunc)\n  File \"/usr/lib/python3/dist-packages/ply/yacc.py\", line 975, in parseopt_notrack\n    p.callable(pslice)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/.pybuild/pythonX.Y_3.4/build/phply/phpparse.py\", line 1260, in p_encaps_list_string\n    p[0] = p[2].decode('string_escape')\nAttributeError: 'str' object has no attribute 'decode'\n\n======================================================================\nERROR: tests.test_parser.test_string_unescape\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/usr/lib/python3/dist-packages/nose/case.py\", line 198, in runTest\n    self.test(*self.arg)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/tests/test_parser.py\", line 145, in test_string_unescape\n    eq_ast(input, expected)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/tests/test_parser.py\", line 11, in eq_ast\n    output = parser.parse(input, lexer=lexer)\n  File \"/usr/lib/python3/dist-packages/ply/yacc.py\", line 269, in parse\n    return self.parseopt_notrack(input,lexer,debug,tracking,tokenfunc)\n  File \"/usr/lib/python3/dist-packages/ply/yacc.py\", line 975, in parseopt_notrack\n    p.callable(pslice)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/.pybuild/pythonX.Y_3.4/build/phply/phpparse.py\", line 1260, in p_encaps_list_string\n    p[0] = p[2].decode('string_escape')\nAttributeError: 'str' object has no attribute 'decode'\n\n======================================================================\nERROR: tests.test_parser.test_string_offset_lookups\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/usr/lib/python3/dist-packages/nose/case.py\", line 198, in runTest\n    self.test(*self.arg)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/tests/test_parser.py\", line 178, in test_string_offset_lookups\n    eq_ast(input, expected)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/tests/test_parser.py\", line 11, in eq_ast\n    output = parser.parse(input, lexer=lexer)\n  File \"/usr/lib/python3/dist-packages/ply/yacc.py\", line 269, in parse\n    return self.parseopt_notrack(input,lexer,debug,tracking,tokenfunc)\n  File \"/usr/lib/python3/dist-packages/ply/yacc.py\", line 975, in parseopt_notrack\n    p.callable(pslice)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/.pybuild/pythonX.Y_3.4/build/phply/phpparse.py\", line 1262, in p_encaps_list_string\n    p[0] = ast.BinaryOp('.', p[1], p[2].decode('string_escape'),\nAttributeError: 'str' object has no attribute 'decode'\n\n======================================================================\nERROR: tests.test_parser.test_string_curly_dollar_expressions\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/usr/lib/python3/dist-packages/nose/case.py\", line 198, in runTest\n    self.test(*self.arg)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/tests/test_parser.py\", line 211, in test_string_curly_dollar_expressions\n    eq_ast(input, expected)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/tests/test_parser.py\", line 11, in eq_ast\n    output = parser.parse(input, lexer=lexer)\n  File \"/usr/lib/python3/dist-packages/ply/yacc.py\", line 269, in parse\n    return self.parseopt_notrack(input,lexer,debug,tracking,tokenfunc)\n  File \"/usr/lib/python3/dist-packages/ply/yacc.py\", line 975, in parseopt_notrack\n    p.callable(pslice)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/.pybuild/pythonX.Y_3.4/build/phply/phpparse.py\", line 1260, in p_encaps_list_string\n    p[0] = p[2].decode('string_escape')\nAttributeError: 'str' object has no attribute 'decode'\n\n======================================================================\nERROR: tests.test_parser.test_heredoc\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/usr/lib/python3/dist-packages/nose/case.py\", line 198, in runTest\n    self.test(*self.arg)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/tests/test_parser.py\", line 238, in test_heredoc\n    eq_ast(input, expected)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/tests/test_parser.py\", line 11, in eq_ast\n    output = parser.parse(input, lexer=lexer)\n  File \"/usr/lib/python3/dist-packages/ply/yacc.py\", line 269, in parse\n    return self.parseopt_notrack(input,lexer,debug,tracking,tokenfunc)\n  File \"/usr/lib/python3/dist-packages/ply/yacc.py\", line 975, in parseopt_notrack\n    p.callable(pslice)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/.pybuild/pythonX.Y_3.4/build/phply/phpparse.py\", line 1260, in p_encaps_list_string\n    p[0] = p[2].decode('string_escape')\nAttributeError: 'str' object has no attribute 'decode'\n\n======================================================================\nERROR: tests.test_parser.test_foreach\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/usr/lib/python3/dist-packages/nose/case.py\", line 198, in runTest\n    self.test(*self.arg)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/tests/test_parser.py\", line 359, in test_foreach\n    eq_ast(input, expected)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/tests/test_parser.py\", line 11, in eq_ast\n    output = parser.parse(input, lexer=lexer)\n  File \"/usr/lib/python3/dist-packages/ply/yacc.py\", line 269, in parse\n    return self.parseopt_notrack(input,lexer,debug,tracking,tokenfunc)\n  File \"/usr/lib/python3/dist-packages/ply/yacc.py\", line 975, in parseopt_notrack\n    p.callable(pslice)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/.pybuild/pythonX.Y_3.4/build/phply/phpparse.py\", line 1262, in p_encaps_list_string\n    p[0] = ast.BinaryOp('.', p[1], p[2].decode('string_escape'),\nAttributeError: 'str' object has no attribute 'decode'\n\n======================================================================\nERROR: tests.test_parser.test_exceptions\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/usr/lib/python3/dist-packages/nose/case.py\", line 198, in runTest\n    self.test(*self.arg)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/tests/test_parser.py\", line 487, in test_exceptions\n    eq_ast(input, expected)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/tests/test_parser.py\", line 11, in eq_ast\n    output = parser.parse(input, lexer=lexer)\n  File \"/usr/lib/python3/dist-packages/ply/yacc.py\", line 269, in parse\n    return self.parseopt_notrack(input,lexer,debug,tracking,tokenfunc)\n  File \"/usr/lib/python3/dist-packages/ply/yacc.py\", line 975, in parseopt_notrack\n    p.callable(pslice)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/.pybuild/pythonX.Y_3.4/build/phply/phpparse.py\", line 1260, in p_encaps_list_string\n    p[0] = p[2].decode('string_escape')\nAttributeError: 'str' object has no attribute 'decode'\n\n======================================================================\nERROR: tests.test_parser.test_constant_declarations\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/usr/lib/python3/dist-packages/nose/case.py\", line 198, in runTest\n    self.test(*self.arg)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/tests/test_parser.py\", line 630, in test_constant_declarations\n    eq_ast(input, expected)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/tests/test_parser.py\", line 11, in eq_ast\n    output = parser.parse(input, lexer=lexer)\n  File \"/usr/lib/python3/dist-packages/ply/yacc.py\", line 269, in parse\n    return self.parseopt_notrack(input,lexer,debug,tracking,tokenfunc)\n  File \"/usr/lib/python3/dist-packages/ply/yacc.py\", line 975, in parseopt_notrack\n    p.callable(pslice)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/.pybuild/pythonX.Y_3.4/build/phply/phpparse.py\", line 1192, in p_static_scalar\n    p[0] = p[2].decode('string_escape')\nAttributeError: 'str' object has no attribute 'decode'\n\n======================================================================\nERROR: tests.test_parser.test_closures\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/usr/lib/python3/dist-packages/nose/case.py\", line 198, in runTest\n    self.test(*self.arg)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/tests/test_parser.py\", line 659, in test_closures\n    eq_ast(input, expected)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/tests/test_parser.py\", line 11, in eq_ast\n    output = parser.parse(input, lexer=lexer)\n  File \"/usr/lib/python3/dist-packages/ply/yacc.py\", line 269, in parse\n    return self.parseopt_notrack(input,lexer,debug,tracking,tokenfunc)\n  File \"/usr/lib/python3/dist-packages/ply/yacc.py\", line 975, in parseopt_notrack\n    p.callable(pslice)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/.pybuild/pythonX.Y_3.4/build/phply/phpparse.py\", line 1260, in p_encaps_list_string\n    p[0] = p[2].decode('string_escape')\nAttributeError: 'str' object has no attribute 'decode'\n\n======================================================================\nERROR: tests.test_parser.test_magic_constants\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/usr/lib/python3/dist-packages/nose/case.py\", line 198, in runTest\n    self.test(*self.arg)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/tests/test_parser.py\", line 699, in test_magic_constants\n    eq_ast(input, expected, filename='/my/dir/file.php')\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/tests/test_parser.py\", line 11, in eq_ast\n    output = parser.parse(input, lexer=lexer)\n  File \"/usr/lib/python3/dist-packages/ply/yacc.py\", line 269, in parse\n    return self.parseopt_notrack(input,lexer,debug,tracking,tokenfunc)\n  File \"/usr/lib/python3/dist-packages/ply/yacc.py\", line 975, in parseopt_notrack\n    p.callable(pslice)\n  File \"/home/locutus/branches/ongoing/phply-0.9.1/.pybuild/pythonX.Y_3.4/build/phply/phpparse.py\", line 1260, in p_encaps_list_string\n    p[0] = p[2].decode('string_escape')\nAttributeError: 'str' object has no attribute 'decode'\n\n----------------------------------------------------------------------\nRan 43 tests in 1.983s\n\nFAILED (errors=11)\n```\n\nthey seems all related to the same error\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/75048795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/103681838", "body": "I fixed the other problems in this patch (I guess)\n\n``` diff\nDescription: This patch makes the package python3 ready\nAuthor: Gianfranco Costamagna <costamagnagianfranco@yahoo.it>\n        Neil Muller\nForwarded: https://github.com/ramen/phply/issues/8\nLast-Update: 2015-02-19\n\nIndex: python-phply/phply/phpparse.py\n===================================================================\n--- python-phply.orig/phply/phpparse.py 2015-02-21 16:44:56.306062304 +0100\n+++ python-phply/phply/phpparse.py  2015-02-21 16:44:56.302062296 +0100\n@@ -6,12 +6,12 @@\n\n import os\n import sys\n-import phplex\n-import phpast as ast\n+from phply import phplex\n+from phply import phpast as ast\n import ply.yacc as yacc\n\n # Get the token map\n-tokens = phplex.tokens\n+tokens = tuple(phplex.tokens)\n\n precedence = (\n     ('left', 'INCLUDE', 'INCLUDE_ONCE', 'EVAL', 'REQUIRE', 'REQUIRE_ONCE'),\n@@ -1189,7 +1189,10 @@\n     elif len(p) == 3:\n         p[0] = ''\n     else:\n-        p[0] = p[2].decode('string_escape')\n+        if (sys.version_info > (3, 0)):\n+           p[0] = bytes(p[2], \"utf-8\").decode('unicode_escape')\n+        else:\n+           p[0] = p[2].decode('string_escape')\n\n def p_static_scalar_namespace_name(p):\n     '''static_scalar : namespace_name\n@@ -1257,10 +1260,17 @@\n def p_encaps_list_string(p):\n     'encaps_list : encaps_list ENCAPSED_AND_WHITESPACE'\n     if p[1] == '':\n-        p[0] = p[2].decode('string_escape')\n+        if (sys.version_info > (3, 0)):\n+           p[0] = bytes(p[2], \"utf-8\").decode('unicode_escape')\n+        else:\n+           p[0] = p[2].decode('string_escape')\n     else:\n-        p[0] = ast.BinaryOp('.', p[1], p[2].decode('string_escape'),\n-                            lineno=p.lineno(2))\n+        if (sys.version_info > (3, 0)):\n+           p[0] = ast.BinaryOp('.', p[1], bytes(p[2], \"utf-8\").decode('unicode_escape'),\n+                               lineno=p.lineno(2))\n+        else:\n+           p[0] = ast.BinaryOp('.', p[1], p[2].decode('string_escape'),\n+                               lineno=p.lineno(2))\n\n def p_encaps_var(p):\n     'encaps_var : VARIABLE'\n@@ -1336,9 +1346,9 @@\n        try:\n            lexer.lineno = 1\n            result = parser.parse(s, lexer=lexer)\n-       except SyntaxError, e:\n+       except SyntaxError as e:\n            if e.lineno is not None:\n-               print e, 'near', repr(e.text)\n+               print (e, 'near', repr(e.text))\n                s = ''\n            continue\n        if result:\nIndex: python-phply/tests/test_lexer.py\n===================================================================\n--- python-phply.orig/tests/test_lexer.py   2015-02-21 16:44:56.306062304 +0100\n+++ python-phply/tests/test_lexer.py    2015-02-21 16:44:56.302062296 +0100\n@@ -14,13 +14,13 @@\n         if tok.type in ignore: continue\n         output.append((tok.type, tok.value))\n\n-    print 'Lexer output:'\n+    print ('Lexer output:')\n     pprint.pprint(output)\n     print\n\n-    print 'Token by token:'\n+    print ('Token by token:')\n     for out, exp in zip(output, expected):\n-        print '\\tgot:', out, '\\texpected:', exp\n+        print ('\\tgot:', out, '\\texpected:', exp)\n         nose.tools.eq_(out, exp)\n\n     assert len(output) == len(expected), \\\nIndex: python-phply/tests/test_parser.py\n===================================================================\n--- python-phply.orig/tests/test_parser.py  2015-02-21 16:44:56.306062304 +0100\n+++ python-phply/tests/test_parser.py   2015-02-21 16:44:56.302062296 +0100\n@@ -11,13 +11,13 @@\n     output = parser.parse(input, lexer=lexer)\n     resolve_magic_constants(output)\n\n-    print 'Parser output:'\n+    print ('Parser output:')\n     pprint.pprint(output)\n     print\n\n-    print 'Node by node:'\n+    print ('Node by node:')\n     for out, exp in zip(output, expected):\n-        print '\\tgot:', out, '\\texpected:', exp\n+        print ('\\tgot:', out, '\\texpected:', exp)\n         nose.tools.eq_(out, exp)\n\n     assert len(output) == len(expected), \\\nIndex: python-phply/tools/phpshell.py\n===================================================================\n--- python-phply.orig/tools/phpshell.py 2015-02-21 16:44:56.306062304 +0100\n+++ python-phply/tools/phpshell.py  2015-02-21 16:44:56.302062296 +0100\n@@ -21,11 +21,11 @@\n     sys.stdout.write(obj)\n\n def XXX(obj):\n-    print 'Not implemented:\\n ', obj\n+    print ('Not implemented:\\n ', obj)\n\n def ast_dump(code):\n-    print 'AST dump:'\n-    print ' ', ast.dump(code, include_attributes=True)\n+    print ('AST dump:')\n+    print (' ', ast.dump(code, include_attributes=True))\n\n def php_eval(nodes):\n     body = []\n@@ -63,7 +63,7 @@\n            lexer.lineno = 1\n            result = parser.parse(s, lexer=lexer)\n            php_eval(result)\n-       except SyntaxError, e:\n+       except SyntaxError as e:\n            # Parsing failed. See if it can be parsed as an expression.\n            try:\n                lexer.lineno = 1\n@@ -81,7 +81,7 @@\n                    if e.lineno is None:\n                        continue\n                    else:\n-                       print e, 'near', repr(e.text)\n+                       print (e, 'near', repr(e.text))\n                        s = ''\n    except:\n        traceback.print_exc()\nIndex: python-phply/tools/unparse.py\n===================================================================\n--- python-phply.orig/tools/unparse.py  2015-02-21 16:44:56.306062304 +0100\n+++ python-phply/tools/unparse.py   2015-02-21 16:44:56.302062296 +0100\n@@ -28,7 +28,7 @@\n         self.f = file\n         self._indent = 0\n         self.dispatch(tree)\n-        print >>self.f,\"\"\n+        self.f.write(\"\")\n         self.f.flush()\n\n     def fill(self, text = \"\"):\n@@ -492,17 +492,17 @@\n     try:\n         names = [n for n in os.listdir(a) if n.endswith('.py')]\n     except OSError:\n-        print >> sys.stderr, \"Directory not readable: %s\" % a\n+        print (\"Directory not readable: %s\" % a, file=sys.stderr)\n     else:\n         for n in names:\n             fullname = os.path.join(a, n)\n             if os.path.isfile(fullname):\n                 output = cStringIO.StringIO()\n-                print 'Testing %s' % fullname\n+                print ('Testing %s' % fullname)\n                 try:\n                     roundtrip(fullname, output)\n-                except Exception, e:\n-                    print '  Failed to compile, exception is %s' % repr(e)\n+                except Exception as e:\n+                    print ('  Failed to compile, exception is %s' % repr(e))\n             elif os.path.isdir(fullname):\n                 testdir(fullname)\n\n```\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/103681838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258975782", "body": "Hi, just release a new version and I'll notify/report them :)\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258975782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jheld": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/viraptor/phply/issues/comments/116907265", "body": "Yeah, he doesn't seem particularly interested in maintaining this. You may want to try emailing him, via his address in the AUTHORS file.\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/116907265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dgasson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/viraptor/phply/issues/comments/150264560", "body": "So it turns out it was pretty straightforward to maintain python2 compatibility. The master branch of the fork quoted in the pull request has those changes now.\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/150264560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "beh9540": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258973963", "body": "Sorry, Pycharm trying to clean things up to it's way. I'll fix that.\n", "reactions": {"url": "https://api.github.com/repos/viraptor/phply/issues/comments/258973963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}}}}