{"_default": {"1": {"tkanov": {"issues": [{"url": "https://api.github.com/repos/github/github-ldap/issues/100", "title": "Net::LDAP.new deprecation warning", "body": "When `encryption` parameter is passed as String to Net::LDAP.new\r\n\r\n```\r\nldap_options = {\r\n  ...\r\n  encryption: 'ssl',\r\n}\r\nldap = GitHub::Ldap.new ldap_options\r\n```\r\n\r\nit produces the following [deprecation warning](https://github.com/ruby-ldap/ruby-net-ldap/blob/78e97ed69dc9ebbf06b04e7e70ceb046c23de75c/lib/net/ldap.rb#L622)\r\n`Deprecation warning:  please give :encryption option as a Hash to Net::LDAP.new`\r\n\r\nAt [present](https://github.com/ruby-ldap/ruby-net-ldap/blob/78e97ed69dc9ebbf06b04e7e70ceb046c23de75c/lib/net/ldap.rb#L483), the `encryption` value must be a Hash with parameters, which consists of two keys:\r\n`method:` - `:simple_tls` or `:start_tls`\r\n`tls_options:` - Hash of options for that method", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/github/github-ldap/pulls/99", "title": "Fix for deprecation warning: please give :encryption option as a Hash\u2026", "body": "\u2026 to Net::LDAP.new", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/292103899", "body": "A PR to fix https://github.com/github/github-ldap/pull/99", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/292103899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/298630731", "body": "up :)", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/298630731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "doublemarket": {"issues": [{"url": "https://api.github.com/repos/github/github-ldap/issues/98", "title": "Add support for handling Active Directory member attribute with Range suffix", "body": "[Depending on a `MaxValRange` setting on an Active Directory server](https://support.microsoft.com/ja-jp/kb/2009267), the server can return the `member;Range=[low]-[high]` (e.g. `member;Range=0-1499`) attribute including certain number of users instead of the `member` attribute including all users when a number of users in a group exceeds the `MaxValRange` value.\n\nSince the filters in the [lib/github/ldap/filter.rb](https://github.com/github/github-ldap/blob/b75ef743fd68c8df51194a56a44db5c009831261/lib/github/ldap/filter.rb#L9) don't care the `member` attribute with the `Range` suffix, no users can be found.\n\nThe filter should be able to handle the `member` attribute with the `Range` suffix and also it needs to support pagination if the `Range` suffix exists.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/98/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "davesims": {"issues": [{"url": "https://api.github.com/repos/github/github-ldap/issues/90", "title": "`rake` and `rake test` fails ", "body": "Running `rake` or `rake test` fails with the following (with and without `bundle exec`):\n\n``` sh\n\u279c  github-ldap git:(feature/multi_domain) rake\n/Users/davesims/github/github-ldap/test/test_helper.rb:20:in `<top (required)>': undefined method `after_run' for MiniTest:Module (NoMethodError)\n        from /Users/davesims/github/github-ldap/test/domain_test.rb:1:in `require_relative'\n        from /Users/davesims/github/github-ldap/test/domain_test.rb:1:in `<top (required)>'\n        from /Users/davesims/github/github/vendor/ruby/11323111113067d8fc579071c01d83e9f161adc4/lib/ruby/2.1.0/rubygems/core_ext/kernel_require.rb:55:in `require'\n        from /Users/davesims/github/github/vendor/ruby/11323111113067d8fc579071c01d83e9f161adc4/lib/ruby/2.1.0/rubygems/core_ext/kernel_require.rb:55:in `require'\n        from /Users/davesims/github/github/vendor/gems/2.1.7/bundler/../ruby/2.1.0/gems/rake-10.5.0/lib/rake/rake_test_loader.rb:10:in `block (2 levels) in <main>'\n        from /Users/davesims/github/github/vendor/gems/2.1.7/bundler/../ruby/2.1.0/gems/rake-10.5.0/lib/rake/rake_test_loader.rb:9:in `each'\n        from /Users/davesims/github/github/vendor/gems/2.1.7/bundler/../ruby/2.1.0/gems/rake-10.5.0/lib/rake/rake_test_loader.rb:9:in `block in <main>'\n        from /Users/davesims/github/github/vendor/gems/2.1.7/bundler/../ruby/2.1.0/gems/rake-10.5.0/lib/rake/rake_test_loader.rb:4:in `select'\n        from /Users/davesims/github/github/vendor/gems/2.1.7/bundler/../ruby/2.1.0/gems/rake-10.5.0/lib/rake/rake_test_loader.rb:4:in `<main>'\nrake aborted!\nCommand failed with status (1): [ruby -I\"lib:test\" -I\"/Users/davesims/github/github/vendor/gems/2.1.7/bundler/../ruby/2.1.0/gems/rake-10.5.0/lib\" \"/Users/davesims/github/github/vendor/gems/2.1.7/bundler/../ruby/2.1.0/gems/rake-10.5.0/lib/rake/rake_test_loader.rb\" \"test/**/*_test.rb\" ]\n\nTasks: TOP => default => test\n(See full trace by running task with --trace)\n```\n\nWorkaround is to run test files directly through ruby & bundler\n\n``` sh\n\u279c  github-ldap git:(feature/multi_domain) bundle exec ruby -Ilib:test test/**/*_test.rb\nRun options: --seed 6062\n\n# Running:\n\n....................................................\n\nFinished in 3.112345s, 16.7077 runs/s, 23.4550 assertions/s.\n\n52 runs, 73 assertions, 0 failures, 0 errors, 0 skips\n```\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/90/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/231270877", "body": "@timmjd :bow: \u2716\ufe0f \ud83d\udcaf for all your hard work on this! To get this merged in faster, I'm going to close this PR and continue working on these changes in a new PR based on your fork: https://github.com/github/github-ldap/pull/91.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/231270877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/231871974", "body": "@gnawhleinad @jch @mtodd My apologies if this has been addressed elsewhere, but wouldn't referrals would be the preferred way of handling this, rather than iterating through domain controllers?\n\nhttps://technet.microsoft.com/en-us/library/cc978014.aspx\n\nAnd if so, is there a reason we're not working to implement this PR instead?:\n\nhttps://github.com/github/github-ldap/pull/87\n\n/cc https://github.com/github/customer-feedback/issues/519\n/cc https://github.com/github/customer-feedback/issues/91\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/231871974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/235712124", "body": "This in on hold, and will likely be replaced by https://github.com/github/github-ldap/pull/94.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/235712124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/237665796", "body": "Just a note: I've rebased https://github.com/github/github-ldap/pull/94 onto this branch. I'll need to merge https://github.com/github/github-ldap/pull/94 into master before merging this.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/237665796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/237713831", "body": "@jch @mtodd Updated per review, ready for final :eyes: on this when you get a chance.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/237713831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/237883796", "body": "Closing in favor of #94 and #95\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/237883796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/237887384", "body": "This was shadowed by merging #95 first. Closing. \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/237887384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/70120535", "body": "Return an empty `Entry` if `rs` doesn't contain any.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/70120535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/70157656", "body": "\ud83d\udea7 WIP \ud83d\udea7 \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/70157656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/70274886", "body": "Note that since all of the forest domain controllers' connections are being initialized with `server[:dnsroot]` (which will be something like \"ad.ghe.com\") this assumes the GHE instance can resolve the DNS for each domain controller in the forest. DNS will likely be owned by internal ActiveDirectory DNS in this case. \n\nForestSearch won't work if the GHE is set up with a static IP for the AD instance, and doesn't have the shared DNS nameserver in its `resolve.conf`.\n\nhttps://help.github.com/enterprise/2.0/admin/articles/configuring-dns-ssl-and-subdomain-settings/#setting-dns-nameservers\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/70274886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/70479229", "body": "This conditional & block should probably be removed. I don't think `forest.empty?` can ever be true, since every Active Directory [has a forest as the top-level container by definition](https://technet.microsoft.com/en-us/library/cc759073%28v=ws.10%29.aspx), even if it only has one Domain Controller. This has been the case in local testing with our AD vagrant instance with a single domain. If the forest is empty, something else has gone wrong.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/70479229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/70880299", "body": "This needs to inspect the Domain Components to make sure the that right Domain Controller is performing the search.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/70880299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73563987", "body": "I _think_  ~~so~~ we should prefer the user config. Ruby's `URI` (which is what's underlying `GitHub::Ldap::URL`) gives a default port of 389 because it's smart about the protocol, `ldap`. I've yet to see a referral come back with a port on the URL, so I think in this case we do want to prefer the port designated by the user, which would not be 389 and would instead by 686 if they're using TLS/LDAPS. \n\nThat said, I just tested `URI` in pry, and it's also smart about using 686 if the protocol is `ldaps`. If I knew that the referral URLs were consistent about the protocol I'd say let's prefer the port returned by the referral. I'll set up some test conditions on my local AD forest & find out.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73563987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72098921", "body": "Made this public since `Domain` now [needs to pivot](https://github.com/github/github-ldap/pull/94/files#diff-e1bd3bdd1e3ab28a95efb8ba8db6cd0cR122) on whether the server is an AD or not.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72098921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72099185", "body": "Need references to these to give to the Global Catalog as defaults.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72099185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72154166", "body": "Means it's not assigned until it's requested, i.e., `||=` \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72154166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72154853", "body": "Agreed, this is an ugly pivot. I think it would make sense to follow the [configuration pattern](https://github.com/github/github-ldap/blob/master/lib/github/ldap.rb#L265) from `GitHub::Ldap` to set something like a `@user_search_strategy`, etc.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72154853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72155324", "body": "It'll make more sense when I add the user configuration option. This test asserts that the default authentication is pulled from the authentication given for the main domain controller, which is usually also a Global Catalog. But the user may want to specify a separate domain controller to use as the Global Catalog, with its own host & authentication.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72155324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72155859", "body": "Mainly as a convenience for [cases like this](https://github.com/github/github-ldap/pull/94/files#diff-c793d1b8aa9fb622f67032b4b0f7020dR136).\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72155859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72155931", "body": "Oh, you mean split the group block. :bowtie: \n\n\ud83d\udc4d \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72155931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72156975", "body": "I don't think the admin auth attributes are AD-specific, at least they weren't [being used that way before](https://github.com/github/github-ldap/pull/94/files#diff-efa5b2f99f979678d1cf84d090d3dfbdR82).\n\nAlso, turns out that instance variable was already set at the bottom of the initializer. I've taken this assignment out.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72156975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72157436", "body": "3268 is specific to Active Directory's Global Catalog. That's actually how you get to the Global Catalog, through that port. Might make sense to put it in a constant to better document that?\n\nI plan on adding the ability to fall back on the main domain controller in `Domain#user?` if the Global Catalog is not available.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72157436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72159452", "body": "Need to think this through even further. We perform the `user?` query on the `Domain` object, but a Global Catalog search is not domain-specific by definition, so that type of search doesn't belong on this object, even though it's convenient to make that decision here.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72159452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73545204", "body": "\ud83d\udccb fail\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73545204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73546797", "body": "The reason we have to always use blank here is that we want to search the whole forest, all domains, for the user with the given `sAMAccountName`. From https://technet.microsoft.com/en-us/library/cc978012.aspx:\n\n> For a Global Catalog search, the base distinguished name can be any value, including the value \"NULL\" (\" \"). A base distinguished name of NULL effectively scopes the search on the search computer to the Global Catalog. \n\nI think it feels wrong because we're overriding a search that _has_ a base DN scope (the `Domain` object) with a search that doesn't by definition (the Global Catalog). In a better situation we'd make the decision to use a Global Catalog object explicitly from the gh/gh side, but as written now, the application is asking the `Domain` object for `user?`.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73546797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73548282", "body": "They'll go away when I merge the referral chasing branch.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73548282/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73548414", "body": "Yes, and we decided that since we're allowing the user to choose whether to use the GC or not, that wasn't necessary. If they say they want to use the GC, it should be available.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73548414/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73548698", "body": "How do we define `Internal`?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73548698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73549038", "body": "There's no Global Catalog without the capability, so even if the user has requested the GC on a non-AD instance (admittedly not likely), we should fall back on the default strategy.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73549038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73549176", "body": "Actually already did, about to push that.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73549176/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73557632", "body": "Ah, gotcha now. How's that look?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73557632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73559102", "body": "That's completely right. I'll remove the fallback.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73559102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mtodd": {"issues": [{"url": "https://api.github.com/repos/github/github-ldap/issues/86", "title": "Connection required on initialization", "body": "When instantiating a `GitHub::Ldap` object, a connection is established and query performed to determine the server's capabilities which are used to configure the appropriate membership search strategies.\n\nI'd like to avoid having to connect and query on object instantiation and only perform the query when it's absolutely needed.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/86/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/github/github-ldap/commits/e7de8e7e45350fb2a784269d81ac905b66319edc", "message": "Setup test hosts for connection caching"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/2b8005820670574b9d4d03381d8c808c9fff04c4", "message": "Rename mock_connection to ldap\n\nStylistic preference to be more consistent with other tests."}, {"url": "https://api.github.com/repos/github/github-ldap/commits/64c6e08eade8c609337aad8f76f3428a699e7576", "message": "Configure connection with GitHub::Ldap::Test#options\n\nAlso use that port value, as it changes depending on the integration test\nLDAP server in use."}, {"url": "https://api.github.com/repos/github/github-ldap/commits/142e3fd273b2d8ecb59e0127109647aa5b6eab85", "message": "Test Ruby 2.0"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/c3b2401634e169434f80514d156aae02d72dc339", "message": "Release 1.9.0"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/75311aa6c8aa09f7136323c05963840eb00bca63", "message": "Merge pull request #85 from github/release-1.9.0\n\nRelease v1.9.0"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/42dc1fca788f148c2de7e11ff136ee91a2042ac8", "message": "Bump version to 1.9.0, update changelog"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/6033b0f448dae65d83f72b1a6620367e32381a37", "message": "Merge pull request #84 from github/bump-net-ldap-dep\n\nBump net-ldap dependency to v0.11.x"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/c076b1ada3829e487c6d470384395fa72682269d", "message": "Setup GitHub::Ldap instance with correct settings"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/e2f51d09926725d2c0b055fc4489e5c1eeaac51a", "message": "Depend on net-ldap v0.11.x"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/8d18e1302fed1ca1b57bb2754e6c10047fc943ce", "message": "Merge pull request #83 from github/release-1.8.2\n\nRelease v1.8.2"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/094a3d5ed85ecd71cba1351cade527137db6cde2", "message": "Bump patch version, update changelog"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/157fcfa9102ae79dd53d786b3e7c8dcb2e07d3ff", "message": "Merge pull request #82 from github/case-insensitive-dn-compare\n\nCompare AD DNs case-insensitively when checking group membership"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/99ab8c6376c4e53bd602c01f494c0b7b183043d1", "message": "Release 1.8.1"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/f7c44a1a3cc01e25c5db15f6a8266800df98f603", "message": "Bump version to 1.8.1"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/ba158a024e5d236a6fa42b51c38fadcfc8595723", "message": "Update changelog"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/90d545516038af70aaafbeab5ded002779245cb0", "message": "Merge pull request #80 from github/ad-v60-caps\n\nExpand ActiveDirectory capability support to v51 (Windows Server 2003 and above)"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/5cfcb2f6457e34ebcd4f175aaf2d5913ee64bc31", "message": "Bring back further to v51 for 2k3+ support"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/e219da1cb86aecd94e09188c930bef655a2b67f7", "message": "Expand AD caps support to v60\n\nThis adds support for Windows Server 2008 and above, instead of\nonly 2008 R2 and above."}, {"url": "https://api.github.com/repos/github/github-ldap/commits/47be59a7e04b13327b19de5ab48520076504e62a", "message": "Release 1.8.0"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/0517478dcc5c9083d4d68633e3ff919028fb6407", "message": "Merge pull request #79 from github/release-1.8.0\n\nRelease v1.8.0"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/5107dc7ee9b761940252935731b00cfd23d21a20", "message": "Update changelog for 1.8.0"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/196bc17bac97056f99f73853555a922856f741f7", "message": "Bump version to 1.8.0"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/db977d334dc0acc48ba3b1dc3858bd5c95031854", "message": "Merge pull request #78 from github/subgroup-member-search\n\nSubgroup Member Search strategy optimizations"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/973959d4f4aec8b62bb5e9f837e0cbe2c206cf68", "message": "Fix method name"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/de8d8b46a8d8dcf25589bd46d1cc41f506e6dd6a", "message": "Tweak member DN collection, mapping"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/2e5943b9d822a2a2a277ba2bbca33791ac4a9671", "message": "Fix spacing [skip ci]"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/8fce4a79dc48cffaa67c62d7ab68120427a074ca", "message": "Extract group search method"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/52654ad40bd92932e93089278ae6e79302f14d48", "message": "Short circuit after filtering out already searched DNs"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/09e05a67d030739a78b690afe3d1a3576869fade", "message": "Use a Set to track DNs searched for"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/909da53b87a6c7e304fbb97d1afd0747aab7a959", "message": "Doc, reorder variables to make purpose explicit"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/cb4bd2ce9f2d18ef627c05f63b2f8105586fcf5c", "message": "Ensure unique entries"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/2a62c2112def6afd865e7a161955a082a5de492b", "message": "Find subgroups, then materialize members"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/212816c8407d5a72ea332450a56919c5d91a3546", "message": "Skip searching for entries already found"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/2f49d6b494ae8e9b5f951d68f611ca25ff87e8f2", "message": ":fire: unnused variables"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/0d9b7978c2fe9a0b5c76bc710563237a1a34d1d1", "message": "Fix AD-specific runner guard"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/7bc49bc5f468edbc5c89e815130ddac4356e4452", "message": "Remove unnecessary AD group filter test"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/a5b2a0060eeefd10ee89a1f9cae9983efb56b82a", "message": "Fix domain test"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/db53a058c90f74adaea32ae2b5902e359d76710a", "message": "Release 1.7.0"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/581d081f2231c70a31b1521151fc68730c0dfe28", "message": "Merge pull request #74 from github/release-1.7.0\n\nRelease v1.7.0"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/1ef910c91ef5a4f25c56772771297515cf2f999a", "message": "Update changelog"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/f9a8cc253e4e22814b1a9ee97063cf57cfa193d5", "message": "Bump gemspec version"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/4105b9e694434be1172f63d8ad0b68886ea6e01d", "message": "Merge pull request #73 from github/recursive-membership-validation-depth-as-constructor-option\n\nAccept depth as option for Recursive membership validator strategy constructor"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/51e2732112a3b61305b08ea4486d9ba403e6aec5", "message": "Warn that the depth_override param is deprecated\n\ncc @jch"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/d72403679e2429be3b537f57a884cc9c2c401939", "message": "Keep depth param as override"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/ec8ee6cfbc5a588c5defd66f611313d6f4a6e7b4", "message": "Document depth option"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/4c2dc84e87fd3e1a1849414fe0eb69280fb4781d", "message": "Minor tweak to test helper"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/9b820ee975ef57aaec8efd0551c7b64639af9745", "message": "Accept depth as option for Recursive strategy constructor\n\nThis makes the perform method signature identical for all strategies."}, {"url": "https://api.github.com/repos/github/github-ldap/commits/f3a01360000728c45ee3fc9f302f7ff0c6b6eae5", "message": "Merge pull request #72 from github/bump-net-ldap-version\n\nBump net-ldap dependency to 0.10.0"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/37f3510ef55fbdc8bc07833bc22e5a49219cc371", "message": "Require net-ldap 0.10.0"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/d0ae894c2e6aea7f754d895127e843ccdcba8d77", "message": "Release 1.6.0"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/d34a89974bbc87d7beaa1421209d0e0a3142bfb8", "message": "Merge pull request #71 from github/release-1.6.0\n\nRelease v1.6.0"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/7f6f18056069ab0b78107bed13a2aca433e0525e", "message": "Update changelog"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/310a531f2745de6045a26bbcd8efeb874c90b7c4", "message": "Bump Gemspec version, add author, fix capitalization"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/0be3a99315b7d428b2209e6c68367fbd7bc84eca", "message": "Merge pull request #70 from github/detect-configuration\n\nSimplify Search Strategy configuration, detection, default behavior"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/a62ca6c716ab73e5e6dae96bf21d02bc1e289bba", "message": "Fix config method doco"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/42ffdb659cdff72d6e61817ac93ecb62e78359b8", "message": "Test search strategy config, detection, defaults"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/d7b83cd312ce817ccb2c6a3aa5fd650085415e55", "message": "Capabilities module was removed"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/cb8f4918b364b1fa41e713d74a115ac791b4352f", "message": "Remove Detect meta-strategy, inline config/detection"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/0e04583da578286a435b167f7d7676d69dd8dd07", "message": "Move requires to the top"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/3a94c854ed9c177369db4109cbcfad8c15d7bf43", "message": "Merge pull request #69 from github/member-search-cleanup\n\nMemberSearch cleanup and polish"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/a9b86ef83737943d16df960353169ad03d1b2da5", "message": "Extract common behaviors for MemberSearch strategies"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/d4d705daa4f02f721f8d2aab523cf6600d8cb613", "message": "Add ActiveDirectory member search strategy"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/4f774fd7202cf4bf45bbe56f3412622073db99b9", "message": "Include Capabilities to reuse constant"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/05cb39cb9b860a7cfdb0b3b521e6ee8856dc8806", "message": "Add member search Detect strategy"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/a2ea06f1976779fc5c220bb0bb1560b8cc69a758", "message": "Extract re-usable capability detection logic"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/e79d6321ea90e0c7b8111c2cac07546b87825687", "message": "Add member_search_strategy config option"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/12ba663ed4f53b46c552913993407ae4a58f56c2", "message": "Rename Members to MemberSearch"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/51f9cfdf293711d7000ab548fc16d1f1a60ecf6e", "message": "Merge pull request #68 from github/member-search-attrs-option\n\nAdditional query attritbutes option for Member search strategy"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/3762988be4c79170ee2565cfb46f38d5b77374ee", "message": "Merge pull request #67 from github/is-group\n\nExpose Group.group? for testing if entry is a group"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/8056ecd74133bfc7938176ebc0f51067bf63f405", "message": "Take attrs option for Member search strategy"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/e4242e549ac31bcfcf86c978b022217faae8f98f", "message": "Expose Group.group? for testing if entry is group"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/cad70befe86c1a928574e8b8d0c32d239afc2220", "message": "Merge pull request #65 from github/member-search-attrs\n\nRemove redundant attr query"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/4cc4caa22c44e9fe7f51b391923eff191efc5b17", "message": "Querying for the DN attr is redundant/unnecessary"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/a1276fff111af8c9d7a0850bf6321560e31e569d", "message": "Merge pull request #64 from github/recursive-membership\n\nRecursive group member search strategy"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/76546821dd458009bcbda22024f9e6ab5fa101ca", "message": "Test classic member search strategy"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/9418bd06ba399392e5f8077520bc9455f0b91bee", "message": "Doc entries_by_uid method, make internal methods private"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/3822f4bb1739d163354ee6c6a5de5c8c14b4b762", "message": "Fetch member entries by DN, UID"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/b01e0ea87fb5a8d84a21989a7ea939f6d69a03c1", "message": "Refactor member entry search, add memberUid search, test"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/7129554127a752aa18507cf914effc8caee4a6e6", "message": "Include uniqueMember, memberUid in attrs to fetch"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/15b47712784455de4baee7d970e7bb8065e4e586", "message": "Test deep recursion, configurable depth limiting"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/9f48809ca3ae23a766d0589f015e1384bc4a0ccd", "message": "Add Classic members search strategy"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/19b60bdf84c8c5bdc184d75cd29c86f0ba95d0ad", "message": "Clean up unneeded bits"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/3892f4e75011a3ba4b78f3d3cd10816c090f0489", "message": "Implement recursive group member search"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/0dd969d6386bfd4f9889d39acb193306a344b6cf", "message": "Add WIP recursive member search strategy"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/f7448ee6d146cb7c8c42433aa4d44745fec20843", "message": "Release 1.5.0"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/3216ec6ee7b060164201a510c1032beb2f452222", "message": "Merge pull request #63 from github/bump-to-1.5.0\n\nBump version, changelog for v1.5.0 release"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/ddeb404dfa3e1c498b0b82f9bacca699a953d7ab", "message": "Document v1.5.0 changelog"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/c7fe88e22e4a1981ec9d54983e96a8a88418a6b8", "message": "Fix script/changelog"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/9c6527b51a8f454308438b95338a62add8ab1d4a", "message": "Bump version to 1.5.0"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/5d3e400bf22784db3d49f73f25468dcf1765c44a", "message": "Merge pull request #61 from github/local-activedirectory-integration-testing\n\nLocal ActiveDirectory integration testing"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/f95f985f71694dd63da343cda16d75772bc1cbcb", "message": "Merge branch 'master' into local-activedirectory-integration-testing"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/ec9021e0956f15447d9aaa2d809df10b7510c152", "message": "Use INTEGRATION_* instead of flavor-specific ENV vars"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/a316402f5326e7d54cebcb29cbba994c15fd8ab1", "message": "Minor tweaks and corrections"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/b8407ed58a09695a1678d799e48e56c45200c98c", "message": "Merge pull request #62 from github/membership-validation-config-test\n\nTest membership validation configuration"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/7cd4bc84f305675b27d884e54731df40a2ce77f2", "message": "Move membership validator config tests to GitHub::Ldap test"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/ef1c4537a475dfaa0af0f3903430ec497062773d", "message": "Test membership validation configuration\n\nThis replaces the existing tests on the top level MembershipValidators module\nsince those tests were duplicates of more specific tests for each strategy."}, {"url": "https://api.github.com/repos/github/github-ldap/commits/963297ff904f1ad4b999724e75c156899df655c6", "message": "Test Detect meta-strategy"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/013bb288683feddb67cff3ff27fe4e30e629edbb", "message": "Server returns supportedCapabilities"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/946267668a44960c21df3e1f33dc0b8e8c0b427c", "message": "Only instrument when we query for capabilities"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/78039780d79a068070bab1fc3836baa73b0026d5", "message": "Move capabilities lookup to GitHub::Ldap"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/18cdf65e8caaf28695c07497335a918fdb16d4ea", "message": "s/if/whether/"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/60ee236415a6ff2e952b9c24f1a6a58186117419", "message": "Ensure detect_strategy returns the strategy class"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/941a577c204aded655ed0dc5ded47b8a8b4919a4", "message": "Fix detect_strategy doco"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/fe976b4994615f13bffe11c35df6f94c63253cd1", "message": "Proactively handle capapbility query errors, instrument"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/724177b86660e3206c9942e62f7d2cba0a39c1fb", "message": "Update required capability OID to match 2008 R2 v61"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/838c8b1c8d8c3c85c291929a7846c92a0e83f893", "message": "Move strategies map to GitHub::Ldap::MembershipValidators"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/22d7995f40ffdba9dded76fb174b2ab8f7878b3d", "message": "Add Detect membership validation strategy\n\nDetects ActiveDirectory capabilities, defaults to Recursive."}, {"url": "https://api.github.com/repos/github/github-ldap/commits/cd3934ec79f2d13d76c095ec769045e5e74687f0", "message": "Add membership_validator config option, default to detect"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/0413b7e82b93e09a9aaf108521631837174157a2", "message": "Merge pull request #55 from github/openldap-vagrant-box\n\n[CI] Add Vagrant box for running tests against OpenLDAP locally"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/bea78ba08461ffe26ebf7e7a6587c85f767954a3", "message": "Add VM README"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/c325873f51c0f3ee9f8c6063676e9ce418679e37", "message": "Add Vagrantfile for running OpenLDAP tests"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/91adedd7e480dfc7e30ff6777c513e2c246f9a89", "message": "Allow configurable OpenLDAP host (for local runs)"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/cc594e45c0eaa7c73c9c01d1db5e0aaf1a062302", "message": "Merge pull request #54 from github/run-all-tests\n\nRun all tests, including those in subdirectories"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/d32bcfbb0dbee7f3ad40562fa02fb587cfa7f7c6", "message": "Move setup out of stub block\n\nThe stub was affecting the search for the groups, tada."}, {"url": "https://api.github.com/repos/github/github-ldap/commits/b971627acc0a26c36a4c55b82c660172749b2031", "message": "Include all tests in run"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/fd3d2fa200452df1e047044bfce3a31358475060", "message": "Merge pull request #52 from github/ad-membership-valiator\n\nAdd ActiveDirectory membership validator"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/1c37c2291a5da285a036cd3a92963c7238021b71", "message": "posixGroups are not a thing in ActiveDirectory"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/06e809091edf263b991765f1f494149e85c9312d", "message": "Stub search results directly h/t @jch"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/e63e2afb24dc0989f481ffed18027d51411149ba", "message": "Short circuit membership valiation without groups to check\n\nDefault to true since no groups to validate against translates to\nexisting handling: if no groups to check against, then they are valid\nmembers."}, {"url": "https://api.github.com/repos/github/github-ldap/commits/f008a495cb2043a5daccd6f005f041d43841ece4", "message": "Add simple, stubbed ActiveDirectory membership validator tests"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/22333a0c8fb0970783113ef1f602b6b7acf194fc", "message": "Search directly against directory, simplify match check\n\nUsing GitHub::Ldap::Domain#search forces the base to the domain base\n(unsurprising yet surprising)."}, {"url": "https://api.github.com/repos/github/github-ldap/commits/9e008b796439ba596b20ab512c584d4c3421e4c9", "message": "No depth argument for this strategy"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/fd2bb1bfbcd3d27ad06bdc977dd721efb0a40ad0", "message": "Add ActiveDirectory membership validator"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/0bdbdf2c0dc865222789ad8ad26ee30fedb9d655", "message": "Merge pull request #50 from github/dev-v2\n\nMerge dev-v2 branch into master"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/9d154e8d43b213e62dc4546fff9ac936680af3c0", "message": "Require membership validator strategies\n\nRemoved deprecated autoload. h/t @jch"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/5ec9b3699d68f10fa1710a8607d543a45daaaa05", "message": ":fire: unneeded LDIF fixtures"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/e14a910f640254b81af35aec59aac4c596af69a6", "message": "Merge pull request #49 from github/fix-membership-validator-tests\n\nFix membership validation tests"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/108d29081b136aeb5bb794901da45e4b6b374c8a", "message": "Include general membership validator test cases"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/70142997d2a36aa33002cc56ee4c39d155bce4df", "message": "Update membership validator tests"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/db13ebde3fb86826072b836f454e45e75a1942b8", "message": "Merge pull request #48 from github/cibuild-openldap\n\nAdd CI build for OpenLDAP integration"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/15953cc66634f5ffa58f2534215ae06f8feac948", "message": "Fix up posixGroup tests"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/6502ab1026d43d631780322c819f4af547ee4366", "message": "Fix Group tests, add fixture group with missing members"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/102351c53df6ddf0de154083c18ecb7cbf4a5c49", "message": "Rewrite GitHub::Ldap tests"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/a1988abf64df0cd49ae56d358fa97a8247435951", "message": "Include gidNumber in seed; fix posixGroup schema\n\nThe original posixGroup schema was mostly made up, so this duplicates\nthe reference: http://www.zytrax.com/books/ldap/ape/nis.html"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/46fea0d6bb705e968451be935ab802266176dda1", "message": "Rewrite Domain tests"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/919734ea185667b412ca535a342d4d9527ecbefb", "message": "Use common seed for OpenLDAP"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/84e37ce4f64ae89c7c5647d072b9db1545f2ec5c", "message": "Add supporting fixtures, fix email domain"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/34d63f6f9f740e2a232ac0dcef89ac939d9a9107", "message": "byebug is supported on MRI 2.0, 2.1 only"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/1fe748e25687290c51b86ef731956a01de55558a", "message": "Experiment with reusing the ApacheDS LDAP server for each test"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/b3ac5f3627d31d0b6d07f799d2b8cc14a58fb9c2", "message": "Add byebug as an development, test bundler dependency"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/010fbc4d4559db51e83f79dac5f55c96f9436900", "message": "Fix Domain posixGroup tests, fixtures"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/d80dbc55a6769bb8eed9ecd04024ae93b0bfb560", "message": "Update one Domain test with correct fixture"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/19aa5070c17f71a7eef8eed6ab2b5c398b658bfe", "message": "Use ENV.fetch with default"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/f0a3d7579abd1547abccaf41c6afcfaf6553a191", "message": "Remove quiet option when verbose is set\n\nHelpful for debugging since quiet will override verbose in practice."}, {"url": "https://api.github.com/repos/github/github-ldap/commits/1e2b52ee73354568a560f099a737df75e49c03c3", "message": "Remove test-specific fixtures, use common seed\n\nOverrides local adaptor settings, though."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/35576269", "body": "@calavera :shipit: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/35576269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/35925178", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/35925178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/37227973", "body": ":metal:\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/37227973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/37241784", "body": "Change looks good!\n\nWondering if we should open this up further to customization instead of maintaining a hardcoded list of names (in a followup pull).\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/37241784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/38329924", "body": ":sparkles:\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/38329924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49687020", "body": "@mcolyer I haven't. Tests aren't working, and this doesn't really do anything until you subscribe to the events that the instrumentation service will emit when in use.\n\n@rtomayko :ok_hand: happy to hear more of what you were thinking. I'm basing this off of https://github.com/jch/html-pipeline/pull/45 somewhat since it's been super helpful in making the HTML pipeline's internal workings visible for external logging et al.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49687020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49824733", "body": "Still want to get this incorporated, but not urgently.\n\n@rtomayko happy to follow up with specific instrumentation/logging/metrics otherwise.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49824733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52269951", "body": "#34 should fix the failing tests.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52269951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52271164", "body": "Deleted the commented out bits in the LDIF fixture files. (I hope you're happy.) ;)\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52271164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52271927", "body": "Hey look, it's green.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52271927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52386012", "body": "@mikemcquaid not on its own, it doesn't have any production impact. It will help me keep my sanity with the other changes, though!\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52386012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52386021", "body": "(To answer the question, it _will_ be backported! ^_^)\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52386021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52591376", "body": "Would appreciate any further review/feedback, though I think this is ready.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52591376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52713743", "body": "Validated the changes here work as expected.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52713743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/53667723", "body": "Ran `Group#group?` tests separately to ensure that there was a real issue here. Confirmed: https://travis-ci.org/github/github-ldap/builds/33759563 fails on https://github.com/github/github-ldap/blob/5baa88a0613ca958c89a3c19686dec5e57c90e36/test/group_test.rb#L20 when object classes are downcased, as is the default with `Net::LDAP`. So that was preventing recursion.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/53667723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/53677105", "body": "Not sure there's a good way to test this without some serious stubbing which I'd prefer to avoid.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/53677105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/53845392", "body": "Feel much better about not having to write tests for explicit method delegation.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/53845392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/54105047", "body": ":+1: :sunglasses: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/54105047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/57025812", "body": "@jch cleaned up the diff based on your feedback, looking into a few more test and docs tweaks, but want to get this merged into `dev-v2` and keep iterating.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/57025812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/57233045", "body": "Bah, just realized I created this PR against `master` instead of `dev-v2`.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/57233045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/57271104", "body": "Tests are failing due to the mismatch of fixture data. My original strategy was to create separate tests for OpenLDAP but I think a better approach will be to update the existing tests and fixtures to match OpenLDAP fixtures (which will also need to be expanded to include existing cases).\n\nAlso worth noting, OpenLDAP tests run in under 30s, compared to 2min 30sec runtime for ApacheDS-based tests due to it frequently booting and terminating its test server!\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/57271104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/57271201", "body": "Then again, we could cut down the tests we run for OpenLDAP and follow up by bigger refactoring of tests in a separate PR.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/57271201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/58326785", "body": "Merging without the Vagrant box for testing OpenLDAP locally, will follow up separately.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/58326785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/58327103", "body": "#48 was merged but instead of replacing ApacheDS/ladle, it added OpenLDAP to test alongside ApacheDS so now all our tests are running against both. Was also able to speed up the ApacheDS tests and reduce complexity of the fixtures.\n\nGoing to keep ApacheDS for the time being since it means running tests standalone without having to boot OpenLDAP vagrant boxes/standalone. May revisit later.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/58327103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/58382719", "body": "@jch yeah, the `refute` and quoting stuff should be cleaned up but I think these tests need more love so I'll worry about that when I come back to it, gradually.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/58382719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59286362", "body": "These changes were individually reviewed in #45, #48, and #49.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59286362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59287268", "body": "Once my comment above is addressed (whatever you decide is cool), merge this into `dev-v2`. No reason to have to reopen this against master.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59287268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59428352", "body": "@jch that might be _similar_ to how we're testing `Net::LDAP::Connection` socket events:\nhttps://github.com/ruby-ldap/ruby-net-ldap/blob/0aeceaffd4ad75e03049e30cbf935cd77da3d8e9/test/test_ldap_connection.rb#L187-L204\n\nThe problem here is that what we want to test is that this works as we expect, that we've crafted the correct query to trigger the proper behavior. I can independently verify that the query is valid and works as expected, and once that's done we can create a test case to verify that the query the validator uses matches the verified query. Sound sane?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59428352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59442832", "body": "Builds aren't showing (for me) but here is the current build: https://travis-ci.org/github/github-ldap/builds/38209543\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59442832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59442845", "body": "Which is :green_heart: green!\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59442845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59455355", "body": "@jch the validator will just do what it's told to do, whether it's the right thing to do or not. Any detection will be the responsibility of the app where this is used.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59455355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59473332", "body": "@jch check out f008a495cb2043a5daccd6f005f041d43841ece4 and let me know if you think it adequately covers this (given our limitations) or not.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59473332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59474191", "body": "Build is green: https://travis-ci.org/github/github-ldap/builds/38224481.\n\n(Will figure out why builds aren't showing up tomorrow.)\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59474191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59550490", "body": "Build status: https://travis-ci.org/github/github-ldap/builds/38286177 :green_apple: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59550490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59563073", "body": "Back to :green_apple: green: https://travis-ci.org/github/github-ldap/builds/38296225\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59563073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59589395", "body": "#52 was merged.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59589395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59602703", "body": "Leaning towards adapting the `Recursive` strategy to handle virtual attributes when configured instead of introducing a separate strategy. Not clear yet, though, need to work out the details.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59602703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/60305655", "body": ":+1: looks great! :shipit:\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/60305655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/60306088", "body": "@jch is this intended to be used in the library anywhere? Or is it more of an affordance for having a central logging facility for external users? I don't think this change makes sense on its own, and I'd lean towards favoring better instrumentation to handle logging externally than having to double down on logging _and_ instrumentation. Thoughts?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/60306088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/60463346", "body": "@jch added some tests and moved some things around. Thoughts?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/60463346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/60472167", "body": "@jch feel free to take this over while I'm out.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/60472167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/62606160", "body": "@jch good catch RE: `supportedCapabilities`.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/62606160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/62626499", "body": "Like how this is handled considering our situation with TravisCI and AD!\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/62626499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/63137118", "body": "@jch taking this over so I can merge it and get 1.5 released.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/63137118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/63139226", "body": "@jch wanna take a quick look at this to make sure it makes sense.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/63139226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/64493470", "body": "@jch right on. I'm going to generalize the attributes since it's hardcoded right now, along with better tests, and merge this. The other items can be worked on separately, after this is merged.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/64493470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/64497909", "body": "Pretty happy with where this is at for now. @jch one last :eyeglasses:  before merge?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/64497909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/65334351", "body": "This won't be making it into the imminent release, 1.6.0.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/65334351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/65500908", "body": "@jch was tempted to make that change but decided to address that separately. I think you're right, though, it's way more useful like this.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/65500908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/65729011", "body": "@jch so to [summarize what needs to be addressed](https://github.com/github/github-ldap/pull/69#discussion_r21327407) in a followup PR:\n- [ ] reduce `detect_strategy`'s knowledge of strategy internals\n- [ ] give configuration more responsibility (setting the strategy object, defaulting)\n- [ ] move Active Directory capability sniffing functionality (either more central, or more context-specific)\n- [ ] possibly remove _detect_ as a meta-strategy and incorporate into default configuration handling\n\nDoes that sound like a reasonable breakdown? Some of it may be more specific that necessary, partly because I think there are a few directions we could go that would result in cleaner internals with equivalent functionality, but exactly what I've not concluded.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/65729011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/66390725", "body": "Could make these minor changes to prevent the API breakage:\n\n``` diff\ndiff --git a/lib/github/ldap/membership_validators/recursive.rb b/lib/github/ldap/membership_validators/recursive.rb\nindex 8544f30..dfffdf4 100644\n--- a/lib/github/ldap/membership_validators/recursive.rb\n+++ b/lib/github/ldap/membership_validators/recursive.rb\n@@ -36,7 +36,7 @@ module GitHub\n           @depth = options[:depth] || DEFAULT_MAX_DEPTH\n         end\n\n-        def perform(entry)\n+        def perform(entry, depth_override = nil)\n           # short circuit validation if there are no groups to check against\n           return true if groups.empty?\n\n@@ -51,7 +51,7 @@ module GitHub\n             next if membership.empty?\n\n             # recurse to at most `depth`\n-            depth.times do |n|\n+            (depth_override || depth).times do |n|\n               # find groups whose members include membership groups\n               membership = domain.search(filter: membership_filter(membership), attributes: ATTRS)\n\n```\n\nBut I think that's being pedantic and the practical side of me just wants to merge this and cut 1.7.0.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/66390725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/66586760", "body": "> it'll make it easier on ourselves if we ever need to downgrade our own library for an important fix\n\nGenerally I agree with you. But _this_ part is more theoretical than actual since we never used the now-deprecated API at any time, so at the very least, assuming we're the only user of this component, we've solved zero problems going out of our way to follow a spec.\n\nIn any case, I've kept the current API, added deprecation warning, and will release this as 1.7.0. I'll remove the relevant bits for 2.0.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/66586760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/68007564", "body": "Aside from the comment, this should be sufficient to fix the issue.\n\n@jch adding a test for [`Domain#filter_groups`](https://github.com/github/github-ldap/blob/db53a058c90f74adaea32ae2b5902e359d76710a/lib/github/ldap/domain.rb#L35-L37) would be really great! Especially if we can validate it against Active Directory with our local test VM.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/68007564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/68009618", "body": "@jch let's cut the release and then worry about adding tests. :shipit:\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/68009618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/68012252", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/68012252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/70022330", "body": "Bummer, looks like the subtree approach is searching more than I first suspected. As advertised, it's scoped to the subtree (including the base), which is not the same as being scoped to the parent/child relationship that nested group membership constructs.\n\nTo be blunt: this won't work as expected. Bummer.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/70022330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/70187792", "body": "@jch `attrs` is an `attr_accessor` that gets initialized on instantiation.\n\n@jch yeah, the existing test coverage is what matters here.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/70187792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/72555351", "body": "Updated to expand support to 2k3+, making note of SP1 and expectations around support EOL.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/72555351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/101390198", "body": ":+1: diff looks good. Will get this merged in this week.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/101390198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/102504033", "body": "Thanks for opening up this PR! Happy to merge this in, just want to clean up the unneeded line!\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/102504033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/110165923", "body": "@wuranbo build is red, probably because it needs master merged in. Doesn't seem related to the diff.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/110165923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/237587298", "body": "No critical blockers, this is super close!\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/237587298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/237720496", "body": "@davesims wouldn't consider anything \u261d\ufe0f above as blocking feedback. :shipit: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/237720496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/237720944", "body": "Just noticing that builds were't enabled. Would like to kick off a build to verify these changes.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/237720944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/237867000", "body": "Looks like we're \ud83c\udf4f. Let's get this merged, @davesims.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/237867000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/237889234", "body": "Closing as stale.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/237889234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/237889280", "body": "Closing as stale.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/237889280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/237889365", "body": "Closing as stale.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/237889365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/github/github-ldap/comments/8163055", "body": "@jch some background:\n\nIn every operation at the `Net::LDAP` level (like `Net::LDAP#search`), there's a check for an `@open_connection`:\nhttps://github.com/ruby-ldap/ruby-net-ldap/blob/5a63639554fa092001dc5eb46f034dcff655af89/lib/net/ldap.rb#L657\n\nIf there's not one, it'll open a new connection, bind (implicitly), and then perform the operation.\n\nIn order for an `@open_connection` to exist, the operation has to be called inside the `Net::LDAP#open` block, which opens a connection, binds (implicitly), and yields itself still open.\n\nSo that's the basics. When there's an open connection that is shared, it uses the same socket for every search/operation performed in serial, without problem, since it has to wait for the previous operation to finish entirely before it can start sending more shit at the server.\n\nThe problem comes in when, with a shared connection, one search is performed while another is in the midst of returning results.\n\nTo break this down further, when we search with an `@open_connection`, we `write` to the socket and then we read, repeatedly, until we get a `SearchResultDone` message. Until then, we can get `SearchResultEntry` or `SearchResultReference` messages which are the entries (and references) we're searching for ([4.1.1](http://tools.ietf.org/html/rfc4511#section-4.1.1), [4.5.2](http://tools.ietf.org/html/rfc4511#section-4.5.2));\nhttps://github.com/ruby-ldap/ruby-net-ldap/blob/5a63639554fa092001dc5eb46f034dcff655af89/lib/net/ldap/connection.rb#L402-L429\n\nNote that `search{ |entry| ... }` is called when we get a `SearchReturnedData` message, not when all of the entries have finished transmitting to us, so the server might still be in the process of transmitting results, so...\n\nWhat happens if we `write` a new search query when a previous search's results are still being transmitted? What _should_ we do, in that situation, when we're sharing a connection? Should we explode? Should we [Abandon Operation](http://tools.ietf.org/html/rfc4511#section-4.11)? Should that be configurable? Are servers capable of handling multiple concurrent queries over the same socket, and we're just mishandling it on the client side?\n\nI want to be able to use `Net::LDAP#open`, and we can do that today so long as we guarantee that we aren't calling `Net::LDAP#search` inside a `Net::LDAP#search{ |entry| ... }` block.\n\n---\n\nFor the record, here's the relevant output from the failing test:\n\n```\n{\"cn=nested-group2,ou=Groups,dc=github,dc=com\"=>\n  [\"uid=user6,ou=People,dc=github,dc=com\",\n   \"uid=user7,ou=People,dc=github,dc=com\",\n   \"uid=user8,ou=People,dc=github,dc=com\",\n   \"uid=user9,ou=People,dc=github,dc=com\",\n   \"uid=user10,ou=People,dc=github,dc=com\"],\n \"cn=nested-group1,ou=Groups,dc=github,dc=com\"=>\n  [\"uid=user1,ou=People,dc=github,dc=com\",\n   \"uid=user2,ou=People,dc=github,dc=com\",\n   \"uid=user3,ou=People,dc=github,dc=com\",\n   \"uid=user4,ou=People,dc=github,dc=com\",\n   \"uid=user5,ou=People,dc=github,dc=com\"]}\n******\n{\"cn=nested-group2,ou=Groups,dc=github,dc=com\"=>\n  [\"cn=nested-group1,ou=Groups,dc=github,dc=com\",\n   \"uid=user6,ou=People,dc=github,dc=com\",\n   \"uid=user7,ou=People,dc=github,dc=com\",\n   \"uid=user8,ou=People,dc=github,dc=com\",\n   \"uid=user9,ou=People,dc=github,dc=com\"],\n \"uid=user10,ou=People,dc=github,dc=com\"=>[]}\n\n  1) Failure:\nGitHubLdapOpenTest#test_open_with_subsearches [test/domain_test.rb:296]:\n--- expected\n+++ actual\n@@ -1 +1 @@\n-{\"cn=nested-group2,ou=Groups,dc=github,dc=com\"=>[\"uid=user6,ou=People,dc=github,dc=com\", \"uid=user7,ou=People,dc=github,dc=com\", \"uid=user8,ou=People,dc=github,dc=com\", \"uid=user9,ou=People,dc=github,dc=com\", \"uid=user10,ou=People,dc=github,dc=com\"], \"cn=nested-group1,ou=Groups,dc=github,dc=com\"=>[\"uid=user1,ou=People,dc=github,dc=com\", \"uid=user2,ou=People,dc=github,dc=com\", \"uid=user3,ou=People,dc=github,dc=com\", \"uid=user4,ou=People,dc=github,dc=com\", \"uid=user5,ou=People,dc=github,dc=com\"]}\n+{\"cn=nested-group2,ou=Groups,dc=github,dc=com\"=>[\"cn=nested-group1,ou=Groups,dc=github,dc=com\", \"uid=user6,ou=People,dc=github,dc=com\", \"uid=user7,ou=People,dc=github,dc=com\", \"uid=user8,ou=People,dc=github,dc=com\", \"uid=user9,ou=People,dc=github,dc=com\"], \"uid=user10,ou=People,dc=github,dc=com\"=>[]}\n```\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/comments/8163055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/comments/8176727", "body": "@jch AD only supports UDP queries against the rootDSE (metadata about the directory, not data itself). It falls outside the spec so I'm not at all concerned with supporting UDP.\n\nI want to avoid clever solutions to this problem; it'll be too easy to cause deadlocks and inscrutable runtime behavior. I want to avoid having to bake this sophisticated behavior in and instead make it possible to wrap up our primitives in a way that providing connection pooling, query queueing, etc can be done outside of the library.\n\nConnection pooling sounds like a good idea, honestly, but at the same time an order of magnitude more complicated; what behavior do we expect when the pool is exhausted?\n\nRE: the message ID, if servers are capable of handling multiple concurrent requests, differentiating which result is for which request based on the message ID, then we might have a simple solution. Hoping to add sufficient instrumentation to understand this scenario better today.\n\nOtherwise, I think what I'm going to propose is a that we do not allow a search on an open connection already servicing a search, raising an exception. A user should not unwittingly build something that causes bad behavior/data. We can add a flag so that the user can define the expected behavior (`abandon_pending_operation: true` or `raise_on_pending_operation: true`).\n\nI plan to also look through the CPAN Net::LDAP library to see how it handles connections, multiple queries, etc.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/comments/8176727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/comments/8182441", "body": "Opened https://github.com/ruby-ldap/ruby-net-ldap/pull/133 to track this issue more generally.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/comments/8182441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851167", "body": "References `escaped_login` which was removed above.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851310", "body": "`Group` \"is a\" `Domain`? Are we missing a common base class? My intuition says that Group and Domain have separate concerns and Group should not inherit from Domain. What are we specifically gaining from this?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851677", "body": ":+1: that sounds like it represents the domain object's components more precisely.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851695", "body": "`present?` would switch this negating negative to a single positive statement.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851726", "body": "Would it make sense to assemble a Set here instead?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851830", "body": "`results.concat` reuses the same `Array` object instead of creating a new one.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9892435", "body": "orite :tophat: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9892435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9892539", "body": ":ok_hand: not worth the extra effort to comply with Set contracts, etc. Can revisit this after more usage.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9892539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9963263", "body": "This the same as calling `load_cache`?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9963263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/10139723", "body": "Possible refactoring:\n\n``` ruby\n@member_entries ||= member_names.map { |m| @ldap.domain(m).bind || nil }.compact\n```\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/10139723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/10139794", "body": ":+1:\n\nCould we add a comment here indicating that this entry is intentionally wrong?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/10139794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16277036", "body": "`first` was inconsistent.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16277036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16277045", "body": "Pretty sure that the base domain (this `dc=github,dc=com`) entry is created when booting up ApacheDS with the `--domain` option set, since this was causing the error.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16277045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16277051", "body": "This is just a nicety to make it easier to run the individual test files directly.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16277051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16278803", "body": "@ymendel no good answer, other than at first it was to see if anything failed due to expectations here and felt OK documenting the base domain somewhat.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16278803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16278675", "body": "Now we build the query with the appropriate membership attribute (`cn` for `memberUid`, as mapped above).\n\nAdded complexity/nesting here due to `entry[\"dn\"]` and `entry[\"cn\"]` both always returning an `Array` instead of a `String` like `entry.dn` did.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16278675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16278705", "body": "Might need to make this pull from configuration, since `memberUid` might not only be `cn`.\n\nFor example, look at [`PosixGrou#search_members_by_uids`](https://github.com/github/github-ldap/blob/9040776fef2b2dc193dbffe8cc54ae8cd3a28451/lib/github/ldap/posix_group.rb#L76).\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16278705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16279325", "body": "This was file was modeled after https://github.com/NUBIC/ladle/blob/master/spec/ladle/animals-custom-schema.ldif to fake out posixGroup and memberUid behavior.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16279325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16397274", "body": "Decided to be more explicit about `memberUid` behavior, and changed it to use the configured UID (assuming that this module would be mixed in to classes that expose/provide `@ldap`).\n\nThoughts?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16397274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16397398", "body": "Actually meant to highlight this part of the chunk. Here we're explicitly adding the `memberUid` conditions on top of the existing membership names.\n\nAlso updated to accept the `uid_attr` as a parameter (in case `@ldap` isn't available, for instance).\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16397398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16399002", "body": "@michaeltwofish `dn` is the only value that `Net::LDAP::Entry` returns as a String (I believe), everything else is returned as an Array (usually of a single value). Strictly speaking, it's possible to have multiple values for `uid` or any other field. For instance:\n\n```\n>> entry['uid']\n=> [\"mtodd\", \"matttodd\"]\n```\n\nThis gracefully handles it without blindly calling `first`, ignoring multiple values. I'm happy to revisit this later unless you think it's a blocker.\n\nNOTE: if we don't explicitly handle the `Array` we are returned here, we result in malformed filter condition. Observer:\n\n``` ruby\n>> entry = find_entry # any will do\n>> Net::LDAP::Filter.eq(\"uid\", entry[\"uid\"]).to_s\n=> (uid=[\"mtodd\", \"matttodd\"])\n```\n\nThat's an invalid condition statement. Searching with that filter produces this error:\n\n```\nNoMethodError: undefined method `gsub' for [\"mtodd\", \"matttodd\"]:Net::BER::BerIdentifiedArray\n```\n\n:sparkles:\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16399002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16818085", "body": "Skips trying `PosixGroup` unless it's enabled. It's on by default, so this doesn't result in changed behavior, just means we can disable this behavior at will.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16818085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16818125", "body": "This is necessary to properly partition groups from members here: https://github.com/github/github-ldap/blob/744b141a0f86961be5453984b31789a8285995d2/lib/github/ldap/group.rb#L109-L114\n\nAs documented, `Net::LDAP` downcases object classes (et al) by default.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16818125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16818145", "body": "The second assertion fails without explicitly downcasing `GROUP_CLASS_NAMES` in `Group#group?`.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16818145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16818151", "body": "Due to fixture changes.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16818151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16932929", "body": "This is the most substantive change in this branch, which I think is good to go. We're wrapping the chokepoint with instrumentation to get an idea of every search that this library generates. And what this doesn't instrument, https://github.com/github/ruby-net-ldap/pull/1 should provide us with visibility into.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16932929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18002152", "body": "@jch I'm trying to move away from sugar like this for various reasons, but the biggest reason by far is that abstractions like this hide the actual work behind the scenes, which in this case means network IO.\n\nI also don't want to try to inject methods like `member_of?` into `Net::LDAP::Entry` classes, keeping a clear separation between that library and these higher level concerns.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18002152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18002313", "body": "No real reason, or whatever reason I had at the time wasn't at the top of my mind. Will play around with this.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18002313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18002421", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18002421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18002566", "body": "I stopped doing that as much when I found out that `NotImplementedError` is reserved for platform to indicate unavailable features like `fork`. See: http://www.ruby-doc.org/core-2.1.3/NotImplementedError.html for details.\n\nI'm happy with `NoMethodError` in this case.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18002566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18002577", "body": ":ok_hand: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18002577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18002582", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18002582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18002659", "body": "Unless I'm mistaken, `present?` is an ActiveSupport extension and not part of standard Ruby library.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18002659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18003135", "body": "Not worried about answering that until it's actually needed, and the method/class signature might change enough to make this unnecessary. This is needed because this class uses `CN`s but the other uses `DN`s to compare, and I wanted to take `Net::LDAP::Entry` objects as input to make the input consistent between the two (drop in replacement being desired).\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18003135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18003289", "body": "Validators should be reused.\n\nI kept `depth` here instead of on `initialize` to make `initialize` consistent but I guess this adds inconsistency for the caller anyways. Will think about this a little more.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18003289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18003323", "body": ":sunglasses: \nhttps://github.com/github/github-ldap/blob/5def1be779e32b67440e1f27e0ee69876184a141/.travis.yml#L3-L4\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18003323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18003350", "body": ":ok_hand: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18003350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18005809", "body": "I'm literally letting Ruby do all the work. ^_^\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18005809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18181247", "body": "I'm wary of trying to DRY every reference, feels like too much indirection without a ton of value add.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18181247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18592936", "body": "The comment could be more clear; Ladle tears down the server `at_exit` but the problem is that minitest's autorun behavior only kicks off tests `at_exit` which means we can boot the server but then the script will exit, the LDAP server gets cleaned up, then the tests will kick off. Fun stuff.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18592936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18592955", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18592955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18593020", "body": "Those server options are specific to the Ladle setup, and these are for OpenLDAP.\n\nI think `GitHub::Ldap.server_options` will be going away or be deprecated ultimately.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18593020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18593145", "body": "Heh, this was originally based on a script that generated the seed, and it wasn't clear if I'd move back to the script method or keep the seed file.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18593145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18593151", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18593151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18927716", "body": "Is the separate `options` vs `search_options` hash needed? Seems like it'd be fine to combine them?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18927716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18927814", "body": ":ok_hand: legit.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18927814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18927433", "body": "@jch will want to change this from `autoload` since it's deprecated (thanks for the pointer).\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18927433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/19366396", "body": "@jch the method is always called with an argument, which will be `nil` or `\"\"` if no explicit option has been set, so the default here doesn't really kick in in practice. If anything, the default value could be removed, but here it's used to communicate that `nil` will be handled appropriately.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/19366396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/19366433", "body": "@jch unsure, it's something I don't like and want to figure out the right solution to but going to punt on for now (which means cargo-culting here for now).\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/19366433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/19366445", "body": "Whoops :blush: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/19366445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/19366465", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/19366465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/19366838", "body": "By itself, not that I know of; it's more likely to be a problem due to misconfiguration. However, your point being that we should anticipate issues with this search are valid, we can default to a safe answer of \"no capabilities\" if anything unexpected happens.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/19366838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/20182275", "body": "We might be able to make this generic using `INTEGRATION_HOST` et al.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/20182275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/20182329", "body": "This could be up a directory, I think. Also, a shebang would be good.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/20182329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/20182488", "body": "`ad-env.sh` should probably be `activedirectory/env.sh` right?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/20182488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/20390305", "body": "Scratch shebang since this gets `source`d. Fine to keep in directory, too.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/20390305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/20906355", "body": "@jch yeah, it's definitely confusing. I think I'm going to make some changes to the API for membership validators in this release which will eventually be breaking so it might be a good time to fix this (in a follow up PR).\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/20906355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/20909002", "body": "Added this method to handle handle the various member attributes better.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/20909002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/20909033", "body": "Working with `memberUid` is nice since we can query for all members with a single query.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/20909033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/20909051", "body": "Easy enough.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/20909051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21205100", "body": "This looks pretty innocuous, but it can result in N_M *recursive_ queries and exceptionally bad performance for large data sets.\n\nIt might make more sense to inline the relevant logic from the _search strategy_ in order to recursively search for multiple entries at a given time (instead of individually). This warrants more consideration and testing.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21205100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21257423", "body": "Both, really. `member` and `uniqueMember` are attributes of the `groupOfNames` and `groupOfUniqueNames` object classes (and Active Directory's `group` category), and `memberUid` is for the `posixGroup` object class.\n\nHardcoding these here (and elsewhere) is a smell. Addressing that smell is a fairly large engineering undertaking that isn't possible right now. I have some ideas I'd like to run by you, though, for the future.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21257423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21346111", "body": "@jch really like these recommendations! This was definitely the kind of feedback I feel was most needed, thanks.\n\nI think these can be tackled in a follow up PR, though, and it would be better to keep this PR focused and consistent with what's already in master before attempting these changes. That sound like a solid approach? Or is there something here that is a blocking concern?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21346111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21346259", "body": "@jch this was based on the existing tests for the `MembershipValidator::ActiveDirectory` strategy which does this same stubbed vs integration tests, introduced in #61.\n\nBut you're right, I think the value is in that we can have CI help us at least make sure superficial regressions are avoided, and when real development work is happening we can run the local integration tests against AD to validate the changes. This was my method when writing this strategy, and it made the development smooth and quick!\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21346259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21346373", "body": "@jch agree in some senses, but there are two separate classes that depend on the same behavior that didn't feel right duplicating in (the ActiveDirectory MemberSearch and MembershipValidation strategies). It's a mix of AD-specific feature detection with general capability exposure.\n\nI'm not crazy about it, but it unblocks this PR and can be easily changed in the future when a better approach can be considered, particularly because it's internal only. I think this need will diminish with the changes you outline in https://github.com/github/github-ldap/pull/69#discussion_r21327407, so it is likely temporary.\n\nThoughts?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21346373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21349984", "body": "@jch yeah, the tasks I outlined below (https://github.com/github/github-ldap/pull/69#issuecomment-65729011) are meant to be done _before_ 1.6.0 gets cut. Just wanted to split up the work into separate PRs to keep focus better.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21349984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21662551", "body": "@jch documented `depth` option.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21662551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21662563", "body": "@jch added deprecation warning.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21662563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21662590", "body": "@jch use param if set, falling back to configured `depth`.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21662590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/22239572", "body": ":+1: Would love to see a comment with a specific mention of Active Directory.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/22239572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/23046221", "body": "@jch `select` returns the value iterated over if the block returns true, returning a subset of the collection iterated over, so we can't use it to create a new collection (which is what we're doing here).\n\nI agree that this is a bit smelly.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/23046221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/23046233", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/23046233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/23046235", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/23046235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/30438612", "body": "Unrelated, but this was trying to connect to the wrong host.\n\nIt's a smell that it needs to connect on initialization but that is a separate problem.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/30438612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/30348573", "body": "I think line 17 was added by mistake: we should remove this line as well.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/30348573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/30439010", "body": "Err, that's line 19 (the `echo \"HIIIIII\"` line).\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/30439010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73544309", "body": "Should the `port` specified in the referral URL be preferred?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73544309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73641479", "body": "Want to use a mock here too? Or use the `options` hash to pull configuration for working connections?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73641479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73641589", "body": "Still using `888` instead of `389`.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73641589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73690494", "body": "Still need to use the `options` defined in `GitHub::Ldap::Test` for the right host.\n\nNote, though, that these failures are because `capabilities` are being checked to aggressively, causing a query to occur when creating a new object, rather than lazily loading the capabilities as needed. This is out-of-scope from this PR, but it's a constraint to getting the build to pass now.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73690494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73535948", "body": "\ud83d\udc4d \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73535948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73536056", "body": "We don't need `.rb` here, and would prefer to be consistent with the preceding lines.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73536056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73536505", "body": "I don't think the `user_search_strategy` configuration key should be named `global_catalog` since that's a specific strategy. I know we only have one option here, but I'd prefer we pass in the strategy as a key (like we do with `search_strategy` above).\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73536505/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73536740", "body": "\ud83d\udc4d \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73536740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73536975", "body": "Overriding the `@options` value here feels wrong. Perhaps we can override `options` to include this value by default in this strategy?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73536975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73537263", "body": "Did we discuss falling back to the existing configured connection in the event that this port isn't accessible?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73537263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73537440", "body": "Are these `instance_variable_get`s still the best approach for configuring this connection?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73537440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73537560", "body": "This shouldn't be necessary since the `Default` strategy already defines this reader.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73537560/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73537723", "body": "Can we restructure this into:\n\n``` ruby\n@options = {\n  :attributes => [],\n  :paged_searches_supported => true,\n  :size => 1\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73537723/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73539891", "body": "Do we need to wrap this method invocation? Alternatively, can we document this as an internal method, not to be confused with public interface?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73539891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73540064", "body": "You could use `mock(\"Net::LDAP::Entry\")` and `mock(\"UserSearch strategy\")` here.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73540064/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73540169", "body": "Move this `require` into `test_helper`.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73540169/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73540481", "body": "The configuration should bypass the capability check: the capability check should just be for auto-detection, right?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73540481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73540749", "body": "Could use [`assert_kind_of`](http://ruby-doc.org/stdlib-1.9.3/libdoc/minitest/unit/rdoc/MiniTest/Assertions.html#method-i-assert_kind_of) here.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73540749/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73542104", "body": "Could you stub the `@ad_user_search.global_catalog_connection` method instead of `Net::LDAP.new`?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73542104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73542314", "body": "`results =` here isn't used.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73542314/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73542486", "body": "This isn't true anymore, is it?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73542486/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73550223", "body": "@davesims sorry, to clarify, my concern is how we're overriding the mutating the `@options` in this method call rather than having that come from an explicit override of the inherited `options` value or by only merging it locally. Make sense?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73550223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73550407", "body": "@davesims either make the method `private` or document with `Internal:` comment.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73550407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73551138", "body": "@davesims the approach we've taken in the past is to accept configuration as dictate and not try to be too smart about it; that is, if you specify you want some specific behavior, it would be surprising (in a bad way) to not get that behavior, even if you've configured unsupported behavior.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73551138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73559138", "body": "\ud83d\udc4d looks good.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73559138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73559244", "body": "This method shouldn't be public, `perform` is the public interface to this strategy, right? `search` is just called internally by `perform`.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73559244/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73622517", "body": "@davesims you missed moving these requires to `test_helper` to consolidate them.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73622517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73622771", "body": "Not a blocker but it might be worth passing these into `configure_user_search_strategy` (by passing through the `options` hash) to let that method decide if it needs these, so we don't have Global Catalog concerns leaking out unnecessarily.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73622771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73622847", "body": "Don't need the `begin ... end` block here, `case ... end` is essentially a block.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73622847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73623046", "body": "Surprised we'd inherit from `Net::LDAP` rather than just wrap it and expose a minimal API.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/73623046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "sbryant": {"issues": [], "commits": [{"url": "https://api.github.com/repos/github/github-ldap/commits/34c2685bd07ae79c6283f14f1263d1276a162f28", "message": "Merge pull request #101 from github/jonabc/tls-options\n\nEnable TLS validation"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/a7380b20ff9a3a1f04055256376fbc502704084d", "message": "Fix up tests"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/d2be945fe9421ff2452c2764a26ba3519ca77f87", "message": "Missed a couple of empty tls_options"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/79065bae794fef53475be01403b4cbf412a01011", "message": "Fix missing paren"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/07adb9baab59b138f3db5d42eb96ca8cbff4a705", "message": "Update test to reflect verify_mode"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/b52284ca3519be60bea4e8e26690b59466fa3d20", "message": "Use tls_options as a Hash\n\n`:verify_mode` is used to specify how the certificate is verified, if at all."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/28005055", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/28005055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/32518496", "body": "/cc @calavera @jmickeyd \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/32518496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/35671998", "body": ":sparkles: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/35671998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49660507", "body": "These changes look good to me.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49660507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/7357264", "body": "Missed the actual class. :facepunch: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/7357264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9962049", "body": "The fields we filter on should be configurable.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9962049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/15188913", "body": "I think that multi type support is confusing. I'm killing it in favor of something more explicit.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/15188913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/15189313", "body": "I've updated the doc comments to be clear on what we expect.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/15189313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16818463", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16818463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "jonabc": {"issues": [], "commits": [{"url": "https://api.github.com/repos/github/github-ldap/commits/272c61d02f1400b50180173fcf9bd725b5356295", "message": "fix tls_options on nil input"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/d88eb773c46b3d1cb467fed2d40291b4ed71b5b4", "message": "update comments"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/1052cea7f94a4df6aa2bfb46c7f4844ad35bb827", "message": "Merge pull request #102 from github/dbussink/tls-options-directly\n\nExpose TLS options directly"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/c8007663132028f0ce41903f47f208807e52f9a4", "message": "Enable TLS validation\n\nenable by setting `validate_encryption: true` on initialization options"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/306235802", "body": "ping @github/platform-iam can someone take a look?", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/306235802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/306352961", "body": "The test needs to be updated to match the new `tls_options` structure", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/306352961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/306558559", "body": "@jch, I don't think it's a breaking change.  @dbussink's PR was off my branch for #101, which added in the validate_encryption option.  So net effect from current release is that an option was added, but nothing changed or removed.", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/306558559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/306559016", "body": "Also worth adding that the behavior should be equivalent to the current default when the new initializer option is not given.", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/306559016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/306559588", "body": "@jch not sure what you mean.  What is the existing option and which older option would be formally deprecated?  If you mean `validate_encryption`, that option doesn't exist in master.", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/306559588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/306572753", "body": "Added an additional check on `tls_options`.  If the expected key isn't given in the initialization options then the `tls_options` parameter on `check_encryption` will be nil, bypassing the default value `{}`", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/306572753/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/120438656", "body": "added a link to SSLContext class for available tls_options values", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/120438656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "dbussink": {"issues": [], "commits": [{"url": "https://api.github.com/repos/github/github-ldap/commits/5a50c9cd75a6fbcacaa2115c4203bc9de468aac9", "message": "Expose TLS options directly"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/53689876", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/53689876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/120294272", "body": "@jonabc How about passing down `tls_options` itself? That gives maximum control over the specific options and also would make it possible to pass down specifics like a certificate store if ever needed. ", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/120294272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "jch": {"issues": [], "commits": [{"url": "https://api.github.com/repos/github/github-ldap/commits/cb093d2f1076452bee68752fbc81958489fa8f99", "message": "Release 1.10.1"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/b7c0b8901104cdd1c77294de4a0e7d69ce2cc189", "message": "bump version to 1.10.1"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/04f0d1b1a8eeb86f00e4ec225b931ad0e1ebf899", "message": "bump net-ldap to 0.16.0"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/8d66502d246cc5ecbe246b0b06fd69c172020d40", "message": "Release 1.10.0"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/8b8808de21f7e5fff75dca0981be8c84e09d89dd", "message": "Merge pull request #93 from github/release-1.10.0\n\nRelease 1.10.0"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/0c2efc8bf517ba5b3ad199fc18d1beef9fb55ff7", "message": "release 1.10.0"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/893cb225d6e6b1f58dc21201c8491a81db33b324", "message": "Merge pull request #92 from github/bump-net-ldap\n\nBump net-ldap to 0.15.0"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/c2cc6e58c0ca52411a9a7b58c4e6b172e2f2ff29", "message": "bump net-ldap 0.15.0"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/9daf749ae74ac81bafc019ae6a15aebf6865aa13", "message": "Release 1.7.1"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/c1b9016e12c3a4806984e096cc3e32ca36af2b41", "message": "Merge pull request #76 from github/release-1.7.1\n\nRelease 1.7.1"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/8446d9d8d2e65dfa9ce001dea8deb5cef4bf6a89", "message": "release 1.7.1"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/32e2298818fce6c1cf3673de924f5665d32c91f3", "message": "Merge pull request #75 from github/active-directory-group-filter\n\nAdd Active Directory group filter"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/55b554e48ad0f0fd50ccede0246891bbde973b14", "message": "add ad group filter"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/85781c4c85b9977b0591b54914d9ba4eb5e98bbe", "message": "Merge pull request #58 from github/default-membership-validator\n\nDetect appropriate membership validator strategy by default"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/56e1fd5d720f8bcb541b14808f10ca440da20bed", "message": "Merge remote-tracking branch 'origin/master' into default-membership-validator"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/6a37d6871116247430626b751dc9e1a3df2657d7", "message": "Release 1.4.0"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/0bc166f1860ff1c0fa73dc2dae16cd57fd633c76", "message": "Merge pull request #60 from github/release-1.4.0\n\nRelease 1.4.0"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/4a7593252198121fe5fdb5a5794260fcd7f14146", "message": "additional docs on AD membership validator"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/cf0d90720f67179f8fff0409fc36b2778db3cc64", "message": "add AD validator integration tests"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/8ef4551e16a69e0ee4d9e63cb7cb5433455aa26b", "message": "add activedirectory test options"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/2aa8c10eea518d2ffd4d8d917b7ab6c50dfded42", "message": "document local AD integration testing"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/69999cb8a50f92302ecce9fea11cb4c578c96002", "message": "Merge remote-tracking branch 'origin/master' into default-membership-validator"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/cfaf1cf13e866a8b23e89cd62585e0fdafa3913e", "message": "document how to release"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/8c9d94228ff51d3e158f425d588d0e4963cc6b8e", "message": "Merge pull request #59 from github/bump-net-ldap-0.9.0\n\nBump net-ldap to 0.9.0"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/9beddcf4fabe14a27d8e51ab6d80c8a645916f24", "message": "add release scripts"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/d06d6779da899de99c384e738922bc53a7031370", "message": "bump version to 1.4.0"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/0180d118fcc0e375d8fbdd89fdfea5c684f86ecb", "message": "add a changelog"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/99fc8526b4206628e9b9817927d9db8878ed0033", "message": "add script/changelog\n\nsee https://github.com/jch/release-scripts"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/42e16bf3ee13d88812ad2815a40aa60e95fde47a", "message": "bump net-ldap to 0.9.0"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/ba0792cf1f356090af0445b68364758717e5858f", "message": "add test for validator detection"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/f506dc37456d59efd5e8a8a5410adf91bddfb1ec", "message": "fix typo"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/d34439453fe1befa87087dd5b8eba25f4c9017db", "message": "Merge pull request #57 from github/document-constructor-options\n\nDocument constructor options"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/228044b13cbe14fd1e07641ce8c14a038071aec9", "message": "document all initialize options"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/3f02551d14def6b581859964686374abedaff545", "message": "Merge pull request #51 from github/limit-attributes\n\nPass through search options for GitHub::Ldap::Domain#user?"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/e132db4c9866dea311db1527783650fe01a00745", "message": "pass through search options"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/655f23111cdedc41c277551c1b01ac723672a575", "message": "add failing test"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/56699259", "body": "Made a first pass with an emphasis towards code quality and how the interface will be used. Overall, the idea feels pretty natural to me. Let me know if I'm totally off base b/c of missing context.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/56699259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/57035030", "body": ":+1: Merge at will\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/57035030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/57035796", "body": ":+1: good start. cc me again when you have more build configurations added.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/57035796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/58344123", "body": ":+1: left some small nitpicks inline, but awesome stuff overall\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/58344123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59286922", "body": "Note that I plan to target master for the merge, but will do so once https://github.com/github/github-ldap/pull/50 merges.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59286922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59300994", "body": ":ship: I think we can make further tweaks from master as needed. I only skimmed over this since we've reviewed them separately in other PR's.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59300994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59419443", "body": "Haven't tried this myself since I don't have AD setup locally on my machine, but the logic seems straightforward.\n\nAs far as testing goes, is it possible to record the network responses from AD in different scenarios and use those as stubbed fixtures?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59419443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59421178", "body": "In progress in https://github.com/github/github-ldap/pull/52\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59421178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59454426", "body": "Do we plan on having the code to feature detection, or will it just bomb out if a certain feature is not selected? I kind of prefer the latter, but wouldn't mind a nice error message if that isn't hard to do.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59454426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59454668", "body": "Ya I don't have a good answer for testing off the top of my head either. The read methods in net/ber are pretty tightly coupled to the processing of the results, making it unwieldy to do any stubbing or mocking. I was thinking along the lines of an integration test that records a manual test (similar to webmock) and testing only at the public interface level. Not a blocker for shipping, just an interesting problem to figure out.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59454668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59520443", "body": ":ship: at will\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59520443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59576600", "body": "Globs ftw! :+1: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59576600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59970474", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/59970474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/60238298", "body": "After https://github.com/github/github-ldap/pull/57 lands, document the `logger` option too.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/60238298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/60316922", "body": "Makes sense. We can always revisit if we decide there are specific things we want to log here.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/60316922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/60453685", "body": "I like how you defined this as another concrete implementation of the strategy base class.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/60453685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/60686296", "body": "Doing some manual testing, but noticing that AD is not returning the control string `1.2.840.113556.1.4.2080`.\n\n```\n  1) Failure:\nDetectActiveDirectoryTest#test_capabilities [test/active_directory_test.rb:19]:\nExpected [\"1.2.840.113556.1.4.319\", \"1.2.840.113556.1.4.801\", \"1.2.840.113556.1.4.473\", \"1.2.840.113556.1.4.528\", \"1.2.840.113556.1.4.417\", \"1.2.840.113556.1.4.619\", \"1.2.840.113556.1.4.841\", \"1.2.840.113556.1.4.529\", \"1.2.840.113556.1.4.805\", \"1.2.840.113556.1.4.521\", \"1.2.840.113556.1.4.970\", \"1.2.840.113556.1.4.1338\", \"1.2.840.113556.1.4.474\", \"1.2.840.113556.1.4.1339\", \"1.2.840.113556.1.4.1340\", \"1.2.840.113556.1.4.1413\", \"2.16.840.1.113730.3.4.9\", \"2.16.840.1.113730.3.4.10\", \"1.2.840.113556.1.4.1504\", \"1.2.840.113556.1.4.1852\", \"1.2.840.113556.1.4.802\", \"1.2.840.113556.1.4.1907\", \"1.2.840.113556.1.4.1948\", \"1.2.840.113556.1.4.1974\", \"1.2.840.113556.1.4.1341\", \"1.2.840.113556.1.4.2026\", \"1.2.840.113556.1.4.2064\", \"1.2.840.113556.1.4.2065\", \"1.2.840.113556.1.4.2066\"] to include \"1.2.840.113556.1.4.2080\".\n```\n\nSince there's no AD integration test, I have a local test file with the following:\n\n``` ruby\nrequire_relative \"./test_helper\"\n\nclass DetectActiveDirectoryTest < Minitest::Test\n  def setup\n    @service = MockInstrumentationService.new\n    @ldap = GitHub::Ldap.new(\n      host: \"172.28.128.3\",\n      port: \"389\",\n      admin_user: \"CN=Administrator,CN=Users,DC=ad,DC=ghe,DC=local\",\n      admin_password: \"superp@ssw0rd\",\n      search_domains: [\"CN=Users,DC=ad,DC=ghe,DC=local\"],\n      service: @service\n    )\n  end\n\n  def test_capabilities\n    assert_includes @ldap.capabilities[\"supportedcontrol\"], GitHub::Ldap::MembershipValidators::Detect::ACTIVE_DIRECTORY_V61_R2_OID\n  end\n\n  def test_active_directory_capability\n    validator = GitHub::Ldap::MembershipValidators::Detect.new(@ldap, [])\n    assert_predicate validator, :active_directory_capability?\n  end\n\n  def test_connection\n    result = @ldap.test_connection\n    assert_equal 0, result.code\n  end\n\n  def test_search\n    results = @ldap.search(base: \"CN=Users,DC=ad,DC=ghe,DC=local\")\n    assert_equal 1094, results.size\n  end\nend\n```\n\nI'll poke further to see if it's the particular version of AD I'm running that's causing this issue.\n\ncc @jameswhite \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/60686296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/60686776", "body": "I do see that capability when I connect with Apache Directory Studio though:\n\n![2014-10-27 at 4 19 pm](https://cloud.githubusercontent.com/assets/19874/4801247/b908e4c2-5e2f-11e4-84de-8defdd150179.png)\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/60686776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/60687996", "body": "Figured it out. net-ldap wasn't requesting `supportedCapabilities` when searching the root dse. Fix in https://github.com/ruby-ldap/ruby-net-ldap/pull/150.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/60687996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/60793467", "body": "Depends on https://github.com/github/github-ldap/pull/59 to pull in latest changes from net-ldap.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/60793467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/60843493", "body": "I've started another branch to allow local activedirectory testing https://github.com/github/github-ldap/pull/61.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/60843493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/61576559", "body": "I've tested this manually, and have tests in #61. Unfortunately #61 isn't quite ready yet, so I'm going to merge this first.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/61576559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/63148216", "body": ":ship: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/63148216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/64472613", "body": "Tests look good. I liked your inline comments on the recursive strategy. It's more verbose, but made it much easier to understand. :+1: to ship unless you had specific areas you'd like me to review\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/64472613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/65468593", "body": ":metal:\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/65468593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/65468985", "body": ":+1: makes sense\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/65468985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/65469968", "body": "@mtodd The class method makes sense to me since the method doesn't depend on any instance state. The `group?` instance method was previously documented as internal, how do you feel about removing the instance method and just calling the class method when we need it? I only see one caller in this file.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/65469968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/65733717", "body": "\ud83d\udc4d to shipping if you feel it'll unblock your other work. Left comments inline about refactorings. \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/65733717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/65868473", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/65868473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/65869033", "body": "You forgot to remove detect_test.rb\n\n```\nuninitialized constant GitHub::Ldap::Capabilities (NameError)\n    from /home/travis/build/github/github-ldap/test/member_search/detect_test.rb:7:in `<top (required)>'\n```\n\nOtherwise :+1: whenever the build is green.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/65869033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/66552324", "body": "@mtodd since we are at a > 1.0, I'd like to maintain semver. Even though we're likely the primary users of this library, it'll make it easier on ourselves if we ever need to downgrade our own library for an important fix. I would also output to stderr with a deprecation notice if someone calls the old interface.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/66552324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/66672019", "body": ":ship: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/66672019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/66673460", "body": "> Generally I agree with you. But this part is more theoretical than actual since we never used the now-deprecated API at any time, so at the very least, assuming we're the only user of this component, we've solved zero problems going out of our way to follow a spec.\n\nI hear your frustration that it feels like extra work for no gain in this instance. But I think we ended up having to change the public interface so quickly because we hadn't used it enough ourselves to understand what the correct public interface should look like. To avoid this extra work maintaining semver in the future, we can experiment with changes in our own project first before pushing the changes upstream.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/66673460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/68008882", "body": "I was able to get the following test working in `test/domain_test.rb`, but it breaks the other tests in the file b/c of how we skip integration tests. I'm going to file a separate issue for cleaning up AD testing and adding the test from there.\n\n``` ruby\nclass GitHubLdapActiveDirectoryGroupsTest < GitHub::Ldap::Test\n  def run(*)\n    self.class.test_env != \"activedirectory\" ? super : self\n  end\n\n  def test_filter_groups\n    domain = @ldap.domain(\"DC=ad,DC=ghe,DC=local\")\n    results = domain.filter_groups(\"ghe-admins\")\n    assert_equal 1, results.size\n  end\nend\n```\n\n@mtodd cool to merge this as-is, and cutting a release from here? Alternatively, I can create another test file with just this test in it and merge them back together in another file.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/68008882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/70132829", "body": ":sob:\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/70132829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/70187533", "body": "What's attrs in find_groups_by_dn? Looks like you extracted and forgot to carry that over?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/70187533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/70187674", "body": "I didn't try running this, but I'm guessing there's test coverage on the existing behavior?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/70187674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/70718478", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/70718478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/72569536", "body": "Good catch\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/72569536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/149969333", "body": "@timmjd thanks for this PR. We'll need to figure out a way to test this before merging.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/149969333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/214461855", "body": "@timmjd thanks for the PR. I don't have enough AD experience to review this PR, but I will find someone who can. cc @davesims \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/214461855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/248660643", "body": "@lildude yep, what is your rubygems email? I can add you as an owner so you can cut releases\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/248660643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/248974238", "body": "@lildude added ya https://rubygems.org/profiles/lildude https://rubygems.org/gems/github-ldap/versions/1.9.0\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/248974238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/306559218", "body": "@jonabc thanks I missed the base branch for that pr. Could you add a comment in your PR to recommend the use of the new option instead of the existing one? We can formally deprecate the older option in a follow up.", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/306559218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/306562251", "body": "Sorry for the confusion. `validate_encryption` as a new proposed option in https://github.com/github/github-ldap/pull/101/commits/c8007663132028f0ce41903f47f208807e52f9a4 that was replaced with `tls_options` during review. Master never had either options.", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/306562251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/github/github-ldap/comments/7947556", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/comments/7947556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/comments/8160050", "body": ":+1: nice reproduction of the problem in test. I haven't looked at the definition of `open` yet, but is it possible that the `closed` and `open` results are using different underlying connection objects? It'd also be good to print out the intermediate search results in the outer loop and make sure the inner loop is iterating over the same set of `child_dn`'s\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/comments/8160050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/comments/8174761", "body": "@mtodd :sparkles: awesome explanation.\n\nThe LDAP spec recommends \"connection-oriented, reliable transports\", with TCP being an example. But AD also allows [search over UDP](http://msdn.microsoft.com/en-us/library/cc717362.aspx), so it's really up to the implementation. I'm a relative noob with socket programming, but general socket wiki pages suggest that they are bi-directional and your failing test above matches this behavior: We can write a new search request to the socket before we finish reading results from the last request.\n\nThe two solutions that come to mind are:\n- queue requests to shared connection and execute them serially\n- wrap the shared connection with a lock. If the connection's in use, create a fresh connection and execute the query there\n\nThese two approaches can also be combined. The latter approach sounds iffy to me because there'll be a race condition if we're executing the queries in threads. Also are binds expensive? Is it worthwhile to establish a new connection to kick off a search if one is already running? Or is it better to just wait?\n\nIf we do queue requests, we can also provide an interface to inspect and modify the queue. If there's a long running search, the client can abandon and enqueue another search with a more restrictive filter.\n\nSome food for thought of connection pooling also https://github.com/ruby-ldap/ruby-net-ldap/issues/11\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/comments/8174761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/comments/8174957", "body": "> What happens if we write a new search query when a previous search's results are still being transmitted? \n\nThe spec for LDAP message envelopes' Message ID (http://tools.ietf.org/html/rfc4511#section-4.1.1.1) suggests that we should be able to distinguish between multiple search requests by the Message ID:\n\n> All LDAPMessage envelopes encapsulating responses contain the messageID value of the corresponding request LDAPMessage.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/comments/8174957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/comments/8180322", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/comments/8180322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/comments/8191621", "body": "> AD only supports UDP queries against the rootDSE (metadata about the directory, not data itself). It falls outside the spec so I'm not at all concerned with supporting UDP.\n\nNice catch. I wasn't planning on supporting UDP in any case, just one of the google results I came across.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/comments/8191621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/comments/8203687", "body": ":+1: makes sense to me. I would kill the `stub_search` method and just do the more verbose stubbing inline for less brain parsing, but totally up to you.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/comments/8203687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/comments/8206675", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/comments/8206675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17980620", "body": "A better variable name here might be `dn` since you extract it from an entry. Also, what do you think of making the parameter name `entry_or_dn` to reflect it accepting two types?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17980620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17980735", "body": "Reducing over the `|` operator looks like a disappointed smiley `:|` No change requested here :grin:\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17980735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17981605", "body": "This interface makes sense to me, but I'm not familiar with how it'll typically be called. If users are typically working with `entry`s, the following interface feels more natural to me:\n\n``` ruby\nldap.search(...) do |entry|\n  entry.member_of?(\"Engineering\")  #=> true\nend\n```\n\nThe above isn't actually possible because an Entry does not keep a reference to the connection object that it came from (as far as I know). This is all syntactic sugar in any case and doesn't affect your validators interface, but I wanted to brainstorm out loud in case it leads us to a more intuitive interface.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17981605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17981739", "body": "I've seen this pattern of putting the require within the module. Is the goal to reduce the number of requires if the module is never autoloaded? I'm actually not a big fan of this type of optimization because I like to see all the requires up at the top of the file.\n\nWhy not autoload `Base` as you do for the others?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17981739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17981862", "body": "What do you think about documenting these on separate lines with their type on the same line? Too verbose? I like that you've documented them in the initializer. The reasoning for documenting the public readers is so generated documentation would have the information as well.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17981862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17981956", "body": "I would actually implement this in the base class as follows:\n\n``` ruby\ndef perform(entry)\n  raise NotImplementedError.new\nend\n```\n\nWith a note in the doc that says this method is required by subclasses.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17981956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17981984", "body": "Make this method `private` or `protected`\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17981984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17982070", "body": "Use the fully qualified `Net::Ldap::Domain#membership` here.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17982070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17982173", "body": "This reads fine to me and I'm not familiar with existing style conventions yet, but it can also be written in the positive:\n\n``` ruby\nif membership.present?\n```\n\n**edit** also out of scope for this PR because you're just moving existing behavior over. Just wanted to note it.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17982173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17982352", "body": "Will this be used by other adaptors? No need to push it up to the Base class just yet, I'm just curious.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17982352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17982467", "body": "Should `depth` be a configurable attribute? Is there any downside to reusing validators, or are you trying to encourage people to create a new validator each time?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17982467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17982520", "body": "whoa ho. 1.9 style hash syntax. Too new for my blood. :grin:\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17982520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17982554", "body": "Add a space after `any?`\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17982554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17982725", "body": "Going to reason about this a bit more. Haven't convinced myself how to this works yet.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17982725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17982760", "body": "Space after `map` (unless the code style is consistently not spacing before a block)\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/17982760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18002449", "body": "Dig it. I think it's a bad idea to add sugar before trying out real life access patterns anyhow. Just wanted to get a feel for it.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18002449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18002885", "body": "TIL. Do you add a custom message along with the `NoMethodError`?\n\n``` ruby\nraise NoMethodError.new \"method #x required\"\n```\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18002885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18002956", "body": "Indeed. http://api.rubyonrails.org/classes/Object.html#method-i-present-3F \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18002956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18003499", "body": "Perhaps this signature?\n\n``` ruby\ndef perform(entry, options = {})\nend\n```\n\nMight be premature as I don't know whether it'll be common for validators to accept options. I'm fine with leaving it as is and fine tuning later.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18003499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18003688", "body": "![future](https://cloud.githubusercontent.com/assets/19874/4396604/91e6545a-4436-11e4-95a4-c37667bab974.gif)\n\nThe future looks bright.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18003688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18003754", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18003754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18120263", "body": "The way you have it also works, but the `install` and `script` sections can be dried up a bit:\n\n``` sh\n# if file exists, run it\n[ -f ./script/install-$TESTENV ] && ./script/install-$TESTENV\n[ -f ./script/cibuild-$TESTENV ] && ./script/cibuild-$TESTENV\n```\n\nSame with the above.\n\ncc Travis docs [The Build Matrix](http://docs.travis-ci.com/user/build-configuration/) for reference.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18120263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18182471", "body": "Fine with me. I don't imagine this section to grow significantly more complex. Both of them are easily readable for me.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18182471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18575436", "body": "Travis doesn't run scripts from the project root?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18575436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18575505", "body": "FYI, `ldapadd` also supports `-f` for specifying the filename.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18575505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18575542", "body": "Nitpick, but use `refute`?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18575542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18575563", "body": "`refute`\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18575563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18575639", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18575639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18575719", "body": "Crazy, even the conf files are ldif!\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18575719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18575743", "body": "`assert_predicate` works here, and you wouldn't need the optional message.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18575743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18575748", "body": "assert_predicate\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18575748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18575843", "body": "Reminder for double quotes, since you do it pretty consistently elsewhere this file.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18575843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18575875", "body": "Does the server not stop after the process exits? I think it's good to have this here in any case, but just curious.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18575875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18575908", "body": "Can this method be removed then?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18575908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18576003", "body": "Why no merge with `GitHub::Ldap.server_options` like above?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18576003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18604611", "body": "\ud83d\udc4d\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18604611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18927762", "body": "I decided against modify the `search_options` in place in case the caller was using it as a common hash to build up other queries.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18927762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18927837", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/18927837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/19366277", "body": "Why not default `:detect` in the method parameter?\n\n``` ruby\ndef configure_membership_validation_strategy(strategy = :detect)\n  @membership_validator ||= strategy.to_sym\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/19366277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/19366324", "body": "Is this something that we want all validators to do?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/19366324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/19366377", "body": "?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/19366377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/19366441", "body": "s/it/whether/\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/19366441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/19366484", "body": "Does this raise an exception?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/19366484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/19366625", "body": ":+1: I don't see us building a ton of strategies, so some duplication is fine for me. Just an observation.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/19366625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/20395300", "body": "Nice tweaks :+1: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/20395300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/20896319", "body": "Not a blocker since this was here previously, but does it feel misleading that the method is named `bind` and what it actually does is `search`?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/20896319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21256113", "body": "This existed before, so I'm not asking for a change, but are these standard LDAP attributes? Or are they attributes we expect when using this strategy?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21256113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21325577", "body": "This module feels like a premature extraction. It's specific to ActiveDirectory, and doesn't seem useful outside this context.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21325577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21327407", "body": "This case statement digs into the implementation of the other strategies too much. One indicator is the `active_directory_capability?`, making this class also know about AD. Spitballing here, but I'd like to see something like:\n\n``` ruby\ndef detect_strategy\n  # try to use the most efficient strategy first\n  [ActiveDirectory, Recursive, Classic].detect do |strategy|\n    strategy.handles?(ldap.capabilities)  # strategy is responsible for capability detection\n  end\nend\n```\n\n`LDAP#configure_member_search_strategy` would be responsible for handling when a user sets an explicit strategy, but default to Detect to handle all other cases:\n\n``` ruby\ndef configure_member_search_strategy(strategy = nil)\n    GitHub::Ldap::MemberSearch::STRATEGIES[strategy] || GitHub::Ldap::MemberSearch::Detect\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21327407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21327650", "body": "Is the goal of having stubbed and unstubbed tests to make sure CI provides some sanity, but we also get a real test as well?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21327650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21349621", "body": "\ud83d\udc4d\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21349621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21349762", "body": "No blocking concern, but I would like to see this done before the freeze for long term maintenance's sake. Your call on where you'd like it done. \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21349762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21650989", "body": "I would document the `depth` attribute here.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/21650989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/23030741", "body": "From what I can tell, `searched` tracks DNs for groups, members, and subgroups. Maybe a better explanation or variable name here?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/23030741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/23030914", "body": "I'm not sure whether ruby's Set is implemented with Array's, but depending on how large the Array grows, tracking may be faster with a Set/Hash here.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/23030914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/23031132", "body": "Could you accomplish this with a `select` rather than an `each_with_object`? Doing the rejecting while iterating would save a pass.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/23031132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72152902", "body": "What's the use case for adding mocha in development?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72152902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72153218", "body": "What do you mean by 'late-bound' here?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72153218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72153770", "body": "What do you think about using an adapter pattern here so Domain doesn't have to know about what type of connection it's dealing with?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72153770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72154190", "body": "What's the intention behind these tests? Are the settings manipulated somehow or changed, or are they the same as the ones we pass in to the initializer? I'm confused what failure we're trying to catch here.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72154190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72154285", "body": "`assert_nil`\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72154285/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72154381", "body": "nitpick, but I'd drop the message since the `refute_nil` is already pretty self explanatory\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72154381/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72154931", "body": "The admin variables seem specific to AD. Is there another place that makes more sense to add these?\n\nIs `@instrumentation_service` only kept to be passed into the initialzer of Net::LDAP?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72154931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/120429376", "body": "Is this comment out of date now?", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/120429376/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/120430614", "body": "It's good the tests show an example of this, but could you reference the ruby OpenSSL module here? Don't have to link to a specific version, but would help with googling later.\r\n\r\nFor reference, peer verification is described in http://ruby-doc.org/stdlib-2.0.0/libdoc/openssl/rdoc/OpenSSL.html#module-OpenSSL-label-Peer+Verification", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/120430614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/120431132", "body": "Nice, I like that you included this cert_store example too.", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/120431132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "lildude": {"issues": [], "commits": [{"url": "https://api.github.com/repos/github/github-ldap/commits/b75ef743fd68c8df51194a56a44db5c009831261", "message": "Merge pull request #96 from lildude/lildude/multiple-ldap-servers\n\nAdd support for passing a list of ldap servers"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/9315cee5510b2d2360d745a404411840b154dda8", "message": "Use port from options\n\nWe don't care too much about the port in testing. Using the port in the options allows us to test against ApacheDS and OpenLDAP without adding any additional conditionals."}, {"url": "https://api.github.com/repos/github/github-ldap/commits/7be5c555d33eea1ccd2de3ce8d29ccfbbf2c9c0f", "message": "Merge master and manually resolve merge conflicts"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/0e695c622af73498c692901051c03160b388e863", "message": "Bump version"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/a87afd0d562871b741ce6e02968a8b9d9261abcf", "message": "Document `hosts` option in README"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/65e653987f7138b3ce0518fe1a88deb44f70d2c6", "message": "Add tests for `hosts` option"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/baca799d8f7d7431116a48c5fc45c949934d4964", "message": "Adds support for the `hosts` option now available in net-ldap"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/f4da8948695be6637cab4cc10d9192c5fb6347f6", "message": "Bump net-ldap requirement to 0.14.0\n\nWe need this so we can take advantage of the `hosts` option"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52317086", "body": "Looks good to me, though my noob ruby skills are preventing me from testing it in the context of the local dev\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52317086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52473916", "body": "Woohoo!!! I can confirm this fixes the issue in my test env too.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52473916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/248545729", "body": "Can I make a new release too?  If so v1.10.1 or v1.11.0?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/248545729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/248839284", "body": "> @lildude yep, what is your rubygems email? I can add you as an owner so you can cut releases\n\nI didn't have one, but I do now :smile: lildood@gmail.com\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/248839284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "jatoben": {"issues": [], "commits": [{"url": "https://api.github.com/repos/github/github-ldap/commits/92f18b196f090d8a518a97ceacaa81705ee38b86", "message": "Compare AD DNs case-insensitively when checking group membership"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wuranbo": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/github/github-ldap/pulls/81", "title": "*bugfix) uncomment the install script.", "body": "Make more consistency to the description in README.\nI spend not a few time to know this thing, while following the README to finish my job.\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/109943609", "body": "@mtodd Hear you are, bro~\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/109943609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/110239014", "body": "@mtodd I tried to rebase impertinently. But it turns out that it's not the reason. So I check the two CI failure, https://travis-ci.org/github/github-ldap/builds/65865839, https://travis-ci.org/github/github-ldap/builds/65998284\u3002\n\nThe reason of this two failure were the CI env.Travis CI run apt-get update failed.\n\n```\nGet:5 http://us.archive.ubuntu.com/ubuntu/ precise/main libslp1 amd64 1.2.1-7.8ubuntu1 [50.4 kB]\n```\n\nErr http://us.archive.ubuntu.com/ubuntu/ precise-updates/main slapd amd64 2.4.28-1.1ubuntu4.4\n  404  Not Found [IP: 2001:67c:1562::13 80]\nGet:6 http://us.archive.ubuntu.com/ubuntu/ precise/main time amd64 1.7-23.1 [30.6 kB]\nErr http://us.archive.ubuntu.com/ubuntu/ precise-updates/main ldap-utils amd64 2.4.28-1.1ubuntu4.4\n  404  Not Found [IP: 2001:67c:1562::13 80]\nFetched 9,395 kB in 0s (17.0 MB/s)\nFailed to fetch http://us.archive.ubuntu.com/ubuntu/pool/main/o/openldap/slapd_2.4.28-1.1ubuntu4.4_amd64.deb  404  Not Found [IP: 2001:67c:1562::13 80]\nFailed to fetch http://us.archive.ubuntu.com/ubuntu/pool/main/o/openldap/ldap-utils_2.4.28-1.1ubuntu4.4_amd64.deb  404  Not Found [IP: 2001:67c:1562::13 80]\nE: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?\nThe command \"if [ \"$TESTENV\" = \"openldap\" ]; then ./script/install-openldap; fi\" failed and exited with 100 during .\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/110239014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jmickeyd": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/27975461", "body": "Although this works with AD and OpenLDAP, it looks like it was only very recently supported by Apache. https://issues.apache.org/jira/browse/DIRSERVER-434\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/27975461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/33856402", "body": "I'm still a tad worried that an LDAP server which is currently working will explode if we send this control.  But I think the trade off is probably worth it, as there are many more AD users than anything else it seems. @github/enterprise-support do you have a feeling on the number of users we have on old ApacheDS?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/33856402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/33858612", "body": "@michaeltwofish sounds good to me.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/33858612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "calavera": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/32586296", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/32586296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/33856242", "body": "this sounds like a good idea, should we merge it?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/33856242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/35572802", "body": "@mtodd I think I'm going to merge this and release a new version, everything we need for now it's here.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/35572802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/35915968", "body": "This is ready to merge. I'll release a new version and bump it in github with the changes in the api, it's a pretty straightforward change.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/35915968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/36662733", "body": "this is working nicely, releasing a new version.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/36662733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/37199546", "body": "Which makes me think that this is going to break integrations for people that don't have that schema enabled either.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/37199546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/37222922", "body": "This definitely helps. Merging.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/37222922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/37244826", "body": "As far as I know there should not be more objectClass that represents groups, this should cover all our use cases. I hope people don't try to implement their own.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/37244826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/37315758", "body": "This is going to require more changes than I anticipated. I'm going to leave it on hold until I finish something else that I left behind.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/37315758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/37853448", "body": "This should be ready to merge. Two things have changed here:\n1. Since `posixGroup` is not exclusionary with `groupOfNames` and `groupOfUniqueNames`, we need to support both lookups in the same ldap entry.\n2. Since `memberUid` only references a `uid` and not a `dn` we need to be able to search for users in every domain base configured, hence that global `search_domains`.\n\nI'll release a new minor version and upgrade the affected projects when this is merged.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/37853448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/38122124", "body": "This is on hold until we figure out how to solve some dependencies issues.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/38122124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/38122137", "body": "This is working properly. Merging!\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/38122137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/github/github-ldap/comments/5414764", "body": "@kansaichris would you mind to create a PR the next time you modify this library? This change broke several tests. We could have detected it easily with a PR.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/comments/5414764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851380", "body": "yes, a group is actually a domain. You can search entries specifically under a group like you do under a domain.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851408", "body": "wait, after a second thought, we might not need it.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851464", "body": "I think we can avoid part of this if we pass the ldap entry to the constructor and we stop inheriting from Domain.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9854032", "body": "the problem is that every entry is a different object, so a set won't remove duplicated elements anyways.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9854032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9854033", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9854033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9854519", "body": "there is no `present?` in ruby.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9854519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/10000144", "body": "it's not. The cache must be created at this point, avoiding to create a new hash and merging it later to the cache.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/10000144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9962350", "body": "agreed\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9962350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/10139817", "body": "yes!\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/10139817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/10139935", "body": "sorry, I like `each_with_object` better :stuck_out_tongue_winking_eye:\n\nI rather control what I put into the final array than put whatever and iterate later to remove nil elements.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/10139935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "michaeltwofish": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/33859656", "body": "@kansaichris After we launch 11.10.330, it might be worth noting on the [Configuring LDAP page](https://enterprise.github.com/help/articles/configuring-ldap-authentication) that directory services must support paged result sets.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/33859656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52270395", "body": "LGTM :+1: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52270395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52270445", "body": "@rsanheim that was my first thought, but I think it's reasonable to provide the context when looking at the ldifs independently.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52270445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52384969", "body": "> Looks good to me, though my noob ruby skills are preventing me from testing it in the context of the local dev\n\n@lildude I just applied [the patch](https://github.com/github/github-ldap/pull/33.patch) to the gem.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52384969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52715585", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52715585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/251253211", "body": "@hhsadiq This is indeed the wrong repository, this library is not used in GitHub.com and is not responsible for user suspensions.\n\nI'm going to close the issue. [Contacting support](https://github.com/contact) as you've done is the right approach.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/251253211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16280783", "body": "The [RFC](http://tools.ietf.org/html/rfc2307) doesn't say specifically that the `memberUid` needs to be the member entry's `uid` field but it certainly implies it. In practice, I've never seen it be anything except the `uid`, but the configured user id field is probably safest.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16280783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16323271", "body": "Tested this locally with `uid` and it works as expected.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16323271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16398342", "body": "Wouldn't `uid_attr` be an attribute (string), so the map/reduce doesn't make sense? That would mean this was sufficient:\n\n```\nMEMBERSHIP_NAMES.map {|n| Net::LDAP::Filter.eq(n, entry.dn) }.reduce(:|) |\n                 Net::LDAP::Filter.eq(\"memberUid\", entry[uid_attr])\n```\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16398342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16400601", "body": "TIL :+1: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16400601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "mcolyer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49651661", "body": "@mtodd I've done a quick once over but I haven't worked in this code before.\n\nHave you verified that previous behavior works and that we get the logging output we expect since tests are failing?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49651661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49754695", "body": "@mikemcquaid I don't think so.\n\n>  I haven't. Tests aren't working, and this doesn't really do anything until you subscribe to the events that the instrumentation service will emit when in use.\n\nNo worries, was just trying to leave helpful comments at the time but now it sounds like @rtomayko is working something up.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49754695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49885236", "body": "> Still want to get this incorporated, but not urgently.\n\n:+1:\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49885236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "rtomayko": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49658647", "body": "I'm going to try a slightly different direction that taps in at a single chokepoint. We won't have great details on what generated the query but I'm a little concerned about introducing so much change in a bugfix release. I'll leave this here and start another PR for that.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49658647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49869401", "body": "v1.2.2.1 is tagged with these changes on top of v1.2.2. Merging this down.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49869401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49869803", "body": "> :ok_hand: happy to hear more of what you were thinking.\n\nMostly I'm just kind of down on sprinkling these types of instrumentation blocks all over the codebase if you can find a single chokepoint. You lose a little meta information but are guaranteed to instrument calls added in the future and it's less error prone given that there's fewer changes. I tried to run with that approach, though, and the net-ldap library just doesn't make it easy unfortunately.\n\nHappy to see you continue work in this branch as planned, was just hoping for something a bit less intense that got us 90% of the way.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49869803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/15188638", "body": "Hmm, isn't this already supported by passing a Hash? From the comment:\n\n```\n     # Internal - Configure virtual attributes for this server.\n      # If the option is `true`, we'll use the default virual attributes.\n      # If it's a Hash we'll map the attributes in the hash.\n```\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/15188638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mjmdavis": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49738455", "body": ":fireworks: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49738455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "MikeMcQuaid": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49750965", "body": "@mtodd Is this something we'll want to backport?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49750965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52385876", "body": "@mtodd Does this need backported? If so, can you do so? Feel free to leave this to a \"backport everything for 344\" PR though. Thanks :heart:!\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52385876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52386069", "body": "@mtodd Thanks :+1: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52386069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/53071093", "body": "I'm not quite sure how this ends up in 340; can you link any additional issues that I don't have already in https://github.com/github/enterprise-releases/issues/138? Thanks!\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/53071093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/53688691", "body": "This looks like a trivial and well-tested change that we need so merging.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/53688691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/53688869", "body": "CC @dbussink @rtomayko @mtodd for review.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/53688869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "rsanheim": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52270260", "body": "Yeah, I don't have context here, but just commenting stuff out seems weird.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/52270260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "shayfrendt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/101795146", "body": "Yup, looks good to me as well. :rocket: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/101795146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "timmjd": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/150325497", "body": "Patch a demo instance, sadly not as as easy as expected: Searching for a group performed by the team sync will fail due to the the [search()](https://github.com/github/github-ldap/blob/master/lib/github/ldap/domain.rb#L156) within `domain.rb` will call the base search with the following options:\n\n```\n{:size=>1, :scope=>0, :attributes=>[], :base=>\"foobar\", :paged_searches_supported=>true}\n```\n\nwhere `base` is the LDAP group that was queried. So `base` seems to be in any case required to be a valid base like `DC=foobar, DC=com`.\n\nSo the way on how to search for groups also needs to be modified:\n\n```\ngithub-ldap-1.8.1/lib/github/ldap/instrumentation.rb:19:in `block in instrument',\nactivesupport-3.2.21.github6/lib/active_support/notifications.rb:123:in `block in instrument',\nactivesupport-3.2.21.github6/lib/active_support/notifications/instrumenter.rb:20:in `instrument',\nactivesupport-3.2.21.github6/lib/active_support/notifications.rb:123:in `instrument',\ngithub-ldap-1.8.1/lib/github/ldap/instrumentation.rb:18:in `instrument',\ngithub-ldap-1.8.1/lib/github/ldap.rb:184:in `search',\ngithub-ldap-1.8.1/lib/github/ldap/domain.rb:160:in `search',\ngithub-ldap-1.8.1/lib/github/ldap/domain.rb:170:in `bind',\n\nlib/github/ldap/search.rb:38:in `find_group',\napp/models/team/editor.rb:38:in `update',\napp/models/team/editor.rb:9:in `update_team',\n```\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/150325497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/219482022", "body": "Hello @gnawhleinad, thanks for the review. What do you mean by 'searches based off of replication'?\n- Option `search_forest` added to be passed from the outside configuration\n- Search query will only be opened to affected servers that hold the containing basedn\n\nWriting tests would to be problematic due to it would require interaction with your active directory testing environment that seems currently not to be integrated with travis.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/219482022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/63390021", "body": "Requires to use `end_with?()` and not `eql?()` which will result in unnecessary requests if you have a setup like `DC=foo,DC=bar,DC=com` & `DC=bar,DC=com`. Issue is that calls to the library contain requests where the basedn points to the object of interest.\n- Login to GHE for example will query the full path: `options[:base]='CN=user,OU=org,DC=foo,DC=bar,DC=com'`\n- Possible fix would be to form such queries (outside the library) to search for the distinguished name: `options[:filter]='distinguishedName=CN=user,OU=org,DC=foo,DC=bar,DC=com'` with a basedn `options[:base]='DC=foo,DC=bar,DC=com'`\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/63390021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/63392042", "body": "Requries `options[:search_forest]` to be provided from the outside\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/63392042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/63391898", "body": "Never seen the tree (`options[:base] == empty`) to be called during debugging. The loop logic to iterate over `search_domains` seems to be always implemented outside the library within GHE\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/63391898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "gnawhleinad": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/218652583", "body": ":bow:, thanks again for the pull request!\n\n> Also this search behavior could be made available by a configuration switch to not break an existing installation.\n\nThat would be :sparkles:! While we're glad to hear that this solution works well for your Active Directory infrastructure, we want to put this behind a configuration switch (with default off) to not change the behavior for other customers.\n\n> Improvement could be done to evaluate the base of the search to only fire requests to the servers if it's basedn is matching the request.\n\nAnother improvement could be to route searches based off of replication configuration in [Active Directory Site and Services](https://technet.microsoft.com/en-us/library/cc731907%28v=ws.11%29.aspx#BKMK_SiteLinks).\n\n> Testing\n\nAppreciate these steps! Would it be possible to also add testing in [`test/`](https://github.com/github/github-ldap/blob/master/test/)?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/218652583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/222034354", "body": "> What do you mean by 'searches based off of replication'?\n\nRather than iterating through the list of domain controllers, could we query based off the biases dictated by the replication configuration (e.g. locality, cost, ...)?\n\n> Writing tests would to be problematic due to it would require interaction with your active directory testing environment that seems currently not to be integrated with travis.\n\nWhile we don't have Active Directory tests integrated with TravisCI, we do have tests that can be run from a local Active Directory environment via [`test/support/vm/activedirectory`](https://github.com/github/github-ldap/tree/master/test/support/vm/activedirectory).\n\n> Option search_forest added to be passed from the outside configuration\n\nWould it be possible to explore a new `search_strategy` that iterates through the forest for group membership lookups? For user attributes, this information is already available from the Global Catalog (so it's not necessary to iterate through the forest).\n\n/ref: [`lib/github/ldap/membership_validators/active_directory.rb`](https://ghe.io/ohana/iam-6/blob/master/lib/github/ldap/membership_validators/active_directory.rb)\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/222034354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/64844295", "body": "GitHub Enterprise instantiates a global strategy. As such, we need to provide an interface to refresh the list of domain controllers so that a configuration update does not require a restart of the appliance.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/64844295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/64844334", "body": "`s/Donmain/Domain/g`\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/64844334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "wangshoubai": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/237656576", "body": "Good, continue refueling\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/237656576/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gregose": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/7357128", "body": "`Net::LDAP::Filter.escape`?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/7357128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/7357431", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/7357431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "ymendel": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16278695", "body": "Why are all of these commented out instead of removed?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16278695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "atmos": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16278793", "body": "Seems fine.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16278793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16278795", "body": "What @ymendel said.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16278795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "buckelij": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72156502", "body": "Since this is using a different port, we'll need to document that. Can we fallback quickly if that port is not accessible?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72156502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72159200", "body": "I mean user-facing docs, not docs within the code itself.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/72159200/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}}}}