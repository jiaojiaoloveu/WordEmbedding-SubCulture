{"_default": {"1": {"chrismwendt": {"issues": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/128", "title": "Add setting to automatically refresh the index", "body": "Lots of nondeterministic test failures are caused by forgetting to refresh the index after writing or before reading. It would be convenient if elastomer-client had a setting which handled refreshing automatically.\n\nFor performance, it could be \"smart\" and only refresh if a write has happened since the last refresh.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/138989542", "body": "Should the command be renamed as well? Doing so would avoid some confusion like \"I thought this API was removed in 2.0?\", but it would be more work to find all references to `delete_by_query` and rename them.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/138989542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/138991430", "body": "It's hard to say how much it's used, and I can't think of a better name either. Perhaps it's appropriate to leave the name the same because the implementation, not the functionality, will change.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/138991430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/139401935", "body": "How will the arguments to Client#instrument for the entire operation differ from the individual bulk requests? It seems appropriate to avoid ambiguity between the two different concepts by passing a different `path`, but there is no `path` associated with the entire operation since it's a concept and not an actual request to ES.\n\nHere is the bulk request: https://github.com/github/elastomer-client/blob/master/lib/elastomer/client/bulk.rb#L41\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/139401935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/140209579", "body": "There really isn't a reason why I didn't use that style for `DeleteByQuery`, thanks for pointing that out. I'll make it consistent with `Bulk`.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/140209579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/140462645", "body": "I added the quotes, hashrockets, and trailing whitespace points since I have witnessed or committed such atrocities myself.\n\nPerhaps we could establish a pre-commit hook to run a style check.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/140462645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/140584334", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/140584334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/140587004", "body": "Implemented in #108.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/140587004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/140609752", "body": "An unfortunate side effect of hooks are that most GUIs fail to find the executables required. I'm open to suggestions on remedying that situation.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/140609752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39224845", "body": "Good catch - I forgot that they're visible outside of the class. I checked and I don't see any references to them elsewhere in the library. If it's likely that this is a user-facing breaking change, they could be implemented by reading from the `@opts` hash, or by putting `#scroll_opts` back. I'll defer to your judgement here.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39224845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39449474", "body": "Ok, I will remove those spaces. Shall we make a sweep through the whole repo with a whitespace normalization commit as a separate PR?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39449474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39455511", "body": "I will commit the incremental statistics in just a minute, stay tuned.\n\nGood point on the `=` vs `==` mistake - I'll be sure to use the interrogatory form.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39455511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39460733", "body": "There are so many `'`s that I'll save them for a repo-wide sweep later.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39460733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39460991", "body": "Sounds like something that a semantic diff would be able to handle :smile: /cc @robrix \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39460991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39241275", "body": "This is moderately complicated data transformation, so let me know if and where I should add comments.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39241275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39317900", "body": "Are you sure that `_routing` is required for deletes? This says it's optional: https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete.html#delete-routing\n\nEven if we wanted to provide the `_routing` parameter (in order to avoid the delete operation being broadcast to all shards), I don't think we can in general because the routing parameter that was used to index the document is not always stored. It's only retrievable when routing is read from a field in the document, but that's deprecated https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-routing-field.html#_path_2.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39317900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39578680", "body": "Even with access to the [docs](https://github.com/elastic/elasticsearch/blob/master/docs/plugins/delete-by-query.asciidoc), [source](https://github.com/elastic/elasticsearch/tree/master/plugins/delete-by-query), and Elasticsearch itself, it's difficult to make sure that these checks are right in all cases. I ran some tests with Elasticsearch with some infinite bash loops to cause version conflicts and missing documents, and these checks seem to be consistent with the responses I got from the official Delete by Query plugin.\n\nLet me know how watertight this should be.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39578680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39706490", "body": "Is there a simpler way to essentially `map` over an `Enumerator` than by constructing a new one and yielding each element of the original, as I did here?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39706490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39784690", "body": "The client might want to retry failed documents, in which case they would need access to at least the failed response items. Maybe it's worth having a separate convenient method called `bulk_stream_stats` which does exactly what you suggest.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39784690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39808751", "body": "My apologies, I read over your code too quickly and missed that `yield item` :bow:\n\nI like the convenience of returning stats, and the block syntax would look almost the same as calling `each` on the `Enumerator`. I'll implement it like you showed.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39808751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39811999", "body": "That's a pretty clever use of `send` to reuse the existing methods! I'll implement that now.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39811999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39891534", "body": "Ah, good catch. I'll remove the `raise` then.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39891534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39891589", "body": "Good call - I didn't know about this :+1: \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39891589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39895533", "body": ":+1: I'll add that.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39895533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40012347", "body": "Since elastomer-client aims to provide a one-to-one mapping to the ElasticSearch API endpoints, I think removing `Client#warmer` is the better option.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40012347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40022241", "body": "Good call - I wasn't sure about the best way to do this.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40022241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40026645", "body": "Good catch - I'll add `Index#multi_percolate` and `Docs#multi_percolate` and those URI template variables so it's consistent with multi search.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40026645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40232546", "body": "`index` and `type` can be omitted from the header when they're provided in the URL parameters:\n\n```\nGET _mpercolate?index=foo&type=bar\n{\"percolate\":{}}\n{\"doc\":{}}\n```\n\nIt's more of a convenience than anything for `header` to default to `{}`.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40232546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39589244", "body": "@TwP: I set this as a pre-commit hook in order to tighten the feedback loop. It can certainly be changed to a pre-push hook if you think that would be a better option.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39589244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39589439", "body": "There are so many single quote offenses that rubocop's config generation simply turned it off with `Enable: false` rather than ignoring each individual file. However, that same property was overridden in `.rubocop.yml` to get turned back on again `Enable: true`, so I instead set `Exclude: -'**/*'` to be consistent with the other cops.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39589439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40626343", "body": "It appears that that commit targets ES 2.0, so we would need to bump from 1.4.0 to 2.0 for Travis, right? I'm all for making the test as accurate as possible. Silly non-JSON format...\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40626343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40626806", "body": "@TwP: Yeah that's weird, and the docs for 1.4.0 don't have that param: https://www.elastic.co/guide/en/elasticsearch/reference/1.4/cluster-nodes-hot-threads.html#cluster-nodes-hot-threads\n\nHow about just a check for HTTP OK?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40626806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40628980", "body": "`Client#hot_threads` returns just the body, so I checked that and not the HTTP status.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40628980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/77379505", "body": "Eep, extra space?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/77379505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/77380727", "body": "Should we emit the index, type, and doc ID here to make debugging easier?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/77380727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/89236354", "body": "Good catch, moved to `extract_body` in 7474cf3", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/89236354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "wags": {"issues": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/127", "title": "Running script/test fails", "body": "When I run `script/test`, I get the following error message:\n\n```\nbundler: command not found: testrb\nInstall missing gem executables with `bundle install`\n```\n\nThis is despite a successful run of `script/bootstrap`:\n\n```\nGem environment up-to-date\nInstalling hooks into /home/administrator/elastomer-client\nSuccessfully installed hooks into /home/administrator/elastomer-client\n```\n\n_I installed Ruby 2.2.4 using **rbenv** on Ubuntu 14.04._\n\nHas anyone encountered this error before? I have not been able to determine if it is a missing gem issue or something else. Thank you!\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TwP": {"issues": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/125", "title": "Support the \"field stats\" API", "body": "The [field stats](https://www.elastic.co/guide/en/elasticsearch/reference/1.7/search-field-stats.html) API is very handy for picking out min / max values for fields along with other metrics. We should add this to the client.\n\n/cc @grantr @chrismwendt \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/5", "title": "Logging", "body": "We need to add some logging to the `Client` class. For each request the client makes, we should output a detailed debug message to a logger of some sort. I really like how Tire does it; logging a curl command that you can copy/paste and use directly. Also, outputting the status code of the response would be good, too ...\n\n```\n[200] curl -XGET 'http://localhost:9200/index/_search' -d '...'\n```\n\nNot sure how to handle large bodies and what not. And I don't think we need to log responses.\n\ncc @github/search\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/5/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/github/elastomer-client/commits/d7a1215aca730b7cb648ba30f8703dc0183dddb4", "message": "version bump for release"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/3cb73144d8583d0fa057fa3cfe27c3d2300aef7b", "message": "Merge pull request #199 from github/parameter-validation-cleanup\n\nParameter validation cleanup"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/4750e3ee6e46b9cbef142f2aa1fc440b2386b11e", "message": "removing unused methods"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/9c4773b01ee85c87fd18b84280dd606b34054a7e", "message": "Remove redundant parameter validations\n\nWe can rely on the ApiSpec validatioins that are handled down in the\nclient request method."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/f7df211f5832f76a41e1b830288f7be5c784f5e0", "message": "Merge pull request #198 from github/parameter-validation\n\nRequest Parameter Validation"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/f38be923ab40d58a46c7b53bf0447bad6078e497", "message": "remove redundant param validation"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/8103fc97e442f3b6d0f0559f71a3debe341e812d", "message": "use strict request param checking"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/bdde4c711b8adda4b3537ac238796a5bd5c1c102", "message": "adding the missing `timeout` param"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/feb7d4ae8591821027e9da67f429c340df65a895", "message": "configurable parameter validation"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/e5febbb9a41a1b6a1c64cae6d4e4d5fb072bd0a6", "message": "Method for validating request params\n\nThis method will validate request params and raise an exception if an\ninvalid param is found."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/579942b434ec4fb07b6fb39d0269ec61058117b3", "message": "removing unused constant"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/d480ea7d296c9797fc997f52b2e94ff0e28a3c23", "message": "adding rest_api descriptors"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/50808767afac94c0e381b4a1652c2f9229a0d921", "message": "adding rest_api descriptors"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/becf689f5aa70d5f119601a4f932326b161aa9d4", "message": "refactoring and adding rest_api descriptors"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/d791df7e9e39147e1a4fae37c696f0ad5117e27e", "message": "adding rest_api descriptors"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/37bc992171b40d2acda2f7e04e909de373cf4afb", "message": "adding rest_api descriptors"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/e1188bc3ca983de2f630beca7dbb96273567d52a", "message": "adding rest_api descriptors"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/f2d4f81ce923237d96c8f62c40ada1e943fc69ac", "message": "also allow path parts here"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/79d6ca28b47cc40a0e9e2786d581dbe1984a7513", "message": "fixing up hash syntax"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/88a71d33fac90345224a43b9a56385046008d168", "message": "adding rest_api descriptors"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/a568603ba88477041febd774bd7427db34f97dc6", "message": "validating request params"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/247e6022e693bdc20d9f78b2d6ce710d40789425", "message": "adding validity checker methods"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/c5f1d8a9b6b14d4d1388f56e51b2e18e8c152c98", "message": "adding validity checker methods"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/06c5940c5d84151fa3d38da05d46ba8da89ad6af", "message": "adding rest_api descriptors"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/acfb71076f5eb2263d9b8055d45316b22a7da3b7", "message": "adding rest_api descriptors"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/302f81eb865397799bbc69ae17d04cbc9ee4e616", "message": "adding rest_api descriptors"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/20d7fb376e8ebf5396648b1acfbdf8018b87982d", "message": "adding rest_api descriptors to cluster methods"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/906e7412e12e3320ff491d0f8ca54710de45410e", "message": "fixing up tests"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/2ebd3c00b0822d4580e3a10e06d72f1c6fb18d1b", "message": "fixing deprecation warning"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/1f701d01d820939aa96fd196c5c0c801983fd808", "message": "add a rest_api descriptors"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/8851d51b5d9b6eded49677774640faa42e7e99d7", "message": "add a rest_api descriptor"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/4171ec47143d8042fb15f6b6acf8dca2736c5581", "message": "fixing typos and adding docs"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/dfcdcfad50d4cbc0275805e950c554215f59c82b", "message": "adding the RES API spec for 2.3"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/a18fbd189213274e222c660e63b306c38e589355", "message": "Adding API specs for ES 5.6 and 2.4"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/baf6a9eab8c0c633d14b35d5aae624bc6e69ef81", "message": "validate REST API request params"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/acff5e0f243f6ae41d9757146caf51f482b39e53", "message": "hash cleanup"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/4a42d769033fb0b7520dd878a435abcdc4dd01b1", "message": "Accessor for the `api_spec`\n\nWe have to handle the `version` request separately now and ensure that\nwe do not try to check the request parameters. Doing so will result in a\nrecursion and then a stack overflow error."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/f0e4c1fef4792bc4dbf641ee69b3d0a4a3479687", "message": "adding accessor method"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/b23422b70f3d47129f4d4098f9e45e4479d684a4", "message": "adding some tests"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/f6352aa777b91356a495a0db4298e12c48253011", "message": "Dynamically load API spec version\n\nThe methods here will load the API spec version at runtime when\nrequested. This allows us to have many versions of the API spec in the\ngem without having to load all of them into memory at runtime."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/327713245bedaec78df95534b8169093ca7b7790", "message": "adding some docs"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/9c5de149190e6a12172298d6d5fe9af2b95c0cf8", "message": "adding some comments"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/7cf240cadfe63f2482404b1504024142217b1f6f", "message": "require appropriate files"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/fb2a86e516df211af503f5ac84c300eca0ca9077", "message": "ignore the elasticsearch vendor dir"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/120271a7c16abad3a039e4a2518d6189aec3909e", "message": "Rest API spec classes and tooling\n\nThe goal of this work is to start validating the `params` we are passing\nto Elasticsearch using the Rest API Spec that is part of the main\nelasticsearch repository on GitHub."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/11a46dd0a6a116cab3465d07e2ff453291e0f947", "message": "Preparing for 3.0.1 release"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/5fa7706827bde39f13b0e4bc55e65cb1346e4329", "message": "Merge pull request #194 from github/clear-scroll-id-when-finished\n\nAlways clear the scroll context"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/a176c5f271e249bbf8661b80170d5f8406f0094e", "message": "Merge remote-tracking branch 'origin/master' into clear-scroll-id-when-finished"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/8173679362a6882ed48e57a4ecf15eb969b8617b", "message": "fixing some of the docs"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/13bf3db2c6308641f3aceb5ae62aa926a2e40c5e", "message": "Merge pull request #193 from github/allow-routing-for-scan-scroll\n\nAllow routing for delete_by_query"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/391841a36da499ae35ed04825c2dc86b017dbbe3", "message": "Always clear the scroll context\n\nThe change here ensures that the scroll context is cleared when no more\nresults are returned from the scroller."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/24ca732c4a64dd20293ac2ee5ecea4ed401720bd", "message": "just doing a formatting change"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/8e8817498e1039ea9b81bcd3076a325828dee97b", "message": "adjusting defaults to reflect ES defaults"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/928d53d846855fa418b7b3b9578307b950303224", "message": "be far less restricitive with params"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/3f5beb441ae89c135968d8512801775918ce4a64", "message": "fixing docos"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/7880835832bc3c62fbac7f27a7b8ba0676f9494c", "message": "fixing whitespace"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/d7b8c3b8d2ce5370f77eb2e2ca592b87536c01ad", "message": "Merge pull request #190 from github/retry-failed-requests-when-possible\n\nRetry requests when possible"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/0478ee262ee55131aefeeecdc9b968a4c3ddcd52", "message": "fixing typo"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/0d960a9ceac1927dbedee0d2cefd0fbfe3a06639", "message": "adding a configurable retry delay"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/be4275f24137ac71418d37459224dc26b7af5cb1", "message": "adding some comments about max retries"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/895232e98597dc76744257ad10d8fafae05b9ee9", "message": "sneaking in a build script improvement \ud83d\ude38"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/b77515971dc2c4f5cddadb068f5c9878e1048402", "message": "set retries AFTER the request is done"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/620ac0edd872e5ce2c79657ae5152ad900401b2b", "message": "adding tests for request retries"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/432f113e4d49436cb4a6dadf72d5053f54a60928", "message": "Adding a slight delay between retries\n\nAdding a 75ms delay between retries. The number of retries is passed\nalong in the notifications payload as well for instrumentation by the\nend user if needed."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/17561df773d52e5442b9a79a6cfc3e44ea799970", "message": "Initial implementation"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/3a1ece27be0c6cdb2f2fded38b897adda9e812fc", "message": "Merge pull request #186 from github/recycle-connection-on-opaque-id-error\n\nRecycle socket connection on error"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/c4224cd9fe71ef9e38a0ee8382c4e632a0658f30", "message": "Merge remote-tracking branch 'origin/master' into recycle-connection-on-opaque-id-error"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/16e470d38527308291d1908ab7319adaab444125", "message": "Implementing the dup method"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/5912171ca66fbe324dadfb59d3ef19fb10490947", "message": "Assert duplication creates unique connections"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/4aaf3307dd5f47f48de4d8acfc4273a9677de906", "message": "Merge remote-tracking branch 'origin/master' into recycle-connection-on-opaque-id-error"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/d80a2bf3e4766267f65f6f26da394567ef056530", "message": "Merge pull request #188 from github/dup-method-for-client\n\nImplement `dup` method for Client"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/d2c33c0464ecb840d180dab87ca8920997486f36", "message": "Implementing the dup method"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/6b1ec1dad0d729a457975c86ab9ffca0d3d9079d", "message": "Assert duplication creates unique connections"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/553cc050e3d9e5db16ba1a74efdf842fd8158dbf", "message": "Recycle the connection on error\n\nThis change recycles the Faraday connection if an `OpaqueId` error is\nencountered. The one problem with this solution is that any persistent\nconnections will be left open because Faraday does not provide a nice\nway to call `close` on the underlying socket."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/dedb37a79c607966d8d4e5db2d03f4b1fbabfeb9", "message": "Merge pull request #184 from github/raise-on-invalid-parameters\n\nRaise an IllegalArgument exception"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/df6cd9804c389cd9f90d29bb099176000ea2f867", "message": "updating comments"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/6981a5964985bbc4be0d5d5c2b5eba64f1749360", "message": "rename to IllegalArgument"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/54d2268c56231b0419434aad6f590762953fc480", "message": "fixing the test"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/4d3042ba62d963635a967477fae2ddbe5d1d634c", "message": "Raise an InvalidParameter exception\n\nWith Elasticsearch 5.X now validating the parameters passed with each\nHTTP request, this code raises an InvalidParameter excpetion if we\nviolate what Elasticsearch expects. This will help us find and fix these\nproblems in our own application."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/16b9479dcbd522594ce268e51384beec0c2a9b19", "message": "Merge pull request #181 from github/cibuild-environment-tweaks\n\nCI build environment tweaks"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/9b9557cb392a0389bad062c3338c9d10fe173c2d", "message": "the `--no-ansi` flag is not supported in our docker-compose version"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/df1c0a1ffc76d85680ebf98847a63bd8a6b9e33d", "message": "disabling more xpack"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/4ecd83533e4e2c75e73b5580c5419d99a05e69cc", "message": "Tweaking cibuild output\n\nThese are cosmetic changes to the output of the cibuild script so that\nit looks nicer in the janky environment."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/5ba7e7ec9a5b9e14dc6b36bba6f58f408807c7ef", "message": "Merge pull request #180 from github/fix-delete-by-query\n\nFix the `delete_by_query` logic"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/fd6c83db0b218704a19575d77d1b4f2970d22583", "message": "future method for native delete by query support"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/33b22ad748955b9bbfe3fcda973274e3aa4dfce5", "message": "fixing a scroll test"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/cb099c0ab38da639e2735d4c03c1a57349a76e25", "message": "allow index and type"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/f00d692e5fb157f16070a1d0d50024c358290705", "message": "Merge pull request #168 from github/juruen/fix-analyzer-body\n\npass analyzer as a json object"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/f70ea3fa6fbc19da6702f69d6f63c62315d44fda", "message": "Merge remote-tracking branch 'origin/master' into juruen/fix-analyzer-body"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/d8659dffba17b6eb5af8e78f66389fe1475f9f6f", "message": "updating hash style"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/32a7e3783baa4d953877673edc380913a94a8954", "message": "handle strings and Hash arguments"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/1aa05520ffde39d418737a54f7c6527320855c6a", "message": "Merge pull request #177 from github/docker-all-the-things\n\nDockerized Janky builds"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/176d13854c65daab952ad4d81035193b0fc309e7", "message": "trying this one more time"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/77c4dec298a4285e08fc0678730ad1e808646fcd", "message": "repointing default build target"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/42a9038e3f1cb5dcb8bd740c93e5274ed21853a3", "message": "more script renames"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/66ad8f60dc1794601135e7a4195da0197df243db", "message": "renaming build scripts"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/25259496fd8ea94e4424e39e8877bf09db30f9c3", "message": "adding version specific build scripts"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/a4ec983d46a7717905802a26ba7cfe556c4a29da", "message": "adding a little more output"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/d0011cfd04d7fe3523769c363f831612dfd5877a", "message": "adding compose file for ES 5.6"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/c470f13c9fd05914e6c9636514251dec2fde7ca8", "message": "fixing version mismatch"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/4478d2208f4824553f69a2f3aec016b5631e51a7", "message": "use the new cibuild docker-compose file"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/39c957d58f15ee1b9cdd0b28e13df220403cacc3", "message": "configure a fixed IP range network"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/095f1c4a50550ea07030c59a2cc15441d9ed6ff1", "message": "fixing typos - thanks @look!"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/39d59c064792c70ce0464658c72bf7b4f39414a8", "message": "dockerized CI build script"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/49c372cad1e07f9abf2693be3f71fc3feed98640", "message": "Adding docker-compose support\n\nThis adds a docker compose file and an elasticsearch.yml file all\nconfigured up to run all the unit tests. This includes the repository\nsnapshot tests."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/323b2ef838de5d01f540d236c93ccb54e9232f7c", "message": "Script to poll for ES availability\n\nThis script enables us to wait until Elasticsearch is up and running.\nThis is the first step to using a Dockerized Elasticsearch for CI."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/6d79ee65d798f1d38e6e0a3ddef47368b186119e", "message": "Merge pull request #171 from github/fix-transient-failure\n\nFixing transient failure"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/7523a5b9d14ad84866910431f04fc6b4c149ab5d", "message": "Fixing transient failure\n\nThe notification tests were failing when using Elasticsearch run via a\nDocker container. The test was running too quickly and the shards for\nthe test index had not yet been allocated. Using our `wait_for_index`\nhelper ensures the index has been fully created so the tests will pass."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/f1a1c72c5a90c852a729b5f87f9744ea6725a695", "message": "fixing spelling error"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/f920ffac1e70fb7017dac8585d2b0ee6c03035c8", "message": "fixing stupid typo"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/ed12de2785bfed730a563c62c09445e995cc1d01", "message": "Merge pull request #148 from github/remove-es-1-references\n\nRemoving ES 1.X code paths"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/66bac7f5d29bed0571616eff3ff04f4d3a9a1798", "message": "fixing warnings"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/619c04eeee5c35c8fa868718b15ff2c2598125ce", "message": "fixing typo"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/c956ed220834f569398e60d055e7c2fc944ecc83", "message": "one more removal"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/00be381887c7fa01ed64ae26787032bc443f4169", "message": "removing ES 1.X specific features"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/1f20294d350b12de43875338fcaf8079b12eb3eb", "message": "removing ES 1.4.0 specific check"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/c3c3800a83d18b296e6aa09d3a17ef8d2cebb15b", "message": "removing ES 1.X checks"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/f6b519b2c4fdc2bf6d3bfcacfe76ded1706ec9ec", "message": "use ES 2.X style error handling"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/4cb8b629c589b3152122fe10614c2f829895f60e", "message": "Removing ES 1.X check\n\nAlso removing error handling specific to ES 1.X and using the newer ES\n2.X error handling style."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/fc2222d424a343e4e51c828aad6ecdc573313e23", "message": "removing dprecated index API methods"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/7917ad7b7a6e54500ea5edd523eaa61444c383ec", "message": "removing ES 1 version check"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/3ddbaccc847bfad9aa331dca8e2bd573ec037a72", "message": "removing support for deleting mappings"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/1f086ee8408d4217285cd63a686df9a2e9268d65", "message": "removing ES 1 version check"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/de16cd0e27feceb1ac12292da4caa0ef3e0f3589", "message": "remove the `/_mlt` query endpoint"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/585871fd4b4c28a555c2c80dc58d289e6a04c5d3", "message": "Remove ES 1.X support\n\nWe are no longer supporting ES 1.X with our client library. These\nchanges remove all code paths specific to ES 1.X and earlier."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/4f45dbddbd7f0bdce39b7410dacd6e283c6995df", "message": "Merge pull request #147 from github/small-fixes-for-es5-compatibility\n\nSmall fixes for ES5 compatibility"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/57bfa039dde59c99864ed5ee85032f11ffcc580c", "message": "modernizing hash syntax"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/09533fffce807f3c8592b63a042ac4bf8909b5d1", "message": "make these safe against nil values"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/1d409f2ce94bc5ef425d5cde7b983c8095596f97", "message": "updating test for ES 5.X"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/7d5ca97e8b9b7a7446a957086506b2921ec65abf", "message": "removing ES 0.90 code"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/1b68813b9610e2cc5a8132f7e9e623b0fcbc1819", "message": "explicitly set number of shards to 1"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/8e020708cdb8668496c8b5a91d75a9e9d3b090b2", "message": "remove support for ES 1.X"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/86258cff11f8e8ce30418679c6cb4ca6f91490c6", "message": "helper method for ES 5 version checking"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/df8e31b9c2549388fb6620c148abd50726686236", "message": "Updating index creation\n\nYou must now use PUT semantics when creating an index in ES 5.X"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/469c27d7c00b0774a637e25356354bf68c52bef6", "message": "Merge pull request #146 from github/fix-warnings\n\nFix warnings"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/43182fdba051db54aaf0c8684381f9a798671ee6", "message": "loosen up this assertion"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/bfc94991a33dd49c5161c8cee4df8777646cd98b", "message": "Fixing warnings\n\nHow did this ever work in the first place!?"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/68001a7b7f9a5bb80a07decf33a0276d4d56224b", "message": "Fixing warnings"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/057cfd4e633fa25af64fed0eb81193cf3a29a8a7", "message": "Merge pull request #145 from github/fix-net-http-warnings-in-test\n\nAdd 'Content-Type' for empty request bodies"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/d75366aa7b464f92d38e9aacb290b35b23542004", "message": "Merge remote-tracking branch 'origin/master' into fix-net-http-warnings-in-test"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/7408b85143b6cb8eeef5a953a12d01d03c80b4f6", "message": "extending tests to cover new cases"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/3643c4337e41ca5865bb7351fad66108a8a91407", "message": "Add 'Content-Type' for empty bodies\n\nIf a PUT or POST request does not have a body, we still need to add a\n'Content-Type' to the HTTP request headers. This change accounts for\nthat condition."}], "pull_requests": [{"url": "https://api.github.com/repos/github/elastomer-client/pulls/200", "title": "Removing `op_type` shims", "body": "This removes the `op_type` shim methods from the `VersionSupport` class. They are no longer needed now that we have parameter validation built into the client.\r\n\r\n/cc @elireisman ", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16532134", "body": "The question is, should we expand this idea to the other methods that accept a request body? And by that I mean, should we allow all methods to accept either a Hash or a JSON encoded String?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16532134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16549877", "body": "@grantr I've added the PUT / POST semantics to document indexing. Gonna close out this PR. Also, all the code is done for bulk stuff, too.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16549877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16593094", "body": "@grantr I was thinking about a `next` and `next_document` method ... easy enough to do.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16593094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16593586", "body": "Well, except the `next_document`. We'd have to keep the previous set of results around in order to iterate on them. And an offset into the 'hits' array.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16593586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16661079", "body": "Thanks for the feedback everyone! Here are some of the changes in direction that have taken place\n\nThe client part of this library is completely stand alone. It implements a one-to-one mapping of the ElasticSearch API and the places where it diverges are well documented. You can use the client library by requiring just the client code ....\n\n``` ruby\nrequire 'elastomer/client'\nclient = Elastomer::Client.new\n```\n\nThere are two block helpers in the client code: one to help with `bulk` action requests and one to help with `scan` queries over an entire collection of results without using an incrementing offset in the query.\n\nThe whole client is built on top of Faraday. The adapter is configurable when initializing the client. Currently we are using the https://github.com/geemus/excon gem as the adapter. It appears to be faster than net-http-persistent. But we can and should do some experiments to figure out what gives us the best performance.\n\nLast of all, I want to say that I have avoided writing this client code since day one at GitHub. It is not something that I really wanted to do, but everything else has proven to be overly complex (tire) or complete but intractable (eson). So I wrote up this client in anger - I wanted something that we could start using as quickly as possible. If this code gets pulled out into a separate gem, then great! If it never sees the light of day outside of GitHub, then great! I just wanted to get something usable out in the hands other developers. Again, I regret suggesting eson to @jbarnette and @tclem for the https://github.com/github/id project. That was a mistake, and this codebase is my attempt to rectify that error.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16661079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16948494", "body": ":+1: Thanks for implementing. Just throw some documentation links in there back to the ElasticSearch API guide.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16948494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16961684", "body": "I'm a :+1: on merging this. We can address warmers later.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16961684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17207560", "body": "I'm pretty pleased with the current state of this branch. Gonna merge in the morning, so speak up if you have something to say.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17207560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17208248", "body": "Wow! 93% is fantastic. I say merge this in if you feel it's ready.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17208248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17414283", "body": "Surprisingly enough, when I removed the tire gem from .com, Time objects were no longer formatted correctly when converting to JSON. That's the only reason it ended up in here. Appalled at time handling in JSON. We need Toml for everything.\n\nI hear your point about the Time formatting. Perhaps we should leave it in here but not include it by default. The user can explicitly require the file if they need it.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17414283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17416712", "body": "Did some digging and it looks like the various JSON libraries simply call `to_s` on the Time object and then wrap that in quotes.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17416712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17423502", "body": "Lazy programmers are ubiquitous!\n\n@grantr do you have any thoughts on the magic exception class creators? I'm pretty proud of that code; I'm curious what future Tim will think of this cleverness.\n\nI chatted with Drew Raines today asking if there was a comprehensive list of possible error exceptions that ElasticSearch would return. Such a list does not exist. You would have to search through each of the various handlers in ES seeing what they throw.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17423502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17493736", "body": "@grantr gah! I totally missed that.\n\nI'm not too concerned about symbol exhaustion attacks. The exceptions returned from ElasticSearch are a finite set.\n\nI do agree with you about not being able to find the exceptions in the code base. You have to know about the factory code. Delineating between retryable and non-retryable errors seems like a good idea. It would enable a retry layer to be built on top of the basic requests.\n\nI'll start up another PR to change out some of this code. The factory method and message parser should stick around to support retryable error creation. But the creation of exception classes on the fly should go.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17493736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17722093", "body": "This looks great :+1:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17722093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17726508", "body": "Overall this looks good. Just need to add some missing documentation, and then I think it will be ready to go.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17726508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17848314", "body": ":sparkles: :shipit:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17848314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17897518", "body": "@grantr this looks good to go. I think the multi_search stuff you just merged into master has a `JSON.dump` in there that will need to be transformed. I have one teensie change I'll throw in this branch, too.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17897518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/18570830", "body": "@grantr I'm a :+1: on your ideas here. Along with a request size, we should also keep track of the _action count_ - this would be the number of actions that have been queued up in the bulk request. The user could then automatically fire off bulk requests based on the request body size or the number of actions that have been queued.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/18570830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/18570881", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/18570881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/18571464", "body": "This PR looks good :shipit:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/18571464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/18579011", "body": "Fantastic, and thanks for updating the docs, too :+1: Feel free to merge when you're ready.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/18579011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/22228582", "body": "We could both talk to him. Does he have a list of questions or some general topics he would like to cover?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/22228582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/22283427", "body": ":shipit: :+1:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/22283427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/23426162", "body": "Given \u221e time, I would much rather use https://github.com/TwP/polylog\n\nThe idea behind polylog is that each library requests a logging instance from Polylog, and the application then configures Polylog to hand out the type of logger that it wants to use. So you only need to configure a logger in one location. Every library then grabs that logger and uses it.\n\nThis is akin to SLF4J, but with a much more pronounceable name.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/23426162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/24536529", "body": "@grantr okay `:timeout` will not work because it is already used as a parameter for the `/_cluster/health?timeout=5s` route. Can you think of a better name for this?\n- `:read_timeout`\n- `:req_timeout`\n- `:http_timeout`\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/24536529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/26743284", "body": "I believe this will conflict with the auto-loading in .com and other Rails apps. We are co-opting the elastomer namespace under the lib folder there.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/26743284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/26745991", "body": "I like the `:require => elastomer/client` idea.\n\nI've been thinking for a while now that we should rename this gem / repository to `elastomer-client` since that is what it really is. I'd also like to release more of the elastomer ecosystem under various gems. One gem that handles index creation and population (all the adapter stuff). One gem that handles all the search stuff (filters, queries, etc).\n\nLet's chat more in the +Search room.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/26745991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/27011073", "body": "Implemented as Faraday middleware\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/27011073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/28036083", "body": "I really think using the same Faraday connection across threads is going to end in a Bad Time\u2122. Doubly so since we are reusing the underlying socket connection.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/28036083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/28036100", "body": "I guess that is to say that the mutex should be implemented at a higher level. And if we are thinking about doing that, we really should have one Elastomer::Client per thread.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/28036100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/28037689", "body": "@grantr I do like the simpler counter solution. I very much doubt we'll overlap with 4 billion counter values.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/28037689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/28548302", "body": ":+1: Faraday is really quite wonderful for all sorts of things. It is making me happy.\n\nMy only recommend would be to bump the version number and tag a release. Then :ship: it.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/28548302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/30173868", "body": "That's a real nice index you have there. Be a shame if something should happen to it if you know what I mean.\n\nAgreed, that is \"not good\" behavior there.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/30173868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/30180837", "body": "Here is an example of a very large scroll ID:\n\n``` shell\ntpease@staff1:~$ curl -XGET 'localhost:9202/code-search/code/_search?pretty&search_type=scan&scroll=2m&size=10' -d '{\"query\":{\"filtered\":{\"query\":{\"query_string:{\"query\":\"github token\",\"fields\":[\"file\"],\"default_operator\":\"AND\",\"analyzer\":\"code_search\"}},\"filter\":{\"bool\":{\"must\":{\"term\":{\"public\":true}},\"should\":[{\"prefix\":{\"path.term\":\".gitconfig\"}},{\"prefix\":{\"path.term\":\"gitconfig\"}}]}}}},\"fields\":[\"repo_id\",\"file\",\"path\"]}'\n{\n  \"_scroll_id\" : \"c2NhbjsxMjg7NzQyNjI1MDY6bzNjczlnOTlUN1NIdkY3SzhUX3dEQTs3NDMwNzgwMjpQS05ZSFhFLVFfVzhGekdPZTFxdHhROzc0MzA3ODAwOlBLTllIWEUtUV9XOEZ6R09lMXF0eFE7NzQyNjI1MDk6bzNjczlnOTlUN1NIdkY3SzhUX3dEQTs3NDI2MjUwODpvM2NzOWc5OVQ3U0h2RjdLOFRfd0RBOzc0MzA3NzkwOlBLTllIWEUtUV9XOEZ6R09lMXF0eFE7NzQyNjI1MTY6bzNjczlnOTlUN1NIdkY3SzhUX3dEQTs3NDI2MjUxNTpvM2NzOWc5OVQ3U0h2RjdLOFRfd0RBOzc0MjYyNTE0Om8zY3M5Zzk5VDdTSHZGN0s4VF93REE7NzQyNjI1MDc6bzNjczlnOTlUN1NIdkY3SzhUX3dEQTs3NDI2MjUxMDpvM2NzOWc5OVQ3U0h2RjdLOFRfd0RBOzc0MzA3ODA2OlBLTllIWEUtUV9XOEZ6R09lMXF0eFE7NzQyMzM4NTE6d3RVWGo0dnZSR0tod1NXVzZUQTRjZzs3NDIzMzg1MDp3dFVYajR2dlJHS2h3U1dXNlRBNGNnOzc0MzA3Nzg5OlBLTllIWEUtUV9XOEZ6R09lMXF0eFE7NzQyNjQ1NzM6dlZRREZOV3lTTnFINUhhRllaWnBoUTs3NDMwNzgwNDpQS05ZSFhFLVFfVzhGekdPZTFxdHhROzc0MjYyNTE3Om8zY3M5Zzk5VDdTSHZGN0s4VF93REE7NzQyNjI1MTM6bzNjczlnOTlUN1NIdkY3SzhUX3dEQTs3NDIzMzg1Mjp3dFVYajR2dlJHS2h3U1dXNlRBNGNnOzc0MjYyNTExOm8zY3M5Zzk5VDdTSHZGN0s4VF93REE7NzQzMDc3OTQ6UEtOWUhYRS1RX1c4RnpHT2UxcXR4UTs3NDMwNzc5MzpQS05ZSFhFLVFfVzhGekdPZTFxdHhROzc0MjYyNTEyOm8zY3M5Zzk5VDdTSHZGN0s4VF93REE7NzQyNjQ1NzQ6dlZRREZOV3lTTnFINUhhRllaWnBoUTs3NDIzMzg1Mzp3dFVYajR2dlJHS2h3U1dXNlRBNGNnOzc0MzA3NzkyOlBLTllIWEUtUV9XOEZ6R09lMXF0eFE7NzQyMzM4NTU6d3RVWGo0dnZSR0tod1NXVzZUQTRjZzs3NDI2NDU3Njp2VlFERk5XeVNOcUg1SGFGWVpacGhROzc0MjY0NTc4OnZWUURGTld5U05xSDVIYUZZWlpwaFE7NzQyNjI1MTg6bzNjczlnOTlUN1NIdkY3SzhUX3dEQTs3NDMwNzc5NjpQS05ZSFhFLVFfVzhGekdPZTFxdHhROzc0MzA3NzkxOlBLTllIWEUtUV9XOEZ6R09lMXF0eFE7NzQyNjQ1NzU6dlZRREZOV3lTTnFINUhhRllaWnBoUTs3NDI2NDU3OTp2VlFERk5XeVNOcUg1SGFGWVpacGhROzc0MjYyNTE5Om8zY3M5Zzk5VDdTSHZGN0s4VF93REE7NzQyNjQ1ODE6dlZRREZOV3lTTnFINUhhRllaWnBoUTs3NDI2NDU3Nzp2VlFERk5XeVNOcUg1SGFGWVpacGhROzc0MjY0NTgwOnZWUURGTld5U05xSDVIYUZZWlpwaFE7NzQyMzM4NTQ6d3RVWGo0dnZSR0tod1NXVzZUQTRjZzs3NDI2MjUyMDpvM2NzOWc5OVQ3U0h2RjdLOFRfd0RBOzc0MjYyNTIxOm8zY3M5Zzk5VDdTSHZGN0s4VF93REE7NzQyMzM4NTY6d3RVWGo0dnZSR0tod1NXVzZUQTRjZzs3NDI2MjUyMjpvM2NzOWc5OVQ3U0h2RjdLOFRfd0RBOzc0MjY0NTg0OnZWUURGTld5U05xSDVIYUZZWlpwaFE7NzQzMDc3OTk6UEtOWUhYRS1RX1c4RnpHT2UxcXR4UTs3NDI2NDU4Mjp2VlFERk5XeVNOcUg1SGFGWVpacGhROzc0MzA3ODA1OlBLTllIWEUtUV9XOEZ6R09lMXF0eFE7NzQyMzM4NTg6d3RVWGo0dnZSR0tod1NXVzZUQTRjZzs3NDI2NDU4Mzp2VlFERk5XeVNOcUg1SGFGWVpacGhROzc0MjMzODU3Ond0VVhqNHZ2UkdLaHdTV1c2VEE0Y2c7NzQyNjQ1ODU6dlZRREZOV3lTTnFINUhhRllaWnBoUTs3NDIzMzg1OTp3dFVYajR2dlJHS2h3U1dXNlRBNGNnOzc0MjYyNTIzOm8zY3M5Zzk5VDdTSHZGN0s4VF93REE7NzQyNjQ1ODY6dlZRREZOV3lTTnFINUhhRllaWnBoUTs3NDIzMzg2MDp3dFVYajR2dlJHS2h3U1dXNlRBNGNnOzc0MjYyNTI1Om8zY3M5Zzk5VDdTSHZGN0s4VF93REE7NzQyNjI1MjQ6bzNjczlnOTlUN1NIdkY3SzhUX3dEQTs3NDMwNzgxNjpQS05ZSFhFLVFfVzhGekdPZTFxdHhROzc0MjMzODYxOnd0VVhqNHZ2UkdLaHdTV1c2VEE0Y2c7NzQyNjI1MjY6bzNjczlnOTlUN1NIdkY3SzhUX3dEQTs3NDIzMzg2Mjp3dFVYajR2dlJHS2h3U1dXNlRBNGNnOzc0MjY0NTkyOnZWUURGTld5U05xSDVIYUZZWlpwaFE7NzQyNjI1Mjg6bzNjczlnOTlUN1NIdkY3SzhUX3dEQTs3NDI2NDU4Nzp2VlFERk5XeVNOcUg1SGFGWVpacGhROzc0MjY0NTk5OnZWUURGTld5U05xSDVIYUZZWlpwaFE7NzQyNjI1Mjc6bzNjczlnOTlUN1NIdkY3SzhUX3dEQTs3NDI2NDU4ODp2VlFERk5XeVNOcUg1SGFGWVpacGhROzc0MzA3Nzk4OlBLTllIWEUtUV9XOEZ6R09lMXF0eFE7NzQyNjI1MzA6bzNjczlnOTlUN1NIdkY3SzhUX3dEQTs3NDI2NDU4OTp2VlFERk5XeVNOcUg1SGFGWVpacGhROzc0MjY0NTkwOnZWUURGTld5U05xSDVIYUZZWlpwaFE7NzQyNjI1Mjk6bzNjczlnOTlUN1NIdkY3SzhUX3dEQTs3NDI2MjUzMTpvM2NzOWc5OVQ3U0h2RjdLOFRfd0RBOzc0MzA3ODIwOlBLTllIWEUtUV9XOEZ6R09lMXF0eFE7NzQzMDc3OTU6UEtOWUhYRS1RX1c4RnpHT2UxcXR4UTs3NDIzMzg2Mzp3dFVYajR2dlJHS2h3U1dXNlRBNGNnOzc0MjY0NTkxOnZWUURGTld5U05xSDVIYUZZWlpwaFE7NzQyMzM4NjQ6d3RVWGo0dnZSR0tod1NXVzZUQTRjZzs3NDI2MjUzMjpvM2NzOWc5OVQ3U0h2RjdLOFRfd0RBOzc0MzA3Nzk3OlBLTllIWEUtUV9XOEZ6R09lMXF0eFE7NzQyNjQ1OTM6dlZRREZOV3lTTnFINUhhRllaWnBoUTs3NDMwNzgwMTpQS05ZSFhFLVFfVzhGekdPZTFxdHhROzc0MjMzODY3Ond0VVhqNHZ2UkdLaHdTV1c2VEE0Y2c7NzQzMDc4MTE6UEtOWUhYRS1RX1c4RnpHT2UxcXR4UTs3NDI2NDYwMjp2VlFERk5XeVNOcUg1SGFGWVpacGhROzc0MzA3ODEwOlBLTllIWEUtUV9XOEZ6R09lMXF0eFE7NzQyMzM4Njg6d3RVWGo0dnZSR0tod1NXVzZUQTRjZzs3NDI2NDU5NTp2VlFERk5XeVNOcUg1SGFGWVpacGhROzc0MjY0NTk0OnZWUURGTld5U05xSDVIYUZZWlpwaFE7NzQyNjI1Mzc6bzNjczlnOTlUN1NIdkY3SzhUX3dEQTs3NDI2NDU5Njp2VlFERk5XeVNOcUg1SGFGWVpacGhROzc0MjMzODc0Ond0VVhqNHZ2UkdLaHdTV1c2VEE0Y2c7NzQyMzM4NjY6d3RVWGo0dnZSR0tod1NXVzZUQTRjZzs3NDMwNzgxMjpQS05ZSFhFLVFfVzhGekdPZTFxdHhROzc0MjMzODY1Ond0VVhqNHZ2UkdLaHdTV1c2VEE0Y2c7NzQyNjQ2MDQ6dlZRREZOV3lTTnFINUhhRllaWnBoUTs3NDMwNzgwMzpQS05ZSFhFLVFfVzhGekdPZTFxdHhROzc0MjY0NTk3OnZWUURGTld5U05xSDVIYUZZWlpwaFE7NzQyMzM4Nzc6d3RVWGo0dnZSR0tod1NXVzZUQTRjZzs3NDMwNzgwODpQS05ZSFhFLVFfVzhGekdPZTFxdHhROzc0MjY0NjAzOnZWUURGTld5U05xSDVIYUZZWlpwaFE7NzQyMzM4Njk6d3RVWGo0dnZSR0tod1NXVzZUQTRjZzs3NDI2MjUzMzpvM2NzOWc5OVQ3U0h2RjdLOFRfd0RBOzc0MjYyNTM0Om8zY3M5Zzk5VDdTSHZGN0s4VF93REE7NzQyMzM4ODA6d3RVWGo0dnZSR0tod1NXVzZUQTRjZzs3NDMwNzgxNzpQS05ZSFhFLVFfVzhGekdPZTFxdHhROzc0MjMzODc1Ond0VVhqNHZ2UkdLaHdTV1c2VEE0Y2c7NzQyMzM4NzA6d3RVWGo0dnZSR0tod1NXVzZUQTRjZzs3NDMwNzgxOTpQS05ZSFhFLVFfVzhGekdPZTFxdHhROzc0MzA3ODE1OlBLTllIWEUtUV9XOEZ6R09lMXF0eFE7NzQyNjQ2MDA6dlZRREZOV3lTTnFINUhhRllaWnBoUTs3NDMwNzgxODpQS05ZSFhFLVFfVzhGekdPZTFxdHhROzc0MjMzODc4Ond0VVhqNHZ2UkdLaHdTV1c2VEE0Y2c7NzQyNjQ1OTg6dlZRREZOV3lTTnFINUhhRllaWnBoUTs3NDI2MjUzNjpvM2NzOWc5OVQ3U0h2RjdLOFRfd0RBOzc0MjMzODcxOnd0VVhqNHZ2UkdLaHdTV1c2VEE0Y2c7NzQyMzM4NzI6d3RVWGo0dnZSR0tod1NXVzZUQTRjZzs3NDI2NDYwMTp2VlFERk5XeVNOcUg1SGFGWVpacGhROzc0MzA3ODA5OlBLTllIWEUtUV9XOEZ6R09lMXF0eFE7NzQyMzM4ODE6d3RVWGo0dnZSR0tod1NXVzZUQTRjZzs3NDMwNzgwNzpQS05ZSFhFLVFfVzhGekdPZTFxdHhROzc0MjMzODc2Ond0VVhqNHZ2UkdLaHdTV1c2VEE0Y2c7NzQyMzM4NzM6d3RVWGo0dnZSR0tod1NXVzZUQTRjZzs3NDI2MjUzNTpvM2NzOWc5OVQ3U0h2RjdLOFRfd0RBOzc0MjMzODc5Ond0VVhqNHZ2UkdLaHdTV1c2VEE0Y2c7NzQzMDc4MTM6UEtOWUhYRS1RX1c4RnpHT2UxcXR4UTs3NDMwNzgxNDpQS05ZSFhFLVFfVzhGekdPZTFxdHhROzE7dG90YWxfaGl0czo5MjE7\",\n  \"took\" : 46,\n  \"timed_out\" : false,\n  \"_shards\" : {\n    \"total\" : 128,\n    \"successful\" : 128,\n    \"failed\" : 0\n  },\n  \"hits\" : {\n    \"total\" : 921,\n    \"max_score\" : 0.0,\n    \"hits\" : [ ]\n  }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/30180837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/32083560", "body": "Showing my age here - I remember when that commercial was on TV. Anti drunk driving campaign.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/32083560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/32477542", "body": "The test failures are the result of the mixed-mode janky/dev environment we are running. The dev environment matches what is in production, but the jankies are running an older version of ES. The solution for fixing the tests is to update the jankies to match production. There is an initial go at this in https://github.com/github/github/issues/16314, but there are quite a few tests to tweak to get this working.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/32477542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/32477662", "body": "The dependency problems are arising from `faraday-middleware`. That has an oddball dependency requirement on fraday ... > 0.7.4 && < 0.9.0\n\nPerhaps getting the middleware compatible with 0.9.0 might do the trick, too?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/32477662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33166824", "body": ":+1: to elastomer-client\n\nThe work around indexing and routing could become an elastomer-index gem. And we would also have an elastomer-search gem for generating queries. We cannot be outdone by atom for shear gem volume!\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33166824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33553713", "body": "I'm a definite :+1: on validating some of the inputs to these methods. I'm really torn on pulling in all of ActiveSupport. I would love to avoid that, but I understand why it's being pulled in. Our weekly code && coffee morning of local rubyists is happening tomorrow; I'll throw this out there and see if those brilliant minds have some good insight on this.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33553713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33554467", "body": "If the middleware registration was the cause of the test failures, then we'll need to update our [opaque ID middleware](https://github.com/github/elastomer/blob/master/lib/elastomer/middleware/opaque_id.rb#L68-L69), too.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33554467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33650449", "body": ":shipit: :+1:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33650449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33728935", "body": "I took a stab at solving this same issue but without resorting to ActiveSupport. Take a gander at #44 and drop some comments on there.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33728935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33745673", "body": "This is ready for some :eyes: and constructive critique.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33745673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33831138", "body": "Everyone cool with this getting merged in? Any objections?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33831138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33848820", "body": "Fixed by #44\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33848820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/34137219", "body": "Just for reference, [this gist](https://gist.github.com/TwP/4c7c6014ef2c9c8db980) contains the fix that should be pulled into elastomer proper. See lines 32-38\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/34137219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/34137254", "body": "Closing this out as fixed by #37 \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/34137254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/38310814", "body": ":+1: to this solution and the documentation along with it. I'll pull this into #48 after you merge.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/38310814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/38354256", "body": ":+1::shipit:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/38354256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/38354297", "body": "Yay for updating old and busted to state of the art! :+1:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/38354297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/39236610", "body": ":+1: to all of this. :heart: the compatibility notes.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/39236610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/39578648", "body": "I think we talked about this in chat, but I wanted to throw my thoughts in here for \"posterity\" and \"the future\" (just thinking of the children, here).\n\nFaraday itself will create a new connection for each request for nearly all adapters (`Net::HTTP::Persistent` might be the only one that does the right thing). So adding a persistent flag here and passing it along won't make a difference. We need to specially craft an adapter that will be persistent across faraday requests.\n\nI would love to take a week with @technoweenie and refactor faraday and how it handles adapters.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/39578648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/41623129", "body": "I think that looks good. :shipit: \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/41623129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/45020682", "body": "Seems legit and in keeping with the `elastomer-client` theme of embellishing the ES interface only where it absolutely makes sense.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/45020682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/46461947", "body": "I'm :+1: on this idea since we would like to open source these gems anyways. Before publishing to rubygems, though, we should select an open source license and add that to the repository.\n\nDo we need input from legal regarding the open source license we should use? Does GitHub have a preferred open source license?\n\nHere is the atom license: https://github.com/atom/atom/blob/master/LICENSE.md\n\n/cc @github/legal @github/security @tnm \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/46461947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/46480439", "body": ":cool:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/46480439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/46488759", "body": "A blog post would definitely be in order - probably some tech articles, too, showing how to use it. But we are still a ways off from fully open sourcing the code.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/46488759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47024200", "body": ":+1: looks legit. I had never seen the semantic version gem before.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47024200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47041259", "body": ":+1: to removing the `GH_*` stuff in favor of `BOXEN_*`\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47041259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47835761", "body": "It took me a while to convince myself that this is a good idea. It is a departure from the vanilla ES API where the bulk operations only accept `_id` `_type` etc. But I believe this is an acceptable bending of the rules and provides uniformity in the elastomer client code.\n\n:+1:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47835761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47836064", "body": "@grantr regarding your earlier comment, even the fields such as `routing` or `ttl` are not prefixed with an underscore in the URL params when searching and indexing. Adding an underscore to those same params in the bulk API is an inconsistency in ES itself. I think we're okay with this change provided we always support the vanilla ES bulk API and the underscores.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47836064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47842548", "body": "@keithduncan please do merge it.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47842548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47939319", "body": "@keithduncan yes! I'll push out a new gem today and drop the details into a new PR and cc you on that one.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47939319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47957787", "body": "@keithduncan I've pushed out `elastomer-client-0.3.2` to rubygems.org\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47957787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/49642208", "body": "Stream of consciousness style brain dump ...\n\nSeeing `repository` at the top level threw me for a bit of a loop. I associated `repository` with a GitHub repo. Appropriating this term for ElasticSearch snapshots is not the choice I would have made. Container or Collection would have been better. But we shall remain consistent with the ES paradigms and solider on!\n\nI'm a bit torn about having a `Repository` namespace in general. Keeping everything in the `Snapshot` namespace would lead to:\n\n``` ruby\nclient.snapshot('repo').repository_status\nclient.snapshot('repo').get_repository\nclient.snapshot('repo').repository_exists?\nclient.snapshot('repo').create_repository(settings)\nclient.snapshot('repo').update_repository(settings)\nclient.snapshot('repo').delete_repository\n\nclient.snapshot('repo').get\nclient.snapshot('repo').status\nclient.snapshot('repo').exists?('snapshot')\nclient.snapshot('repo').get('snapshot')\nclient.snapshot('repo').status('snapshot')\nclient.snapshot('repo').create('snapshot', options)\nclient.snapshot('repo').delete('snapshot')\nclient.snapshot('repo').restore('snapshot', options)\n\nclient.shapshot('repo', 'snapshot').status\nclient.shapshot('repo', 'snapshot').create(options)\nclient.shapshot('repo', 'snapshot').delete\nclient.shapshot('repo', 'snapshot').restore(options)\n```\n\nI kinda like seeing `snapshot` at the top-level since that is really what you are trying to do. The repository concept is ancillary but essential to the snapshot.\n\nJust tossing my initial reactions after looking over the code and reading the ES snapshot documentation.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/49642208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/51503524", "body": "My reasoning (for better or worse) is that the goal I'm trying to accomplish is taking a snapshot. So having `snapshot` at the top-level instead of `repository` makes more sense in my head. Cluttering up the snapshot namespace with `create_repository` methods is the price we have to pay to do this, though.\n\n@grantr your very last example looks interesting to me:\n\n``` ruby\nclient.snapshot('repo', 'snapshot').get\n```\n\nWe could use that for general snapshotting commands instead of going through the `repository` namespace first. So we could have this instead:\n\n``` ruby\nclient.snapshot('repo', 'snapshot').exists?\nclient.snapshot('repo', 'snapshot').get\nclient.snapshot('repo', 'snapshot').status\nclient.snapshot('repo', 'snapshot').create(options)\nclient.snapshot('repo', 'snapshot').delete\nclient.snapshot('repo', 'snapshot').restore(options)\n```\n\nAnd I would be happy with that type of syntax. The `repository` namespace would still exist, and it is used to create and manage the repository. Okay, I've convinced myself. Let's go with your implementation.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/51503524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/52567496", "body": "This is a perfectly sensible change. :+1:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/52567496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/52843125", "body": "Cool - thanks for updating these methods. This is good to ship. :+1:\n\nI'm wondering if a better way to handle these incompatibilities would be to make the 1.0 versions the default and provide a 0.90 compatibility module. When the client first connects, it checks the ES version and then includes the 0.90 compatibility module. This module would replace methods with 0.90 versions.\n\nIt would make the code a bit cleaner - no version checks scattered throughout the codebase. That's the only advantage that I can see. Eventually we can scrap the 0.90 support all together. When we hit the point we just delete the compatibility module and the one version check where it gets included.\n\nThoughts on that approach?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/52843125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/53744546", "body": "My vote here is to merge in this PR and then open a separate PR to revisit the version-specific methods and how we handle them. There are a few different approaches we can take. It would behoove us to do some research.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/53744546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/53787435", "body": "So it turns out that ActiveSupport notifications will already capture exceptions and still notify any observers. The exception information is passed along with payload.\n\n``` ruby\n      # Instrument the given block by measuring the time taken to execute it\n      # and publish it. Notice that events get sent even if an error occurs\n      # in the passed-in block\n      def instrument(name, payload={})\n        started = Time.now\n\n        begin\n          yield\n        rescue Exception => e\n          payload[:exception] = [e.class.name, e.message]\n          raise e\n        ensure\n          @notifier.publish(name, started, Time.now, @id, payload)\n        end\n      end\n```\n\nSo we might not need to do anything except update our observer code in halp.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/53787435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/53832446", "body": "Looks good. :+1: to adding tests for the notifications.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/53832446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/55620692", "body": "In github/github: https://github.com/github/github/blob/master/jobs/audit_log_repository.rb#L36\n\nThat was the only reference I could find. So I'm :+1: on removing the `add` method.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/55620692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/55837251", "body": "Okay, I totally get the point now. @mattyoho I found the stretchy code via this [magical search](https://github.com/search?q=user%3Agithub+rescue+%22faraday+error%22+-repo%3Agithub%2Ffaraday+-repo%3Agithub%2Felastomer-client+-path%3Avendor&type=Code), and I grok the reasoning behind different exception classes.\n\nIt looks like we need two separate classes of exceptions. The first is a critical class where ElasticSearch is unresponsive for whatever reason (cluster problems, network problems, etc). The second is a usability class - unexpected parameters were given or ElasticSearch returned a result we don't know what to do with.\n\nI can bake those concepts into this code.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/55837251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/56741586", "body": "With the latest changes, `Elastomer::Client::Error` instances have a `retry?` method indicating that the request can be retried.\n\n@mattyoho to use this in the halp code, the Stretchy query exception handling would be changed to a single rescue clause:\n\n``` ruby\nrescue => error\n  if error.try(:retry?)\n    Stretchy.circuit_breaker.try(:failure)\n  else\n    Stretchy.circuit_breaker.try(:success)\n  end\n  Stretchy::Results.empty(phrase: phrase, facets: build_facets, error: error)\nend\n```\n\nIf an error can be retried, then it means that ElasticSearch was unavailable for some reason. Fatal errors (ones that cannot be retried) indicate that the input to ElasticSearch was malformed.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/56741586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/56895486", "body": "The only application that is relying on Faraday errors being raised by the elastomer-client code is halp. That is only in one location, and the code to update the behavior to be compatible with these changes is very simple (see above).\n\nI'm inclined to merge this in as-is and then update halp when this new code is pulled into the app.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/56895486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/58554523", "body": "Dynamically wrapping the errors sounds good. How about this for a possible implementation ...\n\n``` ruby\nrescue Faraday::Error::ClientError => boom\n  name = boom.class.name.split('::').last\n  error_class = Elastomer::Client.const_get(name) rescue Elastomer::Client::Error\n  raise error_class.new(boom, method.upcase, path)\n```\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/58554523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59064863", "body": ":cool::+1::shipit:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59064863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59071955", "body": ":+1: I think we can get away with just having the recovery information available on the `Index` class as @grantr said.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59071955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59112840", "body": "The GCC export is not needed. We can yank that.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59112840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59308259", "body": "I tried flipping the `.ruby-version` over to `2.1.2` and `2.1.2-github`. Both of them failed to bootstrap due to build errors with the `debugger` gem. Not sure if it is just my system and missing headers or something else.\n\nVersion `2.1.1` works, so I'm going to stick that in for development purposes.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59308259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59308352", "body": "And of course `2.1.1` is not present on the jankies :rage4:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59308352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59308654", "body": "I'm in favor of yanking the `debugger` gem and getting `ruby-2.1.3` running on the janky machines. That can be our official release version. TravisCI can test all the other versions we're interested in supporting. It would be nice to support our official github ruby version in janky testing ... not entirely sure how to accomplish that with a single `ruby-version` file.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59308654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/61041659", "body": "@grant :+1: to making the default index name be `nil`. The class is less awkward to use with that being the default now ...\n\n``` ruby\nclient.index(\"foo\").analyze(\"some text\", :index => nil, :analyzer => \"snowball\")\n\n# versus\n\nclient.index.analyze(\"some text\", :analyzer => \"snowball\")\n```\n\nThe code has been updated with this change.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/61041659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/61041744", "body": "And now that `nil` is the default index name, I went back through and changed all those required `/{index}` templates back into optional `{/index}` templates.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/61041744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/61565511", "body": "Looks :sparkles:. The test helper methods are a very nice touch.\n\nI noticed the use of `refute` in some of the tests. We should adopt that globally in elastomer-client. But that is work for another PR.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/61565511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/62223507", "body": "eggcellent :egg: :sparkles:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/62223507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/62838049", "body": ":cool: :sunglasses: \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/62838049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/63103279", "body": ":+1: to this change. Let's chat next week during the summit about some automation around spec compliance and testing. It's a good idea!\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/63103279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/70922455", "body": "I would love to get this merged in before the 0.5.0 release. @dewski this will enable you to do sorted scroll queries via the elastomer-client gem. That feature was an oversight on my part.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/70922455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/89434594", "body": "I'll throw in a version bump and cut a new gem release, too.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/89434594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/118109893", "body": "After doing a little more digging, I think the read timeout theory is a red herring. In production we are using a persistent Excon adapter. Excon will close the current socket if it reaches a read timeout or a write timeout. Because of this, we will **never** get an OpaqueId error because an HTTP connection is reused after a timeout.\n\nThe root cause of the OpaqueId errors is due to something else.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/118109893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/118139857", "body": "The read timeout theory is a red herring.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/118139857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/131262732", "body": "Thank you for fixing the snapshot tests.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/131262732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/131266065", "body": "Looking at the snapshot test skipping, I was playing around with adding `skip \"reason\"` at the top of a test to see if that actually works. I was confused when nothing happened - I was expecting some sort of output or an exception. That is when I realized that the test file was not being run.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/131266065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/131266545", "body": "One nice enhancement would be to add an explicit call to `skip` in each test. That will provide feedback to the user that some tests are not being run.\n\n``` ruby\nit 'determines if a snapshot exists' do\n  with_tmp_repo do |repo|\n\n    skip(\"path.repo is not configured\") if !run_snapshot_tests?\n\n    snapshot = repo.snapshot(@name)\n    assert_equal false, snapshot.exists?\n    assert_equal false, snapshot.exist?\n    snapshot.create({}, :wait_for_completion => true)\n    assert_equal true, snapshot.exist?\n  end\nend\n```\n\nOr something like that. Obviously it will need a little more finesse. Just my $0.02 for now.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/131266545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/131266636", "body": "@grantr LOL !!!\n\nI just added the same comment to your closed PR. And I just hit the merge button on this one. I'll open another PR for finer grained skipping messages.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/131266636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/138992129", "body": "My vote is to leave the `delete_by_query` name in place. The scan / bulk delete approach will word on versions of ES prior to 2.0, and this approach is _safer_ than the current `delete_by_query` implementation in ES itself. So hiding this endpoint from the user is a good, opinionated change to make. We should absolutely update the method documentation to let people know what is going on under the hood.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/138992129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/140473691", "body": "[Rubocop](https://github.com/bbatsov/rubocop) seems to be the Ruby style checker de jour. We could throw that into a pre-push hook on the project much like puppet does for validating puppet files. Rubcop would run locally then before pushing changes up to the origin repository.\n\nGood idea, @chrismwendt :clap: :+1: :sparkles:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/140473691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/140510429", "body": ":sparkles: :shipit:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/140510429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/140897690", "body": "I'll throw some :eyes: on this tomorrow. A little bogged down with other tasks at the moment.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/140897690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/comments/3042100", "body": "It is definitely faster when running the testsuite locally\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/3042100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/comments/3042113", "body": "And @technoweenie is using excon for sending audit log data to elasticsearch from the .com app. So I'm mostly cargo culting this change.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/3042113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/comments/3042138", "body": "@grantr but since this is an option to the client, you can choose your back end adapter at runtime. We should run some experiments and see what gives the best performance.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/3042138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/comments/3303772", "body": "@grantr after the `body` is converted to a JSON string, we don't perform another JSON encode operation. The middleware is smart enough to leave the string as is and just put a JSON content type in the request header.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/3303772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/comments/25665444", "body": "Yeah, my hands started shaking a little and the nervous tic by my eye came back for a few minutes.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/25665444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/3988327", "body": "Completely agree about the inconsistency surrounding duplicating params. It is something that should be addressed in its own pull request, since I'm not entirely sure at what level to handle it at the moment.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/3988327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4024606", "body": "When I was first working on this, I was tempted to throw it up in the `Client#request` method and check each param for every request. That felt a bit heavyweight, and then I stuffed it here since this is the only parameter I currently care about having a CSV transformation.\n\nThe Addressable gem will format params into CSV when they are part of the path - i.e. for `/{index}{/type}/_search` if the :type passed in as an Array of types, then we get `/index-name/type1,type2,type3/_search` as the result. I was expecting a similar expansion for param values, but alas, it only grabs the last value in the array. I did not dig too much into Addressable to see what was really happening. Perhaps there is an option flag or setting.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4024606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4024615", "body": "I know, right! :boom:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4024615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4024688", "body": "Easy enough to change.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4024688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4097011", "body": "The .com codebase already has a few sub-classes of Elastomer::Error. Those will eventually find their way into the gem in one form or another.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4097011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4097053", "body": "Habit of mine - just so I know what the end tag pertains to without having to <SHIFT-5> on the tag.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4097053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4044745", "body": "``` ruby\nquery, params = extract_params(query, params) if params.nil?\n```\n\nSince the `extract_params` method only alters the arguments if the params is really nil. We can avoid a method call and an Array creation (for passing back the args) by checking for the nil condition first.\n\nThoughts?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4044745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4044783", "body": "We don't have any other search methods in the index. Does it make sense to put this here?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4044783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4049399", "body": "And if params is truly nil, we can just drop it from the `extract_params` method signature provided we do the nil check outside the method.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4049399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4172561", "body": "So the more I think about this the more I think we should just stick these search-type methods wherever they are needed or makes sense. The `scan` method exists at the client, index, and docs level. So the same should work for the multi-search method, too.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4172561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4177680", "body": "This class and the methods are missing docos. That's the only place.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4177680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4582229", "body": "This method looks good. The only comment I have is that you don't need the `begin / end` block - you can just put the rescue clause at the method level. There is an implied block with the method ...\n\n``` ruby\ndef exists?\n  get\n  true\nrescue Elastomer::Client::Error => err\n  raise err unless exception.message =~ /IndexWarmerMissingException/\n  false\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4582229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/9255806", "body": "It appears that middleware registration has changed in Faraday 0.9\n\n``` ruby\nFaraday::Request.register_middleware \\\n    :encode_json => ::Elastomer::Middleware::EncodeJson\n```\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/9255806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/9255819", "body": "Similarly\n\n``` ruby\nFaraday::Response.register_middleware \\\n    :parse_json => ::Elastomer::Middleware::ParseJson\n```\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/9255819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/9255858", "body": "Should we include the `:content_type => /\\bjson$/i` check here? The only reason I ask is that ES now supports the [cat API](http://www.elasticsearch.org/blog/introducing-cat-api/) which is not returning JSON by default. Do we want to support this API in the client?\n\nMy gut says \"no\" - the cat API seems more like an operations / exploration type tool. Just thinking out loud here.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/9255858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/9281894", "body": "Never mind. I saw that the parse json middleware was checking the content type before processing.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/9281894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/9281931", "body": "So yeah ... this was surprising. MultiJson will happily parse out the basic JSON types (strings, true, false, null) and return them to you. The top-level does not have to be a JSON object. Weird.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/9281931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/9333798", "body": "It could be recursive, and I did think about taking that approach. But \"eschew recursion\" flitted through my brain, and this is the result.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/9333798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/13398499", "body": "That was my initial assumption, too. But ruby proves to be a bit of an ass when converting a Hash to an Array:\n\n``` ruby\nhash = {:add => {:index => 'foo-1', :alias => 'foo'}}\nArray(hash)\n#=> [[:add, {:index=>\"foo-1\", :alias=>\"foo\"}]]\n```\n\nBut what I really wanted was\n\n``` ruby\n[{:add => {:index => 'foo-1', :alias => 'foo'}}]\n```\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/13398499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/13398783", "body": "lol! I was very confused for a while last night about why random tests were failing. Definitely comment worthy.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/13398783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/14366200", "body": ":+1: from me as well. And that has been the pattern we've followed elsewhere - params override everything else.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/14366200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/18184763", "body": "``` shell\n\u2799 curl -XDELETE 'localhost:19200//_alias/*?pretty'\n{\n  \"error\" : \"IndexMissingException[[_alias] missing]\",\n  \"status\" : 404\n}\n```\n\nThe `Index` class requires a non-empty name index name when it is first created. So I'm not too worried. But we are certainly giving people enough rope to shoot themselves in the foot with.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/18184763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/18666184", "body": "![](http://i.imgur.com/iZcUNxH.gif)\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/18666184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/16879909", "body": "Tyops are the bane of my existence!\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/16879909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19773971", "body": "Should we drop this comment line?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19773971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19586321", "body": "The intent here is to require an index name. The ElasticSearch documentation says that `_all` should be used for the index name. They do not show an example of requesting `/_settings` directly. That being said, hitting the `/_settings` URL does work with ES 1.2 - I'll change it back to being optional.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19586321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19586373", "body": "This is being changed to follow the `get_ / update_` method naming convention. The `mapping` method is defined just below as an alias to `get_mapping`. No breaking changes here :blush:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19586373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19586805", "body": "In this case `nil` is going to be equivalent to `_all`. The generated URLs are slightly more explicit with `_all` in place. I can go either way on this one, though. But to be consistent with the index API changes, we should go with `nil` as the default here as well.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19586805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/23321385", "body": "Is it being switched back in the next version of ES?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/23321385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/23338264", "body": "When you initiate a scroll, you can specify the index and the document type the query will execute against. The initial call returns the `scroll_id`. To continue scrolling you pass this `scroll_id` to the `/_search/scroll` API endpoint. The index and document type are no longer needed since that information is maintained by ES internally and retrieved via the `scroll_id`.\n\nWhat is now the `start_scroll` method was originally embedded in the `Scan` class as part of the first `scroll_id` method call. It was moved out into its own method for (a) clarity and (b) because the initial results returned by a `scan` query do _not_ contain any document hits. But the initial call with a regular `scroll` query does include document hits. Take a look at the `Scroller#do_scroll` method for the gory details.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/23338264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39449466", "body": "In chat we already talked about the response accumulation here. I'm looking forward to the improvements to the bulk operations that will make this process unneeded.\n\nHere is an arcane bit of ruby trivia: `response.nil?` is faster to process than `response == nil`. I prefer the interrogatory methods over equality checks for this reason. And it is more difficult to do the dreaded single `=` mistake `response = nil` in an if statement. \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39449466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39451693", "body": "Definitely a separate PR for that sweep. And the guilty party should be the one writing that PR as penance.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39451693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39456381", "body": "I would skip the `map` and pull out the `i[\"delete\"]` inside the `each`. Iterating twice over the results will not be good for performance.\n\n``` ruby\nresponse[\"items\"].each do |item|\n  item = item[\"delete\"]\n  ...\nend\n```\n\nOne habit I _have_ been broken of is using single quotes. We prefer to use double quotes when working with strings.\n\nSingle character variable names are verboten :no_entry_sign: (except below where you are doing simple arithmetic `n + m`).\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39456381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39458741", "body": "_/me hangs head in shame_\n\nAdds this to the list of refactorings as part of my penance.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39458741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39783188", "body": "One thought on this method is to **not** return an `Enumerator`. Instead, accept a block and perform the iteration directly with this method.\n\n``` ruby\ndef bulk_stream_items(ops, params = {})\n  stats = {\n    \"took\" => 0,\n    \"errors\" => false,\n    \"success\" => 0,\n    \"failure\" => 0\n  }\n\n  bulk_stream_responses(ops, params).each do |response|\n    stats[\"took\"] += response[\"took\"]\n    stats[\"errors\"] |= response[\"errors\"]\n\n    response[\"items\"].each do |item|\n      if is_ok?(item)\n        stats[\"success\"] += 1\n      else\n        stats[\"failure\"] += 1\n      end\n      yield item\n    end\n  end\n\n  return stats\nend\n```\n\nI've also added a hash of interesting numbers as the return value from this method. The `is_ok?` method does not exist yet, but it would check the HTTP status returned with each item.\n\n``` ruby\ndef is_ok?(item)\n  item[\"status\"].between?(200, 299)\nend\n```\n\nThoughts on this approach?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39783188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39787897", "body": "The client does have access to the failed items during the iteration. When `yield item` is called, the client can also check the status code of that particular operation.\n\nReturning the stats hash is there just to be nice to the end user.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39787897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39788882", "body": "I'm not a huge fan of the `Bulk::index` / `Bulk::delete` syntax here. My proposal is this:\n\n``` ruby\nops = [\n  [:index, document1, {:_type => \"foo\", :_id => 1}],\n  [:create, document2],\n  [:delete, {:_type => \"bar\", :_id => 42}]\n]\n```\n\nThe first item in the list is the bulk action to take. This corresponds to one of the action methods on the Bulk instance. The second item in the list is a document (or the params in the case of `:delete`). And thirdly comes the optional params.\n\nInside the Enumerator we have:\n\n``` ruby\nEnumerator.new do |yielder|\n  ops.each do |action, *args|\n    response = bulk_obj.send(action, *args)\n    yielder.yield response unless response.nil?\n  end\n  response = bulk_obj.call\n  yielder.yield response unless response.nil?\nend\n```\n\nThe Ruby `send` method is being used here to call the `action` method on the `bulk_obj` and passing the `*args` to the method.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39788882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39874389", "body": "This can be reverted back to an instance method.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39874389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39874397", "body": "This can be reverted back to an instance method.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39874397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39874403", "body": "This can be reverted back to an instance method.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39874403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40625647", "body": "Trying this out locally, and I noticed that my `hot_threads` call returned zero threads. Elasticsearch introduced the `ignore_idle_threads` parameter which defaults to `true`. So if the cluster is largely idle, there will be no hot threads to output. Setting the `ignore_idle_threads` param to `false` gives some output text to match against.\n\nThis param was added in Dec 2014 https://github.com/elastic/elasticsearch/commit/242e631e95a1b9240d3d84b16912c69bc63f031b\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40625647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40626626", "body": "That commit is on the master branch of elastic/elasticsearch. So it is included in the current ES release. Not sure what the 2.0.0 beta tags are about.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40626626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40626980", "body": ":+1: to HTTP OK **and** checking for a non-empty response body. We really don't care what is returned just so long as _something_ is returned.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40626980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/62354197", "body": "I would recommend changing this magic number to a constant and then use the constant here.\n\n``` ruby\nclass Bulk\n  DEFAULT_REQUEST_SIZE = 10 * 2**20  # 10 MB\n  ...\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/62354197/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/77379718", "body": "intentional\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/77379718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/77381048", "body": "I thought about that, and that type of error logging should happen at a higher level. An application would catch this exception and then log pertinent information from the application context.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/77381048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/89232363", "body": "`body` can be `nil` at this point. We should do the `freeze` call down in the `extract_body` method call below - just freeze the string on the way out of the method call.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/89232363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/151579392", "body": "Eventually ... I realized I was trying to do \"all the things\" in a single pull request. I did this one here because of the change lower down where I removed the `es_version_2_x?` check.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/151579392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154090617", "body": "I very much like the `COMPATIBILITY` tag here. Making a note for myself to write up the tags we are using to annotate the codebase along with what those tags should be used for.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154090617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154453181", "body": "Three things here:\r\n\r\n1. could we please remove the leading `on_` from this method\r\n2. the regular old String `version` is fine - no need for `semantic_version`\r\n3. double space after the less-than sign should be a single space\r\n\r\nSame comments for the ES 5.X method below.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154453181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154474006", "body": "Is this newline intentional?", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154474006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154693849", "body": "My only thought at the moment is this ... could we pass in the version String here instead of a Client instance, and them move all version related checks into this class. This includes the `es_version_2_x?` and `es_version_5_x?` methods.\r\n\r\nThis change will make this class easier to test since it no longer depends upon a Client connected to a real Elasticsearch cluster. Passing in a String is much easier to stub out.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154693849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154791169", "body": ":heart_eyes_cat: very nice and exhaustive", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154791169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154787261", "body": "Adding the `{percolator_type}` here exposes it as a configurable option via the `params` hash. Instead it should be interpolated directly in to the URL string via the class variable `@percolator_type`:\r\n\r\n```ruby\r\n\"/{index}/#{@percolator_type}/{id}\"\r\n```\r\n\r\nSame comment for the other methods below.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154787261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154787424", "body": "I would refrain from exposing this as an attribute on the class. It is an implementation detail that the end user should not need to worry about.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154787424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154787587", "body": "Using string interpolation as suggested earlier, adding the `percolator_type` to the defaults hash is no longer needed.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154787587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154788197", "body": "A few style nits here.\r\n\r\nYou should pull the whole `if / elsif / else` statement block down one line and then indent it only two spaces. We prefer double quotes for all strings.\r\n\r\n```ruby\r\n@percolator_type =\r\n  if client.es_version_5_x?\r\n    \"percolator\"\r\n  elsif client.es_version_2_x?\r\n    \".percolator\"\r\n  else\r\n    raise IncompatibleVersionException, \"Percolator API not supported for ES #{@client.version}\"\r\n  end\r\n``` ", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154788197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154788883", "body": "I don't think we should define default index mappings for all tests in this fashion. The percolator definition only applies to the percolator tests; this code should be moved into the specific test case `setup` block.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154788883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154789577", "body": "This might create a race condition between the `create` call above and then the `udpate_mapping` call here. Another approach would be to create a `mappings` hash and then add the percolator section when testing under ES 5.X.\r\n\r\n```ruby\r\nmappings = {\r\n   # doc1 and doc2 go here\r\n}\r\n\r\nif es_version_5_x?\r\n  mappings[:percolator] = { ... }\r\nend\r\n\r\n@index.create \\\r\n  :settings => { ... },\r\n  :mappings => mappings\r\n```\r\n\r\nOr something like that.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154789577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154789945", "body": "Same comment here about creating a `mappings` hash and then calling `@index.create`.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154789945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154790218", "body": "Why all the `@index.refresh` statements?", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154790218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154089351", "body": "This change will not be included in the 2.3.0 release. The goal of the 2.3.0 release is to remove the ES 1.X code paths and make the library compatible **only** with ES 2.X.\r\n\r\nThis change will go out in the next release.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154089351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154089393", "body": "Could you please also add an `:optimize` alias for this `:forcemerge` function such that we can maintain backwards compatibility? Please add a \"DEPRECATED:\" comment above the alias so we know to remove it in the future.\r\n\r\n```ruby\r\n# DEPRECATED:  ES 5.X has removed the `/_optimize` endpoint.\r\nalias :optimize :forcemerge\r\n```", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154089393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154096095", "body": "I'm fine with breaking ES 2.0. That version of Elasticsearch has been End-of-Lifed by Elastic, so I'm not interested in maintaining support there.\r\n\r\nAnd yes, we are loosey goosey with our version support, and tightening up on versions is another project. With parameter validation coming in ES 6.X we will have to be more strict anyways.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154096095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154988452", "body": "Could we take a different approach here? Instead of merging `params` into the body, let's change `text` to accept either a String or a Hash. If a String is passed in then we adhere the current behavior. If a Hash is passed in, then we pass that as the body to the `/_analyze` endpoint. When a Hash is used, the user is responsible for populating it with the `text` field, the `analyzer`, etc.\r\n\r\nI don't think this will break backwards compatibility since we still accept a simple String. Thoughts :thought_balloon: ", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154988452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155106902", "body": "@juruen what I meant to communicate was this ...\r\n\r\n```ruby\r\ndef analyze( text, params = {} )\r\n  if text.is_a? Hash\r\n    body = text\r\n  else\r\n    body = { text: text.to_s }\r\n  end\r\n\r\n  response = client.get \"{/index}/_analyze\", update_params(params, :body => body, :action => \"index.analyze\")\r\n  response.body\r\nend\r\n```", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155106902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155388421", "body": "Correct. These were being stripped out of the params passed to the scroll query.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155388421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155546831", "body": "My thought here is that the `IncompatibleVersionException` should be used for features that are not available across both major versions of Elasticsearch that we support. For parameters, we should create a new `IllegalArgumentException` that is raised when an incompatible parameter is used. This mirrors the exception returned by Elasticsearch itself, and we will be using this exception across more and more of the client library.\r\n\r\nThe distinction helps us know when a feature is just gone versus when a request needs a little tweaking.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155546831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155633451", "body": "not at all", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155633451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155896475", "body": "Could you move this method into the `lib/elastomer/client/tasks.rb` file, please. The convention here is that an API endpoint definition includes all the methods for that endpoint. We do something similar in the `lib/elastomer/client/index.rb` file.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155896475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155896923", "body": "The `to_i` method in Ruby works for **everything**.\r\n\r\n```ruby\r\nnil.to_i  #=> 0\r\n```\r\n\r\nIf you want to ensure that the user is passing in a Numeric value, then you can check the type of the `task_id`.\r\n\r\n```ruby\r\nraise ArgumentError, \"invalid task ID provided: #{task_id.inspect}\" unless task_id.is_a?(Integer)\r\n```\r\n\r\nThe `ArgumentError` here is a Ruby defined exception signaling that the wrong arguments were passed to the method. It is more suitable in this case.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155896923/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/156199421", "body": "Two things here for this test case:\r\n\r\n1.  The thread here should create its own connection to the Elasticsearch cluster and use that in the test. The code outside the thread will also be sending requests which might stomp on the requests coming from inside the thread.\r\n\r\n2. You need to `create()` the index first before calling the `wait_for_index` method.\r\n\r\n```ruby\r\nclient = Elastomer::Client.new \\\r\n  host:         $client.host,\r\n  port:         $client.port,\r\n  read_timeout: $client.read_timeout,\r\n  open_timeout: $client.open_timeout\r\n\r\nindex = client.index(name)\r\nindex.create({})\r\nwait_for_index(name)\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/156199421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/156203375", "body": "I would extract all of this logic into a helper method that you put at the end of this test file. Something like ...\r\n\r\n```ruby\r\ndef lookup_health_tasks(timeout: 5)\r\n  tasks = $client.tasks\r\n  start = Time.now\r\n\r\n  ary = []\r\n\r\n  loop do\r\n    break if (Time.now - start) >= timeout\r\n\r\n    ary = tasks.get[\"nodes\"]\r\n      .map { |k,v| v[\"tasks\"] }.flatten\r\n      .map { |ts| ts.select { |k,v| /health/ =~ v[\"action\"] }}.flatten\r\n      .reject { |t| t.empty? }\r\n\r\n    break unless ary.empty?\r\n    sleep 0.250\r\n  end\r\n\r\n  ary\r\nend\r\n```\r\n\r\nAnd then you can use this method in your test to lookup the `target_tasks` array.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/156203375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/156203970", "body": "Same comment here regarding a new `cilent` for this thread to use. Hrmmm ... a helper method to duplicate a client connection would be super rad. Better yet, implementing the `Elastomer::Client#dup` method would be super helpful. I can do that work in a separate PR.\r\n\r\nFor now using a different `client` is recommended.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/156203970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/156204140", "body": "You can use the `lookup_health_tasks` helper method here, too.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/156204140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/156210278", "body": "PR #188 has a `dup` method you can use here instead ...\r\n\r\n```ruby\r\nclient = $client.dup\r\n```", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/156210278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/157275046", "body": "I'd like to leave it in and uncomment it once we have a more modern version of `docker-compose` out on the build hosts. The `--no-ansi` will suppress the weird control characters in the build output that normally provide colorization in a terminal.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/157275046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "kkirsche": {"issues": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/124", "title": "Consider utilizing Elasticsearch Transport for communication not standard HTTP API", "body": "For better performance, consider using the [Elasticsearch Transport](https://github.com/elastic/elasticsearch-ruby/tree/master/elasticsearch-transport) which handles connecting to multiple nodes in the cluster, rotating across connections, logging and tracing requests and responses, maintaining failed connections, discovering nodes in the cluster, and provides an abstraction for data serialization and transport.\n\nThis should also be able to allow the use of Excon, Patron and other adapters in a similar manner to what you have which are supported with Elasticsearch's official client\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "grantr": {"issues": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/105", "title": "Bulk helper should instrument entire operation", "body": "The Bulk helper can issue multiple requests behind the scenes if requested. In this case we should instrument the entire operation as a single action in addition to the underlying scan/bulk request actions.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/91", "title": "Test API coverage against the spec", "body": "ES has a well defined API spec here: https://github.com/elasticsearch/elasticsearch/tree/master/rest-api-spec/api\n\nWe should test our API coverage against specific versions. On that note, we should probably explicitly note which versions we support (where support means we strive for 100% coverage) and which we don't (coverage might be incomplete). We could even add methods in the client for determining whether the connected version of ES is officially supported.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/91/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/80", "title": "Allow apps to configure faraday logger", "body": "This code in haystack reaches into elastomer-client's Faraday object to set the logger:\n\n```\nif Rails.env.development?\n    Haystack.elastomer_client.connection.response :logger, Rails.logger\n  end\n```\n\nhttps://github.com/github/haystack/blob/master/config/initializers/elasticsearch.rb#L18-L20\n\nThis shouldn't be necessary. Elastomer::Client should provide a method to set a logger object.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/80/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/69", "title": "Compatibility across ES versions", "body": "#68 introduced version-specific behavior to a few methods. Since this might happen more often, we should think of a clean way to do version-specific stuff that avoids version checks everywhere. /cc @TwP @jnunemaker\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/69/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16456899", "body": "Things I want in an elasticsearch client:\n- Exposure of dead-simple elasticsearch api methods\n- Higher level index configuration tools (mapping, settings)\n- Bulk indexing and scrolling block helpers\n- Index deployment management (rotation, open/close, enable/disable indexing)\n- Migrations (mapping schemas, schema change detection, reindex into same or new index)\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16456899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16456955", "body": "Some interesting ideas about query construction here: [matthuhiggins/arelastic](https://github.com/matthuhiggins/arelastic)\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16456955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16457090", "body": "This client may also be useful to look at: http://rubydoc.info/gems/elastic_record\n\nIt's mostly written by the author of arelastic above. The repo is private and licensing status is nebulous, so I wouldn't use any of it directly.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16457090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16515594", "body": "I like the idea of leaving high-level integrations to separate gems. Avoids building ActiveSupport-isms into the basic actions.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16515594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16588380", "body": "@TwP this is perfect! \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16588380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16589407", "body": "Just had a thought. This could be slightly more flexible if the code inside the loop was extracted to a method. Then the Scan object could be used to iterate without the block helpers. \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16589407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16594118", "body": "next document could be interesting, but not really necessary I think.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16594118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16808942", "body": "Maybe the client can take a :verbose level or :trace => true option that increases the logging level to include requests and responses?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16808942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16809102", "body": "We can't require activesupport for the low level client, but at a higher level we should use ActiveSupport::Notifications and a LogSubscriber.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16809102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16947837", "body": "Working on the missing index actions in #7\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16947837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16960296", "body": "That's all the missing index actions except warmers. Warmers are tricky (and similar to percolators) so we should probably discuss how to handle them in the api.\n\nI think maybe a subobject like Index::Warmers might be a good abstraction? Sort of like the Docs object.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16960296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16960960", "body": "index.warmers.delete\nindex.warmer('test').create(query)\nindex.warmer('test').delete\nindex.warmer('test').get\n\nHmmm.. Not sure I like the .get method. Not sure if this is worth doing. @TwP what do you think? It feels sort of wrong to have get_warmer/put_warmer/delete_warmer methods in the Index class.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16960960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16961302", "body": "@TwP I'll move warmer stuff to a different PR. Ok to merge this?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16961302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17040730", "body": "I haven't quite figured out what the method signature should be for Explain and More Like This. Both operate on a specific document, already indexed, by id.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17040730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17042121", "body": "I guess explain and more like this are pretty similar to the delete action, which takes the :id in the params hash, so that's what I'll do.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17042121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17092454", "body": "These are the simple ones. Multi Search and Percolate seem like they might need more discussion. Ok to merge?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17092454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17101143", "body": "Oops, pushed multi_search anyway.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17101143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17239576", "body": "Post-merge review! :)\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17239576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17414156", "body": "I think adding a to_json method to Time is overstepping the bounds of this library a bit. Most projects will already have some way of translating times into json, and we don't want to step on that. Since this is a low-level library, I think it's fair to say that non-primitive objects are not supported.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17414156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17414566", "body": "Generating exceptions on the fly is cool, but it worries me for two reasons:\n- It is leaving you open to a symbol creation attack from ElasticSearch. If the response format changes and breaks the parser, we could blow up the vm creating exception classes.\n- It is not well documented. If a user wants to know where the IndexMissingException is coming from and how to fix it, there is no \"class IndexMissingException\" to grep for. ElasticSearch doesn't document these classes either. Most people will end up catching Elastomer::Error. I think a better approach might be to define certain common exceptions  like IndexMissing and QueryParseError and let others be Elastomer::Error or UnknownError.\n\nOne thing rubberband did that people seemed to appreciate was to separate errors into retryable errors and fatal errors, although I'm not sure it's worth the trouble if we're not building retry logic into the client (rubberband had built in retries).\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17414566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17414612", "body": "I like not including it by default, but we should investigate what json libraries are doing already. Maybe some of them already have such files.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17414612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17421241", "body": "The biggest problem with JSON is the handling of times imo. I understand the reasons why they didn't address it, but they really should have.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17421241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17492818", "body": "@TwP There's a comment above with my thoughts about exception class creation. It would probably be a good idea to get the opinion of someone more familiar with Ruby internals, like @tmm1.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17492818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17508427", "body": "Ok, extract_params is now only called when params is nil. This will be a rare case in production since most requests will have a query and params.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17508427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17698784", "body": "@TwP I think this is ready to :ship:. Thoughts?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17698784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17733232", "body": "This would be great! I think we can at least come up with a list of topics to cover and fill in the docs as we go.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17733232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17737002", "body": "Can you point to where documentation is missing? At first glance everything seems covered, but I could easily be missing something.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17737002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17844898", "body": "Ok, docs should be complete now.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17844898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17898222", "body": "Oops, I meant to merge master and fix the JSON references in the branch. oh well\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17898222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/18569309", "body": ":+1: on removing `REQUEST_SIZE`, but :-1: on immediate bulk requests. IMO `add_to_actions` should only make a request if a `:request_size` is set. If there is no `:request_size` then the `Bulk` object should only assemble the request and rely on the creator to call `call` at the right time. \n\nI'm considering this to be the most likely use case:\n\n```\nclient.bulk do |b|\n   b.index(parent_doc, :id => 'parent1')\n   b.index(child_doc, :parent_id => 'parent1')\n   b.index(associated_doc)\nend\n```\n\nThe user will expect this to issue one request, but it will really issue 3 with the above change. `:request_size` is essentially required because a bulk request that issues N requests per N actions is not useful.\n\nThe case of chunking to avoid hitting request size limits is the extreme case, only a problem for a few organizations (GitHub being one of them). I think the api should be designed to accommodate the normal case first and the extreme case second. The extreme case is easily handled with an extra parameter that normal users don't need to care about.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/18569309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/18571011", "body": ":+1: on action_count, I'll add that to #19\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/18571011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/18571031", "body": "Actually I'll create a new pr for it\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/18571031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/18773411", "body": "@TwP good to merge?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/18773411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/22129050", "body": "I could talk to andrewvc. I'm not sure what the disclosure rules are for internal systems though. I'd need some coaching from @TwP on what is secret and what isn't.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/22129050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/22973145", "body": "The only thing missing at this point is the percolate api, which is changing in 1.0 anyway so maybe we should hold off on that.\n\nClosing this in favor of a percolate-specific one. Feel free to re-open if there are more missing apis, or open specific issues for each one.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/22973145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/23379597", "body": "Picking this back up.\n\n@TwP do you like the way tire has a module-level logger instance? Should we add `Elastomer.logger`? Since you are well versed in all things [logging](https://github.com/TwP/logging) I figure you'll probably know best how to add lightweight logging to a library.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/23379597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/24537019", "body": "I've often seen libraries offer read_timeout, write_timeout, and open_timeout. So in this case I think read_timeout is best. It leaves the semantics open for other timeout types.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/24537019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/26742959", "body": "/cc @TwP\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/26742959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/26743767", "body": "I think if this is only an issue in .com, we should fix it there by adding `:require => 'elastomer/client'` to the Gemfile or altering the current elastomer require to `require Rails.root.join('lib/elastomer')` or its .com equivalent.\n\nDo any other apps that use elastomer define their own extensions in lib/elastomer.rb?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/26743767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/26746186", "body": "I brlefly investigated pulling some of the .com index and search classes into elastomer for haystack's use, but decided it was too big of a project for now. I'm ok with renaming the repo to elastomer-client.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/26746186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/27009402", "body": "`SecureRandom.uuid` is a standard function in Ruby 1.9+. No need to require the simple_uuid gem.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/27009402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/27010632", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/27010632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/28035618", "body": "Any opposition to adding a mutex to make this thread safe?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/28035618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/28036355", "body": "The redis client manages thread-safety. I think a thread-safe client would be pretty marvy.\n\n Excon has thread-safety tests so it's probably fine. I don't know whether faraday is threadsafe or not but there was some work done a year ago to stop using autoloads.\n\nNot a high priority for us either way.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/28036355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/28037021", "body": "I think I'd do something like this instead:\n\n```\nCOUNTER_MAX = 2**32 - 1\n\ndef initialize\n  @base = SecureRandom.urlsafe_base64(12)\n  @counter = 0\nend\n\ndef generate\n  @counter += 1\n  @counter = 0 if @counter > COUNTER_MAX\n  sprintf(\"%s%04x\", @base, @counter)\nend\n```\n\nIds will repeat after ~4 billion requests, but that might be preferable to a uuid generation delay every 65536th request. Since the ids are only generated and used internally we don't have to worry about making them unique for all time, just for a few seconds. They are also a bit more compact than traditional UUIDs.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/28037021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/32311404", "body": "Is there an alternative? /cc @technoweenie\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/32311404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33156695", "body": "We have version numbers now.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33156695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33156972", "body": "The work that's going on in #41 is relevant to the discussion about gem naming. Should we rename this repo/gem to elastomer-client? How do you feel about that a few months later @TwP?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33156972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33637704", "body": "@TwP thanks for the review and fixes!\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33637704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33638452", "body": "@TwP I have all the same concerns. I'm curious what your ruby group says.\n\nAnother factor is that higher-level code will probably want `ActiveSupport` also. Relates to the separate gem or not discussion.\n\n@github/rails what do you think? Pull in `ActiveSupport` just for `Object#blank?` Or implement it ourselves?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33638452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33731222", "body": ":+1: to this approach. Better than #43 because it also catches values from parameter overrides, eg `index('foo').docs.get(:index => nil)`.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33731222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33731875", "body": "While working on this problem I did an audit of which APIs required which url segments based on the uri templates used. I found that `search`, `count`, and `validate` currently require an index name when they shouldn't. If we start validating required params, those methods should be updated to allow a missing index name.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33731875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33839962", "body": "Still convinced this is the right approach. :+1:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33839962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33850496", "body": "Fixed by #44\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33850496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/38306476", "body": "#### Nested settings instead of flattened keys\n\nSettings responses now return nested hashes instead of flattened keys. Settings requests support both formats. The old behavior can be enabled with the `?flat_settings` query string parameter.\nhttp://www.elasticsearch.org/guide/en/elasticsearch/reference/master/_return_values.html\n\nThis broke Elastomer tests and could break settings management code in apps and puppet.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/38306476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/38355086", "body": "I favor the name change so the action names are easier to guess without\nlooking at the code! :+1:\nOn Mar 21, 2014 7:23 AM, \"Tim Pease\" notifications@github.com wrote:\n\n> In an attempt to bring some consistency to our interface, I've added params\n> = {} to all the index methods. Now we can pass along params to any\n> request without trouble. I've also made the :action names consistent, too.\n> \n> And I just couldn't resist fixing up the cluster test so it works with ES\n> 1.0\n> \n> @grantr https://github.com/grantr what are you thoughts on these action\n> titles? For index settings we previously had: index.settings.get and\n> index.settings.update. This PR changes those to be index.settings and\n> index.update_settings to reflect the method names. I feel like I'm being\n> \n> ## pedantic, but I would like these things to be consistent in some manner.\n> \n> You can merge this Pull Request by running\n> \n>   git pull https://github.com/github/elastomer params-for-everyone\n> \n> Or view, comment on, or merge it at:\n> \n>   https://github.com/github/elastomer/pull/48\n> Commit Summary\n> - add params to all methods and normalize the action names\n> - couldn't resist making this test work with ES 1.0\n> \n> File Changes\n> - _M_ lib/elastomer/client/index.rbhttps://github.com/github/elastomer/pull/48/files#diff-0(81)\n> - _M_ test/client/cluster_test.rbhttps://github.com/github/elastomer/pull/48/files#diff-1(4)\n> \n> Patch Links:\n> - https://github.com/github/elastomer/pull/48.patch\n> - https://github.com/github/elastomer/pull/48.diff\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/github/elastomer/pull/48\n> .\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/38355086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/38615239", "body": "FYI this branch doesn't fix all failing tests on ES 1.0, just the ones related to new response formats.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/38615239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/38618794", "body": "ES 1.0 on master:\n`90 tests, 138 assertions, 23 failures, 15 errors, 0 skips`\nES 1.0 on this branch:\n`90 tests, 273 assertions, 11 failures, 15 errors, 0 skips`\n\nThe extra assertions are due to the change in bulk indexing tests.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/38618794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/38628899", "body": "#### The field query has been removed\n\nES doc recommends using `query_string` instead, but `match` might be a better choice.\nhttp://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/_deprecations.html\n\n#### get_mapping nests mappings under a \"mappings\" element\n\nCode expecting the `{\"index-name\":{\"type-name\":{ #mapping }}}` response format will need to be updated to expect `{\"index-name\":{\"mappings\":{\"type-name\":{ #mapping }}}` format.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/38628899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/38701166", "body": "/ref https://github.com/github/search/issues/12\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/38701166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/38701182", "body": "/ref https://github.com/github/search/issues/12\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/38701182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/38854784", "body": "The only remaining failures on ES 1.0 are related to the change in format for count, validate, and delete-by-query requests: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/_search_requests.html\n\nStill haven't decided to handle this in a compatible way.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/38854784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/38866649", "body": "I ended up writing a test helper that checks for version 1.x and submits different query hashes in count, validate, and delete_by_query tests.\n\nNow the tests pass on both 0.90.x and 1.x. Sweet!\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/38866649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/38866970", "body": "The only change to the library code here is a compatibility update to `Warmer#exists?`. Since we don't use warmers at GitHub this is a pretty low risk change.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/38866970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/39237317", "body": "/cc https://github.com/github/search/issues/12\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/39237317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/39239883", "body": "/ref https://github.com/github/search/issues/12\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/39239883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/40026961", "body": "#### response['ok'] and response['created'] are not equivalent\n\nIn the 1.0 index api response, the `ok` attribute has been removed and a `created` attribute has been added. **The behavior of the `created` element is different.** The `created` attribute is only true when the document is new. If the document already existed, then `created` will be false even though the request succeeded.\n\nDon't replace `ok` with `created` in conditionals expecting `created` to always be true, because it won't be.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/40026961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/40028407", "body": "While we may discover a way to detect success or failure from the response, I think the Elasticsearch devs feel that the response status is the canonical way to detect success or failure. See https://github.com/elasticsearch/elasticsearch/issues/4310\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/40028407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/40028900", "body": "One counterpoint to this is our existing error handling in [client.rb](https://github.com/github/elastomer/blob/42c5bb6b45e255b3fb7e4292021d086afb8570e3/lib/elastomer/client.rb#L254-L259). That may already offer all the failure detection necessary.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/40028900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/40547745", "body": "Renaming is happening in #57 \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/40547745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/40547971", "body": "I wasn't happy with the abstractions here.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/40547971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/44581896", "body": "### field values in restricted fields queries are always arrays\n\nIn the 1.0 search response, when using `fields=updated_at` in the query string, the field values are now always arrays, regardless of the multiplicity of the source.\n\nPre-1.0:\n\n```\n  {\n      \"_index\" : \"pull-requests\",\n      \"_type\" : \"pull_request\",\n      \"_id\" : \"21614\",\n      \"_score\" : 1.0,\n      \"fields\" : {\n        \"created_at\" : \"2012-03-02T22:48:56-08:00\"\n      }\n    }\n```\n\nPost-1.0:\n\n```\n{\n      \"_index\" : \"haystack-development\",\n      \"_type\" : \"needle\",\n      \"_id\" : \"2aRWKAQlpbXSe1gIDZMRdg\",\n      \"_score\" : 1.0,\n      \"fields\" : {\n        \"created_at\" : [ \"2014-05-02T00:18:41Z\" ]\n      }\n    }\n```\n\nhttp://www.elasticsearch.org/guide/en/elasticsearch/reference/current/_return_values.html\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/44581896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/45111323", "body": ":sparkles: for this!\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/45111323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/46390450", "body": "Closing. I think the existing error handling is enough for now.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/46390450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/46478380", "body": "I think we can safely use the MIT license.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/46478380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/46887497", "body": "This is blocked waiting for ES 1.x on a janky, see https://github.com/github/puppet/pull/5978\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/46887497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47042770", "body": "@TwP ready for :eyes:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47042770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47396522", "body": "### The fields parameter can no longer return object fields\n\nIn 1.0, an object mapping cannot be used in the fields parameter. For example, given a mapping with the following fields:\n\n```\ncomments.author_id\ncomments.created_at\ncomments.body\n```\n\nIn 0.90 it was possible to use `fields=comments` to return all comments fields. In 1.0, this will raise an error explaining that `comments` isn't a leaf field:\n\n```\n{\n  \"error\" : \"SearchPhaseExecutionException[Failed to execute phase [query_fetch],\n all shards failed;\n shardFailures {[vyOMeRAISo21L_a48a0svw][issues][0]: \nElasticsearchIllegalArgumentException[field [comments] isn't a leaf field]}]\",\n  \"status\" : 400\n}\n```\n\nIt is now necessary to use source filtering via the `_source` parameter to retrieve entire objects.\n\nhttp://www.elasticsearch.org/guide/en/elasticsearch/reference/current/_return_values.html\nhttp://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-request-source-filtering.html\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47396522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47560904", "body": "I'm tentatively :+1: on this, pending @TwP's thoughts.\n\nElasticsearch documentation never says that `id` is acceptable in the parameters hash. This change requires the developer to be aware of elastomer-client's behavior and that makes me uneasy. (I also dislike extracting `_id` from the document hash). I want elastomer-client to introduce no behavior of its own so that the only documentation needed is the Elasticsearch documentation. I think this will reduce the likelihood of subtle bugs in the future.\n\nOn the other hand, the `{:id => 'someid'}` parameter in `Docs` is something Elastomer invented (Elasticsearch has no `id` parameter, it uses a path segment), so there's already an internal consistency issue confusing developers. If elastomer-client can't be consistent with Elasticsearch, it should be internally consistent.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47560904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47564742", "body": "> I could add a further test that client code can create/index using a Docs or Bulk instance with the same params.\n\nGood idea. It would note to future developers that the equivalence was intentional.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47564742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47807526", "body": ":+1: This looks good! I took the liberty of making some doc updates.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47807526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47852608", "body": "### Routing is now required for single-shard APIs\n\nPrior to 1.0, some APIs that only hit a single shard (like get) did not require a routing parameter even if the mapping specifies that routing is required. In 1.x those APIs fail if a routing parameter is not supplied.\n\nhttps://github.com/elasticsearch/elasticsearch/pull/4523\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47852608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/50190728", "body": "I think repository deserves its own scope. It is a separate object from snapshot with its own CRUD operations. If repository doesn't have a scope the snapshot method namespace becomes cluttered:\n\n```\ncreate_repository\ncreate\nupdate_repository\nupdate\ndelete_repository\ndelete\nget_repository\nget\nrepository_status\nstatus\n```\n\nThe repository scope is still there, but it's accomplished by appending or prepending `repository` to the method names. This seems counterintuitive to me and counter to the rest of the Elastomer api, which does the opposite:\n\n```\nclient.index('index').create\nclient.index('index').docs('type').index\nclient.index('index').delete\nclient.index('index').docs('type').delete\n```\n\nCan you elaborate on why you're torn about the repository scope? \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/50190728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/51642917", "body": "Right, if you don't want to care about repository scope, you don't have to because `client` has a `snapshot('repo', 'snapshot')` method that gets you to the snapshot scope without it.\n\nEven abandoning the repository scope would, I think, result in the same `#snapshot(repo, snapshot)` api.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/51642917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/52959696", "body": "I think that's a good pattern, not only for 0.90 -> 1.x (which we're mostly done with) but for future incompatibilities as well.\n\nWe do lose the ability to do very granular branching on versions. No more `if 1.x this else that`. That could lead to copied methods and maintenance issues.\n\nI've never had to do this kind of version-compatibility maintenance over a long period, but I can think of a few people who might have. @brianmario and @jnunemaker, given your experience maintaining client libraries, would you put version conditionals inside methods or use version-specific mixins?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/52959696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/53748435", "body": "Oops forgot about this one.\n\n@jnunemaker in this case a single ruby process will talk to multiple versions of ES, and app code often is not aware of which version is used, so the version needs to be detected at runtime.\n\nI'll go ahead and merge, then open a new issue about versioning.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/53748435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/53795587", "body": "That's good news! I'll open another PR to move the timeout rescue inside the instrument block so it gets the `Elastomer::Client::TimeoutError` exception instead of the faraday one.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/53795587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/55630798", "body": "Great sleuthing! We can merge #52 once that line is fixed.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/55630798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/55668257", "body": "My only worry with this is that it breaks code that previously relied on rescuing `Faraday::*` exceptions. Maybe the Elastomer errors can inherit from the Faraday error classes?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/55668257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/55672751", "body": "> offering it in the intermediate to aid with migrating old code\n\n@mattyoho I agree with that plan. Ultimately the goal should be to mask implementation details (like faraday) so app code doesn't end up depending on those details.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/55672751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/55845261", "body": "In a previous client I divided errors into retryable and nonretryable. Retryable errors indicate that the request may succeed in the future. Nonretryable errors will never succeed. This doesn't have to be done with the class hierarchy; it can be an attribute. I found it useful.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/55845261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/58553689", "body": "I think instead of removing this, we should dynamically create the faraday wrapper errors based on what is defined in faraday. That gives us better forward and backward compatibility.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/58553689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/58553739", "body": "(Although, I'm fine with merging this and working on dynamic errors in a separate PR)\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/58553739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/58990931", "body": "Thanks for this! \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/58990931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59088513", "body": "Those tests have been failing in that way on janky for a while. They pass locally. I'm fine with merging and tagging. Don't forget to update the changelog!\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59088513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59116348", "body": "@rtomayko and @tnm may have more thoughts on how or whether to make the transition to a public repo.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59116348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59310096", "body": "I'm fine with yanking debugger. I think we mostly use byebug today anyway.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59310096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59406430", "body": "Yay for docs!\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59406430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59827432", "body": "@TwP I removed the debugger dependency.\n\nI think if this repo is going to be open sourced, we should remove the .ruby-version file and make it part of the janky env instead. @bhuga correct me if I'm wrong, but I believe we can set env vars like this:\n\n```\n/config ci BUILD_ELASTOMER_CLIENT_RBENV_VERSION=2.1.1-github\n/deploy ci\n```\n\nThen we remove `RBENV_VERSION` setting from `script/cibuild` and drop the `.ruby-version` file.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59827432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59827812", "body": "@bhuga if we set `BUILD_ELASTOMER_CLIENT_RBENV_VERSION` will it apply to a job called `elastomer-client`? I wonder what happens to job names with dashes.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59827812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/61023782", "body": ":heart: all the new documentation! This is great.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/61023782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/61025638", "body": "Hope the repeated comments weren't too annoying. I didn't realize there would be so many when I started :scream:\n\nI think it should be possible to create an index object with a nil or missing name, implying all indices. E.g.\n\n```\nclient.index.refresh\nclient.index(nil).refresh\n```\n\nIMO this is as close as we can get to the ES APIs in which an omitted index name implies all indices.\n\n@TwP can you elaborate on why you feel these apis should require a non-nil index name?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/61025638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/61145896", "body": "Great! I think this is a positive change. APIs that require an index name will still complain if no index name is set thanks to assert_param_presence.\n\n(nil index name should also be in the changelog btw :smile_cat:)\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/61145896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/61146010", "body": "Sorry for the (since deleted) typo comment on the commit, I seem to have forgotten how to review PRs.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/61146010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/61340160", "body": "@bhuga doesn't seem to work: https://janky.githubapp.com/1754224/output\n\n```\nruby 1.8.7 (2011-06-30 patchlevel 352) [x86_64-linux]\n```\n\n```\n$ gh-config ci | grep -i elastomer\nBUILD_ELASTOMER_CLIENT_RBENV_VERSION=2.1.1-github\n```\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/61340160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/61564007", "body": "I ended up creating a single repository directory (`/tmp/elastomer-client-snapshot/test`) in `script/cibuild` and making it world writable. I modified all the tests to use this single directory instead of randomly generated repository directories. Seems to work fine.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/61564007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/61564047", "body": "@TwP ready for review :bow:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/61564047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/61565883", "body": "Agree about refute, on both counts.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/61565883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/61569363", "body": "@bhuga we thought about running both travis and janky. Janky and travis for github/elastomer-client builds, and travis for fork builds. That seems to work for @github/atom-ci. Any thoughts on that?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/61569363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/62803001", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/62803001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/63118908", "body": "I noticed that most of these aliases were untested, so I added tests for them. I also added a `mget` alias for `multi_get` to be consistent with `msearch`/`multi_search`. \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/63118908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/70890119", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/70890119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/70904944", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/70904944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/70930781", "body": "Delaying the 0.5.0 release to try to get #96 in.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/70930781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/70931828", "body": ":ship:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/70931828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/89434492", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/89434492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/89434589", "body": "Can we get a test or two in https://github.com/github/elastomer-client/blob/master/test/notifications_test.rb?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/89434589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/114595071", "body": "Thanks @GregMefford! Sorry we didn't notice the build breaking.\n\nCould you change the ES 1.4.0 check to a test_helper method? Perhaps `es_version_supports_update_mapping?`. That way all the version checks are in one place and they tell the reader what they're checking for.\n\nWe should probably move them to their own file as well, but that's not necessary to do here.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/114595071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/114680533", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/114680533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/118905902", "body": "The original purpose of the OpaqueId middleware was to work around a (now fixed) bug in excon that didn't reset the connection properly. We still see OpaqueId errors occasionally, so there's something else in the stack that can cause the issue.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/118905902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/131265896", "body": "Good catch @TwP :+1:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/131265896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/131266430", "body": "@TwP it would be nice to use skips instead of the global `if` at the top of the snapshot tests. If you can make that work that'd be great.\n\nMaybe something like this:\n\n``` ruby\n\ndef snapshot_test(*args, &block)\n  if run_snapshot_tests?\n    test(*args, &block)\n  else\n    test(*args) { skip }\n  end\nend\n\nsnapshot_test \"create a snapshot\" do\n  # ...\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/131266430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/131908721", "body": ":+1: Thanks @TwP\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/131908721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/138990627", "body": "@chrismwendt Good question. Can we gather some data to find out how often this command is used? I suspect it's mostly used in test/dev code.\n\nI can't think of a better name than `delete_by_query`, can you?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/138990627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/139403606", "body": "I'm thinking we could omit the body, keep the path the same, and set the action to something synthetic, like `bulk.total` or `bulk.block` or something.\n\nMaybe something like this:\n\n``` ruby\ndef bulk( body = nil, params = nil )\n      if block_given?\n        params, body = (body || {}), nil\n        instrument(path, body, params.merge(:action => \"bulk.block\") do\n          yield bulk_obj = Bulk.new(self, params)\n          bulk_obj.call\n        end\n      else\n```\n\nWhat do you think @TwP?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/139403606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/139662807", "body": "@chrismwendt I left a few line comments with my understanding of what the line is doing. Please correct me if I'm wrong!\n\nThe length of the `delete_by_query` method and the number of lambda functions required suggest that this might be better implemented as a command object, similar to Bulk. I think that would be easier to follow and more idiomatic Ruby (at least, idiomatic Ruby at GitHub).\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/139662807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/140208874", "body": "@chrismwendt The Bulk helper defines the `bulk` method in its own file: https://github.com/github/elastomer-client/blob/master/lib/elastomer/client/bulk.rb#L31\n\nCan you explain why you aren't using this style for `DeleteByQuery`? (That's not a trick question btw, I'm curious about your reasoning)\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/140208874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/140505266", "body": "This is great @chrismwendt! I'm :+1: to merge.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/140505266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/140581690", "body": "I'm :+1: to merge this once the test additions are in. Good work @chrismwendt!\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/140581690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/140583799", "body": "Looks great @chrismwendt! I say :ship:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/140583799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/comments/3042064", "body": "Is excon actually an improvement?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/3042064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/comments/3042193", "body": "As long as it remains a configurable option I'm fine with it. And I agree good to be consistent with the clients being used elsewhere.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/3042193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/comments/3303652", "body": "@technoweenie is there a way to get the request body out of a `Faraday::Response` object?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/3303652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/comments/3303668", "body": ":-1: I don't like how this doubles the json dump load for each request, even if instrumentation is not enabled. Can we move that to the instrument method at least?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/3303668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/comments/3303800", "body": "@TwP oh good. Ignore me then.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/3303800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/comments/8191798", "body": "I think I'd add some opinion words here like \"We think these things are better handled...\"\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/8191798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/3986380", "body": ":aciton works? :wink:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/3986380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/3986398", "body": "What is securerandom for?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/3986398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/3986447", "body": "I'd like to avoid requiring activesupport as a dependency for the base client. Instrumentation is both optional and user-specific so I think its dependencies should also be optional. Can we pull all this into elastomer/instrumentation.rb and attempt to require activesupport there? Or maybe wrap all the instrument calls with `if defined?(ActiveSupport::Notifications)`\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/3986447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/3986519", "body": "Is the dup necessary? Would like to avoid creating more hashes than is necessary\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/3986519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/3986601", "body": "We already dup the hash in some places with merge, and update_params destructively modifies the hash. We should decide on a policy and stick to it everywhere. If we decide to dup, we should aim for only one copy.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/3986601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/3986615", "body": "Maybe this can check for respond_to?(:instrument)\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/3986615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4022207", "body": "Very nitpicky, but I would change this to `params[:_id].nil? || params[:_id].to_s.empty?` to avoid creating empty strings for every index call without an id.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4022207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4022237", "body": "Should this be `cluster.shutdown`?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4022237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4022288", "body": "I wonder if we could change the parameter handling of faraday (maybe add a middleware?) so it translates array parameters and repeated parameters into CSV.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4022288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4022315", "body": "+:100:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4022315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4079062", "body": "Hmm this is tricky. I guess adding the nil check and dropping params from the method signature sort of removes the need for the method at all. But I don't like the repetition of that stanza everywhere. What do you think? useful method or not?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4079062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4079089", "body": "No, I didn't consider that. It should only go where other search methods go. :+1:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4079089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4079120", "body": "Does scan even belong in the index? Maybe that should go in docs also.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4079120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4079139", "body": "Or maybe scan should stay in index since it's mostly useful for admin stuff like reindexing, and scroll should go in docs since scroll is more query-y (it supports sorting).\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4079139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4079146", "body": "The fact that there's a discussion about this at all might mean that the docs/index split is getting fuzzy.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4079146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4176484", "body": "Ok, I'll add multi_search back to Index.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4176484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4180101", "body": "Oops, missed that. thanks for the :eyes:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4180101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4120947", "body": "Sure. What's special about 1.7? (or < 1.7)\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4120947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4121237", "body": "Works for me\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4121237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4736219", "body": "Oops, missed this a while ago! I'll make this change and merge.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4736219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/9287269", "body": "If we ever need to parse other content types, we could re-add the content_type check. I agree that cat is more of a command line tool and not really designed to be used by clients.\n\nCurrently if the parser comes across a content type it doesn't recognize it leaves the body as is. So the cat api will still work, if you want to use it.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/9287269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/9287373", "body": "This could be a quirk of the json parsing library we're using. Yajl might be more permissive than other gems.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/9287373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/9332860", "body": "Can this be recursive?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/9332860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/9356392", "body": "In this case, I think the recursive solution is cleaner, but maybe more difficult to reason about. I leave it up to you to decide!\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/9356392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/9356439", "body": "I think I would rename this to be more descriptive than validate. Maybe `assert_presence` or something similar\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/9356439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/10846107", "body": "I prefer the fix in #49. It doesn't persist deprecated behavior and is better documented, plus it doesn't put the cluster in a read-only state if the first assertion fails.\n\nTests are themselves documentation and using flat_settings here seems to me misleading.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/10846107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/13394769", "body": "No need for two else clauses here.  The last one using `Array(actions)` will take care of both.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/13394769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/13398729", "body": "That's what I get for assuming. Carry on sir! Might want to put a comment there so a future developer (perhaps named Grant) doesn't delete that clause.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/13398729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/14359847", "body": "I think the String type check should not be moved to this method. If the document is a string, this method shouldn't be called instead of the method internally deciding to do nothing with invalid parameters. That seems more self-documenting which IMO wins over removing repeats.\n\nIf the goal is to remove repeats, why not move all the params manipulation steps to a `prepare_params` method?\n\n```\ndef prepare_params(params, document)\n  params = convert_special_keys(params)\n  params = params.merge from_document(document) unless document === String\n  params.delete(:_id) if params[:_id].nil? || params[:_id].to_s.empty?\n  params\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/14359847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/14360663", "body": "I know this behavior predated you, @keithduncan, but I'd still like to discuss it: should keys in the document win over keys in the params? I think params should be the winner and this merge should be reversed.\n\nElasticsearch normally ignores special keys in documents. Elastomer allows users to cheat a bit, but the cheating shouldn't override the official behavior. The params hash should be authoritative if it exists and there is a conflict. I think this is what elastomer users are likely to expect: that the params hash is more of an override than the document hash. This mirrors the behavior of search requests, where the params hash overrides the request body.\n\n@TwP what are your thoughts?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/14360663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/14360727", "body": "This should be a constant instead of an array.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/14360727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/14361239", "body": "Instead of running this regex N times for every document, these keys should be precomputed. Could the array turn into a hash of keys and their translations?\n\n```\nSPECIAL_KEYS = %w(id type index)\nSPECIAL_KEYS_HASH = SPECIAL_KEYS.inject({}) { |k, h| h[k] = \"_#{k}\"; h }\n\nSPECIAL_KEYS.each do |key, parameter|\n...\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/14361239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/14363437", "body": "I'd like a few more tests here:\n- test translation of strings and symbols\n- test override of keys in the document and params hash with the same name\n- test that a non-prefixed key in the document doesn't get upgraded to a parameter, e.g. `document[version] does not imply params[_version]`.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/14363437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/18184590", "body": "I doubt anything bad happens, but what happens when you do `DELETE //_alias/*`?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/18184590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/18189735", "body": "Looks like it doesn't do anything destructive (unlike https://github.com/elasticsearch/elasticsearch/issues/7863) so no need to guard against it.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/18189735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/18666758", "body": "> This will never bite us ever...\n\nProphetic words. **knock on wood**\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/18666758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/18809257", "body": "I think this should only be on the index scope. To get recovery status for all indices would then be `client.index.recovery`.\n\nThis is the same as the other index APIs that can apply to all indices.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/18809257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19369123", "body": "Is this the default in elastic search? Doesn't it give you all nodes if you don't pass a qualifier?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19369123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19774092", "body": "Oh right I guess that's a comment isn't it? I copied this from haystack, but no need to copy mysterious comments. I'll remove it.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19774092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580449", "body": "I don't feel like it's elastomer-client's job to set defaults here. If ES allows node_id to be missing, then elastomer-client should also allow that without setting a default on its own.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580555", "body": "We should probably provide a docs.exists? method.\n\nThere's also a document exists api: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-get.html#docs-get\nWe could support that in `docs.exists?` with `:id` in the params hash.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580609", "body": "This endpoint doesn't actually require an index in the path, so I don't think elastomer-client should require one.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580662", "body": "That is, if the intent of this change is to require an index. Please correct if I'm misunderstanding.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580725", "body": "This endpoint doesn't actually require an index in the path, so I don't think elastomer-client should require one (if that is the intent).\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580755", "body": "This should be mentioned in the changelog as a breaking change.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580792", "body": "Why the note about setting `:index` to `nil`? Isn't the default already `nil`?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580839", "body": "This endpoint doesn't actually require an index in the path, so I don't think elastomer-client should require one (if that is the intent).\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580841", "body": "This endpoint doesn't actually require an index in the path, so I don't think elastomer-client should require one (if that is the intent).\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580847", "body": "This endpoint doesn't actually require an index in the path, so I don't think elastomer-client should require one (if that is the intent).\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580853", "body": "This endpoint doesn't actually require an index in the path, so I don't think elastomer-client should require one (if that is the intent).\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580861", "body": "This endpoint doesn't actually require an index in the path, so I don't think elastomer-client should require one (if that is the intent).\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580865", "body": "This endpoint doesn't actually require an index in the path, so I don't think elastomer-client should require one (if that is the intent).\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580869", "body": "This endpoint doesn't actually require an index in the path, so I don't think elastomer-client should require one (if that is the intent).\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580877", "body": "This endpoint doesn't actually require an index in the path, so I don't think elastomer-client should require one (if that is the intent).\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580880", "body": "This endpoint doesn't actually require an index in the path, so I don't think elastomer-client should require one (if that is the intent).\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19580880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19623686", "body": "Oh I see! Sorry I didn't notice that earlier.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/19623686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/23320381", "body": "I'd also add >= 1.4.3\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/23320381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/23321993", "body": "Yes: https://github.com/elasticsearch/elasticsearch/pull/9178\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/23321993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/23337642", "body": "Why are the separate `start_scroll` and `continue_scroll` methods required?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/23337642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/23338922", "body": "Good explanation thanks! :+1:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/23338922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39201484", "body": "I'd put these in a constant above the method like so:\n\n``` ruby\nDEFAULT_OPTS = {\n  :index  => nil,\n  :type   => nil,\n  :scroll => '5m',\n  :size   => 50\n}.freeze\n```\n\nI'd probably move the `:body` merge somewhere else, since it's already an ivar.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39201484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39224033", "body": "Did you check to see if there are any uses of these reader methods? We may want to continue supporting them to avoid breakage.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39224033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39224124", "body": "Thanks for writing a test :smiley:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39224124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39297573", "body": "Looks like nothing outside this library uses Scroller directly, so I think we're ok to remove. Still, we should note this as a breaking change in CHANGELOG.md and increment version numbers appropriately.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39297573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39300375", "body": "This is very nitpicky, but I tend to put breaking changes at the top of the changes list.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39300375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39447460", "body": "Normally methods that return a boolean value are suffixed with a `?`, e.g. `is_ok?`\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39447460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39447592", "body": "The style guide specifies no spaces between parentheses in method definitions, the rest of this library notwithstanding (cc @TwP the scofflaw)\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39447592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39447681", "body": "Docs here are for `Bulk`, might want to correct those\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39447681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39448054", "body": "Use the `update_params` method here, as in https://github.com/github/elastomer-client/blob/command-object/lib/elastomer/client/docs.rb#L294\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39448054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39448090", "body": "No need for the empty parens here\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39448090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39456277", "body": "No need to override `:index` and `:type` here, they'll be added by `Docs#defaults`.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39456277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39456886", "body": "> Single character variable names are verboten\n\nhttps://github.com/github/elastomer-client/blame/master/lib/elastomer/client/docs.rb#L536-L539 :stuck_out_tongue: \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39456886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39460875", "body": "I'm neutral on the `'` => `\"` swap. Sometimes I prefer to preserve blame rather than fix a style issue. (Related: I wish we had a good blame explorer mode)\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39460875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39461399", "body": "Can we document an example of what this hash looks like?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39461399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39461459", "body": "Ok to refer to the documentation for `Client#delete_by_query` here.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39461459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39461503", "body": "Ok to refer to the documentation for `Client#delete_by_query` here.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39461503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39461622", "body": "I'd like to see some tests for the missing/failed scenarios, but since webmock is added in #108 it can wait until after merge.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39461622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39461835", "body": "These instance methods should be documented. They are all `# Internal:` except `initialize` and `execute`. See http://tomdoc.org/\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39461835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39461858", "body": "No empty parentheses here. Just `def execute` for methods that take no parameters.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39461858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39315019", "body": "This fails for Docs objects without a given type because the `_type` isn't automatically filled in:\n\n```\nElastomer::Client::RequestError: ActionRequestValidationException[Validation Failed: 1: type is missing;2: type is missing;3: type is missing;4: type is missing;]\n```\n\nTo avoid that, always pass in the `_type`. It's probably also a good idea to pass in the `_index` as well in case it's possible to call delete_by_query without index scope.\n\n``` ruby\nb.delete(_id: hit[\"_id\"], _type: hit[\"_type\"], _index: hit[\"_index\"])\n```\n\nAnother wrinkle: Indices with document routing enabled require the `_routing` parameter to delete. You'll probably want to check for that in the scan response and pass it in.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39315019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39317118", "body": "Collects the `delete` action hashes into an array\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39317118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39317121", "body": "Indexes the delete hashes by index name and removes the `_index` key\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39317121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39317238", "body": "Groups the delete hashes by index name\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39317238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39318249", "body": "[Enumerable#group_by](http://ruby-doc.org/core-1.9.3/Enumerable.html#method-i-group_by) might be useful. Could possibly replace this line and the previous.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39318249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39318424", "body": "Ah good point, I didn't see that it's optional. Since it's not retrievable we shouldn't send it here.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39318424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39318633", "body": "I'd add a comment above each line explaining what its purpose is. I'd also comment on why accumulate is called both inside and outside the bulk block, and what the purpose of the `flat_map` line is (since `flat_map` is rarely used)\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39318633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39579612", "body": "This is really close. I'd like to see a test that checks whether counts are aggregated correctly. It's fine to demonstrate this only with deletes; no need for missing or failure aggregation checks.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39579612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39579652", "body": "Add an assertion here that response has `found` and `deleted` equal to 2.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39579652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39579763", "body": "Also `refute_found` for both docs.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39579763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39878271", "body": "Can we document what the item typically looks like?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39878271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40125486", "body": "Shouldn't be necessary here, since there's already an index scope\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40125486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40125542", "body": "No need to add index scope here, since it's already scoped by `@docs`.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40125542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39891320", "body": "`:type` can be passed in as a parameter so we don't know for sure if it's missing yet. I believe we normally allow the URI template to catch missing path segments.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39891320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39891438", "body": "For generic asserts, I like to add a message to describe what went wrong (the default message is \"Assertion failed\" or something equally useless).\n\n``` ruby\nassert response[\"created\"], \"Couldn't create the percolator query\"\n```\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39891438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39895392", "body": "It's possible to percolate an existing document without a body (See the [docs](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-percolate.html#_percolating_an_existing_document)) so we should support this as well. We could add an optional id element to the URI template like `/{index}/{type}{/id}/_percolate` and allow the body to be omitted.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/39895392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40008827", "body": "Since a percolate request with no `body` or `params` is invalid, I think `body` should not have a default value. Same for `percolate_count`.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40008827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40009038", "body": "Use the `client` and `name` accessors instead of referencing instance variables.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40009038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40010159", "body": "There's a slight inconsistency here compared to the warmer interface. A `Warmer` object can be constructed two ways:\n\n``` ruby\nclient.warmer('index_name', 'warmer_name')\nclient.index('index_name').warmer('warmer_name')\n```\n\nWith the above percolator interface, there's no `client.percolator` option.\n\nWarmers and percolators both require an index scope, so I'm open to removing `Client#warmer` if there's agreement that it's not useful. Either way both objects should have similar interfaces.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40010159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40010255", "body": "`index` should probably be `index_name` to clarify that it's an index name string and not an `Index` object.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40010255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40010569", "body": "Use `client.assert_param_presence` to verify that these are valid values. See https://github.com/github/elastomer-client/blob/a19ffa5ab3207ecf162f1a37e70399bad1e31eb7/lib/elastomer/client/warmer.rb#L24-L25\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40010569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40010840", "body": "I'd prefer URI templates here, since that's the code path for all other path generation. See https://github.com/github/elastomer-client/blob/a19ffa5ab3207ecf162f1a37e70399bad1e31eb7/lib/elastomer/client/warmer.rb#L42.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40010840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40012227", "body": "Should support the other paths as well:\n\n```\n/index/type/_mpercolate\n/index/_mpercolate\n/_mpercolate\n```\n\nSee https://github.com/github/elastomer-client/blob/a19ffa5ab3207ecf162f1a37e70399bad1e31eb7/lib/elastomer/client/multi_search.rb#L43\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40012227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40012536", "body": "To maintain consistency with `MultiSearch` and other document APIs, argument order should be `doc, header`.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40012536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40012649", "body": "Great, let's do that. I've removed it in #114.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40012649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40230032", "body": "This method was renamed to `percolator.create` right?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40230032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40230083", "body": "No empty parentheses here\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40230083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40231872", "body": "Use `defaults` here instead\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40231872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40231931", "body": "Use `defaults` here as well\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40231931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40232173", "body": "Is there any reason to allow missing `header`? Seems like it's always required in the request. https://www.elastic.co/guide/en/elasticsearch/reference/current/search-percolate.html#_multi_percolate_api\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40232173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40232227", "body": "Reverse argument order to match `percolate`\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40232227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40233088", "body": "Is `id` also a required parameter? Should probably `assert_param_presence` on that too.\n\nBit of historical background, `assert_param_presence` exists because a nil or empty string parameter can cause a command to apply to more things than you expected. See https://github.com/github/elastomer-client/issues/32.\n\nI haven't checked the api, but it's possible that the request `DELETE /index_name/.percolator/` deletes all percolators. In that case we should definitely require a non-blank `id`.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40233088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40233726", "body": "Ah ok, that makes sense. Let's leave it the way it is.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40233726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40234346", "body": "I prefer pre-commit because it avoids \"fixing rubocop\" commits in the history. We'll see if it gets too annoying though.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40234346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40626643", "body": "For hot_threads specifically, I'm not too worried about test correctness. It's an admin endpoint that's only useful for human viewers. I'd be willing to drop its tests if they're causing problems.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40626643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40627056", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/40627056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "elireisman": {"issues": [], "commits": [{"url": "https://api.github.com/repos/github/elastomer-client/commits/21d8d524c1370850b13b25774efa454375b07d4a", "message": "bump version to 3.0.7"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/7b2b69265a091f2d44c2b6bfeb7106ff797c4447", "message": "bump gem version"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/a0667524f3ba77ef9b6467e32fdfd4185df2a7ba", "message": "Merge pull request #197 from github/elireisman/strict-req-params-vs\n\nalias for strict request params by ES version"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/d0e607ebee0e9697392468c343f6a3eb40cd9873", "message": "alias for strict request params by ES version, for caller-side shims on breaking changes during upgrade"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/a1d5b864bae5387325451d81f1194058d3509324", "message": "bump gem version in prep to deploy op_type shim"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/5860c09f2383b98521e1c7d6f8a57e6b189aa488", "message": "Merge pull request #196 from github/elireisman/es5-compat-op-type\n\nHandle op_type compatibility in VersionSupport"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/98cd7ca33c97213798e53ce58c661d10ec2a456e", "message": "post-review updates"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/bcd142b5a947eb8e6223bf7cf53275cf49428cb9", "message": "add _op_type -> op_type version compatibility shim"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/fb4cda92efdaba6f540ca9ee5bedfb95247b3cca", "message": "Merge pull request #192 from github/elireisman/strict-bool-version-support\n\nadd version_support shim for strict bool fields"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/59c5bcbadbcc8e1472cdd507ffe2676871dd0316", "message": " post-review comment update"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/a0a9a4144b2c539946c3e8fa73ba953fe815bdfa", "message": "add version_support shim for strict bool fields"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/7c2e165ac386a86570c93ee64e1a871018c20b3f", "message": "Merge pull request #187 from github/elireisman/add-tasks-api\n\nAdd Tasks API support (for ES 5.x or newer) to elastomer-client"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/f8fd894f78aa5b62a09189f73aaf1106d5a73046", "message": "remove comment typo"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/32fc9044b7b97fc338f755e051d4c880303601ce", "message": "Merge branch 'master' into elireisman/add-tasks-api"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/4bd1ed65a99de8d963247a5843ada5249d397610", "message": "better get_by_parent_id & comments"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/01b83dfc5bd3be37f0743aa1c0fdff2b4b65aecc", "message": "Merge branch 'master' into elireisman/add-tasks-api"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/41c9633711e2a4e617c07dc902d51c3d7fb21450", "message": "do a little less work per test suite run"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/e79598cf6caa1e71a30db6e2c95cba66ab2be17d", "message": "go simple with index creation, just do enough work in threads to get\nresult we want"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/90ba00bde3b628cd2b308f6c6511b233000b6844", "message": "post-review: avoid background work bleeding over into delete-by-query bulk test case by joining tasks api threads after each case"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/06e365414feb25ea51cfebb22cc0655799c28c99", "message": "whitespace"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/7d4a95d9eb9466d12df3936e219bbc99e42f191e", "message": "better test index cleanup pattern in 2 test cases"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/956fbb02a7eb8109239622aeea243087d1135a67", "message": "post-review updates using new client dup"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/2ce9043996a36e391da326b15a8be977e705524d", "message": "DRY out some test calls"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/f7cf6ef46181d9402f6b4a908c2a20306cd1dc66", "message": "note-to-self: avoid overly ambitious last minute changes until I know Ruby better..."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/705c52f57620d06a2e6876fb42fc0d33e88e2d0f", "message": "better doc comments, normalize timeout param on wait_* calls"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/c320ae9737a827fc91e5dd9a42926adebd321631", "message": "swap out debug call"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/269ddea92eaeef520c1ef37834691f580d5d972c", "message": "update: better wait-for-complete test, support ES2 and ES5 for tasks API"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/657be1eee9153601b9036ed395c6d8dc7f41a327", "message": "better comments & more Ruby-ish bool check"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/59df490424b5a6a59a2b47363baf1156ab50e989", "message": " in client test files, use require_relative to import test_helper.rb"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/8c2e2ea8a0c970a3da25093108be06590a71023d", "message": "post-review updates, better test for get_by_id"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/d8e4e38d0b4cf2f328ed9d709d8aad3cca2d30f2", "message": "add several ActiveSupport suplimental libs into test_helper.rb"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/c239b1e02cec636e92fc53ff2b4df3926d7af933", "message": "force nodes-style grouping even though this is the default (for es56 CI)"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/86122c969ee6c22e34a24604a1040d3424615e14", "message": "additional test for /_tasks?group_by=parents listing"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/ee3d12204d5366f0e76a6cbcd4f8d12b63c5f3ff", "message": " nit: add *.swp to .gitignore for Vim happiness"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/f8c2c62aa4675b7dd9a32e4b6052c1011e8cde93", "message": "Basic Elastomer::Client::Tasks impl & unit tests ; Also:\n    1. adds versioned constructor to Elastomer::Client\n    2. shims node_id ~ task_id mismatch in elastic.co docs to make API calls work as advertised"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/432941651a9595085be3d1e3d1933323ace89b6b", "message": "Merge pull request #176 from github/elireisman/fix-index-test-for-multi-perc\n\nUpdate multi_percolate tests"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/74add1acc33d3bc6c15bf3cf1b87d4a26e290682", "message": "use correct WIP release version for CHANGELOG"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/025fe60eb92fadb6f67e0a8341707743683529a8", "message": "update CHANGELOG"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/0fe9acc91c564c94c084b3fd3390af9131929692", "message": "whitespace"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/e855eaedce2b500e87d4db293998cdece879509b", "message": "fix index_tests.rb warning; the Ruby gods demand a sacrifice of parens for the harvest"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/a8503cbf241a784c39393a7dda512c98f927dbe0", "message": "add .byebug_history to .gitignore"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/1d338a95ec23037d2e147215e227764889a4fc29", "message": "post-review update: group params merge into add_to_action calls"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/b5919f4ecd0465f3a0adbdd8b0688b5da29e7211", "message": "Fix index_test.go multi perc param propagation when using @actions list not supplied body"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/3dff51befc4525d4e0c1f6c17319dbf558b5e454", "message": "fix another test warning"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/9011164cf9afce4ea47a59917f2e672eb7b46899", "message": "Fix warmer_test.rb warning"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/d87cb4645eb4656b6898aee071ba3150c70a4c18", "message": "Merge pull request #167 from github/elireisman/es2-es5-percolator-shims\n\nUpdate Percolator APIs for ES 5.x upgrade"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/ab6c673ab65ba382571a991d8335b5c4ab493cc6", "message": "tweak percolator_type"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/d3acdb706e3c486a688d998cc11ba55829dbcace", "message": "add method to VersionSupport"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/51d9667e6fe4302aff927bd4160f32880e221ff9", "message": "whitespace fix"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/b7783eba52abefce18543fa7592fc3f15098aa3b", "message": "Merge branch 'master' into elireisman/es2-es5-percolator-shims"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/20007291cd72073acff18fd6039a5f41e31f4069", "message": "fix Minitest::Unit.after_tests warning"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/02540b0c10fcf7358255cc70b8f4983dabd707e8", "message": "Rebase onto master with version_support, etc."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/0e8cb72181986f67ab5de5880097462932e8bd8b", "message": "Merge branch 'master' into elireisman/es2-es5-percolator-shims"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/81f922c9bd9a09977003c3074e76a8b2daf4652e", "message": "Post-review updates"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/6ab815d453ef8eb730bf24595ed7717a4425e3ae", "message": "fix Minitest::Unit.after_tests warning"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/b604274d1b76633e588733f216760c075d647822", "message": "Merge branch 'master' into elireisman/es2-es5-percolator-shims"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/784d6c571de21100174e3431c455e7978fce6ef3", "message": "Fix doc-level unit tests that exercise the legacy _percolate APIs"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/29d84dddafdc1f5cf09bab48e0cba45034d1a75c", "message": "Update patch to use unsupported version exception from #161"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/95a76e4ba749b0936f0dc60057701d7224e4118c", "message": "Shim Percolator API for 2.x ~> 5.x upgrade transition"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/db7741b6ccc23c8f5d8d150b285348777c29636f", "message": "Merge pull request #165 from github/elireisman/es2-es5-version-check-2\n\n misc tweaks"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/19220be54e8c7d7643422398721f7640aec9e86d", "message": " shorten method name, whitespace fix, use cheaper version call/string comp internally for checks"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/e05d550cb15619f1cbf50ba3b853f2e7f9bf3cc6", "message": "Merge pull request #164 from github/elireisman/es2-es5-version-check\n\nElireisman/es2 es5 version check"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/1c2dd3fab2ca4ca5b5b4ff795f9f3857d5dfef5c", "message": " use client method in test suite too"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/b4c470b96e081f428ee197b080a653f1f651ca10", "message": " Add Elastomer::Client ES version check for 2x ~> 5x upgrade shim"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/151618968", "body": "unimportant nitpick, but `s/fitlers/filters` \u270f\ufe0f ", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/151618968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/152396695", "body": "This LGTM! Could also put the `rm Gemfile.lock` between `set +e ... set -e` block if missing file is the issue causing CI to stop but this seems safe, I like it! :shipit: ", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/152396695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/152468892", "body": "\ud83d\udc0c LGTM \ud83d\udc22 ", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/152468892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154453440", "body": "opops sorry pushed too soon - will update\r\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154453440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154798917", "body": "ah nice good to know, thanks! will update!\r\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154798917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154799039", "body": "ah good point will do", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154799039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154799140", "body": "excellent, will do!\r\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154799140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154799589", "body": "In my local env I found that the registered percolator queries weren't always visible when the section of the tests that submitted docs for percolation ran. Adding these made them work every time, but we could possibly do something more clever here to minimize refreshes-per-test? (`populate!` also calls a refresh etc.)", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154799589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154799735", "body": "ah excellent so that answers my question from above too - will update these calls", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154799735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154820964", "body": "that makes sense, will update!", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154820964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155128706", "body": "concise use of the splat here, I'm taking Ruby notes...!", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155128706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155284790", "body": "ah yeah I just did that for clarity of what I was changing but more concise is good I agree, will update!", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155284790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155292316", "body": "Yeah this was a wierd one!\r\n\r\nAfter adding the param merges I noticed in `byebug` that this `count` call was generating a bad output (injecting the `doc` into the params which goes to the `count` bulk line and a blank doc for the `doc` where `{:author => \"grantr\"}` should be.)\r\n\r\nThe API docs in the [code](https://github.com/github/elastomer-client/blob/master/lib/elastomer/client/index.rb#L496) indicate these were backwards and should match the format of the `percolate` (in which the 2nd arg params hash is optional).\r\n\r\nI see no uses of `multi_percolate` in `github/github` so I'm guessing this just silently passed it's test and went unused all this time? Line Git-blames to 2015, so a bit scary, but the output looks right now, and is [wrong on master](https://gist.github.com/2909d8aa40479a7cf0b424bb9304a0b2) so little creepy to flip it I agree, but seems legit? Happy to investigate further if anyone suspects I got turned around here and am being too brave :)", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155292316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155304094", "body": "ah crap yeah you got it thanks!", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155304094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155304471", "body": "Good call, will update now!\r\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155304471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155352636", "body": "Gah yes thanks!", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155352636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155577022", "body": "this makes sense :+1:", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155577022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155906119", "body": "Sounds good. I stole this from similar test cases that use it - can switch them all to `require_relative` if you like while I'm in there?", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155906119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155906154", "body": "Ah ok wasn't sure if empty block was OK here or if I should just have no `after` block at all? Will end up using this if I can get Painless scripting to work\r\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155906154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155906304", "body": "Thank makes sense, thanks, will switch to `Numeric` type check. Was hoping to do something that allows for `\"123\"` and `123` but not `\"joe\"` will think on it.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155906304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155906414", "body": "Ah I see thanks will do!", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155906414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/156455930", "body": "thanks!", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/156455930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/156998458", "body": "I think it's mapping back to one of [these](https://github.com/github/elastomer-client/blob/master/lib/elastomer/client/errors.rb#L76-L84)", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/156998458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "look": {"issues": [], "commits": [{"url": "https://api.github.com/repos/github/elastomer-client/commits/8dd237d932e1e5943c8e51c585276047d6b0e34c", "message": "Merge pull request #191 from github/look/3-0\n\nBump version to 3.0.0 and update CHANGELOG"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/65cfbb026546f5b419e24eb54e9a7319f466dd5e", "message": "Bump version to 3.0.0 and update CHANGELOG"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/6f36ae3bdc341e349b5eb2214d07ff74c8bbe16f", "message": "Merge pull request #189 from github/look/oops\n\nDon't use test helper methods in production code"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/b9869c9f2a0dd6bc9566ee285d969f3ca4328ada", "message": "Don't use test helper methods in production code\n\nOops, I used a method defined in test_helper.rb in this class. So of course all\nthe tests passed, but when I tried to use it in real code... \ud83d\udca3\ud83d\udca5"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/2215050e60f418ed361428e66f01ff7cb2c9a55e", "message": "Delegate to most appropriate delete_by_query implementation\n\nThis repurposes Elastomer::Client#delete_by_query such that it delegates to the\nmost appropriate delete by query implementation for the version of\nElasticsearch. The old delete_by_query method and class are now known as\napp_delete_by_query and AppDeleteByQuery, respectively.\n\nTests are updated for the API change and documentation has been added for the\nnew native_delete_by_query implementation and to warn about the behavior change\nin the parameters and response format."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/4b0b541e4be8335b1f483f333a8808d7322f4a23", "message": "First pass at implementing native _delete_by_query for ES 5+"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/be875199e0135e65317148fb929196c54d990e80", "message": "Update documentation to working link"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/30089a05f48e9e32722ff4310dd0a4bc3878513b", "message": "Merge pull request #185 from github/look/delete_by_query_es_5\n\nImplement native _delete_by_query for ES 5+"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/703b71c419c5cd29eb2819136c0f952e9f15a22e", "message": "Delegate to most appropriate delete_by_query implementation\n\nThis repurposes Elastomer::Client#delete_by_query such that it delegates to the\nmost appropriate delete by query implementation for the version of\nElasticsearch. The old delete_by_query method and class are now known as\napp_delete_by_query and AppDeleteByQuery, respectively.\n\nTests are updated for the API change and documentation has been added for the\nnew native_delete_by_query implementation and to warn about the behavior change\nin the parameters and response format."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/16d1dc5c53f5d2217dba400eebe7e49b5da665be", "message": "First pass at implementing native _delete_by_query for ES 5+"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/48736016ab88c0e37c1b546a43ce2aeeb2855463", "message": "Update documentation to working link"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/e3da1c2b068482453f0ed0f776a64160a8523fdc", "message": "Merge pull request #183 from github/look/require-es-5\n\nRemove allowed failures from ES 5.X Travis CI builds"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/ffc1b6cc5876af89d1c77d96011b9701176523fc", "message": "Remove allowed failures from ES 5.X Travis CI builds"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/d87081db651817aee36ed3c490fc15d46465de0a", "message": "Merge pull request #182 from github/look/indexing-directive-fail-fast\n\nFail fast on known invalid indexing directive fields"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/744332481320d1d31f78ecca70d553c120a50933", "message": "Improve documentation for indexing directives"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/8ba3061f52e1ec533c8b08d0a2d2b0db49a118e3", "message": "Add InvalidParameter exception for invalid indexing directives"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/d1271b45f01ceea31e3fcb7e8030d3d8b9e9de42", "message": "Fail fast on known invalid indexing directive fields\n\nPull the different \"special\" fields that affect indexing into VersionSupport in\norder to return a different Hash of parameter name/field name depending on the\nclient's version.\n\nIf a caller attempts to index a document with a known indexing directive field\nthat is not supported by the version of Elasticsearch, the client will fail fast\nand not allow the document to be indexed.\n\nFixes #178."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/9e96707e74ab890607f5cd795cf186a9af457898", "message": "Merge pull request #163 from github/juruen/fix-delete-by-query\n\nImplement scan through scroll plus sort by doc (fixes delete_by_query in 5.x)"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/ceba86c8509656908b79079c5418cecf84afdf0e", "message": "Merge branch 'master' into juruen/fix-delete-by-query"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/51831c0bf1646e5f6e152cf150f145564ee5792f", "message": "Merge pull request #175 from github/look/query-parse-exception\n\nHandle different query parsing exception between versions"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/90348ba968d701ee28bbc162f3ae255f9151828b", "message": "Merge pull request #174 from github/look/debugging-help\n\nAdd minitest-focus and pry-byebug to help with debugging"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/2c1f0aeb1d61f3938afbfa20539510d7f60289bb", "message": "Handle different query parsing exception between versions\n\nES 2.x uses query_parsing_exception and ES 5.x uses query_shard_exception or\nparsing_exception depending on where the parse error occurs (top-level keys\nerror out early, but a query string parse failure will happen on a shard and\nthrow a different exception).\n\nJava classes:\n\nhttps://github.com/elastic/elasticsearch/blob/v2.4.6/core/src/main/java/org/elasticsearch/index/query/QueryParsingException.java\n\nhttps://github.com/elastic/elasticsearch/blob/v5.0.0-alpha1/core/src/main/java/org/elasticsearch/index/query/QueryShardException.java\nhttps://github.com/elastic/elasticsearch/blob/v5.0.0-alpha1/core/src/main/java/org/elasticsearch/common/ParsingException.java\n\nI also removed an ES 1.x code path that is unnecessary now."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/95f59a878632273f0923ddb65b673be2d9ff2b50", "message": "Add minitest-focus and pry-byebug to help with debugging\n\nWith minitest-focus you can run a single test:\n\n```\nfocus\nit \"is failing for some reason\" do\n  ...\nend\n```\n\nWith pry-byebug you can get an interactive debugger. I use it during test runs.\n\n```\n... code ...\n\nbinding.pry\n\n... code ...\n```\n\nWhen `binding.pry` is reached, the interpreter will stop and drop you in a REPL."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/75e1d11ea6bddd44c3e68acacc9ad3ce7854fdb3", "message": "Merge pull request #162 from github/juruen/fix-scrollid\n\npass scroll_id as a json object"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/a8d42ff2b198422f88186de0c7637950223d2268", "message": "Merge pull request #173 from github/look/suggest-output\n\nHandle ES 5 removing `output` option for fields"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/1f1931b0f291050c57b0e8280bf9ae7ef1321d90", "message": "Merge pull request #169 from github/look/remove-deprecated-filtered-query\n\nRemove deprecated `filtered` query type"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/a9b0d7556cc1cd3a93f68856736427d82fd37332", "message": "Add new line\n\nCan I file a bug against GitHub's conflict editor? \ud83d\ude02"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/0d20e01f4024c844662cdde3e5ebe896da14b115", "message": "Merge branch 'master' into look/remove-deprecated-filtered-query"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/093a0f05ae8e25a2bc18008b5631b0517f99f55b", "message": "Handle ES 5 removing `output` option for fields\n\nThe `output` option for fields (to be used as the output for suggest queries)\nwas removed in 5.0. I split up the suggestion tests so there is one specifically\ntesting this behavior change.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/5.6/breaking_50_suggester.html#_simpler_completion_indexing"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/8489385ecee29bf02376f9d15c3e13c1bac16e08", "message": "Merge pull request #172 from github/elireisman/fix-warmer-test-warning\n\nFix a couple test warnings"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/e225cf32c6c46ebec2d38b040641e22caf81e4ed", "message": "Merge pull request #170 from github/look/no-filter\n\nChange test using deprecated `filter` API"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/2b9a0ef500ddd1064891042702169c88080ca64b", "message": "Change test using deprecated `filter` API\n\n`filter` was renamed to `post_filter` in 1.0(!) It has been removed in 5.0 so\nthis causes a test failure in the 5.x build."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/fddf0a4724365351816dbb9ad5631f3ffa915848", "message": "Remove deprecated `filtered` query type\n\nES 2.0 deprecated the `filtered` query in favor of `bool` queries. ES 5.0\nremoved `filtered` queries entirely. This removes the test code using\n`filtered`, except for the test of the query validator API."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/db3f5108720054aa90ff7fbf9e252dcd63439622", "message": "Merge pull request #166 from github/look/string-split\n\nAdd VersionSupport class for ES version differences"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/ece414fbd30192860f3e48d613cdb589ac14d158", "message": "Raise error when using VersionSupport with an unsupported version\n\nThis provides a way to explicitly document what versions we are targeting with\nthis library."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/9297f14b78ac92cb71fe915af41f5a0b6a2578a5", "message": "Move conditionals to intention-revealing methods\n\nI updated Elastomer::VersionSupport to take a `version` string instead of the\n`Elastomer::Client` instance and then removed the version conditionals from\n`Elastomer::Client` in favor of intention-revealing names everywhere (including\nthe tests).\n\nThis should make it easier to document and track version changes."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/eb8b040caf1598f48bfe374be3e38fe225f09866", "message": "Merge branch 'master' into look/string-split"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/5b1026d8ce2f0f3ed270397263c003fbe96156be", "message": "Merge pull request #160 from github/look/alias-compat\n\nNew assertions to document 2.x/5.x alias behavior"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/ef4a72c0f504286b93d0ccfc02f6747529754df8", "message": "Assert that the HTTP status is 404 as is documented in ES changelog"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/5c3b2bcb04dfc0275af225b5d364e87694d99156", "message": "Merge branch 'master' into look/alias-compat"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/d4f1ad1a0e39cf90289a644bc0d352418e039db5", "message": "Add VersionSupport class for ES version differences\n\nVersionSupport is pretty basic right now but the idea is to have a place to\nstash version-aware helpers. Currently it's used to provide a way to paper over\nthe difference between `text` and `keyword` fields in ES 5+ and `string` fields\nin ES 2.\n\nSupposedly ES 5 can take a legacy `string` field and do the right thing with it,\nbut there are severe limitations, such as not being able to handle an a `string`\nfield with `term_vectors` enabled. :(\n\nSee: https://github.com/elastic/elasticsearch/issues/21356"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/603cc4494ee37f5608bc64c61a9d8428bc70f3a9", "message": "Merge pull request #161 from github/look/deprecate-warmers\n\nDeprecate warmers"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/b91784636b2e9bdb731a1b94f2d7a7a48f6d8221", "message": "remove errant newline"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/ce9d1e52431b60fbd428349247df5e45d4dd9fa8", "message": "Do not allow Elastomer::Client::Warmer to be instantiated with ES 5"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/31871c0a521b80e5e81987092a84c4ab8003de73", "message": "Merge branch 'master' into look/deprecate-warmers"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/cbbce9131da2e7794ed47b7592bdec963961f6cb", "message": "Merge branch 'master' into look/deprecate-warmers"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/5efe6d4682c47d6179a7dea389acd734b4329337", "message": "Deprecate warmers\n\nWarmers have been deprecated as of ES 2.3 and removed from Elasticsearch as of\n5.0:\n\nhttps://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-warmers.html\nhttps://www.elastic.co/guide/en/elasticsearch/reference/5.0/indices-warmers.html\n\nI have marked Elastomer::Client::Warmer as DEPRECATED and skipped the tests when\nrunning under ES 5.x."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/93fd2c5c5ebbfe153d7301f7e37cfe94758be26a", "message": "New assertions to document 2.x/5.x alias behavior\n\nIn Elasticsearch 2.x, requesting an alias that does not exist will return an\nempty result. But in Elasticsearch 5.x, it will raise an error. This applies to\nboth full matches and wildcards."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/3a790e3e099fac5e63f21647e0a34986bd9b58ef", "message": "Merge pull request #154 from github/look/release-2-3-0\n\nBump version to 2.3.0"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/2b61e8c62b7427908734b980978b0eb2e620917a", "message": "Bump version to 2.3.0"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/d912da481e7db9ad0e629077ff1498c351e9ed7c", "message": "Merge pull request #151 from github/look/empty-id-index\n\nHandle difference in ES 5 bulk API behavior"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/e415962a765a9fefdb6521cf7d8b49419e8be65d", "message": "Merge branch 'master' into look/empty-id-index"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/aa7d1333a92ae7d4f5defb22384f853a246b9a3c", "message": "Merge pull request #153 from github/look/travis-wait\n\nMove build prerequisites to install phase"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/53be28fd3259bdf0c587a19ef2ef11462247b7f4", "message": "Move build prerequisites to install phase\n\nDoing multiple steps in the script phase was causing builds to not fail-fast if\nElasticsearch is not started.\n\nHowever, the bigger problem is that...Elasticsearch wasn't started. I moved the\ntest for that to run after installing gems so it will have more time to start\nup. I have not changed the wget arguments but I did use the long options so it's\neasier to understand. If necessary we can increase --waitretry or --tries."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/24dabe085240568f48eb2a3ef1fc4a0d66961bc4", "message": "Merge pull request #152 from github/look/fix-rm\n\nUse rm -f on Gemfile.lock"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/ecba00c889e38eec57b64b78e3cc7d8a32bf6778", "message": "Use rm -f on Gemfile.lock\n\nIf the Gemfile.lock WASN'T there, the build would fail. :(\nThis will ignore the error and allow the build to proceed."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/89296608e0c9f7cea7e3fd4ae248c927fb7adf9c", "message": "Merge branch 'master' into look/empty-id-index"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/9ae8d2bd7e7f5603f49bbb21fe7a3493051ee21d", "message": "Handle difference in ES 5 bulk API behavior\n\nI couldn't find this in the changelogs or API docs, but experimentally ES 5\nresponds to a bulk \"index\" operation with no ID with a \"index\" response instead\nof a \"create\" response.\n\nThis also adds awesome_print to help debug output during tests. When you need to\nuse it `require \"awesome_print\"` and then use `ap`."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/6123b614318fc210e3e5dacc394594cc8c896f3a", "message": "Merge pull request #150 from github/look/minitest-fail-fast\n\nAdd minitest-fail-fast"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/4186ae1eac32a9de998dbfff7158c8a6d1e339a1", "message": "Remove Gemfile.lock before building on Janky\n\nJanky builds can leave garbage behind. This is a better solution than checking\nin the Gemfile.lock because that is not recommended for gem development."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/a07ccdf417d25644b45a976447c4d437221e9852", "message": "Un-ignore Gemfile.lock\n\nThis will hopefully let CI work better."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/015999ba64abfbbad75cb3d20ea58e19e2dc89bf", "message": "Add minitest-fail-fast\n\nThis will allow halting tests on the first failure, which should make updating\nindividual failing tests on ES 5.6 a little easier and faster.\n\nTo run, use:\n\n    TESTOPTS=\"--fail-fast\" bin/rake\n\nIn order to do this, minitest had to be upgraded to 5+. I verified that all the\ntests continue to work on this version."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/b10a9774456fc90cf3b311c04b5df956cdab6fe8", "message": "Merge pull request #149 from github/look/port-config\n\nMake ES port configurable to support testing multiple versions"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/10a4c1e9958f0ae5217819772d9eb890e9e544cf", "message": "Make ES port configurable to support testing multiple versions\n\nThis adds an `ES_PORT` environment variable for tests that defaults to 9200 if\nnot present, so the behavior will not change if it's not set. However, having\nthis allows you to run multiple versions of Elasticsearch locally for testing.\n\nTo start a different version of Elasticsearch than your default, use:\n\n    bin/elasticsearch -E http.port=9400 -E transport.tcp.port=9500\n\nThen start the tests with:\n\n    ES_PORT=9400 bin/rake test\n\nOf course, you can use any port you like, but they must match, and you must set\nthe TCP transport port to be different than the default."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/d0215158c76d0c3e5cd2def856f2aa6029243c59", "message": "Merge pull request #144 from github/es-56\n\nBuild against Elasticsearch 5.6 on Travis CI"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/04a7215d9ff6c7c7a6b2818241c3ed0cc7fb9f14", "message": "Apparently, env for allow_failures must match _exactly_"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/363c1463c23d0300b869d91a3ca575f4eb4d2776", "message": "Allow failures for the ES 5.6.4 build"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/96eb6190ddd6719f4ff0fe1c4e0f19b69c2687cc", "message": "Attempt to configure a Travis build matrix including Elasticsearch 5.6"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/b174cae04d1696505e2d8efa4d69d48f8a7b2367", "message": "Merge pull request #141 from github/look/fix-travis\n\nAttempt to fix Travis build"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/b1f491957bd66a5b51dcf55008718742430b62b9", "message": "Use branch=master for CI badge\n\nThis more accurately reflects what you'll get if you clone the repo.\r\n\r\nWithout the branch=master parameter, it uses the last build from any branch."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/8c35753c0d58425761e1f7ddadea57d8a7713b23", "message": "Run `bundle install` before executing tests"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/c6f181e36bbaf1f99847c2624900a41a821578f8", "message": "Attempt to fix Travis build\n\n- Install Elasticsearch 2.3.5 manually in the container-based test run time\n- Wait for ES to start\n- Run tests"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/e4d441b4af63f93043be9dc1fc4bb4d06e612b7d", "message": "Merge pull request #140 from github/look/update-testing\n\nUpdate instructions for running tests and fix Janky build"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/ee04ce84e1bda59dcad2c762a6de66592034b17c", "message": "Use Ruby 2.3.3 for more modern Bundler"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/e019190f01e24104457a3f2938730c77c279d23c", "message": "Attempt to fix Jenkins build"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/d142289e75c8a3588d6cd975859d3988a66b1d88", "message": "Update instructions for running tests\n\nThere is no `testrb` in this repository so `script/test` does not work as\nadvertised. `rake test` is the current thing to use."}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/comments/25665344", "body": "\ud83d\ude31 ", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/25665344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/151577929", "body": "since you did the other hashes, should you do this one too?", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/151577929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154474250", "body": "I can remove it. I originally had some code here before I realized warmers were Just Gone in 5.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154474250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154723718", "body": "Yeah, good idea. Will update it.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154723718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154819297", "body": "Here's how I'd recommend doing this:\r\n\r\n1. Add a new method to `VersionSupport` called `percolator_type` with this code.\r\n2. Call it where ever you need the percolator type.\r\n\r\nThis way we can keep the conditional logic isolated.\r\n\r\nI thought about making `es_version_2_x?` and `es_version_5_x?` private to discourage their use outside of `VersionSupport` but I thought we might need them for something.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154819297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154819846", "body": "Since ES 2 has forcemerge and Elastomer is aliasing it to `optimize` as a courtesy for previous users of this library, I don't think this test needs to be conditionalized -- it should work on either ES version with either method call.\r\n\r\nYou can test both versions if you like.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154819846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155144646", "body": "Hah, I had to look up how to do multiple matches in a case statement, and it turned out splat is the way! https://bengribaudo.com/blog/2013/12/31/2530/ruby-case-testing-against-arrays-of-values", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155144646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155145650", "body": "s/Elasticserach/Elasticsearch/", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155145650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155145745", "body": "This is handy. I might switch to using this on Travis CI. I used `wget` with its built-in retries but it's a little opaque how long it will try for.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155145745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155102091", "body": "I just fixed this myself in a different branch because I didn't realize this PR was doing the same thing. FWIW, I'd like to get this merged ASAP to avoid wasted duplication.\r\n\r\nIMHO, changing input type of this method's parameters can be separated from fixing this bug, because that's enhancing the method's API which can be done later.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155102091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154479336", "body": "One thing I was thinking about with this change was to fail fast if the passed in query had a sort. What do you think? \r\n\r\nThe nice thing about that is if you were expecting sorting, it will complain loudly.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154479336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154722218", "body": "We have ActiveSupport so you could use `Hash#except` here.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154722218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154723082", "body": "Since query could be quite large I think this exception is going to be hard to read. I'd suggest something like:\r\n\r\n`Query cannot contain a sort (found sort '#{query[:sort]}' in query: #{query})`\r\n\r\nWith the query on the end.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154723082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154784192", "body": "Oops, I should have checked this more closely. Right now ActiveSupport is only a development dependency:\r\n\r\n```\r\n  spec.add_development_dependency \"activesupport\",      \">= 3.0\"\r\n```\r\n\r\nI think you should leave it as-is. Sorry for not taking the time to check this out more closely.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154784192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155145274", "body": "What's the deal with flipping these hashes in the params list? Does it represent an API change?", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155145274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155145434", "body": "FWIW, I'd probably call this like `add_to_actions(percolate: @params.merge(header))` since `#merge` returns a new Hash. It's personal preference, though.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155145434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155301602", "body": "Whoa crazy! Unfixed bug from way back. Since we're going to bump the major version anyway, I think a breaking change is OK. Can you add it to the CHANGELOG as part of this PR so we don't forget about it?", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155301602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155301942", "body": "Yeah this kind of thing is why I prefer parenthesis more often than not. Great commit message \ud83d\ude02 \r\n\r\nSorry to style snipe you but do you mind deleting the space after the parens here? ", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155301942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155309005", "body": "Can you make this 3.0.0 before merging? Thanks!", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155309005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155387962", "body": "I just learned about `%i` today. So nice!", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155387962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155388182", "body": "To be clear, these were the two parameters that were missing, right?", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155388182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155573907", "body": "Yeah, I agree. I'll create a new exception for this.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155573907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155615568", "body": "Do you mind updating this comment since it's now client-detected AND server response?", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155615568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155869732", "body": "You can use `require_relative` here. It's shorter and easier. ", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155869732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155869909", "body": "I think if you don't need this you should get rid of it. Also if you need to do nothing you can have an empty block, that's fine, you don't need `pass` like in Python.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155869909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155907966", "body": "You can use `Integer()` for that:\r\n\r\n```\r\nirb(main):001:0> Integer(\"1\")\r\n=> 1\r\nirb(main):002:0> Integer(\"1.0\")\r\nArgumentError: invalid value for Integer(): \"1.0\"\r\n\tfrom (irb):2:in `Integer'\r\n\tfrom (irb):2\r\n\tfrom /Users/look/.rbenv/versions/2.4.2/bin/irb:11:in `<main>'\r\nirb(main):003:0> Integer(1)\r\n=> 1\r\nirb(main):004:0> Integer(\"joe\")\r\nArgumentError: invalid value for Integer(): \"joe\"\r\n\tfrom (irb):4:in `Integer'\r\n\tfrom (irb):4\r\n\tfrom /Users/look/.rbenv/versions/2.4.2/bin/irb:11:in `<main>'\r\n```", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155907966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/156449288", "body": "looks like there's a extra `\\` in this comment", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/156449288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/157262583", "body": "kill this commented out line?", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/157262583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/157262619", "body": "I agree, these tests are nice!", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/157262619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "juruen": {"issues": [], "commits": [{"url": "https://api.github.com/repos/github/elastomer-client/commits/132aae59df9915707043c9a069918bdad41f9db6", "message": "Merge pull request #156 from github/juruen/optimize\n\nrename `Index#optimize` to `Index#forcemerge`"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/223113e81a9694bd15cb7315747751282bc033e1", "message": "do not test forcemerge conditionally\n\nInstead of testing Index#forcemerge for 5.x and\nthe aliased Index#optimize method conditionally,\ntest forcemerge and test alias actually exists."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/0f2ebe80601dcb9893d21ff45a502e8372812199", "message": "do not use tap and split into two lines instead"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/332ad181d88c0b75024908067378419136001dd0", "message": "add internal doc tag to private methods"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/7d0bc41f85d3a5f42406842440703cb5dd8ac1fa", "message": "use tap instead of ActiveSupport::Hash#except"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/1fade6dcf7903755953b2ddf101e95dedf0cdbf3", "message": "improve exception description"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/3640d194e3a0ece95d7914199d91e0e4876c7734", "message": "use Hash#except from ActiveSupport"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/a098e46cde092208f505e01833cbbcef451c464d", "message": "simplify bulk_params"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/e20ed54c58e13124543245a6e8c2e2de5cd30688", "message": "raise an exception if scan query contains a sort"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/89bdb9e85fe2c68184e88681c518d30d10a21443", "message": "pass analyzer as a json object\n\nIn ES 5.x, it's required to pass the analyzer as\na json object in the body and not as a URI parameter."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/e490116c1f1287c000555538be9d8e0c7c4027b5", "message": "Merge pull request #155 from github/juruen/fix-payloads\n\nUse `payloads` conditionally for 5.x compatibility"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/c8d8feb1ae576a94bd71b044966695fb8a6af074", "message": "Merge branch 'juruen/fix-scrollid' into juruen/fix-delete-by-query"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/e3d607e2d119449ffaf2a98dab0b532ef0e69e03", "message": "replace scan with sorted by _doc scroll\n\n- Do not use search_type=scan\n- Add sorting by _doc to query\n- Make sure that we are not using internal elastomer-client\n  parameters as URI parameters. ES 2.x doesn't care, but\n  ES 5.x is strict about it."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/c3830b2a86724df73c6d8b3c51bd4f010582093f", "message": "pass scroll_id as a json object\n\nPassing the scroll_id directly in the request body\nwithout being wrapped in a json object makes\nES 5.X unable to parse it."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/ae2cdc3e7ed760719749bc200571c5e4cc2287e3", "message": "use alias for optimize and forcemerge"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/0d1f9a2f42be11994705f0c74fefe1355383e4ba", "message": "remove change from changelog"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/fa24e1feb053a3889a0803d4d0c60cc85fe18329", "message": "[breaking] rename `Index#optimize` to `Index#forcemerge`\n\nThis follows the API change in ES."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/40e6a82fd616ec4efae18025d9ce2734f2b57853", "message": "Use `payloads` conditionally for 5.x compatibility\n\n5.x drops support for index-time payloads."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154093969", "body": "@TwP sure, just one more thing related to this that I added in the  PR  description. If we just add an alias, I believe this will fail with ES 2.0.x because the API renaming happened in 2.1.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154093969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154096328", "body": "Understood, thanks for the clarification! :)", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154096328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154103792", "body": "That's now changed as discussed. Also, I try to exercise the alias in the test.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154103792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154907132", "body": "That makes sense!", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154907132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155015452", "body": "@TwP I'm not sure I'm following. Is this what you are proposing?\r\n\r\n```ruby\r\n      def analyze( text, params = {} )\r\n        if text.is_a? String\r\n          body = {:text => text.to_s}.merge params\r\n          body.delete :index\r\n        else\r\n           body = text\r\n        end\r\n\r\n        response = client.get \"{/index}/_analyze\", update_params(params, :body => body, :action => \"index.analyze\")\r\n        response.body\r\n      end\r\n```\r\n\r\nI'm not sure if by current behavior you mean master's or this PR's :)", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155015452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155016377", "body": "Ideally, we would have the parameters that are sent as the request body in one variable, and other parameters in a separate variable. So we would achieve this while keeping the API backwards compatible.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155016377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155017177", "body": "The downside is to  end up with a slightly more confusing method.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155017177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155299364", "body": "@TwP IIRC, if we do that, when `text` is a string, the `analyze` parameters are passed in the URI, however you can't do that in  5.x, you need to pass them as a json object in the body.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/155299364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154380969", "body": "I took all the valid search parameters from the doc. I'm not entirely sure we need to add all of them though.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154380969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154632426", "body": "That makes a lot of sense. I understand you correctly you are proposing to raise an exception right away if the query contains a `:sort` already.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154632426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154783235", "body": "Thank you for letting me know! I'll change it right away.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154783235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154783280", "body": "Great suggestion, thanks.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154783280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154787844", "body": "@look I'm new to Ruby, so please, let me know whether this is how I'm supposed to use `ActiveSupport::Hash`. Thank you!", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/154787844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "wfarr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16478464", "body": "So I've been hacking on https://github.com/wfarr/stretch as an API only ES client.\u00a0\n\nIt's green field and doesn't have to worry about any upstream implementation details right now.\u00a0\n\nIt maps DIRECTLY to the API -- I'm even pondering doing validation of params on the library side rather than having ES just throw 404s and what all.\u00a0\n\nIt has 0 intention of ActiveRecord integration. IMO, that's a concern that should be wrapped up in a higher level library.\u00a0\n\nI have a lot of thoughts on the query and indexing API I still need to roll into stretch, but I'm really happy with the direction it's going.\u00a0\n\nI'd love to see Elastomer or another gem act as an abstraction for use with ActiveRecord/Rails on top of stretch some day.\n\nOn Tue, Apr 16, 2013 at 9:57 AM, Grant Rodgers notifications@github.com\nwrote:\n\n> This client may also be useful to look at: http://rubydoc.info/gems/elastic_record\n> \n> ## It's mostly written by the author of arelastic above. The repo is private and licensing status is nebulous, so I wouldn't use any of it directly.\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/github/elastomer/issues/1#issuecomment-16457090\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16478464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16483082", "body": "Absolutely.\n\nOn Tue, Apr 16, 2013 at 4:52 PM, David Graham notifications@github.com\nwrote:\n\n> It would be nice to use HTTP keep-alive and connection pooling in whatever client we choose.  I suspect the reason search is so slow right now is it creates a fresh connection for each request.\n> \n> ## ![image](https://f.cloud.github.com/assets/122102/389031/69b169b4-a6f0-11e2-8c49-3a027b75654e.png)\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/github/elastomer/issues/1#issuecomment-16479146\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16483082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16706768", "body": "IMO, http requests with bodies should be _a_ level of logging but likely not the default.\n\nAs far as logging request bodies goes, strip new lines and compress multiple spaces into a single space.\n\nOn Sat, Apr 20, 2013 at 6:20 PM, Tim Pease notifications@github.com\nwrote:\n\n> We need to add some logging to the `Client` class. For each request the client makes, we should output a detailed debug message to a logger of some sort. I really like how Tire does it; logging a curl command that you can copy/paste and use directly. Also, outputting the status code of the response would be good, too ...\n> \n> ```\n> [200] curl -XGET 'http://localhost:9200/index/_search' -d '...'\n> ```\n> \n> Not sure how to handle large bodies and what not. And I don't think we need to log responses.\n> \n> ## cc @github/search\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/github/elastomer/issues/5\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16706768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16821018", "body": "I'd much prefer to keep it in UNIX convention and offer info, error, debug, etc log levels.\n\nOn Mon, Apr 22, 2013 at 11:05 AM, Grant Rodgers notifications@github.com\nwrote:\n\n> ## Maybe the client can take a :verbose level or :trace => true option that increases the logging level to include requests and responses?\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/github/elastomer/issues/5#issuecomment-16808942\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16821018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dgraham": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16479146", "body": "It would be nice to use HTTP keep-alive and connection pooling in whatever client we choose.  I suspect the reason search is so slow right now is it creates a fresh connection for each request.\n\n![image](https://f.cloud.github.com/assets/122102/389031/69b169b4-a6f0-11e2-8c49-3a027b75654e.png)\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16479146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "jbarnette": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17495997", "body": ":heart:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17495997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17564416", "body": ":metal:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17564416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33639641", "body": "It seems weird to me to pull in an extra library and change the behavior of `String` itself when the question you're asking is \"is this name OK?\" If you wanted to be more obvious about intent you could do `Index.valid_name?(name)` or something.\n\nIt's not a huge deal either way, the world's not going to end if you use activesupport. But it may lead to frustrations and version mismatches with Rails apps that use elastomer in the future.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33639641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4096528", "body": "Big :thumbsdown: for this and all the dynamic cleverness below it. It's bad to grep, bad for other maintainers, and bad for you a few months from now.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4096528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4096543", "body": "I also don't think that it's worth breaking out multiple errors until you can make a compelling case - in production code - to do so. I think that just\n\n``` ruby\nmodule Elastomer\n  class Error < StandardError\n  end\nend\n```\n\ncould take you a long way.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4096543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4096575", "body": "`Bundler.require` is gross. But if you're going to use it, why is the multi_json require below necessary?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4096575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4096583", "body": "What's with these ending comments?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4096583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4097187", "body": "\"absence\"\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4097187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4120914", "body": "`\"~> 1.7\"`?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4120914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4120993", "body": "It's the current release.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4120993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "jch": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/22125040", "body": "cc @github/search \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/22125040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/22231580", "body": "I'll introduce you guys over email, and you can work it out from there?\n\nOn Tuesday, August 6, 2013, Tim Pease wrote:\n\n> We could both talk to him. Does he have a list of questions or some\n> general topics he would like to cover?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/github/elastomer/issues/22#issuecomment-22228582\n> .\n\n## \n\n-Jerry\n@whatcodecraves http://twitter.com/whatcodecraves\ngithub http://github.com/jch\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/22231580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/22285044", "body": "Introduced via email. Closing!\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/22285044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/28585711", "body": "@chrishunt just dealt with this for enterprise-web and Help in https://github.com/github/enterprise-web/pull/2120\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/28585711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/46486812", "body": "If we do open source it, how about a blog post?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/46486812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "spicycode": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/23012475", "body": "We're looking to use percolate to power parts of halp, so cc'ing @github/halp on this one.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/23012475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33851201", "body": ":metal:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33851201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": []}, "bleything": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/28545604", "body": "For the sake of completeness, the same effect can be achieved by making other applications specifically use a different adapter when creating the Elastomer client. But I kinda think that sucks, because then they're loading excon for no reason.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/28545604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "leongersing": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/30181779", "body": "Yikes! Now that's an id. :+1: \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/30181779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bhuga": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/32082605", "body": "![cheers breaking](https://f.cloud.github.com/assets/12676/1892922/83ad4066-7a5f-11e3-8926-8598b1f59c8b.gif)\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/32082605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/32314005", "body": "Evidently we're misusing it then. We'll investigate further.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/32314005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/32319569", "body": "I found our issue. We were trolled by a combination of a few things and some strange output of the request object yielded to `Faraday.post` (give it to `pp`--all fields are `nil`, even if they aren't). But this is not an actual issue.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/32319569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59828462", "body": "Dashes are covered. This will work. Remember to /deploy ci after setting\n\nOn Monday, October 20, 2014, Grant Rodgers notifications@github.com wrote:\n\n> @bhuga https://github.com/bhuga if we set\n> BUILD_ELASTOMER_CLIENT_RBENV_VERSION will it apply to a job called\n> elastomer-client? I wonder what happens to job names with dashes.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/github/elastomer-client/pull/79#issuecomment-59827812\n> .\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59828462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/61567322", "body": "> @github/ci is there a pattern for creating temporary directories to be used by a process owned by a non-jenkins user?\n\nThere is not. But can I suggest: if you are planning to open-source this, we may need to switch to travis or something. Janky is not secure (as you saw today!) for running code from public forks, so PR submissions won't get tested.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/61567322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/62217624", "body": ":heart_eyes:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/62217624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mattyoho": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/32083546", "body": "Awesome!\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/32083546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/55669156", "body": "I was wondering about having a small taxonomical divide &mdash; errors that are client / connection errors, and \"user\" errors that correspond to bad queries, etc.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/55669156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/55669345", "body": "> Maybe the Elastomer errors can inherit from the Faraday error classes?\n\nIf that was pursued it could be worth explicitly marching through a couple of versions that phases out that hierarchy, offering it in the intermediate to aid with migrating old code.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/55669345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/55674262", "body": "@grantr Word. I just like to say things in threads from time to time so that I give the appearance of having something to say. :grin:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/55674262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/55753059", "body": "Here's an example of looking to differentiate between classes of errors when querying Elasticsearch: https://github.com/github/halp/blob/master/app/models/stretchy/query.rb#L294.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/55753059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/56742333", "body": "@TwP Nice. :sunglasses: \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/56742333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/56896712", "body": "> I'm inclined to merge this in as-is and then update halp when this new code is pulled into the app.\n\nYup. :+1: \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/56896712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mislav": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/32312812", "body": "Faraday 0.8.x works on Ruby 2.1 without known problems.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/32312812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/32314280", "body": "I just glanced at the code and it seems your usage of Faraday is perfectly fine. What is the actual problem?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/32314280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/32314468", "body": "[You probably want](https://github.com/github/elastomer/blob/12ddf29840fbf920128b574dab764afce525833b/elastomer.gemspec#L21) to lock Faraday to `~> 0.8.9` so it doesn't use 0.9 which causes these deprecation notices.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/32314468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "andrew": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/32475039", "body": "I'm getting test failures when running `script/testsuite` as well:\n\n```\n  1) Error:\nElastomer::Client::Index#test_0006_lists all aliases to the index:\nElastomer::Client::Error: IndexMissingException[[elastomer-index-test] missing]\n    /Users/andrew/github/elastomer/lib/elastomer/client.rb:244:in `handle_errors'\n    /Users/andrew/github/elastomer/lib/elastomer/client.rb:171:in `request'\n    /Users/andrew/github/elastomer/lib/elastomer/client.rb:87:in `get'\n    /Users/andrew/github/elastomer/lib/elastomer/client/index.rb:152:in `get_aliases'\n    /Users/andrew/github/elastomer/test/client/index_test.rb:105:in `block (2 levels) in <top (required)>'\n\n  2) Error:\nElastomer::Client::Index::when an index exists#test_0003_closes:\nElastomer::Client::Error: IndexPrimaryShardNotAllocatedException[[elastomer-index-test] primary not allocated post api]\n    /Users/andrew/github/elastomer/lib/elastomer/client.rb:244:in `handle_errors'\n    /Users/andrew/github/elastomer/lib/elastomer/client.rb:171:in `request'\n    /Users/andrew/github/elastomer/lib/elastomer/client.rb:109:in `post'\n    /Users/andrew/github/elastomer/lib/elastomer/client/index.rb:81:in `close'\n    /Users/andrew/github/elastomer/test/client/index_test.rb:141:in `block (3 levels) in <top (required)>'\n\n  3) Failure:\nElastomer::Client::Index::when an index exists#test_0009_gets stats [/Users/andrew/github/elastomer/test/client/index_test.rb:172]:\nExpected nil (NilClass) to respond to #include?.\n\n68 tests, 176 assertions, 1 failures, 2 errors, 0 skips\n```\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/32475039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/32475151", "body": "Some more (possibly) helpful info:\n\n```\nAndrews-MacBook-Pro-2:elastomer andrew$ ruby -v\nruby 2.0.0p247-github6 (2013-06-27) [x86_64-darwin13.0.1]\n```\n\nand\n\n```\nAndrews-MacBook-Pro-2:elastomer andrew$ elasticsearch -v\nVersion: 0.90.5, Build: c8714e8/2013-09-17T12:50:20Z, JVM: 1.7.0_21\n```\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/32475151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33467123", "body": "Going to close this for now as it's really just a bandaid for me to get it installed.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33467123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ymendel": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33639638", "body": "Depending on what you're expecting, making your own `Object#blank?` is super simple.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/33639638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rsanheim": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/37679481", "body": "Related: https://github.com/lostisland/faraday/issues/316\nAlso: https://github.com/lostisland/faraday/issues/241\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/37679481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/37680924", "body": "I don't think persistent_excon is doing what we actually think it is:\n\n_excon (and probably others, too) support persistent connections, but the excon adapter completely ignores that and seems to create a new connection per request. Likewise excon provides trivial support for pipelining requests (as does net-http-pipeline), but there's no obvious faraday API for utilizing it._\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/37680924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59389958", "body": "Ancient history.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59389958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "technoweenie": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/39579366", "body": "I don't see Faraday adding some option to magically make all adapters persistent.  They need to be written to support it properly (like the `Net::HTTP::Persistent` adapter).  \n\nI do have dreams of dropping a lot of the Faraday middleware baggage and starting over... but that would basically kill the entire Faraday ecosystem.  I put in some work towards this, but even the tiniest changes cause developers lots of headaches.  Since I don't even use ruby or faraday much anymore, I'm finding it hard to get motivated about making big sweeping changes.\n\nI have considered writing a new faraday-inspired wrapper with completely reworked internals for how requests are made.  But I have a hunch that'll go over even worse than rewriting faraday.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/39579366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/comments/3303666", "body": "`Response#body`\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/3303666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/github/elastomer-client/comments/3303677", "body": "Oh I'm sorry, I misread.  No, we clobber the body currently.  This is something planned for Faraday v1.0 though... `response.request.body`.  Fuck that rack-style env hash.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/3303677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "dewski": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/45036913", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/45036913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/45122584", "body": "LGTM :+1: \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/45122584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59087363", "body": "```\nElastomer::Client::Snapshot#test_0008_deletes snapshots:\nElastomer::Client::ServerError: SnapshotCreationException[[elastomer-snapshot-test:elastomer-test] failed to create snapshot]; nested: FileNotFoundException[/tmp/d20141014-70786-1uf7mvj/snapshot-elastomer-test (Permission denied)];\n```\n\nLooks like there are some user permission issues on janky. Is this good to merge and tag at 0.4.1?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/59087363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/60459175", "body": ":metal: \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/60459175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/61141993", "body": ":+1: to index name defaulting to `nil`, before I was having to do a n+1 lookup to access each indexes settings and segments:\n\n``` ruby\nindices.collect do |index_name|\n  index = client.index(index_name)\n  settings = index.settings[index_name][\"settings\"][\"index\"]\n  segments = index.segments[\"indices\"][index_name][\"shards\"]\nend\n```\n\nWhich can be written like so with the change:\n\n``` ruby\nsettings = index.settings\nsegments = index.segments\n\nindices.collect do |index_name|\n  index_settings = settings[index_name][\"settings\"][\"index\"]\n  index_segments = segments[\"indices\"][index_name][\"shards\"]\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/61141993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/70914705", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/70914705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/70923344", "body": "Other than the simple doc fixes, looks good to me! Thanks for your quick work on scroll support.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/70923344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/89435759", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/89435759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/23334683", "body": "The docs are still using scan here.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/23334683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/23334711", "body": "The docs are still using scan here.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/23334711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "talniv": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/46478880", "body": ":+1: from us here.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/46478880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "keithduncan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47476385", "body": "I\u2019ve dug into the bulk API some more and this is not the correct solution yet. I still think that `Docs.index` and `Bulk.index` should provide a homogenous `params` API.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47476385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47522438", "body": "Fixed my original change to encode `:id` to `'_id'`, I\u2019ve also added a test for this behaviour too.\n\n/cc @TwP @grantr\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47522438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47564029", "body": "> On the other hand, the {:id => 'someid'} parameter in Docs is something Elastomer invented [...] it should be internally consistent.\n\nI have no dog in the extract-params-from-document fight, this is the part I\u2019m most interested in.\n\nI could add a further test that client code can create/index using a `Docs` or `Bulk` instance with the same params.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47564029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47783771", "body": "Tests are in, ready for another look.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47783771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47841168", "body": ":cool: shall I merge it?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47841168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47893867", "body": "Can we do a gem release (I\u2019m not sure how to do that) so I can pull these changes into https://github.com/github/haystack/pull/710 without vendoring?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47893867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47945539", "body": "Thanks @TwP :heart_eyes: \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/47945539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/14364305", "body": "That makes more sense :+1:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/14364305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/14364505", "body": "> I think this is what elastomer users are likely to expect: that the params hash is more of an override than the document hash.\n\nI\u2019d agree with this :+1:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/14364505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/14364656", "body": "These look good.\n\n> test override of keys in the document and params hash with the same name\n\nWill wait on further discussion on this before adding a test for this one.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/14364656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "jnunemaker": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/52969581", "body": "Typically clients talk to one or the other. What I've seen (not sure that I've done this) is having a different require for different versions and making one the default.\n\n``` ruby\nrequire \"elastomer\" # defaults to 1.0\n\n# or require it\nrequire \"elastomer/1.0\"\n\n# or require 0.9\nrequire \"elastomer/0.9\"\n\n# i've also seen env var \nENV[\"ELASTIC_SEARCH_VERSION\"] = \"1.0\"\nrequire \"elastomer\" # requires 1.0\n```\n\nIt seems rare to talk to both, but I don't know your use case. If that is common, then doing something like this makes sense where each explicit code path forks. In general I am not a fan of making a network call for stuff like getting a version. While it makes the code easier, most people know the version they are on and could supply it to the client (and it could be defaulted). I HATE network calls. :) I could see allow to supply the version to avoid the info network call hit even as the code is now.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/52969581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/16561514", "body": "I would be inclined to do if client.path_segment_state_filtering? or something to tie that logic up in the client.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/16561514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "shayfrendt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/58559090", "body": "> we should dynamically create the faraday wrapper errors based on what is defined in faraday. That gives us better forward and backward compatibility.\n\n@grantr Handled in aa95351 by @TwP and friends.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/58559090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/58942302", "body": "@TwP Thanks for fixing those :metal: \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/58942302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/comments/13362664", "body": "Can we get this new version pushed up to Rubygems? :smile: \n\n``` sh\n$ gem list -r elastomer-client\n\n*** REMOTE GEMS ***\n\nelastomer-client (0.6.0)\n```\n\ncc/ @grantr \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/13362664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/18666217", "body": "This will never bite us ever...\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/18666217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "rick": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/62837159", "body": "Heh, what does @nakajima know anyway?\n\nBut :+1: overall.\n\n:cow:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/62837159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "GregMefford": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/114677476", "body": "I called it `es_version_supports_update_mapping_with__all_disabled?` because it's not that Mapping Updates always fail, just that they fail when the `_all` field is disabled (as is the case in this test).\n\nI thought about just changing the test to not set the `_all` field to disabled, but felt like it's best to test how many production environments will really work, and capture the fact that this edge-case might hit someone in real life just as it has hit us in this test environment.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/114677476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "miguelff": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/156993809", "body": "Much better with an explicit signature! \ud83d\udcaf ", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/156993809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/156994484", "body": "Does this get a specific class matching the server's Java exception?", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/156994484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/157164799", "body": ":+1: Good coverage!", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/157164799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}}}}