{"_default": {"1": {"blondacz": {"issues": [{"url": "https://api.github.com/repos/generators-io-projects/generators/issues/59", "title": "Create zip function", "body": "", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/59/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/58", "title": "upgrade old libraries - JoodaTime etc.", "body": "", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/58/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/57", "title": "Upgrade gradle to 3.2.1", "body": "", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/57/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/56", "title": "Remove unnecessary generators and replace them with lambdas", "body": "", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/56/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/55", "title": "Create Parameters interface and its default implementation which would allow to set used Random implementation", "body": "", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/55/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/54", "title": "Add sample or generate method that will return Optional", "body": "", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/54/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/51", "title": "Create sync method on the Generator intreface that would make generation atomic operation", "body": "By default not all the generators are thread-safe. `sync` method would allow to guarantee that.\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/51/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/50", "title": "Review Generators utility class and add/remove methods", "body": "", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/50/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/38", "title": "Move building the project to gradle", "body": "Add gradle configuration to the project so it can be build with gradle.\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/38/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/37", "title": "Update README.MD with example of generating fixed width or delimited file", "body": "This example should be \"space-efficient\" so it does not retain many generated values in memory and therefore the approach is suitable also for generating large files.\n\n(Use Consumer? and UniqueGenerator with Bloom filter? )\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/37/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/36", "title": "Update UniqueGenerator so it offers option of using Bloom filter", "body": "UniqueGenerator should offer option of  using Bloom filter for determining uniqueness of the generated item. This would we useful when generating large number of items as it is space-efficient and would not  consume memory of the application. \n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/36/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/27", "title": "Update MemorizingGenerator to support memorizing for period of time", "body": "", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/27/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/11", "title": "Module for maven plugin that can generate Builders with generators", "body": "For classes in certain package/pattern?\nFlag whether to overwrite existing builders (defaulting to no)?\nPossible to use JSR-303 annotattions to configure generators?\nWhat would be eligibility criteria for creating a builder (more tha one constructor field)?\nShould builders be nested?\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/11/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/generators-io-projects/generators/commits/bee273970e638b4ed144337c442b795c816d6d61", "message": "Updated README with trunk build info on Travis CI"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/17b7fffc4eae153d74ae60efaf07a6708bcabcd6", "message": "Adde configuration for Travis CI"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/e860c67c0b41189df56d405ae337cacd7bd3473a", "message": "Added Travis CI build image"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/d5a16202d21409638f6a160590c26a802a73371d", "message": "Fixes #39 now returning also the last item in the collection"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/b415ef8501701b84676a814e0be790105b7dea9b", "message": "Changed example for TransformingGenerator to use Java 8 method reference"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/22e9b793c2db4e547feaf13cb843e856ee36acd1", "message": "Added gradle wrapper jar"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/386a34a9e44acdf264d8c0050a36bf70ec639da2", "message": "javadoc - replaced @see with @link"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/cc2dcb8989743e1175c8828db148618d675fcc1c", "message": "#38 - added gradle to project"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/b92407c392d01961c5eefc984241a446cb5937c9", "message": "Fixes #28 - added support for TimeZone to RandomJodaDateTimeGenerator"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/9e808c2fa2e43db1357d3f963d595e4aa0415e98", "message": "Improved testing of generation of the rich object"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/8a96dabe68ad039c843ffc08ec668fca41587b4e", "message": "#30 - Created CompositeGenerator"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/14ebbd36549b4b5e554a32a8c87abdd12c008dda", "message": "#32 - Created padding function that can be used with TransformingGenerator"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/e9e806ddf4992008ad7b6db79aeeb8e0cd4dc35d", "message": "Added information about 1.0 release and future 1.1 release"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/0e1b58b6e55712294bc7ae751792fc942aee9f9a", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/be07897d2222ec9a7f68e889805b5d821d9ffd0d", "message": "[maven-release-plugin] prepare release 1.0"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/f7709699d5dd9d2c7b2edfef1f1505e0a3ce8bc3", "message": "Fixed FluentGenerator.publishTo(...) so it returns FluentGenerator not just Generator"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/bae09cac97133754f8fb95f9171ebbe075bb686c", "message": "Added examples of transforming, filtering and FluentGenerator"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/9bbce6b45f9c96a2336474025bada4fcf1deccfe", "message": "Added info about release candidate 1.0-RC1"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/1f9d9a2edbeb6f43c495739bd58293675c34f0d3", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/225c0996010c7a3357556820026282fcfeabbb58", "message": "[maven-release-plugin] prepare release generators-1.0-RC1"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/52a5f7c341ff9e44c13f73207e2fbddb94bb1e9d", "message": "Added developers scm connection"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/173af9c3a7da0ad8ebec7e1ea03ce51dfd6c5869", "message": "Moved author javadoc tag"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/46c2eb84f3507bf7bb5ac712e7be0d25be2c2bcf", "message": "Specified maven-release-plugin version"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/04e17b08249f7bda31d2ab255834b5270e0cfa87", "message": "Changed snapshot version to 1.0"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/fbd78f3400c594ba5928ab96bf748114ad710d60", "message": "Removed unnecessary public modifier and made inner class final"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/d26e668be64c59b07e52ba54930b811a019f29af", "message": "Added self to javadoc"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/c51501e24631764bb9242609e5f1d2d39c37a8eb", "message": "Corrected typos in code"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/0d76df84b2d05bd2b9c6dd3d26e604f1d7f04b2e", "message": "Corrected typos in builder names"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/c1ef9b0ae2cdb6ed9c71cfb1a1f411b5bc46d53d", "message": "Added some testing benefits to preview"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/a057926ab67422c22501adf3591a91d94e07625a", "message": "Added basic usage examples"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/45e5a6106ee25b89e5013ef642af802cecfa44c6", "message": "Updated 0.1 release date"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/2c3b025a60fe971df77056494ae19de47fe1b6c2", "message": "Reformatted code and optimized imports"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/6d403e626faf3855bc174ee59ae41576013b14c7", "message": "Updated javadoc across the module"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/b74884a32feafddbbbb2276ad3cca751f3a9685a", "message": "#14 - Implemented LuhnCheckDigitFunction to be used with TransformingGenerator and provided convenience method for generating credit card/account numbers with check digit"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/f1e20f5155be2c689940fceef9519c56a935709c", "message": "Implemented ListeningGenerator"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/8402dd952648ea530a5f5b453a0cf6e256fe5f16", "message": "Replaced LowerCaseGenerator and UpperCaseGenerator with convenience methods in Generators that use TransformingGenerator and functions in MoreFunctions"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/2337e6a69a048855bb18edf9ecfac26706b8bb92", "message": "Implemented RandomPositiveLongGenerator"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/460a605947fd6c5386d8d7865fbfe12b9c83b329", "message": "Implemented BroadcastingGenerator and added support (publishTo method) to FluentGenerator"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/802854b7222437fbd39424589869a551b853ef0b", "message": "Renamed RandomDateTimeGenerator to RandomJodaDateTimeGenerator and added support for generating DateTimes in custom range as well as past and future DateTimes"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/5c3ef33dd6137836e4f90a1278f0eb77dbb3db6d", "message": "Added support for generating random dates in specified range"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/465929cdcb4895beffc639447ba19400cbab3c17", "message": "Removed date printing"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/b5421bfa12b3db60288c696b9ae524e02446f717", "message": "Added RandomDateTimeGenerator"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/c027cdeee55ce14a826d95ccee5d6da1fd9b91a3", "message": "Added InPredicate and introduced Predicates utility class"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/72802bf909642dceb16831a6691dc7a0f123efca", "message": "Added info about release plans"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/dd3df50972e9ccd9fbbf51747d8db3295d07ea90", "message": "Added TransformingGenerator and FilteringGenerator and supporting methods to FluentGenerator"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/92d10a8a37db28d98b24f51e87da9fd084271107", "message": "Added FluentGenerator"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/50bda6cd4e606f9b80ee2f2d73ca63e5c878b42f", "message": "Added RandomClosedRangeGenerator"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/838e61226183a320f1d4a7bac8924e80851fd49d", "message": "Added MemoizingGenerator and javadoc for some of the generators"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/c85d7013933767e9d3f281c07bb955e9867a13cd", "message": "Added javadoc"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/ab924e3ae4f70a1e081b79a1f31ac8a21a2eceb1", "message": "Added javadoc to UniqueGenerator"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/5b624ac5838e0d7a74f627ac22f88320c4ce260d", "message": "Added UniqueGenerator"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/eae852db632a59e7f4d1277ee966ea04e7b2d22a", "message": "1) Added FromBuilderGenerator and Builder<T> interface 2) added test scope to test dependencies"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/e6ffec4fcef7a5507d449c37c60f370cd5ae9d23", "message": "Added convenience method to Generators for generating integers n digits long"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/b8a62477ce2287338356ac4f2b1126956b91ad45", "message": "Added info how to get 0.1-SNAPSHOT"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/2c86feb790ee9720a5fde1f2ff19b1782e9a7afc", "message": "Added gpg plugin configuration and oss sonatype as parent"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/389344ac8f624ffa92da554afc98ee10298c46fe", "message": "Changed versionof parent to 0.1-SNAPSHOT as interface is not stable yet"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/f2e00544011505be7c47b9c88b0bee354ca3cdfa", "message": "Changed version to 0.1-SNAPSHOT as interface is not stable yet"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/0875937e564160524ea333a3747f15571a2878fa", "message": "Added very short summary"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/20d880467f18fb233df1b25ef495ffd634888971", "message": "Changed artifact url to point to github repository"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/8ab42c8819cda5e74dbe30916e2b24de92651e5d", "message": "Initial maven module commit"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/c56f4a31c7bd0b99f96420976604adeca422840d", "message": "Initial commit"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/29429323", "body": "Implemented\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/29429323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/29429403", "body": "Added as a convenience method to Generators utility class\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/29429403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/29429512", "body": "Implemented version that remembers generated value indefinitely and is thread-safe.\nMemorizing strategy is required  for memorizing for period of time\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/29429512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/29489746", "body": "Creaed closed range generator\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/29489746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31237083", "body": "That makes sense. I have some updates to RandomDateTimeGenerator stashed so I will do the renaming as well\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31237083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31237170", "body": "I was thinking about adding one that will expire after specified period. But maybe not necessary. \n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31237170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31237319", "body": "I wanted to make it clear that the API might not be fully stable.\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31237319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31237478", "body": "Maybe just sending the generated values to a Consumer<T> and one of the implementations can be wrapper around EventBus so it is more generic?\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31237478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31349556", "body": "I have just double checked and have not found any such contract for Iterable or Iterator. Actually only immutable implementations should behave like that. For instance ArrayList is Iterable but can be modified between iterations. CopyOnWriteList is even better example.  \n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31349556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31349760", "body": "Renamed RandomDateTimeGenerator to RandomJodaDateTimeGenerator\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31349760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31350008", "body": "Created new Issue #27 for enhancing the generator\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31350008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31350120", "body": "Implemented but without TimeZone support. New ticket #28 created for TimeZone support \n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31350120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31350214", "body": "DateTime can be transformed to Date. So there is no need for special generator. TransformingGenerator or FluentGenerator can be used to do the transformation.\nWon't implement.\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31350214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31350878", "body": "There is already TransformingGenerator and upper case and lower case generators are transforming generators. Maybe convenience method named transform in Generators and toLowerCase and toUpperCase functions in new utility class MoreFunctions could be enough. \n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31350878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31421073", "body": "This is probably not necessary as TransformingGenerator can be used to convert positive values.\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31421073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31422286", "body": "Implemented BroadcastingGenerator and introduced Consumer<T> interface\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31422286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31422308", "body": "Replaced implementation of Upper/LowerCaseGenerators with composition of TransformingGenerator and Functions to do the case conversion \n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31422308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31422333", "body": "That seems reasonable. It would probably make also sense to split MorePredicates,MoreFunctions and Generators utility classes so they follow the split.\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31422333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31431201", "body": "Implemented ListeningGenerator\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31431201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31563811", "body": "I think you are right. Renaming generator to i.e. SimpleListetingGenerator would not say much about its functionality and this approach can lead to explosion of the ListeningGenerator classes. So I would say API similar to JodaTime is probably good solution.  \n\nCurrent implementation is already used for generation of the child rows in multipart fixed-width files and works as a kind of exchange of the keys between parent and child rows.  \n\nThe null value returned can either desired behaviour and described in the API or IllegalStateException can be thrown.    \n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31563811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31592740", "body": "It is event possible to just say that the code is licensed under this license however recommended by github is to use full license so I would go for that.\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31592740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31592867", "body": "Apache license is very similar but more explicit and there is no need to include license owner or year. Google is using it for its projects. And on top of it explicitly forbids to use  contributor names. See http://choosealicense.com/licenses for comparison.\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31592867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31592896", "body": "Can be composed. So closing\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31592896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31724134", "body": "The initial version of the plug-in: \n- developed on feature branch so it is possible to release 1.1 if required\n- should be compatible with maven 3.x (including new 3.1.1)\n- name of the plug-in: generators-maven-plugin?\n- builder methods should  be just name of the property(next versions could provide configurable property specifying the method naming style)  ie. \n\n```\n    public AccoutBuilder accountNumber(AccounNumber accounNumber)\n```\n- basic implementation does not need to instantiate fields in generators. Further strategies can change the behaviour\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31724134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/32013173", "body": "'''Iterable''' just returns '''Iterator''' so I don't see that much difference there. I believe the \"immutability\" is function of the backing implementation  which may or may not provide it.  I think expectations (incorrect) usually go further and if the new iterator is retrieved it is expected to return same objects. When you iterating over some set of elements you should know what are you iterating over . I don't mean implementation but nature of the elements.\n\nPotentially instead of returning '''Iterable''' we can return '''List''' or '''Set''' that will be lazily populated but even then they will keep generated elements unnecessarily in the memory which might be problem for large '''Iterables''' \n\nI guess we need third person to decide this. For now I have just added warning to a javadoc.\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/32013173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/32108237", "body": "Examples added to README.md\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/32108237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/32135708", "body": "Done but only locally.\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/32135708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/32135775", "body": "Keeping simple so no changes\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/32135775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/32155215", "body": "That's a nice candidate for new generator. It probably does not belong to the core module. We need to come up with some name for the new module or modules \n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/32155215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/32178270", "body": "Changed the snapshots and released first candidate as 1.0-RC1\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/32178270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/67140222", "body": "Scheduled for Release 1.1\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/67140222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/102305716", "body": "I have created new branch for generators 2.0 that will support and use features from java 8:\n-  it may introduce some changes that won't be backwards compatible \n  - replacing guava functional interfaces with Java 8 ones (`Function`, `Predicate`. `Consumer`, ...)\n  - deprecate/remove `TransformingGenerator`, `FluentGenerator` as they will be replaced by introducing default and static methods on Generator interface\n  - move JodaTime generators out of the module and introduce new Java 8 dates generators\n- enhance Generators interface to support `map`, `flatMap`, `foreach`,  `take`, `peek`,  ... using default methods on Generators Interface\n- Support conversions from/to Java 8 `Stream` and `Supplier`\n- Support runtime configuration of the backing java `Random` generator\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/102305716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/102307622", "body": "With introduction of Java 8 in generators 2.0 this issue can be revisited. Maybe Java 8 Optional might be good choice for generators that could generate nulls.I.e. Scala returns `Try[T]` from `Future[T]`. \nMaybe default method on `Generator` interface can make the generator \"safe\" by always returning an Optional[T]?\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/102307622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/103389219", "body": "Created #40 to support map, flatMap and filter operations\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/103389219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/103800785", "body": "Created #41 to support conversion to/from Stream\nCreated #42 to support conversion to/from Supplier\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/103800785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/104313073", "body": "Won't implement as same can be achieved with lambdas and map or flatMap on Generator interface which will be supported by  generators-2.0\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/104313073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/105530011", "body": "I would argue that there is nothing in the Generator spec. that says the values have to be Random. There are some Generators in the core that are sequential. \nAlso as generators now support converting from the Stream or Supplier those can produce sequential values as well.\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/105530011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/105533037", "body": "Generators do not need to be finite for skip method to be useful and are not always random (some of them are sequential or are backed by Stream or Supplier). Not all combinations of the chaining are valid but same applies to methods on Java `Stream<T>` or Scala `Stream[T]` implementations where ordering of the methods is important. They also support these methods but are sometimes non-finite.\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/105533037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/105813353", "body": "We are currently using some generators that are sequential. \n`takeWhile` is generalization of the the take/limit. I admit there is no easy way of implementing it as so far the only implementation I can think of is based on pre-fetching next value to find out whether generation should end which requires all the actions in the upstream chain (towards the 'root' generator)  to be without side effects as otherwise some actions may be executed after the end of the generation (similar to some guava implementations).\n\nAlso takeWhile does not need act on the generated values. It can be used to stop generation on some external conditions like time (stop generation after certain time) so it is valid in certain cases even for random generators\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/105813353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/105816034", "body": "No it does not. \nIdea is that it would be available only on the `FiniteGenerator` interface that is returned by certain methods on the Generator interface like `limit(int)` or `takeWhile(Predicate)`.\nInspired by the **Step Builder Pattern**\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/105816034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/113143966", "body": "Implemented by pre-fetching next value\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/113143966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/113893274", "body": "So one of the possible APIs may look like this:\n `Generator<Optional<Integer>> generator = integersAndNulls.optional();`\nQuestion is whether it is necessary as it can be easily implemented with map method like this:\n`map(Optional::ofNullable)`\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/113893274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/114057864", "body": "GeneratorIterable has been removed from branch generators-2.0 \n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/114057864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/114058661", "body": "I think builder approach with default methods on the generator might work\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/114058661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/114059138", "body": "Builder methods like singleValue(),  `initialValue(x)`,  `blocking()` could be used to define its behaviour\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/114059138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/114059325", "body": "Gradle support is finihsed however realease configuration not.\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/114059325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/156862850", "body": "Not going to be part of the core module. \n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/156862850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/266902280", "body": "Nulls might not be the only scenario where `Optional` can be returned. In cases where there is no value to return instead of throwing exception the generator can return none. ", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/266902280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": []}, "blissd": {"issues": [{"url": "https://api.github.com/repos/generators-io-projects/generators/issues/35", "title": "Upgrade to Java 8", "body": "Generators.io currently support Java 7 and above.\n\nNow that Java 8 has been released, should that become the baseline Java release?\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/35/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/33", "title": "Should generators be allowed to return null?", "body": "Currently, generators are allowed to return null. Should this be allowed? Would there be an advantage to shunning null and requiring generators to return Optional<Something> instead? Users of generators can always convert an absent optional to null if nulls are required.\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/33/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/29", "title": "ListeningGenerator needs better thought out behaviour", "body": "The ListeningGenerator has several undefined behaviours:\n- If a value hasn't yet been consumed, then next() returns null, which cannot be distinguished from consuming a null value and returning that.\n- If multiple values have been consumed, then only the most recent is returned by next(), meaning some values will be lost.\n\nSome suggestions to address this:\n- next() could block until at least one value has been consumed.\n- next() could throw an exception if no values have yet been consumed.\n- consume(...) could throw an exception if more than one value is consumed.\n- Generator could maintain a queue of generated values, and pop and return items in next().\n- Generator could maintain a collection of generated values, and return a randomly selected value on next().\n\nI don't know what behaviour you intended, or what it should really do, but I don't think the current implementation is it.\n\nAll the behaviours could probably be justified in different contexts, so maybe there should be multiple listening generators, or a builder to correctly configure one.\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/29/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31219919", "body": "Whoops, I see I looked at the wrong pom and didn't spot the configuration\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31219919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31220561", "body": "Renamed Predicates to MorePredicates.\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31220561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31220578", "body": "InPredicate deleted. MorePredicates.in(...) is now a varargs wrapper to Guava's Predicates.in(...).\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31220578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31227626", "body": "Added two generators: UpperCaseGenerator and LowerCaseGenerator.\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31227626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31227935", "body": "Added CyclicGenerator.\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31227935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31229572", "body": "If you've added the generator, can this issue be closed?\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31229572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31229661", "body": "Would it make sense to post generated values to a Guava EventHub?\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31229661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31229726", "body": "Would it make sense to have some packages under io.generators.core? Suggestions:\n\nstring\nnumeric\ntemporal\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31229726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31231821", "body": "Correction, the LICENSE file contains an appendix describing how to use the Apache License. I think the contents of the LICENSE file could be shortened to:\n\nCopyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n```\n   http://www.apache.org/licenses/LICENSE-2.0\n```\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31231821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31232116", "body": "Added RandomBooleanGenerator.\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31232116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31234931", "body": "Added SequentialIntegerGenerator and SequentialLongGenerator.\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31234931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31237884", "body": "I understand that. But I see little difference between going from 0.1 to 1.0 and from 1.0 to 2.0.\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31237884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31237904", "body": "Perhaps that can be a separate ticket?\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31237904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31372773", "body": "True, it is not a written contract, but it is what you would expect if handling an iterable.  I suggest following the principle of least surprise.\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/31372773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/39664113", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/39664113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/105435261", "body": "Does this really make sense if generators produce values that are usually random?\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/105435261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/105435417", "body": "Does this makes sense, if values are usually random and generators are infinite?\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/105435417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/105436212", "body": "Does this make sense on something produces an infinite sequence of values?\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/105436212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/105530480", "body": "True... but I think it is fair to say that many if not most would be random.\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/105530480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "skate056": {"issues": [], "commits": [{"url": "https://api.github.com/repos/generators-io-projects/generators/commits/0aac017e2bd588aa12a3f534f8cd9273c3efe0ef", "message": "Add IPv4 and IPv6 address generators"}, {"url": "https://api.github.com/repos/generators-io-projects/generators/commits/d69c55ac9ce440362fce2e1898c21495839ad9de", "message": "Update gitignore for gradle"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jinbal": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/39666112", "body": "I've just started using Generators in a project eBay - so if you do upgrade and break backward compatibility, remember to bump the major version number please!\n\nHope you're all well btw!\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/39666112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/39712333", "body": "We could change the source to java 8 but compile and publish artifacts with target 1.7.\nIn maven compiler plug-in:\n\n``` maven\n<configuration>\n          <source>1.8</source>\n          <target>1.7</target>\n</configuration>\n...\n```\n", "reactions": {"url": "https://api.github.com/repos/generators-io-projects/generators/issues/comments/39712333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}}}}