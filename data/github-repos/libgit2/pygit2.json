{"_default": {"1": {"onovy": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/765", "title": "big endian: FAIL: test_no_context_lines (test.test_patch.PatchTest)", "body": "Hi,\r\n\r\ntest.test_patch.PatchTest.test_no_context_lines fails on archs mips, s390x, hppa, powerpc or ppc64. I think all of them are \"big endian\". This bug is new in 0.26.3, because before this version test_no_context_lines test didn't exists.\r\n\r\n```\r\nFAIL: test_no_context_lines (test.test_patch.PatchTest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/<<PKGBUILDDIR>>/test/test_patch.py\", line 196, in test_no_context_lines\r\n    self.assertEqual(context_count, 0)\r\nAssertionError: 1 != 0\r\n```\r\n\r\nSee: https://buildd.debian.org/status/package.php?p=python-pygit2\r\n\r\nThanks for fixing.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/626", "title": "Test test.test_refs.ReferencesTest is failing when timezone is Etc/GMT-14", "body": "```\nTZ=\"/usr/share/zoneinfo/Etc/GMT-14\" python2.7 setup.py test -v\n\n...\nFAIL: test_set_target_with_message (test.test_refs.ReferencesTest)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/<<PKGBUILDDIR>>/test/test_refs.py\", line 122, in test_set_target_with_message\n    self.assertEqualSignature(list(reference.log())[0].committer, sig)\n  File \"/<<PKGBUILDDIR>>/test/utils.py\", line 124, in assertEqualSignature\n    self.assertEqual(a.offset, b.offset)\nAssertionError: 0 != 840\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/5dcc793aff84dafe2d8226bcaaa3ba25f99ac290", "message": "Make build reproducible\n\nhttps://wiki.debian.org/ReproducibleBuilds"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/50c0569cf0090139ccde82959a0ac1607f4719f1", "message": "Fixed typo"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Nukesor": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/764", "title": "tree.diff_to_tree results in many unnecessary sys calls", "body": "Hi!\r\n\r\nI'm currently working on a git scanner with a very high throughput for my bachelor thesis.\r\nAs the scanner runs with 8 threads, I'm observing severe slowdowns on my server.\r\nAfter running the command with `strace` i noticed that there are a whole lot of unnecessary syscalls issued on each diff. It looks like  for each file in the diff, there is one `stat` for the actual file, two `access` for `/etc/gitattributes` and two `stat` for `/info/attributes`. \r\n\r\nThis results in a lot of syscalls and slows things down significantly as the program seems to wait for those calls most of the time. The repositories are located inside `/tmp` and cleaned after each scan. There are no signs of RAM shortage as there are about 8GB+ unused space in the `/tmp` fs.\r\n\r\nThe repositories are cloned `bare`. The actual function call is:\r\n```\r\ndiff = commit.tree.diff_to_tree(commit.parents[0].tree)\r\nself.commit_stats[commit.hex] = {\r\n    'additions': diff.stats.insertions,\r\n    'deletions': diff.stats.deletions,\r\n}\r\n```\r\n\r\nI'm not sure if this is the right place or if this is rather a libgit2 issue.\r\nAnyway I'm happy for any help as I'm not that familiar with the pythin-C binding mechanics.\r\n\r\nRelevant strace output example:\r\n```\r\n[pid 32220] stat(\"src/main.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/main.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/states/Level.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/states/Level.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/main.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/main.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/states/Level.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/states/Level.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n```", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jnareb": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/752", "title": "Performance: speed of getting `blob.data` for large files (as compared to GitPython)", "body": "I have compared speed of equivalent to `git show <revision>:<pathname>` in both pygit2 and GitPython (the pure-Python implementation). In all other cases that I have tested pygit2 is faster, but for very large files `git show` / `git cat-file` equivalent is slower.\r\n\r\npygit2 code:\r\n``` python\r\nblob = repo.revparse_single(commit + ':' + path)\r\nresult = blob.data\r\n```\r\n\r\nGitPython code:\r\n``` python\r\nblob = repo.rev_parse(commit + ':' + path)\r\nresult = blob.data_stream.read()\r\n```\r\n\r\nDo you have any ideas why pygit2 is slower here?\r\n\r\nP.S. would it be difficult to add streaming access?", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/750", "title": "Suggestion: better handling of `repo.set_head(pygit2.Commit)`", "body": "I have tried to emulate `git checkout --detach <commit>` in pygit2, to create **detached HEAD** checkout, and I did come up with the following rough equivalent (though the following does not uses transactions as git does):\r\n\r\n``` python\r\nrev = repo.revparse_single(commit_name)\r\nrepo.checkout_tree(rev)\r\nrepo.set_head(rev.id)\r\n```\r\n\r\nHowever when I tried to use simply `repo.set_head(rev)`, I got the following error:\r\n\r\n```\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-35-9612528ec0ac> in <module>()\r\n----> 1 repo.set_head(rev)\r\n\r\n/usr/lib/python2.7/dist-packages/pygit2/repository.pyc in set_head(self, target)\r\n    293\r\n    294         # if it's a string, then it's a reference name\r\n--> 295         err = C.git_repository_set_head(self._repo, to_bytes(target))\r\n    296         check_error(err)\r\n    297\r\n\r\nTypeError: initializer for ctype 'char *' must be a cdata pointer, not _pygit2.Commit\r\n```\r\n\r\nIt would be nice if `pygit2.Commit` object was automatically peeled, but if it is decided to be not good idea, then what it needs is more user-friendly error message than the one above.\r\n\r\n-----\r\npygit2 0.26.0", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/738", "title": "`repo.diff(c1, c2, flags=pygit2.GIT_DIFF_FIND_RENAMES)` reverses diff", "body": "First complaint is that there is no documentation and no examples of using `flags` (not `flag` as in description of parameters) with `Repository.diff`: http://www.pygit2.org/diff.html . Therefore I am not sure if I am using the API correctly.\r\n\r\nSecond, using `flags=pygit2.GIT_DIFF_FIND_RENAMES` for some reason **reverses** diff.\r\n\r\nCompare \r\n```\r\n>>> repo = pygit2.Repository('path/to/repo')\r\n>>> repo.diff('HEAD^', 'HEAD', flag=pygit2.GIT_DIFF_FIND_RENAMES).patch`\r\n```\r\nwith \r\n```\r\n>>> repo.diff('HEAD^', 'HEAD').patch\r\n```\r\n\r\n-----\r\n\r\npygit2.LIBGIT2_VERSION: '0.26.0'\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pypingou": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/747", "title": "Broken GIT_SORT_TIME ?", "body": "This is a script to reproduce the behavior I'm seeing:\r\n````\r\n#!/usr/bin/env python\r\n\r\nimport tempfile\r\nimport time\r\nimport os\r\n\r\nimport pygit2\r\n\r\npath = tempfile.mkdtemp(prefix='pygit2_test_')\r\nrepo = pygit2.init_repository(path)\r\n\r\nauthor = pygit2.Signature('Alice Author', 'alice@authors.tld')\r\ncommitter = pygit2.Signature('Cecil Committer', 'cecil@committers.tld')\r\n\r\n# Commit #1\r\n\r\n # Create a file in that git repo\r\nwith open(os.path.join(path, 'sources'), 'w') as stream:\r\n    stream.write('foo\\n bar')\r\nrepo.index.add('sources')\r\nrepo.index.write()\r\n\r\nparents = []\r\n# Commits the files added\r\ntree = repo.index.write_tree()\r\nprint(repo.create_commit(\r\n    'refs/heads/master',  # the name of the reference to update\r\n    author,\r\n    committer,\r\n    'Commit #1',\r\n    # binary string representing the tree object ID\r\n    tree,\r\n    # list of binary strings representing parents of the new commit\r\n    parents,\r\n))\r\ncommit1 = repo.revparse_single('HEAD')\r\ntime.sleep(0.1)\r\n\r\n# Commit #2\r\n\r\nparents = [commit1.oid.hex]\r\n\r\nsubfolder = os.path.join('folder1', 'folder2')\r\nos.makedirs(os.path.join(path, subfolder))\r\n# Create a file in that git repo\r\nwith open(os.path.join(path, subfolder, 'file'), 'w') as stream:\r\n    stream.write('foo\\n bar\\nbaz')\r\nrepo.index.add(os.path.join(subfolder, 'file'))\r\nrepo.index.write()\r\n\r\n# Commits the files added\r\ntree = repo.index.write_tree()\r\nprint(repo.create_commit(\r\n    'refs/heads/master',  # the name of the reference to update\r\n    author,\r\n    committer,\r\n    'Commit #2',\r\n    # binary string representing the tree object ID\r\n    tree,\r\n    # list of binary strings representing parents of the new commit\r\n    parents\r\n))\r\ncommit2 = repo.revparse_single('HEAD')\r\ntime.sleep(0.1)\r\n\r\n\r\n# Commit #3\r\n\r\nparents = [commit2.oid.hex]\r\n\r\n# Update the sources file\r\nwith open(os.path.join(path, 'sources'), 'w') as stream:\r\n    stream.write('foo\\n bar\\nbaz!')\r\nrepo.index.add('sources')\r\nrepo.index.write()\r\n\r\n# Commits the files added\r\ntree = repo.index.write_tree()\r\nprint(repo.create_commit(\r\n    'refs/heads/master',  # the name of the reference to update\r\n    author,\r\n    committer,\r\n    'Commit #3',\r\n    # binary string representing the tree object ID\r\n    tree,\r\n    # list of binary strings representing parents of the new commit\r\n    parents\r\n))\r\ncommit3 = repo.revparse_single('HEAD')\r\n\r\n\r\nprint('')\r\nmain_walker = repo.walk(commit3.oid.hex, pygit2.GIT_SORT_TIME)\r\ncommits_msgs = []\r\nwhile 1:\r\n    try:\r\n        com = main_walker.next()\r\n        print(com.message)\r\n        print(com.oid.hex)\r\n    except StopIteration:\r\n        break\r\n````\r\n\r\nIt gives me the following output:\r\n````\r\n7335ffcfdb2039a9631ef5c891ec6a12feaeb342\r\n50ea7d4691ee78b60323ac1d4174a6609190fbaf\r\n47e61d2eaa8c5d3d1562475a43aa99c0e7fb9b8a\r\n\r\nCommit #3\r\n47e61d2eaa8c5d3d1562475a43aa99c0e7fb9b8a\r\nCommit #1\r\n7335ffcfdb2039a9631ef5c891ec6a12feaeb342\r\nCommit #2\r\n50ea7d4691ee78b60323ac1d4174a6609190fbaf\r\n````\r\n\r\nThe first three lines are the commit as they are committed.\r\nThe following lines are the commit message and hash as ``repo.walk(commit3, pygit2.GIT_SORT_TIME)`` is returning them.\r\n\r\nSomething looks broken to me :)", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/747/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6791670", "body": "hm, actually even without the 2to3 steps, `python3 setup.py build` fails with the same error message.\n\nThis is actually while trying to build a RPM of pygit2. I'll see if I can find a way around it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6791670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6802412", "body": "On Fri, 2012-07-06 at 03:05 -0700, cholin wrote:\n\n> Everythink works fine on my machine and as well on the testing ones ( http://travis-ci.org/#!/libgit2/pygit2 ). I think the problem here is a unicode issue. Default encoding for `open()` is platform-dependent. So maybe your default encoding is not utf-8 and then it will mess everythink up.\n> You could try to change your local encoding to utf8 or change the line 132 in `setup.py` to the following:\n> \n> ```\n> with open('README.rst', 'r', encoding='utf8') as readme:\n>     long_description = readme.read()\n> ```\n\nOk so using:\n  sed -i -e \"s|open('README.rst')|open('README.rst', 'r',\nencoding='utf8')|\" setup.py\nbefore:\n  CFLAGS=\"$RPM_OPT_FLAGS\" %{__python3} setup.py build\n\nThen the rpms build all fine.\n\nThanks for your help,\nPierre\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6802412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/54345958", "body": "Shouldn't it be something like `six.string_types` here? Because this will surely not work/break on py3\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/54345958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "Bysmyyr": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/732", "title": "hunk.final_committer.name not work if email is empty", "body": "Hi, I found this error:\r\n\r\nif email is missing, it gives error \"Signarure cannot have an empty name or email\"\r\n\r\nin libgit2 Slack channel we discuss it and end up that in `wrap_signature` pygit2 creates new signature where email cannot be empty. It maybe should use `git_signature_dup` instead?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yan12125": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/731", "title": "Document KeypairFromAgent", "body": "I didn't know that feature until I check codes from both libgit2 and pygit2. I think it would be helpful to have that documented in http://www.pygit2.org/remotes.html.\r\n\r\nGoogling reveals another confused developer like me :-) https://github.com/saltstack/salt/issues/40008#issuecomment-286434931", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/649", "title": "Intermittent exception: 'NoneType' object has no attribute 'git_index_free'", "body": "About one in ten my script raises the following exception:\n\n```\nException ignored in: <bound method Remote.__del__ of <pygit2.remote.Remote object at 0x7ff050e8b908>>\nTraceback (most recent call last):\n  File \"/usr/lib/python3.5/site-packages/pygit2/remote.py\", line 334, in __del__\nAttributeError: 'NoneType' object has no attribute 'git_remote_free'\nException ignored in: <bound method Index.__del__ of <pygit2.index.Index object at 0x7ff0568dd898>>\nTraceback (most recent call last):\n  File \"/usr/lib/python3.5/site-packages/pygit2/index.py\", line 69, in __del__\nAttributeError: 'NoneType' object has no attribute 'git_index_free'\n```\n\nI haven't found a good way to reproduce it.\n\nMy script is at: https://github.com/yan12125/aur/blob/master/scripts/local_to_remote.py\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "santublr": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/729", "title": "pygit2 installation error. ", "body": "This issue which I'm reporting may be repetative one, but after googling and trying all the options I'm still not able to load the right pygit2.\r\n\r\npygit2 version 0.22.0\r\nlibgit2 version 0.22.0\r\npycparse version 2.18\r\ncffi version 0.9.2\r\nPython Version 3.3.2\r\nOS CentOS release 6.8 (Fina\r\n\r\n\r\npython3.3 -c 'import pygit2'\r\nTraceback (most recent call last):\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 147, in _typeof\r\n    result = self._parsed_types[cdecl]\r\nKeyError: 'int (*git_repository_create_cb)(git_repository **out,const char *path, int bare, void *payload)'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 126, in _parse\r\n    ast = _get_parser().parse(csource)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/c_parser.py\", line 152, in parse\r\n    debug=debuglevel)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 331, in parse\r\n    return self.parseopt_notrack(input, lexer, debug, tracking, tokenfunc)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 1199, in parseopt_notrack\r\n    tok = call_errorfunc(self.errorfunc, errtoken, self)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 193, in call_errorfunc\r\n    r = errorfunc(token)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/c_parser.py\", line 1761, in p_error\r\n    column=self.clex.find_tok_column(p)))\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/plyparser.py\", line 66, in _parse_error\r\n    raise ParseError(\"%s: %s\" % (coord, msg))\r\npycparser.plyparser.ParseError: :71:7: before: git_repository_create_cb\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pygit2-0.22.0-py3.3-linux-x86_64.egg/pygit2/__init__.py\", line 134, in <module>\r\n    @ffi.callback('int (*git_repository_create_cb)(git_repository **out,'\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 297, in callback\r\n    cdecl = self._typeof(cdecl, consider_function_as_funcptr=True)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 150, in _typeof\r\n    result = self._typeof_locked(cdecl)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 135, in _typeof_locked\r\n    type = self._parser.parse_type(cdecl)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 275, in parse_type\r\n    ast, macros = self._parse('void __dummy(\\n%s\\n);' % cdecl)[:2]\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 128, in _parse\r\n    self.convert_pycparser_error(e, csource)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 157, in convert_pycparser_error\r\n    raise api.CDefError(msg)\r\ncffi.api.CDefError: cannot parse \"int (*git_repository_create_cb)(git_repository **out,const char *path, int bare, void *payload)\"\r\n:71:7: before: git_repository_create_cb\r\nroot@sc-p4-gitfusion-2017:/scm/p4/bin.gitfusion/2017.1 # export LD_LIBRARY_PATH=$LIBGIT2/lib\r\nroot@sc-p4-gitfusion-2017:/scm/p4/bin.gitfusion/2017.1 # export LIBGIT2=/usr/local\r\nroot@sc-p4-gitfusion-2017:/scm/p4/bin.gitfusion/2017.1 # python -c 'import pygit2'\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\nImportError: No module named pygit2\r\nroot@sc-p4-gitfusion-2017:/scm/p4/bin.gitfusion/2017.1 # python3.3 -c 'import pygit2'\r\nTraceback (most recent call last):\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 147, in _typeof\r\n    result = self._parsed_types[cdecl]\r\nKeyError: 'int (*git_repository_create_cb)(git_repository **out,const char *path, int bare, void *payload)'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 126, in _parse\r\n    ast = _get_parser().parse(csource)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/c_parser.py\", line 152, in parse\r\n    debug=debuglevel)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 331, in parse\r\n    return self.parseopt_notrack(input, lexer, debug, tracking, tokenfunc)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 1199, in parseopt_notrack\r\n    tok = call_errorfunc(self.errorfunc, errtoken, self)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 193, in call_errorfunc\r\n    r = errorfunc(token)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/c_parser.py\", line 1761, in p_error\r\n    column=self.clex.find_tok_column(p)))\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/plyparser.py\", line 66, in _parse_error\r\n    raise ParseError(\"%s: %s\" % (coord, msg))\r\npycparser.plyparser.ParseError: :71:7: before: git_repository_create_cb\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pygit2-0.22.0-py3.3-linux-x86_64.egg/pygit2/__init__.py\", line 134, in <module>\r\n    @ffi.callback('int (*git_repository_create_cb)(git_repository **out,'\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 297, in callback\r\n    cdecl = self._typeof(cdecl, consider_function_as_funcptr=True)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 150, in _typeof\r\n    result = self._typeof_locked(cdecl)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 135, in _typeof_locked\r\n    type = self._parser.parse_type(cdecl)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 275, in parse_type\r\n    ast, macros = self._parse('void __dummy(\\n%s\\n);' % cdecl)[:2]\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 128, in _parse\r\n    self.convert_pycparser_error(e, csource)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 157, in convert_pycparser_error\r\n    raise api.CDefError(msg)\r\ncffi.api.CDefError: cannot parse \"int (*git_repository_create_cb)(git_repository **out,const char *path, int bare, void *payload)\"\r\n:71:7: before: git_repository_create_cb\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/556", "title": "pygit2 (Ver 0.23.0) cmake libssh2 not found", "body": "Hello,\n\nThe libssh2 not found error found during cmake. The libssh2 package is available on the system.\n\nrpm -ql libssh2\n/usr/lib64/libssh2.so.1\n/usr/lib64/libssh2.so.1.0.1\n/usr/share/doc/libssh2-1.4.2\n/usr/share/doc/libssh2-1.4.2/AUTHORS\n/usr/share/doc/libssh2-1.4.2/COPYING\n/usr/share/doc/libssh2-1.4.2/ChangeLog\n/usr/share/doc/libssh2-1.4.2/NEWS\n/usr/share/doc/libssh2-1.4.2/README\n/usr/lib/libssh2.so.1\n/usr/lib/libssh2.so.1.0.1\n/usr/share/doc/libssh2-1.4.2\n/usr/share/doc/libssh2-1.4.2/AUTHORS\n/usr/share/doc/libssh2-1.4.2/COPYING\n/usr/share/doc/libssh2-1.4.2/ChangeLog\n/usr/share/doc/libssh2-1.4.2/NEWS\n/usr/share/doc/libssh2-1.4.2/README\n\n[root@xxxx build]#  cmake .. -DCMAKE_INSTALL_PREFIX=/opt/perforce/demo_setup/git-fusion/libexec/\nCMake Error at CMakeLists.txt:16 (CMAKE_POLICY):\n  Policy \"CMP0015\" is not known to this version of CMake.\n\n-- REQUIRED_VARS  (missing:  HTTP_PARSER_INCLUDE_DIR HTTP_PARSER_LIBRARY)\n-- http-parser was not found or is too old; using bundled 3rd-party sources.\n-- checking for module 'libssh2'\n--   package 'libssh2' not found\n-- LIBSSH2 not found. Set CMAKE_PREFIX_PATH if it is installed outside of the default search path.\n-- Configuring incomplete, errors occurred!\n\nThx,\nSantosh\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nicolasdespres": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/727", "title": "create_commit does not update the reflog", "body": "Hi,\r\n\r\nI have noticed that v0.26.0 of `create_commit` does not create an entry in the reflog for the initial commit of a branch.\r\n\r\n```python\r\n/private/tmp\r\n4> mkdir d\r\n\r\n/private/tmp\r\n5> cd d\r\n/private/tmp/d\r\n\r\n/private/tmp/d\r\n6> import pygit2\r\n\r\n/private/tmp/d\r\n7> repo = pygit2.init_repository(\".\")\r\n\r\n/private/tmp/d\r\n8> repo.config[\"user.email\"] = \"foo@bar.com\"\r\n\r\n/private/tmp/d\r\n9> foo = repo.create_blob(\"foo\")\r\n\r\n/private/tmp/d\r\n10> builder = repo.TreeBuilder()\r\n\r\n/private/tmp/d\r\n11> builder.insert(\"foo\", foo, pygit2.GIT_FILEMODE_BLOB)\r\n\r\n/private/tmp/d\r\n12> tree_id = builder.write()\r\n\r\n/private/tmp/d\r\n13> repo.create_commit(\"refs/test\", repo.default_signature, repo.default_signature, \"test\", tre\r\n13: e_id, [])\r\n13> f610cdd139fab6f738dfaff52839a552a6b8bb9e\r\n\r\n/private/tmp/d\r\n14> git reflog refs/test\r\n  File \"<ipython-input-14-afa1bc8c3c03>\", line 1\r\n    git reflog refs/test\r\n             ^\r\nSyntaxError: invalid syntax\r\n\r\n\r\n/private/tmp/d\r\n15> !git reflog refs/test\r\n\r\n/private/tmp/d\r\n16> !git --no-pager reflog refs/test\r\n\r\n/private/tmp/d\r\n17> repo.references[\"refs/test\"].log\r\n17> <function Reference.log>\r\n\r\n/private/tmp/d\r\n18> repo.references[\"refs/test\"].log()\r\n18> <_pygit2.RefLogIter at 0x10db93bc0>\r\n\r\n/private/tmp/d\r\n19> list(repo.references[\"refs/test\"].log())\r\n19> []\r\n```\r\n\r\nHowever it works it is not an initial commit.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/726", "title": "revparse_single does not understand date", "body": "Hi,\r\n\r\n`revparse_single` does not support date parsing:\r\n\r\n$ git rev-parse 'HEAD@{2 weeks ago}'\r\neebac5f1c21ec78e098a8f7b60facd726b30844e\r\n$ python3 -c 'import pygit2; pygit2.Repository(\".\").revparse_single(\"HEAD@{2 weeks ago}\")'\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\nKeyError: 'HEAD@{2 weeks ago}'\r\n\r\nI am using version 0.26.0", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "white-gecko": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/725", "title": "Support for Custom Merge drivers?", "body": "Is there any way of using a custom merge driver in pygit2? I've see this for libgit2: https://github.com/libgit2/libgit2/pull/3564 is this also possible to be used with pygit2 as it is?", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/39a50d9d048a0abc5fd5ded6be4339818f169144", "message": "Update git-clone-ssh.rst\n\nAs I understand the `allowed_types` it is a bitmap which should be compared using a logical AND. Further the options `GIT_CREDTYPE_SSH_KEY`and `GIT_CREDTYPE_USERNAME` are defined in `pygit2.credentials`."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "smelnikov": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/724", "title": "How can I get current Tag reference?", "body": "First, I checkout TAG from my repo. \r\nThen I need resolve name of this TAG. But I can't get relevant reference object (HEAD is detached).\r\nPlease tell me, how this can be done?", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Parakleta": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/723", "title": "GIT_SORT_TOPOLOGICAL is document backwards.", "body": "The documentation states that parents come before children, but actually children come before parents.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/686", "title": "`git_commit_amend` not available.", "body": "Additionally `Repository.create_commit` fails if the first parent is not the tip of the branch being updated, so the behaviour cannot be fudged by making a new commit with the tip's parent.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/680", "title": "`peel` arguments inconsistent.", "body": "`peel` is implemented twice, once in `object.c` and once in `reference.c`.  In the first it requires an argument and in the second it provides a default argument of `None`.  This is confusing when branches can be 'default' peeled but tags cannot.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ashmastaflash": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/722", "title": "Support `git bundle create`", "body": "Ideal form would be to have a class method for Repository that accepts a single argument for the output file path.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pklim101": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/717", "title": "How to solve 'LIBSSH2 not found.'?", "body": "when I execute the command 'cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local/libgit2',\r\nI have the output bellow\uff1a\r\n\r\n> \r\n\r\n-- Checking for module 'libcurl' \r\n--   Found libcurl, version 7.15.5  \r\n-- Could NOT find HTTP_Parser (missing: HTTP_PARSER_INCLUDE_DIR HTTP_PARSER_LIBRARY)   \r\n-- http-parser version 2 was not found; using bundled 3rd-party sources.  \r\n-- Checking for module 'libssh2'  \r\n--   No package 'libssh2' found  \r\n-- LIBSSH2 not found. Set CMAKE_PREFIX_PATH if it is installed outside of the default search path.\r\n\r\nthere are two module not fund, How can I solve it? thanks!", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tongtongtongtong": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/716", "title": "pygit2.GIT_DIFF_IGNORE_WHITESPACE result Inconsistent", "body": "git command:\r\ndiff --git a/Makefile b/Makefile\r\nindex bb20e89..c25d045 100644\r\n--- a/Makefile\r\n+++ b/Makefile\r\n@@ -3,4 +3,5 @@ install:\r\n \r\n clean: \r\n        rm -rf tgit-statistics \r\n+       \r\n qed \r\n\\ No newline at end of file\r\n\r\npygit2:\r\nrepo.diff(from_id, to_id, cached=True, flags=pygit2.GIT_DIFF_IGNORE_WHITESPACE, context_lines=3, interhunk_lines=3)\r\n\r\ndiff --git a/Makefile b/Makefile\r\nindex bb2..c25 100644\r\n--- a/Makefile\r\n+++ b/Makefile\r\n@@ -5,0 +6 @@ clean:\r\n+", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jbaiter": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/712", "title": "`Repository.diff(cached=True)` does not list diffs for indexed files", "body": "This is with pygit2 version 0.24.0.\r\n\r\n```\r\n$ git init\r\nInitialized empty Git repository in /tmp/minimal/.git/\r\n$ touch foo\r\n$ git add foo\r\n$ git commit -am \"First commit\"\r\n[master (root-commit) 3551222] First commit\r\n 1 file changed, 0 insertions(+), 0 deletions(-)\r\n create mode 100644 foo\r\n$ echo \"foobar\" >> foo                                                                                                                                                                                                                                                                                 \r\n$ git add foo\r\n$ git diff --cached\r\ndiff --git a/foo b/foo\r\nindex e69de29..323fae0 100644\r\n--- a/foo\r\n+++ b/foo\r\n@@ -0,0 +1 @@\r\n+foobar\r\n$ python\r\n>>> import pygit2\r\n>>> repo = pygit2.Repository('.')\r\n>>> list(repo.diff(cached=True))\r\n[]\r\n```", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tmr232": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/709", "title": "Type Annotations", "body": "I was thinking of adding type annotations to some of the APIs to assist IDEs in parsing them and providing useful completion.\r\n\r\nSince it currently does not exist in the code, I preferred asking before coding.\r\nDue to supporting both Python 2 and 3, I think the way to do it is to use syntax present [here](http://mypy.readthedocs.io/en/latest/python2.html).\r\n\r\nThere are some drawbacks:\r\n1. Adding a new dependency - the `typing` package\r\n1. Annotation comments are not the prettiest thing\r\n\r\nBut if we only the do the required minimum, we get more clarity when using the library, and can also use `mypy` as a verification step for new code.\r\n\r\n@jdavid what is your opinion?", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/699", "title": "libssh2", "body": "I think it would be good to add libssh2 to the builds to provide SSH support.\r\nOn Windows it takes quite some work to get it working (no success yet on my side). Haven't tried other OSs yet.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/3818555e1404167d67de6d05cc8f4a0c9ec09854", "message": "Added Repository.references accessor."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/320ee5e733039d4a3cc952b287498dbc5737c353", "message": "Added GIT_BRANCH_ALL"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d6716e035a5656f0b85612954af3247ac2427a61", "message": "Updated docs to match new branches API."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d14438725e71fad97b7111d2e23253e0cc2374c3", "message": "Added basic Repository.branches implementation."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/784583d21edeb54f11ba4f5f2a9d7260931dd296", "message": "Fixed indentation"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/b81810e9cb212e42523bd4ffa0539c78808bbe79", "message": "Better error messages for opening repos.\n\nCloses #645."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/7ee851273a708cc564d556cb49c73015050a0eb4", "message": "Added explicit check for `path = None` in `init_repository`\n\nCloses #688."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/5c061cbb0a11e68cc36def504d8d74c10c255df0", "message": "Remove unused code\n\nRemoved a chunk of code from `checkout` that did nothing, but had a bug.\r\nWhen checking out from a branch-less state (like the state when a repository is first initialized) the code failed.\r\nThe failure was due to trying to get some properties of the current branch, which were never used in the code."}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/21637701", "body": "This closes #669 ", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/21637701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/109998951", "body": "Isn't there a `GitError` exception we can use?\r\nAnd, do we have a style guide? I saw #238, but since it's open sinse 2013 I didn't really know what to make of it.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/109998951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/109999545", "body": "Oh, I just realized we have different indentation inside the same function... Fixing that now.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/109999545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/112051757", "body": "This does not work. `lookup_branch` can take `GIT_BRANCH_REMOTE` or nothing.\r\nSee:\r\nhttps://github.com/libgit2/libgit2/blob/master/src/branch.c#L353\r\nhttps://github.com/libgit2/libgit2/blob/master/src/branch.c#L31\r\n\r\nSo as far as I can tell, this is needed.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/112051757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "FabriceSalvaire": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/704", "title": "How to implement (un)staging and query staging status ?", "body": "Not a bug, but I cannot figure out how to achieve this using pygit2 / libgit. Does someone have clues about this ?\r\n\r\nI tried to get information from this page http://www.pygit2.org/working-copy.html and I found https://github.com/libgit2/libgit2sharp/blob/master/LibGit2Sharp/Commands/Stage.cs and https://github.com/libgit2/libgit2/issues/3632\r\n\r\nI want to implement staging feature to my code review tools: https://github.com/FabriceSalvaire/CodeReview\r\n\r\n**Is http://stackoverflow.com/questions/tagged/libgit2 the right place to discuss on pygit2 ???**", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/705", "title": "Added recipe for git-add and git-reset (staging)", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/114576000", "body": "**Fix:** `tree_entry.name -> path` to get path relative to the repository", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/114576000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "niven823": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/702", "title": "Repository.update_submodules() got Request failed with status code: 401", "body": "I thought update_submodules()'s requires adding parameter of callbacks for RemoteCallbacks.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ignatenkobrain": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/693", "title": "[RFE] rebase routines", "body": "libgit2 supports rebasing, but pygit2 doesn't expose it. It would be very useful if it could.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/630", "title": "add support for depth in clone_repo", "body": "Very often I use `--depth 1` to not clone full repo, would be great to have it implemented.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/616", "title": "pygit2.write_archive() looses executable permissions", "body": "I have repo with some files with executable flag.\n\nUnfortunately, after `pygit2.write_archive()` it looses it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/fd9a39a91b11964b8b88fdb4caf51ffdc559a6fa", "message": "repository: decode() linkname\n\nReference: https://github.com/libgit2/pygit2/issues/620\nSigned-off-by: Igor Gnatenko <ignatenko@redhat.com>"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/270dad8cd39b0f1dbb34256b389eb1bb458779de", "message": "repository: SYMTYPE is constant in module tarfile, not in any class\n\nReference: https://github.com/libgit2/pygit2/issues/618\nSigned-off-by: Igor Gnatenko <ignatenko@redhat.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wme-at-contact-de": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/687", "title": "Possible encoding problem with Repository.file_status", "body": "If I try to get the status of a single file using Repository.file_status, I get a \"KeyError\" when the path contains non-ASCII characters like \"\u00e4\" or \"\\u00A0\" (non breaking space\").\r\n\r\nThe problem seems to be that \"Repository_status_file\" uses \"py_path_to_c_str\" to convert the path. Which encodes the path using the Python file system encoding.\r\n\r\nIf I encode the string myself using \"utf-8\", it works fine.\r\n\r\nNot sure whether this is a libgit2, pygit2 or Windows problem...\r\n\r\nUsing pygit-0.24.2 on Python 3.5, running on Windows 7.\r\nsys.getfilesystemencoding() returns \"mbcs\".\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "catsclaw": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/684", "title": "repo.status() appears to be broken?", "body": "I'm running `repo.status().items()` in a pre-commit hook using the `-a` flag (`git commit -a -m \"Test\"`), and I get a result that looks like this:\r\n\r\n`[('config/git_hooks/pre-commit', 256), ('bin/run_flake8', 256)]`\r\n\r\nIf I run `git status` in that same process, I get:\r\n\r\n    On branch ops_1331_fix\r\n    Your branch is ahead of 'origin/ops_1331_fix' by 2 commits.\r\n      (use \"git push\" to publish your local commits)\r\n    Changes to be committed:\r\n      (use \"git reset HEAD <file>...\" to unstage)\r\n    \r\n\t    modified:   bin/run_flake8\r\n\t    modified:   config/git_hooks/pre-commit\r\n\r\nIn other words, pygit2 is reporting those files as not being staged, and git is reporting them as being staged. Why the discrepancy?", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "4s1": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/683", "title": "DoS on wrong password", "body": "As discussed in upstream bug report saltstack/salt#38230 pygit2 tries to authenticate indefinite with wrong credentials instead of failing after two consecutive failures with same authentication token as specified by https://tools.ietf.org/html/rfc7235#section-3.1\r\nPossible a libgit2 Bug if it's reproducable with other language bindings.\r\n\r\n\r\n## Testcase:\r\n### nginx dummy server configuration\r\nThis is just a stub configuration, no real repository needed\r\n````\r\nlocation ~ /git(/.*) {\r\n        add_header \"WWW-Authenticate\" \"Basic realm=\\\"Closed Areas\\\"\" always;\r\n        return 401;\r\n    }\r\n````\r\n### test client\r\n````python\r\n#!/bin/python2.7\r\n\r\nimport pygit2\r\n\r\nusername = 'dummyUser'\r\npassword = 'dummyPassword'\r\ncredentials = pygit2.UserPass(username, password)\r\ncallbacks = pygit2.RemoteCallbacks(credentials)\r\npygit2.clone_repository(\"http://git.demo.local/git/test.git\", \"test.git\", bare=True, callbacks=callbacks)\r\n\r\n````", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hmrodrigues": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/679", "title": "ValueError on branch.remote_name", "body": "Hey,\r\nWhen I try to do Branch.remote_name it gives _ValueError: Reference 'refs/heads/master' is not a remote branch._\r\n\r\n```\r\nrepository = pygit2.Repository(self.path)\r\nbranch_name = repository.head.name.split('/')[-1]\r\nbranch = repository.lookup_branch(branch_name, pygit2.GIT_BRANCH_LOCAL)\r\nself.branch = branch.branch_name\r\nself.remote = branch.remote_name\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kszucs": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/678", "title": "In-memory repository", "body": "Does libgit2 support in-memory stores? Any thoughts on embeddable databases like rocksdb or leveldb?\r\n\r\nI'm calculating a lot of blames which seems io heavy (using ramdisk makes it an order of magnitude faster).\r\n\r\nI can implement if someone would provide guidance.\r\n\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/6402302002db3affd5966de486aeb527d59aff14", "message": "fixed cached memory tests"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/77f05856455341fdaa6433db83e6022177775c05", "message": "Added mwindow_mapped_limit, cached_memory, enable_caching, cache_max_size, cache_object_limit options"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nlfiedler": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/676", "title": "Finding alternate object directories on open", "body": "Git 2.11 introduced a change such that incoming objects in a push are sequestered in an \"alternate object directory.\" It appears that libgit2 supports opening repositories with these directories, taking certain environment variables into consideration, but the latest pygit2 does not invoke the appropriate function (`git_repository_open_ext()` from what I can tell). Am I correct in this assessment? Is there a way to work around this with the current code, or is a patch necessary?\r\n\r\nIf that didn't make sense, let me explain at a higher level: I'm writing a receive hook in Python and using pygit2 to examine the incoming commits. With versions of Git prior to 2.11 this is not a problem since the incoming objects are stored directly in the odb. However, now they are located elsewhere and pygit2 does not see them.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sylva91": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/674", "title": "delete a branch with a specific profile", "body": "i'm using a set of 2 profiles : one is allowed to clone and delete and one is only allowed to clone.\r\n\r\nThe problem is : i can't find a way to give delete_branch function a profile as a parameter \r\n\r\nis there a way to bypass it ? ", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jouvin": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/673", "title": "0.24: branch.remote doesn't return a Remote object", "body": "It seems that the remote property of a branch doesn't return a `Remote` object. As a consequence it is not possible to query its `url` property (if any). The only workaround I found was to get the `RemoteCollection` and filter it to find the remote with the same name as the branch `remote_name` property.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nacc": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/671", "title": "RemoteCollection: no trivial way to detect if a remote already exists", "body": "I would like to think that a try/except for ValueError on create() would be sufficient, but I see no guarantee that the only reason a ValueError might be thrown on create() is if the remote already exists. So it feels like I need to check if the remote exists by hand before trying to create it?", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jjlorenzo": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/665", "title": "Bad credentials hangs", "body": "Hi, it is anything that I can do to solve the following problem: If I enter bad credentials, instead of an error message, the execution hangs in the fetch.\n\n``` python\ncredentials = pygit2.UserPass('jjlorenzo', 'bad-password')\nstats = git.remotes['origin'].fetch(callbacks=pygit2.RemoteCallbacks(credentials=credentials))\n# the fetch call hangs, the code after the fetch never get reached\n```\n\nTrying to debug `pygit2` I found that the execution hangs on `err = C.git_remote_fetch(self._remote, arr, fetch_opts, to_bytes(message))` I mean that this function never returns the error.\n\nProbably this is a `libgit2` problem, is this is the case, sorry.\n\n``` sh\n\u276f\u276f\u276f brew info libgit2                                                                                              \nlibgit2: stable 0.24.2 (bottled), HEAD\nC library of Git core methods that is re-entrant and linkable\nhttps://libgit2.github.com/\n/usr/local/Cellar/libgit2/0.24.2 (101 files, 1.7M) *\n  Poured from bottle on 2016-10-23 at 21:22:27\nFrom: https://github.com/Homebrew/homebrew-core/blob/master/Formula/libgit2.rb\n==> Dependencies\nBuild: pkg-config \u2718, cmake \u2718\nRecommended: libssh2 \u2718\n==> Options\n--universal\n    Build a universal binary\n--without-libssh2\n    Build without libssh2 support\n--HEAD\n    Install HEAD version\n\n\u276f\u276f\u276f yolk -l |grep git2\npygit2          - 0.24.1       - active\n```\n\nI install `libgit2-0.24.1` and the problem persists.\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jgeorgeson": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/664", "title": "Adding LFS tracked files to index", "body": "I'm writing a script to take snapshots from SVN URLs and add them to Git in a subfolder. Bringing LFS into the fold it seems like calling Repository.index.add_all isn't working quite right. The files that should be tracked seem to get put in to _.git/lfs/objects_ as expected, but `git lfs ls-files` doesn't list any files. I changed this line of my code\n\n`repo.index.add_all([projectPath])`\n\nto this\n\n``` python\n        check_call([\"/usr/bin/git\",\"add\",\"--all\",projectPath])\n        repo.index.read()\n```\n\nAnd that's fixed it, but I'd prefer to have the code self contained with library calls.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "leongkui": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/648", "title": "To find diff of two branches", "body": "Hi, found pygit2 today and learning to use it as tool to build our releases.  One thing I have yet found solution is to generate file(s) changed between two branches.  By using git command, \"git diff branch1...branch2 --name-only\", I can obtain this list, any way to do this using pygit2?  Thanks in advance for the help.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "parisk": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/647", "title": "GPG-signed commits", "body": "Is there any way to sign commits (and tags maybe) with pygit2? I performed a quick search about `gpg` and `signed` both in the repository and documentation website and could not find any related document.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/647/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "danyill": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/642", "title": "proxy settings", "body": "Could pygit2 include proxy authentication settings including NTLM proxies please. That would be most useful to me. It appears to be upstream in https://github.com/libgit2/libgit2/pull/3110\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "skrzepto": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/639", "title": "Add ability to search through repositories", "body": "Feature Request:\n\nHave the ability to to search through code like `git grep <search key>` does with pygit2\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mo-mughrabi": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/635", "title": "Configuring pygit2==0.20.3 and libgit2==0.20.0 on Debian", "body": "I've been trying to build a docker file to install salt with pygit2 and libgit2 using a debian:jessie release.\n\nIt seems like everything passes successfully, but when try to import `pygit2` its failing\n\nP.S I specifically require verion `.0.20.0` for libgit2 and `0.20.3` for pygit2 for saltstack API to work as its not compatible with more recent releases \n\n``` python\n>>> import pygit2\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/local/lib/python2.7/dist-packages/pygit2/__init__.py\", line 32, in <module>\n    import _pygit2\nImportError: /usr/local/lib/python2.7/dist-packages/_pygit2.so: undefined symbol: git_note_oid\n```\n\nBelow is my docker file, \n\n``` Dockerfile\nFROM debian:jessie\n\n# Install packages\nADD http://debian.saltstack.com/debian-salt-team-joehealy.gpg.key /tmp/debian-salt-team-joehealy.gpg.key\nRUN echo \"deb http://debian.saltstack.com/debian jessie-saltstack main\" | tee /etc/apt/sources.list.d/saltstack.list && \\\n    apt-key add /tmp/debian-salt-team-joehealy.gpg.key && \\\n    DEBIAN_FRONTEND=noninteractive apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install -yqq \\\n    salt-master \\\n    salt-minion \\\n    salt-cloud \\\n    salt-api \\\n    salt-ssh \\\n    salt-syndic \\\n    cmake \\\n    gcc \\\n    pkg-config \\\n    libssh2-1-dev \\\n    libssl-dev \\\n    libffi-dev \\\n    python-dev \\\n    python-pip \\\n    build-essential \\\n    git \\\n    python-setuptools \\\n    libgit2-dev \\\n    zlib1g \\\n    libssl1.0.0 \\\n    libhttp-parser-dev \\\n    libc6 \\\n    ca-certificates\n\nRUN cd /tmp && \\\n    wget https://github.com/openssl/openssl/archive/OpenSSL_1_0_1r.tar.gz && \\\n    tar xzf OpenSSL_1_0_1r.tar.gz && \\\n    cd openssl-OpenSSL_1_0_1r && \\\n    ./config -fPIC --prefix=/usr -ldl && \\\n    make && \\\n    make install\n\nRUN cd /tmp && \\\n    wget https://github.com/libgit2/libgit2/archive/v0.20.0.tar.gz && \\\n    tar xzf v0.20.0.tar.gz && \\\n    cd libgit2-0.20.0/\n\nRUN cd /tmp/libgit2-0.20.0 && \\\n    cmake -DCMAKE_INSTALL_PREFIX=/usr && \\\n    cmake --build . --target install && \\\n    ldconfig\n\nRUN pip install pip==8.1.2 && \\\n    pip install --upgrade cffi && \\\n    pip install -I pygit2==0.20.0 && \\\n    pip install cherrypy==3.2.2 \\\n                tornado==4.3 \\\n                docker-py==1.8.1 \\\n                halite==0.1.17 \\\n                GitPython==0.3.2.RC1 \\\n                pyOpenSSL==0.15.1\n# Ports\nEXPOSE 4505 4506\n\n# Run Command\nCMD \"salt-master\"\n\n```\n\nCan someone please advise?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aspiers": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/633", "title": "revparse isn't supported", "body": "AFAICS, `pygit2` only supports [`revparse_single`](http://www.pygit2.org/revparse.html?highlight=revparse#pygit2.Repository.revparse_single), not [`revparse`](https://libgit2.github.com/libgit2/#HEAD/group/revparse/git_revparse).  This means there's no convenient way to obtain a list of revisions, e.g. like it can be done with `git rev-list A..B`.  The closest I could find was [`Repository.walk`](http://www.pygit2.org/log.html?highlight=walk#pygit2.Repository.walk), but that only lets you specify a starting point, and it presumably doesn't exclude commits in the same way that `A..B` will exclude commits which are already merged into `A`.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rralf": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/631", "title": "Equivalent of git describe --contains", "body": "Is there an equivalent of git describe --contains?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "imbpp123": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/628", "title": "Merge with options", "body": "According to documentation there is only one parameter in merge method - branch ID. \n\nHow can i do analog of \"merge --abort\" for example?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kevin-y": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/627", "title": "Anybody knows how to disable ssl verification on self-signed certificate?", "body": "I need to clone a repo from an internal git web server which holds a self-signed certificate. It fails on validating the certificate. How can I disable the validation step in pygit2? Thanks in advance!!!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mrh1997": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/625", "title": "diff has memory leak", "body": "running diff on two trees (no matter if Repository.diff(), Tree.diff_to_tree()) seems to have a memory leak.\nMy testscript walks a big repository from root to head of master and diffs every logentry to its parent.\nAlthough the diff result is thrown away the memory footprint of the process grows and grows (according to the Windows Taskmanager).\nAt some point I get a MemoryError).\n\nMy system is:\n- Windows 10 (64 bit)\n- Python 2.7.11 (32 bit)\n- pygit2 / libgit2 0.24.0\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/610", "title": "DiffLine.content is represented as unicode", "body": "The field `DiffLine.content` contains a unicode line. As git does not know anything about the encoding of the files to be diffed (they are blobs), I expect this object to be of type `str` in py2 and `bytes` in py3.\n\nEven worse if a file is i.e. latin-1 encoded and contains latin-1 specific characters, all these characters are mapped to '\\xfffd'. Thus is impossible to diff non-ascii encoded text files correctly.\n\nI suppose this is a pygit2 bug, as the libgit2.h interface works correctly, as it exposes this field as `const char *` (see https://github.com/libgit2/libgit2/blob/HEAD/include/git2/diff.h#L555)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/610/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/ee28de65a0090f0d645acde7ee57f32b48a086a4", "message": "Extend comment of Remote.push by note about push_update_reference.\n\nAs happened in support request https://github.com/libgit2/libgit2/issues/3963 it can be easily overseen,\nthat push returns True, when the remote has installed a hook that denies the commits."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/54e4da837b138c4c7a7ed3aa7a24917af1516fba", "message": "Support non-english errors with non-ascii chars.\n\nLibgit2 partially forwards OS error message texts.\r\nOn non-english Windows OSes these errors may contain non-ascii characters (i.e. umlauts).\r\nTo avoid that a UnicodeDecodeError is raised the error message is interpreted as UTF-8.\r\nThe solution should not be necessary on linux/osx as they return always ascii (as far as I know).\r\nThus this solution will not change the behaviour on linux/osx."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/ffc514fa24974db67318f977c7cbd4243c6340ce", "message": "Ammend the doc-string of Repository.diff()\n\nAccording to the old documentation, it was not clear how to compare \r\nworking directory/index to a git object."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "magicgaro": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/615", "title": "if commits.message has some unknow code,there happened some error\u3002", "body": "![image](https://cloud.githubusercontent.com/assets/16775931/14311279/155c6748-fc19-11e5-868e-6a23c353186a.png)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "barry-scott": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/613", "title": "Problem with implement the equiv of git pull", "body": "I am working my way through an implementation of git pull.\n\nIt seems that I need to do a Remote.fetch() call  followed by a merge.\n\nProblem (1): what is the robust way to generate the fetch_refspecs if the REmote.fetch_refspecs is empty? In other words do you have the APIs that I can duplciaste what push.default=simple causes git pull to do?\n\nProblem (2): I have the objects fetched back I do not know the API to call to merge the remote changed into the local. I tried calling repo.merge() with the ID of the lastest commit from the remote.\nBut that only lead to modified files in the index. What is the correct API code to make this work?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/604", "title": "how to diff one file in working dir against a Blob?", "body": "pygit2 version python3-pygit2-0.23.3-2.fc23.x86_64\n\nI cannot figure out how I can get a diff for only one file.\n\nHow do I arrange to have pygit2 return the diff of a Blob against the working dir file?\n\nI looked at calling diff_to_working on a new Index(), but that fails because the new Index() does not\nself._repo filled in.\n\nTreeBuilder() seems is unable to help as it requires putting tree objects into the repo to allow\nfor the folder structure, for example to diff Source/file.py. needs a tree for Source. I clearly\ndo not want to be writting files into the repo to do a diff.\n\nDid I miss something in API?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/601", "title": "Example for git reset HEAD -- filename.type please", "body": "I am coming at GIT with an external view of how it works. Internals I have very little idea about.\n\nI have figured out that I need to call repo.reset() to do the same as git reset HEAD -- filename.type.\n\nBut I have no idea how to find the OID that I need to use.\n\nLooking at git-reset code I seem to need a treeish. How do I get a treeish that corresponds to HEAD?\nI guess I walk that tree looking for the filename and get a OID from the tree.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "raimondi1337": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/603", "title": "fails to find libgit2", "body": "System: Arch Linux\nlibgit2 version: 0.24.0\npython version: 3.5.1\npip version: 8.1.0\n\nnot fixed by:\n$ sudo ldconfig\n\noutput:\n$python -c 'import pygit2'\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\n  File \"/usr/lib/python3.5/site-packages/pygit2/**init**.py\", line 32, in <module>\n    from _pygit2 import *\nImportError: libgit2.so.24: cannot open shared object file: No such file or directory\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/f2864c0511956226d1ec8bc8e52c906727dbfea8", "message": "fix addition occurence of libgit2 version number"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/456bf59a88b559bdea8af5090b4191842e976e96", "message": "bump libgit2 version number"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "remusvrm": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/598", "title": "git clone with  '--no-checkout' argument", "body": "How to clone a remote repository using  '--no-checkout' argument?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "svvac": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/591", "title": "Segfault on import in virtualenv", "body": "While trying to install pygit2 on a virtualenv, I ran into several segfault issues. This is using python 3.5.1, which is not officially supported, but my distro (Arch) manages to provide a stock package for it so I decided to give it a shot.\n\nI started with `libgit2` globally installed on the system and followed the install guide:\n\n```\n$ virtualenv foo/\n$ cd foo/\n$ source bin/activate\n$ pip install pygit2\n$ python -c 'import pygit2'\nSegmentation fault (core dumped)\n```\n\nWhat I tried:\n- Maybe `libgit2` and `pygit2` versions don't match: They do\n- Maybe python can't locate the `libgit.so` file (even though I don't get the \"Can't locate file\" error): Tried to locally build `libgit2` as the install docs suggest, no luck here \n- Fiddled with `LIBGIT2` and `LD_LIBRARY_PATH` env vars: still no luck\n\nI then tried to use the distro package for `pygit2`:\n\n```\n# pacman -S python-pygit2\n$ python -c 'import pygit2; print(\"Success!\")'\nSuccess\n```\n\nSo it works. As far as I can tell looking at the package definition files, Arch maintainers don't seem to apply any custom patches, so it looks like vanilla `pygit2` to me. I then tried using the distro package in my virtualenv:\n\n```\n$ virtualenv --system-site-packages foo/\n$ cd foo/\n$ source bin/activate\n$ python -c 'import pygit2'\nSegmentation fault (core dumped)\n```\n\nSo it looks like it is somehow due to interaction with the virtualenv. While digging, I discovered python's `venv` module, which seems to offer more or less the same functionalities as `virtualenv`, so I gave it a shot. This time, both scenarios below worked (command is available as `pyvenv` on my system, but I reckon you can also use `python -m venv` to the same effect):\n\n```\n## Using local venv pygit2 install and global libgit2\n$ pyvenv foo/\n$ cd foo\n$ source bin/activate\n$ pip install pygit2\n$ python -c 'import pygit2; print(\"Success!\")'\nSuccess!\n```\n\n```\n## Using global pygit2 and global libgit2\n$ pyvenv --system-site-packages foo/\n$ cd foo\n$ source bin/activate\n$ python -c 'import pygit2; print(\"Success!\")'\nSuccess!\n```\n\nThis might not even be directly related to pygit, so feel free to close this issue. At least there's some kind of ref to the issue if anyone runs into the same problem. Also, maybe this warrants tome kind of note in the docs\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ytrezq": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/578", "title": "Please support an equivelent of git-repack.", "body": "Hello, I have a problem where the official git project have a nasty bug that prevent any repack command to be successful on my repo _(the process crash when creating a packfile)_.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/575", "title": "Please support the git_index_add_frombuffer()", "body": "Working from windows, and I realize it\u2019s hard to work with paths longer than 260 characters without [\ua731\u1d1c\u1d00](https://en.wikipedia.org/wiki/Windows_Services_for_UNIX) _(where it\u2019s very hard to get python working on the posix subsystem)_.\n\nSo please support this function, so I can work with paths that don\u2019t exist.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bkcsfi": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/576", "title": "pip install pygit2 into virtualenv, I had to pass extra options to pip to get it to work", "body": "This is what I had to do to get pygit2 installed into a virtualenv on ubuntu 14.04\n1. activate virtualenv (I'm setting up powerline, so using the same virtualenv for both powerline and pygit2)\n2. set LIBGIT2 $VIRTUAL_ENV\n   (this sets global var in fish shell.. use export LIBGIT2= ... for bash)\n   \n   in this example LIBGIT2 is /home/bkc/PythonEnvironments/powerline\n3. download and build libgit2-0.23.2 in the virtualenv\n   \n   ```\n   cd $LIBGIT2\n   wget wget https://github.com/libgit2/libgit2/archive/v0.23.2.tar.gz\n   tar zxf v0.23.2.tar.gz \n   cd libgit2-0.23.2/\n   cmake . -DCMAKE_INSTALL_PREFIX=$LIBGIT2\n   make\n   make install\n   ```\n4. install pygit2 via pip\n   \n   using --global-option was required to get include dir, library and rpath set because exported LDFLAGS and CFLAGS were being ignored by pip\n   \n   ```\n   pip install  pygit2 --global-option=build_ext --global-option=\"-I/home/bkc/PythonEnvironments/powerline/libgit2-0.23.2/include\" --global-option=\"-L/home/bkc/PythonEnvironments/powerline/lib\" --global-option=\"--rpath=/home/bkc/PythonEnvironments/powerline/lib\"\n   ```\n5. profit\n\n```\n   $ python\n   Python 2.7.6 (default, Jun 22 2015, 17:58:13) \n   [GCC 4.8.2] on linux2\n   Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n   >>> import pygit2\n   >>>\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pmisik": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/563", "title": "Add support and distribution for Python Wheels", "body": "Hi,\n\nWe started using pygit2 because we it gives us much better performance comparing to executing git commands with parsing its outputs from pipes on Windows. Unfortunately our build environment (several build machines) does not use vs2008. So it is little trickier to distribute the current version of pygit2 on all machines.\n\nI would really appreciate if pygit2 will start distributing pygit2 also as wheel package.  See http://pythonwheels.com/\n\nI think much more people would appreciate. It would simplify usage and distribution. \nI\u2019ve found http://www.lfd.uci.edu/~gohlke/pythonlibs/#pygit2 did it for some versions.\n\nHave you considered to add support for Python Wheels a in the near future?\n\nThanks \n\nPalo\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/563/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MELLITI-Alaeddine": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/562", "title": "remove branch/reference from the server repository", "body": "Assuming that we have a remote branch called 'i18n' and we would like to remove this branch from the server repository.\n# get the branch\n\nbranch = self.repo.lookup_branch('i18n')\n# delete the branch locally\n\nbranch.delete()\nhow to push the removed branch: how can we remove it from the server repository ???\n\nidem for reference\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bokehsensei": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/554", "title": "Pygit2 cannot parse URLs with OAuth tokens.", "body": "I'm trying to use pygit2 to clone a GitHub repo using OAuth tokens.\nThis actually works well from the command line, as explained on GitHub's blog [here](https://github.com/blog/1270-easier-builds-and-deployments-using-git-over-https-and-oauth).\n\nSo, I do:\n\n``` python\nfrom pygit2 import clone_repository\n\noauth_token = 'somesuperlongtokengivenbygithub'\nrepo = clone_repository(\n                'https://'+oauth_token+'@github.com/openwrt/luci', \n                '/tmp/repos', \n                bare=True\n)\n```\n\nand I get back:\n\n``` bash\n00:04:42 _pygit2.GitError: Unsupported URL protocol\nTraceback (most recent call last):\n  File \"/home/ubuntu/.venv/etincelle/lib/python3.4/site-packages/rq/worker.py\", line 558, in perform_job\n    rv = job.perform()\n  File \"/home/ubuntu/.venv/etincelle/lib/python3.4/site-packages/rq/job.py\", line 495, in perform\n    self._result = self.func(*self.args, **self.kwargs)\n  File \"/home/ubuntu/repo/etincelle/routes.py\", line 41, in clone_all_repos\n    clone(repo, _app, token)\n  File \"/home/ubuntu/repo/etincelle/routes.py\", line 25, in clone\n    clone_repository(oauth_url, git_id_repo, bare=True)\n  File \"/home/ubuntu/.venv/etincelle/lib/python3.4/site-packages/pygit2/__init__.py\", line 293, in clone_repository\n    check_error(err)\n  File \"/home/ubuntu/.venv/etincelle/lib/python3.4/site-packages/pygit2/errors.py\", line 64, in check_error\n    raise GitError(message)\n_pygit2.GitError: Unsupported URL protocol\nTraceback (most recent call last):\n  File \"/home/ubuntu/.venv/etincelle/lib/python3.4/site-packages/rq/worker.py\", line 558, in perform_job\n    rv = job.perform()\n  File \"/home/ubuntu/.venv/etincelle/lib/python3.4/site-packages/rq/job.py\", line 495, in perform\n    self._result = self.func(*self.args, **self.kwargs)\n  File \"/home/ubuntu/repo/etincelle/routes.py\", line 41, in clone_all_repos\n    clone(repo, _app, token)\n  File \"/home/ubuntu/repo/etincelle/routes.py\", line 25, in clone\n    clone_repository(oauth_url, git_id_repo, bare=True)\n  File \"/home/ubuntu/.venv/etincelle/lib/python3.4/site-packages/pygit2/__init__.py\", line 293, in clone_repository\n    check_error(err)\n  File \"/home/ubuntu/.venv/etincelle/lib/python3.4/site-packages/pygit2/errors.py\", line 64, in check_error\n    raise GitError(message)\n_pygit2.GitError: Unsupported URL protocol\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kuailewangzi0328": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/553", "title": "I can't push code to remote, return -7 error code.", "body": "I use libgit2 v0.22.3 and pygit2 v0.22.1\n\nfirst, I clone the repo from github by ssh procotol like follow code :\n\n```\nrepo = pygit2.clone_repository(remoteUrl, localPath,credentials=credentials_test) \nrepo.remotes[\"origin\"].sideband_progress = sideband_progress_test\nrepo.remotes[\"origin\"].transfer_progress = transfer_progress_test\nrepo.remotes[\"origin\"].update_tips = update_tips_test\nreturn repo\n```\n\nand it excute success . I get the repository and read the remote success like follow code :\n\n```\nrepo = discoverRepository(current_repository)\n    for remote in repo.remotes:\n        print remote.name, \"----->\",remote.url\n        print remote.credentials\n        print remote.sideband_progress\n        print remote.transfer_progress\n        print remote.update_tips\n```\n\nI also can edit content, and commit the change. It all success. but when I want push these commit to remote like follow code ,It always raise GitError ,and error code is -7. no other reason.\n\n```\nrepo = discoverRepository(current_repository)\nrepo.remotes[remoteName].push(['refs/heads/master'],getDefaultAuthor(),\"ceshi push\")\n```\n\n Traceback (most recent call last):\n  File \"/Users/changdengkai/worksapce/androidWorkspace/testPyGit2/testRepository.py\", line 153, in <module>\n    mainTest()\n  File \"/Users/changdengkai/worksapce/androidWorkspace/testPyGit2/testRepository.py\", line 142, in mainTest\n    pushBySSHRemote(\"origin\");\n  File \"/Users/changdengkai/worksapce/androidWorkspace/testPyGit2/testRepository.py\", line 124, in pushBySSHRemote\n    repo.remotes[remoteName].push(['refs/heads/master'],getDefaultAuthor(),\"ceshi push\")\n  File \"/Library/Python/2.7/site-packages/pygit2-0.22.1-py2.7-macosx-10.10-intel.egg/pygit2/remote.py\", line 322, in push\n    check_error(err)\n  File \"/Library/Python/2.7/site-packages/pygit2-0.22.1-py2.7-macosx-10.10-intel.egg/pygit2/errors.py\", line 64, in check_error\n    raise GitError(message)\n_pygit2.GitError: err -7 (no message provided)\n\nI already try many way like change repo's url  from github to gitlab,  or change push func's param . and replace other version libgit2 (0.22.0) and pygit2(0.22.0), but still no effect. \n\nplease help me !!!  thanks very much !!!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Elizafox": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/552", "title": "ECDSA and ed25519 keys do not work", "body": "Hello,\n\nI'm not sure if this is the right place to file the bug (maybe the bug's in libgit2), but this is where I encountered it, and I haven't tried to duplicate it in libgit2. When using SSH, ECDSA and ed25519 keys don't work. They fail with this error:\n\n``` python\n>>> remote.credentials = pygit2.Keypair('git', '/home/elizabeth/.ssh/id_ed25519.pub', '/home/elizabeth/.ssh/id_ed25519', None)\n>>> remote.fetch()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib64/python3.4/site-packages/pygit2/remote.py\", line 221, in fetch\n    check_error(err)\n  File \"/usr/lib64/python3.4/site-packages/pygit2/errors.py\", line 56, in check_error\n    raise GitError(message)\n_pygit2.GitError: Failed to authenticate SSH session: Callback returned error\n```\n\nThe traceback for ECDSA is similar.\n\nYes, I have added my ed25519 and ECDSA keys to github, so I know that's not the problem. RSA keys also work just fine.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cool-RR": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/549", "title": "Provide quick tutorial in main page of documentation", "body": "Should be approximately one page to show using the main features of pygit2.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TDaglis": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/546", "title": "Error in commiting submodules", "body": "Is there a way to add a submodule to the index in order to commit?\nAfter pulling the latest changes of my submodule, when I try to add to the index I get the following error.\n\n```\n>>> repository.index.add('mysubmodule')\n\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/local/lib/python2.7/dist-packages/pygit2/index.py\", line 205, in add\n    check_error(err, True)\n  File \"/usr/local/lib/python2.7/dist-packages/pygit2/errors.py\", line 56, in check_error\n    raise GitError(message)\n_pygit2.GitError: Failed to read file into stream: Is a directory\n```\n\nIf working with submodules is not possible at the moment, would it be possible to somehow ignore submodule changes in `add_all` since it raises the same error and cannot be used anymore?\n\n```\n>>> repository.index.add_all()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/local/lib/python2.7/dist-packages/pygit2/index.py\", line 180, in add_all\n    check_error(err, True)\n  File \"/usr/local/lib/python2.7/dist-packages/pygit2/errors.py\", line 56, in check_error\n    raise GitError(message)\n_pygit2.GitError: Failed to read file into stream: Is a directory\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "toast12": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/545", "title": "pygit2 build issue on OS X", "body": "Hi,\n\nI am trying to build pygit2 on os x 10.8.0 with python 2.7.9 and hitting this error:\n\npygit2-0.22.0/pygit2/**pycache**/pygit2_cffi_93ecb84x5470904.so': dlopen(pygit2-0.22.0/pygit2/**pycache**/pygit2_cffi_93ecb84x5470904.so, 2): Symbol not found: _iconv\n  Referenced from: pygit2-0.22.0/pygit2-0.22.0/pygit2/__pycache__/pygit2_cffi_93ecb84x5470904.so\n  Expected in: flat namespace\n in pygit2-0.22.0/pygit2/**pycache**/pygit2_cffi_93ecb84x5470904.so\n\nAny suggestion on how to resolve this?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Julian": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/539", "title": "Incorrectly depends on CFFI universally", "body": "The `install_requires` contains `cffi`, but this is incorrect -- running `pip install -U pygit2` on a PyPy installation with CFFI older than a version uploaded to PyPI will break the PyPy install as it tries to update the vendored CFFI to the newer version. The setup.py requirement should specifically say that CFFI is a dependency only on things other than PyPy (via environment markers, an if block, etc., depending on the methods used to build dists)\n\nhttps://github.com/pyca/cryptography/pull/1695 has some background for a similar problem.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wgrant": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/537", "title": "Python 3 port uses Unicode to represent byte strings", "body": "pygit2, when built for Python 3, treats paths as Unicode and will fail if a path isn't decodable as the filesystem encoding. But Git paths are byte strings, not Unicode strings. This includes refs, so repos with branch names containing non-UTF-8 sequences are completely unusable on most systems:\n\n```\n>>> repo.listall_references()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 14: invalid start byte\n```\n\npygit2's behaviour under Python 2 is correct; listall_references and other APIs returns byte strings as they are in the Git model. I don't see why the behaviour should differ by Python version, as both types exist in both languages. It seems to me that the default low-level API should return byte strings to match the underlying model and handle all cases, and convenience wrappers which return Unicode strings could be added if people actually want them. As it stands, some perfectly valid Git repos are unusable except on Python 2.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bochecha": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/535", "title": "pygit2 doesn't see all changed files", "body": "Using git:\n\n```\n$ git diff --name-only \nhm/__init__.py\nhm/cli.py\n```\n\nBut with pygit2:\n\n```\n>>> import pygit2\n>>> repo = pygit2.Repository('.')\n>>> index = repo.index\n>>> index.read()\n>>> list(index.diff_to_workdir())\n[<_pygit2.Patch object at 0x7fc809008a30>]\n>>> list(index.diff_to_workdir())[0].old_file_path\n'hm/__init__.py'\n>>> list(index.diff_to_workdir())[0].new_file_path\n'hm/__init__.py'\n```\n\nAs you can see, pygit2 is completely missing the changes that happened in `hm/cli.py`.\n\nOr am I doing this wrong? :confused:\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lkraav": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/534", "title": "cffi-0.8.6 -> 0.9.2 upgrade causes verifier module to stop pygit2 from operating", "body": "```\n/usr/lib64/python3.3/site-packages/pygit2/errors.py in <module>()\n     27 \n     28 # ffi\n---> 29 from .ffi import ffi, C\n     30 \n     31 from _pygit2 import GitError\n\n/usr/lib64/python3.3/site-packages/pygit2/ffi.py in <module>()\n     33 \n     34 \n---> 35 ffi, C = get_ffi()\n\n/usr/lib64/python3.3/site-packages/pygit2/_utils.py in get_ffi()\n     99     libgit2_bin, libgit2_include, libgit2_lib = get_libgit2_paths()\n    100     C = ffi.verify(preamble, modulename=modulename, libraries=[\"git2\"],\n--> 101                    include_dirs=[libgit2_include], library_dirs=[libgit2_lib])\n    102 \n    103     # Ok\n\n/usr/lib64/python3.3/site-packages/cffi/api.py in verify(self, source, tmpdir, **kwargs)\n    365         # Make a Verifier() and use it to load the library.\n    366         self.verifier = Verifier(self, source, tmpdir, **kwargs)\n--> 367         lib = self.verifier.load_library()\n    368         #\n    369         # Save the loaded library for keep-alive purposes, even\n\n/usr/lib64/python3.3/site-packages/cffi/verifier.py in load_library(self)\n     93                 if not self._has_module:\n     94                     if not self._has_source:\n---> 95                         self._write_source()\n     96                     self._compile_module()\n     97             return self._load_library()\n\n/usr/lib64/python3.3/site-packages/cffi/verifier.py in _write_source(self, file)\n    181             if needs_written:\n    182                 _ensure_dir(self.sourcefilename)\n--> 183                 with open(self.sourcefilename, \"w\") as fp:\n    184                     fp.write(source_data)\n    185 \n\nPermissionError: [Errno 13] Permission denied: '/usr/lib64/python3.3/site-packages/pygit2/__pycache__/pygit2_cffi_64b6b464x5470904.c'\n```\n\nWhy does cffi suddenly need to write something into a system directory? Is this related to #529?\n\nEDIT granting user write permissions allows the code to proceed, but I'm not sure whether I can remove the permissons now or not.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rholy": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/531", "title": "Extend the documentation with respect to the exceptions being raised by various functions", "body": "The function `discover_repository` apparently raises `KeyError` if it cannot find a repository. I think that it is not appropriate and it also is not documented. Could it be fixed, please?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "KINFOO": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/530", "title": "Segmentation fault while pushing", "body": "Hi,\n\nI am using **pygit2 0.22.0** over **libgit2  0.22.2** on **Linux**, and I am unable to push.\n\nLet me break it down:\n\n``` python\nIn [2]: from pygit2 import KeypairFromAgent, Repository\n\nIn [3]: repository = Repository('/home/kevin/.bee/repositories/to_delete')\n\nIn [4]: repository.listall_branches()\nOut[4]: ['i18n', 'master']\n\nIn [5]: credentials = KeypairFromAgent('git')\n\nIn [6]: for remote in repository.remotes:\n   ...:     remote.credentials = credentials\n   ...:     remote.push_url = remote.url\n   ...:     remote.push(['refs/heads/i18n'])\n   ...:     \n[1]    8230 segmentation fault (core dumped)  ipython\n```\n\nI have SSH access to this repository.\nMaybe I am doing it wrong?\n\nKevin\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "terminalmage": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/524", "title": "Add ability to detect stale refs, or at least the ability to list remote refs", "body": "Please correct me if I am wrong, but I don't see a way to detect stale refs. So, if a branch/tag is removed from the remote repository, this change is not affected the next time you fetch that remote with pygit2.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "srinu-dipl": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/512", "title": "when i run sudo pip install pygit2", "body": "Downloading/unpacking pygit2\n  Downloading pygit2-0.22.0.tar.gz (423kB): 423kB downloaded\n  Running setup.py (path:/tmp/pip_build_root/pygit2/setup.py) egg_info for package pygit2\n\n```\nInstalled /tmp/pip_build_root/pygit2/.eggs/cffi-0.9.2-py2.7-linux-x86_64.egg\nSearching for pycparser\nReading https://pypi.python.org/simple/pycparser/\nBest match: pycparser 2.10\nDownloading https://pypi.python.org/packages/source/p/pycparser/pycparser-2.10.tar.gz#md5=d87aed98c8a9f386aa56d365fe4d515f\nProcessing pycparser-2.10.tar.gz\nWriting /tmp/easy_install-oMoRn6/pycparser-2.10/setup.cfg\nRunning pycparser-2.10/setup.py -q bdist_egg --dist-dir /tmp/easy_install-oMoRn6/pycparser-2.10/egg-dist-tmp-qTpAQp\nzip_safe flag not set; analyzing archive contents...\nMoving pycparser-2.10-py2.7.egg to /tmp/pip_build_root/pygit2/.eggs\n\nInstalled /tmp/pip_build_root/pygit2/.eggs/pycparser-2.10-py2.7.egg\n\nbuilding 'pygit2_cffi_93ecb84x5470904' extension\nx86_64-linux-gnu-gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -I/usr/local/include -I/usr/include/python2.7 -c pygit2/__pycache__/pygit2_cffi_93ecb84x5470904.c -o /tmp/pip_build_root/pygit2/pygit2/__pycache__/pygit2/__pycache__/pygit2_cffi_93ecb84x5470904.o\npygit2/__pycache__/pygit2_cffi_93ecb84x5470904.c:207:18: fatal error: git2.h: No such file or directory\n #include <git2.h>\n                  ^\ncompilation terminated.\nTraceback (most recent call last):\n  File \"<string>\", line 17, in <module>\n  File \"/tmp/pip_build_root/pygit2/setup.py\", line 197, in <module>\n    cmdclass=cmdclass)\n  File \"/usr/lib/python2.7/distutils/core.py\", line 151, in setup\n    dist.run_commands()\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 953, in run_commands\n    self.run_command(cmd)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 972, in run_command\n    cmd_obj.run()\n  File \"<string>\", line 15, in replacement_run\n  File \"build/bdist.linux-x86_64/egg/setuptools/command/egg_info.py\", line 207, in find_sources\n  File \"build/bdist.linux-x86_64/egg/setuptools/command/egg_info.py\", line 291, in run\n  File \"build/bdist.linux-x86_64/egg/setuptools/command/egg_info.py\", line 320, in add_defaults\n  File \"build/bdist.linux-x86_64/egg/setuptools/command/sdist.py\", line 118, in add_defaults\n  File \"/usr/lib/python2.7/distutils/cmd.py\", line 312, in get_finalized_command\n    cmd_obj.ensure_finalized()\n  File \"/usr/lib/python2.7/distutils/cmd.py\", line 109, in ensure_finalized\n    self.finalize_options()\n  File \"build/bdist.linux-x86_64/egg/setuptools/command/build_py.py\", line 28, in finalize_options\n  File \"/usr/lib/python2.7/distutils/command/build_py.py\", line 46, in finalize_options\n    ('force', 'force'))\n  File \"/usr/lib/python2.7/distutils/cmd.py\", line 298, in set_undefined_options\n    src_cmd_obj.ensure_finalized()\n  File \"/usr/lib/python2.7/distutils/cmd.py\", line 109, in ensure_finalized\n    self.finalize_options()\n  File \"/tmp/pip_build_root/pygit2/setup.py\", line 103, in finalize_options\n    ffi, C = get_ffi()\n  File \"pygit2/_utils.py\", line 101, in get_ffi\n    include_dirs=[libgit2_include], library_dirs=[libgit2_lib])\n  File \"/tmp/pip_build_root/pygit2/.eggs/cffi-0.9.2-py2.7-linux-x86_64.egg/cffi/api.py\", line 367, in verify\n    lib = self.verifier.load_library()\n  File \"/tmp/pip_build_root/pygit2/.eggs/cffi-0.9.2-py2.7-linux-x86_64.egg/cffi/verifier.py\", line 96, in load_library\n    self._compile_module()\n  File \"/tmp/pip_build_root/pygit2/.eggs/cffi-0.9.2-py2.7-linux-x86_64.egg/cffi/verifier.py\", line 192, in _compile_module\n    outputfilename = ffiplatform.compile(tmpdir, self.get_extension())\n  File \"/tmp/pip_build_root/pygit2/.eggs/cffi-0.9.2-py2.7-linux-x86_64.egg/cffi/ffiplatform.py\", line 28, in compile\n    outputfilename = _build(tmpdir, ext)\n  File \"/tmp/pip_build_root/pygit2/.eggs/cffi-0.9.2-py2.7-linux-x86_64.egg/cffi/ffiplatform.py\", line 54, in _build\n    raise VerificationError('%s: %s' % (e.__class__.__name__, e))\ncffi.ffiplatform.VerificationError: CompileError: command 'x86_64-linux-gnu-gcc' failed with exit status 1\nComplete output from command python setup.py egg_info:\n```\n\nInstalled /tmp/pip_build_root/pygit2/.eggs/cffi-0.9.2-py2.7-linux-x86_64.egg\n\nSearching for pycparser\n\nReading https://pypi.python.org/simple/pycparser/\n\nBest match: pycparser 2.10\n\nDownloading https://pypi.python.org/packages/source/p/pycparser/pycparser-2.10.tar.gz#md5=d87aed98c8a9f386aa56d365fe4d515f\n\nProcessing pycparser-2.10.tar.gz\n\nWriting /tmp/easy_install-oMoRn6/pycparser-2.10/setup.cfg\n\nRunning pycparser-2.10/setup.py -q bdist_egg --dist-dir /tmp/easy_install-oMoRn6/pycparser-2.10/egg-dist-tmp-qTpAQp\n\nzip_safe flag not set; analyzing archive contents...\n\nMoving pycparser-2.10-py2.7.egg to /tmp/pip_build_root/pygit2/.eggs\n\nInstalled /tmp/pip_build_root/pygit2/.eggs/pycparser-2.10-py2.7.egg\n\nrunning egg_info\n\ncreating pip-egg-info/pygit2.egg-info\n\nwriting requirements to pip-egg-info/pygit2.egg-info/requires.txt\n\nwriting pip-egg-info/pygit2.egg-info/PKG-INFO\n\nwriting top-level names to pip-egg-info/pygit2.egg-info/top_level.txt\n\nwriting dependency_links to pip-egg-info/pygit2.egg-info/dependency_links.txt\n\nwriting manifest file 'pip-egg-info/pygit2.egg-info/SOURCES.txt'\n\nwarning: manifest_maker: standard file '-c' not found\n\nrunning build_ext\n\nbuilding 'pygit2_cffi_93ecb84x5470904' extension\n\ncreating /tmp/pip_build_root/pygit2/pygit2/**pycache**/pygit2\n\ncreating /tmp/pip_build_root/pygit2/pygit2/**pycache**/pygit2/**pycache**\n\nx86_64-linux-gnu-gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -I/usr/local/include -I/usr/include/python2.7 -c pygit2/**pycache**/pygit2_cffi_93ecb84x5470904.c -o /tmp/pip_build_root/pygit2/pygit2/**pycache**/pygit2/**pycache**/pygit2_cffi_93ecb84x5470904.o\n\npygit2/**pycache**/pygit2_cffi_93ecb84x5470904.c:207:18: fatal error: git2.h: No such file or directory\n\n #include <git2.h>\n\n```\n              ^\n```\n\ncompilation terminated.\n\nTraceback (most recent call last):\n\n  File \"<string>\", line 17, in <module>\n\n  File \"/tmp/pip_build_root/pygit2/setup.py\", line 197, in <module>\n\n```\ncmdclass=cmdclass)\n```\n\n  File \"/usr/lib/python2.7/distutils/core.py\", line 151, in setup\n\n```\ndist.run_commands()\n```\n\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 953, in run_commands\n\n```\nself.run_command(cmd)\n```\n\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 972, in run_command\n\n```\ncmd_obj.run()\n```\n\n  File \"<string>\", line 15, in replacement_run\n\n  File \"build/bdist.linux-x86_64/egg/setuptools/command/egg_info.py\", line 207, in find_sources\n\n  File \"build/bdist.linux-x86_64/egg/setuptools/command/egg_info.py\", line 291, in run\n\n  File \"build/bdist.linux-x86_64/egg/setuptools/command/egg_info.py\", line 320, in add_defaults\n\n  File \"build/bdist.linux-x86_64/egg/setuptools/command/sdist.py\", line 118, in add_defaults\n\n  File \"/usr/lib/python2.7/distutils/cmd.py\", line 312, in get_finalized_command\n\n```\ncmd_obj.ensure_finalized()\n```\n\n  File \"/usr/lib/python2.7/distutils/cmd.py\", line 109, in ensure_finalized\n\n```\nself.finalize_options()\n```\n\n  File \"build/bdist.linux-x86_64/egg/setuptools/command/build_py.py\", line 28, in finalize_options\n\n  File \"/usr/lib/python2.7/distutils/command/build_py.py\", line 46, in finalize_options\n\n```\n('force', 'force'))\n```\n\n  File \"/usr/lib/python2.7/distutils/cmd.py\", line 298, in set_undefined_options\n\n```\nsrc_cmd_obj.ensure_finalized()\n```\n\n  File \"/usr/lib/python2.7/distutils/cmd.py\", line 109, in ensure_finalized\n\n```\nself.finalize_options()\n```\n\n  File \"/tmp/pip_build_root/pygit2/setup.py\", line 103, in finalize_options\n\n```\nffi, C = get_ffi()\n```\n\n  File \"pygit2/_utils.py\", line 101, in get_ffi\n\n```\ninclude_dirs=[libgit2_include], library_dirs=[libgit2_lib])\n```\n\n  File \"/tmp/pip_build_root/pygit2/.eggs/cffi-0.9.2-py2.7-linux-x86_64.egg/cffi/api.py\", line 367, in verify\n\n```\nlib = self.verifier.load_library()\n```\n\n  File \"/tmp/pip_build_root/pygit2/.eggs/cffi-0.9.2-py2.7-linux-x86_64.egg/cffi/verifier.py\", line 96, in load_library\n\n```\nself._compile_module()\n```\n\n  File \"/tmp/pip_build_root/pygit2/.eggs/cffi-0.9.2-py2.7-linux-x86_64.egg/cffi/verifier.py\", line 192, in _compile_module\n\n```\noutputfilename = ffiplatform.compile(tmpdir, self.get_extension())\n```\n\n  File \"/tmp/pip_build_root/pygit2/.eggs/cffi-0.9.2-py2.7-linux-x86_64.egg/cffi/ffiplatform.py\", line 28, in compile\n\n```\noutputfilename = _build(tmpdir, ext)\n```\n\n  File \"/tmp/pip_build_root/pygit2/.eggs/cffi-0.9.2-py2.7-linux-x86_64.egg/cffi/ffiplatform.py\", line 54, in _build\n\n```\nraise VerificationError('%s: %s' % (e.__class__.__name__, e))\n```\n\ncffi.ffiplatform.VerificationError: CompileError: command 'x86_64-linux-gnu-gcc' failed with exit status 1\n\n---\n\nCleaning up...\nCommand python setup.py egg_info failed with error code 1 in /tmp/pip_build_root/pygit2\nStoring debug log for failure in /home/administrator/.pip/pip.log\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "8427003": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/509", "title": "The API have some problems \uff1f", "body": "![qq 20150401191153](https://cloud.githubusercontent.com/assets/5475231/6939844/1c570322-d8a3-11e4-801a-28d434274750.png)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brown": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/496", "title": "trouble removing files", "body": "When running pygit2 tests, I saw failures because of an inability to remove\nsome files created by the tests.  The files were in directories for which I did\nnot have write permission.  My umask is 0027 ... perhaps that's to blame.\nIn any case, I modified force_rm_handle in test/utils.py so that it makes\nboth the directory and the file writable before calling remove_path.  The\ncode now looks like this:\n\ndef force_rm_handle(remove_path, path, excinfo):\n    os.chmod(\n        os.path.dirname(path),\n        os.stat(os.path.dirname(path)).st_mode | stat.S_IWUSR | stat.S_IWGRP | stat.S_IWOTH\n    )\n    os.chmod(\n        path,\n        os.stat(path).st_mode | stat.S_IWUSR | stat.S_IWGRP | stat.S_IWOTH\n    )\n    remove_path(path)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cfs-pure": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/485", "title": "Expose checkout strategy in clone_repository()", "body": "Currently there is no way to pass in the checkout strategy git_clone() in clone_repository().  This makes simulating 'git clone --no-checkout' impossible.  A possible solution is adding a checkout_strategy argument to pygit2.clone_repository(), that when not set to None, would pass the set of flags into opts.checkout_opts.checkout_strategy (after initializing opts.checkout_opts).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zack211": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/484", "title": "diff does not generate any output: pygit2", "body": "I am trying to do something similar to \"git show\" . So when I try to print the result of diff , I don't get what I am expecting. I am referring the pygit2 documentation. What is the problem here?\n\nimport pygit2\nrepo=pygit2.Repository('/home/repository')\n\nt0=repo.revparse_single('HEAD').tree\nt1=repo.revparse_single('HEAD^').tree\n\n> > > repo.diff(t0,t1)\n> > > <_pygit2.Diff object at 0x7fc46eeb0470>\n> > > out=repo.diff(t0,t1)\n> > > print out\n> > > <_pygit2.Diff object at 0x7fc46eeb0410>\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jdp": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/479", "title": "Doesn't install on OS X 10.9.5", "body": "Installing through pip, in a virtualenv. Versions:\n- OS X 10.9.5\n- pip 1.5\n- virtualenv 1.11\n- Python 2.7.5\n\nlibgit2 installed from Homebrew\n\n```\nlibgit2: stable 0.21.2 (bottled), HEAD\nhttp://libgit2.github.com/\n/usr/local/Cellar/libgit2/0.20.0 (69 files, 1.2M)\n  Built from source\n/usr/local/Cellar/libgit2/0.21.2 (73 files, 1.3M) *\n  Poured from bottle\nFrom: https://github.com/Homebrew/homebrew/blob/master/Library/Formula/libgit2.rb\n==> Dependencies\nBuild: cmake \u2718\nRequired: openssl \u2714\nOptional: libssh2 \u2718\n==> Options\n--with-libssh2\n    Build with libssh2 support\n--HEAD\n    install HEAD version\n```\n\nErrors during install\n\n```\n$ pip install pygit2\nDownloading/unpacking pygit2\n  Running setup.py (path:/Users/justin/.virtualenvs/machino/build/pygit2/setup.py) egg_info for package pygit2\n\n    building 'pygit2_cffi_4091df83x5470904' extension\n    cc -fno-strict-aliasing -fno-common -dynamic -arch x86_64 -arch i386 -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch x86_64 -arch i386 -pipe -I/usr/local/include -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c pygit2/__pycache__/pygit2_cffi_4091df83x5470904.c -o /Users/justin/.virtualenvs/machino/build/pygit2/pygit2/__pycache__/pygit2/__pycache__/pygit2_cffi_4091df83x5470904.o\n    pygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:214:35: error: unknown type name 'git_cert'\n    static void _cffi_check__git_cert(git_cert *p)\n                                      ^\n    pygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:217:5: error: use of undeclared identifier 'git_cert_t'\n      { git_cert_t *tmp = &p->cert_type; (void)tmp; }\n        ^\n    pygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:217:17: error: use of undeclared identifier 'tmp'\n      { git_cert_t *tmp = &p->cert_type; (void)tmp; }\n                    ^\n    pygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:217:44: error: use of undeclared identifier 'tmp'\n      { git_cert_t *tmp = &p->cert_type; (void)tmp; }\n                                               ^\n    pygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:222:37: error: unknown type name 'git_cert'\n      struct _cffi_aligncheck { char x; git_cert y; };\n                                        ^\n    pygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:224:12: error: use of undeclared identifier 'git_cert'\n        sizeof(git_cert),\n               ^\n    pygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:226:14: error: unknown type name 'git_cert'\n        offsetof(git_cert, cert_type),\n                 ^\n    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/clang/6.0/include/stddef.h:87:43: note: expanded from macro 'offsetof'\n    #define offsetof(t, d) __builtin_offsetof(t, d)\n                                              ^\n    pygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:227:14: error: use of undeclared identifier 'git_cert'\n        sizeof(((git_cert *)0)->cert_type),\n                 ^\n    pygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:227:24: error: expected expression\n        sizeof(((git_cert *)0)->cert_type),\n                           ^\n    pygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:235:43: error: unknown type name 'git_cert_hostkey'\n    static void _cffi_check__git_cert_hostkey(git_cert_hostkey *p)\n                                              ^\n    pygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:238:5: error: use of undeclared identifier 'git_cert_t'\n      { git_cert_t *tmp = &p->cert_type; (void)tmp; }\n        ^\n    pygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:238:17: error: use of undeclared identifier 'tmp'\n      { git_cert_t *tmp = &p->cert_type; (void)tmp; }\n                    ^\n    pygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:238:44: error: use of undeclared identifier 'tmp'\n      { git_cert_t *tmp = &p->cert_type; (void)tmp; }\n                                               ^\n    pygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:239:5: error: use of undeclared identifier 'git_cert_ssh_t'\n      { git_cert_ssh_t *tmp = &p->type; (void)tmp; }\n        ^\n    pygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:239:21: error: use of undeclared identifier 'tmp'\n      { git_cert_ssh_t *tmp = &p->type; (void)tmp; }\n                        ^\n    pygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:239:43: error: use of undeclared identifier 'tmp'\n      { git_cert_ssh_t *tmp = &p->type; (void)tmp; }\n                                              ^\n    pygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:246:37: error: unknown type name 'git_cert_hostkey'\n      struct _cffi_aligncheck { char x; git_cert_hostkey y; };\n                                        ^\n    pygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:248:12: error: use of undeclared identifier 'git_cert_hostkey'\n        sizeof(git_cert_hostkey),\n               ^\n    pygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:250:14: error: unknown type name 'git_cert_hostkey'\n        offsetof(git_cert_hostkey, cert_type),\n                 ^\n    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/clang/6.0/include/stddef.h:87:43: note: expanded from macro 'offsetof'\n    #define offsetof(t, d) __builtin_offsetof(t, d)\n                                              ^\n    fatal error: too many errors emitted, stopping now [-ferror-limit=]\n    20 errors generated.\n    Traceback (most recent call last):\n      File \"<string>\", line 17, in <module>\n      File \"/Users/justin/.virtualenvs/machino/build/pygit2/setup.py\", line 197, in <module>\n        cmdclass=cmdclass)\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/core.py\", line 152, in setup\n        dist.run_commands()\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/dist.py\", line 953, in run_commands\n        self.run_command(cmd)\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/dist.py\", line 972, in run_command\n        cmd_obj.run()\n      File \"<string>\", line 15, in replacement_run\n      File \"/Users/justin/.virtualenvs/machino/lib/python2.7/site-packages/setuptools/command/egg_info.py\", line 186, in find_sources\n        mm.run()\n      File \"/Users/justin/.virtualenvs/machino/lib/python2.7/site-packages/setuptools/command/egg_info.py\", line 246, in run\n        self.add_defaults()\n      File \"/Users/justin/.virtualenvs/machino/lib/python2.7/site-packages/setuptools/command/egg_info.py\", line 282, in add_defaults\n        sdist.add_defaults(self)\n      File \"/Users/justin/.virtualenvs/machino/lib/python2.7/site-packages/setuptools/command/sdist.py\", line 161, in add_defaults\n        build_py = self.get_finalized_command('build_py')\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/cmd.py\", line 312, in get_finalized_command\n        cmd_obj.ensure_finalized()\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/cmd.py\", line 109, in ensure_finalized\n        self.finalize_options()\n      File \"/Users/justin/.virtualenvs/machino/lib/python2.7/site-packages/setuptools/command/build_py.py\", line 26, in finalize_options\n        _build_py.finalize_options(self)\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/command/build_py.py\", line 46, in finalize_options\n        ('force', 'force'))\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/cmd.py\", line 298, in set_undefined_options\n        src_cmd_obj.ensure_finalized()\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/cmd.py\", line 109, in ensure_finalized\n        self.finalize_options()\n      File \"/Users/justin/.virtualenvs/machino/build/pygit2/setup.py\", line 103, in finalize_options\n        ffi, C = get_ffi()\n      File \"pygit2/_utils.py\", line 101, in get_ffi\n        include_dirs=[libgit2_include], library_dirs=[libgit2_lib])\n      File \"/Users/justin/.virtualenvs/machino/lib/python2.7/site-packages/cffi/api.py\", line 340, in verify\n        lib = self.verifier.load_library()\n      File \"/Users/justin/.virtualenvs/machino/lib/python2.7/site-packages/cffi/verifier.py\", line 74, in load_library\n        self._compile_module()\n      File \"/Users/justin/.virtualenvs/machino/lib/python2.7/site-packages/cffi/verifier.py\", line 139, in _compile_module\n        outputfilename = ffiplatform.compile(tmpdir, self.get_extension())\n      File \"/Users/justin/.virtualenvs/machino/lib/python2.7/site-packages/cffi/ffiplatform.py\", line 25, in compile\n        outputfilename = _build(tmpdir, ext)\n      File \"/Users/justin/.virtualenvs/machino/lib/python2.7/site-packages/cffi/ffiplatform.py\", line 51, in _build\n        raise VerificationError('%s: %s' % (e.__class__.__name__, e))\n    cffi.ffiplatform.VerificationError: CompileError: command 'cc' failed with exit status 1\n    Complete output from command python setup.py egg_info:\n    running egg_info\n\ncreating pip-egg-info/pygit2.egg-info\n\nwriting requirements to pip-egg-info/pygit2.egg-info/requires.txt\n\nwriting pip-egg-info/pygit2.egg-info/PKG-INFO\n\nwriting top-level names to pip-egg-info/pygit2.egg-info/top_level.txt\n\nwriting dependency_links to pip-egg-info/pygit2.egg-info/dependency_links.txt\n\nwriting manifest file 'pip-egg-info/pygit2.egg-info/SOURCES.txt'\n\nwarning: manifest_maker: standard file '-c' not found\n\n\n\nrunning build_ext\n\nbuilding 'pygit2_cffi_4091df83x5470904' extension\n\ncreating /Users/justin/.virtualenvs/machino/build/pygit2/pygit2/__pycache__/pygit2\n\ncreating /Users/justin/.virtualenvs/machino/build/pygit2/pygit2/__pycache__/pygit2/__pycache__\n\ncc -fno-strict-aliasing -fno-common -dynamic -arch x86_64 -arch i386 -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch x86_64 -arch i386 -pipe -I/usr/local/include -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c pygit2/__pycache__/pygit2_cffi_4091df83x5470904.c -o /Users/justin/.virtualenvs/machino/build/pygit2/pygit2/__pycache__/pygit2/__pycache__/pygit2_cffi_4091df83x5470904.o\n\npygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:214:35: error: unknown type name 'git_cert'\n\nstatic void _cffi_check__git_cert(git_cert *p)\n\n                                  ^\n\npygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:217:5: error: use of undeclared identifier 'git_cert_t'\n\n  { git_cert_t *tmp = &p->cert_type; (void)tmp; }\n\n    ^\n\npygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:217:17: error: use of undeclared identifier 'tmp'\n\n  { git_cert_t *tmp = &p->cert_type; (void)tmp; }\n\n                ^\n\npygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:217:44: error: use of undeclared identifier 'tmp'\n\n  { git_cert_t *tmp = &p->cert_type; (void)tmp; }\n\n                                           ^\n\npygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:222:37: error: unknown type name 'git_cert'\n\n  struct _cffi_aligncheck { char x; git_cert y; };\n\n                                    ^\n\npygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:224:12: error: use of undeclared identifier 'git_cert'\n\n    sizeof(git_cert),\n\n           ^\n\npygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:226:14: error: unknown type name 'git_cert'\n\n    offsetof(git_cert, cert_type),\n\n             ^\n\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/clang/6.0/include/stddef.h:87:43: note: expanded from macro 'offsetof'\n\n#define offsetof(t, d) __builtin_offsetof(t, d)\n\n                                          ^\n\npygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:227:14: error: use of undeclared identifier 'git_cert'\n\n    sizeof(((git_cert *)0)->cert_type),\n\n             ^\n\npygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:227:24: error: expected expression\n\n    sizeof(((git_cert *)0)->cert_type),\n\n                       ^\n\npygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:235:43: error: unknown type name 'git_cert_hostkey'\n\nstatic void _cffi_check__git_cert_hostkey(git_cert_hostkey *p)\n\n                                          ^\n\npygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:238:5: error: use of undeclared identifier 'git_cert_t'\n\n  { git_cert_t *tmp = &p->cert_type; (void)tmp; }\n\n    ^\n\npygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:238:17: error: use of undeclared identifier 'tmp'\n\n  { git_cert_t *tmp = &p->cert_type; (void)tmp; }\n\n                ^\n\npygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:238:44: error: use of undeclared identifier 'tmp'\n\n  { git_cert_t *tmp = &p->cert_type; (void)tmp; }\n\n                                           ^\n\npygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:239:5: error: use of undeclared identifier 'git_cert_ssh_t'\n\n  { git_cert_ssh_t *tmp = &p->type; (void)tmp; }\n\n    ^\n\npygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:239:21: error: use of undeclared identifier 'tmp'\n\n  { git_cert_ssh_t *tmp = &p->type; (void)tmp; }\n\n                    ^\n\npygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:239:43: error: use of undeclared identifier 'tmp'\n\n  { git_cert_ssh_t *tmp = &p->type; (void)tmp; }\n\n                                          ^\n\npygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:246:37: error: unknown type name 'git_cert_hostkey'\n\n  struct _cffi_aligncheck { char x; git_cert_hostkey y; };\n\n                                    ^\n\npygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:248:12: error: use of undeclared identifier 'git_cert_hostkey'\n\n    sizeof(git_cert_hostkey),\n\n           ^\n\npygit2/__pycache__/pygit2_cffi_4091df83x5470904.c:250:14: error: unknown type name 'git_cert_hostkey'\n\n    offsetof(git_cert_hostkey, cert_type),\n\n             ^\n\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/clang/6.0/include/stddef.h:87:43: note: expanded from macro 'offsetof'\n\n#define offsetof(t, d) __builtin_offsetof(t, d)\n\n                                          ^\n\nfatal error: too many errors emitted, stopping now [-ferror-limit=]\n\n20 errors generated.\n\nTraceback (most recent call last):\n\n  File \"<string>\", line 17, in <module>\n\n  File \"/Users/justin/.virtualenvs/machino/build/pygit2/setup.py\", line 197, in <module>\n\n    cmdclass=cmdclass)\n\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/core.py\", line 152, in setup\n\n    dist.run_commands()\n\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/dist.py\", line 953, in run_commands\n\n    self.run_command(cmd)\n\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/dist.py\", line 972, in run_command\n\n    cmd_obj.run()\n\n  File \"<string>\", line 15, in replacement_run\n\n  File \"/Users/justin/.virtualenvs/machino/lib/python2.7/site-packages/setuptools/command/egg_info.py\", line 186, in find_sources\n\n    mm.run()\n\n  File \"/Users/justin/.virtualenvs/machino/lib/python2.7/site-packages/setuptools/command/egg_info.py\", line 246, in run\n\n    self.add_defaults()\n\n  File \"/Users/justin/.virtualenvs/machino/lib/python2.7/site-packages/setuptools/command/egg_info.py\", line 282, in add_defaults\n\n    sdist.add_defaults(self)\n\n  File \"/Users/justin/.virtualenvs/machino/lib/python2.7/site-packages/setuptools/command/sdist.py\", line 161, in add_defaults\n\n    build_py = self.get_finalized_command('build_py')\n\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/cmd.py\", line 312, in get_finalized_command\n\n    cmd_obj.ensure_finalized()\n\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/cmd.py\", line 109, in ensure_finalized\n\n    self.finalize_options()\n\n  File \"/Users/justin/.virtualenvs/machino/lib/python2.7/site-packages/setuptools/command/build_py.py\", line 26, in finalize_options\n\n    _build_py.finalize_options(self)\n\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/command/build_py.py\", line 46, in finalize_options\n\n    ('force', 'force'))\n\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/cmd.py\", line 298, in set_undefined_options\n\n    src_cmd_obj.ensure_finalized()\n\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/cmd.py\", line 109, in ensure_finalized\n\n    self.finalize_options()\n\n  File \"/Users/justin/.virtualenvs/machino/build/pygit2/setup.py\", line 103, in finalize_options\n\n    ffi, C = get_ffi()\n\n  File \"pygit2/_utils.py\", line 101, in get_ffi\n\n    include_dirs=[libgit2_include], library_dirs=[libgit2_lib])\n\n  File \"/Users/justin/.virtualenvs/machino/lib/python2.7/site-packages/cffi/api.py\", line 340, in verify\n\n    lib = self.verifier.load_library()\n\n  File \"/Users/justin/.virtualenvs/machino/lib/python2.7/site-packages/cffi/verifier.py\", line 74, in load_library\n\n    self._compile_module()\n\n  File \"/Users/justin/.virtualenvs/machino/lib/python2.7/site-packages/cffi/verifier.py\", line 139, in _compile_module\n\n    outputfilename = ffiplatform.compile(tmpdir, self.get_extension())\n\n  File \"/Users/justin/.virtualenvs/machino/lib/python2.7/site-packages/cffi/ffiplatform.py\", line 25, in compile\n\n    outputfilename = _build(tmpdir, ext)\n\n  File \"/Users/justin/.virtualenvs/machino/lib/python2.7/site-packages/cffi/ffiplatform.py\", line 51, in _build\n\n    raise VerificationError('%s: %s' % (e.__class__.__name__, e))\n\ncffi.ffiplatform.VerificationError: CompileError: command 'cc' failed with exit status 1\n\n----------------------------------------\nCleaning up...\nCommand python setup.py egg_info failed with error code 1 in /Users/justin/.virtualenvs/machino/build/pygit2\nStoring debug log for failure in /Users/justin/.pip/pip.log\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mcepl": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/470", "title": "Fails to install", "body": "When running on RHEL-7 with libgit2-0.21.1-1.el7.x86_64 (and python-cffi-0.8.6-1.el7.x86_64 and libffi-3.0.13-11.el7.x86_64) I get this:\n\n```\nmatej@mitmanek: pygit2 (master)$ python setup.py develop --user\nrunning develop\nTraceback (most recent call last):\n  File \"setup.py\", line 197, in <module>\n    cmdclass=cmdclass)\n  File \"/usr/lib64/python2.7/distutils/core.py\", line 152, in setup\n    dist.run_commands()\n  File \"/usr/lib64/python2.7/distutils/dist.py\", line 953, in run_commands\n    self.run_command(cmd)\n  File \"/usr/lib64/python2.7/distutils/dist.py\", line 971, in run_command\n    cmd_obj.ensure_finalized()\n  File \"/usr/lib64/python2.7/distutils/cmd.py\", line 109, in ensure_finalized\n    self.finalize_options()\n  File \"/usr/lib/python2.7/site-packages/setuptools/command/develop.py\", line 51, in finalize_options\n    easy_install.finalize_options(self)\n  File \"/usr/lib/python2.7/site-packages/setuptools/command/easy_install.py\", line 263, in finalize_options\n    self._expand('install_dir','script_dir','build_directory','site_dirs')\n  File \"/usr/lib/python2.7/site-packages/setuptools/command/easy_install.py\", line 1363, in _expand\n    config_vars = self.get_finalized_command('install').config_vars\n  File \"/usr/lib64/python2.7/distutils/cmd.py\", line 312, in get_finalized_command\n    cmd_obj.ensure_finalized()\n  File \"/usr/lib64/python2.7/distutils/cmd.py\", line 109, in ensure_finalized\n    self.finalize_options()\n  File \"/usr/lib/python2.7/site-packages/setuptools/command/install.py\", line 29, in finalize_options\n    _install.finalize_options(self)\n  File \"/usr/lib64/python2.7/distutils/command/install.py\", line 374, in finalize_options\n    ('build_lib', 'build_lib'))\n  File \"/usr/lib64/python2.7/distutils/cmd.py\", line 298, in set_undefined_options\n    src_cmd_obj.ensure_finalized()\n  File \"/usr/lib64/python2.7/distutils/cmd.py\", line 109, in ensure_finalized\n    self.finalize_options()\n  File \"setup.py\", line 103, in finalize_options\n    ffi, C = get_ffi()\n  File \"pygit2/_utils.py\", line 85, in get_ffi\n    ffi.cdef(header.read())\n  File \"/usr/lib64/python2.7/site-packages/cffi/api.py\", line 103, in cdef\n    self._parser.parse(csource, override=override, packed=packed)\n  File \"/usr/lib64/python2.7/site-packages/cffi/cparser.py\", line 166, in parse\n    self._internal_parse(csource)\n  File \"/usr/lib64/python2.7/site-packages/cffi/cparser.py\", line 172, in _internal_parse\n    ast, macros, csource = self._parse(csource)\n  File \"/usr/lib64/python2.7/site-packages/cffi/cparser.py\", line 129, in _parse\n    self.convert_pycparser_error(e, csource)\n  File \"/usr/lib64/python2.7/site-packages/cffi/cparser.py\", line 158, in convert_pycparser_error\n    raise api.CDefError(msg)\ncffi.api.CDefError: cannot parse \"typedef int64_t git_time_t;\"\n:490: Multiple type specifiers with a type tag\nmatej@mitmanek: pygit2 (master)$\n```\n\nNot much reassuring.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vcforge": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/454", "title": "How to set the credentials in clone_repository?", "body": "pygit2.clone_repository('https://github.com/libgit2/libgit2', 'C:\\test') will result:\n'OSError: Failed to send request: A security error occurred'\nHow to set the 'credentials' parameter?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "moos3": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/452", "title": "issue when checking out", "body": "```\n [ERROR   ] Exception 'credential does not implement interface' caught while fetching gitfs remote git@gitlab.local:salt-formula/nodejs.git\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/site-packages/salt/fileserver/gitfs.py\", line 911, in update\n    fetch = origin.fetch()\n  File \"/usr/lib64/python2.7/site-packages/pygit2/remote.py\", line 236, in fetch\n    raise self._stored_exception\nTypeError: credential does not implement interface\n```\n\nrpm installed\n\n```\ngit-2.1.3-1.el7.centos.x86_64\nlibgit2-0.21.1-1.el7.x86_64\n```\n\nOn centos 7\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vtemian": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/423", "title": "GIT_CHECKOUT_FORCE not working for chmod", "body": "Hey there,\n\nMy use case is simple:\n1. Create a file on `master`\n2. Commit that file\n3. Create a branch called `merging`, pointing to that commit\n4. Change the mode of the file\n5. Checkout on `merging`\n\nBut when I checkout, using `strategy=GIT_CHECKOUT_FORCE`, mode changes on that file are still in my working directory. I've made a little script so you can test easly.\n\n``` python\nimport os\nimport stat\n\nfrom pygit2 import clone_repository, Signature, GIT_CHECKOUT_FORCE\n\n\ndef commit(repo, message):\n    author = Signature(\"Vlad\", \"vlad\")\n    commiter = Signature(\"Vlad\", \"Vlad\")\n\n    tree = repo.index.write_tree()\n    repo.index.write()\n\n    parent = repo.revparse_single(\"HEAD\").id\n    return repo.create_commit(\"HEAD\", author, commiter, message,\n                              tree, [parent])\n\n\nremote_url = \"/home/wok/working/test.git\"\nrepo = \"/home/wok/working/another_test\"\nnew_file = \"%s/file_with_another_mode\" % repo\n\nrepository = clone_repository(remote_url, repo)\n\nwith open(new_file, \"w\") as f:\n    f.write(\"some content\")\n\n# initial commit\nrepository.index.add(\"file_with_another_mode\")\nremote_commit = commit(repository, \"added new file\")\nrepository.checkout(\"HEAD\", strategy=GIT_CHECKOUT_FORCE)\n\n# new branch\nrepository.create_branch(\"merging\",\n                         repository.lookup_branch(\"master\").get_object(), True)\n\n# change file's mode\nos.chmod(new_file, stat.S_IEXEC | stat.S_IWRITE | stat.S_IREAD)\n\n# commit changes\nrepository.index.add(\"file_cu_alt_chmod\")\nlocal_commit = commit(repository, \"chmod new\")\n\n# checkout on merging\nrepository.checkout(\"refs/heads/merging\", strategy=GIT_CHECKOUT_FORCE)\n```\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/5469f0c891b7fe11b19aaf929a27595f017ed648", "message": "Remove items from index, based on stage"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14758155", "body": "Why not `from_c` like in `Index.from_c`? Is more consistent this way\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14758155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14817831", "body": "Why do you need to iterate? You can do it with 2 if statements:\n\n``` python\nif 'strategy' in kwargs:\n  copts.checkout_strategy = kwargs['strategy']\n\nif 'directory' in kwargs:\n  target_dir = ffi.new('char[]', to_str(kwargs['directory']))\n  refs.append(target_dir)\n  copts.target_directory = target_dir\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14817831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14817881", "body": "I think you delete by mistake an `h` from `Show`\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14817881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "djmattyg007": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/412", "title": "Making Repository.checkout() more pythonic", "body": "I know this has been discussed before, in #139, but it isn't very clear how\nfar the discussion got. I think it would be nice to have a more pythonic\ninterface, and the prime example I can think of is to allow passing SHA1\ncommit hashes to the Repository.checkout() method.\n\nMy recent interest in pygit2 stems from the fact that I have started\ndeveloping a dependency manager in Python. Unlike other dependency managers\nsuch as Composer, which target a specific language and wrap around many\ndifferent code distribution methods, mine will never aim to be anything more\nthan a wrapper around git.\n\nAn important part of dependency management is (obviously) to be able to lock\ndependencies to a specific version. I want my users to be able to be able to\nspecify any sort of reference, be it a branch, a tag, HEAD, or a commit hash.\n\nAt the moment, Repository.checkout() handles branches, tags, and HEAD, but it\ndoes not handle commit hashes. This means that I need to verify whether or\nnot I've been passed a valid commit hash in my own code, and make decisions\nbased on this. This feels like a violation of the DRY principle, and this\ndetection could break unnecessarily if the pygit2/libgit2 API changes.\nAdditionally, adding support for commit hashes more closely mimics the\ncommand-line 'git checkout' command that people are already familiar with.\n\nI would like to get an idea of how other people feel about this proposal\nbefore I start hacking away at the code.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/410", "title": "Add instructions to the readme to assist new developers with contributing to the project", "body": "In the last few weeks I've struggled a fair bit trying to work out how to do basic things such as compile the documentation, because it was all assumed knowledge. I would like to propose adding a section to the readme that details a few basic things:\n- How to compile the documentation\n  \n  `python setup.py build`\n  `cd docs`\n  `make html`\n- How to run the tests (I had to dig through a few of the various files in the tests directory before finding this one out)\n  \n  `python setup.py test`\n\nI think there is one more that I can't remember right now. It wouldn't surprise me if other people have suggestions as to what should go into this, and how it should be presented.\n\nI would also like to propose moving the changelog out of the readme file and into a separate changelog file, so as to reduce the size of the readme file, making it easier to look at.\n\nI'd appreciate some feedback before I go ahead and create a pull request with these changes.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jdavid": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/393", "title": "Make docstrings to be nice with pydoc", "body": "In some doc-strings we use formatting rules specific to Sphinx, but which make the interactive help (pydoc) to look bad.\n\nThis issue is about:\n- defining how we should write some recurrent stuff, like documenting input parameters and return values.\n- rewrite the doc-strings so they look fine on pydoc, even if that means losing some features with Sphinx, like cross references.\n\nNote. If we had the resources, we would do like Python does, and document things twice: once in the doc-strings and a feature rich version in the rst files. But in any case the doc-strings must be usable with pydoc, so lets start with that.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/bf74b2a99341437a755390c692ae04a21737c9d7", "message": "Merge remote-tracking branch 'white-gecko/patch-1'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/a1494574fff619ef135119487980d751877af20c", "message": "Fixing ImportError in some cases, bug #658"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/9b047fe18a4313596e567dda463554f6d9a416d6", "message": "Fix running the tests with tox"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/5c96a46e2bfa2fa35d10a42fb51271da50d5685f", "message": "Release 0.26.3"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/91dfaf2a07225865b7bd09a0f1a49e933462c2f8", "message": "Review Patch, fixes #757"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/c4e026095e7ce19793a0c811d35a1074f606b6a2", "message": "New Diff.deltas iterable"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d1c954f40f96816d3695a1eeb5d22a6beb32416d", "message": "Release 0.26.2"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/4804143f5590cf989f162973ec3a99c8314607bc", "message": "test: use self.assertXXX not assert\n\nBecause we use unittest, not pytest."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/8944d0208a7468ec7d378247356677829b87766b", "message": "Merge remote-tracking branch 'cecedille1/fetch-prune'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/3adda5509e5affb6a2f6f1daa0d02ee9e2d6d91b", "message": "docs: diff, add missing members"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/e06af3c786aa37d7da3e5266617672ba049946c3", "message": "Merge remote-tracking branch 'brandonio21/depfix'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/0e0a525aeec111383f0dda5727d14af311613ef7", "message": "docs: consistent style for documentation strings"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/fe0e3ec06229ba76547a3953d7b7548562394910", "message": "Skip tests that require network, if there is not\n\nFixes #737"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/4e60fb21f9ffaade3514d52512760046f0fc2ff3", "message": "Release 0.26.1"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/9a091b098443cd7b13f9762d7f6aeca2592b1532", "message": "Fix compile warning"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/890ec5d5097097ddc83a520893f0d2e0ba5b92f0", "message": "Merge remote-tracking branch 'rcarz/repo-free'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/24d385a88f9a4e2540ea2c04fa86d76e7c4e17ee", "message": "Merge remote-tracking branch 'rcarz/credtype-username'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/62c70e852da23bcb60e64996f6326a3e2a800469", "message": "Release 0.26.0"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/e81f45c4c69b75bf8d5f7f66a487dd2a828a8124", "message": "Merge remote-tracking branch 'nhynes/br-is-co'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/295166bb64830cfb808f4cf93337ade35590af4a", "message": "Fixing AppVeyor & Travis\n\nAppVeyor, upgrade to 0.26\nTravis, disable pypy3 for now"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/f841c62fa69861cf6beddcff0bdac151afa8e8aa", "message": "Drop support for Python 3.2, cffi 1.10 doesn't work with"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/8559b2da20139e1ea158bc0dd47c6bc687a17efe", "message": "Release 0.25.1"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/9325494d6f203de6b1a43d34c86a0ca9545f2c9e", "message": "docs: fix references"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/74717bed554efe3f699516e92660ab3b3b0d496c", "message": "Merge remote-tracking branch 'tmr232/references-object'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/706c60c4ab1ff20ad8b80434d24692c651142266", "message": "Clean some cffi warnings\n\n\"has no values explicitly defined\""}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/0733ba4da3e3dbcf19cd8de4f53f1c9c3cd5c785", "message": "docs: fix make html"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/dd57c9b3669ddf00b1d323693f5d962f04b111b2", "message": "Fixing error on Python 2.7 / Windows 64bits"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/f2c89a760a2230c853ca9d7f25794233e5e9b51e", "message": "(partial) review the way we handle Python int/long"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/f37cf25b8e22971dd9fd70c5ab29e30ecd8070d2", "message": "Fix warning, and coding style a bit"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/11ff7a99eb30d3f08456ab319403eee6d11ffb82", "message": "Options, improve error messages"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/9335819795b80c0f728b3beb19f060a6636a99f9", "message": "Opening repos, raise more meaningful exceptions"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/5a940987cd9134e5f7cff933c5ccafb81acd13ab", "message": "Add support for Python 3.6"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/354d56a95c638fbf36d7a1e9d88dfb8dbf5457d4", "message": "Update copyright years"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/803b1cb15421e8e744a2a6486eda24475779d001", "message": "cffi 1.10 not yet supported"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d622e876547be003f15e780f15f63f5cf32ee28a", "message": "test options, avoid side effects\n\nThis makes tests in PR#692 to pass"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/819cbff552e46ac4b8d10925cc422a30aa04e78e", "message": "Remove some tabs"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/68817aad4f3da4065cf2d7da1ab3812b9f0e4a54", "message": "Release 0.25.0"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/0b513d57fadda2041dda44b05cd3be12ece8f559", "message": "Merge remote-tracking branch 'carlos/next'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/950249442e229932c27269fd76667d3720becfd4", "message": "Merge remote-tracking branch 'bisho/master'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/66280af83a75d5b680c1014130e4bbbc9b75b6e3", "message": "Release 0.24.2"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/b2a34bd9011b4e060e1277b7ffb173163b8379fd", "message": "Merge remote-tracking branch 'fourplusone/master'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/865c2f0e829a8c5cefcdd0573ceac27874e2c0b8", "message": "Revert \"Update appveyor.yml\"\n\nThis reverts commit faf6a63d25d9c12d7480e9b4faf4d6531b13b7c3."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/6d6931cd264cc04692907495d296ac611beda84a", "message": "Merge remote-tracking branch 'fourplusone/fix/windows-tests'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/9b364dc7f36c2fba06fabb016c520812775d7e1e", "message": "Readme, badge to appveyor"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/554f1673531751ede648e8b19812d01ecb7d468b", "message": "Merge remote-tracking branch 'mrh/fix-non-ascii-errmsg'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/4fa43e234ec0b360de62f948b10dab10e8c7afc0", "message": "docs, update version"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/4416f65fe12155e6da6bbe174a752608dce6d652", "message": "Release 0.24.1"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/30f539ff35b25b50d4e6aaad5978ca0bc949d4a9", "message": "Merge remote-tracking branch 'seanfarley/smf/pygit2-upgrade'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d8fd2e78d8ac6acffb2316db7ded21b162d9f28d", "message": "Merge remote-tracking branch 'ignatenkobrain/gh620'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/22021c67fc63f8fa6bad5febb9e2a02d701cb20f", "message": "Release 0.24.0"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/391a3a74e9337883ab8c393a1491803feba30d05", "message": "Merge remote-tracking branch 'thom/tox'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/141f0abe62e76b91a76928bf523c1ac465f4d3e2", "message": "docs: add Repository.path_is_ignored"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/6b926494db71b44a3aff719e06e352af8f3c377b", "message": "Merge remote-tracking branch 'ccope/gitignore'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/33cf1a1ca2cca27184186b7dbbad11b8928b5bbc", "message": "travis: test with Python 3.5 too"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/fa60e2233d16d6b27640c27d0ba62a410d548c70", "message": "Release 0.23.3"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/7a8474cd44e4aaaa52ad9163d7d1bf971255662f", "message": "Change Signature default encoding to UTF-8\n\nFixes #581"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/13f4ddec1da60fd05fb2946d6c61f3fb0d627da3", "message": "Fix create_blob_fromiobase with Python 2.7"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/f92d38e25fcb1c43517a4b7d33942ad5334828db", "message": "Merge remote-tracking branch 'frutiger/blob_from_iobase' into blob_from_io_base"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/70edbf256a49dd8a4b8cc16cfe41ae0e2a9a4cc5", "message": "Update copyright years"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/203335bd63cb43c16b5ecbfa60040048d785d5a5", "message": "Trying to fix install with pip"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/64150d3535ac3dd8d156f5482c25bb61e2d1c4ea", "message": "Release 0.23.2"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d25a0d61def974c65f5c9801b746e784b7b7f198", "message": "Fix error introduced accidentally in previous commit"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/f5aa1829ac2e3ec9f0e4430e391a979db804a83d", "message": "Do not use hasattr, not robust\n\nIn Python versions older than 3.2 hasattr is not robust as it masks real\nerrors. And usually is not efficient as a call to hasattr is often\nfollowed by another call to getattr. It is best to avoid using it\ncompletely.\n\nSee https://docs.python.org/3/whatsnew/3.2.html#other-language-changes"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/9db87373645ea031cecefe92e7d14f9d65370755", "message": "Update changelog"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/681c7d43413d2b25db1fd0ecf7614fa2e10f47a7", "message": "Fixing pip install pygit2\n\nRegression in the latest release, \"pip install pygit2\" fails if cffi is\nnot already installed. Should be fixed with this change, not tested."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/8a66da12786cd02891a627d640df1b90a6712406", "message": "docs: remove reference to old Remote.credentials"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/0d2bc05708d9c247b46247bebabfdc7b185194fa", "message": "Merge remote-tracking branch 'carlos/diff-delta'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/e4ef8ea5c280f898987ae0e24c2f69d93be75c19", "message": "Release 0.23.1"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/50f4b20e7d965cec873c95564970cc557b30a119", "message": "Update changelog"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/ade211de60754edd513ea5239b6fcd4883faaf6d", "message": "tests: fix warning"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/8911416d4f8ab5baad9d22588f7239f752587064", "message": "Merge remote-tracking branch 'olasd/add-type-to-treeentry'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/29a8dbc6b2d7a2ed4bdae13ff7b47754f0803d46", "message": "Temporarily deactivate travis for PyPy and PyPy3\n\nUntil travis supports PyPy 2.6, and there is a new release of PyPy3\n\nUpdate docs regarding cffi and PyPy"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/27e3450232e5a4090fc92e37966a79d90f5e9d3c", "message": "Get ready to release v0.23.0"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/c5eae8942d53b48b8715d84abed9a44b82cdd51b", "message": "Merge remote-tracking branch 'carlos/development'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/2fdfdcdc4b5210e9e147d26179a3cfe13090e8f2", "message": "Get ready to release v0.22.1"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/6939b9b20355822d9f575fb6b6d086b6d23cec85", "message": "Fix indent error"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/060b3fbaecf698eca69cf2509d793a516a9ebd0a", "message": "Update changelog"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/e46119838b9ad7fcee0958976284d34febd12047", "message": "Merge remote-tracking branch 'rmoehn/cherry-pick-cleanup'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/8a196f656b29350ae28de69e6d8ce91d2d5c57a7", "message": "Merge remote-tracking branch 'cjwatson/merge-index-path-refs'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/deb50536f0c3d6dc6fe78fcfd979048e56793674", "message": "docs: remove manual singatures from py files\n\nThese are only needed in C code. With Python files the signatures are\nautomatically generated. The only drawback is the return value is not\nincluded in the signature, so document it in the body of the docstring."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/6da3d8f8a83ea3fa035d5bd937017e292b2f59f8", "message": "Fix a couple of warnings shown by pyflakes"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/52dd956896219657d582a6bd57f81dbd76c40a7c", "message": "Merge remote-tracking branch 'rmoehn/optional-args'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/1f98ba64950d39dd76e5ac0a1c01e829d8c2e58d", "message": "docs: fix build errors"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d63c2d4fd7e45d99364b4d2ccc6a4dafc9b51705", "message": "Merge remote-tracking branch 'carlos/diff-stats'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/c072a77e4b907fecdc29838c6a8e982ccbe05694", "message": "Merge remote-tracking branch 'rmoehn/diff-iter'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d3d60c75f8cf681914843bb0fbb5c403a2b7e132", "message": "Merge remote-tracking branch 'rmoehn/create_commit_arg'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/1f755c601c28b16bc2791844951c80d0878f6a57", "message": "Fix indentation style"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/da98890bd1f0eee37f42bea78fd1d4a23200cde5", "message": "Add DiffHunk.header\n\nCommes from PR #346"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/8b05b296c2726c30d9f7308c652101f996dc6f57", "message": "New DiffDelta.status_char()"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/b2ffc8a8d5a278732e45d9babd6697ba4616963a", "message": "New DiffFile members: size, flags and mode"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/e32df6a1c8455c4dd190f40ba3ac0323af5a9419", "message": "internal: add wrap_diff_hunk"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/fe849f659e22f03b7e8400ba4c9ea61d634205b6", "message": "Update changelog"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/f5485bb86f210328232f51c9e04b894fe26cf935", "message": "Merge remote-tracking branch 'pks/bare-conflicts'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/318c6a8bee09e5291e55164d5a30544b7d775c72", "message": "tests: fix warning, do not use deprecated assertEquals"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/50a70086bfc72922b63a6e842582021a2bad0b24", "message": "Merge remote-tracking branch 'pks/submodules'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/bc668751a4b35fed7afc01d7f77423a20fa93650", "message": "Fix type check in Diff_getitem\n\nFixes issue #495"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/adb351f7b389edb6a536e914d047c72e96dd7454", "message": "Show at least git error code when no git error message is available\n\nShould help resolving issue #494"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/fbb11775a3863d97fed94f92fa1009dbd8933aed", "message": "Update changelog"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/c7609efc4bc9c210475cde0d3b7af101cf5a1617", "message": "Merge remote-tracking branch 'rnicoll/cherrypick'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/82d521432193f3f3cdfb4de46b2b7e3ff30f988b", "message": "Merge remote-tracking branch 'rmoehn/master'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/3d896769d050becac28d5f7d449cc2ae461d0a4c", "message": "New DiffLine\n\nComes from PR #346\n\nOne difference, DiffLine.origin is a T_CHAR instead of T_OBJECT"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/7130df3a5e19dd2f064f609483b74c3df307bdad", "message": "Get back iter(Blame)\n\nWas lost in commit cd0842592"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/94be744ba64325afb3919a31902d87f4176f8d1e", "message": "docs: remove reference to LIBGIT2 in OS X notes\n\nAs disscussed in PR #448"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/40946cd7959e612ea0e3b69235750219bca8987e", "message": "Merge remote-tracking branch 'holgi/master'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d64dd15bd2b766af81ea0d3825cbd8be1fee8dbb", "message": "Merge remote-tracking branch 'carlos/merge-trees'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/fa380c0adbf6dc872e39e00e6e59fe50bec412b2", "message": "Merge remote-tracking branch 'gandalf/archive_enh'\n\nConflicts:\n\tpygit2/repository.py"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/718a2df1d542090ed48dcec1e70b60637bf0355d", "message": "Fix building the docs"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/30e57e13e368667944f876f49828701defa2ef43", "message": "Merge remote-tracking branch 'carlos/ahead-behind'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/7f21f6eb632e84f77eac7030082c820047aa221e", "message": "Expose the pygit2.GIT_REPOSITORY_INIT_* constants\n\nFixes #483"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/961d007b02e9c5338b28136c635d565ea46ea2f4", "message": "Patch.line_stats replaces .additions and .deletions\n\nComes from PR #346"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/909e03d8fcdfe80ab0d5d892b70b8a0b5691cdb4", "message": "New DiffDelta and DiffFile\n\nComes from PR #346"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/8881b75aaab0eaba06a60089a0e7c788ceaed207", "message": "internal: split patch.c from diff.c\n\nComes from PR #346"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/e7fdaf2510ae332daee81eba262df8f6102a259f", "message": "Fix link to travis image (use master)"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/061961f119e5b55e32ee953abf06d126c2b82e00", "message": "Rename pygit2.Hunk to pygit2.DiffHunk\n\nComes from PR #346"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/c62a79cf81eb98b3903a9977ed977c73e3782b5a", "message": "Start changelog for future 0.22.1 release"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/8a6e61551c9f6392e29410a20187284dee38e264", "message": "Merge remote-tracking branch 'Sheeo/master'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/126308403b2678ed5753b9ad6fcfdfab20946bbe", "message": "Get ready to release v0.22.0"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/9da91e554dd5be43506f53440ae6f2a5c56f4668", "message": "Changelog for upcomming v0.22.0 release"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/beaaca7f63374969ce4986a5d0a3f88aeb7fb95f", "message": "Fix type of RefLogEntry.oid_old and RefLogEntry.oid_new\n\nThis was left from PR #449"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/b5381635367790101536665e1c3bf5b5a08216de", "message": "Merge remote-tracking branch 'carlos/development'\n\nConflicts:\n\tpygit2/remote.py"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/9c9b925da8045b77d291d742db95b3b757b4e3b3", "message": "Revert \"Mentioning libssh2 in remote's pydoc\"\n\nThis reverts commit e807ad43d725da06bfc34187b387270baea74887."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/751694", "body": "I see from the traceback that you are using Python 2.6.1, it contains some bugs regarding zip files, like [issue 4710](http://bugs.python.org/issue4710). Could you try with a more recent version?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/751694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753416", "body": "From the traceback it looks like this has nothing to do with my patches, no regression here.\n\nSupporting Python 2.5 would take more work. I think it is not worth the effort, it is an old version and pygit2 is clearly understaffed. I think it is more interesting to spend time on supporting new versions (Python 3) than on supporting old versions.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753996", "body": "Accidentally I have reproduced the traceback you found with Python 2.5. It has nothing to do with 2.5 actually.\n\nIt happens pygit2 has two ways to run the tests. If setuptools is installed it will run the tests in-place. But if setuptools is not installed then you need to install pygit2 before running the tests (otherwise you will get that traceback), that's what the documentation says anyway:\n\n```\n$ python setup.py install\n$ python setup.py test\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754027", "body": "About Python 2.6, it works fine.\n\nJust tested myself and reproduced the same error with 2.6.1:\n\n  IOError: [Errno 20] Not a directory: '/tmp/tmp_W_Hl9/testrepo/bye.txt'\n\nBut the tests pass with 2.6.2 (which was released almost two years ago). By the way I use myself Python 2.6\n\nAnyway, I am going to replace zipfile by tarfile as you suggest, since it looks more robust (the tests may even pass with 2.5)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754072", "body": "Replaced zipfile by tarfile and now the tests pass even with Python 2.5 (on GNU/Linux, did not check Mac or Windows)\n\nIt was a bad idea to use zipfile in the first place.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754264", "body": "cool\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/831360", "body": "Hello,\n\nI have merged the branch 'add-commit-attributes' by John Szakmeister. This adds Commit.parents, I needed that to\nimplement the equivalent to \"git log -- path\".\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/831360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/833919", "body": "This branch does not work after the recent changes to libgit2. I withdraw this pull request to open a new one.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/833919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/847764", "body": "You can try my fork of pygit2 where this has been fixed:\n\n```\ngit://github.com/jdavid/pygit2.git\n```\n\nI asked for my changes to be merged, see https://github.com/libgit2/pygit2/pull/11\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/847764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/876445", "body": "There have been some more commits since I made this pull request, most important to keep pygit2 working after the changes to libgit2. But there are a few enhancements too:\n- New module function 'init_repository'\n- Added 'IndexEntry.path'\n- Started documentation on using pygit2\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/876445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/886641", "body": "The changes have been merged upstream, so this is fixed, thanks.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/886641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/889196", "body": "pygit2 works with the 'master' branch of libgit2, commit b5c5f0f8086ee4\nis the tip of the 'development' branch\n\nOn Fri, 18 Mar 2011 05:31:07 -0700\nhonza\nreply@reply.github.com\nwrote:\n\n> Installed latest [libgit2][libgitsha], zlib and openssl. Using\n> [this][pysha] pygit2 revision, I can't get it to install:\n> \n> bash-3.2$ sudo python setup.py install\n> running install\n> running bdist_egg\n> running egg_info\n> writing pygit2.egg-info/PKG-INFO\n> writing top-level names to pygit2.egg-info/top_level.txt\n> writing dependency_links to pygit2.egg-info/dependency_links.txt\n> reading manifest file 'pygit2.egg-info/SOURCES.txt'\n> writing manifest file 'pygit2.egg-info/SOURCES.txt'\n> installing library code to build/bdist.macosx-10.6-universal/egg\n> running install_lib\n> running build_ext\n> building 'pygit2' extension\n> gcc-4.2 -fno-strict-aliasing -fno-common -dynamic -DNDEBUG -g -fwrapv\n> -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch i386 -arch ppc\n> -arch x86_64 -pipe -I/usr/local/include\n> -I/System/Library/Frameworks/Python.framework/Versions/2.6/include/python2.6\n> -c pygit2.c -o build/temp.macosx-10.6-universal-2.6/pygit2.o\n> pygit2.c: In function \u2018Repository_walk\u2019: pygit2.c:356: error: void\n> value not ignored as it ought to be pygit2.c: In function\n> \u2018Walker_sort\u2019: pygit2.c:1838: error: void value not ignored as it\n> ought to be pygit2.c: In function \u2018Repository_walk\u2019: pygit2.c:356:\n> error: void value not ignored as it ought to be pygit2.c: In function\n> \u2018Walker_sort\u2019: pygit2.c:1838: error: void value not ignored as it\n> ought to be pygit2.c: In function \u2018Repository_walk\u2019: pygit2.c:356:\n> error: void value not ignored as it ought to be pygit2.c: In function\n> \u2018Walker_sort\u2019: pygit2.c:1838: error: void value not ignored as it\n> ought to be lipo: can't open input file: /var/tmp//ccSxjred.out (No\n> such file or directory) error: command 'gcc-4.2' failed with exit\n> status 1\n> \n> [libgitsha]:\n> https://github.com/libgit2/libgit2/commit/b5c5f0f8086ee4e9bccf0703386fd5219ac380c2\n> \n> [pysha]:\n> https://github.com/libgit2/pygit2/commit/6c7df765c1a9a186e721826121f50d0286b4040e\n\n## \n\nJ. David Ib\u00e1\u00f1ez\nItaapy http://www.itaapy.com         Tel +33 (0)1 42 23 67 45\n9 rue Darwin, 75018 Paris              Fax +33 (0)1 53 28 27 88\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/889196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940490", "body": "I hope to update pygit2 by tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940505", "body": "I don't like the \"GPLv2 + exception\" for pygit2 either. Personally I would prefer LGPLv3, that would be fine to you?\n\nTo change the license the agreement of everybody that contributed to pygit2 is required, starting by Dave Borowitz, who has written more than half of it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/946638", "body": "Ongoing work in the v011 branch, pygit2 compiles again and you can import it, but unit tests do not yet pass.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/946638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/958366", "body": "Just merged the changes to the master branch, should work now with v0.11.0, please check.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/958366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/963871", "body": "This is cool, I need this feature very much.\n\nSome remarks:\n- PyObject_New will return NULL on error, handle this case\n- git_tree_lookup may also return an error code. Well, maybe not in this particular case,\n  (did not check the implementation), but it would be safer to check the error code anyway.\n- there is a reference counting error, refcount must be increased for the repo,\n  add the line \"Py_INCREF(self->repo);\"\n- coding style: there is a mix of spaces and tabs, use 4 spaces for each indentation\n  level, both in the C and Python files\n- coding style: there is whitespace at the end of a line in pygit2.c\n\nThank you very much.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/963871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/969215", "body": "I have merged your changes into the new development branch. The unit tests pass from Python 2.5 to 2.7, thanks!\n\nOnce the development branch of libgit2 lands, I will merge development into master and this issue will be closed.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/969215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1131139", "body": "Thanks for this contribution.\n\nCould you rebase against the development branch and resubmit? That's where new work happens right now, and this way I will only test once.\n\nThe memory leak may have been fixed in the development branch, could you check that?\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1131139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1132143", "body": "I merged into the development branch, and verified the memory leak.\n\nHowever, I do not understand the unit test, test_iter, it does not prove much. It even can be considered plain wrong to say that both lists are different. It would be better to test something different, at least that the length of the list matches the length of the index.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1132143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1221580", "body": "@noahdesu there has been a new release of `libgit2` recently, if you are getting the error above it is probably because you have not updated `pygit2`. Please verify you're using the latest commit from the master branch, for both `libgit2` and `pygit2`.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1221580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1439268", "body": "Fixed by commit 215893328cf. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1439268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1532225", "body": "One first comment concerning coding style. These commits add trailing white spaces and use tabs, could you please fix that?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1532225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1532247", "body": "Since I am at it... please follow Git conventions to write commit comments. That's one line for the title (max 50 chars), one blank line and then the description. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1532247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1554579", "body": "I have merged the first two commits. Just a question about the first one, what do you use the 20 bytes binary string for? Maybe a cache in GitPython?\n\nAbout the other two commits, could you remake them regarding coding style? You make some mistakes in the first commit and then fix them in the second one, please make clean patches.\n\nAnd do not remove the `test_leak.py` file, just rename it or move it to the root. The memory leak has not yet been fixed so I prefer to keep the script around.\n\nAnd, please make the commit description 79 chars per line maximum.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1554579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1555070", "body": "Why have you called it `attributes` and not `mode`, like in the C struct?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1555070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1571354", "body": "libgit2 v0.14.0 has been released, and I have updated pygit2 so it compiles and the tests pass\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1571354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1574620", "body": "Finally fixed the memory leak, see commit a139335098d32\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1574620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1590409", "body": "Finally I fixed the leak, and removed the obsolete test script. So now there is only one commit to redo.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1590409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1654218", "body": "Hello,\n\nIt does not work:\n\n```\n$ python setup.py test\n[...]\npygit2.c: In function \u2018Repository_status\u2019:\npygit2.c:755: error: \u2018dict\u2019 undeclared (first use in this function)\npygit2.c:755: error: (Each undeclared identifier is reported only once\npygit2.c:755: error: for each function it appears in.)\nerror: command 'x86_64-pc-linux-gnu-gcc' failed with exit status 1\n```\n\nAlso, do you really need to add this include ?\n\n```\n#include \"git2/status.h\"\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1654218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1662395", "body": "For some reason when I run \"python setup.py test\" the status test does not run (check the test/**init**.py file).\n\nThe method name \"StatusTest.test_hide\" does not seem appropriate, shouldn't it be 'test_status'?\n\nlibgit2 should expose the status API to the public, I think that deserves an issue (or pull request) to be open.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1662395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1698770", "body": "Check https://github.com/libgit2/libgit2/issues/127\n\nThe issue is supposed to be fixed, though I have not yet verified by myself. Try to reproduce the problem with libgit2, to see if it is a bug there. At issue 127 you will find some C code that may help to start. Be sure to use latest libgit2 (development branch).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1698770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1734459", "body": "Actually, there was one missing `Py_INCREF`, fixed by commit 7f7a512e66, thanks for reporting.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1734459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1736749", "body": "Just verified, it is a bug in libgit2, I have added a comment to issue https://github.com/libgit2/libgit2/issues/127 with a test program.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1736749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1764397", "body": "Hello,\n\nI don't like much the idea. Here are other, closely related, disadvantages:\n- Will make pygit2 vulnerable to Cython bugs\n- Loss of control on the generated C code\n- Likely not as fast (related to the reason above)\n\nIt is impressive how you have rewritten pygit2 in just one day, it speaks well of the virtues of Cython. But I don't think it is the best fit for pygit2.\n\nThe Python community is quite large and interest on libgit2 should raise overtime; pygit2 is already relatively well maintained, 13 people have contributed so far with patches, others have done so by reporting issues. I think libgit2 deserves hand-written carefully tuned Python bindings, and that there will be enough developers/testers interested to make it happen.\n\nBest regards,\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1764397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1766608", "body": "I find that proposal (pygit2 _and_ cygit2) interesting, it looks there are more than enough developers interested in one or another, or both (searching a little I found someone else had the same idea, https://github.com/pyos/cygit2).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1766608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1771264", "body": "How to share the unit tests?  Maybe you could use Git submodules?\n\nI have open an issue for Python 3 support.\n\nRegarding speed, for what I need pygit2 for, 1% slower would already be too much. It depends on the usage scenario I guess, in my case I use Git as a brick in a database system used in a web application (many requests from clients, blah blah ...).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1771264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1784014", "body": "Some stuff like SHAs and blob contents should be byte strings, other stuff like commit messages and user names should be text strings (defaulting to utf-8).\n\nBut the API will likely accept, in many places, both byte strings and text strings, mostly to reduce the pain of supporting both Python 2 and Python 3 (especially for the unit tests).\n\n(Will try to find an slot to fix the tests in the following days.)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1784014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1784292", "body": "Just found the `from __future__ import unicode_literals`, so we could write the unit tests properly. Except this was introduced in Python 2.6 and we still support Python 2.5\n\nPersonally I would prefer to drop support for Python 2.5, but this may bother some. Guess I will write a message to the mailing list...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1784292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1785814", "body": "Support for Python 3 has been started.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1785814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1789805", "body": "One of the things I like about Python 3 is it is more strongly typed regarding strings:\n\n```\n$ python2\n>>> u'xxx' == 'xxx'\nTrue\n\n$ python3\n>>> 'xxx' == b'xxx'\nFalse\n```\n\nDon't you think it would somewhat betray the spirit of both Python 3 and Git, to make pygit2 accept both, text and byte strings? To me an Hex SHA can only be a byte string.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1789805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1790110", "body": "Just to comment about the speed stuff and more precisely how I see pygit2.\n\nI think pygit2 should be low-level, expose the features of libgit2 to the Python developer and that's it.\n\nThen I guess other developers will use it to write higher level libraries with richer functionality. I believe the developer of GitPython has already started to use pygit2, maybe Dulwich will follow. I myself maintain such a library (itools.git).\n\nThis is important. It is related for instance to question discussed in issue #43, whether pygit2 should accept unicode strings for the Hex SHAs or not.\n\nCheers,\n\nPS : @pyos you are right Python is not the best choice regarding speed, but...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1790110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1791183", "body": "Typing `b\"7b8ae0e10c6593dafca6680db4575514bd5b9475\"` is perfectly readable.\n\nThe case with filenames is not similar. You can have filenames with non-ascii characters, typing `open(\"canci\u00f3n\")` makes sense. But an Hex SHA cannot have anything else than numbers and letters from `a` to `f`, it is not free text.\n\nAccepting text strings may be a convenience, I acknowledge that, but there is nothing fundamental to it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1791183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1791231", "body": "Well, that's a different proposal, you are asking to use the type to distinguish hex-sha from raw-sha.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1791231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1792199", "body": "@encukou Ok about `'wb'`, the convenience argument can be enough. Agree about author names, paths, ...\n\n@pyos I think you are right.\n\nIn any case the behaviour will be the same for Python 2 and 3.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1792199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1820832", "body": "The master branch of pygit2 compiles against the development branch of libgit2.\n\nThanks for the patch.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1820832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1831947", "body": "I think this is fixed, please check.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1831947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1886992", "body": "Does have the tag object an optional header `encoding` that applies to the tagger, like commit objects? A question for @peff I guess.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1886992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1962592", "body": "Yes it is expected. Use the `v0.14.0` tag of pygit2 if you want to use it against libgit2 master branch.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1962592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2190600", "body": "Hi,\n\npygit2 has _not_ any global state, and libgit2 should be thread safe\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2190600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2212894", "body": "Thanks for the patch.\n\nI would like to allow prefixes to be used wherever possible. To do so `py_str_to_git_oid` should return the length of the oid on success, and 0 on error. Then it should be easy to implement `repo[\"c57e521\"]`, for instance.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2212894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2223251", "body": "@carlosmn I have open issue https://github.com/libgit2/libgit2/issues/433\n\nI do not have any code, just found the difference by reading the source.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2223251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2301640", "body": "The libgit2 issue has been fixed, so we can drop the `prefix_len--` stuff.\n\nAlso, I prefer not to add a new method, modify `Repository_getitem` instead.\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2301640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2350192", "body": "The commit above changes `py_str_to_git_oid` as discussed, and updates every call to it this way:\n\n```\nlen = py_str_to_git_oid(py_oid, &oid);\nTODO_SUPPORT_SHORT_HEXS(len)\nif (len == 0)\n```\n\nNow, there are 11 places in the code with these lines. If you want to make a new pull request that updates at least `Repository_getitem` it would be much appreciated.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2350192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2439734", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2439734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2467217", "body": "Just updated the issue title and description.\n\nNow pygit2 works the same on Python 2 and 3 (be it good or bad). And the discussion in this issue has been from the beginning about when to accept/return a text string or a byte string. So just fixed the issue title and description to reflect this.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2467217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2474165", "body": "Fixed in libgit2 development branch.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2474165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2647775", "body": "I think a raw programming interface should be added.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2647775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2651721", "body": "The API for Python 2 and 3 must be as close as possible, this will smooth the transition for developers moving from 2 to 3. And will keep the code simple, from the C API point of view `PyUnicode` is still `PyUnicode`, on Python 2 and 3. This invalidates the third approach.\n\nThen, what happens if two developers with different locales work on the same project? It must work. So things like names in tree entries should be in UTF-8.\n\nWe can use `surrogateescape` on Python 3 because it is available there, and add the raw API for both Python 2 and 3.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2651721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2666741", "body": "The raw API is a must, not only because of this issue. As you say (@brodie) pygit2 is a low level library and so it must expose the bytes to the developer if he wants to. Not a good idea trying to make the library clever than the developer. For instance (yep, the performance argument again), I may want to bypass the decoding/encoding cycle to speed up something. Anyway, it is up to the developer to decide if he wants bytes or text strings.\n\nThe raw API is also most urgent to implement, since not having it is a regression of v0.15.0 regarding v0.14.0\n\nAbout the all  UTF-8 or all locale discussion, it is the _all_ word that makes me trouble. At least at a first glance `Repository.workdir` looks to me quite different from entry names in a tree.\n\nTrying to guess anything is a really bad idea.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2666741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2680709", "body": "Looking closer to the code I think I will start with the most easy, the commit and tag objects. These are well specified by Git, we have either an explicit encoding or a default UTF-8. So if the content of the commit/tag does not match the encoding it should fail loudly with a traceback (no surrogate), the need for raw API is most obvious here. I will profit this opportunity to replace the tuple by a `Signature` object.\n\nThis is a long weekend in France (three days), I will try to escape from kids to do the above and look thoroughly for what is left. If I said something stupid I will have the opportunity to rectify.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2680709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2722053", "body": "Hello. First, sorry if the fix for this issue goes slowly, but I prefer to get it right once and for all.\n\nAt the code level little has been done so far, check the `issue43` branch.\n\nOne thing I have decided is to use `Py_FileSystemDefaultEncoding` by default, instead of UTF-8. This applies only to paths (not commit messages, etc.)\n\nThe reason is interoperability with Git. This is the scenario:\n1. Some developer has setup his computer to use Latin-1 (for example), for whatever reason.\n2. He uses pygit2 to build a tree object where there are tree entries with non-ascii chars. If pygit2 uses UTF-8 hardcoded as it is now, the entries will be written in UTF-8.\n3. Now he checkouts the tree using Git. The files in the working tree will be in UTF-8 and won't match his file system encoding.\n\nAlso, using the file system encoding is what Python recommends (http://docs.python.org/py3k/c-api/unicode.html#file-system-encoding).\n\nHowever, this is a different choice that the one done in Rugged, which defaults to UTF-8.\n\nMy reasoning is that interoperability with Git rules over anything else. Though, I find being able to define the encoding explicitly on a per repository basis to be a useful extension to Git; @tanoku, how have you done that? With an specific configuration variable? If so, it would be nice if pygit2 supported it, for the sake of pygit2/rugged interoperability.\n\nRegarding the central argument with @brodie about whether pygit2 should return bytes or unicode strings on Python 2, now I agree it should be bytes. Maybe with a flag to switch to unicode for those on transition to Python 3 (equivalent to the `from __future__ import xxx` stuff we are used to).\n\nI still find it useful to have an API which always returns bytes whether on Python 2 or 3, and another one that always returns unicode. Though, no idea yet of how this would look like.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2722053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2744681", "body": "Could you please post the complete output given by `python setup.py install`?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2744681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2751098", "body": "It does not find `git2.h`, is libgit2 installed? The `git2.h` file should be in the `/usr/local/include` directory, is libgit2 installed somewhere else, maybe?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2751098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2809182", "body": "What version of libgit2 are you using? I suggest to use a checkout from the repo and not a released tarball. Use the `development` branch for libgit2 and the `master` branch for pygit2.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2809182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3655699", "body": "Applied the change you have suggested. Close the issue if it works for you.\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3655699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3668411", "body": "It looks like a version mismatch.\n\nThe master branch of pygit2 works with the development branch of libgit2. Alternatively, you can use the latest releases: libgit2 v0.15.0 and pygit2 v0.15.1\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3668411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3853545", "body": "There has been a release of libgit2 and pygit2: v0.16.0, please try these.\n\nIf you still get the problem, please specify the operating system, compiler and version of Python you are using. And try importing pygit2 from the interpreter:\n\n```\n>>> import pygit2\n```\n\nIt will give a more informative traceback, post it here.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3853545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3951240", "body": "Regarding coding style, we follow [PEP 7](http://www.python.org/dev/peps/pep-0007/). Indentation with 4 spaces, no tabs.\n\nI do not know about Ruby, but extending a Python class defined in a C extension is not obvious. Subclassing looks overkilling to me, and so does adding a [`__dict__`](http://stackoverflow.com/questions/5061251/create-a-python-type-from-c-that-implements-a-dict). Tell us if you find something.\n\nAnyway, reading at [libgit2's issue n. 250](https://github.com/libgit2/libgit2/pull/250), I would rather implement this feature as a utility function, in a `utils.py` module.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3951240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3951657", "body": "Cool, I expect to use this feature sometime.\n\nDon't call `PyObject_GC_UnTrack` and `PyObject_GC_Del`, the tree builder cannot participate in a reference cycle.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3951657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3959327", "body": "Having a layer in C and a higher level one in Python may be nice. Still it is unclear how it should look like. I am cautious about going too far too quickly, since making things dynamic in Python is quite expensive in terms of memory usage (for example having a `__dict__` on every commit, tree, blob and tag instance is to be avoided). For a low-level library like `pygit2` a bunch of utility functions could be enough.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3959327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3970403", "body": "Regarding the API, not sure.\n\nGrowing up the treebuilder from the repo looks friendlier:\n\n```\ntreebuilder = repo.treebuilder(oid)\ntreebuilder.write()\n```\n\nInstead of:\n\n```\ntree = repo[oid]\ntreebuilder = TreeBuilder(tree)\ntreebuilder.write(repo)\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3970403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4025384", "body": "Hello,\n\nCool, somebody taking care of Windows.\n\nA few quick comments before looking at the main subject (the first two patches):\n- Please use topic branches instead of pushing everything to master. There is too much different stuff on a single pull-request.\n- The last commit (58b7ea7ca9) is just broken.\n- The commit before (f4538e52607) introduces a bug and fixes none. There is nothing wrong with reference cycles, the garbage-collector takes care of them if the C extension is written properly, which is the case (see all that calls to `PyObject_GC_*`).\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4025384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4026083", "body": "Using `METH_O` for `TreeBuilder_insert` would be more appropriate, since it takes one-and-only-one argument.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4026083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4040484", "body": "The point of using topic branches is that each one starts from origin, so I can review/merge them independently.\n\nFor instance, this pull request includes the stuff from PR #62, so I cannot merge it without merging PR #62.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4040484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4040510", "body": "I am not against dropping setuptools, but the ability to run the tests in place (without installing pygit2 first), saves a lot of time. So either find another solution, or keep setuptools, at least for Posix platforms (if getting it to work on Windows is too tricky).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4040510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4040541", "body": "If the index holds a reference to the repository then the repo's refcount _must_ be incremented, otherwise at some point the repo will be freed and the index will hold an invalid reference. Result: a segmentation fault.\n\nTo learn about how \"Cyclic Garbage Collection\" works in Python read http://docs.python.org/c-api/gcsupport.html\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4040541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4043020", "body": "It is about time to close this issue. Now pygit2 uses byte strings with Python 2 and text strings with Python 3 (for paths). It is left to use `surrogateescape` in Python 3, I just added a note to the TODO file so it is not forgotten.\n\nIf there is something else wrong or missing, please open a new issue.\n\nThanks to everyone involved in the discussion (specially when showing me wrong).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4043020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4043065", "body": "Time to close this issue. If somebody is interested to develop `cygit2` just go ahead. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4043065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4043103", "body": "This is were I stop last time I worked with pygit2 on Windows.\n\nThe bug can be fixed either in libgit2 or in pygit2. Check https://github.com/libgit2/libgit2/issues/462\n\nTo me it is better to fix it in libgit2, but I will accept a (temporary) solution just for pygit2.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4043103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4074898", "body": "The only place in the code where the `TreeEntry.tree` member is used is in `TreeEntry.to_object()`, which is equivalent to `repo[tentry.oid]`.\n\nSo I would just remove `to_object` and drop `TreeEntry.tree`. This change will make the code more efficient, in my opinion as friendly, and will allow you to implement `TreeBuilder.get()`.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4074898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4088688", "body": "I have merged the branch except the last two commits.\n\nThe problem I see with the commit that changes the API (07beaba3d4), is that it makes `TreeBuilder` to inherit from `Object`, what I don't understand. `Object` is the base class for commits, trees, blobs and tags, it implements shared behaviour like `.oid`. I don't see how the tree builder fits there.\n\nMore fundamentally, I still wonder which is the best API. Specifically whether `repo.TreeBuilder` should take an OID or a `<Tree>` (or both). Guess only when using the API for real we will know. Do you have an opinion?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4088688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4234546", "body": "I know, sorry. I worked this weekend to setup again a Windows environment, so I can test your changes. Since I can only work on pygit2 on my spare time, things move slowly. Thanks for your patience.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4234546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4248078", "body": "It looks good to me.\n\nSince `expand_oid` is always called after `py_str_to_git_oid` I would rather write a function that first calls `py_str_to_git_oid` and then expands the oid. This way you would save some lines in the callers.\n\nI would return `GitError` in the `GIT_EAMBIGOUS` case.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4248078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4248278", "body": "fsck is a perfectly legit use case.\n\nMore fundamentally, I see things the other way. The property of the commit is the tree-oid, not the tree. The ability to get the tree directly from the commit is just sugar, a short way to write `repo[commit.tree_oid]`.\n\nRelated to this, I would like every call that returns a git-object to go through a central function. For instance, `Commit.tree` should call `lookup_object`, and not build up the tree object on its own. This way, one day, we may implement a cache at the Python level, for instance.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4248278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4271030", "body": "Finally I could try your branch on Windows, though, got this error:\n\n```\nNameError: global name 'log' is not defined\n```\n\nThis is the output given by [pyflakes](http://pypi.python.org/pypi/pyflakes):\n\n```\n$ pyflakes setup.py \nsetup.py:83: undefined name 'log'\nsetup.py:84: undefined name 'log'\n```\n\nPlease fix and re-submit.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4271030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4303963", "body": "This is looking better.\n\nNow, I need your help. When I run `python setup.py build` I get the warning message `Could not find required DLL git2.dll`. Problem is, in my setup the file is not named `git2.dll` but `libgit2.dll`, if I change the `libgit2_dlls` variable accordingly it works.\n\nLet me give you some info about my setup. It is a Windows XP running on a virtual machine (qemu). I only succeeded to install libgit2 with MSYS, so that's what I am using (more precisely, I installed [msysgit](http://code.google.com/p/msysgit/) and then libgit2, configuring CMake to use the MinGW bundled with msysgit).\n\nNow, if I understand your commit, the point is to copy the libgit2 DLL along with pygit2. I guess this is because otherwise Python does not find the DLL. This is what I get without your pach:\n\n```\n>>> import pygit2\nImportError: DLL load failed: The specified ...\n```\n\nI see this is what your commit fixes.\n\nNow, would it not be better to, somehow, add the location where the DLL is (`C:/Program Files/libgit2/bin` in my case) to the Python PATH somehow, so it is found?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4303963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4340586", "body": "The idea is not to include `expand_oid` into `py_str_to_git_oid`, but to make `expand_oid` to call `py_git_to_git_oid` first.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4340586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4364134", "body": "This commit could be split in two. I would apply immediately a patch that drops support for `setuptools`, while keeping the ability to run the tests in place. Could you do that?\n\nThe main part of the commit, copying `git2.dll` alongside pygit2 needs further attention. At least it still does not work on my system, since the DLL is named `libgit2.dll` and not `git2.dll`. Do you know why?\n\nAt some point, we should provide windows installers for pygit2, to bundle `git2.dll` makes sense in my opinion.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4364134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4369362", "body": "No, I mean:\n\nPATCH 1: drop support for setuptools, while keeping the ability to run the tests in place\nPATCH 2: copy (lib)git2.dll alongside pygit2\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4369362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4425527", "body": "Hello,\n\nI don't have plans to implement it any time soon. Right now I am busy\nenough just to review the pull-requests submitted by contributors. Next\nin my priority list is to work on the documentation.\n\n~~Please open an issue about this feature, eventually someone will implement it.~~\nOh! Replied by email without checking, this is already an issue!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4425527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4425873", "body": "Applied, thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4425873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4463042", "body": "Looking at the possible solutions, I don't see any other than what @hanwen suggests:\n\n```\ntentry = treebuilder.insert('name', 0100640, OBJ_ID)\n```\n\nSomething like:\n\n```\ntentry = TreeEntry('name', 0100640, OBJ_ID)\ntreebuilder.insert(tentry)\n```\n\nLooks infeasible, since there is nothing like `git_tree_entry_new`.\n\n@carlosmn What do you mean by _writing a git permissions by hand_ ?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4463042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4469161", "body": "At the end Vicent may be right. Maybe it is better to make an extension type like this:\n\n```\ntypedef struct {\n    PyObject_HEAD\n    PyObject *filename;\n    PyObject *attributes;\n    PyObject *oid;\n} TreeEntry;\n```\n\nThoughts?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4469161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4508884", "body": "This one was close ;)\n\nProblem is I merged your branch with the tree-builder stuff, and in that branch there is a new call to\n`TODO_SUPPORT_SHORT_HEXS`, so a rebase is needed.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4508884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4509324", "body": "This is merged (actually I did a cherry-pick, ops!)\n\nThanks for your patience\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4509324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4546508", "body": "I went through the code I have which uses pygit2, looking for real usage of tree entries. I only found one, it is a general case of `git_tree_get_subtree` : from a tree and a path returns an object (tree or blob), or `None`. This code only accesses `tenry.oid` (once), so making all three attributes into Python objects would not help. Though, this is not enough to make any decision.\n\nThe other alternative would be something like :\n\n```\ntypedef struct {\n    PyObject_HEAD\n    PyObject *owner;\n    git_tree_entry *entry;\n} TreeEntry;\n```\n\nAnd then do type-checking on the owner (tree or tree-builder).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4546508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4555406", "body": "I have implemented the second option : a `TreeEntry` is owned by a `Tree` or a `TreeBuilder`. This is not carved in stone, we can change it later. But I wanted the lifetime issue fixed, because I need to make a pygit2 release ASAP.\n\nCould you guys check I did nothing stupid ?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4555406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4556442", "body": "Right now `TreeBuilder_get` is not implemented, so that code is not tested with tree builders, though I think it should work the same. The `(Object*)` snippet is a little hackish I think.\n\nMe too I hesitate whether to keep `to_object` or not. Though, that method has been there since the beginning.\n\nBy the way typing `repo[entry.oid]` is likely more efficient than `repo[entry.hex]`.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4556442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4869113", "body": "Since this method was written by Carlos I would like to know what he thinks.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4869113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4964561", "body": "The patch replaces `insert(e)` by `insert(e.name, e.hex, e.attributes)`, so there is not any regression. I still wonder whether it is worth or not to have two methods, `insert_A(e)` and `insert_B(name, hex, attrs)`, it depends on how much useful the first one is. I don't have an opinion since I am not using the tree-builder yet.\n\nIf nobody complains I will merge this tomorrow, it is anyway better than what we have today.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4964561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5456230", "body": "Hello,\n\nConcerning the first commit, I wonder whether it would not be possible for `py_str_to_c_str` to keep returning a string it owns, and make the copy whenever necessary by the callers. This in order to save a copy when it is not necessary.\n\nWhat do you think ? Do you see any problem ?\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5456230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5465890", "body": "Oh yeah, I missed the transcoding bit.\n\nThere are two reasons for the Unicode stuff :\n1. We use the type to make the difference between a raw and an hex oid. Otherwise,\n   how could you distinguish between a short hex of 20 chars, and a raw oid of 20 chars?\n2. Second, we support Python 3 too. And in Python 3, \"everything\" is unicode. So even if\n   we resolve the first problem otherwise, we still need to handle unicode for Python 3.\n\nThis was extensively discussed in issue #43\n\nAn idea to solve the first problem is to wrap the oid, adding a GitOID extension type. I guess\nthis has its own share of problems.\n\nMaybe Python 3.3 will have a solution for the second issue, thanks to PEP 393.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5465890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5466418", "body": "Applied the first commit, will look at the second one tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5466418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5647995", "body": "Cool. Could you add a unit test?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5647995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5802189", "body": "I like the refactoring. I leave this open for a while to give people some time to comment on the utility of the proposed function.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5802189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5802231", "body": "This fixes building pygit2 with libgit2 v0.17, cool. But unit tests do not yet pass. If you intend to continue I will wait for the new patches before merging. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5802231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5802436", "body": "err, you are right, :)\n\nmerging now...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5802436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5857717", "body": "Most likely, the installed versions of libgit2 and pygit2 do not match, verify that you are using the latest : v0.17\n\nIf you installed from a git checkout, be sure you are using the `master` branch for both libgit2 and pygit2.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5857717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5898985", "body": "To get a more informative error, run the Python interpreter and import pygit2 :\n\n```\n>>> import pygit2\n```\n\nPost the traceback here.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5898985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5932934", "body": "Cool, I wanted this too.\n\nBut I merged your diff branch first, could you update this pull-request?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5932934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5935421", "body": "We can add it later.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5935421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5982224", "body": "Nice. But I don't have the rights to activate travis in `libgit2/pygit2`, so I assign this issue to Vicent. Once done I will merge.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5982224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5983899", "body": "Just merged, but I don't see anything in http://travis-ci.org/#!/libgit2/pygit2\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5983899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6014251", "body": "My only doubt is whether `Repository.head` should return the commit (as proposed), or just the resolved reference (as `git_repository_head` does).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6014251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6029881", "body": "The API needs to be consistent I think. Either we have simple objects, and drop the pointers back to the repository when possible, or we keep the pointers and so we are able to offer a richer API (`to_object`, ...).\n\nI think I am going to merge this pull-request the way it is (and leave the big question above open, to be discussed in an specific issue).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6029881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6085889", "body": "Hello, thanks for contributing. Here there are a few comments:\n- Unit tests segfault.\n- The merge is not perfect, several commits have been overwritten (d14393c1df ...)\n- Style: do not add white-spaces at the end-of-line.\n\nConsider re-doing your changes at the top of the head to make a cleaner pull-request.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6085889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6220895", "body": "I have merged it, though valgrind shows a couple of errors.\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6220895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6227520", "body": "This is the way I have set-up it, since running valgrind straight away will show up many false positives.\n\nYou need to install and use a version of Python with `Py_USING_MEMORY_DEBUGGER` defined, uncomment It in the `Objects/obmalloc.c` file.\n\nYou will also need the `Misc/valgrind-python.supp` file. Then run the tests this way:\n\n```\n$ valgrind --trace-children=yes --suppressions=valgrind-python.supp python setup.py test\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6227520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6227556", "body": "These are the errors I get:\n\n```\n==4269== Invalid read of size 1\n==4269==    at 0x88D9BCB: ??? (in /usr/lib64/libgit2.so.0.17.0)\n==4269==    by 0x88DA261: ??? (in /usr/lib64/libgit2.so.0.17.0)\n==4269==    by 0x88DA851: ??? (in /usr/lib64/libgit2.so.0.17.0)\n==4269==    by 0x88DAEFD: ??? (in /usr/lib64/libgit2.so.0.17.0)\n==4269==    by 0x88D82A3: git_config_set_multivar (in /usr/lib64/libgit2.so.0.17.0)\n==4269==    by 0x86B9587: Config_set_multivar (config.c:305)\n==4269==    by 0x4A6937: PyEval_EvalFrameEx (ceval.c:4021)\n==4269==    by 0x4A6CED: PyEval_EvalFrameEx (ceval.c:4107)\n==4269==    by 0x4A8485: PyEval_EvalCodeEx (ceval.c:3253)\n==4269==    by 0x510162: function_call (funcobject.c:526)\n==4269==    by 0x4213A6: PyObject_Call (abstract.c:2529)\n==4269==    by 0x4A4C31: PyEval_EvalFrameEx (ceval.c:4334)\n==4269==  Address 0x8f61a0f is 1 bytes before a block of size 1 alloc'd\n==4269==    at 0x4C29F5D: malloc (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)\n==4269==    by 0x88D9C44: ??? (in /usr/lib64/libgit2.so.0.17.0)\n==4269==    by 0x88DA224: ??? (in /usr/lib64/libgit2.so.0.17.0)\n==4269==    by 0x88DA851: ??? (in /usr/lib64/libgit2.so.0.17.0)\n==4269==    by 0x88DAEFD: ??? (in /usr/lib64/libgit2.so.0.17.0)\n==4269==    by 0x88D82A3: git_config_set_multivar (in /usr/lib64/libgit2.so.0.17.0)\n==4269==    by 0x86B9587: Config_set_multivar (config.c:305)\n==4269==    by 0x4A6937: PyEval_EvalFrameEx (ceval.c:4021)\n==4269==    by 0x4A6CED: PyEval_EvalFrameEx (ceval.c:4107)\n==4269==    by 0x4A8485: PyEval_EvalCodeEx (ceval.c:3253)\n==4269==    by 0x510162: function_call (funcobject.c:526)\n==4269==    by 0x4213A6: PyObject_Call (abstract.c:2529)\n==4269==\n==4269== Invalid read of size 1\n==4269==    at 0x88DA280: ??? (in /usr/lib64/libgit2.so.0.17.0)\n==4269==    by 0x88DA851: ??? (in /usr/lib64/libgit2.so.0.17.0)\n==4269==    by 0x88DAEFD: ??? (in /usr/lib64/libgit2.so.0.17.0)\n==4269==    by 0x88D82A3: git_config_set_multivar (in /usr/lib64/libgit2.so.0.17.0)\n==4269==    by 0x86B9587: Config_set_multivar (config.c:305)\n==4269==    by 0x4A6937: PyEval_EvalFrameEx (ceval.c:4021)\n==4269==    by 0x4A6CED: PyEval_EvalFrameEx (ceval.c:4107)\n==4269==    by 0x4A8485: PyEval_EvalCodeEx (ceval.c:3253)\n==4269==    by 0x510162: function_call (funcobject.c:526)\n==4269==    by 0x4213A6: PyObject_Call (abstract.c:2529)\n==4269==    by 0x4A4C31: PyEval_EvalFrameEx (ceval.c:4334)\n==4269==    by 0x4A8485: PyEval_EvalCodeEx (ceval.c:3253)\n==4269==  Address 0x8f61a0f is 1 bytes before a block of size 1 alloc'd\n==4269==    at 0x4C29F5D: malloc (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)\n==4269==    by 0x88D9C44: ??? (in /usr/lib64/libgit2.so.0.17.0)\n==4269==    by 0x88DA224: ??? (in /usr/lib64/libgit2.so.0.17.0)\n==4269==    by 0x88DA851: ??? (in /usr/lib64/libgit2.so.0.17.0)\n==4269==    by 0x88DAEFD: ??? (in /usr/lib64/libgit2.so.0.17.0)\n==4269==    by 0x88D82A3: git_config_set_multivar (in /usr/lib64/libgit2.so.0.17.0)\n==4269==    by 0x86B9587: Config_set_multivar (config.c:305)\n==4269==    by 0x4A6937: PyEval_EvalFrameEx (ceval.c:4021)\n==4269==    by 0x4A6CED: PyEval_EvalFrameEx (ceval.c:4107)\n==4269==    by 0x4A8485: PyEval_EvalCodeEx (ceval.c:3253)\n==4269==    by 0x510162: function_call (funcobject.c:526)\n==4269==    by 0x4213A6: PyObject_Call (abstract.c:2529)\n==4269==\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6227556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6227574", "body": "Forgot to say, use latest valgrind, version 3.7\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6227574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6228484", "body": "Also, unit tests fail on travis, http://travis-ci.org/#!/libgit2/pygit2/jobs/1583333\n\n```\nERROR: test_add (test.test_config.ConfigTest)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vagrant/builds/libgit2/pygit2/test/test_config.py\", line 79, in test_add\n    config = pygit2.Config.get_global_config()\nIOError: Global config file not found.\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6228484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6358972", "body": "Tests still failing, but only with Python 2.6 now:\n\n```\nERROR: test_write (test.test_config.ConfigTest)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vagrant/builds/libgit2/pygit2/test/test_config.py\", line 124, in test_write\n    with self.assertRaises(TypeError):\nTpeError: failUnlessRaises() takes at least 3 arguments (2 given)\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6358972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6573195", "body": "Apparently you have hit issue #107\n\nHave you checked the Windows build instructions? See https://github.com/libgit2/pygit2#building-on-windows\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6573195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7035665", "body": "Fixed, thanks\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7035665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7181615", "body": "The problem is in the generation of the MANIFEST file, many files were missing (include, test data files, ...). Commit 5f4d98d7dce0 fixes this, though it is not definitive.\n\nOf course the bug will only be closed when there is a new release, so the package at pypi will be updated. What is kinda urgent...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7181615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7203957", "body": "Made a new release, 0.17.2, should work now.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7203957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7521953", "body": "The `git_tree_entry_bypath` function is new to the development branch in libgit2, while pygit2 follows the libgit2 master branch. So I have to wait for the next release of libgit2 v0.18 before merging this branch.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7521953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7895465", "body": "Hello,\n\nThe same comment as for PR #117 applies, pygit2 follows libgit2's master branch, so this PR will be merged once there is a new release of libgit2.\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7895465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7995856", "body": "Cool, could you add a unit test?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7995856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/532550", "body": "I think the behaviour must be the same for both Python 2 and 3, otherwise everything will be ore complicated (implementation, documentation, ...)\n\nBesides, in this case, the remark by @pyos [1] also applies to Python 2. Later on we will add to this method the ability to get an object by a short hex-sha, by calling `git_object_lookup_prefix`. If the hex-sha passed is 20 bytes long, how to know it is an hex-sha and not a raw-sha? I think to make the difference by the type is a fine solution.\n\n[1] https://github.com/libgit2/pygit2/issues/43#issuecomment-1791199\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/532550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/621935", "body": "Readability. It is not evident whether the word \"sha\" refers to the raw oid (20 bytes byte string) or to its hexadecimal form (40 chars text string). At least `.hex` has the virtue of not being ambiguous.\n\nNote that now we also have `object.oid`, the raw oid as a 20 bytes byte string. And that the old `.sha` and the new `.hex` are not exactly the same, before `.sha` was a byte string, now `.hex` is a text (unicode) string. So this was the right time to make the change.\n\nAlso, pygit2 is still, like libgit2, alpha software. So changes to the API may happen from time to time, they will be documented on every release.\n\nThis commit is part of the work to fix issue 43, https://github.com/libgit2/pygit2/issues/43\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/621935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2427780", "body": "www.pygit2.org actually, but it's to late to fix a commit message\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2427780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464811", "body": "No. What I do is to keep a libgit2 clone and from time to time check whether pygit2 still works.\n\n(In my opinion, the problem is libgit2 does not release often enough.)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/462984", "body": "I bet you mean:\n\n```\nif (builder) {\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/462984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/463078", "body": "- I wonder what Py_XDECREF will do with a `git_treebuilder` struct.\n- The point of using `Py_XDECREF` instead of `Py_DECREF` is that you don't need to check for NULL.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/463078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/465062", "body": "This line should not be. The dealloc function is called when the refcount is zero. Decreasing it below zero is not correct.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/465062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15143085", "body": "Just changed this static method so it is shorter and fails on unexpected arguments.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15143085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/100327941", "body": "``_common_init`` would be called twice, first from the super class, and then here", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/100327941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/100329185", "body": "could you fix the indentation please? here and elsewhere in the C code", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/100329185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/109995387", "body": "Thanks, looks good. While you are at it, maybe change style to use 4 spaces indentation. Also, ``Exception`` is too generic, we should use a more specific exception; though choosing a good one is not easy. ", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/109995387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/110005485", "body": "To make it simple: PEP 7 for C, PEP 8 for Python.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/110005485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/110018964", "body": "Just pushed a commit to raise GitError for GIT_ENOTFOUND (and to not change the error set by Error_set_str for the other cases, to avoid hiding information).", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/110018964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/112034601", "body": "This can be reduced to one line:\r\n\r\n    branch = self._repository.lookup_branch(name, self._flag)", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/112034601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/112035120", "body": "We can replace ``GIT_BRANCH_LOCAL | GIT_BRANCH_REMOTE`` by ``GIT_BRANCH_ALL``, though first this constant needs to be added to pygit2.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/112035120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "ovangle": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/369", "title": "Clone fails with GitError: Unexpected EOF", "body": "When trying to clone one of the repositories from the remote server, pygit2 is raising an `Early EOF` error when attempting to access the repository via ssh. \n\nThe script I'm working on clones two repositories locally, the other is cloned without errors and both can be cloned from the command line via ssh. Both are cloned successfully over the http protocol. \n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "abergmeier": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/349", "title": "Automatic creation of subtrees", "body": "When I try to call e.g. `tree_builder.insert(`somepath/myentry`, blob, pygit2.GIT_FILEMODE_BLOB` on an empty `TreeBuilder`, it fails saying `somepath/myentry` is invalid. Why does the builder not add `somepath` automatically?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "carlosmn": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/330", "title": "Constants and namespaces", "body": "There's something that's been bugging me for a while regarding the libgit2 constants we expose through pygit2. We expose them with the full name, e.g. `GIT_DIRECTION_FETCH`, but we're already inside the our git namespace, so they become `pygit2.GIT_DIRECTION_FETCH`, so now we have two namespaces which mean the same.\n\nWouldn't it make sense to expose then without the `GIT_` prefix?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/96d37e16a983810a598a9d3fd6d0ebfbd5d4f778", "message": "Update install docs with the v0.26 version of libgit2"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/2ce8b952c41c08297f113a5e9503193a447c1da4", "message": "Update Travis CI script to use libgit2 v0.26"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/e41f71f458d10b329e153965b0d870a442c16879", "message": "Update for libgit2 v0.26\n\nThe API isn't changing as much recently so all we needed to adjust was the\nproper capitalisation of the error string."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/074a726d7fac05a1700a760bff6587aedb9eb1b0", "message": "Update versions to libgit2 v0.25.0"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/acdec78617650faa0e34feaf102b0b6b8a9e79e7", "message": "Update for v0.24+1"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/578cf58cd780a0a1dc90a5e056ef7a9337523c0f", "message": "Add Repository.create_reference to the automethod list"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/df30f9213fbd2ac2d65598f37157baff93741751", "message": "Remove checks for obsolete methods\n\nThis is not how you define your callbacks, so this test isn't testing\nfor anything useful."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/c1d831c98a0b3151478c350f4c354acdaea12b3b", "message": "Update to libgit2 v0.24"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/487fb5913e067c4617840a4fce7a6855566fccd4", "message": "Keep the describe dirty suffix string alive"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/91bb93d26647260da8f52035e73e49d647039801", "message": "Fix create_blob_fromiobase with pypy\n\nThe file object is passed to us, so we never incremented\nits refcount. We shouldn't decrement it on exit."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/b8e6852d26cb567346a7723291f61191bbdfc29a", "message": "Add some missing fields to DiffFile's docs"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/563cb9018e5371a590c6c70cf3f8d4d6a19e9c36", "message": "Bring back the certificate check callback\n\nThis was implemented for clone, but not for fetch or push, so it was\ndeleted during the conversion, which shows why we need to unify these\ncallback structures."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/ac2e363d043eef1631a83cb03d7a0115a6e9c9af", "message": "Allow setting credentials and certificate in callback ctor\n\nThis allows for a less verbose way of setting one-liners as these\ncallbacks."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/ab97c08f72e913a2428ddf8b96316c4429d17479", "message": "Make clone take the callbacks object\n\nThis lets use the same callbacks for fetch and clone; it also fills in\nthe callbacks which the clone function did not support."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/7b97ade6cea410a5665576294d46c4e7c869d488", "message": "Move remote callbacks to use a class for callbacks\n\nThis represents what's going on much better than the remnants from the\nolder methods. What we do is pass a list of callbacks to libgit2 for it\nto call, and they are valid for a single operation, not for the remote\nitself.\n\nThis should also make it easier to re-use callbacks which have already\nbeen set up."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/4f00dad086d2ff4117e4f71d2fba28876601d616", "message": "Don't throw if there is no merge base\n\nNot finding a merge base between two commits isn't an exceptional case,\nit's just a different result."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/7ff6f6efb7f1a0854e0666eb548e7f1782e8a67a", "message": "Add repr output for TreeEntry\n\nWhen iterating over a tree, its entries show up as objects with an\naddress, which makes it hard to distinguish.\n\nAdd a method to handle repr and make it easier to play around with them\nin the console."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/f09bbe79a8d28f6bd28668eb0b1a13e5e474854a", "message": "Update installation docs with v0.23"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/81520c9c626e092bc45f9fc8ba138eefa4d1beb2", "message": "Update to libgit2 v0.23"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/74b81bf18076555fb12369d5f20e4282214116d3", "message": "Add support for querying attributes\n\nExpose a method in the repository which allows querying an attribute for\na file and converts the result to the python equivalent."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/5b50579790339f627f668ba4e1fc478bc3773fe9", "message": "Add a recipe for git clone --mirror\n\nIt's not necessarily obvious how to perform a mirror, so add a recipe\nwhich tells what git does as well as provide example code of how to\nperform the same steps in pygit2."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/42d81e33ecb00025b172aab9f39b07cca05dd311", "message": "Add DiffStats\n\nThis wraps git_diff_stats and can be retrieved through a Diff. It\nincludes a formatting method."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/0ce4d3b9a88c200621becc366f2b5276d89c7f94", "message": "Allow creating a remote with a particular fetch refspec\n\nThis makes it a lot more convenient to create a remote and override the\nfetch refspec it gets created with."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/3091c7aa874e55ff8453726a6cb8cebd5e253a5d", "message": "Remove mistaken submodule in the tree\n\nThe path test/data/testrepo was mistakenly added as a submodule and the\nerror was not caught before merging. Remove this path as it should not\nexist on the repo."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/c099655fc034c3be63017d0a3e112ea10928464a", "message": "TreeEntry: compare ids when two entrie sort equally\n\nThe function we were using `git_tree_entry_cmp()` is only meant for\ngit-compatible sorting in a tree and thus does not take the id into\naccount. This is however important in order to keep value equality. In\norder to avoid issues with assymetry, we compare the id any time when\ntwo entries are equal according to their position in a tree."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d4da228c0e874be78f7188e46ecd2622507b8ba8", "message": "Add documentation for merge_commits() and merge_trees()"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/fcd4b9446b1efeb327d2122e8c0f3bc564736ae1", "message": "Introduce Repository.merge_trees()\n\nThis is the function which does the work for Repository.merge_commits()\nand allows us more direct control over which trees we want to merge,\nincluding trees which do not belong to commits."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/0ba17a5b4608706f696c2212315ea0bb301db209", "message": "Safer handling of string arrays\n\nWe need to keep hold of the strings which we create. We must also hold\non to the array of strings which we assing to our git_strarray.\n\nWe were not doing the latter, which meant that our strings may have been\nfreed too early, leaving us with with memory access errors (though often\nnot leading to a crash due to the custom allocator in python).\n\nAs we need to keep hold of two/three pieces of information, this looks\nlike a good place to introduce a context manager. This allows us to\nkeep these pointers alive without burdening the call sites with a return\nof multiple objects they have no use for."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/4709cae1a1b8c7a8b0729eb4dac2abfd4a23d28c", "message": "Add Repository.ahead_behind()\n\nThis lets us ask how many diverging commits each side of two histories\nhave."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/1361b2cce90f3c29b7b9d0f0f5c98f6a6eee8e75", "message": "Add Repository.expand_id()\n\nAs we allow users of the library to use short strings, we must expand\nthem. This is however only available through a function in C. Expose\nthat function from the repository to allow python code to get a full id\nfrom a short hex string."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d0b00e3124a35d7b6adc73c0a36dfa3e50c9768f", "message": "Add support for libgit2 feature detection\n\nThis lets us ask the library whether it supports threading, https and\nssh."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1811152", "body": "> Yeah, that seems sane to me (and I would defer to msysgit people on how\n> to implement things on Windows). It would be helpful if git translated\n> all paths into utf8 when putting them in the index. Linus had patches\n> for that at one point, but they ended up quite invasive and I don't\n> think they were ever taken. I can try to dig them up if you want.\n\nTransforming to and from UTF-8 might help you if you don't care about backwards-compatibility (across your versions of whatever manges your `.git/`) on Windows and UNIX (except for OSX). The OSX filesystem is not a reliable key-value storage system, so you're screwed no matter what you do. I'll summarise the flamewar by saying that everybody was angry and nobody wanted to integrate the few patches that were posted, which is not surprising as they're a work-around for a filesystem that silently changes the filenames that you give it.\n\nSo maybe we can add support for a `core.myfilesystemchangesmydatafromunderme` configuration variable in libgit2 so we work around that limitation. I doubt that git will add support for this any time soon. Subversion has this same problem, BTW. I was in fact first made aware of the problems OSX brings by a colleague who works on it (svn, that is).\n\n> Yes, I know, recoding to UTF-8 is not possible for all data, so Git chooses to wash its hands. That's why I said Git seems to be designed for archiving a Linux filesystem rather than for sharing data: refusing to add paths that aren't valid Unicode would be a much better choice for a cross-platform revision control system. But hey, we all know who made Git, so no wonder it's a bit too Linux-centric and binary-safe.\n\nGit was indeed started by a (some would say very) smart guy who has a lot of experience in building reliable systems and saying \"no\" to people who want to make that kernel named after him subtly change data. But that is not the issue here. If you want your filenames to be usable from outside of your organisation, then you should have defaulted to UTF-8 long ago. Filenames stored in KOI8-R are not reliably transferable to systems with UTF-8 regardless of whether you use Git or not. It's a problem at a different layer.\n\nThere are two sides (or layers) to git. One is git the versioned key-value storage system with support for versioning (which is most of what libgit2 is about). The other one is git the DVCS. The former should not have any right to decide what gets stored in it. You could consider the latter to be able to decide what gets stored. Currently, however, the line is very blurred, as people added a version control system to git, instead of building one on top of it.\n\nIf you want to enforce UTF-8, you're welcome to do it at a layer above libgit2. This however leaves the status code \"unprotected\", as it asks the filesystem directly for the names. A hook here might work, but may not be such a good idea.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1811152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1817512", "body": "On Tue, 2011-08-16 at 08:13 -0700, encukou wrote:\n\n> > Git was indeed started by a (some would say very) smart guy \n> \n> Absolutely no doubt about that.\n> \n> > The OSX filesystem is not a reliable key-value storage system\n> \n> The OSX filesystem is not a reliable _binary_-key - binary-value\n> storage system, no. Yet, Git treats it as such. Anyway, let's keep\n> this about Windows for now.\n\nWe're talking about computers. Everything is binary. Just because a\nhuman can interpret two strings to mean the same thing, it doesn't mean\nthat the filesystem can store something different from what I told it\nto.\n\n> > One is git the versioned key-value storage system with support for\n> > versioning (which is most of what libgit2 is about). The other one is\n> > git the DVCS. The former should not have any right to decide what gets\n> > stored in it. \n> \n> No doubt about that as well.\n> \n> > If you want to enforce UTF-8, you're welcome to do it at a layer\n> > above libgit2.\n> \n> The problem is code that stores _pathnames_ in Git, because Git\n> assumes that pathnames are zero-terminated binary strings. This is\n> perfectly true on Linux, so Git does exactly what it should on Linux.\n> On Windows, however, paths are _not_ binary data. They are Unicode\n> strings that must be encoded/decoded to/from binary data. The way Git\n> does this encoding (namely, asking Windows to use a legacy system-wide\n> codepage) is wrong.\n\nPaths _are_ binary data, but fair enough that it wants to use a specific\nformat.\n\n> The [MSDN](http://msdn.microsoft.com/en-us/library/dd374081%28v=vs.85%\n> 29.aspx) specifically says: \"Data converted from Unicode to a code\n> page is subject to data loss.\" The code pages are not meant to provide\n> char\\* representations of paths; they're there for _compatibility with\n> old programs_.\n\nSo Microsoft at one point decided that they should implement libc in a\nway that always depends on the locale. I'm sure it sounded like a good\nidea back then.\n\n> By using the ANSI API calls on Windows, Git _mangles_ the data. Git is\n> a reliable zero-terminated-bytestring-key to binary-data mapping, but\n> for that to be a reliable windows-path to binary-data mapping, it _can\n> not_ use Windows' ANSI API. It must use the Unicode API and translate\n> the Unicode to its internal representation in a way that does not\n> destroy the keys. (UTF-8 happens to be the most sane way to do so.)\n\nSo we're not allowed to use the standard C calls but need to use the\nWindows API. A nuisance and extra work, but I guess it's fair enough if\nthat represents a contract with the other programs on that platform that\nthey're also going to use Unicode. Indeed Unicode is the only sensible\nway to store strings and UTF-8 is the only representation that doesn't\nbreak the non-multibyte string functions, so that's what we're going to\nuse.\n\n> Needless to say, once Git converts the data using a codepage (or asks\n> the system to do so by using ANSII calls), a layer above libgit2\n> cannot undo the damage.\n\nI was hoping to keep this ugliness away from libgit2, but as it looks\nlike you can't expect the C library to behave, it's going to have to be\nin the library (though hopefully we can keep it in the compatibility\nlibrary, so the Git storage can remain na\u00efve. Paul has sent a PR to do\nthis for Windows.\n\nCheers,\n   cmn\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1817512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2222946", "body": "> But git_oid_fromstrn does drop the last 4 bits (this probably deserves an issue to be open for libgit2).\n\nPlease do open an issue if this is the case. Do you have code that could me made into a regression test?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2222946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3942695", "body": "I've seen that on rugged, but I had no idea whether it was possible to extend classes in python, as everything in pygit2 is one C file. I'll see what I can dig up then and update the PR.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3942695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3958849", "body": "It looks like because the class is implemented in C and in the stack, we can't add attributes to it. Python will only let classes defined in python to be that flexible. So maybe we can define the classes in python and use C to talk with libgit2.\n\nBut as far as this PR is concerned, going with a `utils.py` makes sense.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3958849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3970623", "body": "Alright, if having those objects be full-fledged python objects would be expensive, I'll redo this to add some utils.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3970623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3970733", "body": "I'll remove those calls. I copied the code from elsewhere in the source where they were already there. I'll also move the treebuilder to grow out of the repo.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3970733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3981044", "body": "All you're showing is pygit2 failing to build libgit2. Unless you can show that libgit2's build system is unable to build, this is a pygit2 issue.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3981044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4023333", "body": "This should be better.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4023333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4033862", "body": "Had to rewrite the first commit again, so everything looks new. I'm a bit worried about what might happen if you pass the wrong type to `TreeBuilder.insert()` or `Repository.TreeBuilder()`.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4033862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4073600", "body": "I'm not sure what'd be the right way to implement `TreeBuilder.get()`. Currently, `TreeEntry` assumes it belongs to a `Tree` which we break here.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4073600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4189512", "body": "What crash are you referring to? If you mean that it returns an error because Windows forbids overwriting read-only files (which blobs are), then you should update your copy of libgit2, as a recent commit in the development branch fixes this (or rather, works around the error, as you can't really fix it).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4189512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4236154", "body": "Ah, right. I misunderstood what that did withe `ObjectType`, sorry. I'll push an updated version.\n\nI'd like to support passing both an OID or a tree so the user can pass in whatever variable they have in their code. Passing in a OID forces us to look it up in the repository, so we can be sure that the objects exist. Accepting a tree becomes harder. What happens when the tree comes from another repository instance, for example? We could just grab its OID and look it up in our repo, but that's not necessarily the best thing, as this foreign tree could still only reference objects that we do have.\n\nThis is probably a fringe case and saying \"if you pass a `Tree`, then `tree->repo == self->repo` must be true\" is a good compromise.\n\nNow, what I've no idea how to do is accept several object types.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4236154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4236204", "body": "Is there a reasonable use-case for having a commit with a tree that's missing in the repo's database? Are you thinking of doing something like fsck?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4236204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4338224", "body": "I didn't include `expand_oid()` into `py_str_to_git_oid` because some call sites actually call `lookup_prefix` and I figured it'd be better to leave those as they are. I'll update.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4338224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4340851", "body": "That makes a lot of sense, yeah.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4340851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4413348", "body": "With the new function that does both things, it's shorter and also feels a lot more intuitive. Thanks for the editorial intervention.\n\n`GitError` is returned by default so that should cover `GIT_EAMBIGUOUS`\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4413348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4419785", "body": "Predictable? How? The C API is made for the C language. Each binding should use constructs that are native an natural for the users of that language. If there is no way to create TreeEntry instances, then maybe there should be one.\n\nFortunately, python allows us to have functions with the same name but different arguments so you can use both; though I'm no fan of writing a git permissions by hand.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4419785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4471143", "body": "> @carlosmn What do you mean by writing a git permissions by hand ?\n\nI mean passing an octal number to the function (which people like to get subtly wrong). There are only \"file\", \"executable file\", \"directory/tree\" and \"link\" types, so it feels to me that a constant (or enum type or something similar) would make more sense.\n\nAs for `TreeEntry`, are all those `PyObject`s necessary? `attributes` is only ever an `unsigned int`, which the same size or smaller than a pointer and it seems more natural to have the OID as a `git_oid` (i.e. make it mostly a copy of `git_tree`), but maybe I'm not thinking pythony enough.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4471143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4475515", "body": "The return values should be all consistent now. I'm not sure why `py_str_to_git_oid()` returned `size_t` as it's only going to be up to 20 bytes long. `_expand()` now returns whatever libgit2 says and the checking is more consistent where the return value is negative in case of error.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4475515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4513783", "body": "TreeBuilder fixed.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4513783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5932062", "body": "Rugged does have some left-over backends support, but it was removed because it's simply too slow to implement the backend in a scripting language. You have to move the data from C to python, convert it and then do the whole dance in reverse. By the time the data makes it to whatever database you want to store the data, you've grown old and don't care about it any more.\n\nWhat would be good is a way to connect the backend written in native code with the library directly, but be able to control that through python, so you don't have to write system code. How simple or doable that is, however, is a different matter.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5932062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5982622", "body": "I've just activated travis for `libgit2/pygit2` so it should work now.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5982622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5984492", "body": "It looks like the queues were empty for a while and are now starting to catch up. pygit2 is in the queue, though it might take a while for it to get built now.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5984492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/462992", "body": "Yes I do. `builder` used to be called `bld` and it looks like I didn't clean up properly.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/462992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/464739", "body": "It doesn't seem to mind a `git_treebuilder` that much (it doesn't crash in the tests). Some example code must have been wrong about `Py_XDECREF`. I saw it being used with a guard. I'll update shortly.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/464739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/470804", "body": "Now that you mention it, it does look silly, will fix.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/470804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/7895335", "body": "We have `to_unicode` for this which works across verisions.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/7895335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9060225", "body": "Why not use `\"s\"` as the format directly?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9060225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14761262", "body": "Because it's a special function. I went back and forth on that one, but this is a private function that only makes sense inside pygit2. The consistency should go the other way.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14761262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14818235", "body": "It's a leftover from working with less abstract constructions; but it's a guess as to how many parameters will actually be passed versus how many we will be looking at. I'm not a fan of looking up the same key twice, but it can be reduced.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14818235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14854294", "body": "I remember now why I wanted to iterate over the inputs instead of checking for the known keys: if the programmer using this method makes a typo, we will ignore that option instead of complaining, which can cause subtle bugs, as there is no indication that we're ignoring an argument that was passed. I didn't end up doing it as we just have the two things, but when this gets extended, we should raise an exception if we get something we don't recognise as an option.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14854294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15392992", "body": "All of these values will be unitialised if they're not passed. Instead of this, you should let `PyArg_ParseTupleAndKeywords` write into the options structure directly.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15392992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16031723", "body": "Again, this has nothing to do with the username the user may have passed as a hint. _This_ username is the only one that counts, and it has to be the username as which you wish to authenticate to the ssh host.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16031723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16348524", "body": "There's no need for this line. You're already setting the version above with the init function. If the version does increase, this would cause libgit2 to consider the struct to have a different layout.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16348524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/18427924", "body": "`self._self_handle` needs to be set to `None` after the push operation completes, next to freeing the push object itself.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/18427924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/17552737", "body": "One of these lies is redundant. If we're going to rely on the superclass' constructor, then there's no need for us to store the username explicitly.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/17552737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/18050559", "body": "I'd rather see this choose based on the values returned from `.credential_tuple` rather than based on inheritance. It's not too big a deal, but the idea behind these is that each instance tells us about what it's doing, rather than rely on the type.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/18050559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/18458454", "body": "Yeah, that's how I'd go. This is designed so you can use your own classes which get the data from wherever you need (disc, the user, a database, whatever), and there's no need for them to hang off of these classes, all they need to do is have this attribute with the data we need.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/18458454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/18502854", "body": "Yeah, that should work just fine.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/18502854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/20060092", "body": "This would then require you to set the path every time you want to use something which uses pygit2. A more common solution should be to `brew link libgit2` which makes libgit2 available through `/usr/local/`, which is the path where non-system-provided software and libraries are installed and where the build system expects to see it (and where python will look when it needs to load libgit2).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/20060092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/22259239", "body": "Aren't we leaking the patch now?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/22259239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/24561394", "body": "I think we should prefer to recommend `repo.diff(commit.parents[0], commit)` here, as that accepts treeishes in a few forms.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/24561394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/24561477", "body": "git-show/git-log use the author time rather than commit time. In order to show what it would show, we'd want to use `commit.author.time` here.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/24561477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/24568160", "body": "The timezone (really offset) is not fixed for the user running git-show, but is read from the commit, in this case from `commit.author.time_offset`.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/24568160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/24648449", "body": "This comment is misleading. We do not handle DST because a fixed-offset timezone doesn't have DST\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/24648449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/24649542", "body": "Many countries do not observe DST and they thus have in effect a fixed-offset timezone (though since they're political the implementation would never be as simple as this). Personally I would not set a timezone and use something like `\"{}{}\".format(offset / 60, offset % 60)` to print the offset.\n\nThough I wonder if pygit2 should provide a datetime as part of the signature instead of time and offset separately.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/24649542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/24648763", "body": "You don't need to catch this. If an exception is not caught the testing framework will signal it as an error.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/24648763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/26035844", "body": "We need to free the buffer after extracting the string, something like\n\n``` python\nret = ffi.string(cmergeresult.ptr)\nC.git_buf_free(cmergeresult)\n\nreturn ret\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/26035844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/26035920", "body": "Since we know what should come out, I think it'd be better if we compared against a string with the exact expected output, rather than just making sure it's not an empty string.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/26035920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/26091421", "body": "That's odd, `git_buf` is meant to make sure there's always a NUL past the buffer to allow treating it as a C-string \n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/26091421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/26136382", "body": "Oh right, I'm so used to making sure everything's a buf that I didn't notice the `.ptr` wasn't from that. Yeah, this is purely a ptr+len combination rather than a C string.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/26136382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/26216367", "body": "This loop would only ever loop once, and we know which file we want. Possibly asserting `len(index.conflicts)` and then looking up `(a, t, o) = index.conflicts[\"conflict\"]` would show better that we're just testing the one file, rather than saying that every file conflict should be this way.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/26216367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/33683372", "body": "There's a few remotes which do use HTTPS, but this test needs to make sure it's using HTTPS, not assume that some unspecified remote is going to be that way.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/33683372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/35500603", "body": "Most should get redirected automatically through GitHub, though some credential tests use it explicitly. That shouldn't matter too much. If you need HTTPS in your test, use a HTTPS url, you're creating a new test, you don't need to use an existing url or remote.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/35500603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "chuwy": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/231", "title": "Show last commits for Tree or Blob", "body": "Hello.\nI pretty sure that my problem is extremely simple or solved many times, but I can't find the right answer. Is there any possibility to get the last commit for particular tree or blob?\n\nI tried to use something very [similar](http://stackoverflow.com/questions/13293052/pygit2-blob-history), but this approach have a bug. It shows few extra commits, which are not appeared in `git log` and anyway, I think there's should be little bit clearer way. Is it?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "suziwen": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/200", "title": "Features/walk support filter files?", "body": "is repo walk  support  filter  by files\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tsuraan": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/76", "title": "Custom Backends?", "body": "Is there any plan to add custom backends into pygit2?  What Rugged has (Rugged::Backend) looks really nice; it would be great to be able to do that in pygit2, but the entire pygit2 Repository API seems to depend on everything working on a local filesystem.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/76/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zhangyiant": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/12d83a955333ff47c2f2c747be3b3f0206f6d674", "message": "Implement update_submodules using ffi."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/f512bd94d47adbcb4ceb07ae76ddfece031c9dab", "message": "Add wrongly deleted declaration."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/bda601adc4a101b9b3131cf0a3ff84461e90e930", "message": "Import submodule_update related options."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brandonio21": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/03deadb9f886ac2ecfafe8de1ffc2fb7f5c5f1c4", "message": "Merge branch 'master' into patch_tests"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/c0eaa698d648af33a72c743ba296dd1427bcb81f", "message": "Fix patch-after-blob-free"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/83fdde770b72b836cc7ae1490803464f74bf9d3d", "message": "Add similar blob test"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/3070a22c064b56da8d0a131be70d2addf40f7856", "message": "Merge branch 'master' into patch_tests"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d463fd7151b6d839afbd49628b7b923d7a958591", "message": "Make broken patch tests be less nebulous"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/007ac2a28dcd3b7dd13beade915fe62f936924ba", "message": "test_patch: assertEquals -> assertEqual"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/798e357ffe3d551a59a26b3f228e321cd6f2a4ed", "message": "Add more patch and blob tests that could fail"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/28c3828ef05d90e1ea6704c0bc60ad78c103af82", "message": "Add contextlines, interhunk lines to Patch.create_from"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/a96da22cbf456fe2181e196877845b590cede606", "message": "Dont create blobs on the fly in test_patch, make patch kwargs"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d5c8e6208c8ac33534c2bf36c7bc525d6bc5e756", "message": "Move declarations to top of functions"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/575905fd2c4791cb11d2f660e1c162c56878b23c", "message": "Add my name, for the fame"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/e765acdb9c17103544d0f10f60fb12abd8ae91a6", "message": "Add bad arg tests to test_patch"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/ea1a08d25746dbb4613ea09350741fe7ae2ad5c1", "message": "Add static Patch.create_from method to create patches"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/24d1db33c6ab7791f15df348ebbedb80a432176f", "message": "Remove test_diff_blob_to_buffer_add as it didnt make much sense"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/c69314b3a6b8beda5a24925a5f83dc8ba86d6e7c", "message": "Add patch property for Patch objects"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/ad1d66e42ac0df511bb5d2f1edf8ec66bcc7a05b", "message": "test_repository: Replace deprecated assertEquals with assertEqual"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/302e40dce60291a5567602cbd053a6d5a1080a47", "message": "Add patch property for Patch object"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fourplusone": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/cae2c2866e610d6b6baa318281f14e8a92cf7a3b", "message": "Clear clone_repo in Prune Test"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/44ef9ad2e9371ea16b302e0938da732868756691", "message": "Remove python 3.2 from appveyor file since it is not supported"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/db213113f4fccd3e8ea32e1b38e50715e0a52235", "message": "Fix/appveyor all (#1)\n\n* Create python-33.yml\r\n\r\n* Delete python-33.yml\r\n\r\n* Update appveyor.yml\r\n\r\n* Update appveyor.yml\r\n\r\n* Update appveyor.yml\r\n\r\n* Update appveyor.yml\r\n\r\n* Update appveyor.yml\r\n\r\n* Update appveyor.yml\r\n\r\n* Update appveyor.yml\r\n\r\n* Update appveyor.yml\r\n\r\n* Update appveyor.yml\r\n\r\n* Update appveyor.yml\r\n\r\n* Update appveyor.yml\r\n\r\n* Use weakref for conflicts caching\r\n\r\nTo prevent GC issues for python <= 3.3, use a weak reference for Index._conflicts\r\n\r\n* Update index.py\r\n\r\n* Update appveyor.yml"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/825f3e45bdc54caa07395e3e40d99b0c27dc6518", "message": "add slashes to URL if needed"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/00dd78bf1b316e398280f13fa266f117294dc846", "message": "Fix windows tests"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/faf6a63d25d9c12d7480e9b4faf4d6531b13b7c3", "message": "Update appveyor.yml"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/30980751cfd3ff63844b641e9d8e663c3fb2d7dd", "message": "Update appveyor.yml"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/dae61ded382fe3fab02504c9483714cb65c3e560", "message": "Update appveyor.yml"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/0e270c72bd15ceb2c465186de500316e62f0dec5", "message": "Update appveyor.yml"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/1afbde0d7f6b14455c27d80a7a1eb41337db378d", "message": "install dependencies in init script"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/7fe7a4da8d22d424e0c21109828d42349e66c1ee", "message": "Remove qoutes from env vars"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/fd1e9e3d356eda0d0c4c528fe5864f2af350ff61", "message": "Update appveyor.yml\n\nupload test results"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/cdd57b2c0f6fade04dc4cb6b33ad7bdb62994bed", "message": "make sure the repo object will be collected before the repo is removed"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/c57a3aeb225cbe325538ec4e17a704f847778abe", "message": "install locally"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/ca444f3c7dcde91ac219bcb8661d4e71398d13cc", "message": "Update appveyor.yml"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/96beae5c820554aac9693bba24f06b2e76cdb1c7", "message": "fix yaml error"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/68de0f8bb663c32c63a36adbebaf5688f520d64a", "message": "fix yaml error"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/df53551cb293e06b053ef2e5f41562c3aa922066", "message": "Build 32 and 64 bit version"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/5864b17b570e0beecce75c19c7c562e6f40ce2ed", "message": "archive wheels"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/6c4fa88d076a29cfdd2b86da8d14f0ac8bef9c59", "message": "using cd,cd .. instead of popd"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/e96d0286b891575b01b9b02e994da749139980bc", "message": "Create appveyor.yml"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cecedille1": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/523f82e9094bd878d2bc1710ff40121ca8c8fbf6", "message": "Add my name, for the fame"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d0c224a1d8ce11c60592c57e1b139cd7d1ee0732", "message": "Implement prune option for fetch"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/ceb02490a554f1dc221049e24f6952c3d883edf0", "message": "Export the constants GIT_FETCH_PRUNE_*"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "StBogdan": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/e768550462d72d3ae065e04ffee2f356e47a84fd", "message": "Added missing parameter in create_commit usage example"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ktdreyer": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/4d78736653075933356eb72c7bb5cf6a2967b28c", "message": "repository: document describe_strategy options\n\nThe documentation for Repository.describe() hinted at the GIT_DESCRIBE_*\noptions constants.\n\nList the valid constants and describe their behavior to make it clearer\nfor the user."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jouve": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/633ec756cc8955b00ca0d212dacad783692fa419", "message": "typo in repository doc"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rcarz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/1c7f72a582c316f0d876737cf70095606aaf69f6", "message": "add me as a contributor for this and #718"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/43c8a8dcb33dc31ced247e48f7a4a9f27bb76f9d", "message": "add repository member for cleaning up open file handles"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pwagland": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/cead4c1b9a44da13bbf4f2c16417aac4c716f6fe", "message": "Update example to use peel() instead of get_object().\n\nAccording to http://www.pygit2.org/references.html get_object() is deprecated, and we should be using peel() instead. Update the example at the top of the page to follow this advice."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bvasiles": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/371c97cadba1649b0f1a0a12aedf4a5b220cd4ac", "message": "Update diff.rst\n\n`old_lineno` appeared twice. I think it should be `new_lineno` instead."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "techtonik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/ab3bb01249f3f88542f8c28fc1fd118de7eb1fe0", "message": "install.rst: Use PyPI wheels on Windows"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/e2393a5e24a0657097aa0c771e96eff1b22ff859", "message": "appveyor.yml Fix nosetests report upload\n\n/xunit/ endpoint in AppVeyor is made for uploading xUnit.net reports\r\nhttp://help.appveyor.com/discussions/problems/5264-xunit-results-are-not-being-parsed"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/da59cb1c9289ca1397fa907e4d419cebc91d4743", "message": "appveyor.yml Attempt to fix test failure reporting\n\nhttps://www.appveyor.com/docs/build-configuration/#script-blocks-in-build-configuration"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/e873c6a363ee75ba3ad24bef15a0c5606727c301", "message": "appveyor.yml Attempt to fix test run\n\nbroken by 865c2f0"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/85930910", "body": "Python 2.7 needs Visual C++ 9.0 - https://wiki.python.org/moin/WindowsCompilers#Microsoft_Visual_C.2B-.2B-_9.0_standalone:_Visual_C.2B-.2B-_Compiler_for_Python_2.7_.28x86.2C_x64.29\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/85930910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mark-adams": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/c6305a062ba190fa4b968614911f0def752cc264", "message": "revert: Add support for git_revert_commit via Repository.revert_commit()\n\nThis change adds `Repository.revert_commit()` which wraps around\n`git_revert_commit` which will return an `Index` with the appropriate\nchanges to revert the specified commit.\n\nFixes #710"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/87beb76dcce090458219410d5641b27a39a93539", "message": "Modify Index.write_tree() to have more robust Repository detection\n\nCurrently, Index.write_tree() relies on either the caller passing in a\n`repo=` arg or the underlying `git_index` being already bound to a\n`git_repository`. This ignores the case where the caller does not pass\na `repo` argument to `Index.write_tree()` but the `Index._repo`\nproperty is populated on the index.\n\nThis change modifies Index.write_tree() to use the passed-in `repo`\nargument, falls back to using `Index._repo` and then assumes that\n`git_index` must be bound to a `git_repository`. This change should make\nIndex.write_tree() a little more robust in the most common use-case."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lfos": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/f18de427bf9f3601778daa4dd559b995ad5bd29a", "message": "Randomize OID object hashes\n\nInstead of using type punning to convert the OID to a Python hash, use\n_Py_HashBytes() to hash the OID again. This means we no longer make any\nassumptions on the internal representation of OID values or Python\nhashes (before this commit, we at least relied on the fact that OID\nhases are longer than Python hashes). Moreover, the random seed stored\nin PYTHONHASHSEED is now honored.\n\nThis also fixes a compiler warning seen with -Wstrict-aliasing.\n\nSigned-off-by: Lukas Fleischer <lfleischer@lfos.de>"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/035d4a9396282cbbf21a7dd69eb0b97db22d446f", "message": "Mark index unsigned in get_pylist_from_git_strarray()\n\nSigned-off-by: Lukas Fleischer <lfleischer@lfos.de>"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/21d668421f123027013a7c4a6b14096905178401", "message": "Remove unused variable from Repository_init()\n\nSigned-off-by: Lukas Fleischer <lfleischer@lfos.de>"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/b88dc868423af2f760f649960112efd0e37e5335", "message": "Fix parameter passing of describe patterns\n\nWhen ffi.new() is used to build a new pointer object, the returned\npointer object has ownership on the allocated memory. When it is\ngarbage-collected, then the memory is freed. Thus, we need to make sure\nthe original object survives its use, otherwise the casted pointer will\npoint to garbage.\n\nThis fixes one test which was failing with the latest CFFI version, see\nissue #694. Thus, this commit also reverts 803b1cb (cffi 1.10 not yet\nsupported, 2017-03-22) where the latest CFFI version was marked as\nunsupported.\n\nSigned-off-by: Lukas Fleischer <lfleischer@lfos.de>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nhynes": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/1fadc2eae0b36bf2436a0f34d51aff33ea85327f", "message": "Wrap branch_is_checked_out"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/453fd8a9a3dbd5e9eb7f7bcbaba5ab2d81969ea7", "message": "Add docs"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/630d905e73f31ebb772df01eadbb3db4429725ed", "message": "Add stash tests"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/9be907983f44f975f32edea9356b4fb083516896", "message": "Wrap stash_pop"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/b31ac5021003cb678f89f5fc4a5c6594b12864df", "message": "Wrap stash_drop"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/da233b16c5b4cb5fdeef476725bee8fa731839f2", "message": "Wrap git_stash_apply"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/1a842ff8bdf09125a456fa886e4b9e5c944364c2", "message": "Wrap git_stash_save"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/cbbf9f1f8763c2fb1a21e68ce41ce75dba8ff059", "message": "Fix Signature._pointer"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/a294655aa570e839bd686fde590a035f3c5a2a6d", "message": "Add declarations for git-stash"}], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/719", "title": "Rebased worktrees", "body": "This is a rebased version of #691 (with a tiny modification to use add+prune opts) if the original author doesn't get around to updating it.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jasedit": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/8327e1bee3edcb9a80c35a9633b44fc048ce306f", "message": "Add test for init_submodules() and update_submodules()"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/15326b731f7cf4d40be9526ce23092ec1674f17d", "message": "Add update_submodules() command"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/f5cd6da3079d511667bb7706a53a3cbef66449f7", "message": "Add init_submodules() command"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hishnash": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/4fbc1f1c059495b7331c67e12f65e57a73eb7106", "message": "Add support for custom backends\n\nSigned-off-by: Matthaus Woolard <matthaus.woolard@gmail.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/100339257", "body": "fixed", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/100339257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/100339276", "body": "fixed", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/100339276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "thomwiggers": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/cde5b5170baa9d20c49e515699f5fc24345bc11c", "message": "Allow testing with tox"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/735510f14d09c2c3bcb2d6aeb1e0f1b8aeb5fe36", "message": "Fix repository crash if path passed is not a str\n\nTries to decode any non-string objects (such as bytes)\n\nIntroduces `six` as a dependency\n\nCloses #588"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/bc424e342f65dd5b6ca8a624320066dd8f8958de", "message": "Add unit tests for bytes and unicode Repositories\n\nAdd unit test for bytes repository paths\nAdd a unicode path test for Repositories"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/3470fbc1c6ce557aedcbf3d438660c8bf02fc64d", "message": "Add unit test for bytes repository paths"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/54347576", "body": "`six` wasn't a dependency of this project so I was hesitant to include it.\n\nIt will actually not break though. On py2, you'll pass a `str` or `unicode` to this function. `unicode` has `.decode` and will decode to `str`. py2 `str` is accepted by Repository just fine. On py3 you'll pass a `str` or `bytes` to this function. `bytes` will `.decode` to `str`. py3 `str` is also accepted by `Repository`.\n\nIf you pass anything else then it'll break with a vague error about not having `.decode`, but this is the best I could come up with without `six`.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/54347576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/54348476", "body": "This also fixes `setup.py sdist` on Python 3.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/54348476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ccope": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/95ad6b1b0a03ff8ae80d167c5f305c1b01dfd0aa", "message": "add method to check if a path is ignored"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cvrebert": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/daff45f2d408057056360005e929e5fe101e241e", "message": "Document that Diff.patch can be None; fixes #467"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chason": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/a5cfea21a71a95414525d2e97a7cbee0e4e43e3e", "message": "Fix broken binary diff test\n\nIn a recent commit to libgit2, binary diffs were changed to have a\ntrailing empty line. This broke a test in test_diff because it compares\nit directly against the string. I've added the extra line to the\nexpected output and the test now passes correctly."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "impl": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/99dfce9ab8202dacf45127cf1257318d584f18a0", "message": "Add support for Repository.describe(...)."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "foca": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/cf439e42866f9f35532d2e4301bd071c357a4c3e", "message": "List OpenSSL as a dependency in the docs"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "olasd": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/eadc2a320fadb8c6ba9ec5aecb66494dd0189b7c", "message": "tag._message: avoid NULL pointer dereference\n\nA tag message can be empty. In that case, git_tag_message returns\nNULL. PyBytes_FromString doesn't check its argument for nullness, and\ntherefore accessing _message on a tag with an empty message segfaults\nPython."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/2b083a1509debd80f136443420311ffb63089e3e", "message": "Add _name attribute to TreeEntry\n\nThis mirrors the _message attribute for Tag, which gives you the raw\nbytes from the entry name. Useful to parse repos where some filenames\naren't encoded as utf-8, such as https://github.com/wuts/earthquake."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/4b607b8256e985f52e508088affe1e04cddb4d58", "message": "Re-enable tests on PyPy"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/ec23762c09ce23a58f81cac98e65e55be42dc3f5", "message": "Add support for cffi-pre-1.0"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/ac7738bbb3299ea127b4013db88bc7e35477823e", "message": "Add type attribute to TreeEntry\n\nThis allows complete iteration and rebuilding of a tree without hitting\nthe object store for every entry."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bisho": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/802976535ac0690a2888f66a1fbd83ebb2a34818", "message": "Add support for GIT_DIFF_SHOW_BINARY\n\nAdding the binary diff flag GIT_DIFF_SHOW_BINARY to pygit2.\nlibgit2 0.23.0 already supports this constant to be used in diff\nflags and produces properly formated binary diffs."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Sheeo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/f28a19935113d9f6468b647c540ad4d234d8c309", "message": "Install cffi>=1 on travis"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/becc265c787a7e039df67af4a8c62ae5230a0422", "message": "Don't use the deprecated cffi.verify by default\n\nInstead this does what is recommend in the CFFI docs here: https://cffi.readthedocs.org/en/latest/cdef.html?highlight=verify#out-of-line-api\n\nThis also means building the cffi extension is neatly handled by cffi's setuptools integration itself, so we can delete the code in setup.py that used to do this."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/20934040", "body": "Why wasn't this **file** in the first place? I may be wrong in replacing it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/20934040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "viawest-davidsix": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/25d02259df7b73ec220b2a0095ad4a2d7d525f96", "message": "Fix: pass push_opts to git_remote_push"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "spderosso": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/9dd74dd593a972deba1e796f59bf8f2abe5a1994", "message": "add doc for DiffLine"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/cd7e2b21be85a2adc0b17bd6d89d7d2cf603ead1", "message": "make pygit2 work with pyinstaller"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/08f2956e9771180f70e5a2707ed3e1fd43f26aff", "message": "diff of blob to blob in repository.diff"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/99e1cad3932d63da37bf8b70e8b7bb1c066c8ede", "message": "bug fix in repository.diff"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "justinclift": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/cc898d29e592927ab977fe10d1e1a1331ea2a6fd", "message": "Typo fix"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rmoehn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/654e4bf56f7ea0a86743c4db757ce51e8fa87da7", "message": "Cherry-pick recipe: clean up after picking\n\nIn b3025e3fe I had written that when following my recipe, the repository\nremains in cherry-picking mode afterwards. In issue #516 I was told that\nRepository.state_cleanup() is needed to correct that. Therefore add it\nto the recipe.\n\nAlso add a note near the documentation for cherry-pick, so that nobody\nwill overlook this again. Apparently there are other times when you need\nto do Repository.state_cleanup() as well, but it's not documented, I\ndon't know when and I don't want to take the time and find out. So leave\nit at that for now."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/1b9cb54927058edca087227f481280e5c4634c14", "message": "Add hint to Diff.__iter__()\n\nI'm not the guy who looks at examples in the first place and I guess\nthere are other people like me. When I wanted find out how to get\ninformation out of a Diff, I looked at the documented methods and didn't\nfind anything. Only later @cmn showed me the [p for p in diff] example\nin the documentation. Add a short piece of information that gives a hint\nto those who prefer the dry API docs."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/7a6465833b6016307ef28dea45a25acc5f7a7e70", "message": "remote.py: Denote optional parameters as such\n\nIn the online documentation to Pygit2 it was not visible that (some of)\nthe parameters to Remote.fetch() and Remote.push() were optional. Fix\nthis. (I'm not sure if the way I did it is the idiomatic way of marking\na parameter optional in Python docstrings.)"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/b69a2f6197e83b33b5fca362c9d5a412074adcc0", "message": "Clarify docstring for Repository.create_commit\n\nChange the argument \"reference\" to \"reference_name\", because \"reference\"\nmight lead to the assumption that one has to pass a pygit2.Reference."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/b3025e3fe1fa0882b3419853875806152009624e", "message": "Add git-cherry-pick recipes\n\nAdd the way that worked for me. Not sure if it is idiomatic. When doing\nthe convenience-mode cherry-pick, the repo remains in cherry-picking\nmode afterwards. I've already added an issue for this."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/1cb62ab578c63c48927a82dec2bb3fbb04d0c4b7", "message": "git-show recipe: Add the easy Python 3 way\n\nAs @jdavid pointed out, Python 3 already provides a tzinfo subclass for\nfixed UTC offsets. Incorporate this in the recipe. Leave the old code\nwith the self-made class, since many people are working with Python 2\nand it is harder to find out there."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/69f539851bcc49948bc4996926c2523114678a21", "message": "Clarify comments in git-show recipe"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/2b2beb80943fd2a7521c537bc7696c60cc28220d", "message": "Correct git-show recipe\n\nMake the diff generation more idiomatic and fix the assembling of the\ntimestamp. git-show normally prints the author time, so use this instead\nof the commit time. Also fix how tzinfo is obtained. Of course we have\nto use the author's time zone and not some fixed one as I had written\nbefore."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/c87d28c9a807be3203c22f928d9e6bc3810d1aa5", "message": "Update git-show recipe\n\nI couldn't get the diff as shown in the git-show recipe. Therefore\nupdate it to what I think it should be. Maybe there is a better way.\n\nAlso add a section on how to assemble a git show-like message. It took\nme quite some searching in the Python docs to find out how to do it,\nespecially the date and time part. So this might save people time. I\nwanted to add something that gives me a git show --stat equivalent, but\ncouldn't figure it out."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/24574248", "body": "Have a look at my new commit. I fixed it there already.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/24574248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/24649090", "body": "Well, a fixed-offset timezone isn't really a timezone. At least in my opinion it shouldn't be necessary to wrap a number in an object that is too dumb to return anything else than that number. But that's Python's fault and you're right: the comment is misleading.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/24649090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/24660397", "body": "That would be convenient. The `.format` version would be shorter, but also ugly, since you have to deal with the sign. `123 / 60 == 2`, `-123 / 60 == -3`\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/24660397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "pks-t": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/f923e20f2df7e3140fad940c9570fb7baf8f8234", "message": "submodule: reimplement with Python CFFI.\n\nThe submodule type has been implemented as a C type. When opening\na submodule's repository this leads to the bug that instead of an\nactual pygit2.Repository being instantiated we only create an\nobject of the C Repository type.\n\nAs this is not trivially fixed within the C code, reimplement the\nsubmodule type as a Python interface with CFFI. As submodules\nprovide no functionality that is usually accessed repeatedly the\ncode paths should not prove performance critical. In addition,\nmaintainability is improved by this reimplementation."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/cf56a695f96d13ed9f18bf376dd6d0d2b1c47e42", "message": "Fix error when merging files with unicode content.\n\nWhen merging index entries where the corresponding files contain Unicode\ncodepoints an error is thrown. Decode the C string using UTF-8 to fix the issue\nand adjust the test case for merging files to contain umlauts to catch such\nerrors."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/367084e3c15a29027e65111d436a931de27b5f76", "message": "Implement merging of index entries.\n\nThis allows us to generate a textual diff of conflicting files in\nbare repositories by performing a merge on the index followed by\nrepo.merge_file_from_index on the resulting index entries."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/9a4e002864fb84956b62788740cc5af8b8b6201a", "message": "Fix build error with Python3 due to PyString_FromFormat."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/71ca619e269ff079c94b257ebc9f45037d938eb3", "message": "Fully implement Submodule type in C."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d35ecf945a14bfdad3523a0b916697327be06a31", "message": "Add tests for submodules."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/86c51eadbfca6a32604a7166aae5908cc819f2d4", "message": "Fix issues with submodules regarding refcounting."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/404645042be0c131a5736c1695b70f9bcaf32558", "message": "Add Submodule type."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/26089723", "body": "Fixed now. This also revealed some kind of bug where the ffi.string would get scrambled at the end when not creating it with cmergeresult.len. Seems as if the string is not correctly NULL-terminated in xdiff. I didn't dive into the issue, though.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/26089723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/26102690", "body": "We don't have `git_buf` here, though, but a `git_merge_file_result` where `git_merge_file_result.ptr` is filled by `xdl_merge` in merge_file.c:154.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/26102690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "rutsky": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/ca39a65054e18976972970c935163eae3e605e22", "message": "fix typo: \"Troobleshooting\""}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kitsemets": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/2d3f9d8e551c5e43e2ce12ada9dcebd1a8e14bf4", "message": "Added info about pkg-config being an optional requirement"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/ef67c36d8cbc124c4707f46b9ba1cb7fa87cfe7d", "message": "docs/install.rst: added pkg-config as a dependency for building libgit2. Without pkg-config it is not possible to build libgit2 with ssh support."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rnicoll": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/c91fdf1d211957459a7d51eacaa08fea45ebb4ca", "message": "Add support for cherrypick()"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gandalf013": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/f5a5dfc18a0b8989a413e9b1f410515835d06469", "message": "Use \"prefix\" instead of \"root_path\" in write_archive"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/3ee1c798b2861fdedefaee90e1810a7849af44bd", "message": "Add an option to specify root path when creating archives"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/9771adf8629540391735b199420fba2656d5305b", "message": "Fix handling of symlinks in write_archive()."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alexchamberlain": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/538", "title": "Add certificate callback.", "body": "Existing unit tests pass. Adapted from `__init__.py`.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7997112", "body": "Hi jdavid. \n\nDone - I've had to change the test from a bare repository to a non-bare repository as it is necessary to have a `workdir`.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7997112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/32870307", "body": "Hmmm this isn't being called, as the remote isn't `https`, but there don't appear to be any `https` tests?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/32870307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/34396741", "body": "Sorry; missed this update. Any idea which test case uses HTTPS?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/34396741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "petrhosek": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/405", "title": "Walker interface reimplemented with CFFI", "body": "I've reimplemented the `Walker` interface with CFFI; this is a first step towards reimplementing the entire pygit2 Object model with CFFI. It's supposed to be a straightforward rewrite, I haven't made any changes to the API to avoid breaking the backwards compatibility.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/346", "title": "Diff and Patch interface refactored", "body": "This is a complete refactoring of the diff and patch interface. The changes include:\n- Splitting `Diff` and `Patch` into separate classes and files, including respective tests. This largely follwos the recent development in `libgit2`.\n- Introducing `DiffDelta`, `DiffFile` and `DiffLine` classes and their respective iterators.\n- Moving the recently introduced `Blob` diff methods into patch again to be in line with the respective `libgit2` interface.\n\nThe biggest difference, apart from the code cleanup, is the lazy evaluation due to heavy use of iterators rather than evaluating everything ahead of time as in case of the existing code, which tends to be slow on larger projects.\n\nI have tried to make the interface as \"Pythonic\" as possible, while closely following the underlying `libgit2` C interface. However, some of you might think of a better abstraction and I'd happy to incorporate further changes into the patch.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vmg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/578596", "body": "Indeed, it was using the private clone URL. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/578596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/578600", "body": "Replaced the build instructions with a link to our website: that way it'll always be up to date.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/578600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/694355", "body": "Neat, thanks for this, but it looks like I got two pull requests for the same thing. ^^\n\nI've just merged the other one, and while I was at it fixed the test that was failing -- it was an issue in libgit2, so thanks for reporting.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/694355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/750527", "body": "Hey, this is very nice, but the new compressed text repository is making the tests fail:\n\n```\nTraceback (most recent call last):\nFile \"/Users/tanoku/src/pygit2/test/utils.py\", line 74, in setUp\nz.extractall(temp_dir)\nFile \"/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/zipfile.py\", line 940, in extractall\nself.extract(zipinfo, path, pwd)\nFile \"/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/zipfile.py\", line 928, in extract\nreturn self._extract_member(member, path, pwd)\nFile \"/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/zipfile.py\", line 965, in _extract_member\ntarget = file(targetpath, \"wb\")\nIOError: [Errno 20] Not a directory: '/var/folders/0d/0dHASpI3E9Ca1CvFczxbjU+++TI/-Tmp-/tmpdHiwtC/testrepo/bye.txt'\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/750527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753331", "body": "Hm, 2.5.4 fails too, with the following error:\n\n```\nTraceback (most recent call last):\n  File \"setup.py\", line 87, in <module>\n    **kwargs\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/distutils/core.py\", line 151, in setup\n    dist.run_commands()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/distutils/dist.py\", line 974, in                 run_commands\n    self.run_command(cmd)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/distutils/dist.py\", line 994, in run_command\n    cmd_obj.run()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/Extras/lib/python/setuptools/command/test.py\", line 121, in run\n    self.with_project_on_sys_path(self.run_tests)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/Extras/lib/python/setuptools/command/test.py\", line 101, in with_project_on_sys_path\n    func()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/Extras/lib/python/setuptools/command/test.py\", line 130, in run_tests\n    testLoader = loader_class()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 767, in __init__\n    self.parseArgs(argv)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 794, in parseArgs\n    self.createTests()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 800, in createTests\n    self.module)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 565, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 553, in loadTestsFromName\n    test = obj()\n  File \"/Users/tanoku/src/pygit2/test/__init__.py\", line 41, in test_suite\n    return unittest.defaultTestLoader.loadTestsFromNames(modules)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 565, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 541, in loadTestsFromName\n    parent, obj = obj, getattr(obj, part)\nAttributeError: 'module' object has no attribute 'test_blob'\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753753", "body": "Fair enough -- the tests do work with Python 2.7. Nice job!\n\n...However, I'm afraid that 2.6 is still too mainstream as to have the tests broken on it. You need to work around the Zip issue on 2.6 before I can merge this. I'd suggest using GZip instead of Zip.\n\nThanks in advance!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754119", "body": "This is perfect, thank you very much! Merging now.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942714", "body": "Hey, just stepping by to remind you that the linking exception is indeed _very_ permissive: you could even link your own Python library with a static version of libgit2 without it affecting your own program's license. I'm looking forward to see what can you come up with the git-python streaming framework. \n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1795400", "body": "Hello gentlemen. Some thoughts:\n\nAs a pythonista: I'd like to encourage you to drop support for 2.5 on pygit2. It's just ancient, and in October it won't be maintained anymore. 2.6, 2.7 and 3 are much more reasonable targets to support. I haven't seen anybody complain about it either.\n\nAs the libgit2 maintainer: the issue when trying to wrap libgit2 in an Unicode-aware language is more complicated than it seems. We're facing the same problems when porting Rugged to Ruby 1.9.2.\n\nHere's what we have so far:\n1. Blob contents are trivial: these are completely encoding-agnostic and should _always_ be returned as a raw sequence of bytes.\n2. Commit messages: These are also trivial. There's an optional header in commit files, right before the commit message, which specifies its encoding. If this header is not present, the encoding defaults to UTF-8. I'm currently patching libgit2 to add support for this header.\n3. Path names, all over the library (specially in trees): these are a fucking headache. Git tries to be encoding agnostic on these, assuming that the raw bytes passed around can be sent directly to the Kernel. There is no simple way to guess the encoding of a path when converting it to a Python string, except for letting the user specify it, but there's no elegant way to allow this.\n4. SHA1 strings: This is quite trivial. Raw SHA1s should be stored as raw bytes, and Hex SHA1s should be stored as whatever the default string encoding is in the platform (UTF-8, most likely). This is a no-brainer.\n\nEither way, I'd love to see some more discussion and feedback on this, so we could come up with a standard unicode solution for both Rugged and Pygit2.\n\nCheers,\nVicent\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1795400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1795818", "body": "> (1) I would still like a convenience method for getting the encoded string. IMO, most of what people in Git is text, and the method is simple enough to add.\n\nHeuh, why not just use Python's `str.encode` to get it into whatever encoding you require? Is that not convenient enough?\n\n> (2) Amazing! Looking forward to the patch :)\n\nIt's already on the libgit2 head. Please shout if it's not working for you.\n\n> However, git help commit says that the \u201cIf this header is not present, the encoding defaults to UTF-8\u201d behavior is only enforced with a warning. People ignore warnings. It seems there may well be commits that use some other encoding and don't have the header. Decoding them with UTF-8 will either crash or even give you bad data :(\n\nThis warning only applies to messages that do not look like UTF-8. We could of course try to encode these as UTF-8, and if the encoding fails, resort to returning the raw bytes.\n\n> (3) There's sys.getfilesystemencoding(). Since git already assumes that the filesystem's encoding magically matches the repo's, maybe it could work?\n\nCertainly factible in Unix and Mac OS X, but things can be a lot messier in Windows, because the same folder can have paths with more than one encoding.\n\n> (4) Umm... Shouldn't that read Hex SHA1s should be stored as text strings? They're always just ASCII, no need for anything platform-specific.\n\nYes that's what I meant. But of course these text strings will come in an encoding, don't you think? ;d\n\n> - commit author names: can use commit's encoding?\n> - commit e-mail addresses: e-mail's technically ASCII-only, but it probably won't hurt to use the commit's encoding too\n\nI need to talk about @peff about this, because I don't know how exactly does the commit `encoding` header apply to names and emails, since the header shows up _after_ the committer and author lines.\n\n> - tag messages, authors, emails: do these also have the encoding header?\n\nThey do not in core Git, which is kind of a stupid overlook. Maybe we should support them in libgit2.\n\n> - tag & reference names: these are used in filesystem paths, so I guess there's problem (3) again...\n\nYes, same drawbacks as tree paths apply here.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1795818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2661561", "body": "Oh jeez, here we go again.\n\nThis topic has been discussed extensively (internally) regarding Rugged and the transition to Ruby 1.9.2, which as you know, also adds support for encodings on strings.\n\nBasically, what we agreed upon is letting the user choose, on a per-repository basis, on which locale are the strings (paths) for that repository encoding. We default this to UTF-8, but the user is able to change the encoding for any given repo as soon as he notices transcodings starting to fail.\n\nThe library automatically tags all the strings coming out from the repo with such encoding. This is not the most elegant solution, but it's the only one that works in 100% of the cases: if the user is not able to manually specify an encoding, there is no reliable way whatsoever to detect it. And I prefer to keep guessing to a minimum.\n\nRegarding Ruby 1.8.7, we just return raw bytes as strings, since this version of Ruby doesn't have proper unicode support. I understand that the smart thing to do is returning Unicode strings in Python 2.X too, since otherwise the API would break between version.\n\nAnyway, this is what we're rolling with for Rugged. Just thought I'd let you know.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2661561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3942625", "body": "There's nothing stopping you from adding `py` files to the extension, just like we do on Rugged.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3942625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": []}, "dborowitz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/597958", "body": "This changed in libgit2 as of\nhttps://github.com/libgit2/libgit2/commit/44908fe763b1a2097b65c86130ac679c458df7d2\n\nFeel free to update pygit2.c if I don't get the chance to soon.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/597958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/726750", "body": "This appears to have been fixed by 9e919c39662ecc0f0080. I was able to build successfully at HEAD, so I'm going to close this issue. Let me know if you still have problems.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/726750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942629", "body": "On Thu, Mar 31, 2011 at 03:27, Byron <\nreply@reply.github.com>wrote:\n\n> Hi,\n> \n> As the answer to this question might be interesting for others as well, I\n> make it public using the issue system.\n> \n> Pygit2 uses the same license as libgit2, the GPL with linkage exception.\n> The problem I see is that this exception doesn't apply to the usage of\n> pygit2 within other python programs and libraries which are not necessarily\n> licensed under GPL.\n\nI've been assured by a lawyer that the linkage exception does apply to the\nnormal Python import mechanism. So you can safely \"import pygit2\" from a BSD\nproject without making that project GPL+exception. (You still cannot safely\nincorporate pygit2 source code in the source of a BSD project.)\n\n> For instance, I would be interested in using pygit2 in one of my projects,\n> gitdb, which in turn can be used by git-python. Both are licensed under\n> NewBSD, so I am worried that using pygit2 would compromise this license and\n> force it into the GPL.\n\nAs long as \"using\" == \"importing\", this is fine.\n\n> Could you please clarify the situation ?\n> Thank you,\n> Sebastian\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/libgit2/pygit2/issues/15\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "peti": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/739459", "body": "I can confirm that this patch fixes the build error.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/739459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jszakmeister": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/820439", "body": "I realized that shortly after I submitted the pull request (and I thought I closed this one... but perhaps I forgot).  Thanks anyways!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/820439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "honza": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/889316", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/889316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Byron": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940525", "body": "According to wikipedia, the LGPL, even though it usually refers to library linking, may also be generalized into 'using' the library.\nAs python doesn't explicitly link pygit2 when importing it, the LGPL wouldn't really help unless we just regard pygit2 as being 'used' by my library. I don't know what lawyers say about that, but I would be fine with LGPL, from what I read in the wiki at least.\n\nPersonally I think the LGPL was designed just with dynamic and static libraries in mind, but maybe it can be widened to the general use of one library by another, no matter which system of linkage is actually employed.\n\nMaybe it would already be enough to adjust the linkage exemption to state that it may be linked to _and_ imported. This should be clear enough to allow git-python to use it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942643", "body": "Great to hear, thanks !\nI am quite eager to find out how libgit2 performs within the git-python streaming framework, so I will try to implement a gitdb which allows to obtain object information and object streams. Lets see how that works out :).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/958433", "body": "It works for me, i.e. it builds and all 23 tests pass.\nThank you very much !\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/958433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1532272", "body": "Thanks for the hints, I will make the fixes asap.\nAlso I will see that I put the feature and the fixes into their own respective commits, so you should not get more than two correct commits which match the conventions.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1532272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1561412", "body": "In GitPython, 20 byte shas are used internally, which saves a conversion when accessing objects in a pack. As GitPython supports pure-python pack access, this is slightly more efficient.\n\nThanks for your heads-up, once again, about coding and comment style. I will get the commits fixed during the weekend I suppose, hopefully for real this time :).\n\nCheers\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1561412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1595994", "body": "Alright, I rewrote the outstanding commit, which adds repository.write functionality, cleanly.\nThanks for guiding me through this :)\nSebastian\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1595994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "t3rm1n4l": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/964001", "body": "Thank you :)\nI will be careful about your notes for the next commit.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/964001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/964128", "body": "I will send another commit with corrections tommorrow.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/964128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jflatow": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1131549", "body": "OK, I rebased and it's definitely not fixed in the development branch (see my dev branch if you like, although the rebase is trivial). Btw,\n\nPYTHONPATH=. python test/test_leak.py TestLeak.test_index_getitem\n\nshould work on either branch.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1131549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1132181", "body": "I dont understand it myself, it should be assertEqual. I'm not sure what I was thinking except that I got distracted by the leak.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1132181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "enzbang": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1131655", "body": "For test_read_blob, when we try to do shutil.rmtree, we have a handle on some *.idx, *.pack files. On windows, we need to close all the handles before removing the files.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1131655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "noahdesu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1193277", "body": "I'm using the master branch and I'm getting the same error now.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1193277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "alexbarcelo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1511732", "body": "I have the same problem.\n\nAny patch or workarounds for that?\n\nEdit: Well, workaround... using v0.13.0 in both sides (libgit2 and pygit2) works. I suppose that there is work being done.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1511732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "leto": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1514069", "body": "It looks like the API has changed, but I am sure it is currently in a\nstable state. I assume only tagged releases are intended to be used.\n\nOn Wed, Jul 6, 2011 at 6:43 AM, alexbarcelo\nreply@reply.github.com\nwrote:\n\n> I have the same problem.\n> \n> Any patch or workarounds for that?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/libgit2/pygit2/issues/23#issuecomment-1511732\n\n## \n\nJonathan \"Duke\" Leto jonathan@leto.net\n209.691.DUKE // http://leto.net\nNOTE: Personal email is only checked twice a day at 10am/2pm PST,\nplease call/text for time-sensitive matters.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1514069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mike-perdide": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1555747", "body": "I guess I was thinking about TreeEntry.attributes, but it's probably better to keep the same name. Let me make another pull request.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1555747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1654613", "body": "My bad, the correct return line was return payload_dict. I'm making a new pull request right now. About `#include \"git2/status.h\"` it is needed for now as https://github.com/libgit2/libgit2/blob/development/include/git2.h doesn't include it for now.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1654613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1665415", "body": "I've made the pull request https://github.com/libgit2/pygit2/pull/34\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1665415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1665434", "body": "This probably shouldn't be included until the pull request on libgit2 gets merged.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1665434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1671326", "body": "oops, too much pulled commits.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1671326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1672455", "body": "https://github.com/libgit2/libgit2/pull/343#issuecomment-1672105 The pull request on libgit2 has been accepted.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1672455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "esc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1765583", "body": "Hi,\n\ni have been thinking about writing cython bindings for libgit2. I think the issue of handwritten vs. Cython is not an either or question, but i think that both bindings (I would call the Cython ones cygit2) should co-exist. This would mean the cython bindings would have to be 100% api compatible to the handwritten ones which AFAICS is currently the case since the Cython bindings use the unit-tests. One could think about introducing a flag allowing the programmer to select an appropriate 'backend' to give the choice to the user.\n\nI think both wrapping approaches have their merits and both can learn from each other.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1765583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "encukou": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1768772", "body": "It shouldn't be too hard to maintain the Cython bindings if the test suite is shared with the C-API pygit2, but it'll necessarily mean each would have less users/testers :(\nAnyway, I'll be keeping them around at least until pygit2 supports Python 3.\nI've contacted pyos to see what he thinks.\n\nAs for speed... my code is about 10% slower on the test suite, and I didn't try to optimize at all. The test suite is not a good benchmark, though \u2013 there's a lot of exception raising; I think Cython's detailed tracebacks are better than speed here.\nAnd talking about speed is useless without a good benchmark, so I'll end here.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1768772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1771627", "body": "Git submodules are quite a hassle in my opinion (unless the linked project is big), not to mention libgit2 doesn't really have them yet. I can just continue to pull from pygit2, and ignore the non-test changes.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1771627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1777585", "body": "Since strings in Python 3 are Unicode, pygit2 will need to somehow decode/encode paths, tag/reference/person names, commit/tag messages etc. And it probably needs to be at the pygit2 level, since Git tries hard to not care about encodings*\u207e.\n\nI added a Repository.encoding attribute (default 'utf-8') to my Cython bindings to specify the encoding to use. Also I added Blob.string which has the .data encoded this way.\n\n*\u207e `man git-commit` does mention some options in .git/config, and an `encoding` header, but that's for commits only.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1777585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1784204", "body": "Yes, blob contents should of course be byte strings, since they're not always textual. However there should be convenient access to the contents as a string, since that's what people usually store in Git.\n\nRaw SHAs (b'\\7b\\x8a\\xe0\\xe1\\x0ce\\x93\u2026') should be byte strings, but pygit2 doesn't normally give you those.\nHex SHAs ('7b8ae0e10c6593\u2026'), on the other hand, are readable strings, not bytes. Keep in mind that in Python 3, 'str' != b'str'. They should be encoded using ASCII instead of the repo encoding, though.\n\nAccepting bytestrings everywhere is a good idea, after all it's what libgit2 uses internally. Maybe even return raw bytestrings if the encoding is None.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1784204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1790616", "body": "Hex SHAs are a _readable representation_ of the actual bytestring. It's a representation that's deliberately made longer and harder for the machine to parse than the raw SHA in order to be human-readable as a text string. It's not binary.\nPlus in Python3, the text string seems to be the \u201cdefault\u201d choice when there's ambiguity: for example the second argument of open() must be a `str`. I don't think `repo['7b8ae0e10c6593dafca6680db4575514bd5b9475']` raising an exception is acceptable.\n\nAs far as accepting both \u2013 Git itself works with byte strings, which would probably be faster, and it allows byte sequences that don't make sense as text. If there's an option to put the repo in \u201cbinary mode\u201d (where it'd return bytes everywhere), then it would have to accept bytes as well.\nHere's Python's solution to a similar problem (from [What\u2019s New In Python 3.0](http://docs.python.org/release/3.0.1/whatsnew/3.0.html#text-vs-data-instead-of-unicode-vs-8-bit)):\n\n> Filenames are passed to and returned from APIs as (Unicode) strings. This can present platform-specific problems because on some platforms filenames are arbitrary byte strings. (On the other hand, on Windows filenames are natively stored as Unicode.) As a work-around, most APIs (e.g. open() and many functions in the os module) that take filenames accept bytes objects as well as strings, and a few APIs have a way to ask for a bytes return value.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1790616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1791281", "body": "> The case with filenames is not similar. You can have filenames with non-ascii characters, typing open(\"canci\u00f3n\") makes sense. But an Hex SHA cannot have anything else than numbers and letters from a to f, it is not free text.\n\nI meant the second argument to `open('filename', 'wb')`, which is also not free text.\n\nThe second part of my post related to accepting bytestrings for paths, author names, etc.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1791281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1795765", "body": "@tanoku, some thoughts:\n\n(1) I would still like a convenience method for getting the encoded string. IMO, most of what people in Git is text, and the method is simple enough to add.\n\n(2) Amazing! Looking forward to the patch :)\nHowever, [git help commit](http://www.kernel.org/pub/software/scm/git/docs/git-commit.html#_discussion) says that the \u201cIf this header is not present, the encoding defaults to UTF-8\u201d behavior is only enforced with a warning. People ignore warnings. It seems there may well be commits that use some other encoding and don't have the header. Decoding them with UTF-8 will either crash or even give you bad data :(\n\n(3) There's sys.getfilesystemencoding(). Since git already assumes that the filesystem's encoding magically matches the repo's, maybe it could work?\n\n(4) Umm... Shouldn't that read _Hex SHA1s should be stored as text strings_? They're always just ASCII, no need for anything platform-specific.\n\nWhat's left:\n- commit author names: can use commit's encoding?\n- commit e-mail addresses: e-mail's technically ASCII-only, but it probably won't hurt to use the commit's encoding too\n- tag messages, authors, emails: do these also have the encoding header?\n- tag & reference names: these are used in filesystem paths, so I guess there's problem (3) again...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1795765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1797810", "body": "> Heuh, why not just use Python's str.encode to get it into whatever encoding you require? Is that not convenient enough?\n\nLet's see... `repo[sha].data.decode('utf-8')`?\nNo. Not for the usual use case. Not for getting usable strings out of my repository.\n\n> 90% of files I put in Git contains text. `str` is a fundamental Python datatype. Git itself expects text in e.g. .gitignore. The repository needs to know its encoding anyway (for creating commits at least).\n> Yes, pygit2 might be a thin wrapper, but if it goes through all the trouble with encodings, it really should have a one-liner for such a common operation.\n> Look at e.g. Python's open(), which will also decode the file for you. (Binary mode is one 'b' less convenient.)\n> \n> This warning only applies to messages that do not look like UTF-8. We could of course try to encode these as UTF-8, and if the encoding fails, resort to returning the raw bytes.\n\nI'm not sure about returning a different datatype on error instead of raising an exception. Errors should never pass silently.\n\nAnother approach would be what [os.getcwd](http://docs.python.org/release/3.2/library/os.html#os.getcwd)/[os.getcwdb](http://docs.python.org/release/3.2/library/os.html#os.getcwdb) does: a pair of attributes, one a str (possibly raising UnicodeDecodeError), the other bytes.\n\nAnother way would be some `return_bytes` parameter, but since message is an attribute it'd require a separate function anyway.\n\n> Certainly factible in Unix and Mac OS X, things can be a lot messier in Windows, because the same folder can have paths with more than one encoding.\n\nOkay, I read up a bit on Windows paths a bit, and my head hurts now. Hopefully what I learned is correct:\nOn Windows there are two versions of system calls, which can give either raw 8-bit paths, or Unicode (UTF-16 wchar_t) paths.\nIn modern Windows, there really are no 8-bit paths, there are only Unicode paths encoded with some hackish default codepage for legacy pre-Unicode programs. Git is doing the wrong thing by using 8-bit paths.\nPython 3 normally uses the UTF-16 calls to get Unicode from the system directly, without any problems.\nSo, libgit2 is a 8-bit layer, while everything around it can and wants to handle Unicode data.\n\nTo be fair, Git's notion of raw char\\* paths is far too Linux-centric for _sharing_ files (though it's pretty good at archiving a Linux filesystem).\n\n_sigh._ If libgit2 didn't have to be backwards compatible, i'd suggest that it talks to Windows in Unicode, and converts to UTF-8 for its char\\* data.\n\n> But of course these text strings will come in an encoding, don't you think? ;d\n\n[No.](http://diveintopython3.org/strings.html#divingin) But that's off-topic :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1797810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1803763", "body": ">  It would be a problem if there are encodings where the email address actually contained an ascii LF. \n\nIt seems Git just throws '\\n' bytes out anyway.\n\n```\n$ git commit -m test --author='Some\n> Name <inval\n> id@email.com>'\n$ git show HEAD\ncommit e44354285ed11e4d490edd19ab4a81b9306f1751\nAuthor: SomeName <invalid@email.com>\n...\n```\n\nOuch! Silently mangled, despite Git trying to be encoding-agnostic and binary-safe elsewhere :(\n\n> For Linux, paths are whatever binary goo the user throws at us. So if I use a non-utf8 LANG, and my keyboard is mapped to produce non-utf8 sequences, then I will create files in whatever that encoding is.\n\nIf you use a non-utf8 LANG and store raw binary paths in a repository, your paths will be unreadable on any computer that doesn't use your particular LANG. And the information about your LANG is only available on your computer. Good luck sharing that repo with anyone.\nOn Linux, someone with a different LANG would get files whose names look like gibberish and you can't type them in. On other systems, AFAIK, `git clone` fails.\n\n> it seems to frequently be Russians using KOI8-R\n\nKOI8-R, and pretty much all 8-bit encodings, trivially round-trips with Unicode. Storing the KOI8-R text as binary goo without encoding information was a much worse design choice than recoding to UTF-8 would have been.\n\nYes, I know, recoding to UTF-8 is not possible for all data, so Git chooses to wash its hands. That's why I said Git seems to be designed for archiving a Linux filesystem rather than for sharing data: refusing to add paths that aren't valid Unicode would be a much better choice for a cross-platform revision control system. But hey, we all know who made Git, so no wonder it's a bit too Linux-centric and binary-safe.\n\nIt's worse in Windows, where the paths _are_ Unicode, if Git asks the system to encode them to a legacy codepage. Since this encoding operation is something the system supports as a crutch for old non-Unicode programs; I don't expect people to ever standardize on something sane.\n\nSo, at least for Windows, I say using the wide syscalls and storing everything as UTF-8 is the way to go. Same on Macs.\nYes, that would break Git compatibility for non-ASCII filenames. But since such filenames are _already broken_ (unless viewed on a computer with the same codepage), how bad would it really be?\n\nGoogling around, there's some discussion on msysgit's tracker: http://code.google.com/p/msysgit/issues/detail?id=80. They seem to have come to pretty much the same conclusion. Their problem seems to be that changing all of git, gitk & git-gui is too much work. One more reason for libgit2 to get it right as soon as possible.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1803763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1817149", "body": "> Git was indeed started by a (some would say very) smart guy \n\nAbsolutely no doubt about that.\n\n> The OSX filesystem is not a reliable key-value storage system\n\nThe OSX filesystem is not a reliable _binary_-key - binary-value storage system, no. Yet, Git treats it as such. Anyway, let's keep this about Windows for now.\n\n> One is git the versioned key-value storage system with support for versioning (which is most of what libgit2 is about). The other one is git the DVCS. The former should not have any right to decide what gets stored in it. \n\nNo doubt about that as well.\n\n> If you want to enforce UTF-8, you're welcome to do it at a layer above libgit2.\n\nThe problem is code that stores _pathnames_ in Git, because Git assumes that pathnames are zero-terminated binary strings. This is perfectly true on Linux, so Git does exactly what it should on Linux.\nOn Windows, however, paths are _not_ binary data. They are Unicode strings that must be encoded/decoded to/from binary data. The way Git does this encoding (namely, asking Windows to use a legacy system-wide codepage) is wrong.\n\nThe [MSDN](http://msdn.microsoft.com/en-us/library/dd374081%28v=vs.85%29.aspx) specifically says: \"Data converted from Unicode to a code page is subject to data loss.\" The code pages are not meant to provide char\\* representations of paths; they're there for _compatibility with old programs_.\nBy using the ANSI API calls on Windows, Git _mangles_ the data. Git is a reliable zero-terminated-bytestring-key to binary-data mapping, but for that to be a reliable windows-path to binary-data mapping, it _can not_ use Windows' ANSI API. It must use the Unicode API and translate the Unicode to its internal representation in a way that does not destroy the keys. (UTF-8 happens to be the most sane way to do so.)\n\nNeedless to say, once Git converts the data using a codepage (or asks the system to do so by using ANSII calls), a layer above libgit2 cannot undo the damage.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1817149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2638663", "body": "> I don't think pygit2 is the right place to try to force Git\u2013an encoding-agnostic system\u2013into a Unicode-aware system.\n\nFor Python 2, it's as you say.\n\nFor Python 3, pygit2 is _exactly_ the place to do this \u2013 the layer between an encoding-agnostic system and a Unicode-aware one. Python 3 is very much a Unicode-aware system, and anything that gives bytestrings for textual data is not a proper wrapper.\n\n> Another thing to think about: What if I'm getting data from multiple sources, like both pygit2 and Git itself? How can I consistently deal with both of them? For example, say I have a Git hook that reads off old SHA/new SHA/ref name lines from sys.stdin and I want to keep track of how the refs Git told me about relate to all the refs in the repository.\n\nIn Python 3, sys.stdin is a Unicode stream. Plugging it in directly is a question of pygit2 using the same encoding as stdin. If pygit2 demanded bytestrings, you would have to encode them yourself.\nThis illustrates my previous point: if the encoding is not handled properly in pygit2, the wrapper will feen very alien in Python  3.\n\nYes, you can also read from `sys.stdin.buffer`, which is binary. Should will pygit2 require me to do this?\n\n> However, what about inspecting existing things? [...] There are potentially things I can't access at all through pygit2!\n\nThat needs to be fixed. I think `surrogateescape` is the best option, unfortunately it's only available in Python 3 (unless ported specifically for pygit2). Providing some kind `raw_*` versions of everything could work but is very ugly.\n\nNow, let me say again that any filename-backed non-UTF8 string in Git is _already broken_ on some combination of platforms.\u00b9 Yes, there should be a mechanism to access the data, but I don't think a solution to this particular problem should make the whole library awkward to use.\n\n---\n\n\u00b9 Actually, all filename-backed strings are broken somewhere, but at least UTF-8 isn't broken on the vast majority of Unixes, and now, hopefully, on Windows (thanks, libgit2!).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2638663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/8387543", "body": "This is only in libgit2's development branch now, so please merge with a new release.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/8387543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/530320", "body": "Does this make sense for Python 2? Maybe the str & unicode types are too interchangeable there to select functionality based on them?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/530320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1785683", "body": "Actually, I decided to write cygit2 because I like Python 3, but I don't know C good enough. It would be awesome if you could add support for py3k without using cython.\n\nAnd if you care about speed that much, you chose the wrong language to write your web application in :-)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1785683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1791199", "body": "I think pygit2 _must_ accept unicode strings because this is the only way to distinguish human-readable hashes such as `'7b8ae0e10c6593dafca6680db4575514bd5b9475'` (which, obviously, means `0x7b8ae0e10c6593dafca6680db4575514bd5b9475`) from packed ones such as `b'7b8ae0e10c6593dafca6'` (which is actually `0x3762386165306531306336353933646166636136`, not `0x7b8ae0e10c6593dafca6`.)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1791199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1791318", "body": "By the way, Python developers appear to have the same opinion as I do; just look at the hashlib library. A simple script\n\n``` python\nfrom hashlib import sha1\n\nsha = sha1(b'some data')\nprint('Readable hash:', type(sha.hexdigest()))\nprint('Packed hash:', type(sha.digest()))\n```\n\noutputs\n\n```\nReadable hash: <class 'str'>\nPacked hash: <class 'bytes'>\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1791318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1798218", "body": "I think it's safe to assume that paths are encoded using UTF-8. This is true for most (if not all) Linux and Mac OS X installations and will work with paths consisting of ASCII characters on Windows.\n\nOh, and regarding Windows... If git really uses A (char*) versions of WinAPI functions, you have no way to guess the correct encoding since it depends on the locale settings on author's computer (Region and Language -> Administrative -> Language for non-Unicode programs.) Fucking cp125*.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1798218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "treelinelabs": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1793190", "body": "In case it helps, here's the backtrace from gdb for that last segmentation fault (i.e. libgit2 at v0.14.0 and pygit2 at v0.14.0):\n\n```\n\nProgram received signal EXC_BAD_ACCESS, Could not access memory.\nReason: KERN_INVALID_ADDRESS at address: 0x00000001007b2000\n0x00007fff824ebe8e in adler32 ()\n(gdb) bt\n#0  0x00007fff824ebe8e in adler32 ()\n#1  0x00007fff824ed3ab in deflateInit_ ()\n#2  0x00007fff824edb48 in deflateSetDictionary ()\n#3  0x00007fff824ee915 in deflate ()\n#4  0x000000010056fb3d in write_deflate (file=0x1003b8900, source=0x10073baf7, len=140733193379872) at filebuf.c:128\n#5  0x0000000100570772 in git_filebuf_write (file=0x1003b8900, buff=0x100739b0c, len=140733193379872) at filebuf.c:331\n#6  0x000000010057c310 in loose_backend__stream_write (_stream=0x1003b88d0, data=0x100739b0c \"hello world\", len=140733193388043) at odb_loose.c:697\n#7  0x0000000100558378 in Repository_write (self=0x10028f610, args=<value temporarily unavailable, due to optimizations>) at pygit2.c:403\n#8  0x00000001000b9078 in PyEval_EvalFrameEx ()\n#9  0x00000001000b821a in PyEval_EvalFrameEx ()\n#10 0x00000001000b9e25 in PyEval_EvalCodeEx ()\n#11 0x000000010003b91d in function_call ()\n#12 0x000000010000bc32 in PyObject_Call ()\n#13 0x00000001000b41f2 in PyEval_EvalFrameEx ()\n#14 0x00000001000b9e25 in PyEval_EvalCodeEx ()\n#15 0x000000010003b815 in function_call ()\n#16 0x000000010000bc32 in PyObject_Call ()\n#17 0x000000010001e14d in instancemethod_call ()\n#18 0x000000010000bc32 in PyObject_Call ()\n#19 0x000000010007555a in slot_tp_call ()\n#20 0x000000010000bc32 in PyObject_Call ()\n#21 0x00000001000b531e in PyEval_EvalFrameEx ()\n#22 0x00000001000b9e25 in PyEval_EvalCodeEx ()\n#23 0x000000010003b91d in function_call ()\n#24 0x000000010000bc32 in PyObject_Call ()\n#25 0x00000001000b41f2 in PyEval_EvalFrameEx ()\n#26 0x00000001000b9e25 in PyEval_EvalCodeEx ()\n#27 0x000000010003b815 in function_call ()\n#28 0x000000010000bc32 in PyObject_Call ()\n#29 0x000000010001e14d in instancemethod_call ()\n#30 0x000000010000bc32 in PyObject_Call ()\n#31 0x000000010007555a in slot_tp_call ()\n#32 0x000000010000bc32 in PyObject_Call ()\n#33 0x00000001000b531e in PyEval_EvalFrameEx ()\n#34 0x00000001000b9e25 in PyEval_EvalCodeEx ()\n#35 0x000000010003b91d in function_call ()\n#36 0x000000010000bc32 in PyObject_Call ()\n#37 0x00000001000b41f2 in PyEval_EvalFrameEx ()\n#38 0x00000001000b9e25 in PyEval_EvalCodeEx ()\n#39 0x000000010003b815 in function_call ()\n#40 0x000000010000bc32 in PyObject_Call ()\n#41 0x000000010001e14d in instancemethod_call ()\n#42 0x000000010000bc32 in PyObject_Call ()\n#43 0x000000010007555a in slot_tp_call ()\n#44 0x000000010000bc32 in PyObject_Call ()\n#45 0x00000001000b531e in PyEval_EvalFrameEx ()\n#46 0x00000001000b9e25 in PyEval_EvalCodeEx ()\n#47 0x000000010003b91d in function_call ()\n#48 0x000000010000bc32 in PyObject_Call ()\n#49 0x00000001000b41f2 in PyEval_EvalFrameEx ()\n#50 0x00000001000b9e25 in PyEval_EvalCodeEx ()\n#51 0x000000010003b815 in function_call ()\n#52 0x000000010000bc32 in PyObject_Call ()\n#53 0x000000010001e14d in instancemethod_call ()\n#54 0x000000010000bc32 in PyObject_Call ()\n#55 0x000000010007555a in slot_tp_call ()\n#56 0x000000010000bc32 in PyObject_Call ()\n#57 0x00000001000b531e in PyEval_EvalFrameEx ()\n#58 0x00000001000b9e25 in PyEval_EvalCodeEx ()\n#59 0x000000010003b91d in function_call ()\n#60 0x000000010000bc32 in PyObject_Call ()\n#61 0x00000001000b41f2 in PyEval_EvalFrameEx ()\n#62 0x00000001000b9e25 in PyEval_EvalCodeEx ()\n#63 0x000000010003b815 in function_call ()\n#64 0x000000010000bc32 in PyObject_Call ()\n#65 0x000000010001e14d in instancemethod_call ()\n#66 0x000000010000bc32 in PyObject_Call ()\n#67 0x000000010007555a in slot_tp_call ()\n#68 0x000000010000bc32 in PyObject_Call ()\n#69 0x00000001000b531e in PyEval_EvalFrameEx ()\n#70 0x00000001000b821a in PyEval_EvalFrameEx ()\n#71 0x00000001000b821a in PyEval_EvalFrameEx ()\n#72 0x00000001000b9e25 in PyEval_EvalCodeEx ()\n#73 0x000000010003b91d in function_call ()\n#74 0x000000010000bc32 in PyObject_Call ()\n#75 0x000000010001e14d in instancemethod_call ()\n#76 0x000000010000bc32 in PyObject_Call ()\n#77 0x0000000100075188 in slot_tp_init ()\n#78 0x000000010006e325 in type_call ()\n#79 0x000000010000bc32 in PyObject_Call ()\n#80 0x00000001000b531e in PyEval_EvalFrameEx ()\n#81 0x00000001000b821a in PyEval_EvalFrameEx ()\n#82 0x00000001000b9e25 in PyEval_EvalCodeEx ()\n#83 0x00000001000b9f46 in PyEval_EvalCode ()\n#84 0x00000001000de83c in PyRun_InteractiveOneFlags ()\n#85 0x00000001000dea9e in PyRun_InteractiveLoopFlags ()\n#86 0x00000001000df311 in PyRun_AnyFileExFlags ()\n#87 0x00000001000ee73c in Py_Main ()\n#88 0x0000000100000f14 in ?? ()\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1793190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1962940", "body": "Apologies for the long delay. Amusingly, I decided to verify the fix almost exactly the same time you decided to close the ticket. In any case: Fix confirmed using libgit2 development and pygit2 master. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1962940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1971094", "body": "Thanks for accepting the patch. Confirmed that this is fixed; as of now, all tests pass for me.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1971094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "peff": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1803024", "body": "On Fri, Aug 12, 2011 at 05:38:48PM -0700, tanoku wrote:\n\n> > - commit author names: can use commit's encoding?\n> > - commit e-mail addresses: e-mail's technically ASCII-only, but it\n> >   probably won't hurt to use the commit's encoding too\n> \n> I need to talk about @peff about this, because I don't know how\n> exactly does the commit `encoding` header apply to names and emails,\n> since the header shows up _after_ the committer and author lines.\n\nYes, the encoding header applies to names and email addresses, too.\nBecause it comes after (which it does for compatibility with old code;\nit was added later), you have to parse the author and committer lines\ninto binary goo, then look at the encoding header (if any), and then you\ncan understand what the goo means.\n\nThis works fine in practice as long as you can separate syntax (lines\nend with LF) and content. It would be a problem if there are encodings\nwhere the email address actually contained an ascii LF. UTF-8 doesn't,\nbut I'm not sure about other unicode formats.\n\nAnother option (that is now closed to us by backwards compatibility, of\ncourse), would be to rfc2047-encode names and addresses that needed it,\nand have the encoding header apply _only_ to the commit message itself.\nThat entails slightly more overhead, but would probably have been more\nrobust in the long run. Too late now, though.\n\n-Peff\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1803024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1803055", "body": "On Sat, Aug 13, 2011 at 10:49:41AM -0700, pyos wrote:\n\n> I think it's safe to assume that paths are encoded using UTF-8. This\n> is true for most (if not all) Linux and Mac OS X installations and\n> will work with paths consisting of ASCII characters on Windows.\n\nFor Linux, paths are whatever binary goo the user throws at us. So if I\nuse a non-utf8 LANG, and my keyboard is mapped to produce non-utf8\nsequences, then I will create files in whatever that encoding is. Most\npeople these days have realized that utf8 is the only sensible option,\nbut we still see people on the git list occasionally working in other\nencodings (it seems to frequently be Russians using KOI8-R, but that is\njust my hazy recollection; most latin1 users seem to have shifted to\nutf8 in the past decade or so).\n\nSo certainly utf8 is the best thing to assume, but I think it's still\ngoing to be wrong occasionally.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1803055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1804117", "body": "On Sun, Aug 14, 2011 at 04:02:59PM -0700, encukou wrote:\n\n> >  It would be a problem if there are encodings where the email address actually contained an ascii LF. \n> \n> It seems Git just throws '\\n' bytes out anyway.\n> \n> ```\n> $ git commit -m test --author='Some\n> > Name <inval\n> > id@email.com>'\n> $ git show HEAD\n> commit e44354285ed11e4d490edd19ab4a81b9306f1751\n> Author: SomeName <invalid@email.com>\n> ...\n> ```\n> \n> Ouch! Silently mangled, despite Git trying to be encoding-agnostic and binary-safe elsewhere :(\n\nYeah, though the mangling there is not happening on the object-reading\nside, but rather that we enforce some sanity checks in names and emails\n(like no line feeds). If you have an example where a name in some\nencoding actually _does_ contain a line feed (and not just some silly\nexample, which is the exact sort of thing the sanity checks are trying\nto fix), I'm sure the git list would love to hear it.\n\nIt may also be worth saying \"by the way, your author name is insane and\nwe are fixing it\" in the case above.\n\n> If you use a non-utf8 LANG and store raw binary paths in a repository,\n> your paths will be unreadable on any computer that doesn't use your\n> particular LANG. And the information about your LANG is only available\n> on your computer. Good luck sharing that repo with anyone.\n> \n> On Linux, someone with a different LANG would get files whose names\n> look like gibberish and you can't type them in. On other systems,\n> AFAIK, `git clone` fails.\n\nYeah. Don't get me wrong, I think using anything except utf8 is\ninsanity. I'm just saying we have occasionally seen it mentioned on the\ngit list. So people are doing it, presumably because they share their\nrepos in isolated circles of people with whom they can communicate the\nLANG out of band. But I have no numbers on how common it is, or whether\nit's worth actually worrying about.\n\n> Yes, I know, recoding to UTF-8 is not possible for all data, so Git\n> chooses to wash its hands. That's why I said Git seems to be designed\n> for archiving a Linux filesystem rather than for sharing data:\n> refusing to add paths that aren't valid Unicode would be a much better\n> choice for a cross-platform revision control system. But hey, we all\n> know who made Git, so no wonder it's a bit too Linux-centric and\n> binary-safe.\n\nI think it's more Unix-centric than Linux-centric. Unix filesystems have\ntraditionally punted on encoding issues like this, and git was started\nwith the filesystem mindset. Not that the distinction helps solve the\nproblem in any way at all.\n\n> So, at least for Windows, I say using the wide syscalls and storing\n> everything as UTF-8 is the way to go. Same on Macs.\n> [...]\n> Googling around, there's some discussion on msysgit's tracker:\n> http://code.google.com/p/msysgit/issues/detail?id=80.\n\nYeah, that seems sane to me (and I would defer to msysgit people on how\nto implement things on Windows). It would be helpful if git translated\nall paths into utf8 when putting them in the index. Linus had patches\nfor that at one point, but they ended up quite invasive and I don't\nthink they were ever taken. I can try to dig them up if you want.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1804117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1887033", "body": "On Tue, Aug 23, 2011 at 10:53:36PM -0700, jdavid wrote:\n\n> Does have the tag object an optional header `encoding` that applies\n> to the tagger, like commit objects? A question for @peff I guess.\n\nNo, but it probably should. I suspect it could be added to core git\npretty easily; it is simply that nobody has noticed or complained about\nthe problem yet.\n\n-Peff\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1887033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "erikvanzijst": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1822115", "body": "> The master branch of pygit2 compiles against the development branch of libgit2.\n\nAh, that must have been it then.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/1822115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2195771", "body": "Yeah, I know libgit2 should be reentrant, so I wasn't expecting segfaults. I'll have another look then.\n\nCheers,\nErik\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2195771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "tmc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2107083", "body": "For what it's worth in my initial tests I see very small to no difference in overhead, I haven't taken the time to construct an accurate rig but it should be the case that the same speeds can be accomplished with about half of the code to maintain.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2107083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sigmaris": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2262666", "body": "I've moved the check for an odd-length prefix into py_str_to_git_oid, and made it return the usable length of the oid on success or 0 on error.\nHowever, since the usable oid length returned from py_str_to_git_oid may be 1 character shorter than the length of the Python unicode string passed in, we still need to conditionally check the last character in Repository_lookup_prefix, to avoid (e.g.) a lookup of '3583af' returning a commit '3583a9c...'. I agree that it'd be better for git_oid_fromstrn to preserve the last 4 bits, so we could avoid the need for the extra check.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2262666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2372321", "body": "I'm working on updating Repository_getitem and a few other places to handle hex prefixes in my short_hexs branch: sigmaris/pygit2@d47602128f73559f7a8ffa58edeb122db711f3a9\nOnce I write some tests for that new functionality I'll make a new pull request, I'll close this one for now.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2372321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "brodie": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2637729", "body": "OK, so as of 81c0ed328141cedc1a796f9178a6df80d671ac76, let's go over the good and the bad.\n\nFirst, the good. I can do the following things with a `str` object on Python 2 (or a `bytes` object on Python 3):\n- Initialize a repository with a non-UTF-8 path.\n- Create a commit with non-UTF-8 author, committer, or message.\n- Create a tag with a non-UTF-8 name, tagger, or message.\n- Initialize an index with a non-UTF-8 path.\n- Add an entry to the index with a non-UTF-8 path.\n- Test if an index contains an entry whose name isn't in UTF-8.\n- Look up an index entry with a non-UTF-8 name.\n- Set an index entry with a non-UTF-8 name.\n- Look up a reference with a non-UTF-8 name.\n- Create a reference with a non-UTF-8 name.\n- Create a symbolic reference with a non-UTF-8 target.\n- Rename a reference to a non-UTF-8 name.\n- Change a symbolic reference's target to a non-UTF-8 name.\n- Test if a tree contains an entry whose name isn't in UTF-8.\n- Look up a tree entry with a non-UTF-8 name.\n\nGreat, that matches Git's behavior. However, what about inspecting existing things?\n- On a `Commit`, if `.message_encoding` is wrong, I'll get a `UnicodeDecodeError` when trying to access `.committer`/`.author`/`.message`.\n- If I call `Repository.listall_references()` I'll get a `UnicodeDecodeError` if one of the reference names isn't UTF-8-encoded.\n- Same with `Repository.path` and `Repository.workdir`.\n- Same with `TreeEntry.name`.\n- Same with `Tag.name` and `Tag.message`.\n- Same with `IndexEntry.path`.\n- Same with `Reference.name` and `Reference.target`.\n\nThis doesn't match Git's behavior. There are potentially things I can't access at all through pygit2!\n\nAnother thing to think about: What if I'm getting data from multiple sources, like both pygit2 and Git itself? How can I consistently deal with both of them? For example, say I have a Git hook that reads off old SHA/new SHA/ref name lines from `sys.stdin` and I want to keep track of how the refs Git told me about relate to all the refs in the repository. Well, if a ref isn't ASCII-encoded, I won't be able to match it up with the same ref `Repository.listall_references()` gave me. If I assume all refs are UTF-8-encoded, that would get me closer, but if one isn't, I'll get an error when I try to decode it.\n\nI don't think pygit2 is the right place to try to force Git\u2013an encoding-agnostic system\u2013into a Unicode-aware system. I would expect it, as a simple binding to libgit2, to give me the same data I'd get back by using libgit2 directly or by using Git itself. If I want to force everything to be Unicode, I can do that on my own (and I probably should do that on my own, because there isn't a single, correct way to do it).\n\nMy suggestion would be to stick to `str` on Python 2 and `bytes` on Python 3. I would also suggest making `py_str_to_git_oid` support hexadecimal object IDs with `str` objects on Python 2 and `bytes` objects on Python 3. This makes it easier for me to take output from Git (or other things) and plug it directly into pygit2. (That would complicate supporting binary object ID lookups, however.)\n\nYou could also try to take Python 3's lead of using the `surrogateescape` codec everywhere and providing Unicode and non-Unicode versions of every API, but I think that will end up being a lot more complicated.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2637729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2648317", "body": "> For Python 2, it's as you say.\n> \n> For Python 3, pygit2 is exactly the place to do this \u2013 the layer between an encoding-agnostic system and a Unicode-aware one. Python 3 is very much a Unicode-aware system, and anything that gives bytestrings for textual data is not a proper wrapper.\n\nOK, so let's lay the options on the table then. For Python 3:\n- We output `str` objects everywhere, created using the `surrogateescape` error handler. For decoding, we should probably use `sys.getdefaultencoding()`. For filenames/paths, we may want to use `sys.getfilesystemencoding()`, but that may or may not be the right thing to do.\n\nFor Python 2, there are a few approaches to take:\n1. We output `unicode` objects everywhere. We take the same approach as on Python 3, but we potentially re-implement the `surrogateescape` handler, or we use a lossy error handler. We don't provide raw `str` APIs.\n2. We do as above, but we _do_ provide separate raw `str` APIs.\n3. We don't output `unicode` anywhere; we use raw `str` objects instead.\n\nPersonally, I would prefer the third approach. If you'd like, I can whip up a patch that implements that for Python 2 (and takes the `surrogateescape` approach for Python 3).\n\n> Now, let me say again that any filename-backed non-UTF8 string in Git is already broken on some combination of platforms.\n\nThat's true, but you do have to keep in mind that, for better or worse, it works that way on Unix by design.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2648317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2660915", "body": "> The API for Python 2 and 3 must be as close as possible, this will smooth the transition for developers moving from 2 to 3. And will keep the code simple, from the C API point of view PyUnicode is still PyUnicode, on Python 2 and 3. This invalidates the third approach.\n\nIt's going to be awkward at the C level no matter what you do. You're either going to end up having a bunch of stub methods that use the raw APIs to provide Unicode versions (increasing the amount of stuff you have to test), or you're going to have `#ifdef`s in the code (and potentially the tests).\n\nI still think going for the native, encoding-agnostic approach on Python 2 makes the most sense. It'll be easier to interoperate with other Python 2 libraries (no worrying about `unicode` objects infecting `str` objects and doing implicit decoding). If you need a Unicode representation of the data in the repo, you're going to need to decide exactly how you want to do that anyway (because, again, there's no single, correct way to do it).\n\n> Then, what happens if two developers with different locales work on the same project? It must work. So things like names in tree entries should be in UTF-8.\n\nLet me just say up front: this is a general issue with Git (or even Unix). It's not a pygit2 issue.\n\nBut let's indulge this idea that it \"must work.\" What does \"working\" mean? Let's define a few scenarios:\n\nScenario 1: You assume everything is UTF-8.\n- What if there are non-UTF-8 filenames in the repo? Do they come out as garbage now?\n- What happens if the current system's locale isn't UTF-8? Do I write out filenames that will appear to be garbage to every other program on the system?\n\nScenario 2: You assume everything is in the user's locale.\n- What if there are filenames that don't match the locale's encoding? Do they come out as garbage too?\n- Now I'm at least writing out data that can interoperate with the rest of the system. That might not interoperate with other systems, but the world hasn't agreed on and completely switched to one encoding, so that's a problem no matter what.\n\nScenario 3: You try to detect the encoding of everything.\n- What if your detection is slightly wrong? What if it's totally wrong? What if it can't even figure out how to decode the filename? Do you do a lossy conversion?\n- Do you do your encoding detection based on everything in the repository, or on things individually?\n- How do you interoperate with any other program on the system? You may or may not have gotten things into a state where they look right. You may or may not have changed the strings in a way that prevents you from using them in other applications. You don't really know anything for certain unless you stick to the raw APIs.\n\nScenario 4: You devise some kind of system that always figures out the right thing to do.\n\nAwesome. Except no other program is in on your scheme, so you're screwed anyway!\n\nWith mixed locale encodings, users will have problems across _every program they use anyway_. They're already screwed. The solution is to stop mixing encodings.\n\nAt the end of the day, sure, these are real problems. But they're problems for user-facing programs to solve, not problems for a low level library. The best thing you can do is try to do the same thing Python itself would do. In this case that involves doing everything based on the user's locale.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2660915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "vortec": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2746746", "body": "$ python setup.py install\nrunning install\nrunning bdist_egg\nrunning egg_info\nwriting pygit2.egg-info/PKG-INFO\nwriting top-level names to pygit2.egg-info/top_level.txt\nwriting dependency_links to pygit2.egg-info/dependency_links.txt\nreading manifest file 'pygit2.egg-info/SOURCES.txt'\nwriting manifest file 'pygit2.egg-info/SOURCES.txt'\ninstalling library code to build/bdist.macosx-10.6-intel/egg\nrunning install_lib\nrunning build_ext\nbuilding 'pygit2' extension\ngcc-4.2 -fno-strict-aliasing -fno-common -dynamic -isysroot /Developer/SDKs/MacOSX10.6.sdk -arch i386 -arch x86_64 -g -O2 -DNDEBUG -g -O3 -I/usr/local/include -I/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c pygit2.c -o build/temp.macosx-10.6-intel-2.7/pygit2.o\npygit2.c:31:18: error: git2.h: No such file or directory\npygit2.c:58: error: expected specifier-qualifier-list before \u2018git_repository\u2019\npygit2.c:71: error: expected specifier-qualifier-list before \u2018git_object\u2019\npygit2.c:72: error: expected specifier-qualifier-list before \u2018git_commit\u2019\npygit2.c:73: error: expected specifier-qualifier-list before \u2018git_tree\u2019\npygit2.c:74: error: expected specifier-qualifier-list before \u2018git_blob\u2019\npygit2.c:75: error: expected specifier-qualifier-list before \u2018git_revwalk\u2019\npygit2.c:80: error: expected specifier-qualifier-list before \u2018git_tag\u2019\npygit2.c:86: error: expected \u2018:\u2019, \u2018,\u2019, \u2018;\u2019, \u2018}\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:93: error: expected specifier-qualifier-list before \u2018git_index\u2019\npygit2.c:111: error: expected specifier-qualifier-list before \u2018git_index_entry\u2019\npygit2.c:116: error: expected specifier-qualifier-list before \u2018git_reference\u2019\npygit2.c: In function \u2018Error_type\u2019:\npygit2.c:139: error: \u2018GIT_ENOTFOUND\u2019 undeclared (first use in this function)\npygit2.c:139: error: (Each undeclared identifier is reported only once\npygit2.c:139: error: for each function it appears in.)\npygit2.c:141: error: \u2018GIT_EOSERR\u2019 undeclared (first use in this function)\npygit2.c:143: error: \u2018GIT_ENOTOID\u2019 undeclared (first use in this function)\npygit2.c:145: error: \u2018GIT_ENOMEM\u2019 undeclared (first use in this function)\npygit2.c:147: error: \u2018GIT_EREVWALKOVER\u2019 undeclared (first use in this function)\npygit2.c: In function \u2018Error_set\u2019:\npygit2.c:158: error: \u2018GIT_ENOTFOUND\u2019 undeclared (first use in this function)\npygit2.c:165: error: \u2018GIT_EOSERR\u2019 undeclared (first use in this function)\npygit2.c:169: warning: passing argument 2 of \u2018PyErr_SetString\u2019 makes pointer from integer without a cast\npygit2.c: In function \u2018Error_set_str\u2019:\npygit2.c:176: error: \u2018GIT_ENOTFOUND\u2019 undeclared (first use in this function)\npygit2.c:181: warning: format \u2018%s\u2019 expects type \u2018char *\u2019, but argument 4 has type \u2018int\u2019\npygit2.c: In function \u2018Error_set_py_obj\u2019:\npygit2.c:193: error: \u2018GIT_ENOTOID\u2019 undeclared (first use in this function)\npygit2.c:200: error: \u2018GIT_ENOTFOUND\u2019 undeclared (first use in this function)\npygit2.c:207: warning: format \u2018%s\u2019 expects type \u2018char *\u2019, but argument 4 has type \u2018int\u2019\npygit2.c: At top level:\npygit2.c:213: error: expected \u2018;\u2019, \u2018,\u2019 or \u2018)\u2019 before \u2018_\u2019 token\npygit2.c:255: error: expected \u2018;\u2019, \u2018,\u2019 or \u2018)\u2019 before \u2018_\u2019 token\npygit2.c:261: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018int_to_loose_object_type\u2019\npygit2.c:273: error: expected \u2018)\u2019 before \u2018_\u2019 token\npygit2.c:285: error: expected declaration specifiers or \u2018...\u2019 before \u2018git_oid\u2019\npygit2.c: In function \u2018py_str_to_git_oid\u2019:\npygit2.c:297: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:298: error: \u2018GIT_OID_HEXSZ\u2019 undeclared (first use in this function)\npygit2.c: At top level:\npygit2.c:337: error: expected \u2018;\u2019, \u2018,\u2019 or \u2018)\u2019 before \u2018_\u2019 token\npygit2.c: In function \u2018Repository_init\u2019:\npygit2.c:391: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c: In function \u2018Repository_dealloc\u2019:\npygit2.c:403: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:404: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:405: error: \u2018Repository\u2019 has no member named \u2018index\u2019\npygit2.c:405: error: \u2018Repository\u2019 has no member named \u2018index\u2019\npygit2.c:405: error: \u2018Repository\u2019 has no member named \u2018index\u2019\npygit2.c:405: error: \u2018Repository\u2019 has no member named \u2018index\u2019\npygit2.c: In function \u2018Repository_contains\u2019:\npygit2.c:412: error: \u2018git_oid\u2019 undeclared (first use in this function)\npygit2.c:412: error: expected \u2018;\u2019 before \u2018oid\u2019\npygit2.c:415: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:415: error: too many arguments to function \u2018py_str_to_git_oid\u2019\npygit2.c:416: error: \u2018GIT_OID_HEXSZ\u2019 undeclared (first use in this function)\npygit2.c:420: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c: In function \u2018Repository_getitem\u2019:\npygit2.c:426: error: \u2018git_oid\u2019 undeclared (first use in this function)\npygit2.c:426: error: expected \u2018;\u2019 before \u2018oid\u2019\npygit2.c:429: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:429: error: too many arguments to function \u2018py_str_to_git_oid\u2019\npygit2.c:433: error: \u2018GIT_OBJ_ANY\u2019 undeclared (first use in this function)\npygit2.c:433: warning: return makes pointer from integer without a cast\npygit2.c: At top level:\npygit2.c:437: error: expected \u2018)\u2019 before \u2018_\u2019 token\npygit2.c: In function \u2018Repository_read\u2019:\npygit2.c:447: error: \u2018git_oid\u2019 undeclared (first use in this function)\npygit2.c:447: error: expected \u2018;\u2019 before \u2018oid\u2019\npygit2.c:449: error: \u2018git_odb_object\u2019 undeclared (first use in this function)\npygit2.c:449: error: \u2018obj\u2019 undeclared (first use in this function)\npygit2.c:452: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:452: error: too many arguments to function \u2018py_str_to_git_oid\u2019\npygit2.c:456: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c: In function \u2018Repository_write\u2019:\npygit2.c:474: error: \u2018git_oid\u2019 undeclared (first use in this function)\npygit2.c:474: error: expected \u2018;\u2019 before \u2018oid\u2019\npygit2.c:475: error: \u2018git_odb_stream\u2019 undeclared (first use in this function)\npygit2.c:475: error: \u2018stream\u2019 undeclared (first use in this function)\npygit2.c:484: error: \u2018git_otype\u2019 undeclared (first use in this function)\npygit2.c:484: error: expected \u2018;\u2019 before \u2018type\u2019\npygit2.c:485: error: \u2018type\u2019 undeclared (first use in this function)\npygit2.c:485: error: \u2018GIT_OBJ_BAD\u2019 undeclared (first use in this function)\npygit2.c:488: error: \u2018git_odb\u2019 undeclared (first use in this function)\npygit2.c:488: error: \u2018odb\u2019 undeclared (first use in this function)\npygit2.c:488: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:491: error: \u2018GIT_SUCCESS\u2019 undeclared (first use in this function)\npygit2.c:493: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:499: error: \u2018GIT_OID_RAWSZ\u2019 undeclared (first use in this function)\npygit2.c: In function \u2018Repository_get_index\u2019:\npygit2.c:506: error: \u2018git_index\u2019 undeclared (first use in this function)\npygit2.c:511: error: \u2018Repository\u2019 has no member named \u2018index\u2019\npygit2.c:512: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:513: error: \u2018GIT_SUCCESS\u2019 undeclared (first use in this function)\npygit2.c:519: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c:520: error: \u2018Index\u2019 has no member named \u2018own_obj\u2019\npygit2.c:521: error: \u2018Repository\u2019 has no member named \u2018index\u2019\npygit2.c:523: error: \u2018GIT_EBAREINDEX\u2019 undeclared (first use in this function)\npygit2.c:525: error: \u2018Repository\u2019 has no member named \u2018index\u2019\npygit2.c:532: error: \u2018Repository\u2019 has no member named \u2018index\u2019\npygit2.c:533: error: \u2018Repository\u2019 has no member named \u2018index\u2019\npygit2.c: In function \u2018Repository_get_path\u2019:\npygit2.c:541: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:541: error: \u2018GIT_REPO_PATH\u2019 undeclared (first use in this function)\npygit2.c:541: warning: assignment makes pointer from integer without a cast\npygit2.c: In function \u2018Repository_get_workdir\u2019:\npygit2.c:550: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:550: error: \u2018GIT_REPO_PATH_WORKDIR\u2019 undeclared (first use in this function)\npygit2.c:550: warning: assignment makes pointer from integer without a cast\npygit2.c: In function \u2018Repository_walk\u2019:\npygit2.c:563: error: \u2018git_oid\u2019 undeclared (first use in this function)\npygit2.c:563: error: expected \u2018;\u2019 before \u2018oid\u2019\npygit2.c:564: error: \u2018git_revwalk\u2019 undeclared (first use in this function)\npygit2.c:564: error: \u2018walk\u2019 undeclared (first use in this function)\npygit2.c:571: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:580: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:580: error: too many arguments to function \u2018py_str_to_git_oid\u2019\npygit2.c:581: error: \u2018GIT_OID_HEXSZ\u2019 undeclared (first use in this function)\npygit2.c:601: error: \u2018Walker\u2019 has no member named \u2018walk\u2019\npygit2.c: At top level:\npygit2.c:606: error: expected \u2018;\u2019, \u2018,\u2019 or \u2018)\u2019 before \u2018_\u2019 token\npygit2.c:616: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:641: error: expected \u2018)\u2019 before \u2018_\u2019 token\npygit2.c: In function \u2018Repository_create_commit\u2019:\npygit2.c:656: error: \u2018git_signature\u2019 undeclared (first use in this function)\npygit2.c:656: error: \u2018author\u2019 undeclared (first use in this function)\npygit2.c:656: error: \u2018committer\u2019 undeclared (first use in this function)\npygit2.c:658: error: \u2018git_oid\u2019 undeclared (first use in this function)\npygit2.c:658: error: expected \u2018;\u2019 before \u2018oid\u2019\npygit2.c:659: error: \u2018git_tree\u2019 undeclared (first use in this function)\npygit2.c:659: error: \u2018tree\u2019 undeclared (first use in this function)\npygit2.c:661: error: \u2018git_commit\u2019 undeclared (first use in this function)\npygit2.c:661: error: \u2018parents\u2019 undeclared (first use in this function)\npygit2.c:682: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:682: error: too many arguments to function \u2018py_str_to_git_oid\u2019\npygit2.c:688: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:693: error: expected expression before \u2018)\u2019 token\npygit2.c:701: error: too many arguments to function \u2018py_str_to_git_oid\u2019\npygit2.c:704: warning: return makes pointer from integer without a cast\npygit2.c:706: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:709: warning: return makes pointer from integer without a cast\npygit2.c:713: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:714: error: expected \u2018)\u2019 before \u2018git_commit\u2019\npygit2.c:720: error: \u2018GIT_OID_RAWSZ\u2019 undeclared (first use in this function)\npygit2.c: In function \u2018Repository_create_tag\u2019:\npygit2.c:728: error: \u2018git_signature\u2019 undeclared (first use in this function)\npygit2.c:728: error: \u2018tagger\u2019 undeclared (first use in this function)\npygit2.c:729: error: \u2018git_oid\u2019 undeclared (first use in this function)\npygit2.c:729: error: expected \u2018;\u2019 before \u2018oid\u2019\npygit2.c:730: error: \u2018git_object\u2019 undeclared (first use in this function)\npygit2.c:730: error: \u2018target\u2019 undeclared (first use in this function)\npygit2.c:732: error: \u2018GIT_OID_HEXSZ\u2019 undeclared (first use in this function)\npygit2.c:747: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:747: error: too many arguments to function \u2018py_str_to_git_oid\u2019\npygit2.c:751: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:759: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:765: error: \u2018GIT_OID_RAWSZ\u2019 undeclared (first use in this function)\npygit2.c: In function \u2018Repository_listall_references\u2019:\npygit2.c:771: error: \u2018GIT_REF_LISTALL\u2019 undeclared (first use in this function)\npygit2.c:772: error: \u2018git_strarray\u2019 undeclared (first use in this function)\npygit2.c:772: error: expected \u2018;\u2019 before \u2018c_result\u2019\npygit2.c:782: error: \u2018c_result\u2019 undeclared (first use in this function)\npygit2.c:782: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c: In function \u2018Repository_lookup_reference\u2019:\npygit2.c:814: error: \u2018git_reference\u2019 undeclared (first use in this function)\npygit2.c:814: error: \u2018c_reference\u2019 undeclared (first use in this function)\npygit2.c:824: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:829: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018Repository_create_reference\u2019:\npygit2.c:836: error: \u2018git_reference\u2019 undeclared (first use in this function)\npygit2.c:836: error: \u2018c_reference\u2019 undeclared (first use in this function)\npygit2.c:838: error: \u2018git_oid\u2019 undeclared (first use in this function)\npygit2.c:838: error: expected \u2018;\u2019 before \u2018oid\u2019\npygit2.c:846: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:846: error: too many arguments to function \u2018py_str_to_git_oid\u2019\npygit2.c:847: error: \u2018GIT_OID_HEXSZ\u2019 undeclared (first use in this function)\npygit2.c:852: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:857: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018Repository_create_symbolic_reference\u2019:\npygit2.c:863: error: \u2018git_reference\u2019 undeclared (first use in this function)\npygit2.c:863: error: \u2018c_reference\u2019 undeclared (first use in this function)\npygit2.c:872: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:878: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018Repository_packall_references\u2019:\npygit2.c:887: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c: In function \u2018read_status_cb\u2019:\npygit2.c:905: error: \u2018GIT_SUCCESS\u2019 undeclared (first use in this function)\npygit2.c: In function \u2018Repository_status\u2019:\npygit2.c:914: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c: In function \u2018Object_dealloc\u2019:\npygit2.c:1024: error: \u2018Object\u2019 has no member named \u2018obj\u2019\npygit2.c: In function \u2018Object_get_oid\u2019:\npygit2.c:1032: error: nested functions are disabled, use -fnested-functions to re-enable\npygit2.c:1032: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:1032: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:1034: error: \u2018Object\u2019 has no member named \u2018obj\u2019\npygit2.c:1037: error: \u2018GIT_OID_RAWSZ\u2019 undeclared (first use in this function)\npygit2.c: In function \u2018Object_get_hex\u2019:\npygit2.c:1043: error: nested functions are disabled, use -fnested-functions to re-enable\npygit2.c:1043: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:1043: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:1045: error: \u2018Object\u2019 has no member named \u2018obj\u2019\npygit2.c:1048: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018Object_get_type\u2019:\npygit2.c:1054: error: \u2018Object\u2019 has no member named \u2018obj\u2019\npygit2.c: In function \u2018Object_read_raw\u2019:\npygit2.c:1060: error: nested functions are disabled, use -fnested-functions to re-enable\npygit2.c:1060: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:1060: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:1061: error: \u2018git_odb_object\u2019 undeclared (first use in this function)\npygit2.c:1061: error: \u2018obj\u2019 undeclared (first use in this function)\npygit2.c:1065: error: \u2018Object\u2019 has no member named \u2018obj\u2019\npygit2.c:1068: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:1068: error: \u2018GIT_OID_HEXSZ\u2019 undeclared (first use in this function)\npygit2.c:1070: warning: assignment makes pointer from integer without a cast\npygit2.c:1078: warning: passing argument 1 of \u2018PyString_FromStringAndSize\u2019 makes pointer from integer without a cast\npygit2.c: In function \u2018Commit_get_message_encoding\u2019:\npygit2.c:1143: error: \u2018Commit\u2019 has no member named \u2018commit\u2019\npygit2.c:1143: warning: assignment makes pointer from integer without a cast\npygit2.c: In function \u2018Commit_get_message\u2019:\npygit2.c:1155: error: \u2018Commit\u2019 has no member named \u2018commit\u2019\npygit2.c:1155: warning: assignment makes pointer from integer without a cast\npygit2.c:1156: error: \u2018Commit\u2019 has no member named \u2018commit\u2019\npygit2.c:1156: warning: assignment makes pointer from integer without a cast\npygit2.c: In function \u2018Commit_get_commit_time\u2019:\npygit2.c:1165: error: \u2018Commit\u2019 has no member named \u2018commit\u2019\npygit2.c: In function \u2018Commit_get_commit_time_offset\u2019:\npygit2.c:1171: error: \u2018Commit\u2019 has no member named \u2018commit\u2019\npygit2.c: In function \u2018Commit_get_committer\u2019:\npygit2.c:1177: error: nested functions are disabled, use -fnested-functions to re-enable\npygit2.c:1177: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:1177: error: \u2018signature\u2019 undeclared (first use in this function)\npygit2.c:1180: error: \u2018Commit\u2019 has no member named \u2018commit\u2019\npygit2.c:1181: error: \u2018Commit\u2019 has no member named \u2018commit\u2019\npygit2.c:1181: warning: assignment makes pointer from integer without a cast\npygit2.c:1184: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018Commit_get_author\u2019:\npygit2.c:1190: error: nested functions are disabled, use -fnested-functions to re-enable\npygit2.c:1190: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:1190: error: \u2018signature\u2019 undeclared (first use in this function)\npygit2.c:1193: error: \u2018Commit\u2019 has no member named \u2018commit\u2019\npygit2.c:1194: error: \u2018Commit\u2019 has no member named \u2018commit\u2019\npygit2.c:1194: warning: assignment makes pointer from integer without a cast\npygit2.c:1197: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018Commit_get_tree\u2019:\npygit2.c:1203: error: \u2018git_tree\u2019 undeclared (first use in this function)\npygit2.c:1203: error: \u2018tree\u2019 undeclared (first use in this function)\npygit2.c:1207: error: \u2018Commit\u2019 has no member named \u2018commit\u2019\npygit2.c:1208: error: \u2018GIT_ENOTFOUND\u2019 undeclared (first use in this function)\npygit2.c:1217: error: \u2018Tree\u2019 has no member named \u2018tree\u2019\npygit2.c:1217: error: expected expression before \u2018)\u2019 token\npygit2.c: In function \u2018Commit_get_parents\u2019:\npygit2.c:1226: error: nested functions are disabled, use -fnested-functions to re-enable\npygit2.c:1226: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:1226: error: \u2018parent_oid\u2019 undeclared (first use in this function)\npygit2.c:1230: error: \u2018Commit\u2019 has no member named \u2018commit\u2019\npygit2.c:1236: error: \u2018Commit\u2019 has no member named \u2018commit\u2019\npygit2.c:1239: error: \u2018GIT_ENOTFOUND\u2019 undeclared (first use in this function)\npygit2.c:1242: error: \u2018GIT_OBJ_COMMIT\u2019 undeclared (first use in this function)\npygit2.c:1242: warning: assignment makes pointer from integer without a cast\npygit2.c: In function \u2018TreeEntry_dealloc\u2019:\npygit2.c:1314: error: \u2018TreeEntry\u2019 has no member named \u2018tree\u2019\npygit2.c:1314: error: \u2018TreeEntry\u2019 has no member named \u2018tree\u2019\npygit2.c:1314: error: \u2018TreeEntry\u2019 has no member named \u2018tree\u2019\npygit2.c:1314: error: \u2018TreeEntry\u2019 has no member named \u2018tree\u2019\npygit2.c: In function \u2018TreeEntry_get_attributes\u2019:\npygit2.c:1321: error: \u2018TreeEntry\u2019 has no member named \u2018entry\u2019\npygit2.c: In function \u2018TreeEntry_get_name\u2019:\npygit2.c:1327: error: \u2018TreeEntry\u2019 has no member named \u2018entry\u2019\npygit2.c:1327: error: \u2018TreeEntry\u2019 has no member named \u2018entry\u2019\npygit2.c:1327: warning: passing argument 1 of \u2018strlen\u2019 makes pointer from integer without a cast\npygit2.c:1327: warning: passing argument 1 of \u2018PyUnicodeUCS2_DecodeUTF8\u2019 makes pointer from integer without a cast\npygit2.c: In function \u2018TreeEntry_get_oid\u2019:\npygit2.c:1333: error: nested functions are disabled, use -fnested-functions to re-enable\npygit2.c:1333: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:1333: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:1335: error: \u2018TreeEntry\u2019 has no member named \u2018entry\u2019\npygit2.c:1336: error: \u2018GIT_OID_RAWSZ\u2019 undeclared (first use in this function)\npygit2.c: In function \u2018TreeEntry_get_hex\u2019:\npygit2.c:1342: error: \u2018TreeEntry\u2019 has no member named \u2018entry\u2019\npygit2.c:1342: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018TreeEntry_to_object\u2019:\npygit2.c:1348: error: nested functions are disabled, use -fnested-functions to re-enable\npygit2.c:1348: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:1348: error: \u2018entry_oid\u2019 undeclared (first use in this function)\npygit2.c:1350: error: \u2018TreeEntry\u2019 has no member named \u2018entry\u2019\npygit2.c:1351: error: \u2018TreeEntry\u2019 has no member named \u2018tree\u2019\npygit2.c:1351: error: \u2018GIT_OBJ_ANY\u2019 undeclared (first use in this function)\npygit2.c:1351: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018Tree_len\u2019:\npygit2.c:1413: error: \u2018Tree\u2019 has no member named \u2018tree\u2019\npygit2.c: In function \u2018Tree_contains\u2019:\npygit2.c:1425: error: \u2018Tree\u2019 has no member named \u2018tree\u2019\npygit2.c: At top level:\npygit2.c:1429: error: expected \u2018;\u2019, \u2018,\u2019 or \u2018)\u2019 before \u2018_\u2019 token\npygit2.c: In function \u2018Tree_fix_index\u2019:\npygit2.c:1453: error: \u2018Tree\u2019 has no member named \u2018tree\u2019\npygit2.c: In function \u2018Tree_getitem_by_index\u2019:\npygit2.c:1491: error: nested functions are disabled, use -fnested-functions to re-enable\npygit2.c:1491: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:1491: error: \u2018entry\u2019 undeclared (first use in this function)\npygit2.c:1497: error: \u2018Tree\u2019 has no member named \u2018tree\u2019\npygit2.c:1502: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018Tree_getitem\u2019:\npygit2.c:1509: error: nested functions are disabled, use -fnested-functions to re-enable\npygit2.c:1509: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:1509: error: \u2018entry\u2019 undeclared (first use in this function)\npygit2.c:1519: error: \u2018Tree\u2019 has no member named \u2018tree\u2019\npygit2.c:1524: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018TreeIter_iternext\u2019:\npygit2.c:1595: error: nested functions are disabled, use -fnested-functions to re-enable\npygit2.c:1595: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:1595: error: \u2018tree_entry\u2019 undeclared (first use in this function)\npygit2.c:1597: error: \u2018Tree\u2019 has no member named \u2018tree\u2019\npygit2.c: In function \u2018Tag_dealloc\u2019:\npygit2.c:1685: error: \u2018Tag\u2019 has no member named \u2018tag\u2019\npygit2.c:1686: error: \u2018Tag\u2019 has no member named \u2018target\u2019\npygit2.c:1686: error: \u2018Tag\u2019 has no member named \u2018target\u2019\npygit2.c:1686: error: \u2018Tag\u2019 has no member named \u2018target\u2019\npygit2.c:1686: error: \u2018Tag\u2019 has no member named \u2018target\u2019\npygit2.c: In function \u2018Tag_get_target\u2019:\npygit2.c:1694: error: nested functions are disabled, use -fnested-functions to re-enable\npygit2.c:1694: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:1694: error: \u2018target_oid\u2019 undeclared (first use in this function)\npygit2.c:1695: error: \u2018git_otype\u2019 undeclared (first use in this function)\npygit2.c:1695: error: expected \u2018;\u2019 before \u2018target_type\u2019\npygit2.c:1697: error: \u2018Tag\u2019 has no member named \u2018target\u2019\npygit2.c:1698: error: \u2018Tag\u2019 has no member named \u2018tag\u2019\npygit2.c:1699: error: \u2018target_type\u2019 undeclared (first use in this function)\npygit2.c:1699: error: \u2018Tag\u2019 has no member named \u2018tag\u2019\npygit2.c:1700: error: \u2018Tag\u2019 has no member named \u2018target\u2019\npygit2.c:1701: error: \u2018Tag\u2019 has no member named \u2018target\u2019\npygit2.c:1705: error: \u2018Tag\u2019 has no member named \u2018target\u2019\npygit2.c:1706: error: \u2018Tag\u2019 has no member named \u2018target\u2019\npygit2.c: In function \u2018Tag_get_name\u2019:\npygit2.c:1713: error: \u2018Tag\u2019 has no member named \u2018tag\u2019\npygit2.c:1713: warning: assignment makes pointer from integer without a cast\npygit2.c: In function \u2018Tag_get_tagger\u2019:\npygit2.c:1722: error: nested functions are disabled, use -fnested-functions to re-enable\npygit2.c:1722: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:1722: error: \u2018signature\u2019 undeclared (first use in this function)\npygit2.c:1722: error: \u2018Tag\u2019 has no member named \u2018tag\u2019\npygit2.c:1725: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018Tag_get_message\u2019:\npygit2.c:1732: error: \u2018Tag\u2019 has no member named \u2018tag\u2019\npygit2.c:1732: warning: assignment makes pointer from integer without a cast\npygit2.c: In function \u2018Index_init\u2019:\npygit2.c:1803: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c:1809: error: \u2018Index\u2019 has no member named \u2018own_obj\u2019\npygit2.c: In function \u2018Index_dealloc\u2019:\npygit2.c:1816: error: \u2018Index\u2019 has no member named \u2018own_obj\u2019\npygit2.c:1817: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c: In function \u2018Index_add\u2019:\npygit2.c:1832: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c: In function \u2018Index_clear\u2019:\npygit2.c:1842: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c: In function \u2018Index_find\u2019:\npygit2.c:1856: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c: In function \u2018Index_read\u2019:\npygit2.c:1868: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c:1869: error: \u2018GIT_SUCCESS\u2019 undeclared (first use in this function)\npygit2.c: In function \u2018Index_write\u2019:\npygit2.c:1880: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c:1881: error: \u2018GIT_SUCCESS\u2019 undeclared (first use in this function)\npygit2.c: In function \u2018Index_get_position\u2019:\npygit2.c:1910: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c: In function \u2018Index_contains\u2019:\npygit2.c:1927: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c:1928: error: \u2018GIT_ENOTFOUND\u2019 undeclared (first use in this function)\npygit2.c: In function \u2018Index_len\u2019:\npygit2.c:1956: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c: At top level:\npygit2.c:1960: error: expected \u2018)\u2019 before \u2018_\u2019 token\npygit2.c: In function \u2018Index_getitem\u2019:\npygit2.c:1977: error: \u2018git_index_entry\u2019 undeclared (first use in this function)\npygit2.c:1977: error: \u2018index_entry\u2019 undeclared (first use in this function)\npygit2.c:1983: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c:1989: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018Index_setitem\u2019:\npygit2.c:2008: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c: In function \u2018Index_create_tree\u2019:\npygit2.c:2020: error: \u2018git_oid\u2019 undeclared (first use in this function)\npygit2.c:2020: error: expected \u2018;\u2019 before \u2018oid\u2019\npygit2.c:2023: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:2023: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c:2027: error: \u2018GIT_OID_RAWSZ\u2019 undeclared (first use in this function)\npygit2.c: In function \u2018IndexIter_iternext\u2019:\npygit2.c:2118: error: \u2018git_index_entry\u2019 undeclared (first use in this function)\npygit2.c:2118: error: \u2018index_entry\u2019 undeclared (first use in this function)\npygit2.c:2120: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c:2125: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018IndexEntry_get_mode\u2019:\npygit2.c:2168: error: \u2018IndexEntry\u2019 has no member named \u2018entry\u2019\npygit2.c: In function \u2018IndexEntry_get_path\u2019:\npygit2.c:2174: error: \u2018IndexEntry\u2019 has no member named \u2018entry\u2019\npygit2.c:2174: error: \u2018IndexEntry\u2019 has no member named \u2018entry\u2019\npygit2.c: In function \u2018IndexEntry_get_oid\u2019:\npygit2.c:2180: error: \u2018IndexEntry\u2019 has no member named \u2018entry\u2019\npygit2.c:2180: error: \u2018GIT_OID_RAWSZ\u2019 undeclared (first use in this function)\npygit2.c: In function \u2018IndexEntry_get_hex\u2019:\npygit2.c:2186: error: \u2018IndexEntry\u2019 has no member named \u2018entry\u2019\npygit2.c:2186: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018Walker_dealloc\u2019:\npygit2.c:2241: error: \u2018Walker\u2019 has no member named \u2018walk\u2019\npygit2.c: In function \u2018Walker_hide\u2019:\npygit2.c:2250: error: \u2018git_oid\u2019 undeclared (first use in this function)\npygit2.c:2250: error: expected \u2018;\u2019 before \u2018oid\u2019\npygit2.c:2253: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:2253: error: too many arguments to function \u2018py_str_to_git_oid\u2019\npygit2.c:2254: error: \u2018GIT_OID_HEXSZ\u2019 undeclared (first use in this function)\npygit2.c:2258: error: \u2018Walker\u2019 has no member named \u2018walk\u2019\npygit2.c: In function \u2018Walker_push\u2019:\npygit2.c:2269: error: \u2018git_oid\u2019 undeclared (first use in this function)\npygit2.c:2269: error: expected \u2018;\u2019 before \u2018oid\u2019\npygit2.c:2272: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:2272: error: too many arguments to function \u2018py_str_to_git_oid\u2019\npygit2.c:2273: error: \u2018GIT_OID_HEXSZ\u2019 undeclared (first use in this function)\npygit2.c:2277: error: \u2018Walker\u2019 has no member named \u2018walk\u2019\npygit2.c: In function \u2018Walker_sort\u2019:\npygit2.c:2293: error: \u2018Walker\u2019 has no member named \u2018walk\u2019\npygit2.c: In function \u2018Walker_reset\u2019:\npygit2.c:2301: error: \u2018Walker\u2019 has no member named \u2018walk\u2019\npygit2.c: In function \u2018Walker_iternext\u2019:\npygit2.c:2316: error: \u2018git_commit\u2019 undeclared (first use in this function)\npygit2.c:2316: error: \u2018commit\u2019 undeclared (first use in this function)\npygit2.c:2318: error: \u2018git_oid\u2019 undeclared (first use in this function)\npygit2.c:2318: error: expected \u2018;\u2019 before \u2018oid\u2019\npygit2.c:2320: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:2320: error: \u2018Walker\u2019 has no member named \u2018walk\u2019\npygit2.c:2324: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:2331: error: \u2018Commit\u2019 has no member named \u2018commit\u2019\npygit2.c: In function \u2018Reference_delete\u2019:\npygit2.c:2397: error: \u2018Reference\u2019 has no member named \u2018reference\u2019\npygit2.c:2402: error: \u2018Reference\u2019 has no member named \u2018reference\u2019\npygit2.c: In function \u2018Reference_rename\u2019:\npygit2.c:2420: error: \u2018Reference\u2019 has no member named \u2018reference\u2019\npygit2.c: In function \u2018Reference_resolve\u2019:\npygit2.c:2431: error: \u2018git_reference\u2019 undeclared (first use in this function)\npygit2.c:2431: error: \u2018c_reference\u2019 undeclared (first use in this function)\npygit2.c:2435: error: \u2018Reference\u2019 has no member named \u2018reference\u2019\npygit2.c:2440: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018Reference_get_target\u2019:\npygit2.c:2449: error: \u2018Reference\u2019 has no member named \u2018reference\u2019\npygit2.c:2449: warning: assignment makes pointer from integer without a cast\npygit2.c: In function \u2018Reference_set_target\u2019:\npygit2.c:2471: error: \u2018Reference\u2019 has no member named \u2018reference\u2019\npygit2.c: In function \u2018Reference_get_name\u2019:\npygit2.c:2486: error: \u2018Reference\u2019 has no member named \u2018reference\u2019\npygit2.c:2486: warning: assignment makes pointer from integer without a cast\npygit2.c: In function \u2018Reference_get_oid\u2019:\npygit2.c:2493: error: nested functions are disabled, use -fnested-functions to re-enable\npygit2.c:2493: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:2493: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:2496: error: \u2018Reference\u2019 has no member named \u2018reference\u2019\npygit2.c:2506: error: \u2018GIT_OID_RAWSZ\u2019 undeclared (first use in this function)\npygit2.c: In function \u2018Reference_set_oid\u2019:\npygit2.c:2512: error: \u2018git_oid\u2019 undeclared (first use in this function)\npygit2.c:2512: error: expected \u2018;\u2019 before \u2018oid\u2019\npygit2.c:2517: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:2517: error: too many arguments to function \u2018py_str_to_git_oid\u2019\npygit2.c:2518: error: \u2018GIT_OID_HEXSZ\u2019 undeclared (first use in this function)\npygit2.c:2523: error: \u2018Reference\u2019 has no member named \u2018reference\u2019\npygit2.c: In function \u2018Reference_get_hex\u2019:\npygit2.c:2536: error: nested functions are disabled, use -fnested-functions to re-enable\npygit2.c:2536: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:2536: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:2539: error: \u2018Reference\u2019 has no member named \u2018reference\u2019\npygit2.c:2549: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018Reference_get_type\u2019:\npygit2.c:2555: error: \u2018git_rtype\u2019 undeclared (first use in this function)\npygit2.c:2555: error: expected \u2018;\u2019 before \u2018c_type\u2019\npygit2.c:2557: error: \u2018c_type\u2019 undeclared (first use in this function)\npygit2.c:2557: error: \u2018Reference\u2019 has no member named \u2018reference\u2019\npygit2.c: In function \u2018init_repository\u2019:\npygit2.c:2628: error: \u2018git_repository\u2019 undeclared (first use in this function)\npygit2.c:2628: error: \u2018repo\u2019 undeclared (first use in this function)\npygit2.c:2649: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:2650: error: \u2018Repository\u2019 has no member named \u2018index\u2019\npygit2.c: In function \u2018moduleinit\u2019:\npygit2.c:2738: error: \u2018GIT_OBJ_ANY\u2019 undeclared (first use in this function)\npygit2.c:2739: error: \u2018GIT_OBJ_COMMIT\u2019 undeclared (first use in this function)\npygit2.c:2740: error: \u2018GIT_OBJ_TREE\u2019 undeclared (first use in this function)\npygit2.c:2741: error: \u2018GIT_OBJ_BLOB\u2019 undeclared (first use in this function)\npygit2.c:2742: error: \u2018GIT_OBJ_TAG\u2019 undeclared (first use in this function)\npygit2.c:2743: error: \u2018GIT_SORT_NONE\u2019 undeclared (first use in this function)\npygit2.c:2744: error: \u2018GIT_SORT_TOPOLOGICAL\u2019 undeclared (first use in this function)\npygit2.c:2745: error: \u2018GIT_SORT_TIME\u2019 undeclared (first use in this function)\npygit2.c:2746: error: \u2018GIT_SORT_REVERSE\u2019 undeclared (first use in this function)\npygit2.c:2747: error: \u2018GIT_REF_OID\u2019 undeclared (first use in this function)\npygit2.c:2748: error: \u2018GIT_REF_SYMBOLIC\u2019 undeclared (first use in this function)\npygit2.c:2749: error: \u2018GIT_REF_PACKED\u2019 undeclared (first use in this function)\npygit2.c:2752: error: \u2018GIT_STATUS_CURRENT\u2019 undeclared (first use in this function)\npygit2.c:2755: error: \u2018GIT_STATUS_INDEX_NEW\u2019 undeclared (first use in this function)\npygit2.c:2757: error: \u2018GIT_STATUS_INDEX_MODIFIED\u2019 undeclared (first use in this function)\npygit2.c:2759: error: \u2018GIT_STATUS_INDEX_DELETED\u2019 undeclared (first use in this function)\npygit2.c:2762: error: \u2018GIT_STATUS_WT_NEW\u2019 undeclared (first use in this function)\npygit2.c:2764: error: \u2018GIT_STATUS_WT_MODIFIED\u2019 undeclared (first use in this function)\npygit2.c:2765: error: \u2018GIT_STATUS_WT_DELETED\u2019 undeclared (first use in this function)\npygit2.c:2768: error: \u2018GIT_STATUS_IGNORED\u2019 undeclared (first use in this function)\npygit2.c:31:18: error: git2.h: No such file or directory\npygit2.c:58: error: expected specifier-qualifier-list before \u2018git_repository\u2019\npygit2.c:71: error: expected specifier-qualifier-list before \u2018git_object\u2019\npygit2.c:72: error: expected specifier-qualifier-list before \u2018git_commit\u2019\npygit2.c:73: error: expected specifier-qualifier-list before \u2018git_tree\u2019\npygit2.c:74: error: expected specifier-qualifier-list before \u2018git_blob\u2019\npygit2.c:75: error: expected specifier-qualifier-list before \u2018git_revwalk\u2019\npygit2.c:80: error: expected specifier-qualifier-list before \u2018git_tag\u2019\npygit2.c:86: error: expected \u2018:\u2019, \u2018,\u2019, \u2018;\u2019, \u2018}\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:93: error: expected specifier-qualifier-list before \u2018git_index\u2019\npygit2.c:111: error: expected specifier-qualifier-list before \u2018git_index_entry\u2019\npygit2.c:116: error: expected specifier-qualifier-list before \u2018git_reference\u2019\npygit2.c: In function \u2018Error_type\u2019:\npygit2.c:139: error: \u2018GIT_ENOTFOUND\u2019 undeclared (first use in this function)\npygit2.c:139: error: (Each undeclared identifier is reported only once\npygit2.c:139: error: for each function it appears in.)\npygit2.c:141: error: \u2018GIT_EOSERR\u2019 undeclared (first use in this function)\npygit2.c:143: error: \u2018GIT_ENOTOID\u2019 undeclared (first use in this function)\npygit2.c:145: error: \u2018GIT_ENOMEM\u2019 undeclared (first use in this function)\npygit2.c:147: error: \u2018GIT_EREVWALKOVER\u2019 undeclared (first use in this function)\npygit2.c: In function \u2018Error_set\u2019:\npygit2.c:158: error: \u2018GIT_ENOTFOUND\u2019 undeclared (first use in this function)\npygit2.c:165: error: \u2018GIT_EOSERR\u2019 undeclared (first use in this function)\npygit2.c:169: warning: passing argument 2 of \u2018PyErr_SetString\u2019 makes pointer from integer without a cast\npygit2.c: In function \u2018Error_set_str\u2019:\npygit2.c:176: error: \u2018GIT_ENOTFOUND\u2019 undeclared (first use in this function)\npygit2.c:181: warning: format \u2018%s\u2019 expects type \u2018char *\u2019, but argument 4 has type \u2018int\u2019\npygit2.c: In function \u2018Error_set_py_obj\u2019:\npygit2.c:193: error: \u2018GIT_ENOTOID\u2019 undeclared (first use in this function)\npygit2.c:200: error: \u2018GIT_ENOTFOUND\u2019 undeclared (first use in this function)\npygit2.c:207: warning: format \u2018%s\u2019 expects type \u2018char *\u2019, but argument 4 has type \u2018int\u2019\npygit2.c: At top level:\npygit2.c:213: error: expected \u2018;\u2019, \u2018,\u2019 or \u2018)\u2019 before \u2018_\u2019 token\npygit2.c:255: error: expected \u2018;\u2019, \u2018,\u2019 or \u2018)\u2019 before \u2018_\u2019 token\npygit2.c:261: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018int_to_loose_object_type\u2019\npygit2.c:273: error: expected \u2018)\u2019 before \u2018_\u2019 token\npygit2.c:285: error: expected declaration specifiers or \u2018...\u2019 before \u2018git_oid\u2019\npygit2.c: In function \u2018py_str_to_git_oid\u2019:\npygit2.c:297: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:298: error: \u2018GIT_OID_HEXSZ\u2019 undeclared (first use in this function)\npygit2.c: At top level:\npygit2.c:337: error: expected \u2018;\u2019, \u2018,\u2019 or \u2018)\u2019 before \u2018_\u2019 token\npygit2.c: In function \u2018Repository_init\u2019:\npygit2.c:391: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c: In function \u2018Repository_dealloc\u2019:\npygit2.c:403: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:404: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:405: error: \u2018Repository\u2019 has no member named \u2018index\u2019\npygit2.c:405: error: \u2018Repository\u2019 has no member named \u2018index\u2019\npygit2.c:405: error: \u2018Repository\u2019 has no member named \u2018index\u2019\npygit2.c:405: error: \u2018Repository\u2019 has no member named \u2018index\u2019\npygit2.c: In function \u2018Repository_contains\u2019:\npygit2.c:412: error: \u2018git_oid\u2019 undeclared (first use in this function)\npygit2.c:412: error: expected \u2018;\u2019 before \u2018oid\u2019\npygit2.c:415: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:415: error: too many arguments to function \u2018py_str_to_git_oid\u2019\npygit2.c:416: error: \u2018GIT_OID_HEXSZ\u2019 undeclared (first use in this function)\npygit2.c:420: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c: In function \u2018Repository_getitem\u2019:\npygit2.c:426: error: \u2018git_oid\u2019 undeclared (first use in this function)\npygit2.c:426: error: expected \u2018;\u2019 before \u2018oid\u2019\npygit2.c:429: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:429: error: too many arguments to function \u2018py_str_to_git_oid\u2019\npygit2.c:433: error: \u2018GIT_OBJ_ANY\u2019 undeclared (first use in this function)\npygit2.c:433: warning: return makes pointer from integer without a cast\npygit2.c: At top level:\npygit2.c:437: error: expected \u2018)\u2019 before \u2018_\u2019 token\npygit2.c: In function \u2018Repository_read\u2019:\npygit2.c:447: error: \u2018git_oid\u2019 undeclared (first use in this function)\npygit2.c:447: error: expected \u2018;\u2019 before \u2018oid\u2019\npygit2.c:449: error: \u2018git_odb_object\u2019 undeclared (first use in this function)\npygit2.c:449: error: \u2018obj\u2019 undeclared (first use in this function)\npygit2.c:452: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:452: error: too many arguments to function \u2018py_str_to_git_oid\u2019\npygit2.c:456: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c: In function \u2018Repository_write\u2019:\npygit2.c:474: error: \u2018git_oid\u2019 undeclared (first use in this function)\npygit2.c:474: error: expected \u2018;\u2019 before \u2018oid\u2019\npygit2.c:475: error: \u2018git_odb_stream\u2019 undeclared (first use in this function)\npygit2.c:475: error: \u2018stream\u2019 undeclared (first use in this function)\npygit2.c:484: error: \u2018git_otype\u2019 undeclared (first use in this function)\npygit2.c:484: error: expected \u2018;\u2019 before \u2018type\u2019\npygit2.c:485: error: \u2018type\u2019 undeclared (first use in this function)\npygit2.c:485: error: \u2018GIT_OBJ_BAD\u2019 undeclared (first use in this function)\npygit2.c:488: error: \u2018git_odb\u2019 undeclared (first use in this function)\npygit2.c:488: error: \u2018odb\u2019 undeclared (first use in this function)\npygit2.c:488: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:491: error: \u2018GIT_SUCCESS\u2019 undeclared (first use in this function)\npygit2.c:493: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:499: error: \u2018GIT_OID_RAWSZ\u2019 undeclared (first use in this function)\npygit2.c: In function \u2018Repository_get_index\u2019:\npygit2.c:506: error: \u2018git_index\u2019 undeclared (first use in this function)\npygit2.c:511: error: \u2018Repository\u2019 has no member named \u2018index\u2019\npygit2.c:512: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:513: error: \u2018GIT_SUCCESS\u2019 undeclared (first use in this function)\npygit2.c:519: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c:520: error: \u2018Index\u2019 has no member named \u2018own_obj\u2019\npygit2.c:521: error: \u2018Repository\u2019 has no member named \u2018index\u2019\npygit2.c:523: error: \u2018GIT_EBAREINDEX\u2019 undeclared (first use in this function)\npygit2.c:525: error: \u2018Repository\u2019 has no member named \u2018index\u2019\npygit2.c:532: error: \u2018Repository\u2019 has no member named \u2018index\u2019\npygit2.c:533: error: \u2018Repository\u2019 has no member named \u2018index\u2019\npygit2.c: In function \u2018Repository_get_path\u2019:\npygit2.c:541: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:541: error: \u2018GIT_REPO_PATH\u2019 undeclared (first use in this function)\npygit2.c:541: warning: assignment makes pointer from integer without a cast\npygit2.c: In function \u2018Repository_get_workdir\u2019:\npygit2.c:550: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:550: error: \u2018GIT_REPO_PATH_WORKDIR\u2019 undeclared (first use in this function)\npygit2.c:550: warning: assignment makes pointer from integer without a cast\npygit2.c: In function \u2018Repository_walk\u2019:\npygit2.c:563: error: \u2018git_oid\u2019 undeclared (first use in this function)\npygit2.c:563: error: expected \u2018;\u2019 before \u2018oid\u2019\npygit2.c:564: error: \u2018git_revwalk\u2019 undeclared (first use in this function)\npygit2.c:564: error: \u2018walk\u2019 undeclared (first use in this function)\npygit2.c:571: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:580: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:580: error: too many arguments to function \u2018py_str_to_git_oid\u2019\npygit2.c:581: error: \u2018GIT_OID_HEXSZ\u2019 undeclared (first use in this function)\npygit2.c:601: error: \u2018Walker\u2019 has no member named \u2018walk\u2019\npygit2.c: At top level:\npygit2.c:606: error: expected \u2018;\u2019, \u2018,\u2019 or \u2018)\u2019 before \u2018_\u2019 token\npygit2.c:616: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:641: error: expected \u2018)\u2019 before \u2018_\u2019 token\npygit2.c: In function \u2018Repository_create_commit\u2019:\npygit2.c:656: error: \u2018git_signature\u2019 undeclared (first use in this function)\npygit2.c:656: error: \u2018author\u2019 undeclared (first use in this function)\npygit2.c:656: error: \u2018committer\u2019 undeclared (first use in this function)\npygit2.c:658: error: \u2018git_oid\u2019 undeclared (first use in this function)\npygit2.c:658: error: expected \u2018;\u2019 before \u2018oid\u2019\npygit2.c:659: error: \u2018git_tree\u2019 undeclared (first use in this function)\npygit2.c:659: error: \u2018tree\u2019 undeclared (first use in this function)\npygit2.c:661: error: \u2018git_commit\u2019 undeclared (first use in this function)\npygit2.c:661: error: \u2018parents\u2019 undeclared (first use in this function)\npygit2.c:682: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:682: error: too many arguments to function \u2018py_str_to_git_oid\u2019\npygit2.c:688: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:693: error: expected expression before \u2018)\u2019 token\npygit2.c:701: error: too many arguments to function \u2018py_str_to_git_oid\u2019\npygit2.c:704: warning: return makes pointer from integer without a cast\npygit2.c:706: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:709: warning: return makes pointer from integer without a cast\npygit2.c:713: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:714: error: expected \u2018)\u2019 before \u2018git_commit\u2019\npygit2.c:720: error: \u2018GIT_OID_RAWSZ\u2019 undeclared (first use in this function)\npygit2.c: In function \u2018Repository_create_tag\u2019:\npygit2.c:728: error: \u2018git_signature\u2019 undeclared (first use in this function)\npygit2.c:728: error: \u2018tagger\u2019 undeclared (first use in this function)\npygit2.c:729: error: \u2018git_oid\u2019 undeclared (first use in this function)\npygit2.c:729: error: expected \u2018;\u2019 before \u2018oid\u2019\npygit2.c:730: error: \u2018git_object\u2019 undeclared (first use in this function)\npygit2.c:730: error: \u2018target\u2019 undeclared (first use in this function)\npygit2.c:732: error: \u2018GIT_OID_HEXSZ\u2019 undeclared (first use in this function)\npygit2.c:747: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:747: error: too many arguments to function \u2018py_str_to_git_oid\u2019\npygit2.c:751: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:759: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:765: error: \u2018GIT_OID_RAWSZ\u2019 undeclared (first use in this function)\npygit2.c: In function \u2018Repository_listall_references\u2019:\npygit2.c:771: error: \u2018GIT_REF_LISTALL\u2019 undeclared (first use in this function)\npygit2.c:772: error: \u2018git_strarray\u2019 undeclared (first use in this function)\npygit2.c:772: error: expected \u2018;\u2019 before \u2018c_result\u2019\npygit2.c:782: error: \u2018c_result\u2019 undeclared (first use in this function)\npygit2.c:782: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c: In function \u2018Repository_lookup_reference\u2019:\npygit2.c:814: error: \u2018git_reference\u2019 undeclared (first use in this function)\npygit2.c:814: error: \u2018c_reference\u2019 undeclared (first use in this function)\npygit2.c:824: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:829: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018Repository_create_reference\u2019:\npygit2.c:836: error: \u2018git_reference\u2019 undeclared (first use in this function)\npygit2.c:836: error: \u2018c_reference\u2019 undeclared (first use in this function)\npygit2.c:838: error: \u2018git_oid\u2019 undeclared (first use in this function)\npygit2.c:838: error: expected \u2018;\u2019 before \u2018oid\u2019\npygit2.c:846: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:846: error: too many arguments to function \u2018py_str_to_git_oid\u2019\npygit2.c:847: error: \u2018GIT_OID_HEXSZ\u2019 undeclared (first use in this function)\npygit2.c:852: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:857: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018Repository_create_symbolic_reference\u2019:\npygit2.c:863: error: \u2018git_reference\u2019 undeclared (first use in this function)\npygit2.c:863: error: \u2018c_reference\u2019 undeclared (first use in this function)\npygit2.c:872: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:878: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018Repository_packall_references\u2019:\npygit2.c:887: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c: In function \u2018read_status_cb\u2019:\npygit2.c:905: error: \u2018GIT_SUCCESS\u2019 undeclared (first use in this function)\npygit2.c: In function \u2018Repository_status\u2019:\npygit2.c:914: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c: In function \u2018Object_dealloc\u2019:\npygit2.c:1024: error: \u2018Object\u2019 has no member named \u2018obj\u2019\npygit2.c: In function \u2018Object_get_oid\u2019:\npygit2.c:1032: error: nested functions are disabled, use -fnested-functions to re-enable\npygit2.c:1032: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:1032: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:1034: error: \u2018Object\u2019 has no member named \u2018obj\u2019\npygit2.c:1037: error: \u2018GIT_OID_RAWSZ\u2019 undeclared (first use in this function)\npygit2.c: In function \u2018Object_get_hex\u2019:\npygit2.c:1043: error: nested functions are disabled, use -fnested-functions to re-enable\npygit2.c:1043: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:1043: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:1045: error: \u2018Object\u2019 has no member named \u2018obj\u2019\npygit2.c:1048: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018Object_get_type\u2019:\npygit2.c:1054: error: \u2018Object\u2019 has no member named \u2018obj\u2019\npygit2.c: In function \u2018Object_read_raw\u2019:\npygit2.c:1060: error: nested functions are disabled, use -fnested-functions to re-enable\npygit2.c:1060: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:1060: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:1061: error: \u2018git_odb_object\u2019 undeclared (first use in this function)\npygit2.c:1061: error: \u2018obj\u2019 undeclared (first use in this function)\npygit2.c:1065: error: \u2018Object\u2019 has no member named \u2018obj\u2019\npygit2.c:1068: error: \u2018Repository\u2019 has no member named \u2018repo\u2019\npygit2.c:1068: error: \u2018GIT_OID_HEXSZ\u2019 undeclared (first use in this function)\npygit2.c:1070: warning: assignment makes pointer from integer without a cast\npygit2.c:1078: warning: passing argument 1 of \u2018PyString_FromStringAndSize\u2019 makes pointer from integer without a cast\npygit2.c: In function \u2018Commit_get_message_encoding\u2019:\npygit2.c:1143: error: \u2018Commit\u2019 has no member named \u2018commit\u2019\npygit2.c:1143: warning: assignment makes pointer from integer without a cast\npygit2.c: In function \u2018Commit_get_message\u2019:\npygit2.c:1155: error: \u2018Commit\u2019 has no member named \u2018commit\u2019\npygit2.c:1155: warning: assignment makes pointer from integer without a cast\npygit2.c:1156: error: \u2018Commit\u2019 has no member named \u2018commit\u2019\npygit2.c:1156: warning: assignment makes pointer from integer without a cast\npygit2.c: In function \u2018Commit_get_commit_time\u2019:\npygit2.c:1165: error: \u2018Commit\u2019 has no member named \u2018commit\u2019\npygit2.c: In function \u2018Commit_get_commit_time_offset\u2019:\npygit2.c:1171: error: \u2018Commit\u2019 has no member named \u2018commit\u2019\npygit2.c: In function \u2018Commit_get_committer\u2019:\npygit2.c:1177: error: nested functions are disabled, use -fnested-functions to re-enable\npygit2.c:1177: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:1177: error: \u2018signature\u2019 undeclared (first use in this function)\npygit2.c:1180: error: \u2018Commit\u2019 has no member named \u2018commit\u2019\npygit2.c:1181: error: \u2018Commit\u2019 has no member named \u2018commit\u2019\npygit2.c:1181: warning: assignment makes pointer from integer without a cast\npygit2.c:1184: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018Commit_get_author\u2019:\npygit2.c:1190: error: nested functions are disabled, use -fnested-functions to re-enable\npygit2.c:1190: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:1190: error: \u2018signature\u2019 undeclared (first use in this function)\npygit2.c:1193: error: \u2018Commit\u2019 has no member named \u2018commit\u2019\npygit2.c:1194: error: \u2018Commit\u2019 has no member named \u2018commit\u2019\npygit2.c:1194: warning: assignment makes pointer from integer without a cast\npygit2.c:1197: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018Commit_get_tree\u2019:\npygit2.c:1203: error: \u2018git_tree\u2019 undeclared (first use in this function)\npygit2.c:1203: error: \u2018tree\u2019 undeclared (first use in this function)\npygit2.c:1207: error: \u2018Commit\u2019 has no member named \u2018commit\u2019\npygit2.c:1208: error: \u2018GIT_ENOTFOUND\u2019 undeclared (first use in this function)\npygit2.c:1217: error: \u2018Tree\u2019 has no member named \u2018tree\u2019\npygit2.c:1217: error: expected expression before \u2018)\u2019 token\npygit2.c: In function \u2018Commit_get_parents\u2019:\npygit2.c:1226: error: nested functions are disabled, use -fnested-functions to re-enable\npygit2.c:1226: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:1226: error: \u2018parent_oid\u2019 undeclared (first use in this function)\npygit2.c:1230: error: \u2018Commit\u2019 has no member named \u2018commit\u2019\npygit2.c:1236: error: \u2018Commit\u2019 has no member named \u2018commit\u2019\npygit2.c:1239: error: \u2018GIT_ENOTFOUND\u2019 undeclared (first use in this function)\npygit2.c:1242: error: \u2018GIT_OBJ_COMMIT\u2019 undeclared (first use in this function)\npygit2.c:1242: warning: assignment makes pointer from integer without a cast\npygit2.c: In function \u2018TreeEntry_dealloc\u2019:\npygit2.c:1314: error: \u2018TreeEntry\u2019 has no member named \u2018tree\u2019\npygit2.c:1314: error: \u2018TreeEntry\u2019 has no member named \u2018tree\u2019\npygit2.c:1314: error: \u2018TreeEntry\u2019 has no member named \u2018tree\u2019\npygit2.c:1314: error: \u2018TreeEntry\u2019 has no member named \u2018tree\u2019\npygit2.c: In function \u2018TreeEntry_get_attributes\u2019:\npygit2.c:1321: error: \u2018TreeEntry\u2019 has no member named \u2018entry\u2019\npygit2.c: In function \u2018TreeEntry_get_name\u2019:\npygit2.c:1327: error: \u2018TreeEntry\u2019 has no member named \u2018entry\u2019\npygit2.c:1327: error: \u2018TreeEntry\u2019 has no member named \u2018entry\u2019\npygit2.c:1327: warning: passing argument 1 of \u2018strlen\u2019 makes pointer from integer without a cast\npygit2.c:1327: warning: passing argument 1 of \u2018PyUnicodeUCS2_DecodeUTF8\u2019 makes pointer from integer without a cast\npygit2.c: In function \u2018TreeEntry_get_oid\u2019:\npygit2.c:1333: error: nested functions are disabled, use -fnested-functions to re-enable\npygit2.c:1333: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:1333: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:1335: error: \u2018TreeEntry\u2019 has no member named \u2018entry\u2019\npygit2.c:1336: error: \u2018GIT_OID_RAWSZ\u2019 undeclared (first use in this function)\npygit2.c: In function \u2018TreeEntry_get_hex\u2019:\npygit2.c:1342: error: \u2018TreeEntry\u2019 has no member named \u2018entry\u2019\npygit2.c:1342: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018TreeEntry_to_object\u2019:\npygit2.c:1348: error: nested functions are disabled, use -fnested-functions to re-enable\npygit2.c:1348: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:1348: error: \u2018entry_oid\u2019 undeclared (first use in this function)\npygit2.c:1350: error: \u2018TreeEntry\u2019 has no member named \u2018entry\u2019\npygit2.c:1351: error: \u2018TreeEntry\u2019 has no member named \u2018tree\u2019\npygit2.c:1351: error: \u2018GIT_OBJ_ANY\u2019 undeclared (first use in this function)\npygit2.c:1351: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018Tree_len\u2019:\npygit2.c:1413: error: \u2018Tree\u2019 has no member named \u2018tree\u2019\npygit2.c: In function \u2018Tree_contains\u2019:\npygit2.c:1425: error: \u2018Tree\u2019 has no member named \u2018tree\u2019\npygit2.c: At top level:\npygit2.c:1429: error: expected \u2018;\u2019, \u2018,\u2019 or \u2018)\u2019 before \u2018_\u2019 token\npygit2.c: In function \u2018Tree_fix_index\u2019:\npygit2.c:1453: error: \u2018Tree\u2019 has no member named \u2018tree\u2019\npygit2.c: In function \u2018Tree_getitem_by_index\u2019:\npygit2.c:1491: error: nested functions are disabled, use -fnested-functions to re-enable\npygit2.c:1491: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:1491: error: \u2018entry\u2019 undeclared (first use in this function)\npygit2.c:1497: error: \u2018Tree\u2019 has no member named \u2018tree\u2019\npygit2.c:1502: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018Tree_getitem\u2019:\npygit2.c:1509: error: nested functions are disabled, use -fnested-functions to re-enable\npygit2.c:1509: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:1509: error: \u2018entry\u2019 undeclared (first use in this function)\npygit2.c:1519: error: \u2018Tree\u2019 has no member named \u2018tree\u2019\npygit2.c:1524: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018TreeIter_iternext\u2019:\npygit2.c:1595: error: nested functions are disabled, use -fnested-functions to re-enable\npygit2.c:1595: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:1595: error: \u2018tree_entry\u2019 undeclared (first use in this function)\npygit2.c:1597: error: \u2018Tree\u2019 has no member named \u2018tree\u2019\npygit2.c:1602: warning: cast to pointer from integer of different size\npygit2.c: In function \u2018Tag_dealloc\u2019:\npygit2.c:1685: error: \u2018Tag\u2019 has no member named \u2018tag\u2019\npygit2.c:1686: error: \u2018Tag\u2019 has no member named \u2018target\u2019\npygit2.c:1686: error: \u2018Tag\u2019 has no member named \u2018target\u2019\npygit2.c:1686: error: \u2018Tag\u2019 has no member named \u2018target\u2019\npygit2.c:1686: error: \u2018Tag\u2019 has no member named \u2018target\u2019\npygit2.c: In function \u2018Tag_get_target\u2019:\npygit2.c:1694: error: nested functions are disabled, use -fnested-functions to re-enable\npygit2.c:1694: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:1694: error: \u2018target_oid\u2019 undeclared (first use in this function)\npygit2.c:1695: error: \u2018git_otype\u2019 undeclared (first use in this function)\npygit2.c:1695: error: expected \u2018;\u2019 before \u2018target_type\u2019\npygit2.c:1697: error: \u2018Tag\u2019 has no member named \u2018target\u2019\npygit2.c:1698: error: \u2018Tag\u2019 has no member named \u2018tag\u2019\npygit2.c:1699: error: \u2018target_type\u2019 undeclared (first use in this function)\npygit2.c:1699: error: \u2018Tag\u2019 has no member named \u2018tag\u2019\npygit2.c:1700: error: \u2018Tag\u2019 has no member named \u2018target\u2019\npygit2.c:1701: error: \u2018Tag\u2019 has no member named \u2018target\u2019\npygit2.c:1705: error: \u2018Tag\u2019 has no member named \u2018target\u2019\npygit2.c:1706: error: \u2018Tag\u2019 has no member named \u2018target\u2019\npygit2.c: In function \u2018Tag_get_name\u2019:\npygit2.c:1713: error: \u2018Tag\u2019 has no member named \u2018tag\u2019\npygit2.c:1713: warning: assignment makes pointer from integer without a cast\npygit2.c: In function \u2018Tag_get_tagger\u2019:\npygit2.c:1722: error: nested functions are disabled, use -fnested-functions to re-enable\npygit2.c:1722: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018**attribute**\u2019 before \u2018_\u2019 token\npygit2.c:1722: error: \u2018signature\u2019 undeclared (first use in this function)\npygit2.c:1722: error: \u2018Tag\u2019 has no member named \u2018tag\u2019\npygit2.c:1725: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018Tag_get_message\u2019:\npygit2.c:1732: error: \u2018Tag\u2019 has no member named \u2018tag\u2019\npygit2.c:1732: warning: assignment makes pointer from integer without a cast\npygit2.c: In function \u2018Index_init\u2019:\npygit2.c:1803: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c:1809: error: \u2018Index\u2019 has no member named \u2018own_obj\u2019\npygit2.c: In function \u2018Index_dealloc\u2019:\npygit2.c:1816: error: \u2018Index\u2019 has no member named \u2018own_obj\u2019\npygit2.c:1817: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c: In function \u2018Index_add\u2019:\npygit2.c:1832: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c: In function \u2018Index_clear\u2019:\npygit2.c:1842: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c: In function \u2018Index_find\u2019:\npygit2.c:1856: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c: In function \u2018Index_read\u2019:\npygit2.c:1868: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c:1869: error: \u2018GIT_SUCCESS\u2019 undeclared (first use in this function)\npygit2.c: In function \u2018Index_write\u2019:\npygit2.c:1880: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c:1881: error: \u2018GIT_SUCCESS\u2019 undeclared (first use in this function)\npygit2.c: In function \u2018Index_get_position\u2019:\npygit2.c:1910: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c: In function \u2018Index_contains\u2019:\npygit2.c:1927: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c:1928: error: \u2018GIT_ENOTFOUND\u2019 undeclared (first use in this function)\npygit2.c: In function \u2018Index_len\u2019:\npygit2.c:1956: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c: At top level:\npygit2.c:1960: error: expected \u2018)\u2019 before \u2018_\u2019 token\npygit2.c: In function \u2018Index_getitem\u2019:\npygit2.c:1977: error: \u2018git_index_entry\u2019 undeclared (first use in this function)\npygit2.c:1977: error: \u2018index_entry\u2019 undeclared (first use in this function)\npygit2.c:1983: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c:1989: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018Index_setitem\u2019:\npygit2.c:2008: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c: In function \u2018Index_create_tree\u2019:\npygit2.c:2020: error: \u2018git_oid\u2019 undeclared (first use in this function)\npygit2.c:2020: error: expected \u2018;\u2019 before \u2018oid\u2019\npygit2.c:2023: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:2023: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c:2027: error: \u2018GIT_OID_RAWSZ\u2019 undeclared (first use in this function)\npygit2.c: In function \u2018IndexIter_iternext\u2019:\npygit2.c:2118: error: \u2018git_index_entry\u2019 undeclared (first use in this function)\npygit2.c:2118: error: \u2018index_entry\u2019 undeclared (first use in this function)\npygit2.c:2120: error: \u2018Index\u2019 has no member named \u2018index\u2019\npygit2.c:2125: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018IndexEntry_get_mode\u2019:\npygit2.c:2168: error: \u2018IndexEntry\u2019 has no member named \u2018entry\u2019\npygit2.c: In function \u2018IndexEntry_get_path\u2019:\npygit2.c:2174: error: \u2018IndexEntry\u2019 has no member named \u2018entry\u2019\npygit2.c:2174: error: \u2018IndexEntry\u2019 has no member named \u2018entry\u2019\npygit2.c: In function \u2018IndexEntry_get_oid\u2019:\npygit2.c:2180: error: \u2018IndexEntry\u2019 has no member named \u2018entry\u2019\npygit2.c:2180: error: \u2018GIT_OID_RAWSZ\u2019 undeclared (first use in this function)\npygit2.c: In function \u2018IndexEntry_get_hex\u2019:\npygit2.c:2186: error: \u2018IndexEntry\u2019 has no member named \u2018entry\u2019\npygit2.c:2186: warning: return makes pointer from integer without a cast\npygit2.c: In function \u2018Walker_dealloc\u2019:\npygit2.c:2241: error: \u2018Walker\u2019 has no member named \u2018walk\u2019\npygit2.c: In function \u2018Walker_hide\u2019:\npygit2.c:2250: error: \u2018git_oid\u2019 undeclared (first use in this function)\npygit2.c:2250: error: expected \u2018;\u2019 before \u2018oid\u2019\npygit2.c:2253: error: \u2018oid\u2019 undeclared (first use in this function)\npygit2.c:2253: error: too many arguments to function \u2018py_str_to_git_oid\u2019\npygit2.c:2254: error: \u2018GIT_OID_HEXSZ\u2019 undeclared (first use in this function)\npygit2.c:2258: error: \u2018Walker\u2019 has no member named \u2018walk\u2019\npygit2.c: In function \u2018Walker_push\u2019:\npygit2.c:2269: error: \u2018git_oid\u2019 undeclared (first use in this function)\npygit2.c:2269: error: expect\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2746746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2803977", "body": "The folder /usr/local/include does not exist on my MacOS installation, but I installed libgit2 using macports and I found out that the file git2.h exists in /opt/local/include/.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2803977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2803990", "body": "Just tried to change include_dirs = ['/usr/local/include'] to include_dirs = ['/usr/local/include', '/opt/local/include'] in setup.py.\n\nI now get the following output:\n\n------ SNIP ------\n\n$ python setup.py install\nrunning install\nrunning bdist_egg\nrunning egg_info\nwriting pygit2.egg-info/PKG-INFO\nwriting top-level names to pygit2.egg-info/top_level.txt\nwriting dependency_links to pygit2.egg-info/dependency_links.txt\nreading manifest file 'pygit2.egg-info/SOURCES.txt'\nwriting manifest file 'pygit2.egg-info/SOURCES.txt'\ninstalling library code to build/bdist.macosx-10.6-intel/egg\nrunning install_lib\nrunning build_ext\nbuilding 'pygit2' extension\ngcc-4.2 -fno-strict-aliasing -fno-common -dynamic -isysroot /Developer/SDKs/MacOSX10.6.sdk -arch i386 -arch x86_64 -g -O2 -DNDEBUG -g -O3 -I/usr/local/include -I/opt/local/include -I/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c pygit2.c -o build/temp.macosx-10.6-intel-2.7/pygit2.o\npygit2.c: In function \u2018py_signature_to_git_signature\u2019:\npygit2.c:631: warning: passing argument 1 of \u2018git_signature_new\u2019 from incompatible pointer type\npygit2.c:631: warning: passing argument 3 of \u2018git_signature_new\u2019 makes integer from pointer without a cast\npygit2.c:631: error: too many arguments to function \u2018git_signature_new\u2019\npygit2.c:631: warning: assignment makes integer from pointer without a cast\npygit2.c: In function \u2018Repository_create_commit\u2019:\npygit2.c:714: warning: passing argument 7 of \u2018git_commit_create\u2019 from incompatible pointer type\npygit2.c:714: warning: passing argument 8 of \u2018git_commit_create\u2019 makes integer from pointer without a cast\npygit2.c:714: warning: passing argument 9 of \u2018git_commit_create\u2019 makes pointer from integer without a cast\npygit2.c:714: error: too many arguments to function \u2018git_commit_create\u2019\npygit2.c: In function \u2018Commit_get_message_encoding\u2019:\npygit2.c:1143: warning: assignment makes pointer from integer without a cast\npygit2.c: In function \u2018Commit_get_message\u2019:\npygit2.c:1156: warning: assignment makes pointer from integer without a cast\npygit2.c: In function \u2018Commit_get_committer\u2019:\npygit2.c:1181: warning: assignment makes pointer from integer without a cast\npygit2.c: In function \u2018Commit_get_author\u2019:\npygit2.c:1194: warning: assignment makes pointer from integer without a cast\npygit2.c: In function \u2018moduleinit\u2019:\npygit2.c:2752: error: \u2018GIT_STATUS_CURRENT\u2019 undeclared (first use in this function)\npygit2.c:2752: error: (Each undeclared identifier is reported only once\npygit2.c:2752: error: for each function it appears in.)\npygit2.c:2755: error: \u2018GIT_STATUS_INDEX_NEW\u2019 undeclared (first use in this function)\npygit2.c:2757: error: \u2018GIT_STATUS_INDEX_MODIFIED\u2019 undeclared (first use in this function)\npygit2.c:2759: error: \u2018GIT_STATUS_INDEX_DELETED\u2019 undeclared (first use in this function)\npygit2.c:2762: error: \u2018GIT_STATUS_WT_NEW\u2019 undeclared (first use in this function)\npygit2.c:2764: error: \u2018GIT_STATUS_WT_MODIFIED\u2019 undeclared (first use in this function)\npygit2.c:2765: error: \u2018GIT_STATUS_WT_DELETED\u2019 undeclared (first use in this function)\npygit2.c:2768: error: \u2018GIT_STATUS_IGNORED\u2019 undeclared (first use in this function)\npygit2.c: In function \u2018py_signature_to_git_signature\u2019:\npygit2.c:631: warning: passing argument 1 of \u2018git_signature_new\u2019 from incompatible pointer type\npygit2.c:631: warning: passing argument 3 of \u2018git_signature_new\u2019 makes integer from pointer without a cast\npygit2.c:631: error: too many arguments to function \u2018git_signature_new\u2019\npygit2.c:631: warning: assignment makes integer from pointer without a cast\npygit2.c: In function \u2018Repository_create_commit\u2019:\npygit2.c:714: warning: passing argument 7 of \u2018git_commit_create\u2019 from incompatible pointer type\npygit2.c:714: warning: passing argument 8 of \u2018git_commit_create\u2019 makes integer from pointer without a cast\npygit2.c:714: warning: passing argument 9 of \u2018git_commit_create\u2019 makes pointer from integer without a cast\npygit2.c:714: error: too many arguments to function \u2018git_commit_create\u2019\npygit2.c: In function \u2018Commit_get_message_encoding\u2019:\npygit2.c:1143: warning: assignment makes pointer from integer without a cast\npygit2.c: In function \u2018Commit_get_message\u2019:\npygit2.c:1156: warning: assignment makes pointer from integer without a cast\npygit2.c: In function \u2018Commit_get_committer\u2019:\npygit2.c:1181: warning: assignment makes pointer from integer without a cast\npygit2.c: In function \u2018Commit_get_author\u2019:\npygit2.c:1194: warning: assignment makes pointer from integer without a cast\npygit2.c: In function \u2018moduleinit\u2019:\npygit2.c:2752: error: \u2018GIT_STATUS_CURRENT\u2019 undeclared (first use in this function)\npygit2.c:2752: error: (Each undeclared identifier is reported only once\npygit2.c:2752: error: for each function it appears in.)\npygit2.c:2755: error: \u2018GIT_STATUS_INDEX_NEW\u2019 undeclared (first use in this function)\npygit2.c:2757: error: \u2018GIT_STATUS_INDEX_MODIFIED\u2019 undeclared (first use in this function)\npygit2.c:2759: error: \u2018GIT_STATUS_INDEX_DELETED\u2019 undeclared (first use in this function)\npygit2.c:2762: error: \u2018GIT_STATUS_WT_NEW\u2019 undeclared (first use in this function)\npygit2.c:2764: error: \u2018GIT_STATUS_WT_MODIFIED\u2019 undeclared (first use in this function)\npygit2.c:2765: error: \u2018GIT_STATUS_WT_DELETED\u2019 undeclared (first use in this function)\npygit2.c:2768: error: \u2018GIT_STATUS_IGNORED\u2019 undeclared (first use in this function)\nlipo: can't figure out the architecture type of: /var/folders/sy/r8t7px154vs3rb9dfvt3hw1m0000gn/T//ccL8533v.out\nerror: command 'gcc-4.2' failed with exit status 1\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2803990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2809416", "body": "Thank you, jdavid. Using libgit2 from github fixed this problem for me.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/2809416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "DK-at-FC": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3655958", "body": "Great! Thanks David.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3655958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "nborwankar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3862782", "body": "David,\n\nThanks very much for your help - it works now with 0.16 and libgit2 HEAD.\nAlso making things worse was the muddle of Python versions on my Mac - did\na clean install of 2.7 and rebuilt everything.\n\nNitin\n\n---\n\nNitin Borwankar\nnborwankar@gmail.com\n\nOn Tue, Feb 7, 2012 at 10:42 AM, J. David Ibez <\nreply@reply.github.com\n\n> wrote:\n> \n> There has been a release of libgit2 and pygit2: v0.16.0, please try these.\n> \n> If you still get the problem, please specify the operating system,\n> compiler and version of Python you are using. And try importing pygit2 from\n> the interpreter:\n> \n> > > > import pygit2\n> \n> It will give a more informative traceback, post it here.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/libgit2/pygit2/issues/54#issuecomment-3853545\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/3862782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "lygstate": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4032505", "body": "- Yes,  (58b7ea7) is just broken. But without 58b7ea7, it's crashed under Windows when I running the unittest.\n  The revision (a1431d3) fixed of it.\n- The commit (f4538e5)  is make sense under Windows, because without this, the Repository and Index can't be GCed by python.\n  And will failed the unittest, please see issue #60\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4032505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4190148", "body": "Then, I understand.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4190148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4231865", "body": "@jdavid Please review this patch. It's a long time.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4231865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4284991", "body": "@jdavid I've update the source code to pass pyflakes.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4284991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4335716", "body": "Add C:/Program Files/libgit2/bin to the Python PATH is a option, but directly copy git2.dll into site-package will make sure pygit2 always have the right git2.dll, because under the system, may have multiple version of git2.dll. and sometimes we won't install libgit2 2 into C:/Program Files/libgit2/bin, because under Windows Vista and upper, users don't have  permission to install files to there(We need administrator permission). so add it to Python PATH will confusing us.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4335716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4368514", "body": "drops support for setuptools in an single patch,\nand ability to run the tests in another one?... \nI know why, it's just because msvc difference to mingw.\nwe can make libgit2.dll and git2.dll is the same thing with different name.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4368514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5005647", "body": "PATCH 1: drop support for setuptools, while keeping the ability to run the tests in place\nThis is impossible under win32. because lack of (lib)git2.dll, so the only thing I can do is commit in separate revision, and merge in a single merge sequence.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5005647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5007712", "body": "@jdavid \nI can be sure now, that\n`ERROR: test_read_tree (test.test_index.IndexTest)`\nis because the problem pygit2. there is circular references betweeen Repository and Index.\nso remove the reference, the problem is resolved. Please check it carefully!. You reject it before.\n\n```\nERROR: test_new_tag (test.test_tag.TagTest)\n```\n\nThe cause of test_new_tag still unknow.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5007712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "hanwen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4415967", "body": "isn't it simpler and more predictable to follow the C api?\n\n  entry = treebuilder.insert('name', 0100640, OBJ_ID)\n\nRight now, the python API has no way to create TreeEntries.\n\nI can make a patch for this if needed.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4415967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4463647", "body": "if you add insert, you'll get lifetime problems again; consider\n\n r = Repo()\n b = r.TreeBuilder()\n e = b.insert(...)\n b = None\n\nwho keeps the data in 'e' alive?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4463647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4497272", "body": "If you are extracting the tree entry, it's likely that you'll be accessing at least one and probably two fields of the entry.  Since accessing it involves a copy to a Python object, you might as well make it python objects to start with.  This is more efficient in case you do \n\n  if entry.filename != 'bla':\n     dosomething(entry.filename)\n\nsince this implies 2 copies from C to python if you leave the data wrapped.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4497272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4546595", "body": "On Fri, Mar 16, 2012 at 4:29 PM, J. David Ib\u00e1\u00f1ez\nreply@reply.github.com\nwrote:\n\n> I went through the code I have which uses pygit2, looking for real usage of tree entries. I only found one, it is a general case of `git_tree_get_subtree` : from a tree and a path returns an object (tree or blob), or `None`. This code only accesses `tenry.oid` (once), so making all three attributes into Python objects would not help. Though, this is not enough to make any decision.\n\nI don't think that is a very useful data point; since you can't create\ntrees from scratch, there won't be code that manipulates trees.\n\nFWIW,  I have code that walks trees in a few ways recursively.\n\n## \n\nHan-Wen Nienhuys - hanwen@xs4all.nl - http://www.xs4all.nl/~hanwen\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4546595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4555688", "body": "the code below looks suspect; does this work correctly if the owner is a tree builder? Is this method necessary? If you have the repo at hand, in python, you can just do \n\n repo[entry.hex]\n\nmaybe it's better to drop this method. Also stylistically, doing \n\n Repository\\* repo = bla->repo;\n\nis shorter and more robust (no program states with uninitialized memory).\n\nTreeEntry_to_object(TreeEntry *self)\n {\n     const git_oid *entry_oid;\n-    Repository *repo;\n-    repo = ((Object*)(self->owner))->repo;\n   entry_oid = git_tree_entry_id(self->entry);\n-    return lookup_object(self->repo, entry_oid, GIT_OBJ_ANY);\n-    return lookup_object(repo, entry_oid, GIT_OBJ_ANY);\n  }\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4555688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4556559", "body": "at the very least, you have to do a typecheck to make sure the cast is correct. However, I think it would be better to simply remove the method, as it brings no extra functionality.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4556559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4946509", "body": "ping\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4946509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5424906", "body": "valgrind now runs the tests cleanly.\n\nthanks.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5424906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5460566", "body": "On Wed, May 2, 2012 at 5:22 AM, J. David Ib\u00e1\u00f1ez\nreply@reply.github.com\nwrote:\n\n> Hello,\n> \n> Concerning the first commit, I wonder whether it would not be possible for `py_str_to_c_str` to keep returning a string it owns, and make the copy whenever necessary by the callers. This in order to save a copy when it is not necessary.\n\nYou'd have to return a PyObject and move the refcounting logic to all\nthe callers. Python internally stores strings as UCS16 (see\nhttp://docs.python.org/c-api/unicode.html#unicode-objects).  In order\nto return a utf-8 string it has to transcode the string, which\nrequires a temporary object (the 'value' object). This solution looked\nlike the least intrusive to me.\n\nI wouldn't worry about the copy; the conversion functions have to copy\naround C strings anyway, and we can revisit it if we see benchmarks\nthat show it to be a problem.\n\nFrankly, I don't see the point in all of the unicode handling, given\nthat git itself (\"the stupid content tracker\") works with raw byte\nsequences. It is making my code more complicated since I have to\nconvert to and from unicode for every hex string that enters and\nleaves pygit2.\n\n> What do you think ? Do you see any problem ?\n> \n> Thanks\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/libgit2/pygit2/pull/84#issuecomment-5456230\n\n## \n\nHan-Wen Nienhuys - hanwen@xs4all.nl - http://www.xs4all.nl/~hanwen\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5460566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5468747", "body": "A raw oid should always be 10 bytes, so distinguishing should be easy, but I'm fine with leaving as is.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5468747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5496923", "body": "thanks, David!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5496923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bos": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4486747", "body": "Actually, here's a decent workaround I found.\n\n``` c\ndiff --git a/pygit2.c b/pygit2.c\nindex c4744b4..60605b8 100644\n--- a/pygit2.c\n+++ b/pygit2.c\n@@ -49,8 +49,13 @@\n Py_LOCAL_INLINE(PyObject*)\n to_unicode(const char *value, const char *encoding, const char *errors)\n {\n-    if (encoding == NULL)\n+    if (encoding == NULL) {\n+        /* If the encoding isn't known, it may not be UTF-8, so it is\n+         * not safe to decode it strictly.  We see this in old\n+         * commits. */\n         encoding = \"utf-8\";\n+        errors = \"replace\";\n+    }\n     return PyUnicode_Decode(value, strlen(value), encoding, errors);\n }\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/4486747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "timtadh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5661377", "body": "fyi, started working on this in https://github.com/timtadh/pygit2/tree/better_docstrings\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5661377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5669962", "body": "Did a little research on this and I believe I found the the relevant (but undocumented for some reason) method. The method we want is [git_diff_tree_to_tree](https://github.com/libgit2/libgit2/blob/b72969e0643cb561b42aceec4d1a18ce9c782c09/src/diff.c#L608). Unfortunately, that method appears to be in the _development_ branch only and I do not believe the _master_ version of `pygit2` builds with `libgit2`'s development version. For a reference for how to utilize the various `git_diff*` methods see http://libgit2.github.com/libgit2/ex/HEAD/diff.html\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5669962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5826932", "body": "Excellent. When I need this (eg. when I get back to that part of my project) I will take a look at implementing in pygit2 instead of doing a hackjob.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5826932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5933308", "body": "Excellent! Thanks @cholin \n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5933308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cholin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5802382", "body": "hmm have you tested it with libgit2 v0.17 (ad5df35a47d56c3d716d7a56eac4aeb611987c11) ?\non my local machine every test passes (python2 and 3).\n\n```\nrunning test\nrunning build\nrunning build_ext\nbuilding 'pygit2' extension\ncreating build\ncreating build/temp.linux-x86_64-2.7\ngcc -pthread -fno-strict-aliasing -march=x86-64 -mtune=generic -O2 -pipe -fstack-protector --param=ssp-buffer-size=4 -D_FORTIFY_SOURCE=2 -DNDEBUG -march=x86-64 -mtune=generic -O2 -pipe -fstack-protector --param=ssp-buffer-size=4 -D_FORTIFY_SOURCE=2 -fPIC -I/usr/local/include -I/usr/include/python2.7 -c pygit2.c -o build/temp.linux-x86_64-2.7/pygit2.o\ncreating build/lib.linux-x86_64-2.7\ngcc -pthread -shared -Wl,-O1,--sort-common,--as-needed,-z,relro,--hash-style=gnu build/temp.linux-x86_64-2.7/pygit2.o -L/usr/local/lib -L/usr/lib -lgit2 -lpython2.7 -o build/lib.linux-x86_64-2.7/pygit2.so\n..................................................................\n----------------------------------------------------------------------\nRan 66 tests in 0.257s\n\nOK\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5802382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5802481", "body": "With 7d396fc02fec3065ffed16103de56bab2f13315e you should now be able to build against libgit2's development version. Nevertheless `git_diff_tree_to_tree` should now be in the master  branch of libgit2.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5802481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5926146", "body": "As you might have noticed, Rugged has removed their implementation for custom backends. It seems to be super slow due context switches. If you want to use a custom backend you should do it in libgit2 (see https://github.com/libgit2/libgit2-backends)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5926146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5929158", "body": "I break the refactoring and the proposed function up, so we can have separate pull requests.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5929158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5933996", "body": "I have to mention that I always forgot the gpl copyright statement in every .h/.c file\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5933996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5984163", "body": "Hmm it seems we have a missing push here. To trigger our first build we need a push to the repository (http://about.travis-ci.org/docs/user/getting-started/ - Step four). I thought the merge will do it... but I'm no expert with travis.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5984163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5984813", "body": "Seems to work now: http://travis-ci.org/#!/libgit2/pygit2\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5984813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6014784", "body": "Well I would prefer if you don't have to use `repo[ref.oid]` anymore. So a `to_object()` for References could be an alternative (like in TreeEntry). But therefor you would need a Repository instance in References... :/\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6014784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6035715", "body": "You are right. I think you should create a pull request for that.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6035715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6151581", "body": "If 2.6 is supported it should be enabled in `.travis.yml`. So the build bot is trying 2.6 as well...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6151581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6761730", "body": "I thought about that some weeks ago... The problem here is the new _foreach function in libgit2. To get notes you have to provide a callback, which then gets called for each note.\nIn python instead you want to iterate (with an generator) over notes. That could easily be done with an index and a get function. But with this new _foreach approach the binding could only provide callbacks or fetch all notes and return them as a list.\nI think both approaches are not the right way to do it... but perhaps I'm missing something here.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6761730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6790158", "body": "pygit2 should be python3 compatible without any 2to3 scripts.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6790158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6801482", "body": "Everythink works fine on my machine and as well on the testing ones ( http://travis-ci.org/#!/libgit2/pygit2 ). I think the problem here is a unicode issue. Default encoding for `open()` is platform-dependent. So maybe your default encoding is not utf-8 and then it will mess everythink up.\nYou could try to change your local encoding to utf8 or change the line 132 in `setup.py` to the following:\n\n```\nwith open('README.rst', 'r', encoding='utf8') as readme:\n    long_description = readme.read()\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6801482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/3247623", "body": "In pygit2 we convert the `context_line` to unicode (for python2/3 compability reasons). So if you use these constants for comparison it will fail. I think '+','-',' ' and '\\n' are more than enough meaningful. Btw pygit2 has support for `context_lines` with `#77b5cdc` (not yet merged to master).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3247623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873195", "body": "Well unicode and python is a bit messy. But PyArg_ParseTuple with `s` as argument will convert Strings and Unicode Strings to a c string pointer. So we can use PyArg_ParseTuple and do not loose any functionalities... Check the api: [python2.7](http://docs.python.org/2.7/c-api/arg.html) and [python3](http://docs.python.org/2.7/c-api/arg.html)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4189703", "body": "I do not think you should use the latest version of pygit2 in your application. Right now the api isn't stable. We try to avoid these changes but better now than after a 1.0 release (which could be in near future). If you depend on a recent change, well then you have no other choice...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4189703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "basus": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5859040", "body": "I was on develop for libgit2 initially, but this error remains when I switched to master on both or even tag v.0.17.0 for both.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5859040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5910461", "body": "Hmmm.... everything seems to be working now. I'm not sure what the problem was. Perhaps Pygit wasn't seeing the libgit2 library for some reason.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/5910461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pistacchio": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6037223", "body": "done :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6037223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "nkhine": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6045960", "body": "ok i updated libgit2 and it works.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6045960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cboos": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6151706", "body": "Well, the toplevel README.rst at least says so: \"_The supported versions of Python are 2.6, 2.7, 3.1 and 3.2_\".\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6151706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/2952808", "body": "I suppose this is a typo... \"GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH\"\ns/MATC/MATCH/\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2952808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "miri64": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6198762", "body": "Hi,\nthanks for the comments. I'll fix the issues and make a new request later.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6198762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6221111", "body": "Help me out please: what is valgrind and what errors does it show?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6221111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6355063", "body": "Sorry -.- #109 fixes it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6355063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "sigmavirus24": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6221474", "body": "valgrind sets a buffer around memory that is allocated and keeps track of both allocation and freeing of that memory. It's incredibly useful for tracking and debugging memory leaks which occur when you do not free something that you allocated.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6221474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "poke": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6573996", "body": "Yes, that\u2019s exactly what I did, except that I adjusted it for VS2010.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/6573996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bendavis78": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7158105", "body": "It appears this is an issue with the version of pygit2 in the python package index.  The file include directory is missing from that package.\n\nFor what it's worth, I was able to get it to install in my virtualenv using the \"editable\" argument with the github repo, as follows:\n\n```\npip install -e git://github.com/libgit2/pygit2.git#egg=pygit2\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7158105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7476595", "body": "Note: I ran the tests on master, and it failed on the same test.  \n\n```\nFAIL: test_foreach (test.test_config.ConfigTest)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/ben/.local/src/pygit2/test/test_config.py\", line 168, in test_foreach\n    self.assertTrue('core.bare' in lst)\nAssertionError: False is not true\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7476595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "travisbot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7476533", "body": "This pull request [fails](http://travis-ci.org/libgit2/pygit2/builds/2025917) (merged 398e717e into 0821e7bf).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7476533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7527505", "body": "This pull request [passes](http://travis-ci.org/libgit2/pygit2/builds/2048801) (merged 578054b9 into 0821e7bf).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7527505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7528027", "body": "This pull request [passes](http://travis-ci.org/libgit2/pygit2/builds/2048952) (merged f94fe006 into 0821e7bf).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7528027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7670418", "body": "This pull request [fails](http://travis-ci.org/libgit2/pygit2/builds/2096835) (merged 689412d0 into 0821e7bf).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7670418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7764671", "body": "This pull request [fails](http://travis-ci.org/libgit2/pygit2/builds/2133238) (merged 1d81fd91 into 211e7123).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7764671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7764693", "body": "This pull request [fails](http://travis-ci.org/libgit2/pygit2/builds/2133243) (merged 1d81fd91 into 211e7123).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7764693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7764952", "body": "This pull request [passes](http://travis-ci.org/libgit2/pygit2/builds/2133356) (merged f3dab280 into 211e7123).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7764952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7765783", "body": "This pull request [passes](http://travis-ci.org/libgit2/pygit2/builds/2133649) (merged 6e068637 into 211e7123).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7765783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7873778", "body": "This pull request [fails](http://travis-ci.org/libgit2/pygit2/builds/2178390) (merged f60b8a35 into 6e068637).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7873778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7874749", "body": "This pull request [fails](http://travis-ci.org/libgit2/pygit2/builds/2178395) (merged f60b8a35 into 6e068637).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7874749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7967189", "body": "This pull request [passes](http://travis-ci.org/libgit2/pygit2/builds/2211884) (merged 7e3b21ba into 6e068637).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7967189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7967208", "body": "This pull request [passes](http://travis-ci.org/libgit2/pygit2/builds/2211889) (merged 7e3b21ba into 6e068637).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7967208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7997077", "body": "This pull request [passes](http://travis-ci.org/libgit2/pygit2/builds/2223827) (merged 1a2dd955 into 6e068637).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/7997077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/8029924", "body": "This pull request [passes](http://travis-ci.org/libgit2/pygit2/builds/2239508) (merged fb499906 into 6e068637).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/8029924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/8029927", "body": "This pull request [passes](http://travis-ci.org/libgit2/pygit2/builds/2239513) (merged fb499906 into 6e068637).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/8029927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/8283410", "body": "This pull request [passes](http://travis-ci.org/libgit2/pygit2/builds/2338398) (merged 32ff474d into dc1cfe80).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/8283410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/8283426", "body": "This pull request [passes](http://travis-ci.org/libgit2/pygit2/builds/2338403) (merged 32ff474d into dc1cfe80).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/8283426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "wking": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/8531236", "body": "I've added another commit to do the direct extraction, because `setup.py` is used to build `_pygit2`, so new users will need a working `setup.py` before they've built `_pygit2`.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/8531236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464834", "body": "On Sat, Jan 19, 2013 at 09:30:54AM -0800, Richo Healey wrote:\n\n> Having to have \"install libgit2 from their development head\" in the\n> install instructions for my project is pretty awkward.\n\nThis should all settle down once libgit2 freezes their API (soon?\nlibgit2/libgit2#1028).  In the mean time, there are usually known-good\nlibgit2 SHAs in the pygit2 upgrade commits.  The problem with _not_\ntracking the development branch of libgit2 is that their master branch\nhasn't been bumped since 2012-05-19, so lots of features are missing\nfrom the master branch.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "valueof": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/621226", "body": "May I ask what was the reasoning behind this change? I have to update all my code and tests now. :-(\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/621226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/626333", "body": "Alright, understood. Without any other alternatives, we basically have no choice but to rely on alpha software\u2014so no worries about that, I realize that interfaces do change. I was just curious about the reasoning.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/626333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "luztak": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/1421091", "body": "Is there any func or class for push,please?Or could you tell me how push works?thx.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/1421091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "richo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/2427309", "body": "Typo in commit message, should be pygit2.com\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2427309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464644", "body": "Is there a list where this is tracked? I spent about an hour trying to fix the broken linker on an old machine I was getting unresolved symbol errors on due to this one.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464823", "body": "I agree completely. Having to have \"install libgit2 from their development head\" in the install instructions for my project is pretty awkward.\n\nIn this instance it was my fault for not diagnosing properly, I'll keep this in mind going forward. Cheers.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Gonnzik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/2548382", "body": "\u0421 \u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u0431\u043b\u044f (\u041a\u0430\u0440\u0430\u0441\u044c)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2548382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "alexband": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/3232373", "body": "why `GIT_DIFF_LINE_CONTEXT` has been removed ?\n\nin version 0.18.0 \nI can do\n\n`from pygit2 import GIT_DIFF_LINE_CONTEXT`\n\nbut now I can't , why?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3232373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3232412", "body": "btw, I thought this parameter is used to control how many context line I would show in diff, like `git diff -U`, is this correct, how can I \nuse it properly?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3232412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/4840766", "body": "hi @carlosmn is `git_diff_list` depreciated in libgit2\uff0c we here has a kind of fork of `pygi2` with some modification. The fork hasn't sync with the main repo for a while, and now there are some conflicts with `git_diff_list`, I found your commit to adjust to libgit2, is there any explanation or documentation about the `git_diff_list` thing, either in libgit2 or pygit2. Thanks in advance.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/4840766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/4841360", "body": "seems that it's just rename https://github.com/libgit2/libgit2/commit/3ff1d123736e5686fb9ec16e65828d5b8ffa2b30\n\nso I can just rename it , cool\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/4841360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873081", "body": "sorry, I do not familiar with C. \nThe old code seems like try to compatible with either unicode and bytes. So if use \"ssi\", we can accept them both or does this require specific python version?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873248", "body": "Thanks. Then it's much clear now.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4185132", "body": "@cholin hi, I think here exist a problem, that, for `git_diff_patch_get_line_in_hunk`, this get a line detail for every line, but only the last one of 'origin' get reserved in hunk.origin.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4185132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4188006", "body": "this will break application code. and I change my code to receive int to char now. if this can be noticed in advance pull from master.\nby the way, do you guys recommend we application developer always use the latest code of pygit2?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4188006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "arrbee": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/3236676", "body": "These constants are used when looking at text lines in a diff to indicate if the line is a context line (or and added line or a removed line). The set the number of context lines, you need to set the `context_lines` value in the `git_diff_options`. It appears to me that that field of the options is not current exposed through pygit2.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3236676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3249463", "body": "@cholin Just a heads up, in recent libgit2 updates to the `development` branch, I had to introduce a new constant `GIT_DIFF_LINE_CONTEXT_EOFNL` that deals with the case where both sides of a diff end without an newline and those lines appear in the context at the end of the diff. When I added this new constant, I changed the values for the `...EOFNL` constants so that we're no longer using `'\\n'` as a value (since I worried it was confusing). The new values are `'>'` is ADD_EOFNL, `'<'` is DEL_EOFNL, and `'='` is CONTEXT_EOFNL.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3249463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "luchuan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/3980324", "body": ":beer:\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3980324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "guysoft": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/7623816", "body": "Hey,\nWhy was the MergeResult object object removed? How do I get now the oid of the merged result? It does not seem to appear in the working directory for me.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/7623816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "luto": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/10577684", "body": "thank you :heart: \n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/10577684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "xtao": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9064396", "body": "I'll fix this.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9064396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9171021", "body": "More than one space.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9171021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ArnoVanLumig": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15393170", "body": "Thanks!\n\nI actually figured that out myself but forgot to commit and push it... Thanks for the heads-up!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15393170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mduggan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16349362", "body": "Ah, I was doing it in a little bit of a weird order.. I wanted to create the \"default\" callbacks first so that any error could raise before the custom callbacks had been set.. but fair point about the version number being set differently on the two lines.. if it changes in one place it will need to change in both,\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16349362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ashb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/18081136", "body": "We thought about this and weren't sure which way to go. The only thing useful we could detect is `tuple[1:]` are all None. We went with this way as this is what the Ruby libgit2 bindings do.\n\nHappy to change this to trigger off pubkey & privkey being None instead if you'd prefer.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/18081136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/18489221", "body": "So something like this diff then?\n\n``` diff\n@@ -455,9 +456,13 @@ def get_credentials(fn, url, username, allowed):\n\n     elif cred_type == C.GIT_CREDTYPE_SSH_KEY:\n        name, pubkey, privkey, passphrase = creds.credential_tuple\n-        err = C.git_cred_ssh_key_new(ccred, to_bytes(name), to_bytes(pubkey),\n-                                     to_bytes(privkey), to_bytes(passphrase))\n-\n+        if pubkey is None and privkey is None:\n+            err = C.git_cred_ssh_key_from_agent(ccred, to_bytes(name))\n+        else:\n+            err = C.git_cred_ssh_key_new(ccred, to_bytes(name),\n+                                         to_bytes(pubkey), to_bytes(privkey),\n+                                         to_bytes(passphrase))\n     else:\n         raise TypeError(\"unsupported credential type\")\n\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/18489221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/18507685", "body": "I've made this change now.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/18507685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "garious": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/22260630", "body": "Good catch!  Fixed.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/22260630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}