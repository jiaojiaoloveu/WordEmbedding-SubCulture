{"_default": {"1": {"medranocalvo": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4496", "title": "`git_mempack_new`, `git_mempack_reset`, `git_mempack_dump` are not exported ", "body": "The functions `git_mempack_new`, `git_mempack_reset`, `git_mempack_dump` are not exported  in the shared library.\r\n\r\n### Reproduction steps\r\n\r\n### Expected behavior\r\n\r\n### Actual behavior\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n\r\n### Operating system(s) tested\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4495", "title": "Documentation for `git_mempack_dump` missing", "body": "Documentation for function `git_mempack_dump` is missing from https://libgit2.github.com/libgit2/#HEAD/group/mempack.\r\n\r\n### Reproduction steps\r\n\r\n### Expected behavior\r\n\r\n### Actual behavior\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n0.26.0\r\n### Operating system(s) tested\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4494", "title": "git_odb_write_pack should not require the ODB to understand pack files", "body": "The documentation for `git_odb_write_pack` claims that:\r\n\r\n> If the ODB layer does not understand pack files, the objects will be stored in whatever format the ODB layer uses.\r\n\r\nThat is not currently the case: if no ODB backend implements the `writepack` method, the following error comes up upon e.g. `fetch`:\r\n\r\n~~~\r\ncannot write pack - unsupported in the loaded odb backends (code 9)\r\n~~~\r\n\r\nAlthough a generic way of implementing support for packfiles in ODBs is described in ticket #3098, having `git_odb_write_pack` dissasemble the packfiles for the ODBs (perhaps using the method above) would reduce burden and errors when implementing custom ODB backends.\r\n\r\nNote that default backends `odb_loose` and `odb_mempack` don't support `writepack`.\r\n\r\n### Reproduction steps\r\n### Expected behavior\r\n\r\n`git_odb_write_pack` disassembles the packfiles into objects and passes those to the ODB backends when no ODB backend supports packfiles.\r\n\r\n### Actual behavior\r\n\r\nAbort with error `cannot write pack - unsupported in the loaded odb backends (code 9)`.\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n0.26.0\r\n### Operating system(s) tested", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4492", "title": "`git2/sys/mempack.h` fails to include `git2/buffer.h`", "body": "Header file `git2/sys/mempack.h` should include `git2/buffer.h`:\r\n~~~\r\n/usr/local/include/git2/sys/mempack.h:67:22: error: unknown type name 'git_buf'\r\n~~~\r\n\r\n### Reproduction steps\r\n\r\n### Expected behavior\r\n\r\n### Actual behavior\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n0.26.0\r\n\r\n### Operating system(s) tested\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4482", "title": "Incorrect git_push_options's pb_parallelism documentation", "body": "The `pb_parallelism` field of the `git_push_options` structure is documented to default to 1 (meaning no parallelism), but it is actually initialized to 0 by default (meaning auto-detected parallelism).\r\n\r\n>  If the transport being used to push to the remote requires the creation of a pack file, this controls the number of worker threads used by the packbuilder when creating that pack file to be sent to the remote. If set to 0, the packbuilder will auto-detect the number of threads to create. **The default value is 1**.\r\n\r\n~~~\r\n#define GIT_PUSH_OPTIONS_INIT { GIT_PUSH_OPTIONS_VERSION, 0, GIT_REMOTE_CALLBACKS_INIT, GIT_PROXY_OPTIONS_INIT }\r\n~~~\r\n\r\nPlease, correct the documentation or the initial value.  In my case, the automatic parallelism was unexpected.\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n0.26.0\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4497", "title": "odb: export mempack backend", "body": "Fixes #4492, #4496 .", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fcharlie": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4493", "title": "After run setuid, Maybe cannot open $HOME/.gitconfig ", "body": "After a base libgit2 program run setuid change user root to other user, The program maybe cannot open the global `.gitconfig` that matches its own permissions.\r\n\r\nBecause run `setuid`, not change `environ`.\r\n \r\nhttps://github.com/libgit2/libgit2/blob/1560b5808e71af170d3a0c09f35cab7e973df5a5/src/sysdir.c#L42\r\n\r\nSee current user `HOME`, Please use:\r\n```\r\ngetpwuid_r\r\n```", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4463", "title": "Now vcpkg support build and install libgit2", "body": "https://github.com/Microsoft/vcpkg/tree/master/ports/libgit2", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Nukesor": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4480", "title": "Unnecessary syscalls on bare repository", "body": "### Reproduction steps\r\nDiff any two commits on bare repository and observe behaviour with strace.\r\n\r\n### Expected behavior\r\nDon't query stat for files on a bare repository.\r\n\r\n### Actual behavior\r\nStat checked for every file in diff, if it's a bare repository.\r\n\r\n### Version of libgit2 (release number or SHA1)\r\nMaster 782402c271d5467f9890af8e808af938a93bc55f\r\n\r\n### Operating system(s) tested\r\nArch Linux\r\n\r\nI just tried diffing with the current `master` libgit2 build. While the other bug with unnecessary syscalls for `.gitattributes` and `attributes` was fixed, there are still some `stat` calls for files, which shouldn't be necessary on a bare repository.\r\n\r\nI'm using pygit2 for my interaction with git repositories, but as far as I can see, this is actually a issue with libgit2.\r\n\r\nCurrent  output:\r\n```\r\n[pid 15375] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"/tmp/gitalizer/phoemur/slackbuilds-1/info/attributes\", 0x7ffe5758e5f0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/README\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.SlackBuild\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.SlackBuild\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.info\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.info\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/slack-desc\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/slack-desc\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/README\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/README\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.SlackBuild\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.SlackBuild\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.info\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.info\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/slack-desc\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/slack-desc\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n```\r\n\r\npygit2 issue:\r\nhttps://github.com/libgit2/pygit2/issues/764", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tyrielv": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4479", "title": "Recursive merge uses parents of virtual commits instead of virtual commit itself when finding merge base", "body": "Recursive merge passes the parents of a virtual commit to git_merge_bases_many in place of the virtual commit. This produces a different result in some cases than git.exe.\r\n\r\n### Reproduction steps\r\nSee attached repo [bases.zip](https://github.com/libgit2/libgit2/files/1640783/bases.zip)\r\nCall git_merge_commits(), passing the commits for branchJ-1 and branchJ-2.\r\n\r\n### Expected behavior\r\nOne conflict, in version.txt\r\n\r\n### Actual behavior\r\nTwo conflicts, one in version.txt and one in targetfile.txt\r\n\r\n### Version of libgit2 (release number or SHA1)\r\nv0.26.0\r\n\r\n### Operating system(s) tested\r\nWindows 10\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4498", "title": "Pass virtual commits as first param", "body": "Reversing the order of the bases after merge_base_many returns is insufficient for the issue I opened.\r\n\r\nThis PR includes a modified test case that still exposes the issue after your other changes, and proposed fix of reversing the order that commits are passed to merge_base_many.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Phrohdoh": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4473", "title": "Request: Please consider publishing to conan.io", "body": "Hello, libgit2 team / community / maintainers!\r\n\r\n_Note: I am not affiliated with conan.io or JFrog in any way._\r\n\r\nI am not a C developer by any means (I'm quite positive I would lose all of my limbs in a matter of minutes with C) which goes to show that I am also quite clueless regarding dependency management but from what I understand C (and C++) mostly consist of copying headers and implementation files of dependencies in-tree.\r\n\r\nGiven the above it is quite difficult, in my limited experience, to stay up to date (or even track which version of a library you are using).\r\n\r\nIt is my belief that more projects and developers (myself included of course) could benefit from the work put into libgit2 if it were easier to depend on in a trackable way.\r\n\r\nThis is where my request for you all (and if you decide to and I can help please let me know how!) to consider publishing libgit2 releases to [conan.io](https://conan.io/index.html) which markets itself as \"Conan, the C / C++ Package Manager for Developers.\"\r\n\r\n[`conan`](http://docs.conan.io/en/latest/getting_started.html) use is driven by the [`conanfile.txt`](http://docs.conan.io/en/latest/reference/conanfile_txt.html) which allows downstream projects to declare dependencies which the conan tool will resolve and build as specified in the manifest.\r\n\r\nIf the overhead of management and setup of publishing to conan.io outweighs the benefits then please note so and close this.\r\n\r\nThank you for your time!\r\n\r\n**Edit**: Corrected a link.", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rankr": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4469", "title": "Test failures", "body": "### Reproduction steps\r\nRun tests in bulid directory, with command \"ctest -V\"\r\n### Expected behavior\r\nno test fail\r\n### Actual behavior\r\nThe following tests FAILED:\r\n\t  1 - libgit2_clar (Failed)\r\nsome details:\r\n1:   2) Failure:\r\n1: diff::binary::delta [/Users/file4/libgit2-0.26.0/tests/diff/binary.c:53]\r\n1:   String mismatch: expected != actual.ptr\r\n### Version of libgit2 (release number or SHA1)\r\nlibgit2-0.26.0\r\n### Operating system(s) tested\r\nmacOS 10.13.2 (17C88)\r\n###some more info:\r\ncmake version 3.10.1\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "carlosmn": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4465", "title": "Release v0.27.0 & v0.26.1", "body": "We're at that time again where we want to make a new release.\r\n\r\nFor the v0.27 series, codenamed \"Stadtrandsiedlung\"\r\n\r\n- [ ] Bump the versions in the headers\r\n- [ ] Make a release candidate\r\n- [ ] Plug any final leaks\r\n- [ ] Fix any last-minute issues\r\n- [ ] Make sure CHANGELOG reflects everything worth discussing\r\n- [ ] Update the version in CHANGELOG and the header\r\n- [ ] Produce a release candidate\r\n- [ ] Tag\r\n- [ ] Create maint/v0.27\r\n- [ ] Update any bindings the core team works with\r\n\r\nFor v0.26.1\r\n\r\n- [ ] Select the changes we want to backport\r\n- [ ] Update maint/v0.26\r\n- [ ] Tag", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4207", "title": "We should get rid of CURL and use our onw HTTP CONNECT proxy implementation", "body": "The only use of libcurl that we have is for it to connect to proxies via the `CONNECT` method, which then simply proxies our data stream unaltered to the final location.\r\n\r\nIt however adds complexity in the build process and a dependency we're barely using. It introduces a different way of talking to remote machines and its own way of representing X.509 certificates which mean we can't convert them into native objects in higher-level languages.\r\n\r\nSince we need to have our own HTTP stack anyway, it sounds like a worthwhile trade-off to implement our own `CONNECT` client so we don't depend on curl being available both on the build and target machines.\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4207/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3845", "title": "Fetching fails on VirtualBox shared filesystems", "body": "There's a couple of reports for bindings or consumers, so let's bring it together in this tracker.\n\nlibgit2/git2go#194 has some details, as does rust-lang/cargo#2808\n\nIt looks like VirtualBox's shared filesystem performs some conversion between the posixy semantics it pretends to have and the ones it uses for the real Windows filesystem it has below. This is particularly annoying for a couple of reasons. First, creating files with holes works just fine on Windows itself, and secondly the reason we're doing the weird mmap dance instead of just calling `write()` is to work around Windows networked filesystem issues.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3682", "title": "Consider limiting the TLS ciphers we use by default", "body": "OpenSSL is not particularly proactive in changing the defaults, and it's probably too much to expect each user of the library to worry about this when it generally starts from a PoC which gains features.\n\nSo let's set our own list of safe ciphers to use. Because TLS is terrible in general, we should also provide an escape hatch and provide a `git_libgit2_opts()` way of the user letting us know not to do it.\n\nUnless someone comes up with a better list, we'll probably go with https://github.com/ruby/ruby/blob/trunk/ext/openssl/lib/openssl/ssl.rb#L22 but exclude RC4 (because lol).\n- [x] Do this for OpenSSL\n- [ ] Do this for SecureTransport\n- [ ] Do this for WinHTTP\n- [ ] Do this for libcurl (when connecting to HTTPS proxies)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3440", "title": "The certificate callback should support pass-through", "body": "This callback wants a response from the callback; if we have none to give (we're wrapping the callbacks in some language, so we always end up setting the fields) we should be able to tell libgit2 not to take our answer into account.\n\nReturning `GIT_PASSTHROUGH` should make the callers of the callback behave as though it was not there, like they do with the credentials callback.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3431", "title": "Push should bypass no-op ref updates", "body": "When we're asked to update a reference, we should bypass the update if the server has advertised that the reference is at the point where we want it to be. A client with e.g. an outdated remote-tracking branch might try to perform a push without realising that it's already at the commit it intends to push.\n\nNothing should be fundamentally broken if we don't bypass it (as we're not actually changing anything) but hooks might be called which could trigger unnecessary rebuilds, wasting time etc.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3364", "title": "Push code should use the packbuilder's insert_walk()", "body": "This code knows how to deal with inserting the necessary objects described by a walk. This function was originally written for this, but only ended up getting hooked into local clone.\n\nUsing this function allows us to remove a fair amount of logic from the push code and should also result in a speedup.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3361", "title": "Loosen refspec matching rules", "body": "Git has recently changed the refspec matching rules to allow refspecs such as\n\n```\nrefs/heads/o*:refs/remotes/heads/i*\n```\n\nWe still perform checks using the old rules by which the glob must always match a full path element.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3334", "title": "An unified approach to cancellation", "body": "Cancellation is important in long-running operations, which include network operations and checkout. These also involve multiple steps (particularly the network parts) so the cancellation needs to be expressed though all the layers. We currently have `git_remote_stop()` which gets looked at whenever the network code is parsing the data, but we don't make sure that we can respond in a reasonable time-frame. This also doesn't include the packing process during push.\n\nWithout cancellation, you must either wait for these operations to end or you must kill the thread or process. This can leave locks around and can stop system resources from getting released. So this is something we really should have.\n\nSince this cancellation operation needs to cross some barriers, we would need this to be part of the options given to functions as a heap-allocated object, rather than an embedded struct in the options. Maybe something like\n\n``` C\n/**\n * Allocate a new cancellation token\n */\nint git_cancellation_new(git_cancellation **out);\n\n/*\n * Trigger a cancellation\n */\nint git_cancellation_cancel(git_cancellation *token);\n\n/*\n * Returns whether cancellation was requested.\n *\n * This would be a private function.\n */\nbool git_cancellation_requested(git_cancellation *token);\n\n/*\n * Free a cancellation token.\n */\nint git_cancellation_free(git_cancellation *token);\n```\n\nMany of the options structs would get a `git_cancellation *cancel_token` field, which the user allocates and assigns if they want to be able to cancel an operation. If a long-running function takes such a token, it must also pass its cancellation token to other long-running functions it calls.\n\nThis is modelled after .NET's `CancellationToken` which seems like a reasonable API. We do have a single object for both the caller and the calle to check rather than the two-object approach from .NET, but that shouldn't represent an issue for our use-case.\n\n/cc @jamill @ethomson \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3300", "title": "Diff should provide more details why it thinks a file has changed", "body": "We currently lack one optimisation in our racy-git detection. git won't smudge the entry's size if we are able to detect a change due to the stat information being different. E.g. if the mode has changed (in a mode-respecting filesystem) then it won't because we'll be able to detect it as a change later on, so there's no need to do anything.\n\nWe don't implement this update as our diff does not expose this information to the user. When we go over the diff entries we have to assume we wouldn't be able to detect the difference. If it exposed which bits made it consider it a different file, we could take advantage of them to decide not to smudge in some cases.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3218", "title": "Clone's branch option should take a ref or DWIM it", "body": "When git says you can use the `--branch` option to specify which branch you'd like for it to checkout, what it means to say is that it will DWIM whatever you gave it and do whatever based on that.\n\nWe took it at its word and implemented that option for branches. So we should either take in an arbitrary ref and then do the right thing depending on whether it's a branch or tag, or go more the git route and accept whatever and figure out what it is.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3058", "title": "Support for shallow repositories", "body": "git can write a file `.git/shallow` to indicate that the history is cut off at particular commits. We currently do not read this at all and thus libgit2 will regularly fail to work on these repositories with error messages about failing to find objects.\n\nThe typicall way such a repository is created is by the use of `git clone --depth N`. We do not support this option to clone either, as we do not support the depth negotiation in the protocol.\n\nIn order to provide support we would have to make sure to check against the list in `.git/shallow` whether we're at the end of the history we should expect to be at, and then not try to walk further back or ignore errors when looking up parents.\n\nThere are a couple of issues which ask questions about this, I will close them and redirect them here to have a cleaner position from which to start.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3058/reactions", "total_count": 25, "+1": 25, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3041", "title": "Provide log functionality wrapping the revwalk", "body": "The revwalk code provides a way to specify a range of commits to work with but little else (it does do first-parent walks as that was relatively easy to put into the code).\n\nUsers want to perform more complex operations, similarly to how git-log provides features on top of git-rev-list. We want to provide them, but we also don't want the revwalk code to become unwieldy. Thus some code which leverages the revwalk to provide the range of commits but does simplification or filtering on top sounds like a good way to do both of these.\n\nSome of the feature this `git_log` (or similar) namespace/object would provide would be:\n- [ ] Limit revisions (pass-through to revwalk)\n- [ ] First-parent walk (pass-through to revwalk)\n- [ ] Limit the number of returned commits\n- [ ] Allow filtering by path(s) touched by the commits\n- [ ] Something akin to `--cherry-pick`\n\nA combination of limiting the number of returned commits and filtering by path would allow a caller to ask for the last commit (in whatever sorting) to touch a particular path.\n\nI will be closing some of the issues which deal with specific aspects of this and redirect them here.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3041/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3036", "title": "Attaching extra information to error messages", "body": "Our error reporting mechanism is currently fairly simplistic. We return an error code and store an error message and a class. It is sometimes advantageous to add more detailed information about the error which some consumers can make use of. An example would be the HTTP status which the server returned instead of making the caller code parse it out of the error string. One way to do this would be to add a pointer in the struct we return from `giterr_last()` to read this information and provide a function like\n\n``` C\nint giterr_attach(git_error_info *info);\n```\n\nby which the caller (in libgit2 or external) can attach extra information to the current/last error message. Alternatively,\n\n``` C\nint giterr_set_extra(int error_class git_error_info *info, const char *fmt, ...);\n```\n\nto do both at the same would should also work. A `giterr_clear()` would also free this structure. The structure itself would be something like\n\n``` C\ntypedef struct {\n    git_error_info_t type;\n    char *custom_type;\n    void free(git_error_info *);\n} git_error_info;\n```\n\nwhich you can subclass in the usual C way. The string is there in case a custom backend wants to provide more detailed information; it can set type to a value such as `GIT_ERROR_INFO_CUSTOM` and it can provide a string to identify which type of custom error it has stored.\n\nThere's at least one place where we want to duplicate or store the error state locally to re-set it again (in clone, so the clean up doesn't mess with the clone error) so we need to make sure we don't double-free it, so we'd either want to refcount it or have it provide a `dup` field as well.\n\n/cc @jamill \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2902", "title": "Locking references and reflogs", "body": "Here follows an IRC conversation with @mhagger about what we should actually lock when dealing with symrefs and reflogs. The important bit are the last half dozen lines.\n\n```\n15:59:47 <mhagger> I have a question about how libgit2 does locking for reflogs, because I found what I think is a bug in how git does it.\n16:01:02 <mhagger> Suppose HEAD is a symbolic ref pointing at refs/heads/master...\n16:01:32 <mhagger> Currently, if git wants to add an entry to HEAD's reflog, it doesn't hold HEAD.lock but rather refs/heads/master.lock.\n16:02:07 <mhagger> I think that is wrong and I would like to fix it. But first I want to find out what libgit2 does in this situation so that we don't introduce an incompatibility.\n16:02:33 <mhagger> Can anybody tell me how libgit2 would handle this?\n16:07:20 <cmn> hm, when we write to the reflog we take a lock on the ref, but I don't quite recall what happens for HEAD if we update the current branch\n16:10:21 <cmn> yep, looks like we just append to HEAD's reflog\n16:10:26 <mhagger> cmn: It seems to be done in maybe_append_head() in refdb_fs.c\n16:12:24 <cmn> yeah, we seem to assume that the lock on master is enough\n16:12:36 <cmn> I'm not sure if I just forgot to update it correctly or I saw this behaviour\n16:13:08 <mhagger> Hmm, if that's true then it might not be worth changing.\n16:13:45 <mhagger> I can't think of a case where it would lead to incorrect behavior. It is only stricter than it needs to be.\n16:14:09 <mhagger> For example, it would be impossible to expire the reflogs for HEAD and refs/heads/master at the same time.\n16:14:12 -!- jcajka [jcajka@nat/redhat/x-vdvityhnfanlaavc] has quit [Quit: Leaving]\n16:14:27 <cmn> if you're going to commit or whatever you should be taking a lock on the current branch first, so yeah it should be fine, but if git is more lock-happy about this, then it might be worth changing just to do the same\n16:15:50 <mhagger> I wonder if there is some obscure race at the moment that HEAD is detached or re-attached to a branch\n16:21:42 <cmn> in that case, I think we would take a lock on HEAD since that's the ref we want to change\n16:22:07 <cmn> oh, and if you then come in and try to change the branch we just attached to\n16:22:16 <cmn> yeah, I suppose there would be a race there\n16:23:35 <cmn> I'm not familiar with dtruss (since I'm on my laptop atm), but from its output, it doesn't look like git is taking a lock on HEAD either\n16:23:55 <cmn> and in fact it looks like it writes to HEAD's log before taking a lock\n16:24:56 <mhagger> Yes that's just what I'm seeing too (when HEAD goes from detached to pointing at master)\n16:26:29 <mhagger> I'm not surprised to find bugs in these areas. It's so hard to test...\n16:27:55 <mhagger> For some reason it's opening and closing .git/logs/HEAD an extra time, too.\n16:29:13 <cmn> heh yeah; maybe there's some ensure_exists() function that gets called first\n16:31:38 <mhagger> That's probably it. Lame.\n16:31:54 <mhagger> What's your opinion on what we should do here?\n16:32:26 <mhagger> If we change the locking policy, then we introduce a slight incompatibility between old and new clients.\n16:33:01 <mhagger> but we get more clarity when, for example, a symbolic reference is re-seated\n16:33:28 <mhagger> plus it just makes more sense to hold HEAD.lock when updating logs/HEAD.\n16:33:57 <cmn> for most use-cases we probably won't see the race happen between reattaching HEAD and changing the newly-current branch, but as you mention it makes sense to hold HEAD.lock when writing to its reflog\n16:34:13 <mhagger> I suppose there could be a transition period when we hold *both* locks at the same time, but that seems like more trouble than it's worth.\n16:34:16 <cmn> and since we append rather than read+update, it's quite important that we don't open it at the same time\n16:34:50 <cmn> hm, I think we should be holding both locks, or we might get an update which is out of order\n16:36:15 <mhagger> That might be the gold standard when updating the reference. But what about when just manipulating the reflog (e.g., \"git reflog expire\")?\n16:36:35 <cmn> hm... I haven't really thought about reflog expiration\n16:36:41 <mhagger> Those commands only affect one reflog, even if it is a symlink\n16:37:01 <cmn> then it does make sense to just hold the one\n16:37:25 <cmn> we can hold master's lock if we expire that one, or HEAD's if we expire its reflog\n16:37:40 <mhagger> Yeah, except \"the one\" is currently refs/heads/master.lock when expiring HEAD\n16:38:02 <mhagger> I'm guessing you haven't implemented \"reflog expire\" yet?\n16:38:07 <cmn> nope\n16:38:36 <cmn> a user can implement it if they so desire, and we would hold the lock for that reference exactly\n16:39:09 <cmn> via a git_transaction which is how we expose ref locking without really exposing the locking directly\n16:39:54 <mhagger> Oh, you supply the tools for iterating through and rewriting reflogs in your API? Just not the logic for expiration?\n16:40:54 <cmn> we used to expose raw manipulation, but then we noticed we needed to lock the ref and not the reflog, so I moved everything into the refdb code and exposed git_transaction which lets you lock one or more references and ask to replace the reflog with whatever list of entries you provide\n16:41:18 <mhagger> Ahh OK\n16:41:31 <mhagger> I propose to look into implementing the following policies:\n16:41:33 <cmn> you can read and delete reflogs directly as well iirc\n16:42:15 <mhagger> 1. When updating a reference through a symbolic ref, or when updating a reference that happens to be pointed to by HEAD, we hold both locks while updating the reflogs.\n16:43:00 <mhagger> 2. When modifying reflogs directly via \"git reflog expire\" or \"git reflog delete\", we hold only the lock on that reflog even if it is a symref\n16:44:06 <mhagger> Hmmm, 2 might not be safe if used at the same time as an old client\n16:49:40 <cmn> those sound reasonable, though if we're going to use different locks than current git wrt 2, then we would want to lock both as well\n16:50:01 <cmn> and eventually move to just the one we want to change, as you mentioned earlier\n16:50:18 <mhagger> Yes, <sigh>, I guess you're right.\n16:51:24 <mhagger> By the way, this is http://thread.gmane.org/gmane.comp.version-control.git/263552\n16:52:16 <mhagger> If that's the way we go, would you make the same change in libgit2?\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2758", "title": "GC mwindows on too many open files", "body": "We currently attempt to free unused map windows for packfiles when we go over a threshold. We however do not account for the number of open packfiles.\n\nThere's been at least two distinct reports of people running into issues when they have repositories which do network operations in small batches. These accumulate a lot of tiny packfiles and we end up having them all open at once, which can reach the system's limit for open file descriptors.\n\nWe should have a configurable limit on how many open file descriptors we want to have for packfiles and do a soft-GC similar to what we do for memory (address space).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2758/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2681", "title": "Commit creation vs committing on top of a branch", "body": "The current signature for `git_commit_create()` lets you specify a branch to update. This used to let you pass in any data, but it contained at least two race conditions, so checks were added to make sure that we're updating the reference from and to what the user expects.\n\nIt was pointed out that these checks did not account for creating new references, which is something we should tacke, but I think that this function is fundamentally flawed, a we're specifying the same information in different places and different ways.\n\nCreating a commit from arbitrary data should be separate from the common use-case of creating a commit on top of the current branch (or on top of the current state of an arbitrary reference). I think we should have two different functions\n\n```\nint git_commit_create(git_commit **out, git_repository *repo, git_signature *author, git_signature *comitter, const char *message, const char *encoding, git_tree *tree, size_t parent_count, git_commit *[]parents);\n```\n\nto create an arbitrary commit and\n\n```\nint git_commit_append(git_reference **out, git_repository *repo, const char *refname, git_signature *author, git_signature *comitter, const char *message, const char *encoding, git_tree *tree);\n```\n\nto build a commit on top of the given reference, which is for the common case of assuming there is no race between the time the user asks to create the commit and the time we look up the reference. This also obviates the need for a parent, since we're going to take the one we read from the reference. The output is then the updated reference (or we could remove it if we're assuming there are no race conditions).\n\nWe would still need a convenient way to create a commit from the \"obvious\" sources like HEAD and MERGE_HEAD.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2621", "title": "Alternates API", "body": "If a repository/odb has an alternates file, we follow it to grab objects from other repositories. But we don't have any way of interacting with it from a program.\n\nIt is \"just\" a newline-delimited list of paths in a file so we might not necessarily want to do too much in libgit2, but maybe it can be abstracted just enough so non-default backends can also make use of it.\n\nSo I was thinking of maybe having\n\n``` C\ngit_odb_alternates_read(git_strarray*, git_odb *);\ngit_odb_alternates_write(git_odb *, git_strarray *);\ngit_odb_alternates_append(git_odb *, const char *);\n```\n\nwith the appropriate additions to the odb backend interface, which should make implementing things like `git clone --reference` or `--shared` that much easier.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2370", "title": "Make sure we keep the packfile locked until we've updated the tips", "body": "This is mostly as a reminder to myself to do this at some point, but if someone feels like it, they're welcome to take this on.\n\nThere is some amount of time between the rename of the packfile to its final name and the update of the remote-tracking branches. If a gc process runs between those two operations, it may see that our brand new packfile contains only unreferenced objects, so it might decide to delete it. This would make our ref updates quite unhappy (not to mention the user).\n\nWhat git does is lock the packfile (via a `.keep` file, which tells a gc process not to touch it) between those times and then remove the keep-file after the refs have been updated and we now have made our objects reachable.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/1328", "title": "Textconv support", "body": "Textconv is a way of transforming binary[1] data into something we can feed into our xdiff. Typical use-cases for this are letting `exif` show us an image's metadata, or transforming a PDF or Word file into plain text. Or even transforming an UTF-16/32 file into UTF-8.\n\nWe should allow the user to hook into our diffs in order to provide diff-able representations of data. Git does this via file extensions, which seems like a reasonable starting point. We can then go crazy with the rules as useful ones crop up.\n\nThe registered functions would get a buffer with the contents and give us the textual representation of the data.\n\n/cc @arrbee @brianmario \n\n[1] binary means that our xdiff can't show a sensible diff with it, regardless of what the data inside is meant to represent.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/1328/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/820370fe846167faaeabb2238cae900489af6bb8", "message": "Merge pull request #4481 from pks-t/pks/tests-online-clone-url-memleak\n\ntests: online::clone: fix memory leak due to not freeing URL"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/dcb668bac3a54af02814c39405503eab2f18d5d2", "message": "message: update docs for git_message_prettify\n\nWe used to hard-code the octothorpe as the comment character and the\ndocumentation still mentions this even though we accept the comment character as\na parameter.\n\nUpdate the line to indicate this and clean up the first paragraph a bit."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/ecd55cec771d9c6f7ffffe80422a1decd4645c17", "message": "Merge pull request #4477 from pks-t/pks/memleaks\n\nMemory leaks"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/9bf37ddd07b8212548c30212c994fe267daa876c", "message": "refs: include \" sorted \" in our packed-refs header\n\nThis lets git know that we do in fact have written our packed-refs file\nsorted (which is apparently not necessarily the case) and it can then use the\nnew-ish mmaped access which lets it avoid significant amounts of effort parsing\npotentially large files to get to a single piece of data."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/f1323d9c161aeeada190fd9615a8b5a9fb8a7f3e", "message": "Merge pull request #4472 from libgit2/ethomson/libgit2deps_azure\n\ntravis: fetch trusty dependencies from Bintray"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/6e748130e4f910b6f8c03a3f6f2e11c856d19ba7", "message": "travis: we use bintray's own key for signing\n\nThe VM on Travis apparently will still proceed, but it's good practice."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/6d452600fa5c351670c9200e7c48f1da1191c5b8", "message": "cmake: use a FEATURE_SUMMARY call compatible with 3.0.2\n\nWhen we print features, we make an effort to support all the way back to\npre-3.0. However, in the code for versions from 3 onward we call\n`FEATURE_SUMMARY` with multiple kinds of elements to print in the same line.\nThis is only supported in CMake 3.1 and later, making the rather popular CMake\n3.0.2 unable to build the library.\n\nUse a single kind of element per invocation. This means we need to provide a\n\"description\" text, which CMake provides for us if provide multiple kinds of\nelements."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/a7e36d3d9c473647f141b24d398a98171744ceee", "message": "Merge pull request #4468 from libgit2/cmn/openssl-pc\n\nMake sure to include 'openssl' as a dep when building statically with SHA1DC"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/b21c5408ff18eaf99029f59e738f6f614a53c90d", "message": "cmake: add openssl to the private deps list when it's the TLS implementation\n\nWe might want OpenSSL to be the implementation for SHA-1 and/or TLS. If we only\nwant it for TLS (e.g. we're building with the collision-detecting SHA-1\nimplementation) then we did not indicate this to the systems including us a\nstatic library.\n\nAdd OpenSSL to the list also during the TLS decision to make sure we say we\nshould link to it if we use it for TLS."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/b85548edb027474af3d107f9faa004cc09a1863a", "message": "cmake: treat LIBGIT2_PC_REQUIRES as a list\n\nIt is indeed a list of dependencies for those which include the static archive.\nThis is in preparation for adding two possible places where we might add openssl\nas a dependency."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/ddd36510b589f8dd39a9bfaaecfb9160dc943f42", "message": "Merge pull request #4467 from libgit2/cmn/static-archive-later\n\ncmake: move the rule to find static archives close to building clar"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/85e40bbf0938cac5668e810864f6be9619b9e60e", "message": "cmake: move the rule to find static archives close to building clar\n\nIf we're building static libraries, we want to use that for building our clar\nbinary. This is done in 49551254 (2017-09-22; cmake: use static dependencies\nwhen building static libgit2) but that commit included the rule too early,\nmaking it affect the search for iconv, meaning we did not find it when we were\nbuilding a static libgit2.\n\nMove the rule to just before building clar, after we've included the rules for\nbuilding the library itself. This lets us find and link to the dynamic libiconv."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/c081f0d00dd2a2cd2aab7175cd2c65413f1cf52a", "message": "fetch: go over FETCH_HEAD just once when counting the prefixes in test"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/1b4fbf2e4167c958b7358423e1ee53aa26921eba", "message": "remote: append to FETCH_HEAD rather than overwrite for each refspec\n\nWe treat each refspec on its own, but the code currently overwrites the contents\nof FETCH_HEAD so we end up with the entries for the last refspec we processed.\n\nInstead, truncate it before performing the updates and append to it when\nupdating the references."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/3ccc1a4deb67212a3e3c69e91fb7a04975819b31", "message": "futils: add a function to truncate a file\n\nWe want to do this in order to get FETCH_HEAD to be empty when we start updating\nit due to fetching from the remote."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/c0bfda87bee12be2f5c72c6f9863823f813130e9", "message": "fetch: add a failing test for FETCH_HEAD with multiple fetch refspecs"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/1e64a44617f9b23eb71df55970c9da9208bbfdd1", "message": "fetch: expand fetchhead test to cover providing multiple refspecs"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/54510cc62bed8037303d096a73958081bfdabd14", "message": "Merge pull request #4391 from libgit2/cmn/expose-indent-heuristic\n\ndiff: expose the \"indent heuristic\" in the diff options"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/7e3faf58cbafd1115d0f4bf6e5a2b422f9ef78f1", "message": "diff: expose the \"indent heuristic\" in the diff options\n\nWe default to off, but we might want to consider changing `GIT_DIFF_NORMAL` to\ninclude it."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/a8f19f819ea5b9a949b439702893f87c2c655141", "message": "Merge pull request #4420 from pks-t/pks/strict-aliasing\n\nrefcount: make refcounting conform to aliasing rules"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/15f8d9a232097c63c87d8bb2b959e72bb7c1c798", "message": "Merge pull request #4412 from cpoerschke/master-tests-repo-init-tweak\n\ns/Init/Index comment tweak for test_repo_init__init_with_initial_commit"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/8233f6e36d8827986e1baeff4b7b4daa2cce46f4", "message": "Merge pull request #4386 from novalis/gitignore-ignore-space\n\nignore spaces in .gitignore files"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/6f1e4f4f4888d6ba78173d5aaf0f345713a847d7", "message": "CHANGELOG: add note about supporting conditional includes"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/0d723f39decff4ff77def8a4acf3b7a656af59b2", "message": "Merge pull request #4332 from pks-t/pks/conditional-includes\n\nConditional includes"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/42627933327bb8f91ae847bc8c72ab15ec1e2592", "message": "Merge remote-tracking branch 'upstream/master' into pks/conditional-includes"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/1475b981a4ee82409f3e92e4949dcf4e417a9f1f", "message": "config: keep the output parameter at the start of the function"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/71ba464435bb430b02d94c653cd518c11f7289ff", "message": "travis: let's try a 5GB ramdisk"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/37bb15122e30bb13aabc213079da53b5cdac2678", "message": "travis: put clar's sandbox in a ramdisk on macOS\n\nThe macOS tests are by far the slowest right now. This attempts to remedy the\nsituation somewhat by asking clar to put its test data on a ramdisk."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/c44b91705c4fa3c8996e4d98d3ba23b1ecc4034b", "message": "tests: resolve the real path for the sandbox in includeIf tests\n\nWe put our repository in the temporary directory which makes macOS map the path\ninto a virtual path. `realpath(3)` can resolve it and we do so during repository\nopening, but that makes its path have a different prefix from the sandbox path\nclar thinks we have.\n\nResolve the sandbox path before putting it into the test config files so the\npaths match as expected."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/990d2b854ab7eef28dd09209f77ff95d8e6a4ca2", "message": "Merge pull request #4393 from libgit2/ethomson/pgpkey\n\ntravis: grab pgp key from www.edwardthomson.com"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/6f8a6c333659fda34b12eeabd2519b0f119aacbf", "message": "Merge pull request #4392 from libgit2/cmn/config-write-preserve-case\n\nPreserve the input casing when writing config files"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/94e30d9b14b96283295b107268a862d37a96894f", "message": "config: check for OOM when writing"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/ba1afdc373b5aed7c7451d9cfd59117d71f94fd6", "message": "CHANGELOG: add note about config writing changes"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/8ec806d7485219c4f495bc55dd80d2acae220b56", "message": "config: preserve the original case when writing out new sections and vars\n\nFor sections we will still use the existing one even if the case disagrees, but\nthe variable always gets written with the case given by the caller."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/bb8bc4b852aaf72508c4ae7904a928c30da4f360", "message": "config: add failing test for preserving case when writing keys\n\nWhile most parts of a configuration key are case-insensitive, we should still be\ncase-preserving and write down whatever string the caller provided."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/9e3fb594d644955decd3ce815e94a8e627acf83d", "message": "Merge pull request #4373 from cjhoward92/examples/log-show-log-size\n\nexample-log: add support for --log-size"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/79e09e1a937155188c7e16596abd0b0c10eb3590", "message": "Merge pull request #3944 from mhagger/diff-indent-heuristic\n\nImplement a diff indent heuristic"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/1b9cc2ece515aba1d11c48c42c7a62d58a61c3f0", "message": "Merge remote-tracking branch 'upstream/master' into diff-indent-heuristic"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/fb11544b589cea1d1d490c451704e6328a882033", "message": "Merge pull request #4371 from pks-t/pks/test-checkout-tree-refactoring\n\ntests: checkout::tree: verify status entrycount changes on chmod"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/25fdb3f0c431b87a286537f193c64b1cdae107bc", "message": "proxy: rename the options freeing function"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/c7c5f2c4ecc727ac555f51bd20353f7f3ae9c07a", "message": "Merge pull request #4339 from pks-t/pks/static-linking\n\nStatic linking for bundled deps"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/366f4136ec50888d2d52316dc07d775a71bed97e", "message": "travis: keep installing our custom libcurl build\n\nThe block in the script installs the packages if we're _not_ on Precise. This\nwas dropped in c17c3f8a (\"travis: drop support for Ubuntu Precise\") in error."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/6f8d1eb946c8558085b6d09f4601af2bd1bf24b3", "message": "curl: free the user-provided proxy credentials"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/406b47bf4086f09a6686db97099347f52291a4a7", "message": "curl: free the proxy options"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/44527f5c338320a2ddbd0fab81a635dfcb2adb90", "message": "proxy: add a free function for the options's pointers\n\nWhen we duplicate a user-provided options struct, we're stuck with freeing the\nurl in it. In case we add stuff to the proxy struct, let's add a function in\nwhich to put the logic."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/5b947b62970dc2adeb65fd875b1dc02e8f1b3579", "message": "Merge pull request #4342 from mothacehe/master\n\nREADME: Mention Guile-Git bindings."}], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4485", "title": "docs: add release documentation", "body": "This should provide the release manager enough to know which steps to take when\r\nit's time to cut a new release.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4418", "title": "Re-enable the RC4 test", "body": "We disabled this test while dealing with a security issue. Enable it again and make the error handling in the OpenSSL stream let us return the actual error due to trying to talk to RC4.\r\n\r\n`GIT_ECERTIFICATE` is likely not _really_ the right thing to return here since it's not really about the certificate but about not supporting our cipherlist. We will likely want a specific error code for this (or we can overload this one, but TLS is confusing enough as it is).", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4396", "title": "config: specify how we match the regular expressions", "body": "We do it the same as git does: case-sensitively on the normalized form of the\r\nvariable name.\r\n\r\nWhile here also specify that we're case-sensitive on the values when handling\r\nthe values when setting or deleting multivars.\r\n\r\n---\r\n\r\n#4390 highlights this deficiency in the documentation.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/3746", "title": "[WIP] Add a script to help CTest run clar suites in parallel", "body": "This script asks the clar runner for its suites and then creates a CTest\nfile so ctest knows about them. We can use this script together wtih\nCTest's '-j' option to run multiple test suites in parallel.\n\n---\n\nThis should help especially on Windows. I just run this with `ctest -j8` on my machine and the test runtime went from 70s to 20s.\n\nI think we would want to run this as a CMake rule if we can, so it knows where the python executable is.\n", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/3729", "title": "[WIP] Operation cancellation support", "body": "This is a possible implementation of #3334, but closer to the .NET design with an object that you pass into the operations which cannot be used to request cancellation.\n\nThis needs some naming bikeshedding and possibly more exact docs and a PoC implementation in e.g. the network or checkout operations.\n\nIt also needs a well-crafted history and commit messages.\n", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/3722", "title": "Warnings API redux", "body": "This is another attempt at #2101 which incorporates the subclassing described in the comments. An application may choose to print to stdout/stderr or it may look into the subclass to show the warnings in a GUI or to provide its own format.\n\nThe commit signature parsing code has changed quite a bit since the original PR, so I've used CRLF as an example of how we'd use it.\n", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/3544", "title": "CMake: activate the rpath policy for OSX", "body": "This activates the newer policy of using rpath in the build and shuts\nCMake up about it when we're building.\n\n/cc @Therzok I figure you'd at least know whether this impacts people trying to use the library.\n", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/3075", "title": "Split the concerns of the commit creation functions", "body": "As discussed on #2681 this PR splits up the commit creation functions into creating the commit and those which update a reference as well.\n\n`_fromstate()` brings us closer to `git-commit` with its defaults for the parents and tree.\n\nI don't love `git_commit_create_on_head()` since you can get the same by passing `\"HEAD\"` to `git_commit_create_on()` and we already have enough confusion about what we mean by `head` in function names.\n\nThe names are whatever I came up with, better names may come up.\n", "author_association": "OWNER"}], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/922847", "body": "There needs to be a way to overwrite a tag (i.e. to implement `git tag -f existingtag`). Do you think a flag or a new function would be better (I want to do something like this for references).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/922847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/925750", "body": "Even more reasons for this change: http://librelist.com/browser//libgit2/2011/3/23/dealing-with-custom-refs/#6f3aa726f37a4b9b78c0c818284160da \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/925750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/926649", "body": "Sure. I'll figure out how tests work.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/926649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/926901", "body": "The tests pass, so I guess I've done it right :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/926901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/928494", "body": "Ah, subtle (well, more sloppy on my part), erroring out as successful.\n\nI'm not sure `gitfo_exists` will help much. Remember I'm overwriting refs, so they need to exist in the first place. Reading the ref again and checking it against the value it should have would work better, wouldn't it?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/928494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/928509", "body": "Damn tests! _shakes fist_ :)\n\nI guess tomorrow is going to be a test-writing day.\n\nBy the way, the way the code is written today, HEAD is allowed to point to a tag.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/928509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/930079", "body": "> force create ref (A) over an existing ref (B) -> B shouldn't exist anymore, A should be loose (provided B was packed, it can stays this way)\n\nA and B have the same name (i.e. filename), though. It's more like \"the information in A will be written to B's file\".\n\nIf B is packed, then yes, we can leave it packet. A delete will take care of this.\n\n> force create ref (A) over a non existing ref (B) -> B shouldn't exist, A should be loose\n\nIf B doesn't exist, then we're not really force-creating anything. The `_force` family are for sayng \"I want to have reference A in the repository, I don't care if someone has already claimed its name\". Again, A and B have the same filename, so I can't test for B not existing afterwards, because its filename is being used by A.\n\n> force rename an existing ref (A) into a non existing ref (B) -> B should be loose, A shouldn't exist anymore (provided A was packed, it should be removed from the packfile)\n\nIsn't this covered by the existing tests? This belongs in one of them, at any rate.\n\n> force rename a non existing ref (A) into an existing ref (B) -> Should obviously fail\n\nAgree. Should be covered by existing tests, or added to one of them.\n\n> force rename a non existing ref (A) into a non existing ref (B) -> Should obviously fail\n\nThis should be covered by the previous case.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/930079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/930157", "body": "The last two tests (non-existant ref A) don't belong in the rename but in reference reading, as you need to have looked up a reference in order to rename it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/930157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/930305", "body": "The only real change here is refs/stash and the refs/dummy/a which was expected to fail as the other rules are already checked. I haven't added a check for HEAD because it's not clear yet we do want the function to allow it normally or if we want to add an explicit \"shallow reference\" flag.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/930305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/930964", "body": "Sure, fork away and I'll merge when you're done\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/930964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/931813", "body": "> > with current development branch code, this will cause a memory leak (...) I've sent a pull request that deals with this at the reference level.\n> \n> I can't find any pull request for this. Are you refering to your invalidated-refs branch?\n\nI had two versions, see issue #95 for two of my ideas. With \"this\" I meant overwriting references, which is now the ref-force-overwrite branch. I should probably delete the others to avoid confusions.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/931813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/935171", "body": "> Also, note that I committed 95cde17 to enforce some of the coding conventions\n\nThanks, hopefully the next pull request already conforms\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/935171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/940125", "body": "> Heuh... You can create a tag pointing to an unknown OID? How so? Why isn't the low level create_ref method not failing?\n\nThe `create_ref` method only checks that the reference points to something that exists. That is, refs/tags/whatever contains a valid OID. Inside that object there is an `object` field which describes what the tag refers to and that is completely outside the scope of reference handling.\n\nShould  one be allowed to create a tag pointing into nothingness?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/940125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/940128", "body": "Fixed as forced reference overwriting has been merged.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/940128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/952929", "body": "> I like your approach of storing all data as strings and converting on query\n\nThat's what `git.git` does, though hopefully my version is more readable :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/952929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/953845", "body": "This should be pretty much feature-complete as far as reading goes, assuming multivars are handled by a higher layer.\n\n@tanoku what number should I use for the tests? I'm going to use 5 locally for now (first one free) but I'll change it if you had other plans.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/953845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/953853", "body": "Hm, ok, I'm going to use 14. `tests/NAMING` is out of date\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/953853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/960346", "body": "On Tue, Apr 05, 2011 at 09:22:30AM -0700, tanoku wrote:\n\n> Hey, we have a convenience function for this in the ODB, check `git_odb_read_header()`. :)\n\nAh, cool. I was looking for it in the wrong place. I'll repush tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/960346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/963064", "body": "It should be fine now.\n\nThis does however set a different standard for tags where we are told the type and for those where we aren't: If we're told something is a commit, we'll write out that it's a commit even if it isn't. Same goes for checking whether the target actually exists.\n\nUnless being able to point to a missing object is somehow a feature, I'll add a couple of checks to `tag_create`.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/963064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/963672", "body": "Looking at the documentation, this seems to be on purpose, but I can't imagine why.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/963672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/969308", "body": "If we know that there is no space before the timestamp, we could also check to see if the buffer has moved, but in this case I think we in fact know there is at least one space.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/969308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/969571", "body": "Come to think about it, is there any reason why the tagging functions need to be told what they're tagging?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/969571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/975076", "body": "## I'll rephrase: is there a use case for the tagging functions to get that info from the user rather than figuring it out for itself?\n\nSent from my Android phone with K-9 Mail. Please excuse my brevity.\n\ntanoku reply@reply.github.com wrote:\n\nYeah, because the actual Tag raw content must contain the type of the tagged object in one of the lines. It's a good idea to verify the type. -- Reply to this email directly or view it on GitHub: https://github.com/libgit2/libgit2/pull/120#issuecomment-974931\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/975076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/983472", "body": "I'm going to see if by modifying the TZ env var I can make influence the function. With that, we could check whether the code provides the right values.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/983472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/387131", "body": "@chobie how do you mean \"couldn't get section name?\" With foreach, you get the full variable name. If you just want the section, you can use `strrchr(name, '.')` to get the position of the last dot and read up to there. If there is popular demand, we might want to return the variable in `cvar_t` and add some getters.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/387131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/387173", "body": "Sorry, yeah, that's a bug. Until recently, `var->name` contained the full name, it looks like I forgot to update that part. I'm fixing it now.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/387173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/387238", "body": "@chobie ok, I've fixed it in my `config` branch.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/387238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/407605", "body": "This function is meant to take a pre-defined tag object, which contains text (you can take a look at the git mktag tests to see the format)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/407605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/410566", "body": "I don't like this. You apparently feel differently, but for me a function with match in it means \"does it match?\" so I expect a \"true\" response if they do. A compare, on the other hand, means \"what's the difference?\" so I expect a zero if the difference is none, i.e. they are the same.\n\nFurthermore, why is there a `git_oid_match` and a `git_oid_cmp` if they are pretty much the same?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/410566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/410594", "body": "This is C99, which the front-page states we support, but unfortunately MSVC hasn't caught up to last century and still doesn't actually support.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/410594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/415219", "body": "@pegonma fair enough, there is indeed a point to the extra function, mea culpa for not spotting that, but then IMO a better name would be `git_oid_ncmp` so it fits in better, as it does the same as `git_oid_cmp` but only up to a certain amount of chars.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/415219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/418282", "body": "I've attached a pull request updating the comment as issue #244. Is it better?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/418282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/438098", "body": "@txdv `__ondisk` is a low-level function and you should only use it if you're building the configuration layers yourself (e.g. if your tool wants to use its own configuration format _and_ take into consideration what's in `$GITDIR/.config`). If you want to open a single configuration file, use `git_config_open_file` and if you want the configuration as a git-core-like client would see it, use `git_repository_config`\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/438098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/449301", "body": "Nice catch, but we could simply delete this `if`, as `git_reference_resolve` returns `GIT_SUCCESS` if given an OID ref. There is however another corner-case hiding here. In case that the user has manually set `HEAD` to point to a non-existent branch, should we really consider it as empty, specially considering that `git_commit_create` will create that branch?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/449301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/449648", "body": "> If I forge the HEAD to make it point at carlosmn in an empty repo, git.git commit forces the creation of the branch with the first commit, and I'm quite happy with that.\n\nThat's the only way you can commit to a new repo.\n\nI'm not sure what the use-case for this function is, so I can't comment on the overhead of reading the header. However, what this function currently does is test whether HEAD is attached and points to an existing branch, which has very little to do with a repo being empty.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/449648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/451346", "body": "PR #279 implements `git_repository_is_detached` and `git_repository_is_orphan` because that's what people actually mean.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/451346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/454387", "body": "@txdv \"data\" is whatever you want the callback function to have. You use it to give your callback function more information than what the caller can provide, often a struct with pointers. This is how pretty much every call-back mechanism works (except for the one the GSM module we're programming at university has, but that's a different story)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/454387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/474828", "body": "On Wed, 2011-07-13 at 03:36 -0700, kiryl wrote:\n\n> No need to cast void \\* to other pointer type. Just declare ksearch as const pointer too.\n> \n> It seems the code contains a lot of mess with type casting. :(\n\nIIRC that's needed to keep the C++ compilers happy\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/474828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/475275", "body": "> It's better to return EFBIG here than silent truncate it.\n\nWe're not truncating the file though. The index is \"just\" a cache and when adding a file to a repository, and the actual code that creates a blob from a file has created it with the correct size.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/475275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/475432", "body": "> And I still don't understand why do you want to build pla[i]n-C code with C++ compiler?\n\nI think some C++ (Qt?) bindings build the code themselves, which is why it gets compiled as C++; so maybe we should tell then to compile C as C and put \"extern C\" on the headers\n\nAnd FWIW, a cmp function shouldn't try to cast away a const.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/475432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/599195", "body": "Yes it should, I'll fix this up when I get the chance.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/599195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/669372", "body": "Build mode \"RelWithDebInfo\" gives us what we had before. We could make that one default, I guess, but we do need `-O0` to debug.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/669372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/750153", "body": "You can have a transport and still not be connected, a better test would be more like `!remote->transport || !remote->transport->connected`\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/750153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/799352", "body": "I think this would cause values in the form `[section]\\n variable` to be reported as non-existent instead being considered as true.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/799352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/874238", "body": "On Tue, 2012-01-17 at 04:51 -0800, nulltoken wrote:\n\n> When compiling on Windows, the following warning is issued by the compiler\n> \n> ```\n> 5>..\\..\\libgit2\\src\\win32\\posix_w32.c(83): warning C4293: '<<' : shift count negative or too big, undefined behavior\n> ```\n\nHm, I guess the right way is to cast it into a larger field, because\nright now we'd be shifting it all the way to 0.\n\n   cmn\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/874238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1303072", "body": "Breaks how? Does it cause runtime problems? Can't it build? If it's just a matter of being out of sync, then it's a matter of updating php-git.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1303072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1518502", "body": "Why not `git_tree_entry_dup`? This is the usual C way of calling a function that allocates the copy; we already have \"copy/cpy\" for function that only do the copying into user-provided memory. \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1518502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1996400", "body": "Yes, I am. I completely forgot about it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1996400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2147966", "body": "We don't have `GIT_UNUSED()` defined in the tests, so this gets rid of the unused warning.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2147966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2147978", "body": "Oh, it turns out we do :blush:\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2147978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2412082", "body": "> I have a question regarding this change. Why has the ppc support been\n> removed from libgit2?\n\nIt hasn't. It runs on PPC as much as it ever did. Some PPC assembler was\nremoved as it was found it didn't give us any advantage.\n\n   cmn\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2412082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/4039227", "body": "It does look like I got confused. I've reverted this change.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/4039227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/5281572", "body": "The wrong window had focus\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/5281572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/5332725", "body": "Yeah, and as soon as I figure out what we should be asserting I'll add them.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/5332725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/6070562", "body": "I figured there was some certainty that we have a positive refcount, but in a concurrent use, couldn't the refcount reach 0 in some cases?\n\nIn any case, freeing should be the last thing we do to it, even if just so you don't have to wonder about it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/6070562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/15119", "body": "This is actually a debug statement that sneaked in. I'll remove it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/15119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/15464", "body": "This causes us to behave differently to `git.git` by allowing comments inside multi-line values. I'm not sure whether that's a good thing or not\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/15464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23349", "body": "On Tue, Apr 26, 2011 at 03:33:49PM -0700, tclem wrote:\n\n> > -   str[input_sp - input] = '.';\n> >   +\n> > -   for (i = 0; i < 2; ++i) {\n> > -       quote = strrchr(str, '\"');\n> > -       memmove(quote, quote + 1, strlen(quote));\n> > -   }\n> >   +\n> > -   return GIT_SUCCESS;\n> >   +}\n> >   +\n> >   +void git__strntolower(char *str, int len)\n> >   +{\n> > -   int i;\n> >   +\n> > -   for (i = 0; i < len; ++i) {\n> > -       str[len] = tolower(str[len]);\n> \n> I think you meant to do this: `str[i] = tolower(str[i]);`\n\nYes I do. Thanks for catching this.\n\n## \n\nCarlos Mart\u00edn Nieto | http://cmartin.tk\n\n\"\u00bfC\u00f3mo voy a decir bobadas si soy mudo?\" -- CACHAI\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/38362", "body": "The way I understood it, buffer_end in this function points to the end of the specified entry, because the entry length is parsed in the caller\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/38362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/50492", "body": "No, it's not. I removed that at least once but I must have gotten confused with all the rebasing I was doing\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/50492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/79060", "body": "Anything will do really. This doesn't depend on a repository existing (it might do later when we add support for thin packs)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/79060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/79065", "body": "Fair enough, but what happens if you don't like writing multi-threaded applications? This **needs** to be run just after getting the packfile from the other end. I guess I'll make the user take care of the problem.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/79065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/79066", "body": "Yeah, result is a crap name.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/79066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/79080", "body": "I think I put a `uint32_t` cast at some point, which should make sure that there is no sign bit extention, but putting the number there is safer.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/79080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/79082", "body": "Isn't 'to packfile' one of those dances the kids are doing these days? :p\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/79082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/79085", "body": "Everyone should use the comma operator more often\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/79085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/79104", "body": "How do you feel about it being available only after writing the pack file? It fits very well in the source code and I don't think that there's an use case where we want a pack's file hash without writing out the index.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/79104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/79123", "body": "There are few operations that are as expensive as indexing, so I expect most CLI apps to run it on their main thread (a GUI app should be doing everything on a worker thread anyway) and I wanted to make it easier for them.\n\nI'll change it so it stores the stats where the user tells it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/79123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/83250", "body": "What does this give us? The point of this test is that the `filebuf` code works correctly\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/83250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/83252", "body": "This is plainly wrong, but they should be failing with your changes, as `strcmp` returns 0 if the strings match. A better test would be `must_be_true(strcmp(...,...) == 0)` just like it's used elsewhere.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/83252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/99113", "body": "On Mon, 2011-08-22 at 13:06 -0700, jasonpenny wrote:\n\n> > @@ -4,11 +4,17 @@\n> >  #ifndef INCLUDE_netops_h__\n> >  #define INCLUDE_netops_h__\n> > \n> > +#ifndef _WIN32\n> > +typedef int GIT_SOCKET;\n> > +#else\n> > +typedef unisgned int GIT_SOCKET;\n> \n> unisgned ?\n\nThat's the second typo on that line. Winsock just doesn't like me.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/99113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/103045", "body": "> This code is valid from c99 point of view.\n\nIt actually specifies these kind of optimisations? Odd.\n\n> Do we really want to support compilers which don't support c99? Why?\n\nMSVC doesn't support C99 and most likely never will. It does support a\nfew features, but I've no idea if this is one of them.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/103045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/103341", "body": "> Really? Why MSVC support is so important? M$ seems not interested in plan C at all.\n\nWhilst I sympathise with the feeling. It's not Microsoft who is going to\nbe using the library, and the poor souls who have to work on Windows are\nalready miserable enough without us making it harder.\n\n@peff I guess assuming GCC or LLVM is safe enough for git.git, and the\ncodebase won't suddenly fill with incompatible changes.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/103341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/103407", "body": "On Thu, 2011-08-25 at 20:09 -0700, peff wrote:\n\n> > @@ -302,10 +302,10 @@ int git_pkt_send_wants(git_headarray *refs, git_transport_caps *caps, int fd)\n> >  {\n> >     unsigned int i = 0;\n> >     int error = GIT_SUCCESS;\n> > -   char buf[STRLEN(WANT_PREFIX) + GIT_OID_HEXSZ + 2];\n> > -   char buf[strlen(WANT_PREFIX) + GIT_OID_HEXSZ + 2];\n> \n> On Thu, Aug 25, 2011 at 05:20:11PM -0700, carlosmn wrote:\n> \n> > @peff I guess assuming GCC or LLVM is safe enough for git.git, and the\n> > codebase won't suddenly fill with incompatible changes.\n> \n> I think you misunderstood what I wrote before. git.git assumes C89, more\n> or less. We compile on crap like the IRIX MIPSpro compiler. But you do\n> pay a price in the code; new features were invented because they're\n> useful.\n\nI missed a couple of words there. What I wanted to say was that\nswitching to C99 for git is probably safe, as you expect some sort of\nGCC (or LLVM which supports the same standards AFAIK) to be used.\n\n> What I was suggesting is that since you have a nice squeaky-clean\n> codebase, now is a good time to think about how much portability you\n> want for antique systems, especially given that you can get gcc on most\n> of them. It may not really be worth the hassle. I don't know if @tanoku\n> has a master plan for this, or whether it is just \"anywhere git.git\n> runs, libgit2 will run\".\n\nThe webpage still says that we're using C99, which is not true, because\nMS can't get their act together, but I guess that points to a general\nplan of being run on \"modern\" systems. The oldest target is probably\nWindows XP, which is 10 years old but already has most or all of the\nnice Unicode functions. The other major old system is prbably\nRHEL/CentOS 5, which some people still run on servers, but even that's\nonly 4 years old.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/103407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/129246", "body": "OK\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/129246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/129248", "body": "I wonder why I wrote that\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/129248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/130364", "body": "We could keep incrementing a pointer, but that means that we need to keep growing the buffer. It's only used for the headers and the ref advertisement, it shouldn't grow that much, so I'll do it that way if you think it'll be more efficient.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/130364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/135113", "body": "The point of this patch is that we can't rely on the size of `long`, so assuming it's 32-bit is the wrong thing to do. On my Linux system, `sizeof(long)` is 8.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/135113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/139355", "body": "Do you know how old this commit is? I'll change that in a bit.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/139355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/139356", "body": "Forgot about it. Will do.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/139356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/160488", "body": "It's used for matching in the for loop that starts at the end of this hunk (just after the comment that says we want to match the refspec)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/160488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/160498", "body": "No, you can have a remote without refspecs. Every match will fail, but that's the user's concern, not ours. It's a perfectly valid configuration if you only ever want to store the remote's HEAD as FETCH_HEAD.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/160498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/160542", "body": "OK. As luck would have it, I'm currently fighting with an issue related to refspecs and whether to respect it or not in git.git, so I can explain that and change out refspec implementation so it's usable beyond the simple case of a fetch without any changes to the config.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/160542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/160743", "body": "There are two functions that should use each prefix string, so I think I'll move it to the beginning of the file.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/160743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/160745", "body": "yes it does.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/160745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/165608", "body": "Yeah, that makes sense. I'd rather keep them as lowercase arrays.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/165608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/168214", "body": "Why wouldn't `tag->tagger` be NULL already. We don't seem to be zeroing out the structure in this function, which is probably the real bug to be fixed.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/168214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/214897", "body": "On Mon, Nov 07, 2011 at 12:58:24PM -0800, Brodie Rao wrote:\n\n> > @@ -39,6 +39,20 @@ int p_getcwd(char *buffer_out, size_t size)\n> >     return GIT_SUCCESS;\n> >  }\n> > \n> > +int p_rename(const char *from, const char *to)\n> > +{\n> > -   if (!link(from, to)) {\n> > -       p_unlink(from);\n> > -       return GIT_SUCCESS;\n> > -   }\n> >   +\n> > -   if (!rename(from, to))\n> > -       return GIT_SUCCESS;\n> >   +\n> > -   return GIT_ERROR;\n> >   +\n> >   +}\n> >   +\n> \n> First question: Is this just refactoring, or is it required to fix Windows support?\n\nYes and no. Our current test suite doesn't test the Unicode support so\nit doesn't actually fix any problems we're seeing, but `p_rename`\nneeds to transform the path to UTF-16 on Windows, so it does fix a\nproblem (just not this particular one).\n\n> Second question: Aren't things in `posix.h` supposed to use the real\n> underlying POSIX implementations if they're available? Why isn't\n\nNot exactly. We stick to POSIX except where we find it to be lacking\nor annoying for our purposes.\n\n> this just a `#define` for `rename(2)`? And why does this call\n> `link()` and `unlink()` instead of just doing `rename()`? If\n> anything, wouldn't that open up the possibility of this operation\n> **not** being atomic?\n\nI believe @tanoku wrote that originally, I'm just moving the Windows\npart so it uses UTF-16.\n\n   cmn\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/214897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/215829", "body": "Does `umask` even exist on Windows?@xpaulbettsx could you share your wisdom?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/215829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/217859", "body": "We might want to set ACLs to do something equivalent to `git init --shared`. MSDN tells me that the `_umask` does exist (but with quite limited capabilities, as the umask doesn't really exist on Windows). I was thinking that maybe we should apply the umask in `p_chmod` ourselves under Windows, but since it would only affect the user's permissions and all the default umask does there is remove the execute bit, which doesn't exist under Windows (or rather, it can't be unset), so we might just as well ignore it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/217859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/254018", "body": "Are you sure we don't want to allow passing NULL  to the free function? It often ends up being useful (though I would have written it as `if (!buf) return;`\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/254018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/310782", "body": "Says who? Is this a Windows compatability thing? I've never seen a /C:/ path. Does msysgit behave this way?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/310782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/470795", "body": "Indeed. Fixed.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/470795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/556604", "body": "I have some code to make docurium show depreciation warnings, but I think that until 1.0, we can break the API whoever much we feel like. \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/556604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/646994", "body": "There is  no slash at the beginning of the names and neither are they folders. They're namespaces which happen to be directories if stored as loose references (but that's an implementation detail).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/646994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/647002", "body": "And to be picky about the message, they're not remote branches, but remote-tracking. A remote branch would be one that exists in another repo, and we don't care bout them.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/647002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/647015", "body": "If you tell it it's both a local and a remote-tracking branch, you've failed so you get no love from the code :p\n\nI have to wonder what your plans are for remote-tracking branches. You (as the user) don't create them or are able to do much with them. It's fetch and push that modify them and trying to do so anywhere else is probably a bug.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/647015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/647030", "body": "This would skip e.g. `origin/HEAD` or any symrefs that you may have created. Is this on purpose?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/647030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/647267", "body": "I'd make it opaque and have something like `git_branch_tracks()` that returns which branch it's tracking (either with its remote-tracking name or some other information). I don't think there's anything wrong with a `_lookup()` that accepts `origin/master`, as long as it knows that it's remote-tracking and shouldn't be modified.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/647267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/542372", "body": "Right, this is now the main error message. I'll change it so.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/542372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/542374", "body": "You're right. Win32 is a completely different beast. The right solution is probably to move the real functions into the posix layer.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/542374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/622697", "body": "`git_revwalk_next()` can return that there was an error or that we ran out of commits in the history. If either of those things happen, we jump out of the loop, because we don't want to send anything else. If the error was `GIT_EREVWALKOVER`, it's not really an error and we set `error` to zero just after the loop.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/622697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/626323", "body": "The thing here is that both on error and successful completion, we need to do the cleanup. Adding an `on_error` label would duplicate the cleanup code.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/626323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/626366", "body": "A break there would break the inner loop (`while (1)`),  `goto done;` jumps to outside of the outer while loop.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/626366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/626385", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/626385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/626460", "body": "I'm no fan of the nested loops either. I'll see what I can come up with.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/626460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/626901", "body": "I'll just change it to -1 I think.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/626901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/626922", "body": "I think this is much more readable now.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/626922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/630197", "body": "We're fine as far as `freeaddrinfo` goes in this PR.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/630197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/514890", "body": "I made it an enum so debuggers can help us figure out what's going on, but you're right, it makes more sense to put it in the existing bitfield.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/514890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/515354", "body": "Ah, that function. It was originally there just to test. I'll move it to its own header and add the missing merge-base-finding functions.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/515354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/785544", "body": "Good point. There shouldn't be a need to catch `GIT_ENOTFOUND` explicitly. Nothing other than `-1` or `GIT_ENOTFOUND` should be returned by the config function anyway.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/785544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "stanhu": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4460", "title": "High number of `stat` calls for `gitattributes` files", "body": "I've noticed that libgit2 makes a high number of `stat` calls to `gitattributes` files, which significantly impacts networked file systems.\r\n\r\n### Reproduction steps\r\n\r\nWith the Linux repo (https://github.com/torvalds/linux.git), I created this Rugged script:\r\n\r\n```ruby\r\nrequire 'rugged'\r\n\r\nrepo = Rugged::Repository.new('.')\r\n\r\ncommit_object = repo.rev_parse('master')\r\noriginal_oid = repo.rev_parse('979e1f08042b83152dfe3d76df10db31eb7edf98')\r\ndiff_commits = commit_object.parents[0].diff(original_oid)\r\n\r\nputs diff_commits.stat\r\n```\r\n\r\nThe result is 30,497 files changed with 753,086 additions and 1,345,193 deletions. Now if I run `strace` on this, I see there are 457,782 hits with `gitattributes`:\r\n\r\n```sh\r\n$ strace -tt -T -o /tmp/diff-linux.txt -s 1024 ruby diff.rb                                                                                                     \r\n30497\r\n753086\r\n1345193\r\n$ grep gitattributes /tmp/diff-linux.txt | wc -l\r\n457782\r\n```\r\n\r\nLooking at it in more detail, I see that we are often duplicating the same lookup:\r\n\r\n```sh\r\n07:38:38.120824 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000009>\r\n07:38:38.120852 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.120881 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:38:38.120949 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.121019 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.121270 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.121301 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.121329 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.121356 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000011>\r\n07:38:38.121390 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:38:38.121742 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:38:38.121805 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.122075 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122105 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122133 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122161 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.122189 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122249 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122305 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000013>\r\n07:38:38.122602 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000009>\r\n07:38:38.122631 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122659 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122686 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000009>\r\n07:38:38.122715 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122816 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122874 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.123136 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.123164 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.123192 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000009>\r\n07:38:38.123219 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.123247 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.123309 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.123365 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.123628 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000009>\r\n07:38:38.123656 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.123688 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:38:38.123729 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000011>\r\n07:38:38.123767 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000014>\r\n07:38:38.123919 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:38:38.123983 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.124245 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.124273 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n```\r\n\r\n### Expected behavior\r\n\r\nIf I compare this with the `git` call, I \"only\" see 7,951 hits:\r\n\r\n```sh\r\n$ strace -tt -T -o /tmp/git-compare.txt -s 1024 git diff 979e1f08042b83152dfe3d76df10db31eb7edf98..master > /dev/null\r\n$ grep gitattributes /tmp/git-compare.txt | wc -l\r\n7951\r\n```\r\n\r\nThe actual hits look a lot more sensible:\r\n\r\n```\r\n07:42:52.269330 open(\"/etc/gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000024>\r\n07:42:52.269446 open(\".gitattributes\", O_RDONLY) = 4 <0.000014>\r\n07:42:52.270123 open(\"/etc/gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.270203 open(\".gitattributes\", O_RDONLY) = 4 <0.000028>\r\n07:42:52.274058 open(\"Documentation/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000014>\r\n07:42:52.274105 open(\"Documentation/ABI/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.274143 open(\"Documentation/ABI/obsolete/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000012>\r\n07:42:52.274604 open(\"Documentation/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000012>\r\n07:42:52.274646 open(\"Documentation/ABI/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:42:52.274682 open(\"Documentation/ABI/obsolete/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:42:52.275014 open(\"Documentation/ABI/stable/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000017>\r\n07:42:52.275347 open(\"Documentation/ABI/stable/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.276283 open(\"Documentation/ABI/testing/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000016>\r\n07:42:52.276479 open(\"Documentation/ABI/testing/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.289449 open(\"Documentation/RCU/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000016>\r\n07:42:52.289506 open(\"Documentation/RCU/Design/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000012>\r\n07:42:52.289545 open(\"Documentation/RCU/Design/Expedited-Grace-Periods/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.289900 open(\"Documentation/RCU/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000023>\r\n07:42:52.289962 open(\"Documentation/RCU/Design/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:42:52.290002 open(\"Documentation/RCU/Design/Expedited-Grace-Periods/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:42:52.290237 open(\"Documentation/RCU/Design/Memory-Ordering/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.290604 open(\"Documentation/RCU/Design/Memory-Ordering/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000014>\r\n07:42:52.310600 open(\"Documentation/RCU/Design/Requirements/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000016>\r\n07:42:52.313085 open(\"Documentation/RCU/Design/Requirements/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000024>\r\n07:42:52.320641 open(\"Documentation/acpi/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000024>\r\n```\r\n\r\n### Actual behavior\r\n\r\nExcessive number of `stat` calls for `gitattributes`\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n\r\nRugged 0.26.0 \r\n\r\n### Operating system(s) tested\r\n\r\nUbuntu Linux 16.04\r\n\r\n  ", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TomGle123": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4458", "title": "Missing support for 'subtree' merge strategy", "body": "Using LibGit2Sharp I noticed there was no support for merge strategies other than 'Standard' and 'Octopus'.  I was looking to use the 'Subtree' strategy ([docs](https://git-scm.com/docs/merge-strategies#merge-strategies-subtree)).  I'd like to add support for this merge strategy in LibGit2Sharp but it is also missing from LibGit2, and I only program C#.\r\n\r\nMaybe there are technical reasons why this feature is not implemented, but if not, it would be a useful addition for me, allowing me to write tooling in C# based around the 'subtree' merge strategy.\r\n\r\nReported against master commit 'd621024'.\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fuhao92": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4454", "title": "hello, I use git_index_add_bypath(), to add about 500M zip file, but it return out of memoryOperator failed?", "body": "You are opening a _bug report_ against the libgit2 project.  If you have a\r\nquestion about an API or usage, please ask on StackOverflow:\r\nhttp://stackoverflow.com/questions/tagged/libgit2.  Please fill out the\r\nreproduction steps (below) and delete this introductory paragraph.  Thanks!\r\n\r\n### Reproduction steps\r\n\r\n### Expected behavior\r\n\r\n### Actual behavior\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n\r\n### Operating system(s) tested\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aw32": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4452", "title": "SSH: Pass hostkey to certificate check callback", "body": "Feature request:\r\nThere is the certificate check callback for remote connections.\r\nFor the SSH certificate check `git_cert_hostkey` can only contain the MD5 and/or SHA1 hash of the hostkey as passed from libssh2. Since MD5 and SHA1 are not considered trustable anymore, it would be nice to receive the actual hostkey as returned by libssh2.\r\nWould you consider this reasonable enough to accept a pull request?", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brandonio21": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4441", "title": "git_diff_hunk documentation has one-off field descriptions", "body": "The documentation for `git_diff_hunk` has descriptions that are for the wrong fields. (Documentation found https://libgit2.github.com/libgit2/#HEAD/type/git_diff_hunk)\r\n\r\n# Actual:\r\n```\r\nint | old_start\r\n\r\nint | old_lines: Starting line number in old_file\r\n\r\nint | new_start: Number of lines in old_file\r\n\r\nint | new_lines: Starting line number in new_file\r\n\r\nsize_t | header_len: Number of lines in new_file\r\n\r\nchar [128] | header: Number of bytes in header text\r\n```\r\n\r\n# Expected:\r\n```\r\nint | old_start: Starting line number in old_file\r\n\r\nint | old_lines: Number of lines in old_file\r\n\r\nint | new_start: Starting line number in new_file\r\n\r\nint | new_lines: Number of lines in new_file\r\n\r\nsize_t | header_len: Number of bytes in header text\r\n\r\nchar [128] | header: Header text, NUL-byte terminated\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rgburke": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4428", "title": "git_revwalk_next is slow on first iteration since v0.25", "body": "git_revwalk_next is slow on its first iteration for versions 0.25, 0.26 and master when compared to v0.24. This is especially noticeable on large repositories.\r\n\r\n### Reproduction steps\r\nRun the following program on the Linux kernel source tree (https://github.com/torvalds/linux):\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <git2.h>\r\n\r\nint main(int argc, char *argv[]) {\r\n        git_libgit2_init();\r\n\r\n        git_repository *repo;\r\n        if (git_repository_open(&repo, \".git\")) {\r\n                fprintf(stderr, \"Failed to open repository\\n\");\r\n                return 1;\r\n        }\r\n\r\n        git_oid oid;\r\n        git_oid_fromstr(&oid, \"a0651c7fa2c088a605f63792279859608ed7f2c8\");\r\n\r\n        git_revwalk *revwalk;\r\n        git_revwalk_new(&revwalk, repo);\r\n        git_revwalk_sorting(revwalk, GIT_SORT_TIME);\r\n        git_revwalk_push(revwalk, &oid);\r\n\r\n        if (!git_revwalk_next(&oid, revwalk)) {\r\n                git_commit *commit;\r\n\r\n                if (git_commit_lookup(&commit, repo, &oid)) {\r\n                        fprintf(stderr, \"Failed to lookup commit\\n\");\r\n                        return 1;\r\n                }\r\n\r\n                printf(\"%s\\n\", git_commit_message(commit));\r\n                git_commit_free(commit);\r\n        }\r\n\r\n        git_revwalk_free(revwalk);\r\n        git_repository_free(repo);\r\n\r\n        return 0;\r\n}\r\n```\r\n\r\n### Expected behavior\r\nWhen using v0.24 this program runs in a couple of milliseconds:\r\n```\r\nrichard@DevNew:~/code/linux$ time ./revwalktest >/dev/null\r\n\r\nreal\t0m0.006s\r\nuser\t0m0.000s\r\nsys\t0m0.006s\r\n```\r\n\r\n### Actual behavior\r\nWhen using v0.25, v0.26 or master this program has not completed after 1 minute:\r\n```\r\nrichard@DevNew:~/code/linux$ timeout 60s ./revwalktest\r\nrichard@DevNew:~/code/linux$ echo $?\r\n124\r\n```\r\n\r\n### Version of libgit2 (release number or SHA1)\r\nv0.25, v0.26 & master\r\n\r\n### Operating system(s) tested\r\n```\r\nLinux DevNew 4.13.0-17-generic #20-Ubuntu SMP Mon Nov 6 10:04:08 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\n```", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ColMelvin": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4425", "title": "git_index_add_frombuffer creates 0160000 mode objects as blobs", "body": "The `git_index_add_frombuffer` function accepts the commit mode, `0160000`, when creating a new entry from a buffer.  However, it creates the commit mode entry as a blob.  Since a blob object and a commit object with the exact same data will have a different SHA-1 checksum, this behavior may lead to unexpected results.\r\n\r\nNotably, `git_index_add_frombuffer` will return an error when the tree mode, `040000`, is provided for the mode.  I think the same should happen for `0160000`.\r\n\r\n### Reproduction steps\r\nThe reproduction code below uses a modified version of Perl's Git::Raw v0.74, available at https://github.com/jacquesg/p5-Git-Raw/pull/191.  This modification will hopefully be included in v0.75.\r\n\r\n```perl\r\n#!/usr/bin/perl\r\n\r\nuse strict;\r\nuse warnings;\r\n\r\nuse File::Temp;\r\nuse Git::Raw;\r\nuse Test::More tests => 3;\r\n\r\nmy $dir   = File::Temp->newdir();\r\nmy $repo  = Git::Raw::Repository->init( $dir->dirname, 1 );\r\nmy $index = $repo->index;\r\n\r\nmy $COMMIT_DATA = \"tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904\\x0aauthor A U Thor <author\\@example.com> 1234567890 +0000\\x0acommitter C O Mitter <committer\\@example.com> 1234567890 +0000\\x0a\\x0aEmpty\\x0a\";\r\nmy $COMMIT_SHA  = '746262f5c8ed0115432581c2bcf8f08c77ae76c8';\r\n\r\n$index->add_frombuffer( 'submodule', $COMMIT_DATA, 0160000 );\r\nmy $tree = $index->write_tree;\r\n\r\nmy ($entry) = $tree->entries;\r\nis $entry->file_mode,  0160000;               # Passes\r\nisa_ok $entry->object, 'Git::Raw::Commit';    # Fails\r\nis $entry->object->id, $COMMIT_SHA;           # Fails\r\n\r\nexit;\r\n\r\n# Sanity check proving actual commit value\r\nmy $hash = qx{cd '$dir'; echo -n '$COMMIT_DATA' | git hash-object -t commit --stdin};\r\nchomp $hash;\r\nis $hash, $COMMIT_SHA;                        # Passes\r\n```\r\n\r\n### Expected behavior\r\n\r\nEither:\r\n- all tests pass, or\r\n- script dies at `$index->add_frombuffer( 'submodule', $COMMIT_DATA, 0160000 );` with 'invalid filemode'\r\n\r\n### Actual behavior\r\n\r\nScript runs to completion; 2nd & 3rd tests fail.\r\n\r\n```\r\n1..3\r\nok 1\r\nnot ok 2 - An object of class 'Git::Raw::Blob' isa 'Git::Raw::Commit'\r\n#   Failed test 'An object of class 'Git::Raw::Blob' isa 'Git::Raw::Commit''\r\n#   at proof line 22.\r\n#     The object of class 'Git::Raw::Blob' isn't a 'Git::Raw::Commit'\r\nnot ok 3\r\n#   Failed test at proof line 23.\r\n#          got: 'f8aabe3d076ed2278a652ba6d76ea152148daa3c'\r\n#     expected: '746262f5c8ed0115432581c2bcf8f08c77ae76c8'\r\n# Looks like you failed 2 tests of 3.\r\n```\r\n\r\n### Version of libgit2 (release number or SHA1)\r\nTested Git::Raw v0.74 (ee89941fa2 of libgit2, per Changes file).\r\n\r\nInspection of the code suggests the issue remains (as of 364184acca0d993deaeb060197b595f7c49ea226)\r\n\r\n### Operating system(s) tested\r\nLinux 3.10.0-514.26.2.el7.x86_64\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gaborbernat": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4415", "title": "Report test durations with clar", "body": "I've wrote an extension into clar to report durations on demand, in format of:\r\n\r\n```c\r\nprintf(\"  -dn\\tReport durations of the top n slowest tests in ms, e.g. -d10\\n\");\r\n```\r\n\r\n```bash\r\nlibgit2_clar -v -v -d25\r\n\r\nLoaded 340 suites, with 2506 tests, starting\r\n\r\nran 2433 [2397 passed 36 skipped] in 333 suits in 43.7214 seconds\r\n\r\nTop 25 test evaluation times in ms:\r\n2502.6315 clone::nonetwork::bad_urls\r\n1111.1662 core::zstream::big_data\r\n 498.5121 blame::simple::trivial_libgit2\r\n 346.1820 checkout::crlf::matches_core_git\r\n 299.3988 object::cache::fast_thread_rush\r\n 298.6351 threads::diff::with_concurrent_index_modified\r\n 257.4852 object::cache::threadmania\r\n 162.3048 diff::parse::can_parse_generated_diff\r\n 121.9734 core::oidmap::hash_collision\r\n 116.2710 merge::workdir::dirty::honors_cache\r\n 114.6746 diff::submodules::diff_ignore_options\r\n 112.3485 threads::diff::concurrent_diffs\r\n 106.4189 worktree::worktree::init_submodule\r\n  98.8718 config::write::can_set_an_empty_value\r\n  94.2872 status::submodules::broken_stuff_that_git_allows\r\n  90.4623 diff::workdir::submodules\r\n  89.8349 submodule::lookup::foreach_in_bare_repository_fails\r\n  89.7569 config::write::delete_inexistent\r\n  88.5733 submodule::lookup::just_added\r\n  86.3755 submodule::lookup::lookup_even_with_missing_index\r\n  85.0477 config::write::write_subsection\r\n  82.0111 submodule::add::url_absolute\r\n  79.5596 submodule::status::ignore_untracked\r\n  79.5344 submodule::open::direct_open_succeeds\r\n  79.3397 index::addall::removes_deleted_conflicted_files\r\n\r\nProcess finished with exit code 0\r\n```\r\n\r\nI could create a PR if you guys thing this would provide value, on the top of the adding more verbose mode to clar.", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4405", "title": "add a more verbose mode to the test runner with better progress reporting", "body": "```bash\r\nLoaded 340 suites, with 2504 tests, starting\r\n\r\nattr::ignore [#1 with 18 tests]\r\n  honor_temporary_rules [#1] .\r\n  allow_root [#2] .\r\n  ignore_space [#3] .\r\n  ignore_root [#4] .\r\n  full_paths [#5] F\r\n  more_starstar_cases [#6] .\r\n  leading_stars [#7] .\r\n  globs_and_path_delimiters [#8] .\r\n  skip_gitignore_directory [#9] .\r\n  subdirectory_gitignore [#10] .\r\n  expand_tilde_to_homedir [#11] .\r\n  gitignore_in_subdir [#12] .\r\n  dont_ignore_files_for_folder [#13] .\r\n  symlink_to_outside [#14] S\r\n  test [#15] .\r\n  unignore_dir_succeeds [#16] .\r\n  case_insensitive_unignores_previous_rule [#17] .\r\n  case_sensitive_unignore_does_nothing [#18] .\r\n\r\n  1) Failure:\r\nattr::ignore::full_paths [C:\\Users\\berna\\git\\libgit2\\tests\\attr\\ignore.c:83]\r\n  expected != is_ignored\r\n  0 != 1\r\n\r\n\r\nran 18 [16 passed 1 skipped 1 failed] in 1 suits in 2.9370 seconds\r\n```", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ethomson": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4413", "title": "Improve build error reporting", "body": "We should fail the builds:\r\n\r\n1. Whenever valgrind pops up warnings.  (There are known warning points - eg, the TLS libraries and our (intentional) large malloc test which we should not be executing, obviously.)\r\n2. Whenever we have memory leaks on Windows.\r\n\r\nThis would keep us from having to go through and deal with these every `<n>` months, because that's terrible.", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4404", "title": "Document the release steps", "body": "We should make sure that the release process is documented and accurate so that anybody can do it.  \ud83d\ude8c factor.\r\n\r\nThe subversion project rotates release managers through every release so that everybody is able to do it.  We should consider doing the same.\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3791", "title": "Diff sometimes returns that files are 0 bytes when added", "body": "I'm leaving this issue here as a placeholder for myself to investigate further.  Report from customer is that sometimes diff returns `0` file size, which a quick glance suggests is accurate and we should probably not be doing that.  This appears to be an optimization on our part but is very odd and we should at least have an option to always return this data (it _appears_ that we do not from a first glance).  The current behavior also seems like a bit of a surprising default but let's reconsider that when we have more data about the problem.\n\nI was surprised by this, but `git_diff_tform` appears to always load these and then populate it?  Haven't dug very deeply.\n\nExample to repro: the `diff::tree::options` test compares trees that will create `ADDED` deltas with `0` byte files on the `new` side.  (They are not in fact 0 byte files.)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3778", "title": "`index.h` could use some love", "body": "`index.h` lacks some documentation.  We could also probably fix up some of the naming of the types.  (A particularly disappointing example is `git_indxentry...` (with a `n`, which is unlike all the other types).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3622", "title": "Cannot clone repo with tags w/ invalid chars (win32)", "body": "Reported by @tkelman in #3588:\n\n> I see a similar failure of libgit2 to clone a repo when any of its tags have quotes in them, e.g. https://github.com/tkelman/Example.jl/releases\n> \n> ```\n> #include \"git2.h\"\n> void main() {\n>     git_repository* repo_ptr = NULL;\n>     char* repo_url = \"https://github.com/tkelman/Example.jl\"; // fails, change tkelman to JuliaLang (no illegal tag names) and it works\n>     char* repo_path = \"Example.Bare\";\n>     git_clone_options clone_opts = GIT_CLONE_OPTIONS_INIT;\n>     clone_opts.bare = 1;\n>     git_libgit2_init();\n>     git_clone(&repo_ptr, repo_url, repo_path, &clone_opts);\n>     git_libgit2_shutdown();\n> }\n> ```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3622/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3053", "title": "Support `core.longpaths` on Windows", "body": "At some point we need to support the `core.longpaths` configuration setting and deal with Windows paths that are longer than `MAX_PATH`.\n- [ ] Change all the UTF8 to UTF16 code to not assume `MAX_PATH`\n- [ ] Change the checkout path sanitizer to (optionally) allow for long paths\n- [ ] Tests tests tests tests tests\n\nQuestions:\n- [ ] Do long paths work over SMB?\n\nWe will need copious tests here:\n- [ ] Test that we can create a folder whose absolute path would be longer than 260 characters\n- [ ] Test that a file can be created whose absolute path would be longer than 260 characters (inside a directory that is not excessively long)\n- [ ] Test a filename (just the name portion) that is itself longer than 260 characters\n- [ ] Ensure that we can't suddenly write long references\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3053/reactions", "total_count": 4, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2522", "title": "\"Partially succeeded\" or \"succeeded with errors\"", "body": "We have an interesting dilemma where some git smart HTTP instance puked all over itself _after_ successfully updating its refs, and then reported this failure very poorly, in a way that violates its own protocol.\n\nGit is sending:\n\n```\n00000000  30 30 33 30 01 30 30 30  65 75 6e 70 61 63 6b 20  |0030.000eunpack |\n00000010  6f 6b 0a 30 30 31 39 6f  6b 20 72 65 66 73 2f 68  |ok.0019ok refs/h|\n00000020  65 61 64 73 2f 6d 61 73  74 65 72 0a 30 30 30 30  |eads/master.0000|\n00000030  30 30 36 65 02 54 68 65  72 65 20 77 61 73 20 61  |006e.There was a|\n00000040  20 70 72 6f 62 6c 65 6d  20 73 65 6e 64 69 6e 67  | problem sending|\n00000050  20 74 68 65 20 62 75 69  6c 64 20 6e 6f 74 69 66  | the build notif|\n00000060  69 63 61 74 69 6f 6e 20  66 6f 72 20 27 6d 61 73  |ication for 'mas|\n00000070  74 65 72 27 2e 20 59 6f  75 72 20 63 68 61 6e 67  |ter'. Your chang|\n00000080  65 73 20 77 65 72 65 20  73 75 63 63 65 73 73 66  |es were successf|\n00000090  75 6c 6c 79 20 70 75 73  68 65 64 2e 0d 0a 66 61  |ully pushed...fa|\n000000a0  74 61 6c 3a 20 27 72 65  70 61 63 6b 27 20 61 70  |tal: 'repack' ap|\n000000b0  70 65 61 72 73 20 74 6f  20 62 65 20 61 20 67 69  |pears to be a gi|\n000000c0  74 20 63 6f 6d 6d 61 6e  64 2c 20 62 75 74 20 77  |t command, but w|\n000000d0  65 20 77 65 72 65 20 6e  6f 74 0a 61 62 6c 65 20  |e were not.able |\n000000e0  74 6f 20 65 78 65 63 75  74 65 20 69 74 2e 20 4d  |to execute it. M|\n000000f0  61 79 62 65 20 67 69 74  2d 72 65 70 61 63 6b 20  |aybe git-repack |\n00000100  69 73 20 62 72 6f 6b 65  6e 3f 0a 65 72 72 6f 72  |is broken?.error|\n00000110  3a 20 66 61 69 6c 65 64  20 74 6f 20 72 75 6e 20  |: failed to run |\n00000120  72 65 70 61 63 6b 0a 30  30 30 30                 |repack.0000|\n0000012b\n```\n\nThe `006e` indicates the length of the next hunk, which stops just before `fatal`.  Thus `fata` should be the length of the next hunk (in hex) but obviously is not.  My understanding of the protocol, as well as libgit2's, as well as git core's says this is terribly wrong.  git core says:\n\n```\nCounting objects: 3, done.\nWriting objects: 100% (3/3), 211 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nremote: There was a problem sending the build notification for 'master'. Your ch\nremote: re successfully pushed.\nfatal: The remote end hung up unexpectedly\nerror: error in sideband demultiplexer\nTo http://git.edwardthomson.com/libgit2_break\n * [new branch]      master -> master\n```\n\nSo git is smart enough here to update `refs/remotes/origin/master` but still vomit up an error.  I would like to do the same.\n\nYou're going to say that this is terrible and disgusting on a lot of levels.\n\n![I know it.](http://edwardthomson.com/silly/shut_up_baby_i_know_it.jpg)\n\nMy initial thought was to add a new `GIT_EPARTIAL` (for example) error code that indicated a partial success, meaning:\n- Whatever objects being populated (in this case, the `git_push`) are actually populated and usable, and \n- The thread's git error is populated with informative information\n\nThis seems very reasonable to me from a C perspective, but is this _at all_ sane for bindings?  What would LibGit2Sharp do here, for example?  It would not throw an exception, but instead throw some failure flag into the push result?  If that's the case, then maybe I should just populate the `git_push` with some protocol failure information as well.\n\nThoughts?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/1901", "title": "Status should report conflicts", "body": "It seems that status should report conflicts.  _How?_  What does this look like?\n\n`git-status` will not take the working directory into account when reporting status.  Do consumers _want_ to see anything from `HEAD` or the working directory?  Or does one just want a description of the conflict (eg, `GIT_STATUS_CONFLICT_BOTH_ADDED`) and a link to the ancestor / ours / theirs data?\n\n(This is basically what we do in VS - we merge the results of status and the conflicts in the index.  And this would be my proposal, but I don't want to be short-sighted here, which is why I'm asking.)\n\nIf we _should_ provide some data about HEAD or the working directory, what?  And how?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/1901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/45f584090818c59ba27ca95b1e930a41c424d6f1", "message": "Merge pull request #4484 from pks-t/pks/fail-creating-branch-HEAD\n\nbranch: refuse creating branches named 'HEAD'"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/4ea8035dcf7fed2f08f050a5e54149090c748aac", "message": "Merge pull request #4478 from libgit2/cmn/packed-refs-sorted\n\nrefs: include \" sorted \" in our packed-refs header"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/5171f44cef8a0f0dfadcaf371c689cfcf43222b0", "message": "Merge pull request #4483 from libgit2/cmn/prettify-docs\n\nmessage: update docs for git_message_prettify"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/da9898aba0fe26ea683822e99853bfb2b02ac744", "message": "travis: fetch trusty dependencies from bintray\n\nThe trusty dependencies are now hosted on Bintray."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/70db57d4a431dae2edcf19e92a84db8d6cf4f935", "message": "Merge pull request #4398 from pks-t/pks/generic-sha1\n\ncmake: allow explicitly choosing SHA1 backend"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/eebc5e0d72c86634e6cd6fcc1306c309c02f87af", "message": "Merge pull request #4257 from pks-t/pks/stale-test\n\nExecute stale tests"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/a223bae5cf7629fb77b2af0b0df9d02c634520c0", "message": "Merge pull request #4437 from pks-t/pks/openssl-hash-errors\n\nhash: openssl: check return values of SHA1_* functions"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/399c0b194045be1a7f6440347ce3e08ffc1b8584", "message": "Merge pull request #4462 from pks-t/pks/diff-generated-excessive-stats\n\ndiff_generate: avoid excessive stats of .gitattribute files"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/7610638ec829ffd6da6d5f74b5b14dbb32b74924", "message": "Merge pull request #4453 from libgit2/ethomson/spnego\n\nwinhttp: properly support ntlm and negotiate"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/2c99011a80dcd460dadd271f279c9dc6d3c8d2a1", "message": "tree: standard error messages are lowercase\n\nOur standard error messages begin with a lower case letter so that they\ncan be prefixed or embedded nicely.\n\nThese error messages were missed during the standardization pass since\nthey use the `tree_error` helper function."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/346c1b169d0c15adeef496e24db6ac9801b4283d", "message": "docs: git_treebuilder_insert validates entries\n\nThe documentation for `git_treebuilder_insert` erroneously states that\nwe do not validate that the entry being inserted exists.  We do, as of\nhttps://github.com/libgit2/libgit2/pull/3633.  Update the documentation\nto reflect the new reality."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/d621024508d8264ad63df683dfe1327224eb7143", "message": "Merge pull request #4159 from richardipsum/notes-commit\n\nSupport using notes via a commit rather than a ref"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/8cdf439b7714449eaddf5564933cd2fee1fc02cb", "message": "Merge pull request #4028 from chescock/improve-local-fetch\n\nTransfer fewer objects on push and local fetch"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/2b7a3393beefa08656ffbd2c6725e5e52e3b8af2", "message": "Merge pull request #4455 from libgit2/ethomson/branch_symlinks\n\nrefs: traverse symlinked directories"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/e14bf97ebbed574dd23dc937a05994074baad91c", "message": "Merge pull request #4443 from libgit2/ethomson/large_loose_blobs\n\nInflate large loose blobs"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/7a830f28d2795da60b8be534f448cb026071462f", "message": "refs:iterator: add tests to recurse symlinks\n\nEnsure that we can recurse into directories via symbolic links."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/9e94b6af2fccd522de55d67074e62b726028ac4a", "message": "iterator: cleanups with symlink dir handling\n\nPerform some error checking when examining symlink directories."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/526dea1c3ca11e83efca16aa8e5a4479ff542c5d", "message": "winhttp: properly support ntlm and negotiate\n\nWhen parsing unauthorized responses, properly parse headers looking for\nboth NTLM and Negotiate challenges.  Set the HTTP credentials to default\ncredentials (using a `NULL` username and password) with the schemes\nsupported by ourselves and the server."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/083b1a2e2d8d190db02db3db0dad4fa742eccb02", "message": "Merge pull request #4021 from carlosmn/cmn/refspecs-fetchhead\n\nFETCH_HEAD and multiple refspecs"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/4110fc8444080aa50449630b634d7337c30924b8", "message": "Merge pull request #4285 from pks-t/pks/patches-with-whitespace\n\npatch_parse: fix parsing unquoted filenames with spaces"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/d734466cc021f505ed5cf84e10f0a6106d8a1e75", "message": "Merge pull request #4045 from lhchavez/fix-unpack-double-free\n\nFix unpack double free"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/9f7ad3c5d34d35a5ec2f34fa9cd8c92eff439329", "message": "Merge pull request #4430 from tiennou/fix/openssl-x509-leak\n\nFree OpenSSL peer certificate"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/30d9176013cbaaced4b94f11717d259909bb8f81", "message": "Merge pull request #4435 from lhchavez/ubsan-shift-overflow\n\nlibFuzzer: Prevent a potential shift overflow"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/1ddc57b3d377221345a881642f2726cd718fe8ca", "message": "Merge pull request #4402 from libgit2/ethomson/iconv\n\ncmake: let USE_ICONV be optional on macOS"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/06f3aa5f6be216b8074ca7958067a41c8d538937", "message": "Merge pull request #4429 from novalis/delete-modify-submodule-merge\n\nDo not attempt to check out submodule as blob when merging a submodule modify/deltete conflict"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/456e52189c95315028d668f9e508798d490765e2", "message": "tests: add GITTEST_SLOW env var check\n\nWriting very large files may be slow, particularly on inefficient\nfilesystems and when running instrumented code to detect invalid memory\naccesses (eg within valgrind or similar tools).\n\nIntroduce `GITTEST_SLOW` so that tests that are slow can be skipped by\nthe CI system."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/bdb542143909fc278c8ba89b0c64cdf72fcaf7d2", "message": "hash: commoncrypto hash should support large files\n\nTeach the CommonCrypto hash mechanisms to support large files.  The hash\nprimitives take a `CC_LONG` (aka `uint32_t`) at a time.  So loop to give\nthe hash function at most an unsigned 32 bit's worth of bytes until we\nhave hashed the entire file."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/a89560d5693a2f43cc852cb5806df837dc79b790", "message": "hash: win32 hash mechanism should support large files\n\nTeach the win32 hash mechanisms to support large files.  The hash\nprimitives take at most `ULONG_MAX` bytes at a time.  Loop, giving the\nhash function the maximum supported number of bytes, until we have\nhashed the entire file."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/3e6533ba12c1c567f91efe621bdd155ff801877c", "message": "odb_loose: reject objects that cannot fit in memory\n\nCheck the size of objects being read from the loose odb backend and\nreject those that would not fit in memory with an error message that\nreflects the actual problem, instead of error'ing later with an\nunintuitive error message regarding truncation or invalid hashes."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/8642feba7429ac2941a879a0870a84a83a3664cd", "message": "zstream: use UINT_MAX sized chunks\n\nInstead of paging to zlib in INT_MAX sized chunks, we can give it\nas many as UINT_MAX bytes at a time.  zlib doesn't care how big\na buffer we give it, this simply results in fewer calls into zlib."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/ddefea750adcde06867b49d251760844540919fe", "message": "odb: support large loose objects\n\nzlib will only inflate/deflate an `int`s worth of data at a time.\nWe need to loop through large files in order to ensure that we inflate\nthe entire file, not just an `int`s worth of data.  Thankfully, we\nalready have this loop in our `git_zstream` layer.  Handle large objects\nusing the `git_zstream`."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/d1e446550a966a1dbc5d765aa79fe9bc47a1c1a3", "message": "object: introduce git_object_stringn2type\n\nIntroduce an internal API to get the object type based on a\nlength-specified (not null terminated) string representation.  This can\nbe used to compare the (space terminated) object type name in a loose\nobject.\n\nReimplement `git_object_string2type` based on this API."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/dacc32910e36e79ba108bef507e3aec9b0626e3c", "message": "odb: test loose reading/writing large objects\n\nIntroduce a test for very large objects in the ODB.  Write a large\nobject (5 GB) and ensure that the write succeeds and provides us the\nexpected object ID.  Introduce a test that writes that file and\nensures that we can subsequently read it."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/86219f40689c85ec4418575223f4376beffa45af", "message": "util: introduce `git__prefixncmp` and consolidate implementations\n\nIntroduce `git_prefixncmp` that will search up to the first `n`\ncharacters of a string to see if it is prefixed by another string.\nThis is useful for examining if a non-null terminated character\narray is prefixed by a particular substring.\n\nConsolidate the various implementations of `git__prefixcmp` around a\nsingle core implementation and add some test cases to validate its\nbehavior."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/b7d36ef4a644c69c37e64c7c813546a68264b924", "message": "zstream: treat `Z_BUF_ERROR` as non-fatal\n\nzlib will return `Z_BUF_ERROR` whenever there is more input to inflate\nor deflate than there is output to store the result.  This is normal for\nus as we iterate through the input, particularly with very large input\nbuffers."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/a08672425d75a9a237d6282a53023faae091839b", "message": "Merge pull request #4449 from libgit2/charliesome/git-authors-jonathan-tan\n\nAdd Jonathan Tan to git.git-authors"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/fa8cf14f2ec888bf56e9bed58499736eac8ae040", "message": "Merge pull request #4447 from pks-t/pks/diff-file-contents-refcount-blob\n\ndiff_file: properly refcount blobs when initializing file contents"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/429bb3575474a3d25ee1c9814612d8d01b3378e8", "message": "Merge pull request #4318 from Uncommon/amend_status\n\nAdd git_status_file_at"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/344b4ead60da5fc3514f602a8e1a6af15173cc31", "message": "Merge pull request #4427 from pks-t/pks/openssl-threadid\n\nopenssl: fix thread-safety on non-glibc POSIX systems"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/494a2f235fd13de5f927ad64db0b3597569f02b9", "message": "Merge pull request #4426 from pks-t/pks/diff-flag-set-fix\n\ndiff_generate: fix unsetting diff flags"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/6cf53e8f98bec69ff4129fbb494b3995c8916389", "message": "Merge pull request #4424 from tiennou/fix/incorrect-winhttp-cert-payload\n\nUse the same cert checking payload in WinHTTP"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/a9b66677bc1fe9a39c2fa9e5421feaeb8a223299", "message": "Merge pull request #4422 from pks-t/pks/commit-msg-style\n\nCONTRIBUTING: add documentation of our commit message style"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/fa767daa34fc27fcf7956d312572d7ec9f462a77", "message": "Merge pull request #4410 from libgit2/ethomson/readme\n\nGetting started README improvements"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/5bcaba5d1bf0d917728f0d393fff62aed2d393b3", "message": "README: add up some marketing"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/8cbfa1839f599148449c0e8ee7f9320586c9316c", "message": "README: document test output"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/d8c603aa39ba572090749464d80db746e2351985", "message": "TROUBLESHOOTING: introduce guide for common errors\n\nIntroduce a simple FAQ for common errors for people getting started with\nthe project."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/c5d8682fad389473ae931250ef352acd17e0d520", "message": "README: clarify why one would run libgit2_clar\n\nSince we recommend `ctest -V`, it's not clear why somebody would want to\nrun `libgit2_clar`.  Indicate that it's helpful when running individual\ntests or suites."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/9e91a989f81f1f80b551c2398cfa9739e6740b0a", "message": "README: provide quick start paragraph\n\nProvide a very simple quick start paragraph that highlights how easy it\nis to get started, and points people toward common problems."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/dc985353cfaca434b8a712c1186b6dbbc8c4dba3", "message": "README: drop VS command shell instructions\n\nUsers should not be advised to use the VS command prompt; instead, they\nshould let cmake find their Visual Studio installation."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/b2d54cfa345edfece7c214f7f2521ecd9d5c3097", "message": "README: suggest `ctest -V` for getting started\n\nSuggest that users run `ctest -V` instead of `make test` when getting\nstarted.  `ctest -V` is superior over alternatives as:\n\n1. Unlike `make test`, it gives output.  Users getting started with\n   the library believe that it is hung.\n2. `ctest -V` shows verbose output; showing suite names is helpful for\n   giving users more feedback immediately."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/530c878d417ea6e736addcd1c26db738cee607f6", "message": "Merge pull request #4414 from cpoerschke/master-test-status-codes-legend\n\nadd test status codes legend to the 'Started' test trace"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/1d7c15adf983853cf8df03dc0af411df3fa5fa07", "message": "Merge pull request #4310 from pks-t/pks/common-parser\n\nCommon parser interface"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/bbb213c1d21c3efda1c2ccfe3a39524cad5370fa", "message": "cmake: let USE_ICONV be optional on macOS\n\nInstead of forcing iconv support on macOS (by forcing `USE_ICONV`\non), honor the `USE_ICONV` option only on macOS.\n\nAlthough macOS includes iconv by default, some macOS users may have a\ndeficient installation for some reason and they should be provided a\nworkaround to use libgit2 even in this situation.\n\niconv support is now disabled entirely on non-macOS platforms.  No other\nplatform supports core.precomposeunicode, and iconv should never be\nlinked."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/46e1dabb8037a284eba491c34b27a257768e416c", "message": "Merge pull request #4403 from hkleynhans/select_bundled_zlib\n\ncmake: Allow user to select bundled zlib"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/0393ecc6f8bb19e4ba55fd45e7bbde6596f9b334", "message": "Merge pull request #4308 from pks-t/pks/header-state-machine\n\npatch_parse: implement state machine for parsing patch headers"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/5a061a23afa5dd026f130d83ea6d5ed58bce79d4", "message": "Merge pull request #4401 from ktdreyer/describe-h-spelling\n\ndescribe.h: fix spelling in comments"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/28c89507d1b9e1013e690adc1ef16f30bd3fa4f5", "message": "Merge pull request #4394 from libgit2/cmn/macos-ramdisk\n\ntravis: put clar's sandbox in a ramdisk on macOS"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/1082eabb680cf6083f59071918d007d5314c59ea", "message": "Merge pull request #4397 from pks-t/pks/appveyor-examples\n\nappveyor: build examples"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/45c6efd5921d9ee854cf532ca16ebd1fa1b19bac", "message": "travis: grab pgp key from www.edwardthomson.com\n\nGetting the key from the MIT keyserver is surprisingly unreliable.\nTry getting it from my website instead..."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/781d73bfb0cbc218c7f82b78a9fce51f29719535", "message": "Merge pull request #4357 from invenia/cv/ssh-passphrase-incorrect\n\nAsk for SSH credentials again when passphrase is wrong"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/70e4a31a0ea52732354490162609bcee27f4ca95", "message": "Merge pull request #4384 from pks-t/pks/rm-example-makefile\n\nexamples: remove Makefile"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/8f05d2d81643177ce44d1449a551ef206b18cd5e", "message": "Merge pull request #4382 from pks-t/pks/cmake-source-dir\n\ncmake: use project-relative binary and source directories"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/8ac8c78c35905f7f9cc37f240c3d633a7cc5a5e3", "message": "Merge pull request #4356 from pks-t/pks/static-clar\n\ncmake: use static dependencies when building static libgit2"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/34ec6f3aeb1abc8f66b3154b39a36c959c852a46", "message": "Merge pull request #4372 from pks-t/pks/xcode-linking\n\ncmake: fix linking in Xcode with object libraries only"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/9840dad26706d5c9d9dcfb2de9251a7f05790ebf", "message": "Merge pull request #4368 from pks-t/pks/smart-negotiate-revwalk-memleak\n\ntransports: smart: fix memory leak when skipping symbolic refs"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/21e6a11a55fc2ca0f7385ef2f43cd75090a10d5f", "message": "Merge pull request #4359 from libgit2/cmn/proxy-options-free\n\nPlug some leaks in curl's proxy handling"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/128c5ca930fb30fff36e1eb5ff95c61ecd074edf", "message": "checkout: do not test file mode on Windows\n\nOn Windows, we do not support file mode changes, so do not test\nfor type changes between the disk and tree being checked out.\n\nWe could have false positives since the on-disk file can only have\nan (effective) mode of 0100644 since NTFS does not support executable\nfiles.  If the tree being checked out did have an executable file,\nwe would erroneously decide that the file on disk had been changed."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/58deac7758296f115bcbc3a7bbcfcae3eda07f0a", "message": "Merge pull request #4370 from libgit2/example_general\n\nFix Issue #4047 Check return codes and free objects"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/e523826c4ec2b7e8757f31490ba41005420d1c52", "message": "Merge pull request #4321 from libgit2/ethomson/libcurl_build\n\ntravis: add custom apt sources"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/668fa071ffcf11a6d706a5df66a7ddaadec4ba4a", "message": "Merge pull request #4363 from cjhoward92/typedef-push-update-reference\n\nremote: add typedef to normalize push_update_reference callback"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/e2e3943db59e034cfbe082b321fe6205576ce348", "message": "Merge pull request #4367 from pks-t/pks/peel-peeled-to-tag\n\nrefs: do not use peeled OID if peeling to a tag"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/9dc21efdbf275dec18b9c34b472f8df9f8e8c169", "message": "travis: add custom apt sources\n\nMove back to Travis's VM infrastructure for efficiency."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/524c1d3c9eef1f63d058ca5d4a61af7d5588ebfb", "message": "Merge pull request #4334 from pks-t/pks/reproducible-builds\n\nReproducible builds"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/212da30dbf18924cb8878348657a048698856be3", "message": "Merge pull request #4348 from pks-t/pks/win32-hash-memleak\n\ndiff: cleanup hash ctx in `git_diff_patchid`"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/d378e3840dd00523e266c24bf6173a98fa139a00", "message": "Merge pull request #4347 from pks-t/pks/appveyor-vs2015\n\nFix AppVeyor build failures due to CRTDBG linking issue"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/e098b5f5071ca3eeee138785de1b8db3c1152f8d", "message": "Merge pull request #4344 from slavikus/fix-dirty-buffer-in-git-push-update-tips\n\nClear the remote_ref_name buffer in git_push_update_tips()"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/71a8204d380f02d379d85706ba1e1ec32d9e6c2c", "message": "Merge pull request #4346 from pks-t/pks/wo-features-header\n\nfeatures.h: allow building without CMake-generated feature header"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/3c21645360a0b06d6ed5f028e9517d65f8e11bc1", "message": "Merge pull request #4296 from pks-t/pks/pattern-based-gitignore\n\nFix negative ignore rules with patterns"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/4b000fc0d82b33a991f24d758d2520f8ada4ca84", "message": "Merge pull request #4305 from pks-t/pks/submodule-with-bare-repo\n\nSubmodules with bare repo"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/bcb7e92d907385459bcdf7900538a98990f19833", "message": "Merge pull request #4279 from pks-t/pks/error-builds\n\n-Werror builds for Travis"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/0a93ded1b931c0cd3476300a0794dc2f3e946356", "message": "Merge pull request #4282 from pks-t/pks/remove-unused-clar-fixtures\n\nSplit up CMakeLists.txt build instructions"}], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4491", "title": "Recursive merge: reverse the order of merge bases", "body": "When git encounters multiple merge bases during a recursive merge of two commits, it reverses the order of the merge bases before starting the recursive merge.  This was introduced in [8918b0c](https://github.com/git/git/commit/8918b0c9c2667c5a69461955135c709b09561f72):\r\n\r\n> It seems to be the only sane way to do it: when a two-head merge is\r\n> done, and the merge-base and one of the two branches agree, the\r\n> merge assumes that the other branch has something new.\r\n>\r\n> If we start creating virtual commits from newer merge-bases, and go\r\n> back to older merge-bases, and then merge with newer commits again,\r\n> chances are that a patch is lost, _because_ the merge-base and the\r\n> head agree on it. Unlikely, yes, but it happened to me.\r\n\r\nI've updated the tests, with `git` itself, and ensuring that we produce the same output, so many of the unit tests were changed to ensure that we created identical trees to git.  With this change (along with #4488 and #4489), we now produce identical output.\r\n\r\nI have included the changes from #4488 and #4489 here to illustrate.  I suggest we review and merge those and then I will rebase this on top of the updated master.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4490", "title": "status::renames: test update for APFS (write NFD instead of NFC filename)", "body": "Update the status::renames test to create an NFD format filename in the `core.precomposedunicode` tests.\r\n\r\nPreviously, we would create an NFC format filename.  This was to take advantage of HFS+ filesystems, which always use canonically decomposed formats, and would actually write the filename to disk as an NFD filename.  So previously, we could create an NFC filename, but read it normally as an NFD filename.\r\n\r\nBut APFS formats do not force canonically decomposed formats for filenames, so creating an NFC filename does not get converted to NFD.  Instead, the filename will be written in NFC format.  Our test, therefore, does not work - when we write an NFC filename, it will _remain_ NFC.\r\n\r\nUpdate the test to write NFD always.  This will ensure that the file will actually be canonically decomposed on all platforms:  HFS+, which forces NFD, and APFS, which does not.\r\n\r\nThus, our test will continue to ensure that an NFD filename is canonically precomposed on all filesystems.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4489", "title": "Conflict markers should match EOL style in conflicting files", "body": "[Git has updated xdiff](https://github.com/git/git/commit/86efa215276aaeaef0c556c73f1993b6f36dcf91) to produce conflict markers that match the EOL style in the conflicting files.  This means that if you have checked in CR/LF files into your repository, and perform a merge, you will now get a conflict file that _also_ has CR/LF line endings.  \ud83c\udf89 \r\n\r\nUpdate our xdiff to match theirs, to give us this same functionality, and add some unit tests to ensure that it works.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4488", "title": "Use longer conflict markers in recursive merge base", "body": "When producing a virtual merge base during a recursive merge (because our branches have multiple merge bases from a criss-cross merge), our merge base may contain conflicts.\r\n\r\n[Git updated their virtual merge base building to use 9 character conflict markers](https://github.com/git/git/commit/d694a17986a28bbc19e2a6c32404ca24572e400f), which allows users (and programs like `rerere`) to better identify conflicts that occur in the virtual merge base vs conflicts that occur in the actual merge.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4450", "title": "Streaming read support for the loose ODB backend", "body": "Change the streaming reader API a bit, to provide the type and length of the object when initializing the stream. This would be a breaking API change - except, of course, that nobody is actually using the streaming reader API since none of the backends support it. So I feel pretty good breaking this API that nobody could be using.\r\n\r\nAdd streaming reader support to the loose object ODB backend. I cleaned up a bit while I was in there to add some more tests for things like read_header which had no explicit tests (and in fact failed on some of the loose ODB test corpus), teach read_header how to cope with \"packlike loose objects\" (which were a weird loose object format that was attempted for a bit and will never actually be seen in the wild) and drop the odb_loose internal zstream abstraction layer that ultimately became git_zstream.\r\n\r\nNote that this depends on #4443.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4416", "title": "WIP: travis: fail on memory leaks", "body": "Pass `--error-exitcode=125` to valgrind so that it will exit with a non-zero exit code when it detects a memory leak.  Use an exit code of `125` to stay safely above any clar errors and safely below any shell errors.\r\n\r\n**Note**: I suspect that there are some tests that we'll need to either exclude from valgrind's examination, or perhaps not run at all.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/3950", "title": "cmake: use a library target to avoid recompilation", "body": "Instead of listing the sources separately for the git2 target and the libgit2_clar target, create an [\"object library\" target](https://cmake.org/Wiki/CMake/Tutorials/Object_Library).\n\nThe object library will then be used to link both the git2 library target and the libgit2_clar target instead of having to compile all the source twice.  The object library is compiled with the same flags as the prior git2 library target was, so it will correctly use the shared library flags (or the static library flags, if we're building a static libgit2) so the end results should be unchanged.\n", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/3839", "title": "WIP: respect index during checkout", "body": "Our current checkout implementation looks to see if the working directory is dirty to determine whether it's safe to checkout a given file.  It _does not_ look at the index, however.\n\nThis is fine if we're checking out the repository's index itself, but if we're checking out a `git_tree` then we could get into a place where the repository's index has modifications, but the workdir itself has been reverted.  We would obliterate those staged changes.\n\nThis adds checking for changes in the index before checking out (raising conflicts as appropriate otherwise) when a working directory file exists.  This does not yet cover other cases (for example, when an entry exists in the index but not in the working directory.)\n\nI think that we can simply change the `with_wd` case to a `with_wd_or_index` case and use the existing `no_wd` case to be `no_wd_or_index`.\n", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/2492796", "body": "Do you have some pthreads compatibility layer on Windows?  Or are you worried about a Unix platform without pthreads?\n\nEither way, this now actually compiles on Windows and is no less flexible on Unix.\n\nIf you'd prefer a different approach, please submit a PR.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2492796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3108480", "body": "@thmo see https://github.com/libgit2/libgit2/pull/1513\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3108480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/4148283", "body": "Why are you linking against librt on Solaris?  Does that even exist?  \n\nYou need to handle the systems that don't have `CLOCK_MONOTONIC`, there are many.  My (admittedly somewhat old) Solaris box does not support it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/4148283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/4803024", "body": "I'm not in front of my computer now, but I feel like windows doesn't have this header.  Does it?\n\nEven if it does, though, I think this would be stylistically incorrect, we should include `winsock.h` to get `htonl`.\n\nOut of curiosity, where are we calling `htonl` and it's not defined?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/4803024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "edwin0minv": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4395", "title": "git_packbuilder_insert_walk do not check the uninteresting flag in tree and blob ?", "body": "I am studying why it is so slow compare to native git client when try to do git-fetch from a local location (i.e using local.c as transport), \r\nI found \"Counting Objects\" is 1137 (almost whole repo file counts) vs 3 (the actual object changed).\r\nAnd then found the following:\r\n\r\nIn pack-objects.c (lines 1722):\r\n\r\n```\r\nint git_packbuilder_insert_walk(git_packbuilder *pb, git_revwalk *walk)\r\n{\r\n        // ...\r\n\tif ((error = mark_edges_uninteresting(pb, walk->user_input)) < 0)\r\n\t\treturn error;\r\n       // ...\t\r\n\t/* walk down each tree up to the blobs and insert them, stopping when uninteresting */\r\n\twhile ((error = git_revwalk_next(&id, walk)) == 0) {\r\n\t\tif ((error = retrieve_object(&obj, pb, &id)) < 0)\r\n\t\t\treturn error;\r\n\r\n\t\tif (obj->seen || obj->uninteresting)\r\n\t\t\tcontinue;\r\n\r\n\t\tif ((error = insert_commit(pb, obj)) < 0)\r\n\t\t\treturn error;\r\n\t}\r\n\r\n\tif (error == GIT_ITEROVER)\r\n\t\terror = 0;\r\n\r\n\treturn error;\r\n}\r\n```\r\n\r\nAlthough it will ignore the commit object itself if the uninteresting flag is set, but as i follow the code path of **insert_commit**(), it seem to not check the uninteresting flag for its tree objects or blob objects.\r\n\r\nDo i miss something or is it a bug ?\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "omus": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4390", "title": "Configuration functions not case-sensitive", "body": "I've noticed that functions like `git_config_set_string` write variable names in lowercase and `git_config_iterator_glob_new` don't work when you provide non-lowercase input. I would expect that functions which write config variables to retain the provided casing.\r\n\r\nAn example of a git configuration variable that uses uppercase letters is [useHttpPath](https://git-scm.com/docs/gitcredentials#gitcredentials-useHttpPath)\r\n\r\nGit2 version v0.26.0 (15e1193)", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4361", "title": "Config iterators do not retain order", "body": "The `git_config_iterator` does not seem to maintain the ordering of the configuration files. Given the following configuration file:\r\n\r\n```\r\n[credential]\r\n    helper = !echo first\r\n[credential \"https://mygithost\"]\r\n    helper = \"\"\r\n[credential]\r\n    helper = !echo second\r\n```\r\nIterating through this configuration with `git_config_iterator_new` produces results which are out of order. Note that the [ordering here does matter](https://git-scm.com/docs/gitcredentials#gitcredentials-helper).\r\n\r\nLibGit2 version v0.26.0 (15e119375018fba121cf58e02a9f17fe22df0df8)", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/f2f14724eb2192e9dd8374a4e341aa668b036b01", "message": "transports: ssh: ask for credentials again when passphrase is wrong\n\nWhen trying to decode the private key it looks like LibSSH2 returns a\nLIBSSH2_ERROR_PUBLICKEY_UNVERIFIED when the passphrase is incorrect."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gumenikav": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4387", "title": "Ignoring of similarity metric for blob objects with equal oids", "body": "I have noticed that custom similarity metric are ignored if blob objects have identical oids in similarity_measure function:\r\n```cpp\r\n\t/* check OID match as a quick test */\r\n\tif (git_oid__cmp(&a_file->id, &b_file->id) == 0) {\r\n\t\t*score = 100;\r\n\t\treturn 0;\r\n\t}\r\n```\r\nI think, that since custom similarity metric is used, equality of oids doesn't mean equality of objects.\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mattreda": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4377", "title": "git_index_add_all with GIT_INDEX_ADD_FORCE fails if there is an ignored directory", "body": "The following test case (added to the addall suite):\r\n\r\n```\r\nvoid test_index_addall__files_in_ignored_folder(void)\r\n{\r\n\tgit_index *index;\r\n\r\n\taddall_create_test_repo(true);\r\n\r\n\tcl_git_pass(git_repository_index(&index, g_repo));\r\n\tcl_git_pass(git_index_add_all(index, NULL, GIT_INDEX_ADD_FORCE, NULL, NULL));\r\n\r\n\tcl_must_pass(p_mkdir(TEST_DIR \"/subdir.foo\", 0777));\r\n\tcl_git_mkfile(TEST_DIR \"/subdir.foo/file\", \"hello!\\n\");\r\n\tcheck_status(g_repo, 3, 0, 0, 0, 0, 0, 1, 0);\r\n\r\n\tcl_git_pass(git_index_add_all(index, NULL, 0, NULL, NULL));\r\n\tcheck_status(g_repo, 3, 0, 0, 0, 0, 0, 1, 0);\r\n\r\n\tcl_git_pass(git_index_add_all(index, NULL, GIT_INDEX_ADD_FORCE, NULL, NULL));\r\n\tcheck_status(g_repo, 4, 0, 0, 0, 0, 0, 0, 0);\r\n\r\n\tgit_index_free(index);\r\n}\r\n```\r\n\r\nfails with:\r\n\r\n```\r\nindex::addall::files_in_ignored_folder [/tmp/libgit2/tests/index/addall.c:326]\r\n  Function call failed: (git_index_add_all(index, ((void *)0), GIT_INDEX_ADD_FORCE, ((void *)0), ((void *)0)))\r\n  error -1 - invalid path: 'subdir.foo/'\r\n```\r\n\r\nI would expect this to match the behavior of \"git add -f\"", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vadimkantorov": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4376", "title": "Successful cloning a repo using libgit2 compiled to JavaScript with Emscripten", "body": "@petersalomonsen accomplished the feat in this [issue](https://github.com/kripken/emscripten/issues/4902)\r\n\r\nVery few edits to libgit2 were [required](https://github.com/libgit2/libgit2/compare/master...fintechneo:master):\r\n1. chmod in `indexer.c`, `filebuf.c` to explicitly give write permissions on the default read-only Emscripten's file system\r\n2. pwrite in `indexer.c` to explicitly give write permissions to a mmap which is also default read-only in Emscripten\r\n3. disabling http parsing of the response in `transports/http.c`\r\n4. disabling writing http headers in write_chunk in `transports/http.c`\r\n\r\nDropping this here in case anyone wants to prepare these for a proper feature at some point.", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4376/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "simonbyrne": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4366", "title": "Lack of validation of objects in packfile when fetching", "body": "LibGit2 (unlike CLI git) does not seem to validate the contents of the packfile when fetching. \r\n\r\nThis could be a problem when fetching from a possibly compromised source, e.g. create a \"bad\" repository using [this script](https://gist.github.com/simonbyrne/e8923aec3b27b285789efcd616114a95).\r\n\r\nAttempting to clone this using CLI git throws an error:\r\n```\r\nfatal: did not receive expected object 12799ccbe7ce445b11b7bd4833bcc2c2ce1b48b7\r\nfatal: index-pack failed\r\n```\r\nHowever LibGit2 happily fetches the repository. \r\n\r\nWhile LibGit2 will throw an error if you attempt to use the invalid object, CLI git may not (e.g. it will certainly happily checkout invalid loose objects, though maybe not packed files)\r\n\r\nEssentially, the problem is that the \"security barrier\" is in different places for the different programs, so attempting to use both on the same repository may present potential security hole.\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "uzytkownik": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4354", "title": "Hard to create a commit with current state of workdir", "body": "I was looking at the equivalent of `git stash create` and I couldn't find one. The closes I got was:\r\n\r\n- Add all things to index\r\n- Create a new commit\r\n- Reload index from disk\r\n\r\nHowever this seems a bit strange given that I need to undo changes. Even ability to create a temporary indecies associated with repo would make it nicer. Other - possibly more generic - way would be to allow apply diff to tree.", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ankurmittal": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4351", "title": "fetch on arm64 returns user cancelled certificate check", "body": "\r\n### Reproduction steps\r\nsimple fetch on arm64 machine should replicate this issue. git fetch doesn't return this error.\r\n\r\n### Expected behavior\r\nNo error\r\n\r\n### Actual behavior\r\nGetting \"user cancelled certificate check\"\r\n\r\n### Version of libgit2 (release number or SHA1)\r\nv0.26.0\r\n### Operating system(s) tested\r\nubuntu\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4350", "title": "parallel fetches on mac return SecureTransport error", "body": "You are opening a _bug report_ against the libgit2 project.  If you have a\r\nquestion about an API or usage, please ask on StackOverflow:\r\nhttp://stackoverflow.com/questions/tagged/libgit2.  Please fill out the\r\nreproduction steps (below) and delete this introductory paragraph.  Thanks!\r\n\r\n### Reproduction steps\r\nRun multiple fetches in parallel. I am hitting this error with more than 10 parallel fetches and it is consistent on 25 parallel fetches. It doesn't happen on 2-3 parallel fetches.\r\n\r\n### Expected behavior\r\nShould not throw error\r\n### Actual behavior\r\nThrowing error\r\n SecureTransport error: connection closed via error\r\nor \r\nunexpected return value from ssl handshake -9806\r\n\r\n### Version of libgit2 (release number or SHA1)\r\nlibgit2-v0.26.0, git2go-v26\r\n\r\n### Operating system(s) tested\r\nMac\r\n\r\nAdditional info\r\nWe made a slight change on how gitgo it is compiled for our system but I don't think that should cause this error. Please see https://fuchsia.googlesource.com/third_party/git2go/+/4085ea05708d56909c787d12b1157754d33cd0ea%5E%21/#F1 for the change\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4177", "title": "Support http cookie file", "body": "This patch supports passing http cookiefile when libcurl is present\r\n#3397", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kszucs": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4345", "title": "Incremental blame support", "body": "AFAIK there is no incremental blame support in libgit2.\r\n\r\nTo effectively blame the whole history it would be great to reduce the complexity from O(n^2) to O(n).\r\nAre there any plans to implement the incremental version?", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4081", "title": "Git blame buffer unexpected result", "body": "### Reproduction steps\r\n\r\n@ethomson I've found a strange issue with git_blame_buffer during the development of git_blame_patch.\r\n\r\n\r\nAfter removing 2 E* lines I expect to shift every hunks by -2, but the test case fails:\r\n\r\n```bash\r\n$ git blame b.txt  # after commiting the deletions\r\nda237394 (Ben Straub 2013-02-12 15:11:30 -0800  1) EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\r\nda237394 (Ben Straub 2013-02-12 15:11:30 -0800  2) EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\r\n^b99f7ac (Ben Straub 2013-02-12 15:10:12 -0800  3)\r\n63d671eb (Ben Straub 2013-02-12 15:13:04 -0800  4) BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\r\n63d671eb (Ben Straub 2013-02-12 15:13:04 -0800  5) BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\r\n63d671eb (Ben Straub 2013-02-12 15:13:04 -0800  6) BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\r\n63d671eb (Ben Straub 2013-02-12 15:13:04 -0800  7)\r\naa06ecca (Ben Straub 2013-02-12 15:14:46 -0800  8) CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\r\naa06ecca (Ben Straub 2013-02-12 15:14:46 -0800  9) CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\r\naa06ecca (Ben Straub 2013-02-12 15:14:46 -0800 10) CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\r\naa06ecca (Ben Straub 2013-02-12 15:14:46 -0800 11) CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\r\naa06ecca (Ben Straub 2013-02-12 15:14:46 -0800 12)\r\n```\r\n\r\nTest case\r\n```c\r\nvoid test_blame_buffer__multiple_deleted_line(void)\r\n{\r\n\tconst char *buffer = \"\\\r\nEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\\n\\\r\nEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\\n\\\r\n\\n\\\r\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\n\\\r\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\n\\\r\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\n\\\r\n\\n\\\r\nCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\\n\\\r\nCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\\n\\\r\nCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\\n\\\r\nCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\\n\\n\";\r\n\r\n\tcl_git_pass(git_blame_buffer(&g_bufferblame, g_fileblame, buffer, strlen(buffer)));\r\n\tcheck_blame_hunk_index(g_repo, g_bufferblame, 2,  4, 3, 0, \"63d671eb\", \"b.txt\");\r\n\tcheck_blame_hunk_index(g_repo, g_bufferblame, 3,  7, 1, 0, \"63d671eb\", \"b.txt\");\r\n\tcheck_blame_hunk_index(g_repo, g_bufferblame, 4, 8, 5, 0, \"aa06ecca\", \"b.txt\");\r\n}\r\n```\r\n\r\nOutput\r\n```bash\r\n  1) Failure:\r\nblame::buffer::multiple_deleted_lines [/Users/krisz/Workspace/libgit2/tests/blame/blame_helpers.c:37]\r\n  hunk->final_start_line_number != start_line\r\n  5 != 4\r\n```\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n\r\ncb76eed5ce41c64607c4f99af947c79c493e8b7e\r\n\r\n### Operating system(s) tested\r\n\r\nOS X", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4079", "title": "Feature request git_blame_patch", "body": "What would be the easiest way to implement an API function similar to `git_blame_buffer`, but receiving `git_patch *patch` instead of a buffer?\r\n\r\nI'd like to increase the efficiency of blaming every revision walking forward in commit history and merging diffs into blames.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vladimiroltean": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4343", "title": "SHA256 checksum changed for v0.26.0", "body": "### Reproduction steps\r\n\r\nI am packaging libgit2 as part of a build system.\r\nI am downloading the v0.26.0 release tarball from here: https://github.com/libgit2/libgit2/archive/v0.26.0.tar.gz.\r\n\r\n### Expected behavior\r\n\r\nUntil today, the sha256sum for the tarball was 4ac70a2bbdf7a304ad2a9fb2c53ad3c8694be0dbec4f1fce0f3cd0cda14fb3b9.\r\nI would have expected it not to change.\r\n\r\n### Actual behavior\r\n\r\nSince today, the sha256sum for the tarball is 6a62393e0ceb37d02fe0d5707713f504e7acac9006ef33da1e88960bd78b6eac.\r\nWhat is happenning?\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n\r\nhttps://github.com/libgit2/libgit2/archive/v0.26.0.tar.gz", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4343/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mothacehe": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4338", "title": "Switching from libssh2 to libssh.", "body": "libssh2 does not provide the ability to parse ssh configuration files. As this is a really important feature when dealing with ssh connections, would it be an option to switch to libssh ?\r\n\r\nlibssh allows configuration file parsing and seem to have a more complete API.", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4338/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/b4e0d293ba3e998411cfb7d0310031729c2d6eeb", "message": "README: Mention Guile-Git bindings."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ltrzesniewski": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4333", "title": "git_revwalk outputs unwanted commits", "body": "Under some circumstances, `git_revwalk` will output too many commits. The behavior depends on the order of `git_revwalk_hide` calls.\r\n\r\nI originally spotted the problem with a program which does many `git_revwalk_push` followed by many `git_revwalk_hide` in a single revwalk (in order to find out which commits are new after a fetch on every branch), but I managed to extract a test case which shows the issue. I'm not sure what _exactly_ is the root cause though.\r\n\r\nHere's what the [test repo](https://github.com/libgit2/libgit2/files/1263157/test.git.zip) looks like:\r\n\r\n![image](https://user-images.githubusercontent.com/7913492/29867585-56b9705a-8d7c-11e7-95ae-7980db584d44.png)\r\n\r\n\r\nThe test program does the equivalent of the following commands:\r\n\r\n```\r\n$ git rev-list D ^A ^B ^E\r\n790ba0facf6fd103699a5c40cd19dad277ff49cd\r\nb82cee5004151ae0c4f82b69fb71b87477664b6f\r\n\r\n$ git rev-list D ^B ^A ^E\r\n790ba0facf6fd103699a5c40cd19dad277ff49cd\r\nb82cee5004151ae0c4f82b69fb71b87477664b6f\r\n```\r\n\r\nWhich produce the same correct result with git, but libgit2 outputs more commits in the second case.\r\n\r\n### Reproduction steps\r\n\r\nAdd the following file to the examples directory (for instance as `bug-repro.c`):\r\n\r\n```C\r\n#include \"common.h\"\r\n\r\nstatic void dump_walk(git_revwalk *walk)\r\n{\r\n\tgit_oid oid;\r\n\tchar buf[GIT_OID_HEXSZ+1];\r\n\r\n\twhile (!git_revwalk_next(&oid, walk)) {\r\n\t\tgit_oid_fmt(buf, &oid);\r\n\t\tbuf[GIT_OID_HEXSZ] = '\\0';\r\n\t\tprintf(\"%s\\n\", buf);\r\n\t}\r\n}\r\n\r\nint main(void)\r\n{\r\n\tgit_repository *repo;\r\n\tgit_revwalk *walk;\r\n\r\n\tgit_libgit2_init();\r\n\r\n\tcheck_lg2(git_repository_open_ext(&repo, \"test.git\", 0, NULL), \"opening repository\", NULL);\r\n\tcheck_lg2(git_revwalk_new(&walk, repo), \"allocating revwalk\", NULL);\r\n\r\n\tputs(\"Normal behavior:\");\r\n\r\n\tgit_revwalk_push_ref(walk, \"refs/heads/D\");\r\n\tgit_revwalk_hide_ref(walk, \"refs/heads/A\");\r\n\tgit_revwalk_hide_ref(walk, \"refs/heads/B\");\r\n\tgit_revwalk_hide_ref(walk, \"refs/heads/E\");\r\n\r\n\tdump_walk(walk);\r\n\r\n\tgit_revwalk_free(walk);\r\n\tcheck_lg2(git_revwalk_new(&walk, repo), \"reallocating revwalk\", NULL);\r\n\r\n\tputs(\"Buggy behavior:\");\r\n\t\r\n\tgit_revwalk_push_ref(walk, \"refs/heads/D\");\r\n\tgit_revwalk_hide_ref(walk, \"refs/heads/B\");\r\n\tgit_revwalk_hide_ref(walk, \"refs/heads/A\");\r\n\tgit_revwalk_hide_ref(walk, \"refs/heads/E\");\r\n\r\n\tdump_walk(walk);\r\n\r\n\tgit_libgit2_shutdown();\r\n\treturn 0;\r\n}\r\n```\r\n\r\nDownload and extract [test.git.zip](https://github.com/libgit2/libgit2/files/1263157/test.git.zip) to the program's build output directory, then execute the program.\r\n\r\n### Expected behavior\r\n\r\n```\r\nNormal behavior:\r\n790ba0facf6fd103699a5c40cd19dad277ff49cd\r\nb82cee5004151ae0c4f82b69fb71b87477664b6f\r\nBuggy behavior:\r\n790ba0facf6fd103699a5c40cd19dad277ff49cd\r\nb82cee5004151ae0c4f82b69fb71b87477664b6f\r\n```\r\n\r\n### Actual behavior\r\n\r\n```\r\nNormal behavior:\r\n790ba0facf6fd103699a5c40cd19dad277ff49cd\r\nb82cee5004151ae0c4f82b69fb71b87477664b6f\r\nBuggy behavior:\r\n790ba0facf6fd103699a5c40cd19dad277ff49cd\r\nb82cee5004151ae0c4f82b69fb71b87477664b6f\r\n743398b425d6c216d6cfaae3786b5bc436393ae5\r\n9241da0deabd1c7fe9ceb1691c77186abdbf500b\r\n8aa93677ae58738ff998c9cced39e988e1689792\r\n```\r\n\r\nNote that if you replace `git_revwalk_free`/`git_revwalk_new` with `git_revwalk_reset`, the problem goes away.\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n\r\nCurrent master: 3c21645\r\n\r\n### Operating system(s) tested\r\n\r\n- Originally encountered with LibGit2Sharp 0.24.0 under Windows 10\r\n- Reproduced under Windows Subsystem for Linux (Windows 10)\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "logancollins": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4315", "title": "git_status_list with pathspec and disable_pathspec_match not returning untracked items in subdirectories", "body": "I think there might be something slightly incorrect about libgit2's handling of status lists for untracked files within subdirectories when scoping specifically to a file by pathspec.\r\n\r\n### Reproduction steps\r\n\r\nConsider I have a repository with the following structure, where the Committed files are checked in to the repository, and Uncommitted files are untracked in the working directory:\r\n\r\n```\r\nroot/\r\n    Committed.txt\r\n    Uncommitted.txt\r\n    subdirectory/\r\n        Committed2.txt\r\n        Uncommitted2.txt\r\n```\r\n\r\nI'm calling `git_status_list_new` with the following options and flags:\r\n```\r\n.pathspec = \"subdirectory/Uncommitted2.txt\"\r\nGIT_STATUS_OPT_INCLUDE_UNTRACKED\r\nGIT_STATUS_OPT_INCLUDE_UNMODIFIED\r\nGIT_STATUS_OPT_INCLUDE_IGNORED\r\nGIT_STATUS_OPT_DISABLE_PATHSPEC_MATCH\r\n```\r\n\r\nIn this case, **no entries** are returned for the file. If I switch the path spec to just `\"Uncommitted.txt\"`, it works and returns an entry with the `GIT_STATUS_WT_NEW` status. Similarly, if I create a status list without any pathspec returning all files, an entry for the file is included.\r\n\r\nI believe the subdirectory itself is considered committed, since `Committed2.txt` is committed. If I add the `GIT_STATUS_OPT_RECURSE_UNTRACKED_DIRS` flag, it also works as expected for the subdirectory, but this has a bit of overhead for directories that are fully untracked.\r\n\r\nI suspect this is not working as intended (since it works for the root case, just not in subdirectories). If this is not the case, or I'm somehow using the pathspec matching incorrectly, let me know!\r\n\r\nI will attach an example repository (although it's not too complex).\r\n\r\n### Expected behavior\r\n\r\nThe status list should return one entry with `GIT_STATUS_WT_NEW` status for the second uncommitted file.\r\n\r\n### Actual behavior\r\n\r\nNo entries are returned in the status list.\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n\r\nChecked with the latest version, `e056862`.\r\n\r\n### Operating system(s) tested\r\n\r\nmacOS 10.12.5\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tiennou": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4313", "title": "ThreadSanitizer data race warning", "body": "Got that while running the test suite with ThreadSanitizer enabled, on current `master`.\r\n\r\n```\r\nobject::cache..==================\r\nWARNING: ThreadSanitizer: data race (pid=68977)\r\n  Read of size 4 at 0x7d4c00008a18 by thread T4:\r\n    #0 git_repository__cvar config_cache.c:107 (libgit2_clar+0x000100054293)\r\n    #1 git_odb__set_caps odb.c:637 (libgit2_clar+0x0001000f1ed1)\r\n    #2 git_repository_odb__weakptr repository.c:1084 (libgit2_clar+0x00010016387e)\r\n    #3 git_object_lookup_prefix object.c:129 (libgit2_clar+0x0001000ede1f)\r\n    #4 git_object_lookup object.c:198 (libgit2_clar+0x0001000ee26c)\r\n    #5 cache_parsed cache.c:151 (libgit2_clar+0x000100324435)\r\n\r\n  Previous write of size 4 at 0x7d4c00008a18 by thread T1:\r\n    #0 git_repository__cvar config_cache.c:117 (libgit2_clar+0x000100054380)\r\n    #1 git_odb__set_caps odb.c:637 (libgit2_clar+0x0001000f1ed1)\r\n    #2 git_repository_odb__weakptr repository.c:1084 (libgit2_clar+0x00010016387e)\r\n    #3 git_repository_odb repository.c:1105 (libgit2_clar+0x000100163c98)\r\n    #4 cache_raw cache.c:173 (libgit2_clar+0x000100324754)\r\n\r\n  Location is heap block of size 424 at 0x7d4c00008880 allocated by main thread:\r\n    #0 calloc <null>:144 (libclang_rt.tsan_osx_dynamic.dylib+0x000000041a42)\r\n    #1 git__calloc util.h:169 (libgit2_clar+0x000100169dd8)\r\n    #2 repository_alloc repository.c:229 (libgit2_clar+0x00010015ff03)\r\n    #3 git_repository_open_ext repository.c:811 (libgit2_clar+0x0001001607a4)\r\n    #4 git_repository_open repository.c:867 (libgit2_clar+0x0001001628bf)\r\n    #5 test_object_cache__threadmania cache.c:212 (libgit2_clar+0x000100323f3d)\r\n    #6 clar_run_test clar.c:222 (libgit2_clar+0x00010021ae0f)\r\n    #7 clar_run_suite clar.c:286 (libgit2_clar+0x000100218410)\r\n    #8 clar_test_run clar.c:426 (libgit2_clar+0x0001002178d7)\r\n    #9 main main.c:19 (libgit2_clar+0x0001002efc52)\r\n\r\n  Thread T4 (tid=1953212, running) created by main thread at:\r\n    #0 pthread_create <null>:144 (libclang_rt.tsan_osx_dynamic.dylib+0x000000024410)\r\n    #1 test_object_cache__threadmania cache.c:223 (libgit2_clar+0x0001003240d1)\r\n    #2 clar_run_test clar.c:222 (libgit2_clar+0x00010021ae0f)\r\n    #3 clar_run_suite clar.c:286 (libgit2_clar+0x000100218410)\r\n    #4 clar_test_run clar.c:426 (libgit2_clar+0x0001002178d7)\r\n    #5 main main.c:19 (libgit2_clar+0x0001002efc52)\r\n\r\n  Thread T1 (tid=1953211, running) created by main thread at:\r\n    #0 pthread_create <null>:144 (libclang_rt.tsan_osx_dynamic.dylib+0x000000024410)\r\n    #1 test_object_cache__threadmania cache.c:223 (libgit2_clar+0x0001003240d1)\r\n    #2 clar_run_test clar.c:222 (libgit2_clar+0x00010021ae0f)\r\n    #3 clar_run_suite clar.c:286 (libgit2_clar+0x000100218410)\r\n    #4 clar_test_run clar.c:426 (libgit2_clar+0x0001002178d7)\r\n    #5 main main.c:19 (libgit2_clar+0x0001002efc52)\r\n\r\nSUMMARY: ThreadSanitizer: data race config_cache.c:107 in git_repository__cvar\r\n==================\r\n```", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4301", "title": "`git_reference_rename` eagerly delete references", "body": "While investigating the reflog issue, I noticed `git_reference_rename` might be too eager in deleting the old ref. Here's a test case demonstrating it :\r\n\r\n```c\r\nvoid test_wip_wip__renaming_borked_new_ref_doesnt_delete_old(void)\r\n{\r\n\tgit_reference *head_ref, *current_ref, *renamed_ref;\r\n\tint err;\r\n\tgit_oid oid;\r\n\tgit_reference *victim_ref;\r\n\tgit_buf victim_path = GIT_BUF_INIT;\r\n\tstruct stat victim_stat;\r\n\t__uint32_t victim_flags;\r\n\r\n\tcl_git_pass(git_repository_head(&head_ref, g_repo));\r\n\tcl_git_pass(git_reference_resolve(&current_ref, head_ref));\r\n\r\n\tcl_git_pass(git_reference_name_to_id(&oid, g_repo, \"refs/heads/master\"));\r\n\tcl_git_pass(git_reference_create(&victim_ref, g_repo, VICTIM_REFNAME, &oid, 1, NULL));\r\n\r\n\tgit_buf_joinpath(&victim_path, git_repository_path(g_repo), git_reference_name(victim_ref));\r\n\r\n\tcl_must_pass(p_stat(git_buf_cstr(&victim_path), &victim_stat));\r\n\tvictim_flags = victim_stat.st_flags;\r\n\r\n\tcl_must_pass(chflags(git_buf_cstr(&victim_path), victim_flags|UF_IMMUTABLE));\r\n\r\n\terr = git_reference_rename(&renamed_ref, current_ref, git_reference_name(victim_ref), 1, NULL);\r\n\r\n\tcl_must_pass(chflags(git_buf_cstr(&victim_path), victim_flags));\r\n\tgit_buf_free(&victim_path);\r\n\r\n\tcl_git_fail_with(GIT_ERROR, err);\r\n\r\n\tcl_git_pass(git_reference_resolve(&current_ref, head_ref));\r\n\r\n\tgit_reference_free(victim_ref);\r\n}\r\n```\r\n\r\nThus the original branch is lost, and the repository ends up in a state where its `HEAD` branch points to a non-existing branch.", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/8be2a79099e636a05ddbc2a2f923afc27ca1e019", "message": "openssl: free the peer certificate\n\nPer SSL_get_peer_certificate docs:\n```\nThe reference count of the X509 object is incremented by one, so that it will not be destroyed when the session containing the peer certificate is freed. The X509 object must be explicitly freed using X509_free().\n```"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/2518eb81a2de64996362249a22995bd84fb68c49", "message": "openssl: merge all the exit paths of verify_server_cert\n\nThis makes it easier to cleanup allocated resources on exit."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/4969a6721b56d961f7d2cc925856dc07d0833c6e", "message": "cmake: create a dummy file for Xcode\n\nOtherwise Xcode will happily not-link our git2 target, resulting in a \"missing file\" error when building eg. examples"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/1b2e83a9b04726c5c7e5f9d1e77fd1abd30352ec", "message": "stransport: provide error message on trust failures\n\nFixes #4440"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/38eaa7abe9c1ebe425a5e741bf8e3817f637b778", "message": "winhttp: pass the same payload as ssh & http transports when checking certificates"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/da635eda84ce273de0f7a00d47f6ec080af1a12b", "message": "tests: move free functions at the end"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/ebe5d8ec2a86947da7f4d9e5f369f9a223636130", "message": "tests: move static method to the top"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/f01a8587ded789103d342316696de4fef932a7de", "message": "tests: make reflog_check_entry more clar-y"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/b9b1f9f8a94ff7cc9bd3f4fe39651d0ab6dd391c", "message": "tests: clarify which steps corresponds to each checks"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/5367212840ed710d48f494e8d58ce55d383a8d92", "message": "tests: gather the reflog entry content tests"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/c9bb68c2aa27c58a699a479baaf1a8d70f8de209", "message": "cmake: move Darwin-specific block around\n\nThis allows us to only link against CoreFoundation when using the SecureTransport backend"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/9980be03c29169265ad45591925e88e4c8b90327", "message": "cmake: Add USE_HTTPS as a CMake option\n\nIt defaults to ON, e.g. \"pick whatever default is appropriate for the platform\".\nIt accepts one of SecureTransport, OpenSSL, WinHTTP, or OFF.\nIt errors if the backend library couldn't be found."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/10b25dbf1864549cacbc36b36184c4f42e76cc7c", "message": "cmake: braces are not needed here"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/fdd06874ce93de75125d331a36d956db8edd7d3e", "message": "cmake: use FeatureSummary to display which features we end up using"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/99d6ebb33375369f8a033938fab984f89832ba82", "message": "cmake: make our macOS helpers more CMake-y"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/152f3766eed6ad26e62eb614de22c9f5a50110b5", "message": "cmake: fix indentation before enhancing"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/766b4ddbbdc0b4c1b928f2db209cc41d91d698b1", "message": "https: correct some error messages"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/d3ef11e00f053995c712909df879ccbdc48144b3", "message": "clar: exit immediately on initialization failure"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/22317057a526e6edbbdd0370f9ab55a8d6c23bed", "message": "https: Prevent OpenSSL from namespace-leaking"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/e93698561145c5d1f66d9f3c8d3b84775a9e5556", "message": "stream: Gather streams to src/streams"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/08c1b8fcebba98f5a4638b6bd7fa3bf4944bb3a8", "message": "cmake: simplify some HTTPS tests"}], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4446", "title": "Graft support", "body": "Depends on #4445. Sadly I can't open the PR against libgit2 *and* set that as the base branch, so do note that the first 2 commits come from that other PR.\r\n\r\nThis adds graft support to `git_repository` as a private API. The end goal is to be able to store and obey shallow roots when working with a shallow repository, but this is usable on its own.\r\n\r\nAs discussed on #4331, this is unrelated to the `git-replace` mechanism.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4445", "title": "DRY commit parsing", "body": "Splitted from #4331. See this PR for context.\r\n\r\nThis adds a \"quick\" mode to our commit parsing machinery, and makes the revwalk code instead of going with its own. The outcome is a nice, single place where grafts can be handled.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4331", "title": "Shallow support", "body": "This PR enhance our shallow object support in the following ways :\r\n- we behave better when revwalking (we don't error with `GIT_ENOTFOUND`).\r\n- we don't return objects with known-missing parents (since our repository is shallow and thus doesn't have those objects).\r\n\r\nSupersedes #3853, depends on #4445 and #4446.\r\n\r\n~~This PR adds graft support at the ODB layer, with `git_repository` being responsible for telling `git_odb` about known grafts. Shallow object support is then grafted (heh) on top of that.~~\r\n\r\nNotes :\r\n~~- I'm not that convinced that having grafts at the ODB layer makes sense. FWIW, the crux of the issue is that object parsing is not done when objects are returned by the ODB, but by the caller (usually the `object` parse machinery, but `revwalk` also perform crude parsing for obvious reasons).~~\r\n- @carlosmn pointed out the preferred approach (ie. that's what `git` does) is to have grafts be \"transparent\". IMHO, reporting an error in that case might help in the following cases :\r\n  - every object parsed is checked against the list of known grafts (so perf). The error code would just be a subset of `GIT_ENOTFOUND`.\r\n  - as a library user, I would have to recheck every object to know if I'm looking at a graft (with the caveat that this PR doesn't actually exposes grafts, only shallow commits). Having the error code makes me automatically aware (and I can just treat it as `GIT_EITEROVER` if I don't actually care).", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4316", "title": "Fix reference renaming reflog", "body": "Note that this is on top of the gather-reflog-message PR, because it's reflog-message-related.\r\n\r\nThis fixes #4292 (test in 228a8be) and a bug where we would lose reflogs (test in 07e1234).\r\n\r\nAs this is my first foray into the refdb code, I hope I didn't do toooo badly \ud83d\ude09. The first few commits are prerequisite work on massaging the code to be more amenable to the task at hand. Highlights are :\r\n- e4f878e, where some flags are added so the later code can be more granular on what it needs to be done.\r\n- d78629d, where the various `*_delete` calls gain the standard `who/signature` pair, because the reflog needs it.\r\n- eaf15ff - 7c2f505, where the ref-renaming code is gradually updated/bugfixed until it behaves correctly.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4173", "title": "mbedTLS support", "body": "This is a heavily redacted blame-friendly rejig of #3935. Redacted because commits have been merged/split for blame-friendliness and sometimes tweaked for styling/clarity.\r\n\r\nThe first part (no `mbedtls:` tag) is preliminary cleanup to various unrelated things.\r\n\r\n- [x] Fix indentation\r\n- [x] The CA store problem has been not tackled. I've been thinking about passing a CMake define, but haven't got around to do it.\r\n\r\nI've actually softened mbedtls' initialization so it doesn't fail the library completely (hit a crash because mwindow something wasn't initialized, hence ce20d0d1ba6675e56164e5caf74f01b358e547ad).\r\n\r\nCipher list support is new, but had to duplicate the list because OpenSSL names aren't [compatible](https://tls.mbed.org/supported-ssl-ciphersuites). I've preserved the ordering (for now), but do note that mbedTLS doesn't support the `DSS` versions of those ciphers.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4042", "title": "Allow the certificate check to be ignored", "body": "Fixes #3440", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4040", "title": "Merge example", "body": "This adds an `merge` example to the party. I don't really like the interface there is between `main/analyze_merge`, but that's what you get when you code on the fly against something you have no idea how its used.\r\n\r\n- I might add a `-Sours/theirs` flag, to demonstrate conflict handling and resolution.\r\n- One minor pain point I had is with `git_merge` using `git_annotated_commit`s, then having to go back and grab those underlying `git_commit`s for doing the final merge commit.\r\n- The commit part feels like a hassle to do, and I would love for a `git_merge_finalize()` function that takes care of the good, non-conflicting case.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/3918", "title": "ASan Support", "body": "Extracted from #3883, with CMake support thanks to arsenm/sanitizers-cmake.\n\nAdd `-DASAN=ON -DBUILD_CLAR=ON` to your favorite CMake invocation.\n\nNotes:\n- This only enable ASan on `libgit2_clar`, so the main library isn't instrumented.\n- It blanket-enables all sanitizers (eg. `address`, `thread`, `memory` and `undefined`). Apple's clang only supports `address` atm, so I'm interested to see what happens on the Linux build :wink:\n- If your compiler doesn't support some of the sanitizers, cmake will spew warnings, which may or may not be wanted.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/3824", "title": "Hook support", "body": "This is a first pass at supporting hooks. It aims to provide the basic blocks (as per PROJECTS.md), so enumeration, loading and saving is supported, and there's a quick skeleton of how I'm planning to handle hook execution.\n\nA few points/questions :\n- I was under the impression there had already been some discussion around the design, but I haven't been able to find them.\n- The list of hooks is hardcoded. This is completely debatable, but given variable argument count, I thought something that acts as a \"we support these hooks\" was preferable to YMMV.\n- I seem to remember bindings don't like callbacks (and me too, given my current enumeration test is human-based :wink:). Should I provide an alternate way (e.g. `git_hook_iterator_new()`) ?\n- The plan for actually executing the hooks is to have something like `git_hook__execute(hook_name, ...)` and sprinkle those everywhere, but it might or might not be doable \u2014 I haven't been that far yet.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/3781", "title": "[WIP] Allow building as a framework on OSX", "body": "Use `cmake -DBUILD_FRAMEWORK=1 -G Xcode` to generate the project.\n\nThis is a first, rough pass at making libgit2 package itself on OSX using only CMake, so I haven't actually tried to use the resulting framework (it looks like there are a few things to fix in OCGit for that to go smoothly).\n\nlibgit2/objective-git#542\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "beniamino38": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4302", "title": "Build failure on Win32 with embedded libssh2 newer than 1.6.0", "body": "### Reproduction steps\r\nUsing MS Visual Studio 2010 (32-bit), and 32-bit cmake 3.8.2 on a 64-bit Windows 10 machine\r\n```\r\n$ cmake -DBUILD_CLAR=OFF -DEMBED_SSH_PATH=../libssh2 -DCMAKE_INSTALL_PREFIX=./debug ..\r\n$ cmake --build .\r\n```\r\n\r\n### Expected behavior\r\nThis works fine using libssh2 1.6.0, but fails with libssh2 1.7.0 or later. Libssh2 1.7.0 builds fine by itself, and only fails when embedded in libgit2.\r\n\r\n### Actual behavior\r\n```\r\n\"C:\\Users\\Ben\\monitor\\freeze\\libgit2\\build\\git2.vcxproj\" (default target) (3) ->\r\n(ClCompile target) ->\r\n  ..\\..\\libssh2\\src\\scp.c(729): error C2039: 'st_mtim' : is not a member of '_stat64' [C:\\Users\\Ben\\monitor\\freeze\\libgit2\\build\\git2.vcxproj]\r\n  ..\\..\\libssh2\\src\\scp.c(730): error C2039: 'st_atim' : is not a member of '_stat64' [C:\\Users\\Ben\\monitor\\freeze\\libgit2\\build\\git2.vcxproj]\r\n  ..\\..\\libssh2\\src\\scp.c(785): error C2039: 'st_mtim' : is not a member of '_stat64' [C:\\Users\\Ben\\monitor\\freeze\\libgit2\\build\\git2.vcxproj]\r\n  ..\\..\\libssh2\\src\\scp.c(786): error C2039: 'st_atim' : is not a member of '_stat64' [C:\\Users\\Ben\\monitor\\freeze\\libgit2\\build\\git2.vcxproj]\r\n\r\n    83 Warning(s)\r\n    4 Error(s)\r\n```\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n0e165686d97264c2d7bc6b0317cf953581cbf695 but the same problem occurs for previous versions\r\n\r\n### Operating system(s) tested\r\n64-bit Windows 10", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ignatenkobrain": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4299", "title": "1/4 Test #1: libgit2_clar .............................***Exception: SegFault", "body": "### Reproduction steps\r\nRun tests\r\n\r\n### Expected behavior\r\nAll tests passing\r\n\r\n### Actual behavior\r\n```\r\n1: Test command: /builddir/build/BUILD/libgit2-0.26.0/x86_64-redhat-linux-gnu/libgit2_clar \"-xonline\" \"-xclone::local::git_style_unc_paths\" \"-xclone::local::standard_unc_paths_are_written_git_style\"\r\n1: Test timeout computed to be: 9.99988e+06\r\n1: Loaded 338 suites: \r\n1: Started\r\n1: \r\n1: apply::fromdiff...................\r\n1: apply::fromfile..........................................\r\n1: attr::file....\r\n1: attr::flags...\r\n1: attr::ignore..............\r\n1: attr::lookup.....\r\n1: attr::repo..........\r\n1: blame::buffer......\r\n1: blame::getters..\r\n1: blame::harder....\r\n1: blame::simple..S......\r\n1: buf::basic...\r\n1: buf::oom..\r\n1: buf::quote...\r\n1: buf::splice.........\r\n1: checkout::binaryunicode..\r\n1: checkout::conflict.................\r\n1: checkout::crlf..............\r\n1: checkout::head.....\r\n1: checkout::icaseSSSSSSSSSSSSS\r\n1: checkout::index.............................\r\n1: checkout::nasty..............................\r\n1: checkout::tree..........................................\r\n1: checkout::typechange..\r\n1: cherrypick::bare...\r\n1: cherrypick::workdir..........\r\n1: clone::empty...\r\n1: clone::nonetwork...................\r\n1: clone::transport.\r\n1: commit::commit.....\r\n1: commit::parent.\r\n1: commit::parse........\r\n1: commit::signature.........\r\n1: commit::write.......\r\n1: config::add..\r\n1: config::backend.\r\n1: config::configlevel....\r\n1: config::global...\r\n1: config::include........\r\n1: config::multivar.........\r\n1: config::new.\r\n1: config::read..................................\r\n1: config::readonly...\r\n1: config::rename...\r\n1: config::snapshot..\r\n1: config::stress......\r\n1: config::validkeyname.\r\n1: config::write.........................\r\n1: core::array.\r\n1: core::bitvec.\r\n1: core::buffer..........................\r\n1: core::copy...\r\n1: core::dirent.........\r\n1: core::encoding..\r\n1: core::env....\r\n1: core::errors........\r\n1: core::features.\r\n1: core::filebuf......S...S.\r\n1: core::ftruncateSS\r\n1: core::futils.S\r\n1: core::hex.\r\n1: core::iconv...\r\n1: core::init...\r\n1: core::link........................\r\n1: core::mkdir......\r\n1: core::oid...\r\n1: core::oidmap..\r\n1: core::opts..\r\n1: core::path................\r\n1: core::pool....\r\n1: core::posix....\r\n1: core::pqueue.....\r\n1: core::rmdir....\r\n1: core::sha1..\r\n1: core::sortedcache...\r\n1: core::stat..\r\n1: core::stream.\r\n1: core::string.....\r\n1: core::strmap....\r\n1: core::strtol..\r\n1: core::structinit.\r\n1: core::useragent.\r\n1: core::vector.........\r\n1: core::zstream....\r\n1: date::date.\r\n1: date::rfc2822....\r\n1: describe::describe..\r\n1: describe::t6120.......\r\n1: diff::binary............\r\n1: diff::blob..................\r\n1: diff::diffiter.........\r\n1: diff::drivers....\r\n1: diff::format::email.........\r\n1: diff::index.......\r\n1: diff::notify.......\r\n1: diff::parse.......\r\n1: diff::patch......\r\n1: diff::pathspec.\r\n1: diff::racediffiter..\r\n1: diff::rename...........................\r\n1: diff::stats...............\r\n1: diff::submodules.........\r\n1: diff::tree...........\r\n1: diff::workdir............................S\r\n1: fetchhead::nonetwork.............\r\n1: filter::blob...\r\n1: filter::crlf......\r\n1: filter::custom......\r\n1: filter::file..\r\n1: filter::ident..\r\n1: filter::query....\r\n1: filter::stream.S\r\n1: filter::wildcard...\r\n1: graph::descendant::of..\r\n1: index::add.\r\n1: index::addall......\r\n1: index::bypath....SSSSS...S\r\n1: index::cache.....\r\n1: index::collision...\r\n1: index::conflicts...........\r\n1: index::crlf.......\r\n1: index::filemodes.....\r\n1: index::inmemory..\r\n1: index::names.......\r\n1: index::nsec...\r\n1: index::racy.........\r\n1: index::read::index....\r\n1: index::read::tree.\r\n1: index::rename..\r\n1: index::reuc..............\r\n1: index::stage..\r\n1: index::tests..........................\r\n1: index::version...\r\n1: iterator::index.......................\r\n1: iterator::tree........................\r\n1: iterator::workdir.................S...........\r\n1: merge::driver............\r\n1: merge::files..........\r\n1: merge::trees::automerge....\r\n1: merge::trees::commits....\r\n1: merge::trees::modeconflict.\r\n1: merge::trees::recursive................\r\n1: merge::trees::renames...\r\n1: merge::trees::treediff.....\r\n1: merge::trees::trivial.............\r\n1: merge::trees::whitespace...\r\n1: merge::workdir::analysis.......\r\n1: merge::workdir::dirty......\r\n1: merge::workdir::recursive..\r\n1: merge::workdir::renames...\r\n1: merge::workdir::setup................................\r\n1: merge::workdir::simple...............\r\n1: merge::workdir::submodules..\r\n1: merge::workdir::trivial.............\r\n1: network::cred...\r\n1: network::fetchlocal............\r\n1: network::matchhost.\r\n1: network::refspecs.....\r\n1: network::remote::createthenload.\r\n1: network::remote::defaultbranch......\r\n1: network::remote::delete...\r\n1: network::remote::isvalidname..\r\n1: network::remote::local...................\r\n1: network::remote::push..\r\n1: network::remote::remotes..........................\r\n1: network::remote::rename.............\r\n1: network::urlparse..................\r\n1: notes::notes..............\r\n1: notes::notesref.\r\n1: object::blob::filter...\r\n1: object::blob::fromstream..\r\n1: object::blob::write...\r\n1: object::cache....\r\n1: object::commit::commitstagedfile..\r\n1: object::lookup......\r\n1: object::lookupbypath....\r\n1: object::message................\r\n1: object::peel......\r\n1: object::raw::chars..\r\n1: object::raw::compare.......\r\n1: object::raw::convert...\r\n1: object::raw::fromstr..\r\n1: object::raw::hash...........\r\n1: object::raw::short...\r\n1: object::raw::size.\r\n1: object::raw::type2string...\r\n1: object::raw::write.......\r\n1: object::shortid.\r\n1: object::tag::list..\r\n1: object::tag::peel...\r\n1: object::tag::read.....\r\n1: object::tag::write..........\r\n1: object::tree::attributes.....\r\n1: object::tree::duplicateentries..\r\n1: object::tree::frompath..\r\n1: object::tree::read..\r\n1: object::tree::update........\r\n1: object::tree::walk...\r\n1: object::tree::write........\r\n1: odb::alternates..\r\n1: odb::backend::multiple.....\r\n1: odb::backend::nobackend.\r\n1: odb::backend::nonrefreshing.........\r\n1: odb::backend::simple.............\r\n1: odb::emptyobjects...\r\n1: odb::foreach....\r\n1: odb::freshen.....\r\n1: odb::loose........\r\n1: odb::mixed...\r\n1: odb::packed...\r\n1: odb::packed::one..\r\n1: odb::sorting..\r\n1: odb::streamwrite...\r\n1: pack::indexer...\r\n1: pack::packbuilder..........\r\n1: pack::sharing.\r\n1: patch::parse....\r\n1: patch::print.........................\r\n1: path::core...............\r\n1: path::win32..........\r\n1: perf::mergeS\r\n1: rebase::abort.......\r\n1: rebase::inmemory....\r\n1: rebase::iterator..\r\n1: rebase::merge...................\r\n1: rebase::setup..............\r\n1: rebase::submodule.\r\n1: refs::branches::create..........\r\n1: refs::branches::delete........\r\n1: refs::branches::ishead......\r\n1: refs::branches::iterator.....\r\n1: refs::branches::lookup....\r\n1: refs::branches::move...........\r\n1: refs::branches::name...\r\n1: refs::branches::remote....\r\n1: refs::branches::upstream..........\r\n1: refs::branches::upstreamname..\r\n1: refs::crashes.\r\n1: refs::create.............\r\n1: refs::createwithlog.\r\n1: refs::delete...\r\n1: refs::dup..\r\n1: refs::foreachglob.....\r\n1: refs::isvalidname..\r\n1: refs::iterator.......\r\n1: refs::list..\r\n1: refs::listall...\r\n1: refs::lookup.....\r\n1: refs::namespaces..\r\n1: refs::normalize......\r\n1: refs::overwrite....\r\n1: refs::pack...\r\n1: refs::peel......\r\n1: refs::races.....\r\n1: refs::read...............\r\n1: refs::reflog::drop.......\r\n1: refs::reflog::reflog..................\r\n1: refs::rename............\r\n1: refs::revparse.................................\r\n1: refs::settargetwithlog.\r\n1: refs::setter....\r\n1: refs::shorthand.\r\n1: refs::transactions......\r\n1: refs::unicode.\r\n1: refs::update.\r\n1: remote::insteadof.....\r\n1: repo::config...\r\n1: repo::discover..........\r\n1: repo::env.\r\n1: repo::getters...\r\n1: repo::hashfile..\r\n1: repo::head......................\r\n1: repo::headtree....\r\n1: repo::init........................S\r\n1: repo::message..\r\n1: repo::new..\r\n1: repo::open.............\r\n1: repo::pathspec..........\r\n1: repo::reservedname.....\r\n1: repo::setters.....\r\n1: repo::shallow....\r\n1: repo::state.............\r\n1: reset::default.....\r\n1: reset::hard......\r\n1: reset::mixed...\r\n1: reset::soft.........\r\n1: revert::bare...\r\n1: revert::workdir...............\r\n1: revwalk::basic...................\r\n1: revwalk::hidecb......\r\n1: revwalk::mergebase..............\r\n1: revwalk::signatureparsing.\r\n1: revwalk::simplify.\r\n1: stash::apply...................\r\n1: stash::drop.......\r\n1: stash::foreach..\r\n1: stash::save................\r\n1: stash::submodules..\r\n1: status::ignore...............................\r\n1: status::renames................\r\n1: status::single..\r\n1: status::submodules...........\r\n1: status::worktree..........................................\r\n1: status::worktree::init........\r\n1: submodule::add....\r\n1: submodule::init...\r\n1: submodule::lookup.........\r\n1: submodule::modify.......\r\n1: submodule::nosubs.....\r\n1: submodule::open...\r\n1: submodule::repository::init.\r\n1: submodule::status.......\r\n1: submodule::update.......\r\n1: threads::basic....\r\n1: threads::diff..\r\n1/4 Test #1: libgit2_clar .............................***Exception: SegFault 30.94 sec\r\n```\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n0.26.0\r\n\r\n### Operating system(s) tested\r\nFedora Rawhide", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jgrosso": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4292", "title": "Renaming the current branch doesn't cause a message to be written to the `HEAD` reflog", "body": "In the case that the currently checked-out branch is renamed, Git core has logic to write to `HEAD`'s reflog instead of only the ref-specific reflog ([https://github.com/git/git/blob/e0aaa1b6532cfce93d87af9bc813fb2e7a7ce9d7/refs/files-backend.c#L2156-L2186](https://github.com/git/git/blob/e0aaa1b6532cfce93d87af9bc813fb2e7a7ce9d7/refs/files-backend.c#L2156-L2186)). libgit2, however, only writes to the ref-specific reflog.\r\n\r\n### Reproduction steps\r\n1. Rename the currently checked-out branch via `git_reference_rename` (for example, check out `development` and rename it to `develop`).\r\n\r\n### Expected behavior\r\n- The reflog for the new name of the branch should be written to (for example, `.git/logs/refs/heads/develop` should contain `branch: renamed...`).\r\n- The reflog for `HEAD` should be written to (for example, `.git/logs/HEAD` should contain `branch: renamed...`.\r\n\r\n### Actual behavior\r\n- The reflog for the new name of the branch is written to (for example, `.git/logs/refs/heads/develop` should contain `branch: renamed...`).\r\n- The reflog for `HEAD` is not written to (for example, `.git/logs/HEAD` should contain `branch: renamed...`.\r\n\r\n### Version of libgit2 (release number or SHA1)\r\nv0.25.1\r\n\r\n### Operating system(s) tested\r\nmacOS", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4297", "title": "Write to the HEAD reflog when renaming the currently active branch", "body": "Resolves #4292.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MrStonedOne": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4289", "title": "You shouldn't need a public key to ssh auth", "body": "### Reproduction steps\r\ncall `git_cred_ssh_key_new()` without a public key\r\n### Expected behavior\r\nit works, the private key already has the public key encoded in it.\r\n### Actual behavior\r\nit fails\r\n### Version of libgit2 (release number or SHA1)\r\nc26ce78 (n/a, head given)\r\n### Operating system(s) tested\r\nwindows 7\r\n\r\n\r\ndownstream bug report: tgstation/tgstation-server#96\r\ndownstream bug report: libgit2/libgit2sharp#1468", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ids1024": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4281", "title": "Building on system without mmap seems to be broken", "body": "Since https://github.com/libgit2/libgit2/commit/f7310540ae888454f9ab69200cfcd8df07faf957, `p_mmap()` is used to write, but the fallback implementation for systems without mmap doesn't support this, and returns the error `trying to map shared-writeable`.", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4281/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MustafaJamal": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4249", "title": "Extra header support", "body": "Library is working fine if we use UserNamePassword Credentials or Default Credentials with TFS 2017 BUT when we tried to use it with PAT/Access Tokens it failed to authenticate. So, we figured out that PAT/Access Token authentication requests are fulfilled successfully if we use extra header i.e.\r\n\r\n`$ git -c http.extraheader='Authorization: Basic cGF0Ond0cTJ1M2tkaHJwc2U2ZzRreDQ0Z2p2NGg1cDJ1N3Y1N25pZnc2aGZ3cHFlenVob2ZoNWE=' ls-remote 'http://mjtfs2017:8080/tfs/DefaultCollection/_git/GITTest001/'`\r\n\r\nWe are not be able to find Extra Header support directly in LibGit2Sharp API, so is there any workaround possible ?\r\n\r\nThanks,\r\nMustafa", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "csware": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4247", "title": "Cannot remove local branch with remote tracking branch if config is included", "body": "### Reproduction steps\r\n\r\n1. Set an included config file, e.g. using `git config --local include.path ../something` (a valid config file named something must exist parallel to the .git dir)\r\n2. Create a local branch with a remote tracked branch, e.g. using `git branch --track master2 remotes/origin/master`\r\n3. Delete the local branch using libgit2 with `git_branch_delete` after looking it up using `git_reference_lookup`.\r\n\r\n### Expected behavior\r\n\r\nThe branch is removed, the config file is adjusted and no error.\r\n\r\n### Actual behavior\r\n\r\nlibgit2 fails with: `could not find key 'branch.master2.merge' to delete`\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n\r\n87f5fbabdcd2318e136a142b9fcddf5614348546\r\n\r\n### Operating system(s) tested\r\n\r\nWin7 x64\r\n\r\nCrossref: https://gitlab.com/tortoisegit/tortoisegit/issues/2976", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4247/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3343", "title": "git_repository_init on existing repo does not repopulate hooks", "body": "[git init](https://git-scm.com/docs/git-init) repopulates the hooks, libgit2 doesn't.\n\nCalling git_repository_init with an empty directory correctly populates the hooks.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2663", "title": "Cannot use IPv6 address for remote operations with WIN_HTTP", "body": "Try clone `http://[1:2::3]/git/repo.git`, you'll get invalid URL error.\n\nThe reason for this is, that `t->connection_data.host` contains the RAW-IP-address as a string (`1:2::3` in this example). However, WinHttpConnect requires the raw IPv6-addresses within square brackets: `[1:2::3]`.\n\nA possible solution could be to use `WinHttpCrackUrl` for parsing the URL... If we agree on a possible solution, I can create a PR for this.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4365", "title": "InternalName should not contain the file extension", "body": "InternalName should not contain the file extension as mentioned on <https://msdn.microsoft.com/en-us/library/windows/desktop/aa381058(v=vs.85).aspx>.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4252", "title": "Drop support for Windows Vista", "body": "Support for Windows XP was dropped in libgit2 shortly after Windows XP has reached its EOL. Vista reached its EOL in April this year (cf. https://support.microsoft.com/help/13853/windows-lifecycle-fact-sheet).\r\n\r\nThis PR removes some historic/unnecessary checks for `> XP` as well as `> Vista` (there is still more cleanup possible in order to drop support for unchunked data transfer in `src/transports/winhttp.c` ).\r\n\r\nI also removed `git_has_win32_version` as this is not references any more. I put this removal into a separate commit so that it can be easily skipped if you want to keep this function.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4098", "title": "Update index_to_workdir CRLF conversion to match Git >= 2.9 logic", "body": "With Git 2.9.0 the CrLf filter logic changed (cf. https://raw.githubusercontent.com/git/git/master/Documentation/RelNotes/2.9.0.txt). This updates libgit2 to match that new logic for checking out files.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/3285", "title": "libgit2 does not work the same way as vanilla git does for adding files to index", "body": "This is based on issue #2798 and issue #3199.\n\nThe code of issue #2798 is rebased onto current master and uses a similar testing approach as issue #3199.\nHopefully there are better chances for getting this merged than issue #2798.\n\nThe files in \"checkin_input_files\" are directly based on the files used for issue #3199.\n\n/cc @ethomson \n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/2589", "title": "WinHTTP: Try to detect and use system configured proxy", "body": "If not proxy is configured in git config, try to detect WinHTTP and current user (IE) default proxy.\n\nWeb Proxy Auto-Discovery (WPAD) protocol not supported so far as it required deeper changes.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/2004001", "body": "Thanks, I've overseen this somehow... :+1: \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2004001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3384464", "body": "Introducing git_config_level_t is a nice idea for type safety, however, this limits flexibility (and breaks some third-party code).\nE.g. TortoiseGit uses an extra level to maintain an extra config-file on top of the normal ones (compare https://github.com/TortoiseGit/TortoiseGit/commit/4d603ef8eec41c59077eff6046a79a32707e9404, https://github.com/TortoiseGit/TortoiseGit/blob/4d603ef8eec41c59077eff6046a79a32707e9404/src/TortoiseProc/ProjectProperties.cpp#L114). Now, this isn't possible any more w/o patching libgit2.\n@vmg\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3384464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3384469", "body": "@vmg\nThis complicates building of libgit2 if no CMake is used (e.g. in TortoiseGit where the libgit2 project is used as a submodule and a static VisualStudio project file is used). So everyone who wants to build TortoiseGit has to run CMake (and gains nothing, since the generated project files are of no use).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3384469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3384474", "body": "Would be fine for me. Maybe call it GIT_CONFIG_LEVEL_CUSTOM_EXTRAHIGH ;)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3384474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3384531", "body": "https://github.com/csware/libgit2/compare/win32-resource provides a possible fix.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3384531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3385645", "body": "Done: https://github.com/libgit2/libgit2/pull/1639\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3385645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3400827", "body": "@arrbee: Are you going to add it (soon)? Shall I create a pull-request?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3400827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "boruar": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4241", "title": "git_merge leaves wrong conflict info on the index for moved + modified file", "body": "### Reproduction steps\r\nSteps to create the merge case:\r\n\r\n1. git init test\r\n2. cd test\r\n3. echo line 1 >> foo.txt\r\n4. echo line 2 >> foo.txt\r\n5. echo line 3 >> foo.txt\r\n6. echo line 4 >> foo.txt\r\n7. git add foo.txt\r\n8. git commit -m \"Initial add\"\r\n9. git checkout -b task\r\n10. echo added line on task >> foo.txt\r\n11. git commit -a -m \"changed on source\"\r\n12. git mv foo.txt bar.txt\r\n13. git commit -m \"renamed on source\"\r\n14. git checkout master\r\n15. echo added line on master >> foo.txt\r\n16. git commit -a -m \"changed on source\"\r\n\r\nMerge from:  \"refs/heads/task\"\r\n\r\nMerge  call:\r\nint git_merge(\r\n\tgit_repository *repo,\r\n\tconst git_annotated_commit **their_heads,\r\n\tsize_t their_heads_len,\r\n\tconst git_merge_options *merge_opts,\r\n\tconst git_checkout_options *given_checkout_opts)\r\n\r\nUsed options:\r\ngit_merge_options merge_opts= GIT_MERGE_OPTIONS_INIT;\r\nmerge_opts.flags = GIT_MERGE_FIND_RENAMES;\r\nmerge_opts.rename_threshold= 50;\r\nmerge_opts.target_limit = 200;\r\n\r\ngit_checkout_options given_checkout_opts = GIT_CHECKOUT_OPTIONS_INIT;\r\ngiven_checkout_opts.checkout_strategy = GIT_CHECKOUT_SAFE;\r\n\r\n### Expected behavior\r\n* git status --short \r\nD foo.txt\r\nUU bar.txt\r\n\r\n*  Ancestor contributor content for bar.txt:\r\nline 1\r\nline 2\r\nline 3\r\nline 4\r\n*  Theirs contributor content for bar.txt\r\nline 1\r\nline 2\r\nline 3\r\nline 4\r\nadded line on task\r\n*  Ours contributor content for bar.txt\r\nline 1\r\nline 2\r\nline 3\r\nline 4\r\nadded line on master\r\n\r\n### Actual behavior\r\n* git status --short\r\nUA bar.txt\r\nUD foo.txt \r\n\r\nThe problem is that the index doesn't have the expected info. \r\n\r\nWhen the modified content on task and modified content on master can be combined (the file merge can be resolved automatically) the merge result is OK. So the rename is properly detected.\r\n\r\n### Version of libgit2 (release number or SHA1)\r\nsha: 2fcb870\r\n\r\n### Operating system(s) tested\r\nWindows 10\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "FabriceSalvaire": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4237", "title": "Incorrect detection of modified/renamed files (simillarity)", "body": "I found an incorrect detection of modified/renamed files using pygit2/libgit2 0.25.1 on a particular commit where git status (v2.9.3) reports the correct answer.\r\n\r\nI used https://github.com/FabriceSalvaire/CodeReview as pygit2/libgit2 frontend.\r\n\r\n### Reproduction steps\r\nOn this commit https://github.com/bleausard/meije-tk/commit/2e19032bd15cc7ae05e2e118681b42495c2acdaf\r\n\r\n### Expected behavior\r\n\r\n* new file: src/bleaudb/bleau_database.h\r\n* deleted:  src/bleaudb/bleaudb_json_loader.h\r\n* renamed:  unit-tests/bleaudb/test_bleau_database.cpp -> unit-tests/bleaudb/test_bleau_schema.cpp\r\n\r\n### Actual behavior\r\n\r\nIncorrect relation:\r\n* renamed: src/bleaudb/bleaudb_json_loader.h -> src/bleaudb/bleau_database.h 55%\r\n\r\nRenaming is not detected:\r\n* modified: unit-tests/bleaudb/test_bleau_database.cpp\r\n* new file: unit-tests/bleaudb/test_bleau_schema.cpp\r\n\r\n### Version of libgit2 (release number or SHA1)\r\nlibgit2/pygit2 0.25.1\r\n\r\n### Operating system(s) tested\r\nLinux Fedora 25\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "powerman": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4230", "title": "git_status_list is slower than `git status`", "body": "### Reproduction steps\r\n\r\nBuild provided `libgit2status` tool (I'll post it source in the next comment to keep initial report easier to read) and run it in the root of large enough repo. Compare it speed with `git status`.\r\n\r\n```\r\n% go version\r\ngo version go1.8.1 linux/amd64\r\n% git --version\r\ngit version 2.10.2\r\n% git clone https://github.com/gentoo/gentoo.git\r\n% cd gentoo\r\n% find -type f | wc -l\r\n99540\r\n% find -type d | wc -l\r\n27306\r\n% git config core.untrackedCache false\r\n% time git status --short\r\n\r\n0.257 real  0.128 user  0.206 sys  32MB RAM\r\n% git config core.untrackedCache true\r\n% time git status --short\r\n\r\n0.097 real  0.067 user  0.110 sys  38MB RAM\r\n% time libgit2status\r\n{AddedFiles:0 ModifiedFiles:0 DeletedFiles:0 RenamedFiles:0 UnmergedFiles:0 HasUntrackedFiles:false}\r\n\r\n0.626 real  0.340 user  0.282 sys  154MB RAM\r\n% touch profiles/base/testfile.added\r\n% touch profiles/base/testfile.new\r\n% git add profiles/base/testfile.added\r\n% time git status --short\r\nA  profiles/base/testfile.added\r\n?? profiles/base/testfile.new\r\n\r\n0.115 real  0.082 user  0.108 sys  38MB RAM\r\n% git config core.untrackedCache false\r\n% time git status --short\r\nA  profiles/base/testfile.added\r\n?? profiles/base/testfile.new\r\n\r\n0.255 real  0.134 user  0.193 sys  32MB RAM\r\n% time libgit2status\r\n{AddedFiles:1 ModifiedFiles:0 DeletedFiles:0 RenamedFiles:0 UnmergedFiles:0 HasUntrackedFiles:true}\r\n\r\n0.611 real  0.358 user  0.250 sys  154MB RAM\r\n```\r\n\r\n### Expected behavior\r\n\r\nWell\u2026 in my dream git2go should works at least as fast as `git status`\u2026 actually faster if we just needs to know is workdir is dirty or is it has any untracked files - without needs to know full list of all added/modified/untracked/etc. files output by `git status`.\r\n\r\n### Actual behavior\r\n\r\nIt's nearly 2.5 times slower than `git status` on my system (HDD, i7-2600K overcloked @ 4.5GHz) without untrackedCache and 5-6 times slower with untrackedCache.\r\n\r\nWhile strace-ing `git status` I've noticed it calls `lstat` from 2 or 3 threads - can this be the reason?\r\n\r\nFor all `time`d runs above I take average result from several runs and my system has enough RAM to keep dircache for the full repo, so there was no (noticeable, at least) disk accesses, and thus HDD/SSD shouldn't make any difference.\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n\r\ndf4dfaa\r\n\r\nThis version is vendored by git2go. I've tried to update to current master but get this error:\r\n```\r\n./submodule.go:339: ptr.clone_checkout_strategy undefined (type *C.struct_git_submodule_update_options has no field or method clone_checkout_strategy)\r\n```\r\nIf something was just renamed then it probably can be easily fixed to allow testing with latest master.\r\n\r\n### Operating system(s) tested\r\n\r\nHardened Gentoo Linux, amd64.", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4230/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "terminalmage": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4221", "title": "Fetch fails with passphrase-protected keypair, but not passphraseless", "body": "Note that I am using libgit2 via pygit2, but this does not seem to be pygit2-related, for reasons I will explain.\r\n\r\n### Reproduction steps\r\n \r\n1. Create 2 RSA keypairs, one with a passphrase and one without.\r\n\r\n2. On Ubuntu 16.04 LTS, install the ``python-pygit2`` package. This will (as of today, 27 April 2017) pull in pygit2 0.24.0 and libgit2 0.24.1.\r\n\r\n3. Attempt to fetch using both a passphraseless and a passphrase-protected key:\r\n\r\n```python\r\n>>> repo = pygit2.Repository('.')\r\n>>> origin = repo.remotes[0]\r\n>>> creds_nopass = pygit2.Keypair('gitpillaruser', '/root/.ssh/id_rsa_KonpUlBy.pub'\r\n, '/root/.ssh/id_rsa_KonpUlBy', None)\r\n>>> creds_withpass = pygit2.Keypair('gitpillaruser', '/root/.ssh/id_rsa_WOkArzYX.pu\r\nb', '/root/.ssh/id_rsa_WOkArzYX', 'saltrules')\r\n>>> origin.fetch(callbacks=pygit2.RemoteCallbacks(credentials=creds_nopass))\r\n<pygit2.remote.TransferProgress object at 0x7feb0919ac90>\r\n>>> origin.fetch(callbacks=pygit2.RemoteCallbacks(credentials=creds_withpass))\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python2.7/dist-packages/pygit2/remote.py\", line 378, in fetch\r\n    check_error(err)\r\n  File \"/usr/lib/python2.7/dist-packages/pygit2/errors.py\", line 64, in check_error\r\n    raise GitError(message)\r\n_pygit2.GitError: Failed to authenticate SSH session: Callback returned error\r\n>>>\r\n```\r\n\r\n### Expected behavior\r\n\r\nBoth fetches work.\r\n\r\n### Actual behavior\r\n\r\nThe one in which a passphrase-protected key is used fails.\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n\r\n0.24.1\r\n\r\n### Operating system(s) tested\r\n\r\n**Ubuntu 16.04 LTS (Does not work)**\r\n- pygit2 0.24.0\r\n- libgit2 0.24.1\r\n- libssh2 1.5.0\r\n\r\n**CentOS 7.3 (Works)**\r\n- pygit2 0.24.2\r\n- libgit2 0.26.2\r\n- libssh2 1.4.3\r\n\r\n### Additional Comments\r\n \r\nSo, weirdly enough, using an identical setup on CentOS 7 (same exact keys), the fetch works both with a passphraseless and passphrase-protected key.\r\n\r\nI dumped some debugging code into pygit2 to find the error code that libgit2 was returning back from it's connection attempt, and found that the code is ``-1``.\r\n\r\nDigging further into the pygit2 source code, I found that it is calling out to libgit2's ``git_remote_fetch()`` function from ``remote.c``. When ``git_remote_fetch()`` invokes ``git_remote_connect()``, that function can return ``-1`` if there is no fetch URL defined for the remote, but that is definitely not the case as the passphraseless key works just fine with the same remote. So, I can only assume that the ``-1`` is coming from libssh2 (though I may be wrong about this).\r\n\r\nThis is where things start to get murky. There is a constant defined as ``-1`` in libssh, but it's also still to this day used as a generic return:\r\n\r\n```\r\n/* The library once used -1 as a generic error return value on numerous places\r\n   through the code, which subsequently was converted to\r\n   LIBSSH2_ERROR_SOCKET_NONE uses over time. As this is a generic error code,\r\n   the goal is to never ever return this code but instead make sure that a\r\n   more accurate and descriptive error code is used. */\r\n#define LIBSSH2_ERROR_SOCKET_NONE               -1\r\n```\r\n\r\nDespite this comment, ``-1`` is still used in a number of places, and this is where my understanding of the low-level workings of libgit2/libssh2 breaks down.\r\n\r\nTo be honest, I'm dubious that this is actually a libgit2 issue, since as noted above, authentication with a passphrase works properly on CentOS 7. Not only that, I used a fresh Ubuntu 16.04 box and compiled and installed libgit2 0.24.6 and then installed pygit2 0.24.2 to try to match CentOS 7 as closely as possible (I did not try downgrading libssh2 to 1.4.3). The behavior remained unchanged on Ubuntu 16.04, the passphrase authentication still failed. So, it seems less and less likely that this is actually a libgit2 bug, but I've reached the edge of where my troubleshooting skills extend, and I could use some insight. Any information you could provide would be greatly appreciated.", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4221/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JoeyGrajciar": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4218", "title": "git_clone fails to update HEAD to specified branch", "body": "I was unable to clone a repo to specific branch provided in git_clone_options so the HEAD would be set to the branch. Cloning without specified branch name worked fine, same for master as checkout_branch.\r\n\r\n### Reproduction steps\r\nI had options set up like this:\r\n\r\ngit_checkout_options dummy = GIT_CHECKOUT_OPTIONS_INIT;\r\ndummy.checkout_strategy = GIT_CHECKOUT_SAFE;\r\ndummy.progress_cb = function specified;\r\ndummy.progress_payload = & of bool value;\r\ndummy.notify_cb = function specified;\r\n\r\ngit_clone_options opt;\r\ngit_clone_init_options(&opt, GIT_CLONE_OPTIONS_VERSION);\r\nopt.remote_cb = remoteCallback;\r\nopt.fetch_opts.version = GIT_FETCH_OPTIONS_VERSION;\r\nopt.fetch_opts.callbacks.credentials = function specified;\r\nopt.fetch_opts.callbacks.transfer_progress = function specified;\r\nopt.fetch_opts.callbacks.payload = & of bool value;\r\nopt.checkout_opts = dummy;\r\nopt.checkout_branch = branch; // comes as parameter\r\n\r\n### Expected behavior\r\ngit_clone should be able to update HEAD to specified branch\r\n\r\n### Actual behavior\r\ngit_clone problems in this issue observed during debugging:\r\n\r\n1. fails to find branch reference in refs/remotes folder, but reference for branch exists in refs/heads\r\ntemporary fixed by adding checking of branch reference in refs/heads folder in case refs/remotes check fails\r\n\r\n2. during the try of updating HEAD to branch reference reference__create function returns GIT_EEXISTS returned after git_refdb_write finding that the branch exists.\r\nafter adding check for GIT_EEXISTS error and not reporting this error git_clone updates HEAD to specified branch\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n0.25+1\r\n\r\n### Operating system(s) tested\r\nWindows 10", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jablkojem": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4213", "title": "does git_stash_save() exists? Or how to perform \"git stash\" in libgit2", "body": "Is there some function like git_stash_save() in libgit2? Or how can I perform \"git stash\" in libgit2 ? \r\nI searched in libgit2 API but all I found was functions to pop or drop stashes from stash list, but how do I fill that list?\r\n\r\nhttps://libgit2.github.com/libgit2/#HEAD/group/stash\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jrmuizel": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4209", "title": "examples/log -p is much slower than git log -p", "body": "### Reproduction steps\r\nRun examples/log -p on https://github.com/rust-lang/crates.io-index\r\n\r\n### Expected behavior\r\nIt should take roughly the same amount of time as git log -p\r\n\r\n### Actual behavior\r\nexamples/log -p take longer than 3 minutes (I didn't wait for it to finish)\r\ngit log -p take about 6 seconds\r\n\r\n### Version of libgit2 (release number or SHA1)\r\nHEAD (8d89e409616831b7b30a5ca7b89354957137b65e)\r\n\r\n### Operating system(s) tested\r\n\r\nOS X\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jjpe": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4204", "title": "Client cert support", "body": "On [this libgit2sharp issue](https://github.com/libgit2/libgit2sharp/issues/1152#issuecomment-279966002) thread it is mentioned that this project has no support for client certificates at this time. \r\nI am interested in adding support for this, but am not sure what it needed to achieve it. By submitting this as an issue here I'm hoping to discuss the issue and avoid any potential duplicated effort.\r\n\r\n### Reproduction steps\r\nTry to clone any project with some application that uses libgit2 to achieve it, from a server that asks for a client certificate. Some concrete examples of this are [neon](https://github.com/neon-bindings/neon) and [npm](https://github.com/npm/npm).\r\nI'm assuming at this point that the same behavior holds for e.g. a `pull` as well as any other functionality that require interaction with a `remote`.\r\n\r\n### Expected behavior\r\nI'd like the clone, pull etc to succeed.\r\n\r\n### Actual behavior\r\nAt this moment the exact error varies a bit depending on the actual application but it comes down to the server not authenticating the client application due to a missing certificate.\r\n\r\n### Version of libgit2 (release number or SHA1)\r\nAny, as I'm discussing new functionality.\r\n\r\n### Operating system(s) tested\r\nWindows, OS X, Ubuntu Linux\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4204/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Uncommon": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4203", "title": "git_merge needs to reload the index", "body": "### Reproduction steps\r\n* Do something that makes libgit2 load the index\r\n* Do something to the index from the command line (like commit) so that the index & worktree are clean\r\n* Call `git_merge()`\r\n\r\n### Expected behavior\r\nMerge proceeds, recognizing the clean state\r\n\r\n### Actual behavior\r\nUsing a stale index, git_merge aborts with `GIT_ECONFLICT`\r\n\r\n### Workaround\r\nManually refreshing the index produces the expected behavior.\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n0.25.1\r\n\r\n### Operating system(s) tested\r\nmacOS 10.12.3", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/4ccacdc8ec7524065b0d78a10c9deccd04bcbda7", "message": "status: Add a baseline field to git_status_options for comparing to trees other than HEAD"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/411473", "body": "Returning 0 in case of a match fits the model set by standard functions like strcmp and memcmp, so this makes sense to me.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/411473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "hackhaslam": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4200", "title": "Change checkout options default strategy to safe", "body": "The default checkout strategy of dry run seems confusing. It's a common theme on stack overflow questions. Would it make sense to change the default to safe? It would break people who rely on the default, but does anybody really use that in practice?", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3870", "title": "Fetch doesn't update the same tags as git", "body": "Fetch's default automatic tag behavior (`GIT_REMOTE_DOWNLOAD_TAGS_AUTO`) doesn't match the tags that git updates by default. Git documentation says: \"By default, any tag that points into the histories being fetched is also fetched; the effect is to fetch tags that point at branches that you are interested in.\" In libgit2 we only get the tags that point to commits we're already downloading.\n\nI think that the auto tag behavior should probably be changed to match git. I can propose a patch if that seems like a reasonable change to make.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3754", "title": "Performance regression when diffing with old indexes without nanosecond resolution", "body": "Enabling nanosecond comparison causes a performance regression when diffing with indexes written by old versions of git that didn't have nanosecond resolution. Ideally, libgit2 should detect that the index doesn't have nanosecond resolution and not compare the nanosecond fields. See #3655 for details.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4448", "title": "Fix failure to fetch annotated tags added to existing commits", "body": "This is an attempt to fix #3870.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4184", "title": "patch: add support for partial patch application", "body": "This adds a callback to allow clients to choose which hunks are applied in `git_apply__patch`. The principal motivation is to enable an interface for staging individual hunks.\r\n\r\nI see that a public interface for patch application was never merged, so this adds a possible interface for that as well. I don't know what the public interface should really look like. In particular, this doesn't pass out the filename and mode.\r\n\r\nThe only non-trivial thing here is that when hunks are skipped we have to keep track of how many lines were skipped to adjust the expected location of subsequent hunks. Other than that I think that it's straightforward.\r\n\r\nI expanded a couple of existing tests and added a couple of new tests for skipping hunks.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gpongelli": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4165", "title": "Feature missing: git rev-list --children", "body": "I don't know if it's the correct way to start a discussion on a missing feature, let me know if I'm wrong.\r\n\r\n### Reproduction steps\r\nThe Library supports `git rev-list --parent` but not `git rev-list --children` , [official documentation](https://git-scm.com/docs/git-rev-list#git-rev-list---children).\r\nI think it could be useful to provide this API too, so a software can walk in any direction from a commit.\r\n\r\n### Expected behavior\r\nHave an API to support this behavior.\r\n\r\n### Actual behavior\r\nAs far I can see, there's no API that do this.\r\n\r\n### Version of libgit2 (release number or SHA1)\r\nv0.25.1 and actual master\r\n\r\n\r\nThank you for this awesome job!", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cbargren": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4164", "title": "Handle less common proxy configuration options", "body": "There are a handful of odd, edge-case proxy configurations that can be specified in the CLI that aren't yet supported in libgit2. Here's a list of those and I'll expand on each:\r\n\r\n- [ ] Unsetting proxy with git config\r\n- [ ] NO_PROXY environment variable\r\n- [ ] Per-url proxy configuration in git config: https://github.com/git/git/blob/bb80ee09974667a1db6bbc5e33574ed869b76a88/Documentation/RelNotes/1.8.5.txt#L69-L78\r\n\r\n### Unsetting with git config\r\nIn your git config, you can set `http.proxy` to empty to specify that that configuration should not use a proxy.\r\n```\r\n[http]\r\n    proxy = \r\n```\r\nDoing this causes libgit to throw an invalid url exception right now.\r\n\r\n### NO_PROXY\r\nSetting the NO_PROXY environment variable allows the user to specify a comma-separated list of domain expressions for which a proxy should _NOT_ be used. There are a lot of nuances for what a domain expression refers to and it might be overkill to support every possible variation of what it could be (unless there's a package that can handle them nicely). \r\n```\r\n    \"192.168.1.1\"       # Matches exactly the given IP\r\n    \"192.168.1.1:8080\"  # Matches exactly the given IP and port\r\n    \"example.com\"       # Matches exactly the domain example.com\r\n    \"*.example.com\"     # Matches every machine in the example.com domain\r\n    \".example.com\"      # Identical to the above\r\n    \"foo.example.com\"   # Matches exactly the foo.example.com machine\r\n    \"localhost\"\r\n```\r\n\r\n### Per-url proxy configuration\r\nThis one's kind of a toughie. You can configure a specific setting per-url under the `http.*` variable domain.\r\n```\r\n[http]\r\n    proxy = proxyA.com\r\n[http \"https://MyInternalDomain.com\"]\r\n    proxy = \r\n```\r\nIt would enable us to support something like this, which basically uses `proxyA.com` for all traffic, except any traffic that goes through `https://MyInternalDomain.com`, which will use no proxy (or whatever proxy you choose to configure for it).", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3989", "title": ".gitignore folder negation not working correctly", "body": "Here's an example of what I mean \u2014\r\n\r\n.gitignore:\r\n```\r\n# ignore everything\r\n*\r\n\r\n# still search in folders though\r\n!*/\r\n\r\n# don\u2019t ignore .c files\r\n!*.c\r\n```\r\n\r\nFolder structure\r\n```\r\nfoo.dll    # ignored\r\nsrc\r\n  bar.dll  # not ignored, but should be\r\n  foo.c    # not ignored\r\n```\r\n\r\nOutput of `git status -u`:\r\n```\r\nOn branch master\r\nUntracked files:\r\n  (use \"git add <file>...\" to include in what will be committed)\r\n\r\n\tsrc/foo.c\r\n```\r\n\r\nOutput of `git status --ignored -u`:\r\n```\r\nOn branch master\r\nUntracked files:\r\n  (use \"git add <file>...\" to include in what will be committed)\r\n\r\n\tsrc/foo.c\r\n\r\nIgnored files:\r\n  (use \"git add -f <file>...\" to include in what will be committed)\r\n\r\n\tfoo\r\n\tsrc/bar.dll\r\n```", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jminor": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4155", "title": "git_remote_delete fails with \"Cannot delete multivar with a single delete\"", "body": "### Reproduction steps\r\n\r\nCreate a remote with multiple fetch or push specs like this:\r\ngit_remote_create(&remote, repo, name, url)\r\ngit_remote_add_push(repo, name, spec1)\r\ngit_remote_add_fetch(repo, name, spec2)\r\n\r\nNow try to delete the remote with:\r\ngit_remote_delete(repo, name)\r\n\r\n### Expected behavior\r\n\r\nThe remote should be deleted without error.\r\n\r\n### Actual behavior\r\n\r\nThe call to git_remote_delete fails with return code -1\r\nand the error message \"Cannot delete multivar with a single delete\"\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n\r\n0.24.0\r\n\r\n### Operating system(s) tested\r\n\r\niOS\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dmitrybezer": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4128", "title": "On OSX git_diff_print() fails on *.php files if LANG environment variable is set.", "body": "### Reproduction steps\r\n1) Have a git_diff object that includes some files with *.php extension.\r\n2) Make sure LANG env var is set to \"en_US.UTF-8\" for example. \r\n3) Use git_diff_print() to print the diff\r\n\r\n### Expected behavior\r\nNo errors\r\n\r\n### Actual behavior\r\nAn error with message \"illegal byte sequence\" and klass 8 is returned.\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n0.24.6\r\n\r\n### Operating system(s) tested\r\nOSX 10.12.2\r\n\r\nI've investigated this a bit and found that when LANG variable is set, it sets the locale for libc and makes regcomp() call in git_diff_driver_builtin() to fail to compile the regular expression from builtin_defs (userdiff.h), specifically the \"|[^[:space:]]|[\\xc0-\\xff][\\x80-\\xbf]+\" part of it. \r\nHere is the source code for regcomp() from the Apple libc:\r\nhttps://opensource.apple.com/source/Libc/Libc-1158.30.7/regex/TRE/lib/regcomp.c.auto.html\r\nThere is \"if (TRE_MB_CUR_MAX_L(loc) == 1)\" condition in tre_regncomp_l () that checks max size of a character in the current locale.  That is where it fails if the current locale has chars wider than 8bits. \r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "moyamo": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4125", "title": "git checkout force deletes tracked directory containing untracked files", "body": "Under certain conditions a forced checkout will delete untracked files by default.\r\n\r\n### Reproduction steps\r\n\r\nInitialize a test git repo with one commit and a directory with a tracked file and an untracked file\r\n\r\n```bash\r\nmkdir test-repo\r\ncd test-repo\r\ngit init\r\n\r\necho committed > committed\r\ngit add committed\r\ngit commit -m \"Initial commit\"\r\n\r\nmkdir tracked-dir\r\necho \"tracked\" > tracked-dir/tracked-file\r\necho \"untracked\" > tracked-dir/untracked-file\r\n\r\ngit add tracked-dir/tracked-file\r\n```\r\n\r\nCompile and run a git checkout force program\r\n\r\n```c\r\n#include <git2.h>\r\n\r\nint main(int argc, char **argv)\r\n{\r\n        git_libgit2_init();\r\n        git_repository *repo = NULL;\r\n        git_repository_open(&repo, \"./test-repo\");\r\n\r\n        git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;\r\n        opts.checkout_strategy = GIT_CHECKOUT_FORCE;\r\n        git_checkout_head(repo, &opts);\r\n\r\n        return 0;\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe file `tracked-dir/tracked-file` should be deleted. `tracked-dir` and `tracked-dir/untracked-file` should remain present. This is what `git checkout --force` does.\r\n\r\n### Actual behavior\r\n\r\n`tracked-dir` is deleted. This means that the `tracked-dir/untracked-file` was also deleted. Checkout force should keep all untracked files by default.\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n\r\na59545de5e57769f858ed2657b9fb850675f227f\r\n\r\n### Operating system(s) tested\r\n\r\nLinux (Ubuntu Xenial x86-64)\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Wicker25": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4120", "title": "libssh2_userauth_publickey_frommemory not found in static libssh2", "body": "When I compile the library using a static libssh2 I get the following message:\r\n\r\n```\r\n-- Looking for libssh2_userauth_publickey_frommemory in ssh2\r\n-- Looking for libssh2_userauth_publickey_frommemory in ssh2 - not found\r\n```\r\n\r\nThis happens because CHECK_LIBRARY_EXISTS macro in CMakeLists.txt is not working properly with my libssh2.a .\r\n\r\n```\r\nCHECK_LIBRARY_EXISTS(\"${LIBSSH2_LIBRARIES}\" libssh2_userauth_publickey_frommemory \"${LIBSSH2_LIBRARY_DIRS}\" HAVE_LIBSSH2_MEMORY_CREDENTIALS)\r\n```\r\n\r\nThe LIBSSH2_* constants are ok and the object file contains the right symbols:\r\n```\r\n$ nm -g libssh2/install/lib64/libssh2.a | grep libssh2_userauth_publickey_frommemory\r\n000000000000338a T libssh2_userauth_publickey_frommemory\r\n```\r\n\r\nAny idea?\r\n\r\n### Expected behavior\r\n```\r\n-- Looking for libssh2_userauth_publickey_frommemory in ssh2\r\n-- Looking for libssh2_userauth_publickey_frommemory in ssh2 - found\r\n```\r\n\r\n### Actual behavior\r\n```\r\n-- Looking for libssh2_userauth_publickey_frommemory in ssh2\r\n-- Looking for libssh2_userauth_publickey_frommemory in ssh2 - not found\r\n```\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n104a1b0bd997433a1838b4583c6604f32953344c\r\n\r\n### Operating system(s) tested\r\nArch Linux 4.9.6-1-ARCH x86_64\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bquistorff": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4107", "title": "Cloning a repo on Windows breaks symlinks", "body": "I can't clone faithfully repos with symlinks on Windows. I have been able to do this using Git for Windows ([info](https://github.com/git-for-windows/git/wiki/Symbolic-Links)) when in Administrator mode and setting `core.symlinks=true`.\r\n\r\n### Reproduction steps\r\nI am using `libgit2` through R with the `git2r` package.\r\nStart R in administrator mode\r\n```\r\n> git2r::config()\r\nprogramdata:\r\n        color.branch=auto\r\n        color.diff=auto\r\n        color.interactive=true\r\n        color.status=auto\r\n        core.autocrlf=true\r\n        core.fscache=true\r\n        core.symlinks=true\r\n        diff.astextplain.textconv=astextplain\r\n        help.format=html\r\n        http.sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt\r\n        rebase.autosquash=true\r\nglobal:\r\n        core.symlinks=true\r\n        filter.lfs.clean=git-lfs clean -- %f\r\n        filter.lfs.process=git-lfs filter-process\r\n        filter.lfs.required=true\r\n        filter.lfs.smudge=git-lfs smudge -- %f\r\n> git2r::clone(\"git://github.com/imbs-hl/ranger.git\", \"C:/Users/USER/Documents/GitHub/ranger2\", progress = FALSE)\r\nLocal:    master C:/Users/USER/Documents/GitHub/ranger2/\r\nRemote:   master @ origin (git://github.com/imbs-hl/ranger.git)\r\nHead:     [47eb75a] 2017-01-20: Merge pull request #157 from imbs-hl/fix_extratrees\r\n```\r\n\r\n### Expected behavior\r\nExpect many symlink files in `ranger-r-package/ranger/src` folder.\r\n\r\n### Actual behavior\r\nMany text files in `ranger-r-package/ranger/src` folder where file contents are the original symlink target paths.\r\n\r\n### Version of libgit2 (release number or SHA1)\r\ngit2r version 0.18.0.9000 (latest release) which say that it has libgit2 commit 6b0510e from 20 December 2016\r\n\r\n### Operating system(s) tested\r\nWindows 10 Enterprise", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "implausible": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4101", "title": "Stash save does not behave the same as command line", "body": "### Reproduction steps\r\n1. Create a stash using git_stash_save with default options.\r\n2. use `git show stash@{0}` in command line\r\n3. There are no diffs for the stash\r\n\r\n### Expected behavior\r\nThe expected behavior is that the stashed diffs are visible in command line.\r\n\r\n### Actual behavior\r\nThe diffs are not visible via command line.\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n37dba1a739b5ee6c45dc9f3c0bd1f7f7a18f13f7\r\n### Operating system(s) tested\r\nLinux, Mac OSX", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4205", "title": "Parallelize checkout_create_the_new for perf", "body": "So we noticed that checkout performance on Windows boxes is particularly slow in comparison to OSX / Linux boxes. Windows checkout operations can run 30x slower than an equivalent checkout operation in a windows box. After running some profiling with Visual studio we tracked the cause of the performance to the method `checkout_create_the_new`, which internally opens files for writes internally. In fact, the bottle neck ended up being the time windows is taking to talk with the file system. This seems crazy!\r\n\r\nSo, following the suggestons of @ethomson, we tried performing some checkouts using an EXT4 partition via ext2fsd on windows, and we actually dropped from 30 second checkouts to 10 second checkouts! This made it very clear that NTFS is getting in the way of fast checkouts in Windows.\r\n\r\nSo, on another suggestion of @ethomson, we dug in and turned checkout_create_the_new into a thread pool. We found that the number of threads per core should be roughly the same - it appears that the slowdown of NTFS is primarily the CPU overhead of compression / security checks and anything else NTFS does for you on every open/write/read call. So we didn't gain anything statistically significant by increasing the number of threads per core.\r\n\r\nThat said, our metrics show that with this added into libgit2, windows checkouts perform 30-40% faster than the CLI on a 4 core machine. Very significant improvements!", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4126", "title": "negotiate always fails via libcurl", "body": "Instead we build a strict ordering for which auth methods we want to use by security and walked down available proxy auth methods. Otherwise we fail outright.\n\nWe saw repeated failures to negotiate properly vs a Forefront TMG proxy box configured with various settings: basic auth, digest, NTLM where negotiate was always enabled. After digging, so long as negotiate is available, libcurl will pick that as its auth scheme, but it also fails every time using negotiate.\n\nA somewhat hacky solution was to inspect auth types on the proxy response and switch NTLM, Digest, Basic from that. So that's what this is. Discussion is welcome.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ssinyagin": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4093", "title": " git_index_add_frombuffer() and mempack lead to garbage", "body": "I'm using a repo with mempack and in-memory index, and writing blobs with \r\ngit_index_add_frombuffer(). The idea behind is that I can write the same blob as before, and by comparing its ID I can easily tell if the blob content has changed. Now I figured out that the blob is unconditionally written into mempack, and when mempack is written to disk, the new packfile contains duplicates of all  blobs that were not modified. The garbage collector removes the duplicates easily, but I'd like to avoid polluting mempack in the first place.\r\n\r\nhere's my perl code, using Git::Raw wrapper: [ObjectStore.pm](https://github.com/ssinyagin/p5-Git-ObjectStore/blob/c2017260af40c7db6bb15d7b38ccd9152cb074fe/lib/Git/ObjectStore.pm)\r\n\r\n- Lines 142-150: repo object initiation\r\n- Line 157: adding a mempack to ODB\r\n- Lines 344, 368: adding a new blob\r\n- Line 460: creating a packfile, which is usually happening after commit (Line 480)\r\n\r\nAny advice will be appreciated. \r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "apflieger": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4084", "title": "for-each-ref.c example page is broken", "body": "### Reproduction steps\r\nGo on the documentation page https://libgit2.github.com/libgit2/#HEAD\r\nClick on the link to for-each-ref.c example page. This is the direct url https://libgit2.github.com/libgit2/ex/HEAD/for-each-ref.html\r\n\r\n### Expected behavior\r\n\r\n### Actual behavior\r\nThe page is almost empty.\r\nOther pages are fine.\r\n\r\n### Version of libgit2 (release number or SHA1)\r\nHEAD\r\n\r\n### Operating system(s) tested\r\nDoesn't seem to be browser related, I tested on firefox and chrome\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Parakleta": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4077", "title": "Inserting a file into an index which overwrites a directory silently discards the file when a tree is produced.", "body": "### Reproduction steps\r\n\r\n```python\r\nfrom tempfile import mkdtemp\r\nfrom pygit2 import init_repository, Index, IndexEntry, GIT_FILEMODE_BLOB\r\n\r\nrepo = init_repository(mkdtemp(),bare=True)\r\nblob1 = repo.create_blob(\"data1\")\r\nblob2 = repo.create_blob(\"data2\")\r\nblob3 = repo.create_blob(\"data3\")\r\n\r\nidx = Index()\r\nidx.add(IndexEntry('afile',blob1,GIT_FILEMODE_BLOB))\r\nidx.add(IndexEntry('pathto/afile',blob2,GIT_FILEMODE_BLOB))\r\nidx.add(IndexEntry('pathto',blob3,GIT_FILEMODE_BLOB))\r\n\r\nfor entry in idx:\r\n    print(entry.path,entry.id)\r\n```\r\n\r\n### Expected behavior\r\n\r\n```\r\n('afile', 0abc8f194801d3d07af700bae67026ed2695ec59)\r\n('pathto', cdca2c1e94f3d30ed4e7822b2da91c59792899b4)\r\n```\r\n\r\n### Actual behavior\r\n\r\n```\r\n('afile', 0abc8f194801d3d07af700bae67026ed2695ec59)\r\n('pathto', cdca2c1e94f3d30ed4e7822b2da91c59792899b4)\r\n('pathto/afile', fee93d14fc11d09aeffc1494c3d8cb5b3635b9f0)\r\n```\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n\r\nVersion 0.24.2 (through pygit2 of the same version)\r\n\r\n### Operating system(s) tested\r\n\r\nFreeBSD\r\n\r\n### Other Information\r\n\r\nThe bug was introduced in commit 21515f228b739a3ecd2237bafbba50e8d219d8dd.  The mechanism is that previously when `index_insert` was run it would return the insertion position of the new entry from the call to `index_find` even if the entry wasn't found.  This position information is required for `check_file_directory_collision` and more specifically as the starting position for the search in `has_file_name`.  After the changes introduced in that commit the call to `index_existing_and_best` which now wraps the call to `index_find` discards the position information if the exact entry wasn't found.\r\n\r\nI also believe that there is a mistake in the behaviour of `has_file_name` and `has_dir_name` in that they both return an error which causes the `index_insert` to fail even if its variable `replace` (renamed `ok_to_replace` in the `has_*_name` functions) is set.  In this situation they both remove the replaced entries but then due to the error the replacement is never inserted.  I think their `ok_to_replace` code should change to something like:\r\n\r\n```c\r\nif (!ok_to_replace || index_remove_entry(index, pos) < 0) {\r\n    retval = -1;\r\n    break;\r\n}\r\n```\r\n\r\nSo that the `retval = -1` is only used if the replacement is not acceptable or it fails.", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rcjsuen": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4071", "title": "A few code sample pages are empty", "body": "All of the following pages below are empty.\r\n\r\nhttps://libgit2.github.com/libgit2/ex/HEAD/add.html\r\nhttps://libgit2.github.com/libgit2/ex/HEAD/common.html\r\nhttps://libgit2.github.com/libgit2/ex/HEAD/for-each-ref.html\r\nhttps://libgit2.github.com/libgit2/ex/HEAD/network/common.html\r\nhttps://libgit2.github.com/libgit2/ex/HEAD/rev-list.html\r\nhttps://libgit2.github.com/libgit2/ex/HEAD/showindex.html", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "emilg79": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4069", "title": "failed to set proxy: the parameter is incorrect", "body": "### Reproduction steps\r\nInstall `Julia` (`0.5.0` and `0.6.0-dev.1852`) on computer behind corporate proxy; run `Pkg.init()` which ultimately calls the Julia functions `LibGit2.clone` and in particular\r\n\r\n    ccall((:git_clone, :libgit2), Cint,\r\n          (Ptr{Ptr{Void}}, Cstring, Cstring, Ref{CloneOptions}),\r\n          repo_ptr_ptr, repo_url, repo_path, clone_opts_ref)\r\n\r\n### Expected behavior\r\nTo succeed in cloning from `github`, https://github.com/JuliaLang/METADATA.jl\r\n\r\n### Actual behavior\r\n    ERROR: GitError(Code:ERROR, Class:OS, Failed to set proxy: The parameter is incorrect)\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n`0.24.5`\r\n\r\n### Operating system(s) tested\r\nWindows\r\n\r\n### Notes\r\nAccess through proxy is successful for many other applications, such as `conda` and `apm`. Configuring `ENV[\"http_proxy\"]`, `ENV[\"https_proxy\"]` makes no difference. I think the problem is with `LibGit2`, but if this is `Julia`-side, please let me know. I was unable to debug further. \r\n\r\nCould the error message be made more informative? \"The parameter\" is not clear which parameter it means/where it is being pulled from, and I didn't find it in the docs. \"is incorrect\" leaves me hanging, I don't know if it means it is inadmissible, not working, or what the current value it is using is.", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "novalis": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4068", "title": "git_submodule_foreach segfaults in a bare repo", "body": "Test case\r\n[submodule_foreach_bare.patch.txt](https://github.com/libgit2/libgit2/files/686364/submodule_foreach_bare.patch.txt)\r\n\r\nYou can see in the backtrace that, because the wd check here https://github.com/libgit2/libgit2/blob/89c332e41b12a72d89de40d63bc568c56a2c336a/src/submodule.c#L459 fails, mods is still NULL -- but submodules_from_index and submodules_from_head need it to be non-NULL.\r\n\r\nWe could just set it to an empty config in a bare repo, which would stop the crash, but it wouldn't actually enable data about those modules to be correctly loaded, since e.g. submodules_from_index seems to depend on the .gitmodules in the working directory (that is, it has no provision to load one from the ODB).\r\n\r\nThe root cause of this is that the submodule API has a few separate concepts mixed together.  Here's a classification:\r\n\r\nOperations on in-memory object, or operations that only affect the submodule's dir in .git/modules:\r\ngit_submodule_free\r\ngit_submodule_owner\r\ngit_submodule_repo_init (when used correctly, that is, with use_gitlink=true)\r\ngit_submodule_set_fetch_recurse_submodules\r\ngit_submodule_set_ignore\r\ngit_submodule_set_update\r\ngit_submodule_update_init_options\r\ngit_submodule_url\r\n\r\ngit_submodule_branch\r\ngit_submodule_fetch_recurse_submodules\r\ngit_submodule_ignore\r\ngit_submodule_name\r\ngit_submodule_path\r\ngit_submodule_update_strategy\r\n\r\nThe second set of these depend on various configuration, some of which will come from the config and some of which originate from a .gitmodules file, probably the one in the wd -- I haven't looked carefully.\r\n\r\nOperations that depend on or affect the working directory:\r\ngit_submodule_add_setup\r\ngit_submodule_init\r\ngit_submodule_open\r\ngit_submodule_sync\r\ngit_submodule_update\r\ngit_submodule_wd_id\r\n\r\nOperations that depend on or affect the index:\r\ngit_submodule_add_finalize\r\ngit_submodule_index_id\r\n\r\nOperations that depend on or affect the HEAD:\r\ngit_submodule_head_id\r\n\r\nOperations that depend on or affect the wd and index:\r\ngit_submodule_add_to_index\r\n\r\nOperations that depend on or affect the wd, index, and HEAD:\r\ngit_submodule_foreach\r\ngit_submodule_location\r\ngit_submodule_lookup\r\ngit_submodule_reload\r\ngit_submodule_status\r\n\r\nFurther, there is no way to access information about a submodule's state as-of a prior commit (at least that I can see in the git_submodule_xxx api).  \r\n\r\nPerhaps the right way to handle submodules is to model submodules using a few kinds of object: \r\n- a \"submodule configuration set\", representing the contents of a .gitmodules file, possibly one in the index or in a commit, and optionally as modified by local config.\r\n- a \"submodule configuration\", an entry in such a set for a single submodule.\r\n- a \"submodule repository\", representing a repo in .gitmodules (or, I guess, in the working tree, for legacy repos).  It's just a normal git_repository, so not really a separate object type.  This repository's HEAD can be read to see if there are new commits in the repo (since HEAD or the index).  \r\n- a \"submodule status\", for information about a working tree's checkout of a submodule: whether it is initialized, and if so, whether it has untracked content or modified files.  This would be a transient thing created on request.\r\n\r\nUnder this approach, git_submodule_foreach might need three versions: one for a tree, one for the index, and one for the working directory.   Or, perhaps, it would not exist at all, since as far as I can tell from a Google search, pretty much nobody actually uses it.  We do call the underlying, buggy, all_submodules function in #4016.  But under the above theory, #4016 would not need to exist; instead, users would simply manage submodule config sets (the cache) themselves.", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/2a3e06359b8be1c5c53809a56e0fc3af62bdb024", "message": "Do not attempt to check out submodule as blob when merging a submodule modify/deltete conflict"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/5cb6a2c946a071d43be3cdabf2f6d4417a4be694", "message": "Ignore trailing whitespace in .gitignore files (as git itself does)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lhchavez": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4066", "title": "Consider adding support for detecting leaked tempfiles / fds in the test harness", "body": "While writing https://github.com/libgit2/libgit2/pull/4060 I realized there are some operations that can lead to stray temporary files / leaked fds. I wrote a test for the particular scenario, but it might be better to modify the test code to always check for leaked fds and add a bunch of tests that just create / destroy objects. I already manually verified that today after running the whole test suite, there are no leaks, so there is no immediate cause for concern.\r\n\r\n### Reproduction steps\r\n\r\n    git_indexer *idx;\r\n    git_indexer_new(&idx, \".\", 0, NULL, NULL, NULL));\r\n    git_indexer_free(idx);\r\n\r\n### Expected behavior\r\n\r\nThere are no temporary files in the filesystem.\r\n\r\n### Actual behavior\r\n\r\nThere is one leaked fd and one temporary file left in the filesystem.\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n\r\n75db289a041b1f1084768244e167b953ac7eeaa5\r\n\r\n### Operating system(s) tested\r\n\r\nLinux (and Windows https://ci.appveyor.com/project/libgit2/libgit2/build/3023 )", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/c3514b0b82e90e660c996e81a525d42c025503ab", "message": "Fix unpack double free\n\nIf an element has been cached, but then the call to\npackfile_unpack_compressed() fails, the very next thing that happens is\nthat its data is freed and then the element is not removed from the\ncache, which frees the data again.\n\nThis change sets obj->data to NULL to avoid the double-free. It also\nstops trying to resolve deltas after two continuous failed rounds of\nresolution, and adds a test for this."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/53f2c6b1d8907e1716ea4eb643868da445e36f54", "message": "Simplified overflow condition"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/e7fac2af238ec1eff706d6605985ee5bdfaeb2ea", "message": "Using unsigned instead"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/c8aaba2441315680c60a98c73d538922f5ccd33e", "message": "libFuzzer: Fix missing trailer crash\n\nThis change fixes an invalid memory access when the trailer is missing /\ncorrupt.\n\nFound using libFuzzer."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/28662c13a8a36c1145ff3a1796d68422474e31c1", "message": "libFuzzer: Prevent a potential shift overflow\n\nThe type of |base_offset| in get_delta_base() is `git_off_t`, which is a\nsigned `long`. That means that we need to make sure that the 8 most\nsignificant bits are zero (instead of 7) to avoid an overflow when it is\nshifted by 7 bits.\n\nFound using libFuzzer."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/400caed3e0f93093d98619524184bf44937470c8", "message": "libFuzzer: Fix a git_packfile_stream leak\n\nThis change ensures that the git_packfile_stream object in\ngit_indexer_append() does not leak when the stream has errors.\n\nFound using libFuzzer."}], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4433", "title": "libFuzzer: Add build support and instructions", "body": "This change adds support for building a fuzz target for exercising the\r\npackfile parser, as well as documentation. It also runs the fuzzers in\r\nTravis to avoid regressions.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "swisspol": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4064", "title": "git_filter is passed absolute path instead of relative path when smudging", "body": "### Reproduction steps\r\nImplement a `git_filter` using the stream API `git_filter_stream_fn`.\r\n\r\n### Expected behavior\r\nWhen the `git_filter_stream_fn` is called, `git_filter_source_path(src)` always returns a relative path to the working directory of the repo when smudging or cleaning (which is how `%f` expands when Git executes a custom filter).\r\n\r\n### Actual behavior\r\n`git_filter_source_path(src)` returns an absolute path when `git_filter_source_mode(src)` is `GIT_FILTER_SMUDGE`.\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n805b90aac4a0bc4a388a28f0086ba8a7cf7e62dc\r\n\r\n### Operating system(s) tested\r\nn/a\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4062", "title": "git_filter_list_stream_data() and git_filter_list_stream_file() behave differently on stream error", "body": "If an error occurs while writing to the stream, `git_filter_list_stream_data()` will still call `close()` on the stream (which will in turn call close on the next stream, etc...).\r\n\r\nHowever, inside `git_filter_list_stream_file()`, if an error occurs while opening the file, reading from the file or writing to the stream, `close()` is not called on the stream (and therefore neither on the next stream, etc...).\r\n\r\nIt's not hard to fix and I could provide a patch for this, but I don't know what should be the right behavior here.\r\n\r\nPS: This was observed on 805b90aac4a0bc4a388a28f0086ba8a7cf7e62dc.", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3224", "title": "Pattern-based exceptions in .gitignore not working", "body": "Example case:\n\n```\n*.data\n!dont_ignore/*.data\n```\n\nThen add a couple files in the workdir: `foo.data` and `dont_ignore/bar.data`.\n\n`git_diff_index_to_workdir()` will correctly ignore `foo.data` but incorrectly also ignore `dont_ignore/bar.data`.\n\nNote that the `.gitignore` file is working as expected when testing with `git status --ignored`.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2957", "title": "libgit2 ignores \"force\" refspec parameter when fetching", "body": "I can only assume Git CLT does support `+` in a fetch refspec since that's used in the default remote refspec. However but libgit2 in `git_remote_update_tips()` and specifically in `update_tips_for_spec()` does not check the force parameter of the refspec and always force-updates the ref.\n\nThe fix is pretty easy but before sending a PR, I want to make sure this behavior is not done on-purpose.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2765", "title": "Documentation for git_sort_t needs clarification", "body": "Assuming we have this history where commits were created in this numerical order with 1s difference between them:\n\n```\n  0---1----2----4----7 (master)\n       \\         \\\n        3----5----6----8--- (topic)\n```\n\nLibgit2 commit walker API outputs the following depending on the sorting mode:\n- `GIT_SORT_NONE`: 7, 4, 2, 1, 0, 8, 6, 5, 3\n- `GIT_SORT_TIME`: 8, 7, 6, 5, 4, 3, 2, 1, 0\n- `GIT_SORT_TOPOLOGICAL`: 8, 6, 5, 3, 7, 4, 2, 1, 0\n- `GIT_SORT_TOPOLOGICAL | GIT_SORT_TIME`: 7, 8, 6, 4, 2, 5, 3, 1, 0\n\nThe doc for `GIT_SORT_TOPOLOGICAL` however says that parents will come before children which is not the case obviously:\n\n```\n    /**\n     * Sort the repository contents in topological order\n     * (parents before children); this sorting mode\n     * can be combined with time sorting.\n     */\n    GIT_SORT_TOPOLOGICAL = 1 << 0,\n```\n\nThe doc don't explain either how exactly combining `GIT_SORT_TOPOLOGICAL | GIT_SORT_TIME` works: it just says they can be combined. For instance which mode takes priority over the other? The test above just adds confusion as both `GIT_SORT_TIME` and `GIT_SORT_TOPOLOGICAL` put commit 8 first but combining both modes put commit 7 first.\n\nFor reference, here's how the Git log command help explains the available sorting modes which is easier to understand and less ambiguous IMO:\n\n```\nCommit Ordering\nBy default, the commits are shown in reverse chronological order.\n\n--date-order\nShow no parents before all of its children are shown, but otherwise show commits in the commit timestamp order.\n\n--author-date-order\nShow no parents before all of its children are shown, but otherwise show commits in the author timestamp order.\n\n--topo-order\nShow no parents before all of its children are shown, and avoid showing commits on multiple lines of history intermixed.\n\n--reverse\nOutput the commits in reverse order.\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2658", "title": "coalesce() is never called within git_blame__like_git()", "body": "Found with Clang warnings:\n\n```\nvoid git_blame__like_git(git_blame *blame, uint32_t opt)\n{\n    while (true) {\n        git_blame__entry *ent;\n        git_blame__origin *suspect = NULL;\n\n        /* Find a suspect to break down */\n        for (ent = blame->ent; !suspect && ent; ent = ent->next)\n            if (!ent->guilty)\n                suspect = ent->suspect;\n        if (!suspect)\n            return; /* all done */\n\n        /* We'll use this suspect later in the loop, so hold on to it for now. */\n        origin_incref(suspect);\n        pass_blame(blame, suspect, opt);\n\n        /* Take responsibility for the remaining entries */\n        for (ent = blame->ent; ent; ent = ent->next) {\n            if (same_suspect(ent->suspect, suspect)) {\n                ent->guilty = true;\n                ent->is_boundary = !git_oid_cmp(\n                        git_commit_id(suspect->commit),\n                        &blame->options.oldest_commit);\n            }\n        }\n        origin_decref(suspect);\n    }\n\n    coalesce(blame);  <----------- NEVER EXECUTED\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2648", "title": "Provide API to checkout a new local branch from a remote branch", "body": "Basically provide `git checkout -b {branch} --track {remote}/{branch}`\n\nThis seems like a \"base behavior\" which the API could provide natively. It's also multiple steps and maybe the reflog needs to be updated a certain way to \"match\" git CLT.\n\nI'm currently emulating this functionality by:\n1. Finding the tip commit of the remote branch\n2. Creating a branch from this commit\n3. Checking out the branch and update the reflog with a message in the same format that git CLT appears to use\n4. Set its upstream to the remote branch\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alexcrichton": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4023", "title": "Assertion failure: e->refcount.val == 0", "body": "### Reproduction steps\r\n\r\nUnfortunately there's not a list of concrete steps for reproduction for this. I'm filing this to track a Cargo bug (https://github.com/rust-lang/cargo/issues/3042) where libgit2 appears to be segfaulting. There's a few layers of indirection here to actually get to libgit2 itself, but I'm hoping that this is perhaps enough information to at least get started debugging! I can always ask for more info from the original source to explore reproduction steps as well if that'd be helpful.\r\n\r\nIt looks like the bug here though is that when Cargo has a git dependency and attempts to work with it over an NFS mount it appears to cause a segfault. The specific operation here seems to be freeing a repository causes a segfault. I'm unfortunately unsure, though, from the report what actually led up to that point.\r\n\r\ncc @asomers, perhaps you can help provide more info here as well?\r\n\r\n### Expected behavior\r\n\r\nNo segfaults\r\n\r\n### Actual behavior\r\n\r\nSegfaults! A stack trace from a segfault is here: https://github.com/rust-lang/cargo/issues/3042#issuecomment-264871119\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n\r\nI've asked to clarify what version of Cargo to learn specifically what sha we're using, but if it's a recent-ish Cargo I believe it's very close to c9e967a1b48c7a0b484fd3a4860e9c7a0aa4a319.\r\n\r\n### Operating system(s) tested\r\n\r\nLooks like the error happens on both FreeBSD and Linux, but it specifically NFS related.", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3725", "title": "Pathological performance with large config file", "body": "Downstream bug report is here: https://github.com/rust-lang/cargo/issues/2540, but the gist of it is that a massive `.gitconfig` file can cause pathological perfomance for simple operations.\n\nFor example, this program:\n\n``` c\n#include <assert.h>                                               \n#include <git2.h>                                                 \n\nint main() {                                                      \n  assert(git_libgit2_init() == 1);                                \n  git_repository *out;                                            \n  assert(git_repository_open(&out, \"/path/to/a/repo\") == 0);\n}                                                                 \n```\n\nTakes 1s locally to run when `~/.gitconfig` has 20k instances of `ui=true`. Profiling shows that [this loop](https://github.com/libgit2/libgit2/blob/381caf56908ad9cdb5959850a331d7cf2f952e63/src/config_file.c#L185) is where basically all runtime is, so maybe it's an O(n^2) thing when it needs to be O(n)?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Keno": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4019", "title": "Degrade gracefully if mmap is not allowed on this file system", "body": "libgit2 returns an error when it cannot mmap a file. Certain file systems, e.g. network file systems, disallow mmap (or at least MAP_SHARED). It would be nice if libgit2 degraded gracefully.\r\n\r\n### Reproduction steps\r\nTry to use a libgit2-based project on a network file system. In my case, this was DataWarp/GPFS, but I suspect the same is true for others as well. Example strace log:\r\n```\r\nopen(\"/global/u1/k/kfischer/.julia/v0.6/tmpD5GGuN/METADATA/.git/objects/pack/pack_git2_t122RZ\", O_RDWR|O_CREAT|O_EXCL, 0600) = 22\r\n[snip]\r\nmmap(NULL, 11, PROT_READ|PROT_WRITE, MAP_SHARED, 22, 0) = -1 ENOSYS (Function not implemented)\r\n```\r\n\r\n### Expected behavior\r\nIf the mmap fails, fall back to some other method (e.g. flock with explicit reads/writes).\r\n\r\n### Actual behavior\r\nSurfaces the error to the application.\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n4cf1ec7cff28da8838a2f0a9fb330e312ea3f963\r\n\r\n### Operating system(s) tested\r\nCray Linux\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4019/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3866", "title": "Failure to connect to SSH agent should not be fatal", "body": "This issue is somewhat connected to #3761, but not entirely.\nWhen the callback requests ssh agent usage, that connection can fail for a\nvariety of reasons (SSH_AUTH_SOCKET not defined, no permissions to the socket, weird ssh-agent, etc.). Currently, all of these are fatal and terminate the authentication process.\nInstead, it would be great if the authentication callback could be called again, to provide\nan alternative method of authentication (e.g. prompting the user for privkey/password).\nI hacked around this locally, by just causing EAUTH to be returned when `libssh2_agent_connect`\nfails. This works fine, but I'm not sure it's the best general solution, since some people may be\ninterested in why the SSH agent connection failed. \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dhaumann": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4000", "title": "Crash listing git files on mounted cifs share", "body": "This is an issue that was reported against the Kate text editor here:\r\nhttps://bugs.kde.org/show_bug.cgi?id=372196\r\n\r\nThe bug report says:\r\n> I just tried to open a shell script on a mounted shared. Kate simply crashed.\r\n> [...] The same file opens nicely if copied to local FS.\r\n> The crash can be reproduced every time.\r\n\r\nThe important parts of the backtrace:\r\n```\r\nThread 15 (Thread 0x7fb271e86700 (LWP 31811)):\r\n[KCrash Handler]\r\n#6  0x00007fb2a5bb5956 in strlen () from /lib64/libc.so.6\r\n#7  0x00007fb2a5b7e323 in vfprintf () from /lib64/libc.so.6\r\n#8  0x00007fb2a5c2b366 in __vsnprintf_chk () from /lib64/libc.so.6\r\n#9  0x00007fb2a53dbe60 in vsnprintf (__ap=0x7fb271e85240, __fmt=0x7fb2a547663f \"Could not read directory '%s'\", __n=<optimized out>, __s=<optimized out>) at /usr/include/bits/stdio2.h:77\r\n#10 git_buf_vprintf (buf=buf@entry=0x7fb26c00d5d8, format=format@entry=0x7fb2a547663f \"Could not read directory '%s'\", ap=ap@entry=0x7fb271e85290) at /usr/src/debug/libgit2-0.24.1/src/buffer.c:379\r\n#11 0x00007fb2a53fe0b4 in giterr_set (error_class=error_class@entry=2, string=string@entry=0x7fb2a547663f \"Could not read directory '%s'\") at /usr/src/debug/libgit2-0.24.1/src/errors.c:62\r\n#12 0x00007fb2a543418d in git_path_diriter_next (diriter=diriter@entry=0x7fb271e85420) at /usr/src/debug/libgit2-0.24.1/src/path.c:1316\r\n#13 0x00007fb2a54179f0 in dirload_with_stat (fi=0x7fb26c015a70, contents=0x7fb26c013e48) at /usr/src/debug/libgit2-0.24.1/src/iterator.c:1256\r\n#14 fs_iterator__expand_dir (fi=fi@entry=0x7fb26c015a70) at /usr/src/debug/libgit2-0.24.1/src/iterator.c:1363\r\n#15 0x00007fb2a5417e45 in fs_iterator__advance_into (entry=0x7fb271e85580, iter=0x7fb26c015a70) at /usr/src/debug/libgit2-0.24.1/src/iterator.c:1432\r\n#16 0x00007fb2a53f2b1e in git_iterator_advance_into (iter=<optimized out>, entry=0x7fb271e85580) at /usr/src/debug/libgit2-0.24.1/src/iterator.h:181\r\n#17 iterator_advance_into (iterator=<optimized out>, entry=0x7fb271e85580) at /usr/src/debug/libgit2-0.24.1/src/diff.c:975\r\n#18 handle_unmatched_new_item (info=0x7fb271e85560, diff=0x7fb26c013d10) at /usr/src/debug/libgit2-0.24.1/src/diff.c:1086\r\n#19 git_diff__from_iterators (diff_ptr=diff_ptr@entry=0x7fb26c015a38, repo=repo@entry=0x7fb26c00d3b0, old_iter=0x7fb26c014150, new_iter=0x7fb26c015a70, opts=opts@entry=0x7fb271e85710) at /usr/src/debug/libgit2-0.24.1/src/diff.c:1271\r\n#20 0x00007fb2a53f3f82 in git_diff_index_to_workdir (diff=diff@entry=0x7fb26c015a38, repo=repo@entry=0x7fb26c00d3b0, index=<optimized out>, opts=opts@entry=0x7fb271e85710) at /usr/src/debug/libgit2-0.24.1/src/diff.c:1397\r\n#21 0x00007fb2a5453345 in git_status_list_new (out=out@entry=0x7fb271e857c0, repo=0x7fb26c00d3b0, opts=opts@entry=0x0) at /usr/src/debug/libgit2-0.24.1/src/status.c:344\r\n#22 0x00007fb2a5453501 in git_status_foreach_ext (repo=<optimized out>, opts=opts@entry=0x0, cb=cb@entry=0x7fb2832d8a50 <(anonymous namespace)::gitStatusListWalker(char const*, unsigned int, void*)>, payload=payload@entry=0x7fb271e85880) at /usr/src/debug/libgit2-0.24.1/src/status.c:424\r\n#23 0x00007fb2a54535cd in git_status_foreach (repo=<optimized out>, cb=cb@entry=0x7fb2832d8a50 <(anonymous namespace)::gitStatusListWalker(char const*, unsigned int, void*)>, payload=payload@entry=0x7fb271e85880) at /usr/src/debug/libgit2-0.24.1/src/status.c:446\r\n#24 0x00007fb2832d8ff0 in (anonymous namespace)::gitSearchStatusList (basedir=..., repo=<optimized out>) at /usr/src/debug/kate-16.08.2/addons/project/kateprojectworker.cpp:343\r\n#25 KateProjectWorker::filesFromGit (this=this@entry=0x18d7390, dir=..., recursive=recursive@entry=true) at /usr/src/debug/kate-16.08.2/addons/project/kateprojectworker.cpp:406\r\n```\r\n\r\nThe last traces in Kate before we go into libgit2 are:\r\n- https://github.com/KDE/kate/blob/master/addons/project/kateprojectworker.cpp#L343\r\n- https://github.com/KDE/kate/blob/master/addons/project/kateprojectworker.cpp#L406", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "joshtriplett": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3982", "title": "git_patch_from_diff successfully returns NULL patch for binary/unchanged", "body": "Currently, `git_patch_from_diff` will successfully return a NULL patch for a binary or unchanged file.  However, other functions to generate a `git_patch` will generate a valid patch object in those cases.  Please consider generating a valid patch from `git_patch_from_diff` on a binary or unchanged file.", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3874", "title": "Please support marking different semantic regions in diff lines", "body": "The `git_diff_line` struct represents one or more lines of a diff.  However, a single line of a diff may contain multiple semantic regions, which a frontend may want to format or color differently.  For instance, a line with `origin == GIT_DIFF_LINE_HUNK_HDR` may include both a hunk header (between the @@ markers) and a function (after the second @@ marker); git-diff colors those with two different styles.  Similarly, a line with `origin == GIT_DIFF_LINE_ADDITION` may include regions of whitespace errors.  And a file header with `origin == GIT_DIFF_LINE_FILE_HDR` can actually include multiple lines: the `diff --git` line, the `index` line, lines about file modes, and the `---` and `+++` lines.\n\nCurrently, frontends that want to handle those regions differently have to carefully parse the text of the line.\n\nPlease consider extending `git_diff_line` to allow iterating over a list of regions within the line.  Each region would include a pointer within the content, a length, and an enum for the type.  (The concatenation of all the regions should always match the full content of the line.)  This would allow frontends to walk the regions and emit each one (potentially with formatting).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3867", "title": "revwalk: Support asking if a commit is hidden (checking \"uninteresting\" flag)", "body": "For some algorithms, it would help to ask the revwalk if a commit is hidden, which the revwalk can easily do by checking the \"uninteresting\" flag.  Could libgit2 provide a function `git_revwalk_commit_is_hidden` that takes a commit ID and returns a boolean indicating if the commit is hidden?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3854", "title": "Support $GIT_CONFIG_PARAMETERS, used by \"git -c section.key=value command\"", "body": "git supports setting config values on the command line, using the `-c` option.  To support this even with external commands, git puts these config values into the environment variable `$GIT_CONFIG_PARAMETERS`.  I'd like to use this with libgit2, by having a new level in the config hierarchy that isn't associated with a file, and having a function to parse a string in that format into a config object.\n\n(libgit2 should never look at that environment variable by default, but could do so if requested, such as via a flag.)\n\nRelated to that, it would help to have a config backend for in-memory configuration.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3795", "title": "Allow constructing a git_rebase with a custom list of git_rebase_operation", "body": "Currently, libgit2 only supports construci a `git_rebase` from a trio of annotated commits, or by opening an existing rebase in progress.  I'd like to construct a `git_rebase` representing a `git rebase -i` operation; to do that, I'd like to have a way to construct a `git_rebase` with a custom series of `git_rebase_operation` structures.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3795/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3782", "title": "Please support using notes via a commit rather than a ref", "body": "The various functions that support git notes, such as `git_note_iterator_new`, `git_note_read`, `git_note_create`, and `git_note_remove` all take a `notes_ref` as a string (defaulting to `refs/notes/commits`).  Please consider adding support to use a commit instead of a ref; the functions to read notes would just need the commit, and the functions to write notes would take a notes commit and return a new notes commit.  This would allow storing the notes commit(s) in another way, rather than as a reference.\n\nThe existing functions that use a notes ref would then become simple wrappers around the lower-level API.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3775", "title": "Please provide a git_index method to create \"intent to add\" entries", "body": "This would be shorthand for `git_index_add` with `GIT_IDXENTRY_INTENT_TO_ADD` set in `flags_extended`, and the appropriate placeholder values set in the rest of the index entry.  (The only other field that might make sense to set would be \"mode\".)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3751", "title": "Function to parse author and committer information from environment", "body": "`git_signature_default` parses the `user.name` and `user.email` values from `git_config`, but does not allow for other sources of that information.  Per `man git-commit-tree`:\n\n```\n       author and\n       committer information is taken from the following environment\n       variables, if set:\n\n           GIT_AUTHOR_NAME\n           GIT_AUTHOR_EMAIL\n           GIT_AUTHOR_DATE\n           GIT_COMMITTER_NAME\n           GIT_COMMITTER_EMAIL\n           GIT_COMMITTER_DATE\n\n       (nb \"<\", \">\" and \"\\n\"s are stripped)\n\n       In case (some of) these environment variables are not set, the\n       information is taken from the configuration items user.name and\n       user.email, or, if not present, the environment variable EMAIL\n```\n\nWhile the existing behavior of `git_signature_default` should likely not change to take environment variables into account, I'd suggest adding a `git_signature_author_env` and `git_signature_committer_env` that do.  Those would be the appropriate defaults to pass when creating a commit, for any program mimicking the git command-line tools.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3710", "title": "config color API", "body": "Git provides extensive configurability of color settings: whether to use color in general (`color.ui`), whether to use color for any given command (`color.<command>`), what colors to use (`color.<command>.<slot>`), and whether to take stdout being a tty into account (`always`/`true` versus `auto` versus `never`/`false`).  The `git config` command-line tool and git's internal API both provide support for these.\n\nI'd love to have `git_config` APIs for handling color, ideally in a way that language bindings can easily use with their own terminal-handling libraries (such as the `term` library in Rust).\n\nColors are just strings with special parsing and hierarchy rules, so I think the existing config API should suffice to set them; only getting colors needs some API extensions.\n\nFollowing the example of the `git-config` command-line tool and git's internal API, I would suggest a few functions here:\n\nFirst, a function `git_config_get_color_bool(const git_config *cfg, const char *command, int stdout_is_tty)`, to determine whether to use color at all.  This will check `color.branch` (with fallback to `color.ui`) to see whether to use color at all; if that returns \"auto\", it'll check if stdout is a TTY; the parameter `stdout_is_tty` takes a three-valued enum, corresponding to autodetection, assuming a TTY, or assuming no TTY.\n\nSecond, a function `git_config_get_color(const git_color **out, const git_config *cfg, const char *command, const char *slot)`.  For instance, to find out the color to use for the current branch, call `git_config_get_color(&color, cfg, \"branch\", \"current\")`.  This will return a newly allocated `git_color` struct, which must be freed (`git_color_free`) when no longer needed.\n\n`git_color` will be an opaque struct, with functions to return its foreground color, background color, and attributes, as well as a function to return a complete ANSI escape sequence.  See `color.h` and `color.c` in the Git sources for some information on Git's representation of color, and https://stebalien.github.io/doc/term/term/ for an example of the kind of API this should be able to integrate with in a language binding.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/838703", "body": "In addition to git write-tree, git read-tree would also prove useful.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/838703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/838767", "body": "Apparently the latest version of libgit2 has such functions.  I'd looked at the generated documentation at http://libgit2.github.com/libgit2/modules.html , and it didn't list those functions.  Closing this issue...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/838767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/880323", "body": "I stand corrected.  I thought libgit2 had a function to commit an index, just not a (exported) function to write a tree from an index.  As it turns out, libgit2 has neither right now. Thanks for the correction.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/880323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/320438", "body": "Why a callback rather than an iterator interface (git_reference_next)?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/320438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/320475", "body": "Callbacks prove somewhat more annoying to handle in FFI-based bindings (not impossible by any means, but more annoying).\n\nAlso, callbacks can make interfaces harder to make multithread-safe in the future, since you shouldn't call user code while holding internal locks or similar.\n\nIterators also map naturally to native constructs in many different languages; some languages have a native concept of iterators, and for those that don't an iterator interface still seems easier to turn into a list than a callback interface.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/320475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/322233", "body": "Bindings can handle a callback interface just fine; it just takes a bit more work.  If providing an iterator proves excessively difficult, then go ahead and stick with the callback interface.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/322233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "vbenedichuk": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3981", "title": "411 Length Required error", "body": "I'm trying to use libgit2sharp in one of my projects and faiced following issue. \r\nIn case if my application trying to push big files files (over 1mb) I'm getting 411 Length Required error. \r\n\r\nI can reproduce it with regular git too. For the git it can be fixed by adding postBuffer=524288000 line to git config in the repository but it's looks like libgit2 is ignoring this line or even the whole config file. Is there any way to fix this issue with libgit2sharp too?", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jacwah": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3979", "title": "status_should_ignore returns true for any path starting with \"./\"", "body": "As far as I can tell, `status_should_ignore` sets the `ignored` pointer to 1 for any path starting with \"./\". I do not expect the paths \"file\" and \"./file\" to give different results because they refer to the same thing. The [documentation](https://libgit2.github.com/libgit2/#HEAD/group/status/git_status_should_ignore) also doesn't mention any special case for \"./*\".\r\n\r\nI wrote a program to illustrate this listed below.\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <git2.h>\r\n#include <git2/errors.h>\r\n\r\nint main(int argc, char **argv)\r\n{\r\n\tgit_repository *repo = NULL;\r\n\tint status;\r\n\r\n\tstatus = git_repository_open(&repo, \".\");\r\n\r\n\tif (status < 0) {\r\n\t\tfprintf(stderr, \"error: %s\\n\", giterr_last()->message);\r\n\t\treturn 1;\r\n\t}\r\n\r\n\tfor (int i = 1; i < argc; i++) {\r\n\t\tchar *filename = argv[i];\r\n\t\tint should_ignore = 0;\r\n\r\n\t\tstatus = git_status_should_ignore(&should_ignore, repo, filename);\r\n\t\t\r\n\t\tif (status < 0) {\r\n\t\t\tfprintf(stderr, \"error: %s\\n\", giterr_last()->message);\r\n\t\t\treturn 1;\r\n\t\t} else {\r\n\t\t\tprintf(\"%s %s\\n\", should_ignore ? \"ignr:\\t\" : \"incl:\\t\", filename);\r\n\t\t}\r\n\t}\r\n\r\n\treturn 0;\r\n}\r\n```\r\n\r\nRunning this in a just initialised git repository containing no .gitignore file gives the following results:\r\n\r\n```\r\n$ ./ignore ignore.c $PWD/ignore.c ./ignore.c\r\nincl:\t ignore.c\r\nincl:\t /Users/jacob/Code/gittest/ignore.c\r\nignr:\t ./ignore.c\r\n```\r\n\r\nThis was tested on v0.24.2 and e3298a3 (current master) on OS X 10.12.1. Both versions were built with Homebrew.\r\n\r\nI originally posted this as an issue for the rust wrapper around libgit2 at alexcrichton/git2-rs#164.", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/56ac6c0a4b7c4be60642fcda702b9b68c3eb8a75", "message": "graph: document that a commit isn't a descendant of itself"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Mr-Wallet": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3947", "title": "Is there a way to `push --force-with-lease`?", "body": "This type of force is extremely useful because it prevents pushing over changes that have been pushed by others since one's branch was last pulled. ([relevant git docs page](https://git-scm.com/docs/git-push))\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "iamthad": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3941", "title": "Add CSS userdiff driver", "body": "A diff driver for CSS has recently been added to git, via this commit: https://github.com/git/git/commit/0719f3eecd1234f6331cab980088239207e93335\n\nIt would be great to contact the author and get permission to add his driver to this project as well.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mrh1997": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3933", "title": "diff fails on empty directory", "body": "When a tree object contains a subtree that is empty, libgit2-diff does not work any more correctly.\nIn the example gist at https://gist.github.com/mrh1997/a7f23599231fef236ec85bf48868165d an erornous repo is created (with a single commit with one file ('datafile') and an empty directory ('EmptyDir')).\nwhen diffing this file with git you git 'datafile', when doing the diff with pygit2/libgit2 you get nothing\n=> It should show an error OR run the same behaviour that git...\n\nAddmittedly this is a non-usual use-case as empty trees should not be created,\nlibgit2 provides the tools to do so and you get no feedback if your software uses these tools in an invalid manner (and creates empty dirs).\n\nIn my case I needed two days to track down the problem due to the missing error code....\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "VictorYudin": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3932", "title": "git_remote_fetch downloads all the objects instead of the objects that don't exist", "body": "Hi there,\n\nI have a bare repository on my local drive. I cloned it with git clone and when I try to update the cloned repository with git_remote_fetch(), it compresses and copies all the objects from the bare repository. Git behaves different, it compresses and copies only objects that don't exist.\n\nYou can reproduce it with cgit2:\n\n```\nE:\\DD\\split> cgit2.exe fetch origin\nFetching origin for repo 000000000014CFF0\nremote: Counting objects 1926\nremote: Compressing objects: 100% (1926/1926), done\n[updated] 7be9d1aaa6..3bf8808e34 refs/remotes/origin/master\nReceived 1926/1926 objects in 169263947bytes\n```\n\nCgit2 received 1926 objects and it took 2 mins. But git received only 164 objects, and it took a couple of seconds:\n\n```\nE:\\DD\\split> git fetch origin --verbose\nremote: Counting objects: 164, done.\nremote: Compressing objects: 100% (140/140), done.\nemote: Total 164 (delta 21), reused 161 (delta 21)\nReceiving objects: 100% (164/164), 1006.43 KiB | 0 bytes/s, done.\nResolving deltas: 100% (21/21), completed with 1 local objects.\nFrom R:\\repotest\\split\n   7be9d1a..3bf8808  master     -> origin/master\n```\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jessevdk": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3917", "title": "Transport callbacks are unexpectedly only set if remote is not yet connected", "body": "The remote callbacks provided as part of the `git_fetch_options` passed into `git_remote_download` are only set when the remote is not yet connected (as they are set as part of `git_remote_connect`). I would expect to either:\n1. Have them be set/updated even if the remote is already connected\n2. It to be documented that the callbacks are ignored if the remote is already connected (or alternatively that the callbacks can only be set once during the connect-life-cycle of the remote)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3901", "title": "Segfault in submodule iteration on a bare repository", "body": "In a bare repository there is no working directory, and somewhere along the submodule iteration it expects to find a valid git_config\\* which is only set if there is a working directory (https://github.com/libgit2/libgit2/blob/c1b370e9313a13df350974e2237997cc651a5d67/src/submodule.c#L459). It then proceeds to try and access fields of a NULL pointer (https://github.com/libgit2/libgit2/blob/c1b370e9313a13df350974e2237997cc651a5d67/src/submodule.c#L161).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mikesart": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3910", "title": "git_stash_save really slow on large repositories", "body": "Calling git_stash_save with libigt2 v0.24.1 on the linux repository takes 8 seconds to stash a single untracked file on my machine. Using the git command takes less than 2 seconds. I am running on the current version of Debian Stretch: \"4.6.0-1-amd64 #1 SMP Debian 4.6.4-1 (2016-07-18) x86_64 GNU/Linux\"\n\nI've attached a simple cpp sample, and put it in a gist as well.\n\n[stashtest.zip](https://github.com/libgit2/libgit2/files/436167/stashtest.zip)\nhttps://gist.github.com/mikesart/a99585317a8f57f0f57b9e5bd17d37c0\n\nIt appears the time is going into git_diff_tree_to_workdir and git_diff_index_to_workdir. I will update this bug report with the results on Windows tomorrow.\n\nTo reproduce:\n\nmikesart@mikesart-cos:~/dev/linux/linux-src (master)$ git remote -v\norigin  git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git (fetch)\norigin  git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git (push)\n\nmikesart@mikesart-cos:~/dev/linux/linux-src (master)$ git rev-parse HEAD\n4935e04ef431c7980ba6e8145ad4c697abccf6b9\n\nmikesart@mikesart-cos:~/dev/linux/linux-src (master)$ echo \"blah\" > blah.txt\n\nmikesart@mikesart-cos:~/dev/linux/linux-src (master)$ git status --short\n?? blah.txt\n\nmikesart@mikesart-cos:~/dev/linux/linux-src (master)$ time git stash -u\nSaved working directory and index state WIP on master: 4935e04 Merge branch 'for-linus-4.8-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/rw/uml\nHEAD is now at 4935e04 Merge branch 'for-linus-4.8-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/rw/uml\n\n**real    0m1.864s**\nuser    0m1.336s\nsys     0m0.796s\n\nmikesart@mikesart-cos:~/dev/linux/linux-src (master)$ stashtest .\nOpening repository '.'\nCalling git_repository_open_ext...\n  0.47ms\nCalling git_signature_default...\n  0.09ms\nCalling git_stash_save...\n  **7935.53ms**\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "psprint": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3896", "title": "git_annotated_commit_from_fetchhead() doesn't lead to correct commit message", "body": "Hello,\nI do `git_remote_fetch()` and then `git_merge()`, to which I provide annotated commit created from FETCH_HEAD. After that operation, if I enter in shell `git commit`, I get commit message of the form:\n\n```\nMerge ; commit '8d67f504915736da0ef80f8a7a58f23822510876'\n```\n\nDidn't test this yet with libgit2, but I guess the result will be the same, as it's about MERGE_MSG, which is like the above.  `git_annotated_commit_from_fetchhead()` works, I also tested the values passed to it and they're correct (come from `*_fetchhead_foreach`). The code for merge:\n\nhttps://github.com/psprint/QtZekyllManager/blob/4d444ef100c44597a9beadbcc44846f479951351/manager/lgit.cpp#L584\n\nCode for fetch:\n\nhttps://github.com/psprint/QtZekyllManager/blob/4d444ef100c44597a9beadbcc44846f479951351/manager/lgit.cpp#L335\n\n**PS.** The expected message is of course the one that results from `git merge FETCH_HEAD`, which is in my case:\n\n```\nMerge branch 'master' of https://github.com/psprint/zkl\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Corillian": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3843", "title": "WinHTTP stream's not freed when verb error encountered in winhttp_stream_connect()", "body": "This may not be a super big deal since the stream gets freed when `winhttp_stream_free()` gets called during transport cleanup but it certainly seems to be a logic bug based on the intent of the code. Specifically `winhttp_stream_connect(winhttp_stream *s)` in winhttp.c (https://github.com/libgit2/libgit2/blob/master/src/transports/winhttp.c#L488) contains the following:\n\n``` C++\nif (post_verb == s->verb) {\n    /* Send Content-Type and Accept headers -- only necessary on a POST */\n    git_buf_clear(&buf);\n    if (git_buf_printf(&buf,\n        \"Content-Type: application/x-git-%s-request\",\n        s->service) < 0)\n        goto on_error;\n\n    if (git__utf8_to_16(ct, MAX_CONTENT_TYPE_LEN, git_buf_cstr(&buf)) < 0) {\n        giterr_set(GITERR_OS, \"Failed to convert content-type to wide characters\");\n        goto on_error;\n    }\n\n    if (!WinHttpAddRequestHeaders(s->request, ct, (ULONG)-1L,\n        WINHTTP_ADDREQ_FLAG_ADD | WINHTTP_ADDREQ_FLAG_REPLACE)) {\n        giterr_set(GITERR_OS, \"Failed to add a header to the request\");\n        goto on_error;\n    }\n\n    git_buf_clear(&buf);\n    if (git_buf_printf(&buf,\n        \"Accept: application/x-git-%s-result\",\n        s->service) < 0)\n        goto on_error;\n\n    if (git__utf8_to_16(ct, MAX_CONTENT_TYPE_LEN, git_buf_cstr(&buf)) < 0) {\n        giterr_set(GITERR_OS, \"Failed to convert accept header to wide characters\");\n        goto on_error;\n    }\n\n    if (!WinHttpAddRequestHeaders(s->request, ct, (ULONG)-1L,\n        WINHTTP_ADDREQ_FLAG_ADD | WINHTTP_ADDREQ_FLAG_REPLACE)) {\n        giterr_set(GITERR_OS, \"Failed to add a header to the request\");\n        goto on_error;\n    }\n}\n```\n\n`goto on_error` performs the following:\n\n``` C++\non_error:\n    if (error < 0)\n        winhttp_stream_close(s);\n\n    git__free(proxy_url);\n    git_buf_free(&buf);\n    return error;\n}\n```\n\nIf `error` is not < 0 then `s` does not get closed however none of the verb error conditions actually set error to an error code (though some set a global error code).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/3967", "title": "Fix for updating uninitialized submodules that have ignore all set", "body": "When a submodule is updated via `git_submodule_update()` it calls `git_submodule_status()` to determine whether or not the working directory is currently initialized by checking the resulting status for `GIT_SUBMODULE_STATUS_WD_UNINITIALIZED`. If the submodule has `GIT_SUBMODULE_IGNORE_ALL` set as its ignore state then the working directory logic inside of `submodule_get_wd_status()` will not be executed which prevents `GIT_SUBMODULE_STATUS_WD_UNINITIALIZED` from ever being set.\r\n\r\nThis problem has been resolved by implementing a fast path in the form of `git_submodule_wd_is_initialized()` that bypasses the `git_submodule_status()` logic to check whether or not the submodule working directory is currently initialized.\r\n\r\nIt should be noted that `git_submodule_wd_is_initialized()` does not call either `submodule_update_index()` or `submodule_update_head()` like `git _submodule_status()` does however I don't think this is a problem. That being said it's probably worth it for the reviewer to double check.\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "anhoavu": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3832", "title": "Add support for Universal Windows Platform", "body": "I think the only thing we need to change is about file system handling. Many of the existing Win32 calls seem to be available but some like CreateFileW, GetModuleHandleW, environment and registry stuffs are not (due to obvious security constraint of the platform). It would also be great if we can extract OS-dependent stuffs into an interface which clients can supply.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3832/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tylerchurch": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3820", "title": "Submodule init/update fails if submodule has been deinitialized", "body": "I ran into a weird case with submodule update where it would fail to update with the error `Attempt to reinitialize 'C:/path/to/repo/.git/modules/submodule'`.\n\nTo get a repo into the state where the weirdness happens, do the following:\n\n``` sh\ngit --version # git version 2.8.3.windows.1\nmkdir new-repo\ncd new-repo\ngit init\n# Can be any submodule, just using jquery for fun:\ngit submodule add https://github.com/jquery/jquery jquery\ngit commit -m \"Initial commit.\"\ngit submodule deinit jquery\n```\n\nThen try to reinit and update the jquery submodule using libgit2 (sorry that this example is in nodejs, I'm not currently setup to write libgit2 programs in C, I will link to the suspect C functions below):\n\n``` js\nvar path = require(\"path\");\nvar fs = require(\"fs\");\nvar git = require(\"nodegit\")\n\ngit.Repository.open(\"C:\\\\new-repo\")\n    .then(\n        function(repo) {\n            console.log(\"git.Repository.open success\");\n            return git.Submodule.lookup(repo, \"jquery\");\n        }\n    )\n    .then(\n        function(submodule) {\n            console.log(\"git.Submodule.lookup success\");\n            return Promise.resolve()\n                .then(function() {\n                    return submodule.init(1);\n                })\n                .then(function() {\n                    console.log(\"submodule.init(1) success\");\n                    var updateOptions = new git.SubmoduleUpdateOptions();\n                    updateOptions.checkoutOpts.checkoutStrategy = 2; // GIT_CHECKOUT_FORCE\n                    updateOptions.checkoutOpts.cloneCheckoutStrategy = 2; // GIT_CHECKOUT_FORCE\n\n                    return submodule.update(0, updateOptions);\n                })\n        }\n    )\n    .then(\n        function(submodule) {\n            console.log(\"submodule.update(1) success\");\n        }\n    )\n    .catch(\n        function(err) {\n            console.error(\"An error occurred:\");\n            console.error(err);\n        }\n    )\n;\n```\n\nThe output from the above program looks like this:\n\n```\ngit.Repository.open success\ngit.Submodule.lookup success\nsubmodule.init(1) success\nAn error occurred:\n[Error: Attempt to reinitialize 'C:/new-repo/.git/modules/jquery']\n```\n\nTo be clear, it is `submodule.update()` that's throwing that error, not `submodule.init()`.\n\nThe issue seems to be a difference in expectations between the state command line git leaves, and what libgit2 expects.\n\nThis line in `git_submodule_update`: https://github.com/libgit2/libgit2/blob/60a194aa86d54ffb55c1abff8d0ef05647f936e8/src/submodule.c#L1117 properly detects that the submodule is indeed uninitialized in the working directory.\n\nBut then later on in the function `git_clone` gets called https://github.com/libgit2/libgit2/blob/60a194aa86d54ffb55c1abff8d0ef05647f936e8/src/submodule.c#L1164\n\nWhich calls `git_submodule_update_repo_init_cb` https://github.com/libgit2/libgit2/blob/60a194aa86d54ffb55c1abff8d0ef05647f936e8/src/submodule.c#L1064\n\nWhich calls `submodule_repo_create` https://github.com/libgit2/libgit2/blob/60a194aa86d54ffb55c1abff8d0ef05647f936e8/src/submodule.c#L1016\n\nWhich calls `git_repository_init_ext` which is the ultimate source of the error message https://github.com/libgit2/libgit2/blob/60a194aa86d54ffb55c1abff8d0ef05647f936e8/src/repository.c#L1679\n\n`git_repository_init_ext` returns an error because `valid_repository_path` returns `true` https://github.com/libgit2/libgit2/blob/60a194aa86d54ffb55c1abff8d0ef05647f936e8/src/repository.c#L155 This is because the call made to `git submodule deinit` empties the submodule's working directory, but leaves behind the module data in the .git folder.\n\nIt's possible there's some combination of libgit2 function calls or arguments that will have it properly handle this situation, but I haven't been able to figure out what they would be.\n\nI was able to come up with a workaround in my application code, which is to detect this case (the submodule exists, is uninitialized in the working directory, but .git/modules has data for it), and then write the `C:\\new-repo\\jquery\\.git` file with the following contents:\n\n```\ngitdir: ../.git/modules/jquery\n```\n\nAfter that file is written, I am able to call `submodule.update()` successfully.\n\nTo my eye, it looks like `git_submodule_update` needs to learn about this case. Or perhaps when I called `git_submodule_init` in my code, that function should've written the `.git` file but didn't for some strange reason.\n\nI'm not sure which is the right solution (or maybe there's a third solution I haven't thought of), nor am I sure what functions to call in order to properly resolve this situation. If someone wants to point me at the right set of functions to call and modify, I'd be happy to create a pull request.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3820/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3643", "title": "Submodule update fails if the program using libgit2 contains a folder with the same name as the submodule", "body": "I was writing some code that was cloning a repo, and then going through and updating the submodules  (actually, I was using nodegit http://www.nodegit.org/ to do this, but as far as I can tell this is a libgit2 bug), and I was getting a strange error like this:\n\n```\n'framework' exists and is not an empty directory\n```\n\n(The `framework` is a submodule we include in many of our projects at my work that contains lots of useful prebuilt functionality for apps we build.)\n\nI saw this message, and I was like \"No way that's possible, I _just_ cloned the repo.\" But the message wouldn't go away.\n\nFor reference here is code that reproduces the issue using the public repo https://github.com/atom/electron (sorry it's in nodejs and not in C, I don't know C well enough to rewrite this example for you libgit2 folks):\n\n``` js\nvar path = require(\"path\");\n\nvar mkdirp = require(\"mkdirp\");\nvar rimraf = require(\"rimraf\");\nvar git = require(\"nodegit\");\nvar reposPath = path.join(__dirname, \"cloned-repos\");\nvar repoPath = path.join(reposPath, \"electron\");\nvar cloneUrl = \"https://github.com/atom/electron\";\n\nrimraf(reposPath, function (err) {\n    if (err) {\n        throw err;\n    }\n    mkdirp(reposPath, function (err) {\n        if (err) {\n            throw err;\n        }\n\n        console.log(\"Cloning '\" + cloneUrl + \"'...\");\n\n        var repo;\n\n        git.Clone.clone(cloneUrl, repoPath, new git.CloneOptions())\n            .then(function() {\n               return git.Repository.open(repoPath);\n            })\n            .then(function(repo_) {\n                repo = repo_;\n                return repo.getSubmoduleNames();\n            })\n            .then(function(names) {\n                console.log(\"Found the following submodules:\");\n                console.log(names);\n\n                var p = Promise.resolve();\n\n                names.forEach(function(name) {\n                    p = p.then(\n                        function() {\n                            var submodule;\n\n                            return git.Submodule.lookup(repo, name)\n                                .then(\n                                    function (submodule_) {\n                                        submodule = submodule_;\n\n                                        return submodule.init(1);\n                                    }\n                                )\n                                .then(\n                                    function() {\n                                        console.log(\"Init success on \" + name);\n\n                                        return submodule.update(1, new git.SubmoduleUpdateOptions());\n                                    }\n                                )\n                                .then(\n                                    function() {\n                                        console.log(\"Update success on \" + name);\n                                    }\n                                )\n                                ;\n                        }\n                    )\n                });\n\n                return p;\n            })\n            .catch(function(error) {\n                console.error(error);\n            })\n        ;\n    });\n});\n```\n\nTo get the error, in the same folder where you run the above program from, create a folder named `vendor/boto` and create a file in `vendor/boto`. Or, if you prefer, you can just download this zip file that contains everything all set up already (compiled for Windows x64): https://dl.dropboxusercontent.com/u/108847970/clone-and-update-submodule.zip\n\nThe issue I originally ran into appears to be this:\n- The tool that I was writing that uses libgit2 had a folder named `framework` in it.\n- The repo I was cloning had a submodule with the same name it.\n- For some reason, libgit2 was checking to see what folders existed _in my tool's directory_ instead of in the cloned repo's directory.\n\nNow, why was it doing this?\n\nThese lines appear to be the culprits:\n- https://github.com/libgit2/libgit2/blob/5663d4f69124481fcfab2952b5207c7563568388/src/submodule.c#LL1163\n- https://github.com/libgit2/libgit2/blob/5663d4f69124481fcfab2952b5207c7563568388/src/clone.c#L405\n- https://github.com/libgit2/libgit2/blob/5663d4f69124481fcfab2952b5207c7563568388/src/submodule.c#L1032\n\nTo explain what I mean...\n\n`git_submodule_update` instructs `git_clone` to use `git_submodule_update_repo_init_cb` and they both end up using the value of `sm->path` for the submodule's path.\n\n`git_submodule_update_repo_init_cb` appears to be expecting this path to be relative to the repo that the submodule is contained in, because it joins it together with the working directory path of the containing repo.\n\nHowever, `git_clone` receives that `path`, and does some checks on it making the assumption that `path` is the full path to folder we are cloning the repo into. Because it's a relative path and not a full path, `git_clone` ends up checking for the existence of folders in whatever the working directory of the application using libgit2 happens to be, instead of in the location where the submodule is going to end up.\n\nI don't know enough about C or the design of libgit2 to send a proper pull request, but the answer would seem to be to give `git_clone` the full path instead of the relative path, perhaps by doing that join in `git_submodule_update_repo_init_cb` earlier in the process.\n\nIn the meantime, the workaround I am using is to change my working directory to the repo I just cloned, and then changing back to my application's previous working directory.\n\nHopefully that all made sense, let me know if there's any other information I can provide.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vergenzt": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3779", "title": "API docs for type render badly", "body": "At https://libgit2.github.com/libgit2/#HEAD/type/git_odb_backend:\n\n![image](https://cloud.githubusercontent.com/assets/1725615/15161672/f4a492d6-16b3-11e6-83e2-b30f150649cf.png)\n\nThe names of the fields all end up in the same column as the table of contents on the right. :( It stays there even when resizing.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tkelman": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3762", "title": "libssh2 support as a runtime option instead of compile-time?", "body": "I have a use case where I'd like to make ssh support optional, where in a default configuration it is not available but if the libssh2 library becomes available at runtime I'd like libgit2 to be able to use it without having to recompile. Assuming I could ensure the versioning and build configuration of the runtime-available libssh2 matches what gets used at build time for libgit2, would this be at all technically feasible? Would it be possible to change some of the conditional compilation into some form of runtime check and associated API for initialization?\n\nedit: maybe relevant? https://github.com/libgit2/libgit2sharp/issues/255#issuecomment-212590999\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wildart": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3761", "title": "Provide authentication error reporting to `cred_acquire_cb`", "body": "I'm trying to implement a credential caching mechanism in `git_cred_acquire_cb` function. However, SSH session authentication [does not report](https://github.com/libgit2/libgit2/blob/b7809b84692b4df7f11d603cc5da0860609e0555/src/transports/ssh.c#L420-L427) any error for `libssh2` calls that return  `LIBSSH2_ERROR_PASSWORD_EXPIRED`  or `LIBSSH2_ERROR_AUTHENTICATION_FAILED` error codes (see `_git_ssh_authenticate_session`). The only exception is the `ssh-agent` authentication that [sets error when failed](https://github.com/libgit2/libgit2/blob/b7809b84692b4df7f11d603cc5da0860609e0555/src/transports/ssh.c#L332-L333). Failure to report auth errors makes impossible to identify if cached credentials where correct or not.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "g-h-c": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3741", "title": "git_remote_delete() will fail when the remote contains a dot in a branch name", "body": "Example:\nIf my branch is called: mybranch1.1\nI get the error \n`Could not find key 'branch.mybranch1.merge' to delete when deleting 'origin'`\nwhen calling `git_remote_delete()`\n\nThe problem is that:\n`name_offset()` in remote.c will consider the name of the branch ends when the first dot after \"remote.\" is found, but that is not necessarily true as a valid name can contain single dots. It thinks the branch name is mybranch1 when it actually is mybranch1.1\n\nThe code shall find the last dot in the name instead.\n\nOccurred on libgit2 0.23.4.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mroi": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3733", "title": "sharedRepository config option not honored", "body": "The git configuration option `sharedRepository` can be used to explicitly specify permissions of newly created files by setting it to `0xxx` with the `xxx` part giving the permission bits in the usual octal notation.\n\nI have a repository with `sharedRepository` set to `0750`, and I am using the libgit2 application [GitUp](https://github.com/git-up/GitUp). But commits create new objects with world-readable permissions. I have been told by the GitUp developer, that this falls within the responsibilities of libgit2. I currently work around the problem using scripts, but it would be great if libgit2 could support `sharedRepository` permissions directly.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jeffhostetler": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3696", "title": "DirIter MAX_PATH error on Windows during status when include-ignores is set", "body": "A workdir with a deeply nested (260+) node_modules hierarchy causes the \"diriter\" code to return an error during status when include-ignores is set.  I know this is probably considered \"by design\", but it causes LibGit2Sharp to throw an exception during status which prevents us from reporting anything when a node_modules tree is present.\n\n(I had to create dirty items before and after it in the directory in order to get past the start-prefix/end-prefix limits.)\n\nIt would be nice to be able to configure this behavior or silently \"really ignore\" items that are too deep.\n(Or maybe get a (warning) callback with the path.)\n\nhttps://github.com/jeffhostetler/public_libgit2/tree/jeffhostetler/diriter_max_path\n\ncontains an example fix that I put in VS to silently eat them and continue.\n(I didn't submit a PR for it, because I left the MSFT markers in it.)\nIt works, but I'd like to discuss a better fix before going forward.\n\nI have some tests in C# if that would help.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3212", "title": "Perf suggestion for crlf handling", "body": "I haven't measured this but....\n\nAs long a the crlf filtering is loading the entire blob/file into a buffer, there are some opportunities here for perf gains.\n\nIn git_buf_text_is_binary() we examine the entire file.  While there we could count the number of CRLFs, and plain LFs and return those sums.  We should be able to use those sums in git_buf_text_gather_stats().  Or combine those 2 routines into 1.  Then in git_buf_text_lf_to_crlf() add this delta \"(count_crlf - count_lf)\" as padding to the amount of reserved space in the destination buffer so that the memcpy loop doesn't need to realloc as the file is being converted.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/3211", "title": "Added big 1gb crlf test.", "body": "This test generates a 1GB text file with CRLF and tries to stage and commit it.  And then tries to clone and checkout.  This currently fails (at least on 32 bit builds) because the crlf filter pipeline tries to allocate multiple 1GB buffers to contain various clean/smudged versions of the file.\n\nCurrently, this is by design, so this test is a bit premature. \n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/3197", "title": "Created clone test for 5GB repos.", "body": "Here is a test to create a local 5GB repo and locally clone it.  The purpose is to confirm that we send receive packfiles larger than 4GB.  It creates 5 uncompressible 1GB files in a series of commits rather than trying to create a single huge file.\n\nThis is to complement #2932.\n\nThis test replaces my earlier tests described in #3121 and #3162 (which tried to create a single huge file (and which causes other problems beyond the scope of the original problem)).\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/3191", "title": "Add test to investigate case folding on Windows.", "body": "Here is a test that explores the quirks of case-folding on Windows.  Before we can choose the right replacement for strcasecmp() and friends, I wanted to know exactly what the filesystem does.  This tries to determine that by brute-force colliding files.  THEN confirming that the our version of strcasecmp() agrees with that.\n\nTODO:\n- [] If we like the way this is going, I can write a ntfs/windows version of git__strcasecmp() that behaves like the filesystem using CompareStringOrdinal().\n- [] Deal with calls to tolower().\n- [x] Maybe add a more detailed Turkish-i case -- It is my belief that NTFS only does type \"C\" and \"S\" foldings, not type \"T\" (nor type \"F\"). And the non-symmetric Turkish-i cases are type \"F\", so I think we're OK here.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mstrap": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3675", "title": "git_status_options: support non-recursive directories status for specified pathspecs", "body": "`git_status_options` should provide an additional flag to only query the status for directories matching the pathspecs **non-recursively**.\n\nReason: when monitoring file systems, it's not always possible to exactly tell which files have been added/modified/deleted, but change information is only available on a per-directory level (for instance in case of OSX FSEvents [1]). To refresh an affected directory efficiently, it would be helpful to invoke a non-recursive status query for this directory.\n\nBtw, in case this should already be possible I've posted a related question on stackoverflow.com ([2]).\n\n[1] https://developer.apple.com/library/mac/documentation/Darwin/Reference/FSEvents_Ref/\n[2] http://stackoverflow.com/questions/35582759\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/3742", "title": "[WIP] git_status_options: support non-recursive directories status (issue #3675)", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "QJonny": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3641", "title": "Cannot create blob in repository located on a network sharing", "body": "I'm having a problem with the libgit2. I currently use it in a C# project with the help of the LibGit2Sharp wrapper.  \nI've created a bare repository on a **network sharing** and want to add some files.\nThis is how I add a file:\n\n```\n    public static TreeDefinition WriteFile(Repository repo, TreeDefinition td, string path, byte[] content)\n    {\n        // Create a blob from the content stream\n        MemoryStream ms = new MemoryStream (content);\n        var blob = repo.ObjectDatabase.CreateBlob (ms);\n\n        return td.Add (path, blob, Mode.NonExecutableFile);\n    }\n```\n\nbut whenever I call the _CreateBlob_ method (which internally calls the libgit2 function _git_blob_create_fromchunks_), I encounter the following error:\n\n> Failed to read file into stream: No such file or directory\n\nOn a local repository the above code works well and the repository initialization works correctly, so this is not a folder access permission problem.\n\nI dug into the library code and could find an explanation for the bug: \nthe problem occurs in the git_blob_create_fromchunks function (blob.c), more specifically at:\n\n```\nwhile (1) {\n    int read_bytes = source_cb(content, BUFFER_SIZE, payload);\n\n    if (!read_bytes)\n        break;\n\n    file_size += read_bytes;\n\n    if (read_bytes > BUFFER_SIZE) {\n        giterr_set(GITERR_OBJECT, \"Invalid chunk size while creating blob\");\n        error = GIT_EBUFS;\n    } else if (read_bytes < 0) {\n        error = giterr_set_after_callback(read_bytes);\n    } else {\n        error = git_filebuf_write(&file, content, read_bytes);\n    }\n\n    if (error < 0)\n        goto cleanup;\n}\n\n\nif ((error = git_filebuf_flush(&file)) < 0)\n    goto cleanup;\n```\n\nSo, first a _streamed_[hash]_ file is created and filled with chunks of 4096 bits, then the _filebuf_flush_ function is called and the file should normally be flushed.  \nLater in the code, the _write_file_stream_ function is called, but the following check fails systematically:\n\n```\nif (written != file_size || read_len < 0) {\n    giterr_set(GITERR_OS, \"Failed to read file into stream\");\n    error = -1;\n}\n```\n\nThis is because the _file_size_ variable is 0, which is not the actual file size (the variable is actually previously set by a call somewhere else in the code to the _GetFileAttributesExW_ function). But this only happens on network sharings, not if the file is located on the hard drive.\n\nIn order to temporarily fix this problem, I call a _ensure_file_size_correct_ function just after the file flush:\n\n```\nvoid ensure_file_size_correct(const char *path, long file_size)\n{\n    WIN32_FILE_ATTRIBUTE_DATA fdata;\n    git_win32_path path_w;\n    int len;\n\n    if ((len = git_win32_path_from_utf8(path_w, path)) < 0)\n        return -1;\n\n    git_win32__path_trim_end(path_w, len);\n\n    const int max_iterations = 10000; // Timeout after 10 seconds\n    int curr_iteration = 0;\n\n    while (1)\n    {\n        if (GetFileAttributesExW(path_w, GetFileExInfoStandard, &fdata))\n        {\n            long size = ((git_off_t)fdata.nFileSizeHigh << 32) + fdata.nFileSizeLow;\n\n            if (size >= file_size)\n            {\n                break;\n            }\n        }\n\n        SleepEx(1, 0);\n        curr_iteration += 1;\n\n        if (curr_iteration >= max_iterations)\n        {\n            break;\n        }\n    }\n}\n```\n\nHere, I just call over and over again the _GetFileAttributesExW_ function until the returned value is correct. Note that this **is by no means a definitive bug fix**. \n\nThe question is therefore, can you find a proper way to fix this problem?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "asandroq": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3595", "title": "libgit2 assumes everything not under refs/tags are commits", "body": "In my application that uses `libgit2` I create tags to blobs (which is unusual because tags normally point to commit objects) and create symbolic references to those tags under `refs/snapshots`. The `git` program has no problems fetching those references:\n\n```\n10:37 $ git fetch origin refs/snapshots/*:refs/snapshots/*\nremote: Counting objects: 2, done\nremote: Finding sources: 100% (2/2)\nremote: Total 2 (delta 0), reused 2 (delta 0)\nUnpacking objects: 100% (2/2), done.\nFrom ssh://gerrit.qnective.com:29418/qtalk_proj\n * [new ref]         refs/snapshots/bc1b0ddb-37b8-44b3-9589-9e31bf17c95b -> refs/snapshots/bc1b0ddb-37b8-44b3-9589-9e31bf17c95b\n```\n\nBut `libgit2` fails with \"Object is not a committish\". In `smart_protocol.c`, function `fetch_setup_walk` we can see a call to `git_revwalk_push`, which will assume the reference must be a commit, which is not always the case.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3473", "title": "SSH transport never disconnects from server", "body": "A call to `libssh2_session_disconnect` is missing from `ssh_stream_free` in the SSH transport. Without this call, the SSH client never logs out from the server. SSH servers like the one embedded in Gerrit are very strict about the number of simultaneously open connections.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4383", "title": "transports: Avoid walking over non-commit objects", "body": "References may point to objects that are not commits, such as tags to\r\nblobs. In that case the reference must not be walked over further.\r\n\r\nFixes #3595.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DoctorVanGogh": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3572", "title": "Potentially invalid paths in repository index lead to misleading error messages", "body": "I have a legacy repository (on win32), where it seems there were some commits with a possibly invalid filename (I'm saying 'possibly invalid', since the _filesystem_ will process those filenames just fine, it's just the shell/file explorer on top, which may have issues).\n\nSpecifically I had a directory with a trailing `.` in it's name. Any attempt to access the index of the repository with this commit would just error `Invalid data in index - invalid entry`. **This is extremely unspeciffic and unhelpful**.\n\nIt took me quite some time to track down the cause of this error - I think this should be improved.\n\n---\n\nFor one, I think the path sanitation could be relaxed a bit on win32 - specifically an argument could be made to remove the [GIT_PATH_REJECT_TRAILING_DOT](https://github.com/libgit2/libgit2/blob/master/src/path.h#L578) flag from the defaults. If path arguments are prepadded with `\\\\?\\` before invoking the filesystem apis trailing dots should work just fine. \nSee [here](https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247%28v=vs.85%29.aspx):\n\n> Because it turns off automatic expansion of the path string, the \"\\\\?\\\" prefix also allows the use of \"..\" and \".\" in the path names, which can be useful if you are attempting to perform operations on a file with these otherwise reserved relative path specifiers as part of the fully qualified path.\n\nand [here](http://blogs.msdn.com/b/brian_dewey/archive/2004/01/19/60263.aspx):\n\n> If you are writing a Win32-based program that manages arbitrary files, consider prepending \"\\\\?\\\" to the start of file names before you call CreateFile( ), DeleteFile( ), RenameFile( ), etc. This escape sequence at the start of a file name instructs the Win32 subsystem to bypass its normal name checking functions, and you will be able to use any valid NTFS name from your Win32 program.\n\nIn a multi platform environment it is not entirely implausible to encounter a repository where a file might have been commited with a file/path name ending in a trailing `.`.\nCurrently this completely blocks access to the whole repository through libgit2.\n\nOn the other hand there are good and valid reasons why such paths are considered invalid, and the current source suggests that someone thought a good deal about this.\nStill... the current user/developer experience in such a case is unacceptable in my eyes.\n\n---\n\nSo, on second thought, at least the error message should be improved here. From my exploration of the source, it seems that [`index_entry_create`](https://github.com/libgit2/libgit2/blob/master/src/index.c#L866) actually outputs a quite specific error message, but this error get's overridden further up in the call tree by [`parse_index`](https://github.com/libgit2/libgit2/blob/master/src/index.c#L2389) utterly unhelpful `invalid entry`message.\n\nIf the error was more specific this would be a great change here.\n\n---\n\nReproduction steps:\n1. Create empty repository\n2. Download https://github.com/DoctorVanGogh/libgit2demo/blob/master/index and copy to `.git/index` in repository\n3. Access repository's index with lib2git\n\n=> Error `Invalid data in index - invalid entry`\n\nThe offending entry is at position 257 in the index: `aaaac.aar./aar.aaaaaa`\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mgorny": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3563", "title": "git_clone() with SSH URL can randomly fail with 'would block' errors", "body": "It looks that SSH transport reads/writes are not accouting for possible `LIBSSH2_ERROR_EAGAIN`, which means that they can fail when the syscall is interrupted by a signal. This is quite a nuisance when cloning large repositories.\n\nI've attempted the 'obvious' fix of looping when `LIBSSH2_ERROR_EAGAIN` is received. Sadly, it didn't fix the issue in my program and instead caused it to hang randomly when fetching. So I'm reporting a bug instead, and hoping someone could come up with something better. I'll try to set up a proper test case later.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mcdado": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3535", "title": "Ignore rules are not always respected \u2014 depending on ordering of rules and check-in status of other files", "body": "While using [GitUp](http://github.com/git-up/GitUp) I noticed some strange behaviors that I reported to @swisspol, the author of GitUp.\n\nI reported the problem on the [GitUp forum](http://forums.gitup.co/t/nested-gitignore-with-pattern-based-exceptions-not-working-correctly/334/5?u=mcdado) but it seems to be a libgit2 bug, which GitUp uses to interface with the repository and .gitignore files.\n\nGitUp uses a slightly forked version of libgit2 which is based on e0ab1ca0288db57fabbd63dfb6a0cd27f3acf8b2 as of GitUp b1009 (which still shows the problem).\n\nI created a [demo repo](/mcdado/nestedignores-demo) on GitHub to showcase the problem.\n\nI will use GitUp as a reference, but its behavior should depend on libgit2 as far as I know, so please excuse me if I use its own behavior as the culprit.\n\nHere are the steps that I followed (details below):\n![screen shot 2015-12-06 at 00 19 17](https://cloud.githubusercontent.com/assets/898057/11613177/f5cb923e-9c17-11e5-8984-a6e79abaaf65.png)\n1. Create and commit a `.htaccess` and `.gitignore` file in the root of the project. `.gitignore` ignores everything and then adds some exceptions, for itself and for the `.htaccess` file.\n2. Create a `test/` directory with a test file in it, in my case the file is `test.php`\n3. Create a `.htaccess` in the `test/` directory with some dull content in it\n\nSo far so good. Now things start to get messy.\n1. Force add `test/test.php` even if it's in a ignored path and commit\n\nAfter adding a file in the `test/` directory that is ignored, now the base `.gitignore` rule is applied to this directory too, and GitUp shows the .htaccess file.\n![screen shot 2015-12-06 at 13 08 07](https://cloud.githubusercontent.com/assets/898057/11613250/a847b31e-9c1a-11e5-92a8-253582d897e2.png)\n1. Try removing the `test.php` file: `git rm test/test.php`, and the `.htaccess` file disappears.\n   ![screen shot 2015-12-06 at 13 08 41](https://cloud.githubusercontent.com/assets/898057/11613252/af834404-9c1a-11e5-94f6-85bd38f49dc5.png)\n2. Try force-adding another file, for example a dummy `test/robots.txt` file, and even before committing, the `.htaccess` file appears\n   ![screen shot 2015-12-06 at 13 08 23](https://cloud.githubusercontent.com/assets/898057/11613256/c69965a6-9c1a-11e5-8ac2-4178594c8b38.png)\n\nAs you can see in the first screenshot, git correctly ignores the files in the ignored directory (you can see a `git st` which is alias for `git status`. I originally experience this bug with a `node_modules` directory not being ignored, which is a problem because there are a ton of files in the working directory that should be ignored and create a lot of noise.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yuyichao": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3524", "title": "`git_clone` creates an empty repo if the remote resolves to the same path with the local one", "body": "Ref https://github.com/JuliaLang/julia/issues/14051 and https://github.com/JuliaLang/julia/pull/14146, in particular https://github.com/JuliaLang/julia/pull/14146#issuecomment-159796661 .\n\nWhen the remote does not exist or is not a git repo, it is expected that `git_clone` should return an error. However, if the remote and the local path happens to resolve to the same path, `git_clone` creates an empty git repo since the local path is initialized before checking the remote. (FWIW the git command line report an error in this case.)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pandada8": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3464", "title": "[Q] How to build a pure local version(without the libssl dependency)?", "body": "Currently I am using git2go with latest libgit2 for _local_ git operation, and I want to create a staticly linked version for distribution.\nSo is there any method I can remove the dependency and drop the network libs? Or is there any better way to handle it?\nthe cmake provide the options to drop libssh and libcurl, and i already remove them\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "leoyanggit": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3456", "title": "Completion callback in git_remote_callbacks", "body": "```\n/**\n * Argument to the completion callback which tells it which operation\n * finished.\n */\ntypedef enum git_remote_completion_type {\n    GIT_REMOTE_COMPLETION_DOWNLOAD,\n    GIT_REMOTE_COMPLETION_INDEXING,\n    GIT_REMOTE_COMPLETION_ERROR,\n} \n```\n\nThe callback takes `git_remote_completion_type` as an argument. Currently the callback is not used. Actually I wanted to use this callback to tell the completed operations. Specifically I wanted to know when a fetch negotiation is finished. To fully use this callback my questions are that\n\n1) Should this callback apply to both fetch and push or fetch only? (Update: I saw `git_remote_callbacks` in `git_push_options`. So I think it applies to both fetch and push.)\n2) To tell the completion of negotiation should something like `GIT_REMOTE_COMPLETION_NEGOTIATION` be added?\n3) Should `GIT_REMOTE_COMPLETION_INDEXING` mean the completion of writepack? (Update: what does it mean for push?)\n4) Should `GIT_REMOTE_COMPLETION_ERROR` be thrown when any error occurs at any point?\n\n[update] or should we add `git_fetch_negotiation` callback like `git_push_negotiation` into the remote callbacks for the purpose of knowing when a fetch negotiation is completed?\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "scunz": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3449", "title": "Implement support for rerere", "body": "libgit2 is currently lacking support for git's \"reuse recorded resolution\" database.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/1569721", "body": "@tanoku The include of git2/attr.h in more than one compilation unit causes my Windows build to fail with `LNK2005: _git_attr__true alread defined in ...` (Same for __false and __unset)\n\nThe cause for this is most probably that it is exported for usage in another dll from every translation unit of my (_libgit2 using_) dll - due to the definition of `GIT_EXTERN()`. See PR #686 (I agree that my fix from there was wrong, considering that clar is not linking against the dll).\n\nI'm still puzzled why this works for all of you.\n\nMy project setup is very simple: It's a C++ DLL, which wraps libgit. On Windows i'm currently using MSVC2010 Express; libgit2 is a submodule to my whole project, which is cmake generated. I set THREADSAFE = ON, BUILD_CLAR = OFF (and meanwhile figured i have to set STDCALL = OFF, but that's a different issue). Anything that rings any bells?\n\nI'm wondering if something like this might do the trick:\n\n``` C\n#elif defined(_MSC_VER)\n# ifdef git2_EXPORTS /* defined by cmake */ \n#   define GIT_EXTERN(type) __declspec(dllexport) type\n# elif defined( CURRENTLY_BUILDING_CLAR ) /* would have to be set in CMakeLists.txt for the clar-target */\n#   define GIT_EXTERN(type) extern type\n# else\n#   define GIT_EXTERN(type) __declspec(dllimport) type\n# endif\n#else\n# define GIT_EXTERN(type) extern type\n#endif\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1569721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2259655", "body": "Looking through the changes of #1115, among the first 4 calls to `giterr__check_version` are 3 that might be called with `structure == NULL`[1]\n\nDid you really intent to dereference structure here unconditionally?\n\n[1] checkout.c#L620 diff.c#L761 diff_output.c#1269\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2259655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2259758", "body": "thanks :-)\n\nActually, if I had listened to what my Andoid wanted to tell me, I had known it 10 minutes earlier:\n\n```\n[LibGit2_GCC] $ /bin/sh -xe /tmp/hudson3591945765975201148.sh\n+ cd bld\n+ ctest .\nTest project /var/lib/jenkins/home/w/LibGit2_GCC/bld\n    Start 1: libgit2_clar\n1/1 Test #1: libgit2_clar .....................***Exception: SegFault  0.18 sec\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2259758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "tracervision": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3397", "title": "Suggestion: add support for http.cookieFile", "body": "It would be awesome if libgit2 had support for the http.cookieFile configuration. Tools like Xcode Bots use libgit2 and cookie support would be a big help in an environment where they are used for non-interactive repository access.\n\nhttp://git-scm.com/docs/git-config\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Therzok": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3274", "title": "Blame not showing Not Committed Yet", "body": "Say there is file A with only one commit that has the content:\nA\nB\nC\n\nDoing a blame on it will show the same commit for every line.\n\nIf I modify file A and change it so it is:\nA\nD\nC\n\nDoing a blame on it will show the same commit as before modifying, but git.git will show 00000 as hash and Not Committed Yet.\n\nLogging for future purposes, I might get on to hacking it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3096", "title": "Double remote connection", "body": "Exposed through: https://github.com/libgit2/libgit2sharp/pull/1038\n\nIt seems as though `git_remote_push`, does not verify that the remote is already connected [here](https://github.com/libgit2/libgit2/blob/master/src/remote.c#L2381-L2397).\n\n`git_remote_upload` does check for [that](https://github.com/libgit2/libgit2/blob/master/src/remote.c#L2328-L2330).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/3167", "title": "Introduce blame options FOLLOW_EXACT_RENAMES flag.", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jkoutavas": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3244", "title": "Please provide an up to date \"git pull\" example", "body": "Hi. I'm really new to libgit2.\n\nI need to implement the steps of a git pull (git fetch; git merge FETCH_HEAD). My searching of the interwebz for examples have come up with old API solutions, and some snippets of using the new API. (0.22.2). I haven't been able to piece things together enough to \"pull\" it off (pun intended.) It seems this would be a very common task for implementation for libgit2. Can someone provide this example? \n\nMaybe a \"git fetch; git merge FETCH_HEAD\" example should be added to the 101 Samples? (Not a mention of the word 'merge' in the 101 samples.)\n\nThanks,\n\n/Jay\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nulltoken": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3210", "title": "50 shades of commit errors", "body": "`git_commit__parse` currently returns -1 when\n- the `tree` isn't the first element\n- an oid is malformed\n- A unix timestamp isn't valid\n- A signature is malformed\n- ...\n\nAlthough correctness is important, not those errors should be considered as equally fatal.\n\nFor instance, a malformed signature isn't a blocking issue per se. Indeed, in similar situations, git.git cringes and output an error message but moves over to the next commit.\n\nThere are numerous repositories in the wild with bogus signatures. It would be nice to still be allowed to leverage libgit2 and git-log those (ie. revwalking + parsing) while traversing commits containing such malformed signatures. \n\nThe tool implementing this could decide to issue a warning, silently ignore the bogus signature... \n\nReturning -1 for all kind of errors doesn't allow the caller to make this kind of decisions.\n\nThoughts?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2920", "title": "Update Travis build to also target Mac OS X on x86", "body": "-DCMAKE_OSX_ARCHITECTURES=i386;x86_64\n\ncf. https://github.com/libgit2/libgit2/pull/2917\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/605059", "body": "> This is some hot shit. Thanks Emeric, it was much needed.\n\n\"hot shit\" ? Do you mean the code is _that_ crappy ? ;-) Well, as this is also needed from the bindings perspective, I thought I could give it a try...\n\n> I think that 'git_person' needs a long overdue rename\n\nThe JGit equivalent of a git_person is named [PersonIdent](https://github.com/spearce/jgit/blob/master/org.eclipse.jgit/src/org/eclipse/jgit/lib/PersonIdent.java). Person Ident class also holds name, email, time and offset. However, I agree with you, this doesn't reflect the whole intent of the structure.\n\nAs this is supposed to be used for commits and tags, how about some more general purpose naming such as **git_action_details** or **git_action_info** ?\n\nMoreover, as time and timezone_offset are closely related, how about creating a new struct (named **git_date**, for instance) which would hold those two information?. \n\n<pre>\nstruct git_action_details {\n    char *name;\n    char *email;\n    git_date when\n};\n\nstruct git_date {\n    time_t time;\n    int timezone_offset;\n}\n</pre>\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/605059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/605098", "body": "> Hot shit means cool stuff. What are you, French? :p\n\nUnfortunately, yes. But I'm fighting hard against this. Maybe, when I'm older and wiser, I'll be able to become Finnish ;-)\n\n> However, git_action_details sounds a little bit too generic. \n\nI agree, but I haven't been able to come with something more appropriate/acute.\n\n> there is no need to take into account the offset when comparing, right?\n\nYou're right. Sorting should be performed according to the timestamp.  Offset is only there for presentation concerns.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/605098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/605114", "body": "...BTW, the next task I envision for work on is the parsing of the encoding. This is also required to correctly display name & messages. Some interesting related tests can be found [here](https://github.com/spearce/jgit/blob/master/org.eclipse.jgit.test/tst/org/eclipse/jgit/revwalk/RevCommitParseTest.java). \n\nWhen the parsing is ready, would you be ok to add this **char\\* encoding** field to the git_action_details struct ?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/605114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/605276", "body": "Huh... Wouldn't every parsed commit be deserialized into a git_commit containing a git_action_details ? My point was to reuse the git_action_details for the git_tag and then use the encoding to parse the tagger name and the annotation.\n\nI think you lost me. I can't see the data duplication.\n\nHowever, the more I think about, the more I agree with you. the \"action\" part in git_action_details is misleading. \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/605276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/605536", "body": "...Back to naming issue. I think I may I have nailed a better name for the proposed _git_action_details_ struct. How about **git_signature_details** ? This doesn't imply any \"action\" and keeps the concern focused on the \"Who\" and the \"When\".\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/605536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/607697", "body": "Yep! This does the trick. Thanks a lot. :-)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/607697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/663172", "body": "Ok. I'll try to push them tomorrow. However, they'll be high level ones. \n- Ensure Head is symbolic and points to master which points to commits xxx\n- Ensure master points to commits xxx\n- Ensure packed exists, is packed and points to commit xxx\n- ...\n\nThis also mean they'll be a bit fragile. Next time a commit is added to the test repo. Some of them will fail.\n\nWould this be enough ? Would you like me to take a different approach ?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/663172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/663186", "body": "No problem. This will be pushed by tomorrow evening as an additional commit of this pull request.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/663186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/809735", "body": "I'm currently working on some refactoring in this area and will work to fix this. I'd glad if you agreed to review the code once pushed :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/809735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/809752", "body": "It goes back a long time. Take a look at this http://amailbox.org/mailarchive/git/2008/10/31/3880864 :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/809752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/810109", "body": "> I tried searching for \"name\" in it, and couldn't find anything related.\n\nTake a look at the title of the thread: \"libgit2 - a true git library\"\n\n> So is libgit2 supposed to become the official git-core backend library?\n\nThis was one of the original goal of this library. Provided libgit2 achieves to be git-complete from the feature perspective, we may even reach this target ;-)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/810109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/815833", "body": "The _references_ branch (https://github.com/libgit2/libgit2/tree/references) has been updated with the rework job. Would you be so kind as to try and reproduce your issue against the new implementation ? \n\nThanks in advance.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/815833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/837784", "body": "following test in t10-refs.c does the kind of lookup you're after.\n\nHope this will help you.\n\n<pre><code>BEGIN_TEST(readsym0, \"lookup a symbolic reference\")\n    git_repository *repo;\n    git_reference *reference, *resolved_ref;\n    git_object *object;\n    git_oid id;\n\n    must_pass(git_repository_open(&repo, REPOSITORY_FOLDER));\n\n    must_pass(git_reference_lookup(&reference, repo, GIT_HEAD_FILE));\n    must_be_true(reference->type & GIT_REF_SYMBOLIC);\n    must_be_true((reference->type & GIT_REF_PACKED) == 0);\n    must_be_true(strcmp(reference->name, GIT_HEAD_FILE) == 0);\n\n    must_pass(git_reference_resolve(&resolved_ref, reference));\n    must_be_true(resolved_ref->type == GIT_REF_OID);\n\n    must_pass(git_object_lookup(&object, repo, git_reference_oid(resolved_ref), GIT_OBJ_ANY));\n    must_be_true(object != NULL);\n    must_be_true(git_object_type(object) == GIT_OBJ_COMMIT);\n\n    git_oid_mkstr(&id, current_master_tip);\n    must_be_true(git_oid_cmp(&id, git_object_id(object)) == 0);\n\n    git_repository_free(repo);\nEND_TEST</code></pre>\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/837784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/837794", "body": "Great!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/837794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/849448", "body": "Arrgh... This doesn't seem to fix the issue. :-/ \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/849448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/896222", "body": "signed int32 -> Y2038 problem\n\nHowever, signed int64 should be safe.\n\n> Using a (signed) 64-bit value introduces a new wraparound date that is over twenty times greater than the present age of the universe: approximately 292 billion years from now, on Sunday, 4 December 292,277,026,596.\n\nAnd Sunday is a nice day for a world end, isn't it? :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/896222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/896159", "body": "it's signed. Will force push a new version with a signed <code>int64_t</code> in a few minutes.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/896159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/922971", "body": "I'm currently working on both the force creation and the removal of tags. This should add two new functions to the API.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/922971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/923003", "body": "Current naming would be\n- <code>tag_create_force()</code>\n- <code>tag_delete()</code>\n\nOf course, the final API will have to be sanctioned by higher authorities ;-)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/923003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/926296", "body": "One last request: would you be ok with adding some tests in <code>t10-refs.c</code> covering the new potential use cases?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/926296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/926777", "body": "If you happen to need assistance, just let me know. I'll be glad to help.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/926777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/927325", "body": "Not sure. :-/ \n\nFor instance, <code>Rename5</code> use case does not trigger any change to the filesystem. And the test doesn't catch it.\n\nTry and step debugging it, you should notice that the code returns early there\n\n<pre><code>if (error != GIT_ENOTFOUND)\n    return error;</code></pre>\n\n\nOnce you're done fixing this, I think that relying also on <code>gitfo_exists(temp_path)</code> to enforce your tests might be a good idea. ;-)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/927325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/927438", "body": "@carlosmn: fixed.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/927438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/928082", "body": "> HEAD can be whatever it feels like.\n\neven a tag... That's a weird world, isn't it?\n\n> Even more reasons for this change\n\nJonathan indeed nailed it, this change is required. Thanks a lot!\n\nWould you please be so kind as to commit as well some tests to t10-refs.c? This would be really appreciated. :-)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/928082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/929435", "body": "> I'm not sure gitfo_exists will help much.\n\nThis is a low level function change and we're testing against the refcache layer. Moreover there is the potential packed/loose transformation to cover. For the passing test cases, I'd really suggest you to use <code>rename(0|1|2)</code> as test templates rather than <code>rename4</code>.\n\nHowever, <code>rename4</code> should be fine for non passing tests.\n\n> Remember I'm overwriting refs, so they need to exist in the first place. \n\nI can't help but thinking that in \"force\" mode, we're more or less barebone. In my opinion, those below _should_ work\n- force create ref (A) over an existing ref (B) -> B shouldn't exist anymore, A should be loose (provided B was packed, it can stays this way)\n- force create ref (A) over a non existing ref (B)  -> B shouldn't exist, A should be loose\n- force rename an existing ref (A) into an existing ref (B) -> B should be loose, A shouldn't exist anymore (provided A was packed, it should be removed from the packfile)\n- force rename an existing ref (A) into a non existing ref (B) -> B should be loose, A shouldn't exist anymore (provided A was packed, it should be removed from the packfile)\n- force rename a non existing ref (A) into an existing ref (B) -> Should obviously fail\n- force rename a non existing ref (A) into a non existing ref (B) -> Should obviously fail\n\nWhat's your opinion about this? Beware, if you agree, this will mean more tests to write ;-) \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/929435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/930649", "body": "> By the way, the way the code is written today, HEAD is allowed to point to a tag\n\nI know. This is quite close to the _current_ cgit implementation.\n\n> I haven't added a check for HEAD because it's not clear yet we do want the function to allow it normally or if we want to add an explicit \"shallow reference\" flag.\n\nI agree. I think that, given the input from Jonathan, we should first decide how we're willing to deal with this in the near future.\n\n> Damn tests! shakes fist :)\n\nThanks for having taken care of this :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/930649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/930763", "body": "> The last two tests (non-existant ref A) don't belong in the rename but in reference reading, as you need to have looked up a reference in order to rename it.\n\nNice catch! You're right. As we rely on instances, and not names, those are not needed.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/930763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/930918", "body": "Regarding the test cases, I realize that I should not comment after a very short night. I did succeed in making myself completely clear. Sorry for that :)\n\nWhat I (very lamely) named Ref(X) was referring to a tuple (a name + a content + a type). The tests should exercise every possible aspect of this tuple provided, it's easily assertable. By easily assertable, I mean 2 to 3 lines of codes. For instance making sure a Ref remains packed after it's being overwritten is _not_ easily assertable. Ensuring that a ref is loose or a file exists should be easily assertable. So should be the target of the ref.\n\nMoreover, I think that all already existing tests which exercise the \"happy path\" (ie. successfully perform the transformation) of the creation or renaming of a reference should also \"pass\" when relying on the newly added \"_force\" functions. However, this would more or less require a deep rewrite of the t10-refs.c if we wan't to avoid code duplication in the tests.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/930918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/930938", "body": "If that's OK with you, I could fork your \"ref-force-create\" branch and contribute to the tests.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/930938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/931132", "body": "> with current development branch code, this will cause a memory leak (...) I've sent a pull request that deals with this at the reference level.\n\nI can't find any pull request for this. Are you refering to your [invalidated-refs](https://github.com/carlosmn/libgit2/commits/invalidated-refs) branch?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/931132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/932014", "body": "Will do, sir! :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/932014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/932026", "body": "> feel free to send a pull request with some more tests, Emeric.\n\nI'll do that.\n\n> Awesome addition anyway. Thanks!\n\nIndeed!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/932026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/938440", "body": "@tanoku: done, sir! :)\n\n> I've added checking in git_ref_create() for existing OIDs, can you please drop 285df62? :)\n\nAdded a test demonstrating that one can **not** create a ref pointing to an unknown OID\nAs well, added a test demonstrating that one **can** create a tag pointing to an unknown OID\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/938440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/948512", "body": "Or maybe could you change your signature to <code>GIT_EXTERN(int) git_tag_list(git_strarray &#42;tag_names, git_repository &#42;repo, const char &#42;pattern);</code>\n\nWhen passing a NULL <code>pattern</code>, this would return the whole list of tags. The hard work would be delegated to <code>git_reference_listall(..)</code>\n\nPattern filtering could be implemented later, but the interface would be usable.\n\nOf course, the signature would have to be sanctioned by @tanoku. :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/948512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/948540", "body": "Ooops. Sorry. :-( I didn't know about this Doxygen requirements. I'll\npay more attention next time.\n\nHow would you feel about a wiki page which would list all of these\nconventions. Something like a \"contributing guide\"?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/948540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/950903", "body": "You're right.\n\nHow about temporarily returning <code>GIT_ENOTIMPLEMENTED</code>?\n\nThanks to @carlosmn, we should shortly be able to parse the config. Reinit shouldn't be too far from there.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/950903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/965873", "body": "Thanks for this. I'm eating my part of the humble pie :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/965873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/300043", "body": "Nice! :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/300043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302140", "body": "Nice one! \nI knew the duplicate packed and loose ref would help by biting us in the... back. :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303030", "body": "+1 :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303558", "body": "common.h:\n\n<pre><code>#if defined(_MSC_VER)\n# define GIT_INLINE(type) static __inline type\n#else\n# define GIT_INLINE(type) static inline type\n#endif</code></pre>\n\n\nMy guess would be that GIT_INLINE exists because inlining requires a different specifier depending on the platorm/compiler.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/321248", "body": "Thanks a lot for this one :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/321248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/335378", "body": "@tanoku: Finally! ;-)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/335378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/384852", "body": "Thx.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/384852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/449230", "body": "@tanoku instead of git__throwing when in detached state, how about returning <code>false</code>. It's not an empty repository after all as the head points to a commit...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/449230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/449472", "body": "@carlosmn \n\n> Nice catch, but we could simply delete this if, as git_reference_resolve returns GIT_SUCCESS if given an OID ref. \n\n+1\n\n> In case that the user has manually set HEAD to point to a non-existent branch\n\nIf I forge the <code>HEAD</code> to make it point at <code>carlosmn</code> in an empty repo, git.git commit forces the creation of the branch with the first commit, and I'm quite happy with that.\n\nIf I tweak the <code>HEAD</code> by making it pointing to non existent <code>OID</code> in an empty repo, git.git screams loudly when doing log, status, commit... And this will remain undetected by this code. However, I'm not sure the benefit of performing a <code>git_odb_read_header()</code> is worth the pain of it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/449472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/449688", "body": "@tanoku, @carlosmn and I would greatly benefit from your mighty knowledge. \n\nInitial request was to allow <code>is_empty()</code> not to throw while in detached head state.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/449688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/452322", "body": "<3\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/452322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/468748", "body": "@jasonpenny been there, done that, got hurt too :-)\n\nPR #311 should fix this\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/468748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/524813", "body": "@belkiss Sorry for the inconvenience. Strangely the test pass on Windows. What OS are you running?\n\n@schu Thanks for the quick fix!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/524813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/524952", "body": "> this may need a little more digging to find out why the false positive.\n\nSadly, I'd say that Win32 version of p_realpath is not completely POSIX compliant. The way I read the doc, it should return NULL when being passed a nonexistent file/directory. This clearly calls for a patch ;-)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/524952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/598355", "body": "@carlosmn @xpaulbettsx test `config11` fails on my box. Shouldn't `HOME` be dealt with in a similar way than it's done in `git_config_find_global()` ?\n\n``` c\n    home = getenv(\"HOME\");\n\n#ifdef GIT_WIN32\n    if (home == NULL)\n        home = getenv(\"USERPROFILE\");\n#endif\n```\n\nBelow the failure error message\n\n```\n  Failed (1 failures):\n  1) \"fall back to the global config\" [test config11 @ ..\\..\\libgit2\\tests\\t15-c\nonfig.c:245]\n        Method failed: git_config_get_int(cfg, \"core.something\", &num)\n        Error: Failed to get value for core.something\n        - Config value 'core.something' not found\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/598355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/753690", "body": "@tanoku\n\ncl_assert((GetFileAttributes(**git_repository_path(_repo)**) & FILE_ATTRIBUTE_HIDDEN) != 0);\n\nSorry I didn't catch this earlier.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/753690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/874123", "body": "When compiling on Windows, the following warning is issued by the compiler\n\n```\n5>..\\..\\libgit2\\src\\win32\\posix_w32.c(83): warning C4293: '<<' : shift count negative or too big, undefined behavior\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/874123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/874260", "body": "I've already fixed the issue by casting `fdata.nFileSizeHigh` to a `git_off_t`. This makes the warning disappear.\n\nI'll send a PR later with an additional fix to the transport layer.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/874260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1000231", "body": "@arrbee Sorry for being a bit late. I'm afraid `readdir_r` is not defined under Windows. This prevents libgit2 from being built.\n\n>  ....\\libgit2\\src\\path.c(550): warning C4013: 'readdir_r' undefined; assuming extern returning int \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1000231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1030535", "body": "@arrbee @tanoku It looks like `buf` gets recycled before being dumped into the output.\n\n_Note:_ the failure below was expected but `message` doesn't reflect the output of the `snprintf` call\n\n```\n# *** object::commit::commitmessage ***\nnot ok 111 - is_cleaned\n  ---\n  message : \u007f\u00de\n  severity: fail\n  suite   : object::commit::commitmessage\n  test    : is_cleaned\n  file    : ..\\..\\libgit2\\tests-clar\\object\\commit\\commitmessage.c\n  line    : 47\n  description: string mismatch: expected_output != git_commit_message(commit)\n  ...\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1030535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1199144", "body": "@arrbee In the original (less than optimal #622 :) ) proposal, there was a TODO stating \"/\\* TODO: Should we check that the directory actually exists? */\".\n\nI wrote it because the tests were _passing_ on Windows (and I was willing to add as little code as possible). However I wasn't able to figure a use case when a missing workdir would be valid.\n\nIf the tests fail on *nix (p_realpath?) maybe should we add a `#ifdef GIT_WIN32` and ensure `git_path_isdir() == true`?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1199144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1199175", "body": "Or, maybe better, pushing down this test in the win32 posix implementation of `p_realpath()`?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1199175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1278699", "body": "@schu Thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1278699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1294201", "body": "@tanoku :fire: `va_copy` doesn't look valid on Windows\n\n2>....\\libgit2\\src\\buffer.c(157): warning C4013: 'va_copy' undefined; assuming extern returning int\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1294201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1295727", "body": "@peff I think @tanoku already found the source-of-all-wonders (cf. 1adf8c6a9c2c0d8b4936bfc35b84357b13f5a2b2) :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1295727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1421409", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1421409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1491630", "body": "@schu Thanks for this! I forgot to check Travis :-/\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1491630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1741502", "body": "Dammit, @ben,! That was my first task for today! \n\n:heart:\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1741502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1973186", "body": "/home/travis/builds/libgit2/libgit2/src/delta.c: In function \u2018git_delta_create_index\u2019:\n151/home/travis/builds/libgit2/libgit2/src/delta.c:294:2: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1973186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1996384", "body": "Aren't you missing a `git_reference_free(trailing)`?\n\nI can already smell some :beer:  ;-)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1996384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3385435", "body": "@csware Your fix works for me. However, maybe would it be better to open a PR so that it can be discussed more publicly?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3385435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3666180", "body": "@ben or maybe do you mean `:blsuh:`?\n\n:stuck_out_tongue_closed_eyes: \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3666180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3988331", "body": "@arthurschreiber Fixed!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3988331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/4016141", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/4016141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/5281543", "body": "q?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/5281543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/5281701", "body": "Don't blame it on the focus, blame it on the boogie!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/5281701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/5332586", "body": "Aren't we missing some assertions here?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/5332586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/5337186", "body": "How about:\n- Previous resolved HEAD target is now the commit parent\n- Current resolved HEAD points at the newly created commit\n- Reflog has been correctly fed\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/5337186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/5735321", "body": "`return error`?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/5735321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30323", "body": "Current signature of the method is <code>void git_cache_init(git_cache *cache, size_t size, git_cached_obj_freeptr free_ptr)</code>.\n\nFine with you if I change it to return an <code>int</code>?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30425", "body": "It's now fixed\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/61525", "body": "Damn! You're right. Will force-push a fix. Thanks for having spotted this.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/61525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/129476", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/129476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/129477", "body": "Ooops. My mistake. Thanks for having spotted it. ;-)\n\nHowever, in order not to silently swallow the error, I'd rather fix it this way.\n\n``` c\nif ((error = determine_status(st, pm != NULL, pi != NULL, pa != NULL, m, entry, a, status_path(pm, pi, pa), path_type)) < GIT_SUCCESS)\n    return git__rethrow(error, \"An error occured while determining the status of '%s'.\", a);\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/129477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/129480", "body": "Cheers :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/129480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/135642", "body": "@carlosmn fixed the signature of `git__strtol32()` as well. However, the changed rippled pretty far. No test broke though (yet?).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/135642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/166440", "body": "How about this?\n\n``` c\n/**\n * Compare an oid with an hex formatted object id.\n *\n * @param a first oid structure.\n * @param str input hex string of a object id.\n * @return GIT_SUCCESS in case of a match\n */\nGIT_EXTERN(int) git_oid_scmp(const git_oid *a, const char *str);\n```\n\n``` c\nint git_oid_scmp(const git_oid *a, const char *str)\n{\n    git_oid id;\n    int error;\n\n    if ((error = git_oid_fromstr(&id, str)) < GIT_SUCCESS)\n        return git__rethrow(error, \"Failed to convert '%s' to oid.\", str);\n\n    return git_oid_cmp(a, &id);\n}\n```\n\nOne thing that bothers me with this proposal is that one can't distinguish an error (GIT_ENOTOID) from a negative comparison result.\n\nWe could change the signature into the following. But this looks very cumbersome to use....\n\n``` c\n/**\n * Compare an oid with an hex formatted object id.\n *\n * @param a first oid structure.\n * @param str input hex string of a object id.\n * @param comp_result <0, 0, >0 if a < b, a == b, a > b.\n * @return GIT_SUCCESS in case of a match, GIT_ENOTOID if str is not a valid hex input\n */\nGIT_EXTERN(int) git_oid_scmp(int *comp_result, const git_oid *a, const char *str);\n```\n\nSo dear @tanoku, what would you go with?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/166440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/310882", "body": "> Is this a Windows compatability thing?\n\nI think so. One can find some (high level) information on this topic on [wikipedia](http://en.wikipedia.org/wiki/File_URI_scheme#Windows_2)\nThis is also supported by [.Net and Mono](http://ideone.com/2FH4G)\n\n> Does msysgit behave this way?\n\nmsysgit seems pretty happy with it too.\n\n```\n$ mkdir localclone\n$ cd localclone\n\n$ git clone file:///D:/temp/so/dwm-tinou\nCloning into 'dwm-tinou'...\nremote: Counting objects: 207, done.\nremote: Compressing objects: 100% (78/78), done.\nremote: Total 207 (delta 127), reused 207 (delta 127)\nReceiving objects: 100% (207/207), 112.66 KiB, done.\nResolving deltas: 100% (127/127), done.\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/310882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/316942", "body": "> gcc wants this to be `const char *`\n\nFixed!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/316942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/317513", "body": "> Possibly move the code from oid.c to util.c\n\nDone!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/317513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/330954", "body": "Argh! My bad. Thanks for having spotted this. \nBTW, why commenting out the code instead of removing it?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/330954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/470199", "body": "copy/paste error?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/470199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/470201", "body": "copy/paste error?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/470201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/646349", "body": "Would that protect the create/delete functions from being passed `GIT_BRANCH_LOCAL | GIT_BRANCH_REMOTE`?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/646349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/647096", "body": "> Is this on purpose?\n\nI was trying to mimic the way `git branch` works. From what I've seen symrefs are not returned. Am I wrong?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/647096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/647099", "body": "You're right! I'll fix this.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/647099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/647103", "body": "I'll change it to `git_branch_type`\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/647103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/647108", "body": "@carlosmn I'll fix that as well.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/647108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/647213", "body": "> If you tell it it's both a local and a remote-tracking branch, you've failed so you get no love from the code :p\n\nI'll add an assert detecting this\n\n> I have to wonder what your plans are for remote-tracking branches. You (as the user) don't create them or are able to do much with them. It's fetch and push that modify them and trying to do so anywhere else is probably a bug.\n\nMakes sense, indeed. I'll remove the `branch_type` parameter from the `git_branch_create()` signature. Would `fetch()` need a non externed version with the `branch_type` or do you think they'll be handled as plain references?\n\nRegarding remote-tracking branches and local ones, I was thinking about adding (later) a `git_branch_lookup()` which would return a concrete branch struct. I don't know yet what the struct would expose, though.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/647213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/735561", "body": "@arrbee Of course, you're right! Otherwise no header is being generated for binary files.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/735561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/735693", "body": "@arrbee Fixed. I also took the liberty to replace the hardcoded `a/` and `b/` by `DIFF_SRC_PREFIX_DEFAULT` and `DIFF_DST_PREFIX_DEFAULT`. Does this fit you?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/735693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/770595", "body": "> Is this the unused return value warning you were talking about?\n\nYes it was.\n\n> Because there's another p_chdir a couple lines before that hasn't been wrapped.\n\nDammit. Sorry for this.  Fixed with de9828d66f3b3108354655e08b2f269625fd28d5\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/770595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/772892", "body": "> info->index != NULL\n\nI'm not sure about this. The result may vary depending on when this is being evaluated. From what I remember:\n- `git_repository_open()` doesn't deal with the index at all\n- `git_repository_index__weakptr()` will delegate to `git_index_open()` which will either load the index from disk (if it exists) or build a new in-memory one.\n\nSo, invoking this after the opening of a repo will always set `has_index` to `false`. And invoking this after a call to `git_repository_index()` will always end up with `has_index`set to `true`.\n\nOn a personal side, I don't feel very at ease with the automatic generation of the index upon a call to `git_repository_index()`. How about:\n- expose a `get_repository_hasindex()` accessor returning true if an index is currently loaded or if an `index` file exists in the gitdir\n- add a `bool create_if_absent` parameter to `git_index_open()`, and preven `git_repository_index()` from triggering the dynamic creation of a new index.\n\n/cc @carlosmn \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/772892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/786503", "body": "Fixed and rebased!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/786503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/800269", "body": "@arrbee Would you like me to draft something along these lines? ^^\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/800269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "MrHacky": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3178", "title": "pushing commit sha1 directly doesn't work", "body": "normal git allows pushing a commit by its sha1 by using a refspec like this:\n    \"d03e40c8bbb7d2b4d6b53dd34f22805c1cee209c:refs/heads/master\"\n\nWhile libgit2 does seem to parse such refspecs, it still fails to work.\n\nI think the cause is in push.c:calculate_work which uses git_reference_name_to_id which doesn'work on a sha1.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maxkorp": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3133", "title": "Subrepository's gitignore negation rules overrides root repository gitignore (in some cases)", "body": "Bit of an oddball problem. I suspect https://github.com/libgit2/libgit2/pull/2746 Might be related. Found the issue using nodegit, but I've dug through the code and it's definitely happening at the libgit2 level. \n\nI have a project which clones another project. We'll call them parent and child. Both being git repositories, they each have a gitignore. The parent explicitly ignores the subrepository path, without a trailing slash. \n\nparent's gitignore (relative path to root of parent: `./.gitignore`)\n\n```\nsomeSubDir/child\n```\n\nchild's gitignore (relative path to root of parent: `./someSubDir/child/.gitignore`)\n\n```\n/otherDir/**/*.json\n!/otherDir/input/*.json\n```\n\nif i call `git_index_add_all` in the parent, using a wildcard pathspec (['*'] essentially) the entire contents of someSubDir/child/otherDir get added, unlike `git add .`. \n\nRemoving the negated dir in the sub repo fixes it (hence why i pointed out that PR). \nAppending a `/` to the directory in the parent gitignore fixes it. \nRemoving the leading `/` on the child or adding one to the parent has no effect. Git cli in general ignores anything to do with the subrepo in this case. I suspect the lack of a trailing slash is the culprit here, allowing the child .gitignore to even be interpreted at all (it should just be out of the picture, if it's ignored no?)\n\nWorkaround is to get the status and add everything in the status to the index (or the pathspec). Not ideal, but it works in the meantime. \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "billhoffman": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/3027", "title": "git blame is slow", "body": "We are using gitlab and found that with a large repository with a long history, the git blame was timing out.  After some digging, we found that the slowness comes from libgit2.\n\nIf you build the libgit2 example blame and run it on some of our files it takes orders of magnitude longer than command line git.\n\nFor example:\n\n  time git blame CMakeLists.txt\n  real    0m0.761s\n  user    0m0.607s\n  sys     0m0.124s\n\n  blame CMakeLists.txt > foo\n\n  real    0m37.881s\n  user    0m0.000s\n  sys     0m0.046s\n\nIs this a known issue?\n\nI tested with this version:\ngit describe\nv0.16.0-6044-g92a8194\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/3027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rcorre": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/2968", "title": "Empty remote push url entry is ignored", "body": "On git CLI, you can explicitly set an empty push URL:\n\n```\ngit remote add foo some.url/here\ngit remote set-url --push foo \"\"\n```\n\nThis is interpreted by core git as a remote with an empty push url.\n\n```\n> git remote -v\nfoo some.url/here (fetch)\nfoo   (push)\n```\n\nlibgit2 (`master`) just uses the fetch url to set the push, as it [ignores the empty push entry](https://github.com/libgit2/libgit2/blob/f438dbe1910fcb39d8d883543663274f58405bca/src/remote.c#L432-L435).\n\nThis is a pretty weird edge case, but it is inconsistent with core git.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "giniedp": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/2878", "title": "slow performance on solaris", "body": "The issue is originally posted on the rugged project here\nhttps://github.com/libgit2/rugged/issues/458#issuecomment-73028799\n\nHere is a copy of the description\n\nIn our current project Rugged works fine on OSX development machines. But when it comes to production it performs very slow using the same git repository and branch. A single call to\n\n```\nrepository.status { |a, b| puts b }\n```\n\ntakes over 20 seconds to complete.\n\nThe production machine is a SunOS 5.11 11.2 i86pc i386 i86pc Solaris\nTo install rugged on that machine we had to make the following change\nhttps://github.com/sirlantis/rugged/commit/f642d3cded339d9db2f6bb00fe1659e29762c134\n\nDoes anyone has any idea why the status call might perform that bad? Any help and hint is appreciated.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "torvalds": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/2836", "title": "Very slow cloning of \"file://\" repository format", "body": "So we use libgit2 in subsurface as one of the ways to access the dive data, and am starting to add some support for actually accessing repositories remotely.\n\nWhile doing that, for debugging I don't want to actually have to go over the network (because I'm in remote locations and on planes etc right now), and so I was using my local dive repository at \"file:///home/torvalds/..\" as the \"remote\" repo.\n\nIt is _incredibly_ slow. Regular git clones it in a couple of seconds (doing a true local clone with just hardlinks is obviously faster still, but I actually want this to act like a remote clone). But using \"git_clone()\" from libgit2 (just plain F21 version, so it's 0.21 rather than current HEAD) takes _minutes_. \n\nI have no idea what the heck would make it that slow. But it's orders of magnitude slower than real git. \n\nI can fake things, and just use \"/home/torvalds/...\" instead of the \"file://\" format, and things work ok, but I'm wondering if this is perhaps some bug in libgit2 that people just hadn't realized existed, because most people never use the \"file://\" form.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jamill": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/2716", "title": "Handling of return codes in user callbacks is fragile", "body": "The library guidelines state:\n\n```\nAs is typical with most C library functions, a zero value indicates success and a negative value indicates failure.\n```\n\nHowever, the conflicts a bit with another pattern / convention around the handling of return codes from user callbacks where:\n1. Many user callbacks interpret any non-zero value to stop further processing (e.g. [checkout_tree](https://github.com/libgit2/libgit2/blob/091165c53b2bcd5d41fb71d43ed5a23a3d96bf5d/include/git2/checkout.h#L320), [git_push_status_foreach](https://github.com/libgit2/libgit2/blob/091165c53b2bcd5d41fb71d43ed5a23a3d96bf5d/include/git2/push.h#L168)\n2. Many functions propagate the user provided return value back up through the calling function.\n\nThis leads to a state where functions that might call a user callback can return positive return codes, which is a bit ambiguous in meaning. This is also fragile / unexpected as consumers have to be aware of whether a function might return a positive return code and different functions have different semantics depending on whether they have any user callbacks. Even library code has instances that does not properly handle functions that might return positive return codes (e.g. [checkout_tree](https://github.com/libgit2/libgit2/blob/b07db1eb7696c1ef71f122c2103780c7bb55ed47/src/reset.c#L158) )\n\nPotential suggestion:\nFunctions should always use negative values to indicate failure. If a user callback returns a positive number, convert it to `GIT_EUSER`\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/1125", "title": "Push should accept wider range of refspecs", "body": "It appears that push does not accept wildcard refspecs. When calling `git_push_finish` (from LibGit2Sharp) with `refs/heads/*` it results in the following error.\n\nresults in:\n\n```\nMessage=An error was raised by libgit2. Category = -3 (Error).\nNo such reference 'refs/heads/*'\n```\n\nPassing in the refspec `\"HEAD\"` does not seem to behave as expected, either.\n\n`git_push_add_refspec` does not like short reference names either. Passing in `push_me` (when there is a branch `refs\\heads\\push_me`) results in the following error:\n\n```\nMessage=An error was raised by libgit2. Category = Invalid (Error).\nNo valid reference 'push_me'\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/1125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cirosantilli": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/2568", "title": "Proposal: expose an API to get the origin of lines on a merge conflict.", "body": "Followup to: http://stackoverflow.com/questions/25849742/is-it-possible-to-get-the-origin-of-lines-on-a-diff3-merge-conflict-or-a-composi\n\nI know how to generate a file containing the diff3: just copy the [following diff3 test](https://github.com/libgit2/libgit2/blob/3a495c19bd280f5455047a9ac0e936f2c2f2f9a9/tests/merge/workdir/simple.c#L259).\n\nSuppose the diff3 would contain:\n\n```\ncontext1\n<<<<<<< master\nours\n||||||| base\nbase\n=======\ntheirs\n>>>>>>> topic\ncontext2\n```\n\nWhat I want it to get the following map:\n\n```\nline        origin\n-------------------\ncontext1 -> CONTEXT\nours     -> OURS\nbase     -> BASE\ntheirs   -> THEIRS\ncontext2 -> CONTEXT\n```\n\npossibly in a callback loop like is done for diff lines on [git_diff_print](https://libgit2.github.com/libgit2/#HEAD/group/diff/git_diff_print).\n\nI want to do this because I am implementing a merge resolution tool for GitLab: https://github.com/gitlabhq/gitlabhq/pull/7345, so I need to break a diff3 into sections. (I have also proposed this for GitHub https://github.com/isaacs/github/issues/200)\n\nOf course, I could parse the diff3 file and look for the conflict markers `<<<`, but that would lead to ambiguity if the file itself contained the markers, so I don't want to do that.\n\n[ethomson has answered on SO](http://stackoverflow.com/a/25851717/895245) that what I want is currently not possible directly in libgit2, so my question is: would a pull request that allows this be considered, or is it out of scope?\n\nI feel this may be in scope because libgit2 essentially already implements it to generate the conflict files: we would only be exposing what it does. Also the interface would look much like what `diff_print` currently does.\n\nThe simplest usage I can see is:\n- operate on the index after a `git_merge`\n- loop over conflict index entries with `index_conflict_next`, thus returning the ancestors, ours and theirs index entries for each file\n- add the following interfaces:\n\n``` c\n// Mixture of index_print with merge_file.\nint git_merge_file_from_index_foreach_line(\n    git_repository *repo,\n    const git_index_entry *ancestor,\n    const git_index_entry *ours,\n    const git_index_entry *theirs,\n    const git_merge_file_options *opts,\n    git_conflict_line_cb conflict_cb,\n    void *payload\n);\n\n// Analogous to diff_line_cb.\ntypedef int (*git_conflict_line_cb)(\n    const git_conflict_line *line,\n    void *payload)\n\n// Analogous to diff_line\ntypedef struct git_conflict_line {\n    char   origin;                 /**< A git_conflict_line_t value */\n    int    ancestor_lineno;   /**< Line number in ancestor file or -1 for added line */\n    int    our_lineno;   /**< Line number in our file or -1 for deleted line */\n    int    their_lineno;   /**< Line number in their file or -1 for deleted line */\n    int    num_lines;    /**< Number of newline characters in content */\n    size_t content_len;  /**< Number of bytes of data */\n    git_off_t content_offset; /**< Offset in the original file to the content */\n    const char *content; /**< Pointer to diff text, not NUL-byte terminated */\n} git_conflict_line;\n\n// Analogous to diff_line_t\ntypedef enum {\n    /* THIS is what I'm after. */\n    GIT_CONFLICT_LINE_CONTEXT   = ' ',\n    GIT_CONFLICT_LINE_OUR  = 'o',\n    GIT_CONFLICT_LINE_THEIRS  = 't',\n    GIT_CONFLICT_LINE_BOTH  = 'b',\n\n    // TODO: think about the possible EOF cases.\n    GIT_CONFLICT_LINE_CONTEXT_EOFNL = '=', /**< Both files have no LF at end */\n    GIT_CONFLICT_LINE_ADD_EOFNL = '>',     /**< Old has no LF at end, new does */\n    GIT_CONFLICT_LINE_DEL_EOFNL = '<',     /**< Old has LF at end, new does not */\n} git_conflict_line_t;\n\n```\n\nOther options which would also work for me include:\n- offer a line-wise callback combined diff interface (the default diff format for merge conflicts). Would loop only over lines around the conflicts.\n- offer a line-wise callback interface that does not require a previous merge, since it is a bit redundant merging twice.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2568/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "arthurschreiber": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/2296", "title": "Support `thread` option for `git_diff_commit_as_email`", "body": "From the `git-format-patch(1)` man page:\n\n> If given --thread, git-format-patch will generate In-Reply-To and References headers to make the second and subsequent patch mails appear as replies to the first mail; this also generates a Message-Id header to reference.\n\nIt'd be really nice if `git_diff_commit_as_email` and `git_diff_format_email` would support a similar flag.\n\n//cc @jacquesg\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/3123390", "body": "I think this is wrong. Shouldn't this be `refs/namespaces/%s/`?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3123390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3125486", "body": ":heart: Thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3125486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3664767", "body": "`availalbe`?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3664767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3988214", "body": "\"invoke automatically invoke\"\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3988214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/4434727", "body": "`refsepcs` :wink: \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/4434727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/5479952", "body": "`our_path` -> `ours`\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/5479952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/5479955", "body": "`their_path` -> `theirs`\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/5479955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "jspahrsummers": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/2268", "title": "git_index_add_bypath does not honor core.precomposeunicode", "body": "Quoth @arrbee:\n\n> Libgit2 implements unicode composition for the places where it reads file entries (i.e. it performs the `readdir` to get the data from the OS). If you are passing decomposed unicode data into libgit2 APIs (e.g. you are calling `git_index_add_bypath` with a path you got from the filesystem that has decomposed unicode data), it won't compose the data for you - it will just blindly add it to the index.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2263", "title": "Sparse checkout support", "body": "A user can set `core.sparsecheckout` to `true`, then populate `.git/info/sparse-checkout` with the specific subtrees that should be checked out. See http://jasonkarns.com/blog/subdirectory-checkouts-with-git-sparse-checkout/ for a basic explanation.\n\nI don't know whether it makes sense for libgit2 to support this in its own checkout operations, but sparse checkouts should be taken into consideration for diffs and status (in that omitted subtrees should not appear).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2263/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2127", "title": "Core Git interoperability tests", "body": "In the GitHub Desktop applications, we use a mix of libgit2 calls and shelling out to core Git to implement our features. Part of that is legacy, but much of it is simply because Git has more features, or better stability for a given task.\n\nWe also have to anticipate the user trying to use Git on the command line\u2014or via another client\u2014alongside ours. This is basically a design requirement, and highly unlikely to change.\n\nThe result is that we run into a lot of issues caused by overly aggressive caching on libgit2's part. For example (merely as an illustration), a submodule added on the command line does not make it into libgit2's diff if the [config was already loaded](https://github.com/libgit2/libgit2/pull/2126).\n\nI'd really like to see libgit2's tests mix its API calls with core Git invocations, to iron out bugs like this. Maybe this only needs to happen when running on a POSIX system (to steer clear of Windows compatibility issues), but it would be extraordinarily helpful for application developers like us.\n\n/cc @joshaber @robrix @arrbee \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "linquize": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/2203", "title": "Support core.safecrlf", "body": "Currently, libgit2 does not support `core.safecrlf`.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/2203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/2547525", "body": "should call disambiguate_refname() before maybe_describe() and maybe_sha_or_abbrev()\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2547525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2547526", "body": "see #1306\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2547526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "felipebalbi": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/1980", "title": "Add support for apply-patch", "body": "If libgit2 adds support for git's builtin/apply.c, we would be able to use libgit2 (actually I'm more interested in rugged) to apply patches received by email to a git repository.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/1980/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jtbandes": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/1730", "title": "Support git-replace", "body": "[`git-replace`](https://www.kernel.org/pub/software/scm/git/docs/git-replace.html) works by creating a ref in `refs/replace/[sha]` that points to a \"replacement\" object. It would be great if libgit2 honored such replacements.\n\nhttps://github.com/git/git/search?q=lookup_replace_object\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/1730/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kevinsawicki": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/1718", "title": "Add bundle support", "body": "Support for creating and applying bundles would be nice.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/1718/reactions", "total_count": 6, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "peff": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/1534", "title": "do not write cached refs into packed-refs file", "body": "When we write the packed-refs file (e.g., because of a ref deletion), we use the filebuf code, which takes a lock on packed-refs and writes it out atomically. However, the values we write out come from our in-memory list of refs, which might actually be stale (e.g., if somebody else has modified the packed-refs file since we last read it). This can lead to unrelated refs appearing to rewind (or even disappear) when a ref is deleted and the repo is under load (especially if there are multiple deleters operating at once).\n\nMore details on the fix in upstream git can be found at git/git@b3f1280ec740d8012d18e870a50a5ff76c4e3c42.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/1534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/1295055", "body": "We had to deal with this in git.git. You can find our portability setup here, which has been working for a few years (and certainly works on windows):\n\nhttps://github.com/git/git/blob/master/git-compat-util.h#L570-581\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1295055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3132861", "body": "This needs a trailing space in the string, as the format for each trait is to be surrounded by whitespace, even if it's the last one.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3132861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3132936", "body": "It's more robust to look for `\" fully-peeled \"` with the spaces, since we don't know which traits will be added later (e.g., we might mistake the \"peeled\" in \"fully-peeled\" for its own trait, though we ge away with that here because we only check it in an else-if).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3132936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3132958", "body": "If we are in `PEELING_STANDARD`, you can also set this flag if the ref is under `refs/tags/`.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3132958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3132962", "body": "Other than the few line comments, this looks OK to me.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3132962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3132976", "body": "Oops. Good catch.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3132976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/4038720", "body": "Sorry, I think I led you astray with my comments. I meant that `git_path_root` returns `-1`, which is correctly interpreted by `git_path_join_unrooted`, meaning your previous code was doing the right thing. AFAICT, `git_path_join_unrooted` really does mean `-1` as an error, and it is correct to simply propagate its return value.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/4038720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/4038722", "body": "Did you want to flip this to `return -1`?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/4038722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/4038726", "body": "Oh nevermind. You did, but in an extra commit on top.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/4038726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/103048", "body": "On Thu, Aug 25, 2011 at 12:44:14PM -0700, carlosmn wrote:\n\n> > @@ -302,10 +302,10 @@ int git_pkt_send_wants(git_headarray *refs, git_transport_caps *caps, int fd)\n> >  {\n> >     unsigned int i = 0;\n> >     int error = GIT_SUCCESS;\n> > -   char buf[STRLEN(WANT_PREFIX) + GIT_OID_HEXSZ + 2];\n> > -   char buf[strlen(WANT_PREFIX) + GIT_OID_HEXSZ + 2];\n> > \n> > This code is valid from c99 point of view.\n> \n> It actually specifies these kind of optimisations? Odd.\n\nNo, but you are allowed to use non-constant array sizes. So on a good\ncompiler, this is a constant, and with a bad compiler (or -O0), it will\nrun strlen and calculate the needed stack space for the array at\nruntime.\n\n> > Do we really want to support compilers which don't support c99? Why?\n> \n> MSVC doesn't support C99 and most likely never will. It does support a\n> few features, but I've no idea if this is one of them.\n\nFWIW, we don't assume c99 in git.git. I'm starting to wonder if it\nreally is worth it, though. Even on antique platforms, you can usually\nget gcc to run, so it is not \"you will never be able to support this\nplatform\", but rather \"you are creating a extra work for people on this\nplatform\".\n\n-Peff\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/103048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/103406", "body": "On Thu, Aug 25, 2011 at 05:20:11PM -0700, carlosmn wrote:\n\n> @peff I guess assuming GCC or LLVM is safe enough for git.git, and the\n> codebase won't suddenly fill with incompatible changes.\n\nI think you misunderstood what I wrote before. git.git assumes C89, more\nor less. We compile on crap like the IRIX MIPSpro compiler. But you do\npay a price in the code; new features were invented because they're\nuseful.\n\nWhat I was suggesting is that since you have a nice squeaky-clean\ncodebase, now is a good time to think about how much portability you\nwant for antique systems, especially given that you can get gcc on most\nof them. It may not really be worth the hassle. I don't know if @tanoku\nhas a master plan for this, or whether it is just \"anywhere git.git\nruns, libgit2 will run\".\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/103406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/103415", "body": "On Thu, Aug 25, 2011 at 08:26:57PM -0700, carlosmn wrote:\n\n> I missed a couple of words there. What I wanted to say was that\n> switching to C99 for git is probably safe, as you expect some sort of\n> GCC (or LLVM which supports the same standards AFAIK) to be used.\n\nI doubt that will happen any time soon in git.git.\n\n> The webpage still says that we're using C99, which is not true, because\n> MS can't get their act together, but I guess that points to a general\n> plan of being run on \"modern\" systems. The oldest target is probably\n> Windows XP, which is 10 years old but already has most or all of the\n> nice Unicode functions. The other major old system is prbably\n> RHEL/CentOS 5, which some people still run on servers, but even that's\n> only 4 years old.\n\nYeah. Bear in mind that it's 2011. And we are talking about features\nthat were standardized in 1999, after having a decade or so of life as\nextensions to gcc and other compilers. Pretty much anything sane is\ngoing to do C99 these days. Dealing with system call compatibility tends\nto be a bit harder. Though to be honest, making stuff work on early 90s\nunix flavors is way easier than dealing with POSIX layers on top of\nWindows.\n\n-Peff\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/103415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/331352", "body": "I don't mind a comment if something is non-obvious, but commented out code just ends up cluttering the file. Remove it in a small commit, write a nice commit message explaining what happened, and then anybody who cares can dig for it later (as a general rule, lots of small commits are great for software archaeologists who are hunting the reasons behind bugs. I would also argue that the throw fixes and the buffer-size fixes belong in two separate commits).\n\nBut I am not the style police of libgit2 (Vicent is, of course), so you may consume the appropriately sized grain of salt.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/331352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "Shookit": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/1353", "title": "git update-index --assume-unchanged", "body": "Does libgit2 support git's assume-unchanged functionality? I have some symlinks from a Linux branch of one of my repos, so I wanted to mark them as assume-unchanged in Windows so that git doesn't try to overwrite them.\n\nHowever, libgit2's status function is indicating them as GIT_STATUS_WT_TYPECHANGE, even though they have been ignored. Cygwin's git and msysgit both correctly assume that the files were unchanged. Is there any way to get libgit2 to support this?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/1353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jwiegley": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/1146", "title": "There is a flaw in the handling of custom backends", "body": "Higher priority custom backends, if unable to perform a certain action, are supposed to automatically fall back to a lower priority backend.  The logic in `git_odb_write`, for example, indicates this.\n\nHowever, `git_blob_create_frombuffer` does not call `git_odb_write`, but only `git_odb_open_wstream`, which -- if stream writing is not supported -- creates a fake stream using _the highest priority backend that supports writestream or write_.\n\nThe flaw here is that if the write method backing the fake stream fails (expecting an automatic fallback), no fallback occurs because there is no logic to create a new fake stream using the next most applicable backend.\n\nIn short, the above makes it impossible to create a tracing backend for writes.  If you try, you end up not being able to write objects.\n\nSince I need this kind of intelligent fallback for regular writes I will fix the Blob behavior and submit a pull request.  I wanted to track the issue here to get comments and to see if anyone has already solved this.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/1146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aroben": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/792", "title": "git_status_file returns GIT_ENOTFOUND for files within symbolic link directories on Windows", "body": "Given the following directory tree:\n- `target`\n  - `file.txt`\n- `repo`\n  - `.git`\n  - `link`  (symbolic link to `target`)\n\nCalling `git_status_file(\"link/file.txt\")` returns `GIT_ENOTFOUND`.\n\n(Looks like core git doesn't like this either: running `git add link/file.txt` reports `fatal: 'link/file.txt' is behind a symbolic link`.)\n\nAt the very least it would be nice to have a more specific error code for this situation. It would be even more awesome to fully support this kind of setup, but I'm not sure exactly how that should work.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/1464046", "body": "Might want to change that comment too. :-)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1464046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "pks-t": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/a9677e019c01cc9c06230c4e8ee2c04db72885c4", "message": "branch: refuse creating branches named 'HEAD'\n\nSince a625b092c (branch: correctly reject refs/heads/{-dash,HEAD},\n2017-11-14), which is included in v2.16.0, upstream git refuses to\ncreate branches which are named HEAD to avoid ambiguity with the\nsymbolic HEAD reference. Adjust our own code to match that behaviour and\nreject creating branches names HEAD."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/820fb71292c8065ee83b00f82b909806916e0df2", "message": "tests: online::clone: fix memory leak due to not freeing URL"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/782402c271d5467f9890af8e808af938a93bc55f", "message": "tests: refs::iterator: fix memory leak due to ref names not being free'd\n\nThe test refs::iterator::foreach_name iterates through every reference\nand copies its name into a local vector. While the test makes sure to\nfree the vector afterwards, the copied reference names are not being\nfree'd. Fix that."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/5963292f9ebc8b06ad307e2ed10eec845424e74e", "message": "refs: document need to free refs in foreach-callback\n\nReferences passed to the callback function of `git_reference_foreach`\nare expected to be owned by the callback. As such, they are never being\nfreed by `git_reference_foreach`, but will have to be freed by the\ncaller. This small detail is never mentioned in the function's\ndocumentation, though, making it easy to get wrong. Document this to\nmake it discoverable."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/90f81f9fdc6d87c4ca75e4f065e1eb4818c99674", "message": "transports: local: fix memory leak in reference walk\n\nUpon downloading the pack file, the local transport will iterate through\nevery reference using `git_reference_foreach`. The function is a bit\ntricky though in that it requires the passed callback to free the\nreferences, which does not currently happen.\n\nFix the memory leak by freeing all passed references in the callback."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/093e671ee8fb824e3e40677ed7440dba72483fe1", "message": "tests: network::fetchlocal: let cleanup function handle sandbox cleanup\n\nTwo tests in network::fetchlocal explicitly set a cleanup function to\nfree and remove the created sandbox repositories. This is not necessary,\nthough, as the cleanup function executed after each test already takes\ncare of cleaning up after them. Remove the code to avoid needless code\nduplication."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/0b967396033b059d683bdecec85c2838c428a74e", "message": "Merge pull request #4471 from libgit2/cmn/cmake-feature-302\n\ncmake: use a FEATURE_SUMMARY call compatible with 3.0.2"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/70aa61460a4f33509aa06ed86ac3becc243ee5d6", "message": "cmake: allow explicitly choosing SHA1 backend\n\nRight now, if SHA1DC is disabled, the SHA1 backend is mostly chosen\nbased on which system libgit2 is being compiled on and which libraries\nhave been found. To give developers and distributions more choice,\nenable them to request specific backends by passing in a\n`-DSHA1_BACKEND=<BACKEND>` option instead. This completely replaces the\nprevious auto-selection."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/e7495ce6f4dee156b6a1d48a4d478c83d1053236", "message": "cmake: default to using SHA1DC\n\nUpstream git.git has changed their default SHA1 implementation to the\ncollision-detection algorithm SHA1DC in commit e6b07da27 (Makefile: make\nDC_SHA1 the default, 2017-03-17). To match upstream, align ourselves and\nswitch over to SHA1DC by default."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/d8896bda5c43616f3c755242703fce7c2a97ad67", "message": "diff_generate: avoid excessive stats of .gitattribute files\n\nWhen generating a diff between two trees, for each file that is to be\ndiffed we have to determine whether it shall be treated as text or as\nbinary files. While git has heuristics to determine which kind of diff\nto generate, users can also that default behaviour by setting or\nunsetting the 'diff' attribute for specific files.\n\nBecause of that, we have to query gitattributes in order to determine\nhow to diff the current files. Instead of hitting the '.gitattributes'\nfile every time we need to query an attribute, which can get expensive\nespecially on networked file systems, we try to cache them instead. This\nworks perfectly fine for every '.gitattributes' file that is found, but\nwe hit cache invalidation problems when we determine that an attribuse\nfile is _not_ existing. We do create an entry in the cache for missing\n'.gitattributes' files, but as soon as we hit that file again we\ninvalidate it and stat it again to see if it has now appeared.\n\nIn the case of diffing large trees with each other, this behaviour is\nvery suboptimal. For each pair of files that is to be diffed, we will\nrepeatedly query every directory component leading towards their\nrespective location for an attributes file. This leads to thousands or\neven hundreds of thousands of wasted syscalls.\n\nThe attributes cache already has a mechanism to help in that scenario in\nform of the `git_attr_session`. As long as the same attributes session\nis still active, we will not try to re-query the gitmodules files at all\nbut simply retain our currently cached results. To fix our problem, we\ncan create a session at the top-most level, which is the initialization\nof the `git_diff` structure, and use it in order to look up the correct\ndiff driver. As the `git_diff` structure is used to generate patches for\nmultiple files at once, this neatly solves our problem by retaining the\nsession until patches for all files have been generated.\n\nThe fix has been tested with linux.git by calling\n`git_diff_tree_to_tree` and `git_diff_to_buf` with v4.10^{tree} and\nv4.14^{tree}.\n\n                | time    | .gitattributes stats\n    without fix | 33.201s | 844614\n    with fix    | 30.327s | 4441\n\nWhile execution only improved by roughly 10%, the stat(3) syscalls for\n.gitattributes files decreased by 99.5%. The benchmarks were quite\nsimple with best-of-three timings on Linux ext4 systems. One can assume\nthat for network based file systems the performance gain will be a lot\nlarger due to a much higher latency."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/30455a56506d3dc086cf8efb831d8b1513dd3027", "message": "Merge pull request #4439 from tiennou/fix/4352\n\ncmake: create a dummy file for Xcode"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/ba56f781a91487ad657e1a72888c914b1cec5de9", "message": "streams: openssl: fix thread-safety for OpenSSL error messages\n\nThe function `ERR_error_string` can be invoked without providing a\nbuffer, in which case OpenSSL will simply return a string printed into a\nstatic buffer. Obviously and as documented in ERR_error_string(3), this\nis not thread-safe at all. As libgit2 is a library, though, it is easily\npossible that other threads may be using OpenSSL at the same time, which\nmight lead to clobbered error strings.\n\nFix the issue by instead using a stack-allocated buffer. According to\nthe documentation, the caller has to provide a buffer of at least 256\nbytes of size. While we do so, make sure that the buffer will never get\noverflown by switching to `ERR_error_string_n` to specify the buffer's\nsize."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/75e1737a5173709b14b669bf08dae78232c6389d", "message": "hash: openssl: check return values of SHA1_* functions\n\nThe OpenSSL functions `SHA1_Init`, `SHA1_Update` and `SHA1_Final` all\nreturn 1 for success and 0 otherwise, but we never check their return\nvalues. Do so."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/5874e151d7b10de84fc1ca168339fdc622292219", "message": "tests: create new test target for all SSH-based tests\n\nSome tests shall be run against our own SSH server we spin up in Travis.\nAs those need to be run separate from our previous tests which run\nagainst git-daemon, we have to do this in a separate step. Instead of\nbundling all that knowledge in the CI script, move it into the test\nbuild instructions by creating a new test target."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/54a1bf057a1123cf55ac3447c79761c817382f47", "message": "tests: online::clone: inline creds-test with nonexistent URL\n\nRight now, we test our credential callback code twice, once via SSH on\nlocalhost and once via a non-existent GitHub repository. While the first\nURL makes sense to be configurable, it does not make sense to hard-code\nthe non-existing repository, which requires us to call tests multiple\ntimes. Instead, we can just inline the URL into another set of tests."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/fea6092079d5c09b499e472efead2f7aa81ce8a1", "message": "tests: online::clone: construct credential-URL from environment\n\nWe support two types of passing credentials to the proxy, either via the\nURL or explicitly by specifying user and password. We test these types\nby modifying the proxy URL and executing the tests twice, which is\nin fact unnecessary and requires us to maintain the list of environment\nvariables and test executions across multiple CI infrastructures.\n\nTo fix the situation, we can just always pass the host, port, user and\npassword to the tests. The tests can then assemble the complete URL\neither with or without included credentials, allowing us to test both\ncases in-process."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/543ec149b86a68e12dd141a6141e82850dabbf21", "message": "tests: perf: build but exclude performance tests by default\n\nOur performance tests (or to be more concrete, our single performance\ntest) are not built by default, as they are always #ifdef'd out. While\nit is true that we don't want to run performance tests by default, not\ncompiling them at all may cause code rot and is thus an unfavorable\napproach to handle this.\n\nWe can easily improve this situation: this commit removes the #ifdef,\ncausing the code to always be compiled. Furthermore, we add `-xperf` to\nthe default command line parameters of `generate.py`, thus causing the\ntests to be excluded by default.\n\nDue to this approach, we are now able to execute the performance tests\nby passing `-sperf` to `libgit2_clar`. Unfortunately, we cannot execute\nthe performance tests on Travis or AppVeyor as they rely on history\nbeing available for the libgit2 repository. As both do a shallow clone\nonly, though, this is not given."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/b8c14499f9940feaab08a23651a2ef24d27b17b7", "message": "tests: iterator::workdir: fix reference count in stale test\n\nThe test `iterator::workdir::filesystem_gunk` is usually not executed,\nas it is guarded by the environment variable \"GITTEST_INVASIVE_SPEED\"\ndue to its effects on speed. As such, it has become stale and does not\naccount for new references which have meanwhile been added to the\ntestrepo, causing it to fail. Fix this by raising the number of expected\nreferences to 15."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/9aba76364fcb4755930856a7bafc5294ed3ee944", "message": "tests: iterator_helpers: assert number of iterator items\n\nWhen the function `expect_iterator_items` surpasses the number of\nexpected items, we simply break the loop. This causes us to trigger an\nassert later on which has message attached, which is annoying when\ntrying to locate the root error cause. Instead, directly assert that the\ncurrent count is still smaller or equal to the expected count inside of\nthe loop."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/72c28ab011759dce113c2a0c7c36ebcd56bd6ddf", "message": "tests: status::worktree: indicate skipped tests on Win32\n\nSome function bodies of tests which are not applicable to the Win32\nplatform are completely #ifdef'd out instead of calling `cl_skip()`.\nThis leaves us with no indication that these tests are not being\nexecuted at all and may thus cause decreased scrutiny when investigating\nskipped tests. Improve the situation by calling `cl_skip()` instead of\njust doing nothing."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/8999f6acc78810680f282db4257e842971b80cb4", "message": "travis: build sources with tracing enabled\n\nOur tracing architecture is not built by default, causing the Travis CI\nto not execute some code and skip several tests. As AppVeyor has already\nenabled the tracing architecture when building the code, we should do\nthe same for Travis CI to have this code being tested on macOS and\nLinux.\n\nAdd \"-DENABLE_TRACE=ON\" to our release-build options of Travis."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/4964aea07e22318bdcda1e30d1b6a6deecfc12da", "message": "Merge pull request #4456 from libgit2/ethomson/treebuilder_docs\n\ndocs: git_treebuilder_insert validates entries"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/98303ea357fe609135cb0ebabd0270a596601d83", "message": "Merge pull request #4457 from libgit2/ethomson/tree_error_messages\n\ntree: standard error messages are lowercase"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/2482559dab65e9d587aa710bee70f72742995fae", "message": "Merge pull request #4432 from lhchavez/fix-missing-trailer\n\nlibFuzzer: Fix missing trailer crash"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/2388a9e2ab0516c2a9146a1c4d15ced3052fef4c", "message": "diff_file: properly refcount blobs when initializing file contents\n\nWhen initializing a `git_diff_file_content` from a source whose data is\nderived from a blob, we simply assign the blob's pointer to the\nresulting struct without incrementing its refcount. Thus, the structure\ncan only be used as long as the blob is kept alive by the caller.\n\nFix the issue by using `git_blob_dup` instead of a direct assignment.\nThis function will increment the refcount of the blob without allocating\nnew memory, so it does exactly what we want. As\n`git_diff_file_content__unload` already frees the blob when\n`GIT_DIFF_FLAG__FREE_BLOB` is set, we don't need to add new code\nhandling the free but only have to set that flag correctly."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/c342c1313239950b0a324b229851ad0af9252da3", "message": "Merge pull request #4444 from tiennou/fix/4440\n\nstransport: provide error message on trust failures"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/1bf173c33a217a2e4766d8c144b7935010dfa7d6", "message": "Merge pull request #4431 from lhchavez/fix-stream-leak\n\nlibFuzzer: Fix a git_packfile_stream leak"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/2d2e70f8ca7ceb12481f4a10c5c81829ea31b11a", "message": "openssl: fix thread-safety on non-glibc POSIX systems\n\nWhile the OpenSSL library provides all means to work safely in a\nmulti-threaded application, we fail to do so correctly. Quoting from\ncrypto_lock(3):\n\n    OpenSSL can safely be used in multi-threaded applications provided\n    that at least two callback functions are set, locking_function and\n    threadid_func.\n\nWe do in fact provide the means to set up the locking function via\n`git_openssl_set_locking()`, where we initialize a set of locks by using\nthe POSIX threads API and set the correct callback function to lock and\nunlock them.\n\nBut what we do not do is setting the `threadid_func` callback. This\nfunction is being used to correctly locate thread-local data of the\nOpenSSL library and should thus return per-thread identifiers. Digging\ndeeper into OpenSSL's documentation, the library does provide a fallback\nin case that locking function is not provided by the user. On Windows\nand BeOS we should be safe, as it simply \"uses the system's default\nthread identifying API\". On other platforms though OpenSSL will fall\nback to using the address of `errno`, assuming it is thread-local.\n\nWhile this assumption holds true for glibc-based systems, POSIX in fact\ndoes not specify whether it is thread-local or not. Quoting from\nerrno(3p):\n\n    It is unspecified whether errno is a macro or an identifier declared\n    with external linkage.\n\nAnd in fact, with musl there is at least one libc implementation which\nsimply declares `errno` as a simple `int` without being thread-local. On\nthose systems, the fallback threadid function of OpenSSL will not be\nthread-safe.\n\nFix this by setting up our own callback for this setting. As users of\nlibgit2 may want to set it themselves, we obviously cannot always set\nthat function on initialization. But as we already set up primitives for\nthreading in `git_openssl_set_locking()`, this function becomes the\nobvious choice where to implement the additional setup."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/5ca3f11592426f80c004cea5beefc0d05f23265b", "message": "diff_generate: fix unsetting diff flags\n\nThe macro `DIFF_FLAG_SET` can be used to set or unset a flag by\nmodifying the diff's bitmask. While the case of setting the flag is\nhandled correctly, the case of unsetting the flag was not. Instead of\ninverting the flags, we are inverting the value which is used to decide\nwhether we want to set or unset the bits.\n\nThe value being used here is a simple `bool` which is `false`. As that\nis being uplifted to `int` when getting the bitwise-complement, we will\nend up retaining all bits inside of the bitmask. As that's only ever\nused to set `GIT_DIFF_IGNORE_CASE`, we were actually always ignoring\ncase for generated diffs.\n\nFix that by instead getting the bitwise-complement of `FLAG`, not `VAL`."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/90fc7f5320976ae8b2d9fc0e5f55339bacfca1a6", "message": "diff: remove unused macros `DIFF_FLAG_*`\n\nIn commit 9be638ecf (git_diff_generated: abstract generated diffs,\n2016-04-19), the code for generated diffs was moved out of the generic\n\"diff.c\" and instead into its own module. During that conversion, it was\nforgotten to remove the macros `DIFF_FLAG_IS_SET`, `DIFF_FLAG_ISNT_SET`\nand `DIFF_FLAG_SET`, which are now only used in \"diff_generated.c\".\n\nRemove those macros now."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/364184acca0d993deaeb060197b595f7c49ea226", "message": "Merge pull request #4423 from apnadkarni/patch-1\n\nInclude git2/worktree.h in git2.h"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/d790545022fca2be6d317f9f5c3dcb30cdd1477a", "message": "CONTRIBUTING: add documentation of our commit message style\n\nWhile we try to conform to a certain commit message style, this style\nhas never been documented anywhere. Document it such that new\ncontributors do not have to go through another needless iteration of\ntheir pull requests just to fix up commit messages."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/59ffb512a5e297c695e394a7a8e2bb456869c684", "message": "Merge pull request #4298 from tiennou/gather-reflog-messages-tests\n\nGather the reflog entry content tests"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/585b5dacc7f440a163c20117cfa35fb714a7ba7b", "message": "refcount: make refcounting conform to aliasing rules\n\nStrict aliasing rules dictate that for most data types, you are not\nallowed to cast them to another data type and then access the casted\npointers. While this works just fine for most compilers, technically we\nend up in undefined behaviour when we hurt that rule.\n\nOur current refcounting code makes heavy use of casting and thus\nviolates that rule. While we didn't have any problems with that code,\nTravis started spitting out a lot of warnings due to a change in their\ntoolchain. In the refcounting case, the code is also easy to fix:\nas all refcounting-statements are actually macros, we can just access\nthe `rc` field directly instead of casting.\n\nThere are two outliers in our code where that doesn't work. Both the\n`git_diff` and `git_patch` structures have specializations for generated\nand parsed diffs/patches, which directly inherit from them. Because of\nthat, the refcounting code is only part of the base structure and not of\nthe children themselves. We can help that by instead passing their base\ninto `GIT_REFCOUNT_INC`, though."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/fd1492e82783159231d046beb22a20d17029bc61", "message": "Merge pull request #4408 from hkleynhans/pos_neg_zero_offset_sig\n\nsignature: distinguish +0000 and -0000 UTC offsets"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/8c928be4d78ab018c31016c27edc1807f9e290a1", "message": "Merge pull request #4406 from yoney/clar\n\nFix clar to verify command line arguments before execute"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/80226b5f674e6d04a4064ebc93c09fc667e8fa52", "message": "patch_parse: allow parsing ambiguous patch headers\n\nThe git patch format allows for having unquoted paths with whitespaces\ninside. This format becomes ambiguous to parse, e.g. in the following\nexample:\n\n    diff --git a/file b/with spaces.txt b/file b/with spaces.txt\n\nWhile we cannot parse this in a correct way, we can instead use the\n\"---\" and \"+++\" lines to retrieve the file names, as the path is not\nfollowed by anything here but spans the complete remaining line. Because\nof this, we can simply bail outwhen parsing the \"diff --git\" header here\nwithout an actual error and then proceed to just take the paths from the\nother headers."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/3892f70d8e6e6c8483d2163763d9c8b98b6fbf0a", "message": "patch_parse: treat complete line after \"---\"/\"+++\" as path\n\nWhen parsing the \"---\" and \"+++\" line, we stop after the first\nwhitespace inside of the filename. But as files containing whitespaces\ndo not need to be quoted, we should instead use the complete line here.\n\nThis fixes parsing patches with unquoted paths with whitespaces."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/9e66590bdb57cd376d064d9bb6b762264580d30b", "message": "config_parse: use common parser interface\n\nAs the config parser is now cleanly separated from the config file code,\nwe can easily refactor the code and make use of the common parser\nmodule. This removes quite a lot of duplicated functionality previously\nused for handling the actual parser state and replaces it with the\ngeneric interface provided by the parser context."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/1953c68b7550626b4ca6c37294d8d18479222143", "message": "config_file: split out module to parse config files\n\nThe configuration file code grew quite big and intermingles both actual\nconfiguration logic as well as the parsing logic of the configuration\nsyntax. This makes it hard to refactor the parsing logic on its own and\nconvert it to make use of our new parsing context module.\n\nRefactor the code and split it up into two parts. The config file code\nwill only handle actual handling of configuration files, includes and\nwriting new files. The newly created config parser module is then only\nresponsible for parsing the actual contents of a configuration file,\nleaving everything else to callbacks provided to its provided function\n`git_config_parse`."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/7bdfc0a68506709b05c40ac519ded044a5ad7124", "message": "parse: always initialize line pointer\n\nUpon initializing the parser context, we do not currently initialize the\ncurrent line, line length and line number. Do so in order to make the\ninterface easier to use and more obvious for future consumers of the\nparsing API."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/e72cb769f6b8c11344463a9784fd4d32ded4a685", "message": "parse: implement `git_parse_peek`\n\nSome code parts need to inspect the next few bytes without actually\nconsuming it yet, for example to examine what content it has to expect\nnext. Create a new function `git_parse_peek` which returns the next byte\nwithout modifying the parsing context and use it at multiple call sites."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/252f2eeee0ecc90e5ae21efeadaccc9da666b845", "message": "parse: implement and use `git_parse_advance_digit`\n\nThe patch parsing code has multiple recurring patterns where we want to\nparse an actual number. Create a new function `git_parse_advance_digit`\nand use it to avoid code duplication."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/65dcb6453457fee640fe62008f9a395de58fd39a", "message": "patch_parse: use git_parse_contains_s\n\nInstead of manually checking the parsing context's remaining length and\ncomparing the leading bytes with a specific string, we can simply re-use\nthe function `git_parse_ctx_contains_s`. Do so to avoid code duplication\nand to further decouple patch parsing from the parsing context's struct\nmembers."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/ef1395f315ba137be64744a3a6b9d784db44fded", "message": "parse: extract parse module\n\nThe `git_patch_parse_ctx` encapsulates both parser state as well as\noptions specific to patch parsing. To advance this state and keep it\nconsistent, we provide a few functions which handle advancing the\ncurrent position and accessing bytes of the patch contents. In fact,\nthese functions are quite generic and not related to patch-parsing by\nthemselves. Seeing that we have similar logic inside of other modules,\nit becomes quite enticing to extract this functionality into its own\nparser module.\n\nTo do so, we create a new module `parse` with a central struct called\n`git_parse_ctx`. It encapsulates both the content that is to be parsed\nas well as its lengths and the current position. `git_patch_parse_ctx`\nnow only contains this `parse_ctx` only, which is then accessed whenever\nwe need to touch the current parser. This is the first step towards\nre-using this functionality across other modules which require parsing\nfunctionality and remove code-duplication."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/88450c1c6043b34c4433c475dcfd4928439a4810", "message": "Merge pull request #4283 from tiennou/generic-tls\n\nCMake: make HTTPS support more generic"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/bf15dbf6cf19146082c1245e9db4016d773dbe7e", "message": "examples: network: fix Win32 linking errors due to getline\n\nThe getline(3) function call is not part of ISO C and, most importantly,\nit is not implemented on Microsoft Windows platforms. As our networking\nexample code makes use of getline, this breaks builds on MSVC and MinGW.\nAs this code wasn't built prior to the previous commit, this was never\nnoticed.\n\nFix the error by instead implementing a `readline` function, which\nsimply reads the password from stdin until it reads a newline\ncharacter."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/0b98a66baae83056401a0a5fef5dc5cd2ed3468b", "message": "appveyor: build examples\n\nBy default, CMake will not build our examples directory. As we do not\ninstruct either the MinGW or MSVC builds on AppVeyor to enable building\nthese examples, we cannot verify that those examples at least build on\nWindows systems.\n\nFix that by passing `-DBUILD_EXAMPLES=ON` to AppVeyor's CMake\ninvocation."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/9b12eb6f78b8f285055567873ad844d119d920b3", "message": "examples: remove Makefile\n\nBack in the days when libgit2 was still young, libgit2 was using plain\nMakefiles as build infrastructure. We later changed that to instead use\nthe CMake build system to make cross-platform development easier. In the\nprocess, we forgot to remove the Makefile from our examples directory,\nwhich is fixed by this commit here. Furthermore, remove the accompanying\n.gitignore file, which ignores build outputs. As we do out-of-tree\nbuilds only nowadays, no output is generated in that directory anymore."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/4da74c83e4263bb2d62c85af6188d223fd0157d6", "message": "cmake: use project-relative binary and source directories\n\nDue to our split of CMake files into multiple modules, we had to replace\nsome uses of the `${CMAKE_CURRENT_SOURCE_DIR}` and\n`${CMAKE_CURRENT_BINARY_DIR}` variables and replace them with\n`${CMAKE_SOURCE_DIR}` and `${CMAKE_BINARY_DIR}`. This enabled us to\nstill be able to refer to top-level files when defining build\ninstructions inside of a subdirectory.\n\nWhen replacing all variables, it was assumed that the absolute set of\nvariables is always relative to the current project. But in fact, this\nis not the case, as these variables always point to the source and\nbinary directory as given by the top-levl project. So the change\nactually broke the ability to include libgit2 directly as a subproject,\nas source files cannot be found anymore.\n\nFix this by instead using project-specific source and binary directories\nwith `${libgit2_SOURCE_DIR}` and `${libgit2_BINARY_DIR}`."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/661cf4d4974d6381f1482f169f9292262192140d", "message": "Merge pull request #4375 from mhagger/cmake-version-3.0.x\n\nFix compilation for CMake versions 3.0.x where x >= 1"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/f7d837c835a55a98a85d10f2e600a7a5ae2281c6", "message": "config_file: implement \"gitdir/i\" conditional\n\nNext to the \"gitdir\" conditional for including other configuration\nfiles, there's also a \"gitdir/i\" conditional. In contrast to the former\none, path matching with \"gitdir/i\" is done case-insensitively. This\ncommit implements the case-insensitive condition."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/071b6c0652ff0a0d6ce8c8c35d538d6edd67a52e", "message": "config_file: implement conditional \"gitdir\" includes\n\nUpstream git.git has implemented the ability to include other\nconfiguration files based on conditions. Right now, this only includes\nthe ability to include a file based on the gitdir-location of the\nrepository the currently parsed configuration file belongs to. This\ncommit implements handling these conditional includes for the\ncase-sensitive \"gitdir\" condition."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/9d7a75be7c66cd5c7931db620b97cbd6525b626f", "message": "config_file: make repo and config path accessible to reader\n\nThe reader machinery will be extended to handle conditional includes.\nThe only conditions that currently exist all match the against the git\ndirectory of the repository the config file belongs to. As such, we need\nto have access to the repository when reading configuration files to\nproperly handle these conditions.\n\nOne specialty of thes conditional includes is that the actual pattern\nmay also be a relative pattern starting with \"./\". In this case, we have\nto match the pattern against the path relative to the config file which\nis currently being parsed. So besides the repository, we also have to\npass down the path to the current config file that is being parsed."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/d5b9d9e991f019119f3c18325987728ab69d6121", "message": "config_file: extract function to parse include path\n\nThe logic inside this function will be required later on, when\nimplementing conditional includes. Extract it into its own function to\nease the implementation."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/529e873cef18ec98246d32d28c7a0b0e3467fe27", "message": "config: pass repository when opening config files\n\nOur current configuration logic is completely oblivious of any\nrepository, but only cares for actual file paths. Unfortunately, we are\nforced to break this assumption by the introduction of conditional\nincludes, which are evaluated in the context of a repository. Right now,\nonly one conditional exists with \"gitdir:\" -- it will only include the\nconfiguration if the current repository's git directory matches the\nvalue passed to \"gitdir:\".\n\nTo support these conditionals, we have to break our API and make the\nrepository available when opening a configuration file. This commit\nextends the `open` call of configuration backends to include another\nrepository and adjusts existing code to have it available. This includes\nthe user-visible functions `git_config_add_file_ondisk` and\n`git_config_add_backend`."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/d02cf564a012ea8f6d4d4fd70a3102b94058f759", "message": "repository: constify several repo parameters for getters\n\nSeveral functions to retrieve variables from a repository only return\nimmutable values, which allows us to actually constify the passed-in\nrepository parameter. Do so to help a later patch, which will only have\naccess to a constant repository."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/f38ce9b61dee1bb2d3ba495937c685311f196574", "message": "path: expose `git_path_is_dirsep`\n\nThis function has previously been implemented in Windows-specific path\nhandling code as `path__is_dirsep`. As we will need this functionality\nin other parts, extract the logic into \"path.h\" alongside with a\nnon-Windows implementation."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/e54cf1a3eed8f2375b9e5d4dac9bf4ded57bdd01", "message": "path: expose `git_path_is_absolute`\n\nThis function has previously been implemented in Windows-specific path\nhandling code as `path__is_absolute`. As we will need this functionality\nin other parts, extract the logic into \"path.h\" alongside with a\nnon-Windows implementation."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/0e709032f145dc1a8748095dd83850b21b73f0aa", "message": "cmake: fix linking in Xcode with object libraries only\n\nCMake is unable to generate a correct Xcode project when trying to link\nlibraries with only object libraries as its input. As our new build\ninfrastructure makes heavy use of object libraries now, this affects our\nlibgit2 library target, as well, leading to linking errors.\n\nFix the issue by adding a dummy file to the libgit2 objects. As we\nalways have the \"features.h\" header ready which contains defines only,\nwe can simply link it into the resulting library without any effect\nwhatsoever. This fixes building with Xcode."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/09c15a7fc920f50b23669ededaa7b19fd045e266", "message": "tests: checkout::tree: check that the status list catches mode changes\n\nWhile we verify that we have no mode changes after calling\n`git_checkout_tree`, we do not verify that the `p_chmod` calls actually\nresulted in a changed entry. While we should assume that this works due\nto separate tests for the status list, we should test for the change\nbeing listed to avoid programming errors in the test."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/880dfc507ea4d19ff4d30a04b2d94617a91d34d6", "message": "tests: checkout::tree: extract check for status entrycount\n\nThere are multiple locations where we have the same code to check\nwhether the count of status list entries of a repository matches an\nexpected number. Extract that into a common function."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/38e769cb22bd1dda0ae96c14e375f524d4fc47c3", "message": "Merge pull request #4369 from libgit2/ethomson/checkout_typechange\n\nCheckout typechange-only deltas"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/7cb705cbf7749ba32f9163599fa056b5f4f0ad18", "message": "transports: smart: fix memory leak when skipping symbolic refs\n\nWhen we setup the revision walk for negotiating references with a\nremote, we iterate over all references, ignoring tags and symbolic\nreferences. While skipping over symbolic references, we forget to free\nthe looked up reference, resulting in a memory leak when the next\niteration simply overwrites the variable.\n\nFix that issue by freeing the reference at the beginning of each\niteration and collapsing return paths for error and success."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/62ac39314c11ec43e34e2930f990c3d4ad13153b", "message": "Merge pull request #4362 from jacwah/graphdoc\n\nDocument that a commit is not a descendant of itself"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/ec76cc486058f36d878eca7511aaa9f764bf1b83", "message": "Merge pull request #4364 from andoma/master\n\nUse SOCK_CLOEXEC when creating sockets"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/b112b1e9adb6e90f77762aa2cb1eb376f709412f", "message": "refs: do not use peeled OID if peeling to a tag\n\nIf a reference stored in a packed-refs file does not directly point to a\ncommit, tree or blob, the packed-refs file will also will include a\nfully-peeled OID pointing to the first underlying object of that type.\nIf we try to peel a reference to an object, we will use that peeled OID\nto speed up resolving the object.\n\nAs a reference for an annotated tag does not directly point to a commit,\ntree or blob but instead to the tag object, the packed-refs file will\nhave an accomodating fully-peeled OID pointing to the object referenced\nby that tag. When we use the fully-peeled OID pointing to the referenced\nobject when peeling, we obviously cannot peel that to the tag anymore.\n\nFix this issue by not using the fully-peeled OID whenever we want to\npeel to a tag. Note that this does not include the case where we want to\nresolve to _any_ object type. Existing code may make use from the fact\nthat we resolve those to commit objects instead of tag objects, even\nthough that behaviour is inconsistent between packed and loose\nreferences. Furthermore, some tests of ours make the assumption that we\nin fact resolve those references to a commit."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/49551254c3146274dfb5764318f4661ce47a6f0a", "message": "cmake: use static dependencies when building static libgit2\n\nCMake allows us to build a static library by simply setting the variable\n`BUILD_SHARED_LIBS` to `OFF`. While this causes us to create a static\nlibgit2.a archive, it will not automatically cause CMake to only locate\nstatic archives when searching for dependencies. This does no harm in\ncase of building our libgit2.a, as we do not want to include all\nrequired dependencies in the resulting archive anyway. Instead, we ask\nusers of a static libgit2.a to link against the required set of static\narchives themselves, typically aided by the libgit2.pc file.\n\nWhere it does cause harm, though, is when we build the libgit2_clar test\nsuite. CMake has happily populated our LIBGIT2_LIBS variable with shared\nlibraries, and so linking the final libgit2_clar test does not do the\nright thing. It will simply ignore those shared libraries, we end up\nwith a test suite with undefined symbols.\n\nTo fix the issue, we can instruct CMake to only locate libraries with a\ncertain suffix. As static libraries are typically identifiable by their\n\".a\" suffix on Unix-based systems, we can instruct CMake to only locate\nlibraries with this suffix to restrict it from finding any shared\nlibraries. This fixes building a static libgit2_clar test suite.\n\nNote that this ignores the problem on Windows. The problem here is that\nwe cannot even distinguish static and dynamic libraries by only\ninspecting their suffix. So we just ignore the problem on Windows, for\nnow."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/8c19969a88c3b6e72564e812537b15cbc0fb4cc0", "message": "cmake: fix static linking for bundled deps\n\nOur bundled deps are being built as simple static libraries which are\nthen linked into the libgit2 library via `TARGET_LINK_LIBRARIES`. While\nthis works for a dynamically built libgit2 library, using this function\nto link two static libraries does not have the expected outcome of\nmerging those static libraries into one big library. This leads to\nsymbols of our bundled deps being undefined in the resulting libgit2\narchive.\n\nAs we have bumped our minimum CMake version to 2.8.11, we can now easily\nmake use of object libraries for our bundled dependencies. So build\ninstructions are still self-contained inside of the dependency\ndirectories and the resulting object libraries can just be added to the\nLIBGIT2_OBJECTS list, which will cause them to be linked into the final\nresulting static library. This fixes the issue of undefined symbols."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/d8d2f21e24933cddabf30f2d4a4ddf1be0072e56", "message": "cmake: unify version check for target include directories\n\nThere are two locations where we check whether CMake supports\n`TARGET_INCLUDE_DIRECTORIES`. While the first one uses `VERSION_LESS\n2.8.12`, the second one uses `VERSION_GREATER 2.8.11`, which are\nobviously equivalent to each other. It'd still be easier to grep for\nspecific CMake versions being required for some features if both used\nthe same conditional mentioning the actual target version required. So\nthis commit refactors these conditions to make them equal."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/172a585f8860f87c80800add5bf6d47470bb0f7e", "message": "cmake: always use object library for git2internal\n\nAs we have bumped our minimum CMake version to 2.8.11, we can now\nunconditionally make use of object libraries. So remove the version\ncheck for the git2internal object library and always use it."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/cf9f345217d7d28a55a08e7a25a9fdfca9fc3beb", "message": "cmake: bump minimum version to 2.8.11\n\nOur current minimum CMake version is 2.8. This version does not yet\nallow us to use object libraries (introduced in 2.8.8) and target\ninclude directories (introduced in 2.8.12), which are both mechanisms we\nwant to use to fix some specific problems. We previously were not able\nto bump our CMake version to a version supporting object libraries\nbecause Ubuntu Precise only had CMake version 2.8.7 in its repositories.\nBut due to Precise being end of life now, we shouldn't need to honor it\nanymore. A current survey of some of the more conservative distributions\nbrings up the following versions of CMake:\n\n- CentOS 5: 2.6.2\n- CentOS 6: 2.8.12.2\n- Debian 7: 2.8.11\n- Fedora 23: 3.3.2\n- OpenSUSE 13.2: 3.0.2\n- Ubuntu Precise: 2.8.7\n- Ubuntu Trusty: 2.8.12\n\nThe only two outliers here are CentOS 5 and Ubuntu Precise. CentOS is\ncurrently unsupported due to our minimum version being 2.8 and Ubuntu\nPrecise is not maintained anymore. So the next smallest version\nsupported by all major distributions is 2.8.11. While this does not yet\nsupport target include directories, it at least enables us to use object\nlibraries. So this becomes our new minimum required version."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/1d9dd882b32cbaa5d4c8b0b39558ce8ac16274fa", "message": "cmake: distinguish libgit2 objects and sources\n\nDistinguish variables keeping track of our internal libgit2 sources and\nthe final objects which shall be linked into the library. This will ease\nthe transition to use object libraries for our bundled dependencies\ninstead of linking them in."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/c17c3f8a07377d76432fb2e4369b9805387ac099", "message": "travis: drop support for Ubuntu Precise\n\nUbuntu Precise is end of life since April 2017. At that point in time,\nPrecise was still the main distro on which Travis CI built upon, with\nthe Trusty-based images still being in a beta state. But since June\n21st, Trusty has officially moved out of beta and is now the default\nimage for all new builds. Right now, we build on both old and new images\nto assure we support both.\n\nUnfortunately, this leaves us with the highest minimum version for CMake\nbeing 2.8.7, as Precise has no greater version in its repositories. And\nbecause of this limitation, we cannot actually use object libraries in\nour build instructions. But considering Precise is end of life and\nTrusty is now the new default for Travis, we can and should drop support\nfor this old and unmaintained distribution. And so we do."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/03a95bc5f6418ffd0ebb7f904281935e856a1800", "message": "appveyor: add jobs to also build on Visual Studio 2015\n\nIn order to cover a wider range of build environments, add two more jobs\nwhich build and test libgit2 on Visual Studio 14 2015."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/e1076dbfd84218af7870a8f527c37695918b5cde", "message": "appveyor: explicitly specify build images\n\nAppVeyor currently does provide three standard build worker images with\nVS2013, VS2015 and VS2017. Right now, we are using the implicitly, which\nis the VS2015 one. We want to be more explicit about this, so that we\ncan easily switch build images based on the job. So starting from this\ncommit, we explicitly set the `APPVEYOR_BUILD_WORKER_IMAGE` variable per\njob, which enables us to choose different images.\n\nTo be able to test a wider range of build configurations, this commit\nalso switches the jobs for VC2010 over to use the older, VS2013 based\nimages. As the next commit will introduce two new jobs for building with\nVS2015, we have then covered both build environments.\n\nAlso, let us be a bit more explicit regarding the CMake generator.\nInstead of only saying \"Visual Studio 10\", use the more descriptive\nvalue \"Visual Studio 10 2010\" to at least avoid some confusion\nsurrounding the versioning scheme of Visual Studio."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/54214d618390292f96bd9ab055e4bbe5d54e1fbd", "message": "cmake: fix linker error with dbghelper library\n\nWhen the MSVC_CRTDBG option is set by the developer, we will link in the\ndbghelper library to enable memory lead detection in MSVC projects. We\nare doing so by adding it to the variable `CMAKE_C_STANDARD_LIBRARIES`,\nso that it is linked for every library and executable built by CMake.\nBut this causes our builds to fail with a linker error:\n\n```\n    LINK: fatal error LNK1104: cannot open file 'advapi32.lib;Dbghelp.lib'\n```\n\nThe issue here is that we are treating the variable as if it were an\narray of libraries by setting it via the following command:\n\n```\n    SET(CMAKE_C_STANDARD_LIBRARIES \"${CMAKE_C_STANDARD_LIBRARIES}\"\n        \"Dbghelp.lib\")\n```\n\nThe generated build commands will then simply stringify the variable,\nconcatenating all the contained libraries with a \";\". This causes the\nobserved linking failure.\n\nTo fix the issue, we should just treat the variabable as a simple\nstring. So instead of adding multiple members, we just add the\n\"Dbghelp.lib\" library to the existing string, separated by a space\ncharacter."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/046b081ab52e5b3f04f0931728099f743ca5a924", "message": "diff: cleanup hash ctx in `git_diff_patchid`\n\nAfter initializing the hash context in `git_diff_patchid`, we never\nproceed to call `git_hash_ctx_cleanup` on it. While this doesn't really\nmatter on most hash implementations, this causes a memory leak on Win32\ndue to CNG system requiring a `malloc` call.\n\nFix the memory leak by always calling `git_hash_ctx_cleanup` before\nexiting."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/d630887bb6ab91a55e72fddc65db93ee6abcd984", "message": "cmake: enable reproducible static linking\n\nBy default, both ar(1) and ranlib(1) will insert additional information\nlike timestamps into generated static archives and indices. As a\nconsequence, generated static archives are not deterministic when\ncreated with default parameters.\n\nBoth programs do support a deterministic mode, which will simply zero\nout undeterministic information with `ar D` and `ranlib -D`.\nUnfortunately, CMake does not provide an easy knob to add these command\nline parameters. Instead, we have to redefine the complete command\ndefinitons stored in the variables CMAKE_C_ARCHIVE_CREATE,\nCMAKE_C_ARCHIVE_APPEND and CMAKE_C_ARCHIVE_FINISH.\n\nIntroduce a new build option `ENABLE_REPRODUCIBLE_BUILDS`. This option\nis available on Unix-like systems with the exception of macOS, which\ndoes not have support for the required flags. If the option is being\nenabled, we add those flags to the invocation of both `ar` and `ranlib`\nto enable deterministically building the static archive."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/26f531d3a3c00890348660f826df4fd21e53f9c9", "message": "features.h: allow building without CMake-generated feature header\n\nIn commit a390a8464 (cmake: move defines into \"features.h\" header,\n2017-07-01), we have introduced a new \"features.h\" header. This file is\nbeing generated by the CMake build system based on how the libgit2 build\nhas been configured, replacing the preexisting method of simply setting\nthe defines inside of the CMake build system. This was done to help\nsplitting up the build instructions into multiple separate\nsubdirectories.\n\nAn overlooked shortcoming of this approach is that some projects making\nuse of libgit2 build the library with custom build systems, without\nmaking use of CMake. For those users, the introduction of the\n\"features.h\" file makes their life harder as they would have to also\ngenerate this file.\n\nFix this issue by guarding all inclusions of the generated header file\nby the `LIBGIT2_NO_FEATURES_H` define. Like this, other build systems\ncan skip the feature header and simply define all used features by\nspecifying `-D` flags for the compiler again."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/cc4c44a98a552b64c281101cbadb91effa5be5dd", "message": "patch_parse: fix parsing patches only containing exact renames\n\nPatches which contain exact renames only will not contain an actual diff\nbody, but only a list of files that were renamed. Thus, the patch header\nis immediately followed by the terminating sequence \"-- \". We currently\ndo not recognize this character sequence as a possible terminating\nsequence. Add it and create a test to catch the failure."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/583e4141022481e21a22aa71a1c4c988a57423e9", "message": "tests: deterministically generate test suite definitions\n\nThe script \"generate.py\" is used to parse all test source files for unit\ntests. These are then written into a \"clar.suite\" file, which can be\nincluded by the main test executable to make available all test suites\nand unit tests.\n\nOur current algorithm simply collects all test suites inside of a dict,\niterates through its items and dumps them in a special format into the\nfile. As the order is not guaranteed to be deterministic for Python\ndictionaries, this may result in arbitrarily ordered C structs. This\nobviously defeats the purpose of reproducible builds, where the same\ninput should always result in the exact same output.\n\nFix this issue by sorting the test suites by name previous to dumping\nthem as structs. This enables reproducible builds for the libgit2_clar\nfile."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/477b3e047426d7ccddb6028416ff0fcc2541a0fd", "message": "submodule: refuse lookup in bare repositories\n\nWhile it is technically possible to look up submodules inside of a\nbare repository by reading the submodule configuration of a specific\ncommit, we do not offer this functionality right now. As such, calling\nboth `git_submodule_lookup` and `git_submodule_foreach` should error out\nearly when these functions encounter a bare repository. While\n`git_submodule_lookup` already does return an error due to not being\nable to parse the configuration, `git_submodule_foreach` simply returns\nsuccess and never invokes the callback function.\n\nFix the issue by having both functions check whether the repository is\nbare and returning an error in that case."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/a889c05f2abfec5e45fa50faf7307c06c7c9b25b", "message": "tests: submodule: add explicit cleanup function in lookup tests"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/64d1e0b37c036ea869c44720257734be3186c698", "message": "tests: submodule: fix declaration of test\n\nThe testcase \"submodule::lookup::cached\" was declared with a single\nunderscore separating the test suide and test name, only. As the clar\nparser only catches tests with two underscores, it was never executed.\nAdd in the second underscore to actually have it detected and executed."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/2d9ff8f5dc39ccb44a09365d19e216dff7eb3736", "message": "ignore: honor case insensitivity for negative ignores\n\nWhen computing negative ignores, we throw away any rule which does not\nundo a previous rule to optimize. But on case insensitive file systems,\nwe need to keep in mind that a negative ignore can also undo a previous\nrule with different case, which we did not yet honor while determining\nwhether a rule undoes a previous one. So in the following example, we\nfail to unignore the \"/Case\" directory:\n\n    /case\n    !/Case\n\nMake both paths checking whether a plain- or wildcard-based rule undo a\nprevious rule aware of case-insensitivity. This fixes the described\nissue."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/38b44c3b360e9831178f2a8b21afbd6d1b6990df", "message": "tests: status: additional test for negative ignores with pattern\n\nThis test is by Carlos Mart\u00edn Nieto."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/b8922fc8f4a903b8c40614852e87bae07454f295", "message": "ignore: keep negative rules containing wildcards\n\nIgnore rules allow for reverting a previously ignored rule by prefixing\nit with an exclamation mark. As such, a negative rule can only override\npreviously ignored files. While computing all ignore patterns, we try to\nuse this fact to optimize away some negative rules which do not override\nany previous patterns, as they won't change the outcome anyway.\n\nIn some cases, though, this optimization causes us to get the actual\nignores wrong for some files. This may happen whenever the pattern\ncontains a wildcard, as we are unable to reason about whether a pattern\noverrides a previous pattern in a sane way. This happens for example in\nthe case where a gitignore file contains \"*.c\" and \"!src/*.c\", where we\nwouldn't un-ignore files inside of the \"src/\" subdirectory.\n\nIn this case, the first solution coming to mind may be to just strip the\n\"src/\" prefix and simply compare the basenames. While that would work\nhere, it would stop working as soon as the basename pattern itself is\ndifferent, like for example with \"*x.c\" and \"!src/*.c. As such, we\nsettle for the easier fix of just not optimizing away rules that contain\na wildcard."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/4467543ea76a59b1e10f20028da7779050f4953f", "message": "ignore: return early to avoid useless indentation"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/9bd836225ec606acdc9898cbf80c36dfcc0b564a", "message": "ignore: fix indentation of comment block"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/414a338479f8b0595806dd991a2880866e940524", "message": "travis: error on compiler warnings\n\nOne of our goals is to have our code free of any warnings. Due to the\nrecent switch to Ubuntu 14.04 on Travis, the last warning regarding some\npreprocessor-magic in the curl-headers has been fixed and as such, the\ngoal of zero warnings is now reached for Travis CI. In order to avoid\nintroducing new warnings via pull requests, we can now enable building\nwith `-Werror` and turn compiler warnings into errors instead, causing\nthe CI jobs to fail.\n\nThis build does so by passing the newly introdcued `-DENABLE_WERROR`\nflag to CMake for all Travis jobs."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/175ab8e7653778c3ef7c805696c8a63d0023c727", "message": "cmake: add switch to build with -Werror\n\nAdd a simple switch to enable building with \"-Werror=<warning>\" instead\nof \"-W<warning\". Due to the encapsulated `ENABLE_WARNINGS` macro, this\nis as simple as adding a new variable \"ENABLE_WERROR`, which can be\npassed on the command line via `-DENABLE_WERROR=ON`. The variable\ndefaults to NO to not bother developers in their day to day work."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/4a46a8c14fb05e54825d117722c61143ede44bf3", "message": "cmake: encapsulate enabling/disabling compiler warnings\n\nThere are multiple sites where we enable or disable compiler warning via\n\"-W<warning>\" or \"-Wno-<warning>\". As we want to extend this mechanism\nlater on to conditionally switch these over to \"-Werror=<warning>\", we\nencapsulate the logic into its their own macros `ENABLE_WARNINGS` and\n`DISABLE_WARNINGS`.\n\nNote that we in fact have to use a macro here. Using a function would\nnot modify the CFLAGS inside of the callers scope, but in the function's\nscope only."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/57bc9daba35dcabdacc40fd8bab0577fa7e86367", "message": "patch_parse: implement state machine for parsing patch headers\n\nOur code parsing Git patch headers is rather lax in parsing headers of a\nGit-style patch. Most notably, we do not care for the exact order in\nwhich header lines appear and as such, we may parse patch files which\nare not really valid after all. Furthermore, the state transitions\ninside of the parser are not as obvious as they could be, making it\nharder than required to follow its logic.\n\nTo improve upon this situation, this patch introduces a real state\nmachine to parse the patches. Instead of simply parsing each line\nwithout caring for previous state and the exact ordering, we define a\nset of states with their allowed transitions. This makes the patch\nparser more strict in only allowing valid successions of header lines.\nAs the transition table is defined inside of a single structure with\nthe expected line, required state as well as the state that we end up\nin, all state transitions are immediately obvious from just having a\nlook at this structure. This improves both maintainability and eases\nreasoning about the patch parser."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/a3a354738f94cf29e0572d0d83ef937e0d94968f", "message": "cmake: fix output location of import libraries and DLLs\n\nAs observed by Edward Thomson, the libgit2 DLL built by Windows will not\nend up in the top-level build directory but instead inside of the 'src/'\nsubdirectory. While confusing at first because we are actually setting\nthe LIBRARY_OUTPUT_DIRECTORY to the project's binary directory, the\nmanual page of LIBRARY_OUTPUT_DIRECTORY clears this up:\n\n    There are three kinds of target files that may be built: archive,\n    library, and runtime. Executables are always treated as runtime\n    targets. Static libraries are always treated as archive targets.\n    Module libraries are always treated as library targets. For non-DLL\n    platforms shared libraries are treated as library targets. For DLL\n    platforms the DLL part of a shared library is treated as a runtime\n    target and the corresponding import library is treated as an archive\n    target. All Windows-based systems including Cygwin are DLL\n    platforms.\n\nSo in fact, DLLs and import libraries are not treated as libraries at\nall by CMake but instead as runtime and archive targets. To fix the\nissue, we can thus simply set the variables RUNTIME_OUTPUT_DIRECTORY and\nARCHIVE_OUTPUT_DIRECTORY to the project's root binary directory."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/8a43161b6b55f6ef434c7add945ee63cabfb0684", "message": "cmake: always include our own headers first\n\nWith c26ce7840 (Merge branch 'AndreyG/cmake/modernization', 2017-06-28),\nwe have recently introduced a regression in the way we are searching for\nheaders. We have made sure to always include our own headers first, but\ndue to the changes in c26ce7840  this is no longer guaranteed. In fact,\nthis already leads the compiler into picking \"config.h\" from the\n\"deps/regex\" dependency, if it is used.\n\nFix the issue by declaring our internal include directories up front,\nbefore any of the other search directories is added."}], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4476", "title": "scripts: add backporting script", "body": "This adds a simple script for backporting pull requests to older\r\nbranches. It accepts as parameters a list of pull request numbers which\r\nwhose commits are to be cherry-picked. The identification of PRs\r\ncurrently happens by using the commit message of the merge of the PR,\r\nwhich should conform to the message \"Merge pull request #<PR>\".\r\n\r\nWhile the heuristic works in practice, we could instead also use the\r\ndirect references from GitHub via \"pull/#<PR>/head\". This requires the\r\nuser to have all these references fetched, though, so we can just use\r\nthe current heuristic until we experience any issues with that.\r\n\r\n---\r\n\r\nDunno if we want this. I've used this script to create #4475, and I think a bit of automation is nice to have.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4475", "title": "v0.26.1 backports", "body": "Proposed backports for v0.26.1. This includes all PRs that I've currently marked with the \"backport\" label:\r\n\r\n- #4045\r\n- #4455\r\n- #4447\r\n- #4444\r\n- #4437\r\n- #4435\r\n- #4432\r\n- #4431\r\n- #4427\r\n- #4426\r\n- #4424\r\n- #4423\r\n- #4408\r\n- #4386\r\n- #4369\r\n- #4368\r\n- #4367\r\n- #4364\r\n- #4359\r\n- #4357\r\n- #4344\r\n- #4326\r\n- #4306\r\n- #4296\r\n- #4280\r\n- #4273\r\n\r\nI've initially included #4277 as well, but that code was only merged after v0.26.0 in #4202.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4474", "title": "Special-casing null OIDs", "body": "I've been triggered by the not-so-recent discussion in upstream git.git around null OIDs (see [1]) to implement some defensive mechanisms about ever reading or writing null OIDs either via the ODB layer or into trees. For the ODB part, I now reject writing and shorcut reading null OIDs while for trees I've only implemented the rejection on inserting entries into the treebuilder. So I've not changed the reading part for our trees.\r\n\r\n[1]: https://marc.info/?l=git&m=151120958313567&w=2", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4438", "title": "Multiple hash algorithms", "body": "A first step towards an abstraction for the use of multiple of hash algorithms. It lays the groundwork for having `git_hash_ctx` dispatch to different hash algorithms based on which one is being requested. Next steps:\r\n\r\n- extend `git_repository` by a `git_hash_algorithm` field\r\n- implement required new algorithms\r\n- extend `git_hash_init` and `git_hash_ctx_init` to accept an algorithm which is then used for hashing by that particular context only\r\n- extend OIDs to be a union of all possible hashes\r\n- scavenge through the tree and adjust all callers. In most cases we'd want to retain SHA1 (e.g. pack trailers, patch IDs, filebuffers), for others we'd simply use whatever the repository format states", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4436", "title": "pack: rename `git_packfile_stream_free`", "body": "The function `git_packfile_stream_free` frees all state of the packfile\r\nstream without freeing the structure itself. Thus, the function is\r\nmisnamed, as we usually call such a function a \"clear\" function. Rename\r\nit to make clear that in fact it does not free the structure.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4417", "title": "[RFC] Khash refactorings (pt. 2)", "body": "Another round of khash fixes. While my first round of fixes only touched our own abstractions (git_oidmap, git_strmap, git_idxmap and git_offmap), this PR revamps the complete khash implementation. I've been too fed up with digging into those awful macros, so I decided to take the bait and decided to refactor that part.\r\n\r\nSo what I did is to make the khash implementation itself non-generic. Instead of having a macro to create per-type map structs, we now have a single map which has a void pointer only. This relieves us of all those macro magic, but possibliy at the cost of performance. I haven't measured that yet, but will do so if desired.\r\n\r\nSo this is mostly cosmetic only. I plan to do further refactorings in the future, as I think our map interfaces simply suck right now. They are not intuitive and do not follow our coding guidelines. This here is a first step, but seeing that it may be controverse I wanted to put up a RFC first.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4411", "title": "Config parser cleanups", "body": "Two small cleanups to make code more readable in our config parser.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4374", "title": "Pack file verification", "body": "Warning: this is ugly and, at least to me, in many places it feels like I'm doing hacks over hacks to work around our object system. The main problem here is that we currently cannot parse objects which are not owned by the ODB system, because our objects point into the reference-counted memory of the ODB. So when I try to parse an object which is not owned by the ODB, then this will crash later on after `git_odb_object_deref`, as it tries to free objects which aren't owned by itself or not even part of the heap. So yeah, this doesn't look as nice as it could in an ideal world.\r\n\r\nOn the other hand, this seems to work just fine right now. After nearly a whole day of cursing and debugging I think I've finally got it right. So what do I do? This is mostly the implementation of `git index-pack --strict`, doing two things:\r\n\r\n1. check whether all objects of a pack can be parsed correctly\r\n2. check all references to other objects for commits, tags and trees\r\n\r\nWhat this gets us is that we can verify that a pack is complete (we've got all objects such that we can resolve the complete graph) when we receive the pack.\r\n\r\nI've discussed the design a bit in Slack with @carlosmn. My first thought was to just perform an object walk after fetching the complete pack file. But seeing that in most cases we're limited by network bandwidth while fetching the pack file, we agreed that it would be much nicer to just do as much of the heavy lifting as possible during retrieval of the pack. So the algorithm works as follows:\r\n\r\n1. for every non-deltified object passed to the indexer\r\n    * strike its object ID from `expected_oids`, which keeps track of OIDs we still expect to find as part of the pack file\r\n    * parse the object\r\n    * add object IDs referenced by the object to the `expected_oids`\r\n2. when resolving delta objects, do the same with regards to the `expected_oids` map\r\n3. afterwards, check that the `expected_oids` map has no entries anymore, as all object references should now be resolved correctly\r\n\r\nI'm just putting this up early to get early feedback from the CI and reviewers. I'm not happy with some of the things I had to do here, even though they work.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4349", "title": "tests: introduce ability to use config-driven ignore tests", "body": "In an ideal world, all projects aiming to implement functional aspects\r\nof Git would share a common test suite. This test suite would be in a\r\ngeneric format readable by all projects and could then be used to drive\r\nunit tests. Like this, it can be made sure that all these different\r\nprojects would at least behave the same regarding to this common base of\r\ntests.\r\n\r\nOne of the easiest candidates to create such a shared test suite is the\r\ngitignore rules. All that is required is a format that specifies all the\r\ngitignore files that should exist as well as a list of files that should\r\nor should not be ignored, respectively. A natural choice here is to\r\nsimply use Git configuration files to convey this information, as all\r\nGit projects should already know how to parse them. Like this, only\r\nminimal additional code is required to have a test driver for those\r\nspecifications.\r\n\r\nThis commit implements a first proof of concept for such a test\r\nspecification. Each test specification is contained in a single file.\r\nThis file has several keys:\r\n\r\n    - \"test.name\": name for the test, which can be used by the unit test\r\n      implementation to give hints to the user which test is currently\r\n      being executed\r\n    - \"assert.ignored\": path to a file which should be ignored\r\n    - \"assert.not-ignored\": path to a file which should not be ignored\r\n    - \"gitignore.path\": path of a new gitignore file. All the following\r\n      rules will be written into this path.\r\n    - \"gitignore.rule\": rule that should be written to the current\r\n      \"gitignore.path\" file. Can only be specified if a \"gitignore.path\"\r\n      has been configured before.\r\n\r\nDue to the dependence between \"gitignore.rule\" and \"gitignore.path\", the\r\nconfiguration file needs to always be parsed from top to bottom.\r\nAdding a second \"gitignore.path\" key will cause all the following\r\n\"gitignore.rule\" values to instead be added to the new file path.\r\n\r\nThis is obviously only a proof of concept. First, libgit2 fails to\r\nprovide a way of iterating through all config keys from top to bottom,\r\nbut will only allow you to iterate through them in indeterminate order.\r\nSecond, we shouldn't be adding the test specifications to our own\r\nprojects but instead have them part of a submodule. Its repository\r\nshould probably live at an official location, where it is accessible to\r\nother projects like git.git and JGit, as well.\r\n\r\nSo currently, I'm just seeking feedback in our small group and will\r\nlater on publish it for comments on the Git mailing list (obviously,\r\nwith code specific to git.git such that they can use the test specs for\r\ntheir project, as well).\r\n\r\n---\r\n\r\nSo I've been wanting to do something like this for a long time. Actually, the idea came up back in January 2017 at Git Merge, where somebody proposed to have such a generic test suite shared across multiple projects. As I haven't seen any progress for this yet, I now start to work on it.\r\n\r\nAs said, it doesn't work yet for libgit2. Problem is our configuration interface, which is unable to iterate through config variables from top to bottom. I'll dig into that shortcoming at a later point.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4303", "title": "Build failures with recent embedded libssh2", "body": "Another day, another build infrastructure tweak. So yet again, please do not merge until #4282 is merged.\r\n\r\nThis PR improves how we build libssh2. In recent commits, they have changed some things regarding their build infrastructure, which would require us to add additional hacks to compile libssh2 directly as part of our own sources. As libssh2 uses CMake, though, we should simply be including it as a subdirectory and be done about it.\r\n\r\nNote that this means that there is an additional dynamic library that has to be distributed. I don't know yet whether it is possible to statically link it instead of generating a dynamic one to avoid this, but I'll take another stab at this later. Regardless of this it is definitly the right thing to do, as we do _not_ want to fiddle with their build instructions. Doing so may lead to subtle breakages due to the build environment not matching what the libssh2 project expects, which is critical to avoid in a library directly related to the user's security.\r\n\r\n\r\nThis fixes #4302.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brianmario": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/4893a9c01c8da084eb995178f80d0d453109056e", "message": "Merge pull request #4451 from libgit2/charliesome/trailer-info\n\nImplement message trailer parsing API"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/d4a3a4b5383fefcb397524340af05118b4687f29", "message": "rename find_trailer to extract_trailer_block"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/3e5239e42a529e99dc584ce37402856a4da26cec", "message": "update code docs"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/1e758fd3154eef0bf1237fb20b2180ad08cfe28d", "message": "just use git_message_trailer in tests"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/6062032e452afea451901333089da834edbe2078", "message": "try and fix windows build"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/d43974fb5cbfda6ec28fc92b83d03db0af73748b", "message": "Change trailer API to return a simple array"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/5734768b9edaecedaa7b13fed2ce59cb588df7e8", "message": "Merge remote-tracking branch 'origin/master' into charliesome/trailer-info"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/f4f0e7eb0f8280ed6100c37c3af0aa66c31a8f9e", "message": "switch back to braced array initializers"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/f315cd1470e21dee0dc48cc6b53ffbd30122c917", "message": "make separators const a macro as well"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/fb29ba0953ef52ce94aecd93b9b4a3bcc64cf07c", "message": "remove empty lines between @-lines"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/1cda43ba34b40b82ff6470799d36e54a176aaad5", "message": "make comment_line_char const a macro"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/6bc7301e8ab6194179423b95a481942e2fa11329", "message": "Don't use newer C syntax for declaration in tests"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/e8bc855834e188dd87515ef232758a70357f4c85", "message": "Merge remote-tracking branch 'origin/master' into charliesome/trailer-info"}], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4113", "title": "[WIP] Add support for reading attributes out of trees", "body": "Finally opening this to get a sense of direction for this functionality, and the changes.\r\n\r\nThe idea here is to allow reading `.gitattributes` files out of tree objects. For now, these new functions assume that there is no working directory to check. Meaning if a tree oid is specified, a local checkout is never looked at for `.gitattributes` files. Though we may want to allow for both? So, specifying a tree oid would be additive. This was also built assuming the tree oid passed is the root tree, but I don't think it actually matters.\r\n\r\nI'm not super happy with adding the new parameter to all of these calls, so we could definitely hang it off of a couple of the existing structs being passed around (and through) the attr APIs. That said, I'm not sure which one(s) make the most sense so I did this for now to get things initially working.\r\n\r\nI have a test program locally that links to libgit2, and it appears to work as expected. Though this clearly needs more work.\r\n\r\n- [ ] Decide on final API and functionality\r\n- [ ] Make sure all other places that use git attributes internally (diffs?) allow for passing [through] a tree object to read from.\r\n- [ ] Add tests once the API settles down\r\n- [ ] Add/update documentation\r\n\r\ncc @mclark @tma @arthurschreiber", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/197759", "body": "should this be checking r (if the strdup succeeded) instead of s?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/197759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/276266", "body": "Sweet thanks dude!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/276266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/935545", "body": "bad. ass.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/935545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "doanac": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/e9628e7b8d4f19a12a1cc98306c973e36c20f29c", "message": " branches: Check symlinked subdirectories\n\n Native Git allows symlinked directories under .git/refs. This\n change allows libgit2 to also look for references that live under\n symlinked directories.\n\nSigned-off-by: Andy Doan <andy@opensourcefoundries.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "charliesome": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/72fbf05ceb088e6592b44d7656ed2bca14506696", "message": "trailer: use git__prefixcmp instead of starts_with"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/137226116e9a09ee02102798e1f9b5457da26076", "message": "trailer: remove inline specifier on is_blank_line"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/e24f3b59105eafe54c2efb10ab970680676b9ef1", "message": "tests: add message trailer parsing test cases"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/1c43edca1f4d14296ed94822df68d17aee2af549", "message": "message: add routine for parsing trailers from messages\n\nThis is implemented in trailer.c and borrows a large amount of logic\nfrom Git core to ensure compatibility."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/1ee0628d8aba264995336d2af0af5539e0dc89c7", "message": "Add Jonathan Tan to git.git-authors\n\nJonathan has consented via email to have his contributions to git reused in libgit2"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "richardipsum": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/4623c25f700be43efc5138e39d52ecff4c240b02", "message": "notes: Add test that read of noteless commit fails"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/d788f42a9c5f7840ff6ff86e0b9b06a785f42bd2", "message": "notes: Rewrite funcs in terms of note_commit funcs"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/60bee89d4697832f88c484f0c236e7f25c3d62fe", "message": "notes: Add git_note_commit_iterator_new\n\nThis also adds tests for this function."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/9a02725d11acb302b0d9ef7013ae81ffd59525c7", "message": "notes: Add git_note_commit_remove\n\nThis also adds tests for this function."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/7096bf1ef6b5c7c5659ea9d8c66c85bda8ef20db", "message": "notes: Add git_note_commit_read\n\nThis also adds tests for this function."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/a46e743d0153b9a565614776b9f3a71e0aebff25", "message": "notes: Add git_note_commit_create\n\nThis adds a new function that will allow creation of notes without\nnecessarily updating a particular ref, the notes tree is obtained\nfrom the git_commit object parameter, a new commit object pointing\nto the current tip of the notes tree is optionally returned\nvia the 'note_commit_out' parameter,\noptionally the blob id for the note is returned through\nthe 'note_blob_out' object."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/5b1641fb22111b36f47dd2cacb9b06ace3a6d9cb", "message": "notes: Make note_write return commit oid\n\nFor the new 'commit' API it will be necessary to know the OID\nof the notes commit that was written as well as the OID of the notes blob."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "apnadkarni": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/d439fb20bca3147582435d94b31f92e120afa267", "message": "Include git2/worktree.h in git2.h\n\nI'm not sure if worktree.h was intentionally left out of git2.h. Looks like an oversight since it is in fact documented."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cpoerschke": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/19f37f97bbd1d23184d1e53aa1c7295f40c6daf5", "message": "add test status codes legend to the 'Started' test trace\n\nmotivation: (for someone new to the tests) it's puzzling to find the odd 'S' interspersed in the test output\n\nproposed alternative test output (extract):\n\n$ cmake --build . && ./libgit2_clar -srepo -v\n...\nLoaded 340 suites:\nStarted (test status codes: OK='.' FAILURE='F' SKIPPED='S')\n\nrepo::config...\nrepo::discover..........\nrepo::env.\nrepo::getters...\nrepo::hashfile..\nrepo::head......................\nrepo::headtree....\nrepo::init.........................S\nrepo::message..\nrepo::new..\nrepo::open.............\nrepo::pathspec..........\nrepo::reservedname.....\nrepo::setters.....\nrepo::shallow....\nrepo::state............."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/732c0b6ded95779e4879c40d054b29981ba14ea6", "message": "s/Init/Index comment tweak for test_repo_init__init_with_initial_commit"}], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4409", "title": "issue #3751 (Function to parse author and committer information from environment)", "body": "work-in-progress for issue #3751 (Function to parse author and committer information from environment)\r\n\r\n```\r\ncd build\r\ncmake --build . && ./libgit2_clar -v -srepo::init\r\n```", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hkleynhans": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/f063dafb1da60625da76a1ea6975a121969cb630", "message": "signature: distinguish +0000 and -0000 UTC offsets\n\nGit considers '-0000' a valid offset for signature lines.  They need to\nbe treated as _not_ equal to a '+0000' signature offset.  Parsing a\nsignature line stores the offset in a signed integer which does not\ndistinguish between `+0` and `-0`.\n\nThis patch adds an additional flag `sign` to the `git_time` in the\n`signature` object which is populated with the sign of the offset.  In\naddition to exposing this information to the user, this information is\nalso used to compare signatures.\n\n/cc @pks-t @ethomson"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/a0b0b80862d4fb471be66643fe695c23f7755bd8", "message": "cmake: Allow user to select bundled zlib\n\nUnder some circumstances the installed / system version of zlib may not\nbe desirable due to being too old or buggy.  This patch adds the option\n`USE_BUNDLED_ZLIB` that will cause the bundled version of zlib to be\nused.\n\nWe may also want to add similar functionality to allow the user to\nselect other bundled 3rd-party dependencies instead of using the system\nversions.\n\n/cc @pks-t @ethomson"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yoney": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/3275863134122892e2f8a8aa4ad0ce1c123a48ec", "message": "clar: verify command line arguments before execute\n\nWhen executing `libgit2_clar -smerge -invalid_option`, it will first execute\nthe merge test suite and afterwards output help because of the invalid option.\n\nWith this changa, it verifies all options before execute. If there are any\ninvalid options, it will output help and exit without actually executing\nthe test suites."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ktdreyer": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/38169764fd1e0f32b2cdc515e80e0b0050b569e9", "message": "describe.h: fix spelling in comments\n\noptios -> options"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mhagger": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/5efe9d125f09a44e1581cf7d37cf4d36161f5d4d", "message": "Introduce a new `XDL_INLINE` macro and use it instead of `inline`\n\n`inline` is not portable enough, and the `xdiff` code doesn't import\nthe `GIT_INLINE` macro. So introduce a new `XDL_INLINE` macro (with\nthe same definition as `GIT_INLINE`). Use the new macro to inline two\nfunctions in `xdiffi.c`."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/8bbee8f397de3bc15dc1ee8f50f09136db707a7c", "message": "Fix compilation for CMake versions 3.0.x where x >= 1\n\nApparently policy CMP0015 was added in CMake 3.1. With CMake 3.0.2,\nthe build was failing with\n\n    CMake Error at CMakeLists.txt:18 (CMAKE_POLICY):\n      Policy \"CMP0051\" is not known to this version of CMake.\n\nThis patch makes it work."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cjhoward92": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/12a888d557bf2527ca4e7b20db3c5a623a8530f2", "message": "examples: log: pass options pointer to print_commit\n\nCleaned up the PR to address styling issues."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/27ff888f5a17a88122da4e5d0aac33d5c6934804", "message": "PROJECTS: remove example for --log-size"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/1436b0e11ca9e6567d21fe3ebd74dda4c405c4b2", "message": "example-log: add support for --log-size"}], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4380", "title": "examples: ls-files: add ls-files to list paths in the index", "body": "Added an example to mimic `git ls-files` using the libgit2 library. It also supports the `--error-unmatch` parameter to determine if the specified paths are in the index. This will hopefully be a useful example for new libgit2 users.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4378", "title": "submodule: check index for path and prefix before adding submodule", "body": "This is to fix an issue where libgit2 will allow you to add a submodule even if the path you are trying add is found on the index. In the CLI we get a nice error about this, but not in libgit2.\n\nI would obviously like some pointers on how to do this, as I do not think it is 100% correct. For one, when I add the trailing slash to the path, I feel like I could clean that up or have a better implementation. I am also unsure if there is a more streamlined routine to check the index for the path.\n\nSome advice on how I could clean this up would be awesome.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dglsswnsn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/f4770e47573c2e8dff00e8e7263ef8f30421aaed", "message": "Fix Issue #4047 Check return codes and free objects"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "andoma": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/9fe70c9e46fabae11ed7df8e9f97d3136802ba13", "message": "Use SOCK_CLOEXEC when creating sockets"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "slavikus": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/b34fc3fdf6071365cb5585ed929bd3dc714b67c0", "message": "Clear the remote_ref_name buffer in git_push_update_tips()\n\nIf fetch_spec was a non-pattern, and it is not the first iteration of push_status vector, then git_refspec_transform would result in the new value appended via git_buf_puts to the previous iteration value.\n\nForcibly clearing the buffer on each iteration to prevent this behavior."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bisho": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4470", "title": "Fix error handling of odb_object__alloc() in odb_read_1()", "body": "If `odb_object__alloc()` returns `NULL` (fails to allocate) it currently goes to `out`. If error is != 0 we will try to free raw.data, when raw couldn't be allocated. If error is 0, then we are silently swallowing the allocation error, and possibly causing access to a wrong `out` pointer. Let's return an error instead.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "softwareplumber": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4461", "title": "Textconv support (Issue #1328)", "body": "Here's an initial stab at providing textconv support.\r\n\r\nCaveat: It's about 20 years since I last wrote any C code.\r\n\r\nThere is a feature switch (a diff option GIT_DIFF_ENABLE_TEXTCONV), and some limited unit tests (tests/textconv). Much code is copied from the existing implementation of filter. Some code common to filter and textconv as been moved from filter.c to a new file file filter_textconv.c to keep the dependency graph relatively sane. \r\n\r\nNext step is to do some testing downstream (I'll be building this into a fork of gitlab). Plan to add more unit tests based on issues identified as I work on that.\r\n\r\nFigured the feature switch would make this a relatively benign experimental feature. My life would certainly be easier if this got merged into master early as any fixes to filter would be hard to merge.\r\n\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "techvoltage": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4459", "title": "Update callgit_remote_connect arguments", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Etiene": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4407", "title": "merge: reload index before git_merge", "body": "When the index in memory diverges from the index in disk `git_merge`\r\naborts with `GIT_ECONFLICT`. More details about this are found in the \r\nissue #4203, which this PR attempts to fix.\r\n\r\nA further discussion is needed wether this behaviour is actually desired.\r\n(Suppose someone actually is writing something to the index in memory\r\nand a concurrent task is merging. A possible argument is that the index\r\nshould be written to disk then.)\r\n\r\nCloses #4203 ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "petersalomonsen": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4400", "title": "Hacks to build with emscripten for running in a web browser", "body": "Introducing new build option:\r\n\r\nAPPLY_EMSCRIPTEN_HACKS\r\n\r\nwhich will apply necessary tweaks to run in a web browser. Also added emscripten_hacks folder with build script (build.sh) and instructions in README.md.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rcarz": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4389", "title": "implement NTLM authentication", "body": "This patch implements NTLMv2 session negotiation over HTTP. Git repositories served by Team Foundation Server are currently only accessible if IIS is configured for SPNEGO authentication, which isn't always the case. I excluded support for older LM/NTLM versions since they are strongly discouraged and unlikely to be used in the wild.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "infinity0": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4325", "title": "Add -DUSE_CURL_SSL to allow distros to avoid OpenSSL", "body": "This is helpful for distros that don't want to link libgit2 against OpenSSL for licensing reasons, but are able to link against another TLS-enabled version of libcurl. For example see [Debian #798421](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=798421).\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jminnie": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4324", "title": "Use find_package instead of pkg-config on Windows for libssh2", "body": "Hi,\r\n\r\nI hope you will find this change useful.\r\n\r\nI was having trouble configuring the build when I enable the \"USE_SSH\" option. To find the libssh2 installation, pkg-config is used. On Linux this is not uncommon, but on Windows, having pkg-config available is highly unlikely and non-standard.\r\n\r\nSince the libssh2 maintainers already provide a CMake config file for their software, it makes the usage of \"find_package\" a trivial exercise.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SantiagoTorres": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/3519", "title": "[examples/log.c]: Adds --log-size function", "body": "Hello, everyone.\n\nI wanted to play around with the library and saw these starter-project suggestions (I'm also interested in getting #3440 but that might take a little longer). \n\nI tried to keep everything pretty self-contained and straightforward, but I could see why some design decisions (e.g., passing the whole options structure to the print commit function) might not be appealing to everyone. \n\nLet me know how this looks.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "csomme": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/2898", "title": "Race condition in fs refs iterator when refs are packed by another process", "body": "When refs are packed, a new pack file is created containing all previously\npacked refs as well as any newly packed loose refs. The existing pack file is\nthen replaced by the new pack file, and any included loose refs are deleted.\n\nIn order to avoid a race condition when another process is packing refs, the\nloose refs must be loaded before the pack file is loaded.\n\nThe bug can be demonstrated in the current code by placing a sleep after the\ncall to packed_reload and packing the refs in another process. As a result,\nany refs that were transitioning from loose to packed will be omited from the\nlist of refs returned by the iterator.\n\nThe git code base [similarly loads loose refs](https://github.com/git/git/blob/master/refs.c#L1860) \nbefore loading packed refs for the same reason.\n\nCurrently iter_load_loose_paths assumes that packed_reload has already been \ncalled and marks packed refs in the refcache. Since this changes loads the \nloose refs first, the shadowing of refs in the refcache must be done as a \nsubsequent operation. I implemented this as a subsequent operation when\ninitializing the iterator, this could be pushed into the refdb_fs_backend__iterator_next\nand refdb_fs_backend__iterator_next_name when iterating over the loose refs.\n\nWhile investigating the problem it strikes me that there could be other problems\nwith the refcache. It seems that the refcache is shared amongst iterators and\nis reloaded in multiple code paths, including creating an additional iterator. \nSince the information about which refs are shadowed, as well as the set of\npacked refs itself is stored in that data structure, it seems like there are \nopportunities to get back an incorrect set of refs there as well. I don't think this\nPR does anything to help or hurt in that situation.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "antis81": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/2824", "title": "add example \"do_checkout_ref\"", "body": "@ethomson Here it is! My first example contribution. Not yet compiling! Needs some discussion!\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "arrbee": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/2787", "title": "Add API to precompile all diff drivers", "body": "While checking out the latest issues mentioned in #813, I wanted a way to compile all of the regular expressions in all of the builtin diff drivers. It seems like exposing the API through the `include/git2/sys/diff.h` might be reasonable for users who want to avoid the \"on-demand\" driver compilation behavior.\n\nI'm not sure if this API matters, but I want to have Travis run on the new test and make sure it passes on all platforms.\n\n---\n\nNow that I think about it, this points out an existing bug in my code - I cached compiled diff drivers and didn't do any cache validation. As a result, if you invoke this function, it will compile and cache the internal version of all drivers and ignore any overrides in the `.git/config` or other external files. This bug also means that if you change to data in one of those external files after the original diff driver is compiled then we will never pick up the change.\n\nThe \"fix\" for this bug is either to make `diff_driver.c:git_diff_driver_load()` validate the cached driver definition (which might be acceptable if we rewrite the function to quickly realize that if there is no section named `diff.<driver>...` then we can always use the cached version - which will be the common case), or to always invalidate the diff driver cache at the start of every major API operation.\n\nI lean towards the second fix so that a given driver definition will be used without revalidation throughout an API call, but the next high-level diff API will pick up any changes that have been made on disk. This suggests that the diff driver cache should be stored in the `git_diff` object instead of in the `git_repository` (and the cached versions of the builtin drivers should be stored globally beside the table of builtins for quick instantiation when we hit the fallback case - although that has threading issues).\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/2101", "title": "Add a warning API and use it for bad signatures", "body": "The idea here is to add an API for reporting warnings where data appears to be bad but recoverable. For example, having an invalid timestamp in a commit signature or finding a `.gitattributes` file that can't actually be read. In these cases, we are currently faced with either reporting an error and failing in a situation that we could continue from (and Git often would), or ignoring the problem without giving the caller any notice that some questionable data was encountered (and in some cases, returning partially incorrect data as a result - e.g. we have no way of representing a bad signature timestamp, so we would just use a fallback value).\n\nThe driver for this is that we've been encountering some cases where libgit2 is more strict that Git for handling some data and I wanted a better option that just ignoring data problems when they are seen.\n\n**This is just as initial take.**  I expect that the API will need to change quite a bit before we accept it into libgit2. Currently, I wanted the warning callback to get a lot of data about what was happening, so I tried to shoehorn things into a generic API with a lot of parameters.\n\nThinking it over, I think there are a number of options to proceed:\n1. Use something like I have here with a generic warning signature (probably with fewer parameters than I've specified) and make the warning handler look at the message to decide what to do.\n2. Create warning specific structures that get filled in depending on the warning, along with adding the specific warning codes to `include/git2/sys/warning.h` so the callback can know what structure it is looking at.\n3. Add some sort of warning/error context stack where we could push data frames (e.g. top frame is a repository object, next frame down is a commit object being loaded, next frame down is the signature object being filled in, final frame is the string being parsed), and then the callback gets the stack of data frames with the option to report the error as desired. This could be useful for errors, too. Obviously this would have to be done with thread-local data.\n\nWe'll also have to decide where the warning callback should reside and how it should be set. I've opted to make it a single global value right now. I think that's probably the only good option. I've also opted to set it via `git_libgit2_opts` but I could easily add a setter API directly to `include/git2/sys/warning.h` which would restore type-safety (i.e. I should probably just do that).\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/1003693", "body": "Hah! My plan to destroy all kittens is working!\n\nActually, I've got a fix ready. Sorry, I was going to check the Windows build then I was late for my train and forgot about it. Should be fixed in a couple minutes...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1003693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1028632", "body": "Doesn't matter that much, I think, but the intent of the attr.h header is for you to use GIT_ATTR_TRUE instead of directly referencing git_attr__true so that the implementation could be changed in the future. Obviously this is internal to the library, so it doesn't really matter one way or the other.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1028632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1028634", "body": "Sorry about the crappy docs for this. I've rewritten them and I'll push the change later today or tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1028634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1078574", "body": "Thanks\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1078574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2378352", "body": "What's doubly strange is I could swear I noticed this and fixed it. Is it possibly idling in a PR? Hmm...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2378352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2815203", "body": "Good call, sir! :heart:\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2815203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2820558", "body": "Put another way: that test will always be false. `((x < 0) < 0)` is zero for all `x`.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2820558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3136250", "body": "Hmm. I want to understand a little more why these would be needed because I wouldn't think offhand that these changes would be necessary... Let me look around a bit.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3136250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3360880", "body": "And we love you for it\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3360880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3384473", "body": "Hmm. What if we add a GIT_CONFIG_LEVEL_CUSTOM with value 5 that isn't used internally but gives you some extra room to extend? That's just an extra enum value so very easy to add...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3384473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3401010", "body": "My attention is on #1642 at the moment. Feel free to open a PR! Thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3401010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3597867", "body": "Probably shouldn't return an error without an error message.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3597867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3597873", "body": "Although in this case, I think you can just assert that these parameters need to be present instead of doing it like this. At least that's what happens almost everyplace else in the library.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3597873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3597890", "body": "Are you sure you want to free this after freeing the repo?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3597890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3597940", "body": "Just for demonstration purposes, it might be nice to show doing the lookup from the HEAD commit object in addition to the root tree. And also it would be interesting to get the `subdir/` tree out of the root tree and lookup just the \"subdir_test2.txt\" path from that to demonstrate relative lookups not from the root. I'd love to see the tests show off all the variants on how this can be used.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3597940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/6070503", "body": "This is actually not a real issue. The `git_attr_file` is refcounted and the order does not matter.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/6070503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/6071505", "body": "Hmm, reasoning about these things is tricky. I've convinced myself that it was or wasn't safe the way it was a couple of times. Either way, this order is more obviously safe :star2: \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/6071505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/279330", "body": "By the way, I think this line in the old code is actually a bug (code in if should be executed if repository_path _is_ an existing directory) so I flipped the behavior. It would be great if someone could confirm if that is correct.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/279330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/309869", "body": "Well, actually this emulates the behavior of core git's gitignore function. The gitattributes in core git does not seem to implement the behavior described in the docs.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/309869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/309884", "body": "Yeah, I'm not sure, although from reading the performance stats on that hash function, it's impressively fast. Anyhow, I just wanted to make it easy to have a hash with simple string keys. If you think it's ok, I'll make it so that hashtables use those as the default if you pass null for the hashing and sorting functions.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/309884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/309887", "body": "This part is broken, I know. But to fix it, I think I really ought to extract the shared logic from config paths into utils, and I didn't get around to it yet. I'll put it on my todo list for this PR.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/309887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/309894", "body": "How would you expect this to work? Right now, I store a hashtable of `git_attr_file` objects in the git_repository each one mapped from a filename. When you call `git_attr_get`, I use the path of the file to decide which entries in the hashtable are relevant. I don't really have a place to store and apply attributes that don't match up with a path on disk.\n\nI think you are right and this should be exposed somehow, but I don't have a good understanding of how it would be used. Maybe I can consult with the wrapper implementors about what they need / want beyond the core API.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/309894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/331290", "body": "Well, I didn't want there to be future confusion and I figured a comment never hurt anyone...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/331290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/331318", "body": "Yeah, this is the evilest part, I agree. I can back this part out if you are uncomfortable with it.\n\nI did not choose the value completely arbitrarily however. Valgrind was showing reads that were 3-8 bytes beyond the end of the block. I thought that perhaps something in zlib was reading in 8 byte chunks, so I wanted to round up to the nearest multiple of 8 bytes (i.e. `(x + 7) & ~7`. But then I needed to add 1 to that (since it is `res_sz + 1`).\n\nThen I started to think about valgrind showing reads that were 8 bytes beyond the end of the block. If the issue was simply 8-byte blocks, I would think we would only see up to 7 bytes beyond the end of the block, not 8. To be safe, I decided to guarantee that at least one full extra 8 byte block would be added past the old malloc size. That lead me to `(x + 16) & ~7` for the final version of the code.\n\nI don't love it, but I also didn't want to dive into the zlib code.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/331318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/331351", "body": "It was the occurrence of this in src/pack.c that led me to suspect zlib. Of course, that doesn't apply here in delta-apply.c. Rereading the code, I still don't see an obvious issue - it even looks like all the checks are in place. But I just know what valgrind was complaining about...\n\nMaybe @carlosmn can comment on whether he sees any invalid reads from valgrind on the clay tests? If not, maybe this part can be excised.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/331351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/345485", "body": "Sure, I'd be happy to. I have mixed feeling about this, but the way I was using it, I was having to shove so much stuff into a big structure for the callback to work right. Let me look again if I can rewrite it cleanly now that I have everything else working, otherwise I'll just improve the docs.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/345485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/346102", "body": "Okay, this gruesome macro is all gone now, replaced with a nice function and callbacks. :relieved:\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/346102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/357613", "body": "Yeah, I don't know what I was thinking.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/357613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/357615", "body": "Decided to just remove this function completely since it is really misnamed and only used in one place right now.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/357615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/474140", "body": "Well, I almost always try to allocate git_vectors on the stack, but for the iterator case, I want to have a vector of vectors so there is no easy way to avoid heap allocation for this case. It is an unusual enough case that I'm willing to move the heap-based vector allocation into a static function inside iterator.c instead of making it part of the vector interface.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/474140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/474143", "body": "You are completely right, as usual.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/474143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/474150", "body": "Yeah, I have to correct this habit. From previous projects, I'm used to an \"object oriented\" parameter ordering where the primary object is always the first parameter for every API (the \"this\" pointer if you will), so I tend to fall into that for everything, but I know that is not the libgit2 style. Do we have an argument ordering style guideline written up somewhere?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/474150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/474159", "body": "Did not know about intptr_t! Sounds good. I don't like this part of the code that much, but I just want an easy way to use a `git_vector` to store an array of integer values instead of pointers.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/474159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/474172", "body": "Let me think about it. Reading over the error handling code, I recognized that this contains(...) stuff is some of the oddest crap that I've written.\n\nI think that `git_buf` with append-truncate-append is going to be pretty fast since the initial append has already guaranteed that the memory is allocated and probably in cache, so the cost of separating this into separate contains() and append() steps is probably low. With the existing error handling code, this is a little ugly, but with your new error handling style, it should actually be pretty clean. Let me tweak it in this branch and we can see...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/474172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/481251", "body": "Hmm, ok. Any more information about what the failure message is? I'll try to reproduce. Is it possible that you have extra files in your tests/resources/status directory or something like that? This test is somewhat fragile I guess.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/481251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/481514", "body": "Okay, I think I know what the problem is. Should have a fix shortly.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/481514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/481858", "body": "Thanks @schu. It should be fixed now (I tested on my Linux VM). Can you confirm when you get a moment?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/481858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/482922", "body": "Well, the test was not previously recursing into directories and I decided that led to a very shallow test case. So I tweaked the test to be more thorough - and I removed my emacs backup file as well. :-) In retrospect, I probably should not have combined both changes into a single commit, but I hope we've at least ended up with the right outcome.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/482922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/503857", "body": "One of the most common uses of GIT_UNUSED came from iterating over hash tables when you really only wanted the key or the value. So, I just reorganized the code and made separate macros for key, value, and key-and-value.  I'm not 100% certain that I chose good names here, so feel free to let me know if you have a preference.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/503857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/503870", "body": "I wasn't sure about this. Basically, as I was going through cleaning up the GIT_UNUSED stuff, I noticed that we were calling `free()` directly here instead of using `git__free()` and I assume that is just a bug. So since I was touching the file anyhow, I figured I would fix it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/503870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/503882", "body": "This one is irritating, but I had a situation with diff where I had a `const git_vector *` instead of a `git_vector *` and so I could not use `git_vector_get()`. I added this alternative accessor, but I'm not very happy about it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/503882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/503902", "body": "So, on win32, stat is somewhat expensive, but if you just want to know if a file is a directory, you can already get that information just from scanning the directory entries. I added this extended readdir API to return that information.\n\nHowever, it turns out in the diff code I eventually need to stat the file anyhow, so I just shifted around where the stat was done so that I don't have to do it twice, and I've ended up not using this extended readdir feature. I've left it in in case there is another use for it elsewhere, but I don't need it after all.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/503902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/503931", "body": "This pattern was so common in my clar code that I moved it into the helpers. Basically, this installs a fixture into the sandbox, renames .gitted and other files, then opens the repository. You can call this from `...__initialize()` if you want, or you can call it at the start of each test if you need a different fixture on a per test basis (which I was needing in a couple of different cases).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/503931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/503943", "body": "I don't love this, but I have been testing a lot of integer equality in the diff tests (e.g. how many files were different, etc.) and I got tired of error messages that were not giving me the details of the actual and expected values, so I wrote this macro. Unfortunately, since I need to sprintf the values, I can't write a generic version of an equality test and I need to have an int specific one.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/503943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/503959", "body": "So, this was incorrect, not actually incrementing the counter value. Of course, fixing this led to the test failing since this was using the \"status\" fixture instead of an empty repository. I fixed the callback to actually increment the counter and then had to fix the tests so that the empty repo test could really run with an empty repo.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/503959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/490179", "body": ":+1: I like what you've done here. The use of ssize_t just so we could have a -1 value always seemed unfortunate to me, so have a special invalid buffer ptr seems like a nice solution to this.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/490179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/490180", "body": "The git_buf should always be kept NUL terminated now, so this probably needs a final line: buf->ptr[buf->size] = '\\0'\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/490180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/490187", "body": ":metal: Love getting rid of the duplication\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/490187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/490190", "body": "I've just been writing `Copyright (C) 2012` for new files. Should I be including the full range of years?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/490190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/490195", "body": "Awesome. I just implemented a simplified version of this for binary file detection in diff, but we can convert to use this instead.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/490195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/552107", "body": "Yes, as I was `git add`ing it, I thought to myself \"maybe you should rethink this.\" I'll fix it. :smile:\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/552107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/552144", "body": "@tanoku I notice that you cleaned up the special treatment of `GITERR_OS` that I had added earlier. It is definitely much cleaner the new way. The reason that I had done it in that strange way was that I wanted to capture the value of errno _before_ the call to `vsnprintf()` in case that overwrote the errno value.\n\nI have left it the way you reordered it (with a couple slight changes to exclude errno 0 and to try `GetLastError()` on win32) but I'm still concerned about getting accurate errno values. I suppose I should just write some tests. :wink:\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/552144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/554320", "body": "@tanoku Curious what you think of this. I wanted to be sure that a zeroed-out `git_filebuf` was not mistaken for an initialized one, so I added this `fd_is_open` bool. Without this, calling `git_filebuf_cleanup()` on a zeroed-out struct would have ended up calling `p_close()` on fd 0. There was at least one error path in the codebase which could have resulted in that (had the error ever actually occurred).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/554320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/554323", "body": "@tanoku Fixed this. Hope you don't mind separate asserts instead of all in one. It just seemed easier to read to me.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/554323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/554364", "body": "Since all of the cases where `format_object_header()` could have returned an error code are now handling by asserts, it should never fail (except by asserting), so I don't both to check the return value for < 0 anymore. Does that seem okay?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/554364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/554369", "body": "I know docurium doesn't handle `@deprecated` but I thought we needed some way to mark this.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/554369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/593071", "body": "This is the part I think that @tanoku will like the least...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/593071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/636344", "body": "It's not worth changing, but I've found it convenient to have my `...set_error()` helper functions elsewhere just return -1, so you can just write `return net_set_error(\"Error receiving data\");` and have that return -1 in a single line.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/636344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/682987", "body": "Think you want `git__free()`\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/682987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/683021", "body": "Do you want to use the new `bool` that @tanoku introduced? Then when you call this, it would also be nice to use the `true` and `false` constants instead of passing in `1` and `0` so it's more obvious that you're passing a boolean value instead of a numeric one.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/683021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/735522", "body": "You are correct that this logic is no longer right, but I think the first call to `print_cb` should be made even if `delta->binary` is true.  I think this should read:\n\n```\n    int result;\n\n    ...\n\n    result = pi->print_cb(pi->cb_data, GIT_DIFF_LINE_FILE_HDR, pi->buf->ptr);\n    if (result < 0)\n        return result;\n\n    if (delta->binary != 1)\n        return 0;\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/735522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/785023", "body": "This is a good change to propagate the error code from `git_config_get_string` instead of overwriting it with -1. Is there a reason to overwrite errors other than `GIT_ENOTFOUND` here? Could this just `goto cleanup;` without setting error to -1?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/785023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "chescock": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/2529", "title": "Resend POST requests for Kerberos in WinHTTP", "body": "I'm trying to use LibGit2Sharp to connect to an Apache server that uses mod_auth_kerb for authentication, and I'm getting the error \"Failed to receive response: The request must be resent\".  It seems that the way WinHttp handles Kerberos authentication involves sending the request twice, which works fine for GET requests that have no body but fails for POST requests because it doesn\u2019t store a copy of the request body to resend.  \n\nThe workaround I\u2019m using here is to send an initial empty POST when using Negotiate, which should trigger the 401 early and allow the actual request to succeed without having to write the body twice.  I think this may be unnecessary in some cases, but I don\u2019t see a way to tell whether it\u2019s required and the extra empty POST appears to be harmless if it succeeds.  \n\nI\u2019m fairly new to both Kerberos and WinHttp, so I apologize in advance if I\u2019ve done something completely crazy and I welcome suggestions for other solutions to my problem.  \n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vmg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/495184", "body": "Merged back into the experimental branch. Thanks a lot!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/495184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/498246", "body": "Fixed in 585190183b47dc991605abcfbe3afb57220a0f29. git_person is no longer public, memory is dynamic and managed by the library, and there are getter methods in place.\n\nThanks for reporting.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/498246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/505559", "body": "Fixed in d80e9d55aa2d0629f7f207db42762494075d7854. Thanks as always for reporting -- and obviously, if you can cook a patch instead of opening an issue, that's even more awesome. Feel free to fork away!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/505559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516177", "body": "Merged, thanks a lot. Can \"Any Day Now\" be asap? Just message me and I'll set up a repository for the bindings inside of libgit2.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516196", "body": "Oh, Mr Pearce. The world is so small. ;d\n\nJust shout when you are clear to release, I'm looking forward to hacking on the Python bindings too. Thanks again.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/519077", "body": "I think that since 1795f87952a68155a618523799f70473483c7265 all public methods return a proper error code. Tell me if anything is missing.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/519077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/525561", "body": "Scott was kind enough to write a README.txt for us. We'll make sure to keep it up to date. Thanks for reporting!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/525561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/559346", "body": "libgit2 hasn't built in Windows for a while, because I don't have a Windows box to try it on. ^^\n\nWe are working on that and it's pretty high on our TODO list: we have a new build system in the waf-build branch which now has support for building libgit2 as a shared library. I'll be testing that on Windows someday on the following week, expect an update.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/559346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/562769", "body": "Hey there! We've been working very hard on the Windows build, and it's almost there. So far MSVC 2010 and MinGW compile cleanly with our new build system. Can you give it a go and tell us if you find any issues?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/562769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563830", "body": "...We've just migrated from Make to waf last night. Try updating your master branch and compiling again. Shared targets should be available in all platforms.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/564367", "body": "Hey, we have two new commits! The shared library now builds without errors on all platforms I've tried, and you can choose compiler version with the --msvc flag, and target platform with the --arch flag.\n\nTell me if you find any more issues!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/564367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/564374", "body": "Oh, and yes, that's the 'expected' procedure for installing the library dependencies under MSVC: either copy them to the VC folder, or in any other folder inside of your %%LIB%% environment variable.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/564374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576213", "body": "Hey people, thanks for your interest.\n\nThis is indeed a very interesting idea, and is something we have certainly on our TODO list: what we plan on doing is decoupling the storage system from the object database logic, as to allow people to write custom drivers on their apps to use **anything** as the backend on their Git app... From in-memory storage, to Cassandra. How cool is that? I'll tell you: very cool.\n\n...however, it has to wait, because our main focus right now are network ops. So stay tuned.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576452", "body": "Hey, couple questions while I get QT Builder to try this out: have you actually tested this on Windows? What compiler does it use on that platform, can you choose between MSVC and GCC? Also, it seems like this only builds a shared library. How can we go about a static one?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/589514", "body": "Before we merge this, I would like it to have support to run the test suite.\n\nYes, I know that generating TOC files is kind of messy (we inherited that from the previous maintainer), but you can check how it was done in the old Makefile-based build-system (it's just a sed line).\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/589514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/589545", "body": "Yes, indeed. I rewrote the TOC generation in Python to prevent using 'sed' -- it's bound to give issues on Windows... However, I don't think you can rewrite it using only CMake; it isn't even Turing complete, is it?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/589545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/593078", "body": "This is an amazing work.\n\nI have just tagged v0.2.0 of libgit2: the main change is that the include folder has been renamed to <git2> and there's a new global include file, <git2.h>. If you update the script and test it with the tag, I think this will be ready to be merged back for the next minor version.\n\nThanks again!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/593078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/593090", "body": "Have you seen tag v0.2.0? We now support custom backends -- the full documentation will be live in a couple days. ^^\n\nWith the new backend API, adding support for in-memory repositories can be done in an hour. Give it a go yourself, or I may try to do it this weekend.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/593090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/598559", "body": "Hmmm... I cannot get this to work on Windows. Exactly, what version of the Zlib library are you using? The waf build links against the Windows-specific DLL, called \"zlibwapi.lib\": it's the most readily available one. Do you think it would possible to use it on CMake too?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/598559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/601650", "body": "Hey, sorry this is taking so long to merge, but a build system is a pretty big thing and I want to make sure it's tested properly. I got CMake working on Windows, and it generates VS solutions nicely. Nice job!\n\nHowever, I cannot merge 0805966: I've just noticed you are changing the path for the test repository on all tests! You broke the whole unit test system for all other build systems. :p\n\nTest files are supposed to be ran from their location, but changing the active directory to a temporary folder inside of the \"tests/\" folder, which gets deleted after the test is ran.\n\nThis is because some tests generate temporary files and other trash we don't want to keep. Since CMake does not actually run the tests, there is no reason to change the relative paths to the resources folder -- so please revert that. If you want to add CMake support for running the tests (which would be awesome, although I dunno if it's possible), you must first change the active directory to the temp folder, and then run them.\n\nThanks again for your time!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/601650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/601706", "body": "Update: the test files now run with the path to the resources folder hardcoded... You need to update the build system to build each test with a 'RESOURCES_FOLDER' define, having the full path to the 'tests/resources' folder (without the trailing slash).\n\nNow you can run the tests anywhere. :p\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/601706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/604881", "body": "This is some hot shit. Thanks Emeric, it was much needed.\n\nThere are some issues, though. To begin with: I think that 'git_person' needs a long overdue rename, because it doesn't only store a person's name and email, also the time, and now the offset... Any suggestions for a new name?\n\nMore input later.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/604881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/605075", "body": "Hot shit means cool stuff. What are you, French? :p\n\nAnyway, I like the idea of having a separate git_date... However, `git_action_details` sounds a little bit too generic. I think I'm gonna go for that, and possibly rename it -- and while I'm at it, I want to expose the git_action structure to remove some getter/setters. We already have too many of those.\n\nI'll push this into a branch in libgit2 while I get it fixed. Thanks again, you're the man!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/605075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/605080", "body": "...Also, i'm wondering if the \"date offset\" should have  any effect when sorting commits by date on the revision walker. I'm guessing the Epoch time in the `git_person` struct is absolute, and there is no need to take into account the offset when comparing, right?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/605080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/605122", "body": "AFAIK the encoding tag applies to the whole commit, not only a specific action... It would be nice to avoid data duplication.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/605122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/605544", "body": "Ok, here it is -- finally. I had to merge by hand because your branch was a little bit too dirty. Awesome job, anyways. I'll ping you the next time I break the CMake build system.\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/605544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/605547", "body": "I'm sold on `git_signature`. I've just merged this into a branch called 'timezone', because I'm going to fix up some stuff myself before merging in the master branch.\n\nThanks, this is great.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/605547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/607221", "body": "Hey, is this fixed in 1f080e2?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/607221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/619930", "body": "Thanks as always, but give me a couple days before I can look at this. Merging atm the time offsets branch. You work faster than me. :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/619930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/621170", "body": "Well spotted, thanks.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/621170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/623051", "body": "Just got around to merging this. Thanks a lot. However, for the future it would make my job much easier if you followed our style guidelines more closely, namely:\n- Placement of pointer arguments\n- Bracers!\n- Functions which are only called inside a file must be static, and they don't need the git_ prefix\n- Same with structs, they don't need the git_ prefix if they are not exported\n\nThanks again!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/623051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/630377", "body": "No, this is indeed a bug -- I'll get to it this weekend if you haven't fixed it yourself by then. ;)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/630377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/636660", "body": "Hey chobie, it seems to me that the `offset` you are getting from `git_index_find` is actually `GIT_ENOTFOUND`, because the specified file cannot be found. That's why the lookup with `git_index_get` is failing and returning a `NULL` pointer. Can you tell me exactly what's the offset you are getting?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/636660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/641539", "body": "Hmmm... I'm opening this bug again. You shouldn't have to force `_FILE_OFFSET_BITS` to compile the library. I'll look into this, thanks a lot for the warning.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/641539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/650913", "body": "Indeed, indeed. Fixed on 2645053be21dab231c1d97d063acd19ea87f7577, thanks for reporting!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/650913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/663165", "body": "Hey Emeric, just started reviewing this.\n\nDo you think you could write some unit tests when you have some time? We cannot merge this until it's covered with some tests -- and if you don't write them yourself, I have to. :)\n\nThanks as always!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/663165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/663169", "body": "Neat, thanks for the patches. The fix in `vector.c` didn't compile on Linux, though. The math include adds a dependency on the glibc math library... I just changed it to a manual ceil and merged it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/663169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/663178", "body": "That would be a very good start. Of course, when dealing with HEADs it's expected that the tests will break if we push new stuff to the test repository, so I will take care of that if it happens. :)\n\nAlso, make sure that all the SHA1's (to the HEAD, etc) are neatly named stored in defines/constants, so we can easily update them if we change the test repo.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/663178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/663184", "body": "Hmmm... You are right, but probably a `no_backends` init method is not the best idea. Let me think about it for a while, and see if I can come up with a better option.\n\nThanks for reporting!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/663184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/665458", "body": "Actually, I've changed the public header to use more generic types (unsigned int instead of off_t), since the file_size entry in the Index is always 32-bits (defined as such in the standard). I think this should fix the problem everywhere.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/665458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/667808", "body": "Thanks, I've just merged the fix.\n\nThe problem we have right here is that the Git Index format defines the time entries and the file size entries as 32 bit fields -- so it doesn't really matter if your OS is using 64 bit time_t or off_t, because the 64 bit information just isn't in the index file when loading it.\n\nThis is certainly coming back to bite us in the ass in the future, but hopefully I'll be dead by then. Cheers!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/667808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/667897", "body": "The problem is not when running stat in our library; the thing is that we have to write that index data back to an Index file, and that index file must be able to be read by the original Git, and the format of that Index file clearly specifies that the time field is 32 bits, and the size field is 32 bits -- so even if our library does a 64 bit stat() call, we can only write 32 bits back to the Index. This is an internal limitation on Git's design, and there's no way we can work around that.\n\nCheers.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/667897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/667918", "body": "Here is the technical documentation for the Index file:\n\nhttp://permalink.gmane.org/gmane.comp.version-control.git/155030\n\nIt states \"32 bits\" for all the entries, with no additional information.\n\nComing to think about it, the best idea would be for libgit2 to store all data in the system's native sizes (i.e. 64 bits, where available), and then truncating it when writing to the Index file. That would make things much easier if the Git developers ever release a new revision for the Index format with support for 64 bit entries.\n\nAre you interested on cooking up a patch for that? Otherwise I'll add it to my TODO list.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/667918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/670625", "body": "You are fast and awesome. This is exactly what I had in mind, thanks for the patch!\n\nPS: In the future, try to stick to ANSI C comments \n     /\\* WE R COMPILANT LULZ */\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/670625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/673819", "body": "Hey, fixed this in ec3c7a16c260fa6540cfe8daf37c1324100f51bf. I hope this looks sane to you. Just create the ODB with as many backends as you require with `git_odb_new()`, and then initialize the repository using that ODB.\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/673819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/694008", "body": "Neat, thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/694008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/719915", "body": "Merged. I had to merge manually because the tests were broken.... You forgot to rename git_ to gitfo_ on the unit test. ^^\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/719915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/721729", "body": "Gotcha! Took quite a few changes, but it's finally here. Thanks as always. :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/721729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/741253", "body": "Thanks for spotting this. I've merged your pull request.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/741253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/741254", "body": "Thanks again!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/741254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/741288", "body": "I've just fixed git_repository_index and git_revwalk next. I'll keep this open because I'm sure we're still missing some methods.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/741288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/741289", "body": "Nice report, thanks as always. Working on this. :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/741289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/741489", "body": "Gotcha. Tell me if it's somehow still broken. :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/741489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/742132", "body": "Consider this request fulfilled with the new SQLite backend!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/742132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/748906", "body": "Hey przemoc, I've never used CMake before, but the reason I put `SQLITE3_LIBRARIES` and `SQLITE3_INCLUDE_DIRS` is because I thought it was common practice to manually set those variables with the GUI tool on Win32, where pkg-config is not available. Is this stupid?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/748906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/750468", "body": "That's a perfect solution. Thanks, just merged.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/750468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/783698", "body": "Hey! I've improved the speed a little bit in 348c7335dd804ea12eabac7106c5f9675a421ba0... Is it working at all for you? Do you notice any differences?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/783698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/783734", "body": "This is scary. Thanks for reporting, looking into this...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/783734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/785152", "body": "Yes, the threaded code had some issues with interlocking. With proper locking, the overhead for thread creation is so big that you need 30000+ entries in an Index to make it faster -- I've temporarily disabled it.\n\nAfter profiling the code, I've noticed that the bottleneck are the SHA1 methods for the digest... I'm going to try using the OpenSSH ones to see if there's any improvement.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/785152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/785162", "body": "Much easier than what I thought. Check cb77ad0d4e66262393c3fa868a7bc723cfd71d61.\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/785162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/793738", "body": "Hey, here's another update: I've just pushed an experimental branch that does 2-layer buffered I/O when writing the index files.\n\nhttps://github.com/libgit2/libgit2/tree/new_io\n\nCan you try that out and tell me if you notice any performance gains? Cheers!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/793738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/794452", "body": "Glad to hear that. :)\n\nI'll merge the branch into trunk and close this. If you find any other performance issues, please open more tickets.\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/794452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/794487", "body": "Convenient indeed! Thank you.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/794487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/806163", "body": "Hey! There seems to be a problem with the version of Zlib that you have installed. Looks like it was built with the improper calling conventions (stdcall vs cdelc). Did you build it yourself or download it? If the second, I suggest you build it from scratch in your MinGW environment -- that should fix your problem.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/806163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/806749", "body": "Now it seems like CMake cannot find your new ZLib library. Can you try to regenerate the CMake makefile pointing it properly to your compiled zlib.a?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/806749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/831200", "body": "Thanks, merged!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/831200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/837475", "body": "I agree!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/837475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/837477", "body": "As stated, these are just helper methods to make writing bindings simpler, and the interface more usable. :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/837477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/837503", "body": "Gotcha! There were a couple of small errors in the patch, I fixed them myself. Thanks for spotting this!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/837503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/837505", "body": "Fixed -- it's now always unsigned char. Also, now we do validation for the attr parameter.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/837505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/837507", "body": "This is reasonable -- I'll look into it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/837507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/837510", "body": "I've just fixed it myself -- sorry for not making it clear. Of course, attaching fixes is better than reporting bugs, but reporting bugs is still awesome. So thanks a lot anyway!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/837510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/837515", "body": "Hey, I've just fixed this myself and tested it. We needed a memmove() instead of memcpy() on that method. Thanks for reporting!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/837515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/837860", "body": "Glad to see it works. :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/837860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/838167", "body": "Hey! You are right -- the reason because the first lookup is so slow is because we are preprocessing the whole revision walk to make it _very_ fast on the following calls... IN hindsight, this is probably not a great idea. I'll look into making the revision process lazier.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/838167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/838792", "body": "This is a major change that has been on the works for a while -- I'll keep ya updated.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/838792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/847613", "body": "Hey, can you try the development branch to see if this is fixed?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/847613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/854187", "body": "Eww, are you sure this is not an issue in the C# bindings? I'm doing the same process in C for benchmarking the new revision walker code, and fetching the head in the official git repo takes microseconds and no RAM... Can you post the code?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/854187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/860095", "body": "Does this work in Windows (MSVC)?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/860095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/860352", "body": "This is indeed related to issue 74, and is being fixed on the development branch. Stupid mistake on my side, thanks for reporting!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/860352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/866609", "body": "Hey txdv, can you check the memory consumption with the new revwalker under the development branch? I think it should be much more reasonable now. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/866609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/866614", "body": "Hey, check the new development branch, this issue has been fixed. Cheers!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/866614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/866617", "body": "We are working on this. Expect a fix soon.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/866617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/866621", "body": "Hm. This patch adds the -fPIC flag even when compiling under MSVC, and breaks compilation. I've committed a modified version that disables PIC in non-Linux systems. Thanks for the suggestion!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/866621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/866623", "body": "Yes, this is now available under the development branch. Check `git_reference_listall`. Cheers!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/866623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/866629", "body": "After some internal discussion, we believe that the way it's now is less verbose and not ambiguous at all, so we're keeping it. Thanks for reporting though!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/866629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/866637", "body": "As far as I am concerned, the API is now stable without any methods that return pointers instead of error codes. Closing now!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/866637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/873701", "body": "Hey, thanks for reporting this, totally overlooked. The proper fix is in fact skipping any commented header lines at the beginning of the file. I've fixed this in the development branch. Cheers!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/873701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/873723", "body": "Indeed! Thanks for the patch, had to manually apply because the pull request went a little bit nuts.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/873723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/873886", "body": "Hey, the development branch now has a built-in version of CMake that should probably fix your issues. :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/873886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/874041", "body": "What kind of delay? Note that there must be an initial delay when revwalking any repository if you are using a Topological or Inverted sort, because you need to pre-process the walk before starting the output (you can find the same behavior in git.git if you call `git log` with topological sorting). If you run the revision walk without sorting, or with time sorting (which is the default mode for generating a commit log like `git log` does), it should have no delay whatsoever.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/874041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/874057", "body": "Yes, yes, I know you are working on libgit2sharp -- just making sure that you guys are not getting any additional delay from libgit2 unrelated to the .NET VM, because that would be a bug. :)\n\nThanks for reporting! Keep bugging me if you think anything else is slower than it should.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/874057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/896123", "body": "Double checking: is `time_t` defined as `int` or `unsigned int`? If it's signed, we need to make it signed in our API too.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/896123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/896124", "body": "Hey! Check the development branch to try this out!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/896124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/896140", "body": "Hey, that's a good question...\n\nThis kind of 'blame' operation is kind of high level to be supported by libgit2. You can easily implement this yourself with the current API just by revision walking from the HEAD on a repo and checking each commit's tree for which objects it modifies.\n\nAs far as I know, there's no faster way to do this. It's a very simple operation, but not quite \"optimal\". I'll leave this open because we may want to implement this internally at some point.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/896140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/896171", "body": "BUT THAT MAKES NO SENSE.\n\nTHEY ARE PUSHING FORWARD THE TIME OF DOOM. 2038 IS ALMOST HERE AND THEY ARE USING SINGNED INTS?? WHAT'S WRONG WITH THEM, EMERIC???\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/896171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/896181", "body": "Hm. I've just doubled checked, time_t is indeed int in most platforms, because they handle negative time since the epoch. Let's stick to signed then, even though in our case makes very little sense.\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/896181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/896283", "body": "Actually, Git will only work until 2038, because all internal time fields in the indexes are stored as 32 bits... :p\n\nAnyway, the best we can do is to be as year-2038-friendly as possible, so this patch is a nice thing. Cheers!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/896283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/904233", "body": "Yo, thanks for spotting this. The fix for commit->parents is kind of broken, it could segfault when resetting the walker and pushing new commits. I've pushed my own version for that patch, cheers!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/904233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/904279", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/904279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/905110", "body": "You're the man!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/905110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/905113", "body": "Merged!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/905113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/905211", "body": "There we are. Took a while, hm?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/905211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/905215", "body": "This should have been fixed in the dev branch thanks to the almighty Emeric Fermas. Please report if you still encounter any issues.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/905215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/907539", "body": "Neat addition, thanks.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/907539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/908475", "body": "Appreciated, I tend to brainfart when writing documentation. :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/908475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/914963", "body": "Heh, you'll never annoy me as long as you keep making pull requests. :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/914963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/914966", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/914966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/914970", "body": "Yes, I've been wanting to do this for a while. Cheers!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/914970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/931933", "body": "Soo... the final decision is to merge. There we are, thanks for the nice addition.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/931933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/931945", "body": "I've merged this already -- feel free to send a pull request with some more tests, Emeric.\n\nAlso, note that I committed 95cde17ca40de7ad7f245c9302f26c5d59f5d873 to enforce some of the coding conventions. Awesome addition anyway. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/931945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/931983", "body": "Hey, before I can merge this, here are some points:\n- Check the development branch because after the latest merges this no longer applies clean.\n- I've added checking in git_ref_create() for existing OIDs, can you please drop 285df62? :)\n- The it would be nice of the 'force' function ended in `_f` instead of `_force`.\n- The dev branch already have the `GIT_EEXISTS`-related commits, you can drop those too.\n\nCheers guys, thanks for the awesome job.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/931983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/931993", "body": "Nice, thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/931993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/937247", "body": "It seems like you are not actually linking your application with the library. Try adding the `-lgit2` flag to your compilation command in the commandline. :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/937247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/938458", "body": "Heuh... You can create a tag pointing to an unknown OID? How so? Why isn't the low level create_ref method not failing?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/938458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/948390", "body": "Hey onlyssh, thanks for taking the time of writing a patch for libgit2. Unfortunately, this functionality is already implemented as part of the `refs` module, so there's no point on merging this again (:/) -- don't worry, though, since the important thing is that you've spent some time getting familiarized with the library and you wrote some code while you are at it.\n\nThanks again for your time!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/948390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/948396", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/948396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/948397", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/948397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/948433", "body": "Thanks, nice addition. In the future, can you please try to stick more closely to our coding conventions (i.e. space after keywords, indentation guides, etc)? Cheers!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/948433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/948441", "body": "Hey, merged this. Once again, please pay attention to coding conventions -- specially regarding the comment blocks in the external API documentation. They should be intended with one space so Doxygen doesn't go bongos. Cheers!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/948441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/949662", "body": "This is quite neat; I like your approach of storing all data as strings and converting on query. There's a couple things I want to change before merging this (mainly thread-safety), I'll take care of this tomorrow myself. Cheers!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/949662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/953100", "body": "Yo! I've just merged this, what a neat addition. There were of course mistakes, both when it comes to style and to functionality. I've fixed them for you in 29e1789b34d9aa5e486ca12937899a43f2e2407b -- but the commit is great anyway. The main issues we had here is that the writer was not working properly (it was skipping entries on all the subtrees), and that the external API was mind-numbingly complex; I've fixed that with a wrapper.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/953100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/953205", "body": "<3\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/953205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/953208", "body": "<3\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/953208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/953211", "body": "Hey, we are not returning `GIT_ENOTIMPLEMENTED` -- the full functionality is coming soon. Cheers.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/953211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/953855", "body": "Hm. 5 is not free, we have t05-revwalk.c. You should probably go with\nt14-config.c. Thanks a lot for taking charge of the tests too, those\nare going to be very much welcome.\n\nCheers,\nVicent Marti\n\nOn Mon, Apr 4, 2011 at 4:39 PM, carlosmn\nreply@reply.github.com\nwrote:\n\n> This should be pretty much feature-complete as far as reading goes, assuming multivars are handled by a higher layer.\n> \n> @tanoku what number should I use for the tests? I'm going to use 5 locally for now (first one free) but I'll change it if you had other plans.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/libgit2/libgit2/pull/110#issuecomment-953845\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/953855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/959835", "body": "Hey, we have a convenience function for this in the ODB, check `git_odb_read_header()`. :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/959835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/974912", "body": "Yeah, we had two different methods, one with type-enforcement and another without... But you are right, it would be a good idea to enforce type safety always.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/974912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/974916", "body": "Nice, thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/974916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/974919", "body": "Nice spotting, thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/974919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/974926", "body": "Hm. Looking into the different SHA1, it shouldn't happen. I think it's because the ordering is different for the old and the new SHA1 OIDS, but I don't know which one is the proper one.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/974926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/974931", "body": "Yeah, because the actual Tag raw content must contain the type of the tagged object in one of the lines. It's a good idea to verify the type.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/974931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/974939", "body": "Nice! I've committed this and added a couple changes: I don't like the idea of `assert`ing that the return value of Redis is never an error, because it might very well fail and we need to handle that case gracefully.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/974939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/978336", "body": "Hey, thanks for spotting this, but the fix is not valid: the POSIX standard doesn't require `errno` to be set when `strtol` fails. I've fixed this by adding a custom `strol` implementation that does proper error checking. Cheers!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/978336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/978339", "body": "Cheers!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/978339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/978344", "body": "Nice. I think we're still missing a couple of `malloc` checks on recent code, because I've been brainfarting quite a bit lately. If you spot them and fix them, that'd be awesome.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/978344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/978357", "body": "This is great. Can you come up with some way to actually unit test this?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/978357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/980745", "body": "Yo, fixed the issue with the different trees. It turns out we were using a higher compression level than we used to, so the compressed object was different. I've rolled back to `Z_BEST_SPEED`. Cheerios!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/980745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/197942", "body": "Indeed, indeed. I don't know what was going on Shawn's head. :p\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/197942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/301966", "body": "Yes, we are now using a custom commit structure internally (not a normal git_commit) with very tight packing and only the minimal required fields for revision walking. It's the price to pay for a 20x increase in walking speed. You can get the OID of a commit just by calling `git_object_id(commit);`.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/301966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302002", "body": "Yeah, in fact, in most scenarios for revision walking, you have an OID and not a commit object: see `git_reference_listall`, `git_reference_resolve` and `git_reference_oid`, which would be used to find the HEADs of all the branches in your repository. \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302005", "body": "Ew, sometimes I forget that there are bindings for languages not written in C. :/\n\nI'll fix this in the dev branch, thanks.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302006", "body": "It is indeed, I forgot to save on Vim. :p\n\nFixing in dev-branch, I may release 10.1 to fix these minor issues.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303176", "body": "This issue is now fixed in the dev branch. I don't know what do you mean by GIT_INTERN though...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/304631", "body": "Damn right. Fixed in the development branch!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/304631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/309509", "body": "Hey, fixed in dev branch.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/309509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/309774", "body": "No, certainly not in C. It's not a real API, but an ugly compiler workaround that lets you push an unspecified amount of objects to the stack. You still need to know how many objects are there, though.\n\nSee http://en.wikipedia.org/wiki/Stdarg.h\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/309774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/312396", "body": "Hey!\n\nThe creation functions return an OID because they do not create an in-memory object: they write directly to the ODB through a one-way stream. If you need the actual in-memory object, just look it up with `git_object_lookup`.\n\n`git_repository_close` has never existed. The name of the method is `git_repository_free`; it's called `free` instead of `close` because it does an effective free of the repository's memory when called, unlike a `git_object_close`, which may or not free the object depending on its reference count.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/312396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/312748", "body": "Absolutely, fixed in dev branch.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/312748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/321267", "body": "As I explained to Tim in Campfire, an iterator interface is not\ntrivial at all to implement for reference listing, because we have to\n`dirent` through the reference folders, and this `dirent` is not easy\nto break up for iteration. On top of that, it would mean adding _yet_\nanother opaque type to the external API, which is not thaat cool.\n\nDoes somebody _totally_ need this for their bindings? If so please\nspeak up -- if I cannot find a work around, I'll go ahead and\nimplement this.\n\nOn Tue, Mar 29, 2011 at 5:43 PM, tclem\nreply@reply.github.com\nwrote:\n\n> +1 for an iterator interface.\n> \n> On Tue, Mar 29, 2011 at 12:06 AM, joshtriplett wrote:\n> \n> > Callbacks prove somewhat more annoying to handle in FFI-based bindings (not\n> > impossible by any means, but more annoying).\n> > \n> > Also, callbacks can make interfaces harder to make multithread-safe in the\n> > future, since you shouldn't call user code while holding internal locks or\n> > similar.\n> > \n> > Iterators also map naturally to native constructs in many different\n> > languages; some languages have a native concept of iterators, and for those\n> > that don't an iterator interface still seems easier to turn into a list than\n> > a callback interface.\n> > ## \n> > \n> > Reply to this email directly or view it on GitHub:\n> > \n> > https://github.com/libgit2/libgit2/commit/09e8de0f38ed8f28c02e5a3fa987cbb74e98a671#commitcomment-320475\n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/libgit2/libgit2/commit/09e8de0f38ed8f28c02e5a3fa987cbb74e98a671#commitcomment-320915\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/321267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/322920", "body": "This is the case --  the index writing methods are on the way.\nHowever, due to popular request, I'm also bringing back support for\nmodifying trees and writing them directly soon. So nothing will be\nlost. :)\n\nCheers,\nVicent Marti\n\nOn Wed, Mar 30, 2011 at 6:41 PM, burdges\nreply@reply.github.com\nwrote:\n\n> I presume trees may no longer be created or modified directly, but instead must be created using indexes, yes?\n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/libgit2/libgit2/commit/72a3fe42fb7208712bbe8f0981f4c6274c05e9c3#commitcomment-322784\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/322920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/377707", "body": "No reason whatsoever. ;)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/377707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/381410", "body": "Ouch, thanks for the heads up! Going to fix this now, cheers.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/381410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/381757", "body": "Yes indeed! Thanks for spotting this!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/381757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/381764", "body": "Fixed. Thanks again, I've never used hiredis before, so this is the kind of thing that I'd never had spotted on my own.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/381764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/412256", "body": "This has been already fixed by me.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/412256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/432629", "body": "Quite important indeed, I can't believe nobody hadn't requested it yet. ^^\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/432629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/438069", "body": "No, it creates a new instance of an `ondisk` config file (i.e. representation of a configuration file that follows the Core Git config syntax). It follows the same syntax as the ODB backends.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/438069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/438117", "body": "No, it is not. It's low level, but not internal nor expected to disappear or change anytime soon.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/438117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/463502", "body": "No, not hard at all. CMake can already build a library just like this one if you disable `BUILD_SHARED_LIBS` when configuring the project,\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/463502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/474990", "body": "Void pointers have different semantics in C++, and they do require explicit casting. I have the habit of porting this to C code too -- I know it's redundant, but I'm a big fan of explicit over implicit, and it would silence compiler warnings if you were building the library with a C++ compiler. Why would you do that? I dunno.\n\nEither way, it clearly does no harm in C... I do notice that in this specific instance, I'm dropping the `const` modifier when casting. This is not intended, I'll fix this asap.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/474990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/474997", "body": "This comes straight from the Git technical docs, so it's not up to us. I do not know if there are any workarounds for getting files over 4GB on the index, or to prevent the year 2038 overflow on dates. I've pinged @peff about it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/474997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/475070", "body": "If you feel so strongly about typecasts, feel free to open a PR to clean them up. I personally don't think they should be a priority, they are treated rather sanely all over the library.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/475070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/475711", "body": "Update: the index values are not relevant data, they are just a `fstat` cache for quick comparison when staging and so on. The limit for filesizes and times is arbitrary and currently set at 4 bytes. This of course doesn't limit the maximum limit of a file on the repository, since blobs do not have a maximum size limitation on length.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/475711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/529906", "body": "As discussed with Jeff King: https://github.com/libgit2/libgit2/pull/250\n\nSorry about not making it explicit in the commit message, I merged the two commits together.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/529906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/557604", "body": "`commit_parse_buffer`? This is tag creation, do you mean `tag_parse_buffer` instead?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/557604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/632840", "body": "i lol'd\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/632840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/799394", "body": "That's true. Get a proper fix going, then. ^^\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/799394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1003696", "body": "Did you read my comment, @arrbee? I screwed up and posted it on the PR, not here.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1003696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1037790", "body": "This is wrong. Negative values on the filter mean the filter should not be applied. If you look at `filter.c`, you'll see that we check there for OOM conditions.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1037790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1037809", "body": "This is much more readable! I like it.\n\nDid the old code have any bugs, though?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1037809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1037821", "body": "@tclem just answered this. ;d\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1037821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1303069", "body": "This will break the error handling in many of the libgit2 wrappers. The fix should be rather straightforward, though, and the results are worth it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1303069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1464052", "body": "Actually, can you just drop the function call alltogther? We'll export the message prettify option.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1464052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2089162", "body": "![](http://i0.kym-cdn.com/photos/images/newsfeed/000/170/383/1315102673001.jpg)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2089162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2259668", "body": "https://github.com/libgit2/libgit2/commit/43efaabd40d8f9773a2fccb8acea704332446008\n\nDamn, you've got an eye. <3\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2259668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2378208", "body": "What the fuck. We ported this from a BSD...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2378208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3123598", "body": "Duh. Right on.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3123598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/4516453", "body": "Now you don't need the extra check here. :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/4516453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30286", "body": "Just return `GIT_ENOMEM` here, malloc already sets the error message.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30383", "body": "Yeah absolutely, I wrote this when we had the \"kill on out of memory\" malloc wrappers, so it doesn't check for ENOMEM or return error codes.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/38345", "body": "Question: are you sure we have to return `buffer_end` and not the actual end pointer for this single entry?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/38345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40004", "body": "That comparison. :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40005", "body": "Don't rethrow this. Do a new `GIT_EEXISTS` with a good error message.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40507", "body": "Hey, I'm afraid this won't cut it in MSVC. We need to be C89-compilant there. Can you move all the declarations to the top? Cheers!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/50477", "body": "Is this comment up to date? AFAIK we're implementing fnmatch from scratch now?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/50477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67030", "body": "This is terrible. We cannot duplicate and free a whole buffer just to prevent a cast. If you are concerned about this cast, you'll have to update the entire hashing code so that the hashed data is constant -- that would be a nice thing to have. Without that, this is a no-go.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67031", "body": "Internal methods should not have the `git` prefix.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67032", "body": "Doesn't this leak memory?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67033", "body": "Same as the `index` issue. There's no way we can double the overhead of deflating writes by copying _every single byte_ back and forth on memory. Impossible -- and since the ZLib code cannot be rewritten to support const writes either, your best bet is to change the signature of the function so `source` is not constant, and work from there.\n\nThis is one of the hottest paths in the library atm (all object writes go through this loop), so act accordingly.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67037", "body": "``` c\n\nint git_index_add(git_index *index, const char *path, int stage)\n{\n    int error;\n    git_index_entry entry;\n\n    if ((error = index_init_entry(&entry, index, path, stage)) < GIT_SUCCESS)\n        return git__rethrow(error, \"Failed to add to index\");\n\n    return index_insert(index, &entry, 1);\n}\n```\n\nEntries are initialized and then inserted; there's a strdup() on each of the methods, so the one in the `initialize` method will leak. Cheers!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67027", "body": "This is broken, bro. It needs to be `ELSEIF` instead of `ELSE`.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67028", "body": "booorken\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67042", "body": "This is a bug in another library, not ours. ZLib does not touch the data pointed by `next_in` (it only touches the pointer itself, to move it forward), but even with that the signature of the pointer is not constant.\n\nThere is nothing we can do about this -- ZLib is our dependency, so the only possible fix is to change the signature of `write_normal` and `write_deflate` so that the `source` arg is not constant.\n\nThis should be a good enough fix, since `source` is always `file->buffer` which is already not constant, and will be immediately discarded (written over) after `write_deflate` is called, so it doesn't really matter if ZLib goes crazy someday and starts overwriting our buffer.\n\nCheers.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67076", "body": "Ok, here's the plan: we'll drop the `const` from the signatures _internally_ (i.e. on `write_normal` and `write_deflate`). This will leave us with a clean `const` stack except for `filebuf.c:341`, which still uses `const void *buff`. In order to keep `buff` constant, what we'll do is splitting the \"too large write\" into smaller chunks (e.g. copy into file->buffer, flush, and repeat). That way we can pass `file->buffer` to the `write_deflate` method, and we don't have to allocate extra memory.\n\nHow does that sound, @kiryl? Do you follow me, need a code sample?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67079", "body": "Anyway, here's how the method should look:\n\n``` c\nint git_filebuf_write(git_filebuf *file, const void *buff, size_t len)\n{\n    int error;\n    const unsigned char *buf = buff;\n\n    for (;;) {\n        size_t space_left = file->buf_size - file->buf_pos;\n\n        /* cache if it's small */\n        if (space_left > len) {\n            add_to_cache(file, buf, len);\n            return GIT_SUCCESS;\n        }\n\n        add_to_cache(file, buf, space_left);\n\n        if ((error = flush_buffer(file)) < GIT_SUCCESS)\n            return git__rethrow(error, \"Failed to write to buffer\");\n\n        len -= space_left;\n        buf += space_left;\n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/78826", "body": "Is this an absolute path or...?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/78826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/78827", "body": "This strikes me as a total overkill, in a piece of code which is already running slow enough. The way I see it, we can run this with:\n\n```\nGIT_EXTERN(int) git_indexer_run(git_indexer *idx, git_indexer_stats *stat_storage);\n```\n\nand just have libgit2 continuously update `stat_storage->processed` while it runs. The user can then poll the value with the desired frequency from the main thread of the application.\n\nThose few thousand extra calls we have atm serve no real purpose. \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/78827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/78834", "body": "No me gusta. The C standard doesn't specify if these kind of shifts are going to carry the sign bit (since they are implemented using the `ror` instruction of each platform -- which vastly differs), so there's a pretty high chance that `0xFFFFFFFF >> 1` is going to be `0xFFFFFFFF` again, because the sign bit would get carried over.\n\n```\n#define UINT31_MAX (0x7FFFFFFF)\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/78834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/78836", "body": "Something more reasonable, please. `git_indexer_hash`.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/78836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/78841", "body": "I accidentally a verb when writing this error message. Can you fix it on the PR? ;)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/78841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/78842", "body": "`((elem) = (v)->contents[(iter)], 1)` == :heart:\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/78842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/79070", "body": "If you don't run libgit2 on its own worker thread, then you should expect this _extremely intensive_ operation to block until it's done. If you have a GUI, then you should be running libgit2 on it's own thread anyway.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/79070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/79125", "body": "No, as stated there are many platforms where there's no distinction between signed and unsigned shifts, and hence the sign always propagates even when casted to unsigned. From wikipedia:\n\n> C/C++/Go (signed types only): The >> operator in C and C++ is not necessarily an arithmetic shift for signed integers. The C99 standard specifies that the resulting value is implementation-defined for a right shift in which the left operand is a signed integer that is negative. However, most implementations use sign extension, thereby making the >> operator an arithmetic shift. For instance, the GCC is such an implementation.\n\nHairy topic. Let's the stick to the const number.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/79125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/79134", "body": "> How do you feel about it being available only after writing the pack file?\n\nThat's the reasonable thing to do.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/79134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/83273", "body": "No, it shouldn't fail at all. Can you post the exact error message? It is not necessary to create the path before opening a filebuf.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/83273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/83274", "body": "Carlos is right, this is bad style. In all the other test cases using `strcmp`, we strictly compare to zero.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/83274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/95370", "body": "This concerns me. What's the rationale behind hiding these specific netops and making public other ones such as `ls`?\n\nAlso, do we really need a wrapper for every single transport callback? They are all totally straightforward:\n\n``` c\nint git_transport_negotiate_fetch(struct git_transport *transport, git_repository *repo, git_headarray *list)\n{\n    return transport->negotiate_fetch(transport, repo, list);\n}\n```\n\nWhy not just call `transport->negotiate_fetch`?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/95370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/95371", "body": "The way we see it, we either hide everything, or show _everything_, including `struct transport` to allow people to build custom transports from outside the library, like with the ODB custom backends.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/95371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/103030", "body": "This is the only one that bothers me. If an old compilers fails to optimize a static `strlen`, that's ok, the code will run a bit slower... But if an old compiler fails to optimize this one, this will just not compile. We need to change this to a numeric constant.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/103030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/103103", "body": "> @carlosmn, +1 reason to drop MSVC support ;)\n> MinGW is enough.\n\nHahahaha.\n\nAnyway, we cannot assume that variable-length arrays are supported. Can we please switch this to a constant? Cheers!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/103103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/103414", "body": "We have no grand compatibility goals for the long run. We never go for less than C89, and we have no interest on supporting ancient or aging compilers.\n\nThe baseline for compatibility is on GCC 3.4 and MSVC 7.0 -- so as you can see, we are hovering between C89 and 99, and trying to use the available C99 features which could make our codebase cleaner. The website does need an update regarding C99 -- I'd really wish we could support it, but Microsoft won't get its shit together so it's out of the question.\n\nEven if MSVC2011 ships with better C support (unlikely) we still need to maintain support for XP, and MSVC2011 won't run on XP, so it's out of the question.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/103414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/129236", "body": "Double comp here, careful.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/129236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/129237", "body": "Also, this initializer has always been giving us issues in MSVC. Use an explicit memset.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/129237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/129966", "body": "This worries me. We could certainly use a more efficient way to consume data from a buffer, don't you think?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/129966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/133895", "body": "Wow wow wow, broseph what's up with this global state? Can we encapsulate this at all?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/133895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/139346", "body": "We have a new license header, brah.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/139346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/139347", "body": "Don't leave comments here -- just drop the line if it's not needed.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/139347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/150890", "body": "this is missing a check\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/150890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/160484", "body": "Sup with this? spec is not used anywhere else...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/160484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/160490", "body": "Oh I see... So, shouldn't we check that `spec` actually exists? You removed the check.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/160490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/160524", "body": "Aw, I follow you now. It'd be rad if you could comment this. <3\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/160524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/160487", "body": "Move inside the method.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/160487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/160494", "body": "This is not consistent. See that the other prefix is stored as a `const char*`.\n\nI'd avise either moving each prefix inside of their method it's used (as static const char), or move all of them to the top as defines.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/160494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/160495", "body": "suff needs to be const, possibly static\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/160495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/165524", "body": "Ew, sorry to be that nitpicky, but globals need some kind of identification -- either a common prefix, or a name in uppercase. Try `pkt_done_str` or `PKT_DONE_STR`.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/165524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/170001", "body": "This field is indeed zeroe'd at `object.c:67`.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/170001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/161339", "body": "Internal methods don't have the `git_` prefix. Try `static int oid_from_path`. :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/161339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/161340", "body": "This is waaay to long. Can you come up with a better name for this?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/161340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/165530", "body": "This makes me think -- maybe this should be a libgit2 function? `git_oid_scmp`, compare OID to hex string.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/165530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/167761", "body": "Why do you need a `hexval` method? That strikes me as very low low level to export...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/167761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/243870", "body": "No me gusta. This breaks the documentation contract: specify on the header that `name` cannot be null, and `assert` it here. We don't return errors on missing parameters.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/243870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/252002", "body": "Hm. I'm not quite sure about how that cast fares in 64bit systems where `size_t` is 8 bytes. `(newsize + 7) & ~7)` should to the same and ensure that the MSB is propagated.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/252002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/252003", "body": "This throw is redundant because `git__malloc` already sets the error message.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/252003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/253741", "body": "I don't like this check. This should be an `assert`.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/253741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/253743", "body": "Once again, the `if (buf)` check should be an assert, and `if (buf->ptr)` is redundant.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/253743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/253746", "body": "Nice! But could we also get a special case \"join\" function that takes only 2 strings and a separator? That seems to be the most common case by far.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/253746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/255351", "body": "I've just noticed all these `int`s. Our static analyzer throws warnings against using non-`size_t` for array offsets. It'd be great if we could switch these... Already enough warnings as it is. ^^\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/255351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/279677", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/279677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/310049", "body": "Why? I'm not fond of adding defines for the sake of it, and in this case `file://` cannot be mixed up with anything else. I'd suggest using the value explicitly where it's needed.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/310049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/312366", "body": "Thank you em, this is indeed the right behavior. Merging now.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/312366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/317181", "body": "There's already code in `oid.c` that does exactly this. It'd be nice if we didn't duplicate it. Possibly move the code from `oid.c` to `util.c`\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/317181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/319765", "body": "Why did you remove this? Skipping a whole subtree is a very common operation when doing traversals.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/319765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/309806", "body": "Nein! We always try to avoid hardcoding this stuff, because the default Git for Windows install has brain damaged defaults. Likewise for the Unix `/etc/` path: also dumb to have on Mac OS X. We need a way to let the user specify the path to the global attributes file, in the same way we do for Config paths.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/309806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/309826", "body": "This is an interesting method to export with a more public name: I bet a lot of GUIs will want to load default attributes from memory.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/309826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/309836", "body": "I assume this has been mostly ported from Core Git. Not gonna read it yo! ;d\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/309836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/309838", "body": "Fair addition. I should probably revisit hash tables in the future and roll with something less complex than cuckoo hashing. I don't even know if we're getting performance benefits from this.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/309838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/319747", "body": "Let's hope this export doesn't give us issues in Windows DLLs.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/319747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/331136", "body": "I'm wary about this. The rounding strikes me as arbitrary, why did you choose this exact value?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/331136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/345456", "body": "Now this is a scary looking piece of macro. ;d\n\nI guess we can roll with it, if you really think that an extra callback would clutter stuff too much. The tests are written, so hopefully we won't have to touch this again. Can you document what the `path` and `iterator` arguments do? It's not clear at all.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/345456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/357534", "body": "FWIW, in C89 you don't need to dereference the function pointer. `loader(repo, filename, file)` makes this less cluttered.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/357534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/357536", "body": "Can you add a small comment? Specially regarding the return value of this. ;d\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/357536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/452488", "body": "Nein! We cannot return an allocated `char *` and expect the user to free it. This breaks a lot of bindings because we cannot make sure that the `free` available to the users works on the same heap that we used to allocate the string.\n\nWe should come up with another way to return the note (maybe its own type?) and export an API call that frees it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/452488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/455957", "body": "No wonder. Brah, the namespace is `git_reference`. ;d\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/455957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/473936", "body": "Why are we allocating on the heap these vectors? Looks like a way to screw up cleanup. We either keep them always on the stack or move them to the heap...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/473936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/473937", "body": "I don't think `vector_pop` qualifies for a return value. Popping from an empty vector should be a programming error (and hence `assert`ed.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/473937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/473940", "body": "We tend to stick the return-by-reference argument first, by convention.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/473940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/473976", "body": "Style: we try not to prefix static functions with the namespace.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/473976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/474028", "body": "This cast worries me. There's an explicit type in C99,  `intptr_t` that should be used in these cases.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/474028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/474050", "body": "This is something I tried to tackle (and failed) on the error rewrite. Besides switching the return value to a `bool`, I don't quite like the idea of `_check_dir_contents` having an `append_if_exists` flag. I understand it's a common use case and this prevents us from building the string twice (once for the check, and a second time if we want to keep it), but it strikes me as unnatural... Can you help me come up with something different?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/474050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/474178", "body": "From what you're saying, I gather that `git_vector` is probably not the type you're looking for. For your use case in the iterator code, you need something that:\n1. Needs to be allocated in the heap, because it'll be contained inside a `git_vector`.\n2. Needs to store integers, and not pointers like `git_vector` does.\n\nThis screams for a rewrite. Possibly store a linked list of integers inside the vector?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/474178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/505392", "body": "These are the same as Ruby's. Awesome!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/505392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/505396", "body": "Yes, the initial plan was to have all `free` calls as `git__free()` in case we ever needed to plug in a custom allocator or do internal leak debugging. Let's try to keep it consistent.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/505396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/505400", "body": "Sounds like the next best thing until we get method overloading in C. \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/505400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/505404", "body": "Yes, all the fancy C++ unit test frameworks use templates to get very nice error reporting. I don't think there's a way to accomplish the same in C without a different call for each type.\n\nRegardless, this looks like the kind of thing that should go upstream in Clar. Can you open a pull request?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/505404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/508556", "body": "I AM 12 AND WHAT IS COPYRIGHT\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/508556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/526464", "body": "`ernno > 0`? The standard doesn't define errno values to be strictly positive. Better make this `!= 0`.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/526464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/526468", "body": "Programming error. This should be asserted.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/526468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/551658", "body": "This makes no sense to me whatsoever.\n\n``` c\n#define GIT_MMAP_VALIDATE(out, len, prot, flags) { assert(out != NULL && len > 0 && (prot & GIT_PROT_WRITE || prot & GIT_PROT_READ) && (flags & GIT_MAP_FIXED) == 0); }\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/551658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/552649", "body": "Damn, that's a totally valid point. I didn't think about `vsnprintf` setting errno. Please revert it to the old way (and document accordingly).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/552649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/586592", "body": "I'm not too fond of this. The index is a binary format; in the case of corruption, it doesn't make much sense to report the details on \"_more or less the part of the binary protocol that got corrupted_\". It's not like it can be recovered by the user at all.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/586592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/586595", "body": "Feels good man.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/586595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/601316", "body": "Haha, this is indeed stuff of nightmares, but I can't come up with a cleaner way to handle this repetition.\n\nRegardless, I think that all the code block that get passed to the macro should be in brackets, otherwise the code gets ambiguous and hard to read.\n\n``` c\nGIT_DIFF_COITERATE(\n    onto, from, o, f,\n    { delta = diff_delta__dup(o); },\n    { delta = diff_delta__dup(f); },\n    { delta = diff_delta__merge_like_cgit(o, f); },\n    {\n        if ((error = !delta ? -1 : git_vector_insert(&onto_new, delta)) < 0)\n            break;\n    }\n);\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/601316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/629696", "body": "This is a very obvious example. Here's how I'd write it:\n\n``` c\nstatic void ensure_refname_normalized(int is_oid_ref, const char *input_refname, const char *expected_refname)\n{\n    char buffer_out[GIT_REFNAME_MAX];\n\n    if (is_oid_ref)\n        cl_git_pass(git_reference__normalize_name_oid(buffer_out, sizeof(buffer_out), input_refname));\n    else\n        cl_git_pass(git_reference__normalize_name(buffer_out, sizeof(buffer_out), input_refname));\n\n    cl_assert(strcmp(buffer_out, expected_refname) == 0);\n}\n\nstatic void ensure_refname_invalid(int is_oid_ref, const char *input_refname)\n{\n    char buffer_out[GIT_REFNAME_MAX];\n\n    if (is_oid_ref)\n        cl_git_fail(git_reference__normalize_name_oid(buffer_out, sizeof(buffer_out), input_refname));\n    else\n        cl_git_fail(git_reference__normalize_name(buffer_out, sizeof(buffer_out), input_refname));\n}\n```\n\nThis way we can skip the `cl_git_fail` and `cl_git_pass` wrappers when calling the functions.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/629696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/629700", "body": "Likewise.\n\n``` c\n\nstatic void assert_signature(git_signature *expected, git_signature *actual)\n{\n    cl_assert(actual);\n    cl_assert(strcmp(expected->name, actual->name) == 0));\n    cl_assert(strcmp(expected->email, actual->email) == 0));\n    cl_assert(expected->when.offset == actual->when.offset);\n    cl_assert(expected->when.time == actual->when.time);\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/629700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/646322", "body": "How about using the `enum git_btype` as the type for the argument. That'll make sure that the passed branch type is always valid, and you can skip `ensure_branch_type`.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/646322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/646574", "body": "The user's common sense and good taste when it comes to C. ;)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/646574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/646582", "body": "Let's try not to carry error codes around after the error handling rewrite.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/646582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/646587", "body": "Specially here. Why store the error if you're overwritting the message?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/646587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/646598", "body": "`git_btype` reminds me of anything but \"branch type\". Try a longer name. ^^\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/646598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/646613", "body": ":metal: Loving these tests\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/646613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/526578", "body": "We're trying to move to explicit error labels, instead of passing an error value.\n\n``` c\n    giterr_set(GITERR_NET, \"Failed to parse other-ref OID\");\n    goto on_error;\n```\n\n```\n        ...\n    }\n\n    return 0;\n\non_error:\n    git__free(pkt);\n    return -1;\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/526578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/526585", "body": "This doesn't make much sense. Note that this is dealing with data over the network: invalid values on that data make no sense, so treat them as such. \"Corrupted packet line\" or the likes. It's not like somebody forgot to write a space.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/526585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/542233", "body": "More details! This a recv, we must be able to fetch a more detailed error string.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/542233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/542237", "body": "Let's hide these kind of things. Users don't need to know what's `getaddrinfo`. `\"Failed to resolve address %s:%d\", host, port`.\n\nAlso, note that @arrbee changed the giterr API. If you set a `GITERR_OS`, the strerror will be appended automatically.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/542237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/542240", "body": "Can you doublecheck that `errno` is set on Win32? I don't think that's the case, there must be a different way to set the error message.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/542240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/622447", "body": "Bro, `giterr_set` already does printf construction. Why are you using a temp buffer?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/622447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/622459", "body": "We're trying to drop variables with return values. Use two paths; a normal that returns 0, and a `on_error` label that does the cleanup and returns -1.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/622459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/622472", "body": "Why is this error being set?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/622472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/622484", "body": "Once again: two paths. The normal one, and a `on_error` label that performs cleanup and returns -1.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/622484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/622490", "body": "This `goto done;` is the same as a `break`. The `done` label is probably not needed.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/622490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/622499", "body": "Why is this returning instead of jumping to cleanup?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/622499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/622514", "body": "Ehrm... what? You may want to change the body of the loop\n\n``` c\n    do {\n        ptr = buf->data;\n        /* Whilst we're searching for the pack */\n        while (1) {\n            if (buf->offset == 0) {\n                break;\n            }\n\n            error = git_pkt_parse_line(&pkt, ptr, &line_end, buf->offset);\n            if (error == GIT_ESHORTBUFFER)\n                break;\n\n            if (error < GIT_SUCCESS)\n                return error;\n\n            if (pkt->type == GIT_PKT_PACK) {\n                git__free(pkt);\n                return git_fetch__download_pack(out, buf->data, buf->offset, t->socket, repo);\n            }\n\n            /* For now we don't care about anything */\n            git__free(pkt);\n            gitno_consume(buf, line_end);\n        }\n\n        read_bytes = gitno_recv(buf);\n    } while (read_bytes > 0);\n\n    return read_bytes;\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/622514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/622542", "body": "This error code is going away. If you need to store errors inside the transport, you may want to change it to `t->failed = true`.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/622542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/622552", "body": "![one more time](http://3.bp.blogspot.com/_lnVFiWAf6WQ/TTTfWN5jPtI/AAAAAAAAARw/DW992SFi-RQ/s1600/onemoretime.jpg)\n\nOneee moreeee timeeee.\n\nTwo paths, a goto for failure, and the default success path.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/622552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/622553", "body": "This wouldn't be needed with two paths.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/622553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/626404", "body": "Note that you're not setting the error code here. This should jump straight to an `on_error` label.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/626404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/626410", "body": "Can you move things around? All these loops nested in loops nested in loops with gotos are giving me a headache.\n\nRefactor until the `goto`s are gone, try adding conditionals on the loop header (instead of `while (1)`). You can flush the socket and return from inside the loop.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/626410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/626411", "body": ":sparkles:\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/626411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/627072", "body": "This patch showed up in the ML:\n\n```\n--- src/libgit2/src/netops.c\n+++ src/libgit2/src/netops.c\n@@ -116,11 +116,12 @@\n\n       /* Oops, we couldn't connect to any address */\n       error = git__throw(GIT_EOSERR, \"Failed to connect: %s\", strerror(errno));\n\n cleanup:\n-       freeaddrinfo(info);\n+       if(info)\n+         freeaddrinfo(info);\n       return error;\n }\n\n int gitno_send(GIT_SOCKET s, const char *msg, size_t len, int flags)\n {\n```\n\nCan you apply it in this PR, so we don't collide much? Cheers\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/627072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/627075", "body": "Hm. It seems like the patch won't be needed because you're only freeing the addrinfo before jumping to the cleanup... Keep an eye out, anyway.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/627075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/669960", "body": "Bro what the fuck\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/669960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/514883", "body": "Not good. This is not assured to merge with the previous bitfield. Plus, it makes no sense to define the field as `enum` when you're performing bitwise operations instead of storing pure enum values.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/514883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/515350", "body": "This is the exact kind of function that could some some detailed documentation. What does it do? ^^\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/515350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/684894", "body": ":fire:\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/684894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/684895", "body": ":fire:\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/684895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/770502", "body": "Is this the unused return value warning you were talking about? Because there's another `p_chdir` a couple lines before that hasn't been wrapped.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/770502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/772390", "body": "This doesn't match the signature. One pointer too many?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/772390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "schacon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/496875", "body": "They are not in progress yet, I just had that there as a placeholder and forgot to remove it.  I would love your help in getting them started.  I can also create a repo under the libgit2 org and give your project a place there if you want.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/496875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/573749", "body": "that isn't in the index information, it is only determined by comparing the index data to the data in the HEAD commit and the files in the working directory.  getting some status type calls is in the todo list, but it might take a bit of time.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/573749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/810416", "body": "some of the git core guys started this project with that name, it tries to be cgit compatible and some day WAY down the line perhaps it could be incorporated into the main git project in some way or a new porcelain built around it.  it's also pretty clear that git-core will never provide a shared library.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/810416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "dborowitz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/503490", "body": "Thanks. I've started some Python bindings, which I'll push in a few days or so.\n\nI've been looking forward to this since your GitTogether Skype video talk :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/503490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516184", "body": "For some definition of \"possible\", sure :)\n\nATM due to Google policy around open-source releasing I'm blocking on review from someone inside Google (who also happens to be Shawn Pearce).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/526234", "body": "That was quick! Much better, thanks.\n\nThere are still a few outstanding issues:\n-GIT_COMMIT_GETTER ignores the return code from git_commit__parse_full.\n-I haven't fully grokked the revwalk code, but I think git_revwalk_next should be able to distinguish between the various reasons a walk is finished (e.g. a parent was missing/corrupted vs. the actual end of a walk).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/526234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/526310", "body": "I've got approval to push my libgit2 bindings. I think the best solution is for it to live in the libgit2 namespace, which I can push to my fork of. My project name is pygit2 and, at Shawn's recommendation, it's licensed under the same GPL-with-exception license as libgit2. If you have a more creative name I wouldn't mind changing it, but I don't feel strongly about it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/526310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "ctimmerm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/521199", "body": "I overlooked I had created an extra compiler warning in commit.c, fixed in the second commit.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/521199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "hef": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563436", "body": "I am not sure about windows library conventions, but I had to do this:\n\ncopy zlib125dll.zip/dllx64/zlibwapi.lib to C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\lib\\amd64\n\ncopy zlib125.zip/zlib-1.2.5/zlib.h and zlib125.zip/zlib-1.2.5/zconf.h\nto C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\n\n`waf build-shared` didn't work, it gives this error:\n     Waf: Entering directory `C:\\Users\\hef\\projects\\libgit2\\build\\shared'\n     [ 1/23] cshlib: build\\shared\\src\\blob.c.0.o build\\shared\\src\\commit.c.0.o build\\shared\\src\\delta-apply.c.0.o build\\shared\\src\\errors.c.0.o build\\shared\\src\\file\n     lock.c.0.o build\\shared\\src\\fileops.c.0.o build\\shared\\src\\hash.c.0.o build\\shared\\src\\hashtable.c.0.o build\\shared\\src\\index.c.0.o build\\shared\\src\\odb.c.0.o build\\shared\\src\\oid.c.0.o build\\shared\\src\\person.c.0.o build\\shared\\src\\repository.c.0.o build\\shared\\src\\revwalk.c.0.o build\\shared\\src\\tag.c.0.o  build\\shared\n     \\src\\thread-utils.c.0.o build\\shared\\src\\tree.c.0.o build\\shared\\src\\util.c.0.o build\\shared\\src\\win32\\dir.c.0.o build\\shared\\src\\win32\\fileops.c.0.o build\\shared\\src\\win32\\map.c.0.o build\\shared\\src\\block-sha1\\sha1.c.0.o -> build\\shared\\git2.dll build\\shared\\git2.lib build\\shared\\git2.dll.manifest\n     Waf: Leaving directory`C:\\Users\\hef\\projects\\libgit2\\build\\shared'\n     Build failed\n      -> missing file: 'C:\\Users\\hef\\projects\\libgit2\\build\\shared\\git2.lib'\nThe error appears to be accurate, I get a git2.dll but not a git2.lib\n\n`waf build-static` appears to work fine though.\nI haven't tested the resulting library yet.\n\nAlso, it appears that waf built a 64bit lib by default, is there a way to tell it to make a 32bit lib?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563461", "body": "the build system doesn't use make,\ndoes running `waf build-shared` work for you?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565301", "body": "mingw32 notes:\nw32-pthreads does not seem to get linked to properly if it is built statically, but seemed fine dynamically.  That is, libgit2 linked against w32-pthreads(static), but my application did not.\nzlib and libgit2 seem to build and link fine.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565829", "body": "you need to add zlib.h (and zconf.h) from zlib-1.2.5 to your include path.\nI dumped them in C:\\Program Files (x86)\\Microsoft Visual Studio 10 .0\\VC\\INCLUDE.\n\nyou are also going to need zlibwapi.lib.  I put that in C:\\Program Files (x86)\\Microsoft Visual Studio 10 .0\\VC\\lib\nI believe you will need to keep the zlib.dll either in your %PATH% or in the same directory as your built executable for this to work.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/573841", "body": "Ah, I see. I misunderstood about what was stored in the index.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/573841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/579510", "body": "begin able to specify a qt subproject in a git submodule would be awesome.\n\naccording to http://doc.qt.nokia.com/4.7/qmake-variable-reference.html, you might be able to build a static lib with:\n\n```\n CONFIG += create_pri\n QMAKE_LFLAGS = staticlib\n```\n\nI did not test this.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/579510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "joefeser": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565849", "body": "I copied the dll per the read me file but never copied the .h files as you stated. I placed the zlib.h and zconf.h files in the include folder and a dll was created. Next to figure out if it is x86 or x64.\n\nYou may want to add the instructions for the two .h files to the readme.\n\nThanks for your help.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rkh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/575977", "body": "I love the idea. Would be awesome to use for undo history in Redcar, for instance.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/575977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "przemoc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576096", "body": "Other example, that maybe I shouldn't reveal yet. ;)\n\nFor a few years at least I have in my mind the idea of very useful application (as usual, implementation is not even started yet), that I even named already: SINAVE - sed inspired, nipped by awk visual editor. Name says pretty much (awk & sed users should predict how such tool would be useful), but from the beginning I thought that having git in the back is a must-have thing, because it would allow implementing the best undo/redo feature any editor ever had, because of possibility of having divergent branches all the time accessible from editor during work, for instance. You must already feel how awesome such tool could be.\n\nSorry for a bit off-topic.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/742207", "body": "Great!\n\nBut wait... I got 0 tests in SQLite Backend suite (`tests/t11-sqlite.c`)? Isn't it because `GIT2_SQLITE_BACKEND` is set only in `wscript` atm, or did I miss sth?\n\n(I must say one thing, even if it's irrelevant here: it's insane to use python-based tool to build C-based lib/app.)\n\nUsing SQLite `:memory` db is one of solutions I had in my mind, but I wouldn't close this feature request before being sure that it's working on build platforms libgit2 allegedly supports (at least not before fixing `CMakeLists.txt`).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/742207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/749501", "body": "I totally forgot about Win stuff and unintentionally broke SQLite support there. My apologies.\n\nUsing mentioned variables directly was not stupid, tanoku, just inadequate as I explained in the previous commit message. (Windows as always is problematic, that's why I usually avoid development there.) Actually I am not even aware what's the common practice to work with libraries on Windows in cmake. I believe you're right, so I further improved SQLite support for CMake users. See commit for details.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/749501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/749514", "body": "\"Broke\" is a bad word actually, because it could still work in Windows if user set also `SQLITE3_FOUND`. Whatever. Now it's definitely better.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/749514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/837657", "body": "It's a matter of convention. IMHO it's better the way it is now. Can (or even should) be written down somewhere (in CONVENTIONS?) to avoid such discussions.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/837657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "Vanuan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/588144", "body": "> What compiler does it use on that platform, can you choose between MSVC and GCC?\n\nThe default distribution compiled with MinGW. But since 4.4  Qt has full support for being built with Visual Studio. So you can build Qt using MSVC and then use MSVC to build Qt applications.\nLinking Qt libraries that was built using MinGW against MSVC libraries is strongly discouraged.\n\n> Also, it seems like this only builds a shared library. How can we go about a static one?\n\nJust change\n    TEMPLATE = lib\nto\n    TEMPLATE = app\n\nand add main.cpp to SOURCES. Then the library will be compiled into executable.\n\nOr maybe you mean  how to link Qt executable with Qt libraries?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/588144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "drahosp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/588379", "body": "Keep up the good work. Hope this is usable for someone without Python like me.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/588379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/589495", "body": "Thanks for pointing that out. I added an option to select the sha1 type.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/589495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/589519", "body": "I can look into that. Best approach would be to avoid calling external utilities as it is bound to cause issues on Windows but I think I can make a purely CMake based solution without too much effort.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/589519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/589769", "body": "Yes, the language CMake uses is rather limited but it proved to be reliable and stable especially when trying to deal with multiple OS and compiler environments. Tested this on OSX and Linux boxes. I still have to test MinGW and Visual Studio.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/589769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/592917", "body": "I got around to test the build on Windows. It now works with Cygwin, MinGW and VS2008. The backtrace functionality used in tests is not supported on Windows by gcc, this required minor modification of test_main.c. Building with VS2010 works too but requires a nightly build of CMake 2.9.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/592917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/593106", "body": "This should reflect the recent changes. If there is need for further modifications I'm willing to maintain the build.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/593106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/600055", "body": "You can either use CMakeGUI to generate the build and point ZLIB_LIBRARY and ZLIB_INCLUDE_DIR interactively. Or you can do this from the command line using cmake:\n\n```\n > cmake -G\"MinGW Makefiles\" -DZLIB_LIBRARY=C:\\path\\to\\zlib.dll -DZLIB_INCLUDE_DIR=C:\\path\\to\\zlib\\include\n```\n\nCMake allows you to override any of the variables used in the build. So you can toggle options, change install destinations and even internal compiler settings the same way.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/600055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/601457", "body": "I also prepared a slightly modified zlib CMake that I used to test the build on windows. See:  LuaDist/zlib@40756e1098833d5d31d3\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/601457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/602328", "body": "Thats understandable. I updated the test build so it defines the TEST_RESOURCES path accordingly. You can point it to any temporary resource directory, by default I set it to point into the source resources so CTest works on checked out source.\n\nI slightly modified the build instructions and merged in the recent changes from libgit2/master. I think it is good to go now.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/602328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/631175", "body": "Please modify this after merge.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/631175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jayschwa": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/589057", "body": "CMakeLists.txt says zlib and OpenSSL are required, but are they really? The README makes it sound like zlib is only needed for building with waf and that OpenSSL is optional.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/589057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "msorvig": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/596966", "body": "Hi, tried out a Windows build now but ran into some touble with zlib.\n\nI'll see if I can find a clean way to use the Qt-provided one.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/596966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "marvil07": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/630500", "body": "I do not know how to add a pull request to this issue, so closing in favour of https://github.com/libgit2/libgit2/pull/34\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/630500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/630502", "body": "This started on https://github.com/libgit2/libgit2/issues/closed#issue/33\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/630502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "chobie": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/637656", "body": "Hi tanoku. thanks for your reply.\n\n```\ngit init\necho \"Hello\" > README.md\necho \"WORLD\" > INSTALL\ngit add README.md INSTALL\ngit commit -m \"initial commit\"\n```\n\ni put my code on this directory. and just added show offset value feature.\n\n```\nprintf(\"offset: %d\\n\",offset);\n```\n\ncompile program\n\n```\ngcc -lgit2 -O0 -g -o git_index_test git_index_test.c\n```\n\ncheck git index file.\n\n```\ngit ls-files --stage\n100644 83cf24cdfb4891a36bee93421930dd220766299a 0       INSTALL\n100644 e965047ad7c57865823c7d992b1d046ea66edf78 0       README.md\n```\n\nthere is `README.md` entry on my repository.\ntry to execute my program `./git_index_test`\n\n```\noffset:1\npointer_address: 9\nSegmentation fault\n```\n\ni also try `gdb ./git_index_test`.\n\n`git_index_entry->path` is correct in `git_index_get()`.\nbut `git_index_entry->path` was wrong address in main scope.\n(`git_index_entry->path` was just `strdup()` string. so i wondered about that.)\n\nummmm. I couldn't find this solution because i don't have enough C skill.\n\n## \n\ni tried my code in some environment.\n\nOS: Result\nOS X(snow leopard): OK\nUbuntu 10.10(gcc-4.4, i686-linux-gnu): Segmentation Fault\nCentOS5.5(with remi repository, gcc-4.1.2 i386-redhat-linux): Segmentation Fault\n\n`rugged` work fine on my ubuntu desktop. \nprobably i missunderstod something in my code...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/637656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/639830", "body": "I'm sorry to post so many questions.\n\nfinally, i added `-D_FILE_OFFSET_BITS=64` option to compile my code. everything works great :)\n\nThank you so much for providing great library.\nthen i can enjoy New Year's holidays.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/639830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/641865", "body": "oh, i have not to force `_FILE_OFFSET_BITS` to compile my code right?\n\njust write down my code what reappear this probrem.\n\non 32bit machine\n\n```\ngit clone https://github.com/libgit2/libgit2.git\ncd libgit2\n./waf configure && ./waf build-shared\nsudo ./waf install-shared\n\nmkdir ../chobie_test && cd ../chobie_test\n\ngit init\necho \"Hello\" > README.md\necho \"WORLD\" > INSTALL\ngit add README.md INSTALL\ngit commit -m \"initial commit\"\n\n\ncat > git_index_test.c <<EOF\n#include <stdio.h>\n#include <git2.h>\n\nint main(int argc, char * args[])\n{\n    git_index_entry *entry;\n    git_index *index;\n    git_index_open_bare(&index,\".git/index\");\n\n    git_index_read(index);\n    git_index_entrycount(index);\n    int offset = git_index_find(index,\"README.md\");\n    if(offset == GIT_ENOTFOUND){\n      fprintf(stderr,\"README.md offset not found\\n\");\n      return 0;\n    }\n\n    entry = git_index_get(index,offset);\n\n    printf(\"pointer_address: %d\\n\", entry->path);\n    printf(\"path: %s\\n\",entry->path);\n    git_index_free(index);\n\n    return 0;\n}\nEOF\n\n# something wrong on 32bit machine\ngcc -o git_index_test -lgit2 git_index_test.c\n./git_index_test\n#pointer_address: 9\n#Segmentation fault\n\n# works good on 32bit machine\ngcc -o git_index_test -lgit2 -D_FILE_OFFSET_BITS=64 git_index_test.c\n./git_index_test\n#pointer_address: 141451832\n#path: README.md\n```\n\ni found `D_FILE_OFFSET_BITS` option where `rugged` generated Makefile on my machine.\n(because rugged work fine on my machine.)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/641865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/793387", "body": "i think more deeply in my bed.\nlightweight tag support makes no sense :(\n\nshould i check `git_repository_lookup(object, repo, git_reference_oid(ref), GIT_OBJ_TAG)` and\n`git_repository_lookup(object, repo, git_reference_oid(ref), GIT_OBJ_COMMIT)` when seeking tag, right?\n\nsorry, forgot these post.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/793387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/981504", "body": "i got it. thank you for your help!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/981504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/329093", "body": "sweet!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/329093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/387114", "body": "Hey, this is neat :)\n\n`git_config_foreach` (Actually `file_foreach`) function seems couldn't get config section name.\ni.e ) core, remote.origin, branch.development...\n(btw, i dunno what is the better format about representing git config level.)\n\nhow can I get that?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/387114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/387155", "body": "@carlosmn thank you for quick reply.\ni used libgit2@c9662061f25ea51f39018a278b98c9a9b4410e84.\n\nhere is my source code for checking config parsing feature.\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <git2.h>\n\nint moe(const char *key, void *data)\n{\n    fprintf(stderr,\"key:%s\\n\",key);\n    return 0;\n}\n\nint main()\n{\n    git_config *config;\n    char *out;\n\n    git_config_open_bare(&config,\"/Users/chobie/src/libgit2/.git/config\");\n    git_config_foreach(config,moe,NULL);\n\n    return 0;\n}\n```\n\ncompile and run.\n\n```\ngcc -lgit2 test.c -o test\n./test\n\nkey:repositoryformatversion\nkey:filemode\nkey:bare\nkey:logallrefupdates\nkey:ignorecase\nkey:fetch\nkey:url\nkey:remote\nkey:merge\n```\n\nwell, running gdb and set break point to config_file.c:279 (`cvar_name_normalize`)\n\n```\n(gdb) b config_file.c:279\nBreakpoint 1 at 0x20c49ba5e00ea2: file ../../src/config_file.c, line 279.\n(gdb) r\nStarting program: /Users/chobie/src/test \nReading symbols for shared libraries ++. done\n\nBreakpoint 1, file_foreach (backend=0x1001000c0, fn=0x100000e44 <moe>, data=0x0) at ../../src/config_file.c:279\n279                     ret = cvar_name_normalize(var->name, &normalized);\n(gdb) p (char *)var->section\n$1 = 0x100100300 \"core\"\n(gdb) p (char *)var->name   \n$2 = 0x1001002e0 \"repositoryformatversion\"\n```\n\nit seems only variable name (without section name)\ni'm not sure about C, so am i wrong something?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/387155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/633732", "body": "awesome :star:\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/633732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "agimenez": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/656392", "body": "Hi lestrrat,\n\nI've just cloned and compiled the library and I couldn't get the segfault. Could you please post a minimal test case and what version are you using?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/656392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/659890", "body": "Hi lestrat,\n\nLooking at the code (and the basic user guide on the website), you should'nt allocate yourself the structure. git_repository_open does it for you and returns the allocated structure (via argument, that's why you pass a ponter to a pointer to a repo structure).\n\nIn my computer (linux Debian unstable) it does not segfault, but the return value is -8. Perehaps the documentation (comments in code) should be more clear about that.\n\nAbout your second question, it's a common practice to \"mask\" internal structure as opaque objects, so the library user doesn't use internal information to do \"tricks\" that may change in the future implementations. Maybe that's why you get segfaults; you should not copy the implementation of any library \"published\" structure.\n\nHope that helps.\n\nRegards\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/659890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/660216", "body": "If you are using Linux, something like gcc -o binary_file -lgit2 test_repo.c should work.\n\nIf you get some kind of error related to \"can't find librarly libgit2\" or something like that, you need to run ldconfig on your system to register the new library.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/660216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "lestrrat": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/656581", "body": "This does the job for me\n\n```\n#include <stdlib.h>\n#include <stdint.h>\n#include <git2.h>\n\nint main(int argc, char **argv) {\n    git_repository*repo;\n    repo = (git_repository *) malloc( sizeof(git_repository) );\n    git_repository_open( &repo, \"/path/to/a-non-existent-dir\" );\n    return 0;\n}\n```\n\nRunning this, I get\n\n```\nAssertion failed: (db), function git_odb_close, file ../../src/odb.c, line 213.\nAbort trap\n```\n\nIncidentally, is there a particular reason why the definition for structures like git_repository are not in the installed .h files? I'm curently cutn'pasting from the source to my .h files when I need to compile these\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/656581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/659921", "body": "wrt to the allocation problem, noted. I couldn't figure out that git_repository_open allocates the structure, but no biggie, and thanks for the clarification.\n\nwrt to the structures being hidden, I guess my C-fu isn't that strong. I just can't seem to compile my binding w/o the definitions. I guess I'm doing something wrong.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/659921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Neopallium": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/662339", "body": "See pull request in issue 41.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/662339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/662466", "body": "I create a new function git_repository_open_no_backend() which will work for this feature, see commit:\nhttps://github.com/Neopallium/libgit2/commit/0959f9ec17fe4539b22a22bbed4ecf1e02e182a7\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/662466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/673875", "body": "Cool, that should work.\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/673875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "scorpion007": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/663762", "body": "The problem is that index.c compiles by including the internal src/common.h which defines the correct off_t. But user programs don't have access to that header, so they assume off_t is 32 bits.\n\nThis affects windows versions too.\n\nUser applications need access to the headers defining the right sizes to be compatible (the currently private mingw-compat and msvc-compat.h files)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/663762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/665504", "body": "By standard, you mean the git ABI?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/665504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/667872", "body": "But the code does indeed call stat() in the case of index_add(), which is a 64 bit stat on Windows, so we do get a 64bit time_t back, which is truncated to unsigned 32 bit giving us til 2106 (should be sufficient) on Windows, but only 2038 on Linux (if it uses 32 bit stat()).\n\nOf course if the file was already stat'd on Linux and we're merely loading it from disk, then yes, we'll be limited by whatever did the stat when the snapshot was taken.\n\nSomething else worth considering is whether 4GB blob size limits are sufficient, or whether 64bit sizes are necessary. Though of course that will affect the ABI of the objects.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/667872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/667904", "body": "Sure, I understand. Is the time stored as an unsigned 32 bit type or signed in git's binary interface? That makes a difference from 2038 and 2106 wrap-around on platforms that snapshot in 64 bit time.\n\nI ask because the stuct git_index_entry uses unsigned int's to store the time, which I assume was chosen to match the internal storage of the actual git index format?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/667904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/667938", "body": "Thanks for the link.\n\nIt states that \"this is stat(2) data\" which implies the type should match struct stat -- which means it specifies signed 32 bit ints, as suspected.\n\nThis is different from what we presently store in memory in stuct git_index_entry, which is fine I suppose. The wrap around will occur either way at 2038.\n\nChanging the in-memory storage sounds like a good idea -- something I could work on. Thanks for the suggestion.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/667938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/668415", "body": "Ah, I forgot to remove the truncation added in the previous change -- don't merge this yet. Will update.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/668415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/668443", "body": "Ok done.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/668443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/670798", "body": "Thanks! Well it said C99 compatibility somewhere, and `//` is standard C99 and supported by both MSVC and gcc, so... :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/670798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5618", "body": "Won't this get compiled out in release builds and break the program's behavior?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5637", "body": "Assert is still ok, just perhaps needs to be done on a separate line. I.e. save the return value of snprintf and assert it on the next line. No sweat :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jdavid": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/739741", "body": "The function git_repository_index returns NULL while git_index_open_inrepo returns an error code (GIT_EBAREINDEX or GIT_ENOMEM). The error code is lost.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/739741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/785147", "body": "The threaded code is not stable, it segfaults here and leaves the lock file behind (index.lock).\n\nThe latest non-threaded version is much faster than before, but not yet as fast as git.git (0.06s for git.git and 0.1s for libgit2). And there is a little bug, if the index file is locked git_index_write fails with GIT_EOSERR, while before it failed with GIT_EFLOCKFAIL.\n\nThis is likely to be fast enough for me, though it would be nice for libgit2 to be as fast as git.git; by the way my test case has 10999 entries, later I will test with big index files (266321 entries) and report here.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/785147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/785221", "body": "works now\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/785221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/794435", "body": "This code is not only faster than before, it is also (slightly) faster than git.git (a few milliseconds). Congratulations!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/794435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/797335", "body": "Just for the record, I tested with a big index file (236.720 entries) and libgit2 is sensibly faster than git.git, from 0.36s to 0.27s\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/797335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/868435", "body": "yes it works, thanks\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/868435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/879872", "body": "You say libgit2 allows committing an index, how do you do that? After this message:\n\nhttp://librelist.com/browser//libgit2/2011/2/19/initing-a-repository-adding-files-to-the-index-and-committing/#d94ce8df18ff0202ce904180286a4a85\n\nThat is not yet possible, because the 'git_index_write_tree' function is not yet implemented.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/879872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "bbigras": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/805776", "body": "Forgot to say I'm using libgit2 fc658755bf980170cf5a497870155a9fc97151cb\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/805776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/806704", "body": "The frist time I was using zlib compiled DLL, version 1.2.5 from http://zlib.net/zlib125-dll.zip\n\nThe faq says that ZLIB1.DLL functions use the \"C\" (CDECL) calling convention.\n\nI build http://zlib.net/zlib-1.2.5.tar.gz using 'make -fwin32/makefile.gcc'.\n\nNow I have :\nC:\\Sources\\libgit2\\build>\"c:\\Program Files\\CMake 2.8\\bin\\cmake.exe\" --build .  \nScanning dependencies of target git2  \n[  1%] Building C object CMakeFiles/git2.dir/src/blob.c.obj  \n[  2%] Building C object CMakeFiles/git2.dir/src/commit.c.obj  \n[  4%] Building C object CMakeFiles/git2.dir/src/delta-apply.c.obj  \n[  5%] Building C object CMakeFiles/git2.dir/src/errors.c.obj  \n[  6%] Building C object CMakeFiles/git2.dir/src/filebuf.c.obj  \n[  8%] Building C object CMakeFiles/git2.dir/src/fileops.c.obj  \n[  9%] Building C object CMakeFiles/git2.dir/src/hash.c.obj  \n[ 11%] Building C object CMakeFiles/git2.dir/src/hashtable.c.obj  \n[ 12%] Building C object CMakeFiles/git2.dir/src/index.c.obj  \n[ 13%] Building C object CMakeFiles/git2.dir/src/object.c.obj  \n[ 15%] Building C object CMakeFiles/git2.dir/src/odb.c.obj  \n[ 16%] Building C object CMakeFiles/git2.dir/src/odb_loose.c.obj  \n[ 18%] Building C object CMakeFiles/git2.dir/src/odb_pack.c.obj  \n[ 19%] Building C object CMakeFiles/git2.dir/src/oid.c.obj  \n[ 20%] Building C object CMakeFiles/git2.dir/src/refs.c.obj  \n[ 22%] Building C object CMakeFiles/git2.dir/src/repository.c.obj  \n[ 23%] Building C object CMakeFiles/git2.dir/src/revwalk.c.obj  \n[ 25%] Building C object CMakeFiles/git2.dir/src/signature.c.obj  \n[ 26%] Building C object CMakeFiles/git2.dir/src/tag.c.obj  \n[ 27%] Building C object CMakeFiles/git2.dir/src/thread-utils.c.obj  \n[ 29%] Building C object CMakeFiles/git2.dir/src/tree.c.obj  \n[ 30%] Building C object CMakeFiles/git2.dir/src/util.c.obj  \n[ 31%] Building C object CMakeFiles/git2.dir/src/vector.c.obj  \n[ 33%] Building C object CMakeFiles/git2.dir/src/backends/sqlite.c.obj  \n[ 34%] Building C object CMakeFiles/git2.dir/src/win32/dir.c.obj  \n[ 36%] Building C object CMakeFiles/git2.dir/src/win32/fileops.c.obj  \n[ 37%] Building C object CMakeFiles/git2.dir/src/win32/map.c.obj  \n[ 38%] Building C object CMakeFiles/git2.dir/src/block-sha1/sha1.c.obj  \nLinking C shared library libgit2.dll  \nCreating library file: libgit2.dll.aCMakeFiles\\git2.dir/objects.a(odb.c.obj):odb.c:(.text+0x40b): undefined reference to `inflateInit_@12'  \nCMakeFiles\\git2.dir/objects.a(odb.c.obj):odb.c:(.text+0x430): undefined reference to `inflate@8'  \nCMakeFiles\\git2.dir/objects.a(odb.c.obj):odb.c:(.text+0x441): undefined reference to `inflateEnd@4'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0x3ee): undefined reference to `deflateInit_@16'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0x411): undefined reference to `deflateBound@8'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0x458): undefined reference to `deflate@8'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0x48c): undefined reference to `deflate@8'  \nCMakeFiles\\git2.dir  \n/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0x4a7): undefined reference to `deflateEnd@4'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0x4f0): undefined reference to `deflateEnd@4'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0x50e): undefined reference to `deflateEnd@4'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0x720): undefined reference to `inflateInit_@12'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0x73e): undefined reference to `inflate@8'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0x9a7): undefined reference to `inflateEnd@4'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0xa28): undefined reference to `inflate@8'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0xa3b): undefined reference to `inflateEnd@4'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0xa5d): undefined reference to `inflateEnd@4'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0xb63): undefined reference to `inflateInit_@12'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0xba8): undefined reference to `inflate@8'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0xbd8): undefined reference to `inflate@8'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0xbe7): undefined reference to `inflateEnd@4'  \ncollect2: ld returned 1 exit status  \nmingw32-make.exe[2]: **\\* [libgit2.dll] Error 1  \nmingw32-make.exe[1]: **\\* [CMakeFiles/git2.dir/all] Error 2  \nmingw32-make.exe: **\\* [all] Error 2   \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/806704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/806927", "body": "It's seem that zlib is found. I put :\n\nmessage(${ZLIB_INCLUDE_DIR})\nmessage(${ZLIB_LIBRARY})\n\ninto the CMakeLists.txt file. See the the line below \"-- Found ZLIB: C:/Sources/zlib-1.2.5 (found version \"1.2.5\")\"\n\nC:\\Sources\\libgit2\\build>\"c:\\Program Files\\CMake 2.8\\bin\\cmake.exe\" -G \"MinGW Makefiles\" ..  \n-- The C compiler identification is GNU  \n-- Check for working C compiler: C:/MinGW/bin/gcc.exe  \n-- Check for working C compiler: C:/MinGW/bin/gcc.exe -- works  \n-- Detecting C compiler ABI info  \n-- Detecting C compiler ABI info - done  \n-- Found ZLIB: C:/Sources/zlib-1.2.5 (found version \"1.2.5\")  \nC:/Sources/zlib-1.2.5  \nC:/Sources/zlib-1.2.5/libz.a  \n-- Could NOT find OpenSSL (missing:  OPENSSL_LIBRARIES OPENSSL_INCLUDE_DIR)  \n-- Configuring done  \n-- Generating done  \n-- Build files have been written to: C:/Sources/libgit2/build   \n\nC:\\Sources\\libgit2\\build>\"c:\\Program Files\\CMake 2.8\\bin\\cmake.exe\" --build .  \nScanning dependencies of target git2  \n[  1%] Building C object CMakeFiles/git2.dir/src/blob.c.obj  \n[  2%] Building C object CMakeFiles/git2.dir/src/commit.c.obj  \n[  4%] Building C object CMakeFiles/git2.dir/src/delta-apply.c.obj  \n[  5%] Building C object CMakeFiles/git2.dir/src/errors.c.obj  \n[  6%] Building C object CMakeFiles/git2.dir/src/filebuf.c.obj  \n[  8%] Building C object CMakeFiles/git2.dir/src/fileops.c.obj  \n[  9%] Building C object CMakeFiles/git2.dir/src/hash.c.obj  \n[ 11%] Building C object CMakeFiles/git2.dir/src/hashtable.c.obj  \n[ 12%] Building C object CMakeFiles/git2.dir/src/index.c.obj  \n[ 13%] Building C object CMakeFiles/git2.dir/src/object.c.obj  \n[ 15%] Building C object CMakeFiles/git2.dir/src/odb.c.obj  \n[ 16%] Building C object CMakeFiles/git2.dir/src/odb_loose.c.obj  \n[ 18%] Building C object CMakeFiles/git2.dir/src/odb_pack.c.obj  \n[ 19%] Building C object CMakeFiles/git2.dir/src/oid.c.obj  \n[ 20%] Building C object CMakeFiles/git2.dir/src/refs.c.obj  \n[ 22%] Building C object CMakeFiles/git2.dir/src/repository.c.obj  \n[ 23%] Building C object CMakeFiles/git2.dir/src/revwalk.c.obj  \n[ 25%] Building C object CMakeFiles/git2.dir/src/signature.c.obj  \n[ 26%] Building C object CMakeFiles/git2.dir/src/tag.c.obj  \n[ 27%] Building C object CMakeFiles/git2.dir/src/thread-utils.c.obj  \n[ 29%] Building C object CMakeFiles/git2.dir/src/tree.c.obj  \n[ 30%] Building C object CMakeFiles/git2.dir/src/util.c.obj  \n[ 31%] Building C object CMakeFiles/git2.dir/src/vector.c.obj  \n[ 33%] Building C object CMakeFiles/git2.dir/src/backends/sqlite.c.obj  \n[ 34%] Building C object CMakeFiles/git2.dir/src/win32/dir.c.obj  \n[ 36%] Building C object CMakeFiles/git2.dir/src/win32/fileops.c.obj  \n[ 37%] Building C object CMakeFiles/git2.dir/src/win32/map.c.obj  \n[ 38%] Building C object CMakeFiles/git2.dir/src/block-sha1/sha1.c.obj  \nLinking C shared library libgit2.dll  \nCreating library file: libgit2.dll.aCMakeFiles  \n\\git2.dir/objects.a(odb.c.obj):odb.c:(.text+0x40b): undefined reference to `inflateInit_@12'  \nCMakeFiles\\git2.dir/objects.a(odb.c.obj):odb.c:(.text+0x430): undefined reference to `inflate@8'  \nCMakeFiles\\git2.dir/objects.a(odb.c.obj):odb.c:(.text+0x441): undefined reference to `inflateEnd@4'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0x3ee): undefined reference to `deflateInit_@16'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0x411): undefined reference to `deflateBound@8'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0x458): undefined reference to `deflate@8'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0x48c): undefined reference to `deflate@8'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0x4a7): undefined reference to `deflateEnd@4'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0x4f0): undefined reference to `deflateEnd@4'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0x50e): undefined reference to `deflateEnd@4'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0x720): undefined reference to `inflateInit_@12'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0x73e): undefined reference to `inflate@8'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0x9a7): undefined reference to `inflateEnd@4'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0xa28): undefined reference to `inflate@8'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0xa3b): undefined reference to `inflateEnd@4'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0xa5d): undefined reference to `inflateEnd@4'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0xb63): undefined reference to `inflateInit_@12'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0xba8): undefined reference to `inflate@8'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0xbd8): undefined reference to `inflate@8'  \nCMakeFiles\\git2.dir/objects.a(odb_loose.c.obj):odb_loose.c:(.text+0xbe7): undefined reference to `inflateEnd@4'  \ncollect2: ld returned 1 exit status  \nmingw32-make.exe[2]: **\\* [libgit2.dll] Error 1  \nmingw32-make.exe[1]: **\\* [CMakeFiles/git2.dir/all] Error 2  \nmingw32-make.exe: **\\* [all] Error 2   \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/806927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/876504", "body": "Did you mean a built-in version on Zlib? :)\n\nIt build fine and the test suite passed.\n\nthanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/876504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "stbuehler": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/809987", "body": "Pretty long thread :)\n\nI tried searching for \"name\" in it, and couldn't find anything related.\n\nSo is libgit2 supposed to become the official git-core backend library?\nOr is it agreed that git-core will never provide a shared-library?\n\nThese seem to me the only possibilities that \"libgit2\" is a safe name.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/809987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/810443", "body": "Ok, thank you very much for the information.\n\nMight be a good idea to put this on the main page :)\n\nIt might be especially nice to know how similar the API is compared to the \"real\" one - can i just link cgit against libgit2? Well, i guess i'll just have to try it :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/810443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rbrito": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/814036", "body": "That's great, because I am working on (together with stbuehler) to create a package of cgit for Debian-based distributions and, if it is easy enough, maybe create something for other distros too.\n\nRegards, Rog\u00e9rio Brito.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/814036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tbranyen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/827704", "body": "Its a convenience function.  I'd venture to propose more of these to exist, specifically the ability to get a git_repository from a git_commit object directly.  This makes building an API significantly easier imo...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/827704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/301786", "body": "Awesome glad to see this, bumping up my bindings to this version immediately!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/301786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/377669", "body": "No reason huh... :D\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/377669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "txdv": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/835091", "body": "Hmm, maybe these are not that bad after all...\nClose down this issue.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/835091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/837509", "body": "I don't know how I can contribute on this, is it enough to just to say this, or should I attach a fix?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/837509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/837787", "body": "I saw that test, that's why I thought that it was really strange.\nGIT_HEAD_FILE is defined as \"HEAD\", so I am doing basically the same, except that I fail :(\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/837787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/837791", "body": "OK, now it does work, I must have had an old libgit2.so in /usr/lib\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/837791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/838226", "body": "If one is writing something interactive like tig (which I will probably teach some libgit2, because libgit2 is awesome) it isn't the best idea.\nIt would be nice if you could specify if it should be lazy or not :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/838226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/854182", "body": "So after working the entire day on the bindings, I thought why not hookup manos (a lightweight async server for C#/mono) with LibGIt2Sharp.Core.\nEverything worked fine, until I tried to test a larger repo. I took the git repo!\nRequesting the object to which HEAD points hoged 400mb of ram.\n\nJust a side not, i'll test the devel branch.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/854182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/854193", "body": "I tested development, v0.8.0 and custom-memory. All eat up 400mb when retrieving the HEAD of the git (I mean the git repository of the project cgit) repository.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/854193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/854221", "body": "Well the code doesn't look spectacular in C#\n\n```\nvar repo = new Repository(\"git/.git/\");\nConsole.WriteLine (repo.Head);\n```\n\nThe c function called are then:\n\n```\ngit_repository_open(&repo, path)\ngit_reference_lookup(repo, &ref, \"HEAD\")\ngt_reference_resolve(&rref, ref)\ngit_object_lookup(&obj, repo, &rref->oid, _)\n```\n\nHave you got the C code lying around for your testcase where you \"do the same process in C for benchmarking\"?\nI could use that to benchmark aswell :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/854221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/854293", "body": "Maybe I misunderstood the revision walking API.\nI just walked through ALL the commits, which resulted in this huge memory consumption. Showing only 50 within every page is probably a better idea.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/854293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/874032", "body": "It is working fine now, I guess. There is some delay at startup, but one could blame the VM for it, I guess :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/874032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/874050", "body": "I'm writing the C# bindings, so there is slight delay compared to C because of the VM being initialzied, but, as I already said, it has nothing to do with the revwalker implementation and has everything to do with the VM (\"but one could blame the VM for it\")\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/874050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/896114", "body": "This should remove some of the uglyness in the wrappers. \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/896114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/896207", "body": "So libgit2 will work only until 2038? :D\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/896207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/301964", "body": "Any reason why it changed from (git_commit *commit) to (const git_oid *oid)?\nApart from being const...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/301964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/301998", "body": "I just thought you could retrieve the oid from git_commit, but I guess there are some valid scenarios were one has only an ID instead of an instance of git_commit.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/301998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303143", "body": "why is GIT_INTERN present at all?\nYou can't use it in any other binding.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303285", "body": "GIT_INLINE. its not that hard to figure it out, because there are not many defs with caps on\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/309763", "body": "Why the parent count when there is already the variable argument parent list?\nDoesn't the API for variable argument lists support the counting of them?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/309763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/312246", "body": "I don't understand one thing though.\n\nWhy do the create functions return only an object id, instead of a direct pointer to the struct?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/312246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/312274", "body": "And what about git_repository_close? What happened to that? Got it replaced by _gc? gc does only some garbage collection if I'm not mistaken.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/312274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/320447", "body": "What would be the difference?\nWould there be any benefits?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/320447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/407590", "body": "Maybe (const void *) like in the blob API? \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/407590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/418270", "body": "The documentation do not match the function prototype, I really don't know what this function does.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/418270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/423174", "body": "Please add the actual symbol, I googled it up it is a \":\", but the documentation should include the symbol itself too instead of just leaving the user with a 5 symbol combination representing one symbol.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/423174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/423205", "body": "This thing returns GIT_EOBJCORRUPTED(-7) when the no repository is found, why not just returning (null)?\n\ni did a discover on \"/home\", with accrossfs = 1 and ceilingdirectories = null.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/423205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/423262", "body": "Another question, why the size? I mean the potential maximum length is path + \"/\" + \".git\" + \"/\".\nFurthermore it seems to me that ceilingpaths don't work correctly, can someone confirm this?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/423262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/423439", "body": "The problem with the size is that you never know how big it should be. Why not supply a (char **) parameter and the function would malloc the appropriate size?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/423439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/423440", "body": "I had to google it up and most of the time \";\" is used in these kind of situations, which is a semi colon, but still providing that information will lead to less pain.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/423440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/423459", "body": "Did the one who told you supply some reason why you should do so?\nI would like to know why this pattern is better.\n\nAfter a second thought: it is still no problem, you just do: GetFullPath(path).Length + \"/.get/\".Length\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/423459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/423470", "body": "O, now that i do printenv i see that it is \":\" (I'm deving on linux as well) . You are right, it is the default under linux, you can leave it like that, just add more thorough documentation for our windows boys :) \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/423470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/432428", "body": "Ha! Good one :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/432428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/432621", "body": "This is the most important function :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/432621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/432622", "body": "double whitespace.\n\nnoooooezz\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/432622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/438066", "body": "git_config_file__ondisk is temporary, right?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/438066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/438115", "body": "By temporary I mean it is a temporary function which will be removed in the future versions?\nSorry for not expressing myself extensively.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/438115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/438164", "body": "```\nfind a collection of Custom backends on their own repo, under the libgit2 org\n```\n\nWhere is it? :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/438164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/454337", "body": "Could you explain \"data\" in a more detailed way?\nI still do not understand, what it returns.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/454337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/463092", "body": "Awesome commit.\nIs it hard to integrate static library creation in cmake?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/463092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/529739", "body": "Add support for encoding and drop support for short messages?\nWhy?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/529739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2213427", "body": "USSR ZONE 1\nThat was good one\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2213427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2220302", "body": "codestyle: while (\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2220302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "lznuaa": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/859273", "body": "it seem related with 74 perfomance issues Speed issues?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/859273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "bnoordhuis": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/860118", "body": "No idea. I'm not a Windows programmer and I don't know if MSVC has a -fPIC equivalent.\n\nThe switch itself is only effective/appended for *NIX builds.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/860118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/862217", "body": "I googled and asked around and apparently Windows on x86 doesn't have a concept of position independent code, DLLs are mapped to an address at compile time and that's it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/862217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/864950", "body": "https://github.com/bnoordhuis/libgit2/compare/issue85.patch\n\nPatchlet that makes the header check optional. Tests pass.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/864950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "fbstj": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/913884", "body": "you should probably 'merge' this into your previous pull request.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/913884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "burdges": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/936125", "body": "oops, misstyped\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/936125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/322784", "body": "I presume trees may no longer be created or modified directly, but instead must be created using indexes, yes?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/322784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "onlyshk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/937266", "body": "Yes, thank you for reply, i linked with -libgit2\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/937266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "avidal": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/950202", "body": "Was looking over the diff, not sure why, and spotted a couple of typos. Figured @tanoku could address them while he's doing the edits he mentioned before the merge.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/950202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/14943", "body": "s/importart/important/\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/14943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/14944", "body": "s/copmparison/comparison/\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/14944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "t3rm1n4l": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/953314", "body": "Thanks for merging my changes. My first contribution to git. I would love to work on more things. If you could give me a TODO list for libgit2, I would love to implement some of them. \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/953314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/955303", "body": "I have recently committed an API to write tree from index. Additionally, I would love to. implement git-read-tree soon\n\nYou can make use of `git_tree_create_fromindex` for implementing write-tree. Please see https://github.com/libgit2/libgit2/commit/47d8ec56e917adda2e336c29420f527fca733866\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/955303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "samcday": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/958884", "body": "@burdges\n\nI'm not an authority on libgit2, but I thought I'd just bring up a couple of points for consideration:\n\nIndexes don't just have a general interest as to whether or not they're associated with a repository that isn't bare - they also have references to blobs in the repository that contain the data of a file when it was staged. In a way, an index is (mostly) useless without a repository (or at least, without access to the odb that contains blob data backing the index).\n\nOn the other hand, a git_odb can actually be opened on its own using `git_odb_open` or `git_odb_new`. You can do this to basically open and work with objects on the low level completely independent of a \"repository\" as a whole (for example, I used this approach recently to scan packfiles while coding up a Node.js based git clone implementation). I'm also fairly certain a `git_repository` works with these functions anyway. In short, a git_odb doesn't \"have a repository\", rather, a repository has an odb,\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/958884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/978685", "body": "Hooray! I actually realized I needed these yesterday (:\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/978685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/329481", "body": "Me likey!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/329481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/345182", "body": "Fantastical! Needed this :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/345182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "jpfender": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/969289", "body": "Hi, just some further additions to the index library. The index will now be checked for extended entries and written to disk with the correct version number in the header.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/969289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/982580", "body": "I saw that you applied 7c7fcda from this series, but not the rest. Is there a reason for that? As far as I can tell, the correct values for the IDXENTRY flags are those I fixed in a5a546b. Why didn't you pull the rest?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/982580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23996", "body": "Oops, this appears to be a duplication.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "tclem": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/300209", "body": "Love it!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/300209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/320915", "body": "+1 for an iterator interface.\n\nOn Tue, Mar 29, 2011 at 12:06 AM, joshtriplett <\nreply@reply.github.com>wrote:\n\n> Callbacks prove somewhat more annoying to handle in FFI-based bindings (not\n> impossible by any means, but more annoying).\n> \n> Also, callbacks can make interfaces harder to make multithread-safe in the\n> future, since you shouldn't call user code while holding internal locks or\n> similar.\n> \n> Iterators also map naturally to native constructs in many different\n> languages; some languages have a native concept of iterators, and for those\n> that don't an iterator interface still seems easier to turn into a list than\n> a callback interface.\n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> \n> https://github.com/libgit2/libgit2/commit/09e8de0f38ed8f28c02e5a3fa987cbb74e98a671#commitcomment-320475\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/320915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23296", "body": "I think you meant to do this: `str[i] = tolower(str[i]);`\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "jystic": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/301940", "body": "+1 from me, as a sometimes Windows user this is really helpful\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/301940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/304523", "body": "Should this be including oid.h instead? I can't see what revwalk.h needs from object.h, but it definitely needs the git_oid struct from oid.h\n\nThis commit breaks the auto-binding generator that I'm using because the generator doesn't traverse header files recursively to find types. Changing this to oid.h makes everything happy again. I don't mind changing the binding generator to be more robust, but this seems to be better changed in the main codebase.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/304523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/305484", "body": "CONDITION_VARIABLE doesn't seem to be available on MinGW, so all the stuff to do with pthread_cond_t doesn't compile. I found this explanation: http://forums.techarena.in/software-development/1130499.htm\n\nFortunately libgit2 doesn't use condition variables yet, so removing all traces of them means libgit2 compiles fine.\n\nYou didn't really want to use condition variables did you? ;)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/305484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/312741", "body": "With odb_backend.h already including odb.h, this creates a circular dependency between the two. Not a problem for C, but Haskell modules can't have circular dependencies and we're mapping them 1:1 with your include files.\n\nWe could change our mapping, but it turns out that odb_backend.h doesn't actually need to include odb.h anymore, because git_rawobj has been removed. Would it be possible for you to remove the odb.h include from odb_backend.h?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/312741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/312787", "body": "Awesome, thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/312787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jasonpenny": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/302000", "body": "There seems to be no way to free the git_strarray from my bindings, since `git_strarray_free` is GIT_INLINE and not GIT_EXTERN\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302004", "body": "The API specifies\n    GIT_EXTERN(void) git_repository_close(git_repository *repo);\nis it supposed to be `git_repository_gc` ?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/308617", "body": "Warnings treated as errors, so doesn't build with MSVC:\n\ncache.c: \"potentially uninitialized local variable 'node' used\" in git_cache_get,\nand commit.c has 3 places where free() is called on const pointers\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/308617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/322935", "body": "The README should probably be updated, it says the option is --without-sqlite\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/322935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/468650", "body": "MSVC warning (treated as error): potentially uninitialized local variable 'error' used\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/468650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/468654", "body": "This commit broke the tests with MSVC\n\n...\nSuite \"commit\": ....FF..\n  Failed (2 failures):\n  1) \"write a new commit object from memory to disk\" [test write0 @ C:\\git\\libgit2\\tests\\t04-commit.c:645]\n        Method failed: git_commit_create_v( &commit_id, repo, NULL, author, committer, COMMIT_MESSAGE, tree, 1, parent)\n        Error: Not enough memory to build the commit data\n  2) \"create a root commit\" [test root0 @ C:\\git\\libgit2\\tests\\t04-commit.c:720]\n        Method failed: git_commit_create_v( &commit_id, repo, \"HEAD\", author, committer, ROOT_COMMIT_MESSAGE, tree, 0)\n        Error: Not enough memory to build the commit data\nSuite \"revwalk\": .\n  OK (1 test)\nSuite \"index\": .........\n  OK (9 tests)\nSuite \"hashtable\": ....\n  OK (4 tests)\nSuite \"tag\": ...F.F\nFailed to create temporary folder. Aborting test suite.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/468654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/99101", "body": "unisgned ?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/99101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "enzbang": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/322964", "body": "Right, it should ;) See commit enzbang/libgit2@dab0869fa9aeef8e0f7b\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/322964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "kellypleahy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/378086", "body": "Are we concerned about the fact that git_lasterror() is not thread local, and thus will not allow the caller to make git calls from multiple threads?  What is the threading philosophy for libgit2?  Is it assumed that callers will not access libgit2 from multiple OS threads?\n\noops... I just looked at the version that made it in, and it is marked TLS.  My bad, just ignore me.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/378086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/380175", "body": "Is there a discussion somewhere about deprecating git_strerror?  I'm just curious as I think these sorts of functions are generally quite useful (compared to git_lasterror being the only function to retrieve an error message).  Unless we're thinking of getting rid of error codes altogether, I'd say it's a pretty useful way to do things.\n\nFor instance, a common pattern I've used in the past in languages with exceptions is to throw an exception with the error code, and then if the user decides to try to format the message, ask the underlying API for the error message then.  This allows higher level programs that \"understand\" the error code to make decisions based on that error number without actually impacting performance by obtaining the error string.  It also allows programs to make decisions off of well-defined error codes, rather than string parsing, but also allows them to provide very user-friendly messages when needed.\n\nPerhaps I'm misunderstanding the intention of deprecating git_strerror.  If that's the case, just tell me to shut up ;)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/380175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "nordsturm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/380454", "body": "# include \"common.h\"\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/380454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/380457", "body": "using GIT_BEGIN_DECL from common.h\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/380457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/557450", "body": "this causes reading after buffer allocated (by strlen) in commit_parse_buffer (line 246), because of no '\\0' was written\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/557450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/557719", "body": "sorry, this line :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/557719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/557741", "body": "sorry, i've not looked at line context, see line 140.\ntag_parse_buffer uses memcpy for message extracting\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/557741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "pietern": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/381201", "body": "Short note: when the connection is lost `redisCommand` will return `NULL`, not an error reply. The error reply is used only for errors directly returned by Redis (the `-ERR msg` reply). When `NULL` is returned, the error message can be pulled from `ctx->errstr`.\n\nOther than that: awesome to see Redis support in libgit2!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/381201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/382065", "body": "Thank you!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/382065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "pegonma": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/411138", "body": "Actually, I also found it more natural to return 1 when it matches and\n0 otherwise. But looking other methods in the library, I thought that\nthe default was \"0 in case of success\", i.e. if they match (for\nexample, gitfo_isdir returns 0 when the given path is a directory,\nsame with gitfo_exist).\ngit_oid_match and git_oid_cmp do 2 different things : git_oid_cmp\ntells whether or not two OIDs differ (and tells which one is \"lower\"\nthan the other considering the value of the first byte for which they\ndiffer), while git_oid_match tells whether or not two OID agree on\ntheir 'len' first hexadecimal digits.\nFor example \"f5e8f00000000000000000000000000000000000\" and\n\"f5e8f10000000000000000000000000000000000\" agree on their 5 (or less)\nfirst hex digits (match(5,a,b) will tell that they match), but do not\non their 6 (and more) first hex digits.\nBut you are right that match(GIT_OID_HEXSZ, a, b) will tell about the\nsame thing as git_oid_cmp (except for the \"who is lower than the other\npart).\nI added git_oid_match because I had to write a method to compare\nprefixes of raw oids) internally (git_oid_match_raw), and I figured\nsuch a method to compare oid prefixes could also be useful externally.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/411138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/411146", "body": "Right, sorry ! Tanoku already fixed that apparently.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/411146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/411160", "body": "These are definitely better names :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/411160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Romain-Geissler": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/423359", "body": "I'll add the symbol if you want... but this doc quote a \"colon\" which is easy to understand !\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/423359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/423368", "body": "I have been noticed some weird behaviors under Windows, i don't know if that's your case. See #251.\n\nTo follow the whole API guidelines, that function has to return an expressive error, not just null (in case of error) or a path (in case of success). That's how the whole lib works.\nThe size does matter, as you can use \".\" as a start path, which isn't that long, and be returned a full path. Moreover, in case of .git file, you can be returned a path that has absolutely no link with the given start path.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/423368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/423451", "body": "There is a `PATH_MAX` macro that is defined undex unix system. Maybe also for Windows, i don't know. I'll consider making the `GIT_PATH_MAX` macro public so that it can be used safely with that discover function.\n\nThis patch is the third version of the original patch. In the second one, i malloced a char*\\* as you suggest, but that i was told to move to the char\\* + length pattern.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/423451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/423463", "body": "Well i come from the unix world, so my first choice was a colon as it's used anywhere else in the system. The semi colon is the natural choice for Windows, but i forgot taking into account that case (it's a real pain having two different path patterns...). The right manner would be using a colon for all systems except for Windows where a semi-colon should be used.\n\nThank you for reporting all those issues. As quoted in #251, i'm a little busy to fix this right now, but i'll try releasing a patch on Friday or Saturday. \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/423463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/423475", "body": "Look at #225 it's for binding reasons.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/423475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "schu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/468935", "body": "Thanks for catching. gcc 4.6 didn't get it..\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/468935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/524783", "body": "Fixed with #363. Thank you!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/524783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/668125", "body": "This was removed in 0d5aa7d because we miss warnings with -O0.\n\nUpdate: maybe you switch the default build mode to \"Release\" to avoid people missing warnings.?  (Would this disable assert?)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/668125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/61524", "body": "This must be repo2, no? Otherwise the test is segfaulting for me.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/61524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/129479", "body": "Changed that. Thanks\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/129479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/166457", "body": "Maybe we can add a header include/git2/hex.h where we provide some (inline?) convenience functions for \"hex operations\" like the one above. For the notes stuff I'm working on, I use a function hexval (230fa22) which could go there as well as the hex table..?\n\nI don't think we should go with the API policy here but just behave like other *cmp functions.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/166457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/279448", "body": "Correct.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/279448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/316936", "body": "gcc wants this to be const char *\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/316936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/452584", "body": "Thanks, will change.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/452584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/480803", "body": "This test fails for me (Linux x86_64).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/480803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/482334", "body": "Sry, haven't had time to look into this earlier.\n\nIt works, but: the commit message quite confused me. To me, it reads like \"I didn't remove my emacs backup file from the test repo -- instead of removing it, I'll just raise expected_count by 9 and remove a check for ignored files and things will magically work again\". Shouldn't the fix rather look like the following?\n\n```\n@@ -338,7 +338,7 @@ static void workdir_iterator_test( \n void test_diff_iterator__workdir_0(void)\n {\n-       workdir_iterator_test(\"attr\", 15, 4, NULL, \"ign\");\n+       workdir_iterator_test(\"attr\", 14, 3, NULL, \"ign\");\n }\n```\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/482334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "kiryl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/474785", "body": "No need to cast void \\* to other pointer type. Just declare ksearch as const pointer too.\n\nIt seems the code contains a lot of mess with type casting. :(\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/474785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/474839", "body": "Two questions:\n1. I know nothing about C++. Why this type casting is required?\n2. Why do we care about C++ compilers in plain-C code?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/474839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/474879", "body": "So we can't put file larger than 4GiB in index? Sad.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/474879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/475030", "body": "It's better to return EFBIG here than silent truncate it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/475030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/475048", "body": "It does harm! You hide `const` problem with this type cast. Type cast potentially hides a lot of problem types.\n\nTypecast in C usually points to a hack or a bug. It's better to avoid type cast wherever it's possible. You're writing code for people, not for compilers.\n\nAnd I still don't understand why do you want to build plan-C code with C++ compiler?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/475048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67034", "body": "Ok. I'll fix.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67035", "body": "No, it doen't. Comment is not relevant (any more?).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67036", "body": "This is a real bug! zlib can modify data pointed by ->next_in so you **cannot** just cast out the qualifier if you don't want to get SIGSEGV.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67039", "body": "Oops. My bad. I'll fix.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67047", "body": "ZLib touches `next_in` in case of `gzip`. See `gzputc()` and `gzwrite()`. So we cannot rely on the current behavior of deflate().\n\nYour proposal looks sane. I'll try. \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67048", "body": "Orhhh... No.. It blows up whole stack. :(\n\nTo modify signature of `write_normal()` and `write_deflate()` we need to modify `struct git_filebuf` `->write`. Than git_filebuf_write()`. Than config_file.c and odb_loose.c...\n\nWe need better solution.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67056", "body": "It's ugly hack, not solution.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67102", "body": "I see. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/103037", "body": "This code is valid from c99 point of view.\n\nDo we really want to support compilers which don't support c99? Why?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/103037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/103052", "body": "@carlosmn, +1 reason to drop MSVC support ;)\nMinGW is enough.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/103052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/103111", "body": "Pushed.\n\nReally? Why MSVC support is so important? M$ seems not interested in plan C at all.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/103111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/103447", "body": "On Thu, Aug 25, 2011 at 05:20:12PM -0700, carlosmn wrote:\n\n> > @@ -302,10 +302,10 @@ int git_pkt_send_wants(git_headarray *refs, git_transport_caps *caps, int fd)\n> >  {\n> >     unsigned int i = 0;\n> >     int error = GIT_SUCCESS;\n> > -   char buf[STRLEN(WANT_PREFIX) + GIT_OID_HEXSZ + 2];\n> > -   char buf[strlen(WANT_PREFIX) + GIT_OID_HEXSZ + 2];\n> > \n> > Really? Why MSVC support is so important? M$ seems not interested in plan C at all.\n> \n> Whilst I sympathise with the feeling. It's not Microsoft who is going to\n> be using the library, and the poor souls who have to work on Windows are\n> already miserable enough without us making it harder.\n\nHow does it prevent from using libgit2 with MSVC project? I guess MSVC\nproject can be linked with binary-only library (built in MinGW).\n\n## \n\n Kirill A. Shutemov\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/103447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "RomainMuller": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/474891", "body": "I agree this should be fixed. Though I wouldn't like pushing things that are >4GB (actually I'd start freaking out at 50-ish MB) to a remote over a slow network :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/474891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/475008", "body": "That said, is there a risk we get into undetermined behavior if the file size WAS over 4GiB and we did truncate it there? I'd rather add a check to error out in case the truncated value isn't equal to the 4+ bytes value...\n\nMight be a silly question, though, I haven't really got tome to look at the context there to see if it could break...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/475008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "belkiss": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/524353", "body": "append_ceiling_dir fails if the specified dir does not exist (leading to a call to p_realpath returning NULL).\nMoving this test after the following line fixes it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/524353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/524841", "body": "No worries :p I'm using linux. Strange indeed, this may need a little more digging to find out why the false positive.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/524841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/83269", "body": "The line just after (must_pass(git_filebuf_open(&file, test, 0));) fails if the file does not exist.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/83269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/83281", "body": "Hum indeed, my bad, I don't know what I did ;)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/83281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/83282", "body": "Okay, there are some more of these in t01-rawobj and t04-commit.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/83282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "paulcbetts": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/632838", "body": "We should definitely use this guy's name to promote libgit2\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/632838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1003685", "body": "Didn't you read the Wiki? Steve Ballmer kills a kitten now!\n## \n\nPaul Betts\n\nSENT FROM MY COMMODORE 64: RESPONSES MAY BE IN ALL CAPS\n\nOn Feb 23, 2012, at 2:52, nulltokenreply@reply.github.com wrote:\n\n> @arrbee Sorry for being a bit late. I'm afraid `readdir_c` is not defined under Windows. This prevents libgit2 from being built.\n> \n> > ....\\libgit2\\src\\path.c(550): warning C4013: 'readdir_r' undefined; assuming extern returning int\n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/libgit2/libgit2/commit/b6c93aef4276051f9c4536ecbed48f4cd093bd1b#commitcomment-1000231\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1003685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/216035", "body": "Ummm, in a way - ACLs inherit their parent's ACLs if the directory is set to do so, it's not set via any global mask like umask is.\n\n## \n\nPaul Betts\n\nSENT FROM MY COMMODORE 64: RESPONSES MAY BE IN ALL CAPS\n\nOn Nov 8, 2011, at 8:18, Carlos Mart\u00edn Nietoreply@reply.github.com wrote:\n\n> > @@ -39,6 +39,20 @@ int p_getcwd(char *buffer_out, size_t size)\n> >    return GIT_SUCCESS;\n> > }\n> > \n> > +int p_rename(const char *from, const char *to)\n> > +{\n> > -    if (!link(from, to)) {\n> > -        p_unlink(from);\n> > -        return GIT_SUCCESS;\n> > -    }\n> >   +\n> > -    if (!rename(from, to))\n> > -        return GIT_SUCCESS;\n> >   +\n> > -    return GIT_ERROR;\n> >   +\n> >   +}\n> >   +\n> \n> Does `umask` even exist on Windows?@xpaulbettsx could you share your wisdom?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/libgit2/libgit2/pull/475/files#r215829\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/216035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mrtazz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/633966", "body": "It's clearer with a reference, but everything's grammatically correct from a German point of view :).\n![wunderbar](http://www.get-grocery.com/WebRoot/Store4/Shops/62180094/4D1F/AE2A/7CE0/9594/DBCA/C0A8/2981/4D2B/Cadbury_Wunderbar.jpg)\n\nKeep up the great work!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/633966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "dannygreg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/936094", "body": "So much :heart: for you guys.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/936094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "joshaber": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/936405", "body": "ass. bad.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/936405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "juzna": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/1303064", "body": "This breaks php-git build :(\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1303064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1303829", "body": "Yep, php-git won't build because it still has references to the removed constants. I'll add an issue there to update.\n(sorry for such stupid report, I was already too tired yesterday).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1303829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "sc68cal": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/1329597", "body": ":beer:\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1329597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "xuhdev": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/1364546", "body": "Why not add a macro to keep the backward compatibility? I've made a new pull request #721.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1364546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "hanwen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/1668596", "body": "why doesn't  this assignment go after the p_close() ?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1668596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "chris-y": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/1989868", "body": "This is missing a curly brace at the end of the line.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/1989868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "usure": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/2213162", "body": "oh wow\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2213162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "loadx": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/2216649", "body": "/\\* just ignore this shit. TODO write more code */\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2216649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "s-stude": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/2218307", "body": "This is lol\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2218307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "RusAlex": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/2218489", "body": "nice commit. \n\n```\n  junk at the end of the pack\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2218489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "mamont77": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/2219002", "body": "\u0421\u043a\u0430\u0437\u043e\u0447\u043d\u043e \u0438 \u0434\u043e\u043b\u0431...))\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2219002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "iago849": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/2219086", "body": "Heh, funny!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2219086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2219088", "body": "I want to receive this task\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2219088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "scottjg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/2235416", "body": "WHOOPS\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2235416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "CSRedRat": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/2262827", "body": "USSR Zone.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2262827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "phkelley": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/2378180", "body": "Failure case was: a = \"hell\", b = \"hello\", sz = 5. Return code was incorrectly 0 in this case\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2378180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2385177", "body": "We were reading the index off disk (where entries are sorted case-sensitively) and if ignore_case was on, then claiming that they were sorted icase in memory.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2385177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2477375", "body": "The \"zx\" format specifier causes a crash in the Microsoft C standard library.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2477375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2595561", "body": "thanks\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2595561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2622876", "body": "1. The `index_file` field of the structure was only used in `git_indexer_stream_finalize`, so it's now local to that function.\n2. If there is no call to `git_indexer_stream_finalize`, or if that call fails, we were previously leaking the `git_filebuf` `idx->pack_file`, which is created in `git_indexer_stream_new`.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2622876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "sba1": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/2411890", "body": "I have a question regarding this change. Why has the special ppc support been removed from libgit2? I'm currently working on the AmigaOS4 port (https://gitorious.org/amiga-ports/libgit2-amiga and soon also here on github) of the libgit2 and here the ppc special support would be of use although I'm not sure if the ASM implementation is significantly better than the C one. Was it removed because there were no speed increase or bugs or just because of less code has to be maintained?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2411890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2412219", "body": "> > I have a question regarding this change. Why has the ppc support been\n> > removed from libgit2?\n> >  It hasn't. It runs on PPC as much as it ever did. Some PPC assembler \n> > was\n> >  removed as it was found it didn't give us any advantage.\n\nSorry, I wasn't totally clear. Of course PPC still works. Only the PPC \nasm stuff was removed. But that it didn't gave an obvious advantage \nanswers my question. Thanks.\n\nBest\nSebastian\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2412219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2425618", "body": "If giterr_clear() is called, shouldn't error be set to 0 as well? Otherwise, the following code leads to a return of error (with no giterr()) because the following for loop checks for !error. This pattern is repeated in various other instances in this commit.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2425618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2425636", "body": "If this is supposed to test the template support, shouldn't GIT_REPOSITORY_INIT_EXTERNAL_TEMPLATE be added here as well? \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2425636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2490860", "body": "I find this a little bit inflexible. Wouldn't a define like HAVE_PTHREADS be better suited for handling the pthread stuff?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2490860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2494257", "body": "> Do you have some pthreads compatibility layer on Windows? Or are you\n> worried about a Unix platform without pthreads?\n> \n> Either way, this now actually compiles on Windows and is no less\n> flexible on Unix.\n\nWith flexibility I meant the ability to enable/disable a feature \nwithout hard coding it to an architecture. This may be desirable for the \nuse cases you mentioned.  For instance, I'm trying to keep libgit2 \nworking on AmigaOS, which is no Unix OS. While there is a pthreads \nimplementation for recent versions it may make sense to disable that \nfeature as well.\n\n> If you'd prefer a different approach, please submit a PR.\n\nYes, of course. In that sense, nearly everything is flexible ;)\n\nBye,\nSebastian\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2494257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "ghedo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/2626437", "body": "\"might refused\" should probably be corrected to \"might have refused\".\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2626437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "buaabyl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/2719942", "body": "compiled using mingw32-gcc 4.7.1, success:)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2719942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "KindDragon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/2820516", "body": "Why you compare with 0 two times?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/2820516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3099593", "body": "st.st_ino will be use in WIN32 platform without being initialized. Visual Studio complain about that.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3099593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "thmo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/3093794", "body": "This commit makes the CMakeLists.txt incompatible with cmake 2.6. This is caused by the unnecessary parens around the \"x matches y\" expression. Could you please change line 287 to:\n\n```\nIF(MSVC AND NOT BUILD_SHARED_LIBS AND ${CMAKE_SIZEOF_VOID_P} MATCHES \"8\")\n```\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3093794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "ben": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/3136215", "body": "@arrbee, do these look like reasonable fixes? I [found a couple asserts and segfaults](d1158cda) while walking some history.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3136215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3599635", "body": ":blush: \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3599635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3599639", "body": "Yeah, I'm starting to get more clarity on what the rules are here. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3599639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3599715", "body": ":heavy_check_mark: \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3599715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3665888", "body": ":blush: \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3665888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3811411", "body": "@arrbee, thanks for these typedef names. They definitely clean up the buffer declarations everywhere else.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3811411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/4246335", "body": "Hopefully this will avoid any start-end races.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/4246335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/4246346", "body": "And this should avoid any races too. From [a document I found](http://pubs.opengroup.org/onlinepubs/7908799/xsh/pthread_once.html):\n\n> On return from pthread_once(), it is guaranteed that init_routine() has completed.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/4246346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "Cat-": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/3581474", "body": "![image](https://f.cloud.github.com/assets/4962387/759847/5ced6d1c-e79c-11e2-8f94-f12b0aea3fc3.jpg)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/3581474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "xiangdanqi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/4259392", "body": "Today will be a fine day.\u4f60\u597d!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/4259392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jacquesg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/6050420", "body": "Oops!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/6050420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "kitbellew": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/6324662", "body": "Perhaps mwf.fd could be closed here.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/6324662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/6324676", "body": "Free idx->pack and pack_tmp_name.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/6324676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/6324684", "body": "idx->pack contains pack_name, perhaps idx->pack_tmp_name is not needed.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/6324684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/6324700", "body": "fd will not be closed.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/6324700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/6324785", "body": "Under `#ifdef`, could add the `lseek/write` option.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/6324785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "sakari": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5633", "body": "oh boy.. nice catch\n\nI would think so. That needs to be fixed. Maybe abort here some other way. \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Jopie64": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67054", "body": "Cant you define a function like:\n\nvoid\\* const_cast(const void\\* ptr_to_cast);\n\nand implement this in a sourcefile that is not checked?\nThis way you loose the warnings when you realy need to do this. Also, when you do a const cast by accident with a normal cast, you still get a warning (which is good). And when it realy needs to be done, you can do it explicitly with const_cast() which does not yield a warning.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "brodie": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/168431", "body": "Setting it to NULL isn't part of fixing the double-free bug, it's part of dealing with missing tagger fields. It's entirely possibly I didn't need to set it to NULL there. And if it is required and we should be zeroing it out beforehand, that would have no effect on either fix (i.e., their tests would still fail).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/168431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/214001", "body": "First question: Is this just refactoring, or is it required to fix Windows support?\n\nSecond question: Aren't things in `posix.h` supposed to use the real underlying POSIX implementations if they're available? Why isn't this just a `#define` for `rename(2)`? And why does this call `link()` and `unlink()` instead of just doing `rename()`? If anything, wouldn't that open up the possibility of this operation **not** being atomic?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/214001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/214008", "body": "Can we group this with the other permission definitions in `refs.h`? This will make it easier to find and easier to use in test assertions.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/214008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/233656", "body": "You shouldn't need to use `umask()` in libgit2. That's just for changing the current umask. `open()`, `chmod()`, etc. will respect the umask.\n\nI was just mentioning it as a way to confirm exactly what permissions Git uses.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/233656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "drizzd": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/320922", "body": "I misinterpreted the comment and the code. I thought it was just about the tree entry itself, not the subtree that goes with it. I have dropped the commit.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/320922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}