{"_default": {"1": {"prsolucoes": {"issues": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/153", "title": "Statement parameter name suggestion", "body": "Hi,\r\n\r\nFirst, thanks to your great library. I will use it in my mobile project and my tool EzoRed (ezored.com) to build cross-platform mobile apps.\r\n\r\nI want suggest only a thing: If the user dont put the \":\" in parameter name, it can be added on bind function, no?\r\n\r\nQuery:\r\n\r\n```sql\r\nselect * from customer where name = :name\r\n```\r\n\r\nInstead of:\r\n\r\n```cpp\r\n.bind(\":name\", \"Paulo\")\r\n```\r\n\r\n```cpp\r\n.bind(\"name\", \"Paulo\")\r\n```\r\n\r\nYou library:\r\n\r\n```cpp\r\nvoid bind(...)\r\n{\r\n    if param_name[0] != ':'\r\n    {\r\n        param_name = param_name + ':';\r\n    }\r\n}\r\n```\r\n\r\nSomething like this.\r\n\r\nWhat you think?", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DraTeots": {"issues": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/132", "title": "Make the library header only", "body": "Is there anything, that prevents converting this library into a header only library? \r\n\r\nI believe it would be very convenient in many aspects. ", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "4brunu": {"issues": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/129", "title": "Create query parameters from class/struct", "body": "Would it be possible to create the opposite of https://github.com/SRombauts/SQLiteCpp/pull/114, by creating an array of parameters, based on a class/struct?\r\nMaybe with templates also?\r\nI'm asking, because I would really appreciate it, and could try to implement it, but I'm a bit lost, and trying to find some guidance, or know if it's possible at all.\r\n@SRombauts @dend456 \r\nThanks", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/122", "title": "Embedding sqlite inside SQLiteCpp", "body": "First, thanks for your awesome library, it helped me a lot.\r\n\r\nWould it be possible to embed sqlite inside SQLiteCpp and provide only one library?\r\n\r\nThanks", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/f022c6af60ef3d09a8ef4c9db45149284cff2650", "message": "Add option to check if column is null by name"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/d78c4d571398d5b7288e430847d19bad0d582da6", "message": "Automatically propagate public headers to other projects with CMake"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/195365271", "body": "Hey, I'm having the same problem.\n@Vienta Do you solve this problem?\nI'm trying to import the source files instead of creating a static lib, but the imports give me an error.\nI think it\u2019s because the import\u2019s inside the library are #include <SQLiteCpp/Database.h> and not #include \u201cDatabase.h\u201d, but I\u2019m not sure, could anyone help please?\nI create a github repo as an example. Thanks\nhttps://github.com/4brunu/SQLiteCppExample\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/195365271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/195383557", "body": "@zhouxiaoxiaoxujian thanks a lot, it worked! You made my day ;)\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/195383557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233179585", "body": "Hi @SRombauts, sure, no problem at all :)\n\nJust to elaborate on some of the decisions:\n- I removed const because it was giving a compiler error. I didn't understand why, could you elaborate on that please?\n- I tried to do that, but I ended up reverting that because it was resulting in some issues, due to my lack of c++ experience.\n\nThanks for the amazing library \ud83d\udc4d \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233179585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233195104", "body": "Thanks a lot for the explanation :)\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233195104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233748044", "body": "It works, thanks a lot @jmgao and @SRombauts for the help.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233748044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "tallavi": {"issues": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/128", "title": "Disk I/O error when VACUUMing on android?", "body": "Hi,\r\n\r\nI'm not sure where the problem lie, but since this is the top level infrastructure I'm using, I'll try to post it here.\r\n\r\nI have a project that runs on both iOS and Android. On iOS - no problem. On Android, same code, I'm getting 'disk I/O error' when performing 'VACUUM'. This is a consistent issue, happening on a specific database file in multiple devices.\r\n\r\nWhat makes this file special perhaps is the usage of blob column, with some of the rows containing about 100k. The entire DB is just 10MB, and it's not corrupt. I'm able to read and write to it. It is opened exclusively with a single connection, and I'm not in the middle of a transaction. It happens even if the vacuum is the first query to execute (as long as there is data to vacuum, otherwise it's ok). \r\n\r\nAny idea of what else can I check to try to isolate the problem and figure out the source? Or perhaps a way to work around it? \r\n\r\nThanks!", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sorinmustaca": {"issues": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/127", "title": "Question: why is there no __declspec(dllexport) or __declspec(dllimport) ?", "body": "I need to compile everything as a DLL in order to be used from multiple programs.\r\nI have to define in SQLiteCPP.h \r\n#ifdef SDK_EXPORTS\r\n#define DLL_API __declspec(dllexport)\r\n#pragma message(\"Exporting symbols\")\r\n#else\r\n#define DLL_API __declspec(dllimport)\r\n#pragma message(\"Importing symbols\")\r\n#endif\r\n\r\n\r\nand then change every class to be exportable/importable:\r\n\r\nclass DLL_API ClassName.\r\n\r\n\r\nIs there a reason why not preparing the code for being used in a DLL ?\r\n\r\nIf no, I am happy to provide a patch to use this (even if the change is more than trivial).", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SRombauts": {"issues": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/123", "title": "CMake Error: install(EXPORT \"SQLiteCppConfig\" ...) includes target \"SQLiteCpp\" which requires target \"sqlite3\" that is not in the export set", "body": "Using CMake 3.5.1 under Ubuntu 16.04 I now get a CMake error about the new \"install\" step from #118\r\n\r\n```\r\n~/workspace/SQLiteCpp$ ./build.sh \r\n-- The C compiler identification is GNU 5.4.0\r\n-- The CXX compiler identification is GNU 5.4.0\r\n-- Check for working C compiler: /usr/bin/cc\r\n-- Check for working C compiler: /usr/bin/cc -- works\r\n-- Detecting C compiler ABI info\r\n-- Detecting C compiler ABI info - done\r\n-- Detecting C compile features\r\n-- Detecting C compile features - done\r\n-- Check for working CXX compiler: /usr/bin/c++\r\n-- Check for working CXX compiler: /usr/bin/c++ -- works\r\n-- Detecting CXX compiler ABI info\r\n-- Detecting CXX compiler ABI info - done\r\n-- Detecting CXX compile features\r\n-- Detecting CXX compile features - done\r\n-- CMake version: 3.5.1\r\n-- CMAKE_CXX_COMPILER '/usr/bin/c++' 'GNU' '5.4.0'\r\n-- CMAKE_CXX_FLAGS                ''\r\n-- CMAKE_CXX_FLAGS_DEBUG          '-g'\r\n-- Found PythonInterp: /usr/bin/python (found version \"2.7.12\") \r\n-- Found Cppcheck: /usr/local/bin/cppcheck Cppcheck 1.78\r\n-- SQLITECPP_RUN_DOXYGEN OFF\r\n-- Looking for pthread.h\r\n-- Looking for pthread.h - found\r\n-- Looking for pthread_create\r\n-- Looking for pthread_create - not found\r\n-- Looking for pthread_create in pthreads\r\n-- Looking for pthread_create in pthreads - not found\r\n-- Looking for pthread_create in pthread\r\n-- Looking for pthread_create in pthread - found\r\n-- Found Threads: TRUE  \r\n-- Configuring done\r\nCMake Error: install(EXPORT \"SQLiteCppConfig\" ...) includes target \"SQLiteCpp\" which requires target \"sqlite3\" that is not in the export set.\r\n-- Generating done\r\n-- Build files have been written to: /home/navineo/workspace/SQLiteCpp/build\r\n```", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/f7a3b0076999df64731e24047ab9a2ebcbd12ca6", "message": "Add a .gitbugtraq file for Git GUIs (SmartGit/TortoiseGit) to show links to the Github issue tracker."}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/0386c4359a1f28907b2254ca22f6dfb9c3d242d0", "message": "Fix README Markdown formatting"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/eba308d0645fbd5d562cd5dab6133d195dc878a0", "message": "Fix #141 Added reference to sqlite_orm: modern C++14, header only all in one file, no raw string queries, BSD-3 license"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/2de458d2f4487f6e942f0c707ee7b781d1de6518", "message": "Merge pull request #151 from gocarlos/master\n\nadded better instructions for using this project with cmake"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/db245822271dcea20fdf64a3e849253e5dd912a1", "message": "Remove coverity scans that are triggered for every build of the matrix and stall the OSX build"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/b4a932e48ab42bfc7045a443bce41bbea8bc4794", "message": "sqlite3_db_config() not using nullptr: cannot pass object of non-POD type 'std::__1::nullptr_t' through variadic function"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/94b75d56c0e8bfaa458a300e57ea63e3fd0e9dca", "message": "Add gcc 7 compiler to Travis-CI"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/86985dfd1ff2b89c751c761e345039899432c2e6", "message": "Fix nullptr detection with AppleClang"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/48740ac7c473d6f792a274fcba8348aefa691bbd", "message": "Remove custom clang and osx image version"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/5ed4a1ab79a13c5e4f51a7aeb8eac888f60f308b", "message": "nullptr compatibility: special detection for clang"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/ae1703f1ce928a9b0cbb8f564870832c3aaa183e", "message": "Set Doxygen HTML timestamp to NO"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/4f32da182c8b7f85f1a394201f22741ba785c1fc", "message": "Add my Utils.h file to define nullptr on C++98 and C++03 compilers"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/3f3b174fb3fa295d7a38eead33ce3ca5f417c0e8", "message": "Travis CI : enable automatic Coverity scans"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/0a70eb8e5d91f734a2bb55d508acbfd6423e72d0", "message": "Add a badge for the Coverity scan results"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/1832a35fecd9a74cc6e1063d16c13e0fff925e56", "message": "Merge pull request #148 from xforce/master\n\nAllows long int for bind when used with name"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/7c4689eb5179d68c79bf22381b475c191f77f31c", "message": "Update changelog"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/2286e66d5327efac58f8099b5ed39a382e1baf67", "message": "Fix a signed/unsigned warning"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/a3160dcfc2f80f692f3477a67c202ff87f75fa5a", "message": "Add Statement binding for long int values to Fix #147"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/eb065bf741c2422a84de0766fe7fb38cea53f195", "message": "Update version to 2.2.0"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/ab9e11e6c290eb761955f07fb42aa8deff22a04e", "message": "Updated changelog"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/014a8e2d7054d7e0bacf29ea4cdf15055b8c3afe", "message": "Merge pull request #143 from Skabunkel/master\n\nupdated sqlite3 to version 3.20.1"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/4f7899c95955b896798c44023a32bf76ce6f5307", "message": "Rename Statement::mbIsOk to mbHasRow"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/473a307b6dc3952bd4621bc106335df640f26b76", "message": "Merge branch 'try_execute'"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/c14d884ba5b35179ec66e4603780f0c783a4c99d", "message": "Mutualize code into tryExecuteStep() from PR #142 using SQLITE_MISUSE when statement needs to be reseted"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/94c7897d1b93344c7d3874fb6c109b6d67816430", "message": "Cleanup on PR #142 : remove whitespaces and mutualize some code"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/1a46a942b350f6178a6302a7e6ed0c9c131d62e2", "message": "Merge pull request #140 from fekir/clean_destructors\n\nRemove virtual destructor since there are no virtual methods or subclasses"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/5479cc09bfe43109b15219f3a5530b08c20ed0b0", "message": "Merge pull request #139 from fekir/clean_destructors\n\nRemove unnecessary noexcept identifier from destructors"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/926ebdab8f500f261858c7c94c6f77a9bfd72111", "message": "Merge pull request #137 from fekir/remove_noexcept\n\nRemove noexcept"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/9c15cf7c987dd70f399e4d92e5ff68384a61e46a", "message": "Merge pull request #136 from fekir/fix_stream\n\nEnsure that operator<< correctly prints strings with embedded '\\0'"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/3c3b23a712332df13a4ec5fc26d5a0173ced8239", "message": "Merge pull request #134 from drivehappy/master\n\nWarning cleanup under MSVC and Clang"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/8d0ef9700a8c6a70bc4f08ef7a537e983ecaaa96", "message": "Merge pull request #138 from fekir/enhance_sqlite_exception\n\nEnhance sqlite exception with overloaded constructor and default copy constructor and assignment operator"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/670d710f62c2a8e9ded6b41c65ca54202d0cf7ba", "message": "Update version to 2.1.0 and add appropriate changelog"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/1a2c7cbba707ea31affa056925a013b1041738cb", "message": "Update sqlite3 from 3.13 to 3.19.3 (2017-06-08)\n\nFix #125 Incompatibility in 3.19.0 using a new CMake variable SQLITE_USE_LEGACY_STRUCT"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/078941cdb1ec87f5107b3ae276740aa9bf5fb0fb", "message": "Fix #130 Statement::getColumns() template function now uses T{} instead of T()\n\nThanks to @cycycyc for providing this improvement"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/f08c15f43b27031b0d119a9c9320f9bad744e8f9", "message": "print CMake version"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/ad3956ab4f3caf368af729a31a3a8ee58c0f89a9", "message": "Comment out #111 \"linked SQLiteCpp to sqlite3\" since it breacks PR #118 \"install step\""}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/b830e6406f66f067e3ff42c0c37e91ae27ff39d5", "message": "Merge pull request #111 from Yanpas/cmake_link\n\nlinked SQLiteCpp to sqlite3\r\n\r\nSRombauts: explicitely as PUBLIC"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/efa4917f2258769032102fa5c4e976f1e891e717", "message": "Merge branch 'master' into cmake_link"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/0938ca68a704ef4c255e6511c4536dcb38040013", "message": "Set theme jekyll-theme-slate"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/03b229380518367167561516acc3947a91f46c2e", "message": "Update README.md\n\nCopyright notice 2017 and PayPal.me link & logo"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/d390342be7093394d89d97cec7c8f2bdb2941831", "message": "Merge pull request #120 from vbraun/cpplint-py3\n\nMake cpplint.py Python-3 compatible"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/c6dc1c7cdf00848887099b8d3850310ab70124b4", "message": "Merge pull request #119 from timrae/fix-warnings\n\nFix some warnings and increase safety checking on gcc"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/6932525174bc4aa2ac4e7095ac9e3e764874f960", "message": "Merge pull request #118 from timrae/add-install-target\n\nAdd install step"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/4d6356f700833d6fd6fbdb4a8ec74457401d74c7", "message": "Merge pull request #117 from dunkelfalke/patch-1\n\nUpdate Statement.h documentation"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/f69986a1c552c6f096046377fce1b9f1916a4820", "message": "Merge pull request #114 from dend456/master\n\nAdded convenience functions for constructing objects from a row"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/92bbeccffe53e13f31867e8c93a6179944def150", "message": "Fix #113 SQLite 3.7.15 minimum for  sqlite3_errstr()\n\nSQLite 3.7.15 was release in 2012-12-12"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/f00d69c9ad01a10b99ce146ef6fbb9aa88afd616", "message": "Fix #112 format error in README"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/cb44cca41c4616c27e74e15d7401d7f27d59dd57", "message": "Merge pull request #107 from jowr/master: encrypted databases\n\nAdded ability to open encrypted databases."}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/13d12f1e48550ad16c0d6192b9a9ebf103ad6917", "message": "Travis CI : do not try to \"brew install cmake\" on OS X"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/b6512c4c6fbb964c6889387234d8a13a71b2a817", "message": "Merge pull request #102 from Nemo1369/master\n\nRemove redundant const specifier"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/6d1806b2e49ecec1d793ca08d0fb0aeeab575617", "message": "Merge pull request #100 from Asriwi/master\n\nLink libssp when targetted"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/343a3ca9070e8a60c0b0b33feaf11145a726a6d1", "message": "Update README to mention the new \"SQLiteCpp_Example\" side repository"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/c5bc2d80cc9d03def377f915e47ba5529ec7c7ab", "message": "Fix broken build.sh (missing \"fi\")"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/d04c8699d25b74c1d934d788320daec0b986b505", "message": "Apply code style"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/bfd8bb2c632812add72de41efc33b76a6921df13", "message": "Merge pull request #96 from couchbasedeps/master\n\nFixed link errors calling Exception::getErrorCode()"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/9d1ea823137fc84aa0f44436be945053bbcde481", "message": "Fix #95: rewrite old instruction about adding SQLiteCpp as a CMake subdirectory"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/1470735e9485a3fd5793d00c18b5116b527c5ef2", "message": "Switch googletest submodule to latest commit of github.com/google/googletest.git"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/b99e8c62e9a8c04c9077eccd65589e1b4e75ecec", "message": "Cleanup Travis CI configuration"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/da725ed1cfe4b5e91b2abc5d59830287753dde37", "message": "Fix compiler warning (unused variable)"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/2b384d1441a8d1600d1fb58770d586d5adc4741d", "message": "Fix #94 warning: \"'extern' variable has an initializer\""}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/53c727c68d40493d61ffb788a79e88e2ae4dddd1", "message": "Update version to 2.0.0"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/e893575a7692b77bac64b9931ad1df558855d806", "message": "Add unit tests for getLibVersion() and getLibVersionNumber()"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/648ffe01e8c8d334266b15cb88d7eaabf3bb7176", "message": "Add Database::VERSION, getLibVersion() and getLibVersionNumber()\n\nUsefull to get SQLite3 version without including sqlite3.h in application code"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/f77b707206882d4d1b0ce0d4b95080c7a6f8cede", "message": "Revert recent switch from uint32_t/int64_t to use int/unsigned/long/long long and fix #93"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/93dd526341518985bbf2f7718e178bf5f184e902", "message": "Fix issue #92: force MSVC to use static runtime only if unit-tests are build\n\ngoogletest recommend using this runtime"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/2b36f52b6e5c22e96407817fa7e840dd7085d6d2", "message": "Add an explicit CMake error message on missing googletest submodule\n\n - build.bat now exit on error instead of trying to build or run tests"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/223c14139b73a6d9594422feb351fbd8a5891c45", "message": "Minor comment style cleanups"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/7983b81f759a03f62ff2323798a13ec0abcd9015", "message": "Mutualize code between getColumn(name) and isColumnNull(name) with a getColumnIndex(name)\n\n- mColumnNames is mutable so that getColumnIndex() and isColumnNull() can be const"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/73c3417aa7bb94a8016fb2e7531b512aa227f71c", "message": "Try to clone googletest on AppVeyor again"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/8b064a22a4b2aed42ccc6939d0c8aabe865f52f7", "message": "Doxygen now output warnings formated for MSVC by default\n\n(and easy to comment back to GCC like warnings)"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/5ee34521bae24fa3345d9d02af987ba31cb95e98", "message": "Merge pull request #91 from 4brunu/master\n\nAdd option to check if column is null by name"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/401b7361ed7b7cfa8b02b86a9a280d5210bac762", "message": "Renamed errmsg() and getErrStr() methods to getErrorMsg() and getErrorStr()"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/91abc3cb44b2ee66d96180506f9c8508324e09aa", "message": "Remove unused Exception constructor"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/fd8f50bdd9a72202d1c5d54da0c9d52ba6e3a802", "message": "Remove last #include <sqlite3.h> from a header : add a few public constants\n\n - Move #include <sqlite3.h> from Exception.h to a new corresponding .cpp\n - Add SQLite::OPEN_READONLY..."}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/2fbdfa4d378f0c1f39eae698b6582ec0ae4aae36", "message": "Merge pull request #90 from 4brunu/master\n\nAutomatically propagate public headers to other projects with CMake"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/57d991b85eb480e1e17053799322d2ad0f727642", "message": "Complete unit tests for Database::errmsg()"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/fb5508921aae455610fac2737869047591fdd5d6", "message": "Move #include <sqlite3.h> from Database.h to the .cpp"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/67a88298df7e4f74981f526959e3efb473a122d1", "message": "Add last missing unit test for Statement: bindNoCopy() by name"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/fe5a615a0db01c634639a86fa48fabd31ee10a9f", "message": "Add unit tests for Statement bindByName uint32_t and error getters"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/ed052a36bda667dc7646af7ad2f54d7ad185cf86", "message": "Add unit test for bindNoCopy()"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/5056c29f9e62d06d459de1f9fe47bbe57459b3be", "message": "Add unit test for bind() of an uint32_t value"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/8275c7fb29021b5babf58a3b3fba611071f560a0", "message": "Move #include <sqlite3.h> from Statement.h to the .cpp"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/4dd7b84dc00be4fc2f28225a1bc41cc8737e6df2", "message": "Update changelog with recent additions"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/d9bc842b664dd9fd491d8662700b27ad81d90be6", "message": "Add unit test of getString() for blob with null character"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/2abcf45bb9b243d9405ad5c1858333039984c52b", "message": "Remove Column::errmsg() method : use Database or Statement equivalents"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/300f2782816e3decfa0199b6e34f2d053f123945", "message": "Move #include <sqlite3.h> from Column.h to the .cpp"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/b033abb3fd7dcbeafd680d30e951f4fce0463deb", "message": "Add unit tests for the new Column getter and cast operator"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/646d25ca95a14f480d7a6a6ec3e62593fe3d8760", "message": "Switch from sqlite3_int64 to int64_t"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/a2abbf1d96d364b8add074c91a369d1f29f4e3f4", "message": "Fix Doxygen comments"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/db7aefb27123eb072acc6fe43aa01085a40d93d2", "message": "Renamed Backup accessors and use a forward declaration to sqlite3_backup"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/9fa00ea5ed2030ac7e76530dd2cbbc27669ed777", "message": "Fix wrong version in Doxygen config file"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/e4e8d9c1d7439e210efb714e59341ce7cb8cd601", "message": "Merge #86 from branch 'origin/add-bind-no-copy-pull-request-86'"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/9c03f4e86bb1f360bd88d7b21f7cef1baae19f6a", "message": "Add bindNoCopy() for C-style null-terminated text strings"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/e7384b30a827fef4024315dd92d2a42e00a6658e", "message": "Remove unfinished Statement move constructor from PR #86\n\n - see comments in code: needs a move constructor on Statement::Ptr"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/bcdbea2cf84b89c8eaa51f805d05fda3651df13b", "message": "Style cleanup on top of PR #86"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/4e7c12f629950849a24d8b325ed4bed2c44f4e14", "message": "Add VariadicBind.h from PR #85 to CMake for Visual Studio\n\n + fix style issues (cpplint)"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/a28283f1b82e9e6a8e4b209260938d60f6685b8a", "message": "Update cpplint for int32_t C/C++ types"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/0cdb40d6141c6d5af5a37aa4e287dbc86dee75be", "message": "Use the new SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION from SQLite 3.13 for security reason"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/94c658d82813e468da9c2d8d624a9f6b028d8f3f", "message": "Update sqlite3 from 3.12.2 to 3.132 (2016-05-18)"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/c5ca1db62cab85110b807ed2573b2abcff75cbbc", "message": "Print cppcheck version at CMake generation"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/390efbd301c65b29a07a41884edfe78a1b2a7d56", "message": "Cleanup unit test for Variadic bind()"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/3e56274e69e1e37c3f12887036016c485716da26", "message": "Add last missing unit-tests to Statement and Transaction"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/c0b2d81db963061a2e6fb75e0dfcff2ccdfc3bb2", "message": "Add a unit test for error in exec()"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/249639ca70b3a25f13bd096c510043e525ebad10", "message": "Add unit tests for binding parameters by name"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/0c43747065559f030fac204b4c93f2448369793c", "message": "Add unit tests for statement bindings + removed an assert() for ~Transaction()"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/b913932be243893f4620d4a0e1de27451c136062", "message": "Add a unit test for transactions\n\n + a few small minor new assert in other tests"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/cda4b89f5088f3c06833401ca5eceb1f7218a89d", "message": "A few more unit tests for backups, statement and database\n\n - should get us to 100% on Backup"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/69d9b0805c300258230fdd8529edcb6bb8c33a61", "message": "Minor new unit tests for backups and database busy timeout"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/ef26cf09a15aba56f417f5c8512ba71353e2c49e", "message": "Update CHANGELOG with recent merge requests"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/d98cc930cc6355c9d6a3748b3f35df73da711013", "message": "CMake prints the compiler version instead of the Travis script"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/90699f95eac5f938a9ff8e509cb8ab61d57c5f63", "message": "Cleanup post merge request #84 : one more exception constructor"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/bd6c13c6ca7d90cbf81bf9911861076bb819768d", "message": "Merge pull request #87 from pauldreik/pullrequests/buildvariants\n\nUpdate travis config to build with several compilers"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/50501a41e2acb255e7f63a3d11d391c9f1c17d1b", "message": "Fix test coverage by using gcov '-lp' options\n\n NOTE: it would be good to also be able to keep unused inline functions,\n but there is a problem between gcc 4.8 and -fkeep-inline-functions"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/435d62e85bbcd17d2b757294ac122ada3755b6b5", "message": "Simplify license and coverage badge"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/d00185dee53fb506dba87b478382ea3940aa4e7b", "message": "Fix usage of coveralls by specifying a project root and valid exclude patterns\n\n - also, send coveralls only for gcc builds"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/b9f3e4d58559689ea0621c411deac80016c04f2d", "message": "Switch to Ubuntu 14.04 Trusty VM : CMake 2.8.12 with add_compile_options()"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/0e81f4a538dfdc5b3abbb960610da3da28938a11", "message": "Merge pull request #85 from pauldreik/master\n\nVariadic bind convenience function for C++14"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/bf61578f596bc67461b186af5a05e6f9295ce102", "message": "Merge pull request #84 from DouglasHeriot/exception\n\nBetter exception messages when statements fail"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/b55f521ca4cf3c9065bbeb1ef67c33d3aae61ff7", "message": "Merge pull request #81 from bretsko/master\n\nFix Readme speling"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/c0583498569c36f128e10b3c5bb236c65e6cde17", "message": "Update sqlite3 from 3.10.2 to 3.12.2 (2016-04-18)"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/60652b37676afbce03019efb0be3bc692a42d254", "message": "Update to a few CMake debug messages"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/1c23f39d7c390a18ef8c9d29189bb29b43a47fb8", "message": "Note on redistribution of SQLite source files\n\nAs stated by the MIT License, you are whelcome to reuse, modify, and redistribute the SQLiteCpp source code\nthe way you whant it to, be it a git submodule, a subdirectory, or a selection of some source files.\n\nI whould love a mention in your README, a web link to the SQLite repository, and a mention of the author,\nbut none of those are mandatory."}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/f6302f68c8fac6637631ece083b09781e3ace0be", "message": "Update README with Visual Studio versions used"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/204490709719a278487b79ef67cdbf9d052730bc", "message": "Add clang 3.4 to the list of supported platforms\n\nAnd also gcc 4.6.3, both used by Travis CI"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/2210b30b5229c665eb0ce81f347afdda17cce02e", "message": "Update sqlite3 from v3.9.2 to 3.10.2 (2016-01-20) and update version to 1.3.1"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/c53d885393bebc71814bb6ea6b0cc3bc05613cd3", "message": "Update copyright notice to 2016"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/e9a2c9bb57ecea863cd74f404b89f0249f312d15", "message": "Remove biicode support, as servers will shutdown the 16th of February"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/aafd35a863025d8d35fd0085917ad830fe1f61d1", "message": "Do not build Doxygen documentation by default"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/1c0bed5c85cd95f579bf339d3ef03f1da283234c", "message": "Update changelog for next release"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/b7b440de5d8b835195627da61ba267e3b4359dbc", "message": "Fix #73 Wrong exception thrown by Database constructor\n\n - switched from sqlite3_errmsg() to sqlite3_errstr() where applicable"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/24153e529330f55627f8caf617ebc2e92d8d99a6", "message": "Update sqlite3 from v3.8.8.3 to v3.9.2 (2015-11-02)"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/a573c8c6b18c510a5ba3e73de785fb59d4e9cdcf", "message": "Now build the provided copy of SQLite3 C library instead of using the Linux sqlite3-dev package\n\n - for ease of use and cross-platform/linux distribution compatibility"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/8f28c4c58f4d73c5a51cbe17f0f447d7d5a051a4", "message": "Update version to 1.3.0 with new Backup class"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/544ecf4101287b8179f0ca63bba26b73a1712bb7", "message": "Remove unneeded Backup::getHandle() accessor"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/d51633836abdc4f606c9ea07fc460f4899bd05be", "message": "Merge pull request #71 from hongshibao/master\n\nSupport backup of DB file"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/7fa11f679e3e68e939b28e37994abf1fb5282d5b", "message": "README rework and slight update"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/18aa9e4deffc26ed0c8ad8ee4439f9d9dd2edd4a", "message": "Fix a too long comment"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/65309d5db8a982ef163b248515e97b33b8767fc3", "message": "Enable GCov instrumentation in Debug build mode and upload results to coveralls"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/fb42c64beadab28b0b8a529f16a8d3226ee1aeba", "message": "Chromium googletest library moved to the new googlesource.com infrastructure"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/ebd19b0b051549d2fbd02e769726336c1a5da7c1", "message": "Update to Travis Continuous Integration build script\n\n - Migrating from legacy to container-based infrastructure\n   by removing the \"sudo\" command and moving to addons apt packages"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/cc208781469f1c27c871dfcdf847e44da0222f86", "message": "Merge pull request #67 from HNO3/fix-column-conversion-string\n\nFix implicit conversion to std::string of Column class for Visual C++ 2015"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/de2fd218a1decccb4f233bc74ca472ed4e8c1249", "message": "Update version to 1.2.0 with new getHandle()"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/4bd8786e6a53eb555c4686da107af60119964f93", "message": "Fix #65 Database::getHandle() exposes underlying SQLite handle\n\n - needed to mix with other libraries or advance usage"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/f39b84c87997f7f7385dc9aac97b0714e85582e3", "message": "Fix #66: Update documentation on installation, CMake and unit tests"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/2c62e9595cdbf541dcd062a0a2a7b8d7007e1086", "message": "Add badge for License"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/af78d59349fd013341746b345961e3f19ecae60d", "message": "Move Gitter chat badge after introduction"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/d36c39ccf36a29f995a57669f31e7980cac25e1c", "message": "Fix CppDepends most useful warnings:\n\n - Convert last old-style cast to reinterpret_cast<>\n - Statement::Ptr is now private, with a friend declaration for Column\n - noexcept should not be defined as the depreacted throw()"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/8c7aced3fb8bce8522d1ac5b7dd8e619d28662b2", "message": "Merge pull request #59 from gitter-badger/gitter-badge\n\nAdd a Gitter chat badge to README.md"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/16be0dc3aa03ab53bd05e3f32bfd8da0c9f17ba9", "message": "Fix #58 \"Compile fails in gcc 5.1.0\" : correct detection of noexcept support for GCC >= 4.7"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/9bb0aed80509b2020938fb7f15b6daf2765f33ad", "message": "Update googletest to latest, and deactivate certain class of warnings for its compilation"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/b7a3910579bb0894c6c1802598f6c26316939daa", "message": "cpplint output correct MSVC warnings"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/e46500dae88a7df4ef26de307ceb2a47bedad1d5", "message": "Merge pull request #56 from aurelien35/Dev\n\nRemoved a warning in release build with Visual Studio"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/e4b5d6eeed7c36c7a12de6813304b998d7d24493", "message": "Update version to 1.1.0 with bugfix and new loadExtension()"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/594b9c26b2c593e062646a31ed13258828a6ebf3", "message": "Merge pull request #52 from nazim-can-bedir/master\n\nAdded conditional support for extension loading"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/e8af4f673825b373d9a0773cc452e92530e57df8", "message": "Merge pull request #51 from portwaypoint/master\n\nAdded support for extension loading"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/318f742b5ca3fd66c325ea0451419e0cb4929438", "message": "Revert use sqlite_errstr instead of sqlite3_errmsg that fixed #48\n\n - sqlite3_errstr() is new from SQLite v3.7.15, not supported on Ubuntu 12.04\n   which is what is used for continuous integration with Travis CI\n - Only case of error is SQLITE_BUSY: \"database is locked\" (some statements are not finalized)\n   so use this generic string instead"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/3ffc07b1c2b37d3215178265a87e4e7de43f510d", "message": "Merge pull request #49 from onuraslan/fix-48\n\nUse sqlite_errstr instead of sqlite3_errmsg"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/4f4c9aa918f7f3ffb3a09b0461ba10d43b9c91b6", "message": "Add a release badge to show 1.0.0"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/09db07ccc7450be0b525821f7525810c0505316d", "message": "Updated version to 1.0.0 changelog and copyright date"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/e537195625bda6af177f36b7a3db5b3bff9bdafe", "message": "Fix #47 setBusyTimeout in constructor\n\n - add corresponding Unit Test"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/3c39f1ff1c6a94a61b5e434f251f372dfe84608b", "message": "Fix 3 new cpplint warnings about max line size"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/b9322fb0abfb8828e5028824ec4b11c642373824", "message": "Example now print SQLite version"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/f5e0cafa721dd54d63f4c6a832420344d26eb3ec", "message": "Minor fixes to comments and fix the build"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/31dbcda9ad7a1151f01e802a470683bb39be7571", "message": "Minor fixes to comments and an API"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/8797f16d12de8949a2e3199f7a45242d7ec3e5b9", "message": "Add Statement::getColumnName(aIndex)\n\n - enable getting names befor gettings rows of result"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/078365febcc3171650e2beb8f68d6add04208778", "message": "Fix part of issue #34 about 64 bits long with GCC on AMD64"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/7e16e8545f646a61919a51c8c13171fd9e3b3409", "message": "Re-enable SQLITE_ENABLE_COLUMN_METADATA by default under Windows"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/f407e4e4692755aad2f3cf30de2a43f2ea563c64", "message": "Add unit test for Column names\n\n - improve other Column unit test"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/1ed18ce2734ead822c1b68915b24b7b96c99e216", "message": "Add unit test about Column operators"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/abebb231c611eea2c3fbc6ebb8a2d6c5022c32aa", "message": "Add a new test to show persistence in file (on contrary to in memory databases)"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/59ceff2ec2647839347a98ddc5574d637b207d6c", "message": "Deactivate unit test for setBusyTimeout() not supported before SQLite 3.7.15\n\n - sqlite3 3.7.9-2ubuntu1 of Ubuntu 12.04 used by Travis CI"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/acaed41465b9d343c15e511ba0729b2476b18d9f", "message": "setBusyTimeout() now uses check() and throw in case of error\n\n - add unit test for setBusyTimeout()\n - add unit test for in memory databases"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/18620457b14d0e718da633f6a3164f27b0313406", "message": "Add some more Unit Tests"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/b10bf6faa54d78fa12f0aed08ff32e7b43c1a59f", "message": "Re-enable SQLITE_ENABLE_COLUMN_METADATA by default under Windows\n\n - cleanup to the CMakeLists.txt for better readability"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/416958f094db23bf60e575cf9766963dd7f869ff", "message": "Add sample code for getColumn() by name\n\n - sample code provided by #46\n - rework example for better readability"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/7fbfc2967779d0baff53ac09603b4c053ce6473d", "message": "Fix #23 optimized Statement::getColumn() by name\n\n- fix Statement::getColumn(apName) provided by #45 but was not working\n  instead of using #46 that conflicts with current master\n- rework it by using a map of columns name as\n  a cache populated the first time the method is called\n- add corresponding Unit Test"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/d45ec996a34d2f129c11564fc4c72845de366595", "message": "Fix the example overload pb on GCC & Clang\n\n - uses explicit getText() instead of implicit conversion"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/6a2f8a6a8b710b8d110b6f06ce2f8643cd40081a", "message": "Cleanup and comment on the overload for GCC & Clang"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/82364ea419354f17660e4c05c097b48c8b88e70e", "message": "Minor improvement of example1 to demonstrate variable reuse"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/29a964531430445733d81d2953a9902353003ab4", "message": "Fix cpplint style warning introduced by #45"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/6499f93b07fb9ec803a59730a460b72d957c4738", "message": "Fix cmake find Python Interpreter (instead of Libs)\n\n - and use it"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/dae5388ece9c12dee3e6ed43fcfcc3b24e4f0ed0", "message": "Merge pull request #45 from HighSparrow/master\n\nFix issue: Column by name #23"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/5ec39df7e09067534084176e3f1f4a9b5e0b2ad2", "message": "Fix #44 update information on alternate wrappers, and remove the outdated dedicated file."}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/4c0cc910bbfbabe8b379b27d283f27d397a2c8dc", "message": "Simplify scripts following changes to paths of the example"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/7cfd3e82f129de5d00957ff9ea5e0d39a4d90789", "message": "Merge pull request #42 from MariadeAnton/bii/updates\n\nimproved biicode support\r\n\r\nThanks, I've re-run the build with succes!"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/a5d0ba40236aafabe8f0e6cdbed8cd295e6ca606", "message": "Merge pull request #41 from MariadeAnton/sqlite/update\n\nUpdate sqlite to v3.8.8.3"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/987f9e465fe9e0d4073c9288b067d05bbf9b9871", "message": "Fix AppVeyor build and add build status badge and link"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/9d4829ab1eb624c91c2e5d3f07697f25af19733c", "message": "Cleanup and improvement to build script\n\n - no googletest on appveyor as cloning this submodule does not wordk"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/ef974c2be686e126ec1062ec8eea0dc7f4540e9b", "message": "Add AppVeyor config file"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/0baa5f99d5eaa4d0339ca3bd9f7c2847d54580ae", "message": "Merge pull request #40 from matthin/patch-1\n\nFix small spelling mistake"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/b84721aed320a6a2071e723452f7693039ba831a", "message": "Update copyright date in recently modified files"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/4d86a9a7bc3df6d6f850339f46b329267f0ddb00", "message": "Remove Doxygen deprecated attributes"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/81d7398dd92a1aa20ef0b379df4b5bc027f6f034", "message": "Add scripts to MSVC solution"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/f31a459cd8e56a48cbdd14a75a2f407f8add0e70", "message": "Revert #31 Statement now stores the status of the last operation.\n\n - the check in the destructor was not a good idea finaly,\n   and I added instead a getErrorCode() method"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/bfdf288d3d1d685f4f3ab9e5a3b51f058167240a", "message": "Fix #37 Last error code cannot be accessed\n\n + added corresponding basic unit tests"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/15180a99195352726ef1eedd9a16e494852244d8", "message": "Merge pull request #35 from MariadeAnton/master\n\nadded biicode support"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/91a98f8c7375627dfa415ccbeafaba59e3763831", "message": "Update Google Test submodule to latest upstream commit with better Visual Studio 2013 support"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/285246f48ef1cc18345c0ef56af473da80d09574", "message": "Merge pull request #31 from AndyLing/master\n\nStatement now stores the status of the last operation."}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/5812460a212f244a65144c36aded6d2f1ac36eef", "message": "Reactivated dev tools in scripts and Travis CI config file"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/7dc1ae92a27593ab102c7a4fceda246229595dd0", "message": "Merge pull request #32 from r4d2/master\n\ndeactivating optional build settings\r\n\r\nTODO: reactivate them on dev build scripts & travis"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/55edadd56d0d6f506954ad00c3b9a5d425814a2f", "message": "Fix cpplint warning for Travis Continuous Integration"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/8b0fa672bfca950bb9c4ea121ca7eaa7fdea2451", "message": "Fix cpplint warning for Travis Continuous Integration"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/618169cf362212a665a0374e415c82b1cbd4bde2", "message": "Merge pull request #29 from mc-server/FixClangWarning\n\nFix for clang warning about Column's implicit constructor."}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/881228f84dde8f8acb4ec1841f81d207e00e5516", "message": "Merge pull request #30 from mc-server/weirdflags\n\nRemoved weird GCC flags causing problems."}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/19f740ec0b5b596a2afb4a0d63533bec7e016b9f", "message": "Merge pull request #26 from saaqibz/patch-3\n\nclearBinding functionality to statement.cpp"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/10ceb2f0f623630b06c70fb87404866ad69bd2d9", "message": "Merge pull request #25 from saaqibz/patch-2\n\nclearBinding"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/ba578196adc2bfffda0fdf6f289dcb243fa57587", "message": "Fix C flags mixed with CPP flags"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/e07e6230e872f672c082be2fece03387b489fd46", "message": "Remove all project files as they are all outdated: use CMake only"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/90e0c4ec4d5743d79b1b4d0a845e350221b2bfb4", "message": "Merge pull request #22 from mc-server/NoInternalLib\n\nAdded option SQLITECPP_INTERNAL_SQLITE."}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/eea90c70e49a4f73004a8a4e9b697ef27f4573c1", "message": "Added sqlite_modern_cpp to README\n\nA modern C++11 wrapper, all in one file, MIT license"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/7465989a8400c662725e503e7e3d94b5615fe50c", "message": "Merge pull request #21 from kartikkumar/master\n\nUpdate Doxygen config file to Doxygen 1.8.6\r\n\r\n - doxygen -u"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/61a2c398582c2c30c24bf322eb79945ea4dfc466", "message": "Fix the include path in the default Makefile for \"example1\""}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/ff68cc4eecb2bad51885cc02697be9db1162b814", "message": "Merge pull request #18 from kartikkumar/cmakeFindModule\n\nCMake module to easily link SQLiteCpp in other CMake projects"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/41e285347bd78e03e2daf2397a73a3cca7b3426a", "message": "Fixed #20 MSVC still does not have \"noexcept\" keyword"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/d79787359f535ee8727d7701de0d5f6ee236da29", "message": "Fix #19 default options to OFF, easier to handle for newcommers"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/17114845", "body": "Yes, you are right, I needed to be a lot more explicit with this thread-safety topic.\n\nThis SQLiteC++ wrapper does not add any lock (no mutexes) nor any other thread-safety mecanism\nabove the SQLite library itself, by design, for lightness and speed.\n\nThus, SQLiteC++ naturally supports the \"Multi Thread\" mode of SQLite ;\n\"In this mode, SQLite can be safely used by multiple threads\nprovided that no single database connection is used simultaneously in two or more threads.\"\n\nBut SQLiteC++ does not support the fully thread-safe \"Serialized\" mode of SQLite,\nbecause of the way it shares the underling SQLite precompiled statement\nin a custom shared pointer (See the inner class \"Statement::Ptr\").\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/17114845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/19977498", "body": "Hi,\n\nThanks!\nNo you are right, I never managed to take the time converting the few examples to real unit-test code.\n\nNow that I am using this code as-is, I do not feel the urge to unit-test it (kind of too late)...\nBut I will do it, this would help increase the global quality of this project.\n\nRegards,\nSRombauts\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/19977498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/24881815", "body": "Thanks for reporting, I will investigate this.\n\nCould you provide some more information about your system? Which Linux distribution, or at least what GCC version?\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/24881815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/24881970", "body": "This project is countinuously tested with Travis CI under Ubuntu 12.04, but this is obviously not enough, I'll try to improve the test coverage.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/24881970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/24883454", "body": "Thanks, I'll look at this when I will come back home, in a few hours.\nLe 22 sept. 2013 15:28, \"Alexander\" notifications@github.com a \u00e9crit :\n\n> I have Linux Mint 15 - GCC 4.7.3\n> Hope to resolve the errors because your code is really clean and I want to\n> use it in my future projects :D .\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/SRombauts/SQLiteCpp/issues/3#issuecomment-24882032\n> .\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/24883454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/24891084", "body": "If you get the linker error \"Column.cpp: undefined reference to sqlite3_column_origin_name\",\nit's that your \"sqlite3\" library was not compiled with\nthe SQLITE_ENABLE_COLUMN_METADATA macro defined (see http://www.sqlite.org/compile.html#enable_column_metadata).\nYou can either recompile it yourself (seek help online) or you can comment out the following line in src/Column.h:\n\n``` C++\n#define SQLITE_ENABLE_COLUMN_METADATA\n```\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/24891084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/24891313", "body": "@AlexxanderX, did you compile yourself your sqlite3 library? If so, you can simply recompile it with the SQLITE_ENABLE_COLUMN_METADATA flag defined in the sqlite3 source file.\n\nOr did you used the standard sqlite3-dev dev package from Mint?\n\nI think you are using a 64bit Mint distribution, that is what your warnings suggest. Is this true?\n\nCheers,\nSRombauts\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/24891313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/24925050", "body": "Okay, but for the sqlite3 library itself, where did you get it?\n\nI will install Mint in a VM to check this issue.\n\nFor now on, please try to comment the line I told you, the #define in\nColumn.h, and tell me if it works, OK?\n\nSRombauts\nLe 23 sept. 2013 13:10, \"Alexander\" notifications@github.com a \u00e9crit :\n\n> Yes, I use 64bit Mint distro with sources from here/GitHub. What can I do?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/SRombauts/SQLiteCpp/issues/3#issuecomment-24912594\n> .\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/24925050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/25246820", "body": "Thank you for reporting this @AlexxanderX.\n\nI made this flag an option to pass on CMake command line, and now the default is \"OFF\" so that it will work everywhere by default.\nAdvance usage will require setting the SQLITE_ENABLE_COLUMN_METADATA flag on client code.\n\nSRombauts\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/25246820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/26747328", "body": "Hi, sorry for the delay!\n\nI have no plan to support UTF-16 SQLite APIs, as thy are not really portable;\n\nThey does match wchar_t/wstring UTF-16 under Windows, but doesnot match with wchar_t/wstring UTF-32 under Linux.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/26747328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/27173046", "body": "Thank you very much for your fix!\n\nRegards,\nSRombauts\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/27173046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/27217722", "body": "Nice to see someone testing SQLiteC++ under Cygwin!\n\nThanks for your time,\nSRombauts\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/27217722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/27558092", "body": "Hi @breezewalker,\n\nYour question is interesting; what can be done in case of an error when finalizing a SQLite statement? Problem is that the database is already in a corrupt state, so probably nothing can be done to handle correctly the case.\n\nNote that in Release (NDEBUG) mode you will not get this call to assert(). It is only in Debug mode.\n\nWhat I would like to do/should do is offer an assert callback that the user can redefine (like the Boost assert callback system).\n=> then you would do what you want with it, either producing an error message, or do nothing.\n\nI'll try to do something today.\n\nRegards,\nSRombauts\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/27558092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/27606954", "body": "Hi @breezewalker, so know you can define SQLITECPP_ENABLE_ASSERT_HANDLER to use your own SQLite::assertion_failed() handler where you can produce an error message instead of aborting your app.\n\nPlease look at the example1 ; SQLITECPP_ENABLE_ASSERT_HANDLER is defined only in the CMakeList.txt (not in the plain Makefile nor in the MSVC provided projects).\n\nLet me know if its okay for you use.\n\nRegards,\nSRombauts\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/27606954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/29058248", "body": "Nice proposal, `sqlite3_column_name` is indeed \"better\" than `sqlite3_column_origin_name` in many situation.\n\nAnd another benefit is that it does not require the `SQLITE_ENABLE_COLUMN_METADATA` macro to be defined!\n\nBut your edit is not enough, I will have to rework a little bit the API to offer both methods\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/29058248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/29069578", "body": "Thank you @NachoSoto, \n\nNow:\n- `Column::getName()` returns `sqlite3_column_name`\n- `Column::getOriginName()` returns `sqlite3_column_origin_name`\n\nRegards,\nSRombauts\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/29069578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/30225300", "body": "Hi @Aykelith, thank you for asking;\n\nThe problem is that I use the very useful tool \"cppcheck\" http://cppcheck.sourceforge.net/ for static analysis.\n\nSo, either you install cppcheck and add it to your path, or else you can build only what you want : \n        make example1\n\ninstead of \n        make all\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/30225300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/30239209", "body": "Hi @Aykelith,\n\nthis is because you have defined SQLITECPP_ENABLE_ASSERT_HANDLER in your application\n\nthus you need to define also a handler for assertion, like in the example1/main.cpp:\n\n#ifdef SQLITECPP_ENABLE_ASSERT_HANDLER\nnamespace SQLite\n{\n/// definition of the assertion handler enabled when SQLITECPP_ENABLE_ASSERT_HANDLER is defined in the project (CMakeList.txt)\nvoid assertion_failed(const char\\* apFile, const long apLine, const char\\* apFunc, const char\\* apExpr, const char\\* apMsg)\n{\n    // Print a message to the standard error output stream, and abort the program.\n    std::cerr << apFile << \":\" << apLine << \":\" << \" error: assertion failed (\" << apExpr << \") in \" << apFunc << \"() with message \\\"\" << apMsg << \"\\\"\\n\";\n    std::abort();\n}\n}\n#endif\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/30239209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/30239331", "body": "Or you can undefine the SQLITECPP_ENABLE_ASSERT_HANDLER compilation flag to remove this functionality. In this case SQLiteC++ will use the standard C/C++ assert() function, and on Debug build only.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/30239331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/30258922", "body": "Can you try with the example above but without the #ifdef/#endif\n\nThe problem is that you have compiled the library with this flag, but you are compiling your application without this same flag.\n\nThis leads to inconsistent binaries\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/30258922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/31937921", "body": "Ok, problem is that I don't use Mingw under Windows.\nSolution should be apply in the first lines of CMakeLists.txt. Could you\nlook at it?\nLe 9 janv. 2014 15:17, \"Prisacariu Alexandru\" notifications@github.com a\n\u00e9crit :\n\n> Switched to Windows to compile the app for Windows but I have some errors:\n> \n> mingw32-make\n> :: warning: cppcheck: Cppcheck cannot find all the include files (use\n> --check-co\n> nfig for details) [information/missingInclude]\n> [ 0%] Built target cppcheck\n> Scanning dependencies of target SQLiteCpp\n> [ 20%] Building CXX object src/CMakeFiles/SQLiteCpp.dir/Column.cpp.obj\n> G__~1.EXE: error: unrecognized command line option '-rdynamic'\n> src\\CMakeFiles\\SQLiteCpp.dir\\build.make:56: recipe for target\n> 'src/CMakeFiles/SQ\n> LiteCpp.dir/Column.cpp.obj' failed\n> mingw32-make[2]: **\\* [src/CMakeFiles/SQLiteCpp.dir/Column.cpp.obj] Error 1\n> CMakeFiles\\Makefile2:147: recipe for target\n> 'src/CMakeFiles/SQLiteCpp.dir/all' f\n> ailed\n> mingw32-make[1]: **\\* [src/CMakeFiles/SQLiteCpp.dir/all] Error 2\n> Makefile:84: recipe for target 'all' failed\n> mingw32-make: **\\* [all] Error 2\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/SRombauts/SQLiteCpp/issues/12\n> .\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/31937921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/32052066", "body": "Yes, I am sorry, I know nothing about this tool chain and lack the time to\nlearn, try and investigate your problem...\n\nBut I will take into account your needs and merge the fixes needed!\nLe 10 janv. 2014 19:23, \"Prisacariu Alexandru\" notifications@github.com a\n\u00e9crit :\n\n> Managed to create .a file, but from what I know I need .dll for Windows. I\n> will come back with more information about my progress.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/SRombauts/SQLiteCpp/issues/12#issuecomment-32051857\n> .\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/32052066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/32108654", "body": "Yes, providing a std::string API is a good idea, but automatic conversion\nto string is a really bad thing for performances and memory usage &\nfragmentation.\n\nSo it would be nice to provide inline overloaded methods with std::string\nin input, that would just call the actual API.\nExcept for constructors, where we cannot call another constructor (before\nC++11)\n\nIs this clear for you?\n\nRegards,\nSRombauts\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/32108654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/32109124", "body": "Yes, exactly, preferably with const parameters : (const std::string& str\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/32109124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/34345118", "body": "Thanks a lot for this!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/34345118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/34345154", "body": "Thanks a lot for this!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/34345154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/35415911", "body": "Thanks a lot! \nCheers \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/35415911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/36149748", "body": "Sorry for the delay @saaqibz, this is an interesting question; I've looked at how I deal with this in my own application code\n\nI am currently using a wrapper around const char\\* pointers in a form like the following;\nconst char\\* pText = getColumn().getText();\nreturn (pText?pText:\"\");\n\nSo know I am thinking of adding an alternative API to automatically deal with NULL pointer if useful application code. This would be something like:\ngetColumn().getText(apDefaultString=NULL);\nThat could be used in the following ways;\ngetColumn().getText(\"[null]\"); => get \"[null]\" instead of NULL ( a valid std::string instead of a crash)\ngetColumn().getText(\"\"); => get empty string \"\" instead of NULL\ngetColumn().getText(NULL); => get NULL\n\nWarning - API change;\ngetColumn().getText(); => default get empty string \"\" instead of NULL\n\nThis is to handle default std::string() cas.\n\nCheers,\nSRombauts\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/36149748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/36153560", "body": "Thanks a lot @saaqibz!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/36153560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/38771328", "body": "Hi, thanks for this, I will take the time to think about it.\nLe 26 mars 2014 20:07, \"Kartik Kumar\" notifications@github.com a \u00e9crit :\n\n> Hi S\u00e9bastien,\n> \n> After spending a lot of time looking through the code, I realised that the\n> problems I was having with the newest code is due to the default options\n> switched on in the main CMakeLists.txt file.\n> \n> The options that caused me problems are:\n> 1. SQLITE_ENABLE_COLUMN_METADATA: this is switched on by default, however\n> under Mac OS X, the native SQLite library is not built with column name\n> support. I tried building a new version using Homebrew but couldn't for the\n> life of me get SQLiteCpp to link to it.\n> 2. SQLITE_ENABLE_ASSERT_HANDLER: this is also switched on by default,\n> however from what I can see, it will always result in linking problems\n> unless the user provides an implementation of assertion_failed().\n> \n> In the first case, it might still be alright to leave the option on,\n> however if a large number of users have pre-built versions of SQLite\n> installed, this might cause issues.\n> \n> In the second case, it seems like default case will cause problems out of\n> the box for a new user who has no custom implementation of\n> assertion_failed().\n> \n> After switching both these options off, I could link to the SQLiteCpp\n> static library without any problems.\n> \n> Would it be an idea to switch both these options off by default? Feels\n> like the safer option in general.\n> \n> Regards,\n> \n> Kartik\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/SRombauts/SQLiteCpp/issues/19\n> .\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/38771328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/38933359", "body": "Thanks a lot @kartikkumar, I took into consideration what you proposed, and make both OFF.\n\nRegards,\nSRombauts\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/38933359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/38933570", "body": "Thanks @akamyshanov, I fixed it.\n\nPlease give it a test (I am under Linux presently)\n\nRegards,\nSRombauts\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/38933570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/38933760", "body": "Thanks a lot @kartikkumar !\n\nRegards,\nSRombauts\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/38933760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/38934038", "body": "Hi @kartikkumar, you'll notice I have reorganized the source-tree and started to add some very basic unit-tests, but this will take some time as I do it by very short bursts!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/38934038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/38941444", "body": "I was also using Boost.Test\n\nThey truly are quite equivalent, but Googletest is smaller, quicker to\ncompile, and somehow easier to learn because better documented.\n\nKnow that I am using std::shared_ptr instead of Boost ones, I don't use\nBoost any more\nLe 28 mars 2014 17:02, \"Kartik Kumar\" notifications@github.com a \u00e9crit :\n\n> @SRombauts: yes, I noticed, great! I see that you're using the Google\n> testing framework. I've used the Boost unit testing framework a lot but it\n> doesn't look like it's difficult to implement tests in GTest.\n> \n> If it's helpful, I can work on a few simple unit tests too. Might be good\n> in that case to divide tasks.\n> \n> Good work!\n> \n> Kartik\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/SRombauts/SQLiteCpp/issues/2#issuecomment-38935839\n> .\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/38941444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/38941683", "body": "For Unit Tests, I would love some help!\n\nIt takes me a great deal of time because I constantly check sqlite3 manual\nand my own documentation, to improve each of my API when I add tests to it.\n\nI will not work on it for a while, so do whatever you what / can.\n\nBest Regards\nLe 28 mars 2014 17:02, \"Kartik Kumar\" notifications@github.com a \u00e9crit :\n\n> @SRombauts: yes, I noticed, great! I see that you're using the Google\n> testing framework. I've used the Boost unit testing framework a lot but it\n> doesn't look like it's difficult to implement tests in GTest.\n> \n> If it's helpful, I can work on a few simple unit tests too. Might be good\n> in that case to divide tasks.\n> \n> Good work!\n> \n> Kartik\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/SRombauts/SQLiteCpp/issues/2#issuecomment-38935839\n> .\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/38941683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/44962519", "body": "Sorry for the delay, I never had the chance to test this change before today!\n\nAnd thanks!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/44962519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/52698228", "body": "Hi, you can simply exec multiple SQL statements separated by semicolon (;)\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/52698228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/52878547", "body": "Okay, I see what you mean, like the 'executemany()' of the Python binding. \n\nI think this could be handy, but this will be in fact less efficient than doing this by yourself (because you will have to prepare the data into an intermediate dynamically allocated list of arguments). \n\nI reopen this request. \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/52878547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/54867266", "body": "Yes, I see. Thanks for reporting!\nLe 8 sept. 2014 20:40, \"worktycho\" notifications@github.com a \u00e9crit :\n\n> If Column.h is included in a file compiled in clang in c++11 mode with\n> -Weverything set it generates a warning that auto-generating copy\n> constructors when a destructor has been defined is depreciated.\n> \n> Warning text:\n> \n> /home/tycho/MCServer/src/../lib/SQLiteCpp/include/SQLiteCpp/Column.h:54:13: warning:\n>       definition of implicit copy constructor for 'Column' is deprecated because\n>       it has a user-declared destructor [-Wdeprecated]\n>     virtual ~Column()                               noexcept; // nothrow\n>             ^\n> /home/tycho/MCServer/src/../lib/SQLiteCpp/include/SQLiteCpp/Database.h:177:16: note:\n>       implicit copy constructor for 'Column' first required here\n>         return execAndGet(aQuery.c_str());\n>                ^\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/SRombauts/SQLiteCpp/issues/27.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/54867266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/55583070", "body": "> it would be nice if the statement knew what the last error was and only called the assert if\n> finalize returned a different error.\n\nYes, sure, this seems a nice improvement!\nLe 15 sept. 2014 14:21, \"AndyLing\" notifications@github.com a \u00e9crit :\n\n> Hi,\n> \n> I just wanted to question the use of the assert in the Statement::Ptr\n> destructor. It seems to me that there are some circumstances where the\n> sqlite3_finalize can return an error that is \"normal\" behaviour.\n> \n> For example. A statement that fails because it does an INSERT that\n> violates a UNIQUE constraint. This error gets handled by the exception\n> thrown by executeStep, but then the destructor generates an assert which\n> can't be handled. (The documentation for sqlite3_finalize says If the most\n> recent evaluation of statement S failed, then sqlite3_finalize(S) returns\n> the appropriate error code or extended error code.)\n> \n> I have added my own assertion_failed function, but it would be nice if the\n> statement knew what the last error was and only called the assert if\n> finalize returned a different error.\n> \n> Any thoughts?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/SRombauts/SQLiteCpp/issues/28.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/55583070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/55953864", "body": "Thanks! \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/55953864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/55955277", "body": "Fixed by pull request #29\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/55955277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/55955624", "body": "Hi, thanks for asking, this is a common request, but there is no efficient way to do this with SQLite3 itself.\n\nWe could add a map of column names and do the look-up for the user, though\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/55955624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/55956108", "body": "We should handle the 2 cases separately: expected \"normal\" errors, and real assert() when something is weird.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/55956108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/56025865", "body": "Do you have the time to make a pull request with your solution?\nLe 18 sept. 2014 11:10, \"AndyLing\" notifications@github.com a \u00e9crit :\n\n> Yes, although my reading of the finalize documentation suggests \"normal\"\n> is to return the same error as the last execute error. So it may be good\n> enough to just remember the return result of the last statement operation\n> and only do an assert if finalize returns something different. This would\n> certainly be a good start.\n> \n> Thanks for looking into this.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/SRombauts/SQLiteCpp/issues/28#issuecomment-56013590.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/56025865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/56624185", "body": "Sure, you are right, but we'll need to re-add these options to the Travis continuous integration file, or the build.sh script. \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/56624185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/56636079", "body": "Thank you so much!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/56636079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/56636266", "body": "Fixed as of your pull request #31\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/56636266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/60139696", "body": "Hi,\nWhy not, but presently I am using it as in the example, with only implicit type cast operator, like that:\nstd::string value = query.getColumn(1);\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/60139696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/60140165", "body": "Hi,\n\nThe problem is that sqlite3 only have UTF16 support (and only for some APIs) while std::wstring are UTF32 under Linux, so not really portable...\n\nThough adding UTF16 support for Windows is really straightforward if you need it.\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/60140165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/60151767", "body": "Ok then, let me know!\nLe 22 oct. 2014 22:17, \"Polkovnikov Philip\" notifications@github.com a\n\u00e9crit :\n\n> If I remember correctly, UTFnn differ only on the encoding of code points\n> in the different quantity of different (1/2/4 bytes) code units. So the\n> conversion should be possible with some codecvt magic\n> http://stackoverflow.com/questions/7232710/convert-between-string-u16string-u32string.\n> Though query preparation etc. do not support Unicode at all, so the best we\n> can do is to keep them string.\n> \n> Probably I could even make a pull request when I get some time as it\n> doesn't seem too scary right now.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/SRombauts/SQLiteCpp/issues/33#issuecomment-60148010.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/60151767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/70301468", "body": "Thanks, I'll give biicode a try. \n\nYes please, I would love an appveyor CI file to build it in Windows! \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/70301468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/72053134", "body": "Thanks for your support!\n\nSo yes, why not a Visual Studio config as this is what I would use to test\nunder Windows.\n\nThe fact is I am presently well under the water with my few personal\nprojects...\n\nCheers!\n\nLe jeu. 29 janv. 2015 13:30, MariadeAnton notifications@github.com a\n\u00e9crit :\n\n> Would you rather do it with Visual Studio? Need help setting up your\n> appveyor account?\n> \n> Just let me know :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/SRombauts/SQLiteCpp/pull/36#issuecomment-72016595.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/72053134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/77743789", "body": "Hi, sorry for the delay, I tried to look at this functionality, but I will need some time to test it. \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/77743789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/77744057", "body": "Sorry for the very unusual delay, I was busy with my family and other projects!\nI've looked into this and decided to clean up the Statement class. I will remove the mLastStatus that is not always correct, and add an errcode() method (both to Database and Statement classes) \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/77744057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/83654172", "body": "Thanks @matthin!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/83654172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/83661333", "body": "Hi @MariadeAnton, sorry for the delay!\n\nI have already taken some time to review the proposed changes, and this a few time some while ago... \nBut I must admit I don't like merging so much different subjects / different files in one shot.\n\nSo instead of waiting more, or closing this, let me propose the following:\nCan you please split it in at least 2 pull requests?\n1) biicode updates : I will take them directly (also I don't like the ALL UPPER CASE syntax, but why not)\n2) update to sqlite 3.8.8.3 : thats also okay\n3) Appveyor file : I will certainly do it all myself in time, to make it more simple\n\nAgain, sorry for the time it took me to acknowledge your work!\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/83661333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/84099862", "body": "Thanks to you for your patience!\n\nLe ven. 20 mars 2015 18:59, Mar\u00eda de Ant\u00f3n notifications@github.com a\n\u00e9crit :\n\n> Sure, I get that :) - I'll split them asap and remove the appveyor file.\n> \n> Thanks!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/SRombauts/SQLiteCpp/pull/38#issuecomment-84089132.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/84099862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/85672576", "body": "Thanks a lot @MariadeAnton.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/85672576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/85672864", "body": "Hum, did you see that the build are not passing?\nI don't have energy to look into it this evening...\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/85672864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/86486130", "body": "Hi, thank you, but I cannot find any commit from you in your pull request; seems to me that you made a small mistake ;) \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/86486130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/86617107", "body": "Hi, I forgot to tell you that I cherry-pick your commit instead of merging your branch; there was those 3 extra commits on it.\n\nAnd as a clean cherry-pick, you are still credited for the fix :)\n\nThanks again!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/86617107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/92891986", "body": "Thanks for the update: clearly, the information was outdated.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/92891986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/94539381", "body": "Thanks for this!\n\nI will take care of the formatting issues revealed by cpplint in Continuous Integration.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/94539381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/96513336", "body": "Ok, I should have test it, or review it.\nPerhaps can you add an example of its usage in the example1 app?\nOr add a unit-test? \n\nAlso, Can you please rebase this above current 'master'? This pull request is unmergeable due to conflicts with the cleanups I did on top of your previous work. \n\nCheers \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/96513336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/97159370", "body": "Thanks for reporting, I'll look into this.\n\nDuring this time, you could use the explicit forms like this:\n\n``` c++\nstd::string value;\nvalue = query.getColumn(1).getText()\n```\n\nand\n\n``` c++\nint64_t id = query.getColumn(0).getInt64();\n```\n\nLet me now if this suits you.\nOr perhaps could you propose a new API?\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/97159370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/97335276", "body": "I have reproduced your issues and will try to work on this in the following days, but I have not much spare times for this.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/97335276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/97735073", "body": "Is Database::setBusyTimeout() not sufficient for your needs? \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/97735073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/97755924", "body": "Use Database::setBusyTimeout() on each newly opened connection with a not null value in ms so that SQLite will retry in case of contention between multiple threads. \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/97755924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/97957409", "body": "Thanks @HighSparrow, I've integrated you sample code!\n\nI've finally rework the method you provided, by using a std::map to cache the association of column name to index.\nI've also added a basic unit test for it.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/97957409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/97958158", "body": "Yes, I think setting this in the constructor is a must-have.\nPython binding is doing just this!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/97958158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/98541106", "body": "Due to be released in v1.0.0\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/98541106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/98541524", "body": "PB with 64bits long fixed for upcoming release 1.0.0\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/98541524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/98541770", "body": "Unit Test Suite still not perfect but now good enough for v1.0.0 release\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/98541770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/99216616", "body": "Oh, just after one look on the Database destructor I can see that the error must be on the SQLITECPP_ASSERT() macro trying to get an error message on a database closed one line above!\n\nI shall look into recent history to see how I messed this one!\n\nI will try to reproduce and to fix this on tomorrow... \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/99216616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/99217975", "body": "Thanks a lot for reporting this!\n\nI think it is not a real word issue as my programs, samples and unit test all seems quite happy, but this is still nasty :(\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/99217975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/99288989", "body": "Thanks a lot! \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/99288989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/99718640", "body": "Just to let you know, I had to revert this (I know use a constant string as error message) because sqlite3_errstr() is to new for good support under Linux : it is not in Ubuntu 12.04 used by Travis CI continuous integration.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/99718640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/99963891", "body": "Well, at least it does the job.\n\nLe jeu. 7 mai 2015 10:04, Onur Aslan notifications@github.com a \u00e9crit :\n\n> I see. Yes, it's much better to use a static message in this case.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/SRombauts/SQLiteCpp/pull/49#issuecomment-99761740.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/99963891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/99964060", "body": "Well, my preferred way would be to add it to Database, for the sake of\nsimplicity.\n\nCheers!\n\nLe jeu. 7 mai 2015 10:31, Point notifications@github.com a \u00e9crit :\n\n> I'd like to be able to to enable module support.\n> \n> In order to do this, I need to invoke this line from SQL:\n> \n> SELECT load_extension('filename');\n> \n> however this will file until I have...\n> \n> int sqlite3_enable_load_extension(sqlite3 *db, int onoff);\n> \n> So, how best to add this in? I'm thinking I could either create a\n> Utility.h with an equivalent class in the include directory, make it a\n> friend of Database (like Statement.h) and get access to the db connection\n> that way.\n> \n> Alternatives which don't seem so appealing are: add database connection ID\n> accessor method (breaking the encapsulation but allowing anyone to directly\n> use the numerous other missing calls), or add methods directly into the\n> Database class (most of which will never be used by the majority of users).\n> Opinions? Ideally I'd like to do this in a way that allows me to contribute\n> back the changes.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/SRombauts/SQLiteCpp/issues/50.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/99964060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/101615940", "body": "Thank you very much for your contribution! \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/101615940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/101694240", "body": "Closed thanks to PR #51 \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/101694240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/102749880", "body": "Thank you. \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/102749880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/103461339", "body": "If you are willing to develop and test this for your need, I will integrate it, for sure! \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/103461339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/103783511", "body": "No, those are on the TODO.txt as 'wanted features'. \n\nHonestly, they should be pretty easy to add to current API, but I never need them. \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/103783511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/104204200", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/104204200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/104254504", "body": "Yes, you are right on your assumption that every target would need a specific CMakeLists.txt in its subdirectory.\n\nI'll try to take the time to review this.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/104254504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/105856145", "body": "Thanks @worktycho for reporting this!\n\nTell me if anything else (like compile warnings) needs more fix/cleanup/updates\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/105856145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/107315395", "body": "Hi, thanks for all your suggestions, I'll take some time to think and answer them. \n\nI  mostly don't want to break existing API since I know released 1.x\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/107315395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/124523737", "body": "''''\n    The source directory\n        V:/03 git_repo/SQLiteCpp/googletest/CMakeLists.txt\n    does not contain a CMakeLists.txt file.\n''''\n\n=> this is because you did not get the git submodule dependency (\"git submodule init\" + \"git submodule update\", see README or build.bat script)\n\nCheers\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/124523737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/124525098", "body": "Hi, sorry for not answering this: this could be helpfull, but it would add some overhead I am not wiling to impose to everyone.\n\nWe could do that through optional macros.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/124525098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/124525578", "body": "Hi, sorry, I don't understand what you propose. Can you explain ?\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/124525578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/135686550", "body": "Thanks for reporting this, however this is a duplicate of #48 \"Memory error in destructor\" which was fixed in release 1.1.0 from may 18.\n\nHave a look at the [current ~Database() code in master](https://github.com/SRombauts/SQLiteCpp/blob/master/src/Database.cpp#L82)\n\nDo you agree?\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/135686550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/135745317", "body": "No problem :) \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/135745317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/136091331", "body": "Did you 'git submodule init' and 'git submodule update'?\nThis is required to get the' googletest' library. \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/136091331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/136277751", "body": "Thanks for reporting, I'll open an issue about documentation. \n\nEdit : see #66 Update documentation on installation and unit tests\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/136277751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/138065880", "body": "Thanks @unphased for reporting this!\nTell me if you something else is missing.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/138065880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/142507840", "body": "Thanks for tour contribution!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/142507840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/147479140", "body": "Hi ! Yes, this is on my to-do list, but never used this myself. If you can provide a pull request I will be glad to review it!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/147479140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/150555536", "body": "Thanks for reporting! \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/150555536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/151946472", "body": "Thanks for this great feature!\nI will try to do a proper code review soon, but this already sounds good to me, especially with unit tests.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/151946472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/151982960", "body": "Thanks again for your contribution!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/151982960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/155477401", "body": "Hum, problem is that sqlite3_errstr() is availlable only on recent Linux distributions, not in the one used for continuous integration testing ; will need some #ifdef\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/155477401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/155500734", "body": "Thanks for reporting this!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/155500734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/155501238", "body": "Hi, did you see the examples in the README?\n\nSecond sample shows how to create a database:\n\n``` C++\ntry\n{\n    SQLite::Database    db(\"transaction.db3\", SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE);\n\n   ...\n}\ncatch (std::exception& e)\n{\n    std::cout << \"exception: \" << e.what() << std::endl;\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/155501238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/155505444", "body": "Fix with commit a573c8c where I deactivated some not so useful specific warnings\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/155505444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/155506063", "body": "Fix by #71 Support backup of DB file : thanks!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/155506063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/158179896", "body": "Hi, \nYou should try to remove the flag '-fstack-protector' from the CMakeLists.xml\nPlease tell me how it turns out! \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/158179896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/158284786", "body": "Nice! \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/158284786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/158512471", "body": "Hi! Well, in general opening a Database is synonym of opening an existing data file of an application (a SQLite3 *.db3 file). Some application have only one central db3 file, others use many of them.\nThus, in those cases there is no meaning of a \"default\" Database...\n\nIf what you want is \"open the unique Database once and use this unique connection everywhere\", then you could, for instance, use the design pattern \"Singleton\" to share the connection across your whole application (a Singleton gives you a unique instance with a static interface).\n\nBut sometimes you don't really want to open a file, then you can open a \"in memory\" Database, but then you still can name it as you like, so there is no real \"default one\".\n\nIs this clear enough?\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/158512471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/167114261", "body": "It should, yes, but the CMakeLists.txt would need some modifications, I suppose!\n\nI cannot test this without a Mac. Can you try this and report here for everyone else? \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/167114261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/167114437", "body": "Sorry for not answering more directly, but yes this could get useful! \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/167114437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/167752209", "body": "Hi, thanks for the advices, and please come back with your results when you get some. \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/167752209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/169357885", "body": "Hi, Yes, this is the universal problem of SQLite : you should never edit a database simultaneously from multiple threads, it is not designed to do this.\n\nYou have to serialize your edits, for instance using a fifo with a unique writer thread.\n\nEdit: to be clear, this is a problem of your usage of the SQLite database, not something I can manage in this C++ wrapper of the SQLite library.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/169357885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/169360591", "body": "Please have a look to online resources on thoses difficult problems, for instance using busy handlers.\n\nSee http://www.sqlite.org/cvstrac/wiki?p=MultiThreading\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/169360591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/172651657", "body": "Hi, yes this is related to question  #33 No `wstring` overloads: I do not plan to add full UTF16 support as this is not portable or will require much work on my part (that I don't have).\n\nYou could try to add this support where you need it, and provide me with a pull request so that I could integrate it into the master branch!\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/172651657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/212378012", "body": "Hi, easiest way to integrate the code if you don't know anything about CMake would be to:\n1. copy the source files on a directory\n2. then in Visual Studio \"Add existing files\" to your project\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/212378012/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/213675192", "body": "Hi, you are trying to compile without exception which I do not support (see your error message \"error: exception handling disabled, use -fexceptions to enable\"). \n\nCheers! \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/213675192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/213676058", "body": "You're welcome :) \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/213676058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/215340921", "body": "Thanks a lot for this, I am a bit ashamed of the bad quality of the README I wrote...\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/215340921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/218441803", "body": "Hi, \n\nThis looks like a problem with sqlite3, not with the wrapper. \n\nCan you look if you have it with a previous version of my wrapper (because I updated the sqlite3 recently)? \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/218441803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/218459457", "body": "No, I would like to know if you can try with a \"previous version\" (older one) of sqlite3 or of the SQLiteCpp wrapper to see if this is a recent issue.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/218459457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/218460068", "body": "Other thing to try, after googling your error message ([undefined-reference-to-stack-chk-fail](http://stackoverflow.com/questions/4492799/undefined-reference-to-stack-chk-fail)):\ntry to remove the flag [-fstack-protector on the CMakeLists.txt file of SQLiteCpp (line 33)](https://github.com/SRombauts/SQLiteCpp/blob/master/CMakeLists.txt#L33).\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/218460068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/220028816", "body": "You are welcome!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/220028816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/221520001", "body": "Hi,\n\nI don't know why exactly this happens, but it is related to the \"cpplint\" task that is generated it you have Python installed.\n\ncpplint is a static code source analyser (by Google)\n=> this is only useful for development so you can just turn it of by passing -DSQLITECPP_RUN_CPPLINT=OFF to the cmake command line (at generation time)\n(You can have a look to [the build.sh script](build.sh) if you want to see how to pass arguments to cmake) \n\nTell me if this works for you,\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/221520001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/221615104", "body": "Hi!\n\nThanks a lot for this work, seems great at first glance!\n\nA question first: why using both sqlite3_errmsg() and  sqlite3_errstr(), my understanding is that the second one (the more recent one) superseded the old one: does errmsg() sometimes provide more information than the first one?\n\nAnd can you please fix the compile errors?\n- https://travis-ci.org/SRombauts/SQLiteCpp/jobs/132862602\n- https://travis-ci.org/SRombauts/SQLiteCpp/jobs/132862601\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/221615104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/221617516", "body": "Also, I think public accessors to private variable members would better fit the code used in the rest of the library.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/221617516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/221781234", "body": "Thanks a lot for your great contribution, very appreciated! \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/221781234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/221781316", "body": "Implemented by @DouglasHeriot, thanks! \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/221781316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/226444200", "body": "Thanks a lot for this high quality work!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/226444200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/228519588", "body": "Hi, thanks, I agree with what you wrote and will review the code.\n\nIn the mean time, please have a look on the build failures.\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/228519588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/228570178", "body": "I did a first review of the code, looks great!\n\nIf you can add some unit tests it would be great. Else I hope to look into it in a few days. \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/228570178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/228677271", "body": "Hi Paul, thanks a lot for all your work, it is really appreciated!\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/228677271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/229638719", "body": "Hi @DouglasHeriot, any news on unit tests for this?\n\nIf you want to do some, try to rebase to my master to get the new unit tests, so that you can complete them.\n\nIf you don't think you will have the time I can merge this and complete afterward.\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/229638719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/230099013", "body": "Totally understandable!\n\nI will merge part of your work, and add some unit test.\n\nI will not take the unfinished Statement move (see comments in code: needs a move constructor on Statement::Ptr). It needs some more work, and that would require even more unit tests that I am not able to do for now.\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/230099013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/230565433", "body": "Hi @kassane,\n\nare you looking for building with MinGW on Windows, or crosscompiling under Linux?\n\nCheers! \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/230565433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/230671510", "body": "you don't need to modify the CMakeLists.txt you can use the SQLITECPP_RUN_CPPLINT option like this:\n\nmkdir build\ncd build\ncmake -DCMAKE_BUILD_TYPE=Debug -SQLITECPP_RUN_CPPLINT=OFF -DSQLITECPP_USE_GCOV=OFF -DSQLITECPP_BUILD_EXAMPLES=OFF -DSQLITECPP_BUILD_TESTS=OFF .. - G \"MinGW Makefiles\" \nmake\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/230671510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/231388765", "body": "Hi @DouglasHeriot, did you see that I managed to add unit tests for all your methods?\n\nAlso, I removed the Statement move constructor as I believe it was incorrect. \nIf you need it, please provide a use case, even better with a use case. \n\nIn fact, to better exploit C++11 features we should rewrite the use of Statement::Ptr to wrap it in a std:::shared_ptr (hence the name). \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/231388765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/231389180", "body": "Also, thanks a lot again for your work, it's always inspiring to get some help like that!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/231389180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/231779151", "body": "Hi @4brunu,\n\nThank you for this contribution, it is appreciated!\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/231779151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233116943", "body": "Thanks @4brunu!\n\nI merged it as-is, but I will rework some of it:\n- removing const on isColumnNull() does not seems right\n- I believe duplicating code to map indexes to names is not a good idea either\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233116943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233195025", "body": "The const compiler error was weird: the problem is that we know have two overloaded functions isColumnNull(), one taking an (int), the second one taking a pointer (const char*).\nThus when calling it with zero isColumnNull(0) the compiler has to decide witch one is the best one since 0 is also a nullptr.\n\nThere is no problem if the two methods are both const or not const, but there is an error if only one is const: I think that the compiler is not able to decide witch one is the best are they are not real overload...\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233195025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233229202", "body": "You are right, static runtime is only required/recommended by googletest, so I should force it only in coordination with unit tests. \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233229202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233235496", "body": "Hi, sorry, I didn't see the issue!\nThe problem you have is you need to \"git init submodule\" as stated in the README file to get the \"googletest\" library for unit tests (if you want to build them).\n\nAlso, I could make CMake detect that the googletest/ folder is empty when the submodule is missing and then only issue a clear warning and disable unit tests.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233235496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233333698", "body": "Implemented as of #86 Add bindNoCopy methods to allow binding std::string with SQLITE_STATIC\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233333698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233425259", "body": "Hi @jmgao, thanks for the detailed report (and thanks to @4brunu)\n\nI will sure look into this issue and your proposed solution!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233425259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233589676", "body": "Hi @giumas, the fix I implemented is only the simplest option of all, that is, I know force the use of static runtime only when Unit Tests are enabled (which is OFF by default in the CMakeLists.txt).\n\nIf this does not suit your needs, please let me know.\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233589676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233593763", "body": "Thanks again @jmgao, and please @4brunu, let me know if this actually works in your use case!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233593763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233594239", "body": "Hi @changjurhee,\n\nAs of 2b36f52, I've added an explicit CMake error message on missing googletest submodule.\nAnd build.bat and build.sh now exit on error instead of trying to build or run tests.\n\nHope this help!\nCheers\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233594239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233615152", "body": "For future reference, [link to the python documentation](https://docs.python.org/2/library/sqlite3.html):\n\n``` python\n# Larger example that inserts many records at a time\npurchases = [('2006-03-28', 'BUY', 'IBM', 1000, 45.00),\n             ('2006-04-05', 'BUY', 'MSFT', 1000, 72.00),\n             ('2006-04-06', 'SELL', 'IBM', 500, 53.00),\n            ]\nc.executemany('INSERT INTO stocks VALUES (?,?,?,?,?)', purchases)\n```\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233615152/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233748313", "body": "Good to hear, thanks! \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233748313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233761265", "body": "Nice! \n\nAlso, you can propose any other changes as Pull Requests if you wish. \n\nCheers \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233761265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/235172349", "body": "Hi, thanks for reporting! \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/235172349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/235175146", "body": "Thanks to you, I released the v2.0.0 without a warning.\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/235175146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/236113146", "body": "Hi @xsacha, I am not sure of what you mean, can you give a simple example?\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/236113146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/236920749", "body": "Thanks for reporting, this was plain wrong, and there is also no more a src/CMakeLists.txt file\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/236920749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/237761889", "body": "Thanks for this catch, I'll update unit-tests to cover these cases\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/237761889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/239631262", "body": "Nice to hear, I would have answer the same, but a few hours later. \n\nCheers! \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/239631262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/240155757", "body": "Good catch, I could check python version, or update cpplint. \nThanks! \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/240155757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/243367706", "body": "Hi @Asriwi, thanks for reporting this!\n\nCould you update this Merge Request with the code you are using?\n\nAlso, I should really update the AppVeyor continuous integration build script to add build for MSYS and MINGW...\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/243367706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/244324458", "body": "Hi @beraldofilippo, what you have done is already quite good, I'll try to create a new side-repository with an example of \"from scratch project\" so that I can discover what can possibly go wrong.\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/244324458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/244422738", "body": "Hi @beraldofilippo \n\nThere is a simple mistake in your CMakeLists.txt, target_link_libraries() should target your executable, the the sqlite3 C library (and also, link pthread and dl on Linux, but not on Windows) : \n\n```\ncmake_minimum_required(VERSION 3.6)\nproject(dbextractor)\n\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")\n\ninclude_directories(SQLiteCpp/include)\nadd_subdirectory(SQLiteCpp)\n\nset(SOURCE_FILES src/main.cpp)\nadd_executable(dbextractor ${SOURCE_FILES})\ntarget_link_libraries(dbextractor SQLiteCpp sqlite3 pthread dl)\n```\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/244422738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/244423368", "body": "Please have a look at the new [SQLiteCpp_Example](https://github.com/SRombauts/SQLiteCpp_Example) side repository for a standalone \"from scratch\" example.\n\n(for now only tested under Linux)\n\nThanks again for reporting this common problem !\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/244423368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/244423794", "body": "Thanks for this! \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/244423794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/244424120", "body": "This seems like a good idea, but I am now lacking the time to do this, so no promise.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/244424120/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/245890950", "body": "Thanks @Nemo1369, good catch!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/245890950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/246849063", "body": "Yes, that's it. Thanks \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/246849063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/246928364", "body": "Okay, so here are some answers to your questions:\n1. sqlite3ext.h is for designing DLL to extend sqlite, that is, to create dynamic plugins. So it is useful only for very rare/specific use case. shell.c is the sqlite3 command line tool, so no usage for a library\n2. if you have a reliable recent sqlite3 lib package, use it, it's always better than to use the source files I've added to my source tree\n3. link error \"dlclose\": you need to link to Linux lib \"dl\" (and pthread) see https://github.com/SRombauts/SQLiteCpp/blob/master/CMakeLists.txt#L236 : target_link_libraries(SQLiteCpp_example1 dl)\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/246928364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/247765754", "body": "Hi, I am not sure of what is the problem you get. Can you share the exact log of assertion or the type of memory errors ? \n\nAre you sharing the Database accross multiple threads? This is not allowed by SQLite itself (at least not with default compile options)\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/247765754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/247766529", "body": "Okay, what I understand is that you want to open the db dynamically (that is, not in the constructor like in my examples) and then use it many times until closes.\n\nBest way to do this would be to use a pointer to Database. \n\nLet me get back home to make an example for you. \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/247766529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/247776990", "body": "So, first of all, here is how I use SQLiteCpp usually, with constructors (RAII):\n\n``` C++\n\nclass A {\npublic:\n    A(const char* path);\n    void insertValue(const char* value);\nprivate:\n    SQLite::Database    db;\n    SQLite::Statement   insert;\n};\n\nA::A(const char* path) :\n    db(path),\n    insert(db, \"INSERT INTO test VALUES (NULL, ?)\")\n{\n}\n\nvoid A::insertValue(const char* value)\n{\n    insert.bind(value);\n    insert.exec();\n}\n\nint main ()\n{\n    A a(\"test.db3\") // \"CREATE TABLE test (id INTEGER PRIMARY KEY, msg TEXT)\";\n    a.insertValue(\"example\");\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/247776990/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/247778339", "body": "And then, an example with dynamic allocation, using shared pointers:\n\n``` C++\n\n#include <SQLiteCpp/SQLiteCpp.h>\n\n#include <iostream>\n#include <memory>\n\nclass A {\npublic:\n    void open(const char* path);\n    void insertValue(const char* value);\n\nprivate:\n    std::shared_ptr<SQLite::Database>   db;\n    std::shared_ptr<SQLite::Statement>  insert;\n};\n\nvoid A::open(const char* path)\n{\n    db.reset(new SQLite::Database(path));\n    insert.reset (new SQLite::Statement(*db, \"INSERT INTO test VALUES (NULL, ?)\"));\n}\n\nvoid A::insertValue(const char* value)\n{\n    if (db && insert)\n    {\n        std::cout << insert->getQuery().c_str() << \" with '\" << value << \"'\" << std::endl;\n        insert->reset();\n        insert->bind(value);\n        insert->exec();\n    }\n}\n\nint main ()\n{\n    A a;\n    a.open(\"test.db3\"); // \"CREATE TABLE test (id INTEGER PRIMARY KEY, msg TEXT)\";\n    a.insertValue(\"example\");\n    return EXIT_SUCCESS;\n}\n```\n\nAll this is untested, no time presently...\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/247778339/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/247864833", "body": "Very nice, I'll make \u00e0 real example out of it for everyone else. \nCheers ! \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/247864833/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/248518453", "body": "Hi @agauniyal, thank you very much and sorry about the lack of support...\n\nThe DesiredSyntaxError is a flawed SQL query written by design with a syntax error to test the error mechanism :)\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/248518453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/261984059", "body": "Hi @alext234,\r\n\r\nNo there is no such hook presently (https://github.com/SRombauts/SQLiteCpp/search?utf8=%E2%9C%93&q=sqlite3_update_hook)\r\n\r\nIf you want it is trivial to use the \"raw SQLite3 database handle\" to use directly any SQLite3 C API call.\r\n\r\nElse, it would be really easy for you to implement this feature into the SQLiteCpp wrapper, then I could integrate your code if you will.\r\n\r\nCheers!", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/261984059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/264469008", "body": "Hi, thanks for provinding this!\r\n\r\nI am not entirely sure on how to integrate your code. I would prefer not to add more parameters to the Database constructor since there are already to much of them.\r\n\r\nWould it be possible to use a setter instead, a Databse::setKey() for instance?\r\nThis would better stick with the underlying SQLite3 API.\r\n\r\nCheers!", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/264469008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/264786148", "body": "Thanks a lot for provinding this! \r\nPlease have a look at the build errors, something is not working as intended... ", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/264786148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/265094312", "body": "Hi @timrae, yes, there is a blob APIs.\r\n\r\nYou should use the following method:\r\n    void Statement::bindNoCopy(const int aIndex, const void* apValue, const int aSize);\r\n\r\nwhich would be something like:\r\n    statement.bindNoCopy(2, my_vector.data(), my_vector.data().size());\r\n\r\nbut you should probably add an explicit cast like that:\r\n    statement.bindNoCopy(2, static_cast<const void*>(my_vector.data()), my_vector.data().size());\r\n\r\nLet me know if it's working,\r\nCheers!", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/265094312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/pulls/comments/90865358", "body": "Sure, I'll try this at some point.", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/pulls/comments/90865358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "sinall": {"issues": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/115", "title": "Unable to install in VC++ 2015 Community", "body": "Error Message:\r\n\r\n> Severity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\n> Error\t\tCould not install package 'SQLiteCpp 1.1.1'. You are trying to install this package into a project that targets 'native,Version=v0.0', but the package does not contain any assembly references or content files that are compatible with that framework. For more information, contact the package author.\t\t\t0\t\r\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/115/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alext234": {"issues": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/106", "title": "is there any update hook interface?", "body": "For e.g. wrapper of the function sqlite3_update_hook()", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gencer": {"issues": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/103", "title": "dynamically create 'DB' item and use it until close", "body": "On native sqlite3 library i can assign db object to a class variable and use it in other methods without open everytime.\n\nBut with SQLiteC++, I cannot share the object. Assertion or memory errors occured.\n\nAll I want create SQLite::Database and assign it to class so the whole class can use the db as needed without explicitly open everytime. \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/247766119", "body": "No, Not like that. Let me explain;\n\n```\nclass A {\npublic:\n  static void openDb();\n  static void insertValue(const char*);\nprivate:\n  static SQLite::Database db;\n};\n\nvoid A::openDb() {\n  //something like this->db\n  db(db_path, params)\n}\n\nvoid A::insertValue(const char *value) {\n  //this->db or just db or A::db...\n  SQLite::Statement query(db, \"insert into...\");\n}\n\n```\n\ninsertValue does not accept db, db\\* or &db. It wants me to dynamically open database each time i fire the method.\n\nHovewer, If i declare db beginning of .cpp file i can use it. But the problem is, my method provides the db file path. so i need to create/open that db somewhere in my method.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/247766119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/247766949", "body": "@SRombauts exactly! Thank you for the example. I am awaiting your reply on this.\n\n_BTW, For this case, which is more stable or proper? Opening every time and close at the end of execution? Or use it until app gets closed?_ (DB will be small as few mb's. Rows extensively inserted and deleted.\n\nNote: I also tried this:\n`SQLite::Database db = new SQLite::Database(...);`\nBut this time **query()** method does not accept **db** item.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/247766949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/247796727", "body": "@SRombauts above code worked smoothly without single error. I also managed to adapt to my static classes.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/247796727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "agauniyal": {"issues": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/97", "title": "Add SQLiteCpp to wrapdb", "body": "https://github.com/mesonbuild/meson\nhttps://github.com/mesonbuild/meson/wiki\n\nhttps://github.com/mesonbuild/meson/wiki/Adding%20new%20projects%20to%20wrapdb\n\nhttp://wrapdb.mesonbuild.com/\n\nMeson simplifies the entire build process for us, it would be great if `SQLiteCpp` is available there. Sqlite is already present in wrapdb, so you could probably use it as dependency. You are also not required to migrate from cmake to meson since it allows patching original sources with custom meson build file.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/97/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/244492949", "body": "You don't even need to build your whole project and replicate every CMake property here to allow inclusion into other projects through meson. Also I'll be happy to help along the way :smile:\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/244492949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/246848484", "body": "@SRombauts I've some free time across this week so I'm thinking to take a shot at this. Let's forget about tests for now and focus primarily on building this lib successfully.\n\nI see 3 directories of interest here - `src` & `sqlite3` & `include/SQLiteCpp`. If I take all `*.cpp` files from source and all `*.h` files from include and the `sqlite3.c` + `sqlite3.h` from sqlite3 directory, is that all which is required for building this project? \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/246848484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/246848888", "body": "and ofcourse the system `sqlite3` dependency.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/246848888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/246853745", "body": "I have another question for you, in the original sources of sqlite, like this - https://www.sqlite.org/2016/sqlite-amalgamation-3140200.zip , there are two extra files apart from `sqlite3.c` and `sqlite3.h`, which are - `shell.c` and `sqlite3ext.h`. These two files aren't included inside this repo, can I assume neither are needed?\n\nAlso `3140200` is shown as latest version, so I've two options, either upload the newest version as well as the one you're including to meson lib-database (allows other projects to share dependencies) or I could use the one you pack with this repo. Which one do you recommend?\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/246853745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/246865633", "body": "I've managed to almost build the whole project + gtest tests. However there is some kind of linker error occurring just after compilation of all units - \n\n```\nSQLiteCpp master \u30a2 mkdir build && cd build && meson ..\nThe Meson build system\nVersion: 0.33.0\nSource dir: /home/agauniyal/projects/SQLiteCpp\nBuild dir: /home/agauniyal/projects/SQLiteCpp/build\nBuild type: native build\nBuild machine cpu family: x86_64\nBuild machine cpu: x86_64\nProject name: isaac-core\nNative cpp compiler: ccache c++ (gcc 6.2.1)\nNative c compiler: ccache cc (gcc 6.2.1)\nDependency threads found: YES\nFound pkg-config: /usr/bin/pkg-config (0.29.1)\nNative dependency sqlite3 found: YES 3.14.1\nDependency GTest found: YES (prebuilt)\nBuild targets in project: 3\nbuild master \u30a2 ninja\n[16/16] Linking target tests/sqlitecpp_tests\nFAILED: tests/sqlitecpp_tests \nccache c++    -o tests/sqlitecpp_tests 'tests/sqlitecpp_tests@exe/Backup_test.cpp.o' 'tests/sqlitecpp_tests@exe/Column_test.cpp.o' 'tests/sqlitecpp_tests@exe/Database_test.cpp.o' 'tests/sqlitecpp_tests@exe/Statement_test.cpp.o' 'tests/sqlitecpp_tests@exe/Transaction_test.cpp.o' 'tests/sqlitecpp_tests@exe/VariadicBind_test.cpp.o' '-Wl,--no-undefined' 'src/libsqlitecpp_lib.a' 'sqlite3/libsql_lib.a' 'sqlite3/libsql_lib.a' '-pthread' '-lgtest' '-lgtest_main' '-lsqlite3' '-lsqlite3' \n/usr/bin/ld: sqlite3/libsql_lib.a(sqlite3.c.o): undefined reference to symbol 'dlclose@@GLIBC_2.2.5'\n/usr/lib/libdl.so.2: error adding symbols: DSO missing from command line\ncollect2: error: ld returned 1 exit status\nninja: build stopped: subcommand failed.\n```\n\nHave you ever seen this happening with your lib before?\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/246865633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/246867449", "body": "and if I don't build it as a static_library - \n\n```\nSQLiteCpp master \u30a2 mkdir build && cd build && LDFLAGS=-Wl,--no-as-needed meson ..\nThe Meson build system\nVersion: 0.33.0\nSource dir: /home/agauniyal/projects/SQLiteCpp\nBuild dir: /home/agauniyal/projects/SQLiteCpp/build\nBuild type: native build\nBuild machine cpu family: x86_64\nBuild machine cpu: x86_64\nProject name: isaac-core\nNative cpp compiler: ccache c++ (gcc 6.2.1)\nNative c compiler: ccache cc (gcc 6.2.1)\nDependency threads found: YES\nFound pkg-config: /usr/bin/pkg-config (0.29.1)\nNative dependency sqlite3 found: YES 3.14.1\nDependency GTest found: YES (prebuilt)\nBuild targets in project: 3\nbuild master \u30a2 ninja\n[14/18] Linking target sqlite3/libsql_lib.so\nFAILED: sqlite3/libsql_lib.so \nccache cc    -o sqlite3/libsql_lib.so 'sqlite3/sql_lib@sha/sqlite3.c.o' '-Wl,--no-undefined' '-Wl,--no-as-needed' '-shared' '-fPIC' '-Wl,-soname,libsql_lib.so' '-pthread' '-lsqlite3' '-Wl,-rpath,/home/agauniyal/projects/SQLiteCpp/build/sqlite3' \nsqlite3/sql_lib@sha/sqlite3.c.o: In function `unixDlOpen':\n/home/agauniyal/projects/SQLiteCpp/build/../sqlite3/sqlite3.c:35185: undefined reference to `dlopen'\nsqlite3/sql_lib@sha/sqlite3.c.o: In function `unixDlError':\n/home/agauniyal/projects/SQLiteCpp/build/../sqlite3/sqlite3.c:35199: undefined reference to `dlerror'\nsqlite3/sql_lib@sha/sqlite3.c.o: In function `unixDlSym':\n/home/agauniyal/projects/SQLiteCpp/build/../sqlite3/sqlite3.c:35225: undefined reference to `dlsym'\nsqlite3/sql_lib@sha/sqlite3.c.o: In function `unixDlClose':\n/home/agauniyal/projects/SQLiteCpp/build/../sqlite3/sqlite3.c:35230: undefined reference to `dlclose'\ncollect2: error: ld returned 1 exit status\nninja: build stopped: subcommand failed.\n```\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/246867449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/246997347", "body": "@SRombauts thankyou for clearing my doubts, I was finally able to build it successfully :smile: \n\n```\nSQLiteCpp master \u30a2 mkdir build && cd build && meson .. && ninja\nThe Meson build system\nVersion: 0.33.0\nSource dir: /home/agauniyal/projects/SQLiteCpp\nBuild dir: /home/agauniyal/projects/SQLiteCpp/build\nBuild type: native build\nBuild machine cpu family: x86_64\nBuild machine cpu: x86_64\nProject name: isaac-core\nNative cpp compiler: ccache c++ (gcc 6.2.1)\nNative c compiler: ccache cc (gcc 6.2.1)\nDependency threads found: YES\nFound pkg-config: /usr/bin/pkg-config (0.29.1)\nNative dependency sqlite3 found: YES 3.14.1\nDependency GTest found: YES (prebuilt)\nLibrary dl found: YES\nBuild targets in project: 3\n[18/18] Linking target tests/sqlitecpp_tests\n\nbuild master \u30a2 ./tests/sqlitecpp_tests\nRunning main() from gtest_main.cc\n[==========] Running 26 tests from 7 test cases.\n[----------] Global test environment set-up.\n[----------] 4 tests from Backup\n[ RUN      ] Backup.initException\n[       OK ] Backup.initException (321 ms)\n[ RUN      ] Backup.executeStepOne\n[       OK ] Backup.executeStepOne (404 ms)\n[ RUN      ] Backup.executeStepAll\n[       OK ] Backup.executeStepAll (402 ms)\n[ RUN      ] Backup.executeStepException\n[       OK ] Backup.executeStepException (480 ms)\n[----------] 4 tests from Backup (1607 ms total)\n\n[----------] 2 tests from Column\n[ RUN      ] Column.basis\n[       OK ] Column.basis (1 ms)\n[ RUN      ] Column.getName\n[       OK ] Column.getName (1 ms)\n[----------] 2 tests from Column (2 ms total)\n\n[----------] 1 test from SQLiteCpp\n[ RUN      ] SQLiteCpp.version\n[       OK ] SQLiteCpp.version (0 ms)\n[----------] 1 test from SQLiteCpp (0 ms total)\n\n[----------] 7 tests from Database\n[ RUN      ] Database.ctorExecCreateDropExist\n[       OK ] Database.ctorExecCreateDropExist (266 ms)\n[ RUN      ] Database.createCloseReopen\n[       OK ] Database.createCloseReopen (114 ms)\n[ RUN      ] Database.inMemory\n[       OK ] Database.inMemory (1 ms)\n[ RUN      ] Database.busyTimeout\n[       OK ] Database.busyTimeout (0 ms)\n[ RUN      ] Database.exec\n[       OK ] Database.exec (1 ms)\n[ RUN      ] Database.execAndGet\n[       OK ] Database.execAndGet (1 ms)\n[ RUN      ] Database.execException\n[       OK ] Database.execException (1 ms)\n[----------] 7 tests from Database (384 ms total)\n\n[----------] 10 tests from Statement\n[ RUN      ] Statement.invalid\n[       OK ] Statement.invalid (0 ms)\n[ RUN      ] Statement.executeStep\n[       OK ] Statement.executeStep (0 ms)\n[ RUN      ] Statement.bindings\n[       OK ] Statement.bindings (1 ms)\n[ RUN      ] Statement.bindNoCopy\n[       OK ] Statement.bindNoCopy (0 ms)\n[ RUN      ] Statement.bindByName\n[       OK ] Statement.bindByName (1 ms)\n[ RUN      ] Statement.bindNoCopyByName\n[       OK ] Statement.bindNoCopyByName (1 ms)\n[ RUN      ] Statement.isColumnNull\n[       OK ] Statement.isColumnNull (0 ms)\n[ RUN      ] Statement.isColumnNullByName\n[       OK ] Statement.isColumnNullByName (1 ms)\n[ RUN      ] Statement.getColumnByName\n[       OK ] Statement.getColumnByName (1 ms)\n[ RUN      ] Statement.getName\n[       OK ] Statement.getName (0 ms)\n[----------] 10 tests from Statement (6 ms total)\n\n[----------] 1 test from Transaction\n[ RUN      ] Transaction.commitRollback\nSQLite exception: near \"DesiredSyntaxError\": syntax error\n[       OK ] Transaction.commitRollback (1 ms)\n[----------] 1 test from Transaction (1 ms total)\n\n[----------] 1 test from VariadicBind\n[ RUN      ] VariadicBind.invalid\n[       OK ] VariadicBind.invalid (1 ms)\n[----------] 1 test from VariadicBind (1 ms total)\n\n[----------] Global test environment tear-down\n[==========] 26 tests from 7 test cases ran. (2001 ms total)\n[  PASSED  ] 26 tests.\n```\n\nThere's just one error along the tests - `SQLite exception: near \"DesiredSyntaxError\": syntax error` , however the tests pass successfully!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/246997347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/248518030", "body": "Everything's finally resolved, just this is remaining - `SQLite exception: near \"DesiredSyntaxError\": syntax error`\n\n@SRombauts if you could clarify how to resolve this, I'll upload sqlitecpp to meson build repository asap \ud83d\udc4d \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/248518030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kassane": {"issues": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/88", "title": "Build as MinGW?", "body": "Hello, how are you?\n\nI would like to know how to build it using only the MinGW?\n\nthx!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/88/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/230577502", "body": "Windows!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/230577502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/231086085", "body": "@SRombauts thx, but help fix it:\n\n`Scanning dependencies of target SQLiteCpp\n[ 12%] Building CXX object CMakeFiles/SQLiteCpp.dir/src/Column.cpp.obj\n[ 25%] Building CXX object CMakeFiles/SQLiteCpp.dir/src/Database.cpp.obj\n[ 37%] Building CXX object CMakeFiles/SQLiteCpp.dir/src/Statement.cpp.obj\n[ 50%] Building CXX object CMakeFiles/SQLiteCpp.dir/src/Transaction.cpp.obj\n[ 62%] Building CXX object CMakeFiles/SQLiteCpp.dir/src/Backup.cpp.obj\n[ 75%] Linking CXX static library libSQLiteCpp.a\n[ 75%] Built target SQLiteCpp\nScanning dependencies of target SQLiteCpp_cpplint\nCMakeFiles\\SQLiteCpp_cpplint.dir\\build.make:56: recipe for target 'CMakeFiles/SQLiteCpp_cpplint' failed\nCMakeFiles\\Makefile2:103: recipe for target 'CMakeFiles/SQLiteCpp_cpplint.dir/all' failed\nMakefile:82: recipe for target 'all' failed\n`\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/231086085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/60", "title": "Sqlite Configuration Options", "body": "Hi SRombauts,\nIt seems helpful to add configuration options in Database's constructor, isn't it?\nPlease see http://www.sqlite.org/c3ref/c_config_getmalloc.html for details.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/60/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/96885350", "body": "Thanks for your advice, S\u00e9bastien. I will handle it this weekend. Hope not too late.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/96885350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/97053375", "body": "Hi SRombauts,\ncode in style `std::string value = query.getColumn(1);` did works, \nand `int id = 0; id = query.getColumn(1);` works too, \nwhile code below doesn't:\n`std::string value = \"\";\nvalue = query.getColumn(1);`\nCompiler(clang)'s issue is `Use of overloaded operator '=' is ambiguous (with operand types 'std::string' (aka 'basic_string<char, char_traits<char>, allocator<char> >') and 'SQLite::Column')`\nI am trying to solve it, and I found something help in link: http://www.cplusplus.com/forum/general/28152/\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/97053375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/97056133", "body": "And you add method `inline operator const std::string() const` to fix an error required by GCC. I have no idea how to solve it now.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/97056133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/106853490", "body": "Here are some mode to use on different occasions:\nSQLITE_CONFIG_SINGLETHREAD \nThis option sets the threading mode to Single-thread.\nSQLITE_CONFIG_MULTITHREAD\nThis option sets the threading mode to Multi-thread.\nSQLITE_CONFIG_SERIALIZED\nThis option sets the threading mode to Serialized.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/106853490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/125064358", "body": "Hi,\nwhen there is a sqlite error, it would be SQLITE_ERROR, SQLITE_ABORT, SQLITE_BUSY or SQLITE_CONSTRAINT, or something others. add error code info in exception will be helpful for error handling.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/125064358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/125064643", "body": "Hi, you are right. I added it in my own project and found it very verbose. And the codes are ugly or poor in performance. \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/125064643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/167173324", "body": "what do you need, @Vienta ?\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/167173324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/167181473", "body": "@Vienta  It is MIT licensed, just use the codes directly as an external part if your project is in c++. \nThere is no cocoapods for it, I think. \nTo build it as a static lib, you can port these codes in a Xcode project and use _xcodebuild_ to generate libs for simulators and devices and then you can archive those libs in different archs as one by _lipo_.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/167181473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "aurelien35": {"issues": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/53", "title": "Build as a DLL ?", "body": "Hi,\n\nI plan to use SQLiteCpp in my project (windows).\n\nIs there any reason to not build SQLiteCpp as a DLL ?\n\nI didn't see any DLL import / export directives, and I prefer to use a DLL due to my project's architecture.\n\nIf you want, I can add the necessary macros.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/53/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/5a8a6e243edd32e8ee45a3d13b60aefcc44d0962", "message": "Removed a warning in release build with Visual Studio"}], "pull_requests": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/pulls/57", "title": "Build as dll", "body": "I've made following changes :\n- added SQLiteCppExport.h header which contains DLL import / export directive for Windows and Linux\n- added the SQLITECPP_DLL macro on all symbols to be exported\n- modified the CMakeList file to add new options\n\nThere is 3 new preprocessor \"DEFINE\" symbols :\n- SQLITECPP_DYNAMIC : \n  => if defined, this mean SQLiteCpp is being build/used as a dynamic library\n- SQLITECPP_EXPORT: \n  => if defined, this mean SQLiteCpp is being BUILD as a dynamic library, and it will EXPORT its symbols\n  => if not defined, this mean SQLiteCpp is being USED as a dynamic library, and it will IMPORT its symbols\n- SQLITECPP_DISABLE_MSVC_DLL_WARNINGS :\n  => if defined, this mean Visual Studio should ignore the DLL export warnings about STL classes. You can ignore that when you build all your solution with the same runtime library. (if you don't do that, you will have very bad time anyway)\n# \n\nI'm not an expert in CMake files, and there is still something to fix in the actual file : the \"SQLITECPP_EXPORT\" is defined when a dynamic library build is asked, but even to build the example.\n\nThe example should not define this symbol because it need to IMPORT the code, not export it.\n\nMy guess is a subdirectory with a specific configuration is needed for every target : SQLite3, SQLiteCpp and Example\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "saaqibz": {"issues": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/39", "title": "SAVEPOINT", "body": "Hi Sebastien,\n\nI ran into an issue where I'm trying to do asynchronous concurrency on my application to keep the UI thread available. However, this ends up causing issues where transactions become embedded.\n\nI believe sqlite does not allow begin and commits to be embedded but it does allow a form of embedded transactions to be supported using SAVEPOINT and RELEASE.\nhttps://www.sqlite.org/lang_savepoint.html\n\nDoes SQLiteCpp support this?\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/39/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/24", "title": "Dealing with multiple inserts", "body": "Hello, Is there a command like executemany() for dealing with multiple inserts?\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/24/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/78fcc0d0507e5cf65e3a7f9c9a5f248c46aa6870", "message": "clearBinding functionality to statement.cpp\n\nclearBinding functionality"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/45379f9325500d79750fed15c091461d99ee065f", "message": "clearBinding\n\nadded clearBinding function"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/52784004", "body": "Thanks for your quick response. That is what I have been doing in the past but I wanted to see if I could do something more efficiently. I know a lot of other libraries had an executemany that tended to be more efficient. Here's one thing I noticed that I ended up doing. Maybe in the future an execute many can be added that utilizes this.\n\nI ended up creating the prepared statement and reusing the same prepared statement resetting the bindings (I also added the wrapper for clearBindings to clear all existing bindings) and iterating just the bind portion.... Below is the section referencing this technique from the documentation for sqlite.\n\nThank you again for making this useful library.\n\n3.0 Binding Parameters and Reusing Prepared Statements\n\nIn prior discussion, it was assumed that each SQL statement is prepared once, evaluated, then destroyed. However, the SQLite allows the same prepared statement to be evaluated multiple times. This is accomplished using the following routines:\n\nsqlite3_reset()\nsqlite3_bind()\nAfter a prepared statement has been evaluated by one or more calls to sqlite3_step(), it can be reset in order to be evaluated again by a call to sqlite3_reset(). Using sqlite3_reset() on an existing prepared statement rather than creating a new prepared statement avoids unnecessary calls to sqlite3_prepare(). In many SQL statements, the time needed to run sqlite3_prepare() equals or exceeds the time needed by sqlite3_step(). So avoiding calls to sqlite3_prepare() can result in a significant performance improvement.\n\nUsually, though, it is not useful to evaluate exactly the same SQL statement more than once. More often, one wants to evaluate similar statements. For example, you might want to evaluate an INSERT statement multiple times though with different values to insert. To accommodate this kind of flexibility, SQLite allows SQL statements to contain parameters which are \"bound\" to values prior to being evaluated. These values can later be changed and the same prepared statement can be evaluated a second time using the new values.\n\nIn SQLite, wherever it is valid to include a string literal, one can use a parameter in one of the following forms:\n\n?\n?NNN\n:AAA\n$AAA\n@AAA\nIn the examples above, NNN is an integer value and AAA is an identifier. A parameter initially has a value of NULL. Prior to calling sqlite3_step() for the first time or immediately after sqlite3_reset(), the application can invoke one of the sqlite3_bind() interfaces to attach values to the parameters. Each call to sqlite3_bind() overrides prior bindings on the same parameter.\n\nAn application is allowed to prepare multiple SQL statements in advance and evaluate them as needed. There is no arbitrary limit to the number of outstanding prepared statements.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/52784004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "polkovnikov-ph": {"issues": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/34", "title": "Better type for getColumn", "body": "It would be better to have `getColumn<T>(n)` syntax, because we need to set the type of the return value anyway. Writing `static_cast<T>(query.getColumn(n))` is way too verbose. You can achieve that by partial specialization of some class with static methods.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/34/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/60148010", "body": "If I remember correctly, UTFnn differ only on the encoding of code points in the different quantity of different (1/2/4 bytes) code units. So the conversion should be possible with [some `codecvt` magic](http://stackoverflow.com/questions/7232710/convert-between-string-u16string-u32string). Though query preparation etc. do not support Unicode at all, the best we can do is to keep them `string`.\n\nProbably I could even make a pull request when I get some time as it doesn't seem too scary right now.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/60148010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gocarlos": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/ed30e7751dc8723aae43c10902e1b01f972c08f7", "message": "style fix"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/2019477b483297f2040ca3e8931517ab0de63f3e", "message": "added better instructions for linux compilation"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xforce": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/cebea884c37d1fa58ee4202c077ee34815223be2", "message": "Add the fix from a3160dcfc2f80f692f3477a67c202ff87f75fa5a also to the bind by name functions"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fekir": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/ec8253236b44f2155e52e83a4401209b7bee9818", "message": "Remove virtual destructor since there are no virtual methods or subclasses"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/1fd32277c16d262049ce35d3f0243f4cb2b2c25f", "message": "Remove unnecessary noexcept identifier from destructors"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/a826dcacc11148a2d0a8c809418e57c6126f745c", "message": "Improve test for constructor consistency"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/b2f059e188b9dd5c0b0b7618fb2a8417abbd6c6a", "message": "Add test for constructor consistency"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/67ac88fb1eec6679219cfb19ef0e489a229b8346", "message": "Add SQLite::Exception constructor that takes const char* in order to avoid possible std::bad_alloc exception\n\nstd::runtime_error provides such overload in c++11, therefore it will make no difference when compiling for c++03, but should provide no harm either"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/94ebe5ced6eb536499819a0d1a3bb63add33bc32", "message": "Add default copy constructor to exception class\n\nThe throw statement may copy the exception, since exception are thrown by value\nHaving const members disables the assignment operator"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/d3a10465b5787e57a413c3c5a3ed82c4edbae687", "message": "Remove unused variable"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/db156e6282dc54b8d6e9bff8a44e381aa3b44a4b", "message": "Remove noexcept from setBusyTimeout since it may throw (it is also documented)"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/697929cfbe250afb8bb3569be1fb9fe6ef95bfc4", "message": "Remove noexcept since std::string constructor may throw"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/21ead7c5a42c934988bfb9d0b641d4cde8652ef0", "message": "Ensure that operator<< correctly prints strings with embedded '\\0'"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "drivehappy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/d39ff3475ec1d8d2220fa7f65bbb5433c04c6380", "message": "Fixing tab indentation to use spaces."}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/6adc4cd5a81be36bb4aee243928ae7c205a53931", "message": "Fixing unused parameter warning under Clang."}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/218aca1b134f86f1f96da663510c6e438b6f879f", "message": "Fixing warning under MSVC."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vbraun": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/a537dd637530988a08b464c988d43e8ddb489bb0", "message": "Make cpplint.py Python-3 compatible"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "timrae": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/2123ef034850039c54b47d493ec09907dedb797b", "message": "Use pedantic warnings\n\nFrom the gcc manual:\nIssue all the warnings demanded by strict ISO C and ISO C++; reject all programs that use forbidden extensions, and some other programs that do not follow ISO C and ISO C++. For ISO C, follows the version of the ISO C standard specified by any -std option used.\n\nNote: ISO C++98 doesn't support the \"long long\" data type, so we disable that warning\n-Winit-self can be removed as it's enabled by -Wall"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/400ab71fa338ac0ccd9617f24e626902e190e8a9", "message": "Fix unused parameter warning"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/b23f2e155f4de21d24cabd72fdb0d994952acf02", "message": "Use -Wextra flag with gcc\n\nFrom the manual:\nThis enables some extra warning flags that are not enabled by -Wall. (This option used to be called -W. The older name is still supported, but the newer name is more descriptive.)\n\n-Wclobbered\n-Wempty-body\n-Wignored-qualifiers\n-Wimplicit-fallthrough=3\n-Wmissing-field-initializers\n-Wmissing-parameter-type (C only)\n-Wold-style-declaration (C only)\n-Woverride-init\n-Wsign-compare (C only)\n-Wtype-limits\n-Wuninitialized\n-Wshift-negative-value (in C++03 and in C99 and newer)\n-Wunused-parameter (only with -Wunused or -Wall)\n-Wunused-but-set-parameter (only with -Wunused or -Wall)"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/4c339031f062c73abe0081207e4ff0cfa0e9e17c", "message": "Remove const from Database::isUnencrypted() return type\nCompiling with gcc pedantic mode was leading to a warning: \"type qualifiers ignored on function return type\""}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/8387b594eb42f089c0a5b4979bc62b152efff5db", "message": "Add install step"}], "pull_requests": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/pulls/108", "title": "Use ExternalProject for googletest", "body": "There were some TODO comments about using the official github directly from the cmake file, and due to some issues with cmake I can't use projects with submodules in my organization, so I went ahead and updated the cmake file.", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/264786322", "body": "Yeah it's the yml files, I'll fix them now", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/264786322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/264787735", "body": "Ugh, it looks like it's still failing on the Windows builds because I used `pthread`. I'll look into what the multi-platform lib should be", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/264787735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/pulls/comments/90845074", "body": "@SRombauts \r\nSorry I don't have access to a Windows C++ environment, so I don't know where these gtest binaries are being generated and what they're called there. On linux they're called `libgtest.a` and `libgtest_main.a`. Would you be able to check what's happening on Windows?", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/pulls/comments/90845074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/pulls/comments/109080049", "body": "`const bool` return type results in the following gcc warning:\r\n`type qualifiers ignored on function return type`\r\n\r\nSince you are returning by value the `const` is unnecessary.", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/pulls/comments/109080049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/pulls/comments/109083451", "body": "Patch submitted in #119", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/pulls/comments/109083451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "dunkelfalke": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/f4a7e7c7ea02563a1165fc764b9173ff99d171a6", "message": "Update Statement.h\n\nMissing parameter name in the documentation comment"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dend456": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/f01a644dc040ca37f7d3c3ac96bd353b5fbccf52", "message": "Added convenience functions for constructing objects from a row"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Yanpas": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/870bb9963f9a2fba8dadc5bbdf2ad8ff8a647f0e", "message": "linked SQLiteCpp to sqlite3\n\nNow there is no need to link each target ot both libs"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jowr": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/dbd31fb56b7a4b94244c03a1156b192700262afd", "message": "Fixed some compiler warnings"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/d26bd2cb8aeba00908d4b0445c07f2783b58f096", "message": "Added tests for the encrypted database"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/498525bb2653ad8d7824b56029304f9d44bc7287", "message": "Final modifications for cpplint and gcc"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/f5a25167a474debd51e24e04cc0eb8d6f7df1f17", "message": "Debugging GCC build errors remotely is not fun..."}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/a7d5ea4c2b93a4b08428b972d49f8de43eca6e00", "message": "Trying to gcc happy"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/823828fc9e1f511d1ad1cad80f42e29526288c88", "message": "Made encryption test static and fixed the encryption docs"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/02f8fe19c0fa18adc3f50e496bbe887154cfc799", "message": "Fixed some documentation and corrected the encryption detection."}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/685ff293c52f90ba441454c4175c12760c4958df", "message": "moved the key handling to a new function, added a check for an encrypted database"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/611ab224588e2f64db2c1b24ac8e45c55c086182", "message": "Added ability to open encrypted databases."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/264470047", "body": "Hi, it might be possible. The only problem is that **all** queries on encrypted databases fail until one calls `sqlite3_key` with the correct password. This might cause `setBusyTimeout` to fail, but I have not tested that. That is why I added before that call.", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/264470047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/pulls/comments/109091395", "body": "Thanks for reviewing the code!", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/pulls/comments/109091395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Nemo1369": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/51885d7aa6f9078acdb51a2f09ffc9d16fa9366f", "message": "Redundant const specifier removed"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Asriwi": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/4b4bc3f17a0440a448c826de8dbc8ed470c1850e", "message": "Link libssp when targetted"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/243231564", "body": "Closed as this caused build issues, it's probably more sensible to deal with this in the project targetting SQLiteCpp.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/243231564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/243274710", "body": "For any who might read this, I fixed this with the following addition to my CMakeLists.txt.\n\n```\nif (UNIX)\n    target_link_libraries( <name> pthread )\n    if (NOT APPLE)\n        target_link_libraries( <name> dl )\n    endif ()\nelseif (MSYS)\n    target_link_libraries( <name> ssp )\nendif ()\n```\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/243274710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/243566856", "body": "Hi @SRombauts,\n\nI've applied this change to the SQLITECPP_BUILD_EXAMPLES option to cover builds of the executable under MSYS and MINGW.\n\nI'm using the same linking as the examples (given below) for my own project with success.\n\n```\n# Link target with pthread and dl for linux\nif (UNIX)\n    target_link_libraries(SQLiteCpp_example1 pthread)\n    if (NOT APPLE)\n        target_link_libraries(SQLiteCpp_example1 dl)\n    endif ()\nelseif (MSYS OR MINGW)\n    target_link_libraries(SQLiteCpp_example1 ssp)\nendif ()\n```\n\nI've tested this on:\n- Ubuntu 16.04.1 using g++\n- MSYS2 on Windows 10 using g++ and clang (both mingw64)\n- MinGW on Windows 10 using g++ (mingw64)\n- VS14 on Windows 10\n- Travis with the included travis.yml\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/243566856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "snej": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/30e285ff89b7395190a1c46b8e62665f02d77083", "message": "Fixed link errors calling Exception::getErrorCode()\n\ngetErrorCode() and getExtendedErrorCode()'s implementations were\naccidentally declared as inline in the .cpp file. This causes the\ncompiler to not generate any code for them, resulting in link errors\nwhen a client calls them.\n\nFixed by moving the implementations into the header, where they need to\nbe if they're inline."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DouglasHeriot": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/9a07f3918dcb4016a808631bd05d2dd6c5e96cec", "message": "Fix build on Linux, including cpplint warnings."}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/a84c04aada9ace6efb54373ab792cb27dae7125d", "message": "Add bindNoCopy methods to allow binding std::string with SQLITE_STATIC.\n\nShould be safe, as long as you can guarantee the std::string exists while executing the query.\n\nAdded an accessor to Column that returns a std::string, that can handle BLOB or TEXT values that contain null-bytes.\n\nAlso more binding & Column cast support for uint32_t - fixes ambiguous overload errors when using unsigned-integer types.\nNote that I didn't use uint64_t, because unsigned 64-bit integers doesn't fit into SQLite (except for using int64_t and dealing with overflow with custom functions).\n\nAdded a C++11 move constructor to Statement, to allow storing it inside STL containers (eg. vector)."}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/2cd31179f4060f357de0f1def250f302b549394e", "message": "Use new Exception constructors everywhere appropriate.\n\nFix compiling with C++11.\nAdded public assessor methods to Exception class.\nAdded more Exception constructors as needed."}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/832e89440f2586a2b027dfa56e5d14baf9ecd188", "message": "Better exception messages when statements fail\n\nAdded new constructor to Exception that takes sqlite3* pointer, allowing for getting more information out. Makes it much easier to debug syntax errors in prepared statements, for example."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/221763663", "body": "I think I\u2019ve fixed everything now:\n- Oops, I only tested against my own app, which was using C++11. Simplified that code now, and tested properly.\n- Added public accessors\n- I think you\u2019re right that `sqlite3_errmsg` supersedes `sqlite3_errstr`, sometimes `errmsg` is the same as `errstr`, but often it has much more detail (ie. syntax errors) \u2013 so, now it only uses `errmsg` (but there's an accessor for `errstr` if needed)\n- Used these new `Exception` constructors everywhere appropriate\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/221763663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/228554510", "body": "Fixed the build errors and cpplint style issues.\nMight have a look at writing some more tests, especially covering edge-cases like dealing with null-bytes inside strings.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/228554510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/230090530", "body": "Sorry, going to be a little while before I get back to this. Deadlines to meet over the next week, and then later I\u2019ll try and come back and look at it.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/230090530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "pauldreik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/356c50a342608eea353742e89e2eddade9d90a8a", "message": "do not run variadic bind example for c++ older than c++14"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/9234eb32164fd34fc820be8325a5e9298a66816d", "message": "polish before pull request"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/4a92dde562a670f4493e561770f561b2c284391f", "message": "dont include std headers inside our own namespace"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/808a9c894e0efd8fe228787a5b8b7c055b179372", "message": "add unit test for variadic bind"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/3022d50b38e96327841145eb4f039c826b5694eb", "message": "initial submission of variadic template for bind\n\ntested with\nCXXFLAGS=\"-std=c++14\" cmake\nwith gcc 5.3.1."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bretsko": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/b6e73cefd1bb88c7d0eb809548d71ea57ff82926", "message": "fixed Readme"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/215341950", "body": "No problem, the great work you do open source is more important than polishing readmes.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/215341950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "hongshibao": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/df995f71a6af56ff8ff58a91a3abc41fc3073fc4", "message": "Add executeStepException testcase"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/e8f956be22d0931b73d4352c953cb2e6587fbd50", "message": "Add Backup test"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/08716b8938ed6715a476f50d88d22f23fa3bff2b", "message": "Add comments"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/5b312edb31f5b42c3089be8e6a3cb63c6e6f0a6f", "message": "Add Comments"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/c9dcf64cd082d46bad7d9265bfac3c846ae38980", "message": "Add throw exception case in executeStep\nAdd Comments"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/05d304b7c9f594f4b40ac6fbe398e870fc2adb8f", "message": "add Backup class"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/152133918", "body": "You're welcome. Also thanks for the code view and the open-source SQLiteCpp : )\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/152133918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "nitric1": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/d7603db7d3c38721a47592711484bee8e5c2acd2", "message": "Fix Column::operator std::string to work properly on Visual C++ 2015"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gitter-badger": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/94d40c1d1d14c8112b43444fb11607f165656d67", "message": "Added Gitter badge"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "richardj-bsquare": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/368049a613198ac7009e018f6bfa681b60905590", "message": "Added support for extension loading"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "onur": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/e55fffefd7b80d692c22693682725bb3de2af3a5", "message": "Use sqlite_errstr instead of sqlite3_errmsg\n\nmpSQLite is free'd with sqlite3_close. It's no more accesible.\nFixes: #48"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/99200829", "body": "This one is result of example provided by project: https://gist.github.com/onuraslan/bd01467fb8774e2233f8\n\nCalling sqlite3_errmsg after sqlite3_close is causing this problem. Removing line 77: SQLITECPP_ASSERT fixed the issue.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/99200829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/99761740", "body": "I see. Yes, it's much better to use a static message in this case.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/99761740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "JackssSparrow": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/b6fdf50669eb0af70981c0dc3253a59856115f8a", "message": "Fix issue: Column by name #23\n\nadd method `Column getColumn(const char* aName);` in Statement.h"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/134efd639244d94ffd112f97e80e6d93651ddb5f", "message": "Update Statement.cpp"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kartikkumar": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/b6eb04e37c4b40ab6e7c1948196dd4e04adce721", "message": "Changes paths to example db and logo to absolute paths using helper function to extract path to examples sub-directory."}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/191a76fbef3719c5c2abcce848a474ede6c39986", "message": "Update Doxygen config file."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/20045874", "body": "Hi,\n\nThanks for getting back to me. I fully understand and yea, it would enhance the quality of the project further. A future TODO item in any case then :).\n\nThanks,\n\nKartik\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/20045874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/38933525", "body": "Awesome! Thanks for the quick action!\n\nKartik\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/38933525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/38935181", "body": "Great!\n\nHope other people find it useful too. I find it useful because it means\nthat I only need one copy of SQLiteCpp built on my computer and I can link\nto it from any number of projects.\n\nThanks!\n\nKartik\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/38935181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/38935839", "body": "@SRombauts: yes, I noticed, great! I see that you're using the Google\ntesting framework. I've used the Boost unit testing framework a lot but it\ndoesn't look like it's difficult to implement tests in GTest.\n\nIf it's helpful, I can work on a few simple unit tests too. Might be good\nin that case to divide tasks.\n\nGood work!\n\nKartik\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/38935839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/38942038", "body": "Ok sounds good. I'll see if I have some time in the coming weeks to add a few simple tests along the lines of the ones you've added already.\n\nRegards,\n\nKartik\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/38942038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/86515999", "body": "Ok, so looks like once you've created a pull request, you can't remove the comparison branch :)\n\nSo I've put the commit back in the branch on my fork. You should see the diff now since I can see it.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/86515999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/86516636", "body": "Strangely, even though `git diff` confirms that the online difference between upstream master and the branch in my fork are changes to `examples/example1/main.cpp`, it shows 3 other files modified in this pull request. Don't know what's causing that, but the only changes I'm suggesting are in the `examples/example1/main.cpp` file.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/86516636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/86621562", "body": "Thanks for the merge!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/86621562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/98547404", "body": "@SRombauts yep, good work! The unit test suite is pretty comprehensive from what I can see.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/98547404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "matthin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/a21f8b705a8314b0fcc1741de24d53fb7f12aa66", "message": "Fix small spelling mistake"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MariadeAnton": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/2e6482e993eb38dc080ffece149c1048a8f3ebc9", "message": "added biicode support"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/72016595", "body": "Would you rather do it with Visual Studio? Need help setting up your appveyor account? \n\nJust let me know :) \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/72016595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/75282487", "body": "New PR with Sqlite newest version :)\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/75282487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/76388296", "body": "Have you checked this? thanks!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/76388296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/84089132", "body": "Sure, I get that :) - I'll split them asap and remove the appveyor file. \n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/84089132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/85602986", "body": "Opened 2 PR to split things.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/85602986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/85920452", "body": "I noticed -> but I'm not sure what could be happening, could you re-trigger the build? \n\nAppveyor says: fatal: unable to connect to github.com:\ngithub.com[0: 192.30.252.129]: errno=No such file or directory\n\nand Travis-CI: 100% tests passed, 0 tests failed out of 2 \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/85920452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/86037333", "body": "Thanks @SRombauts!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/86037333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "patflick": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/c114309550a9319bca774587643bb1742b971616", "message": "deactivating optional build settings"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/32109033", "body": "Hi SRombauts,\n\nmakes perfect sense. I am aware of those issues.\n\nSo instead of offering the API in the style\n\n```\nvoid myfunction(std::string str);\n```\n\nI would do\n\n```\nvoid myfunction(const char* str) { // something}\n\n// Note the pass by reference\ninline void myfunction(std::string& str) { myfunction(str.c_str())}\n```\n\nThis would implement a `std::string` API without any drawbacks. Did I miss something?\n\nDefinitions of constructors would probably have to be copied completely for proper C++03 compatibility.\n\nDo you agree?\nIf you do I will throw something together and let you review a pull request later.\n\nCheers\nPatrick\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/32109033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/34345511", "body": "No problem at all. Thank you a lot for this library, very helpful and well designed!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/34345511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "AndyLing": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/bb7a047d52835911ab5fc3140c6bf40bdc91d16e", "message": "Fixed whitespace issues"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/4e770eb7415235445dc7e5bac4db6e8929c33c1d", "message": "Statement now stores the status of the last operation so it can be checked in the pointer destructor"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/56013590", "body": "Yes, although my reading of the finalize documentation suggests \"normal\" is to return the same error as the last execute error. So it may be good enough to just remember the return result of the last statement operation and only do an assert if finalize returns something different. This would certainly be a good start.\n\nThanks for looking into this.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/56013590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/56158985", "body": "Done (I hope :^)\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/56158985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "madmaxoft": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/e17d77245b340f2709e74fa699a5d7aca5116faf", "message": "Fix for clang warning about Column's implicit constructor.\n\n>> definition of implicit copy constructor for 'Column' is deprecated because it has a user-declared destructor [-Wdeprecated] <<"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/203c2fb68bbf871eaf4ca98756a113d74d620dea", "message": "Removed weird GCC flags causing problems."}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/commits/27b9d111818af3b05bcf4153bb6e380fe1dd6816", "message": "Added option SQLITECPP_INTERNAL_SQLITE.\n\nThis makes it possible to disable the internal sqlite library for builds that already get the library from elsewhere."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/144701509", "body": "Sorry, this wasn't meant to go in the upstream repo.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/144701509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "Aykelith": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/24882032", "body": "I have Linux Mint 15 - GCC 4.7.3\nHope to resolve the errors because your code is really clean and I want to use it in my future projects :D .\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/24882032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/24912594", "body": "Yes, I use 64bit Mint distro with sources from here/GitHub.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/24912594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/25166108", "body": "Yes, I followed your intructions and now works. I downloaded the lib from here/GitHub.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/25166108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/30233719", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/30233719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/30258622", "body": "Tried your example and have the same errors.\nTried to define SQLITECPP_ENABLE_ASSERT_HANDLER and write the function but same errors.\nTried to verify if I have defined SQLITECPP_ENABLE_ASSERT_HANDLER, but was not defined.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/30258622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/30319376", "body": "Tried but same results so I removed add_definitions(-DSQLITECPP_ENABLE_ASSERT_HANDLER) from CMake and remaked and work. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/30319376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/31950094", "body": "Where should I modify? I tryed to remove -rdynamic but I got errors to the same file but reffering to #include <sqlite3.h>.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/31950094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/32051857", "body": "Managed to create .a file, but from what I know I need .dll for Windows. I will come back with more information about my progress.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/32051857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/32058046", "body": "I resolved the problem... Well, was pretty hard to resolve but in a final I resolved the problem... If you want I can fork and send the cmake files( in 2-3 days because now that I resolved the problem need to finish the project), but I want to say that I created shared libraries, so would be nice if you can add an option in cmake for creating shared libraries, especially for users of MinGW.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/32058046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/218451955", "body": "Tried with the last update, same problem.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/218451955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/218465385", "body": "Thanks, it worked.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/218465385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "breezewalker": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/27690024", "body": "hi, SRombauts.\nThank you for your effort very much. It's a good idead to  offer an assert callback.\nJust like you said,  when the database is already in a corrupt state, nothing can be done\n to handle correctly the case. So now I only ignore this error in Release version, and\nfinding the reason why the database is corrupted.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/27690024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "akamyshanov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/39223800", "body": "@SRombauts, works now. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/39223800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hwiesmann": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/77761443", "body": "Hi S\u00e9bastien,\n\nthanks for the fix!\nRegards,\nHartwig\n\n> Am 08.03.2015 um 12:20 schrieb S\u00e9bastien Rombauts notifications@github.com:\n> \n> Sorry for the very unusual delay, I was busy with my family and other projects!\n> I've looked into this and decided to clean up the Statement class. I will remove the mLastStatus that is not always correct, and add an errcode() method (both to Database and Statement classes)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub https://github.com/SRombauts/SQLiteCpp/issues/37#issuecomment-77744057.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/77761443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "worktycho": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/97146010", "body": "Also with gcc and libstdc++ the following code fails as ambigous:\n`int64_t id = query.getColumn(1);`\nBecause libstdc++ uses longs for fixed width types, whereas sqlite uses long longs.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/97146010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ScottKaiGu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/97637501", "body": "i encounter a lot of #define SQLITE_BUSY         5   errors.\nis there any recommended way to use SQLiteCpp in a Multithread environment?\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/97637501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/97843331", "body": "oh, sorry didn't find it.\nBTW, i have to set it every time. how about add an argument to Database's constructor?\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/97843331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "andilem": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/135743105", "body": "Yes, I agree completely.  I'm sorry for creating this duplicate.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/135743105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "unphased": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/136057645", "body": "So I follow the readme instructions with cmake, but I get `No tests were found!!!`\n\nAny tips?\n\nLinux here\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/136057645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/136159097", "body": "(I think that a nudge to install git submodules should be somewhere in the readme)\n\nOK, after getting googletest, running `./build.sh` from the main dir worked.\n\nThe steps provided in the instructions don't work though.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/136159097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gennesseaux": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/144960105", "body": "Thanks for your work.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/144960105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rajko-d": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/158185477", "body": "Builds but when run it said: Caught unhandled exception,terminating.Thanks for a really quick reply.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/158185477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/158228372", "body": "Thanks again for your help with removing the flag '-fstack-protector' from the CMakeLists.txt file everything works great. Subsequent errors are result of my blindness :)\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/158228372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/158519211", "body": "Thanks.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/158519211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "NadjibR": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/167129069", "body": "Yes this is what I meant in my mail. Catch only a sp\u00e9cific error, or send the error code to the exception block.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/167129069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Vienta": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/167178159", "body": "@HighSparrow   I have a project want to use c++ sqlite lib for cross-platform.Then I find this lib.Do you have any advices?\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/167178159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/167183795", "body": "@HighSparrow  \nThx for you advice.I'll try it.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/167183795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "xTachyon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/172915356", "body": "Hello ! Thanks for your response.\n\nI will see if I can do anything. I am still not sure if I'll go for adding the support or not.\n\nWhat about std::u16string ?\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/172915356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bidasknakayama": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/194250933", "body": "I still have this problem.\n\nI am using sqlite3.a ( I build by myself )...\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/194250933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/194259952", "body": "sorry, I read this .\nand I could build with the flag !\nhttp://source.online.free.fr/Linux_HowToCompileSQLite.html\nthank you. I will enjoy code : )\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/194259952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "zhouxiaoxiaoxujian": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/195379359", "body": "@4brunu  You should set 'Header Search Paths' like 'your_path_to/deps/SQLiteCpp/include' in xcode 'Building settings'.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/195379359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "DZoki019": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/212385015", "body": "Thanks a lot. I should learn more about CMake.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/212385015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Schwertspize": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/213676027", "body": "Thank you! (I knew it wasn't a serious code problem (or I thought it wasn't) but I only saw the \"not declared\" messages) \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/213676027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/213688542", "body": "I am now getting errors with gtest.h\n\nany way to skip the tests or what do i have to enter in my include path?\n\n```\n[armeabi] Compile++ thumb: Cuberite <= Database_test.cpp\ncuberite-android/jni/lib/SQLiteCpp/tests/Database_test.cpp:14:25: fatal error: gtest/gtest.h: No such file or directory\n #include <gtest/gtest.h>\n                         ^\ncompilation terminated.\nandroid-ndk-r11b/build/core/build-binary.mk:462: recipe for target 'cuberite-android/obj/local/armeabi/objs/Cuberite/lib/SQLiteCpp/tests/Database_test.o' failed\nmake: *** [cuberite-android/obj/local/armeabi/objs/Cuberite/lib/SQLiteCpp/tests/Database_test.o] Error 1\n```\n\nedit: maybe i can fix it by excluding Database_test.cpp if its not necessary\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/213688542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/213689100", "body": "at last, i found out that i dont even have to compile the libs, just including them is enough :stuck_out_tongue: \n\nthank you!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/213689100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "coveralls": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/215337889", "body": "[![Coverage Status](https://coveralls.io/builds/5966259/badge)](https://coveralls.io/builds/5966259)\n\nCoverage remained the same at 0.0% when pulling **b6e73cefd1bb88c7d0eb809548d71ea57ff82926 on bretsko:master** into **c0583498569c36f128e10b3c5bb236c65e6cde17 on SRombauts:master**.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/215337889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/221762767", "body": "[![Coverage Status](https://coveralls.io/builds/6338703/badge)](https://coveralls.io/builds/6338703)\n\nCoverage remained the same at 0.0% when pulling **2cd31179f4060f357de0f1def250f302b549394e on DouglasHeriot:exception** into **b55f521ca4cf3c9065bbeb1ef67c33d3aae61ff7 on SRombauts:master**.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/221762767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/226288162", "body": "[![Coverage Status](https://coveralls.io/builds/6613201/badge)](https://coveralls.io/builds/6613201)\n\nCoverage remained the same at 0.0% when pulling **356c50a342608eea353742e89e2eddade9d90a8a on pauldreik:master** into **bf61578f596bc67461b186af5a05e6f9295ce102 on SRombauts:master**.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/226288162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/228552463", "body": "[![Coverage Status](https://coveralls.io/builds/6751474/badge)](https://coveralls.io/builds/6751474)\n\nCoverage increased (+16.3%) to 92.288% when pulling **a3ea94c7b26b4dfba5887852993815867371b5e8 on DouglasHeriot:bindNoCopy** into **50501a41e2acb255e7f63a3d11d391c9f1c17d1b on SRombauts:master**.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/228552463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/228675369", "body": "[![Coverage Status](https://coveralls.io/builds/6760766/badge)](https://coveralls.io/builds/6760766)\n\nCoverage remained the same at 75.989% when pulling **3bdc41ab5cda7d584e16dbae5178fd5426502c95 on pauldreik:pullrequests/buildvariants** into **50501a41e2acb255e7f63a3d11d391c9f1c17d1b on SRombauts:master**.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/228675369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/231701883", "body": "[![Coverage Status](https://coveralls.io/builds/6948453/badge)](https://coveralls.io/builds/6948453)\n\nCoverage remained the same at 97.368% when pulling **d78c4d571398d5b7288e430847d19bad0d582da6 on 4brunu:master** into **57d991b85eb480e1e17053799322d2ad0f727642 on SRombauts:master**.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/231701883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/232982616", "body": "[![Coverage Status](https://coveralls.io/builds/7025142/badge)](https://coveralls.io/builds/7025142)\n\nCoverage increased (+0.06%) to 97.43% when pulling **f022c6af60ef3d09a8ef4c9db45149284cff2650 on 4brunu:master** into **401b7361ed7b7cfa8b02b86a9a280d5210bac762 on SRombauts:master**.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/232982616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/237719442", "body": "[![Coverage Status](https://coveralls.io/builds/7315039/badge)](https://coveralls.io/builds/7315039)\n\nCoverage decreased (-0.5%) to 96.984% when pulling **30e285ff89b7395190a1c46b8e62665f02d77083 on couchbasedeps:master** into **9d1ea823137fc84aa0f44436be945053bbcde481 on SRombauts:master**.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/237719442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/243574051", "body": "[![Coverage Status](https://coveralls.io/builds/7676144/badge)](https://coveralls.io/builds/7676144)\n\nCoverage remained the same at 96.984% when pulling **acbad052575ff5ac7fbfc21c9cc306be1508c3f5 on Asriwi:master** into **d04c8699d25b74c1d934d788320daec0b986b505 on SRombauts:master**.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/243574051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/243577886", "body": "[![Coverage Status](https://coveralls.io/builds/7676257/badge)](https://coveralls.io/builds/7676257)\n\nCoverage remained the same at 96.984% when pulling **acbad052575ff5ac7fbfc21c9cc306be1508c3f5 on Asriwi:master** into **d04c8699d25b74c1d934d788320daec0b986b505 on SRombauts:master**.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/243577886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/245881161", "body": "[![Coverage Status](https://coveralls.io/builds/7814323/badge)](https://coveralls.io/builds/7814323)\n\nCoverage remained the same at 96.984% when pulling **51885d7aa6f9078acdb51a2f09ffc9d16fa9366f on Nemo1369:master** into **6d1806b2e49ecec1d793ca08d0fb0aeeab575617 on SRombauts:master**.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/245881161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/264413683", "body": "\n[![Coverage Status](https://coveralls.io/builds/9091207/badge)](https://coveralls.io/builds/9091207)\n\nCoverage decreased (-1.3%) to 95.672% when pulling **611ab224588e2f64db2c1b24ac8e45c55c086182 on jowr:master** into **b6512c4c6fbb964c6889387234d8a13a71b2a817 on SRombauts:master**.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/264413683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/264795813", "body": "\n[![Coverage Status](https://coveralls.io/builds/9126538/badge)](https://coveralls.io/builds/9126538)\n\nCoverage decreased (-7.7%) to 89.307% when pulling **621596812c2057d9ee42fa811d459688afe1e84d on timrae:use-gtest-github** into **13d12f1e48550ad16c0d6192b9a9ebf103ad6917 on SRombauts:master**.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/264795813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/264796782", "body": "\n[![Coverage Status](https://coveralls.io/builds/9126591/badge)](https://coveralls.io/builds/9126591)\n\nCoverage decreased (-7.7%) to 89.307% when pulling **e241ede87461a3b49d94010c163960797d8b4515 on timrae:use-gtest-github** into **13d12f1e48550ad16c0d6192b9a9ebf103ad6917 on SRombauts:master**.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/264796782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/264828624", "body": "\n[![Coverage Status](https://coveralls.io/builds/9128470/badge)](https://coveralls.io/builds/9128470)\n\nCoverage decreased (-7.7%) to 89.307% when pulling **45b9474fc15929817d513cfd9f1d4aa57e004520 on timrae:use-gtest-github** into **13d12f1e48550ad16c0d6192b9a9ebf103ad6917 on SRombauts:master**.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/264828624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "MrDini123": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/221684604", "body": "Thanks a lot man!\n\nIt solved the problem and saved my life! :)\n\nI have a noob question, So sorry for that, but I Can't found any article or blog article about that. So how Can I install it after the \"cmake --build ./\"?\n\nPs: UR link with the build.sh gives me a 404, not found error.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/221684604/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Alexhuszagh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/230632137", "body": "@kassane It works using MSYS (MinGW in a DLL-based Cygwin-like shell, but allows for distributable executables) with the following directions:\n\nFirst, open \"CMakeLists.txt\" and comment out all the CPPLint lines.\n\n```\ncmake .. -G\"MSYS Makefiles\"\nmake\n```\n\nI'm assuming the same should also work in a standard MinGW build environment, only swapping \"MSYS Makefiles\" with \"MinGW Makefiles\".\n\nBest of luck.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/230632137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/230671858", "body": "@SRombauts Ah thank you, my mistake.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/230671858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "giumas": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233757016", "body": "The changes solved my issue, so I don't need anymore to tweak the library's CMake. \n\nThank for having been so responsive!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/233757016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "xsacha": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/236050168", "body": "If you were to make this function, would it be useful to have a bool option to start transaction and end transaction around the execution?\nRight now I have a function myself that does this once per second.\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/236050168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/236131633", "body": "I just mean to have:\n\ndb->exec(\"BEGIN\");\nquery->reset();\nfor (auto statement: collection)\n{\n    // bind everything in statement\n    query->bind(..);\n}\ndb->exec(\"END\");\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/236131633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "galli-leo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/239629176", "body": "Nevermind, I found it out:\n\n```\nmkdir build64\ncd build64\ncmake -G \"Visual Studio 12 2013 Win64\" ..\n```\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/239629176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "beraldofilippo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/244324817", "body": "Thanks! This will be for sure  a useful resource for everyone!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/244324817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/244900310", "body": "Great! Thanks!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/issues/comments/244900310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "NachoSoto": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/comments/4677643", "body": "Great! Thank you so much!\n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/comments/4677643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jeiting": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/comments/13651716", "body": ":tiger2: \n", "reactions": {"url": "https://api.github.com/repos/SRombauts/SQLiteCpp/comments/13651716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}}}}